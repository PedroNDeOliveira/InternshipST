
x-cube-n6-ai-people-detection-tracking-dk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000221f4  34000750  34000750  00000750  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  34022960  34022960  00022960  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00080698  34022980  34022980  00022980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .version      0000000c  340a3018  340a3018  000a3018  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  340a3024  340a3024  000a3414  2**0
                  CONTENTS
  6 .ARM          00000008  340a3024  340a3024  000a3024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  340a302c  340a3414  000a3414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  340a302c  340a302c  000a302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  340a3030  340a3030  000a3030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000003e0  340a3034  340a3034  000a3034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000ed100  340a3420  340a3420  000a3414  2**5
                  ALLOC
 12 ._user_heap_stack 00001200  34190520  34190520  000a3414  2**0
                  ALLOC
 13 .psram_section 005b6800  91000000  91000000  000a4000  2**5
                  ALLOC
 14 .ARM.attributes 0000003a  00000000  00000000  000a3414  2**0
                  CONTENTS, READONLY
 15 .debug_info   000a9b60  00000000  00000000  000a344e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000f2f6  00000000  00000000  0014cfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00041478  00000000  00000000  0015c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004230  00000000  00000000  0019d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000059d1  00000000  00000000  001a1950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0009d035  00000000  00000000  001a7321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00080985  00000000  00000000  00244356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    003e5b4e  00000000  00000000  002c4cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000c9  00000000  00000000  006aa829  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000e318  00000000  00000000  006aa8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000b4  00000000  00000000  006b8c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	340a3420 	.word	0x340a3420
3400076c:	00000000 	.word	0x00000000
34000770:	340228d8 	.word	0x340228d8

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	340a3424 	.word	0x340a3424
3400078c:	340228d8 	.word	0x340228d8

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <aKNCUkZSff>:
340007a0:	ed90 5aad 	vldr	s10, [r0, #692]	@ 0x2b4
340007a4:	b530      	push	{r4, r5, lr}
340007a6:	ed2d 8b10 	vpush	{d8-d15}
340007aa:	ed90 7ba8 	vldr	d7, [r0, #672]	@ 0x2a0
340007ae:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
340007b2:	b089      	sub	sp, #36	@ 0x24
340007b4:	ed8d 7b00 	vstr	d7, [sp]
340007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340007bc:	ed90 7ba4 	vldr	d7, [r0, #656]	@ 0x290
340007c0:	4604      	mov	r4, r0
340007c2:	ed91 4a01 	vldr	s8, [r1, #4]
340007c6:	ed91 2a00 	vldr	s4, [r1]
340007ca:	ed91 fb02 	vldr	d15, [r1, #8]
340007ce:	ed91 eb04 	vldr	d14, [r1, #16]
340007d2:	ed90 3b12 	vldr	d3, [r0, #72]	@ 0x48
340007d6:	ed90 cbaa 	vldr	d12, [r0, #680]	@ 0x2a8
340007da:	ed90 bb16 	vldr	d11, [r0, #88]	@ 0x58
340007de:	ed8d 7b04 	vstr	d7, [sp, #16]
340007e2:	ed90 6ba6 	vldr	d6, [r0, #664]	@ 0x298
340007e6:	dc09      	bgt.n	340007fc <aKNCUkZSff+0x5c>
340007e8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
340007ec:	48d6      	ldr	r0, [pc, #856]	@ (34000b48 <aKNCUkZSff+0x3a8>)
340007ee:	4798      	blx	r3
340007f0:	f04f 30ff 	mov.w	r0, #4294967295
340007f4:	b009      	add	sp, #36	@ 0x24
340007f6:	ecbd 8b10 	vpop	{d8-d15}
340007fa:	bd30      	pop	{r4, r5, pc}
340007fc:	eeb8 4b44 	vcvt.f64.u32	d4, s8
34000800:	ed9f 7bc3 	vldr	d7, [pc, #780]	@ 34000b10 <aKNCUkZSff+0x370>
34000804:	eeb8 2b42 	vcvt.f64.u32	d2, s4
34000808:	ee24 7b07 	vmul.f64	d7, d4, d7
3400080c:	eeb4 7bc2 	vcmpe.f64	d7, d2
34000810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000814:	dd0f      	ble.n	34000836 <aKNCUkZSff+0x96>
34000816:	ed90 7b1c 	vldr	d7, [r0, #112]	@ 0x70
3400081a:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 34000b18 <aKNCUkZSff+0x378>
3400081e:	ee37 1b01 	vadd.f64	d1, d7, d1
34000822:	ed9f 7bbf 	vldr	d7, [pc, #764]	@ 34000b20 <aKNCUkZSff+0x380>
34000826:	eeb4 1bc7 	vcmpe.f64	d1, d7
3400082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400082e:	fe37 7b01 	vselgt.f64	d7, d7, d1
34000832:	ed80 7b1c 	vstr	d7, [r0, #112]	@ 0x70
34000836:	ed9f 7bbc 	vldr	d7, [pc, #752]	@ 34000b28 <aKNCUkZSff+0x388>
3400083a:	ee24 4b07 	vmul.f64	d4, d4, d7
3400083e:	eeb4 4bc2 	vcmpe.f64	d4, d2
34000842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000846:	d510      	bpl.n	3400086a <aKNCUkZSff+0xca>
34000848:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
3400084c:	ed9f 4bb2 	vldr	d4, [pc, #712]	@ 34000b18 <aKNCUkZSff+0x378>
34000850:	ee37 7b44 	vsub.f64	d7, d7, d4
34000854:	ed9f 4bb6 	vldr	d4, [pc, #728]	@ 34000b30 <aKNCUkZSff+0x390>
34000858:	eeb4 7bc4 	vcmpe.f64	d7, d4
3400085c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000860:	bf58      	it	pl
34000862:	eeb0 4b47 	vmovpl.f64	d4, d7
34000866:	ed84 4b1c 	vstr	d4, [r4, #112]	@ 0x70
3400086a:	f894 5050 	ldrb.w	r5, [r4, #80]	@ 0x50
3400086e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34000872:	2d01      	cmp	r5, #1
34000874:	d164      	bne.n	34000940 <aKNCUkZSff+0x1a0>
34000876:	ed9f 7bb0 	vldr	d7, [pc, #704]	@ 34000b38 <aKNCUkZSff+0x398>
3400087a:	ee3f 4b4e 	vsub.f64	d4, d15, d14
3400087e:	ee84 db07 	vdiv.f64	d13, d4, d7
34000882:	ee3f 4b0e 	vadd.f64	d4, d15, d14
34000886:	ee84 ab07 	vdiv.f64	d10, d4, d7
3400088a:	eeb0 7bcd 	vabs.f64	d7, d13
3400088e:	eeb4 5bc7 	vcmpe.f64	d5, d7
34000892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000896:	eeb0 4bca 	vabs.f64	d4, d10
3400089a:	db3c      	blt.n	34000916 <aKNCUkZSff+0x176>
3400089c:	eeb4 5bc4 	vcmpe.f64	d5, d4
340008a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340008a4:	db37      	blt.n	34000916 <aKNCUkZSff+0x176>
340008a6:	2300      	movs	r3, #0
340008a8:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
340008ac:	ee83 9b0c 	vdiv.f64	d9, d3, d12
340008b0:	eebc 9bc9 	vcvt.u32.f64	s18, d9
340008b4:	eeb8 9b49 	vcvt.f64.u32	d9, s18
340008b8:	ee29 9b0c 	vmul.f64	d9, d9, d12
340008bc:	2200      	movs	r2, #0
340008be:	eefc 5bc9 	vcvt.u32.f64	s11, d9
340008c2:	eeb0 8b49 	vmov.f64	d8, d9
340008c6:	edcd 5a03 	vstr	s11, [sp, #12]
340008ca:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
340008ce:	2b00      	cmp	r3, #0
340008d0:	f000 808c 	beq.w	340009ec <aKNCUkZSff+0x24c>
340008d4:	eef7 0bcb 	vcvt.f32.f64	s1, d11
340008d8:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
340008dc:	ed8d 6b06 	vstr	d6, [sp, #24]
340008e0:	f021 fe9a 	bl	34022618 <powf>
340008e4:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
340008e8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340008ec:	eeb0 5bce 	vabs.f64	d5, d14
340008f0:	ee20 0b07 	vmul.f64	d0, d0, d7
340008f4:	eeb0 7bcf 	vabs.f64	d7, d15
340008f8:	eeb4 7bc5 	vcmpe.f64	d7, d5
340008fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000900:	ed9d 6b06 	vldr	d6, [sp, #24]
34000904:	dd34      	ble.n	34000970 <aKNCUkZSff+0x1d0>
34000906:	eeb5 fbc0 	vcmpe.f64	d15, #0.0
3400090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400090e:	d534      	bpl.n	3400097a <aKNCUkZSff+0x1da>
34000910:	ee39 0b40 	vsub.f64	d0, d9, d0
34000914:	e033      	b.n	3400097e <aKNCUkZSff+0x1de>
34000916:	eeb4 5bc4 	vcmpe.f64	d5, d4
3400091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400091e:	d525      	bpl.n	3400096c <aKNCUkZSff+0x1cc>
34000920:	ee8a 4b0d 	vdiv.f64	d4, d10, d13
34000924:	ed94 5aae 	vldr	s10, [r4, #696]	@ 0x2b8
34000928:	eeb0 4bc4 	vabs.f64	d4, d4
3400092c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34000930:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000938:	bfb4      	ite	lt
3400093a:	2301      	movlt	r3, #1
3400093c:	2300      	movge	r3, #0
3400093e:	e7b5      	b.n	340008ac <aKNCUkZSff+0x10c>
34000940:	eeb0 7bcf 	vabs.f64	d7, d15
34000944:	eeb0 4bce 	vabs.f64	d4, d14
34000948:	eeb4 4b47 	vcmp.f64	d4, d7
3400094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000950:	fe34 7b07 	vselgt.f64	d7, d4, d7
34000954:	eeb4 7bc5 	vcmpe.f64	d7, d5
34000958:	ed9f ab79 	vldr	d10, [pc, #484]	@ 34000b40 <aKNCUkZSff+0x3a0>
3400095c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000960:	eeb0 db4a 	vmov.f64	d13, d10
34000964:	bf8c      	ite	hi
34000966:	2301      	movhi	r3, #1
34000968:	2300      	movls	r3, #0
3400096a:	e79f      	b.n	340008ac <aKNCUkZSff+0x10c>
3400096c:	2301      	movs	r3, #1
3400096e:	e79d      	b.n	340008ac <aKNCUkZSff+0x10c>
34000970:	eeb5 ebc0 	vcmpe.f64	d14, #0.0
34000974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000978:	d5ca      	bpl.n	34000910 <aKNCUkZSff+0x170>
3400097a:	ee39 0b00 	vadd.f64	d0, d9, d0
3400097e:	ed94 7b3c 	vldr	d7, [r4, #240]	@ 0xf0
34000982:	eeb4 7bc0 	vcmpe.f64	d7, d0
34000986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400098a:	d503      	bpl.n	34000994 <aKNCUkZSff+0x1f4>
3400098c:	eeb0 bb46 	vmov.f64	d11, d6
34000990:	eeb0 0b47 	vmov.f64	d0, d7
34000994:	ed94 7b3a 	vldr	d7, [r4, #232]	@ 0xe8
34000998:	eeb4 7bc0 	vcmpe.f64	d7, d0
3400099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340009a0:	dd03      	ble.n	340009aa <aKNCUkZSff+0x20a>
340009a2:	eeb0 bb46 	vmov.f64	d11, d6
340009a6:	eeb0 0b47 	vmov.f64	d0, d7
340009aa:	ee80 8b0c 	vdiv.f64	d8, d0, d12
340009ae:	eebc 8bc8 	vcvt.u32.f64	s16, d8
340009b2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
340009b6:	2d01      	cmp	r5, #1
340009b8:	ee2c 8b08 	vmul.f64	d8, d12, d8
340009bc:	d116      	bne.n	340009ec <aKNCUkZSff+0x24c>
340009be:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	@ 0xe0
340009c2:	2b02      	cmp	r3, #2
340009c4:	d85f      	bhi.n	34000a86 <aKNCUkZSff+0x2e6>
340009c6:	eefc 7bc9 	vcvt.u32.f64	s15, d9
340009ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
340009ce:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
340009d2:	ed82 7b20 	vstr	d7, [r2, #128]	@ 0x80
340009d6:	ed82 8b26 	vstr	d8, [r2, #152]	@ 0x98
340009da:	eb04 1203 	add.w	r2, r4, r3, lsl #4
340009de:	3301      	adds	r3, #1
340009e0:	ed82 db2c 	vstr	d13, [r2, #176]	@ 0xb0
340009e4:	ed82 ab2e 	vstr	d10, [r2, #184]	@ 0xb8
340009e8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
340009ec:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
340009f0:	bb4b      	cbnz	r3, 34000a46 <aKNCUkZSff+0x2a6>
340009f2:	2210      	movs	r2, #16
340009f4:	f104 0188 	add.w	r1, r4, #136	@ 0x88
340009f8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
340009fc:	ed8d 6b06 	vstr	d6, [sp, #24]
34000a00:	f01e f824 	bl	3401ea4c <memmove>
34000a04:	2210      	movs	r2, #16
34000a06:	f104 01a0 	add.w	r1, r4, #160	@ 0xa0
34000a0a:	f104 0098 	add.w	r0, r4, #152	@ 0x98
34000a0e:	f01e f81d 	bl	3401ea4c <memmove>
34000a12:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
34000a16:	ed84 9b24 	vstr	d9, [r4, #144]	@ 0x90
34000a1a:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
34000a1e:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	@ 0xc8
34000a22:	ed84 8b2a 	vstr	d8, [r4, #168]	@ 0xa8
34000a26:	e9c4 232e 	strd	r2, r3, [r4, #184]	@ 0xb8
34000a2a:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	@ 0xd0
34000a2e:	ed9d 6b06 	vldr	d6, [sp, #24]
34000a32:	e9c4 2330 	strd	r2, r3, [r4, #192]	@ 0xc0
34000a36:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	@ 0xd8
34000a3a:	ed84 db34 	vstr	d13, [r4, #208]	@ 0xd0
34000a3e:	ed84 ab36 	vstr	d10, [r4, #216]	@ 0xd8
34000a42:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
34000a46:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34000a4a:	ee17 3a90 	vmov	r3, s15
34000a4e:	ed94 7b1a 	vldr	d7, [r4, #104]	@ 0x68
34000a52:	9a03      	ldr	r2, [sp, #12]
34000a54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34000a58:	4293      	cmp	r3, r2
34000a5a:	bf1c      	itt	ne
34000a5c:	2301      	movne	r3, #1
34000a5e:	f884 3060 	strbne.w	r3, [r4, #96]	@ 0x60
34000a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a66:	dd71      	ble.n	34000b4c <aKNCUkZSff+0x3ac>
34000a68:	2301      	movs	r3, #1
34000a6a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000a6e:	ed9d 7b00 	vldr	d7, [sp]
34000a72:	eeb4 bbc7 	vcmpe.f64	d11, d7
34000a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a7a:	d579      	bpl.n	34000b70 <aKNCUkZSff+0x3d0>
34000a7c:	ed9d 7b04 	vldr	d7, [sp, #16]
34000a80:	ee3b 6b07 	vadd.f64	d6, d11, d7
34000a84:	e066      	b.n	34000b54 <aKNCUkZSff+0x3b4>
34000a86:	ed94 7b2a 	vldr	d7, [r4, #168]	@ 0xa8
34000a8a:	ed94 5aaf 	vldr	s10, [r4, #700]	@ 0x2bc
34000a8e:	ee38 7b47 	vsub.f64	d7, d8, d7
34000a92:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34000a96:	eeb0 7bc7 	vabs.f64	d7, d7
34000a9a:	eeb4 7bc5 	vcmpe.f64	d7, d5
34000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000aa2:	db2c      	blt.n	34000afe <aKNCUkZSff+0x35e>
34000aa4:	ed94 7b28 	vldr	d7, [r4, #160]	@ 0xa0
34000aa8:	ee38 7b47 	vsub.f64	d7, d8, d7
34000aac:	eeb0 7bc7 	vabs.f64	d7, d7
34000ab0:	eeb4 5bc7 	vcmpe.f64	d5, d7
34000ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000ab8:	dd21      	ble.n	34000afe <aKNCUkZSff+0x35e>
34000aba:	ed94 0b32 	vldr	d0, [r4, #200]	@ 0xc8
34000abe:	ed94 7b30 	vldr	d7, [r4, #192]	@ 0xc0
34000ac2:	ee3a 0b40 	vsub.f64	d0, d10, d0
34000ac6:	ee3d 7b47 	vsub.f64	d7, d13, d7
34000aca:	ee20 0b00 	vmul.f64	d0, d0, d0
34000ace:	eea7 0b07 	vfma.f64	d0, d7, d7
34000ad2:	ed8d 6b06 	vstr	d6, [sp, #24]
34000ad6:	f020 f98b 	bl	34020df0 <sqrt>
34000ada:	ed94 7ab0 	vldr	s14, [r4, #704]	@ 0x2c0
34000ade:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ae2:	eeb4 0bc7 	vcmpe.f64	d0, d7
34000ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000aea:	ed9d 6b06 	vldr	d6, [sp, #24]
34000aee:	d506      	bpl.n	34000afe <aKNCUkZSff+0x35e>
34000af0:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34000af4:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
34000af8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
34000afc:	e776      	b.n	340009ec <aKNCUkZSff+0x24c>
34000afe:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34000b02:	2b01      	cmp	r3, #1
34000b04:	bf04      	itt	eq
34000b06:	2300      	moveq	r3, #0
34000b08:	f884 3078 	strbeq.w	r3, [r4, #120]	@ 0x78
34000b0c:	e76e      	b.n	340009ec <aKNCUkZSff+0x24c>
34000b0e:	bf00      	nop
34000b10:	9999999a 	.word	0x9999999a
34000b14:	3fa99999 	.word	0x3fa99999
34000b18:	47ae147b 	.word	0x47ae147b
34000b1c:	3f847ae1 	.word	0x3f847ae1
34000b20:	33333334 	.word	0x33333334
34000b24:	3fc33333 	.word	0x3fc33333
34000b28:	33333333 	.word	0x33333333
34000b2c:	3fc33333 	.word	0x3fc33333
34000b30:	11111111 	.word	0x11111111
34000b34:	3fb11111 	.word	0x3fb11111
34000b38:	667f3bcd 	.word	0x667f3bcd
34000b3c:	3ff6a09e 	.word	0x3ff6a09e
	...
34000b48:	340277d4 	.word	0x340277d4
34000b4c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
34000b50:	2b00      	cmp	r3, #0
34000b52:	d18c      	bne.n	34000a6e <aKNCUkZSff+0x2ce>
34000b54:	ee88 7b0c 	vdiv.f64	d7, d8, d12
34000b58:	eebc 7bc7 	vcvt.u32.f64	s14, d7
34000b5c:	eeb8 7b47 	vcvt.f64.u32	d7, s14
34000b60:	ee27 7b0c 	vmul.f64	d7, d7, d12
34000b64:	ed84 6b16 	vstr	d6, [r4, #88]	@ 0x58
34000b68:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
34000b6c:	2001      	movs	r0, #1
34000b6e:	e641      	b.n	340007f4 <aKNCUkZSff+0x54>
34000b70:	ed9d 6b00 	vldr	d6, [sp]
34000b74:	e7ee      	b.n	34000b54 <aKNCUkZSff+0x3b4>

34000b76 <LbAAVvVMdF>:
34000b76:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
34000b7a:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34000b7e:	ed90 4b12 	vldr	d4, [r0, #72]	@ 0x48
34000b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000b86:	ed90 5baa 	vldr	d5, [r0, #680]	@ 0x2a8
34000b8a:	eeb0 7b46 	vmov.f64	d7, d6
34000b8e:	bfdf      	itttt	le
34000b90:	ee84 7b05 	vdivle.f64	d7, d4, d5
34000b94:	eebc 7bc7 	vcvtle.u32.f64	s14, d7
34000b98:	eeb8 7b47 	vcvtle.f64.u32	d7, s14
34000b9c:	ee27 7b05 	vmulle.f64	d7, d7, d5
34000ba0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
34000ba4:	ed90 5b3c 	vldr	d5, [r0, #240]	@ 0xf0
34000ba8:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34000bac:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bb4:	bfc8      	it	gt
34000bb6:	eeb7 7bc5 	vcvtgt.f32.f64	s14, d5
34000bba:	ed90 5b3a 	vldr	d5, [r0, #232]	@ 0xe8
34000bbe:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34000bc2:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bca:	bf48      	it	mi
34000bcc:	eeb7 7bc5 	vcvtmi.f32.f64	s14, d5
34000bd0:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
34000bd4:	f8d0 3274 	ldr.w	r3, [r0, #628]	@ 0x274
34000bd8:	b530      	push	{r4, r5, lr}
34000bda:	ed80 5b12 	vstr	d5, [r0, #72]	@ 0x48
34000bde:	ed93 5a00 	vldr	s10, [r3]
34000be2:	edd0 7aac 	vldr	s15, [r0, #688]	@ 0x2b0
34000be6:	eeb4 5ac7 	vcmpe.f32	s10, s14
34000bea:	eef1 5a67 	vneg.f32	s11, s15
34000bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bf2:	f04f 0100 	mov.w	r1, #0
34000bf6:	f8b0 30f8 	ldrh.w	r3, [r0, #248]	@ 0xf8
34000bfa:	fe75 7aa7 	vselgt.f32	s15, s11, s15
34000bfe:	3b01      	subs	r3, #1
34000c00:	b28a      	uxth	r2, r1
34000c02:	4293      	cmp	r3, r2
34000c04:	d805      	bhi.n	34000c12 <LbAAVvVMdF+0x9c>
34000c06:	2244      	movs	r2, #68	@ 0x44
34000c08:	fb02 0303 	mla	r3, r2, r3, r0
34000c0c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34000c10:	e011      	b.n	34000c36 <LbAAVvVMdF+0xc0>
34000c12:	eb00 0482 	add.w	r4, r0, r2, lsl #2
34000c16:	edd4 5a44 	vldr	s11, [r4, #272]	@ 0x110
34000c1a:	ee77 5aa5 	vadd.f32	s11, s15, s11
34000c1e:	eef4 5ac7 	vcmpe.f32	s11, s14
34000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000c26:	f101 0101 	add.w	r1, r1, #1
34000c2a:	dbe9      	blt.n	34000c00 <LbAAVvVMdF+0x8a>
34000c2c:	2344      	movs	r3, #68	@ 0x44
34000c2e:	fb03 0202 	mla	r2, r3, r2, r0
34000c32:	f502 7390 	add.w	r3, r2, #288	@ 0x120
34000c36:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000c3e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
34000c42:	dc05      	bgt.n	34000c50 <LbAAVvVMdF+0xda>
34000c44:	ed93 7a00 	vldr	s14, [r3]
34000c48:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000c4c:	ed80 7b12 	vstr	d7, [r0, #72]	@ 0x48
34000c50:	685a      	ldr	r2, [r3, #4]
34000c52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
34000c56:	6042      	str	r2, [r0, #4]
34000c58:	689a      	ldr	r2, [r3, #8]
34000c5a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
34000c5e:	6082      	str	r2, [r0, #8]
34000c60:	68da      	ldr	r2, [r3, #12]
34000c62:	60c2      	str	r2, [r0, #12]
34000c64:	691a      	ldr	r2, [r3, #16]
34000c66:	6102      	str	r2, [r0, #16]
34000c68:	f100 0238 	add.w	r2, r0, #56	@ 0x38
34000c6c:	695d      	ldr	r5, [r3, #20]
34000c6e:	330c      	adds	r3, #12
34000c70:	6145      	str	r5, [r0, #20]
34000c72:	68dd      	ldr	r5, [r3, #12]
34000c74:	300c      	adds	r0, #12
34000c76:	60c5      	str	r5, [r0, #12]
34000c78:	691d      	ldr	r5, [r3, #16]
34000c7a:	42a3      	cmp	r3, r4
34000c7c:	6105      	str	r5, [r0, #16]
34000c7e:	f851 5b04 	ldr.w	r5, [r1], #4
34000c82:	f842 5b04 	str.w	r5, [r2], #4
34000c86:	d1f1      	bne.n	34000c6c <LbAAVvVMdF+0xf6>
34000c88:	2001      	movs	r0, #1
34000c8a:	bd30      	pop	{r4, r5, pc}

34000c8c <evision_api_awb_new>:
34000c8c:	b510      	push	{r4, lr}
34000c8e:	4604      	mov	r4, r0
34000c90:	b090      	sub	sp, #64	@ 0x40
34000c92:	b170      	cbz	r0, 34000cb2 <evision_api_awb_new+0x26>
34000c94:	2300      	movs	r3, #0
34000c96:	4c08      	ldr	r4, [pc, #32]	@ (34000cb8 <evision_api_awb_new+0x2c>)
34000c98:	2140      	movs	r1, #64	@ 0x40
34000c9a:	7023      	strb	r3, [r4, #0]
34000c9c:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
34000ca0:	4b06      	ldr	r3, [pc, #24]	@ (34000cbc <evision_api_awb_new+0x30>)
34000ca2:	4668      	mov	r0, sp
34000ca4:	4a06      	ldr	r2, [pc, #24]	@ (34000cc0 <evision_api_awb_new+0x34>)
34000ca6:	f021 fc67 	bl	34022578 <sniprintf>
34000caa:	4668      	mov	r0, sp
34000cac:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000cb0:	4798      	blx	r3
34000cb2:	4620      	mov	r0, r4
34000cb4:	b010      	add	sp, #64	@ 0x40
34000cb6:	bd10      	pop	{r4, pc}
34000cb8:	340a3440 	.word	0x340a3440
34000cbc:	340a3018 	.word	0x340a3018
34000cc0:	34027814 	.word	0x34027814

34000cc4 <evision_api_awb_delete>:
34000cc4:	2800      	cmp	r0, #0
34000cc6:	bf14      	ite	ne
34000cc8:	2001      	movne	r0, #1
34000cca:	f04f 30ff 	moveq.w	r0, #4294967295
34000cce:	4770      	bx	lr

34000cd0 <evision_api_awb_set_profile>:
34000cd0:	ed80 0a00 	vstr	s0, [r0]
34000cd4:	b530      	push	{r4, r5, lr}
34000cd6:	680c      	ldr	r4, [r1, #0]
34000cd8:	6044      	str	r4, [r0, #4]
34000cda:	684c      	ldr	r4, [r1, #4]
34000cdc:	6084      	str	r4, [r0, #8]
34000cde:	688c      	ldr	r4, [r1, #8]
34000ce0:	60c4      	str	r4, [r0, #12]
34000ce2:	68c9      	ldr	r1, [r1, #12]
34000ce4:	f102 0424 	add.w	r4, r2, #36	@ 0x24
34000ce8:	6101      	str	r1, [r0, #16]
34000cea:	f100 0138 	add.w	r1, r0, #56	@ 0x38
34000cee:	6815      	ldr	r5, [r2, #0]
34000cf0:	320c      	adds	r2, #12
34000cf2:	6145      	str	r5, [r0, #20]
34000cf4:	f852 5c08 	ldr.w	r5, [r2, #-8]
34000cf8:	300c      	adds	r0, #12
34000cfa:	60c5      	str	r5, [r0, #12]
34000cfc:	f852 5c04 	ldr.w	r5, [r2, #-4]
34000d00:	42a2      	cmp	r2, r4
34000d02:	6105      	str	r5, [r0, #16]
34000d04:	f853 5b04 	ldr.w	r5, [r3], #4
34000d08:	f841 5b04 	str.w	r5, [r1], #4
34000d0c:	d1ef      	bne.n	34000cee <evision_api_awb_set_profile+0x1e>
34000d0e:	bd30      	pop	{r4, r5, pc}

34000d10 <evision_api_awb_init_profiles>:
34000d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000d14:	ed2d 8b06 	vpush	{d8-d10}
34000d18:	460e      	mov	r6, r1
34000d1a:	eeb0 9b40 	vmov.f64	d9, d0
34000d1e:	eeb0 8b41 	vmov.f64	d8, d1
34000d22:	461d      	mov	r5, r3
34000d24:	4604      	mov	r4, r0
34000d26:	b0c7      	sub	sp, #284	@ 0x11c
34000d28:	2800      	cmp	r0, #0
34000d2a:	f000 818f 	beq.w	3400104c <evision_api_awb_init_profiles+0x33c>
34000d2e:	ed9f abcc 	vldr	d10, [pc, #816]	@ 34001060 <evision_api_awb_init_profiles+0x350>
34000d32:	ed80 ab12 	vstr	d10, [r0, #72]	@ 0x48
34000d36:	2000      	movs	r0, #0
34000d38:	49cf      	ldr	r1, [pc, #828]	@ (34001078 <evision_api_awb_init_profiles+0x368>)
34000d3a:	f04f 0800 	mov.w	r8, #0
34000d3e:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
34000d42:	e9c4 01a6 	strd	r0, r1, [r4, #664]	@ 0x298
34000d46:	e9c4 01aa 	strd	r0, r1, [r4, #680]	@ 0x2a8
34000d4a:	49cc      	ldr	r1, [pc, #816]	@ (3400107c <evision_api_awb_init_profiles+0x36c>)
34000d4c:	f8df 9360 	ldr.w	r9, [pc, #864]	@ 340010b0 <evision_api_awb_init_profiles+0x3a0>
34000d50:	f8c4 12b0 	str.w	r1, [r4, #688]	@ 0x2b0
34000d54:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
34000d58:	f8c4 12b4 	str.w	r1, [r4, #692]	@ 0x2b4
34000d5c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
34000d60:	e9c4 891a 	strd	r8, r9, [r4, #104]	@ 0x68
34000d64:	f20f 3900 	addw	r9, pc, #768	@ 0x300
34000d68:	e9d9 8900 	ldrd	r8, r9, [r9]
34000d6c:	e9c4 891c 	strd	r8, r9, [r4, #112]	@ 0x70
34000d70:	e9c4 89a4 	strd	r8, r9, [r4, #656]	@ 0x290
34000d74:	f04f 0800 	mov.w	r8, #0
34000d78:	f8c4 12b8 	str.w	r1, [r4, #696]	@ 0x2b8
34000d7c:	49c0      	ldr	r1, [pc, #768]	@ (34001080 <evision_api_awb_init_profiles+0x370>)
34000d7e:	f8df 9334 	ldr.w	r9, [pc, #820]	@ 340010b4 <evision_api_awb_init_profiles+0x3a4>
34000d82:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
34000d86:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
34000d8a:	2300      	movs	r3, #0
34000d8c:	e9c4 89a8 	strd	r8, r9, [r4, #672]	@ 0x2a0
34000d90:	2701      	movs	r7, #1
34000d92:	f04f 0800 	mov.w	r8, #0
34000d96:	f8c4 12c0 	str.w	r1, [r4, #704]	@ 0x2c0
34000d9a:	1e71      	subs	r1, r6, #1
34000d9c:	f8df 9318 	ldr.w	r9, [pc, #792]	@ 340010b8 <evision_api_awb_init_profiles+0x3a8>
34000da0:	b288      	uxth	r0, r1
34000da2:	2804      	cmp	r0, #4
34000da4:	e9c4 89a0 	strd	r8, r9, [r4, #640]	@ 0x280
34000da8:	f20f 29c4 	addw	r9, pc, #708	@ 0x2c4
34000dac:	e9d9 8900 	ldrd	r8, r9, [r9]
34000db0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000db4:	e9c4 89a2 	strd	r8, r9, [r4, #648]	@ 0x288
34000db8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34000dbc:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34000dc0:	f8a4 7278 	strh.w	r7, [r4, #632]	@ 0x278
34000dc4:	d914      	bls.n	34000df0 <evision_api_awb_init_profiles+0xe0>
34000dc6:	2305      	movs	r3, #5
34000dc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000dcc:	4aad      	ldr	r2, [pc, #692]	@ (34001084 <evision_api_awb_init_profiles+0x374>)
34000dce:	a806      	add	r0, sp, #24
34000dd0:	f021 fbd2 	bl	34022578 <sniprintf>
34000dd4:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000dd8:	a806      	add	r0, sp, #24
34000dda:	4798      	blx	r3
34000ddc:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
34000de0:	4620      	mov	r0, r4
34000de2:	b047      	add	sp, #284	@ 0x11c
34000de4:	ecbd 8b06 	vpop	{d8-d10}
34000de8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000dec:	f7ff bec3 	b.w	34000b76 <LbAAVvVMdF>
34000df0:	ed95 7a00 	vldr	s14, [r5]
34000df4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000df8:	eeb4 0bc7 	vcmpe.f64	d0, d7
34000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e00:	dd12      	ble.n	34000e28 <evision_api_awb_init_profiles+0x118>
34000e02:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000e06:	48a0      	ldr	r0, [pc, #640]	@ (34001088 <evision_api_awb_init_profiles+0x378>)
34000e08:	4798      	blx	r3
34000e0a:	ed95 7a00 	vldr	s14, [r5]
34000e0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e12:	ed8d 9b00 	vstr	d9, [sp]
34000e16:	ed8d 7b02 	vstr	d7, [sp, #8]
34000e1a:	4a9c      	ldr	r2, [pc, #624]	@ (3400108c <evision_api_awb_init_profiles+0x37c>)
34000e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000e20:	a806      	add	r0, sp, #24
34000e22:	f021 fba9 	bl	34022578 <sniprintf>
34000e26:	e7d5      	b.n	34000dd4 <evision_api_awb_init_profiles+0xc4>
34000e28:	f04f 0c44 	mov.w	ip, #68	@ 0x44
34000e2c:	fb0c 5806 	mla	r8, ip, r6, r5
34000e30:	ed18 7a11 	vldr	s14, [r8, #-68]	@ 0xffffffbc
34000e34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e38:	eeb4 1bc7 	vcmpe.f64	d1, d7
34000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e40:	d541      	bpl.n	34000ec6 <evision_api_awb_init_profiles+0x1b6>
34000e42:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000e46:	4892      	ldr	r0, [pc, #584]	@ (34001090 <evision_api_awb_init_profiles+0x380>)
34000e48:	4798      	blx	r3
34000e4a:	ed98 7a00 	vldr	s14, [r8]
34000e4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e52:	ed8d 8b00 	vstr	d8, [sp]
34000e56:	ed8d 7b02 	vstr	d7, [sp, #8]
34000e5a:	4a8e      	ldr	r2, [pc, #568]	@ (34001094 <evision_api_awb_init_profiles+0x384>)
34000e5c:	e7de      	b.n	34000e1c <evision_api_awb_init_profiles+0x10c>
34000e5e:	fb0c f708 	mul.w	r7, ip, r8
34000e62:	eb05 0907 	add.w	r9, r5, r7
34000e66:	3744      	adds	r7, #68	@ 0x44
34000e68:	442f      	add	r7, r5
34000e6a:	ed99 7a00 	vldr	s14, [r9]
34000e6e:	edd7 7a00 	vldr	s15, [r7]
34000e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e7a:	f108 0a01 	add.w	sl, r8, #1
34000e7e:	f100 0001 	add.w	r0, r0, #1
34000e82:	db21      	blt.n	34000ec8 <evision_api_awb_init_profiles+0x1b8>
34000e84:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000e88:	4883      	ldr	r0, [pc, #524]	@ (34001098 <evision_api_awb_init_profiles+0x388>)
34000e8a:	4798      	blx	r3
34000e8c:	ed97 7a00 	vldr	s14, [r7]
34000e90:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e94:	ed8d 7b04 	vstr	d7, [sp, #16]
34000e98:	f8cd a008 	str.w	sl, [sp, #8]
34000e9c:	ed99 7a00 	vldr	s14, [r9]
34000ea0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ea4:	4643      	mov	r3, r8
34000ea6:	ed8d 7b00 	vstr	d7, [sp]
34000eaa:	4a7c      	ldr	r2, [pc, #496]	@ (3400109c <evision_api_awb_init_profiles+0x38c>)
34000eac:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000eb0:	a806      	add	r0, sp, #24
34000eb2:	f021 fb61 	bl	34022578 <sniprintf>
34000eb6:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000eba:	a806      	add	r0, sp, #24
34000ebc:	4798      	blx	r3
34000ebe:	2301      	movs	r3, #1
34000ec0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34000ec4:	e78c      	b.n	34000de0 <evision_api_awb_init_profiles+0xd0>
34000ec6:	4618      	mov	r0, r3
34000ec8:	fa1f f880 	uxth.w	r8, r0
34000ecc:	4541      	cmp	r1, r8
34000ece:	d8c6      	bhi.n	34000e5e <evision_api_awb_init_profiles+0x14e>
34000ed0:	2300      	movs	r3, #0
34000ed2:	f04f 0c44 	mov.w	ip, #68	@ 0x44
34000ed6:	1eb0      	subs	r0, r6, #2
34000ed8:	b29f      	uxth	r7, r3
34000eda:	42b9      	cmp	r1, r7
34000edc:	d839      	bhi.n	34000f52 <evision_api_awb_init_profiles+0x242>
34000ede:	ed84 9b3a 	vstr	d9, [r4, #232]	@ 0xe8
34000ee2:	ed84 8b3c 	vstr	d8, [r4, #240]	@ 0xf0
34000ee6:	2000      	movs	r0, #0
34000ee8:	f8a4 60f8 	strh.w	r6, [r4, #248]	@ 0xf8
34000eec:	b283      	uxth	r3, r0
34000eee:	4299      	cmp	r1, r3
34000ef0:	f100 0001 	add.w	r0, r0, #1
34000ef4:	f200 808b 	bhi.w	3400100e <evision_api_awb_init_profiles+0x2fe>
34000ef8:	2700      	movs	r7, #0
34000efa:	46b8      	mov	r8, r7
34000efc:	f104 0afc 	add.w	sl, r4, #252	@ 0xfc
34000f00:	f504 7990 	add.w	r9, r4, #288	@ 0x120
34000f04:	eb05 0b07 	add.w	fp, r5, r7
34000f08:	eb09 0007 	add.w	r0, r9, r7
34000f0c:	2244      	movs	r2, #68	@ 0x44
34000f0e:	4659      	mov	r1, fp
34000f10:	f01e f83d 	bl	3401ef8e <memcpy>
34000f14:	f8db 3000 	ldr.w	r3, [fp]
34000f18:	f108 0801 	add.w	r8, r8, #1
34000f1c:	f84a 3b04 	str.w	r3, [sl], #4
34000f20:	fa1f f388 	uxth.w	r3, r8
34000f24:	429e      	cmp	r6, r3
34000f26:	f107 0744 	add.w	r7, r7, #68	@ 0x44
34000f2a:	d8eb      	bhi.n	34000f04 <evision_api_awb_init_profiles+0x1f4>
34000f2c:	1e73      	subs	r3, r6, #1
34000f2e:	b29b      	uxth	r3, r3
34000f30:	2e00      	cmp	r6, #0
34000f32:	f103 0301 	add.w	r3, r3, #1
34000f36:	bf14      	ite	ne
34000f38:	461a      	movne	r2, r3
34000f3a:	2201      	moveq	r2, #1
34000f3c:	f8c4 9274 	str.w	r9, [r4, #628]	@ 0x274
34000f40:	f504 71b2 	add.w	r1, r4, #356	@ 0x164
34000f44:	3a01      	subs	r2, #1
34000f46:	d16a      	bne.n	3400101e <evision_api_awb_init_profiles+0x30e>
34000f48:	2301      	movs	r3, #1
34000f4a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34000f4e:	7023      	strb	r3, [r4, #0]
34000f50:	e746      	b.n	34000de0 <evision_api_awb_init_profiles+0xd0>
34000f52:	eb02 0987 	add.w	r9, r2, r7, lsl #2
34000f56:	42b8      	cmp	r0, r7
34000f58:	edd9 7a00 	vldr	s15, [r9]
34000f5c:	ea4f 0887 	mov.w	r8, r7, lsl #2
34000f60:	f107 0a01 	add.w	sl, r7, #1
34000f64:	d91e      	bls.n	34000fa4 <evision_api_awb_init_profiles+0x294>
34000f66:	f108 0804 	add.w	r8, r8, #4
34000f6a:	4490      	add	r8, r2
34000f6c:	ed98 7a00 	vldr	s14, [r8]
34000f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000f78:	d814      	bhi.n	34000fa4 <evision_api_awb_init_profiles+0x294>
34000f7a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000f7e:	4848      	ldr	r0, [pc, #288]	@ (340010a0 <evision_api_awb_init_profiles+0x390>)
34000f80:	4798      	blx	r3
34000f82:	ed98 7a00 	vldr	s14, [r8]
34000f86:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f8a:	ed8d 7b04 	vstr	d7, [sp, #16]
34000f8e:	f8cd a008 	str.w	sl, [sp, #8]
34000f92:	ed99 7a00 	vldr	s14, [r9]
34000f96:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f9a:	463b      	mov	r3, r7
34000f9c:	ed8d 7b00 	vstr	d7, [sp]
34000fa0:	4a40      	ldr	r2, [pc, #256]	@ (340010a4 <evision_api_awb_init_profiles+0x394>)
34000fa2:	e783      	b.n	34000eac <evision_api_awb_init_profiles+0x19c>
34000fa4:	fb0c f807 	mul.w	r8, ip, r7
34000fa8:	eb05 0a08 	add.w	sl, r5, r8
34000fac:	ed9a 7a00 	vldr	s14, [sl]
34000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000fb8:	f108 0844 	add.w	r8, r8, #68	@ 0x44
34000fbc:	44a8      	add	r8, r5
34000fbe:	da08      	bge.n	34000fd2 <evision_api_awb_init_profiles+0x2c2>
34000fc0:	ed98 7a00 	vldr	s14, [r8]
34000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000fcc:	f103 0301 	add.w	r3, r3, #1
34000fd0:	d882      	bhi.n	34000ed8 <evision_api_awb_init_profiles+0x1c8>
34000fd2:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000fd6:	4834      	ldr	r0, [pc, #208]	@ (340010a8 <evision_api_awb_init_profiles+0x398>)
34000fd8:	4798      	blx	r3
34000fda:	ed98 7a00 	vldr	s14, [r8]
34000fde:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fe2:	ed8d 7b04 	vstr	d7, [sp, #16]
34000fe6:	ed9a 7a00 	vldr	s14, [sl]
34000fea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fee:	ed8d 7b02 	vstr	d7, [sp, #8]
34000ff2:	ed99 7a00 	vldr	s14, [r9]
34000ff6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ffa:	463b      	mov	r3, r7
34000ffc:	ed8d 7b00 	vstr	d7, [sp]
34001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
34001004:	4a29      	ldr	r2, [pc, #164]	@ (340010ac <evision_api_awb_init_profiles+0x39c>)
34001006:	a806      	add	r0, sp, #24
34001008:	f021 fab6 	bl	34022578 <sniprintf>
3400100c:	e753      	b.n	34000eb6 <evision_api_awb_init_profiles+0x1a6>
3400100e:	eb02 0783 	add.w	r7, r2, r3, lsl #2
34001012:	683f      	ldr	r7, [r7, #0]
34001014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34001018:	f8c3 7110 	str.w	r7, [r3, #272]	@ 0x110
3400101c:	e766      	b.n	34000eec <evision_api_awb_init_profiles+0x1dc>
3400101e:	f8d4 3274 	ldr.w	r3, [r4, #628]	@ 0x274
34001022:	ed91 6a00 	vldr	s12, [r1]
34001026:	ed93 7a00 	vldr	s14, [r3]
3400102a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3400102e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34001032:	ee36 6b4a 	vsub.f64	d6, d6, d10
34001036:	ee37 7b4a 	vsub.f64	d7, d7, d10
3400103a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001042:	bf48      	it	mi
34001044:	f8c4 1274 	strmi.w	r1, [r4, #628]	@ 0x274
34001048:	3144      	adds	r1, #68	@ 0x44
3400104a:	e77b      	b.n	34000f44 <evision_api_awb_init_profiles+0x234>
3400104c:	f04f 30ff 	mov.w	r0, #4294967295
34001050:	b047      	add	sp, #284	@ 0x11c
34001052:	ecbd 8b06 	vpop	{d8-d10}
34001056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400105a:	bf00      	nop
3400105c:	f3af 8000 	nop.w
34001060:	00000000 	.word	0x00000000
34001064:	40b38800 	.word	0x40b38800
34001068:	9999999a 	.word	0x9999999a
3400106c:	3fb99999 	.word	0x3fb99999
34001070:	00000000 	.word	0x00000000
34001074:	406ea000 	.word	0x406ea000
34001078:	3ff00000 	.word	0x3ff00000
3400107c:	42480000 	.word	0x42480000
34001080:	432f0000 	.word	0x432f0000
34001084:	34027824 	.word	0x34027824
34001088:	34027868 	.word	0x34027868
3400108c:	340278ef 	.word	0x340278ef
34001090:	3402794d 	.word	0x3402794d
34001094:	340279d5 	.word	0x340279d5
34001098:	34027a32 	.word	0x34027a32
3400109c:	34027a96 	.word	0x34027a96
340010a0:	34027aee 	.word	0x34027aee
340010a4:	34027b5d 	.word	0x34027b5d
340010a8:	34027bc7 	.word	0x34027bc7
340010ac:	34027c1e 	.word	0x34027c1e
340010b0:	bff00000 	.word	0xbff00000
340010b4:	40080000 	.word	0x40080000
340010b8:	40240000 	.word	0x40240000

340010bc <evision_api_awb_run_average>:
340010bc:	b530      	push	{r4, r5, lr}
340010be:	4605      	mov	r5, r0
340010c0:	4614      	mov	r4, r2
340010c2:	b08d      	sub	sp, #52	@ 0x34
340010c4:	b952      	cbnz	r2, 340010dc <evision_api_awb_run_average+0x20>
340010c6:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
340010ca:	481d      	ldr	r0, [pc, #116]	@ (34001140 <evision_api_awb_run_average+0x84>)
340010cc:	4798      	blx	r3
340010ce:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
340010d2:	481c      	ldr	r0, [pc, #112]	@ (34001144 <evision_api_awb_run_average+0x88>)
340010d4:	4798      	blx	r3
340010d6:	4620      	mov	r0, r4
340010d8:	b00d      	add	sp, #52	@ 0x34
340010da:	bd30      	pop	{r4, r5, pc}
340010dc:	ed93 2b04 	vldr	d2, [r3, #16]
340010e0:	ed93 1b02 	vldr	d1, [r3, #8]
340010e4:	ed93 0b00 	vldr	d0, [r3]
340010e8:	aa0a      	add	r2, sp, #40	@ 0x28
340010ea:	a908      	add	r1, sp, #32
340010ec:	a806      	add	r0, sp, #24
340010ee:	f000 f82f 	bl	34001150 <ZWJVGGHBrD>
340010f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
340010f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
340010fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
340010fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
34001102:	2301      	movs	r3, #1
34001104:	4298      	cmp	r0, r3
34001106:	4604      	mov	r4, r0
34001108:	e9cd 3300 	strd	r3, r3, [sp]
3400110c:	d1df      	bne.n	340010ce <evision_api_awb_run_average+0x12>
3400110e:	4669      	mov	r1, sp
34001110:	4628      	mov	r0, r5
34001112:	f7ff fb45 	bl	340007a0 <aKNCUkZSff>
34001116:	2801      	cmp	r0, #1
34001118:	4604      	mov	r4, r0
3400111a:	d003      	beq.n	34001124 <evision_api_awb_run_average+0x68>
3400111c:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
34001120:	4809      	ldr	r0, [pc, #36]	@ (34001148 <evision_api_awb_run_average+0x8c>)
34001122:	e7d7      	b.n	340010d4 <evision_api_awb_run_average+0x18>
34001124:	f895 3060 	ldrb.w	r3, [r5, #96]	@ 0x60
34001128:	2b01      	cmp	r3, #1
3400112a:	d1d4      	bne.n	340010d6 <evision_api_awb_run_average+0x1a>
3400112c:	4628      	mov	r0, r5
3400112e:	f7ff fd22 	bl	34000b76 <LbAAVvVMdF>
34001132:	2801      	cmp	r0, #1
34001134:	4604      	mov	r4, r0
34001136:	d0ce      	beq.n	340010d6 <evision_api_awb_run_average+0x1a>
34001138:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
3400113c:	4803      	ldr	r0, [pc, #12]	@ (3400114c <evision_api_awb_run_average+0x90>)
3400113e:	e7c9      	b.n	340010d4 <evision_api_awb_run_average+0x18>
34001140:	34027ca4 	.word	0x34027ca4
34001144:	34027d05 	.word	0x34027d05
34001148:	34027d2e 	.word	0x34027d2e
3400114c:	34027d62 	.word	0x34027d62

34001150 <ZWJVGGHBrD>:
34001150:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400115a:	d409      	bmi.n	34001170 <ZWJVGGHBrD+0x20>
3400115c:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
34001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001164:	d404      	bmi.n	34001170 <ZWJVGGHBrD+0x20>
34001166:	eeb5 2bc0 	vcmpe.f64	d2, #0.0
3400116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400116e:	d50d      	bpl.n	3400118c <ZWJVGGHBrD+0x3c>
34001170:	ed8d 2b02 	vstr	d2, [sp, #8]
34001174:	ed8d 1b00 	vstr	d1, [sp]
34001178:	ec53 2b10 	vmov	r2, r3, d0
3400117c:	4844      	ldr	r0, [pc, #272]	@ (34001290 <ZWJVGGHBrD+0x140>)
3400117e:	f01d fae1 	bl	3401e744 <iprintf>
34001182:	f04f 30ff 	mov.w	r0, #4294967295
34001186:	b005      	add	sp, #20
34001188:	f85d fb04 	ldr.w	pc, [sp], #4
3400118c:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 34001258 <ZWJVGGHBrD+0x108>
34001190:	eeb4 0bc7 	vcmpe.f64	d0, d7
34001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001198:	dc09      	bgt.n	340011ae <ZWJVGGHBrD+0x5e>
3400119a:	eeb4 1bc7 	vcmpe.f64	d1, d7
3400119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340011a2:	dc04      	bgt.n	340011ae <ZWJVGGHBrD+0x5e>
340011a4:	eeb4 2bc7 	vcmpe.f64	d2, d7
340011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340011ac:	dd07      	ble.n	340011be <ZWJVGGHBrD+0x6e>
340011ae:	ed8d 2b02 	vstr	d2, [sp, #8]
340011b2:	ed8d 1b00 	vstr	d1, [sp]
340011b6:	ec53 2b10 	vmov	r2, r3, d0
340011ba:	4836      	ldr	r0, [pc, #216]	@ (34001294 <ZWJVGGHBrD+0x144>)
340011bc:	e7df      	b.n	3400117e <ZWJVGGHBrD+0x2e>
340011be:	b128      	cbz	r0, 340011cc <ZWJVGGHBrD+0x7c>
340011c0:	b189      	cbz	r1, 340011e6 <ZWJVGGHBrD+0x96>
340011c2:	b9b2      	cbnz	r2, 340011f2 <ZWJVGGHBrD+0xa2>
340011c4:	4934      	ldr	r1, [pc, #208]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011c6:	4b35      	ldr	r3, [pc, #212]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011c8:	4608      	mov	r0, r1
340011ca:	e007      	b.n	340011dc <ZWJVGGHBrD+0x8c>
340011cc:	b171      	cbz	r1, 340011ec <ZWJVGGHBrD+0x9c>
340011ce:	4933      	ldr	r1, [pc, #204]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011d0:	4831      	ldr	r0, [pc, #196]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011d2:	2a00      	cmp	r2, #0
340011d4:	4a30      	ldr	r2, [pc, #192]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011d6:	4b31      	ldr	r3, [pc, #196]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011d8:	bf18      	it	ne
340011da:	4613      	movne	r3, r2
340011dc:	4602      	mov	r2, r0
340011de:	4830      	ldr	r0, [pc, #192]	@ (340012a0 <ZWJVGGHBrD+0x150>)
340011e0:	f01d fab0 	bl	3401e744 <iprintf>
340011e4:	e7cd      	b.n	34001182 <ZWJVGGHBrD+0x32>
340011e6:	492c      	ldr	r1, [pc, #176]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011e8:	482c      	ldr	r0, [pc, #176]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011ea:	e7f2      	b.n	340011d2 <ZWJVGGHBrD+0x82>
340011ec:	492b      	ldr	r1, [pc, #172]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011ee:	4608      	mov	r0, r1
340011f0:	e7ef      	b.n	340011d2 <ZWJVGGHBrD+0x82>
340011f2:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 34001260 <ZWJVGGHBrD+0x110>
340011f6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 34001268 <ZWJVGGHBrD+0x118>
340011fa:	ee21 7b07 	vmul.f64	d7, d1, d7
340011fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
34001202:	eea0 7b06 	vfma.f64	d7, d0, d6
34001206:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 34001270 <ZWJVGGHBrD+0x120>
3400120a:	eea2 7b05 	vfma.f64	d7, d2, d5
3400120e:	eea7 5b06 	vfma.f64	d5, d7, d6
34001212:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 34001278 <ZWJVGGHBrD+0x128>
34001216:	ed80 5b00 	vstr	d5, [r0]
3400121a:	ee27 7b41 	vnmul.f64	d7, d7, d1
3400121e:	eebb 5b0a 	vmov.f64	d5, #186	@ 0xc1d00000 -26.0
34001222:	eea0 7b05 	vfma.f64	d7, d0, d5
34001226:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 34001280 <ZWJVGGHBrD+0x130>
3400122a:	eea2 7b05 	vfma.f64	d7, d2, d5
3400122e:	ee27 7b06 	vmul.f64	d7, d7, d6
34001232:	ed81 7b00 	vstr	d7, [r1]
34001236:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 34001288 <ZWJVGGHBrD+0x138>
3400123a:	ee27 1b41 	vnmul.f64	d1, d7, d1
3400123e:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
34001242:	eea0 1b05 	vfma.f64	d1, d0, d5
34001246:	eea2 1b47 	vfms.f64	d1, d2, d7
3400124a:	ee21 1b06 	vmul.f64	d1, d1, d6
3400124e:	2001      	movs	r0, #1
34001250:	ed82 1b00 	vstr	d1, [r2]
34001254:	e797      	b.n	34001186 <ZWJVGGHBrD+0x36>
34001256:	bf00      	nop
34001258:	00000000 	.word	0x00000000
3400125c:	406fe000 	.word	0x406fe000
34001260:	00000000 	.word	0x00000000
34001264:	4063a000 	.word	0x4063a000
34001268:	00000000 	.word	0x00000000
3400126c:	40478000 	.word	0x40478000
34001270:	00000000 	.word	0x00000000
34001274:	3f700000 	.word	0x3f700000
34001278:	00000000 	.word	0x00000000
3400127c:	40558000 	.word	0x40558000
34001280:	00000000 	.word	0x00000000
34001284:	405c0000 	.word	0x405c0000
34001288:	00000000 	.word	0x00000000
3400128c:	40598000 	.word	0x40598000
34001290:	34027d97 	.word	0x34027d97
34001294:	34027dd5 	.word	0x34027dd5
34001298:	34022e69 	.word	0x34022e69
3400129c:	34022e67 	.word	0x34022e67
340012a0:	34027e15 	.word	0x34027e15
340012a4:	00000000 	.word	0x00000000

340012a8 <jkCowjPIUr>:
340012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340012ac:	4698      	mov	r8, r3
340012ae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
340012b0:	460f      	mov	r7, r1
340012b2:	4606      	mov	r6, r0
340012b4:	9906      	ldr	r1, [sp, #24]
340012b6:	b923      	cbnz	r3, 340012c2 <jkCowjPIUr+0x1a>
340012b8:	f8c8 7000 	str.w	r7, [r8]
340012bc:	600a      	str	r2, [r1, #0]
340012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340012c2:	4d21      	ldr	r5, [pc, #132]	@ (34001348 <jkCowjPIUr+0xa0>)
340012c4:	005b      	lsls	r3, r3, #1
340012c6:	fbb5 f5f3 	udiv	r5, r5, r3
340012ca:	4295      	cmp	r5, r2
340012cc:	d2f4      	bcs.n	340012b8 <jkCowjPIUr+0x10>
340012ce:	fbb2 f4f5 	udiv	r4, r2, r5
340012d2:	ee07 2a90 	vmov	s15, r2
340012d6:	fb04 5405 	mla	r4, r4, r5, r5
340012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340012de:	ee07 4a90 	vmov	s15, r4
340012e2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 3400134c <jkCowjPIUr+0xa4>
340012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
340012ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
340012ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
340012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340012f6:	d5df      	bpl.n	340012b8 <jkCowjPIUr+0x10>
340012f8:	1b62      	subs	r2, r4, r5
340012fa:	600a      	str	r2, [r1, #0]
340012fc:	3201      	adds	r2, #1
340012fe:	ee07 2a90 	vmov	s15, r2
34001302:	eef8 7a67 	vcvt.f32.u32	s15, s15
34001306:	ee87 0a27 	vdiv.f32	s0, s14, s15
3400130a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400130e:	f01f fd3b 	bl	34020d88 <log10>
34001312:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 34001340 <jkCowjPIUr+0x98>
34001316:	ee20 0b07 	vmul.f64	d0, d0, d7
3400131a:	eebc 0bc0 	vcvt.u32.f64	s0, d0
3400131e:	ee10 3a10 	vmov	r3, s0
34001322:	443b      	add	r3, r7
34001324:	461f      	mov	r7, r3
34001326:	f8c8 3000 	str.w	r3, [r8]
3400132a:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
3400132c:	42bb      	cmp	r3, r7
3400132e:	bf94      	ite	ls
34001330:	f8c8 3000 	strls.w	r3, [r8]
34001334:	f8c8 7000 	strhi.w	r7, [r8]
34001338:	e7c1      	b.n	340012be <jkCowjPIUr+0x16>
3400133a:	bf00      	nop
3400133c:	f3af 8000 	nop.w
34001340:	00000000 	.word	0x00000000
34001344:	40d38800 	.word	0x40d38800
34001348:	000f4240 	.word	0x000f4240
3400134c:	3f733333 	.word	0x3f733333

34001350 <EXymUSSPAy>:
34001350:	ee07 1a90 	vmov	s15, r1
34001354:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 340013f8 <EXymUSSPAy+0xa8>
34001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400135c:	b570      	push	{r4, r5, r6, lr}
3400135e:	ee87 1a87 	vdiv.f32	s2, s15, s14
34001362:	ed2d 8b02 	vpush	{d8}
34001366:	ee08 2a10 	vmov	s16, r2
3400136a:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
3400136e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34001372:	4605      	mov	r5, r0
34001374:	461c      	mov	r4, r3
34001376:	9e06      	ldr	r6, [sp, #24]
34001378:	f01f fe0e 	bl	34020f98 <pow>
3400137c:	eeb8 8b48 	vcvt.f64.u32	d8, s16
34001380:	ee28 0b00 	vmul.f64	d0, d8, d0
34001384:	eefc 7bc0 	vcvt.u32.f64	s15, d0
34001388:	ee17 2a90 	vmov	r2, s15
3400138c:	6c69      	ldr	r1, [r5, #68]	@ 0x44
3400138e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34001392:	4291      	cmp	r1, r2
34001394:	d916      	bls.n	340013c4 <EXymUSSPAy+0x74>
34001396:	2300      	movs	r3, #0
34001398:	6023      	str	r3, [r4, #0]
3400139a:	edc6 7a00 	vstr	s15, [r6]
3400139e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
340013a0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 340013fc <EXymUSSPAy+0xac>
340013a4:	ee07 3a90 	vmov	s15, r3
340013a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340013ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
340013b0:	eeb4 7a67 	vcmp.f32	s14, s15
340013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340013b8:	bfc8      	it	gt
340013ba:	461a      	movgt	r2, r3
340013bc:	6032      	str	r2, [r6, #0]
340013be:	ecbd 8b02 	vpop	{d8}
340013c2:	bd70      	pop	{r4, r5, r6, pc}
340013c4:	ee07 1a90 	vmov	s15, r1
340013c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340013cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
340013d0:	6031      	str	r1, [r6, #0]
340013d2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340013d6:	f01f fcd7 	bl	34020d88 <log10>
340013da:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 340013f0 <EXymUSSPAy+0xa0>
340013de:	ee20 0b07 	vmul.f64	d0, d0, d7
340013e2:	eebc 0bc0 	vcvt.u32.f64	s0, d0
340013e6:	ed84 0a00 	vstr	s0, [r4]
340013ea:	e7e8      	b.n	340013be <EXymUSSPAy+0x6e>
340013ec:	f3af 8000 	nop.w
340013f0:	00000000 	.word	0x00000000
340013f4:	40d38800 	.word	0x40d38800
340013f8:	469c4000 	.word	0x469c4000
340013fc:	3f7ae148 	.word	0x3f7ae148

34001400 <evision_api_st_ae_new>:
34001400:	b510      	push	{r4, lr}
34001402:	4604      	mov	r4, r0
34001404:	b090      	sub	sp, #64	@ 0x40
34001406:	b160      	cbz	r0, 34001422 <evision_api_st_ae_new+0x22>
34001408:	2300      	movs	r3, #0
3400140a:	4c07      	ldr	r4, [pc, #28]	@ (34001428 <evision_api_st_ae_new+0x28>)
3400140c:	2140      	movs	r1, #64	@ 0x40
3400140e:	7023      	strb	r3, [r4, #0]
34001410:	65a0      	str	r0, [r4, #88]	@ 0x58
34001412:	4b06      	ldr	r3, [pc, #24]	@ (3400142c <evision_api_st_ae_new+0x2c>)
34001414:	4668      	mov	r0, sp
34001416:	4a06      	ldr	r2, [pc, #24]	@ (34001430 <evision_api_st_ae_new+0x30>)
34001418:	f021 f8ae 	bl	34022578 <sniprintf>
3400141c:	4668      	mov	r0, sp
3400141e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34001420:	4798      	blx	r3
34001422:	4620      	mov	r0, r4
34001424:	b010      	add	sp, #64	@ 0x40
34001426:	bd10      	pop	{r4, pc}
34001428:	340a3710 	.word	0x340a3710
3400142c:	340a301e 	.word	0x340a301e
34001430:	34027e5f 	.word	0x34027e5f

34001434 <evision_api_st_ae_delete>:
34001434:	2800      	cmp	r0, #0
34001436:	bf14      	ite	ne
34001438:	2001      	movne	r0, #1
3400143a:	f04f 30ff 	moveq.w	r0, #4294967295
3400143e:	4770      	bx	lr

34001440 <ZmyWHAIPUT>:
34001440:	2238      	movs	r2, #56	@ 0x38
34001442:	230a      	movs	r3, #10
34001444:	e9c0 2304 	strd	r2, r3, [r0, #16]
34001448:	2264      	movs	r2, #100	@ 0x64
3400144a:	232d      	movs	r3, #45	@ 0x2d
3400144c:	2178      	movs	r1, #120	@ 0x78
3400144e:	e9c0 2306 	strd	r2, r3, [r0, #24]
34001452:	f240 53dc 	movw	r3, #1500	@ 0x5dc
34001456:	b530      	push	{r4, r5, lr}
34001458:	e9c0 1308 	strd	r1, r3, [r0, #32]
3400145c:	f241 7470 	movw	r4, #6000	@ 0x1770
34001460:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
34001464:	e9c0 430a 	strd	r4, r3, [r0, #40]	@ 0x28
34001468:	a50b      	add	r5, pc, #44	@ (adr r5, 34001498 <ZmyWHAIPUT+0x58>)
3400146a:	e9d5 4500 	ldrd	r4, r5, [r5]
3400146e:	2305      	movs	r3, #5
34001470:	f248 01e8 	movw	r1, #33000	@ 0x80e8
34001474:	6503      	str	r3, [r0, #80]	@ 0x50
34001476:	2300      	movs	r3, #0
34001478:	e9c0 3110 	strd	r3, r1, [r0, #64]	@ 0x40
3400147c:	2101      	movs	r1, #1
3400147e:	e9c0 450c 	strd	r4, r5, [r0, #48]	@ 0x30
34001482:	a507      	add	r5, pc, #28	@ (adr r5, 340014a0 <ZmyWHAIPUT+0x60>)
34001484:	e9d5 4500 	ldrd	r4, r5, [r5]
34001488:	e9c0 1212 	strd	r1, r2, [r0, #72]	@ 0x48
3400148c:	e9c0 450e 	strd	r4, r5, [r0, #56]	@ 0x38
34001490:	6543      	str	r3, [r0, #84]	@ 0x54
34001492:	bd30      	pop	{r4, r5, pc}
34001494:	f3af 8000 	nop.w
34001498:	40000000 	.word	0x40000000
3400149c:	3f947ae1 	.word	0x3f947ae1
340014a0:	e0000000 	.word	0xe0000000
340014a4:	3f70624d 	.word	0x3f70624d

340014a8 <evision_api_st_ae_init>:
340014a8:	b510      	push	{r4, lr}
340014aa:	4604      	mov	r4, r0
340014ac:	b120      	cbz	r0, 340014b8 <evision_api_st_ae_init+0x10>
340014ae:	f7ff ffc7 	bl	34001440 <ZmyWHAIPUT>
340014b2:	2001      	movs	r0, #1
340014b4:	7020      	strb	r0, [r4, #0]
340014b6:	bd10      	pop	{r4, pc}
340014b8:	f04f 30ff 	mov.w	r0, #4294967295
340014bc:	e7fb      	b.n	340014b6 <evision_api_st_ae_init+0xe>

340014be <evision_api_st_ae_process>:
340014be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340014c2:	4615      	mov	r5, r2
340014c4:	469b      	mov	fp, r3
340014c6:	4604      	mov	r4, r0
340014c8:	b087      	sub	sp, #28
340014ca:	2800      	cmp	r0, #0
340014cc:	f000 8123 	beq.w	34001716 <evision_api_st_ae_process+0x258>
340014d0:	7803      	ldrb	r3, [r0, #0]
340014d2:	2b01      	cmp	r3, #1
340014d4:	d11a      	bne.n	3400150c <evision_api_st_ae_process+0x4e>
340014d6:	2302      	movs	r3, #2
340014d8:	7003      	strb	r3, [r0, #0]
340014da:	f8d4 8054 	ldr.w	r8, [r4, #84]	@ 0x54
340014de:	f1b8 0f00 	cmp.w	r8, #0
340014e2:	d017      	beq.n	34001514 <evision_api_st_ae_process+0x56>
340014e4:	4b90      	ldr	r3, [pc, #576]	@ (34001728 <evision_api_st_ae_process+0x26a>)
340014e6:	ea4f 0248 	mov.w	r2, r8, lsl #1
340014ea:	fbb3 f3f2 	udiv	r3, r3, r2
340014ee:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
340014f0:	428e      	cmp	r6, r1
340014f2:	d211      	bcs.n	34001518 <evision_api_st_ae_process+0x5a>
340014f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
340014f6:	42aa      	cmp	r2, r5
340014f8:	d90e      	bls.n	34001518 <evision_api_st_ae_process+0x5a>
340014fa:	fbb5 f2f3 	udiv	r2, r5, r3
340014fe:	fb03 5312 	mls	r3, r3, r2, r5
34001502:	b14b      	cbz	r3, 34001518 <evision_api_st_ae_process+0x5a>
34001504:	e9c4 5601 	strd	r5, r6, [r4, #4]
34001508:	2001      	movs	r0, #1
3400150a:	e106      	b.n	3400171a <evision_api_st_ae_process+0x25c>
3400150c:	2b02      	cmp	r3, #2
3400150e:	d0e4      	beq.n	340014da <evision_api_st_ae_process+0x1c>
34001510:	2000      	movs	r0, #0
34001512:	e102      	b.n	3400171a <evision_api_st_ae_process+0x25c>
34001514:	2301      	movs	r3, #1
34001516:	e7ea      	b.n	340014ee <evision_api_st_ae_process+0x30>
34001518:	f10d 0914 	add.w	r9, sp, #20
3400151c:	462a      	mov	r2, r5
3400151e:	ab04      	add	r3, sp, #16
34001520:	4620      	mov	r0, r4
34001522:	f8cd 9000 	str.w	r9, [sp]
34001526:	9103      	str	r1, [sp, #12]
34001528:	f7ff ff12 	bl	34001350 <EXymUSSPAy>
3400152c:	e9dd 7204 	ldrd	r7, r2, [sp, #16]
34001530:	f8d4 c010 	ldr.w	ip, [r4, #16]
34001534:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
34001538:	ee07 ca90 	vmov	s15, ip
3400153c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34001540:	ee07 ba90 	vmov	s15, fp
34001544:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34001548:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3400154c:	ee37 7b05 	vadd.f64	d7, d7, d5
34001550:	ee86 0b07 	vdiv.f64	d0, d6, d7
34001554:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34001556:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
3400155a:	459b      	cmp	fp, r3
3400155c:	9903      	ldr	r1, [sp, #12]
3400155e:	d248      	bcs.n	340015f2 <evision_api_st_ae_process+0x134>
34001560:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
34001564:	eeb4 0ae7 	vcmpe.f32	s0, s15
34001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400156c:	d441      	bmi.n	340015f2 <evision_api_st_ae_process+0x134>
3400156e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34001570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34001574:	428a      	cmp	r2, r1
34001576:	d220      	bcs.n	340015ba <evision_api_st_ae_process+0xfc>
34001578:	2a01      	cmp	r2, #1
3400157a:	4613      	mov	r3, r2
3400157c:	bf38      	it	cc
3400157e:	2301      	movcc	r3, #1
34001580:	ee07 3a90 	vmov	s15, r3
34001584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34001588:	ee67 7a80 	vmul.f32	s15, s15, s0
3400158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34001590:	ee17 3a90 	vmov	r3, s15
34001594:	428b      	cmp	r3, r1
34001596:	bfc1      	itttt	gt
34001598:	ee07 1a90 	vmovgt	s15, r1
3400159c:	eeb8 6ae7 	vcvtgt.f32.s32	s12, s15
340015a0:	ee07 2a90 	vmovgt	s15, r2
340015a4:	eef8 6a67 	vcvtgt.f32.u32	s13, s15
340015a8:	bfc3      	ittte	gt
340015aa:	eec6 7a26 	vdivgt.f32	s15, s12, s13
340015ae:	460b      	movgt	r3, r1
340015b0:	ee80 0a27 	vdivgt.f32	s0, s0, s15
340015b4:	eeb0 0a47 	vmovle.f32	s0, s14
340015b8:	6063      	str	r3, [r4, #4]
340015ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
340015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340015c2:	dda1      	ble.n	34001508 <evision_api_st_ae_process+0x4a>
340015c4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340015c8:	f01f fbde 	bl	34020d88 <log10>
340015cc:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
340015d0:	ee20 0b07 	vmul.f64	d0, d0, d7
340015d4:	ed9f 7b52 	vldr	d7, [pc, #328]	@ 34001720 <evision_api_st_ae_process+0x262>
340015d8:	ee20 0b07 	vmul.f64	d0, d0, d7
340015dc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
340015e0:	ee10 3a10 	vmov	r3, s0
340015e4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
340015e6:	443b      	add	r3, r7
340015e8:	4293      	cmp	r3, r2
340015ea:	bfd4      	ite	le
340015ec:	60a3      	strle	r3, [r4, #8]
340015ee:	60a2      	strgt	r2, [r4, #8]
340015f0:	e78a      	b.n	34001508 <evision_api_st_ae_process+0x4a>
340015f2:	ebac 030b 	sub.w	r3, ip, fp
340015f6:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
340015fa:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
340015fe:	9303      	str	r3, [sp, #12]
34001600:	69e3      	ldr	r3, [r4, #28]
34001602:	459e      	cmp	lr, r3
34001604:	d859      	bhi.n	340016ba <evision_api_st_ae_process+0x1fc>
34001606:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
3400160a:	9803      	ldr	r0, [sp, #12]
3400160c:	69a3      	ldr	r3, [r4, #24]
3400160e:	4343      	muls	r3, r0
34001610:	6960      	ldr	r0, [r4, #20]
34001612:	eb00 0a0c 	add.w	sl, r0, ip
34001616:	45da      	cmp	sl, fp
34001618:	f8df a114 	ldr.w	sl, [pc, #276]	@ 34001730 <evision_api_st_ae_process+0x272>
3400161c:	d255      	bcs.n	340016ca <evision_api_st_ae_process+0x20c>
3400161e:	ee07 ea90 	vmov	s15, lr
34001622:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 3400172c <evision_api_st_ae_process+0x26e>
34001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400162a:	ee67 7a87 	vmul.f32	s15, s15, s14
3400162e:	ee07 3a10 	vmov	s14, r3
34001632:	eef1 6a67 	vneg.f32	s13, s15
34001636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400163a:	eeb4 7ae6 	vcmpe.f32	s14, s13
3400163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001642:	d504      	bpl.n	3400164e <evision_api_st_ae_process+0x190>
34001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34001648:	ee17 3a90 	vmov	r3, s15
3400164c:	425b      	negs	r3, r3
3400164e:	2b00      	cmp	r3, #0
34001650:	d050      	beq.n	340016f4 <evision_api_st_ae_process+0x236>
34001652:	42be      	cmp	r6, r7
34001654:	d144      	bne.n	340016e0 <evision_api_st_ae_process+0x222>
34001656:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34001658:	428a      	cmp	r2, r1
3400165a:	d301      	bcc.n	34001660 <evision_api_st_ae_process+0x1a2>
3400165c:	2b00      	cmp	r3, #0
3400165e:	da3f      	bge.n	340016e0 <evision_api_st_ae_process+0x222>
34001660:	9803      	ldr	r0, [sp, #12]
34001662:	ee07 2a90 	vmov	s15, r2
34001666:	fb02 0000 	mla	r0, r2, r0, r0
3400166a:	ee06 0a90 	vmov	s13, r0
3400166e:	2b00      	cmp	r3, #0
34001670:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34001674:	eeb8 6be6 	vcvt.f64.s32	d6, s13
34001678:	da2f      	bge.n	340016da <evision_api_st_ae_process+0x21c>
3400167a:	ed94 5b0e 	vldr	d5, [r4, #56]	@ 0x38
3400167e:	eea5 7b06 	vfma.f64	d7, d5, d6
34001682:	eebd 7bc7 	vcvt.s32.f64	s14, d7
34001686:	ee17 2a10 	vmov	r2, s14
3400168a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400168c:	60a7      	str	r7, [r4, #8]
3400168e:	429a      	cmp	r2, r3
34001690:	bfb8      	it	lt
34001692:	461a      	movlt	r2, r3
34001694:	428a      	cmp	r2, r1
34001696:	bfd4      	ite	le
34001698:	6062      	strle	r2, [r4, #4]
3400169a:	6061      	strgt	r1, [r4, #4]
3400169c:	4620      	mov	r0, r4
3400169e:	f8cd 9000 	str.w	r9, [sp]
340016a2:	ab04      	add	r3, sp, #16
340016a4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
340016a8:	f7ff fdfe 	bl	340012a8 <jkCowjPIUr>
340016ac:	9b04      	ldr	r3, [sp, #16]
340016ae:	9d05      	ldr	r5, [sp, #20]
340016b0:	60a3      	str	r3, [r4, #8]
340016b2:	6065      	str	r5, [r4, #4]
340016b4:	f8ca 8060 	str.w	r8, [sl, #96]	@ 0x60
340016b8:	e726      	b.n	34001508 <evision_api_st_ae_process+0x4a>
340016ba:	6a23      	ldr	r3, [r4, #32]
340016bc:	459e      	cmp	lr, r3
340016be:	bf2c      	ite	cs
340016c0:	f8d4 e02c 	ldrcs.w	lr, [r4, #44]	@ 0x2c
340016c4:	f8d4 e028 	ldrcc.w	lr, [r4, #40]	@ 0x28
340016c8:	e79f      	b.n	3400160a <evision_api_st_ae_process+0x14c>
340016ca:	ebac 0c00 	sub.w	ip, ip, r0
340016ce:	45dc      	cmp	ip, fp
340016d0:	dd10      	ble.n	340016f4 <evision_api_st_ae_process+0x236>
340016d2:	4573      	cmp	r3, lr
340016d4:	bfa8      	it	ge
340016d6:	4673      	movge	r3, lr
340016d8:	e7b9      	b.n	3400164e <evision_api_st_ae_process+0x190>
340016da:	ed94 5b0c 	vldr	d5, [r4, #48]	@ 0x30
340016de:	e7ce      	b.n	3400167e <evision_api_st_ae_process+0x1c0>
340016e0:	441f      	add	r7, r3
340016e2:	42be      	cmp	r6, r7
340016e4:	dc03      	bgt.n	340016ee <evision_api_st_ae_process+0x230>
340016e6:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
340016e8:	42be      	cmp	r6, r7
340016ea:	bfa8      	it	ge
340016ec:	463e      	movge	r6, r7
340016ee:	e9c4 2601 	strd	r2, r6, [r4, #4]
340016f2:	e7d3      	b.n	3400169c <evision_api_st_ae_process+0x1de>
340016f4:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
340016f8:	4598      	cmp	r8, r3
340016fa:	d00a      	beq.n	34001712 <evision_api_st_ae_process+0x254>
340016fc:	462a      	mov	r2, r5
340016fe:	4620      	mov	r0, r4
34001700:	f8cd 9000 	str.w	r9, [sp]
34001704:	ab04      	add	r3, sp, #16
34001706:	f1b8 0f00 	cmp.w	r8, #0
3400170a:	d1cd      	bne.n	340016a8 <evision_api_st_ae_process+0x1ea>
3400170c:	f7ff fe20 	bl	34001350 <EXymUSSPAy>
34001710:	e7cc      	b.n	340016ac <evision_api_st_ae_process+0x1ee>
34001712:	60a1      	str	r1, [r4, #8]
34001714:	e7cd      	b.n	340016b2 <evision_api_st_ae_process+0x1f4>
34001716:	f04f 30ff 	mov.w	r0, #4294967295
3400171a:	b007      	add	sp, #28
3400171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34001720:	00000000 	.word	0x00000000
34001724:	408f4000 	.word	0x408f4000
34001728:	000f4240 	.word	0x000f4240
3400172c:	3f59999a 	.word	0x3f59999a
34001730:	340a3710 	.word	0x340a3710

34001734 <__aeabi_drsub>:
34001734:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
34001738:	e002      	b.n	34001740 <__adddf3>
3400173a:	bf00      	nop

3400173c <__aeabi_dsub>:
3400173c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

34001740 <__adddf3>:
34001740:	b530      	push	{r4, r5, lr}
34001742:	ea4f 0441 	mov.w	r4, r1, lsl #1
34001746:	ea4f 0543 	mov.w	r5, r3, lsl #1
3400174a:	ea94 0f05 	teq	r4, r5
3400174e:	bf08      	it	eq
34001750:	ea90 0f02 	teqeq	r0, r2
34001754:	bf1f      	itttt	ne
34001756:	ea54 0c00 	orrsne.w	ip, r4, r0
3400175a:	ea55 0c02 	orrsne.w	ip, r5, r2
3400175e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
34001762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
34001766:	f000 80e2 	beq.w	3400192e <__adddf3+0x1ee>
3400176a:	ea4f 5454 	mov.w	r4, r4, lsr #21
3400176e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
34001772:	bfb8      	it	lt
34001774:	426d      	neglt	r5, r5
34001776:	dd0c      	ble.n	34001792 <__adddf3+0x52>
34001778:	442c      	add	r4, r5
3400177a:	ea80 0202 	eor.w	r2, r0, r2
3400177e:	ea81 0303 	eor.w	r3, r1, r3
34001782:	ea82 0000 	eor.w	r0, r2, r0
34001786:	ea83 0101 	eor.w	r1, r3, r1
3400178a:	ea80 0202 	eor.w	r2, r0, r2
3400178e:	ea81 0303 	eor.w	r3, r1, r3
34001792:	2d36      	cmp	r5, #54	@ 0x36
34001794:	bf88      	it	hi
34001796:	bd30      	pophi	{r4, r5, pc}
34001798:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
3400179c:	ea4f 3101 	mov.w	r1, r1, lsl #12
340017a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
340017a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
340017a8:	d002      	beq.n	340017b0 <__adddf3+0x70>
340017aa:	4240      	negs	r0, r0
340017ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
340017b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
340017b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
340017b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
340017bc:	d002      	beq.n	340017c4 <__adddf3+0x84>
340017be:	4252      	negs	r2, r2
340017c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
340017c4:	ea94 0f05 	teq	r4, r5
340017c8:	f000 80a7 	beq.w	3400191a <__adddf3+0x1da>
340017cc:	f1a4 0401 	sub.w	r4, r4, #1
340017d0:	f1d5 0e20 	rsbs	lr, r5, #32
340017d4:	db0d      	blt.n	340017f2 <__adddf3+0xb2>
340017d6:	fa02 fc0e 	lsl.w	ip, r2, lr
340017da:	fa22 f205 	lsr.w	r2, r2, r5
340017de:	1880      	adds	r0, r0, r2
340017e0:	f141 0100 	adc.w	r1, r1, #0
340017e4:	fa03 f20e 	lsl.w	r2, r3, lr
340017e8:	1880      	adds	r0, r0, r2
340017ea:	fa43 f305 	asr.w	r3, r3, r5
340017ee:	4159      	adcs	r1, r3
340017f0:	e00e      	b.n	34001810 <__adddf3+0xd0>
340017f2:	f1a5 0520 	sub.w	r5, r5, #32
340017f6:	f10e 0e20 	add.w	lr, lr, #32
340017fa:	2a01      	cmp	r2, #1
340017fc:	fa03 fc0e 	lsl.w	ip, r3, lr
34001800:	bf28      	it	cs
34001802:	f04c 0c02 	orrcs.w	ip, ip, #2
34001806:	fa43 f305 	asr.w	r3, r3, r5
3400180a:	18c0      	adds	r0, r0, r3
3400180c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
34001810:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001814:	d507      	bpl.n	34001826 <__adddf3+0xe6>
34001816:	f04f 0e00 	mov.w	lr, #0
3400181a:	f1dc 0c00 	rsbs	ip, ip, #0
3400181e:	eb7e 0000 	sbcs.w	r0, lr, r0
34001822:	eb6e 0101 	sbc.w	r1, lr, r1
34001826:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
3400182a:	d31b      	bcc.n	34001864 <__adddf3+0x124>
3400182c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34001830:	d30c      	bcc.n	3400184c <__adddf3+0x10c>
34001832:	0849      	lsrs	r1, r1, #1
34001834:	ea5f 0030 	movs.w	r0, r0, rrx
34001838:	ea4f 0c3c 	mov.w	ip, ip, rrx
3400183c:	f104 0401 	add.w	r4, r4, #1
34001840:	ea4f 5244 	mov.w	r2, r4, lsl #21
34001844:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
34001848:	f080 809a 	bcs.w	34001980 <__adddf3+0x240>
3400184c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
34001850:	bf08      	it	eq
34001852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
34001856:	f150 0000 	adcs.w	r0, r0, #0
3400185a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
3400185e:	ea41 0105 	orr.w	r1, r1, r5
34001862:	bd30      	pop	{r4, r5, pc}
34001864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
34001868:	4140      	adcs	r0, r0
3400186a:	eb41 0101 	adc.w	r1, r1, r1
3400186e:	3c01      	subs	r4, #1
34001870:	bf28      	it	cs
34001872:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
34001876:	d2e9      	bcs.n	3400184c <__adddf3+0x10c>
34001878:	f091 0f00 	teq	r1, #0
3400187c:	bf04      	itt	eq
3400187e:	4601      	moveq	r1, r0
34001880:	2000      	moveq	r0, #0
34001882:	fab1 f381 	clz	r3, r1
34001886:	bf08      	it	eq
34001888:	3320      	addeq	r3, #32
3400188a:	f1a3 030b 	sub.w	r3, r3, #11
3400188e:	f1b3 0220 	subs.w	r2, r3, #32
34001892:	da0c      	bge.n	340018ae <__adddf3+0x16e>
34001894:	320c      	adds	r2, #12
34001896:	dd08      	ble.n	340018aa <__adddf3+0x16a>
34001898:	f102 0c14 	add.w	ip, r2, #20
3400189c:	f1c2 020c 	rsb	r2, r2, #12
340018a0:	fa01 f00c 	lsl.w	r0, r1, ip
340018a4:	fa21 f102 	lsr.w	r1, r1, r2
340018a8:	e00c      	b.n	340018c4 <__adddf3+0x184>
340018aa:	f102 0214 	add.w	r2, r2, #20
340018ae:	bfd8      	it	le
340018b0:	f1c2 0c20 	rsble	ip, r2, #32
340018b4:	fa01 f102 	lsl.w	r1, r1, r2
340018b8:	fa20 fc0c 	lsr.w	ip, r0, ip
340018bc:	bfdc      	itt	le
340018be:	ea41 010c 	orrle.w	r1, r1, ip
340018c2:	4090      	lslle	r0, r2
340018c4:	1ae4      	subs	r4, r4, r3
340018c6:	bfa2      	ittt	ge
340018c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
340018cc:	4329      	orrge	r1, r5
340018ce:	bd30      	popge	{r4, r5, pc}
340018d0:	ea6f 0404 	mvn.w	r4, r4
340018d4:	3c1f      	subs	r4, #31
340018d6:	da1c      	bge.n	34001912 <__adddf3+0x1d2>
340018d8:	340c      	adds	r4, #12
340018da:	dc0e      	bgt.n	340018fa <__adddf3+0x1ba>
340018dc:	f104 0414 	add.w	r4, r4, #20
340018e0:	f1c4 0220 	rsb	r2, r4, #32
340018e4:	fa20 f004 	lsr.w	r0, r0, r4
340018e8:	fa01 f302 	lsl.w	r3, r1, r2
340018ec:	ea40 0003 	orr.w	r0, r0, r3
340018f0:	fa21 f304 	lsr.w	r3, r1, r4
340018f4:	ea45 0103 	orr.w	r1, r5, r3
340018f8:	bd30      	pop	{r4, r5, pc}
340018fa:	f1c4 040c 	rsb	r4, r4, #12
340018fe:	f1c4 0220 	rsb	r2, r4, #32
34001902:	fa20 f002 	lsr.w	r0, r0, r2
34001906:	fa01 f304 	lsl.w	r3, r1, r4
3400190a:	ea40 0003 	orr.w	r0, r0, r3
3400190e:	4629      	mov	r1, r5
34001910:	bd30      	pop	{r4, r5, pc}
34001912:	fa21 f004 	lsr.w	r0, r1, r4
34001916:	4629      	mov	r1, r5
34001918:	bd30      	pop	{r4, r5, pc}
3400191a:	f094 0f00 	teq	r4, #0
3400191e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
34001922:	bf06      	itte	eq
34001924:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
34001928:	3401      	addeq	r4, #1
3400192a:	3d01      	subne	r5, #1
3400192c:	e74e      	b.n	340017cc <__adddf3+0x8c>
3400192e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
34001932:	bf18      	it	ne
34001934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
34001938:	d029      	beq.n	3400198e <__adddf3+0x24e>
3400193a:	ea94 0f05 	teq	r4, r5
3400193e:	bf08      	it	eq
34001940:	ea90 0f02 	teqeq	r0, r2
34001944:	d005      	beq.n	34001952 <__adddf3+0x212>
34001946:	ea54 0c00 	orrs.w	ip, r4, r0
3400194a:	bf04      	itt	eq
3400194c:	4619      	moveq	r1, r3
3400194e:	4610      	moveq	r0, r2
34001950:	bd30      	pop	{r4, r5, pc}
34001952:	ea91 0f03 	teq	r1, r3
34001956:	bf1e      	ittt	ne
34001958:	2100      	movne	r1, #0
3400195a:	2000      	movne	r0, #0
3400195c:	bd30      	popne	{r4, r5, pc}
3400195e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
34001962:	d105      	bne.n	34001970 <__adddf3+0x230>
34001964:	0040      	lsls	r0, r0, #1
34001966:	4149      	adcs	r1, r1
34001968:	bf28      	it	cs
3400196a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
3400196e:	bd30      	pop	{r4, r5, pc}
34001970:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
34001974:	bf3c      	itt	cc
34001976:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
3400197a:	bd30      	popcc	{r4, r5, pc}
3400197c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001980:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
34001984:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
34001988:	f04f 0000 	mov.w	r0, #0
3400198c:	bd30      	pop	{r4, r5, pc}
3400198e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
34001992:	bf1a      	itte	ne
34001994:	4619      	movne	r1, r3
34001996:	4610      	movne	r0, r2
34001998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
3400199c:	bf1c      	itt	ne
3400199e:	460b      	movne	r3, r1
340019a0:	4602      	movne	r2, r0
340019a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
340019a6:	bf06      	itte	eq
340019a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
340019ac:	ea91 0f03 	teqeq	r1, r3
340019b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
340019b4:	bd30      	pop	{r4, r5, pc}
340019b6:	bf00      	nop

340019b8 <__aeabi_ui2d>:
340019b8:	f090 0f00 	teq	r0, #0
340019bc:	bf04      	itt	eq
340019be:	2100      	moveq	r1, #0
340019c0:	4770      	bxeq	lr
340019c2:	b530      	push	{r4, r5, lr}
340019c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340019c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
340019cc:	f04f 0500 	mov.w	r5, #0
340019d0:	f04f 0100 	mov.w	r1, #0
340019d4:	e750      	b.n	34001878 <__adddf3+0x138>
340019d6:	bf00      	nop

340019d8 <__aeabi_i2d>:
340019d8:	f090 0f00 	teq	r0, #0
340019dc:	bf04      	itt	eq
340019de:	2100      	moveq	r1, #0
340019e0:	4770      	bxeq	lr
340019e2:	b530      	push	{r4, r5, lr}
340019e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340019e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
340019ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
340019f0:	bf48      	it	mi
340019f2:	4240      	negmi	r0, r0
340019f4:	f04f 0100 	mov.w	r1, #0
340019f8:	e73e      	b.n	34001878 <__adddf3+0x138>
340019fa:	bf00      	nop

340019fc <__aeabi_f2d>:
340019fc:	0042      	lsls	r2, r0, #1
340019fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
34001a02:	ea4f 0131 	mov.w	r1, r1, rrx
34001a06:	ea4f 7002 	mov.w	r0, r2, lsl #28
34001a0a:	bf1f      	itttt	ne
34001a0c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
34001a10:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
34001a14:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
34001a18:	4770      	bxne	lr
34001a1a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
34001a1e:	bf08      	it	eq
34001a20:	4770      	bxeq	lr
34001a22:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
34001a26:	bf04      	itt	eq
34001a28:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
34001a2c:	4770      	bxeq	lr
34001a2e:	b530      	push	{r4, r5, lr}
34001a30:	f44f 7460 	mov.w	r4, #896	@ 0x380
34001a34:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001a38:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34001a3c:	e71c      	b.n	34001878 <__adddf3+0x138>
34001a3e:	bf00      	nop

34001a40 <__aeabi_ul2d>:
34001a40:	ea50 0201 	orrs.w	r2, r0, r1
34001a44:	bf08      	it	eq
34001a46:	4770      	bxeq	lr
34001a48:	b530      	push	{r4, r5, lr}
34001a4a:	f04f 0500 	mov.w	r5, #0
34001a4e:	e00a      	b.n	34001a66 <__aeabi_l2d+0x16>

34001a50 <__aeabi_l2d>:
34001a50:	ea50 0201 	orrs.w	r2, r0, r1
34001a54:	bf08      	it	eq
34001a56:	4770      	bxeq	lr
34001a58:	b530      	push	{r4, r5, lr}
34001a5a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
34001a5e:	d502      	bpl.n	34001a66 <__aeabi_l2d+0x16>
34001a60:	4240      	negs	r0, r0
34001a62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001a66:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001a6a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34001a6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
34001a72:	f43f aed8 	beq.w	34001826 <__adddf3+0xe6>
34001a76:	f04f 0203 	mov.w	r2, #3
34001a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34001a7e:	bf18      	it	ne
34001a80:	3203      	addne	r2, #3
34001a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34001a86:	bf18      	it	ne
34001a88:	3203      	addne	r2, #3
34001a8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
34001a8e:	f1c2 0320 	rsb	r3, r2, #32
34001a92:	fa00 fc03 	lsl.w	ip, r0, r3
34001a96:	fa20 f002 	lsr.w	r0, r0, r2
34001a9a:	fa01 fe03 	lsl.w	lr, r1, r3
34001a9e:	ea40 000e 	orr.w	r0, r0, lr
34001aa2:	fa21 f102 	lsr.w	r1, r1, r2
34001aa6:	4414      	add	r4, r2
34001aa8:	e6bd      	b.n	34001826 <__adddf3+0xe6>
34001aaa:	bf00      	nop

34001aac <__aeabi_ldivmod>:
34001aac:	b97b      	cbnz	r3, 34001ace <__aeabi_ldivmod+0x22>
34001aae:	b972      	cbnz	r2, 34001ace <__aeabi_ldivmod+0x22>
34001ab0:	2900      	cmp	r1, #0
34001ab2:	bfbe      	ittt	lt
34001ab4:	2000      	movlt	r0, #0
34001ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
34001aba:	e006      	blt.n	34001aca <__aeabi_ldivmod+0x1e>
34001abc:	bf08      	it	eq
34001abe:	2800      	cmpeq	r0, #0
34001ac0:	bf1c      	itt	ne
34001ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
34001ac6:	f04f 30ff 	movne.w	r0, #4294967295
34001aca:	f000 b9fb 	b.w	34001ec4 <__aeabi_idiv0>
34001ace:	f1ad 0c08 	sub.w	ip, sp, #8
34001ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34001ad6:	2900      	cmp	r1, #0
34001ad8:	db09      	blt.n	34001aee <__aeabi_ldivmod+0x42>
34001ada:	2b00      	cmp	r3, #0
34001adc:	db1a      	blt.n	34001b14 <__aeabi_ldivmod+0x68>
34001ade:	f000 f84d 	bl	34001b7c <__udivmoddi4>
34001ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
34001ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001aea:	b004      	add	sp, #16
34001aec:	4770      	bx	lr
34001aee:	4240      	negs	r0, r0
34001af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001af4:	2b00      	cmp	r3, #0
34001af6:	db1b      	blt.n	34001b30 <__aeabi_ldivmod+0x84>
34001af8:	f000 f840 	bl	34001b7c <__udivmoddi4>
34001afc:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b04:	b004      	add	sp, #16
34001b06:	4240      	negs	r0, r0
34001b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b0c:	4252      	negs	r2, r2
34001b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b12:	4770      	bx	lr
34001b14:	4252      	negs	r2, r2
34001b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b1a:	f000 f82f 	bl	34001b7c <__udivmoddi4>
34001b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b26:	b004      	add	sp, #16
34001b28:	4240      	negs	r0, r0
34001b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b2e:	4770      	bx	lr
34001b30:	4252      	negs	r2, r2
34001b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b36:	f000 f821 	bl	34001b7c <__udivmoddi4>
34001b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b42:	b004      	add	sp, #16
34001b44:	4252      	negs	r2, r2
34001b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b4a:	4770      	bx	lr

34001b4c <__aeabi_uldivmod>:
34001b4c:	b953      	cbnz	r3, 34001b64 <__aeabi_uldivmod+0x18>
34001b4e:	b94a      	cbnz	r2, 34001b64 <__aeabi_uldivmod+0x18>
34001b50:	2900      	cmp	r1, #0
34001b52:	bf08      	it	eq
34001b54:	2800      	cmpeq	r0, #0
34001b56:	bf1c      	itt	ne
34001b58:	f04f 31ff 	movne.w	r1, #4294967295
34001b5c:	f04f 30ff 	movne.w	r0, #4294967295
34001b60:	f000 b9b0 	b.w	34001ec4 <__aeabi_idiv0>
34001b64:	f1ad 0c08 	sub.w	ip, sp, #8
34001b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34001b6c:	f000 f806 	bl	34001b7c <__udivmoddi4>
34001b70:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b78:	b004      	add	sp, #16
34001b7a:	4770      	bx	lr

34001b7c <__udivmoddi4>:
34001b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001b80:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34001b82:	4688      	mov	r8, r1
34001b84:	4604      	mov	r4, r0
34001b86:	468e      	mov	lr, r1
34001b88:	2b00      	cmp	r3, #0
34001b8a:	d14a      	bne.n	34001c22 <__udivmoddi4+0xa6>
34001b8c:	428a      	cmp	r2, r1
34001b8e:	4617      	mov	r7, r2
34001b90:	d95f      	bls.n	34001c52 <__udivmoddi4+0xd6>
34001b92:	fab2 f682 	clz	r6, r2
34001b96:	b14e      	cbz	r6, 34001bac <__udivmoddi4+0x30>
34001b98:	f1c6 0320 	rsb	r3, r6, #32
34001b9c:	fa01 fe06 	lsl.w	lr, r1, r6
34001ba0:	40b7      	lsls	r7, r6
34001ba2:	40b4      	lsls	r4, r6
34001ba4:	fa20 f303 	lsr.w	r3, r0, r3
34001ba8:	ea43 0e0e 	orr.w	lr, r3, lr
34001bac:	ea4f 4817 	mov.w	r8, r7, lsr #16
34001bb0:	fa1f fc87 	uxth.w	ip, r7
34001bb4:	0c23      	lsrs	r3, r4, #16
34001bb6:	fbbe f1f8 	udiv	r1, lr, r8
34001bba:	fb08 ee11 	mls	lr, r8, r1, lr
34001bbe:	fb01 f20c 	mul.w	r2, r1, ip
34001bc2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34001bc6:	429a      	cmp	r2, r3
34001bc8:	d907      	bls.n	34001bda <__udivmoddi4+0x5e>
34001bca:	18fb      	adds	r3, r7, r3
34001bcc:	f101 30ff 	add.w	r0, r1, #4294967295
34001bd0:	d202      	bcs.n	34001bd8 <__udivmoddi4+0x5c>
34001bd2:	429a      	cmp	r2, r3
34001bd4:	f200 8154 	bhi.w	34001e80 <__udivmoddi4+0x304>
34001bd8:	4601      	mov	r1, r0
34001bda:	1a9b      	subs	r3, r3, r2
34001bdc:	b2a2      	uxth	r2, r4
34001bde:	fbb3 f0f8 	udiv	r0, r3, r8
34001be2:	fb08 3310 	mls	r3, r8, r0, r3
34001be6:	fb00 fc0c 	mul.w	ip, r0, ip
34001bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34001bee:	4594      	cmp	ip, r2
34001bf0:	d90b      	bls.n	34001c0a <__udivmoddi4+0x8e>
34001bf2:	18ba      	adds	r2, r7, r2
34001bf4:	f100 33ff 	add.w	r3, r0, #4294967295
34001bf8:	bf2c      	ite	cs
34001bfa:	2401      	movcs	r4, #1
34001bfc:	2400      	movcc	r4, #0
34001bfe:	4594      	cmp	ip, r2
34001c00:	d902      	bls.n	34001c08 <__udivmoddi4+0x8c>
34001c02:	2c00      	cmp	r4, #0
34001c04:	f000 813f 	beq.w	34001e86 <__udivmoddi4+0x30a>
34001c08:	4618      	mov	r0, r3
34001c0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34001c0e:	eba2 020c 	sub.w	r2, r2, ip
34001c12:	2100      	movs	r1, #0
34001c14:	b11d      	cbz	r5, 34001c1e <__udivmoddi4+0xa2>
34001c16:	40f2      	lsrs	r2, r6
34001c18:	2300      	movs	r3, #0
34001c1a:	e9c5 2300 	strd	r2, r3, [r5]
34001c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34001c22:	428b      	cmp	r3, r1
34001c24:	d905      	bls.n	34001c32 <__udivmoddi4+0xb6>
34001c26:	b10d      	cbz	r5, 34001c2c <__udivmoddi4+0xb0>
34001c28:	e9c5 0100 	strd	r0, r1, [r5]
34001c2c:	2100      	movs	r1, #0
34001c2e:	4608      	mov	r0, r1
34001c30:	e7f5      	b.n	34001c1e <__udivmoddi4+0xa2>
34001c32:	fab3 f183 	clz	r1, r3
34001c36:	2900      	cmp	r1, #0
34001c38:	d14e      	bne.n	34001cd8 <__udivmoddi4+0x15c>
34001c3a:	4543      	cmp	r3, r8
34001c3c:	f0c0 8112 	bcc.w	34001e64 <__udivmoddi4+0x2e8>
34001c40:	4282      	cmp	r2, r0
34001c42:	f240 810f 	bls.w	34001e64 <__udivmoddi4+0x2e8>
34001c46:	4608      	mov	r0, r1
34001c48:	2d00      	cmp	r5, #0
34001c4a:	d0e8      	beq.n	34001c1e <__udivmoddi4+0xa2>
34001c4c:	e9c5 4e00 	strd	r4, lr, [r5]
34001c50:	e7e5      	b.n	34001c1e <__udivmoddi4+0xa2>
34001c52:	2a00      	cmp	r2, #0
34001c54:	f000 80ac 	beq.w	34001db0 <__udivmoddi4+0x234>
34001c58:	fab2 f682 	clz	r6, r2
34001c5c:	2e00      	cmp	r6, #0
34001c5e:	f040 80bb 	bne.w	34001dd8 <__udivmoddi4+0x25c>
34001c62:	1a8b      	subs	r3, r1, r2
34001c64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
34001c68:	b2bc      	uxth	r4, r7
34001c6a:	2101      	movs	r1, #1
34001c6c:	0c02      	lsrs	r2, r0, #16
34001c6e:	b280      	uxth	r0, r0
34001c70:	fbb3 fcfe 	udiv	ip, r3, lr
34001c74:	fb0e 331c 	mls	r3, lr, ip, r3
34001c78:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
34001c7c:	fb04 f20c 	mul.w	r2, r4, ip
34001c80:	429a      	cmp	r2, r3
34001c82:	d90e      	bls.n	34001ca2 <__udivmoddi4+0x126>
34001c84:	18fb      	adds	r3, r7, r3
34001c86:	f10c 38ff 	add.w	r8, ip, #4294967295
34001c8a:	bf2c      	ite	cs
34001c8c:	f04f 0901 	movcs.w	r9, #1
34001c90:	f04f 0900 	movcc.w	r9, #0
34001c94:	429a      	cmp	r2, r3
34001c96:	d903      	bls.n	34001ca0 <__udivmoddi4+0x124>
34001c98:	f1b9 0f00 	cmp.w	r9, #0
34001c9c:	f000 80ec 	beq.w	34001e78 <__udivmoddi4+0x2fc>
34001ca0:	46c4      	mov	ip, r8
34001ca2:	1a9b      	subs	r3, r3, r2
34001ca4:	fbb3 f8fe 	udiv	r8, r3, lr
34001ca8:	fb0e 3318 	mls	r3, lr, r8, r3
34001cac:	fb04 f408 	mul.w	r4, r4, r8
34001cb0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34001cb4:	4294      	cmp	r4, r2
34001cb6:	d90b      	bls.n	34001cd0 <__udivmoddi4+0x154>
34001cb8:	18ba      	adds	r2, r7, r2
34001cba:	f108 33ff 	add.w	r3, r8, #4294967295
34001cbe:	bf2c      	ite	cs
34001cc0:	2001      	movcs	r0, #1
34001cc2:	2000      	movcc	r0, #0
34001cc4:	4294      	cmp	r4, r2
34001cc6:	d902      	bls.n	34001cce <__udivmoddi4+0x152>
34001cc8:	2800      	cmp	r0, #0
34001cca:	f000 80d1 	beq.w	34001e70 <__udivmoddi4+0x2f4>
34001cce:	4698      	mov	r8, r3
34001cd0:	1b12      	subs	r2, r2, r4
34001cd2:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34001cd6:	e79d      	b.n	34001c14 <__udivmoddi4+0x98>
34001cd8:	f1c1 0620 	rsb	r6, r1, #32
34001cdc:	408b      	lsls	r3, r1
34001cde:	fa08 f401 	lsl.w	r4, r8, r1
34001ce2:	fa00 f901 	lsl.w	r9, r0, r1
34001ce6:	fa22 f706 	lsr.w	r7, r2, r6
34001cea:	fa28 f806 	lsr.w	r8, r8, r6
34001cee:	408a      	lsls	r2, r1
34001cf0:	431f      	orrs	r7, r3
34001cf2:	fa20 f306 	lsr.w	r3, r0, r6
34001cf6:	0c38      	lsrs	r0, r7, #16
34001cf8:	4323      	orrs	r3, r4
34001cfa:	fa1f fc87 	uxth.w	ip, r7
34001cfe:	0c1c      	lsrs	r4, r3, #16
34001d00:	fbb8 fef0 	udiv	lr, r8, r0
34001d04:	fb00 881e 	mls	r8, r0, lr, r8
34001d08:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34001d0c:	fb0e f80c 	mul.w	r8, lr, ip
34001d10:	45a0      	cmp	r8, r4
34001d12:	d90e      	bls.n	34001d32 <__udivmoddi4+0x1b6>
34001d14:	193c      	adds	r4, r7, r4
34001d16:	f10e 3aff 	add.w	sl, lr, #4294967295
34001d1a:	bf2c      	ite	cs
34001d1c:	f04f 0b01 	movcs.w	fp, #1
34001d20:	f04f 0b00 	movcc.w	fp, #0
34001d24:	45a0      	cmp	r8, r4
34001d26:	d903      	bls.n	34001d30 <__udivmoddi4+0x1b4>
34001d28:	f1bb 0f00 	cmp.w	fp, #0
34001d2c:	f000 80b8 	beq.w	34001ea0 <__udivmoddi4+0x324>
34001d30:	46d6      	mov	lr, sl
34001d32:	eba4 0408 	sub.w	r4, r4, r8
34001d36:	fa1f f883 	uxth.w	r8, r3
34001d3a:	fbb4 f3f0 	udiv	r3, r4, r0
34001d3e:	fb00 4413 	mls	r4, r0, r3, r4
34001d42:	fb03 fc0c 	mul.w	ip, r3, ip
34001d46:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
34001d4a:	45a4      	cmp	ip, r4
34001d4c:	d90e      	bls.n	34001d6c <__udivmoddi4+0x1f0>
34001d4e:	193c      	adds	r4, r7, r4
34001d50:	f103 30ff 	add.w	r0, r3, #4294967295
34001d54:	bf2c      	ite	cs
34001d56:	f04f 0801 	movcs.w	r8, #1
34001d5a:	f04f 0800 	movcc.w	r8, #0
34001d5e:	45a4      	cmp	ip, r4
34001d60:	d903      	bls.n	34001d6a <__udivmoddi4+0x1ee>
34001d62:	f1b8 0f00 	cmp.w	r8, #0
34001d66:	f000 809f 	beq.w	34001ea8 <__udivmoddi4+0x32c>
34001d6a:	4603      	mov	r3, r0
34001d6c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
34001d70:	eba4 040c 	sub.w	r4, r4, ip
34001d74:	fba0 ec02 	umull	lr, ip, r0, r2
34001d78:	4564      	cmp	r4, ip
34001d7a:	4673      	mov	r3, lr
34001d7c:	46e0      	mov	r8, ip
34001d7e:	d302      	bcc.n	34001d86 <__udivmoddi4+0x20a>
34001d80:	d107      	bne.n	34001d92 <__udivmoddi4+0x216>
34001d82:	45f1      	cmp	r9, lr
34001d84:	d205      	bcs.n	34001d92 <__udivmoddi4+0x216>
34001d86:	ebbe 0302 	subs.w	r3, lr, r2
34001d8a:	eb6c 0c07 	sbc.w	ip, ip, r7
34001d8e:	3801      	subs	r0, #1
34001d90:	46e0      	mov	r8, ip
34001d92:	b15d      	cbz	r5, 34001dac <__udivmoddi4+0x230>
34001d94:	ebb9 0203 	subs.w	r2, r9, r3
34001d98:	eb64 0408 	sbc.w	r4, r4, r8
34001d9c:	fa04 f606 	lsl.w	r6, r4, r6
34001da0:	fa22 f301 	lsr.w	r3, r2, r1
34001da4:	40cc      	lsrs	r4, r1
34001da6:	431e      	orrs	r6, r3
34001da8:	e9c5 6400 	strd	r6, r4, [r5]
34001dac:	2100      	movs	r1, #0
34001dae:	e736      	b.n	34001c1e <__udivmoddi4+0xa2>
34001db0:	fbb1 fcf2 	udiv	ip, r1, r2
34001db4:	0c01      	lsrs	r1, r0, #16
34001db6:	4614      	mov	r4, r2
34001db8:	b280      	uxth	r0, r0
34001dba:	4696      	mov	lr, r2
34001dbc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34001dc0:	2620      	movs	r6, #32
34001dc2:	4690      	mov	r8, r2
34001dc4:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34001dc8:	4610      	mov	r0, r2
34001dca:	fbb1 f1f2 	udiv	r1, r1, r2
34001dce:	eba3 0308 	sub.w	r3, r3, r8
34001dd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34001dd6:	e74b      	b.n	34001c70 <__udivmoddi4+0xf4>
34001dd8:	40b7      	lsls	r7, r6
34001dda:	f1c6 0320 	rsb	r3, r6, #32
34001dde:	fa01 f206 	lsl.w	r2, r1, r6
34001de2:	fa21 f803 	lsr.w	r8, r1, r3
34001de6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34001dea:	fa20 f303 	lsr.w	r3, r0, r3
34001dee:	b2bc      	uxth	r4, r7
34001df0:	40b0      	lsls	r0, r6
34001df2:	4313      	orrs	r3, r2
34001df4:	0c02      	lsrs	r2, r0, #16
34001df6:	0c19      	lsrs	r1, r3, #16
34001df8:	b280      	uxth	r0, r0
34001dfa:	fbb8 f9fe 	udiv	r9, r8, lr
34001dfe:	fb0e 8819 	mls	r8, lr, r9, r8
34001e02:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34001e06:	fb09 f804 	mul.w	r8, r9, r4
34001e0a:	4588      	cmp	r8, r1
34001e0c:	d951      	bls.n	34001eb2 <__udivmoddi4+0x336>
34001e0e:	1879      	adds	r1, r7, r1
34001e10:	f109 3cff 	add.w	ip, r9, #4294967295
34001e14:	bf2c      	ite	cs
34001e16:	f04f 0a01 	movcs.w	sl, #1
34001e1a:	f04f 0a00 	movcc.w	sl, #0
34001e1e:	4588      	cmp	r8, r1
34001e20:	d902      	bls.n	34001e28 <__udivmoddi4+0x2ac>
34001e22:	f1ba 0f00 	cmp.w	sl, #0
34001e26:	d031      	beq.n	34001e8c <__udivmoddi4+0x310>
34001e28:	eba1 0108 	sub.w	r1, r1, r8
34001e2c:	fbb1 f9fe 	udiv	r9, r1, lr
34001e30:	fb09 f804 	mul.w	r8, r9, r4
34001e34:	fb0e 1119 	mls	r1, lr, r9, r1
34001e38:	b29b      	uxth	r3, r3
34001e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34001e3e:	4543      	cmp	r3, r8
34001e40:	d235      	bcs.n	34001eae <__udivmoddi4+0x332>
34001e42:	18fb      	adds	r3, r7, r3
34001e44:	f109 31ff 	add.w	r1, r9, #4294967295
34001e48:	bf2c      	ite	cs
34001e4a:	f04f 0a01 	movcs.w	sl, #1
34001e4e:	f04f 0a00 	movcc.w	sl, #0
34001e52:	4543      	cmp	r3, r8
34001e54:	d2bb      	bcs.n	34001dce <__udivmoddi4+0x252>
34001e56:	f1ba 0f00 	cmp.w	sl, #0
34001e5a:	d1b8      	bne.n	34001dce <__udivmoddi4+0x252>
34001e5c:	f1a9 0102 	sub.w	r1, r9, #2
34001e60:	443b      	add	r3, r7
34001e62:	e7b4      	b.n	34001dce <__udivmoddi4+0x252>
34001e64:	1a84      	subs	r4, r0, r2
34001e66:	eb68 0203 	sbc.w	r2, r8, r3
34001e6a:	2001      	movs	r0, #1
34001e6c:	4696      	mov	lr, r2
34001e6e:	e6eb      	b.n	34001c48 <__udivmoddi4+0xcc>
34001e70:	443a      	add	r2, r7
34001e72:	f1a8 0802 	sub.w	r8, r8, #2
34001e76:	e72b      	b.n	34001cd0 <__udivmoddi4+0x154>
34001e78:	f1ac 0c02 	sub.w	ip, ip, #2
34001e7c:	443b      	add	r3, r7
34001e7e:	e710      	b.n	34001ca2 <__udivmoddi4+0x126>
34001e80:	3902      	subs	r1, #2
34001e82:	443b      	add	r3, r7
34001e84:	e6a9      	b.n	34001bda <__udivmoddi4+0x5e>
34001e86:	443a      	add	r2, r7
34001e88:	3802      	subs	r0, #2
34001e8a:	e6be      	b.n	34001c0a <__udivmoddi4+0x8e>
34001e8c:	eba7 0808 	sub.w	r8, r7, r8
34001e90:	f1a9 0c02 	sub.w	ip, r9, #2
34001e94:	4441      	add	r1, r8
34001e96:	fbb1 f9fe 	udiv	r9, r1, lr
34001e9a:	fb09 f804 	mul.w	r8, r9, r4
34001e9e:	e7c9      	b.n	34001e34 <__udivmoddi4+0x2b8>
34001ea0:	f1ae 0e02 	sub.w	lr, lr, #2
34001ea4:	443c      	add	r4, r7
34001ea6:	e744      	b.n	34001d32 <__udivmoddi4+0x1b6>
34001ea8:	3b02      	subs	r3, #2
34001eaa:	443c      	add	r4, r7
34001eac:	e75e      	b.n	34001d6c <__udivmoddi4+0x1f0>
34001eae:	4649      	mov	r1, r9
34001eb0:	e78d      	b.n	34001dce <__udivmoddi4+0x252>
34001eb2:	eba1 0108 	sub.w	r1, r1, r8
34001eb6:	46cc      	mov	ip, r9
34001eb8:	fbb1 f9fe 	udiv	r9, r1, lr
34001ebc:	fb09 f804 	mul.w	r8, r9, r4
34001ec0:	e7b8      	b.n	34001e34 <__udivmoddi4+0x2b8>
34001ec2:	bf00      	nop

34001ec4 <__aeabi_idiv0>:
34001ec4:	4770      	bx	lr
34001ec6:	bf00      	nop

34001ec8 <_write>:

int _write(int file, char *ptr, int len)
{
  HAL_StatusTypeDef status;

  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
34001ec8:	3801      	subs	r0, #1
34001eca:	2801      	cmp	r0, #1
{
34001ecc:	b510      	push	{r4, lr}
34001ece:	4614      	mov	r4, r2
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
34001ed0:	d907      	bls.n	34001ee2 <_write+0x1a>
      errno = EBADF;
34001ed2:	f01d f819 	bl	3401ef08 <__errno>
34001ed6:	2309      	movs	r3, #9
      return -1;
34001ed8:	f04f 34ff 	mov.w	r4, #4294967295
      errno = EBADF;
34001edc:	6003      	str	r3, [r0, #0]
  }

  status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, ~0);

  return (status == HAL_OK ? len : 0);
}
34001ede:	4620      	mov	r0, r4
34001ee0:	bd10      	pop	{r4, pc}
  status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, ~0);
34001ee2:	f04f 33ff 	mov.w	r3, #4294967295
34001ee6:	4804      	ldr	r0, [pc, #16]	@ (34001ef8 <_write+0x30>)
34001ee8:	b292      	uxth	r2, r2
34001eea:	f018 ff6f 	bl	3401adcc <HAL_UART_Transmit>
  return (status == HAL_OK ? len : 0);
34001eee:	2800      	cmp	r0, #0
34001ef0:	bf18      	it	ne
34001ef2:	2400      	movne	r4, #0
34001ef4:	e7f3      	b.n	34001ede <_write+0x16>
34001ef6:	bf00      	nop
34001ef8:	3419030c 	.word	0x3419030c

34001efc <freertos_libc_init>:
static int is_tx_rt_init_done;
static SemaphoreHandle_t libc_lock;
static StaticSemaphore_t libc_lock_buffer;

void freertos_libc_init()
{
34001efc:	b508      	push	{r3, lr}
  libc_lock = xSemaphoreCreateMutexStatic(&libc_lock_buffer);
34001efe:	2001      	movs	r0, #1
34001f00:	4907      	ldr	r1, [pc, #28]	@ (34001f20 <freertos_libc_init+0x24>)
34001f02:	f007 ff37 	bl	34009d74 <xQueueCreateMutexStatic>
34001f06:	4b07      	ldr	r3, [pc, #28]	@ (34001f24 <freertos_libc_init+0x28>)
34001f08:	6018      	str	r0, [r3, #0]
  assert(libc_lock);
34001f0a:	b928      	cbnz	r0, 34001f18 <freertos_libc_init+0x1c>
34001f0c:	2125      	movs	r1, #37	@ 0x25
34001f0e:	4b06      	ldr	r3, [pc, #24]	@ (34001f28 <freertos_libc_init+0x2c>)
34001f10:	4a06      	ldr	r2, [pc, #24]	@ (34001f2c <freertos_libc_init+0x30>)
34001f12:	4807      	ldr	r0, [pc, #28]	@ (34001f30 <freertos_libc_init+0x34>)
34001f14:	f01b fd6a 	bl	3401d9ec <__assert_func>

  is_tx_rt_init_done = 1;
34001f18:	2201      	movs	r2, #1
34001f1a:	4b06      	ldr	r3, [pc, #24]	@ (34001f34 <freertos_libc_init+0x38>)
34001f1c:	601a      	str	r2, [r3, #0]
}
34001f1e:	bd08      	pop	{r3, pc}
34001f20:	340a3774 	.word	0x340a3774
34001f24:	340a37c4 	.word	0x340a37c4
34001f28:	34022bf0 	.word	0x34022bf0
34001f2c:	34027e8f 	.word	0x34027e8f
34001f30:	34022bfa 	.word	0x34022bfa
34001f34:	340a37c8 	.word	0x340a37c8

34001f38 <__malloc_lock>:

void __malloc_lock (struct _reent *reent)
{
34001f38:	b508      	push	{r3, lr}
  int ret;

  if (!is_tx_rt_init_done)
34001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (34001f6c <__malloc_lock+0x34>)
34001f3c:	681b      	ldr	r3, [r3, #0]
34001f3e:	b1a3      	cbz	r3, 34001f6a <__malloc_lock+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
34001f40:	f3ef 8305 	mrs	r3, IPSR
    return ;

  assert(is_tx_rt_init_done);
  assert(!IS_IRQ_MODE());
34001f44:	b12b      	cbz	r3, 34001f52 <__malloc_lock+0x1a>
34001f46:	2132      	movs	r1, #50	@ 0x32
34001f48:	4b09      	ldr	r3, [pc, #36]	@ (34001f70 <__malloc_lock+0x38>)
34001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (34001f74 <__malloc_lock+0x3c>)

  ret = xSemaphoreTake(libc_lock, portMAX_DELAY);
  assert(ret == pdTRUE);
34001f4c:	480a      	ldr	r0, [pc, #40]	@ (34001f78 <__malloc_lock+0x40>)
34001f4e:	f01b fd4d 	bl	3401d9ec <__assert_func>
  ret = xSemaphoreTake(libc_lock, portMAX_DELAY);
34001f52:	4b0a      	ldr	r3, [pc, #40]	@ (34001f7c <__malloc_lock+0x44>)
34001f54:	f04f 31ff 	mov.w	r1, #4294967295
34001f58:	6818      	ldr	r0, [r3, #0]
34001f5a:	f008 f80d 	bl	34009f78 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
34001f5e:	2801      	cmp	r0, #1
34001f60:	d003      	beq.n	34001f6a <__malloc_lock+0x32>
34001f62:	2135      	movs	r1, #53	@ 0x35
34001f64:	4b06      	ldr	r3, [pc, #24]	@ (34001f80 <__malloc_lock+0x48>)
34001f66:	4a03      	ldr	r2, [pc, #12]	@ (34001f74 <__malloc_lock+0x3c>)
34001f68:	e7f0      	b.n	34001f4c <__malloc_lock+0x14>
}
34001f6a:	bd08      	pop	{r3, pc}
34001f6c:	340a37c8 	.word	0x340a37c8
34001f70:	34022c2d 	.word	0x34022c2d
34001f74:	34027e81 	.word	0x34027e81
34001f78:	34022bfa 	.word	0x34022bfa
34001f7c:	340a37c4 	.word	0x340a37c4
34001f80:	34022c3c 	.word	0x34022c3c

34001f84 <__malloc_unlock>:

void __malloc_unlock (struct _reent *reent)
{
34001f84:	b508      	push	{r3, lr}
  int ret;

  if (!is_tx_rt_init_done)
34001f86:	4b0c      	ldr	r3, [pc, #48]	@ (34001fb8 <__malloc_unlock+0x34>)
34001f88:	681b      	ldr	r3, [r3, #0]
34001f8a:	b1a3      	cbz	r3, 34001fb6 <__malloc_unlock+0x32>
34001f8c:	f3ef 8305 	mrs	r3, IPSR
    return ;

  assert(is_tx_rt_init_done);
  assert(!IS_IRQ_MODE());
34001f90:	b12b      	cbz	r3, 34001f9e <__malloc_unlock+0x1a>
34001f92:	2140      	movs	r1, #64	@ 0x40
34001f94:	4b09      	ldr	r3, [pc, #36]	@ (34001fbc <__malloc_unlock+0x38>)
34001f96:	4a0a      	ldr	r2, [pc, #40]	@ (34001fc0 <__malloc_unlock+0x3c>)

  ret = xSemaphoreGive(libc_lock);
  assert(ret == pdTRUE);
34001f98:	480a      	ldr	r0, [pc, #40]	@ (34001fc4 <__malloc_unlock+0x40>)
34001f9a:	f01b fd27 	bl	3401d9ec <__assert_func>
  ret = xSemaphoreGive(libc_lock);
34001f9e:	480a      	ldr	r0, [pc, #40]	@ (34001fc8 <__malloc_unlock+0x44>)
34001fa0:	461a      	mov	r2, r3
34001fa2:	4619      	mov	r1, r3
34001fa4:	6800      	ldr	r0, [r0, #0]
34001fa6:	f007 fe43 	bl	34009c30 <xQueueGenericSend>
  assert(ret == pdTRUE);
34001faa:	2801      	cmp	r0, #1
34001fac:	d003      	beq.n	34001fb6 <__malloc_unlock+0x32>
34001fae:	2143      	movs	r1, #67	@ 0x43
34001fb0:	4b06      	ldr	r3, [pc, #24]	@ (34001fcc <__malloc_unlock+0x48>)
34001fb2:	4a03      	ldr	r2, [pc, #12]	@ (34001fc0 <__malloc_unlock+0x3c>)
34001fb4:	e7f0      	b.n	34001f98 <__malloc_unlock+0x14>
}
34001fb6:	bd08      	pop	{r3, pc}
34001fb8:	340a37c8 	.word	0x340a37c8
34001fbc:	34022c2d 	.word	0x34022c2d
34001fc0:	34027e71 	.word	0x34027e71
34001fc4:	34022bfa 	.word	0x34022bfa
34001fc8:	340a37c4 	.word	0x340a37c4
34001fcc:	34022c3c 	.word	0x34022c3c

34001fd0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
34001fd0:	2001      	movs	r0, #1
34001fd2:	4770      	bx	lr

34001fd4 <_kill>:

int _kill(int pid, int sig)
{
34001fd4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001fd6:	f01c ff97 	bl	3401ef08 <__errno>
34001fda:	2316      	movs	r3, #22
34001fdc:	6003      	str	r3, [r0, #0]
  return -1;
}
34001fde:	f04f 30ff 	mov.w	r0, #4294967295
34001fe2:	bd08      	pop	{r3, pc}

34001fe4 <_exit>:

void _exit (int status)
{
34001fe4:	b508      	push	{r3, lr}
  errno = EINVAL;
34001fe6:	f01c ff8f 	bl	3401ef08 <__errno>
34001fea:	2316      	movs	r3, #22
34001fec:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
34001fee:	e7fe      	b.n	34001fee <_exit+0xa>

34001ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001ff0:	b570      	push	{r4, r5, r6, lr}
34001ff2:	460d      	mov	r5, r1
34001ff4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001ff6:	460e      	mov	r6, r1
34001ff8:	1b73      	subs	r3, r6, r5
34001ffa:	429c      	cmp	r4, r3
34001ffc:	dc01      	bgt.n	34002002 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
34001ffe:	4620      	mov	r0, r4
34002000:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
34002002:	f3af 8000 	nop.w
34002006:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3400200a:	e7f5      	b.n	34001ff8 <_read+0x8>

3400200c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
3400200c:	f04f 30ff 	mov.w	r0, #4294967295
34002010:	4770      	bx	lr

34002012 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
34002012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
34002016:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
34002018:	604b      	str	r3, [r1, #4]
}
3400201a:	4770      	bx	lr

3400201c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
3400201c:	2001      	movs	r0, #1
3400201e:	4770      	bx	lr

34002020 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
34002020:	2000      	movs	r0, #0
34002022:	4770      	bx	lr

34002024 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34002024:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34002026:	4d13      	ldr	r5, [pc, #76]	@ (34002074 <mcu_cache_invalidate_range+0x50>)
34002028:	696b      	ldr	r3, [r5, #20]
3400202a:	03db      	lsls	r3, r3, #15
3400202c:	d51f      	bpl.n	3400206e <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
3400202e:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34002030:	2a00      	cmp	r2, #0
34002032:	dd1c      	ble.n	3400206e <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34002034:	f000 031f 	and.w	r3, r0, #31
34002038:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400203a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
3400203e:	1884      	adds	r4, r0, r2
34002040:	43c2      	mvns	r2, r0
34002042:	1a1b      	subs	r3, r3, r0
34002044:	440b      	add	r3, r1
34002046:	4422      	add	r2, r4
34002048:	3b20      	subs	r3, #32
3400204a:	0952      	lsrs	r2, r2, #5
3400204c:	3320      	adds	r3, #32
3400204e:	f102 0e01 	add.w	lr, r2, #1
34002052:	bfd8      	it	le
34002054:	f04f 0e01 	movle.w	lr, #1
34002058:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3400205c:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34002060:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34002062:	f00f c805 	le	lr, 3400205c <mcu_cache_invalidate_range+0x38>
34002066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400206a:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
3400206e:	2000      	movs	r0, #0
34002070:	bd30      	pop	{r4, r5, pc}
34002072:	bf00      	nop
34002074:	e000ed00 	.word	0xe000ed00

34002078 <mcu_cache_clean_range>:

int mcu_cache_clean_range(uint32_t start_addr, uint32_t end_addr) {
34002078:	b530      	push	{r4, r5, lr}
3400207a:	4d13      	ldr	r5, [pc, #76]	@ (340020c8 <mcu_cache_clean_range+0x50>)
3400207c:	696b      	ldr	r3, [r5, #20]
3400207e:	03db      	lsls	r3, r3, #15
34002080:	d51f      	bpl.n	340020c2 <mcu_cache_clean_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34002082:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34002084:	2a00      	cmp	r2, #0
34002086:	dd1c      	ble.n	340020c2 <mcu_cache_clean_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34002088:	f000 031f 	and.w	r3, r0, #31
3400208c:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400208e:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34002092:	1884      	adds	r4, r0, r2
34002094:	43c2      	mvns	r2, r0
34002096:	1a1b      	subs	r3, r3, r0
34002098:	440b      	add	r3, r1
3400209a:	4422      	add	r2, r4
3400209c:	3b20      	subs	r3, #32
3400209e:	0952      	lsrs	r2, r2, #5
340020a0:	3320      	adds	r3, #32
340020a2:	f102 0e01 	add.w	lr, r2, #1
340020a6:	bfd8      	it	le
340020a8:	f04f 0e01 	movle.w	lr, #1
340020ac:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340020b0:	f8c5 0268 	str.w	r0, [r5, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
340020b4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
340020b6:	f00f c805 	le	lr, 340020b0 <mcu_cache_clean_range+0x38>
340020ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340020be:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340020c2:	2000      	movs	r0, #0
340020c4:	bd30      	pop	{r4, r5, pc}
340020c6:	bf00      	nop
340020c8:	e000ed00 	.word	0xe000ed00

340020cc <mcu_cache_clean_invalidate_range>:
 int mcu_cache_clean_invalidate_range(uint32_t start_addr, uint32_t end_addr) {
340020cc:	b530      	push	{r4, r5, lr}
340020ce:	4d13      	ldr	r5, [pc, #76]	@ (3400211c <mcu_cache_clean_invalidate_range+0x50>)
340020d0:	696b      	ldr	r3, [r5, #20]
340020d2:	03db      	lsls	r3, r3, #15
340020d4:	d51f      	bpl.n	34002116 <mcu_cache_clean_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanInvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
340020d6:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
340020d8:	2a00      	cmp	r2, #0
340020da:	dd1c      	ble.n	34002116 <mcu_cache_clean_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
340020dc:	f000 031f 	and.w	r3, r0, #31
340020e0:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
340020e2:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
        op_size -=          __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
340020e6:	1884      	adds	r4, r0, r2
340020e8:	43c2      	mvns	r2, r0
340020ea:	1a1b      	subs	r3, r3, r0
340020ec:	440b      	add	r3, r1
340020ee:	4422      	add	r2, r4
340020f0:	3b20      	subs	r3, #32
340020f2:	0952      	lsrs	r2, r2, #5
340020f4:	3320      	adds	r3, #32
340020f6:	f102 0e01 	add.w	lr, r2, #1
340020fa:	bfd8      	it	le
340020fc:	f04f 0e01 	movle.w	lr, #1
34002100:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34002104:	f8c5 0270 	str.w	r0, [r5, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
34002108:	3020      	adds	r0, #32
      } while ( op_size > 0 );
3400210a:	f00f c805 	le	lr, 34002104 <mcu_cache_clean_invalidate_range+0x38>
3400210e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34002112:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
34002116:	2000      	movs	r0, #0
34002118:	bd30      	pop	{r4, r5, pc}
3400211a:	bf00      	nop
3400211c:	e000ed00 	.word	0xe000ed00

34002120 <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
34002120:	4802      	ldr	r0, [pc, #8]	@ (3400212c <npu_cache_init+0xc>)
34002122:	4b03      	ldr	r3, [pc, #12]	@ (34002130 <npu_cache_init+0x10>)
34002124:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34002126:	f00d baf3 	b.w	3400f710 <HAL_CACHEAXI_Init>
3400212a:	bf00      	nop
3400212c:	340a37cc 	.word	0x340a37cc
34002130:	580dfc00 	.word	0x580dfc00

34002134 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34002134:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34002136:	4c03      	ldr	r4, [pc, #12]	@ (34002144 <npu_cache_enable+0x10>)
34002138:	4620      	mov	r0, r4
3400213a:	f00d fab5 	bl	3400f6a8 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
3400213e:	2802      	cmp	r0, #2
34002140:	d0fa      	beq.n	34002138 <npu_cache_enable+0x4>
}
34002142:	bd10      	pop	{r4, pc}
34002144:	340a37cc 	.word	0x340a37cc

34002148 <npu_cache_clean_invalidate_range>:
  HAL_CACHEAXI_CleanByAddr(&hcacheaxi_s, (uint32_t*)start_addr, end_addr-start_addr);
}

void npu_cache_clean_invalidate_range(uint32_t start_addr, uint32_t end_addr)
{
  HAL_CACHEAXI_CleanInvalidByAddr(&hcacheaxi_s, (uint32_t*)start_addr, end_addr-start_addr);
34002148:	1a0a      	subs	r2, r1, r0
3400214a:	4601      	mov	r1, r0
3400214c:	4801      	ldr	r0, [pc, #4]	@ (34002154 <npu_cache_clean_invalidate_range+0xc>)
3400214e:	f00d bb03 	b.w	3400f758 <HAL_CACHEAXI_CleanInvalidByAddr>
34002152:	bf00      	nop
34002154:	340a37cc 	.word	0x340a37cc

34002158 <ec_copy_program>:
 * \retval \e true  on success
 * \retval \e false otherwise
 */

bool ec_copy_program(const uint8_t *file_ptr, ECInstr *program, unsigned int *program_size)
{
34002158:	b538      	push	{r3, r4, r5, lr}
3400215a:	460c      	mov	r4, r1

  magic = *((ECFileEntry *)ptr);

  ptr += sizeof(ECFileEntry);

  if (magic != ECASM_BINARY_MAGIC)
3400215c:	4b1b      	ldr	r3, [pc, #108]	@ (340021cc <ec_copy_program+0x74>)
3400215e:	6801      	ldr	r1, [r0, #0]
34002160:	4299      	cmp	r1, r3
34002162:	d004      	beq.n	3400216e <ec_copy_program+0x16>
  {
    LL_ATON_PRINTF("Error: Epoch Controller binary is invalid\n");
34002164:	481a      	ldr	r0, [pc, #104]	@ (340021d0 <ec_copy_program+0x78>)

  ptr += sizeof(ECFileEntry);

  if (program_offset == 0)
  {
    LL_ATON_PRINTF("Error: Program section offset in binary file is invalid\n");
34002166:	f01c fb55 	bl	3401e814 <puts>
    return false;
3400216a:	2000      	movs	r0, #0
3400216c:	e010      	b.n	34002190 <ec_copy_program+0x38>
  program_offset = *((ECFileEntry *)ptr);
3400216e:	68c3      	ldr	r3, [r0, #12]
  if (program_offset == 0)
34002170:	b90b      	cbnz	r3, 34002176 <ec_copy_program+0x1e>
    LL_ATON_PRINTF("Error: Program section offset in binary file is invalid\n");
34002172:	4818      	ldr	r0, [pc, #96]	@ (340021d4 <ec_copy_program+0x7c>)
34002174:	e7f7      	b.n	34002166 <ec_copy_program+0xe>
    return false;
  }

  // read the Epoch Controller program section

  ptr = file_ptr + program_offset;
34002176:	18c5      	adds	r5, r0, r3

  program_magic = *((ECInstr *)ptr);

  ptr += sizeof(ECInstr);

  if (program_magic != ECASM_PROGRAM_MAGIC)
34002178:	58c0      	ldr	r0, [r0, r3]
3400217a:	4b17      	ldr	r3, [pc, #92]	@ (340021d8 <ec_copy_program+0x80>)
3400217c:	4298      	cmp	r0, r3
3400217e:	d001      	beq.n	34002184 <ec_copy_program+0x2c>
  {
    LL_ATON_PRINTF("Error: Invalid magic number of Epoch Controller program\n");
34002180:	4816      	ldr	r0, [pc, #88]	@ (340021dc <ec_copy_program+0x84>)
34002182:	e7f0      	b.n	34002166 <ec_copy_program+0xe>
    return false;
  }

  ECInstr size = 0;

  size = *((ECInstr *)ptr);
34002184:	686b      	ldr	r3, [r5, #4]

  ptr += sizeof(ECInstr);

  if (program == NULL)
34002186:	b924      	cbnz	r4, 34002192 <ec_copy_program+0x3a>
  {
    if (program_size != NULL)
34002188:	b10a      	cbz	r2, 3400218e <ec_copy_program+0x36>
      *program_size = size + 2;
3400218a:	3302      	adds	r3, #2
3400218c:	6013      	str	r3, [r2, #0]

    for (unsigned int i = 0; i < size; i++, ptr += sizeof(ECInstr))
      program[i + 2] = *((ECInstr *)ptr);
  }

  return true;
3400218e:	2001      	movs	r0, #1
}
34002190:	bd38      	pop	{r3, r4, r5, pc}
    if ((((intptr_t)program) % 8) != 0)
34002192:	0761      	lsls	r1, r4, #29
34002194:	d001      	beq.n	3400219a <ec_copy_program+0x42>
      LL_ATON_PRINTF("Error: Memory allocated for the Epoch Controller program must be 8-byte aligned\n");
34002196:	4812      	ldr	r0, [pc, #72]	@ (340021e0 <ec_copy_program+0x88>)
34002198:	e7e5      	b.n	34002166 <ec_copy_program+0xe>
    if (program_size == NULL)
3400219a:	b90a      	cbnz	r2, 340021a0 <ec_copy_program+0x48>
      LL_ATON_PRINTF("Error: Size of memory allocated for the Epoch Controller program has not been specified\n");
3400219c:	4811      	ldr	r0, [pc, #68]	@ (340021e4 <ec_copy_program+0x8c>)
3400219e:	e7e2      	b.n	34002166 <ec_copy_program+0xe>
    if (*program_size < (size + 2))
340021a0:	6812      	ldr	r2, [r2, #0]
340021a2:	1c99      	adds	r1, r3, #2
340021a4:	428a      	cmp	r2, r1
340021a6:	d203      	bcs.n	340021b0 <ec_copy_program+0x58>
      LL_ATON_PRINTF(
340021a8:	480f      	ldr	r0, [pc, #60]	@ (340021e8 <ec_copy_program+0x90>)
340021aa:	f01c facb 	bl	3401e744 <iprintf>
      return false;
340021ae:	e7dc      	b.n	3400216a <ec_copy_program+0x12>
    program[0] = program_magic;
340021b0:	6020      	str	r0, [r4, #0]
    program[1] = size;
340021b2:	f844 3f04 	str.w	r3, [r4, #4]!
    for (unsigned int i = 0; i < size; i++, ptr += sizeof(ECInstr))
340021b6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
340021ba:	3504      	adds	r5, #4
340021bc:	3301      	adds	r3, #1
340021be:	3b01      	subs	r3, #1
340021c0:	d0e5      	beq.n	3400218e <ec_copy_program+0x36>
      program[i + 2] = *((ECInstr *)ptr);
340021c2:	f855 2f04 	ldr.w	r2, [r5, #4]!
340021c6:	f844 2f04 	str.w	r2, [r4, #4]!
    for (unsigned int i = 0; i < size; i++, ptr += sizeof(ECInstr))
340021ca:	e7f8      	b.n	340021be <ec_copy_program+0x66>
340021cc:	ecbf0020 	.word	0xecbf0020
340021d0:	34022c4a 	.word	0x34022c4a
340021d4:	34022c74 	.word	0x34022c74
340021d8:	ca057a7a 	.word	0xca057a7a
340021dc:	34022cac 	.word	0x34022cac
340021e0:	34022ce4 	.word	0x34022ce4
340021e4:	34022d34 	.word	0x34022d34
340021e8:	34022d8c 	.word	0x34022d8c

340021ec <ec_get_reloc_table_ptr>:
 * \return the pointer to the relocation table contained in the Epoch Controller binary pointed by \e file_ptr, or \e
 * NULL if the Epoch Controller binary does not contain any relocation table or on errors
 */

const ECFileEntry *ec_get_reloc_table_ptr(const uint8_t *file_ptr)
{
340021ec:	b508      	push	{r3, lr}

  magic = *((ECFileEntry *)ptr);

  ptr += sizeof(ECFileEntry);

  if (magic != ECASM_BINARY_MAGIC)
340021ee:	6802      	ldr	r2, [r0, #0]
340021f0:	4b06      	ldr	r3, [pc, #24]	@ (3400220c <ec_get_reloc_table_ptr+0x20>)
340021f2:	429a      	cmp	r2, r3
340021f4:	d004      	beq.n	34002200 <ec_get_reloc_table_ptr+0x14>
  {
    LL_ATON_PRINTF("Error: Epoch Controller binary is invalid\n");
340021f6:	4806      	ldr	r0, [pc, #24]	@ (34002210 <ec_get_reloc_table_ptr+0x24>)
340021f8:	f01c fb0c 	bl	3401e814 <puts>

    return NULL;
340021fc:	2000      	movs	r0, #0
  }

  reloc_offset = *((ECFileEntry *)ptr);

  return (reloc_offset == 0) ? NULL : (const ECFileEntry *)(file_ptr + reloc_offset);
}
340021fe:	bd08      	pop	{r3, pc}
  reloc_offset = *((ECFileEntry *)ptr);
34002200:	6843      	ldr	r3, [r0, #4]
  return (reloc_offset == 0) ? NULL : (const ECFileEntry *)(file_ptr + reloc_offset);
34002202:	2b00      	cmp	r3, #0
34002204:	d0fa      	beq.n	340021fc <ec_get_reloc_table_ptr+0x10>
34002206:	4418      	add	r0, r3
34002208:	e7f9      	b.n	340021fe <ec_get_reloc_table_ptr+0x12>
3400220a:	bf00      	nop
3400220c:	ecbf0020 	.word	0xecbf0020
34002210:	34022c4a 	.word	0x34022c4a

34002214 <ec_reloc>:
 * \retval \e true  on success
 * \retval \e false otherwise
 */

bool ec_reloc(const ECFileEntry *reloc_table_ptr, ECInstr *program, unsigned int idx, ECAddr base, ECAddr *prev_base)
{
34002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34002216:	9d06      	ldr	r5, [sp, #24]
34002218:	460c      	mov	r4, r1
  if (reloc_table_ptr == NULL)
3400221a:	b920      	cbnz	r0, 34002226 <ec_reloc+0x12>
  {
    LL_ATON_PRINTF("Error: Cannot relocate because the pointer to the Epoch Controller relocation table is invalid\n");
3400221c:	4815      	ldr	r0, [pc, #84]	@ (34002274 <ec_reloc+0x60>)
3400221e:	f01c faf9 	bl	3401e814 <puts>

    return false;
34002222:	2000      	movs	r0, #0
34002224:	e007      	b.n	34002236 <ec_reloc+0x22>
  }

  if (base == *prev_base)
34002226:	6829      	ldr	r1, [r5, #0]
34002228:	4299      	cmp	r1, r3
3400222a:	d003      	beq.n	34002234 <ec_reloc+0x20>

  const ECFileEntry *ptr = reloc_table_ptr;

  ECFileEntry size = *ptr;

  if (idx < size)
3400222c:	6801      	ldr	r1, [r0, #0]
3400222e:	4291      	cmp	r1, r2
34002230:	d802      	bhi.n	34002238 <ec_reloc+0x24>
      // following the magic number of the EC program and its size)
      program[offset + 2] += base - *prev_base;
    }
  }

  *prev_base = base;
34002232:	602b      	str	r3, [r5, #0]
    return true;
34002234:	2001      	movs	r0, #1

  return true;
}
34002236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ptr = reloc_table_ptr + 3 * idx + 2;
34002238:	210c      	movs	r1, #12
3400223a:	434a      	muls	r2, r1
3400223c:	3208      	adds	r2, #8
3400223e:	1881      	adds	r1, r0, r2
    ECFileEntry offset = *ptr;
34002240:	6849      	ldr	r1, [r1, #4]
    ECFileEntry num = *ptr++;
34002242:	5882      	ldr	r2, [r0, r2]
    if ((offset % sizeof(ECFileEntry)) != 0)
34002244:	f011 0603 	ands.w	r6, r1, #3
34002248:	d003      	beq.n	34002252 <ec_reloc+0x3e>
      LL_ATON_PRINTF("Error: Offset %lu in Epoch Controller binary is invalid\n", (unsigned long)offset);
3400224a:	480b      	ldr	r0, [pc, #44]	@ (34002278 <ec_reloc+0x64>)
3400224c:	f01c fa7a 	bl	3401e744 <iprintf>
      return false;
34002250:	e7e7      	b.n	34002222 <ec_reloc+0xe>
    ptr = (const ECFileEntry *)((const uint8_t *)reloc_table_ptr + offset);
34002252:	4408      	add	r0, r1
34002254:	3201      	adds	r2, #1
    for (unsigned int i = 0; i < num; i++)
34002256:	3a01      	subs	r2, #1
34002258:	d0eb      	beq.n	34002232 <ec_reloc+0x1e>
      program[offset + 2] += base - *prev_base;
3400225a:	f850 1026 	ldr.w	r1, [r0, r6, lsl #2]
3400225e:	682f      	ldr	r7, [r5, #0]
34002260:	3102      	adds	r1, #2
34002262:	eba3 0c07 	sub.w	ip, r3, r7
34002266:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
    for (unsigned int i = 0; i < num; i++)
3400226a:	3601      	adds	r6, #1
      program[offset + 2] += base - *prev_base;
3400226c:	4467      	add	r7, ip
3400226e:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
    for (unsigned int i = 0; i < num; i++)
34002272:	e7f0      	b.n	34002256 <ec_reloc+0x42>
34002274:	34022e10 	.word	0x34022e10
34002278:	34022e6f 	.word	0x34022e6f

3400227c <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400227c:	b510      	push	{r4, lr}
  if (done != 0)
3400227e:	4ba3      	ldr	r3, [pc, #652]	@ (3400250c <LL_ATON_Init+0x290>)
{
34002280:	b088      	sub	sp, #32
  if (done != 0)
34002282:	781a      	ldrb	r2, [r3, #0]
34002284:	b90a      	cbnz	r2, 3400228a <LL_ATON_Init+0xe>
  done = 1;
34002286:	2201      	movs	r2, #1
34002288:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400228a:	4ba1      	ldr	r3, [pc, #644]	@ (34002510 <LL_ATON_Init+0x294>)
3400228c:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400228e:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
34002292:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
34002294:	2201      	movs	r2, #1
34002296:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34002298:	f04f 32ff 	mov.w	r2, #4294967295
3400229c:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400229e:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
340022a0:	2200      	movs	r2, #0
340022a2:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
340022a4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
340022a8:	685c      	ldr	r4, [r3, #4]
340022aa:	2c00      	cmp	r4, #0
340022ac:	d0fc      	beq.n	340022a8 <LL_ATON_Init+0x2c>
340022ae:	f245 0301 	movw	r3, #20481	@ 0x5001
340022b2:	b2a2      	uxth	r2, r4
340022b4:	429a      	cmp	r2, r3
340022b6:	f040 8092 	bne.w	340023de <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
340022ba:	4b96      	ldr	r3, [pc, #600]	@ (34002514 <LL_ATON_Init+0x298>)
340022bc:	685c      	ldr	r4, [r3, #4]
340022be:	2c00      	cmp	r4, #0
340022c0:	d0fc      	beq.n	340022bc <LL_ATON_Init+0x40>
340022c2:	f245 1317 	movw	r3, #20759	@ 0x5117
340022c6:	b2a2      	uxth	r2, r4
340022c8:	429a      	cmp	r2, r3
340022ca:	f040 80b0 	bne.w	3400242e <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
340022ce:	4b92      	ldr	r3, [pc, #584]	@ (34002518 <LL_ATON_Init+0x29c>)
340022d0:	685c      	ldr	r4, [r3, #4]
340022d2:	2c00      	cmp	r4, #0
340022d4:	d0fc      	beq.n	340022d0 <LL_ATON_Init+0x54>
340022d6:	f241 131c 	movw	r3, #4380	@ 0x111c
340022da:	b2a2      	uxth	r2, r4
340022dc:	429a      	cmp	r2, r3
340022de:	f040 80cc 	bne.w	3400247a <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
340022e2:	4b8e      	ldr	r3, [pc, #568]	@ (3400251c <LL_ATON_Init+0x2a0>)
340022e4:	685c      	ldr	r4, [r3, #4]
340022e6:	2c00      	cmp	r4, #0
340022e8:	d0fc      	beq.n	340022e4 <LL_ATON_Init+0x68>
340022ea:	f241 031a 	movw	r3, #4122	@ 0x101a
340022ee:	b2a2      	uxth	r2, r4
340022f0:	429a      	cmp	r2, r3
340022f2:	f040 80e6 	bne.w	340024c2 <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
340022f6:	4b8a      	ldr	r3, [pc, #552]	@ (34002520 <LL_ATON_Init+0x2a4>)
340022f8:	685c      	ldr	r4, [r3, #4]
340022fa:	2c00      	cmp	r4, #0
340022fc:	d0fc      	beq.n	340022f8 <LL_ATON_Init+0x7c>
340022fe:	f241 131b 	movw	r3, #4379	@ 0x111b
34002302:	b2a2      	uxth	r2, r4
34002304:	429a      	cmp	r2, r3
34002306:	f040 812d 	bne.w	34002564 <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400230a:	4b86      	ldr	r3, [pc, #536]	@ (34002524 <LL_ATON_Init+0x2a8>)
3400230c:	685c      	ldr	r4, [r3, #4]
3400230e:	2c00      	cmp	r4, #0
34002310:	d0fc      	beq.n	3400230c <LL_ATON_Init+0x90>
34002312:	f641 2319 	movw	r3, #6681	@ 0x1a19
34002316:	b2a2      	uxth	r2, r4
34002318:	429a      	cmp	r2, r3
3400231a:	f040 8147 	bne.w	340025ac <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400231e:	4b82      	ldr	r3, [pc, #520]	@ (34002528 <LL_ATON_Init+0x2ac>)
34002320:	685c      	ldr	r4, [r3, #4]
34002322:	2c00      	cmp	r4, #0
34002324:	d0fc      	beq.n	34002320 <LL_ATON_Init+0xa4>
34002326:	f241 1321 	movw	r3, #4385	@ 0x1121
3400232a:	b2a2      	uxth	r2, r4
3400232c:	429a      	cmp	r2, r3
3400232e:	f040 8162 	bne.w	340025f6 <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
34002332:	4b7e      	ldr	r3, [pc, #504]	@ (3400252c <LL_ATON_Init+0x2b0>)
34002334:	685c      	ldr	r4, [r3, #4]
34002336:	2c00      	cmp	r4, #0
34002338:	d0fc      	beq.n	34002334 <LL_ATON_Init+0xb8>
3400233a:	f243 2320 	movw	r3, #12832	@ 0x3220
3400233e:	b2a2      	uxth	r2, r4
34002340:	429a      	cmp	r2, r3
34002342:	f040 817c 	bne.w	3400263e <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
34002346:	4b72      	ldr	r3, [pc, #456]	@ (34002510 <LL_ATON_Init+0x294>)
34002348:	685c      	ldr	r4, [r3, #4]
3400234a:	2c00      	cmp	r4, #0
3400234c:	d0fc      	beq.n	34002348 <LL_ATON_Init+0xcc>
3400234e:	f241 231f 	movw	r3, #4639	@ 0x121f
34002352:	b2a2      	uxth	r2, r4
34002354:	429a      	cmp	r2, r3
34002356:	f040 8198 	bne.w	3400268a <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400235a:	4b75      	ldr	r3, [pc, #468]	@ (34002530 <LL_ATON_Init+0x2b4>)
3400235c:	685c      	ldr	r4, [r3, #4]
3400235e:	2c00      	cmp	r4, #0
34002360:	d0fc      	beq.n	3400235c <LL_ATON_Init+0xe0>
34002362:	f241 131e 	movw	r3, #4382	@ 0x111e
34002366:	b2a2      	uxth	r2, r4
34002368:	429a      	cmp	r2, r3
3400236a:	f040 81b4 	bne.w	340026d6 <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400236e:	4b71      	ldr	r3, [pc, #452]	@ (34002534 <LL_ATON_Init+0x2b8>)
34002370:	685c      	ldr	r4, [r3, #4]
34002372:	2c00      	cmp	r4, #0
34002374:	d0fc      	beq.n	34002370 <LL_ATON_Init+0xf4>
34002376:	b2a3      	uxth	r3, r4
34002378:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
3400237c:	f040 81cf 	bne.w	3400271e <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34002380:	4a6d      	ldr	r2, [pc, #436]	@ (34002538 <LL_ATON_Init+0x2bc>)
34002382:	6854      	ldr	r4, [r2, #4]
34002384:	2c00      	cmp	r4, #0
34002386:	d0fc      	beq.n	34002382 <LL_ATON_Init+0x106>
34002388:	f245 031d 	movw	r3, #20509	@ 0x501d
3400238c:	b2a1      	uxth	r1, r4
3400238e:	4299      	cmp	r1, r3
34002390:	f000 81ec 	beq.w	3400276c <LL_ATON_Init+0x4f0>
34002394:	f01c fdb8 	bl	3401ef08 <__errno>
34002398:	6803      	ldr	r3, [r0, #0]
3400239a:	2b00      	cmp	r3, #0
3400239c:	f000 81e4 	beq.w	34002768 <LL_ATON_Init+0x4ec>
340023a0:	f01c fdb2 	bl	3401ef08 <__errno>
340023a4:	6800      	ldr	r0, [r0, #0]
340023a6:	f01c fd59 	bl	3401ee5c <strerror>
340023aa:	4603      	mov	r3, r0
340023ac:	2205      	movs	r2, #5
340023ae:	2100      	movs	r1, #0
340023b0:	e9cd 2105 	strd	r2, r1, [sp, #20]
340023b4:	221d      	movs	r2, #29
340023b6:	9204      	str	r2, [sp, #16]
340023b8:	f3c4 2203 	ubfx	r2, r4, #8, #4
340023bc:	9203      	str	r2, [sp, #12]
340023be:	f3c4 3203 	ubfx	r2, r4, #12, #4
340023c2:	9202      	str	r2, [sp, #8]
340023c4:	4a5d      	ldr	r2, [pc, #372]	@ (3400253c <LL_ATON_Init+0x2c0>)
340023c6:	b2e4      	uxtb	r4, r4
340023c8:	495d      	ldr	r1, [pc, #372]	@ (34002540 <LL_ATON_Init+0x2c4>)
340023ca:	9200      	str	r2, [sp, #0]
340023cc:	485d      	ldr	r0, [pc, #372]	@ (34002544 <LL_ATON_Init+0x2c8>)
340023ce:	22fb      	movs	r2, #251	@ 0xfb
340023d0:	9401      	str	r4, [sp, #4]
340023d2:	f01c f9b7 	bl	3401e744 <iprintf>
340023d6:	21fb      	movs	r1, #251	@ 0xfb
340023d8:	4b5b      	ldr	r3, [pc, #364]	@ (34002548 <LL_ATON_Init+0x2cc>)
340023da:	4a5c      	ldr	r2, [pc, #368]	@ (3400254c <LL_ATON_Init+0x2d0>)
340023dc:	e022      	b.n	34002424 <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
340023de:	f01c fd93 	bl	3401ef08 <__errno>
340023e2:	6803      	ldr	r3, [r0, #0]
340023e4:	b30b      	cbz	r3, 3400242a <LL_ATON_Init+0x1ae>
340023e6:	f01c fd8f 	bl	3401ef08 <__errno>
340023ea:	6800      	ldr	r0, [r0, #0]
340023ec:	f01c fd36 	bl	3401ee5c <strerror>
340023f0:	4603      	mov	r3, r0
340023f2:	2205      	movs	r2, #5
340023f4:	f04f 0e00 	mov.w	lr, #0
340023f8:	e9cd 2e05 	strd	r2, lr, [sp, #20]
340023fc:	2201      	movs	r2, #1
340023fe:	9204      	str	r2, [sp, #16]
34002400:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002404:	9203      	str	r2, [sp, #12]
34002406:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400240a:	9202      	str	r2, [sp, #8]
3400240c:	4a50      	ldr	r2, [pc, #320]	@ (34002550 <LL_ATON_Init+0x2d4>)
3400240e:	b2e4      	uxtb	r4, r4
34002410:	494b      	ldr	r1, [pc, #300]	@ (34002540 <LL_ATON_Init+0x2c4>)
34002412:	9200      	str	r2, [sp, #0]
34002414:	484b      	ldr	r0, [pc, #300]	@ (34002544 <LL_ATON_Init+0x2c8>)
34002416:	22c7      	movs	r2, #199	@ 0xc7
34002418:	9401      	str	r4, [sp, #4]
3400241a:	f01c f993 	bl	3401e744 <iprintf>
3400241e:	21c7      	movs	r1, #199	@ 0xc7
34002420:	4b49      	ldr	r3, [pc, #292]	@ (34002548 <LL_ATON_Init+0x2cc>)
34002422:	4a4a      	ldr	r2, [pc, #296]	@ (3400254c <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34002424:	4846      	ldr	r0, [pc, #280]	@ (34002540 <LL_ATON_Init+0x2c4>)
34002426:	f01b fae1 	bl	3401d9ec <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400242a:	4b4a      	ldr	r3, [pc, #296]	@ (34002554 <LL_ATON_Init+0x2d8>)
3400242c:	e7e1      	b.n	340023f2 <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400242e:	f01c fd6b 	bl	3401ef08 <__errno>
34002432:	6803      	ldr	r3, [r0, #0]
34002434:	b1fb      	cbz	r3, 34002476 <LL_ATON_Init+0x1fa>
34002436:	f01c fd67 	bl	3401ef08 <__errno>
3400243a:	6800      	ldr	r0, [r0, #0]
3400243c:	f01c fd0e 	bl	3401ee5c <strerror>
34002440:	4603      	mov	r3, r0
34002442:	2205      	movs	r2, #5
34002444:	f04f 0c01 	mov.w	ip, #1
34002448:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400244c:	2217      	movs	r2, #23
3400244e:	9204      	str	r2, [sp, #16]
34002450:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002454:	9203      	str	r2, [sp, #12]
34002456:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400245a:	9202      	str	r2, [sp, #8]
3400245c:	4a3e      	ldr	r2, [pc, #248]	@ (34002558 <LL_ATON_Init+0x2dc>)
3400245e:	b2e4      	uxtb	r4, r4
34002460:	4937      	ldr	r1, [pc, #220]	@ (34002540 <LL_ATON_Init+0x2c4>)
34002462:	9200      	str	r2, [sp, #0]
34002464:	4837      	ldr	r0, [pc, #220]	@ (34002544 <LL_ATON_Init+0x2c8>)
34002466:	22ca      	movs	r2, #202	@ 0xca
34002468:	9401      	str	r4, [sp, #4]
3400246a:	f01c f96b 	bl	3401e744 <iprintf>
3400246e:	21ca      	movs	r1, #202	@ 0xca
34002470:	4b35      	ldr	r3, [pc, #212]	@ (34002548 <LL_ATON_Init+0x2cc>)
34002472:	4a36      	ldr	r2, [pc, #216]	@ (3400254c <LL_ATON_Init+0x2d0>)
34002474:	e7d6      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002476:	4b37      	ldr	r3, [pc, #220]	@ (34002554 <LL_ATON_Init+0x2d8>)
34002478:	e7e3      	b.n	34002442 <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400247a:	f01c fd45 	bl	3401ef08 <__errno>
3400247e:	6803      	ldr	r3, [r0, #0]
34002480:	b1eb      	cbz	r3, 340024be <LL_ATON_Init+0x242>
34002482:	f01c fd41 	bl	3401ef08 <__errno>
34002486:	6800      	ldr	r0, [r0, #0]
34002488:	f01c fce8 	bl	3401ee5c <strerror>
3400248c:	4603      	mov	r3, r0
3400248e:	2201      	movs	r2, #1
34002490:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002494:	221c      	movs	r2, #28
34002496:	9204      	str	r2, [sp, #16]
34002498:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400249c:	9203      	str	r2, [sp, #12]
3400249e:	f3c4 3203 	ubfx	r2, r4, #12, #4
340024a2:	9202      	str	r2, [sp, #8]
340024a4:	4a2d      	ldr	r2, [pc, #180]	@ (3400255c <LL_ATON_Init+0x2e0>)
340024a6:	b2e4      	uxtb	r4, r4
340024a8:	4925      	ldr	r1, [pc, #148]	@ (34002540 <LL_ATON_Init+0x2c4>)
340024aa:	9200      	str	r2, [sp, #0]
340024ac:	4825      	ldr	r0, [pc, #148]	@ (34002544 <LL_ATON_Init+0x2c8>)
340024ae:	22ce      	movs	r2, #206	@ 0xce
340024b0:	9401      	str	r4, [sp, #4]
340024b2:	f01c f947 	bl	3401e744 <iprintf>
340024b6:	21ce      	movs	r1, #206	@ 0xce
340024b8:	4b23      	ldr	r3, [pc, #140]	@ (34002548 <LL_ATON_Init+0x2cc>)
340024ba:	4a24      	ldr	r2, [pc, #144]	@ (3400254c <LL_ATON_Init+0x2d0>)
340024bc:	e7b2      	b.n	34002424 <LL_ATON_Init+0x1a8>
340024be:	4b25      	ldr	r3, [pc, #148]	@ (34002554 <LL_ATON_Init+0x2d8>)
340024c0:	e7e5      	b.n	3400248e <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
340024c2:	f01c fd21 	bl	3401ef08 <__errno>
340024c6:	6803      	ldr	r3, [r0, #0]
340024c8:	b1f3      	cbz	r3, 34002508 <LL_ATON_Init+0x28c>
340024ca:	f01c fd1d 	bl	3401ef08 <__errno>
340024ce:	6800      	ldr	r0, [r0, #0]
340024d0:	f01c fcc4 	bl	3401ee5c <strerror>
340024d4:	4603      	mov	r3, r0
340024d6:	2201      	movs	r2, #1
340024d8:	2000      	movs	r0, #0
340024da:	e9cd 2005 	strd	r2, r0, [sp, #20]
340024de:	221a      	movs	r2, #26
340024e0:	9204      	str	r2, [sp, #16]
340024e2:	f3c4 2203 	ubfx	r2, r4, #8, #4
340024e6:	9203      	str	r2, [sp, #12]
340024e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
340024ec:	9202      	str	r2, [sp, #8]
340024ee:	4a1c      	ldr	r2, [pc, #112]	@ (34002560 <LL_ATON_Init+0x2e4>)
340024f0:	b2e4      	uxtb	r4, r4
340024f2:	4913      	ldr	r1, [pc, #76]	@ (34002540 <LL_ATON_Init+0x2c4>)
340024f4:	9200      	str	r2, [sp, #0]
340024f6:	4813      	ldr	r0, [pc, #76]	@ (34002544 <LL_ATON_Init+0x2c8>)
340024f8:	22d2      	movs	r2, #210	@ 0xd2
340024fa:	9401      	str	r4, [sp, #4]
340024fc:	f01c f922 	bl	3401e744 <iprintf>
34002500:	21d2      	movs	r1, #210	@ 0xd2
34002502:	4b11      	ldr	r3, [pc, #68]	@ (34002548 <LL_ATON_Init+0x2cc>)
34002504:	4a11      	ldr	r2, [pc, #68]	@ (3400254c <LL_ATON_Init+0x2d0>)
34002506:	e78d      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002508:	4b12      	ldr	r3, [pc, #72]	@ (34002554 <LL_ATON_Init+0x2d8>)
3400250a:	e7e4      	b.n	340024d6 <LL_ATON_Init+0x25a>
3400250c:	340a37d8 	.word	0x340a37d8
34002510:	580e0000 	.word	0x580e0000
34002514:	580ef000 	.word	0x580ef000
34002518:	580fb000 	.word	0x580fb000
3400251c:	580f7000 	.word	0x580f7000
34002520:	580f5000 	.word	0x580f5000
34002524:	580f3000 	.word	0x580f3000
34002528:	580fe000 	.word	0x580fe000
3400252c:	580fd000 	.word	0x580fd000
34002530:	580e1000 	.word	0x580e1000
34002534:	580e4000 	.word	0x580e4000
34002538:	580e2000 	.word	0x580e2000
3400253c:	34022fa2 	.word	0x34022fa2
34002540:	34022ead 	.word	0x34022ead
34002544:	34022eed 	.word	0x34022eed
34002548:	340235d8 	.word	0x340235d8
3400254c:	34027ecc 	.word	0x34027ecc
34002550:	34022f51 	.word	0x34022f51
34002554:	34022ea8 	.word	0x34022ea8
34002558:	34022f58 	.word	0x34022f58
3400255c:	34022f60 	.word	0x34022f60
34002560:	34022f65 	.word	0x34022f65
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
34002564:	f01c fcd0 	bl	3401ef08 <__errno>
34002568:	6803      	ldr	r3, [r0, #0]
3400256a:	b1eb      	cbz	r3, 340025a8 <LL_ATON_Init+0x32c>
3400256c:	f01c fccc 	bl	3401ef08 <__errno>
34002570:	6800      	ldr	r0, [r0, #0]
34002572:	f01c fc73 	bl	3401ee5c <strerror>
34002576:	4603      	mov	r3, r0
34002578:	2201      	movs	r2, #1
3400257a:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400257e:	221b      	movs	r2, #27
34002580:	9204      	str	r2, [sp, #16]
34002582:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002586:	9203      	str	r2, [sp, #12]
34002588:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400258c:	9202      	str	r2, [sp, #8]
3400258e:	4a7c      	ldr	r2, [pc, #496]	@ (34002780 <LL_ATON_Init+0x504>)
34002590:	b2e4      	uxtb	r4, r4
34002592:	497c      	ldr	r1, [pc, #496]	@ (34002784 <LL_ATON_Init+0x508>)
34002594:	9200      	str	r2, [sp, #0]
34002596:	487c      	ldr	r0, [pc, #496]	@ (34002788 <LL_ATON_Init+0x50c>)
34002598:	22d6      	movs	r2, #214	@ 0xd6
3400259a:	9401      	str	r4, [sp, #4]
3400259c:	f01c f8d2 	bl	3401e744 <iprintf>
340025a0:	21d6      	movs	r1, #214	@ 0xd6
340025a2:	4b7a      	ldr	r3, [pc, #488]	@ (3400278c <LL_ATON_Init+0x510>)
340025a4:	4a7a      	ldr	r2, [pc, #488]	@ (34002790 <LL_ATON_Init+0x514>)
340025a6:	e73d      	b.n	34002424 <LL_ATON_Init+0x1a8>
340025a8:	4b7a      	ldr	r3, [pc, #488]	@ (34002794 <LL_ATON_Init+0x518>)
340025aa:	e7e5      	b.n	34002578 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
340025ac:	f01c fcac 	bl	3401ef08 <__errno>
340025b0:	6803      	ldr	r3, [r0, #0]
340025b2:	b1f3      	cbz	r3, 340025f2 <LL_ATON_Init+0x376>
340025b4:	f01c fca8 	bl	3401ef08 <__errno>
340025b8:	6800      	ldr	r0, [r0, #0]
340025ba:	f01c fc4f 	bl	3401ee5c <strerror>
340025be:	4603      	mov	r3, r0
340025c0:	2201      	movs	r2, #1
340025c2:	210a      	movs	r1, #10
340025c4:	e9cd 2105 	strd	r2, r1, [sp, #20]
340025c8:	2219      	movs	r2, #25
340025ca:	9204      	str	r2, [sp, #16]
340025cc:	f3c4 2203 	ubfx	r2, r4, #8, #4
340025d0:	9203      	str	r2, [sp, #12]
340025d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
340025d6:	9202      	str	r2, [sp, #8]
340025d8:	4a6f      	ldr	r2, [pc, #444]	@ (34002798 <LL_ATON_Init+0x51c>)
340025da:	b2e4      	uxtb	r4, r4
340025dc:	4969      	ldr	r1, [pc, #420]	@ (34002784 <LL_ATON_Init+0x508>)
340025de:	9200      	str	r2, [sp, #0]
340025e0:	4869      	ldr	r0, [pc, #420]	@ (34002788 <LL_ATON_Init+0x50c>)
340025e2:	22da      	movs	r2, #218	@ 0xda
340025e4:	9401      	str	r4, [sp, #4]
340025e6:	f01c f8ad 	bl	3401e744 <iprintf>
340025ea:	21da      	movs	r1, #218	@ 0xda
340025ec:	4b67      	ldr	r3, [pc, #412]	@ (3400278c <LL_ATON_Init+0x510>)
340025ee:	4a68      	ldr	r2, [pc, #416]	@ (34002790 <LL_ATON_Init+0x514>)
340025f0:	e718      	b.n	34002424 <LL_ATON_Init+0x1a8>
340025f2:	4b68      	ldr	r3, [pc, #416]	@ (34002794 <LL_ATON_Init+0x518>)
340025f4:	e7e4      	b.n	340025c0 <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
340025f6:	f01c fc87 	bl	3401ef08 <__errno>
340025fa:	6803      	ldr	r3, [r0, #0]
340025fc:	b1eb      	cbz	r3, 3400263a <LL_ATON_Init+0x3be>
340025fe:	f01c fc83 	bl	3401ef08 <__errno>
34002602:	6800      	ldr	r0, [r0, #0]
34002604:	f01c fc2a 	bl	3401ee5c <strerror>
34002608:	4603      	mov	r3, r0
3400260a:	2201      	movs	r2, #1
3400260c:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002610:	2221      	movs	r2, #33	@ 0x21
34002612:	9204      	str	r2, [sp, #16]
34002614:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002618:	9203      	str	r2, [sp, #12]
3400261a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400261e:	9202      	str	r2, [sp, #8]
34002620:	4a5e      	ldr	r2, [pc, #376]	@ (3400279c <LL_ATON_Init+0x520>)
34002622:	b2e4      	uxtb	r4, r4
34002624:	4957      	ldr	r1, [pc, #348]	@ (34002784 <LL_ATON_Init+0x508>)
34002626:	9200      	str	r2, [sp, #0]
34002628:	4857      	ldr	r0, [pc, #348]	@ (34002788 <LL_ATON_Init+0x50c>)
3400262a:	22de      	movs	r2, #222	@ 0xde
3400262c:	9401      	str	r4, [sp, #4]
3400262e:	f01c f889 	bl	3401e744 <iprintf>
34002632:	21de      	movs	r1, #222	@ 0xde
34002634:	4b55      	ldr	r3, [pc, #340]	@ (3400278c <LL_ATON_Init+0x510>)
34002636:	4a56      	ldr	r2, [pc, #344]	@ (34002790 <LL_ATON_Init+0x514>)
34002638:	e6f4      	b.n	34002424 <LL_ATON_Init+0x1a8>
3400263a:	4b56      	ldr	r3, [pc, #344]	@ (34002794 <LL_ATON_Init+0x518>)
3400263c:	e7e5      	b.n	3400260a <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400263e:	f01c fc63 	bl	3401ef08 <__errno>
34002642:	6803      	ldr	r3, [r0, #0]
34002644:	b1fb      	cbz	r3, 34002686 <LL_ATON_Init+0x40a>
34002646:	f01c fc5f 	bl	3401ef08 <__errno>
3400264a:	6800      	ldr	r0, [r0, #0]
3400264c:	f01c fc06 	bl	3401ee5c <strerror>
34002650:	4603      	mov	r3, r0
34002652:	2203      	movs	r2, #3
34002654:	f04f 0e02 	mov.w	lr, #2
34002658:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400265c:	2220      	movs	r2, #32
3400265e:	9204      	str	r2, [sp, #16]
34002660:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002664:	9203      	str	r2, [sp, #12]
34002666:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400266a:	9202      	str	r2, [sp, #8]
3400266c:	4a4c      	ldr	r2, [pc, #304]	@ (340027a0 <LL_ATON_Init+0x524>)
3400266e:	b2e4      	uxtb	r4, r4
34002670:	4944      	ldr	r1, [pc, #272]	@ (34002784 <LL_ATON_Init+0x508>)
34002672:	9200      	str	r2, [sp, #0]
34002674:	4844      	ldr	r0, [pc, #272]	@ (34002788 <LL_ATON_Init+0x50c>)
34002676:	22e2      	movs	r2, #226	@ 0xe2
34002678:	9401      	str	r4, [sp, #4]
3400267a:	f01c f863 	bl	3401e744 <iprintf>
3400267e:	21e2      	movs	r1, #226	@ 0xe2
34002680:	4b42      	ldr	r3, [pc, #264]	@ (3400278c <LL_ATON_Init+0x510>)
34002682:	4a43      	ldr	r2, [pc, #268]	@ (34002790 <LL_ATON_Init+0x514>)
34002684:	e6ce      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002686:	4b43      	ldr	r3, [pc, #268]	@ (34002794 <LL_ATON_Init+0x518>)
34002688:	e7e3      	b.n	34002652 <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400268a:	f01c fc3d 	bl	3401ef08 <__errno>
3400268e:	6803      	ldr	r3, [r0, #0]
34002690:	b1fb      	cbz	r3, 340026d2 <LL_ATON_Init+0x456>
34002692:	f01c fc39 	bl	3401ef08 <__errno>
34002696:	6800      	ldr	r0, [r0, #0]
34002698:	f01c fbe0 	bl	3401ee5c <strerror>
3400269c:	4603      	mov	r3, r0
3400269e:	2201      	movs	r2, #1
340026a0:	f04f 0c02 	mov.w	ip, #2
340026a4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
340026a8:	221f      	movs	r2, #31
340026aa:	9204      	str	r2, [sp, #16]
340026ac:	f3c4 2203 	ubfx	r2, r4, #8, #4
340026b0:	9203      	str	r2, [sp, #12]
340026b2:	f3c4 3203 	ubfx	r2, r4, #12, #4
340026b6:	9202      	str	r2, [sp, #8]
340026b8:	4a3a      	ldr	r2, [pc, #232]	@ (340027a4 <LL_ATON_Init+0x528>)
340026ba:	b2e4      	uxtb	r4, r4
340026bc:	4931      	ldr	r1, [pc, #196]	@ (34002784 <LL_ATON_Init+0x508>)
340026be:	9200      	str	r2, [sp, #0]
340026c0:	4831      	ldr	r0, [pc, #196]	@ (34002788 <LL_ATON_Init+0x50c>)
340026c2:	22f5      	movs	r2, #245	@ 0xf5
340026c4:	9401      	str	r4, [sp, #4]
340026c6:	f01c f83d 	bl	3401e744 <iprintf>
340026ca:	21f5      	movs	r1, #245	@ 0xf5
340026cc:	4b2f      	ldr	r3, [pc, #188]	@ (3400278c <LL_ATON_Init+0x510>)
340026ce:	4a30      	ldr	r2, [pc, #192]	@ (34002790 <LL_ATON_Init+0x514>)
340026d0:	e6a8      	b.n	34002424 <LL_ATON_Init+0x1a8>
340026d2:	4b30      	ldr	r3, [pc, #192]	@ (34002794 <LL_ATON_Init+0x518>)
340026d4:	e7e3      	b.n	3400269e <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
340026d6:	f01c fc17 	bl	3401ef08 <__errno>
340026da:	6803      	ldr	r3, [r0, #0]
340026dc:	b1eb      	cbz	r3, 3400271a <LL_ATON_Init+0x49e>
340026de:	f01c fc13 	bl	3401ef08 <__errno>
340026e2:	6800      	ldr	r0, [r0, #0]
340026e4:	f01c fbba 	bl	3401ee5c <strerror>
340026e8:	4603      	mov	r3, r0
340026ea:	2201      	movs	r2, #1
340026ec:	e9cd 2205 	strd	r2, r2, [sp, #20]
340026f0:	221e      	movs	r2, #30
340026f2:	9204      	str	r2, [sp, #16]
340026f4:	f3c4 2203 	ubfx	r2, r4, #8, #4
340026f8:	9203      	str	r2, [sp, #12]
340026fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
340026fe:	9202      	str	r2, [sp, #8]
34002700:	4a29      	ldr	r2, [pc, #164]	@ (340027a8 <LL_ATON_Init+0x52c>)
34002702:	b2e4      	uxtb	r4, r4
34002704:	491f      	ldr	r1, [pc, #124]	@ (34002784 <LL_ATON_Init+0x508>)
34002706:	9200      	str	r2, [sp, #0]
34002708:	481f      	ldr	r0, [pc, #124]	@ (34002788 <LL_ATON_Init+0x50c>)
3400270a:	22f7      	movs	r2, #247	@ 0xf7
3400270c:	9401      	str	r4, [sp, #4]
3400270e:	f01c f819 	bl	3401e744 <iprintf>
34002712:	21f7      	movs	r1, #247	@ 0xf7
34002714:	4b1d      	ldr	r3, [pc, #116]	@ (3400278c <LL_ATON_Init+0x510>)
34002716:	4a1e      	ldr	r2, [pc, #120]	@ (34002790 <LL_ATON_Init+0x514>)
34002718:	e684      	b.n	34002424 <LL_ATON_Init+0x1a8>
3400271a:	4b1e      	ldr	r3, [pc, #120]	@ (34002794 <LL_ATON_Init+0x518>)
3400271c:	e7e5      	b.n	340026ea <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400271e:	f01c fbf3 	bl	3401ef08 <__errno>
34002722:	6803      	ldr	r3, [r0, #0]
34002724:	b1f3      	cbz	r3, 34002764 <LL_ATON_Init+0x4e8>
34002726:	f01c fbef 	bl	3401ef08 <__errno>
3400272a:	6800      	ldr	r0, [r0, #0]
3400272c:	f01c fb96 	bl	3401ee5c <strerror>
34002730:	4603      	mov	r3, r0
34002732:	2201      	movs	r2, #1
34002734:	2006      	movs	r0, #6
34002736:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400273a:	2200      	movs	r2, #0
3400273c:	9204      	str	r2, [sp, #16]
3400273e:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002742:	9203      	str	r2, [sp, #12]
34002744:	f3c4 3203 	ubfx	r2, r4, #12, #4
34002748:	9202      	str	r2, [sp, #8]
3400274a:	4a18      	ldr	r2, [pc, #96]	@ (340027ac <LL_ATON_Init+0x530>)
3400274c:	b2e4      	uxtb	r4, r4
3400274e:	490d      	ldr	r1, [pc, #52]	@ (34002784 <LL_ATON_Init+0x508>)
34002750:	9200      	str	r2, [sp, #0]
34002752:	480d      	ldr	r0, [pc, #52]	@ (34002788 <LL_ATON_Init+0x50c>)
34002754:	22f9      	movs	r2, #249	@ 0xf9
34002756:	9401      	str	r4, [sp, #4]
34002758:	f01b fff4 	bl	3401e744 <iprintf>
3400275c:	21f9      	movs	r1, #249	@ 0xf9
3400275e:	4b0b      	ldr	r3, [pc, #44]	@ (3400278c <LL_ATON_Init+0x510>)
34002760:	4a0b      	ldr	r2, [pc, #44]	@ (34002790 <LL_ATON_Init+0x514>)
34002762:	e65f      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002764:	4b0b      	ldr	r3, [pc, #44]	@ (34002794 <LL_ATON_Init+0x518>)
34002766:	e7e4      	b.n	34002732 <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34002768:	4b0a      	ldr	r3, [pc, #40]	@ (34002794 <LL_ATON_Init+0x518>)
3400276a:	e61f      	b.n	340023ac <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400276c:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400276e:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
34002770:	6013      	str	r3, [r2, #0]
34002772:	4a0f      	ldr	r2, [pc, #60]	@ (340027b0 <LL_ATON_Init+0x534>)
34002774:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
34002776:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400277a:	6013      	str	r3, [r2, #0]
}
3400277c:	b008      	add	sp, #32
3400277e:	bd10      	pop	{r4, pc}
34002780:	34022f6b 	.word	0x34022f6b
34002784:	34022ead 	.word	0x34022ead
34002788:	34022eed 	.word	0x34022eed
3400278c:	340235d8 	.word	0x340235d8
34002790:	34027ecc 	.word	0x34027ecc
34002794:	34022ea8 	.word	0x34022ea8
34002798:	34022f71 	.word	0x34022f71
3400279c:	34022f77 	.word	0x34022f77
340027a0:	34022f81 	.word	0x34022f81
340027a4:	34022f88 	.word	0x34022f88
340027a8:	34022f90 	.word	0x34022f90
340027ac:	34022f98 	.word	0x34022f98
340027b0:	580e3000 	.word	0x580e3000

340027b4 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
340027b4:	2000      	movs	r0, #0
340027b6:	4b07      	ldr	r3, [pc, #28]	@ (340027d4 <LL_ATON_DeInit+0x20>)
340027b8:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
340027ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340027be:	6018      	str	r0, [r3, #0]
340027c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340027c4:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
340027c6:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
340027ca:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
340027cc:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
340027ce:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
340027d0:	6018      	str	r0, [r3, #0]

  return 0;
}
340027d2:	4770      	bx	lr
340027d4:	580e1000 	.word	0x580e1000

340027d8 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
340027d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
340027da:	2400      	movs	r4, #0
340027dc:	42a1      	cmp	r1, r4
340027de:	f101 0201 	add.w	r2, r1, #1
340027e2:	bfb8      	it	lt
340027e4:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
340027e6:	4d1e      	ldr	r5, [pc, #120]	@ (34002860 <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
340027e8:	4f1e      	ldr	r7, [pc, #120]	@ (34002864 <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
340027ea:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
340027ec:	3a01      	subs	r2, #1
340027ee:	d101      	bne.n	340027f4 <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
340027f0:	2000      	movs	r0, #0
340027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
340027f4:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
340027f8:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
340027fc:	2908      	cmp	r1, #8
340027fe:	d818      	bhi.n	34002832 <LL_ATON_EnableUnits_Init+0x5a>
34002800:	e8df f001 	tbb	[pc, r1]
34002804:	190e1705 	.word	0x190e1705
34002808:	1725211d 	.word	0x1725211d
3400280c:	29          	.byte	0x29
3400280d:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400280e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002812:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
34002814:	031b      	lsls	r3, r3, #12
34002816:	6819      	ldr	r1, [r3, #0]
34002818:	f041 0101 	orr.w	r1, r1, #1
3400281c:	6019      	str	r1, [r3, #0]
      break;
3400281e:	e008      	b.n	34002832 <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
34002820:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
34002824:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
34002828:	31ef      	adds	r1, #239	@ 0xef
3400282a:	0309      	lsls	r1, r1, #12
3400282c:	f043 0301 	orr.w	r3, r3, #1
34002830:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
34002832:	3401      	adds	r4, #1
34002834:	e7da      	b.n	340027ec <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
34002836:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400283a:	33f3      	adds	r3, #243	@ 0xf3
3400283c:	e7ea      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
3400283e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002842:	33f5      	adds	r3, #245	@ 0xf5
34002844:	e7e6      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
34002846:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400284a:	33f7      	adds	r3, #247	@ 0xf7
3400284c:	e7e2      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
3400284e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002852:	33fb      	adds	r3, #251	@ 0xfb
34002854:	e7de      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
34002856:	682b      	ldr	r3, [r5, #0]
34002858:	f043 0301 	orr.w	r3, r3, #1
3400285c:	602b      	str	r3, [r5, #0]
      break;
3400285e:	e7e8      	b.n	34002832 <LL_ATON_EnableUnits_Init+0x5a>
34002860:	580fd000 	.word	0x580fd000
34002864:	340a37dc 	.word	0x340a37dc

34002868 <__atonn_getSrcPortID>:
}
#endif

unsigned __atonn_getSrcPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
34002868:	b538      	push	{r3, r4, r5, lr}
3400286a:	4605      	mov	r5, r0
3400286c:	f89d 4010 	ldrb.w	r4, [sp, #16]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
34002870:	4608      	mov	r0, r1
34002872:	b131      	cbz	r1, 34002882 <__atonn_getSrcPortID+0x1a>
34002874:	f240 313e 	movw	r1, #830	@ 0x33e
34002878:	4b3d      	ldr	r3, [pc, #244]	@ (34002970 <__atonn_getSrcPortID+0x108>)
3400287a:	4a3e      	ldr	r2, [pc, #248]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
  case STRSWITCH:
    switch (aut)
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
3400287c:	483e      	ldr	r0, [pc, #248]	@ (34002978 <__atonn_getSrcPortID+0x110>)
3400287e:	f01b f8b5 	bl	3401d9ec <__assert_func>
  switch (sut)
34002882:	b125      	cbz	r5, 3400288e <__atonn_getSrcPortID+0x26>
34002884:	2d01      	cmp	r5, #1
34002886:	d068      	beq.n	3400295a <__atonn_getSrcPortID+0xf2>
34002888:	2d02      	cmp	r5, #2
3400288a:	d06b      	beq.n	34002964 <__atonn_getSrcPortID+0xfc>
    // TODO
    LL_ATON_ASSERT(0);
    break;
  }
  return 0;
}
3400288c:	bd38      	pop	{r3, r4, r5, pc}
    switch (aut)
3400288e:	2a06      	cmp	r2, #6
34002890:	d85e      	bhi.n	34002950 <__atonn_getSrcPortID+0xe8>
34002892:	e8df f002 	tbb	[pc, r2]
34002896:	5d04      	.short	0x5d04
34002898:	3f302112 	.word	0x3f302112
3400289c:	4e          	.byte	0x4e
3400289d:	00          	.byte	0x00
      LL_ATON_ASSERT(port == 0);
3400289e:	b124      	cbz	r4, 340028aa <__atonn_getSrcPortID+0x42>
340028a0:	f240 3146 	movw	r1, #838	@ 0x346
340028a4:	4b35      	ldr	r3, [pc, #212]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028a6:	4a33      	ldr	r2, [pc, #204]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028a8:	e7e8      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
340028aa:	2b09      	cmp	r3, #9
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, STRENG, 0, 0) + au_num;
340028ac:	4618      	mov	r0, r3
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
340028ae:	d9ed      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
340028b0:	f240 3147 	movw	r1, #839	@ 0x347
340028b4:	4b32      	ldr	r3, [pc, #200]	@ (34002980 <__atonn_getSrcPortID+0x118>)
340028b6:	4a2f      	ldr	r2, [pc, #188]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028b8:	e7e0      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340028ba:	b124      	cbz	r4, 340028c6 <__atonn_getSrcPortID+0x5e>
340028bc:	f240 314d 	movw	r1, #845	@ 0x34d
340028c0:	4b2e      	ldr	r3, [pc, #184]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028c2:	4a2c      	ldr	r2, [pc, #176]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028c4:	e7da      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
340028c6:	2b03      	cmp	r3, #3
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0) + au_num;
340028c8:	f103 000a 	add.w	r0, r3, #10
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
340028cc:	d9de      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
340028ce:	f240 314e 	movw	r1, #846	@ 0x34e
340028d2:	4b2c      	ldr	r3, [pc, #176]	@ (34002984 <__atonn_getSrcPortID+0x11c>)
340028d4:	4a27      	ldr	r2, [pc, #156]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028d6:	e7d1      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340028d8:	b124      	cbz	r4, 340028e4 <__atonn_getSrcPortID+0x7c>
340028da:	f44f 7155 	mov.w	r1, #852	@ 0x354
340028de:	4b27      	ldr	r3, [pc, #156]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028e0:	4a24      	ldr	r2, [pc, #144]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028e2:	e7cb      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340028e4:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, DECUN, 0, 0) + au_num;
340028e6:	f103 000e 	add.w	r0, r3, #14
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340028ea:	d9cf      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
340028ec:	f240 3155 	movw	r1, #853	@ 0x355
340028f0:	4b25      	ldr	r3, [pc, #148]	@ (34002988 <__atonn_getSrcPortID+0x120>)
340028f2:	4a20      	ldr	r2, [pc, #128]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028f4:	e7c2      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340028f6:	b124      	cbz	r4, 34002902 <__atonn_getSrcPortID+0x9a>
340028f8:	f240 315b 	movw	r1, #859	@ 0x35b
340028fc:	4b1f      	ldr	r3, [pc, #124]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028fe:	4a1d      	ldr	r2, [pc, #116]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002900:	e7bc      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002902:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ACTIV, 0, 0) + au_num;
34002904:	f103 0010 	add.w	r0, r3, #16
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002908:	d9c0      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
3400290a:	f44f 7157 	mov.w	r1, #860	@ 0x35c
3400290e:	4b1e      	ldr	r3, [pc, #120]	@ (34002988 <__atonn_getSrcPortID+0x120>)
34002910:	4a18      	ldr	r2, [pc, #96]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002912:	e7b3      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002914:	b124      	cbz	r4, 34002920 <__atonn_getSrcPortID+0xb8>
34002916:	f240 3162 	movw	r1, #866	@ 0x362
3400291a:	4b18      	ldr	r3, [pc, #96]	@ (3400297c <__atonn_getSrcPortID+0x114>)
3400291c:	4a15      	ldr	r2, [pc, #84]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400291e:	e7ad      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002920:	2b03      	cmp	r3, #3
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ARITH, 0, 0) + au_num;
34002922:	f103 0012 	add.w	r0, r3, #18
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002926:	d9b1      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
34002928:	f240 3163 	movw	r1, #867	@ 0x363
3400292c:	4b15      	ldr	r3, [pc, #84]	@ (34002984 <__atonn_getSrcPortID+0x11c>)
3400292e:	4a11      	ldr	r2, [pc, #68]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002930:	e7a4      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002932:	b124      	cbz	r4, 3400293e <__atonn_getSrcPortID+0xd6>
34002934:	f240 3169 	movw	r1, #873	@ 0x369
34002938:	4b10      	ldr	r3, [pc, #64]	@ (3400297c <__atonn_getSrcPortID+0x114>)
3400293a:	4a0e      	ldr	r2, [pc, #56]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400293c:	e79e      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
3400293e:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, POOL, 0, 0) + au_num;
34002940:	f103 0016 	add.w	r0, r3, #22
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34002944:	d9a2      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
34002946:	f240 316a 	movw	r1, #874	@ 0x36a
3400294a:	4b0f      	ldr	r3, [pc, #60]	@ (34002988 <__atonn_getSrcPortID+0x120>)
3400294c:	4a09      	ldr	r2, [pc, #36]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400294e:	e795      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(0);
34002950:	f240 316f 	movw	r1, #879	@ 0x36f
34002954:	4b0d      	ldr	r3, [pc, #52]	@ (3400298c <__atonn_getSrcPortID+0x124>)
34002956:	4a07      	ldr	r2, [pc, #28]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002958:	e790      	b.n	3400287c <__atonn_getSrcPortID+0x14>
    LL_ATON_ASSERT(0);
3400295a:	f240 3175 	movw	r1, #885	@ 0x375
3400295e:	4b0b      	ldr	r3, [pc, #44]	@ (3400298c <__atonn_getSrcPortID+0x124>)
34002960:	4a04      	ldr	r2, [pc, #16]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002962:	e78b      	b.n	3400287c <__atonn_getSrcPortID+0x14>
    LL_ATON_ASSERT(0);
34002964:	f240 3179 	movw	r1, #889	@ 0x379
34002968:	4b08      	ldr	r3, [pc, #32]	@ (3400298c <__atonn_getSrcPortID+0x124>)
3400296a:	4a02      	ldr	r2, [pc, #8]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400296c:	e786      	b.n	3400287c <__atonn_getSrcPortID+0x14>
3400296e:	bf00      	nop
34002970:	34022fa8 	.word	0x34022fa8
34002974:	34027eb7 	.word	0x34027eb7
34002978:	34022ead 	.word	0x34022ead
3400297c:	34022fb4 	.word	0x34022fb4
34002980:	34022fbe 	.word	0x34022fbe
34002984:	34022fca 	.word	0x34022fca
34002988:	34022fd5 	.word	0x34022fd5
3400298c:	340235d8 	.word	0x340235d8

34002990 <__atonn_getDstPortID>:

unsigned __atonn_getDstPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
34002990:	b538      	push	{r3, r4, r5, lr}
34002992:	4605      	mov	r5, r0
34002994:	f89d 4010 	ldrb.w	r4, [sp, #16]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
34002998:	4608      	mov	r0, r1
3400299a:	b131      	cbz	r1, 340029aa <__atonn_getDstPortID+0x1a>
3400299c:	f240 3183 	movw	r1, #899	@ 0x383
340029a0:	4b46      	ldr	r3, [pc, #280]	@ (34002abc <__atonn_getDstPortID+0x12c>)
340029a2:	4a47      	ldr	r2, [pc, #284]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
  case STRSWITCH:
    switch (aut)
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
340029a4:	4847      	ldr	r0, [pc, #284]	@ (34002ac4 <__atonn_getDstPortID+0x134>)
340029a6:	f01b f821 	bl	3401d9ec <__assert_func>
  switch (sut)
340029aa:	b125      	cbz	r5, 340029b6 <__atonn_getDstPortID+0x26>
340029ac:	2d01      	cmp	r5, #1
340029ae:	d07a      	beq.n	34002aa6 <__atonn_getDstPortID+0x116>
340029b0:	2d02      	cmp	r5, #2
340029b2:	d07d      	beq.n	34002ab0 <__atonn_getDstPortID+0x120>
    // TODO
    LL_ATON_ASSERT(0);
    break;
  }
  return 0;
}
340029b4:	bd38      	pop	{r3, r4, r5, pc}
    switch (aut)
340029b6:	2a06      	cmp	r2, #6
340029b8:	d870      	bhi.n	34002a9c <__atonn_getDstPortID+0x10c>
340029ba:	e8df f002 	tbb	[pc, r2]
340029be:	6f04      	.short	0x6f04
340029c0:	4c3d2915 	.word	0x4c3d2915
340029c4:	60          	.byte	0x60
340029c5:	00          	.byte	0x00
      LL_ATON_ASSERT(port == 0);
340029c6:	b124      	cbz	r4, 340029d2 <__atonn_getDstPortID+0x42>
340029c8:	f240 318b 	movw	r1, #907	@ 0x38b
340029cc:	4b3e      	ldr	r3, [pc, #248]	@ (34002ac8 <__atonn_getDstPortID+0x138>)
340029ce:	4a3c      	ldr	r2, [pc, #240]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
340029d0:	e7e8      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
340029d2:	2b09      	cmp	r3, #9
340029d4:	d904      	bls.n	340029e0 <__atonn_getDstPortID+0x50>
340029d6:	f44f 7163 	mov.w	r1, #908	@ 0x38c
340029da:	4b3c      	ldr	r3, [pc, #240]	@ (34002acc <__atonn_getDstPortID+0x13c>)
340029dc:	4a38      	ldr	r2, [pc, #224]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
340029de:	e7e1      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, STRENG, 0, 0) + (0x4 * au_num);
340029e0:	2008      	movs	r0, #8
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
340029e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
340029e6:	e7e5      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port < 3);
340029e8:	2c02      	cmp	r4, #2
340029ea:	d904      	bls.n	340029f6 <__atonn_getDstPortID+0x66>
340029ec:	f240 3192 	movw	r1, #914	@ 0x392
340029f0:	4b37      	ldr	r3, [pc, #220]	@ (34002ad0 <__atonn_getDstPortID+0x140>)
340029f2:	4a33      	ldr	r2, [pc, #204]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
340029f4:	e7d6      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
340029f6:	2b03      	cmp	r3, #3
340029f8:	d904      	bls.n	34002a04 <__atonn_getDstPortID+0x74>
340029fa:	f240 3193 	movw	r1, #915	@ 0x393
340029fe:	4b35      	ldr	r3, [pc, #212]	@ (34002ad4 <__atonn_getDstPortID+0x144>)
34002a00:	4a2f      	ldr	r2, [pc, #188]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a02:	e7cf      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, CONVACC, 0, 0) + (0x4 * (3 * au_num + port));
34002a04:	2003      	movs	r0, #3
34002a06:	fb10 4003 	smlabb	r0, r0, r3, r4
34002a0a:	0080      	lsls	r0, r0, #2
34002a0c:	3030      	adds	r0, #48	@ 0x30
34002a0e:	e7d1      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port < 2);
34002a10:	2c01      	cmp	r4, #1
34002a12:	d904      	bls.n	34002a1e <__atonn_getDstPortID+0x8e>
34002a14:	f240 3199 	movw	r1, #921	@ 0x399
34002a18:	4b2f      	ldr	r3, [pc, #188]	@ (34002ad8 <__atonn_getDstPortID+0x148>)
34002a1a:	4a29      	ldr	r2, [pc, #164]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a1c:	e7c2      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
34002a1e:	2b01      	cmp	r3, #1
34002a20:	d904      	bls.n	34002a2c <__atonn_getDstPortID+0x9c>
34002a22:	f240 319a 	movw	r1, #922	@ 0x39a
34002a26:	4b2d      	ldr	r3, [pc, #180]	@ (34002adc <__atonn_getDstPortID+0x14c>)
34002a28:	4a25      	ldr	r2, [pc, #148]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a2a:	e7bb      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, DECUN, 0, 0) + (0x4 * (2 * au_num + port));
34002a2c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
34002a30:	00a4      	lsls	r4, r4, #2
34002a32:	f104 0060 	add.w	r0, r4, #96	@ 0x60
34002a36:	e7bd      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port == 0);
34002a38:	b124      	cbz	r4, 34002a44 <__atonn_getDstPortID+0xb4>
34002a3a:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
34002a3e:	4b22      	ldr	r3, [pc, #136]	@ (34002ac8 <__atonn_getDstPortID+0x138>)
34002a40:	4a1f      	ldr	r2, [pc, #124]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a42:	e7af      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002a44:	2b01      	cmp	r3, #1
34002a46:	d904      	bls.n	34002a52 <__atonn_getDstPortID+0xc2>
34002a48:	f240 31a1 	movw	r1, #929	@ 0x3a1
34002a4c:	4b23      	ldr	r3, [pc, #140]	@ (34002adc <__atonn_getDstPortID+0x14c>)
34002a4e:	4a1c      	ldr	r2, [pc, #112]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a50:	e7a8      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ACTIV, 0, 0) + (0x4 * au_num);
34002a52:	2070      	movs	r0, #112	@ 0x70
34002a54:	e7c5      	b.n	340029e2 <__atonn_getDstPortID+0x52>
      LL_ATON_ASSERT(port < 2);
34002a56:	2c01      	cmp	r4, #1
34002a58:	d904      	bls.n	34002a64 <__atonn_getDstPortID+0xd4>
34002a5a:	f240 31a7 	movw	r1, #935	@ 0x3a7
34002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (34002ad8 <__atonn_getDstPortID+0x148>)
34002a60:	4a17      	ldr	r2, [pc, #92]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a62:	e79f      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002a64:	2b03      	cmp	r3, #3
34002a66:	d904      	bls.n	34002a72 <__atonn_getDstPortID+0xe2>
34002a68:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
34002a6c:	4b19      	ldr	r3, [pc, #100]	@ (34002ad4 <__atonn_getDstPortID+0x144>)
34002a6e:	4a14      	ldr	r2, [pc, #80]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a70:	e798      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ARITH, 0, 0) + (0x4 * (2 * au_num + port));
34002a72:	eb04 0443 	add.w	r4, r4, r3, lsl #1
34002a76:	00a4      	lsls	r4, r4, #2
34002a78:	f104 0078 	add.w	r0, r4, #120	@ 0x78
34002a7c:	e79a      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port == 0);
34002a7e:	b124      	cbz	r4, 34002a8a <__atonn_getDstPortID+0xfa>
34002a80:	f240 31ae 	movw	r1, #942	@ 0x3ae
34002a84:	4b10      	ldr	r3, [pc, #64]	@ (34002ac8 <__atonn_getDstPortID+0x138>)
34002a86:	4a0e      	ldr	r2, [pc, #56]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a88:	e78c      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34002a8a:	2b01      	cmp	r3, #1
34002a8c:	d904      	bls.n	34002a98 <__atonn_getDstPortID+0x108>
34002a8e:	f240 31af 	movw	r1, #943	@ 0x3af
34002a92:	4b12      	ldr	r3, [pc, #72]	@ (34002adc <__atonn_getDstPortID+0x14c>)
34002a94:	4a0a      	ldr	r2, [pc, #40]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a96:	e785      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
34002a98:	2098      	movs	r0, #152	@ 0x98
34002a9a:	e7a2      	b.n	340029e2 <__atonn_getDstPortID+0x52>
      LL_ATON_ASSERT(0);
34002a9c:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
34002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (34002ae0 <__atonn_getDstPortID+0x150>)
34002aa2:	4a07      	ldr	r2, [pc, #28]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002aa4:	e77e      	b.n	340029a4 <__atonn_getDstPortID+0x14>
    LL_ATON_ASSERT(0);
34002aa6:	f240 31ba 	movw	r1, #954	@ 0x3ba
34002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (34002ae0 <__atonn_getDstPortID+0x150>)
34002aac:	4a04      	ldr	r2, [pc, #16]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002aae:	e779      	b.n	340029a4 <__atonn_getDstPortID+0x14>
    LL_ATON_ASSERT(0);
34002ab0:	f240 31be 	movw	r1, #958	@ 0x3be
34002ab4:	4b0a      	ldr	r3, [pc, #40]	@ (34002ae0 <__atonn_getDstPortID+0x150>)
34002ab6:	4a02      	ldr	r2, [pc, #8]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002ab8:	e774      	b.n	340029a4 <__atonn_getDstPortID+0x14>
34002aba:	bf00      	nop
34002abc:	34022fa8 	.word	0x34022fa8
34002ac0:	34027ea2 	.word	0x34027ea2
34002ac4:	34022ead 	.word	0x34022ead
34002ac8:	34022fb4 	.word	0x34022fb4
34002acc:	34022fbe 	.word	0x34022fbe
34002ad0:	34022fe0 	.word	0x34022fe0
34002ad4:	34022fca 	.word	0x34022fca
34002ad8:	34022fe9 	.word	0x34022fe9
34002adc:	34022fd5 	.word	0x34022fd5
34002ae0:	340235d8 	.word	0x340235d8

34002ae4 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
34002ae4:	2301      	movs	r3, #1
34002ae6:	4a13      	ldr	r2, [pc, #76]	@ (34002b34 <LL_Switch_Init_NoReset+0x50>)
34002ae8:	2900      	cmp	r1, #0
{
34002aea:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
34002aec:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
34002aee:	eb01 0203 	add.w	r2, r1, r3
34002af2:	bfb8      	it	lt
34002af4:	461a      	movlt	r2, r3
34002af6:	3a01      	subs	r2, #1
34002af8:	d101      	bne.n	34002afe <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
34002afa:	2000      	movs	r0, #0
34002afc:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34002afe:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
34002b00:	e9d0 5300 	ldrd	r5, r3, [r0]
34002b04:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b06:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34002b0a:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b0e:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
34002b10:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b12:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b14:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
34002b18:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b1a:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b1e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
34002b22:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b26:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
34002b2e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
34002b30:	3010      	adds	r0, #16
34002b32:	e7e0      	b.n	34002af6 <LL_Switch_Init_NoReset+0x12>
34002b34:	580e4000 	.word	0x580e4000

34002b38 <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
34002b38:	2202      	movs	r2, #2
34002b3a:	4b06      	ldr	r3, [pc, #24]	@ (34002b54 <LL_Switch_Init+0x1c>)
34002b3c:	601a      	str	r2, [r3, #0]
34002b3e:	681a      	ldr	r2, [r3, #0]
34002b40:	0792      	lsls	r2, r2, #30
34002b42:	d4fc      	bmi.n	34002b3e <LL_Switch_Init+0x6>
34002b44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002b48:	601a      	str	r2, [r3, #0]
34002b4a:	681a      	ldr	r2, [r3, #0]
34002b4c:	0052      	lsls	r2, r2, #1
34002b4e:	d4fc      	bmi.n	34002b4a <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
34002b50:	f7ff bfc8 	b.w	34002ae4 <LL_Switch_Init_NoReset>
34002b54:	580e4000 	.word	0x580e4000

34002b58 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
34002b58:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
34002b5a:	2400      	movs	r4, #0
34002b5c:	42a1      	cmp	r1, r4
34002b5e:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
34002b62:	4625      	mov	r5, r4
34002b64:	bfb8      	it	lt
34002b66:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b68:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
34002b6a:	3b01      	subs	r3, #1
34002b6c:	d101      	bne.n	34002b72 <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
34002b6e:	2000      	movs	r0, #0
34002b70:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b72:	0122      	lsls	r2, r4, #4
34002b74:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
34002b76:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b78:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
34002b7c:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
34002b80:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
34002b82:	e7f2      	b.n	34002b6a <LL_Switch_Deinit+0x12>

34002b84 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
34002b84:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
34002b86:	2401      	movs	r4, #1
34002b88:	2500      	movs	r5, #0
34002b8a:	2301      	movs	r3, #1
34002b8c:	ea54 050d 	orrs.w	r5, r4, sp
34002b90:	4a03      	ldr	r2, [pc, #12]	@ (34002ba0 <LL_ATON_EnableClock+0x1c>)
34002b92:	4083      	lsls	r3, r0
34002b94:	6911      	ldr	r1, [r2, #16]
34002b96:	404b      	eors	r3, r1
34002b98:	4023      	ands	r3, r4
34002b9a:	404b      	eors	r3, r1
34002b9c:	6113      	str	r3, [r2, #16]
#endif
}
34002b9e:	bd30      	pop	{r4, r5, pc}
34002ba0:	580e0000 	.word	0x580e0000

34002ba4 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
34002ba4:	2809      	cmp	r0, #9
{
34002ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34002baa:	4604      	mov	r4, r0
34002bac:	460d      	mov	r5, r1
34002bae:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
34002bb0:	dd04      	ble.n	34002bbc <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
34002bb2:	f04f 30ff 	mov.w	r0, #4294967295
}
34002bb6:	b003      	add	sp, #12
34002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
34002bbc:	f7ff ffe2 	bl	34002b84 <LL_ATON_EnableClock>
  if (n != 1)
34002bc0:	2e01      	cmp	r6, #1
34002bc2:	d1f6      	bne.n	34002bb2 <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
34002bc4:	f895 603c 	ldrb.w	r6, [r5, #60]	@ 0x3c
34002bc8:	2e18      	cmp	r6, #24
34002bca:	d8f2      	bhi.n	34002bb2 <LL_Streng_TensorInit+0xe>
34002bcc:	f895 c03d 	ldrb.w	ip, [r5, #61]	@ 0x3d
34002bd0:	f1bc 0f18 	cmp.w	ip, #24
34002bd4:	d8ed      	bhi.n	34002bb2 <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002bd6:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002bd8:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002bdc:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002bde:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002be0:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002be4:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002be8:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
34002bea:	f3c0 0180 	ubfx	r1, r0, #2, #1
34002bee:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
34002bf2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
34002bf6:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34002bf8:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002bfa:	f10a 31ff 	add.w	r1, sl, #4294967295
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34002bfe:	f003 0310 	and.w	r3, r3, #16
34002c02:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002c04:	424a      	negs	r2, r1
34002c06:	414a      	adcs	r2, r1
34002c08:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34002c0c:	0102      	lsls	r2, r0, #4
34002c0e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c12:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34002c16:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34002c18:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34002c1a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
34002c1e:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c20:	f408 7310 	and.w	r3, r8, #576	@ 0x240
34002c24:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
34002c28:	f1de 0300 	rsbs	r3, lr, #0
34002c2c:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002c30:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c34:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
34002c38:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
34002c3a:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002c3c:	9201      	str	r2, [sp, #4]
34002c3e:	f000 0940 	and.w	r9, r0, #64	@ 0x40
34002c42:	f040 80a9 	bne.w	34002d98 <LL_Streng_TensorInit+0x1f4>
34002c46:	4566      	cmp	r6, ip
34002c48:	bf8c      	ite	hi
34002c4a:	2200      	movhi	r2, #0
34002c4c:	2201      	movls	r2, #1
  switch (io_case)
34002c4e:	2a03      	cmp	r2, #3
34002c50:	f000 80b2 	beq.w	34002db8 <LL_Streng_TensorInit+0x214>
34002c54:	2a01      	cmp	r2, #1
34002c56:	f000 80aa 	beq.w	34002dae <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
34002c5a:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002c5c:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
34002c60:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002c62:	bf4b      	itete	mi
34002c64:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34002c66:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002c68:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34002c6c:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
34002c70:	2908      	cmp	r1, #8
34002c72:	468e      	mov	lr, r1
34002c74:	bfa8      	it	ge
34002c76:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002c7a:	2908      	cmp	r1, #8
34002c7c:	f340 8099 	ble.w	34002db2 <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34002c80:	2910      	cmp	r1, #16
34002c82:	bfcb      	itete	gt
34002c84:	f1a1 0310 	subgt.w	r3, r1, #16
34002c88:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002c8a:	2108      	movgt	r1, #8
34002c8c:	3908      	suble	r1, #8
    if (conf->align_right)
34002c8e:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
34002c92:	f1b9 0f00 	cmp.w	r9, #0
34002c96:	d10b      	bne.n	34002cb0 <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
34002c98:	f1bc 0f10 	cmp.w	ip, #16
34002c9c:	f300 80b2 	bgt.w	34002e04 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
34002ca0:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
34002ca4:	f340 80b2 	ble.w	34002e0c <LL_Streng_TensorInit+0x268>
34002ca8:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
34002caa:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
34002cac:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
34002cae:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
34002cb0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
34002cb4:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
34002cb8:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
34002cbc:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
34002cbe:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
34002cc2:	0324      	lsls	r4, r4, #12
34002cc4:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
34002cc6:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
34002cca:	eb07 030e 	add.w	r3, r7, lr
34002cce:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
34002cd0:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002cd2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
34002cd4:	f140 809d 	bpl.w	34002e12 <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
34002cd8:	696b      	ldr	r3, [r5, #20]
34002cda:	b94b      	cbnz	r3, 34002cf0 <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
34002cdc:	f010 0f01 	tst.w	r0, #1
34002ce0:	bf18      	it	ne
34002ce2:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
34002ce4:	68eb      	ldr	r3, [r5, #12]
34002ce6:	eba3 030e 	sub.w	r3, r3, lr
34002cea:	00db      	lsls	r3, r3, #3
34002cec:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
34002cf0:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
34002cf2:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
34002cf4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
34002cf6:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
34002cfa:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
34002cfc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34002cfe:	61e3      	str	r3, [r4, #28]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
34002d00:	6aab      	ldr	r3, [r5, #40]	@ 0x28
34002d02:	61a3      	str	r3, [r4, #24]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
34002d04:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
34002d08:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
34002d0a:	692b      	ldr	r3, [r5, #16]
34002d0c:	b12b      	cbz	r3, 34002d1a <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d0e:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
34002d10:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d14:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
34002d16:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d18:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34002d1a:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
34002d1c:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34002d20:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34002d24:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34002d28:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d2a:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
34002d2e:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d32:	4333      	orrs	r3, r6
34002d34:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
34002d36:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d38:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
34002d3c:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d40:	f006 0103 	and.w	r1, r6, #3
34002d44:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
34002d48:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
34002d4c:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
34002d4e:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
34002d52:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d56:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
34002d5a:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002d5e:	bf09      	itett	eq
34002d60:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
34002d62:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002d66:	0609      	lsleq	r1, r1, #24
34002d68:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
34002d6c:	bf08      	it	eq
34002d6e:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
34002d70:	f04f 0024 	mov.w	r0, #36	@ 0x24
34002d74:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
34002d76:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
34002d78:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
34002d7a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34002d7e:	f3c6 06c0 	ubfx	r6, r6, #3, #1
34002d82:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002d86:	bf08      	it	eq
34002d88:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34002d8c:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
34002d90:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
34002d92:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
34002d94:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
34002d96:	e70e      	b.n	34002bb6 <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
34002d98:	0042      	lsls	r2, r0, #1
34002d9a:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002d9e:	4566      	cmp	r6, ip
34002da0:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
34002da4:	2a02      	cmp	r2, #2
34002da6:	f47f af52 	bne.w	34002c4e <LL_Streng_TensorInit+0xaa>
34002daa:	2200      	movs	r2, #0
34002dac:	e00f      	b.n	34002dce <LL_Streng_TensorInit+0x22a>
34002dae:	2200      	movs	r2, #0
34002db0:	e75e      	b.n	34002c70 <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002db2:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34002db4:	460b      	mov	r3, r1
34002db6:	e76a      	b.n	34002c8e <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
34002db8:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002dba:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
34002dbe:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002dc0:	bf4b      	itete	mi
34002dc2:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34002dc4:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002dc6:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34002dca:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
34002dce:	2b08      	cmp	r3, #8
34002dd0:	469e      	mov	lr, r3
34002dd2:	bfa8      	it	ge
34002dd4:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002dd8:	2b08      	cmp	r3, #8
34002dda:	dd10      	ble.n	34002dfe <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002ddc:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002dde:	bfd5      	itete	le
34002de0:	f1a3 0108 	suble.w	r1, r3, #8
34002de4:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002de6:	2300      	movle	r3, #0
34002de8:	3b10      	subgt	r3, #16
    if (conf->align_right)
34002dea:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
34002dee:	f1b9 0f00 	cmp.w	r9, #0
34002df2:	f47f af5d 	bne.w	34002cb0 <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
34002df6:	2e10      	cmp	r6, #16
34002df8:	dc04      	bgt.n	34002e04 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
34002dfa:	2e08      	cmp	r6, #8
34002dfc:	e752      	b.n	34002ca4 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002dfe:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002e00:	460b      	mov	r3, r1
34002e02:	e7f2      	b.n	34002dea <LL_Streng_TensorInit+0x246>
34002e04:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
34002e06:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
34002e08:	464b      	mov	r3, r9
34002e0a:	e751      	b.n	34002cb0 <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
34002e0c:	465b      	mov	r3, fp
34002e0e:	4659      	mov	r1, fp
34002e10:	e74e      	b.n	34002cb0 <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34002e12:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
34002e16:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e18:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34002e1a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e1e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
34002e20:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e22:	2800      	cmp	r0, #0
34002e24:	bf08      	it	eq
34002e26:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
34002e28:	b283      	uxth	r3, r0
34002e2a:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
34002e2c:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
34002e2e:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
34002e32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
34002e36:	6123      	str	r3, [r4, #16]
34002e38:	e75c      	b.n	34002cf4 <LL_Streng_TensorInit+0x150>
	...

34002e3c <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
34002e3c:	2800      	cmp	r0, #0
{
34002e3e:	b510      	push	{r4, lr}
34002e40:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
34002e42:	dc0e      	bgt.n	34002e62 <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
34002e44:	3019      	adds	r0, #25
34002e46:	f7ff fe9d 	bl	34002b84 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34002e4a:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34002e4c:	4a08      	ldr	r2, [pc, #32]	@ (34002e70 <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34002e4e:	f003 0301 	and.w	r3, r3, #1
34002e52:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34002e54:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
34002e56:	6823      	ldr	r3, [r4, #0]
34002e58:	f013 0007 	ands.w	r0, r3, #7
34002e5c:	d104      	bne.n	34002e68 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
34002e5e:	6093      	str	r3, [r2, #8]
}
34002e60:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
34002e62:	f04f 30ff 	mov.w	r0, #4294967295
34002e66:	e7fb      	b.n	34002e60 <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
34002e68:	f06f 0001 	mvn.w	r0, #1
34002e6c:	e7f8      	b.n	34002e60 <LL_EpochCtrl_Init+0x24>
34002e6e:	bf00      	nop
34002e70:	580fe000 	.word	0x580fe000

34002e74 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
34002e74:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
34002e76:	2401      	movs	r4, #1
34002e78:	2500      	movs	r5, #0
34002e7a:	ea54 050d 	orrs.w	r5, r4, sp
34002e7e:	4a03      	ldr	r2, [pc, #12]	@ (34002e8c <LL_ATON_DisableClock+0x18>)
34002e80:	6913      	ldr	r3, [r2, #16]
34002e82:	ea23 0304 	bic.w	r3, r3, r4
34002e86:	6113      	str	r3, [r2, #16]
#endif
}
34002e88:	bd30      	pop	{r4, r5, pc}
34002e8a:	bf00      	nop
34002e8c:	580e0000 	.word	0x580e0000

34002e90 <LL_ATON_DisableUnits_Init>:
{
34002e90:	b570      	push	{r4, r5, r6, lr}
34002e92:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
34002e94:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34002e96:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
34002e98:	428c      	cmp	r4, r1
34002e9a:	db01      	blt.n	34002ea0 <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
34002e9c:	2000      	movs	r0, #0
}
34002e9e:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
34002ea0:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34002ea4:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
34002ea8:	2b08      	cmp	r3, #8
34002eaa:	d87a      	bhi.n	34002fa2 <LL_ATON_DisableUnits_Init+0x112>
34002eac:	e8df f003 	tbb	[pc, r3]
34002eb0:	29187905 	.word	0x29187905
34002eb4:	795b4a3a 	.word	0x795b4a3a
34002eb8:	6b          	.byte	0x6b
34002eb9:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
34002eba:	2202      	movs	r2, #2
34002ebc:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002ec0:	33e5      	adds	r3, #229	@ 0xe5
34002ec2:	031b      	lsls	r3, r3, #12
34002ec4:	601a      	str	r2, [r3, #0]
34002ec6:	681a      	ldr	r2, [r3, #0]
34002ec8:	0792      	lsls	r2, r2, #30
34002eca:	d4fc      	bmi.n	34002ec6 <LL_ATON_DisableUnits_Init+0x36>
34002ecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002ed0:	601a      	str	r2, [r3, #0]
34002ed2:	681a      	ldr	r2, [r3, #0]
34002ed4:	0052      	lsls	r2, r2, #1
34002ed6:	d4fc      	bmi.n	34002ed2 <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34002ed8:	f7ff ffcc 	bl	34002e74 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
34002edc:	3401      	adds	r4, #1
34002ede:	e7db      	b.n	34002e98 <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
34002ee0:	2202      	movs	r2, #2
34002ee2:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002ee6:	33ef      	adds	r3, #239	@ 0xef
34002ee8:	031b      	lsls	r3, r3, #12
34002eea:	601a      	str	r2, [r3, #0]
34002eec:	681a      	ldr	r2, [r3, #0]
34002eee:	0792      	lsls	r2, r2, #30
34002ef0:	d4fc      	bmi.n	34002eec <LL_ATON_DisableUnits_Init+0x5c>
34002ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002ef6:	601a      	str	r2, [r3, #0]
34002ef8:	681a      	ldr	r2, [r3, #0]
34002efa:	0052      	lsls	r2, r2, #1
34002efc:	d4fc      	bmi.n	34002ef8 <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
34002efe:	300a      	adds	r0, #10
34002f00:	e7ea      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
34002f02:	2202      	movs	r2, #2
34002f04:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f08:	33f3      	adds	r3, #243	@ 0xf3
34002f0a:	031b      	lsls	r3, r3, #12
34002f0c:	601a      	str	r2, [r3, #0]
34002f0e:	681a      	ldr	r2, [r3, #0]
34002f10:	0792      	lsls	r2, r2, #30
34002f12:	d4fc      	bmi.n	34002f0e <LL_ATON_DisableUnits_Init+0x7e>
34002f14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f18:	601a      	str	r2, [r3, #0]
34002f1a:	681a      	ldr	r2, [r3, #0]
34002f1c:	0052      	lsls	r2, r2, #1
34002f1e:	d4fc      	bmi.n	34002f1a <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
34002f20:	300e      	adds	r0, #14
34002f22:	e7d9      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
34002f24:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f28:	4a1f      	ldr	r2, [pc, #124]	@ (34002fa8 <LL_ATON_DisableUnits_Init+0x118>)
34002f2a:	33f5      	adds	r3, #245	@ 0xf5
34002f2c:	031b      	lsls	r3, r3, #12
34002f2e:	601a      	str	r2, [r3, #0]
34002f30:	681a      	ldr	r2, [r3, #0]
34002f32:	0792      	lsls	r2, r2, #30
34002f34:	d4fc      	bmi.n	34002f30 <LL_ATON_DisableUnits_Init+0xa0>
34002f36:	4a1d      	ldr	r2, [pc, #116]	@ (34002fac <LL_ATON_DisableUnits_Init+0x11c>)
34002f38:	601a      	str	r2, [r3, #0]
34002f3a:	681a      	ldr	r2, [r3, #0]
34002f3c:	0052      	lsls	r2, r2, #1
34002f3e:	d4fc      	bmi.n	34002f3a <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
34002f40:	3010      	adds	r0, #16
34002f42:	e7c9      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
34002f44:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f48:	4a19      	ldr	r2, [pc, #100]	@ (34002fb0 <LL_ATON_DisableUnits_Init+0x120>)
34002f4a:	33f7      	adds	r3, #247	@ 0xf7
34002f4c:	031b      	lsls	r3, r3, #12
34002f4e:	601a      	str	r2, [r3, #0]
34002f50:	681a      	ldr	r2, [r3, #0]
34002f52:	0792      	lsls	r2, r2, #30
34002f54:	d4fc      	bmi.n	34002f50 <LL_ATON_DisableUnits_Init+0xc0>
34002f56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
34002f5a:	601a      	str	r2, [r3, #0]
34002f5c:	681a      	ldr	r2, [r3, #0]
34002f5e:	0052      	lsls	r2, r2, #1
34002f60:	d4fc      	bmi.n	34002f5c <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
34002f62:	3012      	adds	r0, #18
34002f64:	e7b8      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
34002f66:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f6a:	4a12      	ldr	r2, [pc, #72]	@ (34002fb4 <LL_ATON_DisableUnits_Init+0x124>)
34002f6c:	33fb      	adds	r3, #251	@ 0xfb
34002f6e:	031b      	lsls	r3, r3, #12
34002f70:	601a      	str	r2, [r3, #0]
34002f72:	681a      	ldr	r2, [r3, #0]
34002f74:	0792      	lsls	r2, r2, #30
34002f76:	d4fc      	bmi.n	34002f72 <LL_ATON_DisableUnits_Init+0xe2>
34002f78:	4a0f      	ldr	r2, [pc, #60]	@ (34002fb8 <LL_ATON_DisableUnits_Init+0x128>)
34002f7a:	601a      	str	r2, [r3, #0]
34002f7c:	681a      	ldr	r2, [r3, #0]
34002f7e:	0052      	lsls	r2, r2, #1
34002f80:	d4fc      	bmi.n	34002f7c <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
34002f82:	3016      	adds	r0, #22
34002f84:	e7a8      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
34002f86:	2202      	movs	r2, #2
34002f88:	4b0c      	ldr	r3, [pc, #48]	@ (34002fbc <LL_ATON_DisableUnits_Init+0x12c>)
34002f8a:	601a      	str	r2, [r3, #0]
34002f8c:	681a      	ldr	r2, [r3, #0]
34002f8e:	0792      	lsls	r2, r2, #30
34002f90:	d4fc      	bmi.n	34002f8c <LL_ATON_DisableUnits_Init+0xfc>
34002f92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f96:	601a      	str	r2, [r3, #0]
34002f98:	681a      	ldr	r2, [r3, #0]
34002f9a:	0052      	lsls	r2, r2, #1
34002f9c:	d4fc      	bmi.n	34002f98 <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34002f9e:	3018      	adds	r0, #24
34002fa0:	e79a      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
34002fa2:	f06f 0001 	mvn.w	r0, #1
34002fa6:	e77a      	b.n	34002e9e <LL_ATON_DisableUnits_Init+0xe>
34002fa8:	00881082 	.word	0x00881082
34002fac:	40881080 	.word	0x40881080
34002fb0:	08000002 	.word	0x08000002
34002fb4:	00420002 	.word	0x00420002
34002fb8:	40420000 	.word	0x40420000
34002fbc:	580fd000 	.word	0x580fd000

34002fc0 <LL_Buffer_addr_start>:
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
34002fc0:	7d02      	ldrb	r2, [r0, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34002fc2:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
34002fc4:	b102      	cbz	r2, 34002fc8 <LL_Buffer_addr_start+0x8>
      return *tmp;
34002fc6:	681b      	ldr	r3, [r3, #0]
    return buf->addr_base.p;
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34002fc8:	6880      	ldr	r0, [r0, #8]
  }
34002fca:	4418      	add	r0, r3
34002fcc:	4770      	bx	lr
	...

34002fd0 <__ll_lib_stop_transfer>:
  LL_Switch_Init_NoReset(switch_init, 1);
  LL_ATON_EnableUnits_Init(dma_units, 2);
}

static inline void __ll_lib_stop_transfer(void)
{
34002fd0:	b508      	push	{r3, lr}
  LL_Switch_Deinit(switch_init, 1);
34002fd2:	2101      	movs	r1, #1
34002fd4:	4804      	ldr	r0, [pc, #16]	@ (34002fe8 <__ll_lib_stop_transfer+0x18>)
34002fd6:	f7ff fdbf 	bl	34002b58 <LL_Switch_Deinit>
  LL_ATON_DisableUnits_Init(dma_units, 2);
}
34002fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(dma_units, 2);
34002fde:	2102      	movs	r1, #2
34002fe0:	4802      	ldr	r0, [pc, #8]	@ (34002fec <__ll_lib_stop_transfer+0x1c>)
34002fe2:	f7ff bf55 	b.w	34002e90 <LL_ATON_DisableUnits_Init>
34002fe6:	bf00      	nop
34002fe8:	340a30e4 	.word	0x340a30e4
34002fec:	340a30d4 	.word	0x340a30d4

34002ff0 <__LL_LIB_DMA_Transfer_End_EpochBlock>:
  __ll_lib_start_transfer(params);
}

static void __LL_LIB_DMA_Transfer_End_EpochBlock(const void *epoch_block)
{
  __ll_lib_stop_transfer();
34002ff0:	f7ff bfee 	b.w	34002fd0 <__ll_lib_stop_transfer>

34002ff4 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
34002ff4:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34002ff6:	4b07      	ldr	r3, [pc, #28]	@ (34003014 <__LL_ATON_RT_SetWaitMask+0x20>)
34002ff8:	681b      	ldr	r3, [r3, #0]
34002ffa:	b92b      	cbnz	r3, 34003008 <__LL_ATON_RT_SetWaitMask+0x14>
34002ffc:	2175      	movs	r1, #117	@ 0x75
34002ffe:	4b06      	ldr	r3, [pc, #24]	@ (34003018 <__LL_ATON_RT_SetWaitMask+0x24>)
34003000:	4a06      	ldr	r2, [pc, #24]	@ (3400301c <__LL_ATON_RT_SetWaitMask+0x28>)
34003002:	4807      	ldr	r0, [pc, #28]	@ (34003020 <__LL_ATON_RT_SetWaitMask+0x2c>)
34003004:	f01a fcf2 	bl	3401d9ec <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
34003008:	4b06      	ldr	r3, [pc, #24]	@ (34003024 <__LL_ATON_RT_SetWaitMask+0x30>)
3400300a:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400300c:	43c0      	mvns	r0, r0
3400300e:	4b06      	ldr	r3, [pc, #24]	@ (34003028 <__LL_ATON_RT_SetWaitMask+0x34>)
34003010:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
34003012:	bd08      	pop	{r3, pc}
34003014:	340a3f7c 	.word	0x340a3f7c
34003018:	34022ff2 	.word	0x34022ff2
3400301c:	34027ffe 	.word	0x34027ffe
34003020:	3402301c 	.word	0x3402301c
34003024:	340a3f78 	.word	0x340a3f78
34003028:	580e1000 	.word	0x580e1000

3400302c <__ll_lib_strswitch_set_dmas>:
{
3400302c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
34003030:	2400      	movs	r4, #0
{
34003032:	460d      	mov	r5, r1
34003034:	4606      	mov	r6, r0
34003036:	4617      	mov	r7, r2
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
34003038:	4621      	mov	r1, r4
3400303a:	4622      	mov	r2, r4
3400303c:	b2c3      	uxtb	r3, r0
3400303e:	9400      	str	r4, [sp, #0]
34003040:	4620      	mov	r0, r4
34003042:	f7ff fc11 	bl	34002868 <__atonn_getSrcPortID>
34003046:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 34003090 <__ll_lib_strswitch_set_dmas+0x64>
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
3400304a:	4622      	mov	r2, r4
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
3400304c:	f8c8 0000 	str.w	r0, [r8]
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
34003050:	b2eb      	uxtb	r3, r5
34003052:	4621      	mov	r1, r4
34003054:	4620      	mov	r0, r4
34003056:	9400      	str	r4, [sp, #0]
34003058:	f7ff fc9a 	bl	34002990 <__atonn_getDstPortID>
  dma_units[1].unit = dma_in_streng;
3400305c:	4b09      	ldr	r3, [pc, #36]	@ (34003084 <__ll_lib_strswitch_set_dmas+0x58>)
  dma_unit_id[1] = dma_in;
3400305e:	4a0a      	ldr	r2, [pc, #40]	@ (34003088 <__ll_lib_strswitch_set_dmas+0x5c>)
  dma_units[1].unit = dma_in_streng;
34003060:	711c      	strb	r4, [r3, #4]
  AccelUnits dma_in_streng = {STRENG, dma_in};
34003062:	80de      	strh	r6, [r3, #6]
  dma_units[0].unit = dma_out_streng;
34003064:	701c      	strb	r4, [r3, #0]
  AccelUnits dma_out_streng = {STRENG, dma_out};
34003066:	805d      	strh	r5, [r3, #2]
  uint32_t wait_mask = (0x1 << dma_out);
34003068:	2301      	movs	r3, #1
  dma_unit_id[1] = dma_in;
3400306a:	6056      	str	r6, [r2, #4]
  dma_unit_id[0] = dma_out;
3400306c:	6015      	str	r5, [r2, #0]
  params->g_wait_mask = wait_mask;
3400306e:	4a07      	ldr	r2, [pc, #28]	@ (3400308c <__ll_lib_strswitch_set_dmas+0x60>)
  uint32_t wait_mask = (0x1 << dma_out);
34003070:	40ab      	lsls	r3, r5
  params->g_wait_mask = wait_mask;
34003072:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
34003076:	f8c8 0008 	str.w	r0, [r8, #8]
  epoch_block_array->wait_mask = wait_mask;
3400307a:	60fb      	str	r3, [r7, #12]
}
3400307c:	b002      	add	sp, #8
3400307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34003082:	bf00      	nop
34003084:	340a30d4 	.word	0x340a30d4
34003088:	340a30dc 	.word	0x340a30dc
3400308c:	340a37ec 	.word	0x340a37ec
34003090:	340a30e4 	.word	0x340a30e4

34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>:
  }

  /*** AtoNN API Functions ***/

  static inline void LL_ATON_RT_Insert_LibEpochBlockArray(const LL_ATON_RT_EpochBlockItem_t *new_epoch_block_array)
  {
34003094:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34003096:	4b0d      	ldr	r3, [pc, #52]	@ (340030cc <LL_ATON_RT_Insert_LibEpochBlockArray+0x38>)
34003098:	681a      	ldr	r2, [r3, #0]
3400309a:	b92a      	cbnz	r2, 340030a8 <LL_ATON_RT_Insert_LibEpochBlockArray+0x14>
3400309c:	21b8      	movs	r1, #184	@ 0xb8
3400309e:	4b0c      	ldr	r3, [pc, #48]	@ (340030d0 <LL_ATON_RT_Insert_LibEpochBlockArray+0x3c>)
340030a0:	4a0c      	ldr	r2, [pc, #48]	@ (340030d4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)

    // only one saved context at a time allowed!
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.next_epoch_block == NULL);
340030a2:	480d      	ldr	r0, [pc, #52]	@ (340030d8 <LL_ATON_RT_Insert_LibEpochBlockArray+0x44>)
340030a4:	f01a fca2 	bl	3401d9ec <__assert_func>
340030a8:	681a      	ldr	r2, [r3, #0]
340030aa:	68d2      	ldr	r2, [r2, #12]
340030ac:	b11a      	cbz	r2, 340030b6 <LL_ATON_RT_Insert_LibEpochBlockArray+0x22>
340030ae:	21bb      	movs	r1, #187	@ 0xbb
340030b0:	4b0a      	ldr	r3, [pc, #40]	@ (340030dc <LL_ATON_RT_Insert_LibEpochBlockArray+0x48>)
340030b2:	4a08      	ldr	r2, [pc, #32]	@ (340030d4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)
340030b4:	e7f5      	b.n	340030a2 <LL_ATON_RT_Insert_LibEpochBlockArray+0xe>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.saved_current_epoch_block == NULL);
340030b6:	681a      	ldr	r2, [r3, #0]
340030b8:	6912      	ldr	r2, [r2, #16]
340030ba:	b11a      	cbz	r2, 340030c4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x30>
340030bc:	21bc      	movs	r1, #188	@ 0xbc
340030be:	4b08      	ldr	r3, [pc, #32]	@ (340030e0 <LL_ATON_RT_Insert_LibEpochBlockArray+0x4c>)
340030c0:	4a04      	ldr	r2, [pc, #16]	@ (340030d4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)
340030c2:	e7ee      	b.n	340030a2 <LL_ATON_RT_Insert_LibEpochBlockArray+0xe>

    __ll_current_aton_ip_owner->exec_state.next_epoch_block = new_epoch_block_array;
340030c4:	681b      	ldr	r3, [r3, #0]
340030c6:	60d8      	str	r0, [r3, #12]
  }
340030c8:	bd08      	pop	{r3, pc}
340030ca:	bf00      	nop
340030cc:	340a3f7c 	.word	0x340a3f7c
340030d0:	34022ff2 	.word	0x34022ff2
340030d4:	34028045 	.word	0x34028045
340030d8:	3402301c 	.word	0x3402301c
340030dc:	34023064 	.word	0x34023064
340030e0:	340230ab 	.word	0x340230ab

340030e4 <__ll_lib_prepare_inputs_epoch>:
  LL_ATON_ASSERT(ninputs <= __LL_MAX_TENSORS);
340030e4:	2918      	cmp	r1, #24
{
340030e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340030e8:	460e      	mov	r6, r1
340030ea:	4615      	mov	r5, r2
340030ec:	461c      	mov	r4, r3
  LL_ATON_ASSERT(ninputs <= __LL_MAX_TENSORS);
340030ee:	d905      	bls.n	340030fc <__ll_lib_prepare_inputs_epoch+0x18>
340030f0:	21e6      	movs	r1, #230	@ 0xe6
340030f2:	4b19      	ldr	r3, [pc, #100]	@ (34003158 <__ll_lib_prepare_inputs_epoch+0x74>)
340030f4:	4a19      	ldr	r2, [pc, #100]	@ (3400315c <__ll_lib_prepare_inputs_epoch+0x78>)
340030f6:	481a      	ldr	r0, [pc, #104]	@ (34003160 <__ll_lib_prepare_inputs_epoch+0x7c>)
340030f8:	f01a fc78 	bl	3401d9ec <__assert_func>
  memcpy(inputs_copy, inputs, sizeof(LL_LIB_TensorInfo_TypeDef) * ninputs);
340030fc:	2238      	movs	r2, #56	@ 0x38
340030fe:	4b19      	ldr	r3, [pc, #100]	@ (34003164 <__ll_lib_prepare_inputs_epoch+0x80>)
34003100:	434a      	muls	r2, r1
34003102:	4601      	mov	r1, r0
34003104:	4618      	mov	r0, r3
34003106:	f01b ff42 	bl	3401ef8e <memcpy>
  params->g_tensors = inputs_copy;
3400310a:	f1a0 07f8 	sub.w	r7, r0, #248	@ 0xf8
  params->g_num_tensors = ninputs;
3400310e:	e940 6019 	strd	r6, r0, [r0, #-100]	@ 0x64
  params->g_dma_in = *dma_in;
34003112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34003114:	463e      	mov	r6, r7
34003116:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34003118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400311a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400311c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400311e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34003120:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
34003124:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  params->g_dma_out = *dma_out;
34003128:	f107 0540 	add.w	r5, r7, #64	@ 0x40
3400312c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400312e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34003130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34003132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34003134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34003136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34003138:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
3400313c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  params->g_dst_o_src = out_start;
34003140:	9b06      	ldr	r3, [sp, #24]
  params->g_size = nbytes_or_line_size;
34003142:	9a07      	ldr	r2, [sp, #28]
  params->g_dst_o_src = out_start;
34003144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  params->g_not_continuous = 0; // signals that destination is not written linearly
34003148:	2300      	movs	r3, #0
  params->g_idx = 0;
3400314a:	e9c7 3220 	strd	r3, r2, [r7, #128]	@ 0x80
  params->g_not_continuous = 0; // signals that destination is not written linearly
3400314e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  params->g_offset_limit = 0;
34003152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
}
34003156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34003158:	340230fb 	.word	0x340230fb
3400315c:	3402806a 	.word	0x3402806a
34003160:	34023109 	.word	0x34023109
34003164:	340a38e4 	.word	0x340a38e4

34003168 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0>:
 * @param  inputs list of input tensor info structures
 * @param  ninputs number of inputs
 * @param  dst destination address
 * @param  nbytes number of bytes to copy (-1 means: derive from `inputs` structure)
 */
static void __LL_ATON_LIB_DMA_Inputs_Memcpy(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
34003168:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    /* prepare epoch */
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);

    /* configure stream switch */
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_memcpy_epoch_block_array);
3400316a:	4c0a      	ldr	r4, [pc, #40]	@ (34003194 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x2c>)
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);
3400316c:	e9cd 2300 	strd	r2, r3, [sp]
static void __LL_ATON_LIB_DMA_Inputs_Memcpy(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
34003170:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);
34003174:	4b08      	ldr	r3, [pc, #32]	@ (34003198 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x30>)
34003176:	4a09      	ldr	r2, [pc, #36]	@ (3400319c <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x34>)
34003178:	f7ff ffb4 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_memcpy_epoch_block_array);
3400317c:	4628      	mov	r0, r5
3400317e:	4622      	mov	r2, r4
34003180:	4631      	mov	r1, r6
34003182:	f7ff ff53 	bl	3400302c <__ll_lib_strswitch_set_dmas>

    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_memcpy_epoch_block_array);
34003186:	4620      	mov	r0, r4
  }
  else
  {
    /* proceed to next epoch block */
  }
}
34003188:	b002      	add	sp, #8
3400318a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_memcpy_epoch_block_array);
3400318e:	f7ff bf81 	b.w	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
34003192:	bf00      	nop
34003194:	340a3084 	.word	0x340a3084
34003198:	34028088 	.word	0x34028088
3400319c:	340280c8 	.word	0x340280c8

340031a0 <__ll_lib_start_transfer.constprop.0>:
static inline void __ll_lib_start_transfer(__ll_lib_params_t *params)
340031a0:	b538      	push	{r3, r4, r5, lr}
  LL_Streng_TensorInit(dma_unit_id[1], &params->g_dma_in, 1);
340031a2:	4d0b      	ldr	r5, [pc, #44]	@ (340031d0 <__ll_lib_start_transfer.constprop.0+0x30>)
340031a4:	4c0b      	ldr	r4, [pc, #44]	@ (340031d4 <__ll_lib_start_transfer.constprop.0+0x34>)
340031a6:	4629      	mov	r1, r5
340031a8:	2201      	movs	r2, #1
340031aa:	6860      	ldr	r0, [r4, #4]
340031ac:	f7ff fcfa 	bl	34002ba4 <LL_Streng_TensorInit>
  LL_Streng_TensorInit(dma_unit_id[0], &params->g_dma_out, 1);
340031b0:	f105 0140 	add.w	r1, r5, #64	@ 0x40
340031b4:	2201      	movs	r2, #1
340031b6:	6820      	ldr	r0, [r4, #0]
340031b8:	f7ff fcf4 	bl	34002ba4 <LL_Streng_TensorInit>
  LL_Switch_Init_NoReset(switch_init, 1);
340031bc:	2101      	movs	r1, #1
340031be:	4806      	ldr	r0, [pc, #24]	@ (340031d8 <__ll_lib_start_transfer.constprop.0+0x38>)
340031c0:	f7ff fc90 	bl	34002ae4 <LL_Switch_Init_NoReset>
}
340031c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LL_ATON_EnableUnits_Init(dma_units, 2);
340031c8:	2102      	movs	r1, #2
340031ca:	4804      	ldr	r0, [pc, #16]	@ (340031dc <__ll_lib_start_transfer.constprop.0+0x3c>)
340031cc:	f7ff bb04 	b.w	340027d8 <LL_ATON_EnableUnits_Init>
340031d0:	340a37ec 	.word	0x340a37ec
340031d4:	340a30dc 	.word	0x340a30dc
340031d8:	340a30e4 	.word	0x340a30e4
340031dc:	340a30d4 	.word	0x340a30d4

340031e0 <__LL_LIB_DMA_Transfer_Start_EpochBlock>:
  __ll_lib_start_transfer(params);
340031e0:	f7ff bfde 	b.w	340031a0 <__ll_lib_start_transfer.constprop.0>

340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>:
  }

  static inline void LL_ATON_RT_DecCurrEpochBlock(uint32_t dec)
  {
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340031e4:	4a12      	ldr	r2, [pc, #72]	@ (34003230 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x4c>)
  static inline void LL_ATON_RT_DecCurrEpochBlock(uint32_t dec)
340031e6:	b510      	push	{r4, lr}
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340031e8:	6813      	ldr	r3, [r2, #0]
340031ea:	b92b      	cbnz	r3, 340031f8 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x14>
340031ec:	21d2      	movs	r1, #210	@ 0xd2
340031ee:	4b11      	ldr	r3, [pc, #68]	@ (34003234 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x50>)
340031f0:	4a11      	ldr	r2, [pc, #68]	@ (34003238 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x54>)
    LL_ATON_ASSERT(_first_epoch_block <= _current_epoch_block); // should never happen
340031f2:	4812      	ldr	r0, [pc, #72]	@ (3400323c <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x58>)
340031f4:	f01a fbfa 	bl	3401d9ec <__assert_func>

    uint32_t current_index = __LL_ATON_RT_GetCurrEpochBlockIndex(__ll_current_aton_ip_owner);
340031f8:	6811      	ldr	r1, [r2, #0]
    const LL_ATON_RT_EpochBlockItem_t *_current_epoch_block = nn_instance->exec_state.current_epoch_block;
340031fa:	684b      	ldr	r3, [r1, #4]
    const LL_ATON_RT_EpochBlockItem_t *_first_epoch_block = nn_instance->exec_state.first_epoch_block;
340031fc:	6889      	ldr	r1, [r1, #8]
    LL_ATON_ASSERT(_first_epoch_block <= _current_epoch_block); // should never happen
340031fe:	428b      	cmp	r3, r1
34003200:	d203      	bcs.n	3400320a <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x26>
34003202:	2160      	movs	r1, #96	@ 0x60
34003204:	4b0e      	ldr	r3, [pc, #56]	@ (34003240 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x5c>)
34003206:	4a0f      	ldr	r2, [pc, #60]	@ (34003244 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x60>)
34003208:	e7f3      	b.n	340031f2 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0xe>
    return (_current_epoch_block - _first_epoch_block);
3400320a:	1a5b      	subs	r3, r3, r1
3400320c:	4c0e      	ldr	r4, [pc, #56]	@ (34003248 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x64>)
    LL_ATON_ASSERT((current_index + 1) >= dec); // should never happen
    int32_t new_index = current_index - dec;
    __LL_ATON_RT_SetCurrentEpochBlock(new_index, __ll_current_aton_ip_owner);
3400320e:	6811      	ldr	r1, [r2, #0]
    return (_current_epoch_block - _first_epoch_block);
34003210:	109a      	asrs	r2, r3, #2
34003212:	4362      	muls	r2, r4
    LL_ATON_ASSERT(index < (int32_t)(nn_instance->exec_state.nr_of_epoch_blocks - 1));
34003214:	6a48      	ldr	r0, [r1, #36]	@ 0x24
    int32_t new_index = current_index - dec;
34003216:	3a01      	subs	r2, #1
    LL_ATON_ASSERT(index < (int32_t)(nn_instance->exec_state.nr_of_epoch_blocks - 1));
34003218:	3801      	subs	r0, #1
3400321a:	4282      	cmp	r2, r0
3400321c:	db03      	blt.n	34003226 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x42>
3400321e:	216a      	movs	r1, #106	@ 0x6a
34003220:	4b0a      	ldr	r3, [pc, #40]	@ (3400324c <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x68>)
34003222:	4a0b      	ldr	r2, [pc, #44]	@ (34003250 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x6c>)
34003224:	e7e5      	b.n	340031f2 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0xe>
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
34003226:	688a      	ldr	r2, [r1, #8]
34003228:	3b14      	subs	r3, #20
3400322a:	4413      	add	r3, r2
3400322c:	604b      	str	r3, [r1, #4]
  }
3400322e:	bd10      	pop	{r4, pc}
34003230:	340a3f7c 	.word	0x340a3f7c
34003234:	34022ff2 	.word	0x34022ff2
34003238:	34027fe1 	.word	0x34027fe1
3400323c:	3402301c 	.word	0x3402301c
34003240:	3402314d 	.word	0x3402314d
34003244:	34027fbd 	.word	0x34027fbd
34003248:	cccccccd 	.word	0xcccccccd
3400324c:	34023178 	.word	0x34023178
34003250:	34027f9b 	.word	0x34027f9b

34003254 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock>:
{
34003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  previous_value = eb->wait_mask;
34003256:	68c4      	ldr	r4, [r0, #12]
{
34003258:	4603      	mov	r3, r0
  eb->wait_mask = wait_mask;
3400325a:	2000      	movs	r0, #0
3400325c:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400325e:	f7ff fec9 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
34003262:	b10c      	cbz	r4, 34003268 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
34003264:	f7ff feb4 	bl	34002fd0 <__ll_lib_stop_transfer>
  LL_LIB_TensorInfo_TypeDef *in = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx;
34003268:	2238      	movs	r2, #56	@ 0x38
3400326a:	4b21      	ldr	r3, [pc, #132]	@ (340032f0 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x9c>)
3400326c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
34003270:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
34003274:	4342      	muls	r2, r0
34003276:	188e      	adds	r6, r1, r2
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003278:	f896 4027 	ldrb.w	r4, [r6, #39]	@ 0x27
  if (params->g_idx < params->g_num_tensors)
3400327c:	f8d3 7094 	ldr.w	r7, [r3, #148]	@ 0x94
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003280:	6af6      	ldr	r6, [r6, #44]	@ 0x2c
  params->g_idx++;
34003282:	3001      	adds	r0, #1
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003284:	3c01      	subs	r4, #1
  if (params->g_idx < params->g_num_tensors)
34003286:	42b8      	cmp	r0, r7
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003288:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
3400328c:	ea4f 0584 	mov.w	r5, r4, lsl #2
  params->g_idx++;
34003290:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  if (params->g_idx < params->g_num_tensors)
34003294:	d22a      	bcs.n	340032ec <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x98>
    in = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx;
34003296:	3238      	adds	r2, #56	@ 0x38
34003298:	4411      	add	r1, r2
    int in_batch = in->batch;
3400329a:	6988      	ldr	r0, [r1, #24]
    int in_fheight = in->shape[(in_ndims - 4) + TDIM_FHEIGHT];
3400329c:	f8d1 c02c 	ldr.w	ip, [r1, #44]	@ 0x2c
    int in_batch = in->batch;
340032a0:	4607      	mov	r7, r0
    int nbits = in->nbits;
340032a2:	f891 2028 	ldrb.w	r2, [r1, #40]	@ 0x28
    int in_fheight = in->shape[(in_ndims - 4) + TDIM_FHEIGHT];
340032a6:	4465      	add	r5, ip
    int in_fwidth = in->shape[(in_ndims - 4) + TDIM_FWIDTH];
340032a8:	e955 1e02 	ldrd	r1, lr, [r5, #-8]
    int nbytes = (nbits + 7) >> 3;
340032ac:	3207      	adds	r2, #7
    params->g_dst_o_src += in_nchannels_old * nbytes;
340032ae:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
    int nbytes = (nbits + 7) >> 3;
340032b2:	10d2      	asrs	r2, r2, #3
    params->g_dst_o_src += in_nchannels_old * nbytes;
340032b4:	fb02 5506 	mla	r5, r2, r6, r5
    int in_nchannels = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
340032b8:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
340032bc:	2a04      	cmp	r2, #4
    params->g_dst_o_src += in_nchannels_old * nbytes;
340032be:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
340032c2:	ea4f 0540 	mov.w	r5, r0, lsl #1
340032c6:	bf08      	it	eq
340032c8:	4628      	moveq	r0, r5
    params->g_dma_out.frame_loop_cnt = in_nchannels / in_batch;                 // this must be updated on all inputs
340032ca:	fb94 f4f7 	sdiv	r4, r4, r7
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
340032ce:	fb0e f101 	mul.w	r1, lr, r1
340032d2:	4379      	muls	r1, r7
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
340032d4:	6618      	str	r0, [r3, #96]	@ 0x60
    params->g_dma_out.frame_offset = in_batch * nbytes;                         // this must be updated on all inputs
340032d6:	fb07 f002 	mul.w	r0, r7, r2
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
340032da:	434a      	muls	r2, r1
    params->g_dma_out.frame_tot_cnt = in_nchannels / in_batch;                  // this must be updated on all inputs
340032dc:	e9c3 441d 	strd	r4, r4, [r3, #116]	@ 0x74
    params->g_dma_out.frame_offset = in_batch * nbytes;                         // this must be updated on all inputs
340032e0:	6698      	str	r0, [r3, #104]	@ 0x68
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
340032e2:	671a      	str	r2, [r3, #112]	@ 0x70
}
340032e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LL_ATON_RT_DecCurrEpochBlock(1);
340032e8:	f7ff bf7c 	b.w	340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
}
340032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
340032ee:	bf00      	nop
340032f0:	340a37ec 	.word	0x340a37ec

340032f4 <__LL_LIB_Inputs_Memcpy_End_EpochBlock>:
{
340032f4:	b510      	push	{r4, lr}
340032f6:	4603      	mov	r3, r0
  previous_value = eb->wait_mask;
340032f8:	68c4      	ldr	r4, [r0, #12]
  eb->wait_mask = wait_mask;
340032fa:	2000      	movs	r0, #0
340032fc:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340032fe:	f7ff fe79 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
34003302:	b10c      	cbz	r4, 34003308 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
34003304:	f7ff fe64 	bl	34002fd0 <__ll_lib_stop_transfer>
  if (params->g_size < 0)
34003308:	4b0e      	ldr	r3, [pc, #56]	@ (34003344 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x50>)
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
3400330a:	e9d3 2020 	ldrd	r2, r0, [r3, #128]	@ 0x80
  if (params->g_size < 0)
3400330e:	2800      	cmp	r0, #0
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003310:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
  if (params->g_size < 0)
34003314:	da07      	bge.n	34003326 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x32>
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003316:	2438      	movs	r4, #56	@ 0x38
34003318:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
3400331c:	fb04 0002 	mla	r0, r4, r2, r0
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
34003320:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
34003324:	1a20      	subs	r0, r4, r0
  params->g_idx++;
34003326:	3201      	adds	r2, #1
    params->g_dst_o_src += (params->g_size);
34003328:	4401      	add	r1, r0
3400332a:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  params->g_idx++;
3400332e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  if (params->g_idx < params->g_num_tensors)
34003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34003336:	429a      	cmp	r2, r3
34003338:	d203      	bcs.n	34003342 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x4e>
}
3400333a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LL_ATON_RT_DecCurrEpochBlock(1);
3400333e:	f7ff bf51 	b.w	340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
}
34003342:	bd10      	pop	{r4, pc}
34003344:	340a37ec 	.word	0x340a37ec

34003348 <__LL_LIB_Concat_Case3_End_EpochBlock>:
{
34003348:	b510      	push	{r4, lr}
3400334a:	4603      	mov	r3, r0
  previous_value = eb->wait_mask;
3400334c:	68c4      	ldr	r4, [r0, #12]
  eb->wait_mask = wait_mask;
3400334e:	2000      	movs	r0, #0
34003350:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
34003352:	f7ff fe4f 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
34003356:	b10c      	cbz	r4, 3400335c <__LL_LIB_Concat_Case3_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
34003358:	f7ff fe3a 	bl	34002fd0 <__ll_lib_stop_transfer>
  params->g_idx++;
3400335c:	4923      	ldr	r1, [pc, #140]	@ (340033ec <__LL_LIB_Concat_Case3_End_EpochBlock+0xa4>)
3400335e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
  if (params->g_idx < params->special.concat_case3.in_fheight)
34003362:	f8d1 20a4 	ldr.w	r2, [r1, #164]	@ 0xa4
  params->g_idx++;
34003366:	3301      	adds	r3, #1
  if (params->g_idx < params->special.concat_case3.in_fheight)
34003368:	4293      	cmp	r3, r2
  params->g_idx++;
3400336a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
  if (params->g_idx < params->special.concat_case3.in_fheight)
3400336e:	d211      	bcs.n	34003394 <__LL_LIB_Concat_Case3_End_EpochBlock+0x4c>
    params->g_dst_o_src += params->special.concat_case3.out_line_size;
34003370:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
34003374:	f8d1 20ac 	ldr.w	r2, [r1, #172]	@ 0xac
34003378:	4413      	add	r3, r2
3400337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    params->special.concat_case3.in_curr += params->g_size;
3400337e:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
34003382:	f8d1 30b0 	ldr.w	r3, [r1, #176]	@ 0xb0
34003386:	4413      	add	r3, r2
34003388:	f8c1 30b0 	str.w	r3, [r1, #176]	@ 0xb0
}
3400338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LL_ATON_RT_DecCurrEpochBlock(1);
34003390:	f7ff bf28 	b.w	340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
    params->special.concat_case3.outer_idx++;
34003394:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
34003398:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
    params->special.concat_case3.outer_idx++;
3400339c:	3301      	adds	r3, #1
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
3400339e:	4293      	cmp	r3, r2
    params->special.concat_case3.outer_idx++;
340033a0:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
340033a4:	d221      	bcs.n	340033ea <__LL_LIB_Concat_Case3_End_EpochBlock+0xa2>
      int in_ndims = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->special.concat_case3.outer_idx].ndims;
340033a6:	2238      	movs	r2, #56	@ 0x38
340033a8:	f8d1 0098 	ldr.w	r0, [r1, #152]	@ 0x98
340033ac:	fb02 0003 	mla	r0, r2, r3, r0
                                  .shape[(in_ndims - 4) + TDIM_NCHANNELS];
340033b0:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
340033b4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
340033b6:	3a01      	subs	r2, #1
                         .shape[(in_ndims - 4) + TDIM_FWIDTH];
340033b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
          pix_size * ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->special.concat_case3.outer_idx]
340033bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
340033c0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
340033c4:	4353      	muls	r3, r2
340033c6:	f8d1 20a8 	ldr.w	r2, [r1, #168]	@ 0xa8
340033ca:	4353      	muls	r3, r2
      params->g_dst_o_src += params->g_size;
340033cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      params->g_size =
340033d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      params->g_dst_o_src += params->g_size;
340033d4:	441a      	add	r2, r3
340033d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      params->special.concat_case3.in_curr = LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) +
340033da:	f7ff fdf1 	bl	34002fc0 <LL_Buffer_addr_start>
      params->g_idx = 0;
340033de:	2300      	movs	r3, #0
      params->special.concat_case3.in_curr = LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) +
340033e0:	f8c1 00b0 	str.w	r0, [r1, #176]	@ 0xb0
      params->g_idx = 0;
340033e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
340033e8:	e7d0      	b.n	3400338c <__LL_LIB_Concat_Case3_End_EpochBlock+0x44>
}
340033ea:	bd10      	pop	{r4, pc}
340033ec:	340a37ec 	.word	0x340a37ec

340033f0 <__ll_lib_memcpy_prolog>:
  if (n < __LL_DMA_MIN_BUFF_LEN)
340033f0:	2a27      	cmp	r2, #39	@ 0x27
{
340033f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340033f4:	4613      	mov	r3, r2
  int prolog_len = (n % 3);
340033f6:	bf81      	itttt	hi
340033f8:	2303      	movhi	r3, #3
340033fa:	fbb2 f3f3 	udivhi	r3, r2, r3
340033fe:	eb03 0343 	addhi.w	r3, r3, r3, lsl #1
34003402:	1ad3      	subhi	r3, r2, r3
34003404:	2b00      	cmp	r3, #0
34003406:	f103 0401 	add.w	r4, r3, #1
3400340a:	bfb8      	it	lt
3400340c:	2401      	movlt	r4, #1
{
3400340e:	4605      	mov	r5, r0
  uint8_t *_dst_orig = *dst;
34003410:	6800      	ldr	r0, [r0, #0]
  for (i = 0; i < prolog_len; i++)
34003412:	3c01      	subs	r4, #1
34003414:	d106      	bne.n	34003424 <__ll_lib_memcpy_prolog+0x34>
  n -= prolog_len;
34003416:	1ad4      	subs	r4, r2, r3
  if (prolog_len > 0)
34003418:	b113      	cbz	r3, 34003420 <__ll_lib_memcpy_prolog+0x30>
  void LL_ATON_Cache_MCU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_clean_invalidate_range(virtual_addr, virtual_addr + size);
3400341a:	18c1      	adds	r1, r0, r3
3400341c:	f7fe fe56 	bl	340020cc <mcu_cache_clean_invalidate_range>
}
34003420:	4620      	mov	r0, r4
34003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    **_dst = **_src;
34003424:	680f      	ldr	r7, [r1, #0]
34003426:	682e      	ldr	r6, [r5, #0]
34003428:	783f      	ldrb	r7, [r7, #0]
3400342a:	7037      	strb	r7, [r6, #0]
    (*_dst)++;
3400342c:	682e      	ldr	r6, [r5, #0]
3400342e:	3601      	adds	r6, #1
34003430:	602e      	str	r6, [r5, #0]
    (*_src)++;
34003432:	680e      	ldr	r6, [r1, #0]
34003434:	3601      	adds	r6, #1
34003436:	600e      	str	r6, [r1, #0]
  for (i = 0; i < prolog_len; i++)
34003438:	e7eb      	b.n	34003412 <__ll_lib_memcpy_prolog+0x22>
	...

3400343c <__ll_lib_inputs_memcpy_start>:
{
3400343c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
3400343e:	4c1e      	ldr	r4, [pc, #120]	@ (340034b8 <__ll_lib_inputs_memcpy_start+0x7c>)
{
34003440:	4605      	mov	r5, r0
  if (params->g_size < 0)
34003442:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
34003446:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
  if (params->g_size < 0)
3400344a:	2800      	cmp	r0, #0
{
3400344c:	9101      	str	r1, [sp, #4]
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
3400344e:	9303      	str	r3, [sp, #12]
  if (params->g_size < 0)
34003450:	da09      	bge.n	34003466 <__ll_lib_inputs_memcpy_start+0x2a>
    n = LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003452:	2138      	movs	r1, #56	@ 0x38
34003454:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
34003458:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3400345c:	fb01 3302 	mla	r3, r1, r2, r3
34003460:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
34003464:	1a10      	subs	r0, r2, r0
  if (params->g_not_continuous == 0)
34003466:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
3400346a:	b923      	cbnz	r3, 34003476 <__ll_lib_inputs_memcpy_start+0x3a>
    n = __ll_lib_memcpy_prolog((void **)&_dst, (void **)&_src, n);
3400346c:	4602      	mov	r2, r0
3400346e:	a901      	add	r1, sp, #4
34003470:	a803      	add	r0, sp, #12
34003472:	f7ff ffbd 	bl	340033f0 <__ll_lib_memcpy_prolog>
  if (n > 0)
34003476:	b1d0      	cbz	r0, 340034ae <__ll_lib_inputs_memcpy_start+0x72>
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
34003478:	2638      	movs	r6, #56	@ 0x38
    params->g_dma_in.offset_start = 0;
3400347a:	2200      	movs	r2, #0
    params->g_dma_in.addr_base.p = _src;
3400347c:	9b01      	ldr	r3, [sp, #4]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
3400347e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
    params->g_dma_in.addr_base.p = _src;
34003482:	6063      	str	r3, [r4, #4]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
34003484:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
    params->g_dma_in.offset_end = n; // not used for batched output version g_not_continuous == 1
34003488:	e9c4 2002 	strd	r2, r0, [r4, #8]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
3400348c:	fb06 3301 	mla	r3, r6, r1, r3
34003490:	691b      	ldr	r3, [r3, #16]
    params->g_dma_out.offset_end = n; // not used for batched input version g_not_continuous == 1
34003492:	64e0      	str	r0, [r4, #76]	@ 0x4c
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
34003494:	6123      	str	r3, [r4, #16]
    __ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, params->g_wait_mask);
34003496:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
    params->g_dma_out.addr_base.p = _dst;
3400349a:	9b03      	ldr	r3, [sp, #12]
    params->g_dma_out.offset_start = 0;
3400349c:	e9c4 3211 	strd	r3, r2, [r4, #68]	@ 0x44
  eb->wait_mask = wait_mask;
340034a0:	60e8      	str	r0, [r5, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340034a2:	f7ff fda7 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
    __ll_lib_start_transfer(params);
340034a6:	f7ff fe7b 	bl	340031a0 <__ll_lib_start_transfer.constprop.0>
}
340034aa:	b004      	add	sp, #16
340034ac:	bd70      	pop	{r4, r5, r6, pc}
  eb->wait_mask = wait_mask;
340034ae:	60e8      	str	r0, [r5, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340034b0:	f7ff fda0 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
}
340034b4:	e7f9      	b.n	340034aa <__ll_lib_inputs_memcpy_start+0x6e>
340034b6:	bf00      	nop
340034b8:	340a37ec 	.word	0x340a37ec

340034bc <__LL_LIB_Concat_Case3_Start_EpochBlock>:
{
340034bc:	b508      	push	{r3, lr}
  LL_ATON_ASSERT((params->special.concat_case3.outer_idx < params->g_num_tensors) &&
340034be:	4b0d      	ldr	r3, [pc, #52]	@ (340034f4 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x38>)
340034c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
340034c4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
340034c8:	4291      	cmp	r1, r2
340034ca:	d205      	bcs.n	340034d8 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x1c>
340034cc:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
340034d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
340034d4:	4291      	cmp	r1, r2
340034d6:	d306      	bcc.n	340034e6 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x2a>
340034d8:	f240 1193 	movw	r1, #403	@ 0x193
340034dc:	4b06      	ldr	r3, [pc, #24]	@ (340034f8 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x3c>)
340034de:	4a07      	ldr	r2, [pc, #28]	@ (340034fc <__LL_LIB_Concat_Case3_Start_EpochBlock+0x40>)
340034e0:	4807      	ldr	r0, [pc, #28]	@ (34003500 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x44>)
340034e2:	f01a fa83 	bl	3401d9ec <__assert_func>
  __ll_lib_inputs_memcpy_start(epoch_block, (uint8_t *)params->special.concat_case3.in_curr);
340034e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
}
340034ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, (uint8_t *)params->special.concat_case3.in_curr);
340034ee:	f7ff bfa5 	b.w	3400343c <__ll_lib_inputs_memcpy_start>
340034f2:	bf00      	nop
340034f4:	340a37ec 	.word	0x340a37ec
340034f8:	340231ba 	.word	0x340231ba
340034fc:	34027f74 	.word	0x34027f74
34003500:	34023109 	.word	0x34023109

34003504 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock>:
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003504:	4b0e      	ldr	r3, [pc, #56]	@ (34003540 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x3c>)
{
34003506:	b510      	push	{r4, lr}
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003508:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400350c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
{
34003510:	4604      	mov	r4, r0
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003512:	428a      	cmp	r2, r1
34003514:	d306      	bcc.n	34003524 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x20>
34003516:	f240 11cb 	movw	r1, #459	@ 0x1cb
3400351a:	4b0a      	ldr	r3, [pc, #40]	@ (34003544 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x40>)
3400351c:	4a0a      	ldr	r2, [pc, #40]	@ (34003548 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x44>)
3400351e:	480b      	ldr	r0, [pc, #44]	@ (3400354c <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x48>)
34003520:	f01a fa64 	bl	3401d9ec <__assert_func>
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003524:	2038      	movs	r0, #56	@ 0x38
34003526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400352a:	fb00 3002 	mla	r0, r0, r2, r3
3400352e:	f7ff fd47 	bl	34002fc0 <LL_Buffer_addr_start>
34003532:	4601      	mov	r1, r0
  __ll_lib_inputs_memcpy_start(epoch_block, src);
34003534:	4620      	mov	r0, r4
}
34003536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, src);
3400353a:	f7ff bf7f 	b.w	3400343c <__ll_lib_inputs_memcpy_start>
3400353e:	bf00      	nop
34003540:	340a37ec 	.word	0x340a37ec
34003544:	34023238 	.word	0x34023238
34003548:	34027f4c 	.word	0x34027f4c
3400354c:	34023109 	.word	0x34023109

34003550 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock>:
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003550:	4b0f      	ldr	r3, [pc, #60]	@ (34003590 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x40>)
{
34003552:	b510      	push	{r4, lr}
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003554:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003558:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
{
3400355c:	4604      	mov	r4, r0
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
3400355e:	428a      	cmp	r2, r1
34003560:	d306      	bcc.n	34003570 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x20>
34003562:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
34003566:	4b0b      	ldr	r3, [pc, #44]	@ (34003594 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x44>)
34003568:	4a0b      	ldr	r2, [pc, #44]	@ (34003598 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x48>)
3400356a:	480c      	ldr	r0, [pc, #48]	@ (3400359c <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x4c>)
3400356c:	f01a fa3e 	bl	3401d9ec <__assert_func>
  params->g_not_continuous =
34003570:	2101      	movs	r1, #1
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003572:	2038      	movs	r0, #56	@ 0x38
  params->g_not_continuous =
34003574:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400357c:	fb00 3002 	mla	r0, r0, r2, r3
34003580:	f7ff fd1e 	bl	34002fc0 <LL_Buffer_addr_start>
34003584:	4601      	mov	r1, r0
  __ll_lib_inputs_memcpy_start(epoch_block, src);
34003586:	4620      	mov	r0, r4
}
34003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, src);
3400358c:	f7ff bf56 	b.w	3400343c <__ll_lib_inputs_memcpy_start>
34003590:	340a37ec 	.word	0x340a37ec
34003594:	34023238 	.word	0x34023238
34003598:	34027f1c 	.word	0x34027f1c
3400359c:	34023109 	.word	0x34023109

340035a0 <__ll_lib_error>:
{
340035a0:	b410      	push	{r4}
340035a2:	460c      	mov	r4, r1
340035a4:	3801      	subs	r0, #1
340035a6:	280f      	cmp	r0, #15
340035a8:	bf98      	it	ls
340035aa:	4b06      	ldrls	r3, [pc, #24]	@ (340035c4 <__ll_lib_error+0x24>)
340035ac:	4611      	mov	r1, r2
340035ae:	bf98      	it	ls
340035b0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
340035b4:	4622      	mov	r2, r4
  switch (err_code)
340035b6:	bf88      	it	hi
340035b8:	4b03      	ldrhi	r3, [pc, #12]	@ (340035c8 <__ll_lib_error+0x28>)
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
340035ba:	4804      	ldr	r0, [pc, #16]	@ (340035cc <__ll_lib_error+0x2c>)
}
340035bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
340035c0:	f01b b8c0 	b.w	3401e744 <iprintf>
340035c4:	34027edc 	.word	0x34027edc
340035c8:	3402325e 	.word	0x3402325e
340035cc:	34023266 	.word	0x34023266

340035d0 <LL_ATON_LIB_DMA_RowToImage>:
 *
 */
int LL_ATON_LIB_DMA_RowToImage(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
                               const LL_LIB_TensorInfo_TypeDef *output, unsigned blocksize_h, unsigned blocksize_w,
                               unsigned stride_h, unsigned stride_w, int dma_in, int dma_out)
{
340035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340035d4:	4690      	mov	r8, r2
340035d6:	4604      	mov	r4, r0
340035d8:	469a      	mov	sl, r3
  int in_batches = inputs[0].shape[TDIM_NKERNELS];
340035da:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
340035dc:	b0a7      	sub	sp, #156	@ 0x9c
  int in_fwidth = inputs[0].shape[TDIM_FWIDTH];
  int in_fheight = inputs[0].shape[TDIM_FHEIGHT];
340035de:	e9d3 2701 	ldrd	r2, r7, [r3, #4]
340035e2:	9202      	str	r2, [sp, #8]
  int in_nchannels = inputs[0].shape[TDIM_NCHANNELS];
  int out_batches = output->shape[TDIM_NKERNELS];
340035e4:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
  int in_batches = inputs[0].shape[TDIM_NKERNELS];
340035e8:	681e      	ldr	r6, [r3, #0]
  int in_nchannels = inputs[0].shape[TDIM_NCHANNELS];
340035ea:	68d8      	ldr	r0, [r3, #12]
  int out_batches = output->shape[TDIM_NKERNELS];
340035ec:	6813      	ldr	r3, [r2, #0]
  int out_fwidth = output->shape[TDIM_FWIDTH];
  int out_fheight = output->shape[TDIM_FHEIGHT];
  int out_nchannels = output->shape[TDIM_NCHANNELS];
340035ee:	f8d2 900c 	ldr.w	r9, [r2, #12]
  int out_batches = output->shape[TDIM_NKERNELS];
340035f2:	9304      	str	r3, [sp, #16]
  int out_fwidth = output->shape[TDIM_FWIDTH];
340035f4:	6893      	ldr	r3, [r2, #8]
  int nbits = inputs[0].nbits;
340035f6:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
  int out_fwidth = output->shape[TDIM_FWIDTH];
340035fa:	9303      	str	r3, [sp, #12]
  int out_fheight = output->shape[TDIM_FHEIGHT];
340035fc:	6853      	ldr	r3, [r2, #4]
  unsigned nbits_unsigned = inputs[0].Qunsigned;
340035fe:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
  int nbytes = (nbits + 7) >> 3;
34003602:	f10c 0507 	add.w	r5, ip, #7
  unsigned nbits_unsigned = inputs[0].Qunsigned;
34003606:	9205      	str	r2, [sp, #20]
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_batches * nbytes;
34003608:	9a02      	ldr	r2, [sp, #8]
  int nbytes = (nbits + 7) >> 3;
3400360a:	10ed      	asrs	r5, r5, #3
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_batches * nbytes;
3400360c:	437a      	muls	r2, r7
3400360e:	4342      	muls	r2, r0
34003610:	4372      	muls	r2, r6
  /*
LL_ATON_PRINTF("in: b=%d w=%d g=%d c=%d\n",in_batches,in_fwidth,in_fheight,in_nchannels);
LL_ATON_PRINTF("out: b=%d w=%d g=%d c=%d ndims=%d\n",out_batches,out_fwidth,out_fheight,out_nchannels,output->ndims);
   */

  if (ninputs != 1)
34003612:	2901      	cmp	r1, #1
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_batches * nbytes;
34003614:	fb05 fb02 	mul.w	fp, r5, r2
  if (ninputs != 1)
34003618:	d00a      	beq.n	34003630 <LL_ATON_LIB_DMA_RowToImage+0x60>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
3400361a:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
3400361e:	2001      	movs	r0, #1
34003620:	4a62      	ldr	r2, [pc, #392]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)

  if (nbits != output->nbits)
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003622:	f7ff ffbd 	bl	340035a0 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
34003626:	f06f 0001 	mvn.w	r0, #1

  /* start epoch block sequence */
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_ri2ir_epoch_block_array);

  return LL_ATON_OK;
}
3400362a:	b027      	add	sp, #156	@ 0x9c
3400362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (nbits != output->nbits)
34003630:	f898 2028 	ldrb.w	r2, [r8, #40]	@ 0x28
34003634:	4562      	cmp	r2, ip
34003636:	d004      	beq.n	34003642 <LL_ATON_LIB_DMA_RowToImage+0x72>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003638:	f240 61e3 	movw	r1, #1763	@ 0x6e3
3400363c:	2006      	movs	r0, #6
3400363e:	4a5b      	ldr	r2, [pc, #364]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
34003640:	e7ef      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  if ((output->ndims < 1) || (output->ndims > 4))
34003642:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
34003646:	3a01      	subs	r2, #1
34003648:	2a03      	cmp	r2, #3
3400364a:	d904      	bls.n	34003656 <LL_ATON_LIB_DMA_RowToImage+0x86>
    __LL_LIB_ERROR(_ERR_SHAPE_OUT, LL_ATON_INVALID_PARAM);
3400364c:	f240 61e6 	movw	r1, #1766	@ 0x6e6
34003650:	200b      	movs	r0, #11
34003652:	4a56      	ldr	r2, [pc, #344]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
34003654:	e7e5      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  if ((inputs[0].ndims < 1) || (inputs[0].ndims > 4))
34003656:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
3400365a:	3a01      	subs	r2, #1
3400365c:	2a03      	cmp	r2, #3
3400365e:	d904      	bls.n	3400366a <LL_ATON_LIB_DMA_RowToImage+0x9a>
    __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003660:	f240 61e9 	movw	r1, #1769	@ 0x6e9
34003664:	200a      	movs	r0, #10
34003666:	4a51      	ldr	r2, [pc, #324]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
34003668:	e7db      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  if (in_batches != out_batches || in_nchannels != out_nchannels * (blocksize_h * blocksize_w) ||
3400366a:	9a04      	ldr	r2, [sp, #16]
3400366c:	4296      	cmp	r6, r2
3400366e:	d124      	bne.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
34003670:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
34003672:	fb02 f20a 	mul.w	r2, r2, sl
34003676:	fb09 f202 	mul.w	r2, r9, r2
3400367a:	4290      	cmp	r0, r2
3400367c:	d11d      	bne.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
3400367e:	9a03      	ldr	r2, [sp, #12]
34003680:	9930      	ldr	r1, [sp, #192]	@ 0xc0
34003682:	428a      	cmp	r2, r1
34003684:	d319      	bcc.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
      (out_fwidth < blocksize_w) || (out_fheight < blocksize_h) || ((out_fwidth - blocksize_w) % stride_w) ||
34003686:	4553      	cmp	r3, sl
34003688:	d317      	bcc.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
3400368a:	1a52      	subs	r2, r2, r1
3400368c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
3400368e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
34003690:	fbb2 f1f1 	udiv	r1, r2, r1
34003694:	fb00 2211 	mls	r2, r0, r1, r2
34003698:	b97a      	cbnz	r2, 340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
      ((out_fheight - blocksize_h) % stride_h) || (in_fwidth != (((out_fwidth - blocksize_w) / stride_w) + 1)) ||
3400369a:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
3400369c:	eba3 030a 	sub.w	r3, r3, sl
340036a0:	fbb3 f2f2 	udiv	r2, r3, r2
340036a4:	9831      	ldr	r0, [sp, #196]	@ 0xc4
340036a6:	fb00 3312 	mls	r3, r0, r2, r3
      (out_fwidth < blocksize_w) || (out_fheight < blocksize_h) || ((out_fwidth - blocksize_w) % stride_w) ||
340036aa:	b933      	cbnz	r3, 340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
      ((out_fheight - blocksize_h) % stride_h) || (in_fwidth != (((out_fwidth - blocksize_w) / stride_w) + 1)) ||
340036ac:	3101      	adds	r1, #1
340036ae:	428f      	cmp	r7, r1
340036b0:	d103      	bne.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
340036b2:	9b02      	ldr	r3, [sp, #8]
      (in_fheight != (((out_fheight - blocksize_h) / stride_h) + 1)))
340036b4:	3201      	adds	r2, #1
      ((out_fheight - blocksize_h) % stride_h) || (in_fwidth != (((out_fwidth - blocksize_w) / stride_w) + 1)) ||
340036b6:	4293      	cmp	r3, r2
340036b8:	d004      	beq.n	340036c4 <LL_ATON_LIB_DMA_RowToImage+0xf4>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340036ba:	f240 61ef 	movw	r1, #1775	@ 0x6ef
340036be:	2009      	movs	r0, #9
340036c0:	4a3a      	ldr	r2, [pc, #232]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
340036c2:	e7ae      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  LL_Streng_TensorInitTypeDef _dma_in = {
340036c4:	2240      	movs	r2, #64	@ 0x40
340036c6:	2100      	movs	r1, #0
340036c8:	a806      	add	r0, sp, #24
340036ca:	f01b f9d9 	bl	3401ea80 <memset>
340036ce:	2302      	movs	r3, #2
340036d0:	f04f 0200 	mov.w	r2, #0
340036d4:	f88d 3018 	strb.w	r3, [sp, #24]
340036d8:	9b05      	ldr	r3, [sp, #20]
340036da:	2d04      	cmp	r5, #4
340036dc:	f003 0301 	and.w	r3, r3, #1
340036e0:	f363 0241 	bfi	r2, r3, #1, #1
340036e4:	f88d 2019 	strb.w	r2, [sp, #25]
340036e8:	6862      	ldr	r2, [r4, #4]
340036ea:	ea4f 06c5 	mov.w	r6, r5, lsl #3
340036ee:	9207      	str	r2, [sp, #28]
      .offset_start = inputs[0].offset_start,
340036f0:	68a2      	ldr	r2, [r4, #8]
  LL_Streng_TensorInitTypeDef _dma_in = {
340036f2:	b2f6      	uxtb	r6, r6
340036f4:	9208      	str	r2, [sp, #32]
340036f6:	bf08      	it	eq
340036f8:	2610      	moveq	r6, #16
      .offset_end = inputs[0].offset_start + in_bytes_size,
340036fa:	445a      	add	r2, fp
  LL_Streng_TensorInitTypeDef _dma_in = {
340036fc:	f04f 0b01 	mov.w	fp, #1
34003700:	9209      	str	r2, [sp, #36]	@ 0x24
34003702:	6922      	ldr	r2, [r4, #16]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003704:	2100      	movs	r1, #0
  LL_Streng_TensorInitTypeDef _dma_in = {
34003706:	920a      	str	r2, [sp, #40]	@ 0x28
  LL_Streng_TensorInitTypeDef _dma_out = {
34003708:	a816      	add	r0, sp, #88	@ 0x58
3400370a:	2240      	movs	r2, #64	@ 0x40
  LL_Streng_TensorInitTypeDef _dma_in = {
3400370c:	9305      	str	r3, [sp, #20]
3400370e:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
34003712:	f88d 6054 	strb.w	r6, [sp, #84]	@ 0x54
34003716:	f88d 6055 	strb.w	r6, [sp, #85]	@ 0x55
  LL_Streng_TensorInitTypeDef _dma_out = {
3400371a:	f01b f9b1 	bl	3401ea80 <memset>
3400371e:	f04f 0200 	mov.w	r2, #0
34003722:	9b05      	ldr	r3, [sp, #20]
      .batch_depth = (nbytes == 4) ? (2 * out_nchannels) : out_nchannels,
34003724:	2d04      	cmp	r5, #4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003726:	f363 0241 	bfi	r2, r3, #1, #1
3400372a:	f8d8 3004 	ldr.w	r3, [r8, #4]
3400372e:	f88d 2059 	strb.w	r2, [sp, #89]	@ 0x59
34003732:	9317      	str	r3, [sp, #92]	@ 0x5c
34003734:	f8d8 3008 	ldr.w	r3, [r8, #8]
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003738:	4659      	mov	r1, fp
  LL_Streng_TensorInitTypeDef _dma_out = {
3400373a:	9318      	str	r3, [sp, #96]	@ 0x60
3400373c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
3400373e:	4620      	mov	r0, r4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003740:	e9cd 3a1c 	strd	r3, sl, [sp, #112]	@ 0x70
      .batch_depth = (nbytes == 4) ? (2 * out_nchannels) : out_nchannels,
34003744:	fa09 f30b 	lsl.w	r3, r9, fp
34003748:	bf18      	it	ne
3400374a:	464b      	movne	r3, r9
  LL_Streng_TensorInitTypeDef _dma_out = {
3400374c:	931e      	str	r3, [sp, #120]	@ 0x78
      .batch_offset = out_nchannels * nbytes,
3400374e:	fb05 f309 	mul.w	r3, r5, r9
  LL_Streng_TensorInitTypeDef _dma_out = {
34003752:	931f      	str	r3, [sp, #124]	@ 0x7c
      .frame_offset = stride_w * out_nchannels * nbytes,
34003754:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  LL_Streng_TensorInitTypeDef _dma_out = {
34003756:	f88d b058 	strb.w	fp, [sp, #88]	@ 0x58
      .frame_offset = stride_w * out_nchannels * nbytes,
3400375a:	fb03 f309 	mul.w	r3, r3, r9
3400375e:	436b      	muls	r3, r5
  LL_Streng_TensorInitTypeDef _dma_out = {
34003760:	9320      	str	r3, [sp, #128]	@ 0x80
      .line_offset = out_fwidth * out_nchannels * nbytes,
34003762:	9b03      	ldr	r3, [sp, #12]
34003764:	f88d 6094 	strb.w	r6, [sp, #148]	@ 0x94
34003768:	fb09 f303 	mul.w	r3, r9, r3
3400376c:	fb05 f203 	mul.w	r2, r5, r3
  LL_Streng_TensorInitTypeDef _dma_out = {
34003770:	9221      	str	r2, [sp, #132]	@ 0x84
      .loop_offset = stride_h * out_fwidth * out_nchannels * nbytes,
34003772:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003774:	f88d 6095 	strb.w	r6, [sp, #149]	@ 0x95
      .loop_offset = stride_h * out_fwidth * out_nchannels * nbytes,
34003778:	4353      	muls	r3, r2
3400377a:	436b      	muls	r3, r5
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
3400377c:	2500      	movs	r5, #0
  LL_Streng_TensorInitTypeDef _dma_out = {
3400377e:	e9cd 3722 	strd	r3, r7, [sp, #136]	@ 0x88
          out_batches * (((out_fheight - blocksize_h) / stride_h) + 1) * (((out_fwidth - blocksize_w) / stride_w) + 1),
34003782:	9b02      	ldr	r3, [sp, #8]
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003784:	aa06      	add	r2, sp, #24
          out_batches * (((out_fheight - blocksize_h) / stride_h) + 1) * (((out_fwidth - blocksize_w) / stride_w) + 1),
34003786:	435f      	muls	r7, r3
34003788:	9b04      	ldr	r3, [sp, #16]
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
3400378a:	e9cd 5500 	strd	r5, r5, [sp]
          out_batches * (((out_fheight - blocksize_h) / stride_h) + 1) * (((out_fwidth - blocksize_w) / stride_w) + 1),
3400378e:	435f      	muls	r7, r3
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003790:	ab16      	add	r3, sp, #88	@ 0x58
  LL_Streng_TensorInitTypeDef _dma_out = {
34003792:	9724      	str	r7, [sp, #144]	@ 0x90
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003794:	f7ff fca6 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
  __ll_lib_strswitch_set_dmas(dma_in, dma_out, _dma_ri2ir_epoch_block_array);
34003798:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
3400379c:	4a04      	ldr	r2, [pc, #16]	@ (340037b0 <LL_ATON_LIB_DMA_RowToImage+0x1e0>)
3400379e:	f7ff fc45 	bl	3400302c <__ll_lib_strswitch_set_dmas>
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_ri2ir_epoch_block_array);
340037a2:	4803      	ldr	r0, [pc, #12]	@ (340037b0 <LL_ATON_LIB_DMA_RowToImage+0x1e0>)
340037a4:	f7ff fc76 	bl	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
  return LL_ATON_OK;
340037a8:	4628      	mov	r0, r5
340037aa:	e73e      	b.n	3400362a <LL_ATON_LIB_DMA_RowToImage+0x5a>
340037ac:	3402802a 	.word	0x3402802a
340037b0:	340a3034 	.word	0x340a3034

340037b4 <LL_ATON_LIB_DMA_DepthToSpace>:
 *
 */
int LL_ATON_LIB_DMA_DepthToSpace(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
                                 const LL_LIB_TensorInfo_TypeDef *output, unsigned blocksize_h, unsigned blocksize_w,
                                 int dma_in, int dma_out)
{
340037b4:	b530      	push	{r4, r5, lr}
340037b6:	b087      	sub	sp, #28
  return LL_ATON_LIB_DMA_RowToImage(inputs, ninputs, output, blocksize_h, blocksize_w, blocksize_h, blocksize_w, dma_in,
340037b8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
{
340037ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  return LL_ATON_LIB_DMA_RowToImage(inputs, ninputs, output, blocksize_h, blocksize_w, blocksize_h, blocksize_w, dma_in,
340037bc:	9504      	str	r5, [sp, #16]
340037be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
340037c0:	e9cd 4300 	strd	r4, r3, [sp]
340037c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
340037c8:	f7ff ff02 	bl	340035d0 <LL_ATON_LIB_DMA_RowToImage>
                                    dma_out);
}
340037cc:	b007      	add	sp, #28
340037ce:	bd30      	pop	{r4, r5, pc}

340037d0 <LL_ATON_LIB_Concat>:
 * @param  axis for concatenation
 * @retval Error code
 */
int LL_ATON_LIB_Concat(const LL_Buffer_InfoTypeDef *inputs, unsigned int ninputs, const LL_Buffer_InfoTypeDef *output,
                       unsigned int axis, int dma_in, int dma_out)
{
340037d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340037d4:	b0b7      	sub	sp, #220	@ 0xdc
340037d6:	4605      	mov	r5, r0
340037d8:	4617      	mov	r7, r2
  int i, k;

  // LL_ATON_PRINTF("Concat ------ axis=%d\n", axis);
  if (ninputs == 0)
340037da:	460e      	mov	r6, r1
{
340037dc:	9305      	str	r3, [sp, #20]
  if (ninputs == 0)
340037de:	b951      	cbnz	r1, 340037f6 <LL_ATON_LIB_Concat+0x26>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
340037e0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
340037e4:	2001      	movs	r0, #1
340037e6:	4a98      	ldr	r2, [pc, #608]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)

  int in_ndims = inputs[0].ndims;

  if (in_ndims < 4)
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340037e8:	f7ff feda 	bl	340035a0 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
340037ec:	f06f 0001 	mvn.w	r0, #1
    }
    start += copy_val;
  }

  return LL_ATON_OK;
}
340037f0:	b037      	add	sp, #220	@ 0xdc
340037f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int in_ndims = inputs[0].ndims;
340037f6:	f890 4027 	ldrb.w	r4, [r0, #39]	@ 0x27
  if (in_ndims < 4)
340037fa:	2c03      	cmp	r4, #3
340037fc:	dc04      	bgt.n	34003808 <LL_ATON_LIB_Concat+0x38>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340037fe:	f240 71d5 	movw	r1, #2005	@ 0x7d5
34003802:	4a91      	ldr	r2, [pc, #580]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003804:	2009      	movs	r0, #9
34003806:	e7ef      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
  int in_batch = inputs[0].batch;
34003808:	6983      	ldr	r3, [r0, #24]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
3400380a:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
  int in_batch = inputs[0].batch;
3400380e:	9302      	str	r3, [sp, #8]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003810:	1ee3      	subs	r3, r4, #3
34003812:	009a      	lsls	r2, r3, #2
34003814:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  int out_fwidth = output->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003818:	f8d7 b02c 	ldr.w	fp, [r7, #44]	@ 0x2c
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
3400381c:	9306      	str	r3, [sp, #24]
  int in_nchannels = inputs[0].shape[(in_ndims - 4) + TDIM_NCHANNELS];
3400381e:	4613      	mov	r3, r2
34003820:	3308      	adds	r3, #8
34003822:	9307      	str	r3, [sp, #28]
34003824:	f858 3003 	ldr.w	r3, [r8, r3]
  int axis_lut[] = {TDIM_NKERNELS, TDIM_NCHANNELS, TDIM_FHEIGHT, TDIM_FWIDTH}; // 0, 3, 1, 2
34003828:	f10d 0c48 	add.w	ip, sp, #72	@ 0x48
  int in_nchannels = inputs[0].shape[(in_ndims - 4) + TDIM_NCHANNELS];
3400382c:	9303      	str	r3, [sp, #12]
  int out_batch = output->batch;
3400382e:	69bb      	ldr	r3, [r7, #24]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003830:	920c      	str	r2, [sp, #48]	@ 0x30
  int out_batch = output->batch;
34003832:	9308      	str	r3, [sp, #32]
  int out_fwidth = output->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003834:	4613      	mov	r3, r2
34003836:	3304      	adds	r3, #4
34003838:	930d      	str	r3, [sp, #52]	@ 0x34
3400383a:	f85b 3003 	ldr.w	r3, [fp, r3]
3400383e:	9311      	str	r3, [sp, #68]	@ 0x44
  int out_nchannels = output->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003840:	9b07      	ldr	r3, [sp, #28]
34003842:	f85b 3003 	ldr.w	r3, [fp, r3]
34003846:	930f      	str	r3, [sp, #60]	@ 0x3c
  int axis_lut[] = {TDIM_NKERNELS, TDIM_NCHANNELS, TDIM_FHEIGHT, TDIM_FWIDTH}; // 0, 3, 1, 2
34003848:	4b80      	ldr	r3, [pc, #512]	@ (34003a4c <LL_ATON_LIB_Concat+0x27c>)
3400384a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3400384c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (output->ndims != in_ndims)
34003850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34003854:	429c      	cmp	r4, r3
34003856:	9309      	str	r3, [sp, #36]	@ 0x24
34003858:	d003      	beq.n	34003862 <LL_ATON_LIB_Concat+0x92>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
3400385a:	f240 71ee 	movw	r1, #2030	@ 0x7ee
3400385e:	4a7a      	ldr	r2, [pc, #488]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003860:	e7d0      	b.n	34003804 <LL_ATON_LIB_Concat+0x34>
  int nbits = inputs[0].nbits;
34003862:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
34003866:	9304      	str	r3, [sp, #16]
  if (nbits & 0x7)
34003868:	075b      	lsls	r3, r3, #29
3400386a:	d004      	beq.n	34003876 <LL_ATON_LIB_Concat+0xa6>
    __LL_LIB_ERROR(_ERR_FRACTIONAL, LL_ATON_INVALID_PARAM); // for now can't handle fractional bytes
3400386c:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34003870:	2004      	movs	r0, #4
34003872:	4a75      	ldr	r2, [pc, #468]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003874:	e7b8      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
  int atonn_axis = LUT_AXIS(axis);
34003876:	9b05      	ldr	r3, [sp, #20]
34003878:	1f22      	subs	r2, r4, #4
3400387a:	429a      	cmp	r2, r3
3400387c:	d807      	bhi.n	3400388e <LL_ATON_LIB_Concat+0xbe>
3400387e:	3304      	adds	r3, #4
34003880:	1b1b      	subs	r3, r3, r4
34003882:	a936      	add	r1, sp, #216	@ 0xd8
34003884:	eb01 0383 	add.w	r3, r1, r3, lsl #2
34003888:	f853 3c90 	ldr.w	r3, [r3, #-144]
3400388c:	4413      	add	r3, r2
  int tot_axis_dim = 0;
3400388e:	f04f 0c00 	mov.w	ip, #0
    tot_axis_dim += inputs[i].shape[atonn_axis];
34003892:	009a      	lsls	r2, r3, #2
34003894:	920e      	str	r2, [sp, #56]	@ 0x38
  for (i = 0; i < ninputs; i++)
34003896:	46e6      	mov	lr, ip
    tot_axis_dim += inputs[i].shape[atonn_axis];
34003898:	462a      	mov	r2, r5
3400389a:	950a      	str	r5, [sp, #40]	@ 0x28
  int tot_size = 0;
3400389c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
    tot_size += LL_Buffer_len(inputs + i);
340038a0:	68d1      	ldr	r1, [r2, #12]
340038a2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
340038a4:	f8d2 902c 	ldr.w	r9, [r2, #44]	@ 0x2c
    tot_size += LL_Buffer_len(inputs + i);
340038a8:	4408      	add	r0, r1
340038aa:	4601      	mov	r1, r0
340038ac:	6890      	ldr	r0, [r2, #8]
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
340038ae:	f8d2 a018 	ldr.w	sl, [r2, #24]
    tot_size += LL_Buffer_len(inputs + i);
340038b2:	1a09      	subs	r1, r1, r0
340038b4:	910b      	str	r1, [sp, #44]	@ 0x2c
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
340038b6:	9907      	ldr	r1, [sp, #28]
340038b8:	f859 1001 	ldr.w	r1, [r9, r1]
340038bc:	4551      	cmp	r1, sl
340038be:	d103      	bne.n	340038c8 <LL_ATON_LIB_Concat+0xf8>
340038c0:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
340038c4:	4281      	cmp	r1, r0
340038c6:	d007      	beq.n	340038d8 <LL_ATON_LIB_Concat+0x108>
340038c8:	9902      	ldr	r1, [sp, #8]
340038ca:	4551      	cmp	r1, sl
340038cc:	d004      	beq.n	340038d8 <LL_ATON_LIB_Concat+0x108>
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
340038ce:	f640 0108 	movw	r1, #2056	@ 0x808
340038d2:	4a5d      	ldr	r2, [pc, #372]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
340038d4:	200a      	movs	r0, #10
340038d6:	e787      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
    if (inputs[i].ndims != in_ndims)
340038d8:	f892 1027 	ldrb.w	r1, [r2, #39]	@ 0x27
340038dc:	42a1      	cmp	r1, r4
340038de:	d003      	beq.n	340038e8 <LL_ATON_LIB_Concat+0x118>
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
340038e0:	f640 010b 	movw	r1, #2059	@ 0x80b
340038e4:	4a58      	ldr	r2, [pc, #352]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
340038e6:	e7f5      	b.n	340038d4 <LL_ATON_LIB_Concat+0x104>
    if (inputs[i].nbits != nbits)
340038e8:	f892 1028 	ldrb.w	r1, [r2, #40]	@ 0x28
340038ec:	9804      	ldr	r0, [sp, #16]
340038ee:	4281      	cmp	r1, r0
340038f0:	d004      	beq.n	340038fc <LL_ATON_LIB_Concat+0x12c>
      __LL_LIB_ERROR(_ERR_NBITS_IN, LL_ATON_INVALID_PARAM);
340038f2:	f640 010d 	movw	r1, #2061	@ 0x80d
340038f6:	2007      	movs	r0, #7
340038f8:	4a53      	ldr	r2, [pc, #332]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
340038fa:	e775      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
    for (k = 0; k < in_ndims; k++)
340038fc:	f04f 0a00 	mov.w	sl, #0
    tot_axis_dim += inputs[i].shape[atonn_axis];
34003900:	990e      	ldr	r1, [sp, #56]	@ 0x38
34003902:	4554      	cmp	r4, sl
34003904:	f859 1001 	ldr.w	r1, [r9, r1]
34003908:	448c      	add	ip, r1
    for (k = 0; k < in_ndims; k++)
3400390a:	bf14      	ite	ne
3400390c:	4621      	movne	r1, r4
3400390e:	2101      	moveq	r1, #1
34003910:	9110      	str	r1, [sp, #64]	@ 0x40
      if (k != atonn_axis && inputs[0].shape[k] != inputs[i].shape[k])
34003912:	4553      	cmp	r3, sl
34003914:	d009      	beq.n	3400392a <LL_ATON_LIB_Concat+0x15a>
34003916:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
3400391a:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
3400391e:	4288      	cmp	r0, r1
34003920:	d003      	beq.n	3400392a <LL_ATON_LIB_Concat+0x15a>
        __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003922:	f640 0114 	movw	r1, #2068	@ 0x814
34003926:	4a48      	ldr	r2, [pc, #288]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003928:	e7d4      	b.n	340038d4 <LL_ATON_LIB_Concat+0x104>
    for (k = 0; k < in_ndims; k++)
3400392a:	9910      	ldr	r1, [sp, #64]	@ 0x40
3400392c:	f10a 0a01 	add.w	sl, sl, #1
34003930:	3901      	subs	r1, #1
34003932:	9110      	str	r1, [sp, #64]	@ 0x40
34003934:	d1ed      	bne.n	34003912 <LL_ATON_LIB_Concat+0x142>
  for (i = 0; i < ninputs; i++)
34003936:	f10e 0e01 	add.w	lr, lr, #1
3400393a:	45b6      	cmp	lr, r6
3400393c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
34003940:	d1ae      	bne.n	340038a0 <LL_ATON_LIB_Concat+0xd0>
  for (k = 0; k < in_ndims; k++)
34003942:	2000      	movs	r0, #0
34003944:	4284      	cmp	r4, r0
34003946:	bf14      	ite	ne
34003948:	46a6      	movne	lr, r4
3400394a:	f04f 0e01 	moveq.w	lr, #1
    if (k != atonn_axis && output->shape[k] != inputs[0].shape[k])
3400394e:	4283      	cmp	r3, r0
34003950:	d009      	beq.n	34003966 <LL_ATON_LIB_Concat+0x196>
34003952:	f85b 1020 	ldr.w	r1, [fp, r0, lsl #2]
34003956:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
3400395a:	4291      	cmp	r1, r2
3400395c:	d003      	beq.n	34003966 <LL_ATON_LIB_Concat+0x196>
      __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
3400395e:	f640 011d 	movw	r1, #2077	@ 0x81d
34003962:	4a39      	ldr	r2, [pc, #228]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003964:	e74e      	b.n	34003804 <LL_ATON_LIB_Concat+0x34>
  for (k = 0; k < in_ndims; k++)
34003966:	f1be 0e01 	subs.w	lr, lr, #1
3400396a:	f100 0001 	add.w	r0, r0, #1
3400396e:	d1ee      	bne.n	3400394e <LL_ATON_LIB_Concat+0x17e>
  if (output->shape[atonn_axis] != tot_axis_dim)
34003970:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34003972:	f85b 0002 	ldr.w	r0, [fp, r2]
34003976:	4584      	cmp	ip, r0
34003978:	d004      	beq.n	34003984 <LL_ATON_LIB_Concat+0x1b4>
    __LL_LIB_ERROR(_ERR_AXIS, LL_ATON_INVALID_PARAM);
3400397a:	f640 0122 	movw	r1, #2082	@ 0x822
3400397e:	2003      	movs	r0, #3
34003980:	4a31      	ldr	r2, [pc, #196]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003982:	e731      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
  if (nbits != output->nbits) // perhaps this could be relaxed later on FIXME !!!
34003984:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
34003988:	9904      	ldr	r1, [sp, #16]
3400398a:	428a      	cmp	r2, r1
3400398c:	d004      	beq.n	34003998 <LL_ATON_LIB_Concat+0x1c8>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
3400398e:	f640 0127 	movw	r1, #2087	@ 0x827
34003992:	2006      	movs	r0, #6
34003994:	4a2c      	ldr	r2, [pc, #176]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
34003996:	e727      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
34003998:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
3400399c:	1a52      	subs	r2, r2, r1
  if (tot_size > LL_Buffer_len(output))
3400399e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
340039a0:	4291      	cmp	r1, r2
340039a2:	d822      	bhi.n	340039ea <LL_ATON_LIB_Concat+0x21a>
  int axis_is_leftmost = 1;
340039a4:	f04f 0c01 	mov.w	ip, #1
340039a8:	4659      	mov	r1, fp
340039aa:	9a05      	ldr	r2, [sp, #20]
340039ac:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
340039b0:	4462      	add	r2, ip
  for (i = 0; i < axis; i++)
340039b2:	3a01      	subs	r2, #1
340039b4:	d11e      	bne.n	340039f4 <LL_ATON_LIB_Concat+0x224>
  int nbytes = (inputs[0].nbits + 7) >> 3;
340039b6:	9a04      	ldr	r2, [sp, #16]
340039b8:	1dd1      	adds	r1, r2, #7
  if (nbits > 24) // assumes that inputs & output have the same number of bits (`nbits`), see above `__LL_LIB_ERROR`s
340039ba:	2a18      	cmp	r2, #24
  int nbytes = (inputs[0].nbits + 7) >> 3;
340039bc:	ea4f 09e1 	mov.w	r9, r1, asr #3
  if (nbits > 24) // assumes that inputs & output have the same number of bits (`nbits`), see above `__LL_LIB_ERROR`s
340039c0:	f300 80f5 	bgt.w	34003bae <LL_ATON_LIB_Concat+0x3de>
  if (axis_is_leftmost)
340039c4:	f1bc 0f00 	cmp.w	ip, #0
340039c8:	f000 80f1 	beq.w	34003bae <LL_ATON_LIB_Concat+0x3de>
    switch ((in_ndims - 1) - axis) // count from right CHW, W=0,H=1,C=2, anything else >= 3
340039cc:	9b05      	ldr	r3, [sp, #20]
340039ce:	1ae4      	subs	r4, r4, r3
340039d0:	3c01      	subs	r4, #1
340039d2:	f000 80b1 	beq.w	34003b38 <LL_ATON_LIB_Concat+0x368>
340039d6:	2c02      	cmp	r4, #2
340039d8:	d026      	beq.n	34003a28 <LL_ATON_LIB_Concat+0x258>
      if (in_batch != out_batch)
340039da:	9b02      	ldr	r3, [sp, #8]
340039dc:	9a08      	ldr	r2, [sp, #32]
340039de:	4293      	cmp	r3, r2
340039e0:	d012      	beq.n	34003a08 <LL_ATON_LIB_Concat+0x238>
        __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340039e2:	f640 0144 	movw	r1, #2116	@ 0x844
340039e6:	4a18      	ldr	r2, [pc, #96]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
340039e8:	e70c      	b.n	34003804 <LL_ATON_LIB_Concat+0x34>
    __LL_LIB_ERROR(_ERR_BUFFER, LL_ATON_INVALID_PARAM);
340039ea:	f640 012c 	movw	r1, #2092	@ 0x82c
340039ee:	200c      	movs	r0, #12
340039f0:	4a15      	ldr	r2, [pc, #84]	@ (34003a48 <LL_ATON_LIB_Concat+0x278>)
340039f2:	e6f9      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
    axis_is_leftmost &= (output->shape[i] == 1);
340039f4:	f851 eb04 	ldr.w	lr, [r1], #4
340039f8:	f1be 0f01 	cmp.w	lr, #1
340039fc:	bf14      	ite	ne
340039fe:	f04f 0c00 	movne.w	ip, #0
34003a02:	f00c 0c01 	andeq.w	ip, ip, #1
  for (i = 0; i < axis; i++)
34003a06:	e7d4      	b.n	340039b2 <LL_ATON_LIB_Concat+0x1e2>
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003a08:	4638      	mov	r0, r7
34003a0a:	f7ff fad9 	bl	34002fc0 <LL_Buffer_addr_start>
34003a0e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
34003a10:	4602      	mov	r2, r0
  if (ninputs > 0)
34003a12:	9301      	str	r3, [sp, #4]
34003a14:	9b40      	ldr	r3, [sp, #256]	@ 0x100
34003a16:	9300      	str	r3, [sp, #0]
34003a18:	f04f 33ff 	mov.w	r3, #4294967295
34003a1c:	4631      	mov	r1, r6
34003a1e:	4628      	mov	r0, r5
34003a20:	f7ff fba2 	bl	34003168 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0>
      return LL_ATON_OK;
34003a24:	2000      	movs	r0, #0
34003a26:	e6e3      	b.n	340037f0 <LL_ATON_LIB_Concat+0x20>
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003a28:	4638      	mov	r0, r7
34003a2a:	f7ff fac9 	bl	34002fc0 <LL_Buffer_addr_start>
      if (in_batch == out_batch)
34003a2e:	9b02      	ldr	r3, [sp, #8]
34003a30:	9a08      	ldr	r2, [sp, #32]
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003a32:	4681      	mov	r9, r0
      if (in_batch == out_batch)
34003a34:	4293      	cmp	r3, r2
34003a36:	d10b      	bne.n	34003a50 <LL_ATON_LIB_Concat+0x280>
  if (ninputs > 0)
34003a38:	9b41      	ldr	r3, [sp, #260]	@ 0x104
34003a3a:	4602      	mov	r2, r0
34003a3c:	9301      	str	r3, [sp, #4]
34003a3e:	9b40      	ldr	r3, [sp, #256]	@ 0x100
34003a40:	9300      	str	r3, [sp, #0]
34003a42:	f04f 33ff 	mov.w	r3, #4294967295
34003a46:	e7e9      	b.n	34003a1c <LL_ATON_LIB_Concat+0x24c>
34003a48:	34028017 	.word	0x34028017
34003a4c:	34022980 	.word	0x34022980
  uint32_t in_fwidth = inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003a50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a52:	46b6      	mov	lr, r6
  uint32_t in_fwidth = inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003a54:	f858 b003 	ldr.w	fp, [r8, r3]
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a58:	9b06      	ldr	r3, [sp, #24]
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a5a:	f04f 0c38 	mov.w	ip, #56	@ 0x38
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a5e:	fb0b fa03 	mul.w	sl, fp, r3
  uint32_t in_nkernels = inputs[0].shape[(in_ndims - 4) + TDIM_NKERNELS];
34003a62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  uint32_t nbytes = (nbits + 7) >> 3;
34003a64:	08cf      	lsrs	r7, r1, #3
  uint32_t in_nkernels = inputs[0].shape[(in_ndims - 4) + TDIM_NKERNELS];
34003a66:	4443      	add	r3, r8
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a68:	f853 4c04 	ldr.w	r4, [r3, #-4]
34003a6c:	9b03      	ldr	r3, [sp, #12]
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a6e:	f105 012c 	add.w	r1, r5, #44	@ 0x2c
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a72:	435c      	muls	r4, r3
  for (i = 0; i < ninputs; i++)
34003a74:	2300      	movs	r3, #0
34003a76:	429e      	cmp	r6, r3
34003a78:	bf14      	ite	ne
34003a7a:	46b6      	movne	lr, r6
34003a7c:	f04f 0e01 	moveq.w	lr, #1
  uint32_t out_nchannels = 0;
34003a80:	4698      	mov	r8, r3
34003a82:	f04e e001 	dls	lr, lr
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003a86:	437c      	muls	r4, r7
34003a88:	fb0a f404 	mul.w	r4, sl, r4
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a8c:	fb0c f203 	mul.w	r2, ip, r3
34003a90:	9807      	ldr	r0, [sp, #28]
34003a92:	588a      	ldr	r2, [r1, r2]
  for (i = 0; i < ninputs; i++)
34003a94:	3301      	adds	r3, #1
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a96:	5812      	ldr	r2, [r2, r0]
34003a98:	4490      	add	r8, r2
  for (i = 0; i < ninputs; i++)
34003a9a:	f00f c809 	le	lr, 34003a8c <LL_ATON_LIB_Concat+0x2bc>
  LL_Streng_TensorInitTypeDef _dma_in = {
34003a9e:	2240      	movs	r2, #64	@ 0x40
34003aa0:	2100      	movs	r1, #0
34003aa2:	a816      	add	r0, sp, #88	@ 0x58
34003aa4:	f01a ffec 	bl	3401ea80 <memset>
34003aa8:	2302      	movs	r3, #2
34003aaa:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
34003aae:	686b      	ldr	r3, [r5, #4]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ab0:	2240      	movs	r2, #64	@ 0x40
  LL_Streng_TensorInitTypeDef _dma_in = {
34003ab2:	9317      	str	r3, [sp, #92]	@ 0x5c
      .offset_start = inputs[0].offset_start,               // this must be updated on all inputs
34003ab4:	68ab      	ldr	r3, [r5, #8]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ab6:	2100      	movs	r1, #0
      .offset_end = inputs[0].offset_start + in_bytes_size, // this must be updated on all inputs
34003ab8:	441c      	add	r4, r3
  LL_Streng_TensorInitTypeDef _dma_in = {
34003aba:	9318      	str	r3, [sp, #96]	@ 0x60
34003abc:	2301      	movs	r3, #1
34003abe:	9419      	str	r4, [sp, #100]	@ 0x64
34003ac0:	00fc      	lsls	r4, r7, #3
34003ac2:	b2e4      	uxtb	r4, r4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ac4:	a826      	add	r0, sp, #152	@ 0x98
  LL_Streng_TensorInitTypeDef _dma_in = {
34003ac6:	9324      	str	r3, [sp, #144]	@ 0x90
34003ac8:	f88d 4094 	strb.w	r4, [sp, #148]	@ 0x94
34003acc:	f88d 4095 	strb.w	r4, [sp, #149]	@ 0x95
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ad0:	f01a ffd6 	bl	3401ea80 <memset>
34003ad4:	2301      	movs	r3, #1
34003ad6:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
34003ada:	9b06      	ldr	r3, [sp, #24]
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003adc:	4628      	mov	r0, r5
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ade:	932d      	str	r3, [sp, #180]	@ 0xb4
34003ae0:	9b02      	ldr	r3, [sp, #8]
34003ae2:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
34003ae6:	932e      	str	r3, [sp, #184]	@ 0xb8
      .batch_offset = out_nchannels * nbytes,
34003ae8:	fb08 f307 	mul.w	r3, r8, r7
  LL_Streng_TensorInitTypeDef _dma_out = {
34003aec:	932f      	str	r3, [sp, #188]	@ 0xbc
      .frame_offset = in_batch * nbytes, // this must be updated on all inputs
34003aee:	9b02      	ldr	r3, [sp, #8]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003af0:	f8cd b0b0 	str.w	fp, [sp, #176]	@ 0xb0
      .frame_offset = in_batch * nbytes, // this must be updated on all inputs
34003af4:	fb07 f103 	mul.w	r1, r7, r3
      .frame_loop_cnt = in_nchannels / in_batch,                 // this must be updated on all inputs
34003af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34003afc:	fbb3 f3f2 	udiv	r3, r3, r2
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b00:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b04:	f04f 33ff 	mov.w	r3, #4294967295
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b08:	9130      	str	r1, [sp, #192]	@ 0xc0
      .loop_offset = in_fheight * in_fwidth * in_batch * nbytes, // this must be updated on all inputs
34003b0a:	fb01 f10a 	mul.w	r1, r1, sl
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b0e:	e9cd 9300 	strd	r9, r3, [sp]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b12:	9132      	str	r1, [sp, #200]	@ 0xc8
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b14:	ab26      	add	r3, sp, #152	@ 0x98
34003b16:	4631      	mov	r1, r6
34003b18:	aa16      	add	r2, sp, #88	@ 0x58
  LL_Streng_TensorInitTypeDef _dma_out = {
34003b1a:	f88d 40d4 	strb.w	r4, [sp, #212]	@ 0xd4
34003b1e:	f88d 40d5 	strb.w	r4, [sp, #213]	@ 0xd5
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003b22:	f7ff fadf 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_batched_memcpy_epoch_block_array);
34003b26:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	@ 0x100
34003b2a:	4a48      	ldr	r2, [pc, #288]	@ (34003c4c <LL_ATON_LIB_Concat+0x47c>)
34003b2c:	f7ff fa7e 	bl	3400302c <__ll_lib_strswitch_set_dmas>
    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_batched_memcpy_epoch_block_array);
34003b30:	4846      	ldr	r0, [pc, #280]	@ (34003c4c <LL_ATON_LIB_Concat+0x47c>)
          LL_ATON_RT_Insert_LibEpochBlockArray(_concat_case3_epoch_block_array);
34003b32:	f7ff faaf 	bl	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
34003b36:	e775      	b.n	34003a24 <LL_ATON_LIB_Concat+0x254>
      if (in_batch != out_batch)
34003b38:	9b02      	ldr	r3, [sp, #8]
34003b3a:	9a08      	ldr	r2, [sp, #32]
34003b3c:	4293      	cmp	r3, r2
34003b3e:	d003      	beq.n	34003b48 <LL_ATON_LIB_Concat+0x378>
        __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003b40:	f640 0165 	movw	r1, #2149	@ 0x865
34003b44:	4a42      	ldr	r2, [pc, #264]	@ (34003c50 <LL_ATON_LIB_Concat+0x480>)
34003b46:	e65d      	b.n	34003804 <LL_ATON_LIB_Concat+0x34>
      unsigned int out_pix_size = nbytes * out_nchannels;
34003b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003b4a:	4638      	mov	r0, r7
      unsigned int out_pix_size = nbytes * out_nchannels;
34003b4c:	fb09 f103 	mul.w	r1, r9, r3
      unsigned int out_line_size = out_pix_size * out_fwidth;
34003b50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
34003b52:	4359      	muls	r1, r3
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003b54:	f7ff fa34 	bl	34002fc0 <LL_Buffer_addr_start>
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003b5a:	4607      	mov	r7, r0
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003b5c:	f858 a003 	ldr.w	sl, [r8, r3]
        params->special.concat_case3.outer_idx = 0;
34003b60:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 34003c60 <LL_ATON_LIB_Concat+0x490>
        params->special.concat_case3.in_fheight = in_fheight;
34003b64:	9b06      	ldr	r3, [sp, #24]
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003b66:	f8d8 0098 	ldr.w	r0, [r8, #152]	@ 0x98
        params->special.concat_case3.nbytes = nbytes;
34003b6a:	e9c8 3929 	strd	r3, r9, [r8, #164]	@ 0xa4
        params->special.concat_case3.outer_idx = 0;
34003b6e:	f8c8 40a0 	str.w	r4, [r8, #160]	@ 0xa0
        params->special.concat_case3.out_line_size = out_line_size;
34003b72:	f8c8 10ac 	str.w	r1, [r8, #172]	@ 0xac
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003b76:	f7ff fa23 	bl	34002fc0 <LL_Buffer_addr_start>
        if ((ninputs > 0) && (in_fheight > 0))
34003b7a:	9b06      	ldr	r3, [sp, #24]
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003b7c:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
        if ((ninputs > 0) && (in_fheight > 0))
34003b80:	2b00      	cmp	r3, #0
34003b82:	f77f af4f 	ble.w	34003a24 <LL_ATON_LIB_Concat+0x254>
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003b86:	9b03      	ldr	r3, [sp, #12]
          __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out,
34003b88:	4631      	mov	r1, r6
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003b8a:	fb0a fa03 	mul.w	sl, sl, r3
34003b8e:	fb09 f30a 	mul.w	r3, r9, sl
          __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out,
34003b92:	4628      	mov	r0, r5
34003b94:	e9cd 7300 	strd	r7, r3, [sp]
34003b98:	4a2e      	ldr	r2, [pc, #184]	@ (34003c54 <LL_ATON_LIB_Concat+0x484>)
34003b9a:	4b2f      	ldr	r3, [pc, #188]	@ (34003c58 <LL_ATON_LIB_Concat+0x488>)
34003b9c:	f7ff faa2 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
          __ll_lib_strswitch_set_dmas(dma_in, dma_out, _concat_case3_epoch_block_array);
34003ba0:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	@ 0x100
34003ba4:	4a2d      	ldr	r2, [pc, #180]	@ (34003c5c <LL_ATON_LIB_Concat+0x48c>)
34003ba6:	f7ff fa41 	bl	3400302c <__ll_lib_strswitch_set_dmas>
          LL_ATON_RT_Insert_LibEpochBlockArray(_concat_case3_epoch_block_array);
34003baa:	482c      	ldr	r0, [pc, #176]	@ (34003c5c <LL_ATON_LIB_Concat+0x48c>)
34003bac:	e7c1      	b.n	34003b32 <LL_ATON_LIB_Concat+0x362>
  if (in_canonical == 0)
34003bae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
34003bb2:	428a      	cmp	r2, r1
34003bb4:	d003      	beq.n	34003bbe <LL_ATON_LIB_Concat+0x3ee>
    __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003bb6:	f640 01bd 	movw	r1, #2237	@ 0x8bd
34003bba:	4a25      	ldr	r2, [pc, #148]	@ (34003c50 <LL_ATON_LIB_Concat+0x480>)
34003bbc:	e68a      	b.n	340038d4 <LL_ATON_LIB_Concat+0x104>
  if (out_canonical == 0)
34003bbe:	9a08      	ldr	r2, [sp, #32]
34003bc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
34003bc2:	428a      	cmp	r2, r1
34003bc4:	d004      	beq.n	34003bd0 <LL_ATON_LIB_Concat+0x400>
    __LL_LIB_ERROR(_ERR_SHAPE_OUT, LL_ATON_INVALID_PARAM);
34003bc6:	f640 01bf 	movw	r1, #2239	@ 0x8bf
34003bca:	200b      	movs	r0, #11
34003bcc:	4a20      	ldr	r2, [pc, #128]	@ (34003c50 <LL_ATON_LIB_Concat+0x480>)
34003bce:	e60b      	b.n	340037e8 <LL_ATON_LIB_Concat+0x18>
  uint32_t jump_base = 1;
34003bd0:	2401      	movs	r4, #1
34003bd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34003bd4:	1919      	adds	r1, r3, r4
34003bd6:	4291      	cmp	r1, r2
34003bd8:	eba2 0303 	sub.w	r3, r2, r3
34003bdc:	bfd4      	ite	le
34003bde:	461d      	movle	r5, r3
34003be0:	4625      	movgt	r5, r4
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003be2:	3d01      	subs	r5, #1
34003be4:	d11a      	bne.n	34003c1c <LL_ATON_LIB_Concat+0x44c>
  jump_base *= nbytes;
34003be6:	fb04 f909 	mul.w	r9, r4, r9
  uint32_t start = 0;
34003bea:	2400      	movs	r4, #0
  for (i = 0; i < ninputs; i++)
34003bec:	46a2      	mov	sl, r4
  uint32_t jump = jump_base * output->shape[atonn_axis];
34003bee:	fb09 f300 	mul.w	r3, r9, r0
34003bf2:	9303      	str	r3, [sp, #12]
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003bf4:	46a0      	mov	r8, r4
    int src = 0;
34003bf6:	2500      	movs	r5, #0
    uint32_t copy_val = inputs[i].shape[atonn_axis] * jump_base;
34003bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34003bfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34003bfe:	589a      	ldr	r2, [r3, r2]
34003c00:	fb02 fb09 	mul.w	fp, r2, r9
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003c04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34003c06:	4543      	cmp	r3, r8
34003c08:	d80d      	bhi.n	34003c26 <LL_ATON_LIB_Concat+0x456>
  for (i = 0; i < ninputs; i++)
34003c0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34003c0c:	f10a 0a01 	add.w	sl, sl, #1
34003c10:	3338      	adds	r3, #56	@ 0x38
34003c12:	45b2      	cmp	sl, r6
    start += copy_val;
34003c14:	445c      	add	r4, fp
  for (i = 0; i < ninputs; i++)
34003c16:	930a      	str	r3, [sp, #40]	@ 0x28
34003c18:	d3ec      	bcc.n	34003bf4 <LL_ATON_LIB_Concat+0x424>
34003c1a:	e703      	b.n	34003a24 <LL_ATON_LIB_Concat+0x254>
    jump_base *= output->shape[i];
34003c1c:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003c20:	3101      	adds	r1, #1
    jump_base *= output->shape[i];
34003c22:	4354      	muls	r4, r2
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003c24:	e7dd      	b.n	34003be2 <LL_ATON_LIB_Concat+0x412>
      memcpy(LL_Buffer_addr_start(output) + dst, LL_Buffer_addr_start(inputs + i) + src, copy_val);
34003c26:	4638      	mov	r0, r7
34003c28:	f7ff f9ca 	bl	34002fc0 <LL_Buffer_addr_start>
34003c2c:	eb00 0308 	add.w	r3, r0, r8
34003c30:	980a      	ldr	r0, [sp, #40]	@ 0x28
34003c32:	9302      	str	r3, [sp, #8]
34003c34:	f7ff f9c4 	bl	34002fc0 <LL_Buffer_addr_start>
34003c38:	465a      	mov	r2, fp
34003c3a:	1941      	adds	r1, r0, r5
34003c3c:	9802      	ldr	r0, [sp, #8]
34003c3e:	f01b f9a6 	bl	3401ef8e <memcpy>
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003c42:	9b03      	ldr	r3, [sp, #12]
34003c44:	445d      	add	r5, fp
34003c46:	4498      	add	r8, r3
34003c48:	e7dc      	b.n	34003c04 <LL_ATON_LIB_Concat+0x434>
34003c4a:	bf00      	nop
34003c4c:	340a305c 	.word	0x340a305c
34003c50:	34028017 	.word	0x34028017
34003c54:	340280c8 	.word	0x340280c8
34003c58:	34028088 	.word	0x34028088
34003c5c:	340a30ac 	.word	0x340a30ac
34003c60:	340a37ec 	.word	0x340a37ec

34003c64 <aton_osal_freertos_init>:

/**
 * @brief Initialize RTOS OSAL implementation
 */
void LL_ATON_OSAL_INIT()
{
34003c64:	b513      	push	{r0, r1, r4, lr}

  /*** Helper inline functions ***/
  static inline _ReturnType_ _my_xSemaphoreCreateBinaryStatic(SemaphoreHandle_t *dao_addr,
                                                              StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateBinaryStatic(static_buffer);
34003c66:	2200      	movs	r2, #0
34003c68:	2403      	movs	r4, #3
34003c6a:	4611      	mov	r1, r2
34003c6c:	2001      	movs	r0, #1
34003c6e:	4b1f      	ldr	r3, [pc, #124]	@ (34003cec <aton_osal_freertos_init+0x88>)
34003c70:	9400      	str	r4, [sp, #0]
34003c72:	f005 ff81 	bl	34009b78 <xQueueGenericCreateStatic>
    if (ret != _NullHandle_)
34003c76:	b928      	cbnz	r0, 34003c84 <aton_osal_freertos_init+0x20>
  /* create main "deferred ATON owner" mechanism mutex */
  _ReturnType_ ret = _CreateDaoMutexNoWaiters_(
      _dao_mutex,
      _dao_mutex_buffer); // no thread will ever wait on this "conceptional" mutex
                          // (so priority inheritance - as would come with a "real" mutex - is not needed)
  assert(ret == _OsTrue_);
34003c78:	213d      	movs	r1, #61	@ 0x3d
34003c7a:	4b1d      	ldr	r3, [pc, #116]	@ (34003cf0 <aton_osal_freertos_init+0x8c>)
34003c7c:	4a1d      	ldr	r2, [pc, #116]	@ (34003cf4 <aton_osal_freertos_init+0x90>)
  _MakeDaoMutexNoWaitersAvailable_(_dao_mutex); // make it available

  /* create "deferred ATON owner" mechanism semaphore */
  ret = _CreateDaoWaitQueue_(_dao_wait_queue, _dao_wait_queue_buffer);
  assert(ret == _OsTrue_);
34003c7e:	481e      	ldr	r0, [pc, #120]	@ (34003cf8 <aton_osal_freertos_init+0x94>)
34003c80:	f019 feb4 	bl	3401d9ec <__assert_func>
  _MakeDaoMutexNoWaitersAvailable_(_dao_mutex); // make it available
34003c84:	2300      	movs	r3, #0
    {
      *dao_addr = ret;
34003c86:	4a1d      	ldr	r2, [pc, #116]	@ (34003cfc <aton_osal_freertos_init+0x98>)
34003c88:	4619      	mov	r1, r3
34003c8a:	6010      	str	r0, [r2, #0]
34003c8c:	461a      	mov	r2, r3
34003c8e:	f005 ffcf 	bl	34009c30 <xQueueGenericSend>
    SemaphoreHandle_t ret = xSemaphoreCreateBinaryStatic(static_buffer);
34003c92:	2200      	movs	r2, #0
34003c94:	2001      	movs	r0, #1
34003c96:	4611      	mov	r1, r2
34003c98:	4b19      	ldr	r3, [pc, #100]	@ (34003d00 <aton_osal_freertos_init+0x9c>)
34003c9a:	9400      	str	r4, [sp, #0]
34003c9c:	f005 ff6c 	bl	34009b78 <xQueueGenericCreateStatic>
    if (ret != _NullHandle_)
34003ca0:	b160      	cbz	r0, 34003cbc <aton_osal_freertos_init+0x58>
      *dao_addr = ret;
34003ca2:	4b18      	ldr	r3, [pc, #96]	@ (34003d04 <aton_osal_freertos_init+0xa0>)
  }

  static inline _ReturnType_ _my_xSemaphoreCreateCountingStatic(SemaphoreHandle_t *dao_addr,
                                                                StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateCountingStatic(0xFFFFFFFF, 0, static_buffer);
34003ca4:	2100      	movs	r1, #0
      *dao_addr = ret;
34003ca6:	6018      	str	r0, [r3, #0]
    SemaphoreHandle_t ret = xSemaphoreCreateCountingStatic(0xFFFFFFFF, 0, static_buffer);
34003ca8:	4a17      	ldr	r2, [pc, #92]	@ (34003d08 <aton_osal_freertos_init+0xa4>)
34003caa:	f04f 30ff 	mov.w	r0, #4294967295
34003cae:	f005 ff9f 	bl	34009bf0 <xQueueCreateCountingSemaphoreStatic>
    if (ret != _NullHandle_)
34003cb2:	b938      	cbnz	r0, 34003cc4 <aton_osal_freertos_init+0x60>
  _MakeDaoWaitQueueUnavailable_(_dao_wait_queue); // make it un-available

  /* create WFE semaphore */
  ret = _CreateWfeSemaphore_(_wfe_sem, _wfe_sem_buffer);
  assert(ret == _OsTrue_);
34003cb4:	2147      	movs	r1, #71	@ 0x47
34003cb6:	4b0e      	ldr	r3, [pc, #56]	@ (34003cf0 <aton_osal_freertos_init+0x8c>)
34003cb8:	4a0e      	ldr	r2, [pc, #56]	@ (34003cf4 <aton_osal_freertos_init+0x90>)
34003cba:	e7e0      	b.n	34003c7e <aton_osal_freertos_init+0x1a>
  assert(ret == _OsTrue_);
34003cbc:	2142      	movs	r1, #66	@ 0x42
34003cbe:	4b0c      	ldr	r3, [pc, #48]	@ (34003cf0 <aton_osal_freertos_init+0x8c>)
34003cc0:	4a0c      	ldr	r2, [pc, #48]	@ (34003cf4 <aton_osal_freertos_init+0x90>)
34003cc2:	e7dc      	b.n	34003c7e <aton_osal_freertos_init+0x1a>
    {
      *dao_addr = ret;
34003cc4:	4b11      	ldr	r3, [pc, #68]	@ (34003d0c <aton_osal_freertos_init+0xa8>)
  }

  static inline _ReturnType_ _my_xSemaphoreCreateMutexStatic(SemaphoreHandle_t *dao_addr,
                                                             StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateMutexStatic(static_buffer);
34003cc6:	4912      	ldr	r1, [pc, #72]	@ (34003d10 <aton_osal_freertos_init+0xac>)
      *dao_addr = ret;
34003cc8:	6018      	str	r0, [r3, #0]
    SemaphoreHandle_t ret = xSemaphoreCreateMutexStatic(static_buffer);
34003cca:	2001      	movs	r0, #1
34003ccc:	f006 f852 	bl	34009d74 <xQueueCreateMutexStatic>
    if (ret != _NullHandle_)
34003cd0:	b918      	cbnz	r0, 34003cda <aton_osal_freertos_init+0x76>
  _MakeWfeSemaphoreUnavailable_(_wfe_sem); // make it un-available

  /* create cache mutex */
  ret = _CreateCacheMutex_(_cache_mutex, _cache_mutex_buffer);
  assert(ret == _OsTrue_);
34003cd2:	214c      	movs	r1, #76	@ 0x4c
34003cd4:	4b06      	ldr	r3, [pc, #24]	@ (34003cf0 <aton_osal_freertos_init+0x8c>)
34003cd6:	4a07      	ldr	r2, [pc, #28]	@ (34003cf4 <aton_osal_freertos_init+0x90>)
34003cd8:	e7d1      	b.n	34003c7e <aton_osal_freertos_init+0x1a>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34003cda:	2250      	movs	r2, #80	@ 0x50
    {
      *dao_addr = ret;
34003cdc:	4b0d      	ldr	r3, [pc, #52]	@ (34003d14 <aton_osal_freertos_init+0xb0>)
34003cde:	6018      	str	r0, [r3, #0]
34003ce0:	4b0d      	ldr	r3, [pc, #52]	@ (34003d18 <aton_osal_freertos_init+0xb4>)
34003ce2:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
  _MakeCacheMutexAvailable_(_cache_mutex); // make it available

  /* Finalize IRQ handling (e.g. priority) */
  _FinalizeIRQHandling_();
}
34003ce6:	b002      	add	sp, #8
34003ce8:	bd10      	pop	{r4, pc}
34003cea:	bf00      	nop
34003cec:	340a3f24 	.word	0x340a3f24
34003cf0:	3402349e 	.word	0x3402349e
34003cf4:	34028171 	.word	0x34028171
34003cf8:	340234ae 	.word	0x340234ae
34003cfc:	340a3e30 	.word	0x340a3e30
34003d00:	340a3ed4 	.word	0x340a3ed4
34003d04:	340a3e2c 	.word	0x340a3e2c
34003d08:	340a3e84 	.word	0x340a3e84
34003d0c:	340a3e28 	.word	0x340a3e28
34003d10:	340a3e34 	.word	0x340a3e34
34003d14:	340a3e24 	.word	0x340a3e24
34003d18:	e000e100 	.word	0xe000e100

34003d1c <aton_osal_freertos_deinit>:
 * @brief De-initialize RTOS OSAL implementation
 */
void LL_ATON_OSAL_DEINIT()
{
  _DeInitNonDao_(); // de-initialize non DAO part
}
34003d1c:	4770      	bx	lr
	...

34003d20 <aton_osal_freertos_lock>:
#ifndef LL_HAS_NO_ATON_OSAL_LOCK_NPU_CACHE
/**
 * @brief Lock cache mutex
 */
void LL_ATON_OSAL_LOCK_NPU_CACHE()
{
34003d20:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _GetCacheMutex_(_cache_mutex);
34003d22:	4b07      	ldr	r3, [pc, #28]	@ (34003d40 <aton_osal_freertos_lock+0x20>)
34003d24:	f04f 31ff 	mov.w	r1, #4294967295
34003d28:	6818      	ldr	r0, [r3, #0]
34003d2a:	f006 f925 	bl	34009f78 <xQueueSemaphoreTake>
  assert(ret == _OsTrue_);
34003d2e:	2801      	cmp	r0, #1
34003d30:	d005      	beq.n	34003d3e <aton_osal_freertos_lock+0x1e>
34003d32:	21e2      	movs	r1, #226	@ 0xe2
34003d34:	4b03      	ldr	r3, [pc, #12]	@ (34003d44 <aton_osal_freertos_lock+0x24>)
34003d36:	4a04      	ldr	r2, [pc, #16]	@ (34003d48 <aton_osal_freertos_lock+0x28>)
34003d38:	4804      	ldr	r0, [pc, #16]	@ (34003d4c <aton_osal_freertos_lock+0x2c>)
34003d3a:	f019 fe57 	bl	3401d9ec <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
34003d3e:	bd08      	pop	{r3, pc}
34003d40:	340a3e24 	.word	0x340a3e24
34003d44:	3402349e 	.word	0x3402349e
34003d48:	34028159 	.word	0x34028159
34003d4c:	340234ae 	.word	0x340234ae

34003d50 <aton_osal_freertos_unlock>:

/**
 * @brief Unlock cache mutex
 */
void LL_ATON_OSAL_UNLOCK_NPU_CACHE()
{
34003d50:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _ReleaseCacheMutex_(_cache_mutex);
34003d52:	2300      	movs	r3, #0
34003d54:	4807      	ldr	r0, [pc, #28]	@ (34003d74 <aton_osal_freertos_unlock+0x24>)
34003d56:	461a      	mov	r2, r3
34003d58:	4619      	mov	r1, r3
34003d5a:	6800      	ldr	r0, [r0, #0]
34003d5c:	f005 ff68 	bl	34009c30 <xQueueGenericSend>
  assert(ret == _OsTrue_);
34003d60:	2801      	cmp	r0, #1
34003d62:	d005      	beq.n	34003d70 <aton_osal_freertos_unlock+0x20>
34003d64:	21ee      	movs	r1, #238	@ 0xee
34003d66:	4b04      	ldr	r3, [pc, #16]	@ (34003d78 <aton_osal_freertos_unlock+0x28>)
34003d68:	4a04      	ldr	r2, [pc, #16]	@ (34003d7c <aton_osal_freertos_unlock+0x2c>)
34003d6a:	4805      	ldr	r0, [pc, #20]	@ (34003d80 <aton_osal_freertos_unlock+0x30>)
34003d6c:	f019 fe3e 	bl	3401d9ec <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
34003d70:	bd08      	pop	{r3, pc}
34003d72:	bf00      	nop
34003d74:	340a3e24 	.word	0x340a3e24
34003d78:	3402349e 	.word	0x3402349e
34003d7c:	3402813f 	.word	0x3402813f
34003d80:	340234ae 	.word	0x340234ae

34003d84 <aton_osal_freertos_wfe>:

/**
 * @brief Wait for event
 */
void LL_ATON_OSAL_WFE()
{
34003d84:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _GetWfeSemaphore_(_wfe_sem);
34003d86:	4b08      	ldr	r3, [pc, #32]	@ (34003da8 <aton_osal_freertos_wfe+0x24>)
34003d88:	f04f 31ff 	mov.w	r1, #4294967295
34003d8c:	6818      	ldr	r0, [r3, #0]
34003d8e:	f006 f8f3 	bl	34009f78 <xQueueSemaphoreTake>
  assert(ret == _OsTrue_);
34003d92:	2801      	cmp	r0, #1
34003d94:	d006      	beq.n	34003da4 <aton_osal_freertos_wfe+0x20>
34003d96:	f240 1115 	movw	r1, #277	@ 0x115
34003d9a:	4b04      	ldr	r3, [pc, #16]	@ (34003dac <aton_osal_freertos_wfe+0x28>)
34003d9c:	4a04      	ldr	r2, [pc, #16]	@ (34003db0 <aton_osal_freertos_wfe+0x2c>)
34003d9e:	4805      	ldr	r0, [pc, #20]	@ (34003db4 <aton_osal_freertos_wfe+0x30>)
34003da0:	f019 fe24 	bl	3401d9ec <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
34003da4:	bd08      	pop	{r3, pc}
34003da6:	bf00      	nop
34003da8:	340a3e28 	.word	0x340a3e28
34003dac:	3402349e 	.word	0x3402349e
34003db0:	34028128 	.word	0x34028128
34003db4:	340234ae 	.word	0x340234ae

34003db8 <aton_osal_freertos_signal_event>:
 * @note  Define macro `RTOS_HAS_NO_ISR_SIGNAL` if signalling is not performed from an interrupt handler.
 *        Calling this function within the same application from both ISR and normal contexts is currently not
 *        supported!
 */
void LL_ATON_OSAL_SIGNAL_EVENT()
{
34003db8:	b507      	push	{r0, r1, r2, lr}
  assert(ret == _OsTrue_);
#else  // !RTOS_HAS_NO_ISR_SIGNAL
  _ReturnType_ task_woken;

  _HeadIsrCode_();
  ret = _ReleaseWfeSemaphoreISR_(
34003dba:	4b0c      	ldr	r3, [pc, #48]	@ (34003dec <aton_osal_freertos_signal_event+0x34>)
34003dbc:	a901      	add	r1, sp, #4
34003dbe:	6818      	ldr	r0, [r3, #0]
34003dc0:	f005 ffee 	bl	34009da0 <xQueueGiveFromISR>
      _wfe_sem, &task_woken); // assuming that this function gets called from within an interrupt handler
  assert(ret == _OsTrue_);
34003dc4:	2801      	cmp	r0, #1
34003dc6:	d006      	beq.n	34003dd6 <aton_osal_freertos_signal_event+0x1e>
34003dc8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
34003dcc:	4b08      	ldr	r3, [pc, #32]	@ (34003df0 <aton_osal_freertos_signal_event+0x38>)
34003dce:	4a09      	ldr	r2, [pc, #36]	@ (34003df4 <aton_osal_freertos_signal_event+0x3c>)
34003dd0:	4809      	ldr	r0, [pc, #36]	@ (34003df8 <aton_osal_freertos_signal_event+0x40>)
34003dd2:	f019 fe0b 	bl	3401d9ec <__assert_func>
  _TailIsrCode_(task_woken);
34003dd6:	9b01      	ldr	r3, [sp, #4]
34003dd8:	b12b      	cbz	r3, 34003de6 <aton_osal_freertos_signal_event+0x2e>
34003dda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
34003dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34003de2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

  LL_ATON_LIB_UNUSED(task_woken);
#endif // !RTOS_HAS_NO_ISR_SIGNAL

  LL_ATON_LIB_UNUSED(ret);
}
34003de6:	b003      	add	sp, #12
34003de8:	f85d fb04 	ldr.w	pc, [sp], #4
34003dec:	340a3e28 	.word	0x340a3e28
34003df0:	3402349e 	.word	0x3402349e
34003df4:	34028108 	.word	0x34028108
34003df8:	340234ae 	.word	0x340234ae

34003dfc <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
34003dfc:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
34003dfe:	4604      	mov	r4, r0
34003e00:	b928      	cbnz	r0, 34003e0e <LL_ATON_RT_Main+0x12>
34003e02:	212f      	movs	r1, #47	@ 0x2f
34003e04:	4b10      	ldr	r3, [pc, #64]	@ (34003e48 <LL_ATON_RT_Main+0x4c>)
34003e06:	4a11      	ldr	r2, [pc, #68]	@ (34003e4c <LL_ATON_RT_Main+0x50>)
  LL_ATON_ASSERT(network_instance->network != NULL);
34003e08:	4811      	ldr	r0, [pc, #68]	@ (34003e50 <LL_ATON_RT_Main+0x54>)
34003e0a:	f019 fdef 	bl	3401d9ec <__assert_func>
34003e0e:	6803      	ldr	r3, [r0, #0]
34003e10:	b91b      	cbnz	r3, 34003e1a <LL_ATON_RT_Main+0x1e>
34003e12:	2130      	movs	r1, #48	@ 0x30
34003e14:	4b0f      	ldr	r3, [pc, #60]	@ (34003e54 <LL_ATON_RT_Main+0x58>)
34003e16:	4a0d      	ldr	r2, [pc, #52]	@ (34003e4c <LL_ATON_RT_Main+0x50>)
34003e18:	e7f6      	b.n	34003e08 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
34003e1a:	f000 fa11 	bl	34004240 <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
34003e1e:	4620      	mov	r0, r4
34003e20:	f000 f9cc 	bl	340041bc <LL_ATON_RT_Init_Network>

  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
34003e24:	4620      	mov	r0, r4
34003e26:	f000 fa89 	bl	3400433c <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
34003e2a:	2801      	cmp	r0, #1
34003e2c:	d102      	bne.n	34003e34 <LL_ATON_RT_Main+0x38>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
34003e2e:	f7ff ffa9 	bl	34003d84 <aton_osal_freertos_wfe>
    }
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
34003e32:	e7f7      	b.n	34003e24 <LL_ATON_RT_Main+0x28>
34003e34:	2802      	cmp	r0, #2
34003e36:	d1f5      	bne.n	34003e24 <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
34003e38:	4620      	mov	r0, r4
34003e3a:	f000 f9e3 	bl	34004204 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
34003e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
34003e42:	f000 ba49 	b.w	340042d8 <LL_ATON_RT_RuntimeDeInit>
34003e46:	bf00      	nop
34003e48:	34023501 	.word	0x34023501
34003e4c:	34028189 	.word	0x34028189
34003e50:	34023521 	.word	0x34023521
34003e54:	34023569 	.word	0x34023569

34003e58 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
34003e58:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34003e5a:	4604      	mov	r4, r0
34003e5c:	b310      	cbz	r0, 34003ea4 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
34003e5e:	6803      	ldr	r3, [r0, #0]
34003e60:	b303      	cbz	r3, 34003ea4 <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
34003e62:	69db      	ldr	r3, [r3, #28]
34003e64:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
34003e66:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
34003e68:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34003e6a:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
34003e6c:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
34003e6e:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
34003e70:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
34003e72:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
34003e74:	b9a3      	cbnz	r3, 34003ea0 <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
34003e76:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
34003e78:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34003e7a:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34003e7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34003e7e:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
34003e80:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
34003e82:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
34003e84:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34003e88:	b163      	cbz	r3, 34003ea4 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
34003e8a:	4621      	mov	r1, r4
  }
}
34003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
34003e90:	2004      	movs	r0, #4
34003e92:	4718      	bx	r3
      list++;
34003e94:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34003e96:	3201      	adds	r2, #1
34003e98:	8a19      	ldrh	r1, [r3, #16]
34003e9a:	0709      	lsls	r1, r1, #28
34003e9c:	d5fa      	bpl.n	34003e94 <__LL_ATON_RT_Init_Network+0x3c>
34003e9e:	e7eb      	b.n	34003e78 <__LL_ATON_RT_Init_Network+0x20>
34003ea0:	2201      	movs	r2, #1
34003ea2:	e7f9      	b.n	34003e98 <__LL_ATON_RT_Init_Network+0x40>
}
34003ea4:	bd10      	pop	{r4, pc}
	...

34003ea8 <__ll_clear_aton_owner>:
  {
34003ea8:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
34003eaa:	4b09      	ldr	r3, [pc, #36]	@ (34003ed0 <__ll_clear_aton_owner+0x28>)
34003eac:	681a      	ldr	r2, [r3, #0]
34003eae:	4282      	cmp	r2, r0
34003eb0:	d005      	beq.n	34003ebe <__ll_clear_aton_owner+0x16>
34003eb2:	2142      	movs	r1, #66	@ 0x42
34003eb4:	4b07      	ldr	r3, [pc, #28]	@ (34003ed4 <__ll_clear_aton_owner+0x2c>)
34003eb6:	4a08      	ldr	r2, [pc, #32]	@ (34003ed8 <__ll_clear_aton_owner+0x30>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34003eb8:	4808      	ldr	r0, [pc, #32]	@ (34003edc <__ll_clear_aton_owner+0x34>)
34003eba:	f019 fd97 	bl	3401d9ec <__assert_func>
34003ebe:	4a08      	ldr	r2, [pc, #32]	@ (34003ee0 <__ll_clear_aton_owner+0x38>)
34003ec0:	6812      	ldr	r2, [r2, #0]
34003ec2:	b11a      	cbz	r2, 34003ecc <__ll_clear_aton_owner+0x24>
34003ec4:	2146      	movs	r1, #70	@ 0x46
34003ec6:	4b07      	ldr	r3, [pc, #28]	@ (34003ee4 <__ll_clear_aton_owner+0x3c>)
34003ec8:	4a03      	ldr	r2, [pc, #12]	@ (34003ed8 <__ll_clear_aton_owner+0x30>)
34003eca:	e7f5      	b.n	34003eb8 <__ll_clear_aton_owner+0x10>
    __ll_current_aton_ip_owner = NULL;
34003ecc:	601a      	str	r2, [r3, #0]
  }
34003ece:	bd08      	pop	{r3, pc}
34003ed0:	340a3f7c 	.word	0x340a3f7c
34003ed4:	34023592 	.word	0x34023592
34003ed8:	340282e7 	.word	0x340282e7
34003edc:	3402301c 	.word	0x3402301c
34003ee0:	340a3f78 	.word	0x340a3f78
34003ee4:	340235be 	.word	0x340235be

34003ee8 <__LL_ATON_RT_SetWaitMask>:
  {
34003ee8:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34003eea:	4b07      	ldr	r3, [pc, #28]	@ (34003f08 <__LL_ATON_RT_SetWaitMask+0x20>)
34003eec:	681b      	ldr	r3, [r3, #0]
34003eee:	b92b      	cbnz	r3, 34003efc <__LL_ATON_RT_SetWaitMask+0x14>
34003ef0:	2175      	movs	r1, #117	@ 0x75
34003ef2:	4b06      	ldr	r3, [pc, #24]	@ (34003f0c <__LL_ATON_RT_SetWaitMask+0x24>)
34003ef4:	4a06      	ldr	r2, [pc, #24]	@ (34003f10 <__LL_ATON_RT_SetWaitMask+0x28>)
34003ef6:	4807      	ldr	r0, [pc, #28]	@ (34003f14 <__LL_ATON_RT_SetWaitMask+0x2c>)
34003ef8:	f019 fd78 	bl	3401d9ec <__assert_func>
    __ll_current_wait_mask = wait_mask;
34003efc:	4b06      	ldr	r3, [pc, #24]	@ (34003f18 <__LL_ATON_RT_SetWaitMask+0x30>)
34003efe:	6018      	str	r0, [r3, #0]
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
34003f00:	43c0      	mvns	r0, r0
34003f02:	4b06      	ldr	r3, [pc, #24]	@ (34003f1c <__LL_ATON_RT_SetWaitMask+0x34>)
34003f04:	6258      	str	r0, [r3, #36]	@ 0x24
  }
34003f06:	bd08      	pop	{r3, pc}
34003f08:	340a3f7c 	.word	0x340a3f7c
34003f0c:	34022ff2 	.word	0x34022ff2
34003f10:	3402823a 	.word	0x3402823a
34003f14:	3402301c 	.word	0x3402301c
34003f18:	340a3f78 	.word	0x340a3f78
34003f1c:	580e1000 	.word	0x580e1000

34003f20 <EpochBlock_EpochControllerUnit>:
  {
34003f20:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
34003f22:	8a03      	ldrh	r3, [r0, #16]
34003f24:	075b      	lsls	r3, r3, #29
34003f26:	d406      	bmi.n	34003f36 <EpochBlock_EpochControllerUnit+0x16>
34003f28:	f240 212f 	movw	r1, #559	@ 0x22f
34003f2c:	4b03      	ldr	r3, [pc, #12]	@ (34003f3c <EpochBlock_EpochControllerUnit+0x1c>)
34003f2e:	4a04      	ldr	r2, [pc, #16]	@ (34003f40 <EpochBlock_EpochControllerUnit+0x20>)
34003f30:	4804      	ldr	r0, [pc, #16]	@ (34003f44 <EpochBlock_EpochControllerUnit+0x24>)
34003f32:	f019 fd5b 	bl	3401d9ec <__assert_func>
  }
34003f36:	68c0      	ldr	r0, [r0, #12]
34003f38:	bd08      	pop	{r3, pc}
34003f3a:	bf00      	nop
34003f3c:	340235da 	.word	0x340235da
34003f40:	3402821b 	.word	0x3402821b
34003f44:	340235f5 	.word	0x340235f5

34003f48 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34003f48:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
34003f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34003f4e:	4605      	mov	r5, r0
34003f50:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34003f52:	b113      	cbz	r3, 34003f5a <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
34003f54:	4602      	mov	r2, r0
34003f56:	2002      	movs	r0, #2
34003f58:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
34003f5a:	8a2b      	ldrh	r3, [r5, #16]
34003f5c:	0758      	lsls	r0, r3, #29
34003f5e:	d518      	bpl.n	34003f92 <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
34003f60:	4628      	mov	r0, r5
34003f62:	f7ff ffdd 	bl	34003f20 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34003f66:	b128      	cbz	r0, 34003f74 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
34003f68:	21c2      	movs	r1, #194	@ 0xc2
34003f6a:	4b25      	ldr	r3, [pc, #148]	@ (34004000 <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
34003f6c:	4a25      	ldr	r2, [pc, #148]	@ (34004004 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
34003f6e:	4826      	ldr	r0, [pc, #152]	@ (34004008 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
34003f70:	f019 fd3c 	bl	3401d9ec <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
34003f74:	2202      	movs	r2, #2
34003f76:	4b25      	ldr	r3, [pc, #148]	@ (3400400c <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
34003f78:	601a      	str	r2, [r3, #0]
34003f7a:	681a      	ldr	r2, [r3, #0]
34003f7c:	0791      	lsls	r1, r2, #30
34003f7e:	d4fc      	bmi.n	34003f7a <__LL_ATON_RT_ExecEndEpochBlock+0x32>
34003f80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34003f84:	601a      	str	r2, [r3, #0]
34003f86:	681a      	ldr	r2, [r3, #0]
34003f88:	0052      	lsls	r2, r2, #1
34003f8a:	d4fc      	bmi.n	34003f86 <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
34003f8c:	2019      	movs	r0, #25
34003f8e:	f7fe ff71 	bl	34002e74 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
34003f92:	686b      	ldr	r3, [r5, #4]
34003f94:	b10b      	cbz	r3, 34003f9a <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
34003f96:	4628      	mov	r0, r5
34003f98:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
34003f9a:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
34003f9c:	f016 0f90 	tst.w	r6, #144	@ 0x90
34003fa0:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
34003fa4:	d108      	bne.n	34003fb8 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
34003fa6:	bb0f      	cbnz	r7, 34003fec <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
34003fa8:	4b19      	ldr	r3, [pc, #100]	@ (34004010 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
34003faa:	681b      	ldr	r3, [r3, #0]
34003fac:	42a3      	cmp	r3, r4
34003fae:	d115      	bne.n	34003fdc <__LL_ATON_RT_ExecEndEpochBlock+0x94>
34003fb0:	21ed      	movs	r1, #237	@ 0xed
34003fb2:	4b18      	ldr	r3, [pc, #96]	@ (34004014 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
34003fb4:	4a13      	ldr	r2, [pc, #76]	@ (34004004 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
34003fb6:	e7da      	b.n	34003f6e <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
34003fb8:	4b15      	ldr	r3, [pc, #84]	@ (34004010 <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
34003fba:	681b      	ldr	r3, [r3, #0]
34003fbc:	42a3      	cmp	r3, r4
34003fbe:	d003      	beq.n	34003fc8 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
34003fc0:	21e1      	movs	r1, #225	@ 0xe1
34003fc2:	4b15      	ldr	r3, [pc, #84]	@ (34004018 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
34003fc4:	4a0f      	ldr	r2, [pc, #60]	@ (34004004 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
34003fc6:	e7d2      	b.n	34003f6e <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
34003fc8:	2000      	movs	r0, #0
34003fca:	f7ff ff8d 	bl	34003ee8 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
34003fce:	06f3      	lsls	r3, r6, #27
34003fd0:	d5e9      	bpl.n	34003fa6 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
34003fd2:	4620      	mov	r0, r4
34003fd4:	f7ff ff68 	bl	34003ea8 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
34003fd8:	2f00      	cmp	r7, #0
34003fda:	d0e5      	beq.n	34003fa8 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34003fdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34003fde:	b163      	cbz	r3, 34003ffa <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
34003fe0:	462a      	mov	r2, r5
34003fe2:	4621      	mov	r1, r4
}
34003fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
34003fe8:	2003      	movs	r0, #3
34003fea:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
34003fec:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
34003fee:	2b00      	cmp	r3, #0
34003ff0:	d1f4      	bne.n	34003fdc <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
34003ff2:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
34003ff4:	2b00      	cmp	r3, #0
34003ff6:	d1f1      	bne.n	34003fdc <__LL_ATON_RT_ExecEndEpochBlock+0x94>
34003ff8:	e7eb      	b.n	34003fd2 <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
34003ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34003ffe:	bf00      	nop
34004000:	34023642 	.word	0x34023642
34004004:	340281fc 	.word	0x340281fc
34004008:	3402364b 	.word	0x3402364b
3400400c:	580fe000 	.word	0x580fe000
34004010:	340a3f7c 	.word	0x340a3f7c
34004014:	340236bd 	.word	0x340236bd
34004018:	34023693 	.word	0x34023693

3400401c <__LL_ATON_RT_DetermineNextEpochBlock>:
{
3400401c:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400401e:	b928      	cbnz	r0, 3400402c <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
34004020:	21f8      	movs	r1, #248	@ 0xf8
34004022:	4b1a      	ldr	r3, [pc, #104]	@ (3400408c <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
34004024:	4a1a      	ldr	r2, [pc, #104]	@ (34004090 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
34004026:	481b      	ldr	r0, [pc, #108]	@ (34004094 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
34004028:	f019 fce0 	bl	3401d9ec <__assert_func>
3400402c:	69c3      	ldr	r3, [r0, #28]
3400402e:	b11b      	cbz	r3, 34004038 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
34004030:	21fa      	movs	r1, #250	@ 0xfa
34004032:	4b19      	ldr	r3, [pc, #100]	@ (34004098 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
34004034:	4a16      	ldr	r2, [pc, #88]	@ (34004090 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
34004036:	e7f6      	b.n	34004026 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
34004038:	68c3      	ldr	r3, [r0, #12]
3400403a:	b313      	cbz	r3, 34004082 <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
3400403c:	6903      	ldr	r3, [r0, #16]
3400403e:	b123      	cbz	r3, 3400404a <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
34004040:	f44f 7181 	mov.w	r1, #258	@ 0x102
34004044:	4b15      	ldr	r3, [pc, #84]	@ (3400409c <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
34004046:	4a12      	ldr	r2, [pc, #72]	@ (34004090 <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
34004048:	e7ed      	b.n	34004026 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
3400404a:	6843      	ldr	r3, [r0, #4]
3400404c:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
3400404e:	6883      	ldr	r3, [r0, #8]
34004050:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
34004052:	6a43      	ldr	r3, [r0, #36]	@ 0x24
34004054:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
34004056:	68c3      	ldr	r3, [r0, #12]
34004058:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
3400405a:	68c3      	ldr	r3, [r0, #12]
3400405c:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400405e:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
34004060:	b96b      	cbnz	r3, 3400407e <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
34004062:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
34004064:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
34004066:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
34004068:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
3400406a:	2300      	movs	r3, #0
3400406c:	f880 3020 	strb.w	r3, [r0, #32]
}
34004070:	bd08      	pop	{r3, pc}
      list++;
34004072:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34004074:	3201      	adds	r2, #1
34004076:	8a19      	ldrh	r1, [r3, #16]
34004078:	0709      	lsls	r1, r1, #28
3400407a:	d5fa      	bpl.n	34004072 <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
3400407c:	e7f2      	b.n	34004064 <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400407e:	2201      	movs	r2, #1
34004080:	e7f9      	b.n	34004076 <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
34004082:	6843      	ldr	r3, [r0, #4]
34004084:	3314      	adds	r3, #20
34004086:	6043      	str	r3, [r0, #4]
34004088:	e7ef      	b.n	3400406a <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
3400408a:	bf00      	nop
3400408c:	3402372b 	.word	0x3402372b
34004090:	340281d7 	.word	0x340281d7
34004094:	3402364b 	.word	0x3402364b
34004098:	34023746 	.word	0x34023746
3400409c:	34023776 	.word	0x34023776

340040a0 <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
340040a0:	4770      	bx	lr
	...

340040a4 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
340040a4:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
340040a6:	4604      	mov	r4, r0
340040a8:	2800      	cmp	r0, #0
340040aa:	d05b      	beq.n	34004164 <__LL_ATON_RT_IrqErr+0xc0>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
340040ac:	4b2e      	ldr	r3, [pc, #184]	@ (34004168 <__LL_ATON_RT_IrqErr+0xc4>)
340040ae:	4003      	ands	r3, r0
340040b0:	d007      	beq.n	340040c2 <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
340040b2:	4259      	negs	r1, r3
340040b4:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
340040b6:	4b2d      	ldr	r3, [pc, #180]	@ (3400416c <__LL_ATON_RT_IrqErr+0xc8>)
340040b8:	030a      	lsls	r2, r1, #12
340040ba:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
340040bc:	482c      	ldr	r0, [pc, #176]	@ (34004170 <__LL_ATON_RT_IrqErr+0xcc>)
340040be:	f01a fb41 	bl	3401e744 <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
340040c2:	f3c4 0309 	ubfx	r3, r4, #0, #10
340040c6:	b113      	cbz	r3, 340040ce <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
340040c8:	482a      	ldr	r0, [pc, #168]	@ (34004174 <__LL_ATON_RT_IrqErr+0xd0>)
340040ca:	f01a fba3 	bl	3401e814 <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
340040ce:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
340040d2:	d002      	beq.n	340040da <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
340040d4:	4828      	ldr	r0, [pc, #160]	@ (34004178 <__LL_ATON_RT_IrqErr+0xd4>)
340040d6:	f01a fb9d 	bl	3401e814 <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
340040da:	01e5      	lsls	r5, r4, #7
340040dc:	d502      	bpl.n	340040e4 <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
340040de:	4827      	ldr	r0, [pc, #156]	@ (3400417c <__LL_ATON_RT_IrqErr+0xd8>)
340040e0:	f01a fb98 	bl	3401e814 <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
340040e4:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
340040e8:	d00e      	beq.n	34004108 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
340040ea:	4825      	ldr	r0, [pc, #148]	@ (34004180 <__LL_ATON_RT_IrqErr+0xdc>)
340040ec:	f01a fb92 	bl	3401e814 <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
340040f0:	4b24      	ldr	r3, [pc, #144]	@ (34004184 <__LL_ATON_RT_IrqErr+0xe0>)
340040f2:	2100      	movs	r1, #0
340040f4:	691a      	ldr	r2, [r3, #16]
340040f6:	4824      	ldr	r0, [pc, #144]	@ (34004188 <__LL_ATON_RT_IrqErr+0xe4>)
340040f8:	f01a fb24 	bl	3401e744 <iprintf>
340040fc:	4b23      	ldr	r3, [pc, #140]	@ (3400418c <__LL_ATON_RT_IrqErr+0xe8>)
340040fe:	2101      	movs	r1, #1
34004100:	691a      	ldr	r2, [r3, #16]
34004102:	4821      	ldr	r0, [pc, #132]	@ (34004188 <__LL_ATON_RT_IrqErr+0xe4>)
34004104:	f01a fb1e 	bl	3401e744 <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
34004108:	0120      	lsls	r0, r4, #4
3400410a:	d502      	bpl.n	34004112 <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
3400410c:	4820      	ldr	r0, [pc, #128]	@ (34004190 <__LL_ATON_RT_IrqErr+0xec>)
3400410e:	f01a fb81 	bl	3401e814 <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
34004112:	0061      	lsls	r1, r4, #1
34004114:	d50c      	bpl.n	34004130 <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
34004116:	4d1f      	ldr	r5, [pc, #124]	@ (34004194 <__LL_ATON_RT_IrqErr+0xf0>)
34004118:	481f      	ldr	r0, [pc, #124]	@ (34004198 <__LL_ATON_RT_IrqErr+0xf4>)
3400411a:	68e9      	ldr	r1, [r5, #12]
3400411c:	f01a fb12 	bl	3401e744 <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
34004120:	6a29      	ldr	r1, [r5, #32]
34004122:	481e      	ldr	r0, [pc, #120]	@ (3400419c <__LL_ATON_RT_IrqErr+0xf8>)
34004124:	f01a fb0e 	bl	3401e744 <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
34004128:	69e9      	ldr	r1, [r5, #28]
3400412a:	481d      	ldr	r0, [pc, #116]	@ (340041a0 <__LL_ATON_RT_IrqErr+0xfc>)
3400412c:	f01a fb0a 	bl	3401e744 <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
34004130:	00a2      	lsls	r2, r4, #2
34004132:	d502      	bpl.n	3400413a <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
34004134:	481b      	ldr	r0, [pc, #108]	@ (340041a4 <__LL_ATON_RT_IrqErr+0x100>)
34004136:	f01a fb6d 	bl	3401e814 <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
3400413a:	00e3      	lsls	r3, r4, #3
3400413c:	d502      	bpl.n	34004144 <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
3400413e:	481a      	ldr	r0, [pc, #104]	@ (340041a8 <__LL_ATON_RT_IrqErr+0x104>)
34004140:	f01a fb68 	bl	3401e814 <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
34004144:	f7ff ffac 	bl	340040a0 <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
34004148:	4622      	mov	r2, r4
3400414a:	2300      	movs	r3, #0
3400414c:	f240 314a 	movw	r1, #842	@ 0x34a
34004150:	4816      	ldr	r0, [pc, #88]	@ (340041ac <__LL_ATON_RT_IrqErr+0x108>)
34004152:	f01a faf7 	bl	3401e744 <iprintf>
#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
#endif
  LL_ATON_ASSERT(false); // may never happen
34004156:	f240 314e 	movw	r1, #846	@ 0x34e
3400415a:	4b15      	ldr	r3, [pc, #84]	@ (340041b0 <__LL_ATON_RT_IrqErr+0x10c>)
3400415c:	4a15      	ldr	r2, [pc, #84]	@ (340041b4 <__LL_ATON_RT_IrqErr+0x110>)
3400415e:	4816      	ldr	r0, [pc, #88]	@ (340041b8 <__LL_ATON_RT_IrqErr+0x114>)
34004160:	f019 fc44 	bl	3401d9ec <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
34004164:	bd38      	pop	{r3, r4, r5, pc}
34004166:	bf00      	nop
34004168:	000ffc00 	.word	0x000ffc00
3400416c:	580e503c 	.word	0x580e503c
34004170:	340237b7 	.word	0x340237b7
34004174:	340237e4 	.word	0x340237e4
34004178:	3402380a 	.word	0x3402380a
3400417c:	3402382e 	.word	0x3402382e
34004180:	3402384e 	.word	0x3402384e
34004184:	580e2000 	.word	0x580e2000
34004188:	34023866 	.word	0x34023866
3400418c:	580e3000 	.word	0x580e3000
34004190:	3402387b 	.word	0x3402387b
34004194:	580fe000 	.word	0x580fe000
34004198:	34023893 	.word	0x34023893
3400419c:	340238c7 	.word	0x340238c7
340041a0:	340238f1 	.word	0x340238f1
340041a4:	34023912 	.word	0x34023912
340041a8:	34023933 	.word	0x34023933
340041ac:	3402394e 	.word	0x3402394e
340041b0:	340235d8 	.word	0x340235d8
340041b4:	340281b3 	.word	0x340281b3
340041b8:	3402364b 	.word	0x3402364b

340041bc <LL_ATON_RT_Init_Network>:
{
340041bc:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
340041be:	4604      	mov	r4, r0
340041c0:	b1b0      	cbz	r0, 340041f0 <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
340041c2:	6803      	ldr	r3, [r0, #0]
340041c4:	b1a3      	cbz	r3, 340041f0 <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
340041c6:	685b      	ldr	r3, [r3, #4]
340041c8:	b933      	cbnz	r3, 340041d8 <LL_ATON_RT_Init_Network+0x1c>
340041ca:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
340041ce:	4b09      	ldr	r3, [pc, #36]	@ (340041f4 <LL_ATON_RT_Init_Network+0x38>)
340041d0:	4a09      	ldr	r2, [pc, #36]	@ (340041f8 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
340041d2:	480a      	ldr	r0, [pc, #40]	@ (340041fc <LL_ATON_RT_Init_Network+0x40>)
340041d4:	f019 fc0a 	bl	3401d9ec <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
340041d8:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
340041da:	b920      	cbnz	r0, 340041e6 <LL_ATON_RT_Init_Network+0x2a>
340041dc:	f240 11a9 	movw	r1, #425	@ 0x1a9
340041e0:	4b07      	ldr	r3, [pc, #28]	@ (34004200 <LL_ATON_RT_Init_Network+0x44>)
340041e2:	4a05      	ldr	r2, [pc, #20]	@ (340041f8 <LL_ATON_RT_Init_Network+0x3c>)
340041e4:	e7f5      	b.n	340041d2 <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
340041e6:	4620      	mov	r0, r4
}
340041e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
340041ec:	f7ff be34 	b.w	34003e58 <__LL_ATON_RT_Init_Network>
}
340041f0:	bd10      	pop	{r4, pc}
340041f2:	bf00      	nop
340041f4:	34023975 	.word	0x34023975
340041f8:	340282fd 	.word	0x340282fd
340041fc:	3402364b 	.word	0x3402364b
34004200:	340239aa 	.word	0x340239aa

34004204 <LL_ATON_RT_DeInit_Network>:
{
34004204:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
34004206:	4604      	mov	r4, r0
34004208:	b1b8      	cbz	r0, 3400423a <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400420a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400420c:	b11b      	cbz	r3, 34004216 <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
3400420e:	4601      	mov	r1, r0
34004210:	2200      	movs	r2, #0
34004212:	2005      	movs	r0, #5
34004214:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
34004216:	4b09      	ldr	r3, [pc, #36]	@ (3400423c <LL_ATON_RT_DeInit_Network+0x38>)
34004218:	681b      	ldr	r3, [r3, #0]
3400421a:	42a3      	cmp	r3, r4
3400421c:	d102      	bne.n	34004224 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
3400421e:	4620      	mov	r0, r4
34004220:	f7ff fe42 	bl	34003ea8 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
34004224:	2300      	movs	r3, #0
34004226:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34004228:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
3400422a:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400422c:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400422e:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
34004230:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34004232:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
34004234:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
34004236:	f884 3020 	strb.w	r3, [r4, #32]
}
3400423a:	bd10      	pop	{r4, pc}
3400423c:	340a3f7c 	.word	0x340a3f7c

34004240 <LL_ATON_RT_RuntimeInit>:
{
34004240:	b510      	push	{r4, lr}
  LL_ATON_Init();
34004242:	f7fe f81b 	bl	3400227c <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
34004246:	2202      	movs	r2, #2
34004248:	4b20      	ldr	r3, [pc, #128]	@ (340042cc <LL_ATON_RT_RuntimeInit+0x8c>)
3400424a:	601a      	str	r2, [r3, #0]
3400424c:	681a      	ldr	r2, [r3, #0]
3400424e:	0791      	lsls	r1, r2, #30
34004250:	d4fc      	bmi.n	3400424c <LL_ATON_RT_RuntimeInit+0xc>
34004252:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004256:	601a      	str	r2, [r3, #0]
34004258:	681a      	ldr	r2, [r3, #0]
3400425a:	0052      	lsls	r2, r2, #1
3400425c:	d4fc      	bmi.n	34004258 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400425e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
34004262:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
34004264:	f04f 32ff 	mov.w	r2, #4294967295
34004268:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
3400426a:	681a      	ldr	r2, [r3, #0]
3400426c:	f042 0201 	orr.w	r2, r2, #1
34004270:	601a      	str	r2, [r3, #0]
  LL_ATON_OSAL_INIT();
34004272:	f7ff fcf7 	bl	34003c64 <aton_osal_freertos_init>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004276:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400427a:	4b15      	ldr	r3, [pc, #84]	@ (340042d0 <LL_ATON_RT_RuntimeInit+0x90>)
3400427c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34004280:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004284:	f3bf 8f6f 	isb	sy
34004288:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400428c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34004290:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004294:	f3bf 8f6f 	isb	sy
34004298:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
3400429c:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340042a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340042a4:	f3bf 8f6f 	isb	sy
340042a8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
340042ac:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340042b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340042b4:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
340042b8:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
340042ba:	4b06      	ldr	r3, [pc, #24]	@ (340042d4 <LL_ATON_RT_RuntimeInit+0x94>)
340042bc:	681b      	ldr	r3, [r3, #0]
340042be:	b11b      	cbz	r3, 340042c8 <LL_ATON_RT_RuntimeInit+0x88>
}
340042c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
340042c4:	2006      	movs	r0, #6
340042c6:	4718      	bx	r3
}
340042c8:	bd10      	pop	{r4, pc}
340042ca:	bf00      	nop
340042cc:	580e1000 	.word	0x580e1000
340042d0:	e000e100 	.word	0xe000e100
340042d4:	340a3f74 	.word	0x340a3f74

340042d8 <LL_ATON_RT_RuntimeDeInit>:
{
340042d8:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
340042da:	4b16      	ldr	r3, [pc, #88]	@ (34004334 <LL_ATON_RT_RuntimeDeInit+0x5c>)
340042dc:	681b      	ldr	r3, [r3, #0]
340042de:	b10b      	cbz	r3, 340042e4 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
340042e0:	2007      	movs	r0, #7
340042e2:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
340042e4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
340042e8:	4b13      	ldr	r3, [pc, #76]	@ (34004338 <LL_ATON_RT_RuntimeDeInit+0x60>)
340042ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340042ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340042f2:	f3bf 8f6f 	isb	sy
340042f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
340042fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340042fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004302:	f3bf 8f6f 	isb	sy
34004306:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400430a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400430e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004312:	f3bf 8f6f 	isb	sy
34004316:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400431a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400431e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004322:	f3bf 8f6f 	isb	sy
  LL_ATON_OSAL_DEINIT();
34004326:	f7ff fcf9 	bl	34003d1c <aton_osal_freertos_deinit>
}
3400432a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
3400432e:	f7fe ba41 	b.w	340027b4 <LL_ATON_DeInit>
34004332:	bf00      	nop
34004334:	340a3f74 	.word	0x340a3f74
34004338:	e000e100 	.word	0xe000e100

3400433c <LL_ATON_RT_RunEpochBlock>:
{
3400433c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
3400433e:	4604      	mov	r4, r0
34004340:	b930      	cbnz	r0, 34004350 <LL_ATON_RT_RunEpochBlock+0x14>
34004342:	f44f 7110 	mov.w	r1, #576	@ 0x240
34004346:	4b8c      	ldr	r3, [pc, #560]	@ (34004578 <LL_ATON_RT_RunEpochBlock+0x23c>)
34004348:	4a8c      	ldr	r2, [pc, #560]	@ (3400457c <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
3400434a:	488d      	ldr	r0, [pc, #564]	@ (34004580 <LL_ATON_RT_RunEpochBlock+0x244>)
3400434c:	f019 fb4e 	bl	3401d9ec <__assert_func>
34004350:	6843      	ldr	r3, [r0, #4]
34004352:	b923      	cbnz	r3, 3400435e <LL_ATON_RT_RunEpochBlock+0x22>
34004354:	f240 2143 	movw	r1, #579	@ 0x243
34004358:	4b8a      	ldr	r3, [pc, #552]	@ (34004584 <LL_ATON_RT_RunEpochBlock+0x248>)
3400435a:	4a88      	ldr	r2, [pc, #544]	@ (3400457c <LL_ATON_RT_RunEpochBlock+0x240>)
3400435c:	e7f5      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400435e:	7e03      	ldrb	r3, [r0, #24]
34004360:	b98b      	cbnz	r3, 34004386 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
34004362:	6803      	ldr	r3, [r0, #0]
34004364:	b10b      	cbz	r3, 3400436a <LL_ATON_RT_RunEpochBlock+0x2e>
34004366:	689b      	ldr	r3, [r3, #8]
34004368:	b923      	cbnz	r3, 34004374 <LL_ATON_RT_RunEpochBlock+0x38>
3400436a:	f240 2155 	movw	r1, #597	@ 0x255
3400436e:	4b86      	ldr	r3, [pc, #536]	@ (34004588 <LL_ATON_RT_RunEpochBlock+0x24c>)
34004370:	4a82      	ldr	r2, [pc, #520]	@ (3400457c <LL_ATON_RT_RunEpochBlock+0x240>)
34004372:	e7ea      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
34004374:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
34004376:	b920      	cbnz	r0, 34004382 <LL_ATON_RT_RunEpochBlock+0x46>
34004378:	f240 2159 	movw	r1, #601	@ 0x259
3400437c:	4b83      	ldr	r3, [pc, #524]	@ (3400458c <LL_ATON_RT_RunEpochBlock+0x250>)
3400437e:	4a7f      	ldr	r2, [pc, #508]	@ (3400457c <LL_ATON_RT_RunEpochBlock+0x240>)
34004380:	e7e3      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
34004382:	2301      	movs	r3, #1
34004384:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
34004386:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
34004388:	8a03      	ldrh	r3, [r0, #16]
3400438a:	075a      	lsls	r2, r3, #29
3400438c:	d512      	bpl.n	340043b4 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400438e:	f7ff fdc7 	bl	34003f20 <EpochBlock_EpochControllerUnit>
34004392:	2301      	movs	r3, #1
34004394:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
34004398:	f894 3020 	ldrb.w	r3, [r4, #32]
3400439c:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
340043a0:	b343      	cbz	r3, 340043f4 <LL_ATON_RT_RunEpochBlock+0xb8>
340043a2:	2800      	cmp	r0, #0
340043a4:	d036      	beq.n	34004414 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
340043a6:	69e3      	ldr	r3, [r4, #28]
340043a8:	ea30 0303 	bics.w	r3, r0, r3
340043ac:	d004      	beq.n	340043b8 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
340043ae:	2001      	movs	r0, #1
}
340043b0:	b002      	add	sp, #8
340043b2:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
340043b4:	68c0      	ldr	r0, [r0, #12]
340043b6:	e7ef      	b.n	34004398 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
340043b8:	4b75      	ldr	r3, [pc, #468]	@ (34004590 <LL_ATON_RT_RunEpochBlock+0x254>)
340043ba:	681b      	ldr	r3, [r3, #0]
340043bc:	42a3      	cmp	r3, r4
340043be:	d004      	beq.n	340043ca <LL_ATON_RT_RunEpochBlock+0x8e>
340043c0:	f240 2171 	movw	r1, #625	@ 0x271
340043c4:	4b73      	ldr	r3, [pc, #460]	@ (34004594 <LL_ATON_RT_RunEpochBlock+0x258>)
340043c6:	4a6d      	ldr	r2, [pc, #436]	@ (3400457c <LL_ATON_RT_RunEpochBlock+0x240>)
340043c8:	e7bf      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
340043ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
340043ce:	4a72      	ldr	r2, [pc, #456]	@ (34004598 <LL_ATON_RT_RunEpochBlock+0x25c>)
340043d0:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340043d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340043d8:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
340043dc:	69e3      	ldr	r3, [r4, #28]
340043de:	ea23 0300 	bic.w	r3, r3, r0
340043e2:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
340043e4:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
340043e6:	6860      	ldr	r0, [r4, #4]
340043e8:	4621      	mov	r1, r4
340043ea:	f7ff fdad 	bl	34003f48 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
340043ee:	4620      	mov	r0, r4
340043f0:	f7ff fe14 	bl	3400401c <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
340043f4:	6863      	ldr	r3, [r4, #4]
340043f6:	8a1b      	ldrh	r3, [r3, #16]
340043f8:	071b      	lsls	r3, r3, #28
340043fa:	d534      	bpl.n	34004466 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
340043fc:	6923      	ldr	r3, [r4, #16]
340043fe:	2b00      	cmp	r3, #0
34004400:	f000 80b7 	beq.w	34004572 <LL_ATON_RT_RunEpochBlock+0x236>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34004404:	4b62      	ldr	r3, [pc, #392]	@ (34004590 <LL_ATON_RT_RunEpochBlock+0x254>)
34004406:	681a      	ldr	r2, [r3, #0]
34004408:	b932      	cbnz	r2, 34004418 <LL_ATON_RT_RunEpochBlock+0xdc>
3400440a:	2197      	movs	r1, #151	@ 0x97
3400440c:	4b63      	ldr	r3, [pc, #396]	@ (3400459c <LL_ATON_RT_RunEpochBlock+0x260>)
3400440e:	4a64      	ldr	r2, [pc, #400]	@ (340045a0 <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34004410:	4864      	ldr	r0, [pc, #400]	@ (340045a4 <LL_ATON_RT_RunEpochBlock+0x268>)
34004412:	e79b      	b.n	3400434c <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
34004414:	4606      	mov	r6, r0
34004416:	e7ed      	b.n	340043f4 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
34004418:	6862      	ldr	r2, [r4, #4]
3400441a:	8a12      	ldrh	r2, [r2, #16]
3400441c:	0716      	lsls	r6, r2, #28
3400441e:	d403      	bmi.n	34004428 <LL_ATON_RT_RunEpochBlock+0xec>
34004420:	2198      	movs	r1, #152	@ 0x98
34004422:	4b61      	ldr	r3, [pc, #388]	@ (340045a8 <LL_ATON_RT_RunEpochBlock+0x26c>)
34004424:	4a5e      	ldr	r2, [pc, #376]	@ (340045a0 <LL_ATON_RT_RunEpochBlock+0x264>)
34004426:	e7f3      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
34004428:	6922      	ldr	r2, [r4, #16]
3400442a:	8a12      	ldrh	r2, [r2, #16]
3400442c:	0655      	lsls	r5, r2, #25
3400442e:	d403      	bmi.n	34004438 <LL_ATON_RT_RunEpochBlock+0xfc>
34004430:	219a      	movs	r1, #154	@ 0x9a
34004432:	4b5e      	ldr	r3, [pc, #376]	@ (340045ac <LL_ATON_RT_RunEpochBlock+0x270>)
34004434:	4a5a      	ldr	r2, [pc, #360]	@ (340045a0 <LL_ATON_RT_RunEpochBlock+0x264>)
34004436:	e7eb      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
34004438:	6818      	ldr	r0, [r3, #0]
3400443a:	f7ff fd35 	bl	34003ea8 <__ll_clear_aton_owner>
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400443e:	68e3      	ldr	r3, [r4, #12]
34004440:	b11b      	cbz	r3, 3400444a <LL_ATON_RT_RunEpochBlock+0x10e>
34004442:	21a3      	movs	r1, #163	@ 0xa3
34004444:	4b5a      	ldr	r3, [pc, #360]	@ (340045b0 <LL_ATON_RT_RunEpochBlock+0x274>)
34004446:	4a56      	ldr	r2, [pc, #344]	@ (340045a0 <LL_ATON_RT_RunEpochBlock+0x264>)
34004448:	e7e2      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
3400444a:	6922      	ldr	r2, [r4, #16]
3400444c:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
3400444e:	6962      	ldr	r2, [r4, #20]
34004450:	60a2      	str	r2, [r4, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
34004452:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
34004454:	6262      	str	r2, [r4, #36]	@ 0x24
    nn_instance->exec_state.saved_current_epoch_block = NULL;
34004456:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
34004458:	6163      	str	r3, [r4, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400445a:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
3400445c:	6863      	ldr	r3, [r4, #4]
3400445e:	3314      	adds	r3, #20
34004460:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
34004462:	2000      	movs	r0, #0
34004464:	e7a4      	b.n	340043b0 <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
34004466:	2e00      	cmp	r6, #0
34004468:	d1fb      	bne.n	34004462 <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
3400446a:	f894 3020 	ldrb.w	r3, [r4, #32]
3400446e:	2b00      	cmp	r3, #0
34004470:	d169      	bne.n	34004546 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
34004472:	2301      	movs	r3, #1
34004474:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34004478:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
3400447a:	68e3      	ldr	r3, [r4, #12]
3400447c:	b11b      	cbz	r3, 34004486 <LL_ATON_RT_RunEpochBlock+0x14a>
3400447e:	2161      	movs	r1, #97	@ 0x61
34004480:	4b4b      	ldr	r3, [pc, #300]	@ (340045b0 <LL_ATON_RT_RunEpochBlock+0x274>)
34004482:	4a4c      	ldr	r2, [pc, #304]	@ (340045b4 <LL_ATON_RT_RunEpochBlock+0x278>)
34004484:	e761      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004486:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004488:	b11b      	cbz	r3, 34004492 <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
3400448a:	462a      	mov	r2, r5
3400448c:	4621      	mov	r1, r4
3400448e:	4630      	mov	r0, r6
34004490:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
34004492:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
34004494:	07d8      	lsls	r0, r3, #31
34004496:	d505      	bpl.n	340044a4 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
34004498:	69e2      	ldr	r2, [r4, #28]
3400449a:	b11a      	cbz	r2, 340044a4 <LL_ATON_RT_RunEpochBlock+0x168>
3400449c:	2156      	movs	r1, #86	@ 0x56
3400449e:	4b46      	ldr	r3, [pc, #280]	@ (340045b8 <LL_ATON_RT_RunEpochBlock+0x27c>)
340044a0:	4a46      	ldr	r2, [pc, #280]	@ (340045bc <LL_ATON_RT_RunEpochBlock+0x280>)
340044a2:	e7b5      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
340044a4:	f013 0f50 	tst.w	r3, #80	@ 0x50
340044a8:	d015      	beq.n	340044d6 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
340044aa:	4a39      	ldr	r2, [pc, #228]	@ (34004590 <LL_ATON_RT_RunEpochBlock+0x254>)
340044ac:	6811      	ldr	r1, [r2, #0]
340044ae:	428c      	cmp	r4, r1
340044b0:	d103      	bne.n	340044ba <LL_ATON_RT_RunEpochBlock+0x17e>
340044b2:	2131      	movs	r1, #49	@ 0x31
340044b4:	4b42      	ldr	r3, [pc, #264]	@ (340045c0 <LL_ATON_RT_RunEpochBlock+0x284>)
340044b6:	4a43      	ldr	r2, [pc, #268]	@ (340045c4 <LL_ATON_RT_RunEpochBlock+0x288>)
340044b8:	e7aa      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
340044ba:	6811      	ldr	r1, [r2, #0]
340044bc:	b119      	cbz	r1, 340044c6 <LL_ATON_RT_RunEpochBlock+0x18a>
340044be:	2135      	movs	r1, #53	@ 0x35
340044c0:	4b41      	ldr	r3, [pc, #260]	@ (340045c8 <LL_ATON_RT_RunEpochBlock+0x28c>)
340044c2:	4a40      	ldr	r2, [pc, #256]	@ (340045c4 <LL_ATON_RT_RunEpochBlock+0x288>)
340044c4:	e7a4      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
340044c6:	4941      	ldr	r1, [pc, #260]	@ (340045cc <LL_ATON_RT_RunEpochBlock+0x290>)
340044c8:	6809      	ldr	r1, [r1, #0]
340044ca:	b119      	cbz	r1, 340044d4 <LL_ATON_RT_RunEpochBlock+0x198>
340044cc:	2139      	movs	r1, #57	@ 0x39
340044ce:	4b40      	ldr	r3, [pc, #256]	@ (340045d0 <LL_ATON_RT_RunEpochBlock+0x294>)
340044d0:	4a3c      	ldr	r2, [pc, #240]	@ (340045c4 <LL_ATON_RT_RunEpochBlock+0x288>)
340044d2:	e79d      	b.n	34004410 <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
340044d4:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
340044d6:	0759      	lsls	r1, r3, #29
340044d8:	d41c      	bmi.n	34004514 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
340044da:	f013 0f90 	tst.w	r3, #144	@ 0x90
340044de:	d00a      	beq.n	340044f6 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
340044e0:	4b2b      	ldr	r3, [pc, #172]	@ (34004590 <LL_ATON_RT_RunEpochBlock+0x254>)
340044e2:	681b      	ldr	r3, [r3, #0]
340044e4:	429c      	cmp	r4, r3
340044e6:	d003      	beq.n	340044f0 <LL_ATON_RT_RunEpochBlock+0x1b4>
340044e8:	2178      	movs	r1, #120	@ 0x78
340044ea:	4b2a      	ldr	r3, [pc, #168]	@ (34004594 <LL_ATON_RT_RunEpochBlock+0x258>)
340044ec:	4a31      	ldr	r2, [pc, #196]	@ (340045b4 <LL_ATON_RT_RunEpochBlock+0x278>)
340044ee:	e72c      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340044f0:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
340044f2:	f7ff fcf9 	bl	34003ee8 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
340044f6:	682b      	ldr	r3, [r5, #0]
340044f8:	b10b      	cbz	r3, 340044fe <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
340044fa:	4628      	mov	r0, r5
340044fc:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
340044fe:	8a2b      	ldrh	r3, [r5, #16]
34004500:	075a      	lsls	r2, r3, #29
34004502:	d51a      	bpl.n	3400453a <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
34004504:	4628      	mov	r0, r5
34004506:	f7ff fd0b 	bl	34003f20 <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
3400450a:	b130      	cbz	r0, 3400451a <LL_ATON_RT_RunEpochBlock+0x1de>
3400450c:	21a4      	movs	r1, #164	@ 0xa4
3400450e:	4b31      	ldr	r3, [pc, #196]	@ (340045d4 <LL_ATON_RT_RunEpochBlock+0x298>)
34004510:	4a28      	ldr	r2, [pc, #160]	@ (340045b4 <LL_ATON_RT_RunEpochBlock+0x278>)
34004512:	e71a      	b.n	3400434a <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
34004514:	f240 30ff 	movw	r0, #1023	@ 0x3ff
34004518:	e7eb      	b.n	340044f2 <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
3400451a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400451e:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
34004520:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
34004524:	4669      	mov	r1, sp
    conf.stepmode = 0;
34004526:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
3400452a:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
3400452c:	f7fe fc86 	bl	34002e3c <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
34004530:	4a29      	ldr	r2, [pc, #164]	@ (340045d8 <LL_ATON_RT_RunEpochBlock+0x29c>)
34004532:	6813      	ldr	r3, [r2, #0]
34004534:	f043 0301 	orr.w	r3, r3, #1
34004538:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
3400453a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400453c:	b11b      	cbz	r3, 34004546 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
3400453e:	462a      	mov	r2, r5
34004540:	4621      	mov	r1, r4
34004542:	2001      	movs	r0, #1
34004544:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34004546:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
34004548:	8a03      	ldrh	r3, [r0, #16]
3400454a:	075b      	lsls	r3, r3, #29
3400454c:	d50f      	bpl.n	3400456e <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400454e:	f7ff fce7 	bl	34003f20 <EpochBlock_EpochControllerUnit>
34004552:	2301      	movs	r3, #1
34004554:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34004558:	2800      	cmp	r0, #0
3400455a:	f47f af28 	bne.w	340043ae <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
3400455e:	6860      	ldr	r0, [r4, #4]
34004560:	4621      	mov	r1, r4
34004562:	f7ff fcf1 	bl	34003f48 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
34004566:	4620      	mov	r0, r4
34004568:	f7ff fd58 	bl	3400401c <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
3400456c:	e779      	b.n	34004462 <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
3400456e:	68c0      	ldr	r0, [r0, #12]
34004570:	e7f2      	b.n	34004558 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
34004572:	2002      	movs	r0, #2
34004574:	e71c      	b.n	340043b0 <LL_ATON_RT_RunEpochBlock+0x74>
34004576:	bf00      	nop
34004578:	3402372b 	.word	0x3402372b
3400457c:	340282ce 	.word	0x340282ce
34004580:	3402364b 	.word	0x3402364b
34004584:	340239b3 	.word	0x340239b3
34004588:	340239ee 	.word	0x340239ee
3400458c:	340239aa 	.word	0x340239aa
34004590:	340a3f7c 	.word	0x340a3f7c
34004594:	34023a50 	.word	0x34023a50
34004598:	e000e100 	.word	0xe000e100
3400459c:	34022ff2 	.word	0x34022ff2
340045a0:	340282a7 	.word	0x340282a7
340045a4:	3402301c 	.word	0x3402301c
340045a8:	34023a7a 	.word	0x34023a7a
340045ac:	34023b16 	.word	0x34023b16
340045b0:	34023b62 	.word	0x34023b62
340045b4:	34028286 	.word	0x34028286
340045b8:	34023746 	.word	0x34023746
340045bc:	34028267 	.word	0x34028267
340045c0:	34023b9a 	.word	0x34023b9a
340045c4:	34028253 	.word	0x34028253
340045c8:	34023bc2 	.word	0x34023bc2
340045cc:	340a3f78 	.word	0x340a3f78
340045d0:	340235be 	.word	0x340235be
340045d4:	34023642 	.word	0x34023642
340045d8:	580fe000 	.word	0x580fe000

340045dc <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
340045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
340045de:	4b39      	ldr	r3, [pc, #228]	@ (340046c4 <NPU0_IRQHandler+0xe8>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
340045e0:	4c39      	ldr	r4, [pc, #228]	@ (340046c8 <NPU0_IRQHandler+0xec>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
340045e2:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
340045e4:	6823      	ldr	r3, [r4, #0]
340045e6:	b343      	cbz	r3, 3400463a <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
340045e8:	6823      	ldr	r3, [r4, #0]
340045ea:	685b      	ldr	r3, [r3, #4]
340045ec:	b933      	cbnz	r3, 340045fc <NPU0_IRQHandler+0x20>
340045ee:	f240 31b1 	movw	r1, #945	@ 0x3b1
340045f2:	4b36      	ldr	r3, [pc, #216]	@ (340046cc <NPU0_IRQHandler+0xf0>)
340045f4:	4a36      	ldr	r2, [pc, #216]	@ (340046d0 <NPU0_IRQHandler+0xf4>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
340045f6:	4837      	ldr	r0, [pc, #220]	@ (340046d4 <NPU0_IRQHandler+0xf8>)
340045f8:	f019 f9f8 	bl	3401d9ec <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
340045fc:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
340045fe:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
34004600:	8a1b      	ldrh	r3, [r3, #16]
34004602:	075b      	lsls	r3, r3, #29
34004604:	d40c      	bmi.n	34004620 <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
34004606:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
3400460a:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400460e:	f7ff fd49 	bl	340040a4 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34004612:	6823      	ldr	r3, [r4, #0]
34004614:	b99b      	cbnz	r3, 3400463e <NPU0_IRQHandler+0x62>
34004616:	f240 31d2 	movw	r1, #978	@ 0x3d2
3400461a:	4b2f      	ldr	r3, [pc, #188]	@ (340046d8 <NPU0_IRQHandler+0xfc>)
3400461c:	4a2c      	ldr	r2, [pc, #176]	@ (340046d0 <NPU0_IRQHandler+0xf4>)
3400461e:	e7ea      	b.n	340045f6 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34004620:	6823      	ldr	r3, [r4, #0]
34004622:	6858      	ldr	r0, [r3, #4]
34004624:	f7ff fc7c 	bl	34003f20 <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004628:	b120      	cbz	r0, 34004634 <NPU0_IRQHandler+0x58>
3400462a:	f240 31be 	movw	r1, #958	@ 0x3be
3400462e:	4b2b      	ldr	r3, [pc, #172]	@ (340046dc <NPU0_IRQHandler+0x100>)
34004630:	4a27      	ldr	r2, [pc, #156]	@ (340046d0 <NPU0_IRQHandler+0xf4>)
34004632:	e7e0      	b.n	340045f6 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
34004634:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
34004638:	e7e9      	b.n	3400460e <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
3400463a:	4628      	mov	r0, r5
3400463c:	e7e7      	b.n	3400460e <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
3400463e:	6823      	ldr	r3, [r4, #0]
34004640:	685b      	ldr	r3, [r3, #4]
34004642:	8a1b      	ldrh	r3, [r3, #16]
34004644:	f013 0304 	ands.w	r3, r3, #4
34004648:	d126      	bne.n	34004698 <NPU0_IRQHandler+0xbc>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
3400464a:	6822      	ldr	r2, [r4, #0]
3400464c:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
3400464e:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
34004650:	402a      	ands	r2, r5
34004652:	d017      	beq.n	34004684 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
34004654:	f04f 0c01 	mov.w	ip, #1
34004658:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400465a:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
3400465c:	4e20      	ldr	r6, [pc, #128]	@ (340046e0 <NPU0_IRQHandler+0x104>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
3400465e:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
34004660:	fa22 f703 	lsr.w	r7, r2, r3
34004664:	07ff      	lsls	r7, r7, #31
34004666:	d507      	bpl.n	34004678 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
34004668:	031f      	lsls	r7, r3, #12
3400466a:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
3400466e:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
34004672:	fa0c f703 	lsl.w	r7, ip, r3
34004676:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
34004678:	3801      	subs	r0, #1
3400467a:	f103 0301 	add.w	r3, r3, #1
3400467e:	d1ef      	bne.n	34004660 <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004680:	6823      	ldr	r3, [r4, #0]
34004682:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
34004684:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
34004688:	4b0e      	ldr	r3, [pc, #56]	@ (340046c4 <NPU0_IRQHandler+0xe8>)
3400468a:	611d      	str	r5, [r3, #16]
3400468c:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
34004690:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LL_ATON_OSAL_SIGNAL_EVENT();
34004694:	f7ff bb90 	b.w	34003db8 <aton_osal_freertos_signal_event>
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34004698:	6823      	ldr	r3, [r4, #0]
3400469a:	6858      	ldr	r0, [r3, #4]
3400469c:	f7ff fc40 	bl	34003f20 <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
340046a0:	b120      	cbz	r0, 340046ac <NPU0_IRQHandler+0xd0>
340046a2:	f240 3191 	movw	r1, #913	@ 0x391
340046a6:	4b0d      	ldr	r3, [pc, #52]	@ (340046dc <NPU0_IRQHandler+0x100>)
340046a8:	4a0e      	ldr	r2, [pc, #56]	@ (340046e4 <NPU0_IRQHandler+0x108>)
340046aa:	e7a4      	b.n	340045f6 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
340046ac:	00eb      	lsls	r3, r5, #3
340046ae:	d5e9      	bpl.n	34004684 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
340046b0:	4b0d      	ldr	r3, [pc, #52]	@ (340046e8 <NPU0_IRQHandler+0x10c>)
340046b2:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
340046b4:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
340046b6:	6823      	ldr	r3, [r4, #0]
340046b8:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
340046ba:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
340046bc:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
340046c0:	61d3      	str	r3, [r2, #28]
340046c2:	e7df      	b.n	34004684 <NPU0_IRQHandler+0xa8>
340046c4:	580e1000 	.word	0x580e1000
340046c8:	340a3f7c 	.word	0x340a3f7c
340046cc:	34023bec 	.word	0x34023bec
340046d0:	340281c7 	.word	0x340281c7
340046d4:	3402364b 	.word	0x3402364b
340046d8:	34022ff2 	.word	0x34022ff2
340046dc:	34023642 	.word	0x34023642
340046e0:	580e503c 	.word	0x580e503c
340046e4:	34028199 	.word	0x34028199
340046e8:	580fe000 	.word	0x580fe000

340046ec <ll_sw_forward_dequantizelinear>:
{
  Dequantizelinear_sw_info *sw_info = (Dequantizelinear_sw_info *)sw_info_struct;

  // array init
  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
340046ec:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
340046f0:	4a47      	ldr	r2, [pc, #284]	@ (34004810 <ll_sw_forward_dequantizelinear+0x124>)
340046f2:	2b00      	cmp	r3, #0
340046f4:	4b47      	ldr	r3, [pc, #284]	@ (34004814 <ll_sw_forward_dequantizelinear+0x128>)
340046f6:	bf18      	it	ne
340046f8:	4613      	movne	r3, r2
{
340046fa:	b510      	push	{r4, lr}
340046fc:	b0c4      	sub	sp, #272	@ 0x110
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
340046fe:	930a      	str	r3, [sp, #40]	@ 0x28
34004700:	6943      	ldr	r3, [r0, #20]
                                  .info = (const ai_intq_info[1]){{
                                      .scale = ((float *)sw_info->is.mem.start_offset),
                                      .zeropoint = ((void *)sw_info->izp.mem.start_offset),
                                  }}};

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004702:	f04f 7482 	mov.w	r4, #17039360	@ 0x1040000
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004706:	930b      	str	r3, [sp, #44]	@ 0x2c
34004708:	6a83      	ldr	r3, [r0, #40]	@ 0x28
3400470a:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  AI_ARRAY_OBJ_DECLARE(dequantize_output_array, FORMAT, sw_info->general.output.mem.start_offset,
3400470e:	4b42      	ldr	r3, [pc, #264]	@ (34004818 <ll_sw_forward_dequantizelinear+0x12c>)
34004710:	930e      	str	r3, [sp, #56]	@ 0x38
34004712:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34004714:	930f      	str	r3, [sp, #60]	@ 0x3c
34004716:	6d43      	ldr	r3, [r0, #84]	@ 0x54
34004718:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  uint16_t offset_format =
3400471c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
34004720:	2b00      	cmp	r3, #0
34004722:	bf0c      	ite	eq
34004724:	2202      	moveq	r2, #2
34004726:	2204      	movne	r2, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004728:	f042 0201 	orr.w	r2, r2, #1
3400472c:	f8ad 2010 	strh.w	r2, [sp, #16]
34004730:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
34004732:	ab04      	add	r3, sp, #16
34004734:	f8ad 2012 	strh.w	r2, [sp, #18]
                                  .info = (const ai_intq_info[1]){{
34004738:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400473c:	9322      	str	r3, [sp, #136]	@ 0x88
                                  .info = (const ai_intq_info[1]){{
3400473e:	9206      	str	r2, [sp, #24]
34004740:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004744:	6903      	ldr	r3, [r0, #16]
                                  .info = (const ai_intq_info[1]){{
34004746:	9207      	str	r2, [sp, #28]
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004748:	aa06      	add	r2, sp, #24
3400474a:	9205      	str	r2, [sp, #20]
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400474c:	f240 4201 	movw	r2, #1025	@ 0x401
34004750:	9312      	str	r3, [sp, #72]	@ 0x48
34004752:	68c3      	ldr	r3, [r0, #12]
34004754:	e9cd 4223 	strd	r4, r2, [sp, #140]	@ 0x8c
34004758:	9313      	str	r3, [sp, #76]	@ 0x4c
3400475a:	6883      	ldr	r3, [r0, #8]
3400475c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
3400475e:	9314      	str	r3, [sp, #80]	@ 0x50
34004760:	9116      	str	r1, [sp, #88]	@ 0x58
34004762:	6a01      	ldr	r1, [r0, #32]
34004764:	6843      	ldr	r3, [r0, #4]
34004766:	9117      	str	r1, [sp, #92]	@ 0x5c
34004768:	69c1      	ldr	r1, [r0, #28]
3400476a:	9315      	str	r3, [sp, #84]	@ 0x54
3400476c:	ab12      	add	r3, sp, #72	@ 0x48
3400476e:	9325      	str	r3, [sp, #148]	@ 0x94
34004770:	9118      	str	r1, [sp, #96]	@ 0x60
34004772:	f240 4302 	movw	r3, #1026	@ 0x402
34004776:	6981      	ldr	r1, [r0, #24]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004778:	922b      	str	r2, [sp, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
3400477a:	9119      	str	r1, [sp, #100]	@ 0x64
3400477c:	a916      	add	r1, sp, #88	@ 0x58
3400477e:	9127      	str	r1, [sp, #156]	@ 0x9c
34004780:	a90a      	add	r1, sp, #40	@ 0x28
34004782:	9128      	str	r1, [sp, #160]	@ 0xa0
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004784:	2100      	movs	r1, #0
34004786:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004788:	9326      	str	r3, [sp, #152]	@ 0x98
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
3400478a:	921a      	str	r2, [sp, #104]	@ 0x68
3400478c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
3400478e:	e9cd 1429 	strd	r1, r4, [sp, #164]	@ 0xa4
34004792:	921b      	str	r2, [sp, #108]	@ 0x6c
34004794:	6b42      	ldr	r2, [r0, #52]	@ 0x34
34004796:	921c      	str	r2, [sp, #112]	@ 0x70
34004798:	6b02      	ldr	r2, [r0, #48]	@ 0x30
3400479a:	921d      	str	r2, [sp, #116]	@ 0x74
3400479c:	aa1a      	add	r2, sp, #104	@ 0x68
3400479e:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
340047a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
                        STRIDE_INIT(sw_info->general.output.stride.h, sw_info->general.output.stride.w,
                                    sw_info->general.output.stride.c, sw_info->general.output.stride.b),
                        1, &dequantize_output_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047a4:	aa22      	add	r2, sp, #136	@ 0x88
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
340047a6:	931e      	str	r3, [sp, #120]	@ 0x78
340047a8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
340047aa:	931f      	str	r3, [sp, #124]	@ 0x7c
340047ac:	6c83      	ldr	r3, [r0, #72]	@ 0x48
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047ae:	9200      	str	r2, [sp, #0]
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
340047b0:	9320      	str	r3, [sp, #128]	@ 0x80
340047b2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047b4:	aa29      	add	r2, sp, #164	@ 0xa4
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
340047b6:	9321      	str	r3, [sp, #132]	@ 0x84
340047b8:	ab1e      	add	r3, sp, #120	@ 0x78
340047ba:	932e      	str	r3, [sp, #184]	@ 0xb8
340047bc:	ab0e      	add	r3, sp, #56	@ 0x38
340047be:	932f      	str	r3, [sp, #188]	@ 0xbc
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047c0:	2304      	movs	r3, #4
340047c2:	9308      	str	r3, [sp, #32]
340047c4:	2301      	movs	r3, #1
340047c6:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
340047ca:	9338      	str	r3, [sp, #224]	@ 0xe0
340047cc:	ab01      	add	r3, sp, #4
340047ce:	e9cd 313c 	strd	r3, r1, [sp, #240]	@ 0xf0
340047d2:	ab02      	add	r3, sp, #8
340047d4:	e9cd 313f 	strd	r3, r1, [sp, #252]	@ 0xfc
340047d8:	ab03      	add	r3, sp, #12
340047da:	e9cd 3142 	strd	r3, r1, [sp, #264]	@ 0x108
340047de:	ab38      	add	r3, sp, #224	@ 0xe0
340047e0:	9309      	str	r3, [sp, #36]	@ 0x24
                              AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&dequantize_output)),
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_EMPTY)

  // layer initialization
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
340047e2:	4b0e      	ldr	r3, [pc, #56]	@ (3400481c <ll_sw_forward_dequantizelinear+0x130>)
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047e4:	9201      	str	r2, [sp, #4]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
340047e6:	a831      	add	r0, sp, #196	@ 0xc4
340047e8:	221c      	movs	r2, #28
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047ea:	913e      	str	r1, [sp, #248]	@ 0xf8
340047ec:	9102      	str	r1, [sp, #8]
340047ee:	9141      	str	r1, [sp, #260]	@ 0x104
340047f0:	9103      	str	r1, [sp, #12]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
340047f2:	9330      	str	r3, [sp, #192]	@ 0xc0
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
340047f4:	f8cd d0e4 	str.w	sp, [sp, #228]	@ 0xe4
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
340047f8:	f01a f942 	bl	3401ea80 <memset>
340047fc:	4b08      	ldr	r3, [pc, #32]	@ (34004820 <ll_sw_forward_dequantizelinear+0x134>)
                       NULL, )
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
340047fe:	a830      	add	r0, sp, #192	@ 0xc0
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004800:	9335      	str	r3, [sp, #212]	@ 0xd4
34004802:	ab08      	add	r3, sp, #32
34004804:	9336      	str	r3, [sp, #216]	@ 0xd8
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
34004806:	f01d f8b9 	bl	3402197c <node_convert>
}
3400480a:	b044      	add	sp, #272	@ 0x110
3400480c:	bd10      	pop	{r4, pc}
3400480e:	bf00      	nop
34004810:	08840440 	.word	0x08840440
34004814:	08040440 	.word	0x08040440
34004818:	00821040 	.word	0x00821040
3400481c:	00010107 	.word	0x00010107
34004820:	3402197d 	.word	0x3402197d

34004824 <ISP_Algo_BadPixel_Init>:
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Init(void *hIsp, void *pAlgo)
{
  (void)hIsp; /* unused */

  ((ISP_AlgoTypeDef *)pAlgo)->state = ISP_ALGO_STATE_INIT;
34004824:	2000      	movs	r0, #0
34004826:	7048      	strb	r0, [r1, #1]

  return ISP_OK;
}
34004828:	4770      	bx	lr

3400482a <ISP_Algo_BadPixel_DeInit>:
{
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  return ISP_OK;
}
3400482a:	2000      	movs	r0, #0
3400482c:	4770      	bx	lr

3400482e <ISP_Algo_AEC_StatCb>:
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_StatCb(ISP_AlgoTypeDef *pAlgo)
{
  /* Update State */
  pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3400482e:	2303      	movs	r3, #3
34004830:	7043      	strb	r3, [r0, #1]

  return ISP_OK;
}
34004832:	2000      	movs	r0, #0
34004834:	4770      	bx	lr

34004836 <ISP_Algo_AWB_StatCb>:
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_StatCb(ISP_AlgoTypeDef *pAlgo)
{
  /* Update State */
  if (pAlgo->state != ISP_ALGO_STATE_INIT)
34004836:	7843      	ldrb	r3, [r0, #1]
34004838:	b10b      	cbz	r3, 3400483e <ISP_Algo_AWB_StatCb+0x8>
  {
    pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3400483a:	2303      	movs	r3, #3
3400483c:	7043      	strb	r3, [r0, #1]
  }

  return ISP_OK;
}
3400483e:	2000      	movs	r0, #0
34004840:	4770      	bx	lr
	...

34004844 <ISP_Algo_BadPixel_Process>:
{
34004844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34004846:	4604      	mov	r4, r0
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004848:	f001 fb86 	bl	34005f58 <ISP_SVC_IQParam_Get>
  if (IQParamConfig->badPixelAlgo.enable == false)
3400484c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004850:	4607      	mov	r7, r0
  if (IQParamConfig->badPixelAlgo.enable == false)
34004852:	b913      	cbnz	r3, 3400485a <ISP_Algo_BadPixel_Process+0x16>
    return ISP_OK;
34004854:	2000      	movs	r0, #0
}
34004856:	b003      	add	sp, #12
34004858:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CurrentFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
3400485a:	4620      	mov	r0, r4
3400485c:	f001 fb2e 	bl	34005ebc <ISP_SVC_Misc_GetMainFrameId>
  if (CurrentFrameId == LastFrameId)
34004860:	4b1e      	ldr	r3, [pc, #120]	@ (340048dc <ISP_Algo_BadPixel_Process+0x98>)
34004862:	681a      	ldr	r2, [r3, #0]
34004864:	4282      	cmp	r2, r0
34004866:	d0f5      	beq.n	34004854 <ISP_Algo_BadPixel_Process+0x10>
  if (Step++ >= 0)
34004868:	4d1d      	ldr	r5, [pc, #116]	@ (340048e0 <ISP_Algo_BadPixel_Process+0x9c>)
  LastFrameId = CurrentFrameId;
3400486a:	6018      	str	r0, [r3, #0]
  if (Step++ >= 0)
3400486c:	f995 3000 	ldrsb.w	r3, [r5]
34004870:	1c5a      	adds	r2, r3, #1
34004872:	2b00      	cmp	r3, #0
34004874:	702a      	strb	r2, [r5, #0]
34004876:	db0a      	blt.n	3400488e <ISP_Algo_BadPixel_Process+0x4a>
    ret  = ISP_SVC_ISP_GetBadPixel(hIsp, &BadPixelConfig);
34004878:	4669      	mov	r1, sp
3400487a:	4620      	mov	r0, r4
3400487c:	f001 f8a9 	bl	340059d2 <ISP_SVC_ISP_GetBadPixel>
    if (ret != ISP_OK)
34004880:	2800      	cmp	r0, #0
34004882:	d1e8      	bne.n	34004856 <ISP_Algo_BadPixel_Process+0x12>
    BadPixelCount += BadPixelConfig.count;
34004884:	4a17      	ldr	r2, [pc, #92]	@ (340048e4 <ISP_Algo_BadPixel_Process+0xa0>)
34004886:	9b01      	ldr	r3, [sp, #4]
34004888:	6811      	ldr	r1, [r2, #0]
3400488a:	440b      	add	r3, r1
3400488c:	6013      	str	r3, [r2, #0]
  if (Step == 10)
3400488e:	f995 2000 	ldrsb.w	r2, [r5]
34004892:	2a0a      	cmp	r2, #10
34004894:	d1de      	bne.n	34004854 <ISP_Algo_BadPixel_Process+0x10>
    BadPixelCount /= 10;
34004896:	4e13      	ldr	r6, [pc, #76]	@ (340048e4 <ISP_Algo_BadPixel_Process+0xa0>)
34004898:	6833      	ldr	r3, [r6, #0]
3400489a:	fbb3 f3f2 	udiv	r3, r3, r2
    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
3400489e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
    BadPixelCount /= 10;
340048a0:	6033      	str	r3, [r6, #0]
    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
340048a2:	4293      	cmp	r3, r2
340048a4:	d912      	bls.n	340048cc <ISP_Algo_BadPixel_Process+0x88>
340048a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
340048aa:	b113      	cbz	r3, 340048b2 <ISP_Algo_BadPixel_Process+0x6e>
      BadPixelConfig.strength--;
340048ac:	3b01      	subs	r3, #1
      BadPixelConfig.strength++;
340048ae:	f88d 3001 	strb.w	r3, [sp, #1]
    BadPixelConfig.enable = 1;
340048b2:	2301      	movs	r3, #1
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
340048b4:	4669      	mov	r1, sp
340048b6:	4620      	mov	r0, r4
    BadPixelConfig.enable = 1;
340048b8:	f88d 3000 	strb.w	r3, [sp]
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
340048bc:	f001 f86e 	bl	3400599c <ISP_SVC_ISP_SetBadPixel>
    if (ret != ISP_OK)
340048c0:	2800      	cmp	r0, #0
340048c2:	d1c8      	bne.n	34004856 <ISP_Algo_BadPixel_Process+0x12>
    Step = -1;
340048c4:	23ff      	movs	r3, #255	@ 0xff
    BadPixelCount = 0;
340048c6:	6030      	str	r0, [r6, #0]
    Step = -1;
340048c8:	702b      	strb	r3, [r5, #0]
    BadPixelCount = 0;
340048ca:	e7c4      	b.n	34004856 <ISP_Algo_BadPixel_Process+0x12>
    else if ((BadPixelCount < IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength < ISP_BADPIXEL_STRENGTH_MAX - 1))
340048cc:	d2f1      	bcs.n	340048b2 <ISP_Algo_BadPixel_Process+0x6e>
340048ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
340048d2:	2b05      	cmp	r3, #5
340048d4:	d8ed      	bhi.n	340048b2 <ISP_Algo_BadPixel_Process+0x6e>
      BadPixelConfig.strength++;
340048d6:	3301      	adds	r3, #1
340048d8:	e7e9      	b.n	340048ae <ISP_Algo_BadPixel_Process+0x6a>
340048da:	bf00      	nop
340048dc:	340a4210 	.word	0x340a4210
340048e0:	340a420c 	.word	0x340a420c
340048e4:	340a4208 	.word	0x340a4208

340048e8 <ISP_Algo_AEC_DeInit>:
{
340048e8:	b508      	push	{r3, lr}
  if (pIspAEprocess != NULL)
340048ea:	4b03      	ldr	r3, [pc, #12]	@ (340048f8 <ISP_Algo_AEC_DeInit+0x10>)
340048ec:	6818      	ldr	r0, [r3, #0]
340048ee:	b108      	cbz	r0, 340048f4 <ISP_Algo_AEC_DeInit+0xc>
    evision_api_st_ae_delete(pIspAEprocess);
340048f0:	f7fc fda0 	bl	34001434 <evision_api_st_ae_delete>
}
340048f4:	2000      	movs	r0, #0
340048f6:	bd08      	pop	{r3, pc}
340048f8:	340a4230 	.word	0x340a4230
340048fc:	00000000 	.word	0x00000000

34004900 <ISP_Algo_AEC_Init>:
{
34004900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34004902:	4604      	mov	r4, r0
34004904:	460e      	mov	r6, r1
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004906:	f001 fb27 	bl	34005f58 <ISP_SVC_IQParam_Get>
  if (IQParamConfig->sensorDelay.delay == 0)
3400490a:	f890 3256 	ldrb.w	r3, [r0, #598]	@ 0x256
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3400490e:	4605      	mov	r5, r0
  if (IQParamConfig->sensorDelay.delay == 0)
34004910:	b913      	cbnz	r3, 34004918 <ISP_Algo_AEC_Init+0x18>
    IQParamConfig->sensorDelay.delay = 1;
34004912:	2301      	movs	r3, #1
34004914:	f880 3256 	strb.w	r3, [r0, #598]	@ 0x256
  pIspAEprocess = evision_api_st_ae_new(log_cb);
34004918:	482d      	ldr	r0, [pc, #180]	@ (340049d0 <ISP_Algo_AEC_Init+0xd0>)
3400491a:	f7fc fd71 	bl	34001400 <evision_api_st_ae_new>
3400491e:	4f2d      	ldr	r7, [pc, #180]	@ (340049d4 <ISP_Algo_AEC_Init+0xd4>)
34004920:	6038      	str	r0, [r7, #0]
  if (pIspAEprocess == NULL)
34004922:	b130      	cbz	r0, 34004932 <ISP_Algo_AEC_Init+0x32>
  e_ret = evision_api_st_ae_init(pIspAEprocess);
34004924:	f7fc fdc0 	bl	340014a8 <evision_api_st_ae_init>
  if (e_ret != EVISION_RET_SUCCESS)
34004928:	2801      	cmp	r0, #1
3400492a:	d004      	beq.n	34004936 <ISP_Algo_AEC_Init+0x36>
    evision_api_st_ae_delete(pIspAEprocess);
3400492c:	6838      	ldr	r0, [r7, #0]
3400492e:	f7fc fd81 	bl	34001434 <evision_api_st_ae_delete>
    return ISP_ERR_ALGO;
34004932:	20be      	movs	r0, #190	@ 0xbe
34004934:	e033      	b.n	3400499e <ISP_Algo_AEC_Init+0x9e>
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34004936:	683b      	ldr	r3, [r7, #0]
34004938:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
3400493a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3400493c:	611a      	str	r2, [r3, #16]
  pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
3400493e:	f895 2070 	ldrb.w	r2, [r5, #112]	@ 0x70
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
34004942:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
  pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34004946:	655a      	str	r2, [r3, #84]	@ 0x54
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
34004948:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
3400494c:	200a      	movs	r0, #10
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
3400494e:	645a      	str	r2, [r3, #68]	@ 0x44
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
34004950:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
34004952:	64d9      	str	r1, [r3, #76]	@ 0x4c
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
34004954:	2164      	movs	r1, #100	@ 0x64
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
34004956:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
3400495a:	e9c3 0105 	strd	r0, r1, [r3, #20]
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
3400495e:	2178      	movs	r1, #120	@ 0x78
  pIspAEprocess->hyper_params.gain_medium_increment_max = HYPERPARAM_AEC_GAIN_MEDIUM_INC_MAX;
34004960:	f240 50dc 	movw	r0, #1500	@ 0x5dc
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
34004964:	e9c3 c107 	strd	ip, r1, [r3, #28]
  pIspAEprocess->hyper_params.gain_medium_increment_max = HYPERPARAM_AEC_GAIN_MEDIUM_INC_MAX;
34004968:	f241 7170 	movw	r1, #6000	@ 0x1770
3400496c:	e9c3 0109 	strd	r0, r1, [r3, #36]	@ 0x24
  pIspAEprocess->hyper_params.gain_high_increment_max = HYPERPARAM_AEC_GAIN_HIGH_INC_MAX;
34004970:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
34004974:	62d9      	str	r1, [r3, #44]	@ 0x2c
  pIspAEprocess->hyper_params.exposure_up_ratio = HYPERPARAM_AEC_EXPOSURE_UP_RATIO;
34004976:	a112      	add	r1, pc, #72	@ (adr r1, 340049c0 <ISP_Algo_AEC_Init+0xc0>)
34004978:	e9d1 0100 	ldrd	r0, r1, [r1]
3400497c:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
  pIspAEprocess->hyper_params.exposure_down_ratio = HYPERPARAM_AEC_EXPOSURE_DOWN_RATIO;
34004980:	a111      	add	r1, pc, #68	@ (adr r1, 340049c8 <ISP_Algo_AEC_Init+0xc8>)
34004982:	e9d1 0100 	ldrd	r0, r1, [r1]
34004986:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
  pIspAEprocess->hyper_params.dark_zone_lum_limit = HYPERPARAM_AEC_DARKZONE_LUM_LIMIT;
3400498a:	2105      	movs	r1, #5
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
3400498c:	641f      	str	r7, [r3, #64]	@ 0x40
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
3400498e:	649a      	str	r2, [r3, #72]	@ 0x48
  pIspAEprocess->hyper_params.dark_zone_lum_limit = HYPERPARAM_AEC_DARKZONE_LUM_LIMIT;
34004990:	6519      	str	r1, [r3, #80]	@ 0x50
  if (IQParamConfig->AECAlgo.enable == true)
34004992:	f895 3068 	ldrb.w	r3, [r5, #104]	@ 0x68
34004996:	2b01      	cmp	r3, #1
34004998:	d003      	beq.n	340049a2 <ISP_Algo_AEC_Init+0xa2>
  algo->state = ISP_ALGO_STATE_INIT;
3400499a:	2000      	movs	r0, #0
3400499c:	7070      	strb	r0, [r6, #1]
}
3400499e:	b003      	add	sp, #12
340049a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
340049a2:	4669      	mov	r1, sp
340049a4:	4620      	mov	r0, r4
    gainConfig.gain = pIsp_handle->sensorInfo.gain_min;
340049a6:	e9cd 7200 	strd	r7, r2, [sp]
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
340049aa:	f001 fa53 	bl	34005e54 <ISP_SVC_Sensor_SetExposure>
340049ae:	2800      	cmp	r0, #0
340049b0:	d1bf      	bne.n	34004932 <ISP_Algo_AEC_Init+0x32>
340049b2:	4620      	mov	r0, r4
340049b4:	a901      	add	r1, sp, #4
340049b6:	f001 fa29 	bl	34005e0c <ISP_SVC_Sensor_SetGain>
340049ba:	2800      	cmp	r0, #0
340049bc:	d0ed      	beq.n	3400499a <ISP_Algo_AEC_Init+0x9a>
340049be:	e7b8      	b.n	34004932 <ISP_Algo_AEC_Init+0x32>
340049c0:	40000000 	.word	0x40000000
340049c4:	3f947ae1 	.word	0x3f947ae1
340049c8:	e0000000 	.word	0xe0000000
340049cc:	3f70624d 	.word	0x3f70624d
340049d0:	340049d9 	.word	0x340049d9
340049d4:	340a4230 	.word	0x340a4230

340049d8 <log_cb>:
{
340049d8:	b508      	push	{r3, lr}
340049da:	4601      	mov	r1, r0
  printf("%s", msg);
340049dc:	4803      	ldr	r0, [pc, #12]	@ (340049ec <log_cb+0x14>)
340049de:	f019 feb1 	bl	3401e744 <iprintf>
}
340049e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("\r\n");
340049e6:	4802      	ldr	r0, [pc, #8]	@ (340049f0 <log_cb+0x18>)
340049e8:	f019 bf14 	b.w	3401e814 <puts>
340049ec:	34027821 	.word	0x34027821
340049f0:	34023db8 	.word	0x34023db8

340049f4 <ISP_Algo_AEC_Process>:
{
340049f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340049f8:	b086      	sub	sp, #24
340049fa:	4605      	mov	r5, r0
340049fc:	460c      	mov	r4, r1
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340049fe:	f001 faab 	bl	34005f58 <ISP_SVC_IQParam_Get>
34004a02:	4606      	mov	r6, r0
  if (IQParamConfig->AECAlgo.enable == false)
34004a04:	f890 0068 	ldrb.w	r0, [r0, #104]	@ 0x68
34004a08:	b128      	cbz	r0, 34004a16 <ISP_Algo_AEC_Process+0x22>
  switch(algo->state)
34004a0a:	7863      	ldrb	r3, [r4, #1]
34004a0c:	2b01      	cmp	r3, #1
34004a0e:	d905      	bls.n	34004a1c <ISP_Algo_AEC_Process+0x28>
34004a10:	2b03      	cmp	r3, #3
34004a12:	d014      	beq.n	34004a3e <ISP_Algo_AEC_Process+0x4a>
    return ISP_OK;
34004a14:	2000      	movs	r0, #0
}
34004a16:	b006      	add	sp, #24
34004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34004a1c:	f896 3256 	ldrb.w	r3, [r6, #598]	@ 0x256
34004a20:	2602      	movs	r6, #2
34004a22:	9302      	str	r3, [sp, #8]
34004a24:	2301      	movs	r3, #1
34004a26:	4622      	mov	r2, r4
34004a28:	e9cd 6300 	strd	r6, r3, [sp]
34004a2c:	4628      	mov	r0, r5
34004a2e:	4b29      	ldr	r3, [pc, #164]	@ (34004ad4 <ISP_Algo_AEC_Process+0xe0>)
34004a30:	4929      	ldr	r1, [pc, #164]	@ (34004ad8 <ISP_Algo_AEC_Process+0xe4>)
34004a32:	f001 fcd5 	bl	340063e0 <ISP_SVC_Stats_GetNext>
    if (ret != ISP_OK)
34004a36:	2800      	cmp	r0, #0
34004a38:	d1ed      	bne.n	34004a16 <ISP_Algo_AEC_Process+0x22>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34004a3a:	7066      	strb	r6, [r4, #1]
    break;
34004a3c:	e7eb      	b.n	34004a16 <ISP_Algo_AEC_Process+0x22>
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34004a3e:	4f27      	ldr	r7, [pc, #156]	@ (34004adc <ISP_Algo_AEC_Process+0xe8>)
34004a40:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
34004a42:	683b      	ldr	r3, [r7, #0]
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
34004a44:	4628      	mov	r0, r5
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34004a46:	611a      	str	r2, [r3, #16]
    pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34004a48:	f896 2070 	ldrb.w	r2, [r6, #112]	@ 0x70
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
34004a4c:	a904      	add	r1, sp, #16
    pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    avgL = stats.down.averageL;
34004a50:	4b20      	ldr	r3, [pc, #128]	@ (34004ad4 <ISP_Algo_AEC_Process+0xe0>)
34004a52:	f893 8037 	ldrb.w	r8, [r3, #55]	@ 0x37
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
34004a56:	f001 f9ef 	bl	34005e38 <ISP_SVC_Sensor_GetGain>
    if (ret != ISP_OK)
34004a5a:	2800      	cmp	r0, #0
34004a5c:	d1db      	bne.n	34004a16 <ISP_Algo_AEC_Process+0x22>
    ret = ISP_SVC_Sensor_GetExposure(hIsp, &exposureConfig);
34004a5e:	4628      	mov	r0, r5
34004a60:	a905      	add	r1, sp, #20
34004a62:	f001 fa0d 	bl	34005e80 <ISP_SVC_Sensor_GetExposure>
    if (ret != ISP_OK)
34004a66:	2800      	cmp	r0, #0
34004a68:	d1d5      	bne.n	34004a16 <ISP_Algo_AEC_Process+0x22>
    Meta.averageL = avgL;
34004a6a:	4b1d      	ldr	r3, [pc, #116]	@ (34004ae0 <ISP_Algo_AEC_Process+0xec>)
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
34004a6c:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
    Meta.averageL = avgL;
34004a6e:	f883 8001 	strb.w	r8, [r3, #1]
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
34004a72:	605a      	str	r2, [r3, #4]
    e_ret = evision_api_st_ae_process(pIspAEprocess, gainConfig.gain, exposureConfig.exposure, avgL);
34004a74:	6838      	ldr	r0, [r7, #0]
34004a76:	4643      	mov	r3, r8
34004a78:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
34004a7c:	f7fc fd1f 	bl	340014be <evision_api_st_ae_process>
    if (e_ret == EVISION_RET_SUCCESS)
34004a80:	2801      	cmp	r0, #1
34004a82:	d00d      	beq.n	34004aa0 <ISP_Algo_AEC_Process+0xac>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34004a84:	f896 3256 	ldrb.w	r3, [r6, #598]	@ 0x256
34004a88:	2602      	movs	r6, #2
34004a8a:	9302      	str	r3, [sp, #8]
34004a8c:	2301      	movs	r3, #1
34004a8e:	4622      	mov	r2, r4
34004a90:	e9cd 6300 	strd	r6, r3, [sp]
34004a94:	4628      	mov	r0, r5
34004a96:	4b0f      	ldr	r3, [pc, #60]	@ (34004ad4 <ISP_Algo_AEC_Process+0xe0>)
34004a98:	490f      	ldr	r1, [pc, #60]	@ (34004ad8 <ISP_Algo_AEC_Process+0xe4>)
34004a9a:	f001 fca1 	bl	340063e0 <ISP_SVC_Stats_GetNext>
34004a9e:	e7cc      	b.n	34004a3a <ISP_Algo_AEC_Process+0x46>
      if (gainConfig.gain != pIspAEprocess->new_gain)
34004aa0:	683b      	ldr	r3, [r7, #0]
34004aa2:	9a04      	ldr	r2, [sp, #16]
34004aa4:	689b      	ldr	r3, [r3, #8]
34004aa6:	429a      	cmp	r2, r3
34004aa8:	d10c      	bne.n	34004ac4 <ISP_Algo_AEC_Process+0xd0>
      if (exposureConfig.exposure != pIspAEprocess->new_exposure)
34004aaa:	683b      	ldr	r3, [r7, #0]
34004aac:	9a05      	ldr	r2, [sp, #20]
34004aae:	685b      	ldr	r3, [r3, #4]
34004ab0:	429a      	cmp	r2, r3
34004ab2:	d0e7      	beq.n	34004a84 <ISP_Algo_AEC_Process+0x90>
        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
34004ab4:	4628      	mov	r0, r5
34004ab6:	a905      	add	r1, sp, #20
        exposureConfig.exposure = pIspAEprocess->new_exposure;
34004ab8:	9305      	str	r3, [sp, #20]
        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
34004aba:	f001 f9cb 	bl	34005e54 <ISP_SVC_Sensor_SetExposure>
        if (ret != ISP_OK)
34004abe:	2800      	cmp	r0, #0
34004ac0:	d0e0      	beq.n	34004a84 <ISP_Algo_AEC_Process+0x90>
34004ac2:	e7a8      	b.n	34004a16 <ISP_Algo_AEC_Process+0x22>
        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
34004ac4:	4628      	mov	r0, r5
34004ac6:	a904      	add	r1, sp, #16
        gainConfig.gain = pIspAEprocess->new_gain;
34004ac8:	9304      	str	r3, [sp, #16]
        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
34004aca:	f001 f99f 	bl	34005e0c <ISP_SVC_Sensor_SetGain>
        if (ret != ISP_OK)
34004ace:	2800      	cmp	r0, #0
34004ad0:	d0eb      	beq.n	34004aaa <ISP_Algo_AEC_Process+0xb6>
34004ad2:	e7a0      	b.n	34004a16 <ISP_Algo_AEC_Process+0x22>
34004ad4:	340a4190 	.word	0x340a4190
34004ad8:	3400482f 	.word	0x3400482f
34004adc:	340a4230 	.word	0x340a4230
34004ae0:	340a4214 	.word	0x340a4214

34004ae4 <ISP_Algo_AWB_Init>:
{
34004ae4:	b510      	push	{r4, lr}
  pIspAWBestimator = evision_api_awb_new(log_cb);
34004ae6:	4806      	ldr	r0, [pc, #24]	@ (34004b00 <ISP_Algo_AWB_Init+0x1c>)
{
34004ae8:	460c      	mov	r4, r1
  pIspAWBestimator = evision_api_awb_new(log_cb);
34004aea:	f7fc f8cf 	bl	34000c8c <evision_api_awb_new>
34004aee:	4b05      	ldr	r3, [pc, #20]	@ (34004b04 <ISP_Algo_AWB_Init+0x20>)
34004af0:	6018      	str	r0, [r3, #0]
  if (pIspAWBestimator == NULL)
34004af2:	b110      	cbz	r0, 34004afa <ISP_Algo_AWB_Init+0x16>
  algo->state = ISP_ALGO_STATE_INIT;
34004af4:	2000      	movs	r0, #0
34004af6:	7060      	strb	r0, [r4, #1]
}
34004af8:	bd10      	pop	{r4, pc}
    return ISP_ERR_ALGO;
34004afa:	20be      	movs	r0, #190	@ 0xbe
34004afc:	e7fc      	b.n	34004af8 <ISP_Algo_AWB_Init+0x14>
34004afe:	bf00      	nop
34004b00:	340049d9 	.word	0x340049d9
34004b04:	340a422c 	.word	0x340a422c

34004b08 <ISP_Algo_AWB_DeInit>:
{
34004b08:	b508      	push	{r3, lr}
  if (pIspAWBestimator != NULL)
34004b0a:	4b03      	ldr	r3, [pc, #12]	@ (34004b18 <ISP_Algo_AWB_DeInit+0x10>)
34004b0c:	6818      	ldr	r0, [r3, #0]
34004b0e:	b108      	cbz	r0, 34004b14 <ISP_Algo_AWB_DeInit+0xc>
    evision_api_awb_delete(pIspAWBestimator);
34004b10:	f7fc f8d8 	bl	34000cc4 <evision_api_awb_delete>
}
34004b14:	2000      	movs	r0, #0
34004b16:	bd08      	pop	{r3, pc}
34004b18:	340a422c 	.word	0x340a422c
34004b1c:	00000000 	.word	0x00000000

34004b20 <ISP_Algo_ApplyGammaInverse>:
{
34004b20:	b508      	push	{r3, lr}
34004b22:	ed2d 8b02 	vpush	{d8}
34004b26:	ee08 1a10 	vmov	s16, r1
  if (ISP_SVC_Misc_IsGammaEnabled(hIsp, 1 /*main pipe*/) != 0) {
34004b2a:	2101      	movs	r1, #1
34004b2c:	f001 f9d6 	bl	34005edc <ISP_SVC_Misc_IsGammaEnabled>
34004b30:	b190      	cbz	r0, 34004b58 <ISP_Algo_ApplyGammaInverse+0x38>
    out = 255 * pow((float)comp / 255, 1.0 / 2.2);
34004b32:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 34004b70 <ISP_Algo_ApplyGammaInverse+0x50>
34004b36:	eeb8 8a48 	vcvt.f32.u32	s16, s16
34004b3a:	ee88 0a27 	vdiv.f32	s0, s16, s15
34004b3e:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 34004b60 <ISP_Algo_ApplyGammaInverse+0x40>
34004b42:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34004b46:	f01c fa27 	bl	34020f98 <pow>
34004b4a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 34004b68 <ISP_Algo_ApplyGammaInverse+0x48>
34004b4e:	ee20 0b07 	vmul.f64	d0, d0, d7
}
34004b52:	ecbd 8b02 	vpop	{d8}
34004b56:	bd08      	pop	{r3, pc}
    out = (double) comp;
34004b58:	eeb8 0b48 	vcvt.f64.u32	d0, s16
  return out;
34004b5c:	e7f9      	b.n	34004b52 <ISP_Algo_ApplyGammaInverse+0x32>
34004b5e:	bf00      	nop
34004b60:	d1745d17 	.word	0xd1745d17
34004b64:	3fdd1745 	.word	0x3fdd1745
34004b68:	00000000 	.word	0x00000000
34004b6c:	406fe000 	.word	0x406fe000
34004b70:	437f0000 	.word	0x437f0000

34004b74 <ISP_Algo_GetUpStat>:
{
34004b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34004b78:	b087      	sub	sp, #28
34004b7a:	460c      	mov	r4, r1
  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
34004b7c:	a902      	add	r1, sp, #8
{
34004b7e:	4680      	mov	r8, r0
  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
34004b80:	f001 f81c 	bl	34005bbc <ISP_SVC_ISP_GetGain>
34004b84:	f894 7036 	ldrb.w	r7, [r4, #54]	@ 0x36
34004b88:	4606      	mov	r6, r0
34004b8a:	2800      	cmp	r0, #0
34004b8c:	d13b      	bne.n	34004c06 <ISP_Algo_GetUpStat+0x92>
34004b8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
34004b92:	2b01      	cmp	r3, #1
34004b94:	d137      	bne.n	34004c06 <ISP_Algo_GetUpStat+0x92>
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
34004b96:	4d1e      	ldr	r5, [pc, #120]	@ (34004c10 <ISP_Algo_GetUpStat+0x9c>)
34004b98:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
34004b9c:	4603      	mov	r3, r0
34004b9e:	9a04      	ldr	r2, [sp, #16]
34004ba0:	fba1 0105 	umull	r0, r1, r1, r5
34004ba4:	f7fc ff82 	bl	34001aac <__aeabi_ldivmod>
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
34004ba8:	4633      	mov	r3, r6
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
34004baa:	4681      	mov	r9, r0
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
34004bac:	9a05      	ldr	r2, [sp, #20]
34004bae:	fba7 0105 	umull	r0, r1, r7, r5
34004bb2:	f7fc ff7b 	bl	34001aac <__aeabi_ldivmod>
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
34004bb6:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
34004bba:	4607      	mov	r7, r0
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
34004bbc:	4633      	mov	r3, r6
34004bbe:	fba1 0105 	umull	r0, r1, r1, r5
34004bc2:	9a03      	ldr	r2, [sp, #12]
34004bc4:	f7fc ff72 	bl	34001aac <__aeabi_ldivmod>
    pStats->up.averageG = (uint32_t) upG;
34004bc8:	f884 9001 	strb.w	r9, [r4, #1]
    pStats->up.averageR = (uint32_t) upR;
34004bcc:	7020      	strb	r0, [r4, #0]
    pStats->up.averageB = (uint32_t) upB;
34004bce:	70a7      	strb	r7, [r4, #2]
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
34004bd0:	4640      	mov	r0, r8
34004bd2:	a901      	add	r1, sp, #4
34004bd4:	f000 ff3b 	bl	34005a4e <ISP_SVC_ISP_GetBlackLevel>
34004bd8:	b990      	cbnz	r0, 34004c00 <ISP_Algo_GetUpStat+0x8c>
34004bda:	f89d 3004 	ldrb.w	r3, [sp, #4]
34004bde:	2b01      	cmp	r3, #1
34004be0:	d10e      	bne.n	34004c00 <ISP_Algo_GetUpStat+0x8c>
    pStats->up.averageR += BlackLevel.BLCR;
34004be2:	7823      	ldrb	r3, [r4, #0]
34004be4:	f89d 2005 	ldrb.w	r2, [sp, #5]
34004be8:	4413      	add	r3, r2
34004bea:	7023      	strb	r3, [r4, #0]
    pStats->up.averageG += BlackLevel.BLCG;
34004bec:	f89d 2006 	ldrb.w	r2, [sp, #6]
34004bf0:	7863      	ldrb	r3, [r4, #1]
34004bf2:	4413      	add	r3, r2
34004bf4:	7063      	strb	r3, [r4, #1]
    pStats->up.averageB += BlackLevel.BLCB;
34004bf6:	f89d 2007 	ldrb.w	r2, [sp, #7]
34004bfa:	78a3      	ldrb	r3, [r4, #2]
34004bfc:	4413      	add	r3, r2
34004bfe:	70a3      	strb	r3, [r4, #2]
}
34004c00:	b007      	add	sp, #28
34004c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pStats->up.averageR = pStats->down.averageR;
34004c06:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
    pStats->up.averageB = pStats->down.averageB;
34004c08:	70a7      	strb	r7, [r4, #2]
    pStats->up.averageR = pStats->down.averageR;
34004c0a:	8023      	strh	r3, [r4, #0]
}
34004c0c:	e7f8      	b.n	34004c00 <ISP_Algo_GetUpStat+0x8c>
34004c0e:	bf00      	nop
34004c10:	05f5e100 	.word	0x05f5e100
34004c14:	00000000 	.word	0x00000000

34004c18 <ISP_Algo_ApplyCConv>:
{
34004c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34004c1c:	b08b      	sub	sp, #44	@ 0x2c
34004c1e:	460e      	mov	r6, r1
  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
34004c20:	4669      	mov	r1, sp
{
34004c22:	4615      	mov	r5, r2
34004c24:	461c      	mov	r4, r3
  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
34004c26:	f001 f89b 	bl	34005d60 <ISP_SVC_ISP_GetColorConv>
34004c2a:	4602      	mov	r2, r0
34004c2c:	2800      	cmp	r0, #0
34004c2e:	f040 8096 	bne.w	34004d5e <ISP_Algo_ApplyCConv+0x146>
34004c32:	f89d 3000 	ldrb.w	r3, [sp]
34004c36:	2b01      	cmp	r3, #1
34004c38:	f040 8091 	bne.w	34004d5e <ISP_Algo_ApplyCConv+0x146>
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
34004c3c:	9b01      	ldr	r3, [sp, #4]
34004c3e:	17d9      	asrs	r1, r3, #31
34004c40:	fba3 3706 	umull	r3, r7, r3, r6
34004c44:	fb06 7701 	mla	r7, r6, r1, r7
34004c48:	9902      	ldr	r1, [sp, #8]
34004c4a:	ea4f 7ce1 	mov.w	ip, r1, asr #31
34004c4e:	fba1 1005 	umull	r1, r0, r1, r5
34004c52:	fb05 000c 	mla	r0, r5, ip, r0
34004c56:	185b      	adds	r3, r3, r1
34004c58:	eb47 0700 	adc.w	r7, r7, r0
34004c5c:	9803      	ldr	r0, [sp, #12]
34004c5e:	ea4f 7ce0 	mov.w	ip, r0, asr #31
34004c62:	fba0 0104 	umull	r0, r1, r0, r4
34004c66:	fb04 110c 	mla	r1, r4, ip, r1
34004c6a:	1818      	adds	r0, r3, r0
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
34004c6c:	9b04      	ldr	r3, [sp, #16]
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
34004c6e:	eb41 0107 	adc.w	r1, r1, r7
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
34004c72:	17df      	asrs	r7, r3, #31
34004c74:	fba3 8306 	umull	r8, r3, r3, r6
34004c78:	fb06 3307 	mla	r3, r6, r7, r3
34004c7c:	9f05      	ldr	r7, [sp, #20]
34004c7e:	fba7 ce05 	umull	ip, lr, r7, r5
34004c82:	ea4f 79e7 	mov.w	r9, r7, asr #31
34004c86:	fb05 ee09 	mla	lr, r5, r9, lr
34004c8a:	eb18 070c 	adds.w	r7, r8, ip
34004c8e:	f8dd c018 	ldr.w	ip, [sp, #24]
34004c92:	eb43 030e 	adc.w	r3, r3, lr
34004c96:	ea4f 7eec 	mov.w	lr, ip, asr #31
34004c9a:	fbac c804 	umull	ip, r8, ip, r4
34004c9e:	fb04 880e 	mla	r8, r4, lr, r8
34004ca2:	eb17 070c 	adds.w	r7, r7, ip
34004ca6:	eb48 0803 	adc.w	r8, r8, r3
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
34004caa:	9b07      	ldr	r3, [sp, #28]
34004cac:	ea4f 7ce3 	mov.w	ip, r3, asr #31
34004cb0:	fba3 e306 	umull	lr, r3, r3, r6
34004cb4:	fb06 3c0c 	mla	ip, r6, ip, r3
34004cb8:	9b08      	ldr	r3, [sp, #32]
34004cba:	ea4f 79e3 	mov.w	r9, r3, asr #31
34004cbe:	fba3 3605 	umull	r3, r6, r3, r5
34004cc2:	fb05 6509 	mla	r5, r5, r9, r6
34004cc6:	eb1e 0303 	adds.w	r3, lr, r3
34004cca:	eb4c 0c05 	adc.w	ip, ip, r5
34004cce:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34004cd0:	ea4f 7ee5 	mov.w	lr, r5, asr #31
34004cd4:	fba5 5604 	umull	r5, r6, r5, r4
34004cd8:	fb04 660e 	mla	r6, r4, lr, r6
34004cdc:	195c      	adds	r4, r3, r5
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34004cde:	f04f 33ff 	mov.w	r3, #4294967295
34004ce2:	4d29      	ldr	r5, [pc, #164]	@ (34004d88 <ISP_Algo_ApplyCConv+0x170>)
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
34004ce4:	eb46 060c 	adc.w	r6, r6, ip
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34004ce8:	42a8      	cmp	r0, r5
34004cea:	eb71 0303 	sbcs.w	r3, r1, r3
34004cee:	db3f      	blt.n	34004d70 <ISP_Algo_ApplyCConv+0x158>
    ccR /= ISP_CCM_PRECISION_FACTOR;
34004cf0:	a323      	add	r3, pc, #140	@ (adr r3, 34004d80 <ISP_Algo_ApplyCConv+0x168>)
34004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
34004cf6:	f7fc fed9 	bl	34001aac <__aeabi_ldivmod>
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34004cfa:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34004cfe:	f171 0100 	sbcs.w	r1, r1, #0
34004d02:	4681      	mov	r9, r0
34004d04:	db01      	blt.n	34004d0a <ISP_Algo_ApplyCConv+0xf2>
34004d06:	f04f 09ff 	mov.w	r9, #255	@ 0xff
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
34004d0a:	f04f 33ff 	mov.w	r3, #4294967295
34004d0e:	42af      	cmp	r7, r5
34004d10:	eb78 0303 	sbcs.w	r3, r8, r3
34004d14:	db2e      	blt.n	34004d74 <ISP_Algo_ApplyCConv+0x15c>
    ccG /= ISP_CCM_PRECISION_FACTOR;
34004d16:	a31a      	add	r3, pc, #104	@ (adr r3, 34004d80 <ISP_Algo_ApplyCConv+0x168>)
34004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
34004d1c:	4638      	mov	r0, r7
34004d1e:	4641      	mov	r1, r8
34004d20:	f7fc fec4 	bl	34001aac <__aeabi_ldivmod>
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
34004d24:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34004d28:	f171 0100 	sbcs.w	r1, r1, #0
34004d2c:	4607      	mov	r7, r0
34004d2e:	db00      	blt.n	34004d32 <ISP_Algo_ApplyCConv+0x11a>
34004d30:	27ff      	movs	r7, #255	@ 0xff
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
34004d32:	f04f 33ff 	mov.w	r3, #4294967295
34004d36:	42ac      	cmp	r4, r5
34004d38:	eb76 0303 	sbcs.w	r3, r6, r3
34004d3c:	db1c      	blt.n	34004d78 <ISP_Algo_ApplyCConv+0x160>
    ccB /= ISP_CCM_PRECISION_FACTOR;
34004d3e:	a310      	add	r3, pc, #64	@ (adr r3, 34004d80 <ISP_Algo_ApplyCConv+0x168>)
34004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
34004d44:	4620      	mov	r0, r4
34004d46:	4631      	mov	r1, r6
34004d48:	f7fc feb0 	bl	34001aac <__aeabi_ldivmod>
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
34004d4c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34004d50:	f171 0100 	sbcs.w	r1, r1, #0
34004d54:	4604      	mov	r4, r0
34004d56:	db00      	blt.n	34004d5a <ISP_Algo_ApplyCConv+0x142>
34004d58:	24ff      	movs	r4, #255	@ 0xff
    *outR = (uint32_t) ccR;
34004d5a:	464e      	mov	r6, r9
    *outG = (uint32_t) ccG;
34004d5c:	463d      	mov	r5, r7
    *outR = (uint32_t) ccR;
34004d5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34004d60:	601e      	str	r6, [r3, #0]
    *outG = (uint32_t) ccG;
34004d62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34004d64:	601d      	str	r5, [r3, #0]
    *outB = (uint32_t) ccB;
34004d66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
34004d68:	601c      	str	r4, [r3, #0]
}
34004d6a:	b00b      	add	sp, #44	@ 0x2c
34004d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34004d70:	4691      	mov	r9, r2
34004d72:	e7ca      	b.n	34004d0a <ISP_Algo_ApplyCConv+0xf2>
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
34004d74:	2700      	movs	r7, #0
34004d76:	e7dc      	b.n	34004d32 <ISP_Algo_ApplyCConv+0x11a>
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
34004d78:	2400      	movs	r4, #0
34004d7a:	e7ee      	b.n	34004d5a <ISP_Algo_ApplyCConv+0x142>
34004d7c:	f3af 8000 	nop.w
34004d80:	05f5e100 	.word	0x05f5e100
34004d84:	00000000 	.word	0x00000000
34004d88:	fa0a1f01 	.word	0xfa0a1f01
34004d8c:	00000000 	.word	0x00000000

34004d90 <ISP_Algo_AWB_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Process(void *hIsp, void *pAlgo)
{
34004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34004d94:	ed2d 8b02 	vpush	{d8}
  ISP_ISPGainTypeDef ISPGainConfig;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
  evision_return_t e_ret;
  uint32_t ccAvgR, ccAvgG, ccAvgB, colorTemp, i, j, profId, profNb;
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
34004d98:	2400      	movs	r4, #0
{
34004d9a:	b0a1      	sub	sp, #132	@ 0x84
34004d9c:	4606      	mov	r6, r0
34004d9e:	4688      	mov	r8, r1
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
34004da0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
34004da4:	940b      	str	r4, [sp, #44]	@ 0x2c
  static uint32_t statsHistory[3][3] = { 0 };
  static uint32_t colorTempHistory[2] = { 0 };
  static uint8_t skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_INIT;
  uint8_t stat_has_changed = false;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004da6:	f001 f8d7 	bl	34005f58 <ISP_SVC_IQParam_Get>

  if (IQParamConfig->AWBAlgo.enable == false)
34004daa:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34004dae:	4605      	mov	r5, r0
  if (IQParamConfig->AWBAlgo.enable == false)
34004db0:	4b71      	ldr	r3, [pc, #452]	@ (34004f78 <ISP_Algo_AWB_Process+0x1e8>)
34004db2:	b932      	cbnz	r2, 34004dc2 <ISP_Algo_AWB_Process+0x32>
  {
    enableCurrent = false;
34004db4:	701a      	strb	r2, [r3, #0]
    return ISP_OK;
34004db6:	2000      	movs	r0, #0
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
    break;
  }

  return ret;
}
34004db8:	b021      	add	sp, #132	@ 0x84
34004dba:	ecbd 8b02 	vpop	{d8}
34004dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((enableCurrent == false) || (IQParamConfig->AWBAlgo.enable == ISP_AWB_ENABLE_RECONFIGURE))
34004dc2:	7819      	ldrb	r1, [r3, #0]
34004dc4:	b111      	cbz	r1, 34004dcc <ISP_Algo_AWB_Process+0x3c>
34004dc6:	2aff      	cmp	r2, #255	@ 0xff
34004dc8:	f040 80b6 	bne.w	34004f38 <ISP_Algo_AWB_Process+0x1a8>
    algo->state = ISP_ALGO_STATE_INIT;
34004dcc:	2200      	movs	r2, #0
34004dce:	f888 2001 	strb.w	r2, [r8, #1]
    IQParamConfig->AWBAlgo.enable = true;
34004dd2:	2201      	movs	r2, #1
    reconfigureRequest = true;
34004dd4:	4969      	ldr	r1, [pc, #420]	@ (34004f7c <ISP_Algo_AWB_Process+0x1ec>)
    enableCurrent = true;
34004dd6:	701a      	strb	r2, [r3, #0]
    IQParamConfig->AWBAlgo.enable = true;
34004dd8:	f885 2074 	strb.w	r2, [r5, #116]	@ 0x74
    reconfigureRequest = true;
34004ddc:	700a      	strb	r2, [r1, #0]
    skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34004dde:	2204      	movs	r2, #4
34004de0:	4b67      	ldr	r3, [pc, #412]	@ (34004f80 <ISP_Algo_AWB_Process+0x1f0>)
34004de2:	701a      	strb	r2, [r3, #0]
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34004de4:	2400      	movs	r4, #0
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
34004de6:	ed9f 8a67 	vldr	s16, [pc, #412]	@ 34004f84 <ISP_Algo_AWB_Process+0x1f4>
34004dea:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 34004f90 <ISP_Algo_AWB_Process+0x200>
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
34004dee:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 34004f8c <ISP_Algo_AWB_Process+0x1fc>
34004df2:	f505 778a 	add.w	r7, r5, #276	@ 0x114
      colorTemp = IQParamConfig->AWBAlgo.referenceColorTemp[profId];
34004df6:	6878      	ldr	r0, [r7, #4]
      if (colorTemp == 0)
34004df8:	2800      	cmp	r0, #0
34004dfa:	f000 80ad 	beq.w	34004f58 <ISP_Algo_AWB_Process+0x1c8>
      if (profNb > 0)
34004dfe:	b154      	cbz	r4, 34004e16 <ISP_Algo_AWB_Process+0x86>
        colorTempThresholds[profNb - 1] = (float) ((colorTemp + 3 * IQParamConfig->AWBAlgo.referenceColorTemp[profId - 1]) /4 );
34004e00:	683b      	ldr	r3, [r7, #0]
34004e02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
34004e06:	4403      	add	r3, r0
34004e08:	089b      	lsrs	r3, r3, #2
34004e0a:	ee07 3a90 	vmov	s15, r3
34004e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34004e12:	ed49 7a01 	vstr	s15, [r9, #-4]
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e16:	edd7 7a06 	vldr	s15, [r7, #24]
34004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
34004e1e:	ee87 7a88 	vdiv.f32	s14, s15, s16
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
34004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e2a:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e2e:	ee87 7a88 	vdiv.f32	s14, s15, s16
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e32:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
34004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e3a:	ed8d 7a11 	vstr	s14, [sp, #68]	@ 0x44
      cfaGains[2] = cfaGains[1];
34004e3e:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
34004e42:	ee87 7a88 	vdiv.f32	s14, s15, s16
34004e46:	2324      	movs	r3, #36	@ 0x24
34004e48:	a916      	add	r1, sp, #88	@ 0x58
34004e4a:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
      for (i = 0; i < 3; i++)
34004e4e:	f04f 0c00 	mov.w	ip, #0
34004e52:	460a      	mov	r2, r1
34004e54:	fb03 5304 	mla	r3, r3, r4, r5
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
34004e58:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
34004e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34004e60:	ee87 7a88 	vdiv.f32	s14, s15, s16
34004e64:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
34004e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34004e6c:	ed81 7a00 	vstr	s14, [r1]
34004e70:	ee87 7a88 	vdiv.f32	s14, s15, s16
34004e74:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
34004e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34004e7c:	ed81 7a01 	vstr	s14, [r1, #4]
34004e80:	ee87 7a88 	vdiv.f32	s14, s15, s16
      for (i = 0; i < 3; i++)
34004e84:	f10c 0c01 	add.w	ip, ip, #1
34004e88:	f1bc 0f03 	cmp.w	ip, #3
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
34004e8c:	ed81 7a02 	vstr	s14, [r1, #8]
      for (i = 0; i < 3; i++)
34004e90:	f103 030c 	add.w	r3, r3, #12
34004e94:	f101 010c 	add.w	r1, r1, #12
34004e98:	d1de      	bne.n	34004e58 <ISP_Algo_AWB_Process+0xc8>
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
34004e9a:	ee07 0a90 	vmov	s15, r0
34004e9e:	2044      	movs	r0, #68	@ 0x44
34004ea0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
34004ea4:	fb00 a004 	mla	r0, r0, r4, sl
34004ea8:	ab09      	add	r3, sp, #36	@ 0x24
34004eaa:	a910      	add	r1, sp, #64	@ 0x40
      profNb++;
34004eac:	3401      	adds	r4, #1
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
34004eae:	f7fb ff0f 	bl	34000cd0 <evision_api_awb_set_profile>
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34004eb2:	2c05      	cmp	r4, #5
34004eb4:	f107 0704 	add.w	r7, r7, #4
34004eb8:	f109 0904 	add.w	r9, r9, #4
34004ebc:	d19b      	bne.n	34004df6 <ISP_Algo_AWB_Process+0x66>
                                          (double) IQParamConfig->AWBAlgo.referenceColorTemp[profNb - 1], profNb,
34004ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
34004ec2:	ed93 1a45 	vldr	s2, [r3, #276]	@ 0x114
34004ec6:	ed95 0a46 	vldr	s0, [r5, #280]	@ 0x118
34004eca:	4d2f      	ldr	r5, [pc, #188]	@ (34004f88 <ISP_Algo_AWB_Process+0x1f8>)
34004ecc:	eeb8 1b41 	vcvt.f64.u32	d1, s2
34004ed0:	eeb8 0b40 	vcvt.f64.u32	d0, s0
34004ed4:	4b2d      	ldr	r3, [pc, #180]	@ (34004f8c <ISP_Algo_AWB_Process+0x1fc>)
34004ed6:	4a2e      	ldr	r2, [pc, #184]	@ (34004f90 <ISP_Algo_AWB_Process+0x200>)
34004ed8:	6828      	ldr	r0, [r5, #0]
34004eda:	b2a1      	uxth	r1, r4
34004edc:	f7fb ff18 	bl	34000d10 <evision_api_awb_init_profiles>
    if (e_ret != EVISION_RET_SUCCESS)
34004ee0:	2801      	cmp	r0, #1
34004ee2:	f040 8144 	bne.w	3400516e <ISP_Algo_AWB_Process+0x3de>
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
34004ee6:	f20f 0b80 	addw	fp, pc, #128	@ 0x80
34004eea:	e9db ab00 	ldrd	sl, fp, [fp]
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
34004eee:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
34004ef2:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 34004f70 <ISP_Algo_AWB_Process+0x1e0>
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
34004ef6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
34004efa:	2c03      	cmp	r4, #3
34004efc:	bf98      	it	ls
34004efe:	eeb0 7b46 	vmovls.f64	d7, d6
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
34004f02:	682b      	ldr	r3, [r5, #0]
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
34004f04:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pIspAWBestimator->hyper_params.conv_criterion = 3;
34004f08:	4a22      	ldr	r2, [pc, #136]	@ (34004f94 <ISP_Algo_AWB_Process+0x204>)
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
34004f0a:	ed83 7ba8 	vstr	d7, [r3, #672]	@ 0x2a0
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
34004f0e:	e9c3 aba6 	strd	sl, fp, [r3, #664]	@ 0x298
    pIspAWBestimator->hyper_params.conv_criterion = 3;
34004f12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34004f16:	2305      	movs	r3, #5
34004f18:	e9cd 0301 	strd	r0, r3, [sp, #4]
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34004f1c:	2402      	movs	r4, #2
34004f1e:	4642      	mov	r2, r8
34004f20:	4630      	mov	r0, r6
34004f22:	4b1d      	ldr	r3, [pc, #116]	@ (34004f98 <ISP_Algo_AWB_Process+0x208>)
34004f24:	491d      	ldr	r1, [pc, #116]	@ (34004f9c <ISP_Algo_AWB_Process+0x20c>)
34004f26:	9400      	str	r4, [sp, #0]
34004f28:	f001 fa5a 	bl	340063e0 <ISP_SVC_Stats_GetNext>
    if (ret != ISP_OK)
34004f2c:	2800      	cmp	r0, #0
34004f2e:	f47f af43 	bne.w	34004db8 <ISP_Algo_AWB_Process+0x28>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34004f32:	f888 4001 	strb.w	r4, [r8, #1]
    break;
34004f36:	e73f      	b.n	34004db8 <ISP_Algo_AWB_Process+0x28>
  switch(algo->state)
34004f38:	f898 3001 	ldrb.w	r3, [r8, #1]
34004f3c:	2b03      	cmp	r3, #3
34004f3e:	d02f      	beq.n	34004fa0 <ISP_Algo_AWB_Process+0x210>
34004f40:	f63f af39 	bhi.w	34004db6 <ISP_Algo_AWB_Process+0x26>
34004f44:	2b00      	cmp	r3, #0
34004f46:	f43f af4d 	beq.w	34004de4 <ISP_Algo_AWB_Process+0x54>
34004f4a:	2b01      	cmp	r3, #1
34004f4c:	f47f af33 	bne.w	34004db6 <ISP_Algo_AWB_Process+0x26>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34004f50:	2205      	movs	r2, #5
34004f52:	e9cd 3201 	strd	r3, r2, [sp, #4]
34004f56:	e7e1      	b.n	34004f1c <ISP_Algo_AWB_Process+0x18c>
      return ISP_ERR_WB_COLORTEMP;
34004f58:	2096      	movs	r0, #150	@ 0x96
    if (profNb == 0)
34004f5a:	2c00      	cmp	r4, #0
34004f5c:	f43f af2c 	beq.w	34004db8 <ISP_Algo_AWB_Process+0x28>
34004f60:	e7ad      	b.n	34004ebe <ISP_Algo_AWB_Process+0x12e>
34004f62:	bf00      	nop
34004f64:	f3af 8000 	nop.w
34004f68:	9999999a 	.word	0x9999999a
34004f6c:	3ff59999 	.word	0x3ff59999
34004f70:	cccccccd 	.word	0xcccccccd
34004f74:	3ffccccc 	.word	0x3ffccccc
34004f78:	340a418d 	.word	0x340a418d
34004f7c:	340a418c 	.word	0x340a418c
34004f80:	340a30f4 	.word	0x340a30f4
34004f84:	4cbebc20 	.word	0x4cbebc20
34004f88:	340a422c 	.word	0x340a422c
34004f8c:	340a4028 	.word	0x340a4028
34004f90:	340a417c 	.word	0x340a417c
34004f94:	40400000 	.word	0x40400000
34004f98:	340a3fb0 	.word	0x340a3fb0
34004f9c:	34004837 	.word	0x34004837
    ISP_Algo_GetUpStat(hIsp, &stats);
34004fa0:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 34005210 <ISP_Algo_AWB_Process+0x480>
34004fa4:	4630      	mov	r0, r6
34004fa6:	4649      	mov	r1, r9
34004fa8:	f7ff fde4 	bl	34004b74 <ISP_Algo_GetUpStat>
    for (i = 0; i < 3; i++)
34004fac:	f8df c26c 	ldr.w	ip, [pc, #620]	@ 3400521c <ISP_Algo_AWB_Process+0x48c>
34004fb0:	46a6      	mov	lr, r4
34004fb2:	4667      	mov	r7, ip
      if ((abs(stats.up.averageR - statsHistory[i][0]) > 2) || (abs(stats.up.averageG - statsHistory[i][1]) > 2) || (abs(stats.up.averageB - statsHistory[i][2]) > 2))
34004fb4:	f899 0000 	ldrb.w	r0, [r9]
34004fb8:	f899 1001 	ldrb.w	r1, [r9, #1]
34004fbc:	f899 2002 	ldrb.w	r2, [r9, #2]
34004fc0:	f8dc 3000 	ldr.w	r3, [ip]
34004fc4:	1ac3      	subs	r3, r0, r3
34004fc6:	2b00      	cmp	r3, #0
34004fc8:	bfb8      	it	lt
34004fca:	425b      	neglt	r3, r3
34004fcc:	2b02      	cmp	r3, #2
34004fce:	f300 80a8 	bgt.w	34005122 <ISP_Algo_AWB_Process+0x392>
34004fd2:	f8dc 3004 	ldr.w	r3, [ip, #4]
34004fd6:	1acb      	subs	r3, r1, r3
34004fd8:	2b00      	cmp	r3, #0
34004fda:	bfb8      	it	lt
34004fdc:	425b      	neglt	r3, r3
34004fde:	2b02      	cmp	r3, #2
34004fe0:	f300 809f 	bgt.w	34005122 <ISP_Algo_AWB_Process+0x392>
34004fe4:	f8dc 3008 	ldr.w	r3, [ip, #8]
34004fe8:	1ad3      	subs	r3, r2, r3
34004fea:	2b00      	cmp	r3, #0
34004fec:	bfb8      	it	lt
34004fee:	425b      	neglt	r3, r3
        stat_has_changed = true;
34004ff0:	2b03      	cmp	r3, #3
34004ff2:	bfa8      	it	ge
34004ff4:	2401      	movge	r4, #1
    for (i = 0; i < 3; i++)
34004ff6:	f10e 0e01 	add.w	lr, lr, #1
34004ffa:	f1be 0f03 	cmp.w	lr, #3
34004ffe:	f10c 0c0c 	add.w	ip, ip, #12
34005002:	d1dd      	bne.n	34004fc0 <ISP_Algo_AWB_Process+0x230>
    if (skip_stat_check_count || stat_has_changed || reconfigureRequest)
34005004:	4b7e      	ldr	r3, [pc, #504]	@ (34005200 <ISP_Algo_AWB_Process+0x470>)
34005006:	f8df a218 	ldr.w	sl, [pc, #536]	@ 34005220 <ISP_Algo_AWB_Process+0x490>
3400500a:	f893 c000 	ldrb.w	ip, [r3]
3400500e:	f89a e000 	ldrb.w	lr, [sl]
34005012:	f8df b210 	ldr.w	fp, [pc, #528]	@ 34005224 <ISP_Algo_AWB_Process+0x494>
34005016:	ea4e 030c 	orr.w	r3, lr, ip
3400501a:	431c      	orrs	r4, r3
3400501c:	b2e4      	uxtb	r4, r4
3400501e:	2c00      	cmp	r4, #0
34005020:	d04c      	beq.n	340050bc <ISP_Algo_AWB_Process+0x32c>
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
34005022:	ab08      	add	r3, sp, #32
        statsHistory[2][1] = stats.up.averageG;
34005024:	e9c7 0106 	strd	r0, r1, [r7, #24]
        statsHistory[2][2] = stats.up.averageB;
34005028:	623a      	str	r2, [r7, #32]
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
3400502a:	9302      	str	r3, [sp, #8]
3400502c:	ab07      	add	r3, sp, #28
3400502e:	9301      	str	r3, [sp, #4]
34005030:	ab06      	add	r3, sp, #24
34005032:	9300      	str	r3, [sp, #0]
34005034:	f899 3036 	ldrb.w	r3, [r9, #54]	@ 0x36
34005038:	f899 2035 	ldrb.w	r2, [r9, #53]	@ 0x35
3400503c:	4630      	mov	r0, r6
3400503e:	f899 1034 	ldrb.w	r1, [r9, #52]	@ 0x34
34005042:	f7ff fde9 	bl	34004c18 <ISP_Algo_ApplyCConv>
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
34005046:	4630      	mov	r0, r6
34005048:	9906      	ldr	r1, [sp, #24]
3400504a:	f7ff fd69 	bl	34004b20 <ISP_Algo_ApplyGammaInverse>
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3400504e:	4630      	mov	r0, r6
34005050:	9907      	ldr	r1, [sp, #28]
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
34005052:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
34005056:	f7ff fd63 	bl	34004b20 <ISP_Algo_ApplyGammaInverse>
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
3400505a:	4630      	mov	r0, r6
3400505c:	9908      	ldr	r1, [sp, #32]
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3400505e:	ed8d 0b12 	vstr	d0, [sp, #72]	@ 0x48
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
34005062:	f7ff fd5d 	bl	34004b20 <ISP_Algo_ApplyGammaInverse>
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
34005066:	4867      	ldr	r0, [pc, #412]	@ (34005204 <ISP_Algo_AWB_Process+0x474>)
34005068:	2201      	movs	r2, #1
3400506a:	2100      	movs	r1, #0
3400506c:	6800      	ldr	r0, [r0, #0]
3400506e:	ab10      	add	r3, sp, #64	@ 0x40
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
34005070:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
34005074:	f7fc f822 	bl	340010bc <evision_api_awb_run_average>
        if (e_ret == EVISION_RET_SUCCESS)
34005078:	2801      	cmp	r0, #1
3400507a:	d176      	bne.n	3400516a <ISP_Algo_AWB_Process+0x3da>
          if (pIspAWBestimator->out_temp != currentColorTemp || reconfigureRequest == true)
3400507c:	4b61      	ldr	r3, [pc, #388]	@ (34005204 <ISP_Algo_AWB_Process+0x474>)
3400507e:	681b      	ldr	r3, [r3, #0]
34005080:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
34005084:	4b60      	ldr	r3, [pc, #384]	@ (34005208 <ISP_Algo_AWB_Process+0x478>)
34005086:	681b      	ldr	r3, [r3, #0]
34005088:	ee06 3a90 	vmov	s13, r3
3400508c:	eeb8 6b66 	vcvt.f64.u32	d6, s13
34005090:	eeb4 7b46 	vcmp.f64	d7, d6
34005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34005098:	9305      	str	r3, [sp, #20]
3400509a:	d103      	bne.n	340050a4 <ISP_Algo_AWB_Process+0x314>
3400509c:	4b58      	ldr	r3, [pc, #352]	@ (34005200 <ISP_Algo_AWB_Process+0x470>)
3400509e:	781b      	ldrb	r3, [r3, #0]
340050a0:	2b01      	cmp	r3, #1
340050a2:	d10b      	bne.n	340050bc <ISP_Algo_AWB_Process+0x32c>
            if (pIspAWBestimator->out_temp == colorTempHistory[1])
340050a4:	eddb 6a01 	vldr	s13, [fp, #4]
340050a8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
340050ac:	eeb4 7b46 	vcmp.f64	d7, d6
340050b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340050b4:	d137      	bne.n	34005126 <ISP_Algo_AWB_Process+0x396>
              skip_stat_check_count = 0; //oscillation detected
340050b6:	2300      	movs	r3, #0
340050b8:	f88a 3000 	strb.w	r3, [sl]
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
340050bc:	2400      	movs	r4, #0
    reconfigureRequest = false;
340050be:	2300      	movs	r3, #0
340050c0:	4a4f      	ldr	r2, [pc, #316]	@ (34005200 <ISP_Algo_AWB_Process+0x470>)
340050c2:	7013      	strb	r3, [r2, #0]
    if (skip_stat_check_count > 0) skip_stat_check_count--;
340050c4:	f89a 3000 	ldrb.w	r3, [sl]
340050c8:	b113      	cbz	r3, 340050d0 <ISP_Algo_AWB_Process+0x340>
340050ca:	3b01      	subs	r3, #1
340050cc:	f88a 3000 	strb.w	r3, [sl]
    statsHistory[1][0] = statsHistory[0][0];
340050d0:	683b      	ldr	r3, [r7, #0]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340050d2:	2205      	movs	r2, #5
    statsHistory[1][0] = statsHistory[0][0];
340050d4:	60fb      	str	r3, [r7, #12]
    statsHistory[1][1] = statsHistory[0][1];
340050d6:	687b      	ldr	r3, [r7, #4]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340050d8:	2502      	movs	r5, #2
    statsHistory[1][1] = statsHistory[0][1];
340050da:	613b      	str	r3, [r7, #16]
    statsHistory[1][2] = statsHistory[0][2];
340050dc:	68bb      	ldr	r3, [r7, #8]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340050de:	4630      	mov	r0, r6
    statsHistory[1][2] = statsHistory[0][2];
340050e0:	617b      	str	r3, [r7, #20]
    statsHistory[0][0] = stats.up.averageR;
340050e2:	f899 3000 	ldrb.w	r3, [r9]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340050e6:	4949      	ldr	r1, [pc, #292]	@ (3400520c <ISP_Algo_AWB_Process+0x47c>)
    statsHistory[0][0] = stats.up.averageR;
340050e8:	603b      	str	r3, [r7, #0]
    statsHistory[0][1] = stats.up.averageG;
340050ea:	f899 3001 	ldrb.w	r3, [r9, #1]
340050ee:	607b      	str	r3, [r7, #4]
    statsHistory[0][2] = stats.up.averageB;
340050f0:	f899 3002 	ldrb.w	r3, [r9, #2]
340050f4:	60bb      	str	r3, [r7, #8]
    colorTempHistory[1] = colorTempHistory[0];
340050f6:	f8db 3000 	ldr.w	r3, [fp]
340050fa:	f8cb 3004 	str.w	r3, [fp, #4]
    colorTempHistory[0] = currentColorTemp;
340050fe:	4b42      	ldr	r3, [pc, #264]	@ (34005208 <ISP_Algo_AWB_Process+0x478>)
34005100:	681b      	ldr	r3, [r3, #0]
34005102:	f8cb 3000 	str.w	r3, [fp]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005106:	2301      	movs	r3, #1
34005108:	9500      	str	r5, [sp, #0]
3400510a:	e9cd 3201 	strd	r3, r2, [sp, #4]
3400510e:	4642      	mov	r2, r8
34005110:	4b3f      	ldr	r3, [pc, #252]	@ (34005210 <ISP_Algo_AWB_Process+0x480>)
34005112:	f001 f965 	bl	340063e0 <ISP_SVC_Stats_GetNext>
    ret = (ret != ISP_OK) ? ret : ret_stat;
34005116:	2c00      	cmp	r4, #0
34005118:	bf18      	it	ne
3400511a:	4620      	movne	r0, r4
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3400511c:	f888 5001 	strb.w	r5, [r8, #1]
    break;
34005120:	e64a      	b.n	34004db8 <ISP_Algo_AWB_Process+0x28>
        stat_has_changed = true;
34005122:	2401      	movs	r4, #1
34005124:	e767      	b.n	34004ff6 <ISP_Algo_AWB_Process+0x266>
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34005126:	f89a 3000 	ldrb.w	r3, [sl]
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
3400512a:	eefc 6bc7 	vcvt.u32.f64	s13, d7
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3400512e:	2b04      	cmp	r3, #4
34005130:	bf98      	it	ls
34005132:	2304      	movls	r3, #4
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
34005134:	4a37      	ldr	r2, [pc, #220]	@ (34005214 <ISP_Algo_AWB_Process+0x484>)
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34005136:	bf98      	it	ls
34005138:	f88a 3000 	strbls.w	r3, [sl]
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
3400513c:	edc2 6a04 	vstr	s13, [r2, #16]
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34005140:	2305      	movs	r3, #5
34005142:	2200      	movs	r2, #0
34005144:	f505 718a 	add.w	r1, r5, #276	@ 0x114
                if (pIspAWBestimator->out_temp == IQParamConfig->AWBAlgo.referenceColorTemp[profId])
34005148:	ed91 6a01 	vldr	s12, [r1, #4]
3400514c:	eeb8 6b46 	vcvt.f64.u32	d6, s12
34005150:	eeb4 7b46 	vcmp.f64	d7, d6
34005154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34005158:	f101 0104 	add.w	r1, r1, #4
3400515c:	d009      	beq.n	34005172 <ISP_Algo_AWB_Process+0x3e2>
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
3400515e:	3b01      	subs	r3, #1
34005160:	f102 0201 	add.w	r2, r2, #1
34005164:	d1f0      	bne.n	34005148 <ISP_Algo_AWB_Process+0x3b8>
                ret  = ISP_ERR_WB_COLORTEMP;
34005166:	2496      	movs	r4, #150	@ 0x96
34005168:	e7a9      	b.n	340050be <ISP_Algo_AWB_Process+0x32e>
          ret = ISP_ERR_ALGO;
3400516a:	24be      	movs	r4, #190	@ 0xbe
3400516c:	e7a7      	b.n	340050be <ISP_Algo_AWB_Process+0x32e>
      return ISP_ERR_ALGO;
3400516e:	20be      	movs	r0, #190	@ 0xbe
34005170:	e622      	b.n	34004db8 <ISP_Algo_AWB_Process+0x28>
                ColorConvConfig.enable = 1;
34005172:	2301      	movs	r3, #1
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
34005174:	f04f 0e04 	mov.w	lr, #4
                ColorConvConfig.enable = 1;
34005178:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
3400517c:	2324      	movs	r3, #36	@ 0x24
3400517e:	f04e e001 	dls	lr, lr
34005182:	fb03 5302 	mla	r3, r3, r2, r5
34005186:	ac17      	add	r4, sp, #92	@ 0x5c
34005188:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
3400518c:	46a4      	mov	ip, r4
3400518e:	6818      	ldr	r0, [r3, #0]
34005190:	6859      	ldr	r1, [r3, #4]
34005192:	3308      	adds	r3, #8
34005194:	e8ac 0003 	stmia.w	ip!, {r0, r1}
34005198:	4664      	mov	r4, ip
3400519a:	f00f c809 	le	lr, 3400518c <ISP_Algo_AWB_Process+0x3fc>
3400519e:	9205      	str	r2, [sp, #20]
340051a0:	6818      	ldr	r0, [r3, #0]
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
340051a2:	a916      	add	r1, sp, #88	@ 0x58
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
340051a4:	f8cc 0000 	str.w	r0, [ip]
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
340051a8:	4630      	mov	r0, r6
340051aa:	f000 fd51 	bl	34005c50 <ISP_SVC_ISP_SetColorConv>
                if (ret == ISP_OK)
340051ae:	9a05      	ldr	r2, [sp, #20]
340051b0:	4604      	mov	r4, r0
340051b2:	2800      	cmp	r0, #0
340051b4:	d183      	bne.n	340050be <ISP_Algo_AWB_Process+0x32e>
                  ISPGainConfig.enable = 1;
340051b6:	2301      	movs	r3, #1
340051b8:	eb05 0582 	add.w	r5, r5, r2, lsl #2
340051bc:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
340051c0:	f8d5 312c 	ldr.w	r3, [r5, #300]	@ 0x12c
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
340051c4:	4630      	mov	r0, r6
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
340051c6:	930d      	str	r3, [sp, #52]	@ 0x34
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
340051c8:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
340051cc:	a90c      	add	r1, sp, #48	@ 0x30
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
340051ce:	930e      	str	r3, [sp, #56]	@ 0x38
                  ISPGainConfig.ispGainB = IQParamConfig->AWBAlgo.ispGainB[profId];
340051d0:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
340051d4:	9205      	str	r2, [sp, #20]
340051d6:	930f      	str	r3, [sp, #60]	@ 0x3c
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
340051d8:	f000 fc56 	bl	34005a88 <ISP_SVC_ISP_SetGain>
                  if (ret == ISP_OK)
340051dc:	4604      	mov	r4, r0
340051de:	2800      	cmp	r0, #0
340051e0:	f47f af6d 	bne.w	340050be <ISP_Algo_AWB_Process+0x32e>
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
340051e4:	4b07      	ldr	r3, [pc, #28]	@ (34005204 <ISP_Algo_AWB_Process+0x474>)
                    current_awb_profId = profId;
340051e6:	9a05      	ldr	r2, [sp, #20]
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
340051e8:	681b      	ldr	r3, [r3, #0]
340051ea:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
340051ee:	eebc 7bc7 	vcvt.u32.f64	s14, d7
340051f2:	4b05      	ldr	r3, [pc, #20]	@ (34005208 <ISP_Algo_AWB_Process+0x478>)
340051f4:	ed83 7a00 	vstr	s14, [r3]
                    current_awb_profId = profId;
340051f8:	4b07      	ldr	r3, [pc, #28]	@ (34005218 <ISP_Algo_AWB_Process+0x488>)
340051fa:	601a      	str	r2, [r3, #0]
340051fc:	e75f      	b.n	340050be <ISP_Algo_AWB_Process+0x32e>
340051fe:	bf00      	nop
34005200:	340a418c 	.word	0x340a418c
34005204:	340a422c 	.word	0x340a422c
34005208:	340a3f88 	.word	0x340a3f88
3400520c:	34004837 	.word	0x34004837
34005210:	340a3fb0 	.word	0x340a3fb0
34005214:	340a4214 	.word	0x340a4214
34005218:	340a4228 	.word	0x340a4228
3400521c:	340a3f8c 	.word	0x340a3f8c
34005220:	340a30f4 	.word	0x340a30f4
34005224:	340a3f80 	.word	0x340a3f80

34005228 <ISP_Algo_Init>:
  *         Register and initialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Init(ISP_HandleTypeDef *hIsp)
{
34005228:	b538      	push	{r3, r4, r5, lr}
3400522a:	4604      	mov	r4, r0
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  hIsp->algorithm = ISP_Algo_List;
3400522c:	2500      	movs	r5, #0
3400522e:	4b09      	ldr	r3, [pc, #36]	@ (34005254 <ISP_Algo_Init+0x2c>)
34005230:	6183      	str	r3, [r0, #24]

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
34005232:	69a3      	ldr	r3, [r4, #24]
34005234:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->Init != NULL))
34005236:	b921      	cbnz	r1, 34005242 <ISP_Algo_Init+0x1a>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
34005238:	3504      	adds	r5, #4
3400523a:	2d0c      	cmp	r5, #12
3400523c:	d1f9      	bne.n	34005232 <ISP_Algo_Init+0xa>
        return ret;
      }
    }
  }

  return ISP_OK;
3400523e:	2000      	movs	r0, #0
}
34005240:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->Init != NULL))
34005242:	684b      	ldr	r3, [r1, #4]
34005244:	2b00      	cmp	r3, #0
34005246:	d0f7      	beq.n	34005238 <ISP_Algo_Init+0x10>
      ret = algo->Init((void*)hIsp, (void*)algo);
34005248:	4620      	mov	r0, r4
3400524a:	4798      	blx	r3
      if (ret != ISP_OK)
3400524c:	2800      	cmp	r0, #0
3400524e:	d0f3      	beq.n	34005238 <ISP_Algo_Init+0x10>
34005250:	e7f6      	b.n	34005240 <ISP_Algo_Init+0x18>
34005252:	bf00      	nop
34005254:	340a30f8 	.word	0x340a30f8

34005258 <ISP_Algo_DeInit>:
  *         Deinitialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_DeInit(ISP_HandleTypeDef *hIsp)
{
34005258:	b538      	push	{r3, r4, r5, lr}
3400525a:	4604      	mov	r4, r0
3400525c:	2500      	movs	r5, #0
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
3400525e:	69a3      	ldr	r3, [r4, #24]
34005260:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->DeInit != NULL))
34005262:	b921      	cbnz	r1, 3400526e <ISP_Algo_DeInit+0x16>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
34005264:	3504      	adds	r5, #4
34005266:	2d0c      	cmp	r5, #12
34005268:	d1f9      	bne.n	3400525e <ISP_Algo_DeInit+0x6>
        return ret;
      }
    }
  }

  return ISP_OK;
3400526a:	2000      	movs	r0, #0
}
3400526c:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->DeInit != NULL))
3400526e:	688b      	ldr	r3, [r1, #8]
34005270:	2b00      	cmp	r3, #0
34005272:	d0f7      	beq.n	34005264 <ISP_Algo_DeInit+0xc>
      ret = algo->DeInit((void*)hIsp, (void*)algo);
34005274:	4620      	mov	r0, r4
34005276:	4798      	blx	r3
      if (ret != ISP_OK)
34005278:	2800      	cmp	r0, #0
3400527a:	d0f3      	beq.n	34005264 <ISP_Algo_DeInit+0xc>
3400527c:	e7f6      	b.n	3400526c <ISP_Algo_DeInit+0x14>

3400527e <ISP_Algo_Process>:
  *         Process all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Process(ISP_HandleTypeDef *hIsp)
{
3400527e:	b538      	push	{r3, r4, r5, lr}
34005280:	4604      	mov	r4, r0
34005282:	2500      	movs	r5, #0
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
34005284:	69a3      	ldr	r3, [r4, #24]
34005286:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->Process != NULL))
34005288:	b921      	cbnz	r1, 34005294 <ISP_Algo_Process+0x16>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
3400528a:	3504      	adds	r5, #4
3400528c:	2d0c      	cmp	r5, #12
3400528e:	d1f9      	bne.n	34005284 <ISP_Algo_Process+0x6>
      }
#endif
    }
  }

  return ISP_OK;
34005290:	2000      	movs	r0, #0
}
34005292:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->Process != NULL))
34005294:	68cb      	ldr	r3, [r1, #12]
34005296:	2b00      	cmp	r3, #0
34005298:	d0f7      	beq.n	3400528a <ISP_Algo_Process+0xc>
      ret = algo->Process((void*)hIsp, (void*)algo);
3400529a:	4620      	mov	r0, r4
3400529c:	4798      	blx	r3
      if (ret != ISP_OK)
3400529e:	2800      	cmp	r0, #0
340052a0:	d0f3      	beq.n	3400528a <ISP_Algo_Process+0xc>
340052a2:	e7f6      	b.n	34005292 <ISP_Algo_Process+0x14>

340052a4 <ISP_Init>:
ISP_StatusTypeDef ISP_Init(ISP_HandleTypeDef *hIsp,
                           void *hDcmipp,
                           uint32_t CameraInstance,
                           ISP_AppliHelpersTypeDef *pAppliHelpers,
                           const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
340052a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340052a6:	460e      	mov	r6, r1
340052a8:	4617      	mov	r7, r2
340052aa:	461c      	mov	r4, r3
  ISP_StatusTypeDef ret;

  if ((hIsp == NULL) || (hDcmipp == NULL) || (pAppliHelpers == NULL))
340052ac:	4605      	mov	r5, r0
340052ae:	2800      	cmp	r0, #0
340052b0:	d066      	beq.n	34005380 <ISP_Init+0xdc>
340052b2:	2900      	cmp	r1, #0
340052b4:	d064      	beq.n	34005380 <ISP_Init+0xdc>
340052b6:	2b00      	cmp	r3, #0
340052b8:	d062      	beq.n	34005380 <ISP_Init+0xdc>
  {
    return ISP_ERR_EINVAL;
  }

  memset(hIsp, 0, sizeof(*hIsp));
340052ba:	2280      	movs	r2, #128	@ 0x80
340052bc:	2100      	movs	r1, #0
340052be:	3008      	adds	r0, #8
340052c0:	f019 fbde 	bl	3401ea80 <memset>
  hIsp->cameraInstance = CameraInstance;
  hIsp->MainPipe_FrameCount = 0;
  hIsp->AncillaryPipe_FrameCount = 0;
  hIsp->DumpPipe_FrameCount = 0;

  hIsp->appliHelpers = *pAppliHelpers;
340052c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  hIsp->cameraInstance = CameraInstance;
340052c6:	e9c5 6700 	strd	r6, r7, [r5]
  hIsp->appliHelpers = *pAppliHelpers;
340052ca:	f105 061c 	add.w	r6, r5, #28
340052ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
340052d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
340052d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
340052d4:	6823      	ldr	r3, [r4, #0]
340052d6:	6033      	str	r3, [r6, #0]
  /* Appli CB is mandatory for the sensor get/set exp/gain function */
  if (hIsp->appliHelpers.GetSensorInfo == NULL)
340052d8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
340052da:	b933      	cbnz	r3, 340052ea <ISP_Init+0x46>
  {
     printf("INFO: GetSensorInfo helper function is not implemented\r\n");
340052dc:	4829      	ldr	r0, [pc, #164]	@ (34005384 <ISP_Init+0xe0>)
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
      return ISP_ERR_APP_HELPER_UNDEFINED;
  }
  if (hIsp->appliHelpers.GetSensorGain == NULL)
  {
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
340052de:	f019 fa99 	bl	3401e814 <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
340052e2:	24b4      	movs	r4, #180	@ 0xb4

  /* Initialize the statistic engine */
  ISP_SVC_Stats_Init(hIsp);

  return ISP_OK;
}
340052e4:	4620      	mov	r0, r4
340052e6:	b003      	add	sp, #12
340052e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hIsp->appliHelpers.SetSensorGain == NULL)
340052ea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
340052ec:	b90b      	cbnz	r3, 340052f2 <ISP_Init+0x4e>
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
340052ee:	4826      	ldr	r0, [pc, #152]	@ (34005388 <ISP_Init+0xe4>)
340052f0:	e7f5      	b.n	340052de <ISP_Init+0x3a>
  if (hIsp->appliHelpers.GetSensorGain == NULL)
340052f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
340052f4:	b90b      	cbnz	r3, 340052fa <ISP_Init+0x56>
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
340052f6:	4825      	ldr	r0, [pc, #148]	@ (3400538c <ISP_Init+0xe8>)
340052f8:	e7f1      	b.n	340052de <ISP_Init+0x3a>
  if (hIsp->appliHelpers.SetSensorExposure == NULL)
340052fa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
340052fc:	b90b      	cbnz	r3, 34005302 <ISP_Init+0x5e>
      printf("INFO: SetSensorExposure helper function is not implemented\r\n");
340052fe:	4824      	ldr	r0, [pc, #144]	@ (34005390 <ISP_Init+0xec>)
34005300:	e7ed      	b.n	340052de <ISP_Init+0x3a>
  if (hIsp->appliHelpers.GetSensorExposure == NULL)
34005302:	6bab      	ldr	r3, [r5, #56]	@ 0x38
34005304:	b90b      	cbnz	r3, 3400530a <ISP_Init+0x66>
     printf("INFO: GetSensorExposure helper function is not implemented\r\n");
34005306:	4823      	ldr	r0, [pc, #140]	@ (34005394 <ISP_Init+0xf0>)
34005308:	e7e9      	b.n	340052de <ISP_Init+0x3a>
  ret = ISP_SVC_IQParam_Init(hIsp, ISP_IQParamCacheInit);
3400530a:	4628      	mov	r0, r5
3400530c:	9908      	ldr	r1, [sp, #32]
3400530e:	f000 fe19 	bl	34005f44 <ISP_SVC_IQParam_Init>
  if (ret != ISP_OK)
34005312:	4604      	mov	r4, r0
34005314:	2800      	cmp	r0, #0
34005316:	d1e5      	bne.n	340052e4 <ISP_Init+0x40>
  ret = ISP_SVC_Sensor_GetInfo(hIsp, &hIsp->sensorInfo);
34005318:	4628      	mov	r0, r5
3400531a:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
3400531e:	f000 fd67 	bl	34005df0 <ISP_SVC_Sensor_GetInfo>
  if (ret != ISP_OK)
34005322:	4604      	mov	r4, r0
34005324:	2800      	cmp	r0, #0
34005326:	d1dd      	bne.n	340052e4 <ISP_Init+0x40>
  if ((hIsp->sensorInfo.width / ISP_DECIM_FACTOR_1) < ISP_RAW_MAX_WIDTH)
34005328:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
3400532a:	f5b2 6f28 	cmp.w	r2, #2688	@ 0xa80
3400532e:	d30f      	bcc.n	34005350 <ISP_Init+0xac>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_2) < ISP_RAW_MAX_WIDTH)
34005330:	f5b2 5fa8 	cmp.w	r2, #5376	@ 0x1500
34005334:	d320      	bcc.n	34005378 <ISP_Init+0xd4>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_4) < ISP_RAW_MAX_WIDTH)
34005336:	f5b2 5f28 	cmp.w	r2, #10752	@ 0x2a00
3400533a:	d31f      	bcc.n	3400537c <ISP_Init+0xd8>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_8) < ISP_RAW_MAX_WIDTH)
3400533c:	f5b2 4fa8 	cmp.w	r2, #21504	@ 0x5400
34005340:	f04f 0308 	mov.w	r3, #8
34005344:	d305      	bcc.n	34005352 <ISP_Init+0xae>
    printf("ERROR: No possible decimation factor to target ISP RAW width constraint\r\n");
34005346:	4814      	ldr	r0, [pc, #80]	@ (34005398 <ISP_Init+0xf4>)
34005348:	f019 fa64 	bl	3401e814 <puts>
    return ISP_ERR_DECIMATION_EINVAL;
3400534c:	241e      	movs	r4, #30
3400534e:	e7c9      	b.n	340052e4 <ISP_Init+0x40>
34005350:	2301      	movs	r3, #1
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
34005352:	4628      	mov	r0, r5
34005354:	a901      	add	r1, sp, #4
    decimation.factor = ISP_DECIM_FACTOR_1;
34005356:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
3400535a:	f000 fa25 	bl	340057a8 <ISP_SVC_ISP_SetDecimation>
  if (ret != ISP_OK)
3400535e:	4604      	mov	r4, r0
34005360:	2800      	cmp	r0, #0
34005362:	d1bf      	bne.n	340052e4 <ISP_Init+0x40>
  ret = ISP_Algo_Init(hIsp);
34005364:	4628      	mov	r0, r5
34005366:	f7ff ff5f 	bl	34005228 <ISP_Algo_Init>
  if (ret != ISP_OK)
3400536a:	4604      	mov	r4, r0
3400536c:	2800      	cmp	r0, #0
3400536e:	d1b9      	bne.n	340052e4 <ISP_Init+0x40>
  ISP_SVC_Stats_Init(hIsp);
34005370:	4628      	mov	r0, r5
34005372:	f000 fdf5 	bl	34005f60 <ISP_SVC_Stats_Init>
  return ISP_OK;
34005376:	e7b5      	b.n	340052e4 <ISP_Init+0x40>
34005378:	2302      	movs	r3, #2
3400537a:	e7ea      	b.n	34005352 <ISP_Init+0xae>
3400537c:	2304      	movs	r3, #4
3400537e:	e7e8      	b.n	34005352 <ISP_Init+0xae>
    return ISP_ERR_EINVAL;
34005380:	2401      	movs	r4, #1
34005382:	e7af      	b.n	340052e4 <ISP_Init+0x40>
34005384:	34023c36 	.word	0x34023c36
34005388:	34023c6e 	.word	0x34023c6e
3400538c:	34023ca6 	.word	0x34023ca6
34005390:	34023cde 	.word	0x34023cde
34005394:	34023d1a 	.word	0x34023d1a
34005398:	34023d56 	.word	0x34023d56

3400539c <ISP_DeInit>:
  *         Deinitializes the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_DeInit(ISP_HandleTypeDef *hIsp)
{
3400539c:	b538      	push	{r3, r4, r5, lr}
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
3400539e:	4605      	mov	r5, r0
340053a0:	b150      	cbz	r0, 340053b8 <ISP_DeInit+0x1c>
  {
    return ISP_ERR_EINVAL;
  }

  /* DeInitialize algorithms */
  ret = ISP_Algo_DeInit(hIsp);
340053a2:	f7ff ff59 	bl	34005258 <ISP_Algo_DeInit>
  if (ret != ISP_OK)
340053a6:	4604      	mov	r4, r0
340053a8:	b920      	cbnz	r0, 340053b4 <ISP_DeInit+0x18>
  {
    return ret;
  }

  /* Re-initialized the hIsp structure */
  memset(hIsp, 0, sizeof(*hIsp));
340053aa:	4601      	mov	r1, r0
340053ac:	2288      	movs	r2, #136	@ 0x88
340053ae:	4628      	mov	r0, r5
340053b0:	f019 fb66 	bl	3401ea80 <memset>

  return ISP_OK;
}
340053b4:	4620      	mov	r0, r4
340053b6:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_EINVAL;
340053b8:	2401      	movs	r4, #1
340053ba:	e7fb      	b.n	340053b4 <ISP_DeInit+0x18>
340053bc:	0000      	movs	r0, r0
	...

340053c0 <ISP_Start>:
  *         Configures the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_Start(ISP_HandleTypeDef *hIsp)
{
340053c0:	b567      	push	{r0, r1, r2, r5, r6, lr}
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
340053c2:	4605      	mov	r5, r0
340053c4:	2800      	cmp	r0, #0
340053c6:	f000 8095 	beq.w	340054f4 <ISP_Start+0x134>
  {
    return ISP_ERR_EINVAL;
  }

  ret = ISP_SVC_Misc_IsDCMIPPReady(hIsp);
340053ca:	f000 fd67 	bl	34005e9c <ISP_SVC_Misc_IsDCMIPPReady>
  if (ret != ISP_OK)
340053ce:	2800      	cmp	r0, #0
340053d0:	d149      	bne.n	34005466 <ISP_Start+0xa6>
  {
    return ret;
  }

  /* Get IQ Param config */
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340053d2:	4628      	mov	r0, r5
340053d4:	f000 fdc0 	bl	34005f58 <ISP_SVC_IQParam_Get>
340053d8:	4606      	mov	r6, r0

  /* Set static configurations */
  ret = ISP_SVC_ISP_SetDemosaicing(hIsp, &IQParamConfig->demosaicing);
340053da:	f100 010c 	add.w	r1, r0, #12
340053de:	4628      	mov	r0, r5
340053e0:	f000 f982 	bl	340056e8 <ISP_SVC_ISP_SetDemosaicing>
  if (ret != ISP_OK)
340053e4:	2800      	cmp	r0, #0
340053e6:	d13e      	bne.n	34005466 <ISP_Start+0xa6>
  {
    return ret;
  }

  ret = ISP_SVC_ISP_SetStatRemoval(hIsp, &IQParamConfig->statRemoval);
340053e8:	4631      	mov	r1, r6
340053ea:	4628      	mov	r0, r5
340053ec:	f000 f9bb 	bl	34005766 <ISP_SVC_ISP_SetStatRemoval>
  if (ret != ISP_OK)
340053f0:	2800      	cmp	r0, #0
340053f2:	d138      	bne.n	34005466 <ISP_Start+0xa6>
  {
    return ret;
  }

  ret = ISP_SVC_ISP_SetContrast(hIsp, &IQParamConfig->contrast);
340053f4:	4628      	mov	r0, r5
340053f6:	f106 0114 	add.w	r1, r6, #20
340053fa:	f000 fa09 	bl	34005810 <ISP_SVC_ISP_SetContrast>
  if (ret != ISP_OK)
340053fe:	bb90      	cbnz	r0, 34005466 <ISP_Start+0xa6>
  {
    return ret;
  }

  /* Set optional static configurations */
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34005400:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
34005402:	bb2b      	cbnz	r3, 34005450 <ISP_Start+0x90>
    {
      return ret;
    }
  }

  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
34005404:	6d33      	ldr	r3, [r6, #80]	@ 0x50
34005406:	bb83      	cbnz	r3, 3400546a <ISP_Start+0xaa>
    {
      return ret;
    }
  }

  if (IQParamConfig->badPixelStatic.enable != 0)
34005408:	f896 305c 	ldrb.w	r3, [r6, #92]	@ 0x5c
3400540c:	b12b      	cbz	r3, 3400541a <ISP_Start+0x5a>
  {
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &IQParamConfig->badPixelStatic);
3400540e:	4628      	mov	r0, r5
34005410:	f106 015c 	add.w	r1, r6, #92	@ 0x5c
34005414:	f000 fac2 	bl	3400599c <ISP_SVC_ISP_SetBadPixel>
    if (ret != ISP_OK)
34005418:	bb28      	cbnz	r0, 34005466 <ISP_Start+0xa6>
    {
      return ret;
    }
  }

  if (IQParamConfig->blackLevelStatic.enable != 0)
3400541a:	f896 3064 	ldrb.w	r3, [r6, #100]	@ 0x64
3400541e:	b12b      	cbz	r3, 3400542c <ISP_Start+0x6c>
  {
    ret = ISP_SVC_ISP_SetBlackLevel(hIsp, &IQParamConfig->blackLevelStatic);
34005420:	4628      	mov	r0, r5
34005422:	f106 0164 	add.w	r1, r6, #100	@ 0x64
34005426:	f000 faee 	bl	34005a06 <ISP_SVC_ISP_SetBlackLevel>
    if (ret != ISP_OK)
3400542a:	b9e0      	cbnz	r0, 34005466 <ISP_Start+0xa6>
    {
      return ret;
    }
  }

  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
3400542c:	f896 321c 	ldrb.w	r3, [r6, #540]	@ 0x21c
34005430:	bb3b      	cbnz	r3, 34005482 <ISP_Start+0xc2>
    {
      return ret;
    }
  }

  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005432:	f896 322c 	ldrb.w	r3, [r6, #556]	@ 0x22c
34005436:	2b00      	cmp	r3, #0
34005438:	d12f      	bne.n	3400549a <ISP_Start+0xda>
      return ret;
    }
  }

  /* Configure statistic area if not already configured by ISP_SetStatArea() */
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
3400543a:	692b      	ldr	r3, [r5, #16]
3400543c:	2b00      	cmp	r3, #0
3400543e:	d138      	bne.n	340054b2 <ISP_Start+0xf2>
  {
    /* Configure statistic area from IQ params */
    ret = ISP_SVC_ISP_SetStatArea(hIsp, &IQParamConfig->statAreaStatic);
34005440:	4628      	mov	r0, r5
34005442:	f106 013c 	add.w	r1, r6, #60	@ 0x3c
34005446:	f000 fa5d 	bl	34005904 <ISP_SVC_ISP_SetStatArea>
    if (ret != ISP_OK)
3400544a:	2800      	cmp	r0, #0
3400544c:	d034      	beq.n	340054b8 <ISP_Start+0xf8>
3400544e:	e00a      	b.n	34005466 <ISP_Start+0xa6>
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34005450:	f896 3068 	ldrb.w	r3, [r6, #104]	@ 0x68
34005454:	2b00      	cmp	r3, #0
34005456:	d1d5      	bne.n	34005404 <ISP_Start+0x44>
    ret = ISP_SVC_Sensor_SetGain(hIsp, &IQParamConfig->sensorGainStatic);
34005458:	4628      	mov	r0, r5
3400545a:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
3400545e:	f000 fcd5 	bl	34005e0c <ISP_SVC_Sensor_SetGain>
    if (ret != ISP_OK)
34005462:	2800      	cmp	r0, #0
34005464:	d0ce      	beq.n	34005404 <ISP_Start+0x44>

  /* Initialize the exposure target based on the selected exposure compensation */
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));

  return ISP_OK;
}
34005466:	b003      	add	sp, #12
34005468:	bd60      	pop	{r5, r6, pc}
  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
3400546a:	f896 3068 	ldrb.w	r3, [r6, #104]	@ 0x68
3400546e:	2b00      	cmp	r3, #0
34005470:	d1ca      	bne.n	34005408 <ISP_Start+0x48>
    ret = ISP_SVC_Sensor_SetExposure(hIsp, &IQParamConfig->sensorExposureStatic);
34005472:	4628      	mov	r0, r5
34005474:	f106 0150 	add.w	r1, r6, #80	@ 0x50
34005478:	f000 fcec 	bl	34005e54 <ISP_SVC_Sensor_SetExposure>
    if (ret != ISP_OK)
3400547c:	2800      	cmp	r0, #0
3400547e:	d0c3      	beq.n	34005408 <ISP_Start+0x48>
34005480:	e7f1      	b.n	34005466 <ISP_Start+0xa6>
  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005482:	f896 3074 	ldrb.w	r3, [r6, #116]	@ 0x74
34005486:	2b00      	cmp	r3, #0
34005488:	d1d3      	bne.n	34005432 <ISP_Start+0x72>
    ret = ISP_SVC_ISP_SetGain(hIsp, &IQParamConfig->ispGainStatic);
3400548a:	4628      	mov	r0, r5
3400548c:	f506 7107 	add.w	r1, r6, #540	@ 0x21c
34005490:	f000 fafa 	bl	34005a88 <ISP_SVC_ISP_SetGain>
    if (ret != ISP_OK)
34005494:	2800      	cmp	r0, #0
34005496:	d0cc      	beq.n	34005432 <ISP_Start+0x72>
34005498:	e7e5      	b.n	34005466 <ISP_Start+0xa6>
  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
3400549a:	f896 3074 	ldrb.w	r3, [r6, #116]	@ 0x74
3400549e:	2b00      	cmp	r3, #0
340054a0:	d1cb      	bne.n	3400543a <ISP_Start+0x7a>
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &IQParamConfig->colorConvStatic);
340054a2:	4628      	mov	r0, r5
340054a4:	f506 710b 	add.w	r1, r6, #556	@ 0x22c
340054a8:	f000 fbd2 	bl	34005c50 <ISP_SVC_ISP_SetColorConv>
    if (ret != ISP_OK)
340054ac:	2800      	cmp	r0, #0
340054ae:	d0c4      	beq.n	3400543a <ISP_Start+0x7a>
340054b0:	e7d9      	b.n	34005466 <ISP_Start+0xa6>
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
340054b2:	696b      	ldr	r3, [r5, #20]
340054b4:	2b00      	cmp	r3, #0
340054b6:	d0c3      	beq.n	34005440 <ISP_Start+0x80>
  ret = ISP_SVC_ISP_SetGamma(hIsp, &IQParamConfig->gamma);
340054b8:	4628      	mov	r0, r5
340054ba:	f506 7115 	add.w	r1, r6, #596	@ 0x254
340054be:	f000 fd1f 	bl	34005f00 <ISP_SVC_ISP_SetGamma>
  if (ret != ISP_OK)
340054c2:	2800      	cmp	r0, #0
340054c4:	d1cf      	bne.n	34005466 <ISP_Start+0xa6>
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
340054c6:	f996 3069 	ldrsb.w	r3, [r6, #105]	@ 0x69
340054ca:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
340054ce:	ee01 3a10 	vmov	s2, r3
340054d2:	eeba 1aef 	vcvt.f32.s32	s2, s2, #1
340054d6:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
340054da:	9001      	str	r0, [sp, #4]
340054dc:	f01b fd5c 	bl	34020f98 <pow>
340054e0:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 340054f8 <ISP_Start+0x138>
340054e4:	ee20 0b07 	vmul.f64	d0, d0, d7
340054e8:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  return ISP_OK;
340054ec:	9801      	ldr	r0, [sp, #4]
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
340054ee:	ed86 0a1b 	vstr	s0, [r6, #108]	@ 0x6c
  return ISP_OK;
340054f2:	e7b8      	b.n	34005466 <ISP_Start+0xa6>
    return ISP_ERR_EINVAL;
340054f4:	2001      	movs	r0, #1
340054f6:	e7b6      	b.n	34005466 <ISP_Start+0xa6>
340054f8:	00000000 	.word	0x00000000
340054fc:	404c0000 	.word	0x404c0000

34005500 <ISP_BackgroundProcess>:
  *         Run the background process of the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_BackgroundProcess(ISP_HandleTypeDef *hIsp)
{
34005500:	b538      	push	{r3, r4, r5, lr}
#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_StatusTypeDef retCmdParser = ISP_OK;
  uint8_t *cmd;
#endif

  if (hIsp == NULL)
34005502:	4605      	mov	r5, r0
34005504:	b150      	cbz	r0, 3400551c <ISP_BackgroundProcess+0x1c>
    retCmdParser = ISP_CmdParser_ProcessCommand(hIsp, cmd);
  }
#endif

  /* Check if a statistics gathering cycle has been completed to call the statistic callbacks */
  retStats = ISP_SVC_Stats_ProcessCallbacks(hIsp);
34005506:	f000 ff2d 	bl	34006364 <ISP_SVC_Stats_ProcessCallbacks>
3400550a:	4604      	mov	r4, r0

  /* Process the algorithms */
  retAlgo = ISP_Algo_Process(hIsp);
3400550c:	4628      	mov	r0, r5
3400550e:	f7ff feb6 	bl	3400527e <ISP_Algo_Process>
  else if (retAlgo != ISP_OK)
  {
    return retAlgo;
  }

  return ISP_OK;
34005512:	2c00      	cmp	r4, #0
34005514:	bf08      	it	eq
34005516:	4604      	moveq	r4, r0
}
34005518:	4620      	mov	r0, r4
3400551a:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_EINVAL;
3400551c:	2401      	movs	r4, #1
3400551e:	e7fb      	b.n	34005518 <ISP_BackgroundProcess+0x18>

34005520 <ISP_ListWBRefModes>:
  * @param  hIsp: ISP device handle
  * @param  RefColorTemp: Array of reference color temperatures
  * @retval Operation status
  */
ISP_StatusTypeDef ISP_ListWBRefModes(ISP_HandleTypeDef *hIsp, uint32_t RefColorTemp[])
{
34005520:	b510      	push	{r4, lr}
34005522:	460c      	mov	r4, r1
  ISP_IQParamTypeDef *IQParamConfig;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005524:	f000 fd18 	bl	34005f58 <ISP_SVC_IQParam_Get>

  memcpy(RefColorTemp, IQParamConfig->AWBAlgo.referenceColorTemp, sizeof(IQParamConfig->AWBAlgo.referenceColorTemp));
34005528:	f04f 0e05 	mov.w	lr, #5
3400552c:	4621      	mov	r1, r4
3400552e:	f04e e001 	dls	lr, lr
34005532:	f500 708c 	add.w	r0, r0, #280	@ 0x118
34005536:	f850 3b04 	ldr.w	r3, [r0], #4
3400553a:	f841 3b04 	str.w	r3, [r1], #4
3400553e:	f00f c007 	le	lr, 34005536 <ISP_ListWBRefModes+0x16>

  return ISP_OK;
}
34005542:	2000      	movs	r0, #0
34005544:	bd10      	pop	{r4, pc}

34005546 <ISP_SetWBRefMode>:
  * @param  Automatic: 'true' if the AWB automatic mode is requested
  * @param  RefColorTemp: Reference color temperature (manual mode). Not significant if Automatic is set to 'true'
  * @retval Operation status
  */
ISP_StatusTypeDef ISP_SetWBRefMode(ISP_HandleTypeDef *hIsp, uint8_t Automatic, uint32_t RefColorTemp)
{
34005546:	b570      	push	{r4, r5, r6, lr}
34005548:	460e      	mov	r6, r1
3400554a:	b08e      	sub	sp, #56	@ 0x38
3400554c:	4604      	mov	r4, r0
3400554e:	4615      	mov	r5, r2
  ISP_ColorConvTypeDef ColorConv;
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;
  uint32_t index;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005550:	f000 fd02 	bl	34005f58 <ISP_SVC_IQParam_Get>

  if (Automatic)
34005554:	b12e      	cbz	r6, 34005562 <ISP_SetWBRefMode+0x1c>
  {
    /* Start the AWB algorithm */
    IQParamConfig->AWBAlgo.enable = 1;
34005556:	2301      	movs	r3, #1
34005558:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    {
      return ret;
    }
  }

  return ISP_OK;
3400555c:	2000      	movs	r0, #0
}
3400555e:	b00e      	add	sp, #56	@ 0x38
34005560:	bd70      	pop	{r4, r5, r6, pc}
    for (index = 0; index < ISP_AWB_COLORTEMP_REF; index++)
34005562:	4631      	mov	r1, r6
34005564:	2305      	movs	r3, #5
34005566:	f500 728a 	add.w	r2, r0, #276	@ 0x114
      if (IQParamConfig->AWBAlgo.referenceColorTemp[index] == RefColorTemp)
3400556a:	f852 6f04 	ldr.w	r6, [r2, #4]!
3400556e:	42ae      	cmp	r6, r5
34005570:	d005      	beq.n	3400557e <ISP_SetWBRefMode+0x38>
    for (index = 0; index < ISP_AWB_COLORTEMP_REF; index++)
34005572:	3b01      	subs	r3, #1
34005574:	f101 0101 	add.w	r1, r1, #1
34005578:	d1f7      	bne.n	3400556a <ISP_SetWBRefMode+0x24>
      return ISP_ERR_WB_COLORTEMP;
3400557a:	2096      	movs	r0, #150	@ 0x96
3400557c:	e7ef      	b.n	3400555e <ISP_SetWBRefMode+0x18>
    IQParamConfig->AWBAlgo.enable = 0;
3400557e:	2300      	movs	r3, #0
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005580:	f04f 0e04 	mov.w	lr, #4
    IQParamConfig->AWBAlgo.enable = 0;
34005584:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    ISPGain.enable = 1;
34005588:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    ISPGain.ispGainR = IQParamConfig->AWBAlgo.ispGainR[index];
3400558c:	f8d3 612c 	ldr.w	r6, [r3, #300]	@ 0x12c
    ISPGain.enable = 1;
34005590:	2201      	movs	r2, #1
    ISPGain.ispGainR = IQParamConfig->AWBAlgo.ispGainR[index];
34005592:	9601      	str	r6, [sp, #4]
    ISPGain.ispGainG = IQParamConfig->AWBAlgo.ispGainG[index];
34005594:	f8d3 6140 	ldr.w	r6, [r3, #320]	@ 0x140
    ISPGain.ispGainB = IQParamConfig->AWBAlgo.ispGainB[index];
34005598:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
3400559c:	f04e e001 	dls	lr, lr
    ISPGain.ispGainB = IQParamConfig->AWBAlgo.ispGainB[index];
340055a0:	9303      	str	r3, [sp, #12]
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
340055a2:	2324      	movs	r3, #36	@ 0x24
340055a4:	fb03 0301 	mla	r3, r3, r1, r0
    ISPGain.enable = 1;
340055a8:	f88d 2000 	strb.w	r2, [sp]
    ColorConv.enable = 1;
340055ac:	f88d 2010 	strb.w	r2, [sp, #16]
    ISPGain.ispGainG = IQParamConfig->AWBAlgo.ispGainG[index];
340055b0:	9602      	str	r6, [sp, #8]
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
340055b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
340055b6:	aa05      	add	r2, sp, #20
340055b8:	4616      	mov	r6, r2
340055ba:	6818      	ldr	r0, [r3, #0]
340055bc:	6859      	ldr	r1, [r3, #4]
340055be:	3308      	adds	r3, #8
340055c0:	c603      	stmia	r6!, {r0, r1}
340055c2:	4632      	mov	r2, r6
340055c4:	f00f c009 	le	lr, 340055b8 <ISP_SetWBRefMode+0x72>
340055c8:	6818      	ldr	r0, [r3, #0]
    ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGain);
340055ca:	4669      	mov	r1, sp
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
340055cc:	6030      	str	r0, [r6, #0]
    ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGain);
340055ce:	4620      	mov	r0, r4
340055d0:	f000 fa5a 	bl	34005a88 <ISP_SVC_ISP_SetGain>
    if (ret != ISP_OK)
340055d4:	2800      	cmp	r0, #0
340055d6:	d1c2      	bne.n	3400555e <ISP_SetWBRefMode+0x18>
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConv);
340055d8:	4620      	mov	r0, r4
340055da:	a904      	add	r1, sp, #16
340055dc:	f000 fb38 	bl	34005c50 <ISP_SVC_ISP_SetColorConv>
    if (ret != ISP_OK)
340055e0:	2800      	cmp	r0, #0
340055e2:	d1bc      	bne.n	3400555e <ISP_SetWBRefMode+0x18>
    ret = ISP_SVC_Misc_SetWBRefMode(hIsp, RefColorTemp);
340055e4:	4629      	mov	r1, r5
340055e6:	4620      	mov	r0, r4
340055e8:	f000 fc72 	bl	34005ed0 <ISP_SVC_Misc_SetWBRefMode>
    if (ret != ISP_OK)
340055ec:	e7b7      	b.n	3400555e <ISP_SetWBRefMode+0x18>

340055ee <ISP_GatherStatistics>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_GatherStatistics(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Stats_Gather(hIsp);
340055ee:	f000 bcbf 	b.w	34005f70 <ISP_SVC_Stats_Gather>

340055f2 <ISP_IncMainFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Misc_IncMainFrameId(hIsp);
340055f2:	f000 bc5f 	b.w	34005eb4 <ISP_SVC_Misc_IncMainFrameId>

340055f6 <ISP_IncAncillaryFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
	ISP_SVC_Misc_IncAncillaryFrameId(hIsp);
340055f6:	f000 bc63 	b.w	34005ec0 <ISP_SVC_Misc_IncAncillaryFrameId>

340055fa <ISP_IncDumpFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Misc_IncDumpFrameId(hIsp);
340055fa:	f000 bc65 	b.w	34005ec8 <ISP_SVC_Misc_IncDumpFrameId>
	...

34005600 <GetAvgStats>:

  return (int32_t) Val;
}

static uint8_t GetAvgStats(ISP_HandleTypeDef *hIsp, ISP_SVC_StatLocation location, ISP_SVC_Component component, uint32_t accu)
{
34005600:	b510      	push	{r4, lr}
  uint32_t nb_comp_pix, comp_divider;

  /* Number of pixels computed from Stat Area and considering decimation */
  nb_comp_pix = hIsp->statArea.XSize * hIsp->statArea.YSize;
34005602:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
34005606:	4360      	muls	r0, r4
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
34005608:	4c0d      	ldr	r4, [pc, #52]	@ (34005640 <GetAvgStats+0x40>)

  if (location == ISP_STAT_LOC_DOWN)
3400560a:	2902      	cmp	r1, #2
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
3400560c:	7824      	ldrb	r4, [r4, #0]
3400560e:	fb04 f404 	mul.w	r4, r4, r4
34005612:	fbb0 f0f4 	udiv	r0, r0, r4
  if (location == ISP_STAT_LOC_DOWN)
34005616:	d010      	beq.n	3400563a <GetAvgStats+0x3a>
  }
  else
  {
    /* Only raw bayer sensor expected */
    /* raw bayer: RGB component not present for all pixels */
    comp_divider = (component == ISP_GREEN) ? 2 : 4;
34005618:	2a01      	cmp	r2, #1
3400561a:	bf14      	ite	ne
3400561c:	2204      	movne	r2, #4
3400561e:	2202      	moveq	r2, #2

  /* Number of pixels per component */
  nb_comp_pix /= comp_divider;

  /* Compute average (rounding to closest integer) */
  if (nb_comp_pix == 0)
34005620:	4282      	cmp	r2, r0
  nb_comp_pix /= comp_divider;
34005622:	bf9f      	itttt	ls
34005624:	fbb0 f0f2 	udivls	r0, r0, r2
  {
    return 0;
  }

  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
34005628:	0842      	lsrls	r2, r0, #1
3400562a:	eb02 2303 	addls.w	r3, r2, r3, lsl #8
3400562e:	fbb3 f0f0 	udivls	r0, r3, r0
    return 0;
34005632:	bf8c      	ite	hi
34005634:	2000      	movhi	r0, #0
  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
34005636:	b2c0      	uxtbls	r0, r0
}
34005638:	bd10      	pop	{r4, pc}
    comp_divider = 1;
3400563a:	2201      	movs	r2, #1
3400563c:	e7f0      	b.n	34005620 <GetAvgStats+0x20>
3400563e:	bf00      	nop
34005640:	340a31ba 	.word	0x340a31ba

34005644 <SetStatConfig>:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
  }
}

static void SetStatConfig(DCMIPP_StatisticExtractionConfTypeDef *statConf, const DCMIPP_StatisticExtractionConfTypeDef *refConfig)
{
34005644:	b5f0      	push	{r4, r5, r6, r7, lr}
34005646:	460b      	mov	r3, r1
34005648:	4606      	mov	r6, r0
  for (int i = 0; i < 3; i++)
3400564a:	2400      	movs	r4, #0
  {
    statConf[i] = *refConfig;
3400564c:	270c      	movs	r7, #12
3400564e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
34005652:	fb07 6504 	mla	r5, r7, r4, r6
  for (int i = 0; i < 3; i++)
34005656:	3401      	adds	r4, #1
34005658:	2c03      	cmp	r4, #3
    statConf[i] = *refConfig;
3400565a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  for (int i = 0; i < 3; i++)
3400565e:	d1f6      	bne.n	3400564e <SetStatConfig+0xa>
  }
}
34005660:	bdf0      	pop	{r4, r5, r6, r7, pc}

34005662 <ReadStatHistogram>:
{
34005662:	b570      	push	{r4, r5, r6, lr}
34005664:	4606      	mov	r6, r0
34005666:	460c      	mov	r4, r1
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005668:	2501      	movs	r5, #1
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
3400566a:	4623      	mov	r3, r4
3400566c:	b2ea      	uxtb	r2, r5
3400566e:	2101      	movs	r1, #1
34005670:	6830      	ldr	r0, [r6, #0]
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005672:	3501      	adds	r5, #1
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34005674:	f00c fb84 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005678:	2d04      	cmp	r5, #4
3400567a:	f104 0404 	add.w	r4, r4, #4
3400567e:	d1f4      	bne.n	3400566a <ReadStatHistogram+0x8>
}
34005680:	bd70      	pop	{r4, r5, r6, pc}
34005682:	0000      	movs	r0, r0
34005684:	0000      	movs	r0, r0
	...

34005688 <LuminanceFromRGB>:
  }
  return stage;
}

uint8_t LuminanceFromRGB(uint8_t r, uint8_t g, uint8_t b)
{
34005688:	ee07 1a10 	vmov	s14, r1
3400568c:	ee05 0a10 	vmov	s10, r0
  /* Compute luminance from RGB components (BT.601) */
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005690:	ed9f 4b0f 	vldr	d4, [pc, #60]	@ 340056d0 <LuminanceFromRGB+0x48>
34005694:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
{
34005698:	ee06 2a10 	vmov	s12, r2
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
3400569c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
340056a0:	ee27 7b04 	vmul.f64	d7, d7, d4
340056a4:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 340056d8 <LuminanceFromRGB+0x50>
340056a8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
340056ac:	eea5 7b04 	vfma.f64	d7, d5, d4
340056b0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 340056e0 <LuminanceFromRGB+0x58>
340056b4:	eea6 7b05 	vfma.f64	d7, d6, d5
340056b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
{
340056bc:	b082      	sub	sp, #8
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
340056be:	edcd 7a01 	vstr	s15, [sp, #4]
}
340056c2:	f89d 0004 	ldrb.w	r0, [sp, #4]
340056c6:	b002      	add	sp, #8
340056c8:	4770      	bx	lr
340056ca:	bf00      	nop
340056cc:	f3af 8000 	nop.w
340056d0:	39581062 	.word	0x39581062
340056d4:	3fe2c8b4 	.word	0x3fe2c8b4
340056d8:	e5604189 	.word	0xe5604189
340056dc:	3fd322d0 	.word	0x3fd322d0
340056e0:	9fbe76c9 	.word	0x9fbe76c9
340056e4:	3fbd2f1a 	.word	0x3fbd2f1a

340056e8 <ISP_SVC_ISP_SetDemosaicing>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the demosaicing configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDemosaicing(ISP_HandleTypeDef *hIsp, ISP_DemosaicingTypeDef *pConfig)
{
340056e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_RawBayer2RGBConfTypeDef rawBayerCfg;

  if ((hIsp == NULL) || (pConfig == NULL) ||
340056ea:	4604      	mov	r4, r0
{
340056ec:	b087      	sub	sp, #28
  if ((hIsp == NULL) || (pConfig == NULL) ||
340056ee:	2800      	cmp	r0, #0
340056f0:	d037      	beq.n	34005762 <ISP_SVC_ISP_SetDemosaicing+0x7a>
340056f2:	2900      	cmp	r1, #0
340056f4:	d035      	beq.n	34005762 <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
340056f6:	788f      	ldrb	r7, [r1, #2]
  if ((hIsp == NULL) || (pConfig == NULL) ||
340056f8:	2f07      	cmp	r7, #7
340056fa:	d832      	bhi.n	34005762 <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
340056fc:	78ce      	ldrb	r6, [r1, #3]
340056fe:	2e07      	cmp	r6, #7
34005700:	d82f      	bhi.n	34005762 <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34005702:	790d      	ldrb	r5, [r1, #4]
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005704:	2d07      	cmp	r5, #7
34005706:	d82c      	bhi.n	34005762 <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34005708:	7948      	ldrb	r0, [r1, #5]
3400570a:	2807      	cmp	r0, #7
3400570c:	d829      	bhi.n	34005762 <ISP_SVC_ISP_SetDemosaicing+0x7a>
  {
    return ISP_ERR_DEMOSAICING_EINVAL;
  }

  /* Do not enable demosaicing if the camera sensor is a monochrome sensor */
  if ((pConfig->enable == 0) || (pConfig->type == ISP_DEMOS_TYPE_MONO))
3400570e:	780b      	ldrb	r3, [r1, #0]
34005710:	b113      	cbz	r3, 34005718 <ISP_SVC_ISP_SetDemosaicing+0x30>
34005712:	784a      	ldrb	r2, [r1, #1]
34005714:	2a04      	cmp	r2, #4
34005716:	d107      	bne.n	34005728 <ISP_SVC_ISP_SetDemosaicing+0x40>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34005718:	2101      	movs	r1, #1
3400571a:	6820      	ldr	r0, [r4, #0]
3400571c:	f00b fcdc 	bl	340110d8 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005720:	b100      	cbz	r0, 34005724 <ISP_SVC_ISP_SetDemosaicing+0x3c>
  {
    return ISP_ERR_DEMOSAICING_HAL;
34005722:	200b      	movs	r0, #11
  }

  return ISP_OK;
}
34005724:	b007      	add	sp, #28
34005726:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(pConfig->type)
34005728:	2a02      	cmp	r2, #2
3400572a:	d018      	beq.n	3400575e <ISP_SVC_ISP_SetDemosaicing+0x76>
3400572c:	1e51      	subs	r1, r2, #1
3400572e:	424b      	negs	r3, r1
34005730:	414b      	adcs	r3, r1
34005732:	2a03      	cmp	r2, #3
34005734:	ea4f 0343 	mov.w	r3, r3, lsl #1
34005738:	bf08      	it	eq
3400573a:	2306      	moveq	r3, #6
    rawBayerCfg.EdgeStrength = (uint32_t) pConfig->edge;
3400573c:	9005      	str	r0, [sp, #20]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
3400573e:	2101      	movs	r1, #1
34005740:	6820      	ldr	r0, [r4, #0]
34005742:	aa01      	add	r2, sp, #4
    rawBayerCfg.PeakStrength = (uint32_t) pConfig->peak;
34005744:	e9cd 3703 	strd	r3, r7, [sp, #12]
    rawBayerCfg.HLineStrength = (uint32_t) pConfig->lineH;
34005748:	e9cd 6501 	strd	r6, r5, [sp, #4]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
3400574c:	f00b fc52 	bl	34010ff4 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>
    if (halStatus == HAL_OK)
34005750:	2800      	cmp	r0, #0
34005752:	d1e6      	bne.n	34005722 <ISP_SVC_ISP_SetDemosaicing+0x3a>
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34005754:	2101      	movs	r1, #1
34005756:	6820      	ldr	r0, [r4, #0]
34005758:	f00b fca6 	bl	340110a8 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>
3400575c:	e7e0      	b.n	34005720 <ISP_SVC_ISP_SetDemosaicing+0x38>
    switch(pConfig->type)
3400575e:	2304      	movs	r3, #4
34005760:	e7ec      	b.n	3400573c <ISP_SVC_ISP_SetDemosaicing+0x54>
    return ISP_ERR_DEMOSAICING_EINVAL;
34005762:	200a      	movs	r0, #10
34005764:	e7de      	b.n	34005724 <ISP_SVC_ISP_SetDemosaicing+0x3c>

34005766 <ISP_SVC_ISP_SetStatRemoval>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Stat Removal configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatRemoval(ISP_HandleTypeDef *hIsp, ISP_StatRemovalTypeDef *pConfig)
{
34005766:	b510      	push	{r4, lr}
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005768:	4604      	mov	r4, r0
3400576a:	b1d8      	cbz	r0, 340057a4 <ISP_SVC_ISP_SetStatRemoval+0x3e>
3400576c:	b1d1      	cbz	r1, 340057a4 <ISP_SVC_ISP_SetStatRemoval+0x3e>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
3400576e:	684a      	ldr	r2, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005770:	2a07      	cmp	r2, #7
34005772:	d817      	bhi.n	340057a4 <ISP_SVC_ISP_SetStatRemoval+0x3e>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34005774:	f640 70fe 	movw	r0, #4094	@ 0xffe
34005778:	688b      	ldr	r3, [r1, #8]
3400577a:	4283      	cmp	r3, r0
3400577c:	d812      	bhi.n	340057a4 <ISP_SVC_ISP_SetStatRemoval+0x3e>
  {
    return ISP_ERR_STATREMOVAL_EINVAL;
  }

  if (pConfig->enable == 0)
3400577e:	7809      	ldrb	r1, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005780:	6820      	ldr	r0, [r4, #0]
  if (pConfig->enable == 0)
34005782:	b921      	cbnz	r1, 3400578e <ISP_SVC_ISP_SetStatRemoval+0x28>
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005784:	2101      	movs	r1, #1
34005786:	f00b fcfb 	bl	34011180 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
3400578a:	b128      	cbz	r0, 34005798 <ISP_SVC_ISP_SetStatRemoval+0x32>
3400578c:	e003      	b.n	34005796 <ISP_SVC_ISP_SetStatRemoval+0x30>
    halStatus = HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->nbHeadLines, pConfig->nbValidLines);
3400578e:	2101      	movs	r1, #1
34005790:	f00b fcba 	bl	34011108 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>
    if (halStatus == HAL_OK)
34005794:	b108      	cbz	r0, 3400579a <ISP_SVC_ISP_SetStatRemoval+0x34>
  {
    return ISP_ERR_STATREMOVAL_HAL;
34005796:	2015      	movs	r0, #21
  }

  return ISP_OK;
}
34005798:	bd10      	pop	{r4, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
3400579a:	2101      	movs	r1, #1
3400579c:	6820      	ldr	r0, [r4, #0]
3400579e:	f00b fce1 	bl	34011164 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>
340057a2:	e7f2      	b.n	3400578a <ISP_SVC_ISP_SetStatRemoval+0x24>
    return ISP_ERR_STATREMOVAL_EINVAL;
340057a4:	2014      	movs	r0, #20
340057a6:	e7f7      	b.n	34005798 <ISP_SVC_ISP_SetStatRemoval+0x32>

340057a8 <ISP_SVC_ISP_SetDecimation>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the decimation configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDecimation(ISP_HandleTypeDef *hIsp, ISP_DecimationTypeDef *pConfig)
{
340057a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
340057aa:	460c      	mov	r4, r1
  DCMIPP_DecimationConfTypeDef decimationCfg;
  ISP_StatusTypeDef ret = ISP_OK;

  /* Check handles validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340057ac:	4605      	mov	r5, r0
340057ae:	b350      	cbz	r0, 34005806 <ISP_SVC_ISP_SetDecimation+0x5e>
340057b0:	b349      	cbz	r1, 34005806 <ISP_SVC_ISP_SetDecimation+0x5e>
  {
    return ISP_ERR_DECIMATION_EINVAL;
  }

  switch (pConfig->factor)
340057b2:	780b      	ldrb	r3, [r1, #0]
340057b4:	3b01      	subs	r3, #1
340057b6:	2b07      	cmp	r3, #7
340057b8:	d825      	bhi.n	34005806 <ISP_SVC_ISP_SetDecimation+0x5e>
340057ba:	e8df f003 	tbb	[pc, r3]
340057be:	0417      	.short	0x0417
340057c0:	24241124 	.word	0x24241124
340057c4:	1424      	.short	0x1424
340057c6:	2308      	movs	r3, #8
340057c8:	2202      	movs	r2, #2
  {
  case ISP_DECIM_FACTOR_1:
    decimationCfg.VRatio = DCMIPP_VDEC_ALL;
    decimationCfg.HRatio = DCMIPP_HDEC_ALL;
340057ca:	e9cd 3200 	strd	r3, r2, [sp]

  default:
    return ISP_ERR_DECIMATION_EINVAL;
  }

  if (HAL_DCMIPP_PIPE_SetISPDecimationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &decimationCfg) != HAL_OK)
340057ce:	2101      	movs	r1, #1
340057d0:	466a      	mov	r2, sp
340057d2:	6828      	ldr	r0, [r5, #0]
340057d4:	f00b fa06 	bl	34010be4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>
340057d8:	b158      	cbz	r0, 340057f2 <ISP_SVC_ISP_SetDecimation+0x4a>
  {
    return ISP_ERR_DECIMATION_HAL;
340057da:	201f      	movs	r0, #31

  /* Save decimation value */
  ISP_DecimationValue.factor = pConfig->factor;

  return ret;
}
340057dc:	b003      	add	sp, #12
340057de:	bd30      	pop	{r4, r5, pc}
    break;
340057e0:	2310      	movs	r3, #16
340057e2:	2204      	movs	r2, #4
340057e4:	e7f1      	b.n	340057ca <ISP_SVC_ISP_SetDecimation+0x22>
    break;
340057e6:	2318      	movs	r3, #24
340057e8:	2206      	movs	r2, #6
340057ea:	e7ee      	b.n	340057ca <ISP_SVC_ISP_SetDecimation+0x22>
  switch (pConfig->factor)
340057ec:	2300      	movs	r3, #0
340057ee:	461a      	mov	r2, r3
340057f0:	e7eb      	b.n	340057ca <ISP_SVC_ISP_SetDecimation+0x22>
  if (HAL_DCMIPP_PIPE_EnableISPDecimation(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
340057f2:	2101      	movs	r1, #1
340057f4:	6828      	ldr	r0, [r5, #0]
340057f6:	f00b fa33 	bl	34010c60 <HAL_DCMIPP_PIPE_EnableISPDecimation>
340057fa:	2800      	cmp	r0, #0
340057fc:	d1ed      	bne.n	340057da <ISP_SVC_ISP_SetDecimation+0x32>
  ISP_DecimationValue.factor = pConfig->factor;
340057fe:	7822      	ldrb	r2, [r4, #0]
34005800:	4b02      	ldr	r3, [pc, #8]	@ (3400580c <ISP_SVC_ISP_SetDecimation+0x64>)
34005802:	701a      	strb	r2, [r3, #0]
  return ret;
34005804:	e7ea      	b.n	340057dc <ISP_SVC_ISP_SetDecimation+0x34>
  switch (pConfig->factor)
34005806:	201e      	movs	r0, #30
34005808:	e7e8      	b.n	340057dc <ISP_SVC_ISP_SetDecimation+0x34>
3400580a:	bf00      	nop
3400580c:	340a31ba 	.word	0x340a31ba

34005810 <ISP_SVC_ISP_SetContrast>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the contrast configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetContrast(ISP_HandleTypeDef *hIsp, ISP_ContrastTypeDef *pConfig)
{
34005810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_ContrastConfTypeDef contrast;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005814:	4605      	mov	r5, r0
{
34005816:	b085      	sub	sp, #20
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005818:	2800      	cmp	r0, #0
3400581a:	d071      	beq.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
3400581c:	2900      	cmp	r1, #0
3400581e:	d06f      	beq.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005820:	684b      	ldr	r3, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005822:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
34005826:	d86b      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005828:	f8d1 9008 	ldr.w	r9, [r1, #8]
3400582c:	f5b9 7fc5 	cmp.w	r9, #394	@ 0x18a
34005830:	d866      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005832:	f8d1 800c 	ldr.w	r8, [r1, #12]
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005836:	f5b8 7fc5 	cmp.w	r8, #394	@ 0x18a
3400583a:	d861      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400583c:	f8d1 e010 	ldr.w	lr, [r1, #16]
34005840:	f5be 7fc5 	cmp.w	lr, #394	@ 0x18a
34005844:	d85c      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005846:	f8d1 c014 	ldr.w	ip, [r1, #20]
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400584a:	f5bc 7fc5 	cmp.w	ip, #394	@ 0x18a
3400584e:	d857      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005850:	698f      	ldr	r7, [r1, #24]
34005852:	f5b7 7fc5 	cmp.w	r7, #394	@ 0x18a
34005856:	d853      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005858:	69ce      	ldr	r6, [r1, #28]
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400585a:	f5b6 7fc5 	cmp.w	r6, #394	@ 0x18a
3400585e:	d84f      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34005860:	6a0c      	ldr	r4, [r1, #32]
34005862:	f5b4 7fc5 	cmp.w	r4, #394	@ 0x18a
34005866:	d84b      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_256 > ISP_CONTAST_LUMCOEFF_MAX))
34005868:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400586a:	f5b2 7fc5 	cmp.w	r2, #394	@ 0x18a
3400586e:	d847      	bhi.n	34005900 <ISP_SVC_ISP_SetContrast+0xf0>
  {
    return ISP_ERR_CONTRAST_EINVAL;
  }

  if (pConfig->enable == 0)
34005870:	7809      	ldrb	r1, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
34005872:	6800      	ldr	r0, [r0, #0]
  if (pConfig->enable == 0)
34005874:	b921      	cbnz	r1, 34005880 <ISP_SVC_ISP_SetContrast+0x70>
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
34005876:	2101      	movs	r1, #1
34005878:	f00c f956 	bl	34011b28 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
3400587c:	b3c0      	cbz	r0, 340058f0 <ISP_SVC_ISP_SetContrast+0xe0>
3400587e:	e036      	b.n	340058ee <ISP_SVC_ISP_SetContrast+0xde>
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
34005880:	0119      	lsls	r1, r3, #4
34005882:	2364      	movs	r3, #100	@ 0x64
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
34005884:	0112      	lsls	r2, r2, #4
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
34005886:	fbb1 f1f3 	udiv	r1, r1, r3
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
3400588a:	fbb2 f2f3 	udiv	r2, r2, r3
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
3400588e:	ea4f 1909 	mov.w	r9, r9, lsl #4
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
34005892:	ea4f 1808 	mov.w	r8, r8, lsl #4
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
34005896:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
3400589a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
3400589e:	013f      	lsls	r7, r7, #4
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
340058a0:	0136      	lsls	r6, r6, #4
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
340058a2:	0124      	lsls	r4, r4, #4
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
340058a4:	fbb9 f9f3 	udiv	r9, r9, r3
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
340058a8:	fbb8 f8f3 	udiv	r8, r8, r3
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
340058ac:	fbbe fef3 	udiv	lr, lr, r3
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
340058b0:	fbbc fcf3 	udiv	ip, ip, r3
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
340058b4:	fbb7 f7f3 	udiv	r7, r7, r3
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
340058b8:	fbb6 f6f3 	udiv	r6, r6, r3
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
340058bc:	fbb4 f4f3 	udiv	r4, r4, r3
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
340058c0:	f88d 1004 	strb.w	r1, [sp, #4]
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
340058c4:	f88d 200c 	strb.w	r2, [sp, #12]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
340058c8:	2101      	movs	r1, #1
340058ca:	aa01      	add	r2, sp, #4
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
340058cc:	f88d 9005 	strb.w	r9, [sp, #5]
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
340058d0:	f88d 8006 	strb.w	r8, [sp, #6]
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
340058d4:	f88d e007 	strb.w	lr, [sp, #7]
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
340058d8:	f88d c008 	strb.w	ip, [sp, #8]
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
340058dc:	f88d 7009 	strb.w	r7, [sp, #9]
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
340058e0:	f88d 600a 	strb.w	r6, [sp, #10]
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
340058e4:	f88d 400b 	strb.w	r4, [sp, #11]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
340058e8:	f00c f884 	bl	340119f4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>
    if (halStatus == HAL_OK)
340058ec:	b118      	cbz	r0, 340058f6 <ISP_SVC_ISP_SetContrast+0xe6>
  {
    return ISP_ERR_CONTRAST_HAL;
340058ee:	2029      	movs	r0, #41	@ 0x29
  }

  return ISP_OK;
}
340058f0:	b005      	add	sp, #20
340058f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
340058f6:	2101      	movs	r1, #1
340058f8:	6828      	ldr	r0, [r5, #0]
340058fa:	f00c f8fd 	bl	34011af8 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>
340058fe:	e7bd      	b.n	3400587c <ISP_SVC_ISP_SetContrast+0x6c>
    return ISP_ERR_CONTRAST_EINVAL;
34005900:	2028      	movs	r0, #40	@ 0x28
34005902:	e7f5      	b.n	340058f0 <ISP_SVC_ISP_SetContrast+0xe0>

34005904 <ISP_SVC_ISP_SetStatArea>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to statistic area used by the IQ algorithms
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatArea(ISP_HandleTypeDef *hIsp, ISP_StatAreaTypeDef *pConfig)
{
34005904:	b5f0      	push	{r4, r5, r6, r7, lr}
34005906:	460e      	mov	r6, r1
  HAL_StatusTypeDef halStatus;
  DCMIPP_StatisticExtractionAreaConfTypeDef currentStatAreaCfg;
  ISP_StatusTypeDef ret = ISP_OK;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005908:	4605      	mov	r5, r0
{
3400590a:	b085      	sub	sp, #20
  if ((hIsp == NULL) || (pConfig == NULL) ||
3400590c:	2800      	cmp	r0, #0
3400590e:	d041      	beq.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
34005910:	2900      	cmp	r1, #0
34005912:	d03f      	beq.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
34005914:	f640 72fe 	movw	r2, #4094	@ 0xffe
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34005918:	6808      	ldr	r0, [r1, #0]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3400591a:	4290      	cmp	r0, r2
3400591c:	d83a      	bhi.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
3400591e:	6849      	ldr	r1, [r1, #4]
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34005920:	4291      	cmp	r1, r2
34005922:	d837      	bhi.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34005924:	68b3      	ldr	r3, [r6, #8]
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
34005926:	4293      	cmp	r3, r2
34005928:	d834      	bhi.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3400592a:	f640 74fa 	movw	r4, #4090	@ 0xffa
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3400592e:	68f2      	ldr	r2, [r6, #12]
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34005930:	1f17      	subs	r7, r2, #4
34005932:	42a7      	cmp	r7, r4
34005934:	d82e      	bhi.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
34005936:	2b03      	cmp	r3, #3
34005938:	d92c      	bls.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3400593a:	6f2f      	ldr	r7, [r5, #112]	@ 0x70
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3400593c:	18c4      	adds	r4, r0, r3
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
3400593e:	42bc      	cmp	r4, r7
34005940:	d828      	bhi.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34005942:	6f6f      	ldr	r7, [r5, #116]	@ 0x74
      (pConfig->Y0 + pConfig->YSize > hIsp->sensorInfo.height))
34005944:	188c      	adds	r4, r1, r2
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34005946:	42bc      	cmp	r4, r7
34005948:	d824      	bhi.n	34005994 <ISP_SVC_ISP_SetStatArea+0x90>
  {
    return ISP_ERR_STATAREA_EINVAL;
  }

  /* Set coordinates in the 'decimated' referential */
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
3400594a:	4c13      	ldr	r4, [pc, #76]	@ (34005998 <ISP_SVC_ISP_SetStatArea+0x94>)
3400594c:	7824      	ldrb	r4, [r4, #0]
3400594e:	fbb0 f0f4 	udiv	r0, r0, r4
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
34005952:	fbb1 f1f4 	udiv	r1, r1, r4
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
34005956:	fbb2 f2f4 	udiv	r2, r2, r4
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
3400595a:	fbb3 f3f4 	udiv	r3, r3, r4
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
3400595e:	9001      	str	r0, [sp, #4]
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
34005960:	9100      	str	r1, [sp, #0]
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
34005962:	9202      	str	r2, [sp, #8]

  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
34005964:	2101      	movs	r1, #1
34005966:	466a      	mov	r2, sp
34005968:	6828      	ldr	r0, [r5, #0]
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
3400596a:	9303      	str	r3, [sp, #12]
  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
3400596c:	f00b ff28 	bl	340117c0 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>
34005970:	b118      	cbz	r0, 3400597a <ISP_SVC_ISP_SetStatArea+0x76>
                                                          &currentStatAreaCfg) != HAL_OK)
  {
    return ISP_ERR_STATAREA_HAL;
34005972:	2433      	movs	r4, #51	@ 0x33

  /* Update internal state */
  hIsp->statArea = *pConfig;

  return ret;
}
34005974:	4620      	mov	r0, r4
34005976:	b005      	add	sp, #20
34005978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    halStatus = HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1);
3400597a:	2101      	movs	r1, #1
3400597c:	6828      	ldr	r0, [r5, #0]
3400597e:	f00b ffa9 	bl	340118d4 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>
  if (halStatus != HAL_OK)
34005982:	4604      	mov	r4, r0
34005984:	2800      	cmp	r0, #0
34005986:	d1f4      	bne.n	34005972 <ISP_SVC_ISP_SetStatArea+0x6e>
  hIsp->statArea = *pConfig;
34005988:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
3400598c:	3508      	adds	r5, #8
3400598e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  return ret;
34005992:	e7ef      	b.n	34005974 <ISP_SVC_ISP_SetStatArea+0x70>
    return ISP_ERR_STATAREA_EINVAL;
34005994:	2432      	movs	r4, #50	@ 0x32
34005996:	e7ed      	b.n	34005974 <ISP_SVC_ISP_SetStatArea+0x70>
34005998:	340a31ba 	.word	0x340a31ba

3400599c <ISP_SVC_ISP_SetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
3400599c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) || (pConfig->strength > ISP_BADPIXEL_STRENGTH_MAX))
3400599e:	4604      	mov	r4, r0
340059a0:	b1a8      	cbz	r0, 340059ce <ISP_SVC_ISP_SetBadPixel+0x32>
340059a2:	b1a1      	cbz	r1, 340059ce <ISP_SVC_ISP_SetBadPixel+0x32>
340059a4:	784a      	ldrb	r2, [r1, #1]
340059a6:	2a07      	cmp	r2, #7
340059a8:	d811      	bhi.n	340059ce <ISP_SVC_ISP_SetBadPixel+0x32>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
  }

  if (pConfig->enable == 0)
340059aa:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340059ac:	6800      	ldr	r0, [r0, #0]
340059ae:	2101      	movs	r1, #1
  if (pConfig->enable == 0)
340059b0:	b91b      	cbnz	r3, 340059ba <ISP_SVC_ISP_SetBadPixel+0x1e>
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340059b2:	f00b fc33 	bl	3401121c <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>
    }

    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
  }

  if (halStatus != HAL_OK)
340059b6:	b120      	cbz	r0, 340059c2 <ISP_SVC_ISP_SetBadPixel+0x26>
340059b8:	e002      	b.n	340059c0 <ISP_SVC_ISP_SetBadPixel+0x24>
    halStatus = HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->strength);
340059ba:	f00b fbef 	bl	3401119c <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>
    if (halStatus != HAL_OK)
340059be:	b108      	cbz	r0, 340059c4 <ISP_SVC_ISP_SetBadPixel+0x28>
      return ISP_ERR_BADPIXEL_HAL;
340059c0:	203d      	movs	r0, #61	@ 0x3d
  {
    return ISP_ERR_BADPIXEL_HAL;
  }

  return ISP_OK;
}
340059c2:	bd10      	pop	{r4, pc}
    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340059c4:	2101      	movs	r1, #1
340059c6:	6820      	ldr	r0, [r4, #0]
340059c8:	f00b fc10 	bl	340111ec <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>
340059cc:	e7f3      	b.n	340059b6 <ISP_SVC_ISP_SetBadPixel+0x1a>
    return ISP_ERR_BADPIXEL_EINVAL;
340059ce:	203c      	movs	r0, #60	@ 0x3c
340059d0:	e7f7      	b.n	340059c2 <ISP_SVC_ISP_SetBadPixel+0x26>

340059d2 <ISP_SVC_ISP_GetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
340059d2:	b538      	push	{r3, r4, r5, lr}
340059d4:	460d      	mov	r5, r1
  HAL_StatusTypeDef halStatus;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340059d6:	4604      	mov	r4, r0
340059d8:	b198      	cbz	r0, 34005a02 <ISP_SVC_ISP_GetBadPixel+0x30>
340059da:	b191      	cbz	r1, 34005a02 <ISP_SVC_ISP_GetBadPixel+0x30>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340059dc:	2101      	movs	r1, #1
340059de:	6800      	ldr	r0, [r0, #0]
340059e0:	f00b fc46 	bl	34011270 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>
340059e4:	7028      	strb	r0, [r5, #0]
  pConfig->strength = (uint8_t) HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1);
340059e6:	2101      	movs	r1, #1
340059e8:	6820      	ldr	r0, [r4, #0]
340059ea:	f00b fc2f 	bl	3401124c <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>
340059ee:	7068      	strb	r0, [r5, #1]

  halStatus = HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(hIsp->hDcmipp, DCMIPP_PIPE1, &pConfig->count);
340059f0:	2101      	movs	r1, #1
340059f2:	6820      	ldr	r0, [r4, #0]
340059f4:	1d2a      	adds	r2, r5, #4
340059f6:	f00b fc61 	bl	340112bc <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>

  if (halStatus != HAL_OK)
  {
    return ISP_ERR_BADPIXEL_HAL;
340059fa:	2800      	cmp	r0, #0
340059fc:	bf18      	it	ne
340059fe:	203d      	movne	r0, #61	@ 0x3d
  }

  return ISP_OK;
}
34005a00:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_BADPIXEL_EINVAL;
34005a02:	203c      	movs	r0, #60	@ 0x3c
34005a04:	e7fc      	b.n	34005a00 <ISP_SVC_ISP_GetBadPixel+0x2e>

34005a06 <ISP_SVC_ISP_SetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
34005a06:	b513      	push	{r0, r1, r4, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005a08:	4604      	mov	r4, r0
34005a0a:	b1f0      	cbz	r0, 34005a4a <ISP_SVC_ISP_SetBlackLevel+0x44>
34005a0c:	b1e9      	cbz	r1, 34005a4a <ISP_SVC_ISP_SetBlackLevel+0x44>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
  }

  if (pConfig->enable == 0)
34005a0e:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34005a10:	6800      	ldr	r0, [r0, #0]
  if (pConfig->enable == 0)
34005a12:	b923      	cbnz	r3, 34005a1e <ISP_SVC_ISP_SetBlackLevel+0x18>
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34005a14:	2101      	movs	r1, #1
34005a16:	f00b fe19 	bl	3401164c <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005a1a:	b178      	cbz	r0, 34005a3c <ISP_SVC_ISP_SetBlackLevel+0x36>
34005a1c:	e00d      	b.n	34005a3a <ISP_SVC_ISP_SetBlackLevel+0x34>
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
34005a1e:	784b      	ldrb	r3, [r1, #1]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34005a20:	aa01      	add	r2, sp, #4
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
34005a22:	f88d 3004 	strb.w	r3, [sp, #4]
    blackLevelConfig.GreenCompBlackLevel = pConfig->BLCG;
34005a26:	788b      	ldrb	r3, [r1, #2]
34005a28:	f88d 3005 	strb.w	r3, [sp, #5]
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34005a2c:	78cb      	ldrb	r3, [r1, #3]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34005a2e:	2101      	movs	r1, #1
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34005a30:	f88d 3006 	strb.w	r3, [sp, #6]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34005a34:	f00b fdd0 	bl	340115d8 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>
    if (halStatus == HAL_OK)
34005a38:	b110      	cbz	r0, 34005a40 <ISP_SVC_ISP_SetBlackLevel+0x3a>
  {
    return ISP_ERR_BLACKLEVEL_HAL;
34005a3a:	2047      	movs	r0, #71	@ 0x47
  }

  return ISP_OK;
}
34005a3c:	b002      	add	sp, #8
34005a3e:	bd10      	pop	{r4, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34005a40:	2101      	movs	r1, #1
34005a42:	6820      	ldr	r0, [r4, #0]
34005a44:	f00b fdea 	bl	3401161c <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>
34005a48:	e7e7      	b.n	34005a1a <ISP_SVC_ISP_SetBlackLevel+0x14>
    return ISP_ERR_BLACKLEVEL_EINVAL;
34005a4a:	2046      	movs	r0, #70	@ 0x46
34005a4c:	e7f6      	b.n	34005a3c <ISP_SVC_ISP_SetBlackLevel+0x36>

34005a4e <ISP_SVC_ISP_GetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
34005a4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
34005a50:	460c      	mov	r4, r1
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005a52:	4605      	mov	r5, r0
34005a54:	b1b0      	cbz	r0, 34005a84 <ISP_SVC_ISP_GetBlackLevel+0x36>
34005a56:	b1a9      	cbz	r1, 34005a84 <ISP_SVC_ISP_GetBlackLevel+0x36>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34005a58:	2101      	movs	r1, #1
34005a5a:	6800      	ldr	r0, [r0, #0]
34005a5c:	f00b fe24 	bl	340116a8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>
34005a60:	7020      	strb	r0, [r4, #0]

  HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34005a62:	6828      	ldr	r0, [r5, #0]
34005a64:	2101      	movs	r1, #1
34005a66:	aa01      	add	r2, sp, #4
34005a68:	f00b fe08 	bl	3401167c <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>

  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;

  return ISP_OK;
34005a6c:	2000      	movs	r0, #0
  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
34005a6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
34005a72:	7063      	strb	r3, [r4, #1]
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
34005a74:	f89d 3005 	ldrb.w	r3, [sp, #5]
34005a78:	70a3      	strb	r3, [r4, #2]
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;
34005a7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
34005a7e:	70e3      	strb	r3, [r4, #3]
}
34005a80:	b003      	add	sp, #12
34005a82:	bd30      	pop	{r4, r5, pc}
    return ISP_ERR_BLACKLEVEL_EINVAL;
34005a84:	2046      	movs	r0, #70	@ 0x46
34005a86:	e7fb      	b.n	34005a80 <ISP_SVC_ISP_GetBlackLevel+0x32>

34005a88 <ISP_SVC_ISP_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
34005a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_ExposureConfTypeDef exposureConfig;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005a8c:	4605      	mov	r5, r0
34005a8e:	2800      	cmp	r0, #0
34005a90:	f000 808b 	beq.w	34005baa <ISP_SVC_ISP_SetGain+0x122>
34005a94:	2900      	cmp	r1, #0
34005a96:	f000 8088 	beq.w	34005baa <ISP_SVC_ISP_SetGain+0x122>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
34005a9a:	684a      	ldr	r2, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005a9c:	4b46      	ldr	r3, [pc, #280]	@ (34005bb8 <ISP_SVC_ISP_SetGain+0x130>)
34005a9e:	429a      	cmp	r2, r3
34005aa0:	f200 8083 	bhi.w	34005baa <ISP_SVC_ISP_SetGain+0x122>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
34005aa4:	f8d1 8008 	ldr.w	r8, [r1, #8]
34005aa8:	4598      	cmp	r8, r3
34005aaa:	d87e      	bhi.n	34005baa <ISP_SVC_ISP_SetGain+0x122>
34005aac:	68cf      	ldr	r7, [r1, #12]
34005aae:	429f      	cmp	r7, r3
34005ab0:	d87b      	bhi.n	34005baa <ISP_SVC_ISP_SetGain+0x122>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
  }

  if (pConfig->enable == 0)
34005ab2:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34005ab4:	6806      	ldr	r6, [r0, #0]
  if (pConfig->enable == 0)
34005ab6:	b933      	cbnz	r3, 34005ac6 <ISP_SVC_ISP_SetGain+0x3e>
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34005ab8:	2101      	movs	r1, #1
34005aba:	4630      	mov	r0, r6
34005abc:	f00b ff82 	bl	340119c4 <HAL_DCMIPP_PIPE_DisableISPExposure>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005ac0:	2800      	cmp	r0, #0
34005ac2:	d05b      	beq.n	34005b7c <ISP_SVC_ISP_SetGain+0xf4>
34005ac4:	e059      	b.n	34005b7a <ISP_SVC_ISP_SetGain+0xf2>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005ac6:	2400      	movs	r4, #0
34005ac8:	4610      	mov	r0, r2
34005aca:	a339      	add	r3, pc, #228	@ (adr r3, 34005bb0 <ISP_SVC_ISP_SetGain+0x128>)
34005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
34005ad0:	4621      	mov	r1, r4
34005ad2:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
34005ad6:	f7fc f839 	bl	34001b4c <__aeabi_uldivmod>
  while (Val >= 256)
34005ada:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005adc:	4682      	mov	sl, r0
34005ade:	468b      	mov	fp, r1
  while (Val >= 256)
34005ae0:	4622      	mov	r2, r4
34005ae2:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
34005ae6:	f17b 0000 	sbcs.w	r0, fp, #0
34005aea:	f103 0101 	add.w	r1, r3, #1
34005aee:	d248      	bcs.n	34005b82 <ISP_SVC_ISP_SetGain+0xfa>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005af0:	2400      	movs	r4, #0
  *pShift = 0;
34005af2:	2a00      	cmp	r2, #0
34005af4:	bf08      	it	eq
34005af6:	4613      	moveq	r3, r2
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005af8:	4640      	mov	r0, r8
34005afa:	4621      	mov	r1, r4
  *pShift = 0;
34005afc:	f88d 3000 	strb.w	r3, [sp]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b00:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
34005b04:	a32a      	add	r3, pc, #168	@ (adr r3, 34005bb0 <ISP_SVC_ISP_SetGain+0x128>)
34005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
  *pMultiplier = Val;
34005b0a:	f88d a001 	strb.w	sl, [sp, #1]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b0e:	f7fc f81d 	bl	34001b4c <__aeabi_uldivmod>
  while (Val >= 256)
34005b12:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b14:	4680      	mov	r8, r0
34005b16:	4689      	mov	r9, r1
  while (Val >= 256)
34005b18:	4622      	mov	r2, r4
34005b1a:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
34005b1e:	f179 0000 	sbcs.w	r0, r9, #0
34005b22:	f103 0101 	add.w	r1, r3, #1
34005b26:	d231      	bcs.n	34005b8c <ISP_SVC_ISP_SetGain+0x104>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b28:	2400      	movs	r4, #0
  *pShift = 0;
34005b2a:	2a00      	cmp	r2, #0
34005b2c:	bf08      	it	eq
34005b2e:	4613      	moveq	r3, r2
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b30:	4638      	mov	r0, r7
34005b32:	4621      	mov	r1, r4
  *pShift = 0;
34005b34:	f88d 3002 	strb.w	r3, [sp, #2]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b38:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
34005b3c:	a31c      	add	r3, pc, #112	@ (adr r3, 34005bb0 <ISP_SVC_ISP_SetGain+0x128>)
34005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  *pMultiplier = Val;
34005b42:	f88d 8003 	strb.w	r8, [sp, #3]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b46:	f7fc f801 	bl	34001b4c <__aeabi_uldivmod>
  while (Val >= 256)
34005b4a:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34005b4c:	4680      	mov	r8, r0
34005b4e:	4689      	mov	r9, r1
  while (Val >= 256)
34005b50:	4622      	mov	r2, r4
34005b52:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
34005b56:	f179 0000 	sbcs.w	r0, r9, #0
34005b5a:	f103 0101 	add.w	r1, r3, #1
34005b5e:	d21a      	bcs.n	34005b96 <ISP_SVC_ISP_SetGain+0x10e>
  *pShift = 0;
34005b60:	2a00      	cmp	r2, #0
34005b62:	bf08      	it	eq
34005b64:	4613      	moveq	r3, r2
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
34005b66:	2101      	movs	r1, #1
34005b68:	466a      	mov	r2, sp
34005b6a:	4630      	mov	r0, r6
  *pShift = 0;
34005b6c:	f88d 3004 	strb.w	r3, [sp, #4]
  *pMultiplier = Val;
34005b70:	f88d 8005 	strb.w	r8, [sp, #5]
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
34005b74:	f00b fec6 	bl	34011904 <HAL_DCMIPP_PIPE_SetISPExposureConfig>
    if (halStatus == HAL_OK)
34005b78:	b190      	cbz	r0, 34005ba0 <ISP_SVC_ISP_SetGain+0x118>
  {
    return ISP_ERR_ISPGAIN_HAL;
34005b7a:	2051      	movs	r0, #81	@ 0x51
  }

  return ISP_OK;
}
34005b7c:	b003      	add	sp, #12
34005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Val /= 2;
34005b82:	ea5a 0b5f 	orrs.w	fp, sl, pc, lsr #1
34005b86:	460b      	mov	r3, r1
34005b88:	2201      	movs	r2, #1
34005b8a:	e7aa      	b.n	34005ae2 <ISP_SVC_ISP_SetGain+0x5a>
34005b8c:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
34005b90:	460b      	mov	r3, r1
34005b92:	2201      	movs	r2, #1
34005b94:	e7c1      	b.n	34005b1a <ISP_SVC_ISP_SetGain+0x92>
34005b96:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
34005b9a:	460b      	mov	r3, r1
34005b9c:	2201      	movs	r2, #1
34005b9e:	e7d8      	b.n	34005b52 <ISP_SVC_ISP_SetGain+0xca>
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34005ba0:	2101      	movs	r1, #1
34005ba2:	6828      	ldr	r0, [r5, #0]
34005ba4:	f00b fef6 	bl	34011994 <HAL_DCMIPP_PIPE_EnableISPExposure>
34005ba8:	e78a      	b.n	34005ac0 <ISP_SVC_ISP_SetGain+0x38>
    return ISP_ERR_ISPGAIN_EINVAL;
34005baa:	2050      	movs	r0, #80	@ 0x50
34005bac:	e7e6      	b.n	34005b7c <ISP_SVC_ISP_SetGain+0xf4>
34005bae:	bf00      	nop
34005bb0:	05f5e100 	.word	0x05f5e100
34005bb4:	00000000 	.word	0x00000000
34005bb8:	5f5e1000 	.word	0x5f5e1000

34005bbc <ISP_SVC_ISP_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
34005bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34005bbe:	460c      	mov	r4, r1
  DCMIPP_ExposureConfTypeDef exposureConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005bc0:	4605      	mov	r5, r0
34005bc2:	2800      	cmp	r0, #0
34005bc4:	d03f      	beq.n	34005c46 <ISP_SVC_ISP_GetGain+0x8a>
34005bc6:	2900      	cmp	r1, #0
34005bc8:	d03d      	beq.n	34005c46 <ISP_SVC_ISP_GetGain+0x8a>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34005bca:	2101      	movs	r1, #1
34005bcc:	6800      	ldr	r0, [r0, #0]
34005bce:	f00c f9cb 	bl	34011f68 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>
34005bd2:	7020      	strb	r0, [r4, #0]
  HAL_DCMIPP_PIPE_GetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
34005bd4:	6828      	ldr	r0, [r5, #0]
34005bd6:	466a      	mov	r2, sp
34005bd8:	2101      	movs	r1, #1
34005bda:	f00c f903 	bl	34011de4 <HAL_DCMIPP_PIPE_GetISPExposureConfig>
  uint64_t Val = (1 << Shift);
34005bde:	2301      	movs	r3, #1
34005be0:	f89d 1000 	ldrb.w	r1, [sp]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34005be4:	f89d 2001 	ldrb.w	r2, [sp, #1]
  uint64_t Val = (1 << Shift);
34005be8:	fa03 f101 	lsl.w	r1, r3, r1
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34005bec:	fb81 1002 	smull	r1, r0, r1, r2
34005bf0:	4a16      	ldr	r2, [pc, #88]	@ (34005c4c <ISP_SVC_ISP_GetGain+0x90>)
34005bf2:	fba1 1502 	umull	r1, r5, r1, r2
34005bf6:	460e      	mov	r6, r1
34005bf8:	fb02 5700 	mla	r7, r2, r0, r5
34005bfc:	ea56 17df 	orrs.w	r7, r6, pc, lsr #7
  uint64_t Val = (1 << Shift);
34005c00:	f89d 0002 	ldrb.w	r0, [sp, #2]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34005c04:	f89d 1003 	ldrb.w	r1, [sp, #3]
  uint64_t Val = (1 << Shift);
34005c08:	fa03 f000 	lsl.w	r0, r3, r0
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34005c0c:	fb80 0101 	smull	r0, r1, r0, r1
34005c10:	fba0 0502 	umull	r0, r5, r0, r2
  return (uint32_t) Val;
34005c14:	6066      	str	r6, [r4, #4]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34005c16:	4606      	mov	r6, r0
34005c18:	fb02 5701 	mla	r7, r2, r1, r5
34005c1c:	ea56 17df 	orrs.w	r7, r6, pc, lsr #7
  uint64_t Val = (1 << Shift);
34005c20:	f89d 1004 	ldrb.w	r1, [sp, #4]
  return (uint32_t) Val;
34005c24:	60a6      	str	r6, [r4, #8]
  uint64_t Val = (1 << Shift);
34005c26:	408b      	lsls	r3, r1
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34005c28:	f89d 1005 	ldrb.w	r1, [sp, #5]
34005c2c:	fb83 3501 	smull	r3, r5, r3, r1
34005c30:	fba3 3602 	umull	r3, r6, r3, r2
34005c34:	4618      	mov	r0, r3
34005c36:	fb02 6105 	mla	r1, r2, r5, r6
34005c3a:	ea50 11df 	orrs.w	r1, r0, pc, lsr #7
  return (uint32_t) Val;
34005c3e:	60e0      	str	r0, [r4, #12]

  pConfig->ispGainR = From_Shift_Multiplier(exposureConfig.ShiftRed, exposureConfig.MultiplierRed);
  pConfig->ispGainG = From_Shift_Multiplier(exposureConfig.ShiftGreen, exposureConfig.MultiplierGreen);
  pConfig->ispGainB = From_Shift_Multiplier(exposureConfig.ShiftBlue, exposureConfig.MultiplierBlue);

  return ISP_OK;
34005c40:	2000      	movs	r0, #0
}
34005c42:	b003      	add	sp, #12
34005c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ISP_ERR_ISPGAIN_EINVAL;
34005c46:	2050      	movs	r0, #80	@ 0x50
34005c48:	e7fb      	b.n	34005c42 <ISP_SVC_ISP_GetGain+0x86>
34005c4a:	bf00      	nop
34005c4c:	05f5e100 	.word	0x05f5e100

34005c50 <ISP_SVC_ISP_SetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
34005c50:	b570      	push	{r4, r5, r6, lr}
34005c52:	4605      	mov	r5, r0
34005c54:	b088      	sub	sp, #32
34005c56:	460c      	mov	r4, r1
  HAL_StatusTypeDef halStatus;
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;
  uint32_t i, j;

  memset(&colorConvConfig, 0, sizeof(colorConvConfig));
34005c58:	221a      	movs	r2, #26
34005c5a:	2100      	movs	r1, #0
34005c5c:	a801      	add	r0, sp, #4
34005c5e:	f018 ff0f 	bl	3401ea80 <memset>

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005c62:	b16d      	cbz	r5, 34005c80 <ISP_SVC_ISP_SetColorConv+0x30>
34005c64:	b164      	cbz	r4, 34005c80 <ISP_SVC_ISP_SetColorConv+0x30>
34005c66:	4623      	mov	r3, r4

  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
    {
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
34005c68:	483a      	ldr	r0, [pc, #232]	@ (34005d54 <ISP_SVC_ISP_SetColorConv+0x104>)
34005c6a:	4a3b      	ldr	r2, [pc, #236]	@ (34005d58 <ISP_SVC_ISP_SetColorConv+0x108>)
34005c6c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
34005c70:	6859      	ldr	r1, [r3, #4]
34005c72:	4401      	add	r1, r0
34005c74:	4291      	cmp	r1, r2
34005c76:	d803      	bhi.n	34005c80 <ISP_SVC_ISP_SetColorConv+0x30>
34005c78:	6899      	ldr	r1, [r3, #8]
34005c7a:	4401      	add	r1, r0
34005c7c:	4291      	cmp	r1, r2
34005c7e:	d901      	bls.n	34005c84 <ISP_SVC_ISP_SetColorConv+0x34>
    return ISP_ERR_COLORCONV_EINVAL;
34005c80:	205a      	movs	r0, #90	@ 0x5a
34005c82:	e05f      	b.n	34005d44 <ISP_SVC_ISP_SetColorConv+0xf4>
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
34005c84:	68d9      	ldr	r1, [r3, #12]
34005c86:	4401      	add	r1, r0
34005c88:	4291      	cmp	r1, r2
34005c8a:	d8f9      	bhi.n	34005c80 <ISP_SVC_ISP_SetColorConv+0x30>
  for (i = 0; i < 3; i++)
34005c8c:	330c      	adds	r3, #12
34005c8e:	42b3      	cmp	r3, r6
34005c90:	d1ee      	bne.n	34005c70 <ISP_SVC_ISP_SetColorConv+0x20>
        return ISP_ERR_COLORCONV_EINVAL;
      }
    }
  }

  if (pConfig->enable == 0)
34005c92:	7823      	ldrb	r3, [r4, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34005c94:	682e      	ldr	r6, [r5, #0]
  if (pConfig->enable == 0)
34005c96:	b933      	cbnz	r3, 34005ca6 <ISP_SVC_ISP_SetColorConv+0x56>
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34005c98:	2101      	movs	r1, #1
34005c9a:	4630      	mov	r0, r6
34005c9c:	f00b fc84 	bl	340115a8 <HAL_DCMIPP_PIPE_DisableISPColorConversion>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005ca0:	2800      	cmp	r0, #0
34005ca2:	d04f      	beq.n	34005d44 <ISP_SVC_ISP_SetColorConv+0xf4>
34005ca4:	e04d      	b.n	34005d42 <ISP_SVC_ISP_SetColorConv+0xf2>
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005ca6:	6860      	ldr	r0, [r4, #4]
34005ca8:	2300      	movs	r3, #0
34005caa:	4a2c      	ldr	r2, [pc, #176]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005cac:	17c1      	asrs	r1, r0, #31
34005cae:	f7fb fefd 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005cb2:	f8ad 0006 	strh.w	r0, [sp, #6]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005cb6:	68a0      	ldr	r0, [r4, #8]
34005cb8:	2300      	movs	r3, #0
34005cba:	4a28      	ldr	r2, [pc, #160]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005cbc:	17c1      	asrs	r1, r0, #31
34005cbe:	f7fb fef5 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005cc2:	f8ad 0008 	strh.w	r0, [sp, #8]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005cc6:	68e0      	ldr	r0, [r4, #12]
34005cc8:	2300      	movs	r3, #0
34005cca:	4a24      	ldr	r2, [pc, #144]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005ccc:	17c1      	asrs	r1, r0, #31
34005cce:	f7fb feed 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005cd2:	f8ad 000a 	strh.w	r0, [sp, #10]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005cd6:	6920      	ldr	r0, [r4, #16]
34005cd8:	2300      	movs	r3, #0
34005cda:	4a20      	ldr	r2, [pc, #128]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005cdc:	17c1      	asrs	r1, r0, #31
34005cde:	f7fb fee5 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005ce2:	f8ad 000e 	strh.w	r0, [sp, #14]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005ce6:	6960      	ldr	r0, [r4, #20]
34005ce8:	2300      	movs	r3, #0
34005cea:	4a1c      	ldr	r2, [pc, #112]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005cec:	17c1      	asrs	r1, r0, #31
34005cee:	f7fb fedd 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005cf2:	f8ad 0010 	strh.w	r0, [sp, #16]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005cf6:	69a0      	ldr	r0, [r4, #24]
34005cf8:	2300      	movs	r3, #0
34005cfa:	4a18      	ldr	r2, [pc, #96]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005cfc:	17c1      	asrs	r1, r0, #31
34005cfe:	f7fb fed5 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005d02:	f8ad 0012 	strh.w	r0, [sp, #18]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005d06:	69e0      	ldr	r0, [r4, #28]
34005d08:	2300      	movs	r3, #0
34005d0a:	4a14      	ldr	r2, [pc, #80]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005d0c:	17c1      	asrs	r1, r0, #31
34005d0e:	f7fb fecd 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005d12:	f8ad 0016 	strh.w	r0, [sp, #22]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005d16:	6a20      	ldr	r0, [r4, #32]
34005d18:	2300      	movs	r3, #0
34005d1a:	4a10      	ldr	r2, [pc, #64]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005d1c:	17c1      	asrs	r1, r0, #31
34005d1e:	f7fb fec5 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
34005d22:	f8ad 0018 	strh.w	r0, [sp, #24]
  int64_t Val = Coeff;
34005d26:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34005d28:	4a0c      	ldr	r2, [pc, #48]	@ (34005d5c <ISP_SVC_ISP_SetColorConv+0x10c>)
34005d2a:	2300      	movs	r3, #0
34005d2c:	17c1      	asrs	r1, r0, #31
34005d2e:	f7fb febd 	bl	34001aac <__aeabi_ldivmod>
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
34005d32:	2101      	movs	r1, #1
  return (int16_t) Val;
34005d34:	f8ad 001a 	strh.w	r0, [sp, #26]
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
34005d38:	aa01      	add	r2, sp, #4
34005d3a:	4630      	mov	r0, r6
34005d3c:	f00b fada 	bl	340112f4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>
    if (halStatus == HAL_OK)
34005d40:	b110      	cbz	r0, 34005d48 <ISP_SVC_ISP_SetColorConv+0xf8>
  {
    return ISP_ERR_COLORCONV_HAL;
34005d42:	205b      	movs	r0, #91	@ 0x5b
  }

  return ISP_OK;
}
34005d44:	b008      	add	sp, #32
34005d46:	bd70      	pop	{r4, r5, r6, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34005d48:	2101      	movs	r1, #1
34005d4a:	6828      	ldr	r0, [r5, #0]
34005d4c:	f00b fc14 	bl	34011578 <HAL_DCMIPP_PIPE_EnableISPColorConversion>
34005d50:	e7a6      	b.n	34005ca0 <ISP_SVC_ISP_SetColorConv+0x50>
34005d52:	bf00      	nop
34005d54:	17c841c0 	.word	0x17c841c0
34005d58:	2f908380 	.word	0x2f908380
34005d5c:	0005f5e1 	.word	0x0005f5e1

34005d60 <ISP_SVC_ISP_GetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
34005d60:	b530      	push	{r4, r5, lr}
34005d62:	460c      	mov	r4, r1
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005d64:	4605      	mov	r5, r0
{
34005d66:	b089      	sub	sp, #36	@ 0x24
  if ((hIsp == NULL) || (pConfig == NULL))
34005d68:	2800      	cmp	r0, #0
34005d6a:	d03c      	beq.n	34005de6 <ISP_SVC_ISP_GetColorConv+0x86>
34005d6c:	2900      	cmp	r1, #0
34005d6e:	d03a      	beq.n	34005de6 <ISP_SVC_ISP_GetColorConv+0x86>
  {
    return ISP_ERR_COLORCONV_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34005d70:	2101      	movs	r1, #1
34005d72:	6800      	ldr	r0, [r0, #0]
34005d74:	f00c f91e 	bl	34011fb4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>
34005d78:	7020      	strb	r0, [r4, #0]

  HAL_DCMIPP_PIPE_GetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
34005d7a:	2101      	movs	r1, #1
34005d7c:	6828      	ldr	r0, [r5, #0]
34005d7e:	aa01      	add	r2, sp, #4
34005d80:	f00c f850 	bl	34011e24 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005d84:	4b19      	ldr	r3, [pc, #100]	@ (34005dec <ISP_SVC_ISP_GetColorConv+0x8c>)
  int64_t Val = Reg;
34005d86:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  pConfig->coeff[1][2] = From_CConv_Reg(colorConvConfig.GB);
  pConfig->coeff[2][0] = From_CConv_Reg(colorConvConfig.BR);
  pConfig->coeff[2][1] = From_CConv_Reg(colorConvConfig.BG);
  pConfig->coeff[2][2] = From_CConv_Reg(colorConvConfig.BB);

  return ISP_OK;
34005d8a:	2000      	movs	r0, #0
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005d8c:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005d90:	6062      	str	r2, [r4, #4]
  int64_t Val = Reg;
34005d92:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005d96:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005d9a:	60a2      	str	r2, [r4, #8]
  int64_t Val = Reg;
34005d9c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005da0:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005da4:	60e2      	str	r2, [r4, #12]
  int64_t Val = Reg;
34005da6:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005daa:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005dae:	6122      	str	r2, [r4, #16]
  int64_t Val = Reg;
34005db0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005db4:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005db8:	6162      	str	r2, [r4, #20]
  int64_t Val = Reg;
34005dba:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005dbe:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005dc2:	61a2      	str	r2, [r4, #24]
  int64_t Val = Reg;
34005dc4:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005dc8:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005dcc:	61e2      	str	r2, [r4, #28]
  int64_t Val = Reg;
34005dce:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005dd2:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34005dd6:	6222      	str	r2, [r4, #32]
  int64_t Val = Reg;
34005dd8:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34005ddc:	fba2 2303 	umull	r2, r3, r2, r3
  return (int32_t) Val;
34005de0:	6262      	str	r2, [r4, #36]	@ 0x24
}
34005de2:	b009      	add	sp, #36	@ 0x24
34005de4:	bd30      	pop	{r4, r5, pc}
    return ISP_ERR_COLORCONV_EINVAL;
34005de6:	205a      	movs	r0, #90	@ 0x5a
34005de8:	e7fb      	b.n	34005de2 <ISP_SVC_ISP_GetColorConv+0x82>
34005dea:	bf00      	nop
34005dec:	0005f5e1 	.word	0x0005f5e1

34005df0 <ISP_SVC_Sensor_GetInfo>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor info
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetInfo(ISP_HandleTypeDef *hIsp, ISP_SensorInfoTypeDef *pConfig)
{
34005df0:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005df2:	b138      	cbz	r0, 34005e04 <ISP_SVC_Sensor_GetInfo+0x14>
34005df4:	b131      	cbz	r1, 34005e04 <ISP_SVC_Sensor_GetInfo+0x14>
  {
    return ISP_ERR_SENSORINFO_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorInfo != NULL)
34005df6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
34005df8:	b113      	cbz	r3, 34005e00 <ISP_SVC_Sensor_GetInfo+0x10>
  {
    if (hIsp->appliHelpers.GetSensorInfo(hIsp->cameraInstance, pConfig) != 0)
34005dfa:	6840      	ldr	r0, [r0, #4]
34005dfc:	4798      	blx	r3
34005dfe:	b918      	cbnz	r0, 34005e08 <ISP_SVC_Sensor_GetInfo+0x18>
    {
      return ISP_ERR_SENSORINFO;
    }
  }

  return ISP_OK;
34005e00:	2000      	movs	r0, #0
}
34005e02:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSORINFO_EINVAL;
34005e04:	206e      	movs	r0, #110	@ 0x6e
34005e06:	e7fc      	b.n	34005e02 <ISP_SVC_Sensor_GetInfo+0x12>
      return ISP_ERR_SENSORINFO;
34005e08:	206f      	movs	r0, #111	@ 0x6f
34005e0a:	e7fa      	b.n	34005e02 <ISP_SVC_Sensor_GetInfo+0x12>

34005e0c <ISP_SVC_Sensor_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
34005e0c:	b510      	push	{r4, lr}
34005e0e:	460c      	mov	r4, r1
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005e10:	b170      	cbz	r0, 34005e30 <ISP_SVC_Sensor_SetGain+0x24>
34005e12:	b169      	cbz	r1, 34005e30 <ISP_SVC_Sensor_SetGain+0x24>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
  }

  if (hIsp->appliHelpers.SetSensorGain != NULL)
34005e14:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
34005e16:	6809      	ldr	r1, [r1, #0]
  if (hIsp->appliHelpers.SetSensorGain != NULL)
34005e18:	b923      	cbnz	r3, 34005e24 <ISP_SVC_Sensor_SetGain+0x18>
    }
  }

  Meta.gain = pConfig->gain;

  return ISP_OK;
34005e1a:	2000      	movs	r0, #0
  Meta.gain = pConfig->gain;
34005e1c:	6822      	ldr	r2, [r4, #0]
34005e1e:	4b05      	ldr	r3, [pc, #20]	@ (34005e34 <ISP_SVC_Sensor_SetGain+0x28>)
34005e20:	609a      	str	r2, [r3, #8]
}
34005e22:	bd10      	pop	{r4, pc}
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
34005e24:	6840      	ldr	r0, [r0, #4]
34005e26:	4798      	blx	r3
34005e28:	2800      	cmp	r0, #0
34005e2a:	d0f6      	beq.n	34005e1a <ISP_SVC_Sensor_SetGain+0xe>
      return ISP_ERR_SENSORGAIN;
34005e2c:	2079      	movs	r0, #121	@ 0x79
34005e2e:	e7f8      	b.n	34005e22 <ISP_SVC_Sensor_SetGain+0x16>
    return ISP_ERR_SENSORGAIN_EINVAL;
34005e30:	2078      	movs	r0, #120	@ 0x78
34005e32:	e7f6      	b.n	34005e22 <ISP_SVC_Sensor_SetGain+0x16>
34005e34:	340a4214 	.word	0x340a4214

34005e38 <ISP_SVC_Sensor_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
34005e38:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005e3a:	b138      	cbz	r0, 34005e4c <ISP_SVC_Sensor_GetGain+0x14>
34005e3c:	b131      	cbz	r1, 34005e4c <ISP_SVC_Sensor_GetGain+0x14>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorGain != NULL)
34005e3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
34005e40:	b113      	cbz	r3, 34005e48 <ISP_SVC_Sensor_GetGain+0x10>
  {
    if (hIsp->appliHelpers.GetSensorGain(hIsp->cameraInstance, (int32_t *)&pConfig->gain) != 0)
34005e42:	6840      	ldr	r0, [r0, #4]
34005e44:	4798      	blx	r3
34005e46:	b918      	cbnz	r0, 34005e50 <ISP_SVC_Sensor_GetGain+0x18>
    {
      return ISP_ERR_SENSORGAIN;
    }
  }

  return ISP_OK;
34005e48:	2000      	movs	r0, #0
}
34005e4a:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSORGAIN_EINVAL;
34005e4c:	2078      	movs	r0, #120	@ 0x78
34005e4e:	e7fc      	b.n	34005e4a <ISP_SVC_Sensor_GetGain+0x12>
      return ISP_ERR_SENSORGAIN;
34005e50:	2079      	movs	r0, #121	@ 0x79
34005e52:	e7fa      	b.n	34005e4a <ISP_SVC_Sensor_GetGain+0x12>

34005e54 <ISP_SVC_Sensor_SetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
34005e54:	b510      	push	{r4, lr}
34005e56:	460c      	mov	r4, r1
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005e58:	b170      	cbz	r0, 34005e78 <ISP_SVC_Sensor_SetExposure+0x24>
34005e5a:	b169      	cbz	r1, 34005e78 <ISP_SVC_Sensor_SetExposure+0x24>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
  }

  if (hIsp->appliHelpers.SetSensorExposure != NULL)
34005e5c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  {
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
34005e5e:	6809      	ldr	r1, [r1, #0]
  if (hIsp->appliHelpers.SetSensorExposure != NULL)
34005e60:	b923      	cbnz	r3, 34005e6c <ISP_SVC_Sensor_SetExposure+0x18>
    }
  }

  Meta.exposure = pConfig->exposure;

  return ISP_OK;
34005e62:	2000      	movs	r0, #0
  Meta.exposure = pConfig->exposure;
34005e64:	6822      	ldr	r2, [r4, #0]
34005e66:	4b05      	ldr	r3, [pc, #20]	@ (34005e7c <ISP_SVC_Sensor_SetExposure+0x28>)
34005e68:	60da      	str	r2, [r3, #12]
}
34005e6a:	bd10      	pop	{r4, pc}
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
34005e6c:	6840      	ldr	r0, [r0, #4]
34005e6e:	4798      	blx	r3
34005e70:	2800      	cmp	r0, #0
34005e72:	d0f6      	beq.n	34005e62 <ISP_SVC_Sensor_SetExposure+0xe>
      return ISP_ERR_SENSOREXPOSURE;
34005e74:	2083      	movs	r0, #131	@ 0x83
34005e76:	e7f8      	b.n	34005e6a <ISP_SVC_Sensor_SetExposure+0x16>
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
34005e78:	2082      	movs	r0, #130	@ 0x82
34005e7a:	e7f6      	b.n	34005e6a <ISP_SVC_Sensor_SetExposure+0x16>
34005e7c:	340a4214 	.word	0x340a4214

34005e80 <ISP_SVC_Sensor_GetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
34005e80:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005e82:	b138      	cbz	r0, 34005e94 <ISP_SVC_Sensor_GetExposure+0x14>
34005e84:	b131      	cbz	r1, 34005e94 <ISP_SVC_Sensor_GetExposure+0x14>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorExposure != NULL)
34005e86:	6b83      	ldr	r3, [r0, #56]	@ 0x38
34005e88:	b113      	cbz	r3, 34005e90 <ISP_SVC_Sensor_GetExposure+0x10>
  {
    if (hIsp->appliHelpers.GetSensorExposure(hIsp->cameraInstance, (int32_t *)&pConfig->exposure) != 0)
34005e8a:	6840      	ldr	r0, [r0, #4]
34005e8c:	4798      	blx	r3
34005e8e:	b918      	cbnz	r0, 34005e98 <ISP_SVC_Sensor_GetExposure+0x18>
    {
      return ISP_ERR_SENSOREXPOSURE;
    }
  }

  return ISP_OK;
34005e90:	2000      	movs	r0, #0
}
34005e92:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
34005e94:	2082      	movs	r0, #130	@ 0x82
34005e96:	e7fc      	b.n	34005e92 <ISP_SVC_Sensor_GetExposure+0x12>
      return ISP_ERR_SENSOREXPOSURE;
34005e98:	2083      	movs	r0, #131	@ 0x83
34005e9a:	e7fa      	b.n	34005e92 <ISP_SVC_Sensor_GetExposure+0x12>

34005e9c <ISP_SVC_Misc_IsDCMIPPReady>:
  *         Check that the DCMIPP device is ready
  * @param  hIsp: ISP device handle
  * @retval ISP_OK if DCMIPP is running, ISP_FAIL otherwise
  */
ISP_StatusTypeDef ISP_SVC_Misc_IsDCMIPPReady(ISP_HandleTypeDef *hIsp)
{
34005e9c:	b508      	push	{r3, lr}
  /* Check handle validity */
  if (hIsp == NULL)
34005e9e:	b138      	cbz	r0, 34005eb0 <ISP_SVC_Misc_IsDCMIPPReady+0x14>
  {
    return ISP_ERR_EINVAL;
  }

  if (HAL_DCMIPP_GetState(hIsp->hDcmipp) != HAL_DCMIPP_STATE_READY)
34005ea0:	6800      	ldr	r0, [r0, #0]
34005ea2:	f00c f8ad 	bl	34012000 <HAL_DCMIPP_GetState>
  {
    return ISP_ERR_DCMIPP_STATE;
  }

  return ISP_OK;
34005ea6:	2802      	cmp	r0, #2
34005ea8:	bf14      	ite	ne
34005eaa:	208c      	movne	r0, #140	@ 0x8c
34005eac:	2000      	moveq	r0, #0
}
34005eae:	bd08      	pop	{r3, pc}
    return ISP_ERR_EINVAL;
34005eb0:	2001      	movs	r0, #1
34005eb2:	e7fc      	b.n	34005eae <ISP_SVC_Misc_IsDCMIPPReady+0x12>

34005eb4 <ISP_SVC_Misc_IncMainFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->MainPipe_FrameCount++;
34005eb4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34005eb6:	3301      	adds	r3, #1
34005eb8:	6403      	str	r3, [r0, #64]	@ 0x40
}
34005eba:	4770      	bx	lr

34005ebc <ISP_SVC_Misc_GetMainFrameId>:
  * @retval Id of the last frame output on the main pipe
  */
uint32_t ISP_SVC_Misc_GetMainFrameId(ISP_HandleTypeDef *hIsp)
{
  return hIsp->MainPipe_FrameCount;
}
34005ebc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
34005ebe:	4770      	bx	lr

34005ec0 <ISP_SVC_Misc_IncAncillaryFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->AncillaryPipe_FrameCount++;
34005ec0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
34005ec2:	3301      	adds	r3, #1
34005ec4:	6443      	str	r3, [r0, #68]	@ 0x44
}
34005ec6:	4770      	bx	lr

34005ec8 <ISP_SVC_Misc_IncDumpFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->DumpPipe_FrameCount++;
34005ec8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
34005eca:	3301      	adds	r3, #1
34005ecc:	6483      	str	r3, [r0, #72]	@ 0x48
}
34005ece:	4770      	bx	lr

34005ed0 <ISP_SVC_Misc_SetWBRefMode>:
  */
ISP_StatusTypeDef ISP_SVC_Misc_SetWBRefMode(ISP_HandleTypeDef *hIsp, uint32_t RefColorTemp)
{
  (void)hIsp; /* unused */

  ISP_ManualWBRefColorTemp = RefColorTemp;
34005ed0:	4b01      	ldr	r3, [pc, #4]	@ (34005ed8 <ISP_SVC_Misc_SetWBRefMode+0x8>)

  return ISP_OK;
}
34005ed2:	2000      	movs	r0, #0
  ISP_ManualWBRefColorTemp = RefColorTemp;
34005ed4:	6019      	str	r1, [r3, #0]
}
34005ed6:	4770      	bx	lr
34005ed8:	340a45ec 	.word	0x340a45ec

34005edc <ISP_SVC_Misc_IsGammaEnabled>:
  * @param  hIsp: ISP device handle
  * @param  Pipe: DCMIPP pipe line
  * @retval 1 if enabled 0 otherwise
  */
bool ISP_SVC_Misc_IsGammaEnabled(ISP_HandleTypeDef *hIsp, uint32_t Pipe)
{
34005edc:	b508      	push	{r3, lr}
  uint8_t ret;

  /* Check handle validity */
  if (hIsp == NULL)
34005ede:	b168      	cbz	r0, 34005efc <ISP_SVC_Misc_IsGammaEnabled+0x20>
  {
    return ISP_ERR_EINVAL;
  }

  switch(Pipe)
34005ee0:	2901      	cmp	r1, #1
34005ee2:	d006      	beq.n	34005ef2 <ISP_SVC_Misc_IsGammaEnabled+0x16>
34005ee4:	2902      	cmp	r1, #2
34005ee6:	d004      	beq.n	34005ef2 <ISP_SVC_Misc_IsGammaEnabled+0x16>
34005ee8:	2000      	movs	r0, #0
    break;
  default:
    ret = 0; /*  No gamma on pipe 0 */
  }

  return ret;
34005eea:	3800      	subs	r0, #0
34005eec:	bf18      	it	ne
34005eee:	2001      	movne	r0, #1
}
34005ef0:	bd08      	pop	{r3, pc}
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2);
34005ef2:	6800      	ldr	r0, [r0, #0]
34005ef4:	f00b f852 	bl	34010f9c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
34005ef8:	b2c0      	uxtb	r0, r0
    break;
34005efa:	e7f6      	b.n	34005eea <ISP_SVC_Misc_IsGammaEnabled+0xe>
    return ISP_ERR_EINVAL;
34005efc:	2001      	movs	r0, #1
34005efe:	e7f7      	b.n	34005ef0 <ISP_SVC_Misc_IsGammaEnabled+0x14>

34005f00 <ISP_SVC_ISP_SetGamma>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gamma configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGamma(ISP_HandleTypeDef *hIsp, ISP_GammaTypeDef *pConfig)
{
34005f00:	b538      	push	{r3, r4, r5, lr}
34005f02:	460d      	mov	r5, r1
  if ((hIsp == NULL) || (pConfig == NULL))
34005f04:	4604      	mov	r4, r0
34005f06:	b908      	cbnz	r0, 34005f0c <ISP_SVC_ISP_SetGamma+0xc>
  {
    return ISP_ERR_DCMIPP_GAMMA;
34005f08:	2095      	movs	r0, #149	@ 0x95
      return ISP_ERR_DCMIPP_GAMMA;
    }
  }

  return ISP_OK;
}
34005f0a:	bd38      	pop	{r3, r4, r5, pc}
  if ((hIsp == NULL) || (pConfig == NULL))
34005f0c:	2900      	cmp	r1, #0
34005f0e:	d0fb      	beq.n	34005f08 <ISP_SVC_ISP_SetGamma+0x8>
  if (pConfig->enablePipe1 == 0)
34005f10:	780b      	ldrb	r3, [r1, #0]
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34005f12:	6800      	ldr	r0, [r0, #0]
34005f14:	2101      	movs	r1, #1
  if (pConfig->enablePipe1 == 0)
34005f16:	b953      	cbnz	r3, 34005f2e <ISP_SVC_ISP_SetGamma+0x2e>
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34005f18:	f00b f81e 	bl	34010f58 <HAL_DCMIPP_PIPE_DisableGammaConversion>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34005f1c:	2800      	cmp	r0, #0
34005f1e:	d1f3      	bne.n	34005f08 <ISP_SVC_ISP_SetGamma+0x8>
  if (pConfig->enablePipe2 == 0)
34005f20:	786b      	ldrb	r3, [r5, #1]
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34005f22:	6820      	ldr	r0, [r4, #0]
  if (pConfig->enablePipe2 == 0)
34005f24:	b133      	cbz	r3, 34005f34 <ISP_SVC_ISP_SetGamma+0x34>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34005f26:	2102      	movs	r1, #2
34005f28:	f00a fff4 	bl	34010f14 <HAL_DCMIPP_PIPE_EnableGammaConversion>
34005f2c:	e005      	b.n	34005f3a <ISP_SVC_ISP_SetGamma+0x3a>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34005f2e:	f00a fff1 	bl	34010f14 <HAL_DCMIPP_PIPE_EnableGammaConversion>
34005f32:	e7f3      	b.n	34005f1c <ISP_SVC_ISP_SetGamma+0x1c>
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34005f34:	2102      	movs	r1, #2
34005f36:	f00b f80f 	bl	34010f58 <HAL_DCMIPP_PIPE_DisableGammaConversion>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34005f3a:	2800      	cmp	r0, #0
34005f3c:	d1e4      	bne.n	34005f08 <ISP_SVC_ISP_SetGamma+0x8>
  return ISP_OK;
34005f3e:	2000      	movs	r0, #0
34005f40:	e7e3      	b.n	34005f0a <ISP_SVC_ISP_SetGamma+0xa>
	...

34005f44 <ISP_SVC_IQParam_Init>:
  *         Initialize the IQ parameters cache with values from non volatile memory
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_IQParam_Init(ISP_HandleTypeDef *hIsp, const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
34005f44:	b508      	push	{r3, lr}
  (void)hIsp; /* unused */

  ISP_IQParamCache = *ISP_IQParamCacheInit;
34005f46:	f44f 7216 	mov.w	r2, #600	@ 0x258
34005f4a:	4802      	ldr	r0, [pc, #8]	@ (34005f54 <ISP_SVC_IQParam_Init+0x10>)
34005f4c:	f019 f81f 	bl	3401ef8e <memcpy>
  return ISP_OK;
}
34005f50:	2000      	movs	r0, #0
34005f52:	bd08      	pop	{r3, pc}
34005f54:	340a4394 	.word	0x340a4394

34005f58 <ISP_SVC_IQParam_Get>:
ISP_IQParamTypeDef *ISP_SVC_IQParam_Get(ISP_HandleTypeDef *hIsp)
{
  (void)hIsp; /* unused */

  return &ISP_IQParamCache;
}
34005f58:	4800      	ldr	r0, [pc, #0]	@ (34005f5c <ISP_SVC_IQParam_Get+0x4>)
34005f5a:	4770      	bx	lr
34005f5c:	340a4394 	.word	0x340a4394

34005f60 <ISP_SVC_Stats_Init>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Init(ISP_HandleTypeDef *hIsp)
{
  memset(&ISP_SVC_StatEngine, 0, sizeof(ISP_SVC_StatEngineTypeDef));
34005f60:	f44f 72b0 	mov.w	r2, #352	@ 0x160
34005f64:	2100      	movs	r1, #0
34005f66:	4801      	ldr	r0, [pc, #4]	@ (34005f6c <ISP_SVC_Stats_Init+0xc>)
34005f68:	f018 bd8a 	b.w	3401ea80 <memset>
34005f6c:	340a4234 	.word	0x340a4234

34005f70 <ISP_SVC_Stats_Gather>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Gather(ISP_HandleTypeDef *hIsp)
{
34005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_SVC_StatStateTypeDef *ongoing;
  uint32_t i, avgR, avgG, avgB, frameId;

  /* Check handle validity */
  if (hIsp == NULL)
34005f74:	4605      	mov	r5, r0
{
34005f76:	b08d      	sub	sp, #52	@ 0x34
  if (hIsp == NULL)
34005f78:	b928      	cbnz	r0, 34005f86 <ISP_SVC_Stats_Gather+0x16>
  {
    printf("ERROR: ISP handle is NULL\r\n");
34005f7a:	48aa      	ldr	r0, [pc, #680]	@ (34006224 <ISP_SVC_Stats_Gather+0x2b4>)

  /* Save the two last processed stages and go to next stage */
  stagePrevious2 = stagePrevious1;
  stagePrevious1 = ISP_SVC_StatEngine.stage;
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
}
34005f7c:	b00d      	add	sp, #52	@ 0x34
34005f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("ERROR: ISP handle is NULL\r\n");
34005f82:	f018 bc47 	b.w	3401e814 <puts>
  if (hIsp->hDcmipp == NULL)
34005f86:	6800      	ldr	r0, [r0, #0]
34005f88:	2800      	cmp	r0, #0
34005f8a:	f000 80b4 	beq.w	340060f6 <ISP_SVC_Stats_Gather+0x186>
  switch(stagePrevious2)
34005f8e:	f8df 92f0 	ldr.w	r9, [pc, #752]	@ 34006280 <ISP_SVC_Stats_Gather+0x310>
34005f92:	4ca5      	ldr	r4, [pc, #660]	@ (34006228 <ISP_SVC_Stats_Gather+0x2b8>)
34005f94:	f899 3000 	ldrb.w	r3, [r9]
34005f98:	2b09      	cmp	r3, #9
34005f9a:	d836      	bhi.n	3400600a <ISP_SVC_Stats_Gather+0x9a>
34005f9c:	e8df f003 	tbb	[pc, r3]
34005fa0:	46443f05 	.word	0x46443f05
34005fa4:	89874a48 	.word	0x89874a48
34005fa8:	8d8b      	.short	0x8d8b
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
34005faa:	2201      	movs	r2, #1
34005fac:	466b      	mov	r3, sp
34005fae:	4611      	mov	r1, r2
34005fb0:	f00b fee6 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
34005fb4:	2202      	movs	r2, #2
34005fb6:	2101      	movs	r1, #1
34005fb8:	ab01      	add	r3, sp, #4
34005fba:	6828      	ldr	r0, [r5, #0]
34005fbc:	f00b fee0 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
34005fc0:	2203      	movs	r2, #3
34005fc2:	2101      	movs	r1, #1
34005fc4:	ab02      	add	r3, sp, #8
34005fc6:	6828      	ldr	r0, [r5, #0]
34005fc8:	f00b feda 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
34005fcc:	2101      	movs	r1, #1
34005fce:	2200      	movs	r2, #0
34005fd0:	9b00      	ldr	r3, [sp, #0]
34005fd2:	4628      	mov	r0, r5
34005fd4:	f7ff fb14 	bl	34005600 <GetAvgStats>
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34005fd8:	460a      	mov	r2, r1
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
34005fda:	4606      	mov	r6, r0
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34005fdc:	9b01      	ldr	r3, [sp, #4]
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
34005fde:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34005fe2:	4628      	mov	r0, r5
34005fe4:	f7ff fb0c 	bl	34005600 <GetAvgStats>
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
34005fe8:	2202      	movs	r2, #2
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
34005fea:	4607      	mov	r7, r0
34005fec:	f884 007d 	strb.w	r0, [r4, #125]	@ 0x7d
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
34005ff0:	9b02      	ldr	r3, [sp, #8]
34005ff2:	4628      	mov	r0, r5
34005ff4:	f7ff fb04 	bl	34005600 <GetAvgStats>
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
34005ff8:	4639      	mov	r1, r7
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
34005ffa:	4602      	mov	r2, r0
34005ffc:	f884 007e 	strb.w	r0, [r4, #126]	@ 0x7e
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
34006000:	4630      	mov	r0, r6
34006002:	f7ff fb41 	bl	34005688 <LuminanceFromRGB>
34006006:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
  switch(ISP_SVC_StatEngine.stage)
3400600a:	7823      	ldrb	r3, [r4, #0]
3400600c:	2b09      	cmp	r3, #9
3400600e:	d863      	bhi.n	340060d8 <ISP_SVC_Stats_Gather+0x168>
34006010:	e8df f003 	tbb	[pc, r3]
34006014:	86847f74 	.word	0x86847f74
34006018:	8c8a5588 	.word	0x8c8a5588
3400601c:	908e      	.short	0x908e
    ReadStatHistogram(hIsp, &ongoing->up.histogram[0]);
3400601e:	4983      	ldr	r1, [pc, #524]	@ (3400622c <ISP_SVC_Stats_Gather+0x2bc>)
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
34006020:	4628      	mov	r0, r5
34006022:	f7ff fb1e 	bl	34005662 <ReadStatHistogram>
    break;
34006026:	e7f0      	b.n	3400600a <ISP_SVC_Stats_Gather+0x9a>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[3]);
34006028:	4981      	ldr	r1, [pc, #516]	@ (34006230 <ISP_SVC_Stats_Gather+0x2c0>)
3400602a:	e7f9      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[6]);
3400602c:	4981      	ldr	r1, [pc, #516]	@ (34006234 <ISP_SVC_Stats_Gather+0x2c4>)
3400602e:	e7f7      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[9]);
34006030:	4981      	ldr	r1, [pc, #516]	@ (34006238 <ISP_SVC_Stats_Gather+0x2c8>)
34006032:	e7f5      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
34006034:	2201      	movs	r2, #1
34006036:	466b      	mov	r3, sp
34006038:	4611      	mov	r1, r2
3400603a:	f00b fea1 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
3400603e:	2202      	movs	r2, #2
34006040:	2101      	movs	r1, #1
34006042:	ab01      	add	r3, sp, #4
34006044:	6828      	ldr	r0, [r5, #0]
34006046:	f00b fe9b 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
3400604a:	2203      	movs	r2, #3
3400604c:	2101      	movs	r1, #1
3400604e:	ab02      	add	r3, sp, #8
34006050:	6828      	ldr	r0, [r5, #0]
34006052:	f00b fe95 	bl	34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
34006056:	2102      	movs	r1, #2
34006058:	2200      	movs	r2, #0
3400605a:	9b00      	ldr	r3, [sp, #0]
3400605c:	4628      	mov	r0, r5
3400605e:	f7ff facf 	bl	34005600 <GetAvgStats>
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
34006062:	2201      	movs	r2, #1
34006064:	9b01      	ldr	r3, [sp, #4]
    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
34006066:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
3400606a:	4607      	mov	r7, r0
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
3400606c:	4628      	mov	r0, r5
3400606e:	f7ff fac7 	bl	34005600 <GetAvgStats>
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
34006072:	460a      	mov	r2, r1
34006074:	9b02      	ldr	r3, [sp, #8]
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
34006076:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1
3400607a:	4606      	mov	r6, r0
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
3400607c:	4628      	mov	r0, r5
3400607e:	f7ff fabf 	bl	34005600 <GetAvgStats>
34006082:	f884 00b2 	strb.w	r0, [r4, #178]	@ 0xb2
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
34006086:	f895 306c 	ldrb.w	r3, [r5, #108]	@ 0x6c
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
3400608a:	4602      	mov	r2, r0
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
3400608c:	2b04      	cmp	r3, #4
3400608e:	d002      	beq.n	34006096 <ISP_SVC_Stats_Gather+0x126>
34006090:	4b6a      	ldr	r3, [pc, #424]	@ (3400623c <ISP_SVC_Stats_Gather+0x2cc>)
34006092:	7b1b      	ldrb	r3, [r3, #12]
34006094:	b923      	cbnz	r3, 340060a0 <ISP_SVC_Stats_Gather+0x130>
  return r + g + b;
34006096:	443e      	add	r6, r7
34006098:	4432      	add	r2, r6
      ongoing->down.averageL = LuminanceFromRGBMono(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
3400609a:	f884 20b3 	strb.w	r2, [r4, #179]	@ 0xb3
3400609e:	e7b4      	b.n	3400600a <ISP_SVC_Stats_Gather+0x9a>
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
340060a0:	4631      	mov	r1, r6
340060a2:	4638      	mov	r0, r7
340060a4:	f7ff faf0 	bl	34005688 <LuminanceFromRGB>
340060a8:	f884 00b3 	strb.w	r0, [r4, #179]	@ 0xb3
340060ac:	e7ad      	b.n	3400600a <ISP_SVC_Stats_Gather+0x9a>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[0]);
340060ae:	4964      	ldr	r1, [pc, #400]	@ (34006240 <ISP_SVC_Stats_Gather+0x2d0>)
340060b0:	e7b6      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[3]);
340060b2:	4964      	ldr	r1, [pc, #400]	@ (34006244 <ISP_SVC_Stats_Gather+0x2d4>)
340060b4:	e7b4      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[6]);
340060b6:	4964      	ldr	r1, [pc, #400]	@ (34006248 <ISP_SVC_Stats_Gather+0x2d8>)
340060b8:	e7b2      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
340060ba:	4964      	ldr	r1, [pc, #400]	@ (3400624c <ISP_SVC_Stats_Gather+0x2dc>)
340060bc:	e7b0      	b.n	34006020 <ISP_SVC_Stats_Gather+0xb0>
      statConf[i].Source = avgRGBDown[i];
340060be:	2300      	movs	r3, #0
340060c0:	2240      	movs	r2, #64	@ 0x40
340060c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
340060c6:	2250      	movs	r2, #80	@ 0x50
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
340060c8:	e9cd 2307 	strd	r2, r3, [sp, #28]
      statConf[i].Source = avgRGBDown[i];
340060cc:	2260      	movs	r2, #96	@ 0x60
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
340060ce:	e9cd 3305 	strd	r3, r3, [sp, #20]
340060d2:	9309      	str	r3, [sp, #36]	@ 0x24
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
340060d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
{
340060d8:	f04f 0801 	mov.w	r8, #1
340060dc:	af03      	add	r7, sp, #12
    if (HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, i, &statConf[i - DCMIPP_STATEXT_MODULE1]) != HAL_OK)
340060de:	fa5f f688 	uxtb.w	r6, r8
340060e2:	463b      	mov	r3, r7
340060e4:	4632      	mov	r2, r6
340060e6:	2101      	movs	r1, #1
340060e8:	6828      	ldr	r0, [r5, #0]
340060ea:	f00b fb03 	bl	340116f4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>
340060ee:	b318      	cbz	r0, 34006138 <ISP_SVC_Stats_Gather+0x1c8>
      printf("ERROR: can't set Statistic Extraction config\r\n");
340060f0:	4857      	ldr	r0, [pc, #348]	@ (34006250 <ISP_SVC_Stats_Gather+0x2e0>)
      printf("ERROR: can't enable Statistic Extraction config\r\n");
340060f2:	f018 fb8f 	bl	3401e814 <puts>
}
340060f6:	b00d      	add	sp, #52	@ 0x34
340060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
340060fc:	2300      	movs	r3, #0
      statConf[i].Source = avgRGBUp[i];
340060fe:	2210      	movs	r2, #16
34006100:	e9cd 3303 	strd	r3, r3, [sp, #12]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
34006104:	e9cd 2307 	strd	r2, r3, [sp, #28]
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34006108:	e9cd 3305 	strd	r3, r3, [sp, #20]
      statConf[i].Source = avgRGBUp[i];
3400610c:	2220      	movs	r2, #32
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
3400610e:	9309      	str	r3, [sp, #36]	@ 0x24
      statConf[i].Source = avgRGBUp[i];
34006110:	e7e0      	b.n	340060d4 <ISP_SVC_Stats_Gather+0x164>
    SetStatConfig(statConf, &statConfUpBins_0_2);
34006112:	4950      	ldr	r1, [pc, #320]	@ (34006254 <ISP_SVC_Stats_Gather+0x2e4>)
    SetStatConfig(statConf, &statConfDownBins_9_11);
34006114:	a803      	add	r0, sp, #12
34006116:	f7ff fa95 	bl	34005644 <SetStatConfig>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3400611a:	e7dd      	b.n	340060d8 <ISP_SVC_Stats_Gather+0x168>
    SetStatConfig(statConf, &statConfUpBins_3_5);
3400611c:	494e      	ldr	r1, [pc, #312]	@ (34006258 <ISP_SVC_Stats_Gather+0x2e8>)
3400611e:	e7f9      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfUpBins_6_8);
34006120:	494e      	ldr	r1, [pc, #312]	@ (3400625c <ISP_SVC_Stats_Gather+0x2ec>)
34006122:	e7f7      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfUpBins_9_11);
34006124:	494e      	ldr	r1, [pc, #312]	@ (34006260 <ISP_SVC_Stats_Gather+0x2f0>)
34006126:	e7f5      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_0_2);
34006128:	494e      	ldr	r1, [pc, #312]	@ (34006264 <ISP_SVC_Stats_Gather+0x2f4>)
3400612a:	e7f3      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_3_5);
3400612c:	494e      	ldr	r1, [pc, #312]	@ (34006268 <ISP_SVC_Stats_Gather+0x2f8>)
3400612e:	e7f1      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_6_8);
34006130:	494e      	ldr	r1, [pc, #312]	@ (3400626c <ISP_SVC_Stats_Gather+0x2fc>)
34006132:	e7ef      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_9_11);
34006134:	494e      	ldr	r1, [pc, #312]	@ (34006270 <ISP_SVC_Stats_Gather+0x300>)
34006136:	e7ed      	b.n	34006114 <ISP_SVC_Stats_Gather+0x1a4>
    if (HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1, i) != HAL_OK)
34006138:	4632      	mov	r2, r6
3400613a:	2101      	movs	r1, #1
3400613c:	6828      	ldr	r0, [r5, #0]
3400613e:	f00b fb91 	bl	34011864 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>
34006142:	4606      	mov	r6, r0
34006144:	b108      	cbz	r0, 3400614a <ISP_SVC_Stats_Gather+0x1da>
      printf("ERROR: can't enable Statistic Extraction config\r\n");
34006146:	484b      	ldr	r0, [pc, #300]	@ (34006274 <ISP_SVC_Stats_Gather+0x304>)
34006148:	e7d3      	b.n	340060f2 <ISP_SVC_Stats_Gather+0x182>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
3400614a:	f108 0801 	add.w	r8, r8, #1
3400614e:	f1b8 0f04 	cmp.w	r8, #4
34006152:	f107 070c 	add.w	r7, r7, #12
34006156:	d1c2      	bne.n	340060de <ISP_SVC_Stats_Gather+0x16e>
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
34006158:	f894 8158 	ldrb.w	r8, [r4, #344]	@ 0x158
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
3400615c:	f899 b000 	ldrb.w	fp, [r9]
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
34006160:	f018 0f05 	tst.w	r8, #5
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
34006164:	bf0c      	ite	eq
34006166:	2301      	moveq	r3, #1
34006168:	2300      	movne	r3, #0
  return hIsp->MainPipe_FrameCount;
3400616a:	f8d5 a040 	ldr.w	sl, [r5, #64]	@ 0x40
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
3400616e:	f894 7159 	ldrb.w	r7, [r4, #345]	@ 0x159
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
34006172:	455b      	cmp	r3, fp
    ongoing->upFrameIdStart = frameId;
34006174:	bf08      	it	eq
34006176:	f8c4 a0e4 	streq.w	sl, [r4, #228]	@ 0xe4
      stage = ISP_STAT_CFG_DOWN_AVG;
3400617a:	f017 0f05 	tst.w	r7, #5
3400617e:	bf0c      	ite	eq
34006180:	2306      	moveq	r3, #6
34006182:	2305      	movne	r3, #5
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_DOWN))
34006184:	459b      	cmp	fp, r3
34006186:	d17d      	bne.n	34006284 <ISP_SVC_Stats_Gather+0x314>
    ongoing->downFrameIdStart = frameId;
34006188:	f8c4 a0ec 	str.w	sl, [r4, #236]	@ 0xec
      stage = ISP_STAT_CFG_DOWN_BINS_9_11;
3400618c:	f017 0f06 	tst.w	r7, #6
34006190:	bf0c      	ite	eq
34006192:	2305      	moveq	r3, #5
34006194:	2309      	movne	r3, #9
  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_DOWN)) && (ongoing->downFrameIdStart != 0))
34006196:	459b      	cmp	fp, r3
34006198:	d11e      	bne.n	340061d8 <ISP_SVC_Stats_Gather+0x268>
3400619a:	f8d4 e0ec 	ldr.w	lr, [r4, #236]	@ 0xec
3400619e:	f1be 0f00 	cmp.w	lr, #0
340061a2:	d019      	beq.n	340061d8 <ISP_SVC_Stats_Gather+0x268>
    ISP_SVC_StatEngine.last.down = ongoing->down;
340061a4:	4d34      	ldr	r5, [pc, #208]	@ (34006278 <ISP_SVC_Stats_Gather+0x308>)
    ISP_SVC_StatEngine.last.downFrameIdStart = ongoing->downFrameIdStart;
340061a6:	e9c4 ea1d 	strd	lr, sl, [r4, #116]	@ 0x74
    ISP_SVC_StatEngine.last.down = ongoing->down;
340061aa:	f105 0c78 	add.w	ip, r5, #120	@ 0x78
340061ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340061b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340061b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340061b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340061ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340061be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340061c0:	4628      	mov	r0, r5
340061c2:	f8dc 3000 	ldr.w	r3, [ip]
    memset(&ongoing->down, 0, sizeof(ongoing->down));
340061c6:	2234      	movs	r2, #52	@ 0x34
    ISP_SVC_StatEngine.last.down = ongoing->down;
340061c8:	f840 3b48 	str.w	r3, [r0], #72
    memset(&ongoing->down, 0, sizeof(ongoing->down));
340061cc:	2100      	movs	r1, #0
340061ce:	f018 fc57 	bl	3401ea80 <memset>
    ongoing->downFrameIdStart = 0;
340061d2:	2300      	movs	r3, #0
    ongoing->downFrameIdEnd = 0;
340061d4:	e9c4 333b 	strd	r3, r3, [r4, #236]	@ 0xec
  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
340061d8:	ea48 0307 	orr.w	r3, r8, r7
340061dc:	075a      	lsls	r2, r3, #29
340061de:	d50b      	bpl.n	340061f8 <ISP_SVC_Stats_Gather+0x288>
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
340061e0:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340061e4:	4553      	cmp	r3, sl
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340061e6:	bf3f      	itttt	cc
340061e8:	f028 0804 	biccc.w	r8, r8, #4
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340061ec:	f027 0704 	biccc.w	r7, r7, #4
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340061f0:	f884 8158 	strbcc.w	r8, [r4, #344]	@ 0x158
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340061f4:	f884 7159 	strbcc.w	r7, [r4, #345]	@ 0x159
  stagePrevious2 = stagePrevious1;
340061f8:	4b20      	ldr	r3, [pc, #128]	@ (3400627c <ISP_SVC_Stats_Gather+0x30c>)
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
340061fa:	f894 1158 	ldrb.w	r1, [r4, #344]	@ 0x158
  stagePrevious2 = stagePrevious1;
340061fe:	781a      	ldrb	r2, [r3, #0]
34006200:	f889 2000 	strb.w	r2, [r9]
  stagePrevious1 = ISP_SVC_StatEngine.stage;
34006204:	7822      	ldrb	r2, [r4, #0]
34006206:	701a      	strb	r2, [r3, #0]
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006208:	074b      	lsls	r3, r1, #29
3400620a:	d403      	bmi.n	34006214 <ISP_SVC_Stats_Gather+0x2a4>
      (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
3400620c:	f894 3159 	ldrb.w	r3, [r4, #345]	@ 0x159
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006210:	075f      	lsls	r7, r3, #29
34006212:	d561      	bpl.n	340062d8 <ISP_SVC_Stats_Gather+0x368>
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
34006214:	1c53      	adds	r3, r2, #1
34006216:	b2db      	uxtb	r3, r3
34006218:	2a09      	cmp	r2, #9
3400621a:	bf38      	it	cc
3400621c:	461e      	movcc	r6, r3
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
3400621e:	7026      	strb	r6, [r4, #0]
34006220:	e769      	b.n	340060f6 <ISP_SVC_Stats_Gather+0x186>
34006222:	bf00      	nop
34006224:	34023d9f 	.word	0x34023d9f
34006228:	340a4234 	.word	0x340a4234
3400622c:	340a42b4 	.word	0x340a42b4
34006230:	340a42c0 	.word	0x340a42c0
34006234:	340a42cc 	.word	0x340a42cc
34006238:	340a42d8 	.word	0x340a42d8
3400623c:	340a4394 	.word	0x340a4394
34006240:	340a42e8 	.word	0x340a42e8
34006244:	340a42f4 	.word	0x340a42f4
34006248:	340a4300 	.word	0x340a4300
3400624c:	340a430c 	.word	0x340a430c
34006250:	34023dba 	.word	0x34023dba
34006254:	3402836c 	.word	0x3402836c
34006258:	34028360 	.word	0x34028360
3400625c:	34028354 	.word	0x34028354
34006260:	34028348 	.word	0x34028348
34006264:	3402833c 	.word	0x3402833c
34006268:	34028330 	.word	0x34028330
3400626c:	34028324 	.word	0x34028324
34006270:	34028318 	.word	0x34028318
34006274:	34023de8 	.word	0x34023de8
34006278:	340a426c 	.word	0x340a426c
3400627c:	340a31b8 	.word	0x340a31b8
34006280:	340a31b9 	.word	0x340a31b9
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
34006284:	f018 0f06 	tst.w	r8, #6
34006288:	bf14      	ite	ne
3400628a:	2301      	movne	r3, #1
3400628c:	2300      	moveq	r3, #0
  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_UP)) && (ongoing->upFrameIdStart != 0))
3400628e:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
34006292:	f47f af7b 	bne.w	3400618c <ISP_SVC_Stats_Gather+0x21c>
34006296:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	@ 0xe4
3400629a:	f1be 0f00 	cmp.w	lr, #0
3400629e:	f43f af75 	beq.w	3400618c <ISP_SVC_Stats_Gather+0x21c>
    ISP_SVC_StatEngine.last.up = ongoing->up;
340062a2:	4d2f      	ldr	r5, [pc, #188]	@ (34006360 <ISP_SVC_Stats_Gather+0x3f0>)
    ISP_SVC_StatEngine.last.upFrameIdStart = ongoing->upFrameIdStart;
340062a4:	e9c4 ea1b 	strd	lr, sl, [r4, #108]	@ 0x6c
    ISP_SVC_StatEngine.last.up = ongoing->up;
340062a8:	f105 0c78 	add.w	ip, r5, #120	@ 0x78
340062ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340062b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340062b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340062b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340062b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340062bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340062be:	4628      	mov	r0, r5
340062c0:	f8dc 3000 	ldr.w	r3, [ip]
    memset(&ongoing->up, 0, sizeof(ongoing->up));
340062c4:	2234      	movs	r2, #52	@ 0x34
    ISP_SVC_StatEngine.last.up = ongoing->up;
340062c6:	f840 3b48 	str.w	r3, [r0], #72
    memset(&ongoing->up, 0, sizeof(ongoing->up));
340062ca:	2100      	movs	r1, #0
340062cc:	f018 fbd8 	bl	3401ea80 <memset>
    ongoing->upFrameIdStart = 0;
340062d0:	2300      	movs	r3, #0
    ongoing->upFrameIdEnd = 0;
340062d2:	e9c4 3339 	strd	r3, r3, [r4, #228]	@ 0xe4
340062d6:	e759      	b.n	3400618c <ISP_SVC_Stats_Gather+0x21c>
  switch (current)
340062d8:	2a09      	cmp	r2, #9
340062da:	d836      	bhi.n	3400634a <ISP_SVC_Stats_Gather+0x3da>
340062dc:	e8df f002 	tbb	[pc, r2]
340062e0:	35353505 	.word	0x35353505
340062e4:	35351d11 	.word	0x35351d11
340062e8:	2a35      	.short	0x2a35
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
340062ea:	078d      	lsls	r5, r1, #30
340062ec:	d434      	bmi.n	34006358 <ISP_SVC_Stats_Gather+0x3e8>
    else if (ISP_SVC_StatEngine.downRequest &  ISP_STAT_TYPE_AVG)
340062ee:	07d8      	lsls	r0, r3, #31
340062f0:	d434      	bmi.n	3400635c <ISP_SVC_Stats_Gather+0x3ec>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
340062f2:	f013 0602 	ands.w	r6, r3, #2
340062f6:	d12b      	bne.n	34006350 <ISP_SVC_Stats_Gather+0x3e0>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
340062f8:	f011 0f01 	tst.w	r1, #1
340062fc:	bf08      	it	eq
340062fe:	2609      	moveq	r6, #9
34006300:	e78d      	b.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
34006302:	07da      	lsls	r2, r3, #31
34006304:	d42a      	bmi.n	3400635c <ISP_SVC_Stats_Gather+0x3ec>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34006306:	f013 0602 	ands.w	r6, r3, #2
3400630a:	d121      	bne.n	34006350 <ISP_SVC_Stats_Gather+0x3e0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
3400630c:	07cb      	lsls	r3, r1, #31
3400630e:	d486      	bmi.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006310:	f011 0f02 	tst.w	r1, #2
34006314:	bf18      	it	ne
34006316:	2601      	movne	r6, #1
34006318:	e7f0      	b.n	340062fc <ISP_SVC_Stats_Gather+0x38c>
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
3400631a:	f013 0602 	ands.w	r6, r3, #2
3400631e:	d117      	bne.n	34006350 <ISP_SVC_Stats_Gather+0x3e0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006320:	07cf      	lsls	r7, r1, #31
34006322:	f53f af7c 	bmi.w	3400621e <ISP_SVC_Stats_Gather+0x2ae>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34006326:	078d      	lsls	r5, r1, #30
34006328:	d416      	bmi.n	34006358 <ISP_SVC_Stats_Gather+0x3e8>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
3400632a:	f013 0f01 	tst.w	r3, #1
3400632e:	bf18      	it	ne
34006330:	4616      	movne	r6, r2
34006332:	e7e3      	b.n	340062fc <ISP_SVC_Stats_Gather+0x38c>
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006334:	07c8      	lsls	r0, r1, #31
34006336:	d40d      	bmi.n	34006354 <ISP_SVC_Stats_Gather+0x3e4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34006338:	0789      	lsls	r1, r1, #30
3400633a:	d40d      	bmi.n	34006358 <ISP_SVC_Stats_Gather+0x3e8>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
3400633c:	07da      	lsls	r2, r3, #31
3400633e:	d40d      	bmi.n	3400635c <ISP_SVC_Stats_Gather+0x3ec>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006340:	f013 0f02 	tst.w	r3, #2
34006344:	bf18      	it	ne
34006346:	2606      	movne	r6, #6
34006348:	e7d8      	b.n	340062fc <ISP_SVC_Stats_Gather+0x38c>
    next = (ISP_SVC_StatEngineStage) (current + 1);
3400634a:	3201      	adds	r2, #1
3400634c:	b2d6      	uxtb	r6, r2
    break;
3400634e:	e766      	b.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
34006350:	2606      	movs	r6, #6
34006352:	e764      	b.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
34006354:	2600      	movs	r6, #0
34006356:	e762      	b.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
      next = ISP_STAT_CFG_UP_BINS_0_2;
34006358:	2601      	movs	r6, #1
3400635a:	e760      	b.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
      next = ISP_STAT_CFG_DOWN_AVG;
3400635c:	2605      	movs	r6, #5
3400635e:	e75e      	b.n	3400621e <ISP_SVC_Stats_Gather+0x2ae>
34006360:	340a4238 	.word	0x340a4238

34006364 <ISP_SVC_Stats_ProcessCallbacks>:
  *         If the conditions are met, call the client registered callbacks
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_ProcessCallbacks(ISP_HandleTypeDef *hIsp)
{
34006364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (void)hIsp; /* unused */
  ISP_SVC_StatStateTypeDef *pLastStat;
  ISP_SVC_StatRegisteredClient *client;
  ISP_StatusTypeDef retcb, ret = ISP_OK;
34006368:	2500      	movs	r5, #0
3400636a:	4c1c      	ldr	r4, [pc, #112]	@ (340063dc <ISP_SVC_Stats_ProcessCallbacks+0x78>)
{
3400636c:	2705      	movs	r7, #5
3400636e:	4626      	mov	r6, r4
      {
        ret = retcb;
      }

      /* Remove the client from the registered list */
      client->callback = NULL;
34006370:	46a9      	mov	r9, r5
      *(client->pStats) = *pLastStat;
34006372:	f104 0804 	add.w	r8, r4, #4
    if (client->callback == NULL)
34006376:	f8d4 a0f4 	ldr.w	sl, [r4, #244]	@ 0xf4
3400637a:	f1ba 0f00 	cmp.w	sl, #0
3400637e:	d016      	beq.n	340063ae <ISP_SVC_Stats_ProcessCallbacks+0x4a>
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
34006380:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
34006384:	2b02      	cmp	r3, #2
34006386:	d119      	bne.n	340063bc <ISP_SVC_Stats_ProcessCallbacks+0x58>
34006388:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
3400638c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
3400638e:	429a      	cmp	r2, r3
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
34006390:	d80d      	bhi.n	340063ae <ISP_SVC_Stats_ProcessCallbacks+0x4a>
      *(client->pStats) = *pLastStat;
34006392:	2278      	movs	r2, #120	@ 0x78
34006394:	4641      	mov	r1, r8
34006396:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
3400639a:	f018 fdf8 	bl	3401ef8e <memcpy>
      retcb = client->callback(client->pAlgo);
3400639e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
340063a2:	47d0      	blx	sl
      if (retcb != ISP_OK)
340063a4:	2800      	cmp	r0, #0
      client->callback = NULL;
340063a6:	bf18      	it	ne
340063a8:	4605      	movne	r5, r0
340063aa:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
340063ae:	3f01      	subs	r7, #1
340063b0:	f104 0414 	add.w	r4, r4, #20
340063b4:	d1df      	bne.n	34006376 <ISP_SVC_Stats_ProcessCallbacks+0x12>
    }
  }

  return ret;
}
340063b6:	4628      	mov	r0, r5
340063b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
340063bc:	2b01      	cmp	r3, #1
340063be:	d103      	bne.n	340063c8 <ISP_SVC_Stats_ProcessCallbacks+0x64>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
340063c0:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
340063c4:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
340063c6:	e7e2      	b.n	3400638e <ISP_SVC_Stats_ProcessCallbacks+0x2a>
340063c8:	2b03      	cmp	r3, #3
340063ca:	d1f0      	bne.n	340063ae <ISP_SVC_Stats_ProcessCallbacks+0x4a>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
340063cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340063d0:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
340063d2:	4293      	cmp	r3, r2
340063d4:	d8eb      	bhi.n	340063ae <ISP_SVC_Stats_ProcessCallbacks+0x4a>
340063d6:	6f72      	ldr	r2, [r6, #116]	@ 0x74
340063d8:	4293      	cmp	r3, r2
340063da:	e7d9      	b.n	34006390 <ISP_SVC_Stats_ProcessCallbacks+0x2c>
340063dc:	340a4234 	.word	0x340a4234

340063e0 <ISP_SVC_Stats_GetNext>:
  * @param  frameDelay: number of frames to wait before considering the stats as valid
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_GetNext(ISP_HandleTypeDef *hIsp, ISP_stat_ready_cb callback, ISP_AlgoTypeDef *pAlgo, ISP_SVC_StatStateTypeDef *pStats,
                                        ISP_SVC_StatLocation location, ISP_SVC_StatType type, uint32_t frameDelay)
{
340063e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
340063e4:	4691      	mov	r9, r2
340063e6:	f89d c01c 	ldrb.w	ip, [sp, #28]
340063ea:	f89d 5020 	ldrb.w	r5, [sp, #32]
  uint32_t i, refFrameId;

  /* Check handle validity */
  if ((hIsp == NULL) || (pStats == NULL))
340063ee:	b1b0      	cbz	r0, 3400641e <ISP_SVC_Stats_GetNext+0x3e>
340063f0:	b1ab      	cbz	r3, 3400641e <ISP_SVC_Stats_GetNext+0x3e>
  return hIsp->MainPipe_FrameCount;
340063f2:	4e1e      	ldr	r6, [pc, #120]	@ (3400646c <ISP_SVC_Stats_GetNext+0x8c>)
  }

  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;

  /* Register the callback */
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
340063f4:	f04f 0e00 	mov.w	lr, #0
340063f8:	4634      	mov	r4, r6
340063fa:	f04f 0805 	mov.w	r8, #5
  return hIsp->MainPipe_FrameCount;
340063fe:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;
34006400:	9f09      	ldr	r7, [sp, #36]	@ 0x24
34006402:	4407      	add	r7, r0
  {
    if (ISP_SVC_StatEngine.client[i].callback == NULL)
34006404:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
34006408:	b15a      	cbz	r2, 34006422 <ISP_SVC_Stats_GetNext+0x42>
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
3400640a:	f1b8 0801 	subs.w	r8, r8, #1
3400640e:	f10e 0e01 	add.w	lr, lr, #1
34006412:	f106 0614 	add.w	r6, r6, #20
34006416:	d1f5      	bne.n	34006404 <ISP_SVC_Stats_GetNext+0x24>
  }

  if (i == ISP_SVC_STAT_MAX_CB)
  {
    /* Too much callback registered */
    return ISP_ERR_STAT_MAXCLIENTS;
34006418:	20ac      	movs	r0, #172	@ 0xac
  ISP_SVC_StatEngine.client[i].location = location;
  ISP_SVC_StatEngine.client[i].type = type;
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;

  return ISP_OK;
}
3400641a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ISP_ERR_EINVAL;
3400641e:	2001      	movs	r0, #1
34006420:	e7fb      	b.n	3400641a <ISP_SVC_Stats_GetNext+0x3a>
  if (location & ISP_STAT_LOC_UP)
34006422:	f01c 0f01 	tst.w	ip, #1
34006426:	d004      	beq.n	34006432 <ISP_SVC_Stats_GetNext+0x52>
    ISP_SVC_StatEngine.upRequest |= type;
34006428:	f894 6158 	ldrb.w	r6, [r4, #344]	@ 0x158
3400642c:	432e      	orrs	r6, r5
3400642e:	f884 6158 	strb.w	r6, [r4, #344]	@ 0x158
  if (location & ISP_STAT_LOC_DOWN)
34006432:	f01c 0f02 	tst.w	ip, #2
    ISP_SVC_StatEngine.downRequest |= type;
34006436:	bf1e      	ittt	ne
34006438:	f894 6159 	ldrbne.w	r6, [r4, #345]	@ 0x159
3400643c:	432e      	orrne	r6, r5
3400643e:	f884 6159 	strbne.w	r6, [r4, #345]	@ 0x159
  if (type == ISP_STAT_TYPE_ALL_TMP)
34006442:	2d04      	cmp	r5, #4
    ISP_SVC_StatEngine.requestAllCounter = ISP_SVC_Misc_GetMainFrameId(hIsp) + 3 * ISP_STAT_CFG_CYCLE_SIZE;
34006444:	bf04      	itt	eq
34006446:	301e      	addeq	r0, #30
34006448:	f8c4 015c 	streq.w	r0, [r4, #348]	@ 0x15c
  ISP_SVC_StatEngine.client[i].callback = callback;
3400644c:	2014      	movs	r0, #20
3400644e:	fb00 400e 	mla	r0, r0, lr, r4
  ISP_SVC_StatEngine.client[i].pAlgo = pAlgo;
34006452:	e9c0 193d 	strd	r1, r9, [r0, #244]	@ 0xf4
  ISP_SVC_StatEngine.client[i].pStats = pStats;
34006456:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
  ISP_SVC_StatEngine.client[i].location = location;
3400645a:	f880 c104 	strb.w	ip, [r0, #260]	@ 0x104
  ISP_SVC_StatEngine.client[i].type = type;
3400645e:	f880 5105 	strb.w	r5, [r0, #261]	@ 0x105
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;
34006462:	f8c0 7100 	str.w	r7, [r0, #256]	@ 0x100
  return ISP_OK;
34006466:	2000      	movs	r0, #0
34006468:	e7d7      	b.n	3400641a <ISP_SVC_Stats_GetNext+0x3a>
3400646a:	bf00      	nop
3400646c:	340a4234 	.word	0x340a4234

34006470 <CB_ISP_GetSensorGain>:
  * @param  Gain     Gain in mdB
  * @retval CMW status
  */
int CMW_CAMERA_GetGain(int32_t *Gain)
{
  *Gain = Camera_Ctx.Gain;
34006470:	4b02      	ldr	r3, [pc, #8]	@ (3400647c <CB_ISP_GetSensorGain+0xc>)
{
  if (CMW_CAMERA_GetGain(gain) != CMW_ERROR_NONE)
    return ISP_ERR_SENSORGAIN;

  return ISP_OK;
}
34006472:	2000      	movs	r0, #0
  *Gain = Camera_Ctx.Gain;
34006474:	6a1b      	ldr	r3, [r3, #32]
34006476:	600b      	str	r3, [r1, #0]
}
34006478:	4770      	bx	lr
3400647a:	bf00      	nop
3400647c:	340a47b4 	.word	0x340a47b4

34006480 <CB_ISP_GetSensorExposure>:
  *exposure = Camera_Ctx.Exposure;
34006480:	4b02      	ldr	r3, [pc, #8]	@ (3400648c <CB_ISP_GetSensorExposure+0xc>)
{
  if (CMW_CAMERA_GetExposure(exposure) != CMW_ERROR_NONE)
    return ISP_ERR_SENSOREXPOSURE;

  return ISP_OK;
}
34006482:	2000      	movs	r0, #0
  *exposure = Camera_Ctx.Exposure;
34006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006486:	600b      	str	r3, [r1, #0]
}
34006488:	4770      	bx	lr
3400648a:	bf00      	nop
3400648c:	340a47b4 	.word	0x340a47b4

34006490 <CB_ISP_GetSensorInfo>:

static ISP_StatusTypeDef CB_ISP_GetSensorInfo(uint32_t camera_instance, ISP_SensorInfoTypeDef *Info)
{
34006490:	b508      	push	{r3, lr}
  if(Camera_Drv.GetSensorInfo != NULL)
34006492:	4b05      	ldr	r3, [pc, #20]	@ (340064a8 <CB_ISP_GetSensorInfo+0x18>)
34006494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006496:	b113      	cbz	r3, 3400649e <CB_ISP_GetSensorInfo+0xe>
  {
    if (Camera_Drv.GetSensorInfo(&camera_bsp, Info) != CMW_ERROR_NONE)
34006498:	4804      	ldr	r0, [pc, #16]	@ (340064ac <CB_ISP_GetSensorInfo+0x1c>)
3400649a:	4798      	blx	r3
3400649c:	b908      	cbnz	r0, 340064a2 <CB_ISP_GetSensorInfo+0x12>
      return ISP_ERR_SENSOREXPOSURE;
  }
  return ISP_OK;
3400649e:	2000      	movs	r0, #0
}
340064a0:	bd08      	pop	{r3, pc}
      return ISP_ERR_SENSOREXPOSURE;
340064a2:	2083      	movs	r0, #131	@ 0x83
340064a4:	e7fc      	b.n	340064a0 <CB_ISP_GetSensorInfo+0x10>
340064a6:	bf00      	nop
340064a8:	340a4740 	.word	0x340a4740
340064ac:	340a45fc 	.word	0x340a45fc

340064b0 <CMW_CAMERA_EnablePin>:
  HAL_GPIO_WritePin(EN_CAM_PORT, EN_CAM_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
340064b0:	1e02      	subs	r2, r0, #0
340064b2:	bf18      	it	ne
340064b4:	2201      	movne	r2, #1
340064b6:	2104      	movs	r1, #4
340064b8:	4801      	ldr	r0, [pc, #4]	@ (340064c0 <CMW_CAMERA_EnablePin+0x10>)
340064ba:	f00c bb63 	b.w	34012b84 <HAL_GPIO_WritePin>
340064be:	bf00      	nop
340064c0:	56020c00 	.word	0x56020c00

340064c4 <CMW_CAMERA_ShutdownPin>:
  HAL_GPIO_WritePin(NRST_CAM_PORT, NRST_CAM_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
340064c4:	1e02      	subs	r2, r0, #0
340064c6:	bf18      	it	ne
340064c8:	2201      	movne	r2, #1
340064ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
340064ce:	4801      	ldr	r0, [pc, #4]	@ (340064d4 <CMW_CAMERA_ShutdownPin+0x10>)
340064d0:	f00c bb58 	b.w	34012b84 <HAL_GPIO_WritePin>
340064d4:	56020800 	.word	0x56020800

340064d8 <CMW_CAMERA_Probe_Sensor.constprop.0>:

#if defined(USE_VD55G1_SENSOR)
static int32_t CMW_CAMERA_VD55G1_Init( CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
340064d8:	2100      	movs	r1, #0
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName)
340064da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
340064de:	4c6a      	ldr	r4, [pc, #424]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName)
340064e0:	b099      	sub	sp, #100	@ 0x64
340064e2:	4605      	mov	r5, r0
  memset(&camera_bsp, 0, sizeof(camera_bsp));
340064e4:	f44f 72a2 	mov.w	r2, #324	@ 0x144
340064e8:	4620      	mov	r0, r4
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
340064ea:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
340064ee:	e9cd 1105 	strd	r1, r1, [sp, #20]
340064f2:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
340064f6:	f018 fac3 	bl	3401ea80 <memset>
  camera_bsp.vd55g1_bsp.Address     = CAMERA_VD55G1_ADDRESS;
340064fa:	2320      	movs	r3, #32
340064fc:	8023      	strh	r3, [r4, #0]
  camera_bsp.vd55g1_bsp.ClockInHz   = CAMERA_VD55G1_FREQ_IN_HZ;
340064fe:	4b63      	ldr	r3, [pc, #396]	@ (3400668c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b4>)
  camera_bsp.vd55g1_bsp.Init        = CMW_I2C_INIT;
34006500:	f8df b1b8 	ldr.w	fp, [pc, #440]	@ 340066bc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e4>
  camera_bsp.vd55g1_bsp.DeInit      = CMW_I2C_DEINIT;
34006504:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 340066c0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e8>
  camera_bsp.vd55g1_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006508:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 340066c4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1ec>
  camera_bsp.vd55g1_bsp.ReadReg     = CMW_I2C_READREG16;
3400650c:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 340066c8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f0>
  camera_bsp.vd55g1_bsp.Delay       = HAL_Delay;
34006510:	4f5f      	ldr	r7, [pc, #380]	@ (34006690 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
  camera_bsp.vd55g1_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006512:	4e60      	ldr	r6, [pc, #384]	@ (34006694 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1bc>)
  camera_bsp.vd55g1_bsp.ClockInHz   = CAMERA_VD55G1_FREQ_IN_HZ;
34006514:	6063      	str	r3, [r4, #4]
  camera_bsp.vd55g1_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006516:	4b60      	ldr	r3, [pc, #384]	@ (34006698 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c0>)

  ret = CMW_VD55G1_Probe(&camera_bsp.vd55g1_bsp, &Camera_Drv);
34006518:	4620      	mov	r0, r4
3400651a:	4960      	ldr	r1, [pc, #384]	@ (3400669c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
  camera_bsp.vd55g1_bsp.Init        = CMW_I2C_INIT;
3400651c:	f8c4 b074 	str.w	fp, [r4, #116]	@ 0x74
  camera_bsp.vd55g1_bsp.DeInit      = CMW_I2C_DEINIT;
34006520:	f8c4 a078 	str.w	sl, [r4, #120]	@ 0x78
  camera_bsp.vd55g1_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006524:	f8c4 807c 	str.w	r8, [r4, #124]	@ 0x7c
  camera_bsp.vd55g1_bsp.ReadReg     = CMW_I2C_READREG16;
34006528:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
  camera_bsp.vd55g1_bsp.Delay       = HAL_Delay;
3400652c:	f8c4 7088 	str.w	r7, [r4, #136]	@ 0x88
  camera_bsp.vd55g1_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006530:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  camera_bsp.vd55g1_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006534:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  ret = CMW_VD55G1_Probe(&camera_bsp.vd55g1_bsp, &Camera_Drv);
34006538:	f000 ff30 	bl	3400739c <CMW_VD55G1_Probe>
  if (ret != CMW_ERROR_NONE)
3400653c:	2800      	cmp	r0, #0
3400653e:	d135      	bne.n	340065ac <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006540:	682b      	ldr	r3, [r5, #0]
34006542:	4a56      	ldr	r2, [pc, #344]	@ (3400669c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
34006544:	b10b      	cbz	r3, 3400654a <CMW_CAMERA_Probe_Sensor.constprop.0+0x72>
34006546:	686b      	ldr	r3, [r5, #4]
34006548:	b943      	cbnz	r3, 3400655c <CMW_CAMERA_Probe_Sensor.constprop.0+0x84>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
3400654a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
3400654c:	484e      	ldr	r0, [pc, #312]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
3400654e:	a909      	add	r1, sp, #36	@ 0x24
34006550:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006552:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    initSensors_params->height = sensor_info.height;
34006554:	4a51      	ldr	r2, [pc, #324]	@ (3400669c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
    initSensors_params->width = sensor_info.width;
34006556:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006558:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
3400655a:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
3400655c:	4629      	mov	r1, r5
3400655e:	6813      	ldr	r3, [r2, #0]
34006560:	4849      	ldr	r0, [pc, #292]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
34006562:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006564:	bb10      	cbnz	r0, 340065ac <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_ONE_DATA_LANE;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006566:	f44f 7080 	mov.w	r0, #256	@ 0x100
3400656a:	2301      	movs	r3, #1
3400656c:	e9cd 0303 	strd	r0, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006570:	231c      	movs	r3, #28
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006572:	a903      	add	r1, sp, #12
34006574:	484a      	ldr	r0, [pc, #296]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006576:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006578:	f009 fb14 	bl	3400fba4 <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
3400657c:	4601      	mov	r1, r0
3400657e:	b9a8      	cbnz	r0, 340065ac <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP8);
34006580:	2202      	movs	r2, #2
34006582:	4847      	ldr	r0, [pc, #284]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006584:	f009 fc7e 	bl	3400fe84 <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006588:	4601      	mov	r1, r0
3400658a:	b978      	cbnz	r0, 340065ac <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW8;
3400658c:	232a      	movs	r3, #42	@ 0x2a
  csi_pipe_conf.DataTypeIDB = 0;
3400658e:	e9cd 3007 	strd	r3, r0, [sp, #28]
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006592:	9006      	str	r0, [sp, #24]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006594:	4842      	ldr	r0, [pc, #264]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006596:	aa06      	add	r2, sp, #24
34006598:	9101      	str	r1, [sp, #4]
3400659a:	f009 fbbf 	bl	3400fd1c <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
3400659e:	b928      	cbnz	r0, 340065ac <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
340065a0:	9901      	ldr	r1, [sp, #4]
340065a2:	3101      	adds	r1, #1
340065a4:	2903      	cmp	r1, #3
340065a6:	d1f5      	bne.n	34006594 <CMW_CAMERA_Probe_Sensor.constprop.0+0xbc>
    return ret;
340065a8:	2002      	movs	r0, #2
340065aa:	e067      	b.n	3400667c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1a4>

#if defined(USE_VD66GY_SENSOR)
static int32_t CMW_CAMERA_VD66GY_Init( CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
340065ac:	2100      	movs	r1, #0
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
340065ae:	f44f 72a2 	mov.w	r2, #324	@ 0x144
340065b2:	4835      	ldr	r0, [pc, #212]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
340065b4:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
340065b8:	e9cd 1105 	strd	r1, r1, [sp, #20]
340065bc:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
340065c0:	f018 fa5e 	bl	3401ea80 <memset>
  camera_bsp.vd66gy_bsp.Address     = CAMERA_VD66GY_ADDRESS;
340065c4:	2320      	movs	r3, #32
340065c6:	8023      	strh	r3, [r4, #0]
  camera_bsp.vd66gy_bsp.ClockInHz   = CAMERA_VD66GY_FREQ_IN_HZ;
340065c8:	4b30      	ldr	r3, [pc, #192]	@ (3400668c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b4>)
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;

  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
340065ca:	4934      	ldr	r1, [pc, #208]	@ (3400669c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
  camera_bsp.vd66gy_bsp.ClockInHz   = CAMERA_VD66GY_FREQ_IN_HZ;
340065cc:	6063      	str	r3, [r4, #4]
  camera_bsp.vd66gy_bsp.EnablePin   = CMW_CAMERA_EnablePin;
340065ce:	4b32      	ldr	r3, [pc, #200]	@ (34006698 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c0>)
  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
340065d0:	482d      	ldr	r0, [pc, #180]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
  camera_bsp.vd66gy_bsp.EnablePin   = CMW_CAMERA_EnablePin;
340065d2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
  camera_bsp.vd66gy_bsp.hdcmipp     = &hcamera_dcmipp;
340065d6:	4b32      	ldr	r3, [pc, #200]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  camera_bsp.vd66gy_bsp.DeInit      = CMW_I2C_DEINIT;
340065d8:	e9c4 ba49 	strd	fp, sl, [r4, #292]	@ 0x124
  camera_bsp.vd66gy_bsp.hdcmipp     = &hcamera_dcmipp;
340065dc:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
340065e0:	4b30      	ldr	r3, [pc, #192]	@ (340066a4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1cc>)
  camera_bsp.vd66gy_bsp.WriteReg    = CMW_I2C_WRITEREG16;
340065e2:	e9c4 894b 	strd	r8, r9, [r4, #300]	@ 0x12c
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
340065e6:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
340065ea:	4b2f      	ldr	r3, [pc, #188]	@ (340066a8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
  camera_bsp.vd66gy_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
340065ec:	e9c4 764e 	strd	r7, r6, [r4, #312]	@ 0x138
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
340065f0:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
340065f4:	4b2d      	ldr	r3, [pc, #180]	@ (340066ac <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d4>)
340065f6:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
340065fa:	4b2d      	ldr	r3, [pc, #180]	@ (340066b0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d8>)
340065fc:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;
34006600:	4b2c      	ldr	r3, [pc, #176]	@ (340066b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1dc>)
34006602:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006606:	f001 fa61 	bl	34007acc <CMW_VD66GY_Probe>
  if (ret != CMW_ERROR_NONE)
3400660a:	2800      	cmp	r0, #0
3400660c:	d15e      	bne.n	340066cc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
3400660e:	682b      	ldr	r3, [r5, #0]
34006610:	b10b      	cbz	r3, 34006616 <CMW_CAMERA_Probe_Sensor.constprop.0+0x13e>
34006612:	686b      	ldr	r3, [r5, #4]
34006614:	b943      	cbnz	r3, 34006628 <CMW_CAMERA_Probe_Sensor.constprop.0+0x150>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006616:	4b21      	ldr	r3, [pc, #132]	@ (3400669c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
34006618:	481b      	ldr	r0, [pc, #108]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
3400661a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3400661c:	a909      	add	r1, sp, #36	@ 0x24
3400661e:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006620:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34006622:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006626:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006628:	4b1c      	ldr	r3, [pc, #112]	@ (3400669c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
3400662a:	4629      	mov	r1, r5
3400662c:	681b      	ldr	r3, [r3, #0]
3400662e:	4816      	ldr	r0, [pc, #88]	@ (34006688 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
34006630:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006632:	2800      	cmp	r0, #0
34006634:	d14a      	bne.n	340066cc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006636:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400663a:	2301      	movs	r3, #1
3400663c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006640:	231c      	movs	r3, #28
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006642:	a903      	add	r1, sp, #12
34006644:	4816      	ldr	r0, [pc, #88]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006646:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006648:	f009 faac 	bl	3400fba4 <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
3400664c:	4601      	mov	r1, r0
3400664e:	2800      	cmp	r0, #0
34006650:	d13c      	bne.n	340066cc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP8);
34006652:	2202      	movs	r2, #2
34006654:	4812      	ldr	r0, [pc, #72]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006656:	f009 fc15 	bl	3400fe84 <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
3400665a:	4601      	mov	r1, r0
3400665c:	2800      	cmp	r0, #0
3400665e:	d135      	bne.n	340066cc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW8;
34006660:	232a      	movs	r3, #42	@ 0x2a
  csi_pipe_conf.DataTypeIDB = 0;
34006662:	e9cd 3007 	strd	r3, r0, [sp, #28]
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006666:	9006      	str	r0, [sp, #24]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006668:	480d      	ldr	r0, [pc, #52]	@ (340066a0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
3400666a:	aa06      	add	r2, sp, #24
3400666c:	9101      	str	r1, [sp, #4]
3400666e:	f009 fb55 	bl	3400fd1c <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006672:	bb58      	cbnz	r0, 340066cc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006674:	9901      	ldr	r1, [sp, #4]
34006676:	3101      	adds	r1, #1
34006678:	2903      	cmp	r1, #3
3400667a:	d1f5      	bne.n	34006668 <CMW_CAMERA_Probe_Sensor.constprop.0+0x190>
    *sensorName = CMW_VD66GY_Sensor;
3400667c:	4b0e      	ldr	r3, [pc, #56]	@ (340066b8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e0>)
3400667e:	7018      	strb	r0, [r3, #0]
    return ret;
34006680:	2000      	movs	r0, #0
}
34006682:	b019      	add	sp, #100	@ 0x64
34006684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34006688:	340a45fc 	.word	0x340a45fc
3400668c:	00b71b00 	.word	0x00b71b00
34006690:	3401d32d 	.word	0x3401d32d
34006694:	340064c5 	.word	0x340064c5
34006698:	340064b1 	.word	0x340064b1
3400669c:	340a4740 	.word	0x340a4740
340066a0:	340a47a8 	.word	0x340a47a8
340066a4:	34006a5d 	.word	0x34006a5d
340066a8:	34006471 	.word	0x34006471
340066ac:	34006aa1 	.word	0x34006aa1
340066b0:	34006481 	.word	0x34006481
340066b4:	34006491 	.word	0x34006491
340066b8:	340a47f4 	.word	0x340a47f4
340066bc:	3400e089 	.word	0x3400e089
340066c0:	3400dff9 	.word	0x3400dff9
340066c4:	3400e149 	.word	0x3400e149
340066c8:	3400e181 	.word	0x3400e181

#if defined(USE_IMX335_SENSOR)
static int32_t CMW_CAMERA_IMX335_Init(CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
340066cc:	2100      	movs	r1, #0
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
340066ce:	f44f 72a2 	mov.w	r2, #324	@ 0x144
340066d2:	4838      	ldr	r0, [pc, #224]	@ (340067b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
340066d4:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
340066d8:	e9cd 1105 	strd	r1, r1, [sp, #20]
340066dc:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
340066e0:	f018 f9ce 	bl	3401ea80 <memset>
  camera_bsp.imx335_bsp.Address     = CAMERA_IMX335_ADDRESS;
340066e4:	2334      	movs	r3, #52	@ 0x34
340066e6:	8023      	strh	r3, [r4, #0]
  camera_bsp.imx335_bsp.Init        = CMW_I2C_INIT;
  camera_bsp.imx335_bsp.DeInit      = CMW_I2C_DEINIT;
  camera_bsp.imx335_bsp.ReadReg     = CMW_I2C_READREG16;
  camera_bsp.imx335_bsp.WriteReg    = CMW_I2C_WRITEREG16;
  camera_bsp.imx335_bsp.GetTick     = BSP_GetTick;
340066e8:	4b33      	ldr	r3, [pc, #204]	@ (340067b8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e0>)
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
  camera_bsp.imx335_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
  camera_bsp.imx335_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
  camera_bsp.imx335_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;

  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
340066ea:	4934      	ldr	r1, [pc, #208]	@ (340067bc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>)
  camera_bsp.imx335_bsp.Delay       = HAL_Delay;
340066ec:	e9c4 373d 	strd	r3, r7, [r4, #244]	@ 0xf4
  camera_bsp.imx335_bsp.EnablePin   = CMW_CAMERA_EnablePin;
340066f0:	4b33      	ldr	r3, [pc, #204]	@ (340067c0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e8>)
  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
340066f2:	4830      	ldr	r0, [pc, #192]	@ (340067b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
  camera_bsp.imx335_bsp.EnablePin   = CMW_CAMERA_EnablePin;
340066f4:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  camera_bsp.imx335_bsp.hdcmipp     = &hcamera_dcmipp;
340066f8:	4b32      	ldr	r3, [pc, #200]	@ (340067c4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  camera_bsp.imx335_bsp.DeInit      = CMW_I2C_DEINIT;
340066fa:	e9c4 ba39 	strd	fp, sl, [r4, #228]	@ 0xe4
  camera_bsp.imx335_bsp.hdcmipp     = &hcamera_dcmipp;
340066fe:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
  camera_bsp.imx335_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006702:	4b31      	ldr	r3, [pc, #196]	@ (340067c8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f0>)
  camera_bsp.imx335_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006704:	e9c4 893b 	strd	r8, r9, [r4, #236]	@ 0xec
  camera_bsp.imx335_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006708:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
3400670c:	4b2f      	ldr	r3, [pc, #188]	@ (340067cc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f4>)
  camera_bsp.imx335_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
3400670e:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006712:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
  camera_bsp.imx335_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
34006716:	4b2e      	ldr	r3, [pc, #184]	@ (340067d0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f8>)
34006718:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  camera_bsp.imx335_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
3400671c:	4b2d      	ldr	r3, [pc, #180]	@ (340067d4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2fc>)
3400671e:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
  camera_bsp.imx335_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;
34006722:	4b2d      	ldr	r3, [pc, #180]	@ (340067d8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x300>)
34006724:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006728:	f000 fc90 	bl	3400704c <CMW_IMX335_Probe>
  if (ret != CMW_ERROR_NONE)
3400672c:	2800      	cmp	r0, #0
3400672e:	d13e      	bne.n	340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006730:	682b      	ldr	r3, [r5, #0]
34006732:	4c22      	ldr	r4, [pc, #136]	@ (340067bc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>)
34006734:	b10b      	cbz	r3, 3400673a <CMW_CAMERA_Probe_Sensor.constprop.0+0x262>
34006736:	686b      	ldr	r3, [r5, #4]
34006738:	b93b      	cbnz	r3, 3400674a <CMW_CAMERA_Probe_Sensor.constprop.0+0x272>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
3400673a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3400673c:	481d      	ldr	r0, [pc, #116]	@ (340067b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
3400673e:	a909      	add	r1, sp, #36	@ 0x24
34006740:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34006744:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006746:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006748:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
3400674a:	4629      	mov	r1, r5
3400674c:	6823      	ldr	r3, [r4, #0]
3400674e:	4819      	ldr	r0, [pc, #100]	@ (340067b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
34006750:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006752:	bb60      	cbnz	r0, 340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = Camera_Drv.SetFrequency(&camera_bsp, IMX335_INCK_24MHZ);
34006754:	2102      	movs	r1, #2
34006756:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006758:	4816      	ldr	r0, [pc, #88]	@ (340067b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
3400675a:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
3400675c:	bb38      	cbnz	r0, 340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = Camera_Drv.SetFramerate(&camera_bsp, initSensors_params->fps);
3400675e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006760:	68a9      	ldr	r1, [r5, #8]
34006762:	4814      	ldr	r0, [pc, #80]	@ (340067b4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
34006764:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006766:	bb10      	cbnz	r0, 340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006768:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400676c:	2301      	movs	r3, #1
3400676e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34006772:	232c      	movs	r3, #44	@ 0x2c
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006774:	a903      	add	r1, sp, #12
34006776:	4813      	ldr	r0, [pc, #76]	@ (340067c4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34006778:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
3400677a:	f009 fa13 	bl	3400fba4 <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
3400677e:	4601      	mov	r1, r0
34006780:	b9a8      	cbnz	r0, 340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP10);
34006782:	2203      	movs	r2, #3
34006784:	480f      	ldr	r0, [pc, #60]	@ (340067c4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
34006786:	f009 fb7d 	bl	3400fe84 <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
3400678a:	4604      	mov	r4, r0
3400678c:	b978      	cbnz	r0, 340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW10;
3400678e:	232b      	movs	r3, #43	@ 0x2b
  csi_pipe_conf.DataTypeIDB = 0;
34006790:	e9cd 3007 	strd	r3, r0, [sp, #28]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006794:	4d0b      	ldr	r5, [pc, #44]	@ (340067c4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006796:	9006      	str	r0, [sp, #24]
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006798:	4621      	mov	r1, r4
3400679a:	4628      	mov	r0, r5
3400679c:	aa06      	add	r2, sp, #24
3400679e:	f009 fabd 	bl	3400fd1c <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
340067a2:	b920      	cbnz	r0, 340067ae <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
340067a4:	3401      	adds	r4, #1
340067a6:	2c03      	cmp	r4, #3
340067a8:	d1f6      	bne.n	34006798 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2c0>
    return ret;
340067aa:	2001      	movs	r0, #1
340067ac:	e766      	b.n	3400667c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1a4>
    return CMW_ERROR_UNKNOWN_COMPONENT;
340067ae:	f06f 0006 	mvn.w	r0, #6
340067b2:	e766      	b.n	34006682 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1aa>
340067b4:	340a45fc 	.word	0x340a45fc
340067b8:	3400e1b9 	.word	0x3400e1b9
340067bc:	340a4740 	.word	0x340a4740
340067c0:	340064b1 	.word	0x340064b1
340067c4:	340a47a8 	.word	0x340a47a8
340067c8:	34006a5d 	.word	0x34006a5d
340067cc:	34006471 	.word	0x34006471
340067d0:	34006aa1 	.word	0x34006aa1
340067d4:	34006481 	.word	0x34006481
340067d8:	34006491 	.word	0x34006491

340067dc <CMW_CAMERA_EnableGPIOs>:
{
340067dc:	b570      	push	{r4, r5, r6, lr}
340067de:	b088      	sub	sp, #32
  GPIO_InitTypeDef gpio_init_structure = {0};
340067e0:	2214      	movs	r2, #20
340067e2:	2100      	movs	r1, #0
340067e4:	a803      	add	r0, sp, #12
340067e6:	f018 f94b 	bl	3401ea80 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
340067ea:	2308      	movs	r3, #8
340067ec:	4c13      	ldr	r4, [pc, #76]	@ (3400683c <CMW_CAMERA_EnableGPIOs+0x60>)
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
340067ee:	2501      	movs	r5, #1
340067f0:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
340067f4:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
340067f8:	2600      	movs	r6, #0
340067fa:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
340067fc:	9b02      	ldr	r3, [sp, #8]
  NRST_CAM_GPIO_ENABLE_VDDIO();
340067fe:	f00d fc2f 	bl	34014060 <HAL_PWREx_EnableVddIO4>
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34006802:	2304      	movs	r3, #4
34006804:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34006808:	f8d4 225c 	ldr.w	r2, [r4, #604]	@ 0x25c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400680c:	2403      	movs	r4, #3
3400680e:	9201      	str	r2, [sp, #4]
  HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
34006810:	a903      	add	r1, sp, #12
34006812:	480b      	ldr	r0, [pc, #44]	@ (34006840 <CMW_CAMERA_EnableGPIOs+0x64>)
  (void)tmpreg;
34006814:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pin       = EN_CAM_PIN;
34006816:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34006818:	e9cd 5604 	strd	r5, r6, [sp, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400681c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
3400681e:	f00b fe59 	bl	340124d4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = NRST_CAM_PIN;
34006822:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
34006826:	4807      	ldr	r0, [pc, #28]	@ (34006844 <CMW_CAMERA_EnableGPIOs+0x68>)
34006828:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400682a:	e9cd 5604 	strd	r5, r6, [sp, #16]
  gpio_init_structure.Pin       = NRST_CAM_PIN;
3400682e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34006830:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
34006832:	f00b fe4f 	bl	340124d4 <HAL_GPIO_Init>
}
34006836:	b008      	add	sp, #32
34006838:	bd70      	pop	{r4, r5, r6, pc}
3400683a:	bf00      	nop
3400683c:	56028000 	.word	0x56028000
34006840:	56020c00 	.word	0x56020c00
34006844:	56020800 	.word	0x56020800

34006848 <CMW_CAMERA_GetDCMIPPHandle>:
}
34006848:	4800      	ldr	r0, [pc, #0]	@ (3400684c <CMW_CAMERA_GetDCMIPPHandle+0x4>)
3400684a:	4770      	bx	lr
3400684c:	340a47a8 	.word	0x340a47a8

34006850 <CMW_CAMERA_SetPipeConfig>:
{
34006850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}
#endif

static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch)
{
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34006854:	2600      	movs	r6, #0
{
34006856:	4604      	mov	r4, r0
34006858:	b093      	sub	sp, #76	@ 0x4c
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
3400685a:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
{
3400685e:	460d      	mov	r5, r1
34006860:	4617      	mov	r7, r2
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
34006862:	4631      	mov	r1, r6
34006864:	2218      	movs	r2, #24
34006866:	4640      	mov	r0, r8
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
34006868:	e9cd 6604 	strd	r6, r6, [sp, #16]
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
3400686c:	9602      	str	r6, [sp, #8]
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
3400686e:	9606      	str	r6, [sp, #24]
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34006870:	9603      	str	r6, [sp, #12]
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
34006872:	f018 f905 	bl	3401ea80 <memset>
  DCMIPP_CropConfTypeDef crop_conf = { 0 };
34006876:	2214      	movs	r2, #20
34006878:	4631      	mov	r1, r6
3400687a:	a807      	add	r0, sp, #28
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
3400687c:	f10d 0908 	add.w	r9, sp, #8
  DCMIPP_CropConfTypeDef crop_conf = { 0 };
34006880:	f018 f8fe 	bl	3401ea80 <memset>
  int ret;

  /* specific case for pipe0 which is only a dump pipe */
  if (pipe == DCMIPP_PIPE0)
34006884:	b95c      	cbnz	r4, 3400689e <CMW_CAMERA_SetPipeConfig+0x4e>
  {
    /*  TODO: properly configure the dump pipe with decimation and crop */
    pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
    ret = HAL_DCMIPP_PIPE_SetConfig(hdcmipp, pipe, &pipe_conf);
34006886:	4621      	mov	r1, r4
34006888:	484f      	ldr	r0, [pc, #316]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
3400688a:	aa04      	add	r2, sp, #16
3400688c:	f009 fb32 	bl	3400fef4 <HAL_DCMIPP_PIPE_SetConfig>
    if (ret != HAL_OK)
34006890:	2800      	cmp	r0, #0
34006892:	d07c      	beq.n	3400698e <CMW_CAMERA_SetPipeConfig+0x13e>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
34006894:	f06f 0004 	mvn.w	r0, #4
}
34006898:	b013      	add	sp, #76	@ 0x4c
3400689a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    return HAL_OK;
  }

  CMW_UTILS_GetPipeConfig(camera_conf.width, camera_conf.height, p_conf, &crop_conf, &dec_conf, &down_conf);
3400689e:	e9cd 9800 	strd	r9, r8, [sp]
340068a2:	484a      	ldr	r0, [pc, #296]	@ (340069cc <CMW_CAMERA_SetPipeConfig+0x17c>)
340068a4:	462a      	mov	r2, r5
340068a6:	e9d0 0100 	ldrd	r0, r1, [r0]
340068aa:	ab07      	add	r3, sp, #28
340068ac:	f000 fa0e 	bl	34006ccc <CMW_UTILS_GetPipeConfig>

  if (crop_conf.VSize != 0 || crop_conf.HSize != 0)
340068b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
340068b4:	4313      	orrs	r3, r2
340068b6:	d015      	beq.n	340068e4 <CMW_CAMERA_SetPipeConfig+0x94>
  {
    ret = HAL_DCMIPP_PIPE_SetCropConfig(hdcmipp, pipe, &crop_conf);
340068b8:	4621      	mov	r1, r4
340068ba:	4843      	ldr	r0, [pc, #268]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340068bc:	aa07      	add	r2, sp, #28
340068be:	f00a f883 	bl	340109c8 <HAL_DCMIPP_PIPE_SetCropConfig>
    if (ret != HAL_OK)
340068c2:	2800      	cmp	r0, #0
340068c4:	d1e6      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }

    ret = HAL_DCMIPP_PIPE_EnableCrop(hdcmipp, pipe);
340068c6:	4621      	mov	r1, r4
340068c8:	483f      	ldr	r0, [pc, #252]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340068ca:	f00a f923 	bl	34010b14 <HAL_DCMIPP_PIPE_EnableCrop>
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableCrop(hdcmipp, pipe);
    if (ret != HAL_OK)
340068ce:	2800      	cmp	r0, #0
340068d0:	d1e0      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }

  if (dec_conf.VRatio != 0 || dec_conf.HRatio != 0)
340068d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
340068d6:	4313      	orrs	r3, r2
340068d8:	d109      	bne.n	340068ee <CMW_CAMERA_SetPipeConfig+0x9e>
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableDecimation(hdcmipp, pipe);
340068da:	4621      	mov	r1, r4
340068dc:	483a      	ldr	r0, [pc, #232]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340068de:	f00a fa47 	bl	34010d70 <HAL_DCMIPP_PIPE_DisableDecimation>
340068e2:	e00f      	b.n	34006904 <CMW_CAMERA_SetPipeConfig+0xb4>
    ret = HAL_DCMIPP_PIPE_DisableCrop(hdcmipp, pipe);
340068e4:	4621      	mov	r1, r4
340068e6:	4838      	ldr	r0, [pc, #224]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340068e8:	f00a f954 	bl	34010b94 <HAL_DCMIPP_PIPE_DisableCrop>
340068ec:	e7ef      	b.n	340068ce <CMW_CAMERA_SetPipeConfig+0x7e>
    ret = HAL_DCMIPP_PIPE_SetDecimationConfig(hdcmipp, pipe, &dec_conf);
340068ee:	464a      	mov	r2, r9
340068f0:	4621      	mov	r1, r4
340068f2:	4835      	ldr	r0, [pc, #212]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340068f4:	f00a f9ce 	bl	34010c94 <HAL_DCMIPP_PIPE_SetDecimationConfig>
    if (ret != HAL_OK)
340068f8:	2800      	cmp	r0, #0
340068fa:	d1cb      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
    ret = HAL_DCMIPP_PIPE_EnableDecimation(hdcmipp, pipe);
340068fc:	4621      	mov	r1, r4
340068fe:	4832      	ldr	r0, [pc, #200]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
34006900:	f00a fa14 	bl	34010d2c <HAL_DCMIPP_PIPE_EnableDecimation>
    if (ret != HAL_OK)
34006904:	2800      	cmp	r0, #0
34006906:	d1c5      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }

  ret = HAL_DCMIPP_PIPE_SetDownsizeConfig(hdcmipp, pipe, &down_conf);
34006908:	4642      	mov	r2, r8
3400690a:	4621      	mov	r1, r4
3400690c:	482e      	ldr	r0, [pc, #184]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
3400690e:	f00a fa51 	bl	34010db4 <HAL_DCMIPP_PIPE_SetDownsizeConfig>
  if (ret != HAL_OK)
34006912:	4e2d      	ldr	r6, [pc, #180]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
34006914:	2800      	cmp	r0, #0
34006916:	d1bd      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = HAL_DCMIPP_PIPE_EnableDownsize(hdcmipp, pipe);
34006918:	4621      	mov	r1, r4
3400691a:	4630      	mov	r0, r6
3400691c:	f00a fad8 	bl	34010ed0 <HAL_DCMIPP_PIPE_EnableDownsize>
  if (ret != HAL_OK)
34006920:	2800      	cmp	r0, #0
34006922:	d1b7      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  if (p_conf->enable_swap)
34006924:	692b      	ldr	r3, [r5, #16]
  {
    /* Config pipe */
    ret = HAL_DCMIPP_PIPE_EnableRedBlueSwap(hdcmipp, pipe);
34006926:	4621      	mov	r1, r4
34006928:	4630      	mov	r0, r6
  if (p_conf->enable_swap)
3400692a:	2b00      	cmp	r3, #0
3400692c:	d031      	beq.n	34006992 <CMW_CAMERA_SetPipeConfig+0x142>
    ret = HAL_DCMIPP_PIPE_EnableRedBlueSwap(hdcmipp, pipe);
3400692e:	f00b f9bb 	bl	34011ca8 <HAL_DCMIPP_PIPE_EnableRedBlueSwap>
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableRedBlueSwap(hdcmipp, pipe);
    if (ret != HAL_OK)
34006932:	2800      	cmp	r0, #0
34006934:	d1ae      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
  }

  /* Ignore the configuration of gamma if -1
   * Activation is then done by the ISP Library
   */
  if (p_conf->enable_gamma_conversion > -1)
34006936:	696b      	ldr	r3, [r5, #20]
34006938:	2b00      	cmp	r3, #0
3400693a:	da2d      	bge.n	34006998 <CMW_CAMERA_SetPipeConfig+0x148>
        return CMW_ERROR_COMPONENT_FAILURE;
      }
    }
  }

  if (pipe == DCMIPP_PIPE2)
3400693c:	2c02      	cmp	r4, #2
3400693e:	d10f      	bne.n	34006960 <CMW_CAMERA_SetPipeConfig+0x110>
  {
    if (!is_pipe1_2_shared)
34006940:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 340069d0 <CMW_CAMERA_SetPipeConfig+0x180>
34006944:	f8d8 3000 	ldr.w	r3, [r8]
34006948:	b953      	cbnz	r3, 34006960 <CMW_CAMERA_SetPipeConfig+0x110>
    {
      ret = HAL_DCMIPP_PIPE_CSI_EnableShare(hdcmipp, pipe);
3400694a:	4621      	mov	r1, r4
3400694c:	481e      	ldr	r0, [pc, #120]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
3400694e:	f00b f9fb 	bl	34011d48 <HAL_DCMIPP_PIPE_CSI_EnableShare>
      if (ret != HAL_OK)
34006952:	2800      	cmp	r0, #0
34006954:	d19e      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
      {
        return CMW_ERROR_COMPONENT_FAILURE;
      }
      is_pipe1_2_shared++;
34006956:	f8d8 3000 	ldr.w	r3, [r8]
3400695a:	3301      	adds	r3, #1
3400695c:	f8c8 3000 	str.w	r3, [r8]
    }
  }

  pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
34006960:	2300      	movs	r3, #0
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
34006962:	68ea      	ldr	r2, [r5, #12]
  pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
34006964:	9304      	str	r3, [sp, #16]
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
34006966:	682b      	ldr	r3, [r5, #0]
  /* Hardware constraint, pitch must be multiple of 16 */
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
  pipe_conf.PixelPackerFormat = p_conf->output_format;
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34006968:	4426      	add	r6, r4
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
3400696a:	4353      	muls	r3, r2
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
3400696c:	330f      	adds	r3, #15
3400696e:	f023 030f 	bic.w	r3, r3, #15
  pipe_conf.PixelPackerFormat = p_conf->output_format;
34006972:	68aa      	ldr	r2, [r5, #8]
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
34006974:	9305      	str	r3, [sp, #20]
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34006976:	7973      	ldrb	r3, [r6, #5]
  pipe_conf.PixelPackerFormat = p_conf->output_format;
34006978:	9206      	str	r2, [sp, #24]
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
3400697a:	b9c3      	cbnz	r3, 340069ae <CMW_CAMERA_SetPipeConfig+0x15e>
  {
    ret = HAL_DCMIPP_PIPE_SetConfig(hdcmipp, pipe, &pipe_conf);
3400697c:	4621      	mov	r1, r4
3400697e:	4812      	ldr	r0, [pc, #72]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
34006980:	aa04      	add	r2, sp, #16
34006982:	f009 fab7 	bl	3400fef4 <HAL_DCMIPP_PIPE_SetConfig>
    if (HAL_DCMIPP_PIPE_SetPixelPackerFormat(hdcmipp, pipe, pipe_conf.PixelPackerFormat) != HAL_OK)
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }

    if (HAL_DCMIPP_PIPE_SetPitch(hdcmipp, pipe, pipe_conf.PixelPipePitch) != HAL_OK)
34006986:	2800      	cmp	r0, #0
34006988:	d184      	bne.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
    }
  }

  /* Update the pitch field so that application can use this information for
   * buffer alignement */
  *pitch = pipe_conf.PixelPipePitch;
3400698a:	9b05      	ldr	r3, [sp, #20]
3400698c:	603b      	str	r3, [r7, #0]
    return HAL_OK;
3400698e:	2000      	movs	r0, #0
  return CMW_CAMERA_SetPipe(&hcamera_dcmipp, pipe, p_conf, pitch);
34006990:	e782      	b.n	34006898 <CMW_CAMERA_SetPipeConfig+0x48>
    ret = HAL_DCMIPP_PIPE_DisableRedBlueSwap(hdcmipp, pipe);
34006992:	f00b f9b1 	bl	34011cf8 <HAL_DCMIPP_PIPE_DisableRedBlueSwap>
34006996:	e7cc      	b.n	34006932 <CMW_CAMERA_SetPipeConfig+0xe2>
      ret = HAL_DCMIPP_PIPE_EnableGammaConversion(hdcmipp, pipe);
34006998:	4621      	mov	r1, r4
3400699a:	480b      	ldr	r0, [pc, #44]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
    if (p_conf->enable_gamma_conversion)
3400699c:	d004      	beq.n	340069a8 <CMW_CAMERA_SetPipeConfig+0x158>
      ret = HAL_DCMIPP_PIPE_EnableGammaConversion(hdcmipp, pipe);
3400699e:	f00a fab9 	bl	34010f14 <HAL_DCMIPP_PIPE_EnableGammaConversion>
      if (ret != HAL_OK)
340069a2:	2800      	cmp	r0, #0
340069a4:	d0ca      	beq.n	3400693c <CMW_CAMERA_SetPipeConfig+0xec>
340069a6:	e775      	b.n	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
      ret = HAL_DCMIPP_PIPE_DisableGammaConversion(hdcmipp, pipe);
340069a8:	f00a fad6 	bl	34010f58 <HAL_DCMIPP_PIPE_DisableGammaConversion>
340069ac:	e7f9      	b.n	340069a2 <CMW_CAMERA_SetPipeConfig+0x152>
    if (HAL_DCMIPP_PIPE_SetPixelPackerFormat(hdcmipp, pipe, pipe_conf.PixelPackerFormat) != HAL_OK)
340069ae:	4621      	mov	r1, r4
340069b0:	4805      	ldr	r0, [pc, #20]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340069b2:	f00b f903 	bl	34011bbc <HAL_DCMIPP_PIPE_SetPixelPackerFormat>
340069b6:	2800      	cmp	r0, #0
340069b8:	f47f af6c 	bne.w	34006894 <CMW_CAMERA_SetPipeConfig+0x44>
    if (HAL_DCMIPP_PIPE_SetPitch(hdcmipp, pipe, pipe_conf.PixelPipePitch) != HAL_OK)
340069bc:	4621      	mov	r1, r4
340069be:	9a05      	ldr	r2, [sp, #20]
340069c0:	4801      	ldr	r0, [pc, #4]	@ (340069c8 <CMW_CAMERA_SetPipeConfig+0x178>)
340069c2:	f00b f8c9 	bl	34011b58 <HAL_DCMIPP_PIPE_SetPitch>
340069c6:	e7de      	b.n	34006986 <CMW_CAMERA_SetPipeConfig+0x136>
340069c8:	340a47a8 	.word	0x340a47a8
340069cc:	340a47f8 	.word	0x340a47f8
340069d0:	340a45f0 	.word	0x340a45f0

340069d4 <CMW_CAMERA_Start>:
  if (pipe >= DCMIPP_NUM_OF_PIPES)
340069d4:	2802      	cmp	r0, #2
{
340069d6:	460b      	mov	r3, r1
340069d8:	b513      	push	{r0, r1, r4, lr}
  if (pipe >= DCMIPP_NUM_OF_PIPES)
340069da:	d815      	bhi.n	34006a08 <CMW_CAMERA_Start+0x34>
  ret = HAL_DCMIPP_CSI_PIPE_Start(&hcamera_dcmipp, pipe, DCMIPP_VIRTUAL_CHANNEL0, (uint32_t)pbuff, mode);
340069dc:	4601      	mov	r1, r0
340069de:	9200      	str	r2, [sp, #0]
340069e0:	480e      	ldr	r0, [pc, #56]	@ (34006a1c <CMW_CAMERA_Start+0x48>)
340069e2:	2200      	movs	r2, #0
340069e4:	f009 fb24 	bl	34010030 <HAL_DCMIPP_CSI_PIPE_Start>
  if (ret != HAL_OK)
340069e8:	b988      	cbnz	r0, 34006a0e <CMW_CAMERA_Start+0x3a>
  if (!is_camera_started)
340069ea:	4c0d      	ldr	r4, [pc, #52]	@ (34006a20 <CMW_CAMERA_Start+0x4c>)
340069ec:	6823      	ldr	r3, [r4, #0]
340069ee:	b113      	cbz	r3, 340069f6 <CMW_CAMERA_Start+0x22>
  return ret;
340069f0:	2000      	movs	r0, #0
}
340069f2:	b002      	add	sp, #8
340069f4:	bd10      	pop	{r4, pc}
    ret = Camera_Drv.Start(&camera_bsp);
340069f6:	4b0b      	ldr	r3, [pc, #44]	@ (34006a24 <CMW_CAMERA_Start+0x50>)
340069f8:	480b      	ldr	r0, [pc, #44]	@ (34006a28 <CMW_CAMERA_Start+0x54>)
340069fa:	689b      	ldr	r3, [r3, #8]
340069fc:	4798      	blx	r3
    if (ret != CMW_ERROR_NONE)
340069fe:	b948      	cbnz	r0, 34006a14 <CMW_CAMERA_Start+0x40>
    is_camera_started++;
34006a00:	6823      	ldr	r3, [r4, #0]
34006a02:	3301      	adds	r3, #1
34006a04:	6023      	str	r3, [r4, #0]
34006a06:	e7f3      	b.n	340069f0 <CMW_CAMERA_Start+0x1c>
    return CMW_ERROR_WRONG_PARAM;
34006a08:	f06f 0001 	mvn.w	r0, #1
34006a0c:	e7f1      	b.n	340069f2 <CMW_CAMERA_Start+0x1e>
    return CMW_ERROR_PERIPH_FAILURE;
34006a0e:	f06f 0003 	mvn.w	r0, #3
34006a12:	e7ee      	b.n	340069f2 <CMW_CAMERA_Start+0x1e>
      return CMW_ERROR_COMPONENT_FAILURE;
34006a14:	f06f 0004 	mvn.w	r0, #4
34006a18:	e7eb      	b.n	340069f2 <CMW_CAMERA_Start+0x1e>
34006a1a:	bf00      	nop
34006a1c:	340a47a8 	.word	0x340a47a8
34006a20:	340a45f4 	.word	0x340a45f4
34006a24:	340a4740 	.word	0x340a4740
34006a28:	340a45fc 	.word	0x340a45fc

34006a2c <CMW_CAMERA_SetGain>:
  if(Camera_Drv.SetGain == NULL)
34006a2c:	4b08      	ldr	r3, [pc, #32]	@ (34006a50 <CMW_CAMERA_SetGain+0x24>)
{
34006a2e:	b510      	push	{r4, lr}
  if(Camera_Drv.SetGain == NULL)
34006a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
34006a32:	4604      	mov	r4, r0
  if(Camera_Drv.SetGain == NULL)
34006a34:	b133      	cbz	r3, 34006a44 <CMW_CAMERA_SetGain+0x18>
  ret = Camera_Drv.SetGain(&camera_bsp, Gain);
34006a36:	4601      	mov	r1, r0
34006a38:	4806      	ldr	r0, [pc, #24]	@ (34006a54 <CMW_CAMERA_SetGain+0x28>)
34006a3a:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006a3c:	b928      	cbnz	r0, 34006a4a <CMW_CAMERA_SetGain+0x1e>
  Camera_Ctx.Gain = Gain;
34006a3e:	4b06      	ldr	r3, [pc, #24]	@ (34006a58 <CMW_CAMERA_SetGain+0x2c>)
34006a40:	621c      	str	r4, [r3, #32]
}
34006a42:	bd10      	pop	{r4, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
34006a44:	f06f 000a 	mvn.w	r0, #10
34006a48:	e7fb      	b.n	34006a42 <CMW_CAMERA_SetGain+0x16>
    return CMW_ERROR_COMPONENT_FAILURE;
34006a4a:	f06f 0004 	mvn.w	r0, #4
34006a4e:	e7f8      	b.n	34006a42 <CMW_CAMERA_SetGain+0x16>
34006a50:	340a4740 	.word	0x340a4740
34006a54:	340a45fc 	.word	0x340a45fc
34006a58:	340a47b4 	.word	0x340a47b4

34006a5c <CB_ISP_SetSensorGain>:
  if (CMW_CAMERA_SetGain(gain) != CMW_ERROR_NONE)
34006a5c:	4608      	mov	r0, r1
{
34006a5e:	b508      	push	{r3, lr}
  if (CMW_CAMERA_SetGain(gain) != CMW_ERROR_NONE)
34006a60:	f7ff ffe4 	bl	34006a2c <CMW_CAMERA_SetGain>
  return ISP_OK;
34006a64:	2800      	cmp	r0, #0
}
34006a66:	bf14      	ite	ne
34006a68:	2079      	movne	r0, #121	@ 0x79
34006a6a:	2000      	moveq	r0, #0
34006a6c:	bd08      	pop	{r3, pc}
	...

34006a70 <CMW_CAMERA_SetExposure>:
  if(Camera_Drv.SetExposure == NULL)
34006a70:	4b08      	ldr	r3, [pc, #32]	@ (34006a94 <CMW_CAMERA_SetExposure+0x24>)
{
34006a72:	b510      	push	{r4, lr}
  if(Camera_Drv.SetExposure == NULL)
34006a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
34006a76:	4604      	mov	r4, r0
  if(Camera_Drv.SetExposure == NULL)
34006a78:	b133      	cbz	r3, 34006a88 <CMW_CAMERA_SetExposure+0x18>
  ret = Camera_Drv.SetExposure(&camera_bsp, exposure);
34006a7a:	4601      	mov	r1, r0
34006a7c:	4806      	ldr	r0, [pc, #24]	@ (34006a98 <CMW_CAMERA_SetExposure+0x28>)
34006a7e:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006a80:	b928      	cbnz	r0, 34006a8e <CMW_CAMERA_SetExposure+0x1e>
  Camera_Ctx.Exposure = exposure;
34006a82:	4b06      	ldr	r3, [pc, #24]	@ (34006a9c <CMW_CAMERA_SetExposure+0x2c>)
34006a84:	625c      	str	r4, [r3, #36]	@ 0x24
}
34006a86:	bd10      	pop	{r4, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
34006a88:	f06f 000a 	mvn.w	r0, #10
34006a8c:	e7fb      	b.n	34006a86 <CMW_CAMERA_SetExposure+0x16>
    return CMW_ERROR_COMPONENT_FAILURE;
34006a8e:	f06f 0004 	mvn.w	r0, #4
34006a92:	e7f8      	b.n	34006a86 <CMW_CAMERA_SetExposure+0x16>
34006a94:	340a4740 	.word	0x340a4740
34006a98:	340a45fc 	.word	0x340a45fc
34006a9c:	340a47b4 	.word	0x340a47b4

34006aa0 <CB_ISP_SetSensorExposure>:
  if (CMW_CAMERA_SetExposure(exposure) != CMW_ERROR_NONE)
34006aa0:	4608      	mov	r0, r1
{
34006aa2:	b508      	push	{r3, lr}
  if (CMW_CAMERA_SetExposure(exposure) != CMW_ERROR_NONE)
34006aa4:	f7ff ffe4 	bl	34006a70 <CMW_CAMERA_SetExposure>
  return ISP_OK;
34006aa8:	2800      	cmp	r0, #0
}
34006aaa:	bf14      	ite	ne
34006aac:	2083      	movne	r0, #131	@ 0x83
34006aae:	2000      	moveq	r0, #0
34006ab0:	bd08      	pop	{r3, pc}
	...

34006ab4 <CMW_CAMERA_GetSensorInfo>:
{
34006ab4:	b508      	push	{r3, lr}
  if(Camera_Drv.GetSensorInfo == NULL)
34006ab6:	4b07      	ldr	r3, [pc, #28]	@ (34006ad4 <CMW_CAMERA_GetSensorInfo+0x20>)
{
34006ab8:	4601      	mov	r1, r0
  if(Camera_Drv.GetSensorInfo == NULL)
34006aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006abc:	b133      	cbz	r3, 34006acc <CMW_CAMERA_GetSensorInfo+0x18>
  ret = Camera_Drv.GetSensorInfo(&camera_bsp, info);
34006abe:	4806      	ldr	r0, [pc, #24]	@ (34006ad8 <CMW_CAMERA_GetSensorInfo+0x24>)
34006ac0:	4798      	blx	r3
    return CMW_ERROR_COMPONENT_FAILURE;
34006ac2:	2800      	cmp	r0, #0
34006ac4:	bf18      	it	ne
34006ac6:	f06f 0004 	mvnne.w	r0, #4
}
34006aca:	bd08      	pop	{r3, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
34006acc:	f06f 000a 	mvn.w	r0, #10
34006ad0:	e7fb      	b.n	34006aca <CMW_CAMERA_GetSensorInfo+0x16>
34006ad2:	bf00      	nop
34006ad4:	340a4740 	.word	0x340a4740
34006ad8:	340a45fc 	.word	0x340a45fc

34006adc <CMW_CAMERA_Init>:
{
34006adc:	b570      	push	{r4, r5, r6, lr}
34006ade:	4604      	mov	r4, r0
34006ae0:	b094      	sub	sp, #80	@ 0x50
  ISP_SensorInfoTypeDef info = {0};
34006ae2:	223c      	movs	r2, #60	@ 0x3c
34006ae4:	2100      	movs	r1, #0
34006ae6:	a805      	add	r0, sp, #20
34006ae8:	f017 ffca 	bl	3401ea80 <memset>
  initValues.width = initConf->width;
34006aec:	6823      	ldr	r3, [r4, #0]
  if (is_camera_init != 0)
34006aee:	4e22      	ldr	r6, [pc, #136]	@ (34006b78 <CMW_CAMERA_Init+0x9c>)
  initValues.width = initConf->width;
34006af0:	9300      	str	r3, [sp, #0]
  initValues.height = initConf->height;
34006af2:	6863      	ldr	r3, [r4, #4]
34006af4:	9301      	str	r3, [sp, #4]
  initValues.fps = initConf->fps;
34006af6:	68a3      	ldr	r3, [r4, #8]
34006af8:	9302      	str	r3, [sp, #8]
  initValues.pixel_format = initConf->pixel_format;
34006afa:	68e3      	ldr	r3, [r4, #12]
34006afc:	9303      	str	r3, [sp, #12]
  initValues.mirrorFlip = initConf->mirror_flip;
34006afe:	6963      	ldr	r3, [r4, #20]
34006b00:	9304      	str	r3, [sp, #16]
  if (is_camera_init != 0)
34006b02:	6833      	ldr	r3, [r6, #0]
34006b04:	2b00      	cmp	r3, #0
34006b06:	d135      	bne.n	34006b74 <CMW_CAMERA_Init+0x98>
  hcamera_dcmipp.Instance = DCMIPP;
34006b08:	4d1c      	ldr	r5, [pc, #112]	@ (34006b7c <CMW_CAMERA_Init+0xa0>)
34006b0a:	4b1d      	ldr	r3, [pc, #116]	@ (34006b80 <CMW_CAMERA_Init+0xa4>)
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
34006b0c:	4628      	mov	r0, r5
  hcamera_dcmipp.Instance = DCMIPP;
34006b0e:	602b      	str	r3, [r5, #0]
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
34006b10:	f016 fefb 	bl	3401d90a <MX_DCMIPP_ClockConfig>
  if (ret != HAL_OK)
34006b14:	b118      	cbz	r0, 34006b1e <CMW_CAMERA_Init+0x42>
    return CMW_ERROR_PERIPH_FAILURE;
34006b16:	f06f 0003 	mvn.w	r0, #3
}
34006b1a:	b014      	add	sp, #80	@ 0x50
34006b1c:	bd70      	pop	{r4, r5, r6, pc}
  ret = HAL_DCMIPP_Init(&hcamera_dcmipp);
34006b1e:	4628      	mov	r0, r5
34006b20:	f009 f81a 	bl	3400fb58 <HAL_DCMIPP_Init>
  if (ret != HAL_OK)
34006b24:	2800      	cmp	r0, #0
34006b26:	d1f6      	bne.n	34006b16 <CMW_CAMERA_Init+0x3a>
  CMW_CAMERA_EnableGPIOs();
34006b28:	f7ff fe58 	bl	340067dc <CMW_CAMERA_EnableGPIOs>
  ret = CMW_CAMERA_Probe_Sensor(&initValues, &detected_sensor);
34006b2c:	4668      	mov	r0, sp
34006b2e:	f7ff fcd3 	bl	340064d8 <CMW_CAMERA_Probe_Sensor.constprop.0>
  if (ret != CMW_ERROR_NONE)
34006b32:	b110      	cbz	r0, 34006b3a <CMW_CAMERA_Init+0x5e>
    return CMW_ERROR_UNKNOWN_COMPONENT;
34006b34:	f06f 0006 	mvn.w	r0, #6
34006b38:	e7ef      	b.n	34006b1a <CMW_CAMERA_Init+0x3e>
  ret = CMW_CAMERA_GetSensorInfo(&info);
34006b3a:	a805      	add	r0, sp, #20
34006b3c:	f7ff ffba 	bl	34006ab4 <CMW_CAMERA_GetSensorInfo>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34006b40:	3005      	adds	r0, #5
34006b42:	d0f7      	beq.n	34006b34 <CMW_CAMERA_Init+0x58>
  ret = CMW_CAMERA_SetExposure(info.exposure_min);
34006b44:	9812      	ldr	r0, [sp, #72]	@ 0x48
34006b46:	f7ff ff93 	bl	34006a70 <CMW_CAMERA_SetExposure>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34006b4a:	3005      	adds	r0, #5
34006b4c:	d0f2      	beq.n	34006b34 <CMW_CAMERA_Init+0x58>
  ret = CMW_CAMERA_SetGain(info.gain_min);
34006b4e:	9810      	ldr	r0, [sp, #64]	@ 0x40
34006b50:	f7ff ff6c 	bl	34006a2c <CMW_CAMERA_SetGain>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34006b54:	3005      	adds	r0, #5
34006b56:	d0ed      	beq.n	34006b34 <CMW_CAMERA_Init+0x58>
  initConf->width = initValues.width;
34006b58:	9b00      	ldr	r3, [sp, #0]
  camera_conf = *initConf;
34006b5a:	4d0a      	ldr	r5, [pc, #40]	@ (34006b84 <CMW_CAMERA_Init+0xa8>)
  initConf->width = initValues.width;
34006b5c:	6023      	str	r3, [r4, #0]
  initConf->height = initValues.height ;
34006b5e:	9b01      	ldr	r3, [sp, #4]
34006b60:	6063      	str	r3, [r4, #4]
  camera_conf = *initConf;
34006b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34006b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  is_camera_init++;
34006b66:	6833      	ldr	r3, [r6, #0]
  camera_conf = *initConf;
34006b68:	e894 0003 	ldmia.w	r4, {r0, r1}
34006b6c:	e885 0003 	stmia.w	r5, {r0, r1}
  is_camera_init++;
34006b70:	3301      	adds	r3, #1
34006b72:	6033      	str	r3, [r6, #0]
    return CMW_ERROR_NONE;
34006b74:	2000      	movs	r0, #0
34006b76:	e7d0      	b.n	34006b1a <CMW_CAMERA_Init+0x3e>
34006b78:	340a45f8 	.word	0x340a45f8
34006b7c:	340a47a8 	.word	0x340a47a8
34006b80:	58002000 	.word	0x58002000
34006b84:	340a47f8 	.word	0x340a47f8

34006b88 <CMW_CAMERA_Run>:
  if(Camera_Drv.Run != NULL)
34006b88:	4b03      	ldr	r3, [pc, #12]	@ (34006b98 <CMW_CAMERA_Run+0x10>)
34006b8a:	68db      	ldr	r3, [r3, #12]
34006b8c:	b10b      	cbz	r3, 34006b92 <CMW_CAMERA_Run+0xa>
      return Camera_Drv.Run(&camera_bsp);
34006b8e:	4803      	ldr	r0, [pc, #12]	@ (34006b9c <CMW_CAMERA_Run+0x14>)
34006b90:	4718      	bx	r3
}
34006b92:	4618      	mov	r0, r3
34006b94:	4770      	bx	lr
34006b96:	bf00      	nop
34006b98:	340a4740 	.word	0x340a4740
34006b9c:	340a45fc 	.word	0x340a45fc

34006ba0 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
  if(Camera_Drv.VsyncEventCallback != NULL)
34006ba0:	4b05      	ldr	r3, [pc, #20]	@ (34006bb8 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
34006ba2:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
34006ba4:	691b      	ldr	r3, [r3, #16]
{
34006ba6:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
34006ba8:	b10b      	cbz	r3, 34006bae <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
34006baa:	4804      	ldr	r0, [pc, #16]	@ (34006bbc <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
34006bac:	4798      	blx	r3
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
34006bae:	4620      	mov	r0, r4
34006bb0:	f016 fa66 	bl	3401d080 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
34006bb4:	bd10      	pop	{r4, pc}
34006bb6:	bf00      	nop
34006bb8:	340a4740 	.word	0x340a4740
34006bbc:	340a45fc 	.word	0x340a45fc

34006bc0 <HAL_DCMIPP_PIPE_FrameEventCallback>:
  if(Camera_Drv.FrameEventCallback != NULL)
34006bc0:	4b05      	ldr	r3, [pc, #20]	@ (34006bd8 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
34006bc2:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
34006bc4:	695b      	ldr	r3, [r3, #20]
{
34006bc6:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
34006bc8:	b10b      	cbz	r3, 34006bce <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
34006bca:	4804      	ldr	r0, [pc, #16]	@ (34006bdc <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
34006bcc:	4798      	blx	r3
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
34006bce:	4620      	mov	r0, r4
34006bd0:	f016 f9d8 	bl	3401cf84 <CMW_CAMERA_PIPE_FrameEventCallback>
}
34006bd4:	bd10      	pop	{r4, pc}
34006bd6:	bf00      	nop
34006bd8:	340a4740 	.word	0x340a4740
34006bdc:	340a45fc 	.word	0x340a45fc

34006be0 <HAL_DCMIPP_MspInit>:
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5ENSR, Periphs);
34006be0:	2304      	movs	r3, #4
{
34006be2:	b530      	push	{r4, r5, lr}
34006be4:	4c1b      	ldr	r4, [pc, #108]	@ (34006c54 <HAL_DCMIPP_MspInit+0x74>)
34006be6:	b085      	sub	sp, #20
34006be8:	f8c4 3a7c 	str.w	r3, [r4, #2684]	@ 0xa7c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5ENR);
34006bec:	f8d4 227c 	ldr.w	r2, [r4, #636]	@ 0x27c
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ReleaseReset(uint32_t Periphs)
{
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34006bf0:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
  tmpreg = READ_REG(RCC->APB5ENR);
34006bf4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
34006bf6:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34006bf8:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
34006bfc:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
  HAL_NVIC_SetPriority(DCMIPP_IRQn, 0x07, 0);
34006c00:	2107      	movs	r1, #7
34006c02:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
34006c04:	9a02      	ldr	r2, [sp, #8]
34006c06:	2030      	movs	r0, #48	@ 0x30
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34006c08:	f8c4 3a3c 	str.w	r3, [r4, #2620]	@ 0xa3c
34006c0c:	2200      	movs	r2, #0
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34006c0e:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
34006c12:	f008 fde7 	bl	3400f7e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMIPP_IRQn);
34006c16:	2030      	movs	r0, #48	@ 0x30
34006c18:	f008 fe42 	bl	3400f8a0 <HAL_NVIC_EnableIRQ>
  WRITE_REG(RCC->APB5ENSR, Periphs);
34006c1c:	2340      	movs	r3, #64	@ 0x40
34006c1e:	f8c4 3a7c 	str.w	r3, [r4, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
34006c22:	f8d4 227c 	ldr.w	r2, [r4, #636]	@ 0x27c
  HAL_NVIC_SetPriority(CSI_IRQn, 0x07, 0);
34006c26:	2107      	movs	r1, #7
34006c28:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
34006c2a:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34006c2c:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34006c30:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
34006c34:	202f      	movs	r0, #47	@ 0x2f
34006c36:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
34006c38:	9a00      	ldr	r2, [sp, #0]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34006c3a:	f8c4 3a3c 	str.w	r3, [r4, #2620]	@ 0xa3c
34006c3e:	2200      	movs	r2, #0
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34006c40:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
34006c44:	f008 fdce 	bl	3400f7e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34006c48:	202f      	movs	r0, #47	@ 0x2f
}
34006c4a:	b005      	add	sp, #20
34006c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34006c50:	f008 be26 	b.w	3400f8a0 <HAL_NVIC_EnableIRQ>
34006c54:	56028000 	.word	0x56028000

34006c58 <CMW_UTILS_get_dec_ratio_and_update>:

  return is_vertical ? DCMIPP_VDEC_ALL : DCMIPP_HDEC_ALL;
}

static uint32_t CMW_UTILS_get_dec_ratio_and_update(float *ratio, int is_vertical)
{
34006c58:	b508      	push	{r3, lr}
  int dec_ratio = 1;

  while (*ratio >= 8) {
34006c5a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
  int dec_ratio = 1;
34006c5e:	2301      	movs	r3, #1
    dec_ratio *= 2;
    *ratio /= 2;
34006c60:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
  while (*ratio >= 8) {
34006c64:	edd0 7a00 	vldr	s15, [r0]
34006c68:	eef4 7ac7 	vcmpe.f32	s15, s14
34006c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34006c70:	da08      	bge.n	34006c84 <CMW_UTILS_get_dec_ratio_and_update+0x2c>
  switch (dec_ratio) {
34006c72:	3b01      	subs	r3, #1
34006c74:	2b07      	cmp	r3, #7
34006c76:	d81a      	bhi.n	34006cae <CMW_UTILS_get_dec_ratio_and_update+0x56>
34006c78:	e8df f003 	tbb	[pc, r3]
34006c7c:	0f190a1f 	.word	0x0f190a1f
34006c80:	14191919 	.word	0x14191919
    *ratio /= 2;
34006c84:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dec_ratio *= 2;
34006c88:	005b      	lsls	r3, r3, #1
    *ratio /= 2;
34006c8a:	edc0 7a00 	vstr	s15, [r0]
34006c8e:	e7e9      	b.n	34006c64 <CMW_UTILS_get_dec_ratio_and_update+0xc>
    return is_vertical ? DCMIPP_VDEC_1_OUT_2 : DCMIPP_HDEC_1_OUT_2;
34006c90:	2900      	cmp	r1, #0
34006c92:	bf0c      	ite	eq
34006c94:	2002      	moveq	r0, #2
34006c96:	2008      	movne	r0, #8
  }

  return CMW_UTILS_get_dec_ratio_from_decimal_ratio(dec_ratio, is_vertical);
}
34006c98:	bd08      	pop	{r3, pc}
    return is_vertical ? DCMIPP_VDEC_1_OUT_4 : DCMIPP_HDEC_1_OUT_4;
34006c9a:	2900      	cmp	r1, #0
34006c9c:	bf0c      	ite	eq
34006c9e:	2004      	moveq	r0, #4
34006ca0:	2010      	movne	r0, #16
34006ca2:	e7f9      	b.n	34006c98 <CMW_UTILS_get_dec_ratio_and_update+0x40>
    return is_vertical ? DCMIPP_VDEC_1_OUT_8 : DCMIPP_HDEC_1_OUT_8;
34006ca4:	2900      	cmp	r1, #0
34006ca6:	bf0c      	ite	eq
34006ca8:	2006      	moveq	r0, #6
34006caa:	2018      	movne	r0, #24
34006cac:	e7f4      	b.n	34006c98 <CMW_UTILS_get_dec_ratio_and_update+0x40>
    assert(0);
34006cae:	2177      	movs	r1, #119	@ 0x77
34006cb0:	4b03      	ldr	r3, [pc, #12]	@ (34006cc0 <CMW_UTILS_get_dec_ratio_and_update+0x68>)
34006cb2:	4a04      	ldr	r2, [pc, #16]	@ (34006cc4 <CMW_UTILS_get_dec_ratio_and_update+0x6c>)
34006cb4:	4804      	ldr	r0, [pc, #16]	@ (34006cc8 <CMW_UTILS_get_dec_ratio_and_update+0x70>)
34006cb6:	f016 fe99 	bl	3401d9ec <__assert_func>
  switch (dec_ratio) {
34006cba:	2000      	movs	r0, #0
34006cbc:	e7ec      	b.n	34006c98 <CMW_UTILS_get_dec_ratio_and_update+0x40>
34006cbe:	bf00      	nop
34006cc0:	340235d8 	.word	0x340235d8
34006cc4:	34028378 	.word	0x34028378
34006cc8:	34023e19 	.word	0x34023e19

34006ccc <CMW_UTILS_GetPipeConfig>:
{
34006ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34006cce:	4614      	mov	r4, r2
34006cd0:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
    CMW_UTILS_get_crop_config(cam_width, cam_height, p_conf->output_width, p_conf->output_height, crop);
34006cd4:	6867      	ldr	r7, [r4, #4]
  if (p_conf->mode == CMW_Aspect_ratio_crop)
34006cd6:	6992      	ldr	r2, [r2, #24]
  const float ratio_height = (float)cam_height / pipe_height;
34006cd8:	ee06 7a90 	vmov	s13, r7
{
34006cdc:	ee07 0a10 	vmov	s14, r0
34006ce0:	ee07 1a90 	vmov	s15, r1
  const float ratio_height = (float)cam_height / pipe_height;
34006ce4:	eeb8 5a66 	vcvt.f32.u32	s10, s13
  if (p_conf->mode == CMW_Aspect_ratio_crop)
34006ce8:	2a00      	cmp	r2, #0
34006cea:	f040 808e 	bne.w	34006e0a <CMW_UTILS_GetPipeConfig+0x13e>
  const float ratio_width = (float)cam_width / pipe_width ;
34006cee:	edd4 6a00 	vldr	s13, [r4]
34006cf2:	eeb8 6a47 	vcvt.f32.u32	s12, s14
34006cf6:	eef8 4a66 	vcvt.f32.u32	s9, s13
  const float ratio_height = (float)cam_height / pipe_height;
34006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
  const float ratio_width = (float)cam_width / pipe_width ;
34006cfe:	ee86 4a24 	vdiv.f32	s8, s12, s9
  const float ratio_height = (float)cam_height / pipe_height;
34006d02:	eec6 5a85 	vdiv.f32	s11, s13, s10
  const float ratio = MIN(ratio_width, ratio_height);
34006d06:	eeb4 4a65 	vcmp.f32	s8, s11
34006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34006d0e:	bf48      	it	mi
34006d10:	eef0 5a44 	vmovmi.f32	s11, s8
  assert(ratio >= 1);
34006d14:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
34006d18:	eef4 5ac4 	vcmpe.f32	s11, s8
34006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34006d20:	da05      	bge.n	34006d2e <CMW_UTILS_GetPipeConfig+0x62>
34006d22:	214f      	movs	r1, #79	@ 0x4f
34006d24:	4b4f      	ldr	r3, [pc, #316]	@ (34006e64 <CMW_UTILS_GetPipeConfig+0x198>)
34006d26:	4a50      	ldr	r2, [pc, #320]	@ (34006e68 <CMW_UTILS_GetPipeConfig+0x19c>)
  assert(ratio < 64);
34006d28:	4850      	ldr	r0, [pc, #320]	@ (34006e6c <CMW_UTILS_GetPipeConfig+0x1a0>)
34006d2a:	f016 fe5f 	bl	3401d9ec <__assert_func>
34006d2e:	ed9f 4a50 	vldr	s8, [pc, #320]	@ 34006e70 <CMW_UTILS_GetPipeConfig+0x1a4>
34006d32:	eef4 5ac4 	vcmpe.f32	s11, s8
34006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34006d3a:	d403      	bmi.n	34006d44 <CMW_UTILS_GetPipeConfig+0x78>
34006d3c:	2150      	movs	r1, #80	@ 0x50
34006d3e:	4b4d      	ldr	r3, [pc, #308]	@ (34006e74 <CMW_UTILS_GetPipeConfig+0x1a8>)
34006d40:	4a49      	ldr	r2, [pc, #292]	@ (34006e68 <CMW_UTILS_GetPipeConfig+0x19c>)
34006d42:	e7f1      	b.n	34006d28 <CMW_UTILS_GetPipeConfig+0x5c>
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34006d44:	ee24 4aa5 	vmul.f32	s8, s9, s11
34006d48:	eeb4 6ac4 	vcmpe.f32	s12, s8
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34006d4c:	ee65 5a25 	vmul.f32	s11, s10, s11
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34006d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34006d54:	eef4 6ae5 	vcmpe.f32	s13, s11
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34006d58:	bfcc      	ite	gt
34006d5a:	eebc 6ac4 	vcvtgt.u32.f32	s12, s8
34006d5e:	eebc 6ac6 	vcvtle.u32.f32	s12, s12
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  crop->HStart = (cam_width - crop->HSize + 1) / 2;
34006d66:	4601      	mov	r1, r0
34006d68:	ee16 2a10 	vmov	r2, s12
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34006d6c:	bfcc      	ite	gt
34006d6e:	eefc 6ae5 	vcvtgt.u32.f32	s13, s11
34006d72:	eefc 6ae6 	vcvtle.u32.f32	s13, s13
  crop->HStart = (cam_width - crop->HSize + 1) / 2;
34006d76:	3101      	adds	r1, #1
34006d78:	1a89      	subs	r1, r1, r2
34006d7a:	0849      	lsrs	r1, r1, #1
34006d7c:	6059      	str	r1, [r3, #4]
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
34006d7e:	ee17 1a90 	vmov	r1, s15
34006d82:	ee16 2a90 	vmov	r2, s13
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34006d86:	ed83 6a03 	vstr	s12, [r3, #12]
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34006d8a:	edc3 6a02 	vstr	s13, [r3, #8]
    ratio_width = (float)crop->HSize / p_conf->output_width;
34006d8e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    ratio_height = (float)crop->VSize / p_conf->output_height;
34006d92:	eef8 6a66 	vcvt.f32.u32	s13, s13
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
34006d96:	3101      	adds	r1, #1
34006d98:	1a89      	subs	r1, r1, r2
  crop->PipeArea = DCMIPP_POSITIVE_AREA;
34006d9a:	2200      	movs	r2, #0
    ratio_width = (float)crop->HSize / p_conf->output_width;
34006d9c:	eec6 5a24 	vdiv.f32	s11, s12, s9
    ratio_height = (float)crop->VSize / p_conf->output_height;
34006da0:	ee86 7a85 	vdiv.f32	s14, s13, s10
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
34006da4:	0849      	lsrs	r1, r1, #1
34006da6:	6019      	str	r1, [r3, #0]
  crop->PipeArea = DCMIPP_POSITIVE_AREA;
34006da8:	611a      	str	r2, [r3, #16]

static void CMW_UTILS_get_scale_configs(CMW_DCMIPP_Conf_t *p_conf, float ratio_width, float ratio_height,
                                       DCMIPP_DecimationConfTypeDef *dec, DCMIPP_DownsizeTypeDef *down)
{
  dec->HRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_width, 0);
34006daa:	2100      	movs	r1, #0
34006dac:	4668      	mov	r0, sp
34006dae:	ed8d 7a01 	vstr	s14, [sp, #4]
34006db2:	edcd 5a00 	vstr	s11, [sp]
34006db6:	f7ff ff4f 	bl	34006c58 <CMW_UTILS_get_dec_ratio_and_update>
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
34006dba:	2101      	movs	r1, #1
  dec->HRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_width, 0);
34006dbc:	6068      	str	r0, [r5, #4]
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
34006dbe:	a801      	add	r0, sp, #4
34006dc0:	f7ff ff4a 	bl	34006c58 <CMW_UTILS_get_dec_ratio_and_update>
  down->HRatio = (uint32_t) (8192 * ratio_width);
34006dc4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 34006e78 <CMW_UTILS_GetPipeConfig+0x1ac>
34006dc8:	eddd 7a00 	vldr	s15, [sp]
34006dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
34006dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
34006dd4:	6028      	str	r0, [r5, #0]
  down->HRatio = (uint32_t) (8192 * ratio_width);
34006dd6:	ee17 3a90 	vmov	r3, s15
  CMW_UTILS_get_down_config(ratio_width, ratio_height, p_conf->output_width, p_conf->output_height, down);
34006dda:	6820      	ldr	r0, [r4, #0]
  down->HRatio = (uint32_t) (8192 * ratio_width);
34006ddc:	edc6 7a03 	vstr	s15, [r6, #12]
  down->VRatio = (uint32_t) (8192 * ratio_height);
34006de0:	eddd 7a01 	vldr	s15, [sp, #4]
34006de4:	ee67 7a87 	vmul.f32	s15, s15, s14
34006de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34006dec:	ee17 2a90 	vmov	r2, s15
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
34006df0:	4922      	ldr	r1, [pc, #136]	@ (34006e7c <CMW_UTILS_GetPipeConfig+0x1b0>)
  down->VRatio = (uint32_t) (8192 * ratio_height);
34006df2:	edc6 7a02 	vstr	s15, [r6, #8]
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
34006df6:	fbb1 f3f3 	udiv	r3, r1, r3
  down->VDivFactor = (1024 * 8192 - 1) / down->VRatio;
34006dfa:	fbb1 f1f2 	udiv	r1, r1, r2
  down->VSize = height;
34006dfe:	e9c6 7000 	strd	r7, r0, [r6]
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
34006e02:	6173      	str	r3, [r6, #20]
  down->VDivFactor = (1024 * 8192 - 1) / down->VRatio;
34006e04:	6131      	str	r1, [r6, #16]
}
34006e06:	b003      	add	sp, #12
34006e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (p_conf->mode == CMW_Aspect_ratio_fit)
34006e0a:	2a01      	cmp	r2, #1
34006e0c:	d10c      	bne.n	34006e28 <CMW_UTILS_GetPipeConfig+0x15c>
    ratio_width = (float)cam_width / p_conf->output_width;
34006e0e:	edd4 6a00 	vldr	s13, [r4]
34006e12:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34006e16:	eef8 6a66 	vcvt.f32.u32	s13, s13
34006e1a:	eec7 5a26 	vdiv.f32	s11, s14, s13
    ratio_height = (float)crop->VSize / p_conf->output_height;
34006e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
34006e22:	ee87 7a85 	vdiv.f32	s14, s15, s10
34006e26:	e7c0      	b.n	34006daa <CMW_UTILS_GetPipeConfig+0xde>
  else if (p_conf->mode == CMW_Aspect_ratio_fullscreen)
34006e28:	2a02      	cmp	r2, #2
34006e2a:	d106      	bne.n	34006e3a <CMW_UTILS_GetPipeConfig+0x16e>
    ratio_height = (float) cam_height / p_conf->output_height;
34006e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34006e30:	ee87 7a85 	vdiv.f32	s14, s15, s10
    ratio_width = (float) ratio_height;
34006e34:	eef0 5a47 	vmov.f32	s11, s14
34006e38:	e7b7      	b.n	34006daa <CMW_UTILS_GetPipeConfig+0xde>
  crop->HSize = roi->width;
34006e3a:	69e1      	ldr	r1, [r4, #28]
    ratio_width = (float)crop->HSize / p_conf->output_width;
34006e3c:	ed94 7a00 	vldr	s14, [r4]
34006e40:	ee07 1a90 	vmov	s15, r1
34006e44:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34006e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
  crop->HStart = roi->offset_x;
34006e4c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  crop->VSize = roi->height;
34006e4e:	6a22      	ldr	r2, [r4, #32]
  crop->HStart = roi->offset_x;
34006e50:	6058      	str	r0, [r3, #4]
  crop->VStart = roi->offset_y;
34006e52:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    ratio_width = (float)crop->HSize / p_conf->output_width;
34006e54:	eec7 5a87 	vdiv.f32	s11, s15, s14
  crop->HSize = roi->width;
34006e58:	60d9      	str	r1, [r3, #12]
    ratio_height = (float)crop->VSize / p_conf->output_height;
34006e5a:	ee07 2a90 	vmov	s15, r2
  crop->VSize = roi->height;
34006e5e:	609a      	str	r2, [r3, #8]
  crop->VStart = roi->offset_y;
34006e60:	6018      	str	r0, [r3, #0]
    ratio_height = (float)crop->VSize / p_conf->output_height;
34006e62:	e7dc      	b.n	34006e1e <CMW_UTILS_GetPipeConfig+0x152>
34006e64:	34023e56 	.word	0x34023e56
34006e68:	340283a3 	.word	0x340283a3
34006e6c:	34023e19 	.word	0x34023e19
34006e70:	42800000 	.word	0x42800000
34006e74:	34023e61 	.word	0x34023e61
34006e78:	46000000 	.word	0x46000000
34006e7c:	007fffff 	.word	0x007fffff

34006e80 <CMW_IMX335_FrameEventCallback>:
#endif
}

static void CMW_IMX335_FrameEventCallback(void *io_ctx, uint32_t pipe)
{
}
34006e80:	4770      	bx	lr

34006e82 <CMW_IMX335_SetWBRefMode>:
{
34006e82:	b508      	push	{r3, lr}
  ret = ISP_SetWBRefMode(&((CMW_IMX335_t *)io_ctx)->hIsp, Automatic, RefColorTemp);
34006e84:	3030      	adds	r0, #48	@ 0x30
34006e86:	f7fe fb5e 	bl	34005546 <ISP_SetWBRefMode>
  return CMW_ERROR_NONE;
34006e8a:	2800      	cmp	r0, #0
}
34006e8c:	bf14      	ite	ne
34006e8e:	f06f 0003 	mvnne.w	r0, #3
34006e92:	2000      	moveq	r0, #0
34006e94:	bd08      	pop	{r3, pc}

34006e96 <CMW_IMX335_ListWBRefModes>:
{
34006e96:	b508      	push	{r3, lr}
  ret = ISP_ListWBRefModes(&((CMW_IMX335_t *)io_ctx)->hIsp, RefColorTemp);
34006e98:	3030      	adds	r0, #48	@ 0x30
34006e9a:	f7fe fb41 	bl	34005520 <ISP_ListWBRefModes>
  return CMW_ERROR_NONE;
34006e9e:	2800      	cmp	r0, #0
}
34006ea0:	bf14      	ite	ne
34006ea2:	f06f 0003 	mvnne.w	r0, #3
34006ea6:	2000      	moveq	r0, #0
34006ea8:	bd08      	pop	{r3, pc}

34006eaa <CMW_IMX335_ReadID>:
  return IMX335_ReadID(&((CMW_IMX335_t *)io_ctx)->ctx_driver, Id);
34006eaa:	3008      	adds	r0, #8
34006eac:	f000 bf26 	b.w	34007cfc <IMX335_ReadID>

34006eb0 <CMW_IMX335_SetTestPattern>:
  return IMX335_SetTestPattern(&((CMW_IMX335_t *)io_ctx)->ctx_driver, mode);
34006eb0:	3008      	adds	r0, #8
34006eb2:	f001 b82f 	b.w	34007f14 <IMX335_SetTestPattern>
	...

34006eb8 <CMW_IMX335_GetSensorInfo>:
{
34006eb8:	b508      	push	{r3, lr}
34006eba:	460b      	mov	r3, r1
  if ((io_ctx ==  NULL) || (info == NULL))
34006ebc:	b1b8      	cbz	r0, 34006eee <CMW_IMX335_GetSensorInfo+0x36>
34006ebe:	b1b1      	cbz	r1, 34006eee <CMW_IMX335_GetSensorInfo+0x36>
    strcpy(info->name, IMX335_NAME);
34006ec0:	4618      	mov	r0, r3
34006ec2:	490c      	ldr	r1, [pc, #48]	@ (34006ef4 <CMW_IMX335_GetSensorInfo+0x3c>)
34006ec4:	f018 f84d 	bl	3401ef62 <strcpy>
  info->bayer_pattern = IMX335_BAYER_PATTERN;
34006ec8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
  info->height = IMX335_HEIGHT;
34006ecc:	f44f 6122 	mov.w	r1, #2592	@ 0xa20
  info->bayer_pattern = IMX335_BAYER_PATTERN;
34006ed0:	8402      	strh	r2, [r0, #32]
  info->height = IMX335_HEIGHT;
34006ed2:	f44f 62f3 	mov.w	r2, #1944	@ 0x798
    strcpy(info->name, IMX335_NAME);
34006ed6:	4603      	mov	r3, r0
  info->height = IMX335_HEIGHT;
34006ed8:	e9c0 1209 	strd	r1, r2, [r0, #36]	@ 0x24
  info->gain_max = IMX335_GAIN_MAX;
34006edc:	2000      	movs	r0, #0
34006ede:	4a06      	ldr	r2, [pc, #24]	@ (34006ef8 <CMW_IMX335_GetSensorInfo+0x40>)
  info->exposure_min = IMX335_EXPOSURE_MIN;
34006ee0:	6358      	str	r0, [r3, #52]	@ 0x34
  info->gain_max = IMX335_GAIN_MAX;
34006ee2:	e9c3 020b 	strd	r0, r2, [r3, #44]	@ 0x2c
  info->exposure_max = IMX335_EXPOSURE_MAX;
34006ee6:	f248 12f2 	movw	r2, #33266	@ 0x81f2
34006eea:	639a      	str	r2, [r3, #56]	@ 0x38
}
34006eec:	bd08      	pop	{r3, pc}
    return CMW_ERROR_WRONG_PARAM;
34006eee:	f06f 0001 	mvn.w	r0, #1
34006ef2:	e7fb      	b.n	34006eec <CMW_IMX335_GetSensorInfo+0x34>
34006ef4:	34023e6c 	.word	0x34023e6c
34006ef8:	00011940 	.word	0x00011940

34006efc <CMW_IMX335_SetMirrorFlip>:
  return IMX335_MirrorFlipConfig(&((CMW_IMX335_t *)io_ctx)->ctx_driver, mirrorFlip);
34006efc:	2903      	cmp	r1, #3
34006efe:	bf28      	it	cs
34006f00:	2103      	movcs	r1, #3
34006f02:	3008      	adds	r0, #8
34006f04:	f000 bfec 	b.w	34007ee0 <IMX335_MirrorFlipConfig>

34006f08 <CMW_IMX335_SetFramerate>:
{
34006f08:	b4f0      	push	{r4, r5, r6, r7}
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34006f0a:	4d0e      	ldr	r5, [pc, #56]	@ (34006f44 <CMW_IMX335_SetFramerate+0x3c>)
{
34006f0c:	b086      	sub	sp, #24
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34006f0e:	ac01      	add	r4, sp, #4
{
34006f10:	4607      	mov	r7, r0
34006f12:	460e      	mov	r6, r1
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34006f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34006f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34006f18:	682b      	ldr	r3, [r5, #0]
34006f1a:	aa01      	add	r2, sp, #4
34006f1c:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < ARRAY_SIZE(available_imx335_fps); i++)
34006f1e:	2305      	movs	r3, #5
    if (framerate == available_imx335_fps[i])
34006f20:	f852 1b04 	ldr.w	r1, [r2], #4
34006f24:	42b1      	cmp	r1, r6
34006f26:	d106      	bne.n	34006f36 <CMW_IMX335_SetFramerate+0x2e>
      return IMX335_SetFramerate(&((CMW_IMX335_t *)io_ctx)->ctx_driver, framerate);
34006f28:	4631      	mov	r1, r6
34006f2a:	f107 0008 	add.w	r0, r7, #8
}
34006f2e:	b006      	add	sp, #24
34006f30:	bcf0      	pop	{r4, r5, r6, r7}
      return IMX335_SetFramerate(&((CMW_IMX335_t *)io_ctx)->ctx_driver, framerate);
34006f32:	f000 bfa9 	b.w	34007e88 <IMX335_SetFramerate>
  for (int i = 0; i < ARRAY_SIZE(available_imx335_fps); i++)
34006f36:	3b01      	subs	r3, #1
34006f38:	d1f2      	bne.n	34006f20 <CMW_IMX335_SetFramerate+0x18>
}
34006f3a:	f06f 0001 	mvn.w	r0, #1
34006f3e:	b006      	add	sp, #24
34006f40:	bcf0      	pop	{r4, r5, r6, r7}
34006f42:	4770      	bx	lr
34006f44:	3402299c 	.word	0x3402299c

34006f48 <CMW_IMX335_SetFrequency>:
  return IMX335_SetFrequency(&((CMW_IMX335_t *)io_ctx)->ctx_driver, frequency);
34006f48:	3008      	adds	r0, #8
34006f4a:	f000 bf79 	b.w	34007e40 <IMX335_SetFrequency>

34006f4e <CMW_IMX335_SetExposure>:
  return IMX335_SetExposure(&((CMW_IMX335_t *)io_ctx)->ctx_driver, exposure);
34006f4e:	3008      	adds	r0, #8
34006f50:	f000 bf24 	b.w	34007d9c <IMX335_SetExposure>

34006f54 <CMW_IMX335_SetGain>:
  return IMX335_SetGain(&((CMW_IMX335_t *)io_ctx)->ctx_driver, gain);
34006f54:	3008      	adds	r0, #8
34006f56:	f000 bee9 	b.w	34007d2c <IMX335_SetGain>

34006f5a <CMW_IMX335_Run>:
{
34006f5a:	b508      	push	{r3, lr}
  ret = ISP_BackgroundProcess(&((CMW_IMX335_t *)io_ctx)->hIsp);
34006f5c:	3030      	adds	r0, #48	@ 0x30
34006f5e:	f7fe facf 	bl	34005500 <ISP_BackgroundProcess>
  return CMW_ERROR_NONE;
34006f62:	2800      	cmp	r0, #0
}
34006f64:	bf14      	ite	ne
34006f66:	f06f 0003 	mvnne.w	r0, #3
34006f6a:	2000      	moveq	r0, #0
34006f6c:	bd08      	pop	{r3, pc}

34006f6e <CMW_IMX335_DeInit>:
{
34006f6e:	b510      	push	{r4, lr}
34006f70:	4604      	mov	r4, r0
  ret = ISP_DeInit(&((CMW_IMX335_t *)io_ctx)->hIsp);
34006f72:	3030      	adds	r0, #48	@ 0x30
34006f74:	f7fe fa12 	bl	3400539c <ISP_DeInit>
  if (ret)
34006f78:	b110      	cbz	r0, 34006f80 <CMW_IMX335_DeInit+0x12>
    return CMW_ERROR_COMPONENT_FAILURE;
34006f7a:	f06f 0004 	mvn.w	r0, #4
}
34006f7e:	bd10      	pop	{r4, pc}
  ret = IMX335_DeInit(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
34006f80:	f104 0008 	add.w	r0, r4, #8
34006f84:	f000 feb1 	bl	34007cea <IMX335_DeInit>
  if (ret)
34006f88:	2800      	cmp	r0, #0
34006f8a:	d0f8      	beq.n	34006f7e <CMW_IMX335_DeInit+0x10>
34006f8c:	e7f5      	b.n	34006f7a <CMW_IMX335_DeInit+0xc>
	...

34006f90 <CMW_IMX335_Start>:
{
34006f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ISP_Init(&((CMW_IMX335_t *)io_ctx)->hIsp, ((CMW_IMX335_t *)io_ctx)->hdcmipp, 0, &((CMW_IMX335_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_IMX335);
34006f92:	4b10      	ldr	r3, [pc, #64]	@ (34006fd4 <CMW_IMX335_Start+0x44>)
34006f94:	f100 0530 	add.w	r5, r0, #48	@ 0x30
34006f98:	9300      	str	r3, [sp, #0]
{
34006f9a:	4604      	mov	r4, r0
  ret = ISP_Init(&((CMW_IMX335_t *)io_ctx)->hIsp, ((CMW_IMX335_t *)io_ctx)->hdcmipp, 0, &((CMW_IMX335_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_IMX335);
34006f9c:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
34006fa0:	f100 03b8 	add.w	r3, r0, #184	@ 0xb8
34006fa4:	2200      	movs	r2, #0
34006fa6:	4628      	mov	r0, r5
34006fa8:	f7fe f97c 	bl	340052a4 <ISP_Init>
  if (ret != ISP_OK)
34006fac:	b950      	cbnz	r0, 34006fc4 <CMW_IMX335_Start+0x34>
  ret = ISP_Start(&((CMW_IMX335_t *)io_ctx)->hIsp);
34006fae:	4628      	mov	r0, r5
34006fb0:	f7fe fa06 	bl	340053c0 <ISP_Start>
  if (ret != ISP_OK)
34006fb4:	b950      	cbnz	r0, 34006fcc <CMW_IMX335_Start+0x3c>
  return IMX335_Start(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
34006fb6:	f104 0008 	add.w	r0, r4, #8
}
34006fba:	b003      	add	sp, #12
34006fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return IMX335_Start(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
34006fc0:	f000 be76 	b.w	34007cb0 <IMX335_Start>
    return CMW_ERROR_COMPONENT_FAILURE;
34006fc4:	f06f 0004 	mvn.w	r0, #4
}
34006fc8:	b003      	add	sp, #12
34006fca:	bd30      	pop	{r4, r5, pc}
      return CMW_ERROR_PERIPH_FAILURE;
34006fcc:	f06f 0003 	mvn.w	r0, #3
34006fd0:	e7fa      	b.n	34006fc8 <CMW_IMX335_Start+0x38>
34006fd2:	bf00      	nop
34006fd4:	340283c0 	.word	0x340283c0

34006fd8 <CMW_IMX335_Init>:
{
34006fd8:	b538      	push	{r3, r4, r5, lr}
  if (width == 2592 && height == 1944)
34006fda:	e9d1 2300 	ldrd	r2, r3, [r1]
34006fde:	f5b2 6f22 	cmp.w	r2, #2592	@ 0xa20
{
34006fe2:	4605      	mov	r5, r0
34006fe4:	460c      	mov	r4, r1
  if (width == 2592 && height == 1944)
34006fe6:	d002      	beq.n	34006fee <CMW_IMX335_Init+0x16>
    return CMW_ERROR_WRONG_PARAM;
34006fe8:	f06f 0001 	mvn.w	r0, #1
}
34006fec:	bd38      	pop	{r3, r4, r5, pc}
  if (width == 2592 && height == 1944)
34006fee:	f5b3 6ff3 	cmp.w	r3, #1944	@ 0x798
34006ff2:	d1f9      	bne.n	34006fe8 <CMW_IMX335_Init+0x10>
  ret = CMW_IMX335_SetMirrorFlip(io_ctx, initSensor->mirrorFlip);
34006ff4:	6909      	ldr	r1, [r1, #16]
34006ff6:	f7ff ff81 	bl	34006efc <CMW_IMX335_SetMirrorFlip>
  if (ret)
34006ffa:	2800      	cmp	r0, #0
34006ffc:	d1f4      	bne.n	34006fe8 <CMW_IMX335_Init+0x10>
  ret = IMX335_Init(&((CMW_IMX335_t *)io_ctx)->ctx_driver, resolution, initSensor->pixel_format);
34006ffe:	2106      	movs	r1, #6
34007000:	68e2      	ldr	r2, [r4, #12]
34007002:	f105 0008 	add.w	r0, r5, #8
34007006:	f000 fe33 	bl	34007c70 <IMX335_Init>
    return CMW_ERROR_COMPONENT_FAILURE;
3400700a:	2800      	cmp	r0, #0
3400700c:	bf18      	it	ne
3400700e:	f06f 0004 	mvnne.w	r0, #4
34007012:	e7eb      	b.n	34006fec <CMW_IMX335_Init+0x14>

34007014 <CMW_IMX335_VsyncEventCallback>:
  switch (pipe)
34007014:	2901      	cmp	r1, #1
{
34007016:	b510      	push	{r4, lr}
  switch (pipe)
34007018:	d007      	beq.n	3400702a <CMW_IMX335_VsyncEventCallback+0x16>
3400701a:	2902      	cmp	r1, #2
3400701c:	d00f      	beq.n	3400703e <CMW_IMX335_VsyncEventCallback+0x2a>
3400701e:	b999      	cbnz	r1, 34007048 <CMW_IMX335_VsyncEventCallback+0x34>
}
34007020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncDumpFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007024:	3030      	adds	r0, #48	@ 0x30
34007026:	f7fe bae8 	b.w	340055fa <ISP_IncDumpFrameId>
      ISP_IncMainFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400702a:	f100 0430 	add.w	r4, r0, #48	@ 0x30
3400702e:	4620      	mov	r0, r4
34007030:	f7fe fadf 	bl	340055f2 <ISP_IncMainFrameId>
      ISP_GatherStatistics(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007034:	4620      	mov	r0, r4
}
34007036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_GatherStatistics(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400703a:	f7fe bad8 	b.w	340055ee <ISP_GatherStatistics>
      ISP_IncAncillaryFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400703e:	3030      	adds	r0, #48	@ 0x30
}
34007040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncAncillaryFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007044:	f7fe bad7 	b.w	340055f6 <ISP_IncAncillaryFrameId>
}
34007048:	bd10      	pop	{r4, pc}
	...

3400704c <CMW_IMX335_Probe>:

int CMW_IMX335_Probe(CMW_IMX335_t *io_ctx, CMW_Sensor_if_t *imx335_if)
{
3400704c:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400704e:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;
  io_ctx->ctx_driver.IO.Address = io_ctx->Address;
34007050:	8803      	ldrh	r3, [r0, #0]
{
34007052:	460d      	mov	r5, r1
  io_ctx->ctx_driver.IO.Address = io_ctx->Address;
34007054:	8203      	strh	r3, [r0, #16]
  io_ctx->ctx_driver.IO.Init = io_ctx->Init;
34007056:	f8d0 30e4 	ldr.w	r3, [r0, #228]	@ 0xe4
  io_ctx->ctx_driver.IO.ReadReg = io_ctx->ReadReg;
  io_ctx->ctx_driver.IO.WriteReg = io_ctx->WriteReg;

  CMW_IMX335_PowerOn(io_ctx);

  ret = IMX335_RegisterBusIO(&io_ctx->ctx_driver, &io_ctx->ctx_driver.IO);
3400705a:	3408      	adds	r4, #8
  io_ctx->ctx_driver.IO.Init = io_ctx->Init;
3400705c:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.IO.DeInit = io_ctx->DeInit;
3400705e:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
34007062:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.IO.GetTick = io_ctx->GetTick;
34007064:	f8d0 30f4 	ldr.w	r3, [r0, #244]	@ 0xf4
34007068:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.IO.ReadReg = io_ctx->ReadReg;
3400706a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
3400706e:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.IO.WriteReg = io_ctx->WriteReg;
34007070:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
34007074:	6143      	str	r3, [r0, #20]
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
34007076:	f8d0 30fc 	ldr.w	r3, [r0, #252]	@ 0xfc
3400707a:	2000      	movs	r0, #0
3400707c:	4798      	blx	r3
  io_ctx->Delay(100);
3400707e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34007082:	2064      	movs	r0, #100	@ 0x64
34007084:	4798      	blx	r3
  io_ctx->EnablePin(0);  /* RESET low (reset active low) */
34007086:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
3400708a:	2000      	movs	r0, #0
3400708c:	4798      	blx	r3
  io_ctx->Delay(100);
3400708e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34007092:	2064      	movs	r0, #100	@ 0x64
34007094:	4798      	blx	r3
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
34007096:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
3400709a:	2001      	movs	r0, #1
3400709c:	4798      	blx	r3
  io_ctx->Delay(100);
3400709e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340070a2:	2064      	movs	r0, #100	@ 0x64
340070a4:	4798      	blx	r3
  io_ctx->EnablePin(1);  /* RESET low (reset active low) */
340070a6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
340070aa:	2001      	movs	r0, #1
340070ac:	4798      	blx	r3
  io_ctx->Delay(100);
340070ae:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340070b2:	2064      	movs	r0, #100	@ 0x64
340070b4:	4798      	blx	r3
  ret = IMX335_RegisterBusIO(&io_ctx->ctx_driver, &io_ctx->ctx_driver.IO);
340070b6:	4621      	mov	r1, r4
340070b8:	4620      	mov	r0, r4
340070ba:	f000 fdbd 	bl	34007c38 <IMX335_RegisterBusIO>
  if (ret != IMX335_OK)
340070be:	4606      	mov	r6, r0
340070c0:	b120      	cbz	r0, 340070cc <CMW_IMX335_Probe+0x80>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
340070c2:	f06f 0404 	mvn.w	r4, #4
  imx335_if->SetFramerate = CMW_IMX335_SetFramerate;
  imx335_if->SetMirrorFlip = CMW_IMX335_SetMirrorFlip;
  imx335_if->GetSensorInfo = CMW_IMX335_GetSensorInfo;
  imx335_if->SetTestPattern = CMW_IMX335_SetTestPattern;
  return ret;
}
340070c6:	4620      	mov	r0, r4
340070c8:	b002      	add	sp, #8
340070ca:	bd70      	pop	{r4, r5, r6, pc}
  ret = IMX335_ReadID(&io_ctx->ctx_driver, &id);
340070cc:	4620      	mov	r0, r4
340070ce:	a901      	add	r1, sp, #4
340070d0:	f000 fe14 	bl	34007cfc <IMX335_ReadID>
  if (ret != IMX335_OK)
340070d4:	4604      	mov	r4, r0
340070d6:	2800      	cmp	r0, #0
340070d8:	d1f3      	bne.n	340070c2 <CMW_IMX335_Probe+0x76>
  if (id != IMX335_CHIP_ID)
340070da:	9b01      	ldr	r3, [sp, #4]
  memset(imx335_if, 0, sizeof(*imx335_if));
340070dc:	2250      	movs	r2, #80	@ 0x50
      ret = CMW_ERROR_UNKNOWN_COMPONENT;
340070de:	2b00      	cmp	r3, #0
340070e0:	bf08      	it	eq
340070e2:	4604      	moveq	r4, r0
  memset(imx335_if, 0, sizeof(*imx335_if));
340070e4:	4631      	mov	r1, r6
340070e6:	f105 0018 	add.w	r0, r5, #24
      ret = CMW_ERROR_UNKNOWN_COMPONENT;
340070ea:	bf18      	it	ne
340070ec:	f06f 0406 	mvnne.w	r4, #6
  memset(imx335_if, 0, sizeof(*imx335_if));
340070f0:	f017 fcc6 	bl	3401ea80 <memset>
  imx335_if->Init = CMW_IMX335_Init;
340070f4:	4b10      	ldr	r3, [pc, #64]	@ (34007138 <CMW_IMX335_Probe+0xec>)
340070f6:	602b      	str	r3, [r5, #0]
  imx335_if->Start = CMW_IMX335_Start;
340070f8:	4b10      	ldr	r3, [pc, #64]	@ (3400713c <CMW_IMX335_Probe+0xf0>)
340070fa:	60ab      	str	r3, [r5, #8]
  imx335_if->DeInit = CMW_IMX335_DeInit;
340070fc:	4b10      	ldr	r3, [pc, #64]	@ (34007140 <CMW_IMX335_Probe+0xf4>)
340070fe:	606b      	str	r3, [r5, #4]
  imx335_if->Run = CMW_IMX335_Run;
34007100:	4b10      	ldr	r3, [pc, #64]	@ (34007144 <CMW_IMX335_Probe+0xf8>)
34007102:	60eb      	str	r3, [r5, #12]
  imx335_if->VsyncEventCallback = CMW_IMX335_VsyncEventCallback;
34007104:	4b10      	ldr	r3, [pc, #64]	@ (34007148 <CMW_IMX335_Probe+0xfc>)
34007106:	612b      	str	r3, [r5, #16]
  imx335_if->FrameEventCallback = CMW_IMX335_FrameEventCallback;
34007108:	4b10      	ldr	r3, [pc, #64]	@ (3400714c <CMW_IMX335_Probe+0x100>)
3400710a:	616b      	str	r3, [r5, #20]
  imx335_if->ReadID = CMW_IMX335_ReadID;
3400710c:	4b10      	ldr	r3, [pc, #64]	@ (34007150 <CMW_IMX335_Probe+0x104>)
3400710e:	61eb      	str	r3, [r5, #28]
  imx335_if->SetGain = CMW_IMX335_SetGain;
34007110:	4b10      	ldr	r3, [pc, #64]	@ (34007154 <CMW_IMX335_Probe+0x108>)
34007112:	64ab      	str	r3, [r5, #72]	@ 0x48
  imx335_if->SetExposure = CMW_IMX335_SetExposure;
34007114:	4b10      	ldr	r3, [pc, #64]	@ (34007158 <CMW_IMX335_Probe+0x10c>)
34007116:	64eb      	str	r3, [r5, #76]	@ 0x4c
  imx335_if->SetWBRefMode = CMW_IMX335_SetWBRefMode;
34007118:	4b10      	ldr	r3, [pc, #64]	@ (3400715c <CMW_IMX335_Probe+0x110>)
3400711a:	656b      	str	r3, [r5, #84]	@ 0x54
  imx335_if->ListWBRefModes = CMW_IMX335_ListWBRefModes;
3400711c:	4b10      	ldr	r3, [pc, #64]	@ (34007160 <CMW_IMX335_Probe+0x114>)
3400711e:	65ab      	str	r3, [r5, #88]	@ 0x58
  imx335_if->SetFrequency = CMW_IMX335_SetFrequency;
34007120:	4b10      	ldr	r3, [pc, #64]	@ (34007164 <CMW_IMX335_Probe+0x118>)
34007122:	642b      	str	r3, [r5, #64]	@ 0x40
  imx335_if->SetFramerate = CMW_IMX335_SetFramerate;
34007124:	4b10      	ldr	r3, [pc, #64]	@ (34007168 <CMW_IMX335_Probe+0x11c>)
34007126:	646b      	str	r3, [r5, #68]	@ 0x44
  imx335_if->SetMirrorFlip = CMW_IMX335_SetMirrorFlip;
34007128:	4b10      	ldr	r3, [pc, #64]	@ (3400716c <CMW_IMX335_Probe+0x120>)
3400712a:	62eb      	str	r3, [r5, #44]	@ 0x2c
  imx335_if->GetSensorInfo = CMW_IMX335_GetSensorInfo;
3400712c:	4b10      	ldr	r3, [pc, #64]	@ (34007170 <CMW_IMX335_Probe+0x124>)
3400712e:	662b      	str	r3, [r5, #96]	@ 0x60
  imx335_if->SetTestPattern = CMW_IMX335_SetTestPattern;
34007130:	4b10      	ldr	r3, [pc, #64]	@ (34007174 <CMW_IMX335_Probe+0x128>)
34007132:	666b      	str	r3, [r5, #100]	@ 0x64
  return ret;
34007134:	e7c7      	b.n	340070c6 <CMW_IMX335_Probe+0x7a>
34007136:	bf00      	nop
34007138:	34006fd9 	.word	0x34006fd9
3400713c:	34006f91 	.word	0x34006f91
34007140:	34006f6f 	.word	0x34006f6f
34007144:	34006f5b 	.word	0x34006f5b
34007148:	34007015 	.word	0x34007015
3400714c:	34006e81 	.word	0x34006e81
34007150:	34006eab 	.word	0x34006eab
34007154:	34006f55 	.word	0x34006f55
34007158:	34006f4f 	.word	0x34006f4f
3400715c:	34006e83 	.word	0x34006e83
34007160:	34006e97 	.word	0x34006e97
34007164:	34006f49 	.word	0x34006f49
34007168:	34006f09 	.word	0x34006f09
3400716c:	34006efd 	.word	0x34006efd
34007170:	34006eb9 	.word	0x34006eb9
34007174:	34006eb1 	.word	0x34006eb1

34007178 <CMW_VD55G1_Read32>:
static int CMW_VD55G1_Read32(CMW_VD55G1_t *pObj, uint16_t addr, uint32_t *value)
{
  uint8_t data[4];
  int ret;

  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007178:	2304      	movs	r3, #4
{
3400717a:	b537      	push	{r0, r1, r2, r4, r5, lr}
3400717c:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
3400717e:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
34007182:	eb0d 0203 	add.w	r2, sp, r3
34007186:	8800      	ldrh	r0, [r0, #0]
34007188:	47a8      	blx	r5
  if (ret)
3400718a:	b908      	cbnz	r0, 34007190 <CMW_VD55G1_Read32+0x18>
    return ret;

  *value = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
3400718c:	9b01      	ldr	r3, [sp, #4]
3400718e:	6023      	str	r3, [r4, #0]

  return 0;
}
34007190:	b003      	add	sp, #12
34007192:	bd30      	pop	{r4, r5, pc}

34007194 <VD55G1_ShutdownPin>:

static void VD55G1_ShutdownPin(struct VD55G1_Ctx *ctx, int value)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  p_ctx->ShutdownPin(value);
34007194:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
34007198:	4608      	mov	r0, r1
3400719a:	4718      	bx	r3

3400719c <VD55G1_Read8>:
}

static int VD55G1_Read8(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t *value)
{
3400719c:	b410      	push	{r4}
  return pObj->ReadReg(pObj->Address, addr, value, 1);
3400719e:	6f84      	ldr	r4, [r0, #120]	@ 0x78
340071a0:	2301      	movs	r3, #1
340071a2:	46a4      	mov	ip, r4
340071a4:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read8(p_ctx, addr, value);
}
340071a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->ReadReg(pObj->Address, addr, value, 1);
340071ac:	4760      	bx	ip

340071ae <VD55G1_Read16>:

static int VD55G1_Read16(struct VD55G1_Ctx *ctx, uint16_t addr, uint16_t *value)
{
340071ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
340071b0:	2302      	movs	r3, #2
{
340071b2:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
340071b4:	6f85      	ldr	r5, [r0, #120]	@ 0x78
340071b6:	aa01      	add	r2, sp, #4
340071b8:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340071bc:	47a8      	blx	r5
  if (ret)
340071be:	b910      	cbnz	r0, 340071c6 <VD55G1_Read16+0x18>
  *value = (data[1] << 8) | data[0];
340071c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
340071c4:	8023      	strh	r3, [r4, #0]
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read16(p_ctx, addr, value);
}
340071c6:	b003      	add	sp, #12
340071c8:	bd30      	pop	{r4, r5, pc}

340071ca <VD55G1_Read32>:

static int VD55G1_Read32(struct VD55G1_Ctx *ctx, uint16_t addr, uint32_t *value)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read32(p_ctx, addr, value);
340071ca:	3808      	subs	r0, #8
340071cc:	f7ff bfd4 	b.w	34007178 <CMW_VD55G1_Read32>

340071d0 <VD55G1_Write8>:
}

static int VD55G1_Write8(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t value)
{
340071d0:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, &value, 1);
340071d2:	2301      	movs	r3, #1
340071d4:	6f44      	ldr	r4, [r0, #116]	@ 0x74
340071d6:	f88d 2007 	strb.w	r2, [sp, #7]
340071da:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340071de:	f10d 0207 	add.w	r2, sp, #7
340071e2:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write8(p_ctx, addr, value);
}
340071e4:	b002      	add	sp, #8
340071e6:	bd10      	pop	{r4, pc}

340071e8 <VD55G1_Write16>:

static int VD55G1_Write16(struct VD55G1_Ctx *ctx, uint16_t addr, uint16_t value)
{
340071e8:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 2);
340071ea:	2302      	movs	r3, #2
340071ec:	6f44      	ldr	r4, [r0, #116]	@ 0x74
340071ee:	f8ad 2006 	strh.w	r2, [sp, #6]
340071f2:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340071f6:	f10d 0206 	add.w	r2, sp, #6
340071fa:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write16(p_ctx, addr, value);
}
340071fc:	b002      	add	sp, #8
340071fe:	bd10      	pop	{r4, pc}

34007200 <VD55G1_Write32>:
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007200:	2304      	movs	r3, #4

static int VD55G1_Write32(struct VD55G1_Ctx *ctx, uint16_t addr, uint32_t value)
{
34007202:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007204:	6f44      	ldr	r4, [r0, #116]	@ 0x74
34007206:	9201      	str	r2, [sp, #4]
34007208:	f830 0c08 	ldrh.w	r0, [r0, #-8]
3400720c:	eb0d 0203 	add.w	r2, sp, r3
34007210:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write32(p_ctx, addr, value);
}
34007212:	b002      	add	sp, #8
34007214:	bd10      	pop	{r4, pc}

34007216 <VD55G1_WriteArray>:

static int VD55G1_WriteArray(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t *data, int data_len)
{
34007216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400721a:	4680      	mov	r8, r0
3400721c:	460d      	mov	r5, r1
3400721e:	4616      	mov	r6, r2
34007220:	461c      	mov	r4, r3
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);
  const unsigned int chunk_size = 128;
  uint16_t sz;
  int ret;

  while (data_len) {
34007222:	b914      	cbnz	r4, 3400722a <VD55G1_WriteArray+0x14>
    data_len -= sz;
    addr += sz;
    data += sz;
  }

  return 0;
34007224:	4620      	mov	r0, r4
}
34007226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sz = MIN(data_len, chunk_size);
3400722a:	2c80      	cmp	r4, #128	@ 0x80
3400722c:	46a1      	mov	r9, r4
3400722e:	bf28      	it	cs
34007230:	f04f 0980 	movcs.w	r9, #128	@ 0x80
34007234:	fa1f fa89 	uxth.w	sl, r9
    ret = p_ctx->WriteReg(p_ctx->Address, addr, data, sz);
34007238:	4653      	mov	r3, sl
3400723a:	4632      	mov	r2, r6
3400723c:	4629      	mov	r1, r5
3400723e:	f8d8 7074 	ldr.w	r7, [r8, #116]	@ 0x74
34007242:	f838 0c08 	ldrh.w	r0, [r8, #-8]
34007246:	47b8      	blx	r7
    if (ret)
34007248:	2800      	cmp	r0, #0
3400724a:	d1ec      	bne.n	34007226 <VD55G1_WriteArray+0x10>
    addr += sz;
3400724c:	44aa      	add	sl, r5
    data_len -= sz;
3400724e:	eba4 0409 	sub.w	r4, r4, r9
    addr += sz;
34007252:	fa1f f58a 	uxth.w	r5, sl
    data += sz;
34007256:	444e      	add	r6, r9
34007258:	e7e3      	b.n	34007222 <VD55G1_WriteArray+0xc>

3400725a <VD55G1_Delay>:

static void VD55G1_Delay(struct VD55G1_Ctx *ctx, uint32_t delay_in_ms)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  p_ctx->Delay(delay_in_ms);
3400725a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
3400725e:	4608      	mov	r0, r1
34007260:	4718      	bx	r3

34007262 <VD55G1_Log>:
  if (lvl > current_lvl)
    return ;

  vprintf(format, ap);
#endif
}
34007262:	4770      	bx	lr

34007264 <CMW_VD55G1_GetSensorInfo>:
  * @param  pInfo pointer to sensor info structure
  * @retval Component status
  */
static int32_t CMW_VD55G1_GetSensorInfo(void *io_ctx, ISP_SensorInfoTypeDef *info)
{
  if ((io_ctx ==  NULL) || (info == NULL))
34007264:	b140      	cbz	r0, 34007278 <CMW_VD55G1_GetSensorInfo+0x14>
34007266:	b139      	cbz	r1, 34007278 <CMW_VD55G1_GetSensorInfo+0x14>
    return CMW_ERROR_WRONG_PARAM;
  }

  /* Return the default full resolution */
  info->width = VD55G1_MAX_WIDTH;
  info->height = VD55G1_MAX_HEIGHT;
34007268:	f44f 7249 	mov.w	r2, #804	@ 0x324
3400726c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0

  return CMW_ERROR_NONE;
34007270:	2000      	movs	r0, #0
  info->height = VD55G1_MAX_HEIGHT;
34007272:	e9c1 2309 	strd	r2, r3, [r1, #36]	@ 0x24
  return CMW_ERROR_NONE;
34007276:	4770      	bx	lr
    return CMW_ERROR_WRONG_PARAM;
34007278:	f06f 0001 	mvn.w	r0, #1
}
3400727c:	4770      	bx	lr

3400727e <CMW_VD55G1_MirrorFlipConfig>:

static int32_t CMW_VD55G1_MirrorFlipConfig(void *io_ctx, uint32_t Config)
{
  int32_t ret = CMW_ERROR_NONE;

  switch (Config) {
3400727e:	2903      	cmp	r1, #3
34007280:	d80d      	bhi.n	3400729e <CMW_VD55G1_MirrorFlipConfig+0x20>
34007282:	e8df f001 	tbb	[pc, r1]
34007286:	0602      	.short	0x0602
34007288:	0a08      	.short	0x0a08
    case CMW_MIRRORFLIP_NONE:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP_NONE);
3400728a:	2100      	movs	r1, #0
      break;
    case CMW_MIRRORFLIP_MIRROR:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR);
      break;
    case CMW_MIRRORFLIP_FLIP_MIRROR:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP);
3400728c:	3008      	adds	r0, #8
3400728e:	f001 bbe6 	b.w	34008a5e <VD55G1_SetFlipMirrorMode>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_FLIP);
34007292:	2101      	movs	r1, #1
34007294:	e7fa      	b.n	3400728c <CMW_VD55G1_MirrorFlipConfig+0xe>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR);
34007296:	2102      	movs	r1, #2
34007298:	e7f8      	b.n	3400728c <CMW_VD55G1_MirrorFlipConfig+0xe>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP);
3400729a:	2103      	movs	r1, #3
3400729c:	e7f6      	b.n	3400728c <CMW_VD55G1_MirrorFlipConfig+0xe>
    default:
      ret = CMW_ERROR_PERIPH_FAILURE;
  }

  return ret;
}
3400729e:	f06f 0003 	mvn.w	r0, #3
340072a2:	4770      	bx	lr

340072a4 <CMW_VD55G1_Stop>:
{
340072a4:	b508      	push	{r3, lr}
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340072a6:	3008      	adds	r0, #8
340072a8:	f001 fbd2 	bl	34008a50 <VD55G1_Stop>
    return CMW_ERROR_PERIPH_FAILURE;
340072ac:	2800      	cmp	r0, #0
}
340072ae:	bf18      	it	ne
340072b0:	f06f 0003 	mvnne.w	r0, #3
340072b4:	bd08      	pop	{r3, pc}

340072b6 <CMW_VD55G1_Start>:
{
340072b6:	b510      	push	{r4, lr}
  ret = VD55G1_Start(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340072b8:	f100 0408 	add.w	r4, r0, #8
340072bc:	4620      	mov	r0, r4
340072be:	f001 f93b 	bl	34008538 <VD55G1_Start>
  if (ret) {
340072c2:	b120      	cbz	r0, 340072ce <CMW_VD55G1_Start+0x18>
    VD55G1_DeInit(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340072c4:	4620      	mov	r0, r4
340072c6:	f001 f923 	bl	34008510 <VD55G1_DeInit>
    return CMW_ERROR_PERIPH_FAILURE;
340072ca:	f06f 0003 	mvn.w	r0, #3
}
340072ce:	bd10      	pop	{r4, pc}

340072d0 <CMW_VD55G1_DeInit>:
{
340072d0:	b538      	push	{r3, r4, r5, lr}
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340072d2:	f100 0508 	add.w	r5, r0, #8
{
340072d6:	4604      	mov	r4, r0
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340072d8:	4628      	mov	r0, r5
340072da:	f001 fbb9 	bl	34008a50 <VD55G1_Stop>
  if (ret)
340072de:	b110      	cbz	r0, 340072e6 <CMW_VD55G1_DeInit+0x16>
    return CMW_ERROR_PERIPH_FAILURE;
340072e0:	f06f 0003 	mvn.w	r0, #3
}
340072e4:	bd38      	pop	{r3, r4, r5, pc}
  ret = VD55G1_DeInit(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
340072e6:	4628      	mov	r0, r5
340072e8:	f001 f912 	bl	34008510 <VD55G1_DeInit>
  if (ret)
340072ec:	2800      	cmp	r0, #0
340072ee:	d1f7      	bne.n	340072e0 <CMW_VD55G1_DeInit+0x10>
  ((CMW_VD55G1_t *)io_ctx)->IsInitialized = 0;
340072f0:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
  return CMW_ERROR_NONE;
340072f4:	e7f6      	b.n	340072e4 <CMW_VD55G1_DeInit+0x14>
	...

340072f8 <CMW_VD55G1_Init>:
{
340072f8:	b530      	push	{r4, r5, lr}
340072fa:	4604      	mov	r4, r0
340072fc:	b08f      	sub	sp, #60	@ 0x3c
340072fe:	460d      	mov	r5, r1
  VD55G1_Config_t config = { 0 };
34007300:	2234      	movs	r2, #52	@ 0x34
34007302:	2100      	movs	r1, #0
34007304:	a801      	add	r0, sp, #4
34007306:	f017 fbbb 	bl	3401ea80 <memset>
  if (((CMW_VD55G1_t *)io_ctx)->IsInitialized)
3400730a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
3400730e:	bb63      	cbnz	r3, 3400736a <CMW_VD55G1_Init+0x72>
  config.frame_rate = initSensor->fps;
34007310:	68ab      	ldr	r3, [r5, #8]
34007312:	9303      	str	r3, [sp, #12]
  ret = CMW_VD55G1_GetResType(initSensor->width, initSensor->height, &config.resolution);
34007314:	e9d5 2300 	ldrd	r2, r3, [r5]
  if (width == 320 && height == 240)
34007318:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
3400731c:	d104      	bne.n	34007328 <CMW_VD55G1_Init+0x30>
3400731e:	2bf0      	cmp	r3, #240	@ 0xf0
34007320:	d00b      	beq.n	3400733a <CMW_VD55G1_Init+0x42>
    return CMW_ERROR_WRONG_PARAM;
34007322:	f06f 0001 	mvn.w	r0, #1
34007326:	e021      	b.n	3400736c <CMW_VD55G1_Init+0x74>
  else if (width == 640 && height == 480)
34007328:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
3400732c:	d120      	bne.n	34007370 <CMW_VD55G1_Init+0x78>
3400732e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
34007332:	d1f6      	bne.n	34007322 <CMW_VD55G1_Init+0x2a>
    *res = VD55G1_RES_VGA_640_480;
34007334:	2301      	movs	r3, #1
      *res = VD55G1_RES_FULL_804_704;
34007336:	f88d 3008 	strb.w	r3, [sp, #8]
  config.ext_clock_freq_in_hz = ((CMW_VD55G1_t *)io_ctx)->ClockInHz;
3400733a:	6863      	ldr	r3, [r4, #4]
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
3400733c:	a901      	add	r1, sp, #4
  config.ext_clock_freq_in_hz = ((CMW_VD55G1_t *)io_ctx)->ClockInHz;
3400733e:	9301      	str	r3, [sp, #4]
  config.flip_mirror_mode = CMW_VD55G1_getMirrorFlipConfig(initSensor->mirrorFlip);
34007340:	692b      	ldr	r3, [r5, #16]
  config.out_itf.clock_lane_swap_enable = 1;
34007342:	2501      	movs	r5, #1
  config.flip_mirror_mode = CMW_VD55G1_getMirrorFlipConfig(initSensor->mirrorFlip);
34007344:	2b03      	cmp	r3, #3
34007346:	bf28      	it	cs
34007348:	2303      	movcs	r3, #3
3400734a:	f88d 3010 	strb.w	r3, [sp, #16]
  config.out_itf.clock_lane_swap_enable = 1;
3400734e:	4b12      	ldr	r3, [pc, #72]	@ (34007398 <CMW_VD55G1_Init+0xa0>)
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007350:	f104 0008 	add.w	r0, r4, #8
  config.out_itf.clock_lane_swap_enable = 1;
34007354:	e9cd 3505 	strd	r3, r5, [sp, #20]
    config.gpio_ctrl[i] = VD55G1_GPIO_GPIO_IN;
34007358:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
  config.out_itf.data_lane_swap_enable = 1;
3400735c:	9507      	str	r5, [sp, #28]
    config.gpio_ctrl[i] = VD55G1_GPIO_GPIO_IN;
3400735e:	930d      	str	r3, [sp, #52]	@ 0x34
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007360:	f000 ffd2 	bl	34008308 <VD55G1_Init>
  if (ret)
34007364:	b9a0      	cbnz	r0, 34007390 <CMW_VD55G1_Init+0x98>
  ((CMW_VD55G1_t *)io_ctx)->IsInitialized = 1;
34007366:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
    return CMW_ERROR_NONE;
3400736a:	2000      	movs	r0, #0
}
3400736c:	b00f      	add	sp, #60	@ 0x3c
3400736e:	bd30      	pop	{r4, r5, pc}
  else if (width == 800 && height == 600)
34007370:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
34007374:	d104      	bne.n	34007380 <CMW_VD55G1_Init+0x88>
34007376:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
3400737a:	d1d2      	bne.n	34007322 <CMW_VD55G1_Init+0x2a>
    *res = VD55G1_RES_SXGA_800_600;
3400737c:	2302      	movs	r3, #2
3400737e:	e7da      	b.n	34007336 <CMW_VD55G1_Init+0x3e>
  else if (width == 804 && height == 704)
34007380:	f5b2 7f49 	cmp.w	r2, #804	@ 0x324
34007384:	d1cd      	bne.n	34007322 <CMW_VD55G1_Init+0x2a>
34007386:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
3400738a:	d1ca      	bne.n	34007322 <CMW_VD55G1_Init+0x2a>
      *res = VD55G1_RES_FULL_804_704;
3400738c:	2303      	movs	r3, #3
3400738e:	e7d2      	b.n	34007336 <CMW_VD55G1_Init+0x3e>
    return CMW_ERROR_PERIPH_FAILURE;
34007390:	f06f 0003 	mvn.w	r0, #3
34007394:	e7ea      	b.n	3400736c <CMW_VD55G1_Init+0x74>
34007396:	bf00      	nop
34007398:	2fec1100 	.word	0x2fec1100

3400739c <CMW_VD55G1_Probe>:
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
  io_ctx->Delay(20); /* NRST de-asserted during 20ms */
}

int CMW_VD55G1_Probe(CMW_VD55G1_t *io_ctx, CMW_Sensor_if_t *vd55g1_if)
{
3400739c:	b537      	push	{r0, r1, r2, r4, r5, lr}
3400739e:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;

  io_ctx->ctx_driver.shutdown_pin = VD55G1_ShutdownPin;
340073a0:	4b26      	ldr	r3, [pc, #152]	@ (3400743c <CMW_VD55G1_Probe+0xa0>)
{
340073a2:	460d      	mov	r5, r1
  io_ctx->ctx_driver.shutdown_pin = VD55G1_ShutdownPin;
340073a4:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.read8 = VD55G1_Read8;
340073a6:	4b26      	ldr	r3, [pc, #152]	@ (34007440 <CMW_VD55G1_Probe+0xa4>)
340073a8:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.read16 = VD55G1_Read16;
340073aa:	4b26      	ldr	r3, [pc, #152]	@ (34007444 <CMW_VD55G1_Probe+0xa8>)
340073ac:	6103      	str	r3, [r0, #16]
  io_ctx->ctx_driver.read32 = VD55G1_Read32;
340073ae:	4b26      	ldr	r3, [pc, #152]	@ (34007448 <CMW_VD55G1_Probe+0xac>)
340073b0:	6143      	str	r3, [r0, #20]
  io_ctx->ctx_driver.write8 = VD55G1_Write8;
340073b2:	4b26      	ldr	r3, [pc, #152]	@ (3400744c <CMW_VD55G1_Probe+0xb0>)
340073b4:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.write16 = VD55G1_Write16;
340073b6:	4b26      	ldr	r3, [pc, #152]	@ (34007450 <CMW_VD55G1_Probe+0xb4>)
340073b8:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.write32 = VD55G1_Write32;
340073ba:	4b26      	ldr	r3, [pc, #152]	@ (34007454 <CMW_VD55G1_Probe+0xb8>)
340073bc:	6203      	str	r3, [r0, #32]
  io_ctx->ctx_driver.write_array = VD55G1_WriteArray;
340073be:	4b26      	ldr	r3, [pc, #152]	@ (34007458 <CMW_VD55G1_Probe+0xbc>)
340073c0:	6243      	str	r3, [r0, #36]	@ 0x24
  io_ctx->ctx_driver.delay = VD55G1_Delay;
340073c2:	4b26      	ldr	r3, [pc, #152]	@ (3400745c <CMW_VD55G1_Probe+0xc0>)
340073c4:	6283      	str	r3, [r0, #40]	@ 0x28
  io_ctx->ctx_driver.log = VD55G1_Log;
340073c6:	4b26      	ldr	r3, [pc, #152]	@ (34007460 <CMW_VD55G1_Probe+0xc4>)
340073c8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
340073ca:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
340073ce:	2000      	movs	r0, #0
340073d0:	4798      	blx	r3
  io_ctx->Delay(200); /* NRST signals asserted during 200ms */
340073d2:	20c8      	movs	r0, #200	@ 0xc8
340073d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340073d8:	4798      	blx	r3
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
340073da:	2001      	movs	r0, #1
340073dc:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
340073e0:	4798      	blx	r3
  io_ctx->Delay(20); /* NRST de-asserted during 20ms */
340073e2:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340073e6:	2014      	movs	r0, #20
340073e8:	4798      	blx	r3
  if (!io_ctx->Init)
340073ea:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340073ec:	b923      	cbnz	r3, 340073f8 <CMW_VD55G1_Probe+0x5c>
  CMW_VD55G1_PowerOn(io_ctx);

  ret = VD55G1_RegisterBusIO(io_ctx);
  if (ret != CMW_ERROR_NONE)
  {
    return CMW_ERROR_COMPONENT_FAILURE;
340073ee:	f06f 0404 	mvn.w	r4, #4
  vd55g1_if->Start = CMW_VD55G1_Start;
  vd55g1_if->Stop = CMW_VD55G1_Stop;
  vd55g1_if->SetMirrorFlip = CMW_VD55G1_MirrorFlipConfig;
  vd55g1_if->GetSensorInfo = CMW_VD55G1_GetSensorInfo;
  return ret;
}
340073f2:	4620      	mov	r0, r4
340073f4:	b003      	add	sp, #12
340073f6:	bd30      	pop	{r4, r5, pc}
  ret = io_ctx->Init();
340073f8:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
340073fa:	4601      	mov	r1, r0
340073fc:	2800      	cmp	r0, #0
340073fe:	d1f6      	bne.n	340073ee <CMW_VD55G1_Probe+0x52>
  ret = CMW_VD55G1_Read32(io_ctx, VD55G1_REG_MODEL_ID, &reg32);
34007400:	4620      	mov	r0, r4
34007402:	aa01      	add	r2, sp, #4
34007404:	f7ff feb8 	bl	34007178 <CMW_VD55G1_Read32>
  if (ret)
34007408:	4604      	mov	r4, r0
3400740a:	2800      	cmp	r0, #0
3400740c:	d1ef      	bne.n	340073ee <CMW_VD55G1_Probe+0x52>
  if (id != VD55G1_CHIP_ID)
3400740e:	9a01      	ldr	r2, [sp, #4]
34007410:	4b14      	ldr	r3, [pc, #80]	@ (34007464 <CMW_VD55G1_Probe+0xc8>)
34007412:	429a      	cmp	r2, r3
34007414:	d1eb      	bne.n	340073ee <CMW_VD55G1_Probe+0x52>
  memset(vd55g1_if, 0, sizeof(*vd55g1_if));
34007416:	4601      	mov	r1, r0
34007418:	225c      	movs	r2, #92	@ 0x5c
3400741a:	f105 000c 	add.w	r0, r5, #12
3400741e:	f017 fb2f 	bl	3401ea80 <memset>
  vd55g1_if->Init = CMW_VD55G1_Init;
34007422:	4b11      	ldr	r3, [pc, #68]	@ (34007468 <CMW_VD55G1_Probe+0xcc>)
34007424:	602b      	str	r3, [r5, #0]
  vd55g1_if->DeInit = CMW_VD55G1_DeInit;
34007426:	4b11      	ldr	r3, [pc, #68]	@ (3400746c <CMW_VD55G1_Probe+0xd0>)
34007428:	606b      	str	r3, [r5, #4]
  vd55g1_if->Start = CMW_VD55G1_Start;
3400742a:	4b11      	ldr	r3, [pc, #68]	@ (34007470 <CMW_VD55G1_Probe+0xd4>)
3400742c:	60ab      	str	r3, [r5, #8]
  vd55g1_if->Stop = CMW_VD55G1_Stop;
3400742e:	4b11      	ldr	r3, [pc, #68]	@ (34007474 <CMW_VD55G1_Probe+0xd8>)
34007430:	61ab      	str	r3, [r5, #24]
  vd55g1_if->SetMirrorFlip = CMW_VD55G1_MirrorFlipConfig;
34007432:	4b11      	ldr	r3, [pc, #68]	@ (34007478 <CMW_VD55G1_Probe+0xdc>)
34007434:	62eb      	str	r3, [r5, #44]	@ 0x2c
  vd55g1_if->GetSensorInfo = CMW_VD55G1_GetSensorInfo;
34007436:	4b11      	ldr	r3, [pc, #68]	@ (3400747c <CMW_VD55G1_Probe+0xe0>)
34007438:	662b      	str	r3, [r5, #96]	@ 0x60
  return ret;
3400743a:	e7da      	b.n	340073f2 <CMW_VD55G1_Probe+0x56>
3400743c:	34007195 	.word	0x34007195
34007440:	3400719d 	.word	0x3400719d
34007444:	340071af 	.word	0x340071af
34007448:	340071cb 	.word	0x340071cb
3400744c:	340071d1 	.word	0x340071d1
34007450:	340071e9 	.word	0x340071e9
34007454:	34007201 	.word	0x34007201
34007458:	34007217 	.word	0x34007217
3400745c:	3400725b 	.word	0x3400725b
34007460:	34007263 	.word	0x34007263
34007464:	53354731 	.word	0x53354731
34007468:	340072f9 	.word	0x340072f9
3400746c:	340072d1 	.word	0x340072d1
34007470:	340072b7 	.word	0x340072b7
34007474:	340072a5 	.word	0x340072a5
34007478:	3400727f 	.word	0x3400727f
3400747c:	34007265 	.word	0x34007265

34007480 <CMW_VD66GY_Read16>:
{
  return pObj->ReadReg(pObj->Address, addr, value, 1);
}

static int CMW_VD66GY_Read16(CMW_VD66GY_t *pObj, uint16_t addr, uint16_t *value)
{
34007480:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t data[2];
  int ret;

  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
34007482:	2302      	movs	r3, #2
{
34007484:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
34007486:	f8d0 5130 	ldr.w	r5, [r0, #304]	@ 0x130
3400748a:	aa01      	add	r2, sp, #4
3400748c:	8800      	ldrh	r0, [r0, #0]
3400748e:	47a8      	blx	r5
  if (ret)
34007490:	b910      	cbnz	r0, 34007498 <CMW_VD66GY_Read16+0x18>
    return ret;

  *value = (data[1] << 8) | data[0];
34007492:	f8bd 3004 	ldrh.w	r3, [sp, #4]
34007496:	8023      	strh	r3, [r4, #0]

  return CMW_ERROR_NONE;
}
34007498:	b003      	add	sp, #12
3400749a:	bd30      	pop	{r4, r5, pc}

3400749c <VD6G_ShutdownPin>:

static void VD6G_ShutdownPin(struct VD6G_Ctx *ctx, int value)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  p_ctx->ShutdownPin(value);
3400749c:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
340074a0:	4608      	mov	r0, r1
340074a2:	4718      	bx	r3

340074a4 <VD6G_Read8>:
}

static int VD6G_Read8(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t *value)
{
340074a4:	b410      	push	{r4}
  return pObj->ReadReg(pObj->Address, addr, value, 1);
340074a6:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
340074aa:	2301      	movs	r3, #1
340074ac:	46a4      	mov	ip, r4
340074ae:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read8(p_ctx, addr, value);
}
340074b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->ReadReg(pObj->Address, addr, value, 1);
340074b6:	4760      	bx	ip

340074b8 <VD6G_Read16>:

static int VD6G_Read16(struct VD6G_Ctx *ctx, uint16_t addr, uint16_t *value)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read16(p_ctx, addr, value);
340074b8:	3808      	subs	r0, #8
340074ba:	f7ff bfe1 	b.w	34007480 <CMW_VD66GY_Read16>

340074be <VD6G_Read32>:
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
340074be:	2304      	movs	r3, #4
}

static int VD6G_Read32(struct VD6G_Ctx *ctx, uint16_t addr, uint32_t *value)
{
340074c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
340074c2:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
340074c4:	f8d0 5128 	ldr.w	r5, [r0, #296]	@ 0x128
340074c8:	eb0d 0203 	add.w	r2, sp, r3
340074cc:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340074d0:	47a8      	blx	r5
  if (ret)
340074d2:	b908      	cbnz	r0, 340074d8 <VD6G_Read32+0x1a>
  *value = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
340074d4:	9b01      	ldr	r3, [sp, #4]
340074d6:	6023      	str	r3, [r4, #0]
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read32(p_ctx, addr, value);
}
340074d8:	b003      	add	sp, #12
340074da:	bd30      	pop	{r4, r5, pc}

340074dc <VD6G_Write8>:

static int VD6G_Write8(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t value)
{
340074dc:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, &value, 1);
340074de:	2301      	movs	r3, #1
340074e0:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
340074e4:	f88d 2007 	strb.w	r2, [sp, #7]
340074e8:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340074ec:	f10d 0207 	add.w	r2, sp, #7
340074f0:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write8(p_ctx, addr, value);
}
340074f2:	b002      	add	sp, #8
340074f4:	bd10      	pop	{r4, pc}

340074f6 <VD6G_Write16>:

static int VD6G_Write16(struct VD6G_Ctx *ctx, uint16_t addr, uint16_t value)
{
340074f6:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 2);
340074f8:	2302      	movs	r3, #2
340074fa:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
340074fe:	f8ad 2006 	strh.w	r2, [sp, #6]
34007502:	f830 0c08 	ldrh.w	r0, [r0, #-8]
34007506:	f10d 0206 	add.w	r2, sp, #6
3400750a:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write16(p_ctx, addr, value);
}
3400750c:	b002      	add	sp, #8
3400750e:	bd10      	pop	{r4, pc}

34007510 <VD6G_Write32>:
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007510:	2304      	movs	r3, #4

static int VD6G_Write32(struct VD6G_Ctx *ctx, uint16_t addr, uint32_t value)
{
34007512:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007514:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007518:	9201      	str	r2, [sp, #4]
3400751a:	f830 0c08 	ldrh.w	r0, [r0, #-8]
3400751e:	eb0d 0203 	add.w	r2, sp, r3
34007522:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write32(p_ctx, addr, value);
}
34007524:	b002      	add	sp, #8
34007526:	bd10      	pop	{r4, pc}

34007528 <VD6G_WriteArray>:

static int VD6G_WriteArray(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t *data, int data_len)
{
34007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400752c:	4680      	mov	r8, r0
3400752e:	460d      	mov	r5, r1
34007530:	4616      	mov	r6, r2
34007532:	461c      	mov	r4, r3
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);
  const unsigned int chunk_size = 128;
  uint16_t sz;
  int ret;

  while (data_len) {
34007534:	b914      	cbnz	r4, 3400753c <VD6G_WriteArray+0x14>
    data_len -= sz;
    addr += sz;
    data += sz;
  }

  return 0;
34007536:	4620      	mov	r0, r4
}
34007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sz = MIN(data_len, chunk_size);
3400753c:	2c80      	cmp	r4, #128	@ 0x80
3400753e:	46a1      	mov	r9, r4
34007540:	bf28      	it	cs
34007542:	f04f 0980 	movcs.w	r9, #128	@ 0x80
34007546:	fa1f fa89 	uxth.w	sl, r9
    ret = p_ctx->WriteReg(p_ctx->Address, addr, data, sz);
3400754a:	4653      	mov	r3, sl
3400754c:	4632      	mov	r2, r6
3400754e:	4629      	mov	r1, r5
34007550:	f8d8 7124 	ldr.w	r7, [r8, #292]	@ 0x124
34007554:	f838 0c08 	ldrh.w	r0, [r8, #-8]
34007558:	47b8      	blx	r7
    if (ret)
3400755a:	2800      	cmp	r0, #0
3400755c:	d1ec      	bne.n	34007538 <VD6G_WriteArray+0x10>
    addr += sz;
3400755e:	44aa      	add	sl, r5
    data_len -= sz;
34007560:	eba4 0409 	sub.w	r4, r4, r9
    addr += sz;
34007564:	fa1f f58a 	uxth.w	r5, sl
    data += sz;
34007568:	444e      	add	r6, r9
3400756a:	e7e3      	b.n	34007534 <VD6G_WriteArray+0xc>

3400756c <VD6G_Delay>:

static void VD6G_Delay(struct VD6G_Ctx *ctx, uint32_t delay_in_ms)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  p_ctx->Delay(delay_in_ms);
3400756c:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
34007570:	4608      	mov	r0, r1
34007572:	4718      	bx	r3

34007574 <VD6G_Log>:
  if (lvl > current_lvl)
    return ;

  vprintf(format, ap);
#endif
}
34007574:	4770      	bx	lr

34007576 <CMW_VD66GY_FrameEventCallback>:
#endif
}

static void CMW_VD66GY_FrameEventCallback(void *io_ctx, uint32_t pipe)
{
}
34007576:	4770      	bx	lr

34007578 <CMW_VD66GY_SetGain>:
{
34007578:	b5f0      	push	{r4, r5, r6, r7, lr}
3400757a:	ed2d 8b08 	vpush	{d8-d11}
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
3400757e:	f100 0608 	add.w	r6, r0, #8
{
34007582:	b085      	sub	sp, #20
34007584:	460d      	mov	r5, r1
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007586:	4630      	mov	r0, r6
34007588:	f10d 020b 	add.w	r2, sp, #11
3400758c:	f10d 010a 	add.w	r1, sp, #10
34007590:	f002 f86c 	bl	3400966c <VD6G_GetAnalogGainRegRange>
  if (ret)
34007594:	2800      	cmp	r0, #0
34007596:	f040 80bc 	bne.w	34007712 <CMW_VD66GY_SetGain+0x19a>
  ret = VD6G_GetDigitalGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &dgain_regmin, &dgain_regmax);
3400759a:	4630      	mov	r0, r6
3400759c:	f10d 020e 	add.w	r2, sp, #14
340075a0:	a903      	add	r1, sp, #12
340075a2:	f002 f8cf 	bl	34009744 <VD6G_GetDigitalGainRegRange>
  if (ret)
340075a6:	2800      	cmp	r0, #0
340075a8:	f040 80b3 	bne.w	34007712 <CMW_VD66GY_SetGain+0x19a>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340075ac:	2420      	movs	r4, #32
340075ae:	f89d 300a 	ldrb.w	r3, [sp, #10]
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340075b2:	eeb3 ab04 	vmov.f64	d10, #52	@ 0x41a00000  20.0
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340075b6:	f1c3 0320 	rsb	r3, r3, #32
340075ba:	fb94 f3f3 	sdiv	r3, r4, r3
340075be:	ee00 3a10 	vmov	s0, r3
340075c2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
340075c6:	f019 fbdf 	bl	34020d88 <log10>
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340075ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340075ce:	eeb0 8b40 	vmov.f64	d8, d0
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340075d2:	1ae3      	subs	r3, r4, r3
340075d4:	fb94 f3f3 	sdiv	r3, r4, r3
340075d8:	ee00 3a10 	vmov	s0, r3
340075dc:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
340075e0:	f019 fbd2 	bl	34020d88 <log10>
340075e4:	ed9f bb58 	vldr	d11, [pc, #352]	@ 34007748 <CMW_VD66GY_SetGain+0x1d0>
340075e8:	ee20 0b0a 	vmul.f64	d0, d0, d10
340075ec:	ee20 0b0b 	vmul.f64	d0, d0, d11
340075f0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340075f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340075f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
340075fc:	0a1b      	lsrs	r3, r3, #8
340075fe:	ee00 3a10 	vmov	s0, r3
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007602:	ee17 7a90 	vmov	r7, s15
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007606:	ee07 2a90 	vmov	s15, r2
3400760a:	ed9f 9a55 	vldr	s18, [pc, #340]	@ 34007760 <CMW_VD66GY_SetGain+0x1e8>
3400760e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007612:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007616:	eea7 0a89 	vfma.f32	s0, s15, s18
3400761a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400761e:	f019 fbb3 	bl	34020d88 <log10>
34007622:	ee20 0b0a 	vmul.f64	d0, d0, d10
34007626:	ee20 0b0b 	vmul.f64	d0, d0, d11
3400762a:	eefc 7bc0 	vcvt.u32.f64	s15, d0
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
3400762e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34007632:	f89d 200e 	ldrb.w	r2, [sp, #14]
34007636:	0a1b      	lsrs	r3, r3, #8
34007638:	ee00 3a10 	vmov	s0, r3
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
3400763c:	ee17 4a90 	vmov	r4, s15
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007640:	ee07 2a90 	vmov	s15, r2
34007644:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400764c:	eea7 0a89 	vfma.f32	s0, s15, s18
34007650:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34007654:	f019 fb98 	bl	34020d88 <log10>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007658:	ee28 8b0a 	vmul.f64	d8, d8, d10
3400765c:	ee28 8b0b 	vmul.f64	d8, d8, d11
34007660:	eebc 8bc8 	vcvt.u32.f64	s16, d8
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007664:	ee20 0b0a 	vmul.f64	d0, d0, d10
  if ((gain < dgain_min_mdB + again_min_mdB)
34007668:	ee18 3a10 	vmov	r3, s16
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
3400766c:	ee20 0b0b 	vmul.f64	d0, d0, d11
  if ((gain < dgain_min_mdB + again_min_mdB)
34007670:	4423      	add	r3, r4
34007672:	42ab      	cmp	r3, r5
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007674:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  if ((gain < dgain_min_mdB + again_min_mdB)
34007678:	d861      	bhi.n	3400773e <CMW_VD66GY_SetGain+0x1c6>
      || (gain > dgain_max_mdB + again_max_mdB))
3400767a:	ee10 3a10 	vmov	r3, s0
3400767e:	443b      	add	r3, r7
34007680:	429d      	cmp	r5, r3
34007682:	d85c      	bhi.n	3400773e <CMW_VD66GY_SetGain+0x1c6>
  if (gain <= again_max_mdB)
34007684:	42bd      	cmp	r5, r7
34007686:	d848      	bhi.n	3400771a <CMW_VD66GY_SetGain+0x1a2>
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - dgain_min_mdB));
34007688:	1b2d      	subs	r5, r5, r4
3400768a:	ee07 5a90 	vmov	s15, r5
3400768e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007692:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007696:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
3400769a:	ee81 1b0a 	vdiv.f64	d1, d1, d10
3400769e:	f019 fc7b 	bl	34020f98 <pow>
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)dgain_min_mdB);
340076a2:	ee07 4a90 	vmov	s15, r4
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - dgain_min_mdB));
340076a6:	eeb0 9b40 	vmov.f64	d9, d0
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
340076aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
340076ae:	ee87 1b0b 	vdiv.f64	d1, d7, d11
340076b2:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
340076b6:	ee81 1b0a 	vdiv.f64	d1, d1, d10
340076ba:	f019 fc6d 	bl	34020f98 <pow>
  ret = VD6G_SetAnalogGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, (int) (32 - (32 / analog_linear_gain)));
340076be:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 34007750 <CMW_VD66GY_SetGain+0x1d8>
340076c2:	ee87 6b09 	vdiv.f64	d6, d7, d9
340076c6:	ee37 7b46 	vsub.f64	d7, d7, d6
340076ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
340076ce:	4630      	mov	r0, r6
340076d0:	ee17 1a90 	vmov	r1, s15
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
340076d4:	eeb0 8b40 	vmov.f64	d8, d0
  ret = VD6G_SetAnalogGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, (int) (32 - (32 / analog_linear_gain)));
340076d8:	f002 f804 	bl	340096e4 <VD6G_SetAnalogGain>
  if (ret)
340076dc:	b9c8      	cbnz	r0, 34007712 <CMW_VD66GY_SetGain+0x19a>
  ret = VD6G_SetDigitalGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, FLOAT_TO_FP58(digital_linear_gain));
340076de:	eefc 7bc8 	vcvt.u32.f64	s15, d8
340076e2:	ee17 3a90 	vmov	r3, s15
340076e6:	b299      	uxth	r1, r3
340076e8:	ee07 1a90 	vmov	s15, r1
340076ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
340076f0:	ee38 8b47 	vsub.f64	d8, d8, d7
340076f4:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 34007758 <CMW_VD66GY_SetGain+0x1e0>
340076f8:	ee28 8b07 	vmul.f64	d8, d8, d7
340076fc:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34007700:	edcd 7a01 	vstr	s15, [sp, #4]
34007704:	f89d 3004 	ldrb.w	r3, [sp, #4]
34007708:	4630      	mov	r0, r6
3400770a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
3400770e:	f002 f847 	bl	340097a0 <VD6G_SetDigitalGain>
}
34007712:	b005      	add	sp, #20
34007714:	ecbd 8b08 	vpop	{d8-d11}
34007718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)again_max_mdB);
3400771a:	ee07 7a90 	vmov	s15, r7
3400771e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007722:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007726:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
3400772a:	ee81 1b0a 	vdiv.f64	d1, d1, d10
3400772e:	f019 fc33 	bl	34020f98 <pow>
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007732:	1bed      	subs	r5, r5, r7
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)again_max_mdB);
34007734:	eeb0 9b40 	vmov.f64	d9, d0
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007738:	ee07 5a90 	vmov	s15, r5
3400773c:	e7b5      	b.n	340076aa <CMW_VD66GY_SetGain+0x132>
    return -1;
3400773e:	f04f 30ff 	mov.w	r0, #4294967295
34007742:	e7e6      	b.n	34007712 <CMW_VD66GY_SetGain+0x19a>
34007744:	f3af 8000 	nop.w
34007748:	00000000 	.word	0x00000000
3400774c:	408f4000 	.word	0x408f4000
34007750:	00000000 	.word	0x00000000
34007754:	40400000 	.word	0x40400000
34007758:	00000000 	.word	0x00000000
3400775c:	40700000 	.word	0x40700000
34007760:	3b800000 	.word	0x3b800000

34007764 <CMW_VD66GY_SetExposure>:
  return VD6G_SetExposureTime(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, exposure);
34007764:	3008      	adds	r0, #8
34007766:	f002 b8bd 	b.w	340098e4 <VD6G_SetExposureTime>

3400776a <CMW_VD66GY_SetExposureMode>:
  switch (mode)
3400776a:	2901      	cmp	r1, #1
{
3400776c:	b508      	push	{r3, lr}
3400776e:	f100 0008 	add.w	r0, r0, #8
  switch (mode)
34007772:	d002      	beq.n	3400777a <CMW_VD66GY_SetExposureMode+0x10>
34007774:	2902      	cmp	r1, #2
      ret = VD6G_SetExposureMode(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, VD6G_EXPOSURE_AUTO);
34007776:	bf18      	it	ne
34007778:	2100      	movne	r1, #0
3400777a:	f001 ff6d 	bl	34009658 <VD6G_SetExposureMode>
  return (ret == 0) ? CMW_ERROR_NONE : CMW_ERROR_UNKNOWN_FAILURE;
3400777e:	2800      	cmp	r0, #0
}
34007780:	bf18      	it	ne
34007782:	f06f 0005 	mvnne.w	r0, #5
34007786:	bd08      	pop	{r3, pc}

34007788 <CMW_VD66GY_SetWBRefMode>:
{
34007788:	b508      	push	{r3, lr}
  ret = ISP_SetWBRefMode(&((CMW_VD66GY_t *)io_ctx)->hIsp, Automatic, RefColorTemp);
3400778a:	3070      	adds	r0, #112	@ 0x70
3400778c:	f7fd fedb 	bl	34005546 <ISP_SetWBRefMode>
  return CMW_ERROR_NONE;
34007790:	2800      	cmp	r0, #0
}
34007792:	bf14      	ite	ne
34007794:	f06f 0003 	mvnne.w	r0, #3
34007798:	2000      	moveq	r0, #0
3400779a:	bd08      	pop	{r3, pc}

3400779c <CMW_VD66GY_ListWBRefModes>:
{
3400779c:	b508      	push	{r3, lr}
  ret = ISP_ListWBRefModes(&((CMW_VD66GY_t *)io_ctx)->hIsp, RefColorTemp);
3400779e:	3070      	adds	r0, #112	@ 0x70
340077a0:	f7fd febe 	bl	34005520 <ISP_ListWBRefModes>
  return CMW_ERROR_NONE;
340077a4:	2800      	cmp	r0, #0
}
340077a6:	bf14      	ite	ne
340077a8:	f06f 0003 	mvnne.w	r0, #3
340077ac:	2000      	moveq	r0, #0
340077ae:	bd08      	pop	{r3, pc}

340077b0 <CMW_VD66GY_GetSensorInfo>:
{
340077b0:	b570      	push	{r4, r5, r6, lr}
340077b2:	ed2d 8b08 	vpush	{d8-d11}
340077b6:	460c      	mov	r4, r1
  if ((!io_ctx) || (info == NULL))
340077b8:	4605      	mov	r5, r0
{
340077ba:	b082      	sub	sp, #8
  if ((!io_ctx) || (info == NULL))
340077bc:	2800      	cmp	r0, #0
340077be:	f000 80a0 	beq.w	34007902 <CMW_VD66GY_GetSensorInfo+0x152>
340077c2:	2900      	cmp	r1, #0
340077c4:	f000 809d 	beq.w	34007902 <CMW_VD66GY_GetSensorInfo+0x152>
    strcpy(info->name, VD66GY_NAME);
340077c8:	4951      	ldr	r1, [pc, #324]	@ (34007910 <CMW_VD66GY_GetSensorInfo+0x160>)
340077ca:	4620      	mov	r0, r4
340077cc:	f017 fbc9 	bl	3401ef62 <strcpy>
  info->bayer_pattern = ((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer - 1;
340077d0:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
  info->height = VD6G_MAX_HEIGHT;
340077d4:	f44f 628c 	mov.w	r2, #1120	@ 0x460
  info->bayer_pattern = ((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer - 1;
340077d8:	3b01      	subs	r3, #1
340077da:	f884 3020 	strb.w	r3, [r4, #32]
  info->color_depth = VD6G_COLOR_DEPTH_RAW8;
340077de:	2308      	movs	r3, #8
340077e0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  info->height = VD6G_MAX_HEIGHT;
340077e4:	f240 5354 	movw	r3, #1364	@ 0x554
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
340077e8:	3508      	adds	r5, #8
  info->height = VD6G_MAX_HEIGHT;
340077ea:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
340077ee:	4628      	mov	r0, r5
340077f0:	f10d 0203 	add.w	r2, sp, #3
340077f4:	f10d 0102 	add.w	r1, sp, #2
340077f8:	f001 ff38 	bl	3400966c <VD6G_GetAnalogGainRegRange>
  if (ret)
340077fc:	2800      	cmp	r0, #0
340077fe:	d17c      	bne.n	340078fa <CMW_VD66GY_GetSensorInfo+0x14a>
  ret = VD6G_GetDigitalGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &dgain_regmin, &dgain_regmax);
34007800:	4628      	mov	r0, r5
34007802:	f10d 0206 	add.w	r2, sp, #6
34007806:	a901      	add	r1, sp, #4
34007808:	f001 ff9c 	bl	34009744 <VD6G_GetDigitalGainRegRange>
  if (ret)
3400780c:	2800      	cmp	r0, #0
3400780e:	d174      	bne.n	340078fa <CMW_VD66GY_GetSensorInfo+0x14a>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007810:	2620      	movs	r6, #32
34007812:	f89d 3002 	ldrb.w	r3, [sp, #2]
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007816:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 34007914 <CMW_VD66GY_GetSensorInfo+0x164>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
3400781a:	f1c3 0320 	rsb	r3, r3, #32
3400781e:	fb96 f3f3 	sdiv	r3, r6, r3
34007822:	ee00 3a10 	vmov	s0, r3
34007826:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
3400782a:	f019 faad 	bl	34020d88 <log10>
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
3400782e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007832:	eeb0 9b40 	vmov.f64	d9, d0
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007836:	1af3      	subs	r3, r6, r3
34007838:	fb96 f3f3 	sdiv	r3, r6, r3
3400783c:	ee00 3a10 	vmov	s0, r3
34007840:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007844:	f019 faa0 	bl	34020d88 <log10>
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007848:	f8bd 3004 	ldrh.w	r3, [sp, #4]
3400784c:	f89d 2004 	ldrb.w	r2, [sp, #4]
34007850:	0a1b      	lsrs	r3, r3, #8
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007852:	eeb0 8b40 	vmov.f64	d8, d0
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007856:	ee07 2a90 	vmov	s15, r2
3400785a:	ee00 3a10 	vmov	s0, r3
3400785e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007862:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007866:	eea7 0a8b 	vfma.f32	s0, s15, s22
3400786a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400786e:	f019 fa8b 	bl	34020d88 <log10>
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007872:	f8bd 3006 	ldrh.w	r3, [sp, #6]
34007876:	f89d 2006 	ldrb.w	r2, [sp, #6]
3400787a:	0a1b      	lsrs	r3, r3, #8
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
3400787c:	eeb0 ab40 	vmov.f64	d10, d0
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007880:	ee07 2a90 	vmov	s15, r2
34007884:	ee00 3a10 	vmov	s0, r3
34007888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400788c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007890:	eea7 0a8b 	vfma.f32	s0, s15, s22
34007894:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34007898:	f019 fa76 	bl	34020d88 <log10>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
3400789c:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
340078a0:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 34007908 <CMW_VD66GY_GetSensorInfo+0x158>
340078a4:	ee29 9b07 	vmul.f64	d9, d9, d7
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340078a8:	ee2a ab07 	vmul.f64	d10, d10, d7
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340078ac:	ee29 9b06 	vmul.f64	d9, d9, d6
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340078b0:	ee2a ab06 	vmul.f64	d10, d10, d6
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340078b4:	ee28 8b07 	vmul.f64	d8, d8, d7
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
340078b8:	ee20 0b07 	vmul.f64	d0, d0, d7
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340078bc:	eebc 9bc9 	vcvt.u32.f64	s18, d9
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340078c0:	eebc abca 	vcvt.u32.f64	s20, d10
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340078c4:	ee28 8b06 	vmul.f64	d8, d8, d6
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
340078c8:	ee20 0b06 	vmul.f64	d0, d0, d6
  info->gain_min = again_min_mdB + dgain_min_mdB;
340078cc:	ee1a 2a10 	vmov	r2, s20
340078d0:	ee19 3a10 	vmov	r3, s18
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340078d4:	eebc 8bc8 	vcvt.u32.f64	s16, d8
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
340078d8:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  info->gain_min = again_min_mdB + dgain_min_mdB;
340078dc:	4413      	add	r3, r2
340078de:	62e3      	str	r3, [r4, #44]	@ 0x2c
  info->gain_max = again_max_mdB + dgain_max_mdB;
340078e0:	ee10 2a10 	vmov	r2, s0
340078e4:	ee18 3a10 	vmov	r3, s16
340078e8:	4413      	add	r3, r2
  ret = VD6G_GetExposureRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &info->exposure_min, &info->exposure_max);
340078ea:	4628      	mov	r0, r5
  info->gain_max = again_max_mdB + dgain_max_mdB;
340078ec:	6323      	str	r3, [r4, #48]	@ 0x30
  ret = VD6G_GetExposureRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &info->exposure_min, &info->exposure_max);
340078ee:	f104 0238 	add.w	r2, r4, #56	@ 0x38
340078f2:	f104 0134 	add.w	r1, r4, #52	@ 0x34
340078f6:	f001 ffa9 	bl	3400984c <VD6G_GetExposureRegRange>
}
340078fa:	b002      	add	sp, #8
340078fc:	ecbd 8b08 	vpop	{d8-d11}
34007900:	bd70      	pop	{r4, r5, r6, pc}
    return CMW_ERROR_WRONG_PARAM;
34007902:	f06f 0001 	mvn.w	r0, #1
34007906:	e7f8      	b.n	340078fa <CMW_VD66GY_GetSensorInfo+0x14a>
34007908:	00000000 	.word	0x00000000
3400790c:	408f4000 	.word	0x408f4000
34007910:	34023e73 	.word	0x34023e73
34007914:	3b800000 	.word	0x3b800000

34007918 <CMW_VD66GY_Stop>:
{
34007918:	b508      	push	{r3, lr}
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400791a:	3008      	adds	r0, #8
3400791c:	f001 fe6a 	bl	340095f4 <VD6G_Stop>
    return CMW_ERROR_PERIPH_FAILURE;
34007920:	2800      	cmp	r0, #0
}
34007922:	bf18      	it	ne
34007924:	f06f 0003 	mvnne.w	r0, #3
34007928:	bd08      	pop	{r3, pc}
	...

3400792c <CMW_VD66GY_Start>:
{
3400792c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ISP_Init(&((CMW_VD66GY_t *)io_ctx)->hIsp, ((CMW_VD66GY_t *)io_ctx)->hdcmipp, 0, &((CMW_VD66GY_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_VD66GY);
3400792e:	4b10      	ldr	r3, [pc, #64]	@ (34007970 <CMW_VD66GY_Start+0x44>)
34007930:	f100 0570 	add.w	r5, r0, #112	@ 0x70
34007934:	9300      	str	r3, [sp, #0]
{
34007936:	4604      	mov	r4, r0
  ret = ISP_Init(&((CMW_VD66GY_t *)io_ctx)->hIsp, ((CMW_VD66GY_t *)io_ctx)->hdcmipp, 0, &((CMW_VD66GY_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_VD66GY);
34007938:	f8d0 111c 	ldr.w	r1, [r0, #284]	@ 0x11c
3400793c:	f100 03f8 	add.w	r3, r0, #248	@ 0xf8
34007940:	2200      	movs	r2, #0
34007942:	4628      	mov	r0, r5
34007944:	f7fd fcae 	bl	340052a4 <ISP_Init>
  if (ret != ISP_OK)
34007948:	b978      	cbnz	r0, 3400796a <CMW_VD66GY_Start+0x3e>
  ret = ISP_Start(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400794a:	4628      	mov	r0, r5
3400794c:	f7fd fd38 	bl	340053c0 <ISP_Start>
  if (ret != ISP_OK)
34007950:	b938      	cbnz	r0, 34007962 <CMW_VD66GY_Start+0x36>
  ret = VD6G_Start(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34007952:	3408      	adds	r4, #8
34007954:	4620      	mov	r0, r4
34007956:	f001 fd09 	bl	3400936c <VD6G_Start>
  if (ret) {
3400795a:	b120      	cbz	r0, 34007966 <CMW_VD66GY_Start+0x3a>
    VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400795c:	4620      	mov	r0, r4
3400795e:	f001 fcf5 	bl	3400934c <VD6G_DeInit>
      return CMW_ERROR_PERIPH_FAILURE;
34007962:	f06f 0003 	mvn.w	r0, #3
}
34007966:	b003      	add	sp, #12
34007968:	bd30      	pop	{r4, r5, pc}
    return CMW_ERROR_COMPONENT_FAILURE;
3400796a:	f06f 0004 	mvn.w	r0, #4
3400796e:	e7fa      	b.n	34007966 <CMW_VD66GY_Start+0x3a>
34007970:	34028618 	.word	0x34028618

34007974 <CMW_VD66GY_DeInit>:
{
34007974:	b538      	push	{r3, r4, r5, lr}
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34007976:	f100 0508 	add.w	r5, r0, #8
{
3400797a:	4604      	mov	r4, r0
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400797c:	4628      	mov	r0, r5
3400797e:	f001 fe39 	bl	340095f4 <VD6G_Stop>
  if (ret)
34007982:	b110      	cbz	r0, 3400798a <CMW_VD66GY_DeInit+0x16>
    return CMW_ERROR_PERIPH_FAILURE;
34007984:	f06f 0003 	mvn.w	r0, #3
}
34007988:	bd38      	pop	{r3, r4, r5, pc}
  ret = VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400798a:	4628      	mov	r0, r5
3400798c:	f001 fcde 	bl	3400934c <VD6G_DeInit>
  if (ret)
34007990:	2800      	cmp	r0, #0
34007992:	d1f7      	bne.n	34007984 <CMW_VD66GY_DeInit+0x10>
  ((CMW_VD66GY_t *)io_ctx)->IsInitialized = 0;
34007994:	f884 0120 	strb.w	r0, [r4, #288]	@ 0x120
  return CMW_ERROR_NONE;
34007998:	e7f6      	b.n	34007988 <CMW_VD66GY_DeInit+0x14>

3400799a <CMW_VD66GY_Run>:
{
3400799a:	b508      	push	{r3, lr}
  ret = ISP_BackgroundProcess(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400799c:	3070      	adds	r0, #112	@ 0x70
3400799e:	f7fd fdaf 	bl	34005500 <ISP_BackgroundProcess>
  return CMW_ERROR_NONE;
340079a2:	2800      	cmp	r0, #0
}
340079a4:	bf14      	ite	ne
340079a6:	f06f 0003 	mvnne.w	r0, #3
340079aa:	2000      	moveq	r0, #0
340079ac:	bd08      	pop	{r3, pc}

340079ae <CMW_VD66GY_Init>:
{
340079ae:	b570      	push	{r4, r5, r6, lr}
340079b0:	4604      	mov	r4, r0
340079b2:	b08e      	sub	sp, #56	@ 0x38
340079b4:	460d      	mov	r5, r1
  VD6G_Config_t config = { 0 };
340079b6:	2238      	movs	r2, #56	@ 0x38
340079b8:	2100      	movs	r1, #0
340079ba:	4668      	mov	r0, sp
340079bc:	f017 f860 	bl	3401ea80 <memset>
  if (((CMW_VD66GY_t *)io_ctx)->IsInitialized)
340079c0:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
340079c4:	2b00      	cmp	r3, #0
340079c6:	d14f      	bne.n	34007a68 <CMW_VD66GY_Init+0xba>
  config.frame_rate = initSensor->fps;
340079c8:	68ab      	ldr	r3, [r5, #8]
340079ca:	9302      	str	r3, [sp, #8]
  ret = CMW_VD66GY_GetResType(initSensor->width, initSensor->height, &config.resolution);
340079cc:	e9d5 2300 	ldrd	r2, r3, [r5]
  if (width == 320 && height == 240)
340079d0:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
340079d4:	d104      	bne.n	340079e0 <CMW_VD66GY_Init+0x32>
340079d6:	2bf0      	cmp	r3, #240	@ 0xf0
340079d8:	d00b      	beq.n	340079f2 <CMW_VD66GY_Init+0x44>
    return CMW_ERROR_WRONG_PARAM;
340079da:	f06f 0001 	mvn.w	r0, #1
340079de:	e029      	b.n	34007a34 <CMW_VD66GY_Init+0x86>
  else if (width == 640 && height == 480)
340079e0:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
340079e4:	d128      	bne.n	34007a38 <CMW_VD66GY_Init+0x8a>
340079e6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
340079ea:	d1f6      	bne.n	340079da <CMW_VD66GY_Init+0x2c>
    *res = VD6G_RES_VGA_640_480;
340079ec:	2301      	movs	r3, #1
    *res = VD6G_RES_FULL_1120_1364;
340079ee:	f88d 3004 	strb.w	r3, [sp, #4]
  config.ext_clock_freq_in_hz = ((CMW_VD66GY_t *)io_ctx)->ClockInHz;
340079f2:	6863      	ldr	r3, [r4, #4]
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
340079f4:	f104 0608 	add.w	r6, r4, #8
  config.ext_clock_freq_in_hz = ((CMW_VD66GY_t *)io_ctx)->ClockInHz;
340079f8:	9300      	str	r3, [sp, #0]
  config.flip_mirror_mode = CMW_VD66GY_getMirrorFlipConfig(initSensor->mirrorFlip);
340079fa:	692b      	ldr	r3, [r5, #16]
  config.out_itf.clock_lane_swap_enable = 1;
340079fc:	2501      	movs	r5, #1
  config.flip_mirror_mode = CMW_VD66GY_getMirrorFlipConfig(initSensor->mirrorFlip);
340079fe:	2b03      	cmp	r3, #3
34007a00:	bf28      	it	cs
34007a02:	2303      	movcs	r3, #3
34007a04:	f88d 300c 	strb.w	r3, [sp, #12]
  config.out_itf.clock_lane_swap_enable = 1;
34007a08:	2302      	movs	r3, #2
34007a0a:	e9cd 3506 	strd	r3, r5, [sp, #24]
    config.gpio_ctrl[i] = VD6G_GPIO_GPIO_IN;
34007a0e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
34007a12:	4669      	mov	r1, sp
34007a14:	4630      	mov	r0, r6
  config.out_itf.data_lane1_swap_enable = 1;
34007a16:	e9cd 5508 	strd	r5, r5, [sp, #32]
    config.gpio_ctrl[i] = VD6G_GPIO_GPIO_IN;
34007a1a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
34007a1e:	f001 f985 	bl	34008d2c <VD6G_Init>
  if (ret)
34007a22:	b928      	cbnz	r0, 34007a30 <CMW_VD66GY_Init+0x82>
  if (((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer == VD6G_BAYER_NONE)
34007a24:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
34007a28:	b9e3      	cbnz	r3, 34007a64 <CMW_VD66GY_Init+0xb6>
    VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34007a2a:	4630      	mov	r0, r6
34007a2c:	f001 fc8e 	bl	3400934c <VD6G_DeInit>
    return CMW_ERROR_PERIPH_FAILURE;
34007a30:	f06f 0003 	mvn.w	r0, #3
}
34007a34:	b00e      	add	sp, #56	@ 0x38
34007a36:	bd70      	pop	{r4, r5, r6, pc}
  else if (width == 1024 && height == 768)
34007a38:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34007a3c:	d104      	bne.n	34007a48 <CMW_VD66GY_Init+0x9a>
34007a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34007a42:	d1ca      	bne.n	340079da <CMW_VD66GY_Init+0x2c>
    *res = VD6G_RES_XGA_1024_768;
34007a44:	2303      	movs	r3, #3
34007a46:	e7d2      	b.n	340079ee <CMW_VD66GY_Init+0x40>
  else if (width == 1120 && height == 720)
34007a48:	f5b2 6f8c 	cmp.w	r2, #1120	@ 0x460
34007a4c:	d1c5      	bne.n	340079da <CMW_VD66GY_Init+0x2c>
34007a4e:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
34007a52:	d101      	bne.n	34007a58 <CMW_VD66GY_Init+0xaa>
    *res = VD6G_RES_PORTRAIT_1120_720;
34007a54:	2307      	movs	r3, #7
34007a56:	e7ca      	b.n	340079ee <CMW_VD66GY_Init+0x40>
  else if (width == 1120 && height == 1364)
34007a58:	f240 5254 	movw	r2, #1364	@ 0x554
34007a5c:	4293      	cmp	r3, r2
34007a5e:	d1bc      	bne.n	340079da <CMW_VD66GY_Init+0x2c>
    *res = VD6G_RES_FULL_1120_1364;
34007a60:	2308      	movs	r3, #8
34007a62:	e7c4      	b.n	340079ee <CMW_VD66GY_Init+0x40>
  ((CMW_VD66GY_t *)io_ctx)->IsInitialized = 1;
34007a64:	f884 5120 	strb.w	r5, [r4, #288]	@ 0x120
    return CMW_ERROR_NONE;
34007a68:	2000      	movs	r0, #0
34007a6a:	e7e3      	b.n	34007a34 <CMW_VD66GY_Init+0x86>

34007a6c <CMW_VD66GY_VsyncEventCallback>:
  switch (pipe)
34007a6c:	2901      	cmp	r1, #1
{
34007a6e:	b510      	push	{r4, lr}
  switch (pipe)
34007a70:	d007      	beq.n	34007a82 <CMW_VD66GY_VsyncEventCallback+0x16>
34007a72:	2902      	cmp	r1, #2
34007a74:	d00f      	beq.n	34007a96 <CMW_VD66GY_VsyncEventCallback+0x2a>
34007a76:	b999      	cbnz	r1, 34007aa0 <CMW_VD66GY_VsyncEventCallback+0x34>
}
34007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncDumpFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34007a7c:	3070      	adds	r0, #112	@ 0x70
34007a7e:	f7fd bdbc 	b.w	340055fa <ISP_IncDumpFrameId>
      ISP_IncMainFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34007a82:	f100 0470 	add.w	r4, r0, #112	@ 0x70
34007a86:	4620      	mov	r0, r4
34007a88:	f7fd fdb3 	bl	340055f2 <ISP_IncMainFrameId>
      ISP_GatherStatistics(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34007a8c:	4620      	mov	r0, r4
}
34007a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_GatherStatistics(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34007a92:	f7fd bdac 	b.w	340055ee <ISP_GatherStatistics>
      ISP_IncAncillaryFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34007a96:	3070      	adds	r0, #112	@ 0x70
}
34007a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncAncillaryFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34007a9c:	f7fd bdab 	b.w	340055f6 <ISP_IncAncillaryFrameId>
}
34007aa0:	bd10      	pop	{r4, pc}

34007aa2 <VD66GY_RegisterBusIO>:

int32_t VD66GY_RegisterBusIO(CMW_VD66GY_t *io_ctx)
{
  int ret;

  if (!io_ctx)
34007aa2:	b118      	cbz	r0, 34007aac <VD66GY_RegisterBusIO+0xa>
    return CMW_ERROR_COMPONENT_FAILURE;

  if (!io_ctx->Init)
34007aa4:	f8d0 3124 	ldr.w	r3, [r0, #292]	@ 0x124
34007aa8:	b103      	cbz	r3, 34007aac <VD66GY_RegisterBusIO+0xa>
    return CMW_ERROR_COMPONENT_FAILURE;

  ret = io_ctx->Init();
34007aaa:	4718      	bx	r3

  return ret;
}
34007aac:	f06f 0004 	mvn.w	r0, #4
34007ab0:	4770      	bx	lr

34007ab2 <VD66GY_ReadID>:

int32_t VD66GY_ReadID(CMW_VD66GY_t *io_ctx, uint32_t *Id)
{
34007ab2:	b513      	push	{r0, r1, r4, lr}
34007ab4:	460c      	mov	r4, r1
  uint16_t reg16;
  int32_t ret;

  ret = CMW_VD66GY_Read16(io_ctx, VD66GY_REG_MODEL_ID, &reg16);
34007ab6:	f10d 0206 	add.w	r2, sp, #6
34007aba:	2100      	movs	r1, #0
34007abc:	f7ff fce0 	bl	34007480 <CMW_VD66GY_Read16>
  if (ret)
34007ac0:	b910      	cbnz	r0, 34007ac8 <VD66GY_ReadID+0x16>
    return ret;

  *Id = reg16;
34007ac2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
34007ac6:	6023      	str	r3, [r4, #0]

  return CMW_ERROR_NONE;
}
34007ac8:	b002      	add	sp, #8
34007aca:	bd10      	pop	{r4, pc}

34007acc <CMW_VD66GY_Probe>:
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
  HAL_Delay(20);     /* NRST de-asserted during 20ms */
}

int CMW_VD66GY_Probe(CMW_VD66GY_t *io_ctx, CMW_Sensor_if_t *vd6g_if)
{
34007acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
34007ace:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;

  io_ctx->ctx_driver.shutdown_pin = VD6G_ShutdownPin;
34007ad0:	4b2e      	ldr	r3, [pc, #184]	@ (34007b8c <CMW_VD66GY_Probe+0xc0>)
{
34007ad2:	460d      	mov	r5, r1
  io_ctx->ctx_driver.shutdown_pin = VD6G_ShutdownPin;
34007ad4:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.read8 = VD6G_Read8;
34007ad6:	4b2e      	ldr	r3, [pc, #184]	@ (34007b90 <CMW_VD66GY_Probe+0xc4>)
34007ad8:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.read16 = VD6G_Read16;
34007ada:	4b2e      	ldr	r3, [pc, #184]	@ (34007b94 <CMW_VD66GY_Probe+0xc8>)
34007adc:	6103      	str	r3, [r0, #16]
  io_ctx->ctx_driver.read32 = VD6G_Read32;
34007ade:	4b2e      	ldr	r3, [pc, #184]	@ (34007b98 <CMW_VD66GY_Probe+0xcc>)
34007ae0:	6143      	str	r3, [r0, #20]
  io_ctx->ctx_driver.write8 = VD6G_Write8;
34007ae2:	4b2e      	ldr	r3, [pc, #184]	@ (34007b9c <CMW_VD66GY_Probe+0xd0>)
34007ae4:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.write16 = VD6G_Write16;
34007ae6:	4b2e      	ldr	r3, [pc, #184]	@ (34007ba0 <CMW_VD66GY_Probe+0xd4>)
34007ae8:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.write32 = VD6G_Write32;
34007aea:	4b2e      	ldr	r3, [pc, #184]	@ (34007ba4 <CMW_VD66GY_Probe+0xd8>)
34007aec:	6203      	str	r3, [r0, #32]
  io_ctx->ctx_driver.write_array = VD6G_WriteArray;
34007aee:	4b2e      	ldr	r3, [pc, #184]	@ (34007ba8 <CMW_VD66GY_Probe+0xdc>)
34007af0:	6243      	str	r3, [r0, #36]	@ 0x24
  io_ctx->ctx_driver.delay = VD6G_Delay;
34007af2:	4b2e      	ldr	r3, [pc, #184]	@ (34007bac <CMW_VD66GY_Probe+0xe0>)
34007af4:	6283      	str	r3, [r0, #40]	@ 0x28
  io_ctx->ctx_driver.log = VD6G_Log;
34007af6:	4b2e      	ldr	r3, [pc, #184]	@ (34007bb0 <CMW_VD66GY_Probe+0xe4>)
34007af8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  io_ctx->EnablePin(1);
34007afa:	f8d0 3140 	ldr.w	r3, [r0, #320]	@ 0x140
34007afe:	2001      	movs	r0, #1
34007b00:	4798      	blx	r3
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
34007b02:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34007b06:	2000      	movs	r0, #0
34007b08:	4798      	blx	r3
  HAL_Delay(200);   /* NRST signals asserted during 200ms */
34007b0a:	20c8      	movs	r0, #200	@ 0xc8
34007b0c:	f015 fc0e 	bl	3401d32c <HAL_Delay>
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
34007b10:	2001      	movs	r0, #1
34007b12:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34007b16:	4798      	blx	r3
  HAL_Delay(20);     /* NRST de-asserted during 20ms */
34007b18:	2014      	movs	r0, #20
34007b1a:	f015 fc07 	bl	3401d32c <HAL_Delay>

  CMW_VD66GY_PowerOn(io_ctx);

  ret = VD66GY_RegisterBusIO(io_ctx);
34007b1e:	4620      	mov	r0, r4
34007b20:	f7ff ffbf 	bl	34007aa2 <VD66GY_RegisterBusIO>
  if (ret != CMW_ERROR_NONE)
34007b24:	b120      	cbz	r0, 34007b30 <CMW_VD66GY_Probe+0x64>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
34007b26:	f06f 0404 	mvn.w	r4, #4
  vd6g_if->SetExposureMode = CMW_VD66GY_SetExposureMode;
  vd6g_if->SetWBRefMode = CMW_VD66GY_SetWBRefMode;
  vd6g_if->ListWBRefModes = CMW_VD66GY_ListWBRefModes;
  vd6g_if->GetSensorInfo = CMW_VD66GY_GetSensorInfo;
  return ret;
}
34007b2a:	4620      	mov	r0, r4
34007b2c:	b003      	add	sp, #12
34007b2e:	bd30      	pop	{r4, r5, pc}
  ret = VD66GY_ReadID(io_ctx, &id);
34007b30:	4620      	mov	r0, r4
34007b32:	a901      	add	r1, sp, #4
34007b34:	f7ff ffbd 	bl	34007ab2 <VD66GY_ReadID>
  if (ret != CMW_ERROR_NONE)
34007b38:	4604      	mov	r4, r0
34007b3a:	2800      	cmp	r0, #0
34007b3c:	d1f3      	bne.n	34007b26 <CMW_VD66GY_Probe+0x5a>
  if (id != VD66GY_CHIP_ID)
34007b3e:	f245 6303 	movw	r3, #22019	@ 0x5603
34007b42:	9a01      	ldr	r2, [sp, #4]
34007b44:	429a      	cmp	r2, r3
34007b46:	d1ee      	bne.n	34007b26 <CMW_VD66GY_Probe+0x5a>
  memset(vd6g_if, 0, sizeof(*vd6g_if));
34007b48:	4601      	mov	r1, r0
34007b4a:	224c      	movs	r2, #76	@ 0x4c
34007b4c:	f105 001c 	add.w	r0, r5, #28
34007b50:	f016 ff96 	bl	3401ea80 <memset>
  vd6g_if->Init = CMW_VD66GY_Init;
34007b54:	4b17      	ldr	r3, [pc, #92]	@ (34007bb4 <CMW_VD66GY_Probe+0xe8>)
34007b56:	602b      	str	r3, [r5, #0]
  vd6g_if->DeInit = CMW_VD66GY_DeInit;
34007b58:	4b17      	ldr	r3, [pc, #92]	@ (34007bb8 <CMW_VD66GY_Probe+0xec>)
34007b5a:	606b      	str	r3, [r5, #4]
  vd6g_if->Run = CMW_VD66GY_Run;
34007b5c:	4b17      	ldr	r3, [pc, #92]	@ (34007bbc <CMW_VD66GY_Probe+0xf0>)
34007b5e:	60eb      	str	r3, [r5, #12]
  vd6g_if->VsyncEventCallback = CMW_VD66GY_VsyncEventCallback;
34007b60:	4b17      	ldr	r3, [pc, #92]	@ (34007bc0 <CMW_VD66GY_Probe+0xf4>)
34007b62:	612b      	str	r3, [r5, #16]
  vd6g_if->FrameEventCallback = CMW_VD66GY_FrameEventCallback;
34007b64:	4b17      	ldr	r3, [pc, #92]	@ (34007bc4 <CMW_VD66GY_Probe+0xf8>)
34007b66:	616b      	str	r3, [r5, #20]
  vd6g_if->Start = CMW_VD66GY_Start;
34007b68:	4b17      	ldr	r3, [pc, #92]	@ (34007bc8 <CMW_VD66GY_Probe+0xfc>)
34007b6a:	60ab      	str	r3, [r5, #8]
  vd6g_if->Stop = CMW_VD66GY_Stop;
34007b6c:	4b17      	ldr	r3, [pc, #92]	@ (34007bcc <CMW_VD66GY_Probe+0x100>)
34007b6e:	61ab      	str	r3, [r5, #24]
  vd6g_if->SetGain = CMW_VD66GY_SetGain;
34007b70:	4b17      	ldr	r3, [pc, #92]	@ (34007bd0 <CMW_VD66GY_Probe+0x104>)
34007b72:	64ab      	str	r3, [r5, #72]	@ 0x48
  vd6g_if->SetExposure = CMW_VD66GY_SetExposure;
34007b74:	4b17      	ldr	r3, [pc, #92]	@ (34007bd4 <CMW_VD66GY_Probe+0x108>)
34007b76:	64eb      	str	r3, [r5, #76]	@ 0x4c
  vd6g_if->SetExposureMode = CMW_VD66GY_SetExposureMode;
34007b78:	4b17      	ldr	r3, [pc, #92]	@ (34007bd8 <CMW_VD66GY_Probe+0x10c>)
34007b7a:	652b      	str	r3, [r5, #80]	@ 0x50
  vd6g_if->SetWBRefMode = CMW_VD66GY_SetWBRefMode;
34007b7c:	4b17      	ldr	r3, [pc, #92]	@ (34007bdc <CMW_VD66GY_Probe+0x110>)
34007b7e:	656b      	str	r3, [r5, #84]	@ 0x54
  vd6g_if->ListWBRefModes = CMW_VD66GY_ListWBRefModes;
34007b80:	4b17      	ldr	r3, [pc, #92]	@ (34007be0 <CMW_VD66GY_Probe+0x114>)
34007b82:	65ab      	str	r3, [r5, #88]	@ 0x58
  vd6g_if->GetSensorInfo = CMW_VD66GY_GetSensorInfo;
34007b84:	4b17      	ldr	r3, [pc, #92]	@ (34007be4 <CMW_VD66GY_Probe+0x118>)
34007b86:	662b      	str	r3, [r5, #96]	@ 0x60
  return ret;
34007b88:	e7cf      	b.n	34007b2a <CMW_VD66GY_Probe+0x5e>
34007b8a:	bf00      	nop
34007b8c:	3400749d 	.word	0x3400749d
34007b90:	340074a5 	.word	0x340074a5
34007b94:	340074b9 	.word	0x340074b9
34007b98:	340074bf 	.word	0x340074bf
34007b9c:	340074dd 	.word	0x340074dd
34007ba0:	340074f7 	.word	0x340074f7
34007ba4:	34007511 	.word	0x34007511
34007ba8:	34007529 	.word	0x34007529
34007bac:	3400756d 	.word	0x3400756d
34007bb0:	34007575 	.word	0x34007575
34007bb4:	340079af 	.word	0x340079af
34007bb8:	34007975 	.word	0x34007975
34007bbc:	3400799b 	.word	0x3400799b
34007bc0:	34007a6d 	.word	0x34007a6d
34007bc4:	34007577 	.word	0x34007577
34007bc8:	3400792d 	.word	0x3400792d
34007bcc:	34007919 	.word	0x34007919
34007bd0:	34007579 	.word	0x34007579
34007bd4:	34007765 	.word	0x34007765
34007bd8:	3400776b 	.word	0x3400776b
34007bdc:	34007789 	.word	0x34007789
34007be0:	3400779d 	.word	0x3400779d
34007be4:	340077b1 	.word	0x340077b1

34007be8 <IMX335_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34007be8:	b410      	push	{r4}
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
34007bea:	6904      	ldr	r4, [r0, #16]
34007bec:	8900      	ldrh	r0, [r0, #8]
34007bee:	46a4      	mov	ip, r4
}
34007bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
34007bf4:	4760      	bx	ip

34007bf6 <IMX335_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
34007bf6:	b410      	push	{r4}
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
34007bf8:	68c4      	ldr	r4, [r0, #12]
34007bfa:	8900      	ldrh	r0, [r0, #8]
34007bfc:	46a4      	mov	ip, r4
}
34007bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
34007c02:	4760      	bx	ip

34007c04 <IMX335_WriteTable>:
{
34007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = IMX335_OK;
34007c06:	2500      	movs	r5, #0
34007c08:	1c8c      	adds	r4, r1, #2
34007c0a:	eb04 0682 	add.w	r6, r4, r2, lsl #2
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
34007c0e:	f100 0718 	add.w	r7, r0, #24
    if(ret != IMX335_ERROR)
34007c12:	b135      	cbz	r5, 34007c22 <IMX335_WriteTable+0x1e>
  int32_t ret = IMX335_OK;
34007c14:	f04f 35ff 	mov.w	r5, #4294967295
  for(index=0; index<size ; index++)
34007c18:	3404      	adds	r4, #4
34007c1a:	42b4      	cmp	r4, r6
34007c1c:	d1f9      	bne.n	34007c12 <IMX335_WriteTable+0xe>
}
34007c1e:	4628      	mov	r0, r5
34007c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
34007c22:	2301      	movs	r3, #1
34007c24:	4622      	mov	r2, r4
34007c26:	4638      	mov	r0, r7
34007c28:	f834 1c02 	ldrh.w	r1, [r4, #-2]
34007c2c:	f000 f99d 	bl	34007f6a <imx335_write_reg>
34007c30:	2800      	cmp	r0, #0
34007c32:	d1ef      	bne.n	34007c14 <IMX335_WriteTable+0x10>
34007c34:	e7f0      	b.n	34007c18 <IMX335_WriteTable+0x14>
	...

34007c38 <IMX335_RegisterBusIO>:
  */
int32_t IMX335_RegisterBusIO(IMX335_Object_t *pObj, IMX335_IO_t *pIO)
{
  int32_t ret;

  if (pObj == NULL)
34007c38:	b190      	cbz	r0, 34007c60 <IMX335_RegisterBusIO+0x28>
    ret = IMX335_ERROR;
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
    pObj->IO.DeInit    = pIO->DeInit;
34007c3a:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
34007c3c:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
34007c3e:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
34007c40:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
34007c42:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
34007c44:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
34007c46:	68ca      	ldr	r2, [r1, #12]
34007c48:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
34007c4a:	690a      	ldr	r2, [r1, #16]
34007c4c:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
34007c4e:	694a      	ldr	r2, [r1, #20]

    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
    pObj->Ctx.handle   = pObj;
34007c50:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
34007c52:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
34007c54:	4a04      	ldr	r2, [pc, #16]	@ (34007c68 <IMX335_RegisterBusIO+0x30>)
34007c56:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
34007c58:	4a04      	ldr	r2, [pc, #16]	@ (34007c6c <IMX335_RegisterBusIO+0x34>)
34007c5a:	6182      	str	r2, [r0, #24]

    if(pObj->IO.Init != NULL)
34007c5c:	b103      	cbz	r3, 34007c60 <IMX335_RegisterBusIO+0x28>
    {
      ret = pObj->IO.Init();
34007c5e:	4718      	bx	r3
      ret = IMX335_ERROR;
    }
  }

  return ret;
}
34007c60:	f04f 30ff 	mov.w	r0, #4294967295
34007c64:	4770      	bx	lr
34007c66:	bf00      	nop
34007c68:	34007be9 	.word	0x34007be9
34007c6c:	34007bf7 	.word	0x34007bf7

34007c70 <IMX335_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t IMX335_Init(IMX335_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
34007c70:	b510      	push	{r4, lr}
  int32_t ret = IMX335_OK;

  if(pObj->IsInitialized == 0U)
34007c72:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
34007c76:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
34007c78:	b9a3      	cbnz	r3, 34007ca4 <IMX335_Init+0x34>
  {
    switch (Resolution)
34007c7a:	2906      	cmp	r1, #6
34007c7c:	d002      	beq.n	34007c84 <IMX335_Init+0x14>
        }
        break;
      /* Add new resolution here */
      default:
        /* Resolution not supported */
        ret = IMX335_ERROR;
34007c7e:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
34007c82:	bd10      	pop	{r4, pc}
        if(IMX335_WriteTable(pObj, res_2592_1944_regs, ARRAY_SIZE(res_2592_1944_regs)) != IMX335_OK)
34007c84:	2254      	movs	r2, #84	@ 0x54
34007c86:	4908      	ldr	r1, [pc, #32]	@ (34007ca8 <IMX335_Init+0x38>)
34007c88:	f7ff ffbc 	bl	34007c04 <IMX335_WriteTable>
34007c8c:	2800      	cmp	r0, #0
34007c8e:	d1f6      	bne.n	34007c7e <IMX335_Init+0xe>
      if(IMX335_WriteTable(pObj, mode_2l_10b_regs, ARRAY_SIZE(mode_2l_10b_regs)) != IMX335_OK)
34007c90:	2205      	movs	r2, #5
34007c92:	4620      	mov	r0, r4
34007c94:	4905      	ldr	r1, [pc, #20]	@ (34007cac <IMX335_Init+0x3c>)
34007c96:	f7ff ffb5 	bl	34007c04 <IMX335_WriteTable>
34007c9a:	2800      	cmp	r0, #0
34007c9c:	d1ef      	bne.n	34007c7e <IMX335_Init+0xe>
        pObj->IsInitialized = 1U;
34007c9e:	2301      	movs	r3, #1
34007ca0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  int32_t ret = IMX335_OK;
34007ca4:	2000      	movs	r0, #0
  return ret;
34007ca6:	e7ec      	b.n	34007c82 <IMX335_Init+0x12>
34007ca8:	34028a10 	.word	0x34028a10
34007cac:	340289fc 	.word	0x340289fc

34007cb0 <IMX335_Start>:
int32_t IMX335_Start(IMX335_Object_t *pObj)
{
  uint8_t tmp;
  int32_t ret = IMX335_OK;
  /* Start streaming */
  tmp = IMX335_MODE_STREAMING;
34007cb0:	2300      	movs	r3, #0
{
34007cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
34007cb4:	4605      	mov	r5, r0
  tmp = IMX335_MODE_STREAMING;
34007cb6:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = imx335_write_reg(&pObj->Ctx, IMX335_REG_MODE_SELECT, &tmp, 1);
34007cba:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
34007cbe:	2301      	movs	r3, #1
34007cc0:	f10d 0207 	add.w	r2, sp, #7
34007cc4:	3018      	adds	r0, #24
34007cc6:	f000 f950 	bl	34007f6a <imx335_write_reg>
  if (ret != IMX335_OK)
34007cca:	4604      	mov	r4, r0
34007ccc:	b950      	cbnz	r0, 34007ce4 <IMX335_Start+0x34>
  tickstart = pObj->IO.GetTick();
34007cce:	696b      	ldr	r3, [r5, #20]
34007cd0:	4798      	blx	r3
34007cd2:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
34007cd4:	696b      	ldr	r3, [r5, #20]
34007cd6:	4798      	blx	r3
34007cd8:	1b83      	subs	r3, r0, r6
34007cda:	2b13      	cmp	r3, #19
34007cdc:	d9fa      	bls.n	34007cd4 <IMX335_Start+0x24>
  {
    return IMX335_ERROR;
  }
  IMX335_Delay(pObj, 20);
  return ret;
}
34007cde:	4620      	mov	r0, r4
34007ce0:	b002      	add	sp, #8
34007ce2:	bd70      	pop	{r4, r5, r6, pc}
    return IMX335_ERROR;
34007ce4:	f04f 34ff 	mov.w	r4, #4294967295
34007ce8:	e7f9      	b.n	34007cde <IMX335_Start+0x2e>

34007cea <IMX335_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t IMX335_DeInit(IMX335_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
34007cea:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
34007cee:	2b01      	cmp	r3, #1
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
34007cf0:	bf04      	itt	eq
34007cf2:	2300      	moveq	r3, #0
34007cf4:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }

  return IMX335_OK;
}
34007cf8:	2000      	movs	r0, #0
34007cfa:	4770      	bx	lr

34007cfc <IMX335_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t IMX335_ReadID(IMX335_Object_t *pObj, uint32_t *Id)
{
34007cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
34007cfe:	4604      	mov	r4, r0
34007d00:	f854 3b18 	ldr.w	r3, [r4], #24
{
34007d04:	460d      	mov	r5, r1
  pObj->IO.Init();
34007d06:	4798      	blx	r3

  if(imx335_read_reg(&pObj->Ctx, IMX335_REG_ID, &tmp, 1)!= IMX335_OK)
34007d08:	2301      	movs	r3, #1
34007d0a:	f643 1112 	movw	r1, #14610	@ 0x3912
34007d0e:	4620      	mov	r0, r4
34007d10:	f10d 0207 	add.w	r2, sp, #7
34007d14:	f000 f922 	bl	34007f5c <imx335_read_reg>
34007d18:	b920      	cbnz	r0, 34007d24 <IMX335_ReadID+0x28>
  {
    ret = IMX335_ERROR;
  }
  else
  {
    *Id = tmp;
34007d1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
34007d1e:	602b      	str	r3, [r5, #0]
    ret = IMX335_OK;
  }

  /* Component status */
  return ret;
}
34007d20:	b003      	add	sp, #12
34007d22:	bd30      	pop	{r4, r5, pc}
    ret = IMX335_ERROR;
34007d24:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
34007d28:	e7fa      	b.n	34007d20 <IMX335_ReadID+0x24>
	...

34007d2c <IMX335_SetGain>:
  * @param  pObj  pointer to component object
  * @param  Gain Gain in mdB
  * @retval Component status
  */
int32_t IMX335_SetGain(IMX335_Object_t *pObj, int32_t gain)
{
34007d2c:	b530      	push	{r4, r5, lr}
  int32_t ret = IMX335_OK;
  uint8_t hold;

  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
34007d2e:	4b1a      	ldr	r3, [pc, #104]	@ (34007d98 <IMX335_SetGain+0x6c>)
{
34007d30:	b085      	sub	sp, #20
  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
34007d32:	4299      	cmp	r1, r3
34007d34:	d903      	bls.n	34007d3e <IMX335_SetGain+0x12>
  {
    ret = IMX335_ERROR;
34007d36:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

return ret;
}
34007d3a:	b005      	add	sp, #20
34007d3c:	bd30      	pop	{r4, r5, pc}
    gain /= IMX335_GAIN_UNIT_MDB;
34007d3e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
    hold = 1;
34007d42:	2501      	movs	r5, #1
    gain /= IMX335_GAIN_UNIT_MDB;
34007d44:	fb91 f1f3 	sdiv	r1, r1, r3
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007d48:	f100 0418 	add.w	r4, r0, #24
    gain /= IMX335_GAIN_UNIT_MDB;
34007d4c:	9101      	str	r1, [sp, #4]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007d4e:	462b      	mov	r3, r5
34007d50:	f243 0101 	movw	r1, #12289	@ 0x3001
34007d54:	4620      	mov	r0, r4
34007d56:	f10d 020f 	add.w	r2, sp, #15
    hold = 1;
34007d5a:	f88d 500f 	strb.w	r5, [sp, #15]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007d5e:	f000 f904 	bl	34007f6a <imx335_write_reg>
34007d62:	2800      	cmp	r0, #0
34007d64:	d1e7      	bne.n	34007d36 <IMX335_SetGain+0xa>
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_GAIN, (uint8_t *)&gain, 2) != IMX335_OK)
34007d66:	2302      	movs	r3, #2
34007d68:	f243 01e8 	movw	r1, #12520	@ 0x30e8
34007d6c:	4620      	mov	r0, r4
34007d6e:	aa01      	add	r2, sp, #4
34007d70:	f000 f8fb 	bl	34007f6a <imx335_write_reg>
34007d74:	2800      	cmp	r0, #0
34007d76:	d1de      	bne.n	34007d36 <IMX335_SetGain+0xa>
        hold = 0;
34007d78:	f88d 000f 	strb.w	r0, [sp, #15]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007d7c:	462b      	mov	r3, r5
34007d7e:	f243 0101 	movw	r1, #12289	@ 0x3001
34007d82:	4620      	mov	r0, r4
34007d84:	f10d 020f 	add.w	r2, sp, #15
34007d88:	f000 f8ef 	bl	34007f6a <imx335_write_reg>
34007d8c:	3800      	subs	r0, #0
34007d8e:	bf18      	it	ne
34007d90:	2001      	movne	r0, #1
34007d92:	4240      	negs	r0, r0
return ret;
34007d94:	e7d1      	b.n	34007d3a <IMX335_SetGain+0xe>
34007d96:	bf00      	nop
34007d98:	00011940 	.word	0x00011940

34007d9c <IMX335_SetExposure>:
  * @param  pObj  pointer to component object
  * @param  Exposure Exposure in micro seconds
  * @retval Component status
  */
int32_t IMX335_SetExposure(IMX335_Object_t *pObj, int32_t exposure)
{
34007d9c:	b530      	push	{r4, r5, lr}
34007d9e:	ed2d 8b02 	vpush	{d8}
  int32_t ret = IMX335_OK;
  uint32_t vmax, shutter;
  uint8_t hold;


  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
34007da2:	f100 0418 	add.w	r4, r0, #24
{
34007da6:	b085      	sub	sp, #20
34007da8:	ee08 1a10 	vmov	s16, r1
  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
34007dac:	2304      	movs	r3, #4
34007dae:	f243 0130 	movw	r1, #12336	@ 0x3030
34007db2:	4620      	mov	r0, r4
34007db4:	aa02      	add	r2, sp, #8
34007db6:	f000 f8d1 	bl	34007f5c <imx335_read_reg>
34007dba:	b128      	cbz	r0, 34007dc8 <IMX335_SetExposure+0x2c>
  {
    ret = IMX335_ERROR;
34007dbc:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
34007dc0:	b005      	add	sp, #20
34007dc2:	ecbd 8b02 	vpop	{d8}
34007dc6:	bd30      	pop	{r4, r5, pc}
    shutter = (uint32_t) (vmax - (exposure / IMX335_1H_PERIOD_USEC));
34007dc8:	eddd 7a02 	vldr	s15, [sp, #8]
34007dcc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
34007dd0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 34007e3c <IMX335_SetExposure+0xa0>
34007dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
34007dd8:	ee88 7a26 	vdiv.f32	s14, s16, s13
34007ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
34007de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34007de4:	ee17 3a90 	vmov	r3, s15
    if (shutter < IMX335_SHUTTER_MIN)
34007de8:	2b08      	cmp	r3, #8
    shutter = (uint32_t) (vmax - (exposure / IMX335_1H_PERIOD_USEC));
34007dea:	edcd 7a03 	vstr	s15, [sp, #12]
    if (shutter < IMX335_SHUTTER_MIN)
34007dee:	d9e5      	bls.n	34007dbc <IMX335_SetExposure+0x20>
      hold = 1;
34007df0:	2501      	movs	r5, #1
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007df2:	f243 0101 	movw	r1, #12289	@ 0x3001
34007df6:	462b      	mov	r3, r5
34007df8:	4620      	mov	r0, r4
34007dfa:	f10d 0207 	add.w	r2, sp, #7
      hold = 1;
34007dfe:	f88d 5007 	strb.w	r5, [sp, #7]
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007e02:	f000 f8b2 	bl	34007f6a <imx335_write_reg>
34007e06:	2800      	cmp	r0, #0
34007e08:	d1d8      	bne.n	34007dbc <IMX335_SetExposure+0x20>
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_SHUTTER, (uint8_t *)&shutter, 3) != IMX335_OK)
34007e0a:	2303      	movs	r3, #3
34007e0c:	f243 0158 	movw	r1, #12376	@ 0x3058
34007e10:	4620      	mov	r0, r4
34007e12:	aa03      	add	r2, sp, #12
34007e14:	f000 f8a9 	bl	34007f6a <imx335_write_reg>
34007e18:	2800      	cmp	r0, #0
34007e1a:	d1cf      	bne.n	34007dbc <IMX335_SetExposure+0x20>
          hold = 0;
34007e1c:	f88d 0007 	strb.w	r0, [sp, #7]
          if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34007e20:	462b      	mov	r3, r5
34007e22:	f243 0101 	movw	r1, #12289	@ 0x3001
34007e26:	4620      	mov	r0, r4
34007e28:	f10d 0207 	add.w	r2, sp, #7
34007e2c:	f000 f89d 	bl	34007f6a <imx335_write_reg>
34007e30:	3800      	subs	r0, #0
34007e32:	bf18      	it	ne
34007e34:	2001      	movne	r0, #1
34007e36:	4240      	negs	r0, r0
  return ret;
34007e38:	e7c2      	b.n	34007dc0 <IMX335_SetExposure+0x24>
34007e3a:	bf00      	nop
34007e3c:	40ed097c 	.word	0x40ed097c

34007e40 <IMX335_SetFrequency>:
  */
int32_t IMX335_SetFrequency(IMX335_Object_t *pObj, int32_t frequency)
{
  uint32_t ret = IMX335_OK;

  switch (frequency)
34007e40:	3901      	subs	r1, #1
        ret = IMX335_ERROR;
      }
      break;
    default:
      /* IMX335_INCK_6MHZ */
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34007e42:	2207      	movs	r2, #7
{
34007e44:	b508      	push	{r3, lr}
  switch (frequency)
34007e46:	2903      	cmp	r1, #3
34007e48:	d811      	bhi.n	34007e6e <IMX335_SetFrequency+0x2e>
34007e4a:	e8df f001 	tbb	[pc, r1]
34007e4e:	0c0e      	.short	0x0c0e
34007e50:	020a      	.short	0x020a
      if(IMX335_WriteTable(pObj, inck_74Mhz_regs, ARRAY_SIZE(inck_74Mhz_regs)) != IMX335_OK)
34007e52:	4908      	ldr	r1, [pc, #32]	@ (34007e74 <IMX335_SetFrequency+0x34>)
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34007e54:	f7ff fed6 	bl	34007c04 <IMX335_WriteTable>
34007e58:	3800      	subs	r0, #0
34007e5a:	bf18      	it	ne
34007e5c:	2001      	movne	r0, #1
34007e5e:	4240      	negs	r0, r0
      }
      break;
  };

  return ret;
}
34007e60:	bd08      	pop	{r3, pc}
      if(IMX335_WriteTable(pObj, inck_27Mhz_regs, ARRAY_SIZE(inck_27Mhz_regs)) != IMX335_OK)
34007e62:	4905      	ldr	r1, [pc, #20]	@ (34007e78 <IMX335_SetFrequency+0x38>)
34007e64:	e7f6      	b.n	34007e54 <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_24Mhz_regs, ARRAY_SIZE(inck_24Mhz_regs)) != IMX335_OK)
34007e66:	4905      	ldr	r1, [pc, #20]	@ (34007e7c <IMX335_SetFrequency+0x3c>)
34007e68:	e7f4      	b.n	34007e54 <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_18Mhz_regs, ARRAY_SIZE(inck_18Mhz_regs)) != IMX335_OK)
34007e6a:	4905      	ldr	r1, [pc, #20]	@ (34007e80 <IMX335_SetFrequency+0x40>)
34007e6c:	e7f2      	b.n	34007e54 <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34007e6e:	4905      	ldr	r1, [pc, #20]	@ (34007e84 <IMX335_SetFrequency+0x44>)
34007e70:	e7f0      	b.n	34007e54 <IMX335_SetFrequency+0x14>
34007e72:	bf00      	nop
34007e74:	340289e0 	.word	0x340289e0
34007e78:	340289c4 	.word	0x340289c4
34007e7c:	340289a8 	.word	0x340289a8
34007e80:	3402898c 	.word	0x3402898c
34007e84:	34028970 	.word	0x34028970

34007e88 <IMX335_SetFramerate>:
  * @retval Component status
  */
int32_t IMX335_SetFramerate(IMX335_Object_t *pObj, int32_t framerate)
{
  uint32_t ret = IMX335_OK;
  switch (framerate)
34007e88:	2914      	cmp	r1, #20
{
34007e8a:	b508      	push	{r3, lr}
34007e8c:	4603      	mov	r3, r0
  switch (framerate)
34007e8e:	d019      	beq.n	34007ec4 <IMX335_SetFramerate+0x3c>
34007e90:	dc07      	bgt.n	34007ea2 <IMX335_SetFramerate+0x1a>
34007e92:	290a      	cmp	r1, #10
34007e94:	d00a      	beq.n	34007eac <IMX335_SetFramerate+0x24>
34007e96:	290f      	cmp	r1, #15
34007e98:	d011      	beq.n	34007ebe <IMX335_SetFramerate+0x36>
        ret = IMX335_ERROR;
      }
      break;
    default:
      /* 30fps */
      if(IMX335_WriteTable(pObj, framerate_30fps_regs, ARRAY_SIZE(framerate_30fps_regs)) != IMX335_OK)
34007e9a:	2202      	movs	r2, #2
34007e9c:	4618      	mov	r0, r3
34007e9e:	490b      	ldr	r1, [pc, #44]	@ (34007ecc <IMX335_SetFramerate+0x44>)
34007ea0:	e006      	b.n	34007eb0 <IMX335_SetFramerate+0x28>
  switch (framerate)
34007ea2:	2919      	cmp	r1, #25
34007ea4:	d1f9      	bne.n	34007e9a <IMX335_SetFramerate+0x12>
      if(IMX335_WriteTable(pObj, framerate_25fps_regs, ARRAY_SIZE(framerate_25fps_regs)) != IMX335_OK)
34007ea6:	2202      	movs	r2, #2
34007ea8:	4909      	ldr	r1, [pc, #36]	@ (34007ed0 <IMX335_SetFramerate+0x48>)
34007eaa:	e001      	b.n	34007eb0 <IMX335_SetFramerate+0x28>
      if(IMX335_WriteTable(pObj, framerate_10fps_regs, ARRAY_SIZE(framerate_10fps_regs)) != IMX335_OK)
34007eac:	2202      	movs	r2, #2
34007eae:	4909      	ldr	r1, [pc, #36]	@ (34007ed4 <IMX335_SetFramerate+0x4c>)
      if(IMX335_WriteTable(pObj, framerate_30fps_regs, ARRAY_SIZE(framerate_30fps_regs)) != IMX335_OK)
34007eb0:	f7ff fea8 	bl	34007c04 <IMX335_WriteTable>
34007eb4:	3800      	subs	r0, #0
34007eb6:	bf18      	it	ne
34007eb8:	2001      	movne	r0, #1
34007eba:	4240      	negs	r0, r0
      }
      break;
  };

  return ret;
}
34007ebc:	bd08      	pop	{r3, pc}
      if(IMX335_WriteTable(pObj, framerate_15fps_regs, ARRAY_SIZE(framerate_15fps_regs)) != IMX335_OK)
34007ebe:	2202      	movs	r2, #2
34007ec0:	4905      	ldr	r1, [pc, #20]	@ (34007ed8 <IMX335_SetFramerate+0x50>)
34007ec2:	e7f5      	b.n	34007eb0 <IMX335_SetFramerate+0x28>
      if(IMX335_WriteTable(pObj, framerate_20fps_regs, ARRAY_SIZE(framerate_20fps_regs)) != IMX335_OK)
34007ec4:	2202      	movs	r2, #2
34007ec6:	4905      	ldr	r1, [pc, #20]	@ (34007edc <IMX335_SetFramerate+0x54>)
34007ec8:	e7f2      	b.n	34007eb0 <IMX335_SetFramerate+0x28>
34007eca:	bf00      	nop
34007ecc:	34028948 	.word	0x34028948
34007ed0:	34028950 	.word	0x34028950
34007ed4:	34028968 	.word	0x34028968
34007ed8:	34028960 	.word	0x34028960
34007edc:	34028958 	.word	0x34028958

34007ee0 <IMX335_MirrorFlipConfig>:
  */
int32_t IMX335_MirrorFlipConfig(IMX335_Object_t *pObj, uint32_t Config)
{
  int32_t ret = IMX335_OK;

  switch (Config)
34007ee0:	2902      	cmp	r1, #2
    case IMX335_MIRROR_FLIP:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
      break;
    case IMX335_MIRROR_FLIP_NONE:
    default:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
34007ee2:	f04f 020a 	mov.w	r2, #10
  switch (Config)
34007ee6:	d006      	beq.n	34007ef6 <IMX335_MirrorFlipConfig+0x16>
34007ee8:	2903      	cmp	r1, #3
34007eea:	d006      	beq.n	34007efa <IMX335_MirrorFlipConfig+0x1a>
34007eec:	2901      	cmp	r1, #1
34007eee:	d106      	bne.n	34007efe <IMX335_MirrorFlipConfig+0x1e>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[1], ARRAY_SIZE(mirrorflip_mode_regs[1]));
34007ef0:	4904      	ldr	r1, [pc, #16]	@ (34007f04 <IMX335_MirrorFlipConfig+0x24>)
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
34007ef2:	f7ff be87 	b.w	34007c04 <IMX335_WriteTable>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[2], ARRAY_SIZE(mirrorflip_mode_regs[2]));
34007ef6:	4904      	ldr	r1, [pc, #16]	@ (34007f08 <IMX335_MirrorFlipConfig+0x28>)
34007ef8:	e7fb      	b.n	34007ef2 <IMX335_MirrorFlipConfig+0x12>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
34007efa:	4904      	ldr	r1, [pc, #16]	@ (34007f0c <IMX335_MirrorFlipConfig+0x2c>)
34007efc:	e7f9      	b.n	34007ef2 <IMX335_MirrorFlipConfig+0x12>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
34007efe:	4904      	ldr	r1, [pc, #16]	@ (34007f10 <IMX335_MirrorFlipConfig+0x30>)
34007f00:	e7f7      	b.n	34007ef2 <IMX335_MirrorFlipConfig+0x12>
34007f02:	bf00      	nop
34007f04:	340288d0 	.word	0x340288d0
34007f08:	340288f8 	.word	0x340288f8
34007f0c:	34028920 	.word	0x34028920
34007f10:	340288a8 	.word	0x340288a8

34007f14 <IMX335_SetTestPattern>:
  *               10: Horizontal color bars
  *               11: Vertical color bars
  * @retval Component status
  */
int32_t IMX335_SetTestPattern(IMX335_Object_t *pObj, int32_t mode)
{
34007f14:	b513      	push	{r0, r1, r4, lr}
  int32_t ret = IMX335_OK;
  uint8_t val;

  if (mode >= 0)
34007f16:	2900      	cmp	r1, #0
{
34007f18:	4604      	mov	r4, r0
  if (mode >= 0)
34007f1a:	db15      	blt.n	34007f48 <IMX335_SetTestPattern+0x34>
  {
    /* Enable Test Pattern #mode */
    val = mode;
34007f1c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (imx335_write_reg(&pObj->Ctx, IMX335_REG_TPG, &val, 1) != IMX335_OK)
34007f20:	2301      	movs	r3, #1
34007f22:	f243 219e 	movw	r1, #12958	@ 0x329e
34007f26:	f10d 0207 	add.w	r2, sp, #7
34007f2a:	3018      	adds	r0, #24
34007f2c:	f000 f81d 	bl	34007f6a <imx335_write_reg>
34007f30:	b968      	cbnz	r0, 34007f4e <IMX335_SetTestPattern+0x3a>
    {
      return IMX335_ERROR;
    }
    if (IMX335_WriteTable(pObj, test_pattern_enable_regs, ARRAY_SIZE(test_pattern_enable_regs)) != IMX335_OK)
34007f32:	2207      	movs	r2, #7
34007f34:	4620      	mov	r0, r4
34007f36:	4907      	ldr	r1, [pc, #28]	@ (34007f54 <IMX335_SetTestPattern+0x40>)
    }
  }
  else
  {
    /* Disable Test Pattern */
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
34007f38:	f7ff fe64 	bl	34007c04 <IMX335_WriteTable>
34007f3c:	3800      	subs	r0, #0
34007f3e:	bf18      	it	ne
34007f40:	2001      	movne	r0, #1
34007f42:	4240      	negs	r0, r0
      return IMX335_ERROR;
    }
  }

  return ret;
}
34007f44:	b002      	add	sp, #8
34007f46:	bd10      	pop	{r4, pc}
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
34007f48:	2207      	movs	r2, #7
34007f4a:	4903      	ldr	r1, [pc, #12]	@ (34007f58 <IMX335_SetTestPattern+0x44>)
34007f4c:	e7f4      	b.n	34007f38 <IMX335_SetTestPattern+0x24>
      return IMX335_ERROR;
34007f4e:	f04f 30ff 	mov.w	r0, #4294967295
34007f52:	e7f7      	b.n	34007f44 <IMX335_SetTestPattern+0x30>
34007f54:	3402888c 	.word	0x3402888c
34007f58:	34028870 	.word	0x34028870

34007f5c <imx335_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t imx335_read_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
34007f5c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34007f5e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
34007f62:	46a4      	mov	ip, r4
}
34007f64:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34007f68:	4760      	bx	ip

34007f6a <imx335_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t imx335_write_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
34007f6a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
34007f6c:	6804      	ldr	r4, [r0, #0]
34007f6e:	6880      	ldr	r0, [r0, #8]
34007f70:	46a4      	mov	ip, r4
}
34007f72:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
34007f76:	4760      	bx	ip

34007f78 <VD55G1_log_impl>:
    return NULL;
  }
}

static void VD55G1_log_impl(VD55G1_Ctx_t *ctx, int lvl, const char *format, ...)
{
34007f78:	b40c      	push	{r2, r3}
34007f7a:	b513      	push	{r0, r1, r4, lr}
  va_list ap;

  if (!ctx->log)
34007f7c:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34007f7e:	b11c      	cbz	r4, 34007f88 <VD55G1_log_impl+0x10>
    return ;

  va_start(ap, format);
34007f80:	ab05      	add	r3, sp, #20
  ctx->log(ctx, lvl, format, ap);
34007f82:	9a04      	ldr	r2, [sp, #16]
  va_start(ap, format);
34007f84:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, lvl, format, ap);
34007f86:	47a0      	blx	r4
  va_end(ap);
}
34007f88:	b002      	add	sp, #8
34007f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34007f8e:	b002      	add	sp, #8
34007f90:	4770      	bx	lr
	...

34007f94 <VD55G1_PollReg8>:

  return 0;
}

static int VD55G1_PollReg8(VD55G1_Ctx_t *ctx, uint16_t addr, uint8_t poll_val)
{
34007f94:	b5f0      	push	{r4, r5, r6, r7, lr}
34007f96:	4604      	mov	r4, r0
34007f98:	460e      	mov	r6, r1
34007f9a:	4617      	mov	r7, r2
34007f9c:	2531      	movs	r5, #49	@ 0x31
34007f9e:	b085      	sub	sp, #20
  int loop_nb = timeout_ms / loop_delay_ms;
  uint8_t val;
  int ret;

  while (--loop_nb) {
    ret = ctx->read8(ctx, addr, &val);
34007fa0:	4631      	mov	r1, r6
34007fa2:	4620      	mov	r0, r4
34007fa4:	6863      	ldr	r3, [r4, #4]
34007fa6:	f10d 020f 	add.w	r2, sp, #15
34007faa:	4798      	blx	r3
    if (ret < 0)
34007fac:	2800      	cmp	r0, #0
34007fae:	db17      	blt.n	34007fe0 <VD55G1_PollReg8+0x4c>
      return ret;
    if (val == poll_val)
34007fb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
34007fb4:	42bb      	cmp	r3, r7
34007fb6:	d015      	beq.n	34007fe4 <VD55G1_PollReg8+0x50>
      return 0;
    ctx->delay(ctx, loop_delay_ms);
34007fb8:	210a      	movs	r1, #10
34007fba:	4620      	mov	r0, r4
34007fbc:	6a23      	ldr	r3, [r4, #32]
34007fbe:	4798      	blx	r3
  while (--loop_nb) {
34007fc0:	3d01      	subs	r5, #1
34007fc2:	d1ed      	bne.n	34007fa0 <VD55G1_PollReg8+0xc>
  }

  VD55G1_dbg(ctx, 0, "current state %d\n", val);
34007fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
34007fc8:	4620      	mov	r0, r4
34007fca:	9301      	str	r3, [sp, #4]
34007fcc:	f240 132b 	movw	r3, #299	@ 0x12b
34007fd0:	2103      	movs	r1, #3
34007fd2:	9300      	str	r3, [sp, #0]
34007fd4:	4a04      	ldr	r2, [pc, #16]	@ (34007fe8 <VD55G1_PollReg8+0x54>)
34007fd6:	462b      	mov	r3, r5
34007fd8:	f7ff ffce 	bl	34007f78 <VD55G1_log_impl>

  return -1;
34007fdc:	f04f 30ff 	mov.w	r0, #4294967295
}
34007fe0:	b005      	add	sp, #20
34007fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 0;
34007fe4:	2000      	movs	r0, #0
34007fe6:	e7fb      	b.n	34007fe0 <VD55G1_PollReg8+0x4c>
34007fe8:	34023e7a 	.word	0x34023e7a

34007fec <VD55G1_WaitState>:

  return state == VD55G1_SYSTEM_FSM_STREAMING;
}

static int VD55G1_WaitState(VD55G1_Ctx_t *ctx, int state)
{
34007fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
34007fee:	b2ca      	uxtb	r2, r1
{
34007ff0:	460d      	mov	r5, r1
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
34007ff2:	211c      	movs	r1, #28
{
34007ff4:	4606      	mov	r6, r0
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
34007ff6:	f7ff ffcd 	bl	34007f94 <VD55G1_PollReg8>

  if (ret)
34007ffa:	4604      	mov	r4, r0
34007ffc:	b150      	cbz	r0, 34008014 <VD55G1_WaitState+0x28>
    VD55G1_warn(ctx, "Unable to reach state %d\n", state);
34007ffe:	f240 1341 	movw	r3, #321	@ 0x141
34008002:	2101      	movs	r1, #1
34008004:	4630      	mov	r0, r6
34008006:	4a09      	ldr	r2, [pc, #36]	@ (3400802c <VD55G1_WaitState+0x40>)
34008008:	9500      	str	r5, [sp, #0]
3400800a:	f7ff ffb5 	bl	34007f78 <VD55G1_log_impl>
  else
    VD55G1_dbg(ctx, 0, "reach state %d\n", state);

  return ret;
}
3400800e:	4620      	mov	r0, r4
34008010:	b002      	add	sp, #8
34008012:	bd70      	pop	{r4, r5, r6, pc}
    VD55G1_dbg(ctx, 0, "reach state %d\n", state);
34008014:	f240 1343 	movw	r3, #323	@ 0x143
34008018:	2103      	movs	r1, #3
3400801a:	9300      	str	r3, [sp, #0]
3400801c:	4a04      	ldr	r2, [pc, #16]	@ (34008030 <VD55G1_WaitState+0x44>)
3400801e:	4603      	mov	r3, r0
34008020:	9501      	str	r5, [sp, #4]
34008022:	4630      	mov	r0, r6
34008024:	f7ff ffa8 	bl	34007f78 <VD55G1_log_impl>
  return ret;
34008028:	e7f1      	b.n	3400800e <VD55G1_WaitState+0x22>
3400802a:	bf00      	nop
3400802c:	34023e9d 	.word	0x34023e9d
34008030:	34023ec7 	.word	0x34023ec7

34008034 <display_error>:
{
34008034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ret = ctx->read16(ctx, VD55G1_ERROR_CODE, &reg16);
34008036:	2110      	movs	r1, #16
34008038:	6883      	ldr	r3, [r0, #8]
3400803a:	f10d 020e 	add.w	r2, sp, #14
{
3400803e:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD55G1_ERROR_CODE, &reg16);
34008040:	4798      	blx	r3
  assert(ret == 0);
34008042:	4601      	mov	r1, r0
34008044:	b128      	cbz	r0, 34008052 <display_error+0x1e>
34008046:	21fc      	movs	r1, #252	@ 0xfc
34008048:	4b07      	ldr	r3, [pc, #28]	@ (34008068 <display_error+0x34>)
3400804a:	4a08      	ldr	r2, [pc, #32]	@ (3400806c <display_error+0x38>)
3400804c:	4808      	ldr	r0, [pc, #32]	@ (34008070 <display_error+0x3c>)
3400804e:	f015 fccd 	bl	3401d9ec <__assert_func>
  VD55G1_error(ctx, "ERROR_CODE : 0x%04x\n", reg16);
34008052:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34008056:	4620      	mov	r0, r4
34008058:	9300      	str	r3, [sp, #0]
3400805a:	4a06      	ldr	r2, [pc, #24]	@ (34008074 <display_error+0x40>)
3400805c:	23fd      	movs	r3, #253	@ 0xfd
3400805e:	f7ff ff8b 	bl	34007f78 <VD55G1_log_impl>
}
34008062:	b004      	add	sp, #16
34008064:	bd10      	pop	{r4, pc}
34008066:	bf00      	nop
34008068:	34023ee8 	.word	0x34023ee8
3400806c:	34028cbb 	.word	0x34028cbb
34008070:	34023ef1 	.word	0x34023ef1
34008074:	34023f3a 	.word	0x34023f3a

34008078 <VD55G1_ApplyPatchCommon>:
  return 0;
}

static int VD55G1_ApplyPatchCommon(VD55G1_Ctx_t *ctx, uint8_t *patch_array, int patch_len, uint8_t patch_major,
                                   uint8_t patch_minor)
{
34008078:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t reg16;
  int ret;

  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
3400807a:	69c4      	ldr	r4, [r0, #28]
{
3400807c:	b087      	sub	sp, #28
3400807e:	461e      	mov	r6, r3
  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
34008080:	4613      	mov	r3, r2
34008082:	460a      	mov	r2, r1
34008084:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
34008088:	4605      	mov	r5, r0
3400808a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
3400808e:	47a0      	blx	r4
  VD55G1_TraceError(ctx, ret);
34008090:	4604      	mov	r4, r0
34008092:	b958      	cbnz	r0, 340080ac <VD55G1_ApplyPatchCommon+0x34>

  ret = ctx->write8(ctx, VD55G1_REG_BOOT, VD55G1_BOOT_PATCH_AND_BOOT);
34008094:	2202      	movs	r2, #2
34008096:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400809a:	4628      	mov	r0, r5
3400809c:	692b      	ldr	r3, [r5, #16]
3400809e:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340080a0:	4604      	mov	r4, r0
340080a2:	b190      	cbz	r0, 340080ca <VD55G1_ApplyPatchCommon+0x52>
340080a4:	f240 1377 	movw	r3, #375	@ 0x177
340080a8:	9002      	str	r0, [sp, #8]
340080aa:	e002      	b.n	340080b2 <VD55G1_ApplyPatchCommon+0x3a>
  VD55G1_TraceError(ctx, ret);
340080ac:	f44f 73ba 	mov.w	r3, #372	@ 0x174
340080b0:	9002      	str	r0, [sp, #8]
    return -1;
  }
  VD55G1_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);

  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
  VD55G1_TraceError(ctx, ret);
340080b2:	4a32      	ldr	r2, [pc, #200]	@ (3400817c <VD55G1_ApplyPatchCommon+0x104>)
340080b4:	4628      	mov	r0, r5
340080b6:	9200      	str	r2, [sp, #0]
340080b8:	2100      	movs	r1, #0
340080ba:	4a31      	ldr	r2, [pc, #196]	@ (34008180 <VD55G1_ApplyPatchCommon+0x108>)
340080bc:	9301      	str	r3, [sp, #4]
340080be:	f7ff ff5b 	bl	34007f78 <VD55G1_log_impl>
340080c2:	4628      	mov	r0, r5
340080c4:	f7ff ffb6 	bl	34008034 <display_error>
340080c8:	e039      	b.n	3400813e <VD55G1_ApplyPatchCommon+0xc6>
  ret = VD55G1_PollReg8(ctx, VD55G1_REG_BOOT, VD55G1_CMD_ACK);
340080ca:	4602      	mov	r2, r0
340080cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
340080d0:	4628      	mov	r0, r5
340080d2:	f7ff ff5f 	bl	34007f94 <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340080d6:	4604      	mov	r4, r0
340080d8:	b118      	cbz	r0, 340080e2 <VD55G1_ApplyPatchCommon+0x6a>
340080da:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
340080de:	9002      	str	r0, [sp, #8]
340080e0:	e7e7      	b.n	340080b2 <VD55G1_ApplyPatchCommon+0x3a>
  ret = ctx->read16(ctx, VD55G1_REG_FWPATCH_REVISION, &reg16);
340080e2:	2112      	movs	r1, #18
340080e4:	4628      	mov	r0, r5
340080e6:	68ab      	ldr	r3, [r5, #8]
340080e8:	f10d 0216 	add.w	r2, sp, #22
340080ec:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340080ee:	4604      	mov	r4, r0
340080f0:	b118      	cbz	r0, 340080fa <VD55G1_ApplyPatchCommon+0x82>
340080f2:	f240 137d 	movw	r3, #381	@ 0x17d
340080f6:	9002      	str	r0, [sp, #8]
340080f8:	e7db      	b.n	340080b2 <VD55G1_ApplyPatchCommon+0x3a>
  VD55G1_dbg(ctx, 0, "patch = 0x%04x\n", reg16);
340080fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
340080fe:	4a21      	ldr	r2, [pc, #132]	@ (34008184 <VD55G1_ApplyPatchCommon+0x10c>)
34008100:	9301      	str	r3, [sp, #4]
34008102:	f44f 73bf 	mov.w	r3, #382	@ 0x17e
34008106:	2103      	movs	r1, #3
34008108:	9300      	str	r3, [sp, #0]
3400810a:	4603      	mov	r3, r0
3400810c:	4628      	mov	r0, r5
3400810e:	f7ff ff33 	bl	34007f78 <VD55G1_log_impl>
  if (reg16 != (patch_major << 8) + patch_minor) {
34008112:	f8bd 2016 	ldrh.w	r2, [sp, #22]
34008116:	eb07 2306 	add.w	r3, r7, r6, lsl #8
3400811a:	429a      	cmp	r2, r3
3400811c:	b2d3      	uxtb	r3, r2
3400811e:	ea4f 2212 	mov.w	r2, r2, lsr #8
34008122:	d00f      	beq.n	34008144 <VD55G1_ApplyPatchCommon+0xcc>
    VD55G1_error(ctx, "bad patch version expected %d.%d got %d.%d\n", patch_major, patch_minor, reg16 >> 8, reg16 & 0xff);
34008124:	e9cd 2302 	strd	r2, r3, [sp, #8]
34008128:	4621      	mov	r1, r4
3400812a:	f240 1381 	movw	r3, #385	@ 0x181
3400812e:	4628      	mov	r0, r5
34008130:	e9cd 6700 	strd	r6, r7, [sp]
34008134:	4a14      	ldr	r2, [pc, #80]	@ (34008188 <VD55G1_ApplyPatchCommon+0x110>)
34008136:	f7ff ff1f 	bl	34007f78 <VD55G1_log_impl>
    return -1;
3400813a:	f04f 34ff 	mov.w	r4, #4294967295

  VD55G1_notice(ctx, "sensor boot successfully\n");

  return 0;
}
3400813e:	4620      	mov	r0, r4
34008140:	b007      	add	sp, #28
34008142:	bdf0      	pop	{r4, r5, r6, r7, pc}
  VD55G1_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);
34008144:	e9cd 2300 	strd	r2, r3, [sp]
34008148:	2102      	movs	r1, #2
3400814a:	f44f 73c2 	mov.w	r3, #388	@ 0x184
3400814e:	4628      	mov	r0, r5
34008150:	4a0e      	ldr	r2, [pc, #56]	@ (3400818c <VD55G1_ApplyPatchCommon+0x114>)
34008152:	f7ff ff11 	bl	34007f78 <VD55G1_log_impl>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
34008156:	2102      	movs	r1, #2
34008158:	4628      	mov	r0, r5
3400815a:	f7ff ff47 	bl	34007fec <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
3400815e:	4604      	mov	r4, r0
34008160:	b938      	cbnz	r0, 34008172 <VD55G1_ApplyPatchCommon+0xfa>
  VD55G1_notice(ctx, "sensor boot successfully\n");
34008162:	f240 1389 	movw	r3, #393	@ 0x189
34008166:	2102      	movs	r1, #2
34008168:	4628      	mov	r0, r5
3400816a:	4a09      	ldr	r2, [pc, #36]	@ (34008190 <VD55G1_ApplyPatchCommon+0x118>)
3400816c:	f7ff ff04 	bl	34007f78 <VD55G1_log_impl>
  return 0;
34008170:	e7e5      	b.n	3400813e <VD55G1_ApplyPatchCommon+0xc6>
  VD55G1_TraceError(ctx, ret);
34008172:	f240 1387 	movw	r3, #391	@ 0x187
34008176:	9002      	str	r0, [sp, #8]
34008178:	e79b      	b.n	340080b2 <VD55G1_ApplyPatchCommon+0x3a>
3400817a:	bf00      	nop
3400817c:	34028c91 	.word	0x34028c91
34008180:	34023f5f 	.word	0x34023f5f
34008184:	34023f84 	.word	0x34023f84
34008188:	34023fa5 	.word	0x34023fa5
3400818c:	34023fe1 	.word	0x34023fe1
34008190:	34024006 	.word	0x34024006

34008194 <VD55G1_ComputeFrameLength>:

  return 0;
}

static int VD55G1_ComputeFrameLength(VD55G1_Ctx_t *ctx, int fps, uint16_t *frame_length)
{
34008194:	b5f0      	push	{r4, r5, r6, r7, lr}
34008196:	b089      	sub	sp, #36	@ 0x24
34008198:	460e      	mov	r6, r1
3400819a:	4617      	mov	r7, r2
  int req_frame_length;
  uint16_t line_length;
  uint16_t height;
  int ret;

  ret = ctx->read16(ctx, VD55G1_REG_LINE_LENGTH, &line_length);
3400819c:	f44f 7140 	mov.w	r1, #768	@ 0x300
340081a0:	6883      	ldr	r3, [r0, #8]
340081a2:	aa07      	add	r2, sp, #28
{
340081a4:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD55G1_REG_LINE_LENGTH, &line_length);
340081a6:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340081a8:	4605      	mov	r5, r0
340081aa:	b960      	cbnz	r0, 340081c6 <VD55G1_ComputeFrameLength+0x32>

  ret = ctx->read16(ctx, VD55G1_REG_Y_HEIGHT, &height);
340081ac:	f240 5112 	movw	r1, #1298	@ 0x512
340081b0:	4620      	mov	r0, r4
340081b2:	68a3      	ldr	r3, [r4, #8]
340081b4:	f10d 021e 	add.w	r2, sp, #30
340081b8:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340081ba:	4605      	mov	r5, r0
340081bc:	b190      	cbz	r0, 340081e4 <VD55G1_ComputeFrameLength+0x50>
340081be:	f44f 7316 	mov.w	r3, #600	@ 0x258
340081c2:	9002      	str	r0, [sp, #8]
340081c4:	e002      	b.n	340081cc <VD55G1_ComputeFrameLength+0x38>
  VD55G1_TraceError(ctx, ret);
340081c6:	f240 2355 	movw	r3, #597	@ 0x255
340081ca:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340081cc:	4a17      	ldr	r2, [pc, #92]	@ (3400822c <VD55G1_ComputeFrameLength+0x98>)
340081ce:	4620      	mov	r0, r4
340081d0:	9200      	str	r2, [sp, #0]
340081d2:	2100      	movs	r1, #0
340081d4:	4a16      	ldr	r2, [pc, #88]	@ (34008230 <VD55G1_ComputeFrameLength+0x9c>)
340081d6:	9301      	str	r3, [sp, #4]
340081d8:	f7ff fece 	bl	34007f78 <VD55G1_log_impl>
340081dc:	4620      	mov	r0, r4
340081de:	f7ff ff29 	bl	34008034 <display_error>
340081e2:	e01f      	b.n	34008224 <VD55G1_ComputeFrameLength+0x90>

  min_frame_length = height + VD55G1_MIN_VBLANK;
  req_frame_length = drv_ctx->pclk / (line_length * fps);
340081e4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
340081e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
340081ea:	4372      	muls	r2, r6
340081ec:	fbb0 f0f2 	udiv	r0, r0, r2
  min_frame_length = height + VD55G1_MIN_VBLANK;
340081f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  *frame_length = MIN(MAX(min_frame_length, req_frame_length), 65535);
340081f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
  min_frame_length = height + VD55G1_MIN_VBLANK;
340081f8:	3356      	adds	r3, #86	@ 0x56
  *frame_length = MIN(MAX(min_frame_length, req_frame_length), 65535);
340081fa:	4283      	cmp	r3, r0
340081fc:	461a      	mov	r2, r3
340081fe:	bfb8      	it	lt
34008200:	4602      	movlt	r2, r0
34008202:	428a      	cmp	r2, r1
34008204:	bfa8      	it	ge
34008206:	460a      	movge	r2, r1
34008208:	803a      	strh	r2, [r7, #0]

  VD55G1_dbg(ctx, 1, "frame_length to MAX(%d, %d) = %d to reach %d fps\n", min_frame_length, req_frame_length,
3400820a:	e9cd 3001 	strd	r3, r0, [sp, #4]
3400820e:	f240 235e 	movw	r3, #606	@ 0x25e
34008212:	e9cd 2603 	strd	r2, r6, [sp, #12]
34008216:	9300      	str	r3, [sp, #0]
34008218:	2104      	movs	r1, #4
3400821a:	2301      	movs	r3, #1
3400821c:	4620      	mov	r0, r4
3400821e:	4a05      	ldr	r2, [pc, #20]	@ (34008234 <VD55G1_ComputeFrameLength+0xa0>)
34008220:	f7ff feaa 	bl	34007f78 <VD55G1_log_impl>
             *frame_length, fps);

  return 0;
}
34008224:	4628      	mov	r0, r5
34008226:	b009      	add	sp, #36	@ 0x24
34008228:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400822a:	bf00      	nop
3400822c:	34028bfc 	.word	0x34028bfc
34008230:	34023f5f 	.word	0x34023f5f
34008234:	34024030 	.word	0x34024030

34008238 <VD55G1_SetFlicker>:

  return 0;
}

static int VD55G1_SetFlicker(VD55G1_Ctx_t *ctx, VD55G1_Flicker_t flicker)
{
34008238:	b530      	push	{r4, r5, lr}
3400823a:	2902      	cmp	r1, #2
3400823c:	4605      	mov	r5, r0
3400823e:	b085      	sub	sp, #20
34008240:	d818      	bhi.n	34008274 <VD55G1_SetFlicker+0x3c>
    break;
  default:
    return -1;
  }

  ret = ctx->write16(ctx, VD55G1_REG_EXPOSURE_COMPILER_CONTROL_A, mode);
34008242:	4a0e      	ldr	r2, [pc, #56]	@ (3400827c <VD55G1_SetFlicker+0x44>)
34008244:	6943      	ldr	r3, [r0, #20]
34008246:	5c52      	ldrb	r2, [r2, r1]
34008248:	f240 4182 	movw	r1, #1154	@ 0x482
3400824c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400824e:	4604      	mov	r4, r0
34008250:	b168      	cbz	r0, 3400826e <VD55G1_SetFlicker+0x36>
34008252:	f240 23ed 	movw	r3, #749	@ 0x2ed
34008256:	4a0a      	ldr	r2, [pc, #40]	@ (34008280 <VD55G1_SetFlicker+0x48>)
34008258:	9002      	str	r0, [sp, #8]
3400825a:	9200      	str	r2, [sp, #0]
3400825c:	4628      	mov	r0, r5
3400825e:	2100      	movs	r1, #0
34008260:	4a08      	ldr	r2, [pc, #32]	@ (34008284 <VD55G1_SetFlicker+0x4c>)
34008262:	9301      	str	r3, [sp, #4]
34008264:	f7ff fe88 	bl	34007f78 <VD55G1_log_impl>
34008268:	4628      	mov	r0, r5
3400826a:	f7ff fee3 	bl	34008034 <display_error>

  return 0;
}
3400826e:	4620      	mov	r0, r4
34008270:	b005      	add	sp, #20
34008272:	bd30      	pop	{r4, r5, pc}
    return -1;
34008274:	f04f 34ff 	mov.w	r4, #4294967295
34008278:	e7f9      	b.n	3400826e <VD55G1_SetFlicker+0x36>
3400827a:	bf00      	nop
3400827c:	34028b60 	.word	0x34028b60
34008280:	34028bab 	.word	0x34028bab
34008284:	34023f5f 	.word	0x34023f5f

34008288 <VD55G1_StopStreaming>:

  return 0;
}

static int VD55G1_StopStreaming(VD55G1_Ctx_t *ctx)
{
34008288:	b530      	push	{r4, r5, lr}
  int ret;

  ret = ctx->write8(ctx, VD55G1_REG_STREAMING, VD55G1_STREAMING_STOP_STREAM);
3400828a:	2201      	movs	r2, #1
3400828c:	f240 2102 	movw	r1, #514	@ 0x202
34008290:	6903      	ldr	r3, [r0, #16]
{
34008292:	b085      	sub	sp, #20
34008294:	4605      	mov	r5, r0
  ret = ctx->write8(ctx, VD55G1_REG_STREAMING, VD55G1_STREAMING_STOP_STREAM);
34008296:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008298:	4604      	mov	r4, r0
3400829a:	b958      	cbnz	r0, 340082b4 <VD55G1_StopStreaming+0x2c>

  ret = VD55G1_PollReg8(ctx, VD55G1_REG_STREAMING, VD55G1_CMD_ACK);
3400829c:	4602      	mov	r2, r0
3400829e:	f240 2102 	movw	r1, #514	@ 0x202
340082a2:	4628      	mov	r0, r5
340082a4:	f7ff fe76 	bl	34007f94 <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340082a8:	4604      	mov	r4, r0
340082aa:	b190      	cbz	r0, 340082d2 <VD55G1_StopStreaming+0x4a>
340082ac:	f240 3332 	movw	r3, #818	@ 0x332
340082b0:	9002      	str	r0, [sp, #8]
340082b2:	e002      	b.n	340082ba <VD55G1_StopStreaming+0x32>
  VD55G1_TraceError(ctx, ret);
340082b4:	f240 332f 	movw	r3, #815	@ 0x32f
340082b8:	9002      	str	r0, [sp, #8]

  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
  VD55G1_TraceError(ctx, ret);
340082ba:	4a10      	ldr	r2, [pc, #64]	@ (340082fc <VD55G1_StopStreaming+0x74>)
340082bc:	4628      	mov	r0, r5
340082be:	9200      	str	r2, [sp, #0]
340082c0:	2100      	movs	r1, #0
340082c2:	4a0f      	ldr	r2, [pc, #60]	@ (34008300 <VD55G1_StopStreaming+0x78>)
340082c4:	9301      	str	r3, [sp, #4]
340082c6:	f7ff fe57 	bl	34007f78 <VD55G1_log_impl>
340082ca:	4628      	mov	r0, r5
340082cc:	f7ff feb2 	bl	34008034 <display_error>
340082d0:	e010      	b.n	340082f4 <VD55G1_StopStreaming+0x6c>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
340082d2:	2102      	movs	r1, #2
340082d4:	4628      	mov	r0, r5
340082d6:	f7ff fe89 	bl	34007fec <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
340082da:	4604      	mov	r4, r0
340082dc:	b118      	cbz	r0, 340082e6 <VD55G1_StopStreaming+0x5e>
340082de:	f240 3335 	movw	r3, #821	@ 0x335
340082e2:	9002      	str	r0, [sp, #8]
340082e4:	e7e9      	b.n	340082ba <VD55G1_StopStreaming+0x32>

  VD55G1_notice(ctx, "Streaming is off\n");
340082e6:	f240 3337 	movw	r3, #823	@ 0x337
340082ea:	2102      	movs	r1, #2
340082ec:	4628      	mov	r0, r5
340082ee:	4a05      	ldr	r2, [pc, #20]	@ (34008304 <VD55G1_StopStreaming+0x7c>)
340082f0:	f7ff fe42 	bl	34007f78 <VD55G1_log_impl>

  return 0;
}
340082f4:	4620      	mov	r0, r4
340082f6:	b005      	add	sp, #20
340082f8:	bd30      	pop	{r4, r5, pc}
340082fa:	bf00      	nop
340082fc:	34028b80 	.word	0x34028b80
34008300:	34023f5f 	.word	0x34023f5f
34008304:	34024073 	.word	0x34024073

34008308 <VD55G1_Init>:

  return VD55G1_StartAWU(ctx);
}

int VD55G1_Init(VD55G1_Ctx_t *ctx, VD55G1_Config_t *config)
{
34008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VD55G1_AWUConfig_t *awu = &config->awu;
  struct drv_ctx *drv_ctx = &ctx->ctx;
  int ret;

  if (config->frame_rate < VD55G1_MIN_FPS)
3400830c:	688b      	ldr	r3, [r1, #8]
{
3400830e:	4605      	mov	r5, r0
  if (config->frame_rate < VD55G1_MIN_FPS)
34008310:	3b02      	subs	r3, #2
34008312:	2ba6      	cmp	r3, #166	@ 0xa6
{
34008314:	460c      	mov	r4, r1
34008316:	b086      	sub	sp, #24
  if (config->frame_rate < VD55G1_MIN_FPS)
34008318:	d802      	bhi.n	34008320 <VD55G1_Init+0x18>
    return -1;
  if (config->frame_rate > VD55G1_MAX_FPS)
    return -1;

  if ((config->resolution != VD55G1_RES_QVGA_320_240) &&
3400831a:	790b      	ldrb	r3, [r1, #4]
3400831c:	2b03      	cmp	r3, #3
3400831e:	d905      	bls.n	3400832c <VD55G1_Init+0x24>
    return -1;
34008320:	f04f 34ff 	mov.w	r4, #4294967295
    return ret;

  drv_ctx->state = VD55G1_ST_IDLE;

  return 0;
}
34008324:	4620      	mov	r0, r4
34008326:	b006      	add	sp, #24
34008328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (awu->is_enable && awu->threshold != VD55G1_AWU_THRESHOLD_DEFAULT) {
3400832c:	69cb      	ldr	r3, [r1, #28]
3400832e:	b123      	cbz	r3, 3400833a <VD55G1_Init+0x32>
34008330:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
34008332:	b113      	cbz	r3, 3400833a <VD55G1_Init+0x32>
    if (awu->threshold < VD55G1_AWU_THRESHOLD_MIN)
34008334:	3b02      	subs	r3, #2
34008336:	2b7e      	cmp	r3, #126	@ 0x7e
34008338:	d8f2      	bhi.n	34008320 <VD55G1_Init+0x18>
  drv_ctx->config_save = *config;
3400833a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400833c:	f105 0634 	add.w	r6, r5, #52	@ 0x34
34008340:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008344:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008348:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400834a:	6823      	ldr	r3, [r4, #0]
  ctx->shutdown_pin(ctx, 0);
3400834c:	2100      	movs	r1, #0
3400834e:	4628      	mov	r0, r5
  drv_ctx->config_save = *config;
34008350:	6033      	str	r3, [r6, #0]
  ctx->shutdown_pin(ctx, 0);
34008352:	682b      	ldr	r3, [r5, #0]
34008354:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008356:	210a      	movs	r1, #10
34008358:	4628      	mov	r0, r5
3400835a:	6a2b      	ldr	r3, [r5, #32]
3400835c:	4798      	blx	r3
  ctx->shutdown_pin(ctx, 1);
3400835e:	2101      	movs	r1, #1
34008360:	4628      	mov	r0, r5
34008362:	682b      	ldr	r3, [r5, #0]
34008364:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008366:	210a      	movs	r1, #10
34008368:	4628      	mov	r0, r5
3400836a:	6a2b      	ldr	r3, [r5, #32]
3400836c:	4798      	blx	r3
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_READY_TO_BOOT);
3400836e:	2101      	movs	r1, #1
34008370:	4628      	mov	r0, r5
34008372:	f7ff fe3b 	bl	34007fec <VD55G1_WaitState>
  if (ret)
34008376:	4604      	mov	r4, r0
34008378:	2800      	cmp	r0, #0
3400837a:	d1d3      	bne.n	34008324 <VD55G1_Init+0x1c>
  ret = ctx->read32(ctx, VD55G1_REG_MODEL_ID, &reg32);
3400837c:	4601      	mov	r1, r0
3400837e:	68eb      	ldr	r3, [r5, #12]
34008380:	4628      	mov	r0, r5
34008382:	aa05      	add	r2, sp, #20
34008384:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008386:	4604      	mov	r4, r0
34008388:	b9c0      	cbnz	r0, 340083bc <VD55G1_Init+0xb4>
  VD55G1_dbg(ctx, 0, "model_id = 0x%04x\n", reg32);
3400838a:	9b05      	ldr	r3, [sp, #20]
3400838c:	4a52      	ldr	r2, [pc, #328]	@ (340084d8 <VD55G1_Init+0x1d0>)
3400838e:	9301      	str	r3, [sp, #4]
34008390:	f240 1351 	movw	r3, #337	@ 0x151
34008394:	2103      	movs	r1, #3
34008396:	9300      	str	r3, [sp, #0]
34008398:	4603      	mov	r3, r0
3400839a:	4628      	mov	r0, r5
3400839c:	f7ff fdec 	bl	34007f78 <VD55G1_log_impl>
  if (reg32 != VD55G1_MODEL_ID) {
340083a0:	9a05      	ldr	r2, [sp, #20]
340083a2:	4b4e      	ldr	r3, [pc, #312]	@ (340084dc <VD55G1_Init+0x1d4>)
340083a4:	429a      	cmp	r2, r3
340083a6:	d018      	beq.n	340083da <VD55G1_Init+0xd2>
    VD55G1_error(ctx, "Bad model id expected 0x%04x / got 0x%04x\n", VD55G1_MODEL_ID, reg32);
340083a8:	e9cd 3200 	strd	r3, r2, [sp]
340083ac:	4621      	mov	r1, r4
340083ae:	f240 1353 	movw	r3, #339	@ 0x153
340083b2:	4628      	mov	r0, r5
340083b4:	4a4a      	ldr	r2, [pc, #296]	@ (340084e0 <VD55G1_Init+0x1d8>)
340083b6:	f7ff fddf 	bl	34007f78 <VD55G1_log_impl>
  if (ret)
340083ba:	e7b1      	b.n	34008320 <VD55G1_Init+0x18>
  VD55G1_TraceError(ctx, ret);
340083bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
340083c0:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340083c2:	4a48      	ldr	r2, [pc, #288]	@ (340084e4 <VD55G1_Init+0x1dc>)
340083c4:	9301      	str	r3, [sp, #4]
    VD55G1_TraceError(ctx, ret);
340083c6:	4628      	mov	r0, r5
340083c8:	9200      	str	r2, [sp, #0]
340083ca:	2100      	movs	r1, #0
340083cc:	4a46      	ldr	r2, [pc, #280]	@ (340084e8 <VD55G1_Init+0x1e0>)
340083ce:	f7ff fdd3 	bl	34007f78 <VD55G1_log_impl>
340083d2:	4628      	mov	r0, r5
340083d4:	f7ff fe2e 	bl	34008034 <display_error>
  if (ret)
340083d8:	e7a4      	b.n	34008324 <VD55G1_Init+0x1c>
  ret = ctx->read16(ctx, VD55G1_REG_REVISION, &reg16);
340083da:	2104      	movs	r1, #4
340083dc:	4628      	mov	r0, r5
340083de:	68ab      	ldr	r3, [r5, #8]
340083e0:	f10d 0212 	add.w	r2, sp, #18
340083e4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340083e6:	4604      	mov	r4, r0
340083e8:	b9f0      	cbnz	r0, 34008428 <VD55G1_Init+0x120>
  VD55G1_dbg(ctx, 0, "revision = 0x%04x\n", reg16);
340083ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
340083ee:	4a3f      	ldr	r2, [pc, #252]	@ (340084ec <VD55G1_Init+0x1e4>)
340083f0:	9301      	str	r3, [sp, #4]
340083f2:	f240 1359 	movw	r3, #345	@ 0x159
340083f6:	2103      	movs	r1, #3
340083f8:	9300      	str	r3, [sp, #0]
340083fa:	4603      	mov	r3, r0
340083fc:	4628      	mov	r0, r5
340083fe:	f7ff fdbb 	bl	34007f78 <VD55G1_log_impl>
  switch (reg16) {
34008402:	f241 0210 	movw	r2, #4112	@ 0x1010
34008406:	f8bd 3012 	ldrh.w	r3, [sp, #18]
3400840a:	4293      	cmp	r3, r2
3400840c:	d010      	beq.n	34008430 <VD55G1_Init+0x128>
3400840e:	f242 0220 	movw	r2, #8224	@ 0x2020
34008412:	4293      	cmp	r3, r2
34008414:	d00c      	beq.n	34008430 <VD55G1_Init+0x128>
    VD55G1_error(ctx, "Unsupported revision0x%04x\n", reg16);
34008416:	9300      	str	r3, [sp, #0]
34008418:	4621      	mov	r1, r4
3400841a:	f44f 73b1 	mov.w	r3, #354	@ 0x162
3400841e:	4628      	mov	r0, r5
34008420:	4a33      	ldr	r2, [pc, #204]	@ (340084f0 <VD55G1_Init+0x1e8>)
34008422:	f7ff fda9 	bl	34007f78 <VD55G1_log_impl>
  if (ret)
34008426:	e77b      	b.n	34008320 <VD55G1_Init+0x18>
  VD55G1_TraceError(ctx, ret);
34008428:	f44f 73ac 	mov.w	r3, #344	@ 0x158
3400842c:	9002      	str	r0, [sp, #8]
3400842e:	e7c8      	b.n	340083c2 <VD55G1_Init+0xba>
    drv_ctx->cut_version = VD55G1_REVISION_CUT_1;
34008430:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ret = ctx->read32(ctx, VD55G1_REG_ROM_REVISION, &reg32);
34008432:	2108      	movs	r1, #8
34008434:	4628      	mov	r0, r5
34008436:	68eb      	ldr	r3, [r5, #12]
34008438:	aa05      	add	r2, sp, #20
3400843a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400843c:	4604      	mov	r4, r0
3400843e:	b9d0      	cbnz	r0, 34008476 <VD55G1_Init+0x16e>
  VD55G1_dbg(ctx, 0, "rom = 0x%04x\n", reg32);
34008440:	9b05      	ldr	r3, [sp, #20]
34008442:	4a2c      	ldr	r2, [pc, #176]	@ (340084f4 <VD55G1_Init+0x1ec>)
34008444:	9301      	str	r3, [sp, #4]
34008446:	f44f 73b4 	mov.w	r3, #360	@ 0x168
3400844a:	2103      	movs	r1, #3
3400844c:	9300      	str	r3, [sp, #0]
3400844e:	4603      	mov	r3, r0
34008450:	4628      	mov	r0, r5
34008452:	f7ff fd91 	bl	34007f78 <VD55G1_log_impl>
  switch (drv_ctx->cut_version) {
34008456:	f241 0210 	movw	r2, #4112	@ 0x1010
3400845a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
3400845c:	4293      	cmp	r3, r2
3400845e:	d00e      	beq.n	3400847e <VD55G1_Init+0x176>
34008460:	f242 0220 	movw	r2, #8224	@ 0x2020
34008464:	4293      	cmp	r3, r2
34008466:	d02b      	beq.n	340084c0 <VD55G1_Init+0x1b8>
    assert(0);
34008468:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
3400846c:	4b22      	ldr	r3, [pc, #136]	@ (340084f8 <VD55G1_Init+0x1f0>)
3400846e:	4a23      	ldr	r2, [pc, #140]	@ (340084fc <VD55G1_Init+0x1f4>)
34008470:	4823      	ldr	r0, [pc, #140]	@ (34008500 <VD55G1_Init+0x1f8>)
34008472:	f015 fabb 	bl	3401d9ec <__assert_func>
  VD55G1_TraceError(ctx, ret);
34008476:	f240 1367 	movw	r3, #359	@ 0x167
3400847a:	9002      	str	r0, [sp, #8]
3400847c:	e7a1      	b.n	340083c2 <VD55G1_Init+0xba>
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_1, sizeof(patch_array_cut_1),
3400847e:	2316      	movs	r3, #22
34008480:	f241 22e4 	movw	r2, #4836	@ 0x12e4
34008484:	9300      	str	r3, [sp, #0]
34008486:	2301      	movs	r3, #1
34008488:	491e      	ldr	r1, [pc, #120]	@ (34008504 <VD55G1_Init+0x1fc>)
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_2, sizeof(patch_array_cut_2),
3400848a:	4628      	mov	r0, r5
3400848c:	f7ff fdf4 	bl	34008078 <VD55G1_ApplyPatchCommon>
34008490:	4604      	mov	r4, r0
  if (ret)
34008492:	2800      	cmp	r0, #0
34008494:	f47f af46 	bne.w	34008324 <VD55G1_Init+0x1c>
34008498:	f240 561d 	movw	r6, #1309	@ 0x51d
  for (i = 0 ; i < VD55G1_GPIO_NB; i++)
3400849c:	f240 5821 	movw	r8, #1313	@ 0x521
340084a0:	f105 0763 	add.w	r7, r5, #99	@ 0x63
    ret = ctx->write8(ctx, VD55G1_REG_GPIO_x(i), drv_ctx->config_save.gpio_ctrl[i]);
340084a4:	4631      	mov	r1, r6
340084a6:	4628      	mov	r0, r5
340084a8:	692b      	ldr	r3, [r5, #16]
340084aa:	f817 2f01 	ldrb.w	r2, [r7, #1]!
340084ae:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
340084b0:	4604      	mov	r4, r0
340084b2:	b158      	cbz	r0, 340084cc <VD55G1_Init+0x1c4>
340084b4:	f240 13a9 	movw	r3, #425	@ 0x1a9
340084b8:	4a13      	ldr	r2, [pc, #76]	@ (34008508 <VD55G1_Init+0x200>)
340084ba:	9002      	str	r0, [sp, #8]
340084bc:	9301      	str	r3, [sp, #4]
340084be:	e782      	b.n	340083c6 <VD55G1_Init+0xbe>
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_2, sizeof(patch_array_cut_2),
340084c0:	2302      	movs	r3, #2
340084c2:	f44f 7272 	mov.w	r2, #968	@ 0x3c8
340084c6:	4911      	ldr	r1, [pc, #68]	@ (3400850c <VD55G1_Init+0x204>)
340084c8:	9300      	str	r3, [sp, #0]
340084ca:	e7de      	b.n	3400848a <VD55G1_Init+0x182>
  for (i = 0 ; i < VD55G1_GPIO_NB; i++)
340084cc:	3601      	adds	r6, #1
340084ce:	b2b6      	uxth	r6, r6
340084d0:	4546      	cmp	r6, r8
340084d2:	d1e7      	bne.n	340084a4 <VD55G1_Init+0x19c>
  drv_ctx->state = VD55G1_ST_IDLE;
340084d4:	62a8      	str	r0, [r5, #40]	@ 0x28
  return 0;
340084d6:	e725      	b.n	34008324 <VD55G1_Init+0x1c>
340084d8:	34024095 	.word	0x34024095
340084dc:	53354731 	.word	0x53354731
340084e0:	340240b9 	.word	0x340240b9
340084e4:	34028cc9 	.word	0x34028cc9
340084e8:	34023f5f 	.word	0x34023f5f
340084ec:	340240f4 	.word	0x340240f4
340084f0:	34024118 	.word	0x34024118
340084f4:	34024144 	.word	0x34024144
340084f8:	340235d8 	.word	0x340235d8
340084fc:	34028ca9 	.word	0x34028ca9
34008500:	34023ef1 	.word	0x34023ef1
34008504:	34029118 	.word	0x34029118
34008508:	34028c84 	.word	0x34028c84
3400850c:	34028d50 	.word	0x34028d50

34008510 <VD55G1_DeInit>:

int VD55G1_DeInit(VD55G1_Ctx_t *ctx)
{
  struct drv_ctx *drv_ctx = &ctx->ctx;

  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008510:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
34008512:	b510      	push	{r4, lr}
  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008514:	2b01      	cmp	r3, #1
{
34008516:	4604      	mov	r4, r0
  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008518:	d008      	beq.n	3400852c <VD55G1_DeInit+0x1c>
    return -1;

  ctx->shutdown_pin(ctx, 0);
3400851a:	6803      	ldr	r3, [r0, #0]
3400851c:	2100      	movs	r1, #0
3400851e:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008520:	4620      	mov	r0, r4
34008522:	210a      	movs	r1, #10
34008524:	6a23      	ldr	r3, [r4, #32]
34008526:	4798      	blx	r3

  return 0;
34008528:	2000      	movs	r0, #0
}
3400852a:	bd10      	pop	{r4, pc}
    return -1;
3400852c:	f04f 30ff 	mov.w	r0, #4294967295
34008530:	e7fb      	b.n	3400852a <VD55G1_DeInit+0x1a>
34008532:	0000      	movs	r0, r0
34008534:	0000      	movs	r0, r0
	...

34008538 <VD55G1_Start>:

int VD55G1_Start(VD55G1_Ctx_t *ctx)
{
34008538:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (drv_ctx->config_save.out_itf.data_rate_in_mps < VD55G1_MIN_DATARATE ||
3400853a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
3400853c:	4e8a      	ldr	r6, [pc, #552]	@ (34008768 <VD55G1_Start+0x230>)
3400853e:	4a8b      	ldr	r2, [pc, #556]	@ (3400876c <VD55G1_Start+0x234>)
34008540:	4433      	add	r3, r6
34008542:	4293      	cmp	r3, r2
{
34008544:	4605      	mov	r5, r0
34008546:	b087      	sub	sp, #28
  if (drv_ctx->config_save.out_itf.data_rate_in_mps < VD55G1_MIN_DATARATE ||
34008548:	d87e      	bhi.n	34008648 <VD55G1_Start+0x110>
  ret = ctx->write32(ctx, VD55G1_REG_EXT_CLOCK, drv_ctx->config_save.ext_clock_freq_in_hz);
3400854a:	f44f 7108 	mov.w	r1, #544	@ 0x220
3400854e:	6983      	ldr	r3, [r0, #24]
34008550:	6b42      	ldr	r2, [r0, #52]	@ 0x34
34008552:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008554:	4604      	mov	r4, r0
34008556:	b958      	cbnz	r0, 34008570 <VD55G1_Start+0x38>
  ret = ctx->write32(ctx, VD55G1_REG_MIPI_DATA_RATE, drv_ctx->config_save.out_itf.data_rate_in_mps);
34008558:	f44f 7109 	mov.w	r1, #548	@ 0x224
3400855c:	4628      	mov	r0, r5
3400855e:	69ab      	ldr	r3, [r5, #24]
34008560:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
34008562:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008564:	4604      	mov	r4, r0
34008566:	b300      	cbz	r0, 340085aa <VD55G1_Start+0x72>
34008568:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
3400856c:	9002      	str	r0, [sp, #8]
3400856e:	e002      	b.n	34008576 <VD55G1_Start+0x3e>
  VD55G1_TraceError(ctx, ret);
34008570:	f240 13f5 	movw	r3, #501	@ 0x1f5
34008574:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008576:	4a7e      	ldr	r2, [pc, #504]	@ (34008770 <VD55G1_Start+0x238>)
34008578:	4628      	mov	r0, r5
3400857a:	9200      	str	r2, [sp, #0]
3400857c:	2100      	movs	r1, #0
3400857e:	4a7d      	ldr	r2, [pc, #500]	@ (34008774 <VD55G1_Start+0x23c>)
34008580:	9301      	str	r3, [sp, #4]
34008582:	f7ff fcf9 	bl	34007f78 <VD55G1_log_impl>
34008586:	4628      	mov	r0, r5
34008588:	f7ff fd54 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
3400858c:	f240 23fe 	movw	r3, #766	@ 0x2fe
34008590:	9402      	str	r4, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008592:	4a79      	ldr	r2, [pc, #484]	@ (34008778 <VD55G1_Start+0x240>)
34008594:	9301      	str	r3, [sp, #4]
  VD55G1_TraceError(ctx, ret);
34008596:	4628      	mov	r0, r5
34008598:	9200      	str	r2, [sp, #0]
3400859a:	2100      	movs	r1, #0
3400859c:	4a75      	ldr	r2, [pc, #468]	@ (34008774 <VD55G1_Start+0x23c>)
3400859e:	f7ff fceb 	bl	34007f78 <VD55G1_log_impl>
340085a2:	4628      	mov	r0, r5
340085a4:	f7ff fd46 	bl	34008034 <display_error>
  ret = VD55G1_Setup(ctx);
  if (ret)
    return ret;

  ret = VD55G1_StartStreaming(ctx);
  if (ret)
340085a8:	e233      	b.n	34008a12 <VD55G1_Start+0x4da>
  ret = ctx->read32(ctx, VD55G1_REG_MIPI_DATA_RATE, &mipi_data_rate);
340085aa:	f44f 7109 	mov.w	r1, #548	@ 0x224
340085ae:	4628      	mov	r0, r5
340085b0:	68eb      	ldr	r3, [r5, #12]
340085b2:	aa05      	add	r2, sp, #20
340085b4:	4798      	blx	r3
  if (ret)
340085b6:	2800      	cmp	r0, #0
340085b8:	d144      	bne.n	34008644 <VD55G1_Start+0x10c>
  if (mipi_data_rate <= 1200000000 && mipi_data_rate > 600000000)
340085ba:	9b05      	ldr	r3, [sp, #20]
340085bc:	4a6f      	ldr	r2, [pc, #444]	@ (3400877c <VD55G1_Start+0x244>)
340085be:	4970      	ldr	r1, [pc, #448]	@ (34008780 <VD55G1_Start+0x248>)
340085c0:	441a      	add	r2, r3
340085c2:	428a      	cmp	r2, r1
340085c4:	496f      	ldr	r1, [pc, #444]	@ (34008784 <VD55G1_Start+0x24c>)
340085c6:	d904      	bls.n	340085d2 <VD55G1_Start+0x9a>
  else if (mipi_data_rate <= 600000000 && mipi_data_rate > 300000000)
340085c8:	4a6f      	ldr	r2, [pc, #444]	@ (34008788 <VD55G1_Start+0x250>)
340085ca:	441a      	add	r2, r3
340085cc:	428a      	cmp	r2, r1
340085ce:	d80e      	bhi.n	340085ee <VD55G1_Start+0xb6>
    return mipi_data_rate * 2;
340085d0:	005b      	lsls	r3, r3, #1
  if (system_clk <= 1200000000 && system_clk > 900000000)
340085d2:	4a6e      	ldr	r2, [pc, #440]	@ (3400878c <VD55G1_Start+0x254>)
340085d4:	441a      	add	r2, r3
340085d6:	428a      	cmp	r2, r1
340085d8:	d90e      	bls.n	340085f8 <VD55G1_Start+0xc0>
  else if (system_clk <= 900000000 && system_clk > 780000000)
340085da:	4a6d      	ldr	r2, [pc, #436]	@ (34008790 <VD55G1_Start+0x258>)
340085dc:	496d      	ldr	r1, [pc, #436]	@ (34008794 <VD55G1_Start+0x25c>)
340085de:	441a      	add	r2, r3
340085e0:	428a      	cmp	r2, r1
    return system_clk / 6;
340085e2:	bf94      	ite	ls
340085e4:	2206      	movls	r2, #6
    return system_clk / 5;
340085e6:	2205      	movhi	r2, #5
340085e8:	fbb3 f3f2 	udiv	r3, r3, r2
  if (!drv_ctx->pclk)
340085ec:	e005      	b.n	340085fa <VD55G1_Start+0xc2>
  else if (mipi_data_rate <= 300000000 && mipi_data_rate >= 250000000)
340085ee:	4a6a      	ldr	r2, [pc, #424]	@ (34008798 <VD55G1_Start+0x260>)
340085f0:	441e      	add	r6, r3
340085f2:	4296      	cmp	r6, r2
340085f4:	d826      	bhi.n	34008644 <VD55G1_Start+0x10c>
    return mipi_data_rate * 4;
340085f6:	009b      	lsls	r3, r3, #2
    return system_clk / 8;
340085f8:	08db      	lsrs	r3, r3, #3
  drv_ctx->pclk = VD55G1_GetPixelClock(ctx);
340085fa:	632b      	str	r3, [r5, #48]	@ 0x30
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
340085fc:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
340085fe:	2208      	movs	r2, #8
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34008600:	3b00      	subs	r3, #0
34008602:	bf18      	it	ne
34008604:	2301      	movne	r3, #1
34008606:	64ab      	str	r3, [r5, #72]	@ 0x48
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008608:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
3400860a:	f240 310a 	movw	r1, #778	@ 0x30a
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
3400860e:	3b00      	subs	r3, #0
34008610:	bf18      	it	ne
34008612:	2301      	movne	r3, #1
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008614:	4628      	mov	r0, r5
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008616:	64eb      	str	r3, [r5, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008618:	692b      	ldr	r3, [r5, #16]
3400861a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400861c:	4604      	mov	r4, r0
3400861e:	b1b0      	cbz	r0, 3400864e <VD55G1_Start+0x116>
34008620:	f240 230d 	movw	r3, #525	@ 0x20d
34008624:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008626:	4a5d      	ldr	r2, [pc, #372]	@ (3400879c <VD55G1_Start+0x264>)
34008628:	9301      	str	r3, [sp, #4]
3400862a:	2100      	movs	r1, #0
3400862c:	4628      	mov	r0, r5
3400862e:	9200      	str	r2, [sp, #0]
34008630:	4a50      	ldr	r2, [pc, #320]	@ (34008774 <VD55G1_Start+0x23c>)
34008632:	f7ff fca1 	bl	34007f78 <VD55G1_log_impl>
34008636:	4628      	mov	r0, r5
34008638:	f7ff fcfc 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
3400863c:	f240 3301 	movw	r3, #769	@ 0x301
34008640:	9402      	str	r4, [sp, #8]
34008642:	e7a6      	b.n	34008592 <VD55G1_Start+0x5a>
  drv_ctx->pclk = VD55G1_GetPixelClock(ctx);
34008644:	2300      	movs	r3, #0
34008646:	632b      	str	r3, [r5, #48]	@ 0x30
    return -1;
34008648:	f04f 34ff 	mov.w	r4, #4294967295
3400864c:	e79e      	b.n	3400858c <VD55G1_Start+0x54>
  oif_ctrl = out_itf->data_lane_swap_enable << 6 |
3400864e:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
34008652:	00d2      	lsls	r2, r2, #3
34008654:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
  ret = ctx->write16(ctx, VD55G1_REG_OIF_CTRL, oif_ctrl);
34008658:	f44f 7143 	mov.w	r1, #780	@ 0x30c
3400865c:	4628      	mov	r0, r5
3400865e:	696b      	ldr	r3, [r5, #20]
34008660:	b292      	uxth	r2, r2
34008662:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008664:	4604      	mov	r4, r0
34008666:	b958      	cbnz	r0, 34008680 <VD55G1_Start+0x148>
  ret = ctx->write8(ctx, VD55G1_REG_OIF_IMG_CTRL, 0x2a);
34008668:	222a      	movs	r2, #42	@ 0x2a
3400866a:	f240 310f 	movw	r1, #783	@ 0x30f
3400866e:	4628      	mov	r0, r5
34008670:	692b      	ldr	r3, [r5, #16]
34008672:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008674:	4604      	mov	r4, r0
34008676:	b138      	cbz	r0, 34008688 <VD55G1_Start+0x150>
34008678:	f240 2317 	movw	r3, #535	@ 0x217
3400867c:	9002      	str	r0, [sp, #8]
3400867e:	e7d2      	b.n	34008626 <VD55G1_Start+0xee>
  VD55G1_TraceError(ctx, ret);
34008680:	f240 2313 	movw	r3, #531	@ 0x213
34008684:	9002      	str	r0, [sp, #8]
34008686:	e7ce      	b.n	34008626 <VD55G1_Start+0xee>
  mode = VD55G1_Resolution2Mode(drv_ctx->config_save.resolution);
34008688:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
  switch (resolution) {
3400868c:	2b03      	cmp	r3, #3
3400868e:	f200 8102 	bhi.w	34008896 <VD55G1_Start+0x35e>
34008692:	4a43      	ldr	r2, [pc, #268]	@ (340087a0 <VD55G1_Start+0x268>)
34008694:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (!mode)
34008698:	2e00      	cmp	r6, #0
3400869a:	f000 80fc 	beq.w	34008896 <VD55G1_Start+0x35e>
  ret = ctx->write8(ctx, VD55G1_REG_READOUT_CTRL, mode->bin_mode);
3400869e:	f240 512e 	movw	r1, #1326	@ 0x52e
340086a2:	4628      	mov	r0, r5
340086a4:	692b      	ldr	r3, [r5, #16]
340086a6:	7a32      	ldrb	r2, [r6, #8]
340086a8:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340086aa:	4604      	mov	r4, r0
340086ac:	b188      	cbz	r0, 340086d2 <VD55G1_Start+0x19a>
340086ae:	f240 2327 	movw	r3, #551	@ 0x227
340086b2:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340086b4:	4a3b      	ldr	r2, [pc, #236]	@ (340087a4 <VD55G1_Start+0x26c>)
340086b6:	4628      	mov	r0, r5
340086b8:	9200      	str	r2, [sp, #0]
340086ba:	2100      	movs	r1, #0
340086bc:	4a2d      	ldr	r2, [pc, #180]	@ (34008774 <VD55G1_Start+0x23c>)
340086be:	9301      	str	r3, [sp, #4]
340086c0:	f7ff fc5a 	bl	34007f78 <VD55G1_log_impl>
340086c4:	4628      	mov	r0, r5
340086c6:	f7ff fcb5 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
340086ca:	f44f 7341 	mov.w	r3, #772	@ 0x304
340086ce:	9402      	str	r4, [sp, #8]
340086d0:	e75f      	b.n	34008592 <VD55G1_Start+0x5a>
  ret = ctx->write16(ctx, VD55G1_REG_X_START, mode->crop.left);
340086d2:	f240 5114 	movw	r1, #1300	@ 0x514
340086d6:	4628      	mov	r0, r5
340086d8:	696b      	ldr	r3, [r5, #20]
340086da:	89b2      	ldrh	r2, [r6, #12]
340086dc:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340086de:	4604      	mov	r4, r0
340086e0:	b958      	cbnz	r0, 340086fa <VD55G1_Start+0x1c2>
  ret = ctx->write16(ctx, VD55G1_REG_X_WIDTH, mode->crop.width);
340086e2:	f240 5116 	movw	r1, #1302	@ 0x516
340086e6:	4628      	mov	r0, r5
340086e8:	696b      	ldr	r3, [r5, #20]
340086ea:	8ab2      	ldrh	r2, [r6, #20]
340086ec:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340086ee:	4604      	mov	r4, r0
340086f0:	b138      	cbz	r0, 34008702 <VD55G1_Start+0x1ca>
340086f2:	f44f 730b 	mov.w	r3, #556	@ 0x22c
340086f6:	9002      	str	r0, [sp, #8]
340086f8:	e7dc      	b.n	340086b4 <VD55G1_Start+0x17c>
  VD55G1_TraceError(ctx, ret);
340086fa:	f240 232a 	movw	r3, #554	@ 0x22a
340086fe:	9002      	str	r0, [sp, #8]
34008700:	e7d8      	b.n	340086b4 <VD55G1_Start+0x17c>
  ret = ctx->write16(ctx, VD55G1_REG_Y_START, mode->crop.top);
34008702:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
34008706:	4628      	mov	r0, r5
34008708:	696b      	ldr	r3, [r5, #20]
3400870a:	8a32      	ldrh	r2, [r6, #16]
3400870c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400870e:	4604      	mov	r4, r0
34008710:	b118      	cbz	r0, 3400871a <VD55G1_Start+0x1e2>
34008712:	f240 232e 	movw	r3, #558	@ 0x22e
34008716:	9002      	str	r0, [sp, #8]
34008718:	e7cc      	b.n	340086b4 <VD55G1_Start+0x17c>
  ret = ctx->write16(ctx, VD55G1_REG_Y_HEIGHT, mode->crop.height);
3400871a:	f240 5112 	movw	r1, #1298	@ 0x512
3400871e:	4628      	mov	r0, r5
34008720:	696b      	ldr	r3, [r5, #20]
34008722:	8b32      	ldrh	r2, [r6, #24]
34008724:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008726:	4604      	mov	r4, r0
34008728:	b118      	cbz	r0, 34008732 <VD55G1_Start+0x1fa>
3400872a:	f44f 730c 	mov.w	r3, #560	@ 0x230
3400872e:	9002      	str	r0, [sp, #8]
34008730:	e7c0      	b.n	340086b4 <VD55G1_Start+0x17c>
  ret = ctx->read16(ctx, VD55G1_REG_X_WIDTH, &width);
34008732:	f240 5116 	movw	r1, #1302	@ 0x516
34008736:	4628      	mov	r0, r5
34008738:	68ab      	ldr	r3, [r5, #8]
3400873a:	aa05      	add	r2, sp, #20
3400873c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400873e:	4604      	mov	r4, r0
34008740:	b3a0      	cbz	r0, 340087ac <VD55G1_Start+0x274>
34008742:	f240 233e 	movw	r3, #574	@ 0x23e
34008746:	9002      	str	r0, [sp, #8]
34008748:	4a17      	ldr	r2, [pc, #92]	@ (340087a8 <VD55G1_Start+0x270>)
3400874a:	9301      	str	r3, [sp, #4]
3400874c:	4628      	mov	r0, r5
3400874e:	9200      	str	r2, [sp, #0]
34008750:	2100      	movs	r1, #0
34008752:	4a08      	ldr	r2, [pc, #32]	@ (34008774 <VD55G1_Start+0x23c>)
34008754:	f7ff fc10 	bl	34007f78 <VD55G1_log_impl>
34008758:	4628      	mov	r0, r5
3400875a:	f7ff fc6b 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
3400875e:	f240 3307 	movw	r3, #775	@ 0x307
34008762:	9402      	str	r4, [sp, #8]
34008764:	e715      	b.n	34008592 <VD55G1_Start+0x5a>
34008766:	bf00      	nop
34008768:	f1194d80 	.word	0xf1194d80
3400876c:	389fd980 	.word	0x389fd980
34008770:	34028c64 	.word	0x34028c64
34008774:	34023f5f 	.word	0x34023f5f
34008778:	34028c77 	.word	0x34028c77
3400877c:	dc3cb9ff 	.word	0xdc3cb9ff
34008780:	23c345ff 	.word	0x23c345ff
34008784:	11e1a2ff 	.word	0x11e1a2ff
34008788:	ee1e5cff 	.word	0xee1e5cff
3400878c:	ca5b16ff 	.word	0xca5b16ff
34008790:	d18224ff 	.word	0xd18224ff
34008794:	07270dff 	.word	0x07270dff
34008798:	02faf080 	.word	0x02faf080
3400879c:	34028c51 	.word	0x34028c51
340087a0:	34028b70 	.word	0x34028b70
340087a4:	34028c40 	.word	0x34028c40
340087a8:	34028c16 	.word	0x34028c16
  min_line_len_mipi = ((width * VD55G1_MIPI_BPP + VD55G1_MIPI_MARGIN) * (uint64_t)drv_ctx->pclk)
340087ac:	f8bd 1014 	ldrh.w	r1, [sp, #20]
340087b0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
340087b2:	00c9      	lsls	r1, r1, #3
340087b4:	f501 7161 	add.w	r1, r1, #900	@ 0x384
                      / VD55G1_MIPI_DATA_RATE_HZ;
340087b8:	a3a3      	add	r3, pc, #652	@ (adr r3, 34008a48 <VD55G1_Start+0x510>)
340087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
340087be:	fba1 0100 	umull	r0, r1, r1, r0
340087c2:	f7f9 f9c3 	bl	34001b4c <__aeabi_uldivmod>
  line_len = MAX(VD55G1_MIN_LINE_LEN_ADC_10, min_line_len_mipi);
340087c6:	f5b0 6f8d 	cmp.w	r0, #1128	@ 0x468
340087ca:	bfb8      	it	lt
340087cc:	f44f 608d 	movlt.w	r0, #1128	@ 0x468
  ret = ctx->write16(ctx, VD55G1_REG_LINE_LENGTH, line_len);
340087d0:	f44f 7140 	mov.w	r1, #768	@ 0x300
340087d4:	b282      	uxth	r2, r0
  line_len = MAX(VD55G1_MIN_LINE_LEN_ADC_10, min_line_len_mipi);
340087d6:	4606      	mov	r6, r0
  ret = ctx->write16(ctx, VD55G1_REG_LINE_LENGTH, line_len);
340087d8:	696b      	ldr	r3, [r5, #20]
340087da:	4628      	mov	r0, r5
340087dc:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340087de:	4604      	mov	r4, r0
340087e0:	2800      	cmp	r0, #0
340087e2:	d14e      	bne.n	34008882 <VD55G1_Start+0x34a>
  VD55G1_dbg(ctx, 1, "line_length = %d\n", line_len);
340087e4:	f240 2346 	movw	r3, #582	@ 0x246
340087e8:	b2b6      	uxth	r6, r6
340087ea:	2104      	movs	r1, #4
340087ec:	4628      	mov	r0, r5
340087ee:	4a8a      	ldr	r2, [pc, #552]	@ (34008a18 <VD55G1_Start+0x4e0>)
340087f0:	9300      	str	r3, [sp, #0]
340087f2:	9601      	str	r6, [sp, #4]
340087f4:	2301      	movs	r3, #1
340087f6:	f7ff fbbf 	bl	34007f78 <VD55G1_log_impl>
  ret = VD55G1_ComputeFrameLength(ctx, drv_ctx->config_save.frame_rate, &frame_length);
340087fa:	4628      	mov	r0, r5
340087fc:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
340087fe:	aa05      	add	r2, sp, #20
34008800:	f7ff fcc8 	bl	34008194 <VD55G1_ComputeFrameLength>
  if (ret)
34008804:	4604      	mov	r4, r0
34008806:	2800      	cmp	r0, #0
34008808:	d1a9      	bne.n	3400875e <VD55G1_Start+0x226>
  VD55G1_dbg(ctx, 1, "Set frame_length to %d to reach %d fps\n", frame_length, drv_ctx->config_save.frame_rate);
3400880a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
3400880e:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
34008810:	2104      	movs	r1, #4
34008812:	e9cd 4301 	strd	r4, r3, [sp, #4]
34008816:	f240 2372 	movw	r3, #626	@ 0x272
3400881a:	4628      	mov	r0, r5
3400881c:	4a7f      	ldr	r2, [pc, #508]	@ (34008a1c <VD55G1_Start+0x4e4>)
3400881e:	9300      	str	r3, [sp, #0]
34008820:	2301      	movs	r3, #1
34008822:	f7ff fba9 	bl	34007f78 <VD55G1_log_impl>
  ret = ctx->write16(ctx, VD55G1_REG_FRAME_LENGTH, frame_length);
34008826:	4622      	mov	r2, r4
34008828:	f240 510c 	movw	r1, #1292	@ 0x50c
3400882c:	4628      	mov	r0, r5
3400882e:	696b      	ldr	r3, [r5, #20]
34008830:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008832:	4604      	mov	r4, r0
34008834:	bb48      	cbnz	r0, 3400888a <VD55G1_Start+0x352>
  if (awu->is_enable)
34008836:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  max_fps = drv_ctx->config_save.frame_rate;
34008838:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
  if (awu->is_enable)
3400883a:	bb7b      	cbnz	r3, 3400889c <VD55G1_Start+0x364>
  ret = VD55G1_ComputeFrameLength(ctx, max_fps, &frame_length);
3400883c:	4628      	mov	r0, r5
3400883e:	aa05      	add	r2, sp, #20
34008840:	f7ff fca8 	bl	34008194 <VD55G1_ComputeFrameLength>
  if (ret)
34008844:	4604      	mov	r4, r0
34008846:	b9c0      	cbnz	r0, 3400887a <VD55G1_Start+0x342>
  ret = ctx->write16(ctx, VD55G1_REG_MAX_COARSE_INTEGRATION_LINES, frame_length - 10);
34008848:	f8bd 6014 	ldrh.w	r6, [sp, #20]
3400884c:	f240 3172 	movw	r1, #882	@ 0x372
34008850:	3e0a      	subs	r6, #10
34008852:	4628      	mov	r0, r5
34008854:	696b      	ldr	r3, [r5, #20]
34008856:	b2b2      	uxth	r2, r6
34008858:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400885a:	4604      	mov	r4, r0
3400885c:	b338      	cbz	r0, 340088ae <VD55G1_Start+0x376>
3400885e:	f240 238f 	movw	r3, #655	@ 0x28f
34008862:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008864:	4a6e      	ldr	r2, [pc, #440]	@ (34008a20 <VD55G1_Start+0x4e8>)
34008866:	4628      	mov	r0, r5
34008868:	9200      	str	r2, [sp, #0]
3400886a:	2100      	movs	r1, #0
3400886c:	4a6d      	ldr	r2, [pc, #436]	@ (34008a24 <VD55G1_Start+0x4ec>)
3400886e:	9301      	str	r3, [sp, #4]
34008870:	f7ff fb82 	bl	34007f78 <VD55G1_log_impl>
34008874:	4628      	mov	r0, r5
34008876:	f7ff fbdd 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
3400887a:	f240 330a 	movw	r3, #778	@ 0x30a
3400887e:	9402      	str	r4, [sp, #8]
34008880:	e687      	b.n	34008592 <VD55G1_Start+0x5a>
  VD55G1_TraceError(ctx, ret);
34008882:	f240 2345 	movw	r3, #581	@ 0x245
34008886:	9002      	str	r0, [sp, #8]
34008888:	e75e      	b.n	34008748 <VD55G1_Start+0x210>
  VD55G1_TraceError(ctx, ret);
3400888a:	f44f 731d 	mov.w	r3, #628	@ 0x274
3400888e:	4a66      	ldr	r2, [pc, #408]	@ (34008a28 <VD55G1_Start+0x4f0>)
34008890:	9002      	str	r0, [sp, #8]
34008892:	9301      	str	r3, [sp, #4]
34008894:	e75a      	b.n	3400874c <VD55G1_Start+0x214>
34008896:	f04f 34ff 	mov.w	r4, #4294967295
3400889a:	e716      	b.n	340086ca <VD55G1_Start+0x192>
    max_fps = MAX(max_fps, awu->convergence_frame_rate);
3400889c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
3400889e:	4299      	cmp	r1, r3
340088a0:	bfb8      	it	lt
340088a2:	4619      	movlt	r1, r3
    max_fps = MAX(max_fps, awu->awu_frame_rate);
340088a4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
340088a6:	4299      	cmp	r1, r3
340088a8:	bfb8      	it	lt
340088aa:	4619      	movlt	r1, r3
340088ac:	e7c6      	b.n	3400883c <VD55G1_Start+0x304>
  VD55G1_dbg(ctx, 1, "Max coarse lines = %d\n", frame_length - 10);
340088ae:	f44f 7324 	mov.w	r3, #656	@ 0x290
340088b2:	2104      	movs	r1, #4
340088b4:	4628      	mov	r0, r5
340088b6:	4a5d      	ldr	r2, [pc, #372]	@ (34008a2c <VD55G1_Start+0x4f4>)
340088b8:	9300      	str	r3, [sp, #0]
340088ba:	9601      	str	r6, [sp, #4]
340088bc:	2301      	movs	r3, #1
340088be:	f7ff fb5b 	bl	34007f78 <VD55G1_log_impl>
  reg = drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE ? VD55G1_EXP_MODE_MANUAL : VD55G1_EXP_MODE_AUTO;
340088c2:	f895 2041 	ldrb.w	r2, [r5, #65]	@ 0x41
  ret = ctx->write8(ctx, VD55G1_REG_EXP_MODE, reg);
340088c6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
  reg = drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE ? VD55G1_EXP_MODE_MANUAL : VD55G1_EXP_MODE_AUTO;
340088ca:	3a00      	subs	r2, #0
340088cc:	bf18      	it	ne
340088ce:	2201      	movne	r2, #1
  ret = ctx->write8(ctx, VD55G1_REG_EXP_MODE, reg);
340088d0:	4628      	mov	r0, r5
340088d2:	692b      	ldr	r3, [r5, #16]
340088d4:	0052      	lsls	r2, r2, #1
340088d6:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340088d8:	4604      	mov	r4, r0
340088da:	b118      	cbz	r0, 340088e4 <VD55G1_Start+0x3ac>
340088dc:	f240 2395 	movw	r3, #661	@ 0x295
340088e0:	9002      	str	r0, [sp, #8]
340088e2:	e7bf      	b.n	34008864 <VD55G1_Start+0x32c>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340088e4:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
340088e8:	2b03      	cmp	r3, #3
340088ea:	d905      	bls.n	340088f8 <VD55G1_Start+0x3c0>
    return -1;
340088ec:	f04f 34ff 	mov.w	r4, #4294967295
  VD55G1_TraceError(ctx, ret);
340088f0:	f240 330d 	movw	r3, #781	@ 0x30d
340088f4:	9402      	str	r4, [sp, #8]
340088f6:	e64c      	b.n	34008592 <VD55G1_Start+0x5a>
  ret = ctx->write8(ctx, VD55G1_REG_ORIENTATION, mode);
340088f8:	4a4d      	ldr	r2, [pc, #308]	@ (34008a30 <VD55G1_Start+0x4f8>)
340088fa:	692c      	ldr	r4, [r5, #16]
340088fc:	f240 3102 	movw	r1, #770	@ 0x302
34008900:	4628      	mov	r0, r5
34008902:	5cd2      	ldrb	r2, [r2, r3]
34008904:	47a0      	blx	r4
  VD55G1_TraceError(ctx, ret);
34008906:	4604      	mov	r4, r0
34008908:	b948      	cbnz	r0, 3400891e <VD55G1_Start+0x3e6>
  switch (drv_ctx->config_save.patgen) {
3400890a:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
3400890e:	2b02      	cmp	r3, #2
34008910:	d914      	bls.n	3400893c <VD55G1_Start+0x404>
    return -1;
34008912:	f04f 34ff 	mov.w	r4, #4294967295
  VD55G1_TraceError(ctx, ret);
34008916:	f44f 7344 	mov.w	r3, #784	@ 0x310
3400891a:	9402      	str	r4, [sp, #8]
3400891c:	e639      	b.n	34008592 <VD55G1_Start+0x5a>
  VD55G1_TraceError(ctx, ret);
3400891e:	f240 23b2 	movw	r3, #690	@ 0x2b2
34008922:	4a44      	ldr	r2, [pc, #272]	@ (34008a34 <VD55G1_Start+0x4fc>)
34008924:	9002      	str	r0, [sp, #8]
34008926:	9200      	str	r2, [sp, #0]
34008928:	4628      	mov	r0, r5
3400892a:	2100      	movs	r1, #0
3400892c:	4a3d      	ldr	r2, [pc, #244]	@ (34008a24 <VD55G1_Start+0x4ec>)
3400892e:	9301      	str	r3, [sp, #4]
34008930:	f7ff fb22 	bl	34007f78 <VD55G1_log_impl>
34008934:	4628      	mov	r0, r5
34008936:	f7ff fb7d 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
3400893a:	e7d9      	b.n	340088f0 <VD55G1_Start+0x3b8>
3400893c:	4a3e      	ldr	r2, [pc, #248]	@ (34008a38 <VD55G1_Start+0x500>)
3400893e:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
  if (drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE)
34008942:	b313      	cbz	r3, 3400898a <VD55G1_Start+0x452>
    ret = ctx->write8(ctx, VD55G1_REG_DUSTER_CTRL, VD55G1_DUSTER_DISABLE);
34008944:	4602      	mov	r2, r0
34008946:	f240 31ae 	movw	r1, #942	@ 0x3ae
3400894a:	4628      	mov	r0, r5
3400894c:	692b      	ldr	r3, [r5, #16]
3400894e:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34008950:	4604      	mov	r4, r0
34008952:	b170      	cbz	r0, 34008972 <VD55G1_Start+0x43a>
34008954:	f240 23ce 	movw	r3, #718	@ 0x2ce
34008958:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
3400895a:	4a38      	ldr	r2, [pc, #224]	@ (34008a3c <VD55G1_Start+0x504>)
3400895c:	4628      	mov	r0, r5
3400895e:	9200      	str	r2, [sp, #0]
34008960:	2100      	movs	r1, #0
34008962:	4a30      	ldr	r2, [pc, #192]	@ (34008a24 <VD55G1_Start+0x4ec>)
34008964:	9301      	str	r3, [sp, #4]
34008966:	f7ff fb07 	bl	34007f78 <VD55G1_log_impl>
3400896a:	4628      	mov	r0, r5
3400896c:	f7ff fb62 	bl	34008034 <display_error>
  VD55G1_TraceError(ctx, ret);
34008970:	e7d1      	b.n	34008916 <VD55G1_Start+0x3de>
    ret = ctx->write8(ctx, VD55G1_REG_DARKCAL_CTRL, VD55G1_DARKCAL_BYPASS_DARKAVG);
34008972:	2202      	movs	r2, #2
34008974:	f240 312a 	movw	r1, #810	@ 0x32a
34008978:	4628      	mov	r0, r5
3400897a:	692b      	ldr	r3, [r5, #16]
3400897c:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
3400897e:	4604      	mov	r4, r0
34008980:	b118      	cbz	r0, 3400898a <VD55G1_Start+0x452>
34008982:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
34008986:	9002      	str	r0, [sp, #8]
34008988:	e7e7      	b.n	3400895a <VD55G1_Start+0x422>
  ret = ctx->write16(ctx, VD55G1_REG_PATGEN_CTRL, value);
3400898a:	4632      	mov	r2, r6
3400898c:	f44f 7141 	mov.w	r1, #772	@ 0x304
34008990:	4628      	mov	r0, r5
34008992:	696b      	ldr	r3, [r5, #20]
34008994:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008996:	4604      	mov	r4, r0
34008998:	b118      	cbz	r0, 340089a2 <VD55G1_Start+0x46a>
3400899a:	f44f 7335 	mov.w	r3, #724	@ 0x2d4
3400899e:	9002      	str	r0, [sp, #8]
340089a0:	e7db      	b.n	3400895a <VD55G1_Start+0x422>
  return VD55G1_SetFlicker(ctx, drv_ctx->config_save.flicker);
340089a2:	4628      	mov	r0, r5
340089a4:	f895 1042 	ldrb.w	r1, [r5, #66]	@ 0x42
340089a8:	f7ff fc46 	bl	34008238 <VD55G1_SetFlicker>
  VD55G1_TraceError(ctx, ret);
340089ac:	4604      	mov	r4, r0
340089ae:	b118      	cbz	r0, 340089b8 <VD55G1_Start+0x480>
340089b0:	f240 3313 	movw	r3, #787	@ 0x313
340089b4:	9002      	str	r0, [sp, #8]
340089b6:	e5ec      	b.n	34008592 <VD55G1_Start+0x5a>
  ret = ctx->write8(ctx, VD55G1_REG_STBY, VD55G1_STBY_START_STREAM);
340089b8:	2201      	movs	r2, #1
340089ba:	f240 2101 	movw	r1, #513	@ 0x201
340089be:	4628      	mov	r0, r5
340089c0:	692b      	ldr	r3, [r5, #16]
340089c2:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340089c4:	4604      	mov	r4, r0
340089c6:	b128      	cbz	r0, 340089d4 <VD55G1_Start+0x49c>
340089c8:	f240 331d 	movw	r3, #797	@ 0x31d
340089cc:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340089ce:	4a1c      	ldr	r2, [pc, #112]	@ (34008a40 <VD55G1_Start+0x508>)
340089d0:	9301      	str	r3, [sp, #4]
340089d2:	e5e0      	b.n	34008596 <VD55G1_Start+0x5e>
  ret = VD55G1_PollReg8(ctx, VD55G1_REG_STBY, VD55G1_CMD_ACK);
340089d4:	4602      	mov	r2, r0
340089d6:	f240 2101 	movw	r1, #513	@ 0x201
340089da:	4628      	mov	r0, r5
340089dc:	f7ff fada 	bl	34007f94 <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340089e0:	4604      	mov	r4, r0
340089e2:	b948      	cbnz	r0, 340089f8 <VD55G1_Start+0x4c0>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_STREAMING);
340089e4:	2103      	movs	r1, #3
340089e6:	4628      	mov	r0, r5
340089e8:	f7ff fb00 	bl	34007fec <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
340089ec:	4604      	mov	r4, r0
340089ee:	b138      	cbz	r0, 34008a00 <VD55G1_Start+0x4c8>
340089f0:	f240 3323 	movw	r3, #803	@ 0x323
340089f4:	9002      	str	r0, [sp, #8]
340089f6:	e7ea      	b.n	340089ce <VD55G1_Start+0x496>
  VD55G1_TraceError(ctx, ret);
340089f8:	f44f 7348 	mov.w	r3, #800	@ 0x320
340089fc:	9002      	str	r0, [sp, #8]
340089fe:	e7e6      	b.n	340089ce <VD55G1_Start+0x496>
  VD55G1_notice(ctx, "Streaming is on\n");
34008a00:	f240 3325 	movw	r3, #805	@ 0x325
34008a04:	2102      	movs	r1, #2
34008a06:	4628      	mov	r0, r5
34008a08:	4a0e      	ldr	r2, [pc, #56]	@ (34008a44 <VD55G1_Start+0x50c>)
34008a0a:	f7ff fab5 	bl	34007f78 <VD55G1_log_impl>
    return ret;
  drv_ctx->state = VD55G1_ST_STREAMING;
34008a0e:	2301      	movs	r3, #1
34008a10:	62ab      	str	r3, [r5, #40]	@ 0x28

  return 0;
}
34008a12:	4620      	mov	r0, r4
34008a14:	b007      	add	sp, #28
34008a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
34008a18:	34024163 	.word	0x34024163
34008a1c:	34024186 	.word	0x34024186
34008a20:	34028be7 	.word	0x34028be7
34008a24:	34023f5f 	.word	0x34023f5f
34008a28:	34028c2a 	.word	0x34028c2a
34008a2c:	340241bf 	.word	0x340241bf
34008a30:	34028b6a 	.word	0x34028b6a
34008a34:	34028bd0 	.word	0x34028bd0
34008a38:	34028b64 	.word	0x34028b64
34008a3c:	34028bbd 	.word	0x34028bbd
34008a40:	34028b95 	.word	0x34028b95
34008a44:	340241e7 	.word	0x340241e7
34008a48:	2fec1100 	.word	0x2fec1100
34008a4c:	00000000 	.word	0x00000000

34008a50 <VD55G1_Stop>:

int VD55G1_Stop(VD55G1_Ctx_t *ctx)
{
34008a50:	b510      	push	{r4, lr}
34008a52:	4604      	mov	r4, r0
  struct drv_ctx *drv_ctx = &ctx->ctx;
  int ret;

  ret = VD55G1_StopStreaming(ctx);
34008a54:	f7ff fc18 	bl	34008288 <VD55G1_StopStreaming>
  if (ret)
34008a58:	b900      	cbnz	r0, 34008a5c <VD55G1_Stop+0xc>
    return ret;
  drv_ctx->state = VD55G1_ST_IDLE;
34008a5a:	62a0      	str	r0, [r4, #40]	@ 0x28

  return 0;
}
34008a5c:	bd10      	pop	{r4, pc}

34008a5e <VD55G1_SetFlipMirrorMode>:

  return 0;
}

int VD55G1_SetFlipMirrorMode(VD55G1_Ctx_t *ctx, VD55G1_MirrorFlip_t mode)
{
34008a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34008a60:	6843      	ldr	r3, [r0, #4]
{
34008a62:	460d      	mov	r5, r1
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34008a64:	f10d 0207 	add.w	r2, sp, #7
34008a68:	211c      	movs	r1, #28
{
34008a6a:	4604      	mov	r4, r0
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34008a6c:	4798      	blx	r3
  if (ret)
34008a6e:	2800      	cmp	r0, #0
34008a70:	d10f      	bne.n	34008a92 <VD55G1_SetFlipMirrorMode+0x34>
  return state == VD55G1_SYSTEM_FSM_STREAMING;
34008a72:	f89d 3007 	ldrb.w	r3, [sp, #7]

  is_streaming = VD55G1_IsStreaming(ctx);
  if (is_streaming < 0)
    return is_streaming;

  if (is_streaming) {
34008a76:	2b03      	cmp	r3, #3
34008a78:	d10e      	bne.n	34008a98 <VD55G1_SetFlipMirrorMode+0x3a>
    ret = VD55G1_Stop(ctx);
34008a7a:	4620      	mov	r0, r4
34008a7c:	f7ff ffe8 	bl	34008a50 <VD55G1_Stop>
    if (ret)
34008a80:	b940      	cbnz	r0, 34008a94 <VD55G1_SetFlipMirrorMode+0x36>
  }

  drv_ctx->config_save.flip_mirror_mode = mode;

  if (is_streaming) {
    ret = VD55G1_Start(ctx);
34008a82:	4620      	mov	r0, r4
  drv_ctx->config_save.flip_mirror_mode = mode;
34008a84:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    if (ret)
      return ret;
  }

  return 0;
}
34008a88:	b003      	add	sp, #12
34008a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ret = VD55G1_Start(ctx);
34008a8e:	f7ff bd53 	b.w	34008538 <VD55G1_Start>
  if (is_streaming < 0)
34008a92:	daf2      	bge.n	34008a7a <VD55G1_SetFlipMirrorMode+0x1c>
}
34008a94:	b003      	add	sp, #12
34008a96:	bd30      	pop	{r4, r5, pc}
  drv_ctx->config_save.flip_mirror_mode = mode;
34008a98:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  if (is_streaming) {
34008a9c:	e7fa      	b.n	34008a94 <VD55G1_SetFlipMirrorMode+0x36>

34008a9e <VD6G_error>:
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
  va_end(ap);
}

static void VD6G_error(VD6G_Ctx_t *ctx, const char *format, ...)
{
34008a9e:	b40e      	push	{r1, r2, r3}
34008aa0:	b517      	push	{r0, r1, r2, r4, lr}
  va_list ap;

  if (!ctx->log)
34008aa2:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34008aa4:	b124      	cbz	r4, 34008ab0 <VD6G_error+0x12>
    return ;

  va_start(ap, format);
34008aa6:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_ERROR, format, ap);
34008aa8:	2100      	movs	r1, #0
34008aaa:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, format);
34008aac:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_ERROR, format, ap);
34008aae:	47a0      	blx	r4
  va_end(ap);
}
34008ab0:	b003      	add	sp, #12
34008ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34008ab6:	b003      	add	sp, #12
34008ab8:	4770      	bx	lr

34008aba <VD6G_notice>:
{
34008aba:	b40e      	push	{r1, r2, r3}
34008abc:	b517      	push	{r0, r1, r2, r4, lr}
  if (!ctx->log)
34008abe:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34008ac0:	b124      	cbz	r4, 34008acc <VD6G_notice+0x12>
  va_start(ap, format);
34008ac2:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_NOTICE, format, ap);
34008ac4:	2102      	movs	r1, #2
34008ac6:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, format);
34008ac8:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_NOTICE, format, ap);
34008aca:	47a0      	blx	r4
}
34008acc:	b003      	add	sp, #12
34008ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34008ad2:	b003      	add	sp, #12
34008ad4:	4770      	bx	lr
	...

34008ad8 <display_error>:

static void display_error(VD6G_Ctx_t *ctx)
{
34008ad8:	b513      	push	{r0, r1, r4, lr}
  uint16_t reg16;
  int ret;

  ret = ctx->read16(ctx, VD6G_ERROR_CODE, &reg16);
34008ada:	6883      	ldr	r3, [r0, #8]
34008adc:	211c      	movs	r1, #28
34008ade:	f10d 0206 	add.w	r2, sp, #6
{
34008ae2:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD6G_ERROR_CODE, &reg16);
34008ae4:	4798      	blx	r3
  assert(ret == 0);
34008ae6:	b130      	cbz	r0, 34008af6 <display_error+0x1e>
34008ae8:	f240 1131 	movw	r1, #305	@ 0x131
34008aec:	4b06      	ldr	r3, [pc, #24]	@ (34008b08 <display_error+0x30>)
34008aee:	4a07      	ldr	r2, [pc, #28]	@ (34008b0c <display_error+0x34>)
34008af0:	4807      	ldr	r0, [pc, #28]	@ (34008b10 <display_error+0x38>)
34008af2:	f014 ff7b 	bl	3401d9ec <__assert_func>
  VD6G_error(ctx, "ERROR_CODE : 0x%04x\n", reg16);
34008af6:	4620      	mov	r0, r4
34008af8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
34008afc:	4905      	ldr	r1, [pc, #20]	@ (34008b14 <display_error+0x3c>)
34008afe:	f7ff ffce 	bl	34008a9e <VD6G_error>
}
34008b02:	b002      	add	sp, #8
34008b04:	bd10      	pop	{r4, pc}
34008b06:	bf00      	nop
34008b08:	34023ee8 	.word	0x34023ee8
34008b0c:	3402a637 	.word	0x3402a637
34008b10:	34024208 	.word	0x34024208
34008b14:	34023f4a 	.word	0x34023f4a

34008b18 <VD6G_PollReg8>:

static int VD6G_PollReg8(VD6G_Ctx_t *ctx, uint16_t addr, uint8_t poll_val)
{
34008b18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34008b1c:	4604      	mov	r4, r0
34008b1e:	460f      	mov	r7, r1
34008b20:	4690      	mov	r8, r2
34008b22:	2631      	movs	r6, #49	@ 0x31
  int loop_nb = timeout_ms / loop_delay_ms;
  uint8_t val;
  int ret;

  while (--loop_nb) {
    ret = ctx->read8(ctx, addr, &val);
34008b24:	4639      	mov	r1, r7
34008b26:	4620      	mov	r0, r4
34008b28:	6863      	ldr	r3, [r4, #4]
34008b2a:	f10d 020f 	add.w	r2, sp, #15
34008b2e:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34008b30:	4605      	mov	r5, r0
34008b32:	b938      	cbnz	r0, 34008b44 <VD6G_PollReg8+0x2c>
    if (val == poll_val)
34008b34:	f89d 300f 	ldrb.w	r3, [sp, #15]
34008b38:	4543      	cmp	r3, r8
34008b3a:	d10f      	bne.n	34008b5c <VD6G_PollReg8+0x44>
      return 0;
    ctx->delay(ctx, loop_delay_ms);
  }

  return -1;
}
34008b3c:	4628      	mov	r0, r5
34008b3e:	b004      	add	sp, #16
34008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    VD6G_TraceError(ctx, ret);
34008b44:	9000      	str	r0, [sp, #0]
34008b46:	f240 133f 	movw	r3, #319	@ 0x13f
34008b4a:	4620      	mov	r0, r4
34008b4c:	4a08      	ldr	r2, [pc, #32]	@ (34008b70 <VD6G_PollReg8+0x58>)
34008b4e:	4909      	ldr	r1, [pc, #36]	@ (34008b74 <VD6G_PollReg8+0x5c>)
34008b50:	f7ff ffa5 	bl	34008a9e <VD6G_error>
34008b54:	4620      	mov	r0, r4
34008b56:	f7ff ffbf 	bl	34008ad8 <display_error>
34008b5a:	e7ef      	b.n	34008b3c <VD6G_PollReg8+0x24>
    ctx->delay(ctx, loop_delay_ms);
34008b5c:	210a      	movs	r1, #10
34008b5e:	4620      	mov	r0, r4
34008b60:	6a23      	ldr	r3, [r4, #32]
34008b62:	4798      	blx	r3
  while (--loop_nb) {
34008b64:	3e01      	subs	r6, #1
34008b66:	d1dd      	bne.n	34008b24 <VD6G_PollReg8+0xc>
  return -1;
34008b68:	f04f 35ff 	mov.w	r5, #4294967295
34008b6c:	e7e6      	b.n	34008b3c <VD6G_PollReg8+0x24>
34008b6e:	bf00      	nop
34008b70:	3402a645 	.word	0x3402a645
34008b74:	34023f6f 	.word	0x34023f6f

34008b78 <VD6G_SetExposureModeInternal>:

static int VD6G_SetExposureModeInternal(VD6G_Ctx_t *ctx, VD6G_ExposureMode_t mode)
{
  int ret;

  if ((mode != VD6G_EXPOSURE_AUTO) &&
34008b78:	2902      	cmp	r1, #2
{
34008b7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
34008b7c:	4605      	mov	r5, r0
34008b7e:	460a      	mov	r2, r1
  if ((mode != VD6G_EXPOSURE_AUTO) &&
34008b80:	d813      	bhi.n	34008baa <VD6G_SetExposureModeInternal+0x32>
      (mode != VD6G_EXPOSURE_FREEZE_AEALGO) &&
      (mode != VD6G_EXPOSURE_MANUAL)) {
    return -1;
  }

  ret = ctx->write8(ctx, VD6G_REG_EXP_MODE, mode);
34008b82:	f240 414c 	movw	r1, #1100	@ 0x44c
34008b86:	6903      	ldr	r3, [r0, #16]
34008b88:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008b8a:	4604      	mov	r4, r0
34008b8c:	b150      	cbz	r0, 34008ba4 <VD6G_SetExposureModeInternal+0x2c>
34008b8e:	9000      	str	r0, [sp, #0]
34008b90:	f240 2367 	movw	r3, #615	@ 0x267
34008b94:	4628      	mov	r0, r5
34008b96:	4a06      	ldr	r2, [pc, #24]	@ (34008bb0 <VD6G_SetExposureModeInternal+0x38>)
34008b98:	4906      	ldr	r1, [pc, #24]	@ (34008bb4 <VD6G_SetExposureModeInternal+0x3c>)
34008b9a:	f7ff ff80 	bl	34008a9e <VD6G_error>
34008b9e:	4628      	mov	r0, r5
34008ba0:	f7ff ff9a 	bl	34008ad8 <display_error>

  return 0;
}
34008ba4:	4620      	mov	r0, r4
34008ba6:	b003      	add	sp, #12
34008ba8:	bd30      	pop	{r4, r5, pc}
    return -1;
34008baa:	f04f 34ff 	mov.w	r4, #4294967295
34008bae:	e7f9      	b.n	34008ba4 <VD6G_SetExposureModeInternal+0x2c>
34008bb0:	3402a536 	.word	0x3402a536
34008bb4:	34023f6f 	.word	0x34023f6f

34008bb8 <VD6G_SetFlicker>:
static int VD6G_SetFlicker(VD6G_Ctx_t *ctx, VD6G_Flicker_t flicker)
{
  uint16_t mode;
  int ret;

  switch (flicker) {
34008bb8:	2902      	cmp	r1, #2
{
34008bba:	b537      	push	{r0, r1, r2, r4, r5, lr}
34008bbc:	4605      	mov	r5, r0
34008bbe:	d815      	bhi.n	34008bec <VD6G_SetFlicker+0x34>
    break;
  default:
    return -1;
  }

  ret = ctx->write16(ctx, VD6G_REG_AE_COMPILER_CONTROL, mode);
34008bc0:	4a0c      	ldr	r2, [pc, #48]	@ (34008bf4 <VD6G_SetFlicker+0x3c>)
34008bc2:	6943      	ldr	r3, [r0, #20]
34008bc4:	5c52      	ldrb	r2, [r2, r1]
34008bc6:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34008bca:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008bcc:	4604      	mov	r4, r0
34008bce:	b150      	cbz	r0, 34008be6 <VD6G_SetFlicker+0x2e>
34008bd0:	9000      	str	r0, [sp, #0]
34008bd2:	f240 33b1 	movw	r3, #945	@ 0x3b1
34008bd6:	4628      	mov	r0, r5
34008bd8:	4a07      	ldr	r2, [pc, #28]	@ (34008bf8 <VD6G_SetFlicker+0x40>)
34008bda:	4908      	ldr	r1, [pc, #32]	@ (34008bfc <VD6G_SetFlicker+0x44>)
34008bdc:	f7ff ff5f 	bl	34008a9e <VD6G_error>
34008be0:	4628      	mov	r0, r5
34008be2:	f7ff ff79 	bl	34008ad8 <display_error>

  return 0;
}
34008be6:	4620      	mov	r0, r4
34008be8:	b003      	add	sp, #12
34008bea:	bd30      	pop	{r4, r5, pc}
    return -1;
34008bec:	f04f 34ff 	mov.w	r4, #4294967295
34008bf0:	e7f9      	b.n	34008be6 <VD6G_SetFlicker+0x2e>
34008bf2:	bf00      	nop
34008bf4:	3402a3fc 	.word	0x3402a3fc
34008bf8:	3402a500 	.word	0x3402a500
34008bfc:	34023f6f 	.word	0x34023f6f

34008c00 <VD6G_GetLineTimeInUs>:
{
34008c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
34008c02:	460e      	mov	r6, r1
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_len);
34008c04:	6883      	ldr	r3, [r0, #8]
34008c06:	f44f 7140 	mov.w	r1, #768	@ 0x300
34008c0a:	f10d 020e 	add.w	r2, sp, #14
{
34008c0e:	4605      	mov	r5, r0
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_len);
34008c10:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008c12:	4604      	mov	r4, r0
34008c14:	b968      	cbnz	r0, 34008c32 <VD6G_GetLineTimeInUs+0x32>
  *line_time_in_us = ((uint64_t)line_len * 1000000) / VD6G_PIXEL_CLOCK;
34008c16:	a311      	add	r3, pc, #68	@ (adr r3, 34008c5c <VD6G_GetLineTimeInUs+0x5c>)
34008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
34008c1c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
34008c20:	490b      	ldr	r1, [pc, #44]	@ (34008c50 <VD6G_GetLineTimeInUs+0x50>)
34008c22:	fba0 0101 	umull	r0, r1, r0, r1
34008c26:	f7f8 ff91 	bl	34001b4c <__aeabi_uldivmod>
34008c2a:	6030      	str	r0, [r6, #0]
}
34008c2c:	4620      	mov	r0, r4
34008c2e:	b004      	add	sp, #16
34008c30:	bd70      	pop	{r4, r5, r6, pc}
  VD6G_TraceError(ctx, ret);
34008c32:	9000      	str	r0, [sp, #0]
34008c34:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
34008c38:	4628      	mov	r0, r5
34008c3a:	4a06      	ldr	r2, [pc, #24]	@ (34008c54 <VD6G_GetLineTimeInUs+0x54>)
34008c3c:	4906      	ldr	r1, [pc, #24]	@ (34008c58 <VD6G_GetLineTimeInUs+0x58>)
34008c3e:	f7ff ff2e 	bl	34008a9e <VD6G_error>
34008c42:	4628      	mov	r0, r5
34008c44:	f7ff ff48 	bl	34008ad8 <display_error>
34008c48:	e7f0      	b.n	34008c2c <VD6G_GetLineTimeInUs+0x2c>
34008c4a:	bf00      	nop
34008c4c:	f3af 8000 	nop.w
34008c50:	000f4240 	.word	0x000f4240
34008c54:	3402a44d 	.word	0x3402a44d
34008c58:	34023f6f 	.word	0x34023f6f
34008c5c:	09959d00 	.word	0x09959d00
34008c60:	00000000 	.word	0x00000000

34008c64 <VD6G_warn.constprop.0>:
static void VD6G_warn(VD6G_Ctx_t *ctx, const char *format, ...)
34008c64:	b40e      	push	{r1, r2, r3}
34008c66:	b517      	push	{r0, r1, r2, r4, lr}
  if (!ctx->log)
34008c68:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34008c6a:	b124      	cbz	r4, 34008c76 <VD6G_warn.constprop.0+0x12>
  va_start(ap, format);
34008c6c:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
34008c6e:	2101      	movs	r1, #1
34008c70:	4a03      	ldr	r2, [pc, #12]	@ (34008c80 <VD6G_warn.constprop.0+0x1c>)
  va_start(ap, format);
34008c72:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
34008c74:	47a0      	blx	r4
}
34008c76:	b003      	add	sp, #12
34008c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34008c7c:	b003      	add	sp, #12
34008c7e:	4770      	bx	lr
34008c80:	34023ead 	.word	0x34023ead

34008c84 <VD6G_dbg.constprop.0>:
static void VD6G_dbg(VD6G_Ctx_t *ctx, int lvl, const char *format, ...)
34008c84:	b40c      	push	{r2, r3}
34008c86:	b513      	push	{r0, r1, r4, lr}
  if (!ctx->log)
34008c88:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34008c8a:	b124      	cbz	r4, 34008c96 <VD6G_dbg.constprop.0+0x12>
  va_start(ap, format);
34008c8c:	ab05      	add	r3, sp, #20
  ctx->log(ctx, VD6G_LVL_DBG(lvl), format, ap);
34008c8e:	2103      	movs	r1, #3
34008c90:	9a04      	ldr	r2, [sp, #16]
  va_start(ap, format);
34008c92:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_DBG(lvl), format, ap);
34008c94:	47a0      	blx	r4
}
34008c96:	b002      	add	sp, #8
34008c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34008c9c:	b002      	add	sp, #8
34008c9e:	4770      	bx	lr

34008ca0 <VD6G_GetTopDie>:
{
34008ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
34008ca2:	460e      	mov	r6, r1
  ret = ctx->read16(ctx, VD6G_REG_REVISION, &reg16);
34008ca4:	6883      	ldr	r3, [r0, #8]
34008ca6:	2102      	movs	r1, #2
34008ca8:	f10d 020e 	add.w	r2, sp, #14
{
34008cac:	4605      	mov	r5, r0
  ret = ctx->read16(ctx, VD6G_REG_REVISION, &reg16);
34008cae:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008cb0:	4604      	mov	r4, r0
34008cb2:	b968      	cbnz	r0, 34008cd0 <VD6G_GetTopDie+0x30>
  VD6G_dbg(ctx, 0, "revision = 0x%04x\n", reg16);
34008cb4:	4601      	mov	r1, r0
34008cb6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34008cba:	4628      	mov	r0, r5
34008cbc:	4a0a      	ldr	r2, [pc, #40]	@ (34008ce8 <VD6G_GetTopDie+0x48>)
34008cbe:	f7ff ffe1 	bl	34008c84 <VD6G_dbg.constprop.0>
  *top_die = reg16 >> 8;
34008cc2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34008cc6:	0a1b      	lsrs	r3, r3, #8
34008cc8:	7033      	strb	r3, [r6, #0]
}
34008cca:	4620      	mov	r0, r4
34008ccc:	b004      	add	sp, #16
34008cce:	bd70      	pop	{r4, r5, r6, pc}
  VD6G_TraceError(ctx, ret);
34008cd0:	9000      	str	r0, [sp, #0]
34008cd2:	f240 1373 	movw	r3, #371	@ 0x173
34008cd6:	4628      	mov	r0, r5
34008cd8:	4a04      	ldr	r2, [pc, #16]	@ (34008cec <VD6G_GetTopDie+0x4c>)
34008cda:	4905      	ldr	r1, [pc, #20]	@ (34008cf0 <VD6G_GetTopDie+0x50>)
34008cdc:	f7ff fedf 	bl	34008a9e <VD6G_error>
34008ce0:	4628      	mov	r0, r5
34008ce2:	f7ff fef9 	bl	34008ad8 <display_error>
34008ce6:	e7f0      	b.n	34008cca <VD6G_GetTopDie+0x2a>
34008ce8:	34024105 	.word	0x34024105
34008cec:	3402a616 	.word	0x3402a616
34008cf0:	34023f6f 	.word	0x34023f6f

34008cf4 <VD6G_WaitState>:
{
34008cf4:	b570      	push	{r4, r5, r6, lr}
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
34008cf6:	b2ca      	uxtb	r2, r1
{
34008cf8:	460d      	mov	r5, r1
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
34008cfa:	2128      	movs	r1, #40	@ 0x28
{
34008cfc:	4606      	mov	r6, r0
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
34008cfe:	f7ff ff0b 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
34008d02:	4604      	mov	r4, r0
34008d04:	b130      	cbz	r0, 34008d14 <VD6G_WaitState+0x20>
    VD6G_warn(ctx, "Unable to reach state %d\n", state);
34008d06:	462a      	mov	r2, r5
34008d08:	4630      	mov	r0, r6
34008d0a:	4906      	ldr	r1, [pc, #24]	@ (34008d24 <VD6G_WaitState+0x30>)
34008d0c:	f7ff ffaa 	bl	34008c64 <VD6G_warn.constprop.0>
}
34008d10:	4620      	mov	r0, r4
34008d12:	bd70      	pop	{r4, r5, r6, pc}
    VD6G_dbg(ctx, 0, "reach state %d\n", state);
34008d14:	4601      	mov	r1, r0
34008d16:	462b      	mov	r3, r5
34008d18:	4630      	mov	r0, r6
34008d1a:	4a03      	ldr	r2, [pc, #12]	@ (34008d28 <VD6G_WaitState+0x34>)
34008d1c:	f7ff ffb2 	bl	34008c84 <VD6G_dbg.constprop.0>
  return ret;
34008d20:	e7f6      	b.n	34008d10 <VD6G_WaitState+0x1c>
34008d22:	bf00      	nop
34008d24:	34023ead 	.word	0x34023ead
34008d28:	34023ed8 	.word	0x34023ed8

34008d2c <VD6G_Init>:

  return 0;
}

int VD6G_Init(VD6G_Ctx_t *ctx, VD6G_Config_t *config)
{
34008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;
  int ret;

  if (config->frame_rate < VD6G_MIN_FPS)
34008d30:	688b      	ldr	r3, [r1, #8]
{
34008d32:	4605      	mov	r5, r0
  if (config->frame_rate < VD6G_MIN_FPS)
34008d34:	3b01      	subs	r3, #1
34008d36:	2b57      	cmp	r3, #87	@ 0x57
{
34008d38:	460c      	mov	r4, r1
34008d3a:	b087      	sub	sp, #28
  if (config->frame_rate < VD6G_MIN_FPS)
34008d3c:	d802      	bhi.n	34008d44 <VD6G_Init+0x18>
    return -1;
  if (config->frame_rate > VD6G_MAX_FPS)
    return -1;

  if ((config->resolution != VD6G_RES_QVGA_320_240) &&
34008d3e:	790b      	ldrb	r3, [r1, #4]
34008d40:	2b08      	cmp	r3, #8
34008d42:	d905      	bls.n	34008d50 <VD6G_Init+0x24>
    return -1;
34008d44:	f04f 34ff 	mov.w	r4, #4294967295
  ret = VD6G_SetupEarly(ctx);
  if (ret)
    return ret;

  return 0;
}
34008d48:	4620      	mov	r0, r4
34008d4a:	b007      	add	sp, #28
34008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((config->flip_mirror_mode != VD6G_MIRROR_FLIP_NONE) &&
34008d50:	7b0b      	ldrb	r3, [r1, #12]
34008d52:	2b03      	cmp	r3, #3
34008d54:	d8f6      	bhi.n	34008d44 <VD6G_Init+0x18>
  ctx->shutdown_pin(ctx, 0);
34008d56:	6803      	ldr	r3, [r0, #0]
34008d58:	2100      	movs	r1, #0
34008d5a:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008d5c:	210a      	movs	r1, #10
34008d5e:	4628      	mov	r0, r5
34008d60:	6a2b      	ldr	r3, [r5, #32]
34008d62:	4798      	blx	r3
  ctx->shutdown_pin(ctx, 1);
34008d64:	2101      	movs	r1, #1
34008d66:	4628      	mov	r0, r5
34008d68:	682b      	ldr	r3, [r5, #0]
34008d6a:	4798      	blx	r3
  drv_ctx->config_save = *config;
34008d6c:	f105 0630 	add.w	r6, r5, #48	@ 0x30
  ctx->delay(ctx, 10);
34008d70:	210a      	movs	r1, #10
34008d72:	4628      	mov	r0, r5
34008d74:	6a2b      	ldr	r3, [r5, #32]
34008d76:	4798      	blx	r3
  drv_ctx->config_save = *config;
34008d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008d7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008d7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008d82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  drv_ctx->is_streaming = 0;
34008d84:	2300      	movs	r3, #0
  drv_ctx->config_save = *config;
34008d86:	e894 0003 	ldmia.w	r4, {r0, r1}
34008d8a:	e886 0003 	stmia.w	r6, {r0, r1}
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_READY_TO_BOOT);
34008d8e:	2101      	movs	r1, #1
34008d90:	4628      	mov	r0, r5
  drv_ctx->is_streaming = 0;
34008d92:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_READY_TO_BOOT);
34008d94:	f7ff ffae 	bl	34008cf4 <VD6G_WaitState>
  if (ret)
34008d98:	4604      	mov	r4, r0
34008d9a:	2800      	cmp	r0, #0
34008d9c:	d1d4      	bne.n	34008d48 <VD6G_Init+0x1c>
  ret = ctx->read16(ctx, VD6G_REG_MODEL_ID, &reg16);
34008d9e:	ae03      	add	r6, sp, #12
34008da0:	4601      	mov	r1, r0
34008da2:	4632      	mov	r2, r6
34008da4:	4628      	mov	r0, r5
34008da6:	68ab      	ldr	r3, [r5, #8]
34008da8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008daa:	4604      	mov	r4, r0
34008dac:	b988      	cbnz	r0, 34008dd2 <VD6G_Init+0xa6>
  VD6G_dbg(ctx, 0, "model_id = 0x%04x\n", reg16);
34008dae:	4601      	mov	r1, r0
34008db0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34008db4:	4aaf      	ldr	r2, [pc, #700]	@ (34009074 <VD6G_Init+0x348>)
34008db6:	4628      	mov	r0, r5
34008db8:	f7ff ff64 	bl	34008c84 <VD6G_dbg.constprop.0>
  if (reg16 != VD6G_MODEL_ID) {
34008dbc:	f245 6203 	movw	r2, #22019	@ 0x5603
34008dc0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34008dc4:	4293      	cmp	r3, r2
34008dc6:	d010      	beq.n	34008dea <VD6G_Init+0xbe>
    VD6G_error(ctx, "Bad model id expected 0x%04x / got 0x%04x\n", VD6G_MODEL_ID, reg16);
34008dc8:	4628      	mov	r0, r5
34008dca:	49ab      	ldr	r1, [pc, #684]	@ (34009078 <VD6G_Init+0x34c>)
34008dcc:	f7ff fe67 	bl	34008a9e <VD6G_error>
  if (ret)
34008dd0:	e7b8      	b.n	34008d44 <VD6G_Init+0x18>
  VD6G_TraceError(ctx, ret);
34008dd2:	f240 1381 	movw	r3, #385	@ 0x181
34008dd6:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34008dd8:	4aa8      	ldr	r2, [pc, #672]	@ (3400907c <VD6G_Init+0x350>)
  VD6G_TraceError(ctx, ret);
34008dda:	4628      	mov	r0, r5
34008ddc:	49a8      	ldr	r1, [pc, #672]	@ (34009080 <VD6G_Init+0x354>)
34008dde:	f7ff fe5e 	bl	34008a9e <VD6G_error>
34008de2:	4628      	mov	r0, r5
34008de4:	f7ff fe78 	bl	34008ad8 <display_error>
34008de8:	e7ae      	b.n	34008d48 <VD6G_Init+0x1c>
  ret = VD6G_GetTopDie(ctx, &top_die);
34008dea:	4628      	mov	r0, r5
34008dec:	f10d 010b 	add.w	r1, sp, #11
34008df0:	f7ff ff56 	bl	34008ca0 <VD6G_GetTopDie>
  if (ret)
34008df4:	4604      	mov	r4, r0
34008df6:	2800      	cmp	r0, #0
34008df8:	d1a6      	bne.n	34008d48 <VD6G_Init+0x1c>
  if (top_die != VD6G_TOP_DIE_SLOW_BOOT && top_die != VD6G_TOP_DIE_FAST_BOOT) {
34008dfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
34008dfe:	2b20      	cmp	r3, #32
34008e00:	d006      	beq.n	34008e10 <VD6G_Init+0xe4>
34008e02:	2b31      	cmp	r3, #49	@ 0x31
34008e04:	d004      	beq.n	34008e10 <VD6G_Init+0xe4>
    VD6G_error(ctx, "Unsupported revision\n");
34008e06:	499f      	ldr	r1, [pc, #636]	@ (34009084 <VD6G_Init+0x358>)
    VD6G_error(ctx, "External clock out of rangen\n");
34008e08:	4628      	mov	r0, r5
34008e0a:	f7ff fe48 	bl	34008a9e <VD6G_error>
  if (ret)
34008e0e:	e799      	b.n	34008d44 <VD6G_Init+0x18>
  ret = ctx->read16(ctx, VD6G_REG_ROM_REVISION, &reg16);
34008e10:	4632      	mov	r2, r6
34008e12:	2114      	movs	r1, #20
34008e14:	4628      	mov	r0, r5
34008e16:	68ab      	ldr	r3, [r5, #8]
34008e18:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008e1a:	4604      	mov	r4, r0
34008e1c:	b9d8      	cbnz	r0, 34008e56 <VD6G_Init+0x12a>
  VD6G_dbg(ctx, 0, "rom = 0x%04x\n", reg16);
34008e1e:	4601      	mov	r1, r0
34008e20:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34008e24:	4628      	mov	r0, r5
34008e26:	4a98      	ldr	r2, [pc, #608]	@ (34009088 <VD6G_Init+0x35c>)
34008e28:	f7ff ff2c 	bl	34008c84 <VD6G_dbg.constprop.0>
  ret = VD6G_GetTopDie(ctx, &top_die);
34008e2c:	4628      	mov	r0, r5
34008e2e:	f10d 010b 	add.w	r1, sp, #11
34008e32:	f7ff ff35 	bl	34008ca0 <VD6G_GetTopDie>
  if (ret)
34008e36:	4604      	mov	r4, r0
34008e38:	2800      	cmp	r0, #0
34008e3a:	d185      	bne.n	34008d48 <VD6G_Init+0x1c>
  switch (top_die) {
34008e3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
34008e40:	2b20      	cmp	r3, #32
34008e42:	d00c      	beq.n	34008e5e <VD6G_Init+0x132>
34008e44:	2b31      	cmp	r3, #49	@ 0x31
34008e46:	d057      	beq.n	34008ef8 <VD6G_Init+0x1cc>
    assert(0);
34008e48:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
34008e4c:	4b8f      	ldr	r3, [pc, #572]	@ (3400908c <VD6G_Init+0x360>)
34008e4e:	4a90      	ldr	r2, [pc, #576]	@ (34009090 <VD6G_Init+0x364>)
    assert(0);
34008e50:	4890      	ldr	r0, [pc, #576]	@ (34009094 <VD6G_Init+0x368>)
34008e52:	f014 fdcb 	bl	3401d9ec <__assert_func>
  VD6G_TraceError(ctx, ret);
34008e56:	f240 1391 	movw	r3, #401	@ 0x191
34008e5a:	9000      	str	r0, [sp, #0]
34008e5c:	e7bc      	b.n	34008dd8 <VD6G_Init+0xac>
  ret = ctx->write_array(ctx, 0x2000, (uint8_t *) patch_cut2, sizeof(patch_cut2));
34008e5e:	69ec      	ldr	r4, [r5, #28]
34008e60:	f642 23f8 	movw	r3, #11000	@ 0x2af8
34008e64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
34008e68:	4628      	mov	r0, r5
34008e6a:	4a8b      	ldr	r2, [pc, #556]	@ (34009098 <VD6G_Init+0x36c>)
34008e6c:	47a0      	blx	r4
  VD6G_TraceError(ctx, ret);
34008e6e:	4604      	mov	r4, r0
34008e70:	b120      	cbz	r0, 34008e7c <VD6G_Init+0x150>
34008e72:	f44f 73d1 	mov.w	r3, #418	@ 0x1a2
34008e76:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34008e78:	4a88      	ldr	r2, [pc, #544]	@ (3400909c <VD6G_Init+0x370>)
34008e7a:	e7ae      	b.n	34008dda <VD6G_Init+0xae>
  ret = ctx->write8(ctx, VD6G_REG_BOOT, VD6G_CMD_PATCH_SETUP);
34008e7c:	2202      	movs	r2, #2
34008e7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
34008e82:	4628      	mov	r0, r5
34008e84:	692b      	ldr	r3, [r5, #16]
34008e86:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008e88:	4604      	mov	r4, r0
34008e8a:	bb38      	cbnz	r0, 34008edc <VD6G_Init+0x1b0>
  ret = VD6G_PollReg8(ctx, VD6G_REG_BOOT, VD6G_CMD_ACK);
34008e8c:	4602      	mov	r2, r0
34008e8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
34008e92:	4628      	mov	r0, r5
34008e94:	f7ff fe40 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
34008e98:	4604      	mov	r4, r0
34008e9a:	2800      	cmp	r0, #0
34008e9c:	f47f af54 	bne.w	34008d48 <VD6G_Init+0x1c>
  ret = ctx->read16(ctx, VD6G_REG_FWPATCH_REVISION, &reg16);
34008ea0:	4632      	mov	r2, r6
34008ea2:	211e      	movs	r1, #30
34008ea4:	4628      	mov	r0, r5
34008ea6:	68ab      	ldr	r3, [r5, #8]
34008ea8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008eaa:	4604      	mov	r4, r0
34008eac:	b9d0      	cbnz	r0, 34008ee4 <VD6G_Init+0x1b8>
  VD6G_dbg(ctx, 0, "patch = 0x%04x\n", reg16);
34008eae:	4601      	mov	r1, r0
34008eb0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34008eb4:	4628      	mov	r0, r5
34008eb6:	4a7a      	ldr	r2, [pc, #488]	@ (340090a0 <VD6G_Init+0x374>)
34008eb8:	f7ff fee4 	bl	34008c84 <VD6G_dbg.constprop.0>
  if (reg16 != (patch_major << 8) + patch_minor) {
34008ebc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34008ec0:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
34008ec4:	d012      	beq.n	34008eec <VD6G_Init+0x1c0>
    VD6G_error(ctx, "bad patch version expected %d.%d got %d.%d\n", patch_major, patch_minor,
34008ec6:	b2da      	uxtb	r2, r3
34008ec8:	0a1b      	lsrs	r3, r3, #8
34008eca:	9201      	str	r2, [sp, #4]
34008ecc:	9300      	str	r3, [sp, #0]
34008ece:	2202      	movs	r2, #2
34008ed0:	231c      	movs	r3, #28
34008ed2:	4974      	ldr	r1, [pc, #464]	@ (340090a4 <VD6G_Init+0x378>)
    VD6G_error(ctx, "bad vtpatch version, expected %d got rd:%d, gr:%d gt:%d\n", VT_REVISION, cur_vtpatch_rd_rev,
34008ed4:	4628      	mov	r0, r5
34008ed6:	f7ff fde2 	bl	34008a9e <VD6G_error>
  if (ret)
34008eda:	e733      	b.n	34008d44 <VD6G_Init+0x18>
  VD6G_TraceError(ctx, ret);
34008edc:	f240 13a5 	movw	r3, #421	@ 0x1a5
34008ee0:	9000      	str	r0, [sp, #0]
34008ee2:	e7c9      	b.n	34008e78 <VD6G_Init+0x14c>
  VD6G_TraceError(ctx, ret);
34008ee4:	f44f 73d6 	mov.w	r3, #428	@ 0x1ac
34008ee8:	9000      	str	r0, [sp, #0]
34008eea:	e7c5      	b.n	34008e78 <VD6G_Init+0x14c>
  VD6G_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);
34008eec:	231c      	movs	r3, #28
34008eee:	2202      	movs	r2, #2
34008ef0:	4628      	mov	r0, r5
34008ef2:	496d      	ldr	r1, [pc, #436]	@ (340090a8 <VD6G_Init+0x37c>)
34008ef4:	f7ff fde1 	bl	34008aba <VD6G_notice>
  ret = ctx->write8(ctx, VD6G_REG_BOOT, VD6G_CMD_BOOT);
34008ef8:	2201      	movs	r2, #1
34008efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
34008efe:	4628      	mov	r0, r5
34008f00:	692b      	ldr	r3, [r5, #16]
34008f02:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008f04:	4604      	mov	r4, r0
34008f06:	b120      	cbz	r0, 34008f12 <VD6G_Init+0x1e6>
34008f08:	f240 13d5 	movw	r3, #469	@ 0x1d5
34008f0c:	4a67      	ldr	r2, [pc, #412]	@ (340090ac <VD6G_Init+0x380>)
34008f0e:	9000      	str	r0, [sp, #0]
34008f10:	e763      	b.n	34008dda <VD6G_Init+0xae>
  ret = VD6G_PollReg8(ctx, VD6G_REG_BOOT, VD6G_CMD_ACK);
34008f12:	4602      	mov	r2, r0
34008f14:	f44f 7100 	mov.w	r1, #512	@ 0x200
34008f18:	4628      	mov	r0, r5
34008f1a:	f7ff fdfd 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
34008f1e:	4604      	mov	r4, r0
34008f20:	2800      	cmp	r0, #0
34008f22:	f47f af11 	bne.w	34008d48 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
34008f26:	2102      	movs	r1, #2
34008f28:	4628      	mov	r0, r5
34008f2a:	f7ff fee3 	bl	34008cf4 <VD6G_WaitState>
  if (ret)
34008f2e:	4604      	mov	r4, r0
34008f30:	2800      	cmp	r0, #0
34008f32:	f47f af09 	bne.w	34008d48 <VD6G_Init+0x1c>
  VD6G_notice(ctx, "sensor boot successfully\n");
34008f36:	4628      	mov	r0, r5
34008f38:	495d      	ldr	r1, [pc, #372]	@ (340090b0 <VD6G_Init+0x384>)
34008f3a:	f7ff fdbe 	bl	34008aba <VD6G_notice>
  ret = VD6G_GetTopDie(ctx, &top_die);
34008f3e:	4628      	mov	r0, r5
34008f40:	f10d 0109 	add.w	r1, sp, #9
34008f44:	f7ff feac 	bl	34008ca0 <VD6G_GetTopDie>
  if (ret)
34008f48:	4604      	mov	r4, r0
34008f4a:	2800      	cmp	r0, #0
34008f4c:	f47f aefc 	bne.w	34008d48 <VD6G_Init+0x1c>
  switch (top_die) {
34008f50:	f89d 3009 	ldrb.w	r3, [sp, #9]
34008f54:	2b20      	cmp	r3, #32
34008f56:	d007      	beq.n	34008f68 <VD6G_Init+0x23c>
34008f58:	2b31      	cmp	r3, #49	@ 0x31
34008f5a:	f000 80ff 	beq.w	3400915c <VD6G_Init+0x430>
    assert(0);
34008f5e:	f44f 710d 	mov.w	r1, #564	@ 0x234
34008f62:	4b4a      	ldr	r3, [pc, #296]	@ (3400908c <VD6G_Init+0x360>)
34008f64:	4a53      	ldr	r2, [pc, #332]	@ (340090b4 <VD6G_Init+0x388>)
34008f66:	e773      	b.n	34008e50 <VD6G_Init+0x124>
  ret = ctx->write8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_START_VTRAM_UPDATE);
34008f68:	2201      	movs	r2, #1
34008f6a:	f240 2103 	movw	r1, #515	@ 0x203
34008f6e:	4628      	mov	r0, r5
34008f70:	692b      	ldr	r3, [r5, #16]
34008f72:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008f74:	4604      	mov	r4, r0
34008f76:	b120      	cbz	r0, 34008f82 <VD6G_Init+0x256>
34008f78:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
34008f7c:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34008f7e:	4a4e      	ldr	r2, [pc, #312]	@ (340090b8 <VD6G_Init+0x38c>)
34008f80:	e72b      	b.n	34008dda <VD6G_Init+0xae>
  ret = VD6G_PollReg8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_ACK);
34008f82:	4602      	mov	r2, r0
34008f84:	f240 2103 	movw	r1, #515	@ 0x203
34008f88:	4628      	mov	r0, r5
34008f8a:	f7ff fdc5 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
34008f8e:	4604      	mov	r4, r0
34008f90:	2800      	cmp	r0, #0
34008f92:	f47f aed9 	bne.w	34008d48 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
34008f96:	2102      	movs	r1, #2
34008f98:	4628      	mov	r0, r5
34008f9a:	f7ff feab 	bl	34008cf4 <VD6G_WaitState>
  if (ret)
34008f9e:	4604      	mov	r4, r0
34008fa0:	2800      	cmp	r0, #0
34008fa2:	f47f aed1 	bne.w	34008d48 <VD6G_Init+0x1c>
  for (i = 0; i < vtpatch_area_nb; i++) {
34008fa6:	4681      	mov	r9, r0
34008fa8:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 340090bc <VD6G_Init+0x390>
34008fac:	f8df a110 	ldr.w	sl, [pc, #272]	@ 340090c0 <VD6G_Init+0x394>
    ret = ctx->write_array(ctx, vtpatch_desc[i].offset, (uint8_t *) (vtpatch + vtpatch_offset),
34008fb0:	f8df b110 	ldr.w	fp, [pc, #272]	@ 340090c4 <VD6G_Init+0x398>
  for (i = 0; i < vtpatch_area_nb; i++) {
34008fb4:	f8da 3000 	ldr.w	r3, [sl]
34008fb8:	4599      	cmp	r9, r3
34008fba:	db13      	blt.n	34008fe4 <VD6G_Init+0x2b8>
  ret = ctx->write8(ctx, 0xd9f8, VT_REVISION);
34008fbc:	2211      	movs	r2, #17
34008fbe:	f64d 11f8 	movw	r1, #55800	@ 0xd9f8
34008fc2:	4628      	mov	r0, r5
34008fc4:	692b      	ldr	r3, [r5, #16]
34008fc6:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008fc8:	4604      	mov	r4, r0
34008fca:	bb58      	cbnz	r0, 34009024 <VD6G_Init+0x2f8>
  ret = ctx->write8(ctx, 0xaffc, VT_REVISION);
34008fcc:	2211      	movs	r2, #17
34008fce:	f64a 71fc 	movw	r1, #45052	@ 0xaffc
34008fd2:	4628      	mov	r0, r5
34008fd4:	692b      	ldr	r3, [r5, #16]
34008fd6:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34008fd8:	4604      	mov	r4, r0
34008fda:	b338      	cbz	r0, 3400902c <VD6G_Init+0x300>
34008fdc:	f240 13ff 	movw	r3, #511	@ 0x1ff
34008fe0:	9000      	str	r0, [sp, #0]
34008fe2:	e7cc      	b.n	34008f7e <VD6G_Init+0x252>
    ret = ctx->write_array(ctx, vtpatch_desc[i].offset, (uint8_t *) (vtpatch + vtpatch_offset),
34008fe4:	69ef      	ldr	r7, [r5, #28]
34008fe6:	f8d8 3004 	ldr.w	r3, [r8, #4]
34008fea:	f8b8 1000 	ldrh.w	r1, [r8]
34008fee:	4628      	mov	r0, r5
34008ff0:	eb0b 0204 	add.w	r2, fp, r4
34008ff4:	47b8      	blx	r7
    VD6G_TraceError(ctx, ret);
34008ff6:	f108 0808 	add.w	r8, r8, #8
34008ffa:	4607      	mov	r7, r0
34008ffc:	b928      	cbnz	r0, 3400900a <VD6G_Init+0x2de>
    vtpatch_offset += vtpatch_desc[i].size;
34008ffe:	f858 3c04 	ldr.w	r3, [r8, #-4]
  for (i = 0; i < vtpatch_area_nb; i++) {
34009002:	f109 0901 	add.w	r9, r9, #1
    vtpatch_offset += vtpatch_desc[i].size;
34009006:	441c      	add	r4, r3
  for (i = 0; i < vtpatch_area_nb; i++) {
34009008:	e7d4      	b.n	34008fb4 <VD6G_Init+0x288>
    VD6G_TraceError(ctx, ret);
3400900a:	f240 13f9 	movw	r3, #505	@ 0x1f9
3400900e:	4a2a      	ldr	r2, [pc, #168]	@ (340090b8 <VD6G_Init+0x38c>)
34009010:	491b      	ldr	r1, [pc, #108]	@ (34009080 <VD6G_Init+0x354>)
34009012:	9000      	str	r0, [sp, #0]
34009014:	4628      	mov	r0, r5
34009016:	f7ff fd42 	bl	34008a9e <VD6G_error>
3400901a:	4628      	mov	r0, r5
3400901c:	f7ff fd5c 	bl	34008ad8 <display_error>
    return ret;
34009020:	463c      	mov	r4, r7
34009022:	e691      	b.n	34008d48 <VD6G_Init+0x1c>
  VD6G_TraceError(ctx, ret);
34009024:	f240 13fd 	movw	r3, #509	@ 0x1fd
34009028:	9000      	str	r0, [sp, #0]
3400902a:	e7a8      	b.n	34008f7e <VD6G_Init+0x252>
  ret = ctx->write8(ctx, 0xbbb4, VT_REVISION);
3400902c:	2211      	movs	r2, #17
3400902e:	f64b 31b4 	movw	r1, #48052	@ 0xbbb4
34009032:	4628      	mov	r0, r5
34009034:	692b      	ldr	r3, [r5, #16]
34009036:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009038:	4604      	mov	r4, r0
3400903a:	b118      	cbz	r0, 34009044 <VD6G_Init+0x318>
3400903c:	f240 2301 	movw	r3, #513	@ 0x201
34009040:	9000      	str	r0, [sp, #0]
34009042:	e79c      	b.n	34008f7e <VD6G_Init+0x252>
  ret = ctx->write8(ctx, 0xb898, VT_REVISION);
34009044:	2211      	movs	r2, #17
34009046:	f64b 0198 	movw	r1, #47256	@ 0xb898
3400904a:	4628      	mov	r0, r5
3400904c:	692b      	ldr	r3, [r5, #16]
3400904e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009050:	4604      	mov	r4, r0
34009052:	b118      	cbz	r0, 3400905c <VD6G_Init+0x330>
34009054:	f240 2303 	movw	r3, #515	@ 0x203
34009058:	9000      	str	r0, [sp, #0]
3400905a:	e790      	b.n	34008f7e <VD6G_Init+0x252>
  ret = ctx->write8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_END_VTRAM_UPDATE);
3400905c:	2202      	movs	r2, #2
3400905e:	f240 2103 	movw	r1, #515	@ 0x203
34009062:	4628      	mov	r0, r5
34009064:	692b      	ldr	r3, [r5, #16]
34009066:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009068:	4604      	mov	r4, r0
3400906a:	b368      	cbz	r0, 340090c8 <VD6G_Init+0x39c>
3400906c:	f240 2306 	movw	r3, #518	@ 0x206
34009070:	9000      	str	r0, [sp, #0]
34009072:	e784      	b.n	34008f7e <VD6G_Init+0x252>
34009074:	340240a6 	.word	0x340240a6
34009078:	340240c9 	.word	0x340240c9
3400907c:	3402a625 	.word	0x3402a625
34009080:	34023f6f 	.word	0x34023f6f
34009084:	3402424d 	.word	0x3402424d
34009088:	34024155 	.word	0x34024155
3400908c:	340235d8 	.word	0x340235d8
34009090:	3402a606 	.word	0x3402a606
34009094:	34024208 	.word	0x34024208
34009098:	3402bf18 	.word	0x3402bf18
3400909c:	3402a5ee 	.word	0x3402a5ee
340090a0:	34023f95 	.word	0x34023f95
340090a4:	34023fb5 	.word	0x34023fb5
340090a8:	34023ff1 	.word	0x34023ff1
340090ac:	3402a5e1 	.word	0x3402a5e1
340090b0:	34024016 	.word	0x34024016
340090b4:	3402a5cf 	.word	0x3402a5cf
340090b8:	3402a5b5 	.word	0x3402a5b5
340090bc:	340a31c0 	.word	0x340a31c0
340090c0:	340a31bc 	.word	0x340a31bc
340090c4:	3402a750 	.word	0x3402a750
  ret = VD6G_PollReg8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_ACK);
340090c8:	4602      	mov	r2, r0
340090ca:	f240 2103 	movw	r1, #515	@ 0x203
340090ce:	4628      	mov	r0, r5
340090d0:	f7ff fd22 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
340090d4:	4604      	mov	r4, r0
340090d6:	2800      	cmp	r0, #0
340090d8:	f47f ae36 	bne.w	34008d48 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
340090dc:	2102      	movs	r1, #2
340090de:	4628      	mov	r0, r5
340090e0:	f7ff fe08 	bl	34008cf4 <VD6G_WaitState>
  if (ret)
340090e4:	4604      	mov	r4, r0
340090e6:	2800      	cmp	r0, #0
340090e8:	f47f ae2e 	bne.w	34008d48 <VD6G_Init+0x1c>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_RD_REVISION, &cur_vtpatch_rd_rev);
340090ec:	2120      	movs	r1, #32
340090ee:	4628      	mov	r0, r5
340090f0:	686b      	ldr	r3, [r5, #4]
340090f2:	f10d 020a 	add.w	r2, sp, #10
340090f6:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340090f8:	4604      	mov	r4, r0
340090fa:	b958      	cbnz	r0, 34009114 <VD6G_Init+0x3e8>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_GR_REVISION, &cur_vtpatch_gr_rev);
340090fc:	2124      	movs	r1, #36	@ 0x24
340090fe:	4628      	mov	r0, r5
34009100:	686b      	ldr	r3, [r5, #4]
34009102:	f10d 020b 	add.w	r2, sp, #11
34009106:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009108:	4604      	mov	r4, r0
3400910a:	b138      	cbz	r0, 3400911c <VD6G_Init+0x3f0>
3400910c:	f240 2313 	movw	r3, #531	@ 0x213
34009110:	9000      	str	r0, [sp, #0]
34009112:	e734      	b.n	34008f7e <VD6G_Init+0x252>
  VD6G_TraceError(ctx, ret);
34009114:	f240 2311 	movw	r3, #529	@ 0x211
34009118:	9000      	str	r0, [sp, #0]
3400911a:	e730      	b.n	34008f7e <VD6G_Init+0x252>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_GT_REVISION, &cur_vtpatch_gt_rev);
3400911c:	4632      	mov	r2, r6
3400911e:	2126      	movs	r1, #38	@ 0x26
34009120:	4628      	mov	r0, r5
34009122:	686b      	ldr	r3, [r5, #4]
34009124:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009126:	4604      	mov	r4, r0
34009128:	b118      	cbz	r0, 34009132 <VD6G_Init+0x406>
3400912a:	f240 2315 	movw	r3, #533	@ 0x215
3400912e:	9000      	str	r0, [sp, #0]
34009130:	e725      	b.n	34008f7e <VD6G_Init+0x252>
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009132:	f89d 300a 	ldrb.w	r3, [sp, #10]
      cur_vtpatch_gr_rev != VT_REVISION ||
34009136:	f89d 100b 	ldrb.w	r1, [sp, #11]
  if (cur_vtpatch_rd_rev != VT_REVISION ||
3400913a:	2b11      	cmp	r3, #17
      cur_vtpatch_gt_rev != VT_REVISION) {
3400913c:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009140:	d004      	beq.n	3400914c <VD6G_Init+0x420>
    VD6G_error(ctx, "bad vtpatch version, expected %d got rd:%d, gr:%d gt:%d\n", VT_REVISION, cur_vtpatch_rd_rev,
34009142:	e9cd 1200 	strd	r1, r2, [sp]
34009146:	2211      	movs	r2, #17
34009148:	496e      	ldr	r1, [pc, #440]	@ (34009304 <VD6G_Init+0x5d8>)
3400914a:	e6c3      	b.n	34008ed4 <VD6G_Init+0x1a8>
  if (cur_vtpatch_rd_rev != VT_REVISION ||
3400914c:	2911      	cmp	r1, #17
3400914e:	d1f8      	bne.n	34009142 <VD6G_Init+0x416>
      cur_vtpatch_gr_rev != VT_REVISION ||
34009150:	2a11      	cmp	r2, #17
34009152:	d1f6      	bne.n	34009142 <VD6G_Init+0x416>
  VD6G_notice(ctx, "VT patch %d applied\n", VT_REVISION);
34009154:	4628      	mov	r0, r5
34009156:	496c      	ldr	r1, [pc, #432]	@ (34009308 <VD6G_Init+0x5dc>)
34009158:	f7ff fcaf 	bl	34008aba <VD6G_notice>
  ret = ctx->read8(ctx, VD6G_REG_OPTICAL_REVISION, &reg8);
3400915c:	4632      	mov	r2, r6
3400915e:	211a      	movs	r1, #26
34009160:	4628      	mov	r0, r5
34009162:	686b      	ldr	r3, [r5, #4]
34009164:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009166:	4604      	mov	r4, r0
34009168:	b120      	cbz	r0, 34009174 <VD6G_Init+0x448>
3400916a:	f240 2341 	movw	r3, #577	@ 0x241
3400916e:	4a67      	ldr	r2, [pc, #412]	@ (3400930c <VD6G_Init+0x5e0>)
34009170:	9000      	str	r0, [sp, #0]
34009172:	e632      	b.n	34008dda <VD6G_Init+0xae>
  if (!(reg8 & 1)) {
34009174:	f89d 300c 	ldrb.w	r3, [sp, #12]
34009178:	f013 0301 	ands.w	r3, r3, #1
3400917c:	d008      	beq.n	34009190 <VD6G_Init+0x464>
  switch (drv_ctx->config_save.flip_mirror_mode) {
3400917e:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
34009182:	2a03      	cmp	r2, #3
34009184:	d81b      	bhi.n	340091be <VD6G_Init+0x492>
34009186:	e8df f002 	tbb	[pc, r2]
3400918a:	021f      	.short	0x021f
3400918c:	1803      	.short	0x1803
3400918e:	2304      	movs	r3, #4
34009190:	f240 4767 	movw	r7, #1127	@ 0x467
  for (i = 0; i < VD6G_GPIO_NB; i++) {
34009194:	f240 496f 	movw	r9, #1135	@ 0x46f
    ctx->bayer = VD6G_BAYER_RGGB;
34009198:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
3400919c:	f105 085b 	add.w	r8, r5, #91	@ 0x5b
    ret = ctx->write8(ctx, VD6G_REG_GPIO_x_CTRL(i), drv_ctx->config_save.gpio_ctrl[i]);
340091a0:	4639      	mov	r1, r7
340091a2:	4628      	mov	r0, r5
340091a4:	692b      	ldr	r3, [r5, #16]
340091a6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
340091aa:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
340091ac:	4604      	mov	r4, r0
340091ae:	b168      	cbz	r0, 340091cc <VD6G_Init+0x4a0>
340091b0:	f44f 731d 	mov.w	r3, #628	@ 0x274
340091b4:	4a56      	ldr	r2, [pc, #344]	@ (34009310 <VD6G_Init+0x5e4>)
340091b6:	9000      	str	r0, [sp, #0]
340091b8:	e60f      	b.n	34008dda <VD6G_Init+0xae>
  case VD6G_MIRROR_FLIP:
340091ba:	4613      	mov	r3, r2
340091bc:	e7e8      	b.n	34009190 <VD6G_Init+0x464>
    assert(0);
340091be:	f240 2156 	movw	r1, #598	@ 0x256
340091c2:	4b54      	ldr	r3, [pc, #336]	@ (34009314 <VD6G_Init+0x5e8>)
340091c4:	4a51      	ldr	r2, [pc, #324]	@ (3400930c <VD6G_Init+0x5e0>)
340091c6:	e643      	b.n	34008e50 <VD6G_Init+0x124>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340091c8:	2302      	movs	r3, #2
340091ca:	e7e1      	b.n	34009190 <VD6G_Init+0x464>
  for (i = 0; i < VD6G_GPIO_NB; i++) {
340091cc:	3701      	adds	r7, #1
340091ce:	b2bf      	uxth	r7, r7
340091d0:	454f      	cmp	r7, r9
340091d2:	d1e5      	bne.n	340091a0 <VD6G_Init+0x474>
  ret = VD6G_ComputeClocks(ctx, drv_ctx->config_save.ext_clock_freq_in_hz, &pll_prediv, &pll_mult);
340091d4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  const unsigned int predivs[] = { 1, 2, 4 };
340091d6:	4a50      	ldr	r2, [pc, #320]	@ (34009318 <VD6G_Init+0x5ec>)
340091d8:	ca07      	ldmia	r2, {r0, r1, r2}
340091da:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  if (ext_clock < 6 * M_HZ ||
340091de:	484f      	ldr	r0, [pc, #316]	@ (3400931c <VD6G_Init+0x5f0>)
340091e0:	f5a3 02b7 	sub.w	r2, r3, #5996544	@ 0x5b8000
340091e4:	f5a2 6258 	sub.w	r2, r2, #3456	@ 0xd80
340091e8:	4282      	cmp	r2, r0
340091ea:	4631      	mov	r1, r6
340091ec:	d830      	bhi.n	34009250 <VD6G_Init+0x524>
    if (ext_clock / *pll_prediv < 12 * M_HZ)
340091ee:	4a4c      	ldr	r2, [pc, #304]	@ (34009320 <VD6G_Init+0x5f4>)
    *pll_prediv = predivs[i];
340091f0:	f851 0b04 	ldr.w	r0, [r1], #4
    if (ext_clock / *pll_prediv < 12 * M_HZ)
340091f4:	fa5f f880 	uxtb.w	r8, r0
340091f8:	fbb3 f0f8 	udiv	r0, r3, r8
340091fc:	4290      	cmp	r0, r2
340091fe:	d302      	bcc.n	34009206 <VD6G_Init+0x4da>
  for (i = 0; i < ARRAY_SIZE(predivs); i++) {
34009200:	3401      	adds	r4, #1
34009202:	2c03      	cmp	r4, #3
34009204:	d1f4      	bne.n	340091f0 <VD6G_Init+0x4c4>
  *pll_mult = (VD6G_TARGET_PLL * *pll_prediv + ext_clock / 2) / ext_clock;
34009206:	4a47      	ldr	r2, [pc, #284]	@ (34009324 <VD6G_Init+0x5f8>)
34009208:	085f      	lsrs	r7, r3, #1
3400920a:	fb02 7708 	mla	r7, r2, r8, r7
3400920e:	fbb7 f7f3 	udiv	r7, r7, r3
  VD6G_dbg(ctx, 0, "Ext Clock = %d Hz\n", ext_clock);
34009212:	2100      	movs	r1, #0
34009214:	4628      	mov	r0, r5
34009216:	4a44      	ldr	r2, [pc, #272]	@ (34009328 <VD6G_Init+0x5fc>)
34009218:	f7ff fd34 	bl	34008c84 <VD6G_dbg.constprop.0>
  VD6G_dbg(ctx, 0, "PLL mult = %d\n", *pll_mult);
3400921c:	b2ff      	uxtb	r7, r7
  VD6G_dbg(ctx, 0, "PLL prediv = %d\n", *pll_prediv);
3400921e:	4643      	mov	r3, r8
34009220:	2100      	movs	r1, #0
34009222:	4628      	mov	r0, r5
34009224:	4a41      	ldr	r2, [pc, #260]	@ (3400932c <VD6G_Init+0x600>)
34009226:	f7ff fd2d 	bl	34008c84 <VD6G_dbg.constprop.0>
  VD6G_dbg(ctx, 0, "PLL mult = %d\n", *pll_mult);
3400922a:	463b      	mov	r3, r7
3400922c:	2100      	movs	r1, #0
3400922e:	4628      	mov	r0, r5
34009230:	4a3f      	ldr	r2, [pc, #252]	@ (34009330 <VD6G_Init+0x604>)
34009232:	f7ff fd27 	bl	34008c84 <VD6G_dbg.constprop.0>
  ret = ctx->write32(ctx, VD6G_REG_EXT_CLOCK, drv_ctx->config_save.ext_clock_freq_in_hz);
34009236:	f44f 7108 	mov.w	r1, #544	@ 0x220
3400923a:	4628      	mov	r0, r5
3400923c:	69ab      	ldr	r3, [r5, #24]
3400923e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
34009240:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009242:	4604      	mov	r4, r0
34009244:	b130      	cbz	r0, 34009254 <VD6G_Init+0x528>
34009246:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
3400924a:	9000      	str	r0, [sp, #0]
    VD6G_TraceError(ctx, ret);
3400924c:	4a39      	ldr	r2, [pc, #228]	@ (34009334 <VD6G_Init+0x608>)
3400924e:	e5c4      	b.n	34008dda <VD6G_Init+0xae>
    VD6G_error(ctx, "External clock out of rangen\n");
34009250:	4939      	ldr	r1, [pc, #228]	@ (34009338 <VD6G_Init+0x60c>)
34009252:	e5d9      	b.n	34008e08 <VD6G_Init+0xdc>
  ret = ctx->write8(ctx, VD6G_REG_CLK_PLL_PREDIV, pll_prediv);
34009254:	4642      	mov	r2, r8
34009256:	f44f 7109 	mov.w	r1, #548	@ 0x224
3400925a:	4628      	mov	r0, r5
3400925c:	692b      	ldr	r3, [r5, #16]
3400925e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009260:	4604      	mov	r4, r0
34009262:	b958      	cbnz	r0, 3400927c <VD6G_Init+0x550>
  ret = ctx->write8(ctx, VD6G_REG_CLK_SYS_PLL_MULT, pll_mult);
34009264:	463a      	mov	r2, r7
34009266:	f240 2126 	movw	r1, #550	@ 0x226
3400926a:	4628      	mov	r0, r5
3400926c:	692b      	ldr	r3, [r5, #16]
3400926e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009270:	4604      	mov	r4, r0
34009272:	b138      	cbz	r0, 34009284 <VD6G_Init+0x558>
34009274:	f240 23ca 	movw	r3, #714	@ 0x2ca
34009278:	9000      	str	r0, [sp, #0]
3400927a:	e7e7      	b.n	3400924c <VD6G_Init+0x520>
  VD6G_TraceError(ctx, ret);
3400927c:	f240 23c7 	movw	r3, #711	@ 0x2c7
34009280:	9000      	str	r0, [sp, #0]
34009282:	e7e3      	b.n	3400924c <VD6G_Init+0x520>
  if (drv_ctx->config_save.line_len) {
34009284:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
34009286:	b962      	cbnz	r2, 340092a2 <VD6G_Init+0x576>
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_length);
34009288:	4632      	mov	r2, r6
3400928a:	f44f 7140 	mov.w	r1, #768	@ 0x300
3400928e:	4628      	mov	r0, r5
34009290:	68ab      	ldr	r3, [r5, #8]
34009292:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009294:	4604      	mov	r4, r0
34009296:	b188      	cbz	r0, 340092bc <VD6G_Init+0x590>
34009298:	f44f 7350 	mov.w	r3, #832	@ 0x340
3400929c:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
3400929e:	4a27      	ldr	r2, [pc, #156]	@ (3400933c <VD6G_Init+0x610>)
340092a0:	e59b      	b.n	34008dda <VD6G_Init+0xae>
    ret = ctx->write16(ctx, VD6G_LINE_LENGTH, drv_ctx->config_save.line_len);
340092a2:	f44f 7140 	mov.w	r1, #768	@ 0x300
340092a6:	4628      	mov	r0, r5
340092a8:	696b      	ldr	r3, [r5, #20]
340092aa:	b292      	uxth	r2, r2
340092ac:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
340092ae:	4604      	mov	r4, r0
340092b0:	2800      	cmp	r0, #0
340092b2:	d0e9      	beq.n	34009288 <VD6G_Init+0x55c>
340092b4:	f240 23ce 	movw	r3, #718	@ 0x2ce
340092b8:	9000      	str	r0, [sp, #0]
340092ba:	e7c7      	b.n	3400924c <VD6G_Init+0x520>
  VD6G_dbg(ctx, 0, "Line len = %d\n", line_length);
340092bc:	4601      	mov	r1, r0
340092be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340092c2:	4628      	mov	r0, r5
340092c4:	4a1e      	ldr	r2, [pc, #120]	@ (34009340 <VD6G_Init+0x614>)
340092c6:	f7ff fcdd 	bl	34008c84 <VD6G_dbg.constprop.0>
  frame_length = VD6G_PIXEL_CLOCK / (line_length * drv_ctx->config_save.frame_rate);
340092ca:	6baa      	ldr	r2, [r5, #56]	@ 0x38
340092cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340092d0:	4e1c      	ldr	r6, [pc, #112]	@ (34009344 <VD6G_Init+0x618>)
340092d2:	4353      	muls	r3, r2
340092d4:	fb96 f6f3 	sdiv	r6, r6, r3
  VD6G_dbg(ctx, 0, "Set frame_length to %d to reach %d fps\n", frame_length, drv_ctx->config_save.frame_rate);
340092d8:	4621      	mov	r1, r4
340092da:	4628      	mov	r0, r5
340092dc:	9200      	str	r2, [sp, #0]
340092de:	b2b3      	uxth	r3, r6
340092e0:	4a19      	ldr	r2, [pc, #100]	@ (34009348 <VD6G_Init+0x61c>)
340092e2:	f7ff fccf 	bl	34008c84 <VD6G_dbg.constprop.0>
  ret = ctx->write16(ctx, VD6G_FRAME_LENGTH, frame_length);
340092e6:	f44f 618b 	mov.w	r1, #1112	@ 0x458
340092ea:	4628      	mov	r0, r5
340092ec:	696b      	ldr	r3, [r5, #20]
340092ee:	b2b2      	uxth	r2, r6
340092f0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340092f2:	4604      	mov	r4, r0
340092f4:	2800      	cmp	r0, #0
340092f6:	f43f ad27 	beq.w	34008d48 <VD6G_Init+0x1c>
340092fa:	f240 3346 	movw	r3, #838	@ 0x346
340092fe:	9000      	str	r0, [sp, #0]
34009300:	e7cd      	b.n	3400929e <VD6G_Init+0x572>
34009302:	bf00      	nop
34009304:	34024263 	.word	0x34024263
34009308:	3402429c 	.word	0x3402429c
3400930c:	3402a5a3 	.word	0x3402a5a3
34009310:	3402a598 	.word	0x3402a598
34009314:	340235d8 	.word	0x340235d8
34009318:	340229b0 	.word	0x340229b0
3400931c:	01406f40 	.word	0x01406f40
34009320:	00b71b00 	.word	0x00b71b00
34009324:	2fec1100 	.word	0x2fec1100
34009328:	340242cf 	.word	0x340242cf
3400932c:	340242e2 	.word	0x340242e2
34009330:	340242f3 	.word	0x340242f3
34009334:	3402a587 	.word	0x3402a587
34009338:	340242b1 	.word	0x340242b1
3400933c:	3402a573 	.word	0x3402a573
34009340:	34024302 	.word	0x34024302
34009344:	09959d00 	.word	0x09959d00
34009348:	34024197 	.word	0x34024197

3400934c <VD6G_DeInit>:

int VD6G_DeInit(VD6G_Ctx_t *ctx)
{
3400934c:	b538      	push	{r3, r4, r5, lr}
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;

  if (drv_ctx->is_streaming)
3400934e:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
{
34009350:	4604      	mov	r4, r0
  if (drv_ctx->is_streaming)
34009352:	b945      	cbnz	r5, 34009366 <VD6G_DeInit+0x1a>
    return -1;

  ctx->shutdown_pin(ctx, 0);
34009354:	6803      	ldr	r3, [r0, #0]
34009356:	4629      	mov	r1, r5
34009358:	4798      	blx	r3
  ctx->delay(ctx, 10);
3400935a:	210a      	movs	r1, #10
3400935c:	4620      	mov	r0, r4
3400935e:	6a23      	ldr	r3, [r4, #32]
34009360:	4798      	blx	r3

  return 0;
}
34009362:	4628      	mov	r0, r5
34009364:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
34009366:	f04f 35ff 	mov.w	r5, #4294967295
3400936a:	e7fa      	b.n	34009362 <VD6G_DeInit+0x16>

3400936c <VD6G_Start>:
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
3400936c:	6c83      	ldr	r3, [r0, #72]	@ 0x48

int VD6G_Start(VD6G_Ctx_t *ctx)
{
3400936e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009370:	3b01      	subs	r3, #1
34009372:	2b01      	cmp	r3, #1
{
34009374:	4605      	mov	r5, r0
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009376:	d904      	bls.n	34009382 <VD6G_Start+0x16>
    return ret;
34009378:	f04f 34ff 	mov.w	r4, #4294967295
  if (ret)
    return ret;
  drv_ctx->is_streaming = 1;

  return 0;
}
3400937c:	4620      	mov	r0, r4
3400937e:	b002      	add	sp, #8
34009380:	bd70      	pop	{r4, r5, r6, pc}
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34009382:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009384:	2208      	movs	r2, #8
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34009386:	3b00      	subs	r3, #0
34009388:	bf18      	it	ne
3400938a:	2301      	movne	r3, #1
3400938c:	64c3      	str	r3, [r0, #76]	@ 0x4c
  out_itf->data_lane0_swap_enable = !!out_itf->data_lane0_swap_enable;
3400938e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009390:	f240 310a 	movw	r1, #778	@ 0x30a
  out_itf->data_lane0_swap_enable = !!out_itf->data_lane0_swap_enable;
34009394:	3b00      	subs	r3, #0
34009396:	bf18      	it	ne
34009398:	2301      	movne	r3, #1
3400939a:	6503      	str	r3, [r0, #80]	@ 0x50
  out_itf->data_lane1_swap_enable = !!out_itf->data_lane1_swap_enable;
3400939c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
3400939e:	3b00      	subs	r3, #0
340093a0:	bf18      	it	ne
340093a2:	2301      	movne	r3, #1
340093a4:	6543      	str	r3, [r0, #84]	@ 0x54
  out_itf->data_lanes_mapping_swap_enable = !!out_itf->data_lanes_mapping_swap_enable;
340093a6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
340093a8:	3b00      	subs	r3, #0
340093aa:	bf18      	it	ne
340093ac:	2301      	movne	r3, #1
340093ae:	6583      	str	r3, [r0, #88]	@ 0x58
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
340093b0:	6903      	ldr	r3, [r0, #16]
340093b2:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340093b4:	4604      	mov	r4, r0
340093b6:	b9e8      	cbnz	r0, 340093f4 <VD6G_Start+0x88>
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
340093b8:	e9d5 0315 	ldrd	r0, r3, [r5, #84]	@ 0x54
             !out_itf->data_lanes_mapping_swap_enable << 7 |
340093bc:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
             out_itf->clock_lane_swap_enable << 3 |
340093be:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
             !out_itf->data_lanes_mapping_swap_enable << 7 |
340093c0:	0192      	lsls	r2, r2, #6
             out_itf->clock_lane_swap_enable << 3 |
340093c2:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
340093c6:	430a      	orrs	r2, r1
340093c8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
340093cc:	fab3 f383 	clz	r3, r3
             out_itf->data_lanes_mapping_swap_enable << 4 |
340093d0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
340093d2:	095b      	lsrs	r3, r3, #5
             out_itf->clock_lane_swap_enable << 3 |
340093d4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
340093d8:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
  ret = ctx->write16(ctx, VD6G_REG_OIF_CTRL, oif_ctrl);
340093dc:	f44f 7143 	mov.w	r1, #780	@ 0x30c
340093e0:	4628      	mov	r0, r5
340093e2:	696b      	ldr	r3, [r5, #20]
340093e4:	b292      	uxth	r2, r2
340093e6:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340093e8:	4604      	mov	r4, r0
340093ea:	b178      	cbz	r0, 3400940c <VD6G_Start+0xa0>
340093ec:	f240 23ee 	movw	r3, #750	@ 0x2ee
340093f0:	9000      	str	r0, [sp, #0]
340093f2:	e002      	b.n	340093fa <VD6G_Start+0x8e>
  VD6G_TraceError(ctx, ret);
340093f4:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
340093f8:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
340093fa:	4a74      	ldr	r2, [pc, #464]	@ (340095cc <VD6G_Start+0x260>)
340093fc:	4628      	mov	r0, r5
340093fe:	4974      	ldr	r1, [pc, #464]	@ (340095d0 <VD6G_Start+0x264>)
34009400:	f7ff fb4d 	bl	34008a9e <VD6G_error>
34009404:	4628      	mov	r0, r5
34009406:	f7ff fb67 	bl	34008ad8 <display_error>
  if (ret)
3400940a:	e7b7      	b.n	3400937c <VD6G_Start+0x10>
  ret = ctx->write16(ctx, VD6G_REG_OIF_CSI_BITRATE, 804);
3400940c:	f44f 7249 	mov.w	r2, #804	@ 0x324
34009410:	f240 3112 	movw	r1, #786	@ 0x312
34009414:	4628      	mov	r0, r5
34009416:	696b      	ldr	r3, [r5, #20]
34009418:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400941a:	4604      	mov	r4, r0
3400941c:	b118      	cbz	r0, 34009426 <VD6G_Start+0xba>
3400941e:	f240 23f2 	movw	r3, #754	@ 0x2f2
34009422:	9000      	str	r0, [sp, #0]
34009424:	e7e9      	b.n	340093fa <VD6G_Start+0x8e>
  ret = ctx->write8(ctx, VD6G_REG_OIF_IMG_CTRL, 0x2a);
34009426:	222a      	movs	r2, #42	@ 0x2a
34009428:	f240 310f 	movw	r1, #783	@ 0x30f
3400942c:	4628      	mov	r0, r5
3400942e:	692b      	ldr	r3, [r5, #16]
34009430:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009432:	4604      	mov	r4, r0
34009434:	b118      	cbz	r0, 3400943e <VD6G_Start+0xd2>
34009436:	f240 23f6 	movw	r3, #758	@ 0x2f6
3400943a:	9000      	str	r0, [sp, #0]
3400943c:	e7dd      	b.n	340093fa <VD6G_Start+0x8e>
  mode = VD6G_Resolution2Mode(drv_ctx->config_save.resolution);
3400943e:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
  switch (resolution) {
34009442:	2b08      	cmp	r3, #8
34009444:	d898      	bhi.n	34009378 <VD6G_Start+0xc>
34009446:	4a63      	ldr	r2, [pc, #396]	@ (340095d4 <VD6G_Start+0x268>)
34009448:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (!mode)
3400944c:	2e00      	cmp	r6, #0
3400944e:	d093      	beq.n	34009378 <VD6G_Start+0xc>
  ret = ctx->write8(ctx, VD6G_REG_READOUT_CTRL, mode->bin_mode);
34009450:	f240 417e 	movw	r1, #1150	@ 0x47e
34009454:	4628      	mov	r0, r5
34009456:	692b      	ldr	r3, [r5, #16]
34009458:	7a32      	ldrb	r2, [r6, #8]
3400945a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400945c:	4604      	mov	r4, r0
3400945e:	b120      	cbz	r0, 3400946a <VD6G_Start+0xfe>
34009460:	f240 3329 	movw	r3, #809	@ 0x329
34009464:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009466:	4a5c      	ldr	r2, [pc, #368]	@ (340095d8 <VD6G_Start+0x26c>)
34009468:	e7c8      	b.n	340093fc <VD6G_Start+0x90>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_X_START, mode->crop.left);
3400946a:	f240 415e 	movw	r1, #1118	@ 0x45e
3400946e:	4628      	mov	r0, r5
34009470:	696b      	ldr	r3, [r5, #20]
34009472:	89b2      	ldrh	r2, [r6, #12]
34009474:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009476:	4604      	mov	r4, r0
34009478:	b978      	cbnz	r0, 3400949a <VD6G_Start+0x12e>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_X_END, mode->crop.left + mode->crop.width - 1);
3400947a:	6973      	ldr	r3, [r6, #20]
3400947c:	68f2      	ldr	r2, [r6, #12]
3400947e:	f44f 618c 	mov.w	r1, #1120	@ 0x460
34009482:	441a      	add	r2, r3
34009484:	3a01      	subs	r2, #1
34009486:	4628      	mov	r0, r5
34009488:	696b      	ldr	r3, [r5, #20]
3400948a:	b292      	uxth	r2, r2
3400948c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400948e:	4604      	mov	r4, r0
34009490:	b138      	cbz	r0, 340094a2 <VD6G_Start+0x136>
34009492:	f240 332e 	movw	r3, #814	@ 0x32e
34009496:	9000      	str	r0, [sp, #0]
34009498:	e7e5      	b.n	34009466 <VD6G_Start+0xfa>
  VD6G_TraceError(ctx, ret);
3400949a:	f44f 734b 	mov.w	r3, #812	@ 0x32c
3400949e:	9000      	str	r0, [sp, #0]
340094a0:	e7e1      	b.n	34009466 <VD6G_Start+0xfa>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_Y_START, mode->crop.top);
340094a2:	f240 4162 	movw	r1, #1122	@ 0x462
340094a6:	4628      	mov	r0, r5
340094a8:	696b      	ldr	r3, [r5, #20]
340094aa:	8a32      	ldrh	r2, [r6, #16]
340094ac:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340094ae:	4604      	mov	r4, r0
340094b0:	b118      	cbz	r0, 340094ba <VD6G_Start+0x14e>
340094b2:	f240 3331 	movw	r3, #817	@ 0x331
340094b6:	9000      	str	r0, [sp, #0]
340094b8:	e7d5      	b.n	34009466 <VD6G_Start+0xfa>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_Y_END, mode->crop.top + mode->crop.height - 1);
340094ba:	69b3      	ldr	r3, [r6, #24]
340094bc:	6932      	ldr	r2, [r6, #16]
340094be:	f240 4164 	movw	r1, #1124	@ 0x464
340094c2:	441a      	add	r2, r3
340094c4:	3a01      	subs	r2, #1
340094c6:	4628      	mov	r0, r5
340094c8:	696b      	ldr	r3, [r5, #20]
340094ca:	b292      	uxth	r2, r2
340094cc:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340094ce:	4604      	mov	r4, r0
340094d0:	b118      	cbz	r0, 340094da <VD6G_Start+0x16e>
340094d2:	f240 3333 	movw	r3, #819	@ 0x333
340094d6:	9000      	str	r0, [sp, #0]
340094d8:	e7c5      	b.n	34009466 <VD6G_Start+0xfa>
  return VD6G_SetExposureModeInternal(ctx, drv_ctx->config_save.exposure_mode);
340094da:	4628      	mov	r0, r5
340094dc:	f895 1064 	ldrb.w	r1, [r5, #100]	@ 0x64
340094e0:	f7ff fb4a 	bl	34008b78 <VD6G_SetExposureModeInternal>
  if (ret)
340094e4:	4604      	mov	r4, r0
340094e6:	2800      	cmp	r0, #0
340094e8:	f47f af48 	bne.w	3400937c <VD6G_Start+0x10>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340094ec:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
340094f0:	2b03      	cmp	r3, #3
340094f2:	f63f af41 	bhi.w	34009378 <VD6G_Start+0xc>
  ret = ctx->write8(ctx, VD6G_REG_ORIENTATION, mode);
340094f6:	4a39      	ldr	r2, [pc, #228]	@ (340095dc <VD6G_Start+0x270>)
340094f8:	692c      	ldr	r4, [r5, #16]
340094fa:	f240 3102 	movw	r1, #770	@ 0x302
340094fe:	4628      	mov	r0, r5
34009500:	5cd2      	ldrb	r2, [r2, r3]
34009502:	47a0      	blx	r4
  VD6G_TraceError(ctx, ret);
34009504:	4604      	mov	r4, r0
34009506:	b9a8      	cbnz	r0, 34009534 <VD6G_Start+0x1c8>
  switch (drv_ctx->config_save.patgen) {
34009508:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
3400950c:	2b06      	cmp	r3, #6
3400950e:	f63f af33 	bhi.w	34009378 <VD6G_Start+0xc>
34009512:	4a33      	ldr	r2, [pc, #204]	@ (340095e0 <VD6G_Start+0x274>)
34009514:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
  if (drv_ctx->config_save.patgen != VD6G_PATGEN_DISABLE)
34009518:	b1eb      	cbz	r3, 34009556 <VD6G_Start+0x1ea>
    ret = ctx->write8(ctx, VD6G_REG_DUSTER_CTRL, VD6G_DUSTER_CTRL_DISABLE);
3400951a:	4602      	mov	r2, r0
3400951c:	f44f 7146 	mov.w	r1, #792	@ 0x318
34009520:	4628      	mov	r0, r5
34009522:	692b      	ldr	r3, [r5, #16]
34009524:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009526:	4604      	mov	r4, r0
34009528:	b148      	cbz	r0, 3400953e <VD6G_Start+0x1d2>
3400952a:	f240 3392 	movw	r3, #914	@ 0x392
3400952e:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009530:	4a2c      	ldr	r2, [pc, #176]	@ (340095e4 <VD6G_Start+0x278>)
34009532:	e763      	b.n	340093fc <VD6G_Start+0x90>
  VD6G_TraceError(ctx, ret);
34009534:	f240 336a 	movw	r3, #874	@ 0x36a
34009538:	4a2b      	ldr	r2, [pc, #172]	@ (340095e8 <VD6G_Start+0x27c>)
3400953a:	9000      	str	r0, [sp, #0]
3400953c:	e75e      	b.n	340093fc <VD6G_Start+0x90>
    ret = ctx->write8(ctx, VD6G_REG_DARKCAL_CTRL, VD6G_DARKCAL_CTRL_DISABLE_DARKAVG);
3400953e:	2202      	movs	r2, #2
34009540:	f44f 7150 	mov.w	r1, #832	@ 0x340
34009544:	4628      	mov	r0, r5
34009546:	692b      	ldr	r3, [r5, #16]
34009548:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
3400954a:	4604      	mov	r4, r0
3400954c:	b118      	cbz	r0, 34009556 <VD6G_Start+0x1ea>
3400954e:	f44f 7365 	mov.w	r3, #916	@ 0x394
34009552:	9000      	str	r0, [sp, #0]
34009554:	e7ec      	b.n	34009530 <VD6G_Start+0x1c4>
  ret = ctx->write16(ctx, VD6G_REG_PATGEN_CTRL, value);
34009556:	4632      	mov	r2, r6
34009558:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3400955c:	4628      	mov	r0, r5
3400955e:	696b      	ldr	r3, [r5, #20]
34009560:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009562:	4604      	mov	r4, r0
34009564:	b118      	cbz	r0, 3400956e <VD6G_Start+0x202>
34009566:	f44f 7366 	mov.w	r3, #920	@ 0x398
3400956a:	9000      	str	r0, [sp, #0]
3400956c:	e7e0      	b.n	34009530 <VD6G_Start+0x1c4>
  return VD6G_SetFlicker(ctx, drv_ctx->config_save.flicker);
3400956e:	4628      	mov	r0, r5
34009570:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
34009574:	f7ff fb20 	bl	34008bb8 <VD6G_SetFlicker>
  if (ret)
34009578:	4604      	mov	r4, r0
3400957a:	2800      	cmp	r0, #0
3400957c:	f47f aefe 	bne.w	3400937c <VD6G_Start+0x10>
  ret = ctx->write8(ctx, VD6G_REG_STBY, VD6G_CMD_START_STREAM);
34009580:	2201      	movs	r2, #1
34009582:	f240 2101 	movw	r1, #513	@ 0x201
34009586:	4628      	mov	r0, r5
34009588:	692b      	ldr	r3, [r5, #16]
3400958a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400958c:	4604      	mov	r4, r0
3400958e:	b120      	cbz	r0, 3400959a <VD6G_Start+0x22e>
34009590:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
34009594:	4a15      	ldr	r2, [pc, #84]	@ (340095ec <VD6G_Start+0x280>)
34009596:	9000      	str	r0, [sp, #0]
34009598:	e730      	b.n	340093fc <VD6G_Start+0x90>
  ret = VD6G_PollReg8(ctx, VD6G_REG_STBY, VD6G_CMD_ACK);
3400959a:	4602      	mov	r2, r0
3400959c:	f240 2101 	movw	r1, #513	@ 0x201
340095a0:	4628      	mov	r0, r5
340095a2:	f7ff fab9 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
340095a6:	4604      	mov	r4, r0
340095a8:	2800      	cmp	r0, #0
340095aa:	f47f aee7 	bne.w	3400937c <VD6G_Start+0x10>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_STREAMING);
340095ae:	2103      	movs	r1, #3
340095b0:	4628      	mov	r0, r5
340095b2:	f7ff fb9f 	bl	34008cf4 <VD6G_WaitState>
  if (ret)
340095b6:	4604      	mov	r4, r0
340095b8:	2800      	cmp	r0, #0
340095ba:	f47f aedf 	bne.w	3400937c <VD6G_Start+0x10>
  VD6G_notice(ctx, "Streaming is on\n");
340095be:	4628      	mov	r0, r5
340095c0:	490b      	ldr	r1, [pc, #44]	@ (340095f0 <VD6G_Start+0x284>)
340095c2:	f7ff fa7a 	bl	34008aba <VD6G_notice>
  drv_ctx->is_streaming = 1;
340095c6:	2301      	movs	r3, #1
340095c8:	62eb      	str	r3, [r5, #44]	@ 0x2c
  return 0;
340095ca:	e6d7      	b.n	3400937c <VD6G_Start+0x10>
340095cc:	3402a562 	.word	0x3402a562
340095d0:	34023f6f 	.word	0x34023f6f
340095d4:	3402a414 	.word	0x3402a414
340095d8:	3402a553 	.word	0x3402a553
340095dc:	3402a40e 	.word	0x3402a40e
340095e0:	3402a400 	.word	0x3402a400
340095e4:	3402a510 	.word	0x3402a510
340095e8:	3402a521 	.word	0x3402a521
340095ec:	3402a4ec 	.word	0x3402a4ec
340095f0:	340241f7 	.word	0x340241f7

340095f4 <VD6G_Stop>:

int VD6G_Stop(VD6G_Ctx_t *ctx)
{
340095f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ctx->write8(ctx, VD6G_REG_STREAMING, VD6G_CMD_STOP_STREAM);
340095f6:	6903      	ldr	r3, [r0, #16]
340095f8:	2201      	movs	r2, #1
340095fa:	f240 2102 	movw	r1, #514	@ 0x202
{
340095fe:	4605      	mov	r5, r0
  ret = ctx->write8(ctx, VD6G_REG_STREAMING, VD6G_CMD_STOP_STREAM);
34009600:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009602:	4604      	mov	r4, r0
34009604:	b998      	cbnz	r0, 3400962e <VD6G_Stop+0x3a>
  ret = VD6G_PollReg8(ctx, VD6G_REG_STREAMING, VD6G_CMD_ACK);
34009606:	4602      	mov	r2, r0
34009608:	f240 2102 	movw	r1, #514	@ 0x202
3400960c:	4628      	mov	r0, r5
3400960e:	f7ff fa83 	bl	34008b18 <VD6G_PollReg8>
  if (ret)
34009612:	4604      	mov	r4, r0
34009614:	b9b0      	cbnz	r0, 34009644 <VD6G_Stop+0x50>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
34009616:	2102      	movs	r1, #2
34009618:	4628      	mov	r0, r5
3400961a:	f7ff fb6b 	bl	34008cf4 <VD6G_WaitState>
  if (ret)
3400961e:	4604      	mov	r4, r0
34009620:	b980      	cbnz	r0, 34009644 <VD6G_Stop+0x50>
  VD6G_notice(ctx, "Streaming is off\n");
34009622:	4628      	mov	r0, r5
34009624:	4909      	ldr	r1, [pc, #36]	@ (3400964c <VD6G_Stop+0x58>)
34009626:	f7ff fa48 	bl	34008aba <VD6G_notice>
  int ret;

  ret = VD6G_StopStreaming(ctx);
  if (ret)
    return ret;
  drv_ctx->is_streaming = 0;
3400962a:	62ec      	str	r4, [r5, #44]	@ 0x2c

  return 0;
3400962c:	e00a      	b.n	34009644 <VD6G_Stop+0x50>
  VD6G_TraceError(ctx, ret);
3400962e:	9000      	str	r0, [sp, #0]
34009630:	f240 4304 	movw	r3, #1028	@ 0x404
34009634:	4628      	mov	r0, r5
34009636:	4a06      	ldr	r2, [pc, #24]	@ (34009650 <VD6G_Stop+0x5c>)
34009638:	4906      	ldr	r1, [pc, #24]	@ (34009654 <VD6G_Stop+0x60>)
3400963a:	f7ff fa30 	bl	34008a9e <VD6G_error>
3400963e:	4628      	mov	r0, r5
34009640:	f7ff fa4a 	bl	34008ad8 <display_error>
}
34009644:	4620      	mov	r0, r4
34009646:	b003      	add	sp, #12
34009648:	bd30      	pop	{r4, r5, pc}
3400964a:	bf00      	nop
3400964c:	34024083 	.word	0x34024083
34009650:	3402a4d9 	.word	0x3402a4d9
34009654:	34023f6f 	.word	0x34023f6f

34009658 <VD6G_SetExposureMode>:

  return 0;
}

int VD6G_SetExposureMode(VD6G_Ctx_t *ctx, VD6G_ExposureMode_t mode)
{
34009658:	b538      	push	{r3, r4, r5, lr}
3400965a:	4604      	mov	r4, r0
3400965c:	460d      	mov	r5, r1
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;
  int ret;

  ret = VD6G_SetExposureModeInternal(ctx, mode);
3400965e:	f7ff fa8b 	bl	34008b78 <VD6G_SetExposureModeInternal>
  if (ret)
34009662:	b908      	cbnz	r0, 34009668 <VD6G_SetExposureMode+0x10>
    return ret;

  drv_ctx->config_save.exposure_mode = mode;
34009664:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64

  return 0;
}
34009668:	bd38      	pop	{r3, r4, r5, pc}
	...

3400966c <VD6G_GetAnalogGainRegRange>:

int VD6G_GetAnalogGainRegRange(VD6G_Ctx_t *ctx, uint8_t *AGmin, uint8_t *AGmax)
{
3400966c:	b5f0      	push	{r4, r5, r6, r7, lr}
3400966e:	4605      	mov	r5, r0
34009670:	4616      	mov	r6, r2
  int ret;
  uint8_t value;

  if ((AGmin == NULL) || (AGmax == NULL))
34009672:	460f      	mov	r7, r1
{
34009674:	b085      	sub	sp, #20
  if ((AGmin == NULL) || (AGmax == NULL))
34009676:	b371      	cbz	r1, 340096d6 <VD6G_GetAnalogGainRegRange+0x6a>
34009678:	b36a      	cbz	r2, 340096d6 <VD6G_GetAnalogGainRegRange+0x6a>
    return -1;

  ret = ctx->read8(ctx, VD6G_REG_MIN_AG_CODED, &value);
3400967a:	f640 117e 	movw	r1, #2430	@ 0x97e
3400967e:	6843      	ldr	r3, [r0, #4]
34009680:	f10d 020f 	add.w	r2, sp, #15
34009684:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009686:	4604      	mov	r4, r0
34009688:	b988      	cbnz	r0, 340096ae <VD6G_GetAnalogGainRegRange+0x42>
  *AGmin = value & VD6G_REG_MIN_AG_CODED_MASK;
3400968a:	f89d 300f 	ldrb.w	r3, [sp, #15]

  ret = ctx->read8(ctx, VD6G_REG_MAX_AG_CODED, &value);
3400968e:	f44f 6116 	mov.w	r1, #2400	@ 0x960
  *AGmin = value & VD6G_REG_MIN_AG_CODED_MASK;
34009692:	f003 031f 	and.w	r3, r3, #31
34009696:	703b      	strb	r3, [r7, #0]
  ret = ctx->read8(ctx, VD6G_REG_MAX_AG_CODED, &value);
34009698:	4628      	mov	r0, r5
3400969a:	686b      	ldr	r3, [r5, #4]
3400969c:	f10d 020f 	add.w	r2, sp, #15
340096a0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340096a2:	4604      	mov	r4, r0
340096a4:	b178      	cbz	r0, 340096c6 <VD6G_GetAnalogGainRegRange+0x5a>
340096a6:	f240 43cc 	movw	r3, #1228	@ 0x4cc
340096aa:	9000      	str	r0, [sp, #0]
340096ac:	e002      	b.n	340096b4 <VD6G_GetAnalogGainRegRange+0x48>
  VD6G_TraceError(ctx, ret);
340096ae:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
340096b2:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
340096b4:	4628      	mov	r0, r5
340096b6:	4a09      	ldr	r2, [pc, #36]	@ (340096dc <VD6G_GetAnalogGainRegRange+0x70>)
340096b8:	4909      	ldr	r1, [pc, #36]	@ (340096e0 <VD6G_GetAnalogGainRegRange+0x74>)
340096ba:	f7ff f9f0 	bl	34008a9e <VD6G_error>
340096be:	4628      	mov	r0, r5
340096c0:	f7ff fa0a 	bl	34008ad8 <display_error>
340096c4:	e004      	b.n	340096d0 <VD6G_GetAnalogGainRegRange+0x64>
  *AGmax = value & VD6G_REG_MAX_AG_CODED_MASK;
340096c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
340096ca:	f003 031f 	and.w	r3, r3, #31
340096ce:	7033      	strb	r3, [r6, #0]

  return 0;
}
340096d0:	4620      	mov	r0, r4
340096d2:	b005      	add	sp, #20
340096d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return -1;
340096d6:	f04f 34ff 	mov.w	r4, #4294967295
340096da:	e7f9      	b.n	340096d0 <VD6G_GetAnalogGainRegRange+0x64>
340096dc:	3402a4be 	.word	0x3402a4be
340096e0:	34023f6f 	.word	0x34023f6f

340096e4 <VD6G_SetAnalogGain>:

int VD6G_SetAnalogGain(VD6G_Ctx_t *ctx, int gain)
{
340096e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
340096e6:	460e      	mov	r6, r1
  int ret;
  uint8_t again_regmin, again_regmax;

  ret = VD6G_GetAnalogGainRegRange(ctx, &again_regmin, &again_regmax);
340096e8:	f10d 020f 	add.w	r2, sp, #15
340096ec:	f10d 010e 	add.w	r1, sp, #14
{
340096f0:	4605      	mov	r5, r0
  ret = VD6G_GetAnalogGainRegRange(ctx, &again_regmin, &again_regmax);
340096f2:	f7ff ffbb 	bl	3400966c <VD6G_GetAnalogGainRegRange>
  if (ret)
340096f6:	4604      	mov	r4, r0
340096f8:	b9d0      	cbnz	r0, 34009730 <VD6G_SetAnalogGain+0x4c>
    return ret;

  ret = CHECK_RANGE(gain, again_regmin, again_regmax);
340096fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
340096fe:	42b3      	cmp	r3, r6
34009700:	dc19      	bgt.n	34009736 <VD6G_SetAnalogGain+0x52>
34009702:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009706:	42b3      	cmp	r3, r6
34009708:	db15      	blt.n	34009736 <VD6G_SetAnalogGain+0x52>
  if (ret)
    return ret;

  ret = ctx->write8(ctx, VD6G_REG_MANUAL_ANALOG_GAIN, gain);
3400970a:	f240 414d 	movw	r1, #1101	@ 0x44d
3400970e:	4628      	mov	r0, r5
34009710:	692b      	ldr	r3, [r5, #16]
34009712:	b2f2      	uxtb	r2, r6
34009714:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009716:	4604      	mov	r4, r0
34009718:	b150      	cbz	r0, 34009730 <VD6G_SetAnalogGain+0x4c>
3400971a:	9000      	str	r0, [sp, #0]
3400971c:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
34009720:	4628      	mov	r0, r5
34009722:	4a06      	ldr	r2, [pc, #24]	@ (3400973c <VD6G_SetAnalogGain+0x58>)
34009724:	4906      	ldr	r1, [pc, #24]	@ (34009740 <VD6G_SetAnalogGain+0x5c>)
34009726:	f7ff f9ba 	bl	34008a9e <VD6G_error>
3400972a:	4628      	mov	r0, r5
3400972c:	f7ff f9d4 	bl	34008ad8 <display_error>

  return 0;
}
34009730:	4620      	mov	r0, r4
34009732:	b004      	add	sp, #16
34009734:	bd70      	pop	{r4, r5, r6, pc}
    return ret;
34009736:	f04f 34ff 	mov.w	r4, #4294967295
3400973a:	e7f9      	b.n	34009730 <VD6G_SetAnalogGain+0x4c>
3400973c:	3402a4ab 	.word	0x3402a4ab
34009740:	34023f6f 	.word	0x34023f6f

34009744 <VD6G_GetDigitalGainRegRange>:

int VD6G_GetDigitalGainRegRange(VD6G_Ctx_t *ctx, uint16_t *DGmin, uint16_t *DGmax)
{
34009744:	b573      	push	{r0, r1, r4, r5, r6, lr}
34009746:	4616      	mov	r6, r2
34009748:	4605      	mov	r5, r0
  int ret;

  if ((DGmin == NULL) && (DGmax == NULL))
3400974a:	460a      	mov	r2, r1
3400974c:	b901      	cbnz	r1, 34009750 <VD6G_GetDigitalGainRegRange+0xc>
3400974e:	b306      	cbz	r6, 34009792 <VD6G_GetDigitalGainRegRange+0x4e>
    return -1;

  ret = ctx->read16(ctx, VD6G_REG_MIN_DG, DGmin);
34009750:	f640 117c 	movw	r1, #2428	@ 0x97c
34009754:	4628      	mov	r0, r5
34009756:	68ab      	ldr	r3, [r5, #8]
34009758:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400975a:	4604      	mov	r4, r0
3400975c:	b958      	cbnz	r0, 34009776 <VD6G_GetDigitalGainRegRange+0x32>

  ret = ctx->read16(ctx, VD6G_REG_MAX_DG, DGmax);
3400975e:	4632      	mov	r2, r6
34009760:	f640 115e 	movw	r1, #2398	@ 0x95e
34009764:	4628      	mov	r0, r5
34009766:	68ab      	ldr	r3, [r5, #8]
34009768:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400976a:	4604      	mov	r4, r0
3400976c:	b170      	cbz	r0, 3400978c <VD6G_GetDigitalGainRegRange+0x48>
3400976e:	f44f 639e 	mov.w	r3, #1264	@ 0x4f0
34009772:	9000      	str	r0, [sp, #0]
34009774:	e002      	b.n	3400977c <VD6G_GetDigitalGainRegRange+0x38>
  VD6G_TraceError(ctx, ret);
34009776:	f240 43ed 	movw	r3, #1261	@ 0x4ed
3400977a:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
3400977c:	4628      	mov	r0, r5
3400977e:	4a06      	ldr	r2, [pc, #24]	@ (34009798 <VD6G_GetDigitalGainRegRange+0x54>)
34009780:	4906      	ldr	r1, [pc, #24]	@ (3400979c <VD6G_GetDigitalGainRegRange+0x58>)
34009782:	f7ff f98c 	bl	34008a9e <VD6G_error>
34009786:	4628      	mov	r0, r5
34009788:	f7ff f9a6 	bl	34008ad8 <display_error>

  return 0;
}
3400978c:	4620      	mov	r0, r4
3400978e:	b002      	add	sp, #8
34009790:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
34009792:	f04f 34ff 	mov.w	r4, #4294967295
34009796:	e7f9      	b.n	3400978c <VD6G_GetDigitalGainRegRange+0x48>
34009798:	3402a48f 	.word	0x3402a48f
3400979c:	34023f6f 	.word	0x34023f6f

340097a0 <VD6G_SetDigitalGain>:

int VD6G_SetDigitalGain(VD6G_Ctx_t *ctx, int gain)
{
340097a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
340097a2:	460e      	mov	r6, r1
  int ret;
  uint16_t dgain_regmin, dgain_regmax;

  ret = VD6G_GetDigitalGainRegRange(ctx, &dgain_regmin, &dgain_regmax);
340097a4:	f10d 020e 	add.w	r2, sp, #14
340097a8:	a903      	add	r1, sp, #12
{
340097aa:	4605      	mov	r5, r0
  ret = VD6G_GetDigitalGainRegRange(ctx, &dgain_regmin, &dgain_regmax);
340097ac:	f7ff ffca 	bl	34009744 <VD6G_GetDigitalGainRegRange>
  if (ret)
340097b0:	4604      	mov	r4, r0
340097b2:	bb38      	cbnz	r0, 34009804 <VD6G_SetDigitalGain+0x64>
    return ret;

  ret = CHECK_RANGE(gain, dgain_regmin, dgain_regmax);
340097b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340097b8:	42b3      	cmp	r3, r6
340097ba:	dc3f      	bgt.n	3400983c <VD6G_SetDigitalGain+0x9c>
340097bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
340097c0:	42b3      	cmp	r3, r6
340097c2:	db3b      	blt.n	3400983c <VD6G_SetDigitalGain+0x9c>
  if (ret)
    return ret;

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH0_DIGITAL_GAIN, gain);
340097c4:	b2b6      	uxth	r6, r6
340097c6:	4632      	mov	r2, r6
340097c8:	f44f 618a 	mov.w	r1, #1104	@ 0x450
340097cc:	4628      	mov	r0, r5
340097ce:	696b      	ldr	r3, [r5, #20]
340097d0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340097d2:	4604      	mov	r4, r0
340097d4:	b958      	cbnz	r0, 340097ee <VD6G_SetDigitalGain+0x4e>

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH1_DIGITAL_GAIN, gain);
340097d6:	4632      	mov	r2, r6
340097d8:	f240 4152 	movw	r1, #1106	@ 0x452
340097dc:	4628      	mov	r0, r5
340097de:	696b      	ldr	r3, [r5, #20]
340097e0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340097e2:	4604      	mov	r4, r0
340097e4:	b188      	cbz	r0, 3400980a <VD6G_SetDigitalGain+0x6a>
340097e6:	f240 5306 	movw	r3, #1286	@ 0x506
340097ea:	9000      	str	r0, [sp, #0]
340097ec:	e002      	b.n	340097f4 <VD6G_SetDigitalGain+0x54>
  VD6G_TraceError(ctx, ret);
340097ee:	f240 5303 	movw	r3, #1283	@ 0x503
340097f2:	9000      	str	r0, [sp, #0]

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH2_DIGITAL_GAIN, gain);
  VD6G_TraceError(ctx, ret);

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH3_DIGITAL_GAIN, gain);
  VD6G_TraceError(ctx, ret);
340097f4:	4628      	mov	r0, r5
340097f6:	4a13      	ldr	r2, [pc, #76]	@ (34009844 <VD6G_SetDigitalGain+0xa4>)
340097f8:	4913      	ldr	r1, [pc, #76]	@ (34009848 <VD6G_SetDigitalGain+0xa8>)
340097fa:	f7ff f950 	bl	34008a9e <VD6G_error>
340097fe:	4628      	mov	r0, r5
34009800:	f7ff f96a 	bl	34008ad8 <display_error>

  return 0;
}
34009804:	4620      	mov	r0, r4
34009806:	b004      	add	sp, #16
34009808:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH2_DIGITAL_GAIN, gain);
3400980a:	4632      	mov	r2, r6
3400980c:	f240 4154 	movw	r1, #1108	@ 0x454
34009810:	4628      	mov	r0, r5
34009812:	696b      	ldr	r3, [r5, #20]
34009814:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009816:	4604      	mov	r4, r0
34009818:	b118      	cbz	r0, 34009822 <VD6G_SetDigitalGain+0x82>
3400981a:	f240 5309 	movw	r3, #1289	@ 0x509
3400981e:	9000      	str	r0, [sp, #0]
34009820:	e7e8      	b.n	340097f4 <VD6G_SetDigitalGain+0x54>
  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH3_DIGITAL_GAIN, gain);
34009822:	4632      	mov	r2, r6
34009824:	f240 4156 	movw	r1, #1110	@ 0x456
34009828:	4628      	mov	r0, r5
3400982a:	696b      	ldr	r3, [r5, #20]
3400982c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400982e:	4604      	mov	r4, r0
34009830:	2800      	cmp	r0, #0
34009832:	d0e7      	beq.n	34009804 <VD6G_SetDigitalGain+0x64>
34009834:	f240 530c 	movw	r3, #1292	@ 0x50c
34009838:	9000      	str	r0, [sp, #0]
3400983a:	e7db      	b.n	340097f4 <VD6G_SetDigitalGain+0x54>
    return ret;
3400983c:	f04f 34ff 	mov.w	r4, #4294967295
34009840:	e7e0      	b.n	34009804 <VD6G_SetDigitalGain+0x64>
34009842:	bf00      	nop
34009844:	3402a47b 	.word	0x3402a47b
34009848:	34023f6f 	.word	0x34023f6f

3400984c <VD6G_GetExposureRegRange>:

int VD6G_GetExposureRegRange(VD6G_Ctx_t *ctx, uint32_t *min_us, uint32_t *max_us)
{
3400984c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34009850:	4605      	mov	r5, r0
34009852:	4616      	mov	r6, r2
  uint16_t exp_coarse_intg_margin;
  uint32_t line_time_in_us;
  uint16_t frame_length;
  int ret;

  if ((min_us == NULL) || (max_us == NULL))
34009854:	460f      	mov	r7, r1
34009856:	b929      	cbnz	r1, 34009864 <VD6G_GetExposureRegRange+0x18>
    return -1;
34009858:	f04f 34ff 	mov.w	r4, #4294967295
    *max_us = (frame_length - exp_coarse_intg_margin - VD6G_MAX_MANUAL_EXP_COARSE_OFFSET) * line_time_in_us;
  else
    return -1;

  return 0;
}
3400985c:	4620      	mov	r0, r4
3400985e:	b004      	add	sp, #16
34009860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((min_us == NULL) || (max_us == NULL))
34009864:	2a00      	cmp	r2, #0
34009866:	d0f7      	beq.n	34009858 <VD6G_GetExposureRegRange+0xc>
  ret = VD6G_GetLineTimeInUs(ctx, &line_time_in_us);
34009868:	a903      	add	r1, sp, #12
3400986a:	f7ff f9c9 	bl	34008c00 <VD6G_GetLineTimeInUs>
  if (ret)
3400986e:	4604      	mov	r4, r0
34009870:	2800      	cmp	r0, #0
34009872:	d1f3      	bne.n	3400985c <VD6G_GetExposureRegRange+0x10>
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
34009874:	2315      	movs	r3, #21
34009876:	f8dd 800c 	ldr.w	r8, [sp, #12]
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400987a:	f44f 618b 	mov.w	r1, #1112	@ 0x458
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400987e:	fb03 f308 	mul.w	r3, r3, r8
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
34009882:	4628      	mov	r0, r5
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
34009884:	603b      	str	r3, [r7, #0]
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
34009886:	f10d 020a 	add.w	r2, sp, #10
3400988a:	68ab      	ldr	r3, [r5, #8]
3400988c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400988e:	4604      	mov	r4, r0
34009890:	b958      	cbnz	r0, 340098aa <VD6G_GetExposureRegRange+0x5e>
  ret = ctx->read16(ctx, VD6G_REG_EXP_COARSE_INTG_MARGIN, &exp_coarse_intg_margin);
34009892:	f640 1146 	movw	r1, #2374	@ 0x946
34009896:	4628      	mov	r0, r5
34009898:	68ab      	ldr	r3, [r5, #8]
3400989a:	aa02      	add	r2, sp, #8
3400989c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400989e:	4604      	mov	r4, r0
340098a0:	b178      	cbz	r0, 340098c2 <VD6G_GetExposureRegRange+0x76>
340098a2:	f240 5325 	movw	r3, #1317	@ 0x525
340098a6:	9000      	str	r0, [sp, #0]
340098a8:	e002      	b.n	340098b0 <VD6G_GetExposureRegRange+0x64>
  VD6G_TraceError(ctx, ret);
340098aa:	f240 5322 	movw	r3, #1314	@ 0x522
340098ae:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
340098b0:	4628      	mov	r0, r5
340098b2:	4a0a      	ldr	r2, [pc, #40]	@ (340098dc <VD6G_GetExposureRegRange+0x90>)
340098b4:	490a      	ldr	r1, [pc, #40]	@ (340098e0 <VD6G_GetExposureRegRange+0x94>)
340098b6:	f7ff f8f2 	bl	34008a9e <VD6G_error>
340098ba:	4628      	mov	r0, r5
340098bc:	f7ff f90c 	bl	34008ad8 <display_error>
340098c0:	e7cc      	b.n	3400985c <VD6G_GetExposureRegRange+0x10>
  if (exp_coarse_intg_margin >= VD6G_MIN_EXP_COARSE_INTG_MARGIN)
340098c2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
340098c6:	2a43      	cmp	r2, #67	@ 0x43
340098c8:	d9c6      	bls.n	34009858 <VD6G_GetExposureRegRange+0xc>
    *max_us = (frame_length - exp_coarse_intg_margin - VD6G_MAX_MANUAL_EXP_COARSE_OFFSET) * line_time_in_us;
340098ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
340098ce:	1a9b      	subs	r3, r3, r2
340098d0:	3b07      	subs	r3, #7
340098d2:	fb08 f303 	mul.w	r3, r8, r3
340098d6:	6033      	str	r3, [r6, #0]
  return 0;
340098d8:	e7c0      	b.n	3400985c <VD6G_GetExposureRegRange+0x10>
340098da:	bf00      	nop
340098dc:	3402a462 	.word	0x3402a462
340098e0:	34023f6f 	.word	0x34023f6f

340098e4 <VD6G_SetExposureTime>:

int VD6G_SetExposureTime(VD6G_Ctx_t *ctx, int exposure_us)
{
340098e4:	b570      	push	{r4, r5, r6, lr}
340098e6:	b086      	sub	sp, #24
340098e8:	460e      	mov	r6, r1
  int32_t ret;
  uint32_t exp_min, exp_max;
  uint32_t line_time_in_us;

  ret = VD6G_GetExposureRegRange(ctx, &exp_min, &exp_max);
340098ea:	aa04      	add	r2, sp, #16
340098ec:	a903      	add	r1, sp, #12
{
340098ee:	4605      	mov	r5, r0
  ret = VD6G_GetExposureRegRange(ctx, &exp_min, &exp_max);
340098f0:	f7ff ffac 	bl	3400984c <VD6G_GetExposureRegRange>
  if (ret)
340098f4:	4604      	mov	r4, r0
340098f6:	bb08      	cbnz	r0, 3400993c <VD6G_SetExposureTime+0x58>
    return ret;

  ret = CHECK_RANGE(exposure_us, exp_min, exp_max);
340098f8:	9b03      	ldr	r3, [sp, #12]
340098fa:	429e      	cmp	r6, r3
340098fc:	d321      	bcc.n	34009942 <VD6G_SetExposureTime+0x5e>
340098fe:	9b04      	ldr	r3, [sp, #16]
34009900:	429e      	cmp	r6, r3
34009902:	d81e      	bhi.n	34009942 <VD6G_SetExposureTime+0x5e>
  if (ret)
    return ret;

  ret = VD6G_GetLineTimeInUs(ctx, &line_time_in_us);
34009904:	4628      	mov	r0, r5
34009906:	a905      	add	r1, sp, #20
34009908:	f7ff f97a 	bl	34008c00 <VD6G_GetLineTimeInUs>
  if (ret)
3400990c:	4604      	mov	r4, r0
3400990e:	b9a8      	cbnz	r0, 3400993c <VD6G_SetExposureTime+0x58>
    return ret;

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_COARSE_EXP, CEIL(exposure_us / line_time_in_us));
34009910:	9b05      	ldr	r3, [sp, #20]
34009912:	f240 414e 	movw	r1, #1102	@ 0x44e
34009916:	fbb6 f2f3 	udiv	r2, r6, r3
3400991a:	4628      	mov	r0, r5
3400991c:	696b      	ldr	r3, [r5, #20]
3400991e:	b292      	uxth	r2, r2
34009920:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009922:	4604      	mov	r4, r0
34009924:	b150      	cbz	r0, 3400993c <VD6G_SetExposureTime+0x58>
34009926:	9000      	str	r0, [sp, #0]
34009928:	f240 5342 	movw	r3, #1346	@ 0x542
3400992c:	4628      	mov	r0, r5
3400992e:	4a06      	ldr	r2, [pc, #24]	@ (34009948 <VD6G_SetExposureTime+0x64>)
34009930:	4906      	ldr	r1, [pc, #24]	@ (3400994c <VD6G_SetExposureTime+0x68>)
34009932:	f7ff f8b4 	bl	34008a9e <VD6G_error>
34009936:	4628      	mov	r0, r5
34009938:	f7ff f8ce 	bl	34008ad8 <display_error>

  return 0;
}
3400993c:	4620      	mov	r0, r4
3400993e:	b006      	add	sp, #24
34009940:	bd70      	pop	{r4, r5, r6, pc}
    return ret;
34009942:	f04f 34ff 	mov.w	r4, #4294967295
34009946:	e7f9      	b.n	3400993c <VD6G_SetExposureTime+0x58>
34009948:	3402a438 	.word	0x3402a438
3400994c:	34023f6f 	.word	0x34023f6f

34009950 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
34009950:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
34009954:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
34009958:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400995c:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400995e:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
34009960:	2300      	movs	r3, #0
34009962:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
34009964:	4770      	bx	lr

34009966 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
34009966:	2300      	movs	r3, #0
34009968:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
3400996a:	4770      	bx	lr

3400996c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
3400996c:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
3400996e:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
34009970:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
34009972:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
34009974:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
34009976:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
34009978:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
3400997a:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
3400997c:	3301      	adds	r3, #1
3400997e:	6003      	str	r3, [r0, #0]
}
34009980:	4770      	bx	lr

34009982 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
34009982:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
34009984:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
34009986:	1c63      	adds	r3, r4, #1
34009988:	d10a      	bne.n	340099a0 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
3400998a:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
3400998c:	685a      	ldr	r2, [r3, #4]
3400998e:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
34009990:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
34009992:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
34009994:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
34009996:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
34009998:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
3400999a:	3301      	adds	r3, #1
3400999c:	6003      	str	r3, [r0, #0]
}
3400999e:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
340099a0:	f100 0208 	add.w	r2, r0, #8
340099a4:	4613      	mov	r3, r2
340099a6:	6852      	ldr	r2, [r2, #4]
340099a8:	6815      	ldr	r5, [r2, #0]
340099aa:	42a5      	cmp	r5, r4
340099ac:	d9fa      	bls.n	340099a4 <vListInsert+0x22>
340099ae:	e7ed      	b.n	3400998c <vListInsert+0xa>

340099b0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
340099b0:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
340099b2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
340099b6:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
340099b8:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
340099ba:	6859      	ldr	r1, [r3, #4]
340099bc:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
340099be:	bf08      	it	eq
340099c0:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
340099c2:	2200      	movs	r2, #0
340099c4:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
340099c6:	681a      	ldr	r2, [r3, #0]
340099c8:	3a01      	subs	r2, #1
340099ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
340099cc:	6818      	ldr	r0, [r3, #0]
}
340099ce:	4770      	bx	lr

340099d0 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
340099d0:	b510      	push	{r4, lr}
340099d2:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
340099d4:	f001 fbf6 	bl	3400b1c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
340099d8:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
340099da:	f001 fc01 	bl	3400b1e0 <vPortExitCritical>

    return xReturn;
}
340099de:	fab4 f084 	clz	r0, r4
340099e2:	0940      	lsrs	r0, r0, #5
340099e4:	bd10      	pop	{r4, pc}

340099e6 <prvCopyDataToQueue>:
{
340099e6:	b570      	push	{r4, r5, r6, lr}
340099e8:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
340099ea:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
340099ec:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
340099ee:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
340099f0:	b942      	cbnz	r2, 34009a04 <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
340099f2:	6806      	ldr	r6, [r0, #0]
340099f4:	b99e      	cbnz	r6, 34009a1e <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
340099f6:	6880      	ldr	r0, [r0, #8]
340099f8:	f001 f95c 	bl	3400acb4 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
340099fc:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
340099fe:	3501      	adds	r5, #1
34009a00:	63a5      	str	r5, [r4, #56]	@ 0x38
}
34009a02:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
34009a04:	b96e      	cbnz	r6, 34009a22 <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
34009a06:	6840      	ldr	r0, [r0, #4]
34009a08:	f015 fac1 	bl	3401ef8e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
34009a0c:	6863      	ldr	r3, [r4, #4]
34009a0e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
34009a10:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
34009a12:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
34009a14:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
34009a16:	4293      	cmp	r3, r2
            pxQueue->pcWriteTo = pxQueue->pcHead;
34009a18:	bf24      	itt	cs
34009a1a:	6823      	ldrcs	r3, [r4, #0]
34009a1c:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
34009a1e:	2000      	movs	r0, #0
34009a20:	e7ed      	b.n	340099fe <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
34009a22:	68c0      	ldr	r0, [r0, #12]
34009a24:	f015 fab3 	bl	3401ef8e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
34009a28:	6c22      	ldr	r2, [r4, #64]	@ 0x40
34009a2a:	68e3      	ldr	r3, [r4, #12]
34009a2c:	4251      	negs	r1, r2
34009a2e:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
34009a30:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
34009a32:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
34009a34:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
34009a36:	bf3e      	ittt	cc
34009a38:	68a3      	ldrcc	r3, [r4, #8]
34009a3a:	185b      	addcc	r3, r3, r1
34009a3c:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
34009a3e:	2e02      	cmp	r6, #2
34009a40:	d1ed      	bne.n	34009a1e <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
34009a42:	4628      	mov	r0, r5
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
34009a44:	2d00      	cmp	r5, #0
34009a46:	d0da      	beq.n	340099fe <prvCopyDataToQueue+0x18>
                --uxMessagesWaiting;
34009a48:	3d01      	subs	r5, #1
34009a4a:	e7e8      	b.n	34009a1e <prvCopyDataToQueue+0x38>

34009a4c <prvCopyDataFromQueue>:
{
34009a4c:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
34009a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
34009a50:	4608      	mov	r0, r1
34009a52:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
34009a54:	b16a      	cbz	r2, 34009a72 <prvCopyDataFromQueue+0x26>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
34009a56:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
34009a58:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
34009a5a:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
34009a5c:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
34009a5e:	bf28      	it	cs
34009a60:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
34009a62:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
34009a64:	bf28      	it	cs
34009a66:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
34009a68:	68d9      	ldr	r1, [r3, #12]
}
34009a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
34009a6e:	f015 ba8e 	b.w	3401ef8e <memcpy>
}
34009a72:	f85d 4b04 	ldr.w	r4, [sp], #4
34009a76:	4770      	bx	lr

34009a78 <prvUnlockQueue>:
{
34009a78:	b570      	push	{r4, r5, r6, lr}
34009a7a:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
34009a7c:	f001 fba2 	bl	3400b1c4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
34009a80:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
34009a84:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
34009a88:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
34009a8a:	2d00      	cmp	r5, #0
34009a8c:	dd01      	ble.n	34009a92 <prvUnlockQueue+0x1a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
34009a8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34009a90:	b9b3      	cbnz	r3, 34009ac0 <prvUnlockQueue+0x48>
        pxQueue->cTxLock = queueUNLOCKED;
34009a92:	23ff      	movs	r3, #255	@ 0xff
34009a94:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
34009a98:	f001 fba2 	bl	3400b1e0 <vPortExitCritical>
    taskENTER_CRITICAL();
34009a9c:	f001 fb92 	bl	3400b1c4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
34009aa0:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
34009aa4:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
34009aa8:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
34009aaa:	2d00      	cmp	r5, #0
34009aac:	dd01      	ble.n	34009ab2 <prvUnlockQueue+0x3a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
34009aae:	6923      	ldr	r3, [r4, #16]
34009ab0:	b97b      	cbnz	r3, 34009ad2 <prvUnlockQueue+0x5a>
        pxQueue->cRxLock = queueUNLOCKED;
34009ab2:	23ff      	movs	r3, #255	@ 0xff
34009ab4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
34009ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
34009abc:	f001 bb90 	b.w	3400b1e0 <vPortExitCritical>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
34009ac0:	4630      	mov	r0, r6
34009ac2:	f000 ffe5 	bl	3400aa90 <xTaskRemoveFromEventList>
34009ac6:	b108      	cbz	r0, 34009acc <prvUnlockQueue+0x54>
                        vTaskMissedYield();
34009ac8:	f001 f898 	bl	3400abfc <vTaskMissedYield>
            --cTxLock;
34009acc:	3d01      	subs	r5, #1
34009ace:	b26d      	sxtb	r5, r5
34009ad0:	e7db      	b.n	34009a8a <prvUnlockQueue+0x12>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
34009ad2:	4630      	mov	r0, r6
34009ad4:	f000 ffdc 	bl	3400aa90 <xTaskRemoveFromEventList>
34009ad8:	b108      	cbz	r0, 34009ade <prvUnlockQueue+0x66>
                    vTaskMissedYield();
34009ada:	f001 f88f 	bl	3400abfc <vTaskMissedYield>
                --cRxLock;
34009ade:	3d01      	subs	r5, #1
34009ae0:	b26d      	sxtb	r5, r5
34009ae2:	e7e2      	b.n	34009aaa <prvUnlockQueue+0x32>

34009ae4 <xQueueGenericReset>:
{
34009ae4:	b570      	push	{r4, r5, r6, lr}
34009ae6:	460e      	mov	r6, r1
    configASSERT( pxQueue );
34009ae8:	4604      	mov	r4, r0
34009aea:	b940      	cbnz	r0, 34009afe <xQueueGenericReset+0x1a>
34009aec:	f001 fcea 	bl	3400b4c4 <ulSetInterruptMask>
34009af0:	f44f 7197 	mov.w	r1, #302	@ 0x12e
34009af4:	4b1d      	ldr	r3, [pc, #116]	@ (34009b6c <xQueueGenericReset+0x88>)
34009af6:	4a1e      	ldr	r2, [pc, #120]	@ (34009b70 <xQueueGenericReset+0x8c>)
    configASSERT( xReturn != pdFAIL );
34009af8:	481e      	ldr	r0, [pc, #120]	@ (34009b74 <xQueueGenericReset+0x90>)
34009afa:	f013 ff77 	bl	3401d9ec <__assert_func>
        ( pxQueue->uxLength >= 1U ) &&
34009afe:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
34009b00:	b365      	cbz	r5, 34009b5c <xQueueGenericReset+0x78>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
34009b02:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34009b04:	fba3 3505 	umull	r3, r5, r3, r5
34009b08:	bb45      	cbnz	r5, 34009b5c <xQueueGenericReset+0x78>
        taskENTER_CRITICAL();
34009b0a:	f001 fb5b 	bl	3400b1c4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
34009b0e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
34009b12:	434b      	muls	r3, r1
34009b14:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
34009b16:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
34009b18:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
34009b1a:	1a5b      	subs	r3, r3, r1
            pxQueue->pcWriteTo = pxQueue->pcHead;
34009b1c:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
34009b1e:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
34009b20:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
34009b22:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
34009b24:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
34009b28:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
34009b2a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
34009b2e:	b966      	cbnz	r6, 34009b4a <xQueueGenericReset+0x66>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
34009b30:	6923      	ldr	r3, [r4, #16]
34009b32:	b133      	cbz	r3, 34009b42 <xQueueGenericReset+0x5e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
34009b34:	f104 0010 	add.w	r0, r4, #16
34009b38:	f000 ffaa 	bl	3400aa90 <xTaskRemoveFromEventList>
34009b3c:	b108      	cbz	r0, 34009b42 <xQueueGenericReset+0x5e>
                        queueYIELD_IF_USING_PREEMPTION();
34009b3e:	f001 fb35 	bl	3400b1ac <vPortYield>
        taskEXIT_CRITICAL();
34009b42:	f001 fb4d 	bl	3400b1e0 <vPortExitCritical>
}
34009b46:	2001      	movs	r0, #1
34009b48:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
34009b4a:	f104 0010 	add.w	r0, r4, #16
34009b4e:	f7ff feff 	bl	34009950 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
34009b52:	f104 0024 	add.w	r0, r4, #36	@ 0x24
34009b56:	f7ff fefb 	bl	34009950 <vListInitialise>
34009b5a:	e7f2      	b.n	34009b42 <xQueueGenericReset+0x5e>
    configASSERT( xReturn != pdFAIL );
34009b5c:	f001 fcb2 	bl	3400b4c4 <ulSetInterruptMask>
34009b60:	f240 1163 	movw	r1, #355	@ 0x163
34009b64:	4b01      	ldr	r3, [pc, #4]	@ (34009b6c <xQueueGenericReset+0x88>)
34009b66:	4a02      	ldr	r2, [pc, #8]	@ (34009b70 <xQueueGenericReset+0x8c>)
34009b68:	e7c6      	b.n	34009af8 <xQueueGenericReset+0x14>
34009b6a:	bf00      	nop
34009b6c:	340235d8 	.word	0x340235d8
34009b70:	3402eacb 	.word	0x3402eacb
34009b74:	34024311 	.word	0x34024311

34009b78 <xQueueGenericCreateStatic>:
    {
34009b78:	b513      	push	{r0, r1, r4, lr}
        configASSERT( pxStaticQueue );
34009b7a:	461c      	mov	r4, r3
34009b7c:	b943      	cbnz	r3, 34009b90 <xQueueGenericCreateStatic+0x18>
34009b7e:	f001 fca1 	bl	3400b4c4 <ulSetInterruptMask>
34009b82:	f240 1177 	movw	r1, #375	@ 0x177
34009b86:	4b17      	ldr	r3, [pc, #92]	@ (34009be4 <xQueueGenericCreateStatic+0x6c>)
34009b88:	4a17      	ldr	r2, [pc, #92]	@ (34009be8 <xQueueGenericCreateStatic+0x70>)
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
34009b8a:	4818      	ldr	r0, [pc, #96]	@ (34009bec <xQueueGenericCreateStatic+0x74>)
34009b8c:	f013 ff2e 	bl	3401d9ec <__assert_func>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
34009b90:	b108      	cbz	r0, 34009b96 <xQueueGenericCreateStatic+0x1e>
            ( pxStaticQueue != NULL ) &&
34009b92:	b13a      	cbz	r2, 34009ba4 <xQueueGenericCreateStatic+0x2c>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
34009b94:	b941      	cbnz	r1, 34009ba8 <xQueueGenericCreateStatic+0x30>
            configASSERT( pxNewQueue );
34009b96:	f001 fc95 	bl	3400b4c4 <ulSetInterruptMask>
34009b9a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34009b9e:	4b11      	ldr	r3, [pc, #68]	@ (34009be4 <xQueueGenericCreateStatic+0x6c>)
34009ba0:	4a11      	ldr	r2, [pc, #68]	@ (34009be8 <xQueueGenericCreateStatic+0x70>)
34009ba2:	e7f2      	b.n	34009b8a <xQueueGenericCreateStatic+0x12>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
34009ba4:	2900      	cmp	r1, #0
34009ba6:	d1f6      	bne.n	34009b96 <xQueueGenericCreateStatic+0x1e>
                volatile size_t xSize = sizeof( StaticQueue_t );
34009ba8:	2350      	movs	r3, #80	@ 0x50
34009baa:	9301      	str	r3, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
34009bac:	9b01      	ldr	r3, [sp, #4]
34009bae:	2b50      	cmp	r3, #80	@ 0x50
34009bb0:	d006      	beq.n	34009bc0 <xQueueGenericCreateStatic+0x48>
34009bb2:	f001 fc87 	bl	3400b4c4 <ulSetInterruptMask>
34009bb6:	f240 1189 	movw	r1, #393	@ 0x189
34009bba:	4b0a      	ldr	r3, [pc, #40]	@ (34009be4 <xQueueGenericCreateStatic+0x6c>)
34009bbc:	4a0a      	ldr	r2, [pc, #40]	@ (34009be8 <xQueueGenericCreateStatic+0x70>)
34009bbe:	e7e4      	b.n	34009b8a <xQueueGenericCreateStatic+0x12>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
34009bc0:	2900      	cmp	r1, #0
34009bc2:	bf08      	it	eq
34009bc4:	4622      	moveq	r2, r4
    pxNewQueue->uxItemSize = uxItemSize;
34009bc6:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
34009bca:	6022      	str	r2, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
34009bcc:	2101      	movs	r1, #1
34009bce:	4620      	mov	r0, r4
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
34009bd0:	9b01      	ldr	r3, [sp, #4]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
34009bd2:	f7ff ff87 	bl	34009ae4 <xQueueGenericReset>
    }
34009bd6:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
34009bd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
34009bdc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    }
34009be0:	b002      	add	sp, #8
34009be2:	bd10      	pop	{r4, pc}
34009be4:	340235d8 	.word	0x340235d8
34009be8:	3402eab1 	.word	0x3402eab1
34009bec:	34024311 	.word	0x34024311

34009bf0 <xQueueCreateCountingSemaphoreStatic>:
    {
34009bf0:	b513      	push	{r0, r1, r4, lr}
34009bf2:	4613      	mov	r3, r2
34009bf4:	460c      	mov	r4, r1
        if( ( uxMaxCount != 0 ) &&
34009bf6:	b158      	cbz	r0, 34009c10 <xQueueCreateCountingSemaphoreStatic+0x20>
34009bf8:	4288      	cmp	r0, r1
34009bfa:	d309      	bcc.n	34009c10 <xQueueCreateCountingSemaphoreStatic+0x20>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
34009bfc:	2202      	movs	r2, #2
34009bfe:	9200      	str	r2, [sp, #0]
34009c00:	2200      	movs	r2, #0
34009c02:	4611      	mov	r1, r2
34009c04:	f7ff ffb8 	bl	34009b78 <xQueueGenericCreateStatic>
            if( xHandle != NULL )
34009c08:	b100      	cbz	r0, 34009c0c <xQueueCreateCountingSemaphoreStatic+0x1c>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
34009c0a:	6384      	str	r4, [r0, #56]	@ 0x38
    }
34009c0c:	b002      	add	sp, #8
34009c0e:	bd10      	pop	{r4, pc}
            configASSERT( xHandle );
34009c10:	f001 fc58 	bl	3400b4c4 <ulSetInterruptMask>
34009c14:	f240 3147 	movw	r1, #839	@ 0x347
34009c18:	4b02      	ldr	r3, [pc, #8]	@ (34009c24 <xQueueCreateCountingSemaphoreStatic+0x34>)
34009c1a:	4a03      	ldr	r2, [pc, #12]	@ (34009c28 <xQueueCreateCountingSemaphoreStatic+0x38>)
34009c1c:	4803      	ldr	r0, [pc, #12]	@ (34009c2c <xQueueCreateCountingSemaphoreStatic+0x3c>)
34009c1e:	f013 fee5 	bl	3401d9ec <__assert_func>
34009c22:	bf00      	nop
34009c24:	340235d8 	.word	0x340235d8
34009c28:	3402ea8d 	.word	0x3402ea8d
34009c2c:	34024311 	.word	0x34024311

34009c30 <xQueueGenericSend>:
{
34009c30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34009c34:	460f      	mov	r7, r1
34009c36:	461e      	mov	r6, r3
    configASSERT( pxQueue );
34009c38:	4604      	mov	r4, r0
{
34009c3a:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
34009c3c:	b940      	cbnz	r0, 34009c50 <xQueueGenericSend+0x20>
34009c3e:	f001 fc41 	bl	3400b4c4 <ulSetInterruptMask>
34009c42:	f240 317d 	movw	r1, #893	@ 0x37d
34009c46:	4b48      	ldr	r3, [pc, #288]	@ (34009d68 <xQueueGenericSend+0x138>)
34009c48:	4a48      	ldr	r2, [pc, #288]	@ (34009d6c <xQueueGenericSend+0x13c>)
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
34009c4a:	4849      	ldr	r0, [pc, #292]	@ (34009d70 <xQueueGenericSend+0x140>)
34009c4c:	f013 fece 	bl	3401d9ec <__assert_func>
34009c50:	b941      	cbnz	r1, 34009c64 <xQueueGenericSend+0x34>
34009c52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34009c54:	b133      	cbz	r3, 34009c64 <xQueueGenericSend+0x34>
34009c56:	f001 fc35 	bl	3400b4c4 <ulSetInterruptMask>
34009c5a:	f240 317e 	movw	r1, #894	@ 0x37e
34009c5e:	4b42      	ldr	r3, [pc, #264]	@ (34009d68 <xQueueGenericSend+0x138>)
34009c60:	4a42      	ldr	r2, [pc, #264]	@ (34009d6c <xQueueGenericSend+0x13c>)
34009c62:	e7f2      	b.n	34009c4a <xQueueGenericSend+0x1a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
34009c64:	2e02      	cmp	r6, #2
34009c66:	d109      	bne.n	34009c7c <xQueueGenericSend+0x4c>
34009c68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34009c6a:	2b01      	cmp	r3, #1
34009c6c:	d006      	beq.n	34009c7c <xQueueGenericSend+0x4c>
34009c6e:	f001 fc29 	bl	3400b4c4 <ulSetInterruptMask>
34009c72:	f240 317f 	movw	r1, #895	@ 0x37f
34009c76:	4b3c      	ldr	r3, [pc, #240]	@ (34009d68 <xQueueGenericSend+0x138>)
34009c78:	4a3c      	ldr	r2, [pc, #240]	@ (34009d6c <xQueueGenericSend+0x13c>)
34009c7a:	e7e6      	b.n	34009c4a <xQueueGenericSend+0x1a>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
34009c7c:	f000 ffc4 	bl	3400ac08 <xTaskGetSchedulerState>
34009c80:	4605      	mov	r5, r0
34009c82:	b1e0      	cbz	r0, 34009cbe <xQueueGenericSend+0x8e>
34009c84:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
34009c86:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
34009c8a:	f001 fa9b 	bl	3400b1c4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
34009c8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
34009c90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34009c92:	429a      	cmp	r2, r3
34009c94:	d21d      	bcs.n	34009cd2 <xQueueGenericSend+0xa2>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
34009c96:	4632      	mov	r2, r6
34009c98:	4639      	mov	r1, r7
34009c9a:	4620      	mov	r0, r4
34009c9c:	f7ff fea3 	bl	340099e6 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
34009ca0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34009ca2:	b11b      	cbz	r3, 34009cac <xQueueGenericSend+0x7c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
34009ca4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
34009ca8:	f000 fef2 	bl	3400aa90 <xTaskRemoveFromEventList>
34009cac:	b108      	cbz	r0, 34009cb2 <xQueueGenericSend+0x82>
                            queueYIELD_IF_USING_PREEMPTION();
34009cae:	f001 fa7d 	bl	3400b1ac <vPortYield>
                taskEXIT_CRITICAL();
34009cb2:	f001 fa95 	bl	3400b1e0 <vPortExitCritical>
                return pdPASS;
34009cb6:	2001      	movs	r0, #1
}
34009cb8:	b004      	add	sp, #16
34009cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
34009cbe:	9b01      	ldr	r3, [sp, #4]
34009cc0:	2b00      	cmp	r3, #0
34009cc2:	d0e0      	beq.n	34009c86 <xQueueGenericSend+0x56>
34009cc4:	f001 fbfe 	bl	3400b4c4 <ulSetInterruptMask>
34009cc8:	f240 3182 	movw	r1, #898	@ 0x382
34009ccc:	4b26      	ldr	r3, [pc, #152]	@ (34009d68 <xQueueGenericSend+0x138>)
34009cce:	4a27      	ldr	r2, [pc, #156]	@ (34009d6c <xQueueGenericSend+0x13c>)
34009cd0:	e7bb      	b.n	34009c4a <xQueueGenericSend+0x1a>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
34009cd2:	2e02      	cmp	r6, #2
34009cd4:	d0df      	beq.n	34009c96 <xQueueGenericSend+0x66>
                if( xTicksToWait == ( TickType_t ) 0 )
34009cd6:	9b01      	ldr	r3, [sp, #4]
34009cd8:	b91b      	cbnz	r3, 34009ce2 <xQueueGenericSend+0xb2>
                    taskEXIT_CRITICAL();
34009cda:	f001 fa81 	bl	3400b1e0 <vPortExitCritical>
                    return errQUEUE_FULL;
34009cde:	2000      	movs	r0, #0
34009ce0:	e7ea      	b.n	34009cb8 <xQueueGenericSend+0x88>
                else if( xEntryTimeSet == pdFALSE )
34009ce2:	b915      	cbnz	r5, 34009cea <xQueueGenericSend+0xba>
                    vTaskInternalSetTimeOutState( &xTimeOut );
34009ce4:	a802      	add	r0, sp, #8
34009ce6:	f000 ff3d 	bl	3400ab64 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
34009cea:	f001 fa79 	bl	3400b1e0 <vPortExitCritical>
        vTaskSuspendAll();
34009cee:	f000 fc93 	bl	3400a618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
34009cf2:	f001 fa67 	bl	3400b1c4 <vPortEnterCritical>
34009cf6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
34009cfa:	2bff      	cmp	r3, #255	@ 0xff
34009cfc:	bf08      	it	eq
34009cfe:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
34009d02:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
34009d06:	2bff      	cmp	r3, #255	@ 0xff
34009d08:	bf08      	it	eq
34009d0a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
34009d0e:	f001 fa67 	bl	3400b1e0 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
34009d12:	a901      	add	r1, sp, #4
34009d14:	a802      	add	r0, sp, #8
34009d16:	f000 ff31 	bl	3400ab7c <xTaskCheckForTimeOut>
34009d1a:	b9f0      	cbnz	r0, 34009d5a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
34009d1c:	f001 fa52 	bl	3400b1c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
34009d20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
34009d22:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34009d24:	429a      	cmp	r2, r3
34009d26:	d10f      	bne.n	34009d48 <xQueueGenericSend+0x118>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
34009d28:	f001 fa5a 	bl	3400b1e0 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
34009d2c:	9901      	ldr	r1, [sp, #4]
34009d2e:	f104 0010 	add.w	r0, r4, #16
34009d32:	f000 fe59 	bl	3400a9e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
34009d36:	4620      	mov	r0, r4
34009d38:	f7ff fe9e 	bl	34009a78 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
34009d3c:	f000 fd3c 	bl	3400a7b8 <xTaskResumeAll>
34009d40:	b948      	cbnz	r0, 34009d56 <xQueueGenericSend+0x126>
                    portYIELD_WITHIN_API();
34009d42:	f001 fa33 	bl	3400b1ac <vPortYield>
34009d46:	e006      	b.n	34009d56 <xQueueGenericSend+0x126>
    taskEXIT_CRITICAL();
34009d48:	f001 fa4a 	bl	3400b1e0 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
34009d4c:	4620      	mov	r0, r4
34009d4e:	f7ff fe93 	bl	34009a78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
34009d52:	f000 fd31 	bl	3400a7b8 <xTaskResumeAll>
34009d56:	2501      	movs	r5, #1
34009d58:	e797      	b.n	34009c8a <xQueueGenericSend+0x5a>
            prvUnlockQueue( pxQueue );
34009d5a:	4620      	mov	r0, r4
34009d5c:	f7ff fe8c 	bl	34009a78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
34009d60:	f000 fd2a 	bl	3400a7b8 <xTaskResumeAll>
            return errQUEUE_FULL;
34009d64:	e7bb      	b.n	34009cde <xQueueGenericSend+0xae>
34009d66:	bf00      	nop
34009d68:	340235d8 	.word	0x340235d8
34009d6c:	3402ea7b 	.word	0x3402ea7b
34009d70:	34024311 	.word	0x34024311

34009d74 <xQueueCreateMutexStatic>:
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
34009d74:	2200      	movs	r2, #0
    {
34009d76:	b513      	push	{r0, r1, r4, lr}
34009d78:	460b      	mov	r3, r1
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
34009d7a:	9000      	str	r0, [sp, #0]
34009d7c:	4611      	mov	r1, r2
34009d7e:	2001      	movs	r0, #1
34009d80:	f7ff fefa 	bl	34009b78 <xQueueGenericCreateStatic>
        if( pxNewQueue != NULL )
34009d84:	4604      	mov	r4, r0
34009d86:	b138      	cbz	r0, 34009d98 <xQueueCreateMutexStatic+0x24>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
34009d88:	2300      	movs	r3, #0
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
34009d8a:	461a      	mov	r2, r3
34009d8c:	4619      	mov	r1, r3
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
34009d8e:	6083      	str	r3, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
34009d90:	6003      	str	r3, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
34009d92:	60c3      	str	r3, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
34009d94:	f7ff ff4c 	bl	34009c30 <xQueueGenericSend>
    }
34009d98:	4620      	mov	r0, r4
34009d9a:	b002      	add	sp, #8
34009d9c:	bd10      	pop	{r4, pc}
	...

34009da0 <xQueueGiveFromISR>:
{
34009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34009da2:	460e      	mov	r6, r1
    configASSERT( pxQueue );
34009da4:	4604      	mov	r4, r0
34009da6:	b940      	cbnz	r0, 34009dba <xQueueGiveFromISR+0x1a>
34009da8:	f001 fb8c 	bl	3400b4c4 <ulSetInterruptMask>
34009dac:	f240 41fa 	movw	r1, #1274	@ 0x4fa
34009db0:	4b26      	ldr	r3, [pc, #152]	@ (34009e4c <xQueueGiveFromISR+0xac>)
34009db2:	4a27      	ldr	r2, [pc, #156]	@ (34009e50 <xQueueGiveFromISR+0xb0>)
    configASSERT( pxQueue->uxItemSize == 0 );
34009db4:	4827      	ldr	r0, [pc, #156]	@ (34009e54 <xQueueGiveFromISR+0xb4>)
34009db6:	f013 fe19 	bl	3401d9ec <__assert_func>
34009dba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34009dbc:	b133      	cbz	r3, 34009dcc <xQueueGiveFromISR+0x2c>
34009dbe:	f001 fb81 	bl	3400b4c4 <ulSetInterruptMask>
34009dc2:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34009dc6:	4b21      	ldr	r3, [pc, #132]	@ (34009e4c <xQueueGiveFromISR+0xac>)
34009dc8:	4a21      	ldr	r2, [pc, #132]	@ (34009e50 <xQueueGiveFromISR+0xb0>)
34009dca:	e7f3      	b.n	34009db4 <xQueueGiveFromISR+0x14>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
34009dcc:	6803      	ldr	r3, [r0, #0]
34009dce:	b943      	cbnz	r3, 34009de2 <xQueueGiveFromISR+0x42>
34009dd0:	6883      	ldr	r3, [r0, #8]
34009dd2:	b133      	cbz	r3, 34009de2 <xQueueGiveFromISR+0x42>
34009dd4:	f001 fb76 	bl	3400b4c4 <ulSetInterruptMask>
34009dd8:	f240 5103 	movw	r1, #1283	@ 0x503
34009ddc:	4b1b      	ldr	r3, [pc, #108]	@ (34009e4c <xQueueGiveFromISR+0xac>)
34009dde:	4a1c      	ldr	r2, [pc, #112]	@ (34009e50 <xQueueGiveFromISR+0xb0>)
34009de0:	e7e8      	b.n	34009db4 <xQueueGiveFromISR+0x14>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
34009de2:	f001 fb09 	bl	3400b3f8 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
34009de6:	f001 fb6d 	bl	3400b4c4 <ulSetInterruptMask>
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
34009dea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
34009dec:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
34009dee:	4607      	mov	r7, r0
        if( uxMessagesWaiting < pxQueue->uxLength )
34009df0:	429a      	cmp	r2, r3
34009df2:	d928      	bls.n	34009e46 <xQueueGiveFromISR+0xa6>
            const int8_t cTxLock = pxQueue->cTxLock;
34009df4:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
34009df8:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
34009dfa:	2aff      	cmp	r2, #255	@ 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
34009dfc:	b255      	sxtb	r5, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
34009dfe:	63a3      	str	r3, [r4, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
34009e00:	d10f      	bne.n	34009e22 <xQueueGiveFromISR+0x82>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
34009e02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34009e04:	b13b      	cbz	r3, 34009e16 <xQueueGiveFromISR+0x76>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
34009e06:	f104 0024 	add.w	r0, r4, #36	@ 0x24
34009e0a:	f000 fe41 	bl	3400aa90 <xTaskRemoveFromEventList>
34009e0e:	b110      	cbz	r0, 34009e16 <xQueueGiveFromISR+0x76>
                            if( pxHigherPriorityTaskWoken != NULL )
34009e10:	b10e      	cbz	r6, 34009e16 <xQueueGiveFromISR+0x76>
                                *pxHigherPriorityTaskWoken = pdTRUE;
34009e12:	2301      	movs	r3, #1
34009e14:	6033      	str	r3, [r6, #0]
            xReturn = pdPASS;
34009e16:	2401      	movs	r4, #1
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
34009e18:	4638      	mov	r0, r7
34009e1a:	f001 fb5e 	bl	3400b4da <vClearInterruptMask>
}
34009e1e:	4620      	mov	r0, r4
34009e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
34009e22:	f000 fc07 	bl	3400a634 <uxTaskGetNumberOfTasks>
34009e26:	4285      	cmp	r5, r0
34009e28:	d2f5      	bcs.n	34009e16 <xQueueGiveFromISR+0x76>
34009e2a:	2d7f      	cmp	r5, #127	@ 0x7f
34009e2c:	d106      	bne.n	34009e3c <xQueueGiveFromISR+0x9c>
34009e2e:	f001 fb49 	bl	3400b4c4 <ulSetInterruptMask>
34009e32:	f240 5182 	movw	r1, #1410	@ 0x582
34009e36:	4b05      	ldr	r3, [pc, #20]	@ (34009e4c <xQueueGiveFromISR+0xac>)
34009e38:	4a05      	ldr	r2, [pc, #20]	@ (34009e50 <xQueueGiveFromISR+0xb0>)
34009e3a:	e7bb      	b.n	34009db4 <xQueueGiveFromISR+0x14>
34009e3c:	3501      	adds	r5, #1
34009e3e:	b26d      	sxtb	r5, r5
34009e40:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
34009e44:	e7e7      	b.n	34009e16 <xQueueGiveFromISR+0x76>
            xReturn = errQUEUE_FULL;
34009e46:	2400      	movs	r4, #0
34009e48:	e7e6      	b.n	34009e18 <xQueueGiveFromISR+0x78>
34009e4a:	bf00      	nop
34009e4c:	340235d8 	.word	0x340235d8
34009e50:	3402ea69 	.word	0x3402ea69
34009e54:	34024311 	.word	0x34024311

34009e58 <xQueueReceive>:
{
34009e58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34009e5c:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
34009e5e:	4604      	mov	r4, r0
{
34009e60:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
34009e62:	b940      	cbnz	r0, 34009e76 <xQueueReceive+0x1e>
34009e64:	f001 fb2e 	bl	3400b4c4 <ulSetInterruptMask>
34009e68:	f240 519c 	movw	r1, #1436	@ 0x59c
34009e6c:	4b3f      	ldr	r3, [pc, #252]	@ (34009f6c <xQueueReceive+0x114>)
34009e6e:	4a40      	ldr	r2, [pc, #256]	@ (34009f70 <xQueueReceive+0x118>)
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
34009e70:	4840      	ldr	r0, [pc, #256]	@ (34009f74 <xQueueReceive+0x11c>)
34009e72:	f013 fdbb 	bl	3401d9ec <__assert_func>
34009e76:	b941      	cbnz	r1, 34009e8a <xQueueReceive+0x32>
34009e78:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34009e7a:	b133      	cbz	r3, 34009e8a <xQueueReceive+0x32>
34009e7c:	f001 fb22 	bl	3400b4c4 <ulSetInterruptMask>
34009e80:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
34009e84:	4b39      	ldr	r3, [pc, #228]	@ (34009f6c <xQueueReceive+0x114>)
34009e86:	4a3a      	ldr	r2, [pc, #232]	@ (34009f70 <xQueueReceive+0x118>)
34009e88:	e7f2      	b.n	34009e70 <xQueueReceive+0x18>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
34009e8a:	f000 febd 	bl	3400ac08 <xTaskGetSchedulerState>
34009e8e:	4605      	mov	r5, r0
34009e90:	b1d8      	cbz	r0, 34009eca <xQueueReceive+0x72>
34009e92:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
34009e94:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
34009e98:	f001 f994 	bl	3400b1c4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
34009e9c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
34009e9e:	b1f7      	cbz	r7, 34009ede <xQueueReceive+0x86>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
34009ea0:	4631      	mov	r1, r6
34009ea2:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
34009ea4:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
34009ea6:	f7ff fdd1 	bl	34009a4c <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
34009eaa:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
34009eac:	6923      	ldr	r3, [r4, #16]
34009eae:	b133      	cbz	r3, 34009ebe <xQueueReceive+0x66>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
34009eb0:	f104 0010 	add.w	r0, r4, #16
34009eb4:	f000 fdec 	bl	3400aa90 <xTaskRemoveFromEventList>
34009eb8:	b108      	cbz	r0, 34009ebe <xQueueReceive+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
34009eba:	f001 f977 	bl	3400b1ac <vPortYield>
                taskEXIT_CRITICAL();
34009ebe:	f001 f98f 	bl	3400b1e0 <vPortExitCritical>
                return pdPASS;
34009ec2:	2001      	movs	r0, #1
}
34009ec4:	b004      	add	sp, #16
34009ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
34009eca:	9b01      	ldr	r3, [sp, #4]
34009ecc:	2b00      	cmp	r3, #0
34009ece:	d0e1      	beq.n	34009e94 <xQueueReceive+0x3c>
34009ed0:	f001 faf8 	bl	3400b4c4 <ulSetInterruptMask>
34009ed4:	f240 51a5 	movw	r1, #1445	@ 0x5a5
34009ed8:	4b24      	ldr	r3, [pc, #144]	@ (34009f6c <xQueueReceive+0x114>)
34009eda:	4a25      	ldr	r2, [pc, #148]	@ (34009f70 <xQueueReceive+0x118>)
34009edc:	e7c8      	b.n	34009e70 <xQueueReceive+0x18>
                if( xTicksToWait == ( TickType_t ) 0 )
34009ede:	9b01      	ldr	r3, [sp, #4]
34009ee0:	b91b      	cbnz	r3, 34009eea <xQueueReceive+0x92>
                    taskEXIT_CRITICAL();
34009ee2:	f001 f97d 	bl	3400b1e0 <vPortExitCritical>
                    return errQUEUE_EMPTY;
34009ee6:	2000      	movs	r0, #0
34009ee8:	e7ec      	b.n	34009ec4 <xQueueReceive+0x6c>
                else if( xEntryTimeSet == pdFALSE )
34009eea:	b915      	cbnz	r5, 34009ef2 <xQueueReceive+0x9a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
34009eec:	a802      	add	r0, sp, #8
34009eee:	f000 fe39 	bl	3400ab64 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
34009ef2:	f001 f975 	bl	3400b1e0 <vPortExitCritical>
        vTaskSuspendAll();
34009ef6:	f000 fb8f 	bl	3400a618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
34009efa:	f001 f963 	bl	3400b1c4 <vPortEnterCritical>
34009efe:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
34009f02:	2bff      	cmp	r3, #255	@ 0xff
34009f04:	bf08      	it	eq
34009f06:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
34009f0a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
34009f0e:	2bff      	cmp	r3, #255	@ 0xff
34009f10:	bf08      	it	eq
34009f12:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
34009f16:	f001 f963 	bl	3400b1e0 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
34009f1a:	a901      	add	r1, sp, #4
34009f1c:	a802      	add	r0, sp, #8
34009f1e:	f000 fe2d 	bl	3400ab7c <xTaskCheckForTimeOut>
34009f22:	b9c0      	cbnz	r0, 34009f56 <xQueueReceive+0xfe>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
34009f24:	4620      	mov	r0, r4
34009f26:	f7ff fd53 	bl	340099d0 <prvIsQueueEmpty>
34009f2a:	b170      	cbz	r0, 34009f4a <xQueueReceive+0xf2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
34009f2c:	9901      	ldr	r1, [sp, #4]
34009f2e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
34009f32:	f000 fd59 	bl	3400a9e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
34009f36:	4620      	mov	r0, r4
34009f38:	f7ff fd9e 	bl	34009a78 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
34009f3c:	f000 fc3c 	bl	3400a7b8 <xTaskResumeAll>
34009f40:	b908      	cbnz	r0, 34009f46 <xQueueReceive+0xee>
                    portYIELD_WITHIN_API();
34009f42:	f001 f933 	bl	3400b1ac <vPortYield>
34009f46:	2501      	movs	r5, #1
34009f48:	e7a6      	b.n	34009e98 <xQueueReceive+0x40>
                prvUnlockQueue( pxQueue );
34009f4a:	4620      	mov	r0, r4
34009f4c:	f7ff fd94 	bl	34009a78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
34009f50:	f000 fc32 	bl	3400a7b8 <xTaskResumeAll>
34009f54:	e7f7      	b.n	34009f46 <xQueueReceive+0xee>
            prvUnlockQueue( pxQueue );
34009f56:	4620      	mov	r0, r4
34009f58:	f7ff fd8e 	bl	34009a78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
34009f5c:	f000 fc2c 	bl	3400a7b8 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
34009f60:	4620      	mov	r0, r4
34009f62:	f7ff fd35 	bl	340099d0 <prvIsQueueEmpty>
34009f66:	2800      	cmp	r0, #0
34009f68:	d0ed      	beq.n	34009f46 <xQueueReceive+0xee>
34009f6a:	e7bc      	b.n	34009ee6 <xQueueReceive+0x8e>
34009f6c:	340235d8 	.word	0x340235d8
34009f70:	3402ea5b 	.word	0x3402ea5b
34009f74:	34024311 	.word	0x34024311

34009f78 <xQueueSemaphoreTake>:
{
34009f78:	b5f0      	push	{r4, r5, r6, r7, lr}
34009f7a:	b085      	sub	sp, #20
    configASSERT( ( pxQueue ) );
34009f7c:	4604      	mov	r4, r0
{
34009f7e:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
34009f80:	b940      	cbnz	r0, 34009f94 <xQueueSemaphoreTake+0x1c>
34009f82:	f001 fa9f 	bl	3400b4c4 <ulSetInterruptMask>
34009f86:	f240 612e 	movw	r1, #1582	@ 0x62e
34009f8a:	4b4b      	ldr	r3, [pc, #300]	@ (3400a0b8 <xQueueSemaphoreTake+0x140>)
34009f8c:	4a4b      	ldr	r2, [pc, #300]	@ (3400a0bc <xQueueSemaphoreTake+0x144>)
    configASSERT( pxQueue->uxItemSize == 0 );
34009f8e:	484c      	ldr	r0, [pc, #304]	@ (3400a0c0 <xQueueSemaphoreTake+0x148>)
34009f90:	f013 fd2c 	bl	3401d9ec <__assert_func>
34009f94:	6c05      	ldr	r5, [r0, #64]	@ 0x40
34009f96:	b135      	cbz	r5, 34009fa6 <xQueueSemaphoreTake+0x2e>
34009f98:	f001 fa94 	bl	3400b4c4 <ulSetInterruptMask>
34009f9c:	f240 6132 	movw	r1, #1586	@ 0x632
34009fa0:	4b45      	ldr	r3, [pc, #276]	@ (3400a0b8 <xQueueSemaphoreTake+0x140>)
34009fa2:	4a46      	ldr	r2, [pc, #280]	@ (3400a0bc <xQueueSemaphoreTake+0x144>)
34009fa4:	e7f3      	b.n	34009f8e <xQueueSemaphoreTake+0x16>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
34009fa6:	f000 fe2f 	bl	3400ac08 <xTaskGetSchedulerState>
34009faa:	4606      	mov	r6, r0
34009fac:	b1d0      	cbz	r0, 34009fe4 <xQueueSemaphoreTake+0x6c>
34009fae:	462e      	mov	r6, r5
        prvLockQueue( pxQueue );
34009fb0:	2700      	movs	r7, #0
        taskENTER_CRITICAL();
34009fb2:	f001 f907 	bl	3400b1c4 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
34009fb6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
34009fb8:	b1fb      	cbz	r3, 34009ffa <xQueueSemaphoreTake+0x82>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
34009fba:	3b01      	subs	r3, #1
34009fbc:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
34009fbe:	6823      	ldr	r3, [r4, #0]
34009fc0:	b913      	cbnz	r3, 34009fc8 <xQueueSemaphoreTake+0x50>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
34009fc2:	f000 ff1b 	bl	3400adfc <pvTaskIncrementMutexHeldCount>
34009fc6:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
34009fc8:	6923      	ldr	r3, [r4, #16]
34009fca:	b133      	cbz	r3, 34009fda <xQueueSemaphoreTake+0x62>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
34009fcc:	f104 0010 	add.w	r0, r4, #16
34009fd0:	f000 fd5e 	bl	3400aa90 <xTaskRemoveFromEventList>
34009fd4:	b108      	cbz	r0, 34009fda <xQueueSemaphoreTake+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
34009fd6:	f001 f8e9 	bl	3400b1ac <vPortYield>
                taskEXIT_CRITICAL();
34009fda:	f001 f901 	bl	3400b1e0 <vPortExitCritical>
                return pdPASS;
34009fde:	2001      	movs	r0, #1
}
34009fe0:	b005      	add	sp, #20
34009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
34009fe4:	9b01      	ldr	r3, [sp, #4]
34009fe6:	4605      	mov	r5, r0
34009fe8:	2b00      	cmp	r3, #0
34009fea:	d0e1      	beq.n	34009fb0 <xQueueSemaphoreTake+0x38>
34009fec:	f001 fa6a 	bl	3400b4c4 <ulSetInterruptMask>
34009ff0:	f240 6137 	movw	r1, #1591	@ 0x637
34009ff4:	4b30      	ldr	r3, [pc, #192]	@ (3400a0b8 <xQueueSemaphoreTake+0x140>)
34009ff6:	4a31      	ldr	r2, [pc, #196]	@ (3400a0bc <xQueueSemaphoreTake+0x144>)
34009ff8:	e7c9      	b.n	34009f8e <xQueueSemaphoreTake+0x16>
                if( xTicksToWait == ( TickType_t ) 0 )
34009ffa:	9b01      	ldr	r3, [sp, #4]
34009ffc:	b91b      	cbnz	r3, 3400a006 <xQueueSemaphoreTake+0x8e>
                        taskEXIT_CRITICAL();
34009ffe:	f001 f8ef 	bl	3400b1e0 <vPortExitCritical>
                    return errQUEUE_EMPTY;
3400a002:	2000      	movs	r0, #0
3400a004:	e7ec      	b.n	34009fe0 <xQueueSemaphoreTake+0x68>
                else if( xEntryTimeSet == pdFALSE )
3400a006:	b916      	cbnz	r6, 3400a00e <xQueueSemaphoreTake+0x96>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a008:	a802      	add	r0, sp, #8
3400a00a:	f000 fdab 	bl	3400ab64 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a00e:	f001 f8e7 	bl	3400b1e0 <vPortExitCritical>
        vTaskSuspendAll();
3400a012:	f000 fb01 	bl	3400a618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a016:	f001 f8d5 	bl	3400b1c4 <vPortEnterCritical>
3400a01a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a01e:	2bff      	cmp	r3, #255	@ 0xff
3400a020:	bf08      	it	eq
3400a022:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
3400a026:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a02a:	2bff      	cmp	r3, #255	@ 0xff
3400a02c:	bf08      	it	eq
3400a02e:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
3400a032:	f001 f8d5 	bl	3400b1e0 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a036:	a901      	add	r1, sp, #4
3400a038:	a802      	add	r0, sp, #8
3400a03a:	f000 fd9f 	bl	3400ab7c <xTaskCheckForTimeOut>
3400a03e:	bb10      	cbnz	r0, 3400a086 <xQueueSemaphoreTake+0x10e>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a040:	4620      	mov	r0, r4
3400a042:	f7ff fcc5 	bl	340099d0 <prvIsQueueEmpty>
3400a046:	b1c0      	cbz	r0, 3400a07a <xQueueSemaphoreTake+0x102>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a048:	6823      	ldr	r3, [r4, #0]
3400a04a:	b93b      	cbnz	r3, 3400a05c <xQueueSemaphoreTake+0xe4>
                        taskENTER_CRITICAL();
3400a04c:	f001 f8ba 	bl	3400b1c4 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
3400a050:	68a0      	ldr	r0, [r4, #8]
3400a052:	f000 fde9 	bl	3400ac28 <xTaskPriorityInherit>
3400a056:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
3400a058:	f001 f8c2 	bl	3400b1e0 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
3400a05c:	9901      	ldr	r1, [sp, #4]
3400a05e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a062:	f000 fcc1 	bl	3400a9e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a066:	4620      	mov	r0, r4
3400a068:	f7ff fd06 	bl	34009a78 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a06c:	f000 fba4 	bl	3400a7b8 <xTaskResumeAll>
3400a070:	b908      	cbnz	r0, 3400a076 <xQueueSemaphoreTake+0xfe>
                    portYIELD_WITHIN_API();
3400a072:	f001 f89b 	bl	3400b1ac <vPortYield>
3400a076:	2601      	movs	r6, #1
3400a078:	e79b      	b.n	34009fb2 <xQueueSemaphoreTake+0x3a>
                prvUnlockQueue( pxQueue );
3400a07a:	4620      	mov	r0, r4
3400a07c:	f7ff fcfc 	bl	34009a78 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a080:	f000 fb9a 	bl	3400a7b8 <xTaskResumeAll>
3400a084:	e7f7      	b.n	3400a076 <xQueueSemaphoreTake+0xfe>
            prvUnlockQueue( pxQueue );
3400a086:	4620      	mov	r0, r4
3400a088:	f7ff fcf6 	bl	34009a78 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a08c:	f000 fb94 	bl	3400a7b8 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a090:	4620      	mov	r0, r4
3400a092:	f7ff fc9d 	bl	340099d0 <prvIsQueueEmpty>
3400a096:	2800      	cmp	r0, #0
3400a098:	d0ed      	beq.n	3400a076 <xQueueSemaphoreTake+0xfe>
                    if( xInheritanceOccurred != pdFALSE )
3400a09a:	2d00      	cmp	r5, #0
3400a09c:	d0b1      	beq.n	3400a002 <xQueueSemaphoreTake+0x8a>
                        taskENTER_CRITICAL();
3400a09e:	f001 f891 	bl	3400b1c4 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
3400a0a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a0a4:	b119      	cbz	r1, 3400a0ae <xQueueSemaphoreTake+0x136>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
3400a0a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a0a8:	6819      	ldr	r1, [r3, #0]
3400a0aa:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
3400a0ae:	68a0      	ldr	r0, [r4, #8]
3400a0b0:	f000 fe4e 	bl	3400ad50 <vTaskPriorityDisinheritAfterTimeout>
3400a0b4:	e7a3      	b.n	34009ffe <xQueueSemaphoreTake+0x86>
3400a0b6:	bf00      	nop
3400a0b8:	340235d8 	.word	0x340235d8
3400a0bc:	3402ea47 	.word	0x3402ea47
3400a0c0:	34024311 	.word	0x34024311

3400a0c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
3400a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
3400a0c6:	b940      	cbnz	r0, 3400a0da <vQueueAddToRegistry+0x16>
3400a0c8:	f001 f9fc 	bl	3400b4c4 <ulSetInterruptMask>
3400a0cc:	f640 3115 	movw	r1, #2837	@ 0xb15
3400a0d0:	4b10      	ldr	r3, [pc, #64]	@ (3400a114 <vQueueAddToRegistry+0x50>)
3400a0d2:	4a11      	ldr	r2, [pc, #68]	@ (3400a118 <vQueueAddToRegistry+0x54>)
3400a0d4:	4811      	ldr	r0, [pc, #68]	@ (3400a11c <vQueueAddToRegistry+0x58>)
3400a0d6:	f013 fc89 	bl	3401d9ec <__assert_func>

        if( pcQueueName != NULL )
3400a0da:	b1c9      	cbz	r1, 3400a110 <vQueueAddToRegistry+0x4c>
        QueueRegistryItem_t * pxEntryToWrite = NULL;
3400a0dc:	2300      	movs	r3, #0
3400a0de:	4a10      	ldr	r2, [pc, #64]	@ (3400a120 <vQueueAddToRegistry+0x5c>)
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a0e0:	461d      	mov	r5, r3
3400a0e2:	4616      	mov	r6, r2
3400a0e4:	2408      	movs	r4, #8
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
3400a0e6:	6857      	ldr	r7, [r2, #4]
3400a0e8:	4287      	cmp	r7, r0
3400a0ea:	d104      	bne.n	3400a0f6 <vQueueAddToRegistry+0x32>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
3400a0ec:	eb06 03c5 	add.w	r3, r6, r5, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
3400a0f0:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
3400a0f4:	e00c      	b.n	3400a110 <vQueueAddToRegistry+0x4c>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
3400a0f6:	b91b      	cbnz	r3, 3400a100 <vQueueAddToRegistry+0x3c>
3400a0f8:	6817      	ldr	r7, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
3400a0fa:	2f00      	cmp	r7, #0
3400a0fc:	bf08      	it	eq
3400a0fe:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a100:	3c01      	subs	r4, #1
3400a102:	f105 0501 	add.w	r5, r5, #1
3400a106:	f102 0208 	add.w	r2, r2, #8
3400a10a:	d1ec      	bne.n	3400a0e6 <vQueueAddToRegistry+0x22>
        if( pxEntryToWrite != NULL )
3400a10c:	2b00      	cmp	r3, #0
3400a10e:	d1ef      	bne.n	3400a0f0 <vQueueAddToRegistry+0x2c>
    }
3400a110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400a112:	bf00      	nop
3400a114:	340235d8 	.word	0x340235d8
3400a118:	3402ea26 	.word	0x3402ea26
3400a11c:	34024311 	.word	0x34024311
3400a120:	340a4810 	.word	0x340a4810

3400a124 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
3400a124:	b538      	push	{r3, r4, r5, lr}

        configASSERT( xQueue );

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a126:	2300      	movs	r3, #0
        configASSERT( xQueue );
3400a128:	b168      	cbz	r0, 3400a146 <vQueueUnregisterQueue+0x22>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
3400a12a:	2208      	movs	r2, #8
3400a12c:	490d      	ldr	r1, [pc, #52]	@ (3400a164 <vQueueUnregisterQueue+0x40>)
3400a12e:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
3400a132:	00dc      	lsls	r4, r3, #3
3400a134:	4285      	cmp	r5, r0
3400a136:	d10f      	bne.n	3400a158 <vQueueUnregisterQueue+0x34>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
3400a138:	2100      	movs	r1, #0
3400a13a:	4a0b      	ldr	r2, [pc, #44]	@ (3400a168 <vQueueUnregisterQueue+0x44>)
3400a13c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
3400a140:	4422      	add	r2, r4
3400a142:	6051      	str	r1, [r2, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
3400a144:	bd38      	pop	{r3, r4, r5, pc}
        configASSERT( xQueue );
3400a146:	f001 f9bd 	bl	3400b4c4 <ulSetInterruptMask>
3400a14a:	f640 3161 	movw	r1, #2913	@ 0xb61
3400a14e:	4b07      	ldr	r3, [pc, #28]	@ (3400a16c <vQueueUnregisterQueue+0x48>)
3400a150:	4a07      	ldr	r2, [pc, #28]	@ (3400a170 <vQueueUnregisterQueue+0x4c>)
3400a152:	4808      	ldr	r0, [pc, #32]	@ (3400a174 <vQueueUnregisterQueue+0x50>)
3400a154:	f013 fc4a 	bl	3401d9ec <__assert_func>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a158:	3a01      	subs	r2, #1
3400a15a:	f103 0301 	add.w	r3, r3, #1
3400a15e:	d1e6      	bne.n	3400a12e <vQueueUnregisterQueue+0xa>
3400a160:	e7f0      	b.n	3400a144 <vQueueUnregisterQueue+0x20>
3400a162:	bf00      	nop
3400a164:	340a4814 	.word	0x340a4814
3400a168:	340a4810 	.word	0x340a4810
3400a16c:	340235d8 	.word	0x340235d8
3400a170:	3402ea10 	.word	0x3402ea10
3400a174:	34024311 	.word	0x34024311

3400a178 <vQueueDelete>:
{
3400a178:	b508      	push	{r3, lr}
    configASSERT( pxQueue );
3400a17a:	b940      	cbnz	r0, 3400a18e <vQueueDelete+0x16>
3400a17c:	f001 f9a2 	bl	3400b4c4 <ulSetInterruptMask>
3400a180:	f44f 6105 	mov.w	r1, #2128	@ 0x850
3400a184:	4b04      	ldr	r3, [pc, #16]	@ (3400a198 <vQueueDelete+0x20>)
3400a186:	4a05      	ldr	r2, [pc, #20]	@ (3400a19c <vQueueDelete+0x24>)
3400a188:	4805      	ldr	r0, [pc, #20]	@ (3400a1a0 <vQueueDelete+0x28>)
3400a18a:	f013 fc2f 	bl	3401d9ec <__assert_func>
}
3400a18e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        vQueueUnregisterQueue( pxQueue );
3400a192:	f7ff bfc7 	b.w	3400a124 <vQueueUnregisterQueue>
3400a196:	bf00      	nop
3400a198:	340235d8 	.word	0x340235d8
3400a19c:	3402ea3a 	.word	0x3402ea3a
3400a1a0:	34024311 	.word	0x34024311

3400a1a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
3400a1a4:	b570      	push	{r4, r5, r6, lr}
3400a1a6:	4604      	mov	r4, r0
3400a1a8:	460d      	mov	r5, r1
3400a1aa:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
3400a1ac:	f001 f80a 	bl	3400b1c4 <vPortEnterCritical>
3400a1b0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a1b4:	2bff      	cmp	r3, #255	@ 0xff
3400a1b6:	bf04      	itt	eq
3400a1b8:	2300      	moveq	r3, #0
3400a1ba:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
3400a1be:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a1c2:	2bff      	cmp	r3, #255	@ 0xff
3400a1c4:	bf04      	itt	eq
3400a1c6:	2300      	moveq	r3, #0
3400a1c8:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
3400a1cc:	f001 f808 	bl	3400b1e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
3400a1d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a1d2:	b92b      	cbnz	r3, 3400a1e0 <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
3400a1d4:	4632      	mov	r2, r6
3400a1d6:	4629      	mov	r1, r5
3400a1d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a1dc:	f000 fc24 	bl	3400aa28 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
3400a1e0:	4620      	mov	r0, r4
    }
3400a1e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
3400a1e6:	f7ff bc47 	b.w	34009a78 <prvUnlockQueue>
	...

3400a1ec <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
3400a1ec:	b508      	push	{r3, lr}
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3400a1ee:	4c0e      	ldr	r4, [pc, #56]	@ (3400a228 <prvIdleTask+0x3c>)
        {
            taskENTER_CRITICAL();
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a1f0:	4e0e      	ldr	r6, [pc, #56]	@ (3400a22c <prvIdleTask+0x40>)
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
                --uxCurrentNumberOfTasks;
3400a1f2:	4d0f      	ldr	r5, [pc, #60]	@ (3400a230 <prvIdleTask+0x44>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3400a1f4:	6823      	ldr	r3, [r4, #0]
3400a1f6:	b933      	cbnz	r3, 3400a206 <prvIdleTask+0x1a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3400a1f8:	4b0e      	ldr	r3, [pc, #56]	@ (3400a234 <prvIdleTask+0x48>)
3400a1fa:	681b      	ldr	r3, [r3, #0]
3400a1fc:	2b01      	cmp	r3, #1
3400a1fe:	d9f8      	bls.n	3400a1f2 <prvIdleTask+0x6>
                taskYIELD();
3400a200:	f000 ffd4 	bl	3400b1ac <vPortYield>
3400a204:	e7f5      	b.n	3400a1f2 <prvIdleTask+0x6>
            taskENTER_CRITICAL();
3400a206:	f000 ffdd 	bl	3400b1c4 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a20a:	68f3      	ldr	r3, [r6, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3400a20c:	68d8      	ldr	r0, [r3, #12]
3400a20e:	3004      	adds	r0, #4
3400a210:	f7ff fbce 	bl	340099b0 <uxListRemove>
                --uxCurrentNumberOfTasks;
3400a214:	682b      	ldr	r3, [r5, #0]
3400a216:	3b01      	subs	r3, #1
3400a218:	602b      	str	r3, [r5, #0]
                --uxDeletedTasksWaitingCleanUp;
3400a21a:	6823      	ldr	r3, [r4, #0]
3400a21c:	3b01      	subs	r3, #1
3400a21e:	6023      	str	r3, [r4, #0]
            }
            taskEXIT_CRITICAL();
3400a220:	f000 ffde 	bl	3400b1e0 <vPortExitCritical>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
3400a224:	e7e6      	b.n	3400a1f4 <prvIdleTask+0x8>
3400a226:	bf00      	nop
3400a228:	340a4898 	.word	0x340a4898
3400a22c:	340a489c 	.word	0x340a489c
3400a230:	340a4880 	.word	0x340a4880
3400a234:	340a48f4 	.word	0x340a48f4

3400a238 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
3400a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400a23a:	4606      	mov	r6, r0
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
3400a23c:	4b1a      	ldr	r3, [pc, #104]	@ (3400a2a8 <prvAddCurrentTaskToDelayedList+0x70>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400a23e:	4c1b      	ldr	r4, [pc, #108]	@ (3400a2ac <prvAddCurrentTaskToDelayedList+0x74>)
    const TickType_t xConstTickCount = xTickCount;
3400a240:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400a242:	6820      	ldr	r0, [r4, #0]
{
3400a244:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400a246:	3004      	adds	r0, #4
3400a248:	f7ff fbb2 	bl	340099b0 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
3400a24c:	1c73      	adds	r3, r6, #1
3400a24e:	d113      	bne.n	3400a278 <prvAddCurrentTaskToDelayedList+0x40>
3400a250:	b197      	cbz	r7, 3400a278 <prvAddCurrentTaskToDelayedList+0x40>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400a252:	4b17      	ldr	r3, [pc, #92]	@ (3400a2b0 <prvAddCurrentTaskToDelayedList+0x78>)
3400a254:	6821      	ldr	r1, [r4, #0]
3400a256:	685a      	ldr	r2, [r3, #4]
3400a258:	608a      	str	r2, [r1, #8]
3400a25a:	6890      	ldr	r0, [r2, #8]
3400a25c:	6821      	ldr	r1, [r4, #0]
3400a25e:	60c8      	str	r0, [r1, #12]
3400a260:	6821      	ldr	r1, [r4, #0]
3400a262:	3104      	adds	r1, #4
3400a264:	6041      	str	r1, [r0, #4]
3400a266:	6821      	ldr	r1, [r4, #0]
3400a268:	3104      	adds	r1, #4
3400a26a:	6091      	str	r1, [r2, #8]
3400a26c:	6822      	ldr	r2, [r4, #0]
3400a26e:	6153      	str	r3, [r2, #20]
3400a270:	681a      	ldr	r2, [r3, #0]
3400a272:	3201      	adds	r2, #1
3400a274:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
3400a276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
3400a278:	6823      	ldr	r3, [r4, #0]
3400a27a:	19ad      	adds	r5, r5, r6
3400a27c:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
3400a27e:	d307      	bcc.n	3400a290 <prvAddCurrentTaskToDelayedList+0x58>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400a280:	4b0c      	ldr	r3, [pc, #48]	@ (3400a2b4 <prvAddCurrentTaskToDelayedList+0x7c>)
3400a282:	6818      	ldr	r0, [r3, #0]
3400a284:	6821      	ldr	r1, [r4, #0]
}
3400a286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400a28a:	3104      	adds	r1, #4
3400a28c:	f7ff bb79 	b.w	34009982 <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400a290:	4b09      	ldr	r3, [pc, #36]	@ (3400a2b8 <prvAddCurrentTaskToDelayedList+0x80>)
3400a292:	6818      	ldr	r0, [r3, #0]
3400a294:	6821      	ldr	r1, [r4, #0]
3400a296:	3104      	adds	r1, #4
3400a298:	f7ff fb73 	bl	34009982 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
3400a29c:	4b07      	ldr	r3, [pc, #28]	@ (3400a2bc <prvAddCurrentTaskToDelayedList+0x84>)
3400a29e:	681a      	ldr	r2, [r3, #0]
3400a2a0:	42aa      	cmp	r2, r5
                    xNextTaskUnblockTime = xTimeToWake;
3400a2a2:	bf88      	it	hi
3400a2a4:	601d      	strhi	r5, [r3, #0]
}
3400a2a6:	e7e6      	b.n	3400a276 <prvAddCurrentTaskToDelayedList+0x3e>
3400a2a8:	340a487c 	.word	0x340a487c
3400a2ac:	340a4d54 	.word	0x340a4d54
3400a2b0:	340a4884 	.word	0x340a4884
3400a2b4:	340a48c4 	.word	0x340a48c4
3400a2b8:	340a48c8 	.word	0x340a48c8
3400a2bc:	340a4860 	.word	0x340a4860

3400a2c0 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400a2c0:	4a06      	ldr	r2, [pc, #24]	@ (3400a2dc <prvResetNextTaskUnblockTime+0x1c>)
3400a2c2:	6813      	ldr	r3, [r2, #0]
3400a2c4:	6819      	ldr	r1, [r3, #0]
3400a2c6:	4b06      	ldr	r3, [pc, #24]	@ (3400a2e0 <prvResetNextTaskUnblockTime+0x20>)
3400a2c8:	b919      	cbnz	r1, 3400a2d2 <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
3400a2ca:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
3400a2ce:	601a      	str	r2, [r3, #0]
}
3400a2d0:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
3400a2d2:	6812      	ldr	r2, [r2, #0]
3400a2d4:	68d2      	ldr	r2, [r2, #12]
3400a2d6:	6812      	ldr	r2, [r2, #0]
3400a2d8:	e7f9      	b.n	3400a2ce <prvResetNextTaskUnblockTime+0xe>
3400a2da:	bf00      	nop
3400a2dc:	340a48c8 	.word	0x340a48c8
3400a2e0:	340a4860 	.word	0x340a4860

3400a2e4 <xTaskCreateStatic>:
    {
3400a2e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400a2e8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
3400a2ea:	4607      	mov	r7, r0
3400a2ec:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	@ 0x28
3400a2f0:	460e      	mov	r6, r1
3400a2f2:	4615      	mov	r5, r2
3400a2f4:	4698      	mov	r8, r3
        configASSERT( puxStackBuffer != NULL );
3400a2f6:	f1ba 0f00 	cmp.w	sl, #0
3400a2fa:	d108      	bne.n	3400a30e <xTaskCreateStatic+0x2a>
3400a2fc:	f001 f8e2 	bl	3400b4c4 <ulSetInterruptMask>
3400a300:	f240 2143 	movw	r1, #579	@ 0x243
3400a304:	4b60      	ldr	r3, [pc, #384]	@ (3400a488 <xTaskCreateStatic+0x1a4>)
3400a306:	4a61      	ldr	r2, [pc, #388]	@ (3400a48c <xTaskCreateStatic+0x1a8>)
        configASSERT( pxTaskBuffer != NULL );
3400a308:	4861      	ldr	r0, [pc, #388]	@ (3400a490 <xTaskCreateStatic+0x1ac>)
3400a30a:	f013 fb6f 	bl	3401d9ec <__assert_func>
3400a30e:	b934      	cbnz	r4, 3400a31e <xTaskCreateStatic+0x3a>
3400a310:	f001 f8d8 	bl	3400b4c4 <ulSetInterruptMask>
3400a314:	f44f 7111 	mov.w	r1, #580	@ 0x244
3400a318:	4b5b      	ldr	r3, [pc, #364]	@ (3400a488 <xTaskCreateStatic+0x1a4>)
3400a31a:	4a5c      	ldr	r2, [pc, #368]	@ (3400a48c <xTaskCreateStatic+0x1a8>)
3400a31c:	e7f4      	b.n	3400a308 <xTaskCreateStatic+0x24>
            volatile size_t xSize = sizeof( StaticTask_t );
3400a31e:	2360      	movs	r3, #96	@ 0x60
3400a320:	9301      	str	r3, [sp, #4]
            configASSERT( xSize == sizeof( TCB_t ) );
3400a322:	9a01      	ldr	r2, [sp, #4]
3400a324:	429a      	cmp	r2, r3
3400a326:	d006      	beq.n	3400a336 <xTaskCreateStatic+0x52>
3400a328:	f001 f8cc 	bl	3400b4c4 <ulSetInterruptMask>
3400a32c:	f44f 7113 	mov.w	r1, #588	@ 0x24c
3400a330:	4b55      	ldr	r3, [pc, #340]	@ (3400a488 <xTaskCreateStatic+0x1a4>)
3400a332:	4a56      	ldr	r2, [pc, #344]	@ (3400a48c <xTaskCreateStatic+0x1a8>)
3400a334:	e7e8      	b.n	3400a308 <xTaskCreateStatic+0x24>
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400a336:	2100      	movs	r1, #0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400a338:	00ad      	lsls	r5, r5, #2
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400a33a:	4620      	mov	r0, r4
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
3400a33c:	9b01      	ldr	r3, [sp, #4]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400a33e:	f014 fb9f 	bl	3401ea80 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400a342:	462a      	mov	r2, r5
3400a344:	21a5      	movs	r1, #165	@ 0xa5
3400a346:	4650      	mov	r0, sl
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
3400a348:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400a34c:	f014 fb98 	bl	3401ea80 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
3400a350:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a352:	3d04      	subs	r5, #4
3400a354:	441d      	add	r5, r3
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
3400a356:	f025 0507 	bic.w	r5, r5, #7
    if( pcName != NULL )
3400a35a:	b16e      	cbz	r6, 3400a378 <xTaskCreateStatic+0x94>
3400a35c:	2310      	movs	r3, #16
3400a35e:	3e01      	subs	r6, #1
3400a360:	f104 0233 	add.w	r2, r4, #51	@ 0x33
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
3400a364:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400a368:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
3400a36c:	b109      	cbz	r1, 3400a372 <xTaskCreateStatic+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
3400a36e:	3b01      	subs	r3, #1
3400a370:	d1f8      	bne.n	3400a364 <xTaskCreateStatic+0x80>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
3400a372:	2300      	movs	r3, #0
3400a374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
3400a378:	f1b9 0f37 	cmp.w	r9, #55	@ 0x37
3400a37c:	d906      	bls.n	3400a38c <xTaskCreateStatic+0xa8>
3400a37e:	f001 f8a1 	bl	3400b4c4 <ulSetInterruptMask>
3400a382:	f240 3196 	movw	r1, #918	@ 0x396
3400a386:	4b40      	ldr	r3, [pc, #256]	@ (3400a488 <xTaskCreateStatic+0x1a4>)
3400a388:	4a42      	ldr	r2, [pc, #264]	@ (3400a494 <xTaskCreateStatic+0x1b0>)
3400a38a:	e7bd      	b.n	3400a308 <xTaskCreateStatic+0x24>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
3400a38c:	1d26      	adds	r6, r4, #4
3400a38e:	4630      	mov	r0, r6
    pxNewTCB->uxPriority = uxPriority;
3400a390:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
3400a394:	f8c4 904c 	str.w	r9, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
3400a398:	f7ff fae5 	bl	34009966 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
3400a39c:	f104 0018 	add.w	r0, r4, #24
3400a3a0:	f7ff fae1 	bl	34009966 <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400a3a4:	f1c9 0138 	rsb	r1, r9, #56	@ 0x38
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400a3a8:	4643      	mov	r3, r8
3400a3aa:	463a      	mov	r2, r7
3400a3ac:	4628      	mov	r0, r5
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400a3ae:	61a1      	str	r1, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
3400a3b0:	6124      	str	r4, [r4, #16]
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400a3b2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
3400a3b4:	6264      	str	r4, [r4, #36]	@ 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400a3b6:	f000 ff6d 	bl	3400b294 <pxPortInitialiseStack>
3400a3ba:	6020      	str	r0, [r4, #0]
    taskENTER_CRITICAL();
3400a3bc:	f000 ff02 	bl	3400b1c4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
3400a3c0:	4b35      	ldr	r3, [pc, #212]	@ (3400a498 <xTaskCreateStatic+0x1b4>)
        if( pxCurrentTCB == NULL )
3400a3c2:	4f36      	ldr	r7, [pc, #216]	@ (3400a49c <xTaskCreateStatic+0x1b8>)
        uxCurrentNumberOfTasks++;
3400a3c4:	681a      	ldr	r2, [r3, #0]
3400a3c6:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 3400a4c4 <xTaskCreateStatic+0x1e0>
3400a3ca:	3201      	adds	r2, #1
3400a3cc:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
3400a3ce:	683d      	ldr	r5, [r7, #0]
3400a3d0:	2d00      	cmp	r5, #0
3400a3d2:	d14e      	bne.n	3400a472 <xTaskCreateStatic+0x18e>
            pxCurrentTCB = pxNewTCB;
3400a3d4:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
3400a3d6:	681b      	ldr	r3, [r3, #0]
3400a3d8:	2b01      	cmp	r3, #1
3400a3da:	d11f      	bne.n	3400a41c <xTaskCreateStatic+0x138>
3400a3dc:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3400a3de:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
3400a3e0:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3400a3e2:	f7ff fab5 	bl	34009950 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
3400a3e6:	2d38      	cmp	r5, #56	@ 0x38
3400a3e8:	f109 0914 	add.w	r9, r9, #20
3400a3ec:	d1f7      	bne.n	3400a3de <xTaskCreateStatic+0xfa>
    vListInitialise( &xDelayedTaskList1 );
3400a3ee:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 3400a4c8 <xTaskCreateStatic+0x1e4>
    vListInitialise( &xDelayedTaskList2 );
3400a3f2:	4d2b      	ldr	r5, [pc, #172]	@ (3400a4a0 <xTaskCreateStatic+0x1bc>)
    vListInitialise( &xDelayedTaskList1 );
3400a3f4:	4648      	mov	r0, r9
3400a3f6:	f7ff faab 	bl	34009950 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
3400a3fa:	4628      	mov	r0, r5
3400a3fc:	f7ff faa8 	bl	34009950 <vListInitialise>
    vListInitialise( &xPendingReadyList );
3400a400:	4828      	ldr	r0, [pc, #160]	@ (3400a4a4 <xTaskCreateStatic+0x1c0>)
3400a402:	f7ff faa5 	bl	34009950 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
3400a406:	4828      	ldr	r0, [pc, #160]	@ (3400a4a8 <xTaskCreateStatic+0x1c4>)
3400a408:	f7ff faa2 	bl	34009950 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
3400a40c:	4827      	ldr	r0, [pc, #156]	@ (3400a4ac <xTaskCreateStatic+0x1c8>)
3400a40e:	f7ff fa9f 	bl	34009950 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
3400a412:	4b27      	ldr	r3, [pc, #156]	@ (3400a4b0 <xTaskCreateStatic+0x1cc>)
3400a414:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
3400a418:	4b26      	ldr	r3, [pc, #152]	@ (3400a4b4 <xTaskCreateStatic+0x1d0>)
3400a41a:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
3400a41c:	4a26      	ldr	r2, [pc, #152]	@ (3400a4b8 <xTaskCreateStatic+0x1d4>)
3400a41e:	6813      	ldr	r3, [r2, #0]
3400a420:	3301      	adds	r3, #1
3400a422:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
3400a424:	4a25      	ldr	r2, [pc, #148]	@ (3400a4bc <xTaskCreateStatic+0x1d8>)
            pxNewTCB->uxTCBNumber = uxTaskNumber;
3400a426:	6463      	str	r3, [r4, #68]	@ 0x44
        prvAddTaskToReadyList( pxNewTCB );
3400a428:	6811      	ldr	r1, [r2, #0]
3400a42a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a42c:	428b      	cmp	r3, r1
3400a42e:	bf88      	it	hi
3400a430:	6013      	strhi	r3, [r2, #0]
3400a432:	2214      	movs	r2, #20
3400a434:	4353      	muls	r3, r2
3400a436:	eb08 0103 	add.w	r1, r8, r3
3400a43a:	684a      	ldr	r2, [r1, #4]
3400a43c:	6890      	ldr	r0, [r2, #8]
3400a43e:	60a2      	str	r2, [r4, #8]
3400a440:	60e0      	str	r0, [r4, #12]
3400a442:	6046      	str	r6, [r0, #4]
3400a444:	6096      	str	r6, [r2, #8]
3400a446:	f858 2003 	ldr.w	r2, [r8, r3]
3400a44a:	6161      	str	r1, [r4, #20]
3400a44c:	3201      	adds	r2, #1
3400a44e:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
3400a452:	f000 fec5 	bl	3400b1e0 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
3400a456:	4b1a      	ldr	r3, [pc, #104]	@ (3400a4c0 <xTaskCreateStatic+0x1dc>)
3400a458:	681b      	ldr	r3, [r3, #0]
3400a45a:	b133      	cbz	r3, 3400a46a <xTaskCreateStatic+0x186>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
3400a45c:	683b      	ldr	r3, [r7, #0]
3400a45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a460:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400a462:	429a      	cmp	r2, r3
3400a464:	d201      	bcs.n	3400a46a <xTaskCreateStatic+0x186>
            taskYIELD_IF_USING_PREEMPTION();
3400a466:	f000 fea1 	bl	3400b1ac <vPortYield>
    }
3400a46a:	4620      	mov	r0, r4
3400a46c:	b002      	add	sp, #8
3400a46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( xSchedulerRunning == pdFALSE )
3400a472:	4b13      	ldr	r3, [pc, #76]	@ (3400a4c0 <xTaskCreateStatic+0x1dc>)
3400a474:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
3400a476:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
3400a478:	2a00      	cmp	r2, #0
3400a47a:	d1cf      	bne.n	3400a41c <xTaskCreateStatic+0x138>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
3400a47c:	683a      	ldr	r2, [r7, #0]
3400a47e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400a480:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
3400a482:	bf98      	it	ls
3400a484:	603c      	strls	r4, [r7, #0]
3400a486:	e7c9      	b.n	3400a41c <xTaskCreateStatic+0x138>
3400a488:	340235d8 	.word	0x340235d8
3400a48c:	3402ebf3 	.word	0x3402ebf3
3400a490:	34024348 	.word	0x34024348
3400a494:	3402ebde 	.word	0x3402ebde
3400a498:	340a4880 	.word	0x340a4880
3400a49c:	340a4d54 	.word	0x340a4d54
3400a4a0:	340a48cc 	.word	0x340a48cc
3400a4a4:	340a48b0 	.word	0x340a48b0
3400a4a8:	340a489c 	.word	0x340a489c
3400a4ac:	340a4884 	.word	0x340a4884
3400a4b0:	340a48c8 	.word	0x340a48c8
3400a4b4:	340a48c4 	.word	0x340a48c4
3400a4b8:	340a4864 	.word	0x340a4864
3400a4bc:	340a4878 	.word	0x340a4878
3400a4c0:	340a4874 	.word	0x340a4874
3400a4c4:	340a48f4 	.word	0x340a48f4
3400a4c8:	340a48e0 	.word	0x340a48e0

3400a4cc <vTaskDelete>:
    {
3400a4cc:	b570      	push	{r4, r5, r6, lr}
3400a4ce:	4604      	mov	r4, r0
3400a4d0:	4d1f      	ldr	r5, [pc, #124]	@ (3400a550 <vTaskDelete+0x84>)
        taskENTER_CRITICAL();
3400a4d2:	f000 fe77 	bl	3400b1c4 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
3400a4d6:	b904      	cbnz	r4, 3400a4da <vTaskDelete+0xe>
3400a4d8:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400a4da:	1d26      	adds	r6, r4, #4
3400a4dc:	4630      	mov	r0, r6
3400a4de:	f7ff fa67 	bl	340099b0 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3400a4e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400a4e4:	b11b      	cbz	r3, 3400a4ee <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
3400a4e6:	f104 0018 	add.w	r0, r4, #24
3400a4ea:	f7ff fa61 	bl	340099b0 <uxListRemove>
            uxTaskNumber++;
3400a4ee:	4a19      	ldr	r2, [pc, #100]	@ (3400a554 <vTaskDelete+0x88>)
3400a4f0:	6813      	ldr	r3, [r2, #0]
3400a4f2:	3301      	adds	r3, #1
3400a4f4:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
3400a4f6:	682b      	ldr	r3, [r5, #0]
3400a4f8:	42a3      	cmp	r3, r4
3400a4fa:	d11c      	bne.n	3400a536 <vTaskDelete+0x6a>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
3400a4fc:	4631      	mov	r1, r6
3400a4fe:	4816      	ldr	r0, [pc, #88]	@ (3400a558 <vTaskDelete+0x8c>)
3400a500:	f7ff fa34 	bl	3400996c <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
3400a504:	4a15      	ldr	r2, [pc, #84]	@ (3400a55c <vTaskDelete+0x90>)
3400a506:	6813      	ldr	r3, [r2, #0]
3400a508:	3301      	adds	r3, #1
3400a50a:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
3400a50c:	f000 fe68 	bl	3400b1e0 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
3400a510:	682b      	ldr	r3, [r5, #0]
        if( xSchedulerRunning != pdFALSE )
3400a512:	4b13      	ldr	r3, [pc, #76]	@ (3400a560 <vTaskDelete+0x94>)
3400a514:	681b      	ldr	r3, [r3, #0]
3400a516:	b1cb      	cbz	r3, 3400a54c <vTaskDelete+0x80>
            if( pxTCB == pxCurrentTCB )
3400a518:	682b      	ldr	r3, [r5, #0]
3400a51a:	42a3      	cmp	r3, r4
3400a51c:	d116      	bne.n	3400a54c <vTaskDelete+0x80>
                configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400a51e:	4b11      	ldr	r3, [pc, #68]	@ (3400a564 <vTaskDelete+0x98>)
3400a520:	681b      	ldr	r3, [r3, #0]
3400a522:	b17b      	cbz	r3, 3400a544 <vTaskDelete+0x78>
3400a524:	f000 ffce 	bl	3400b4c4 <ulSetInterruptMask>
3400a528:	f240 41b3 	movw	r1, #1203	@ 0x4b3
3400a52c:	4b0e      	ldr	r3, [pc, #56]	@ (3400a568 <vTaskDelete+0x9c>)
3400a52e:	4a0f      	ldr	r2, [pc, #60]	@ (3400a56c <vTaskDelete+0xa0>)
3400a530:	480f      	ldr	r0, [pc, #60]	@ (3400a570 <vTaskDelete+0xa4>)
3400a532:	f013 fa5b 	bl	3401d9ec <__assert_func>
                --uxCurrentNumberOfTasks;
3400a536:	4a0f      	ldr	r2, [pc, #60]	@ (3400a574 <vTaskDelete+0xa8>)
3400a538:	6813      	ldr	r3, [r2, #0]
3400a53a:	3b01      	subs	r3, #1
3400a53c:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
3400a53e:	f7ff febf 	bl	3400a2c0 <prvResetNextTaskUnblockTime>
3400a542:	e7e3      	b.n	3400a50c <vTaskDelete+0x40>
    }
3400a544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                portYIELD_WITHIN_API();
3400a548:	f000 be30 	b.w	3400b1ac <vPortYield>
    }
3400a54c:	bd70      	pop	{r4, r5, r6, pc}
3400a54e:	bf00      	nop
3400a550:	340a4d54 	.word	0x340a4d54
3400a554:	340a4864 	.word	0x340a4864
3400a558:	340a489c 	.word	0x340a489c
3400a55c:	340a4898 	.word	0x340a4898
3400a560:	340a4874 	.word	0x340a4874
3400a564:	340a4858 	.word	0x340a4858
3400a568:	340235d8 	.word	0x340235d8
3400a56c:	3402ebd2 	.word	0x3402ebd2
3400a570:	34024348 	.word	0x34024348
3400a574:	340a4880 	.word	0x340a4880

3400a578 <vTaskStartScheduler>:
{
3400a578:	b530      	push	{r4, r5, lr}
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
3400a57a:	2500      	movs	r5, #0
{
3400a57c:	b089      	sub	sp, #36	@ 0x24
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
3400a57e:	aa07      	add	r2, sp, #28
3400a580:	a906      	add	r1, sp, #24
3400a582:	a805      	add	r0, sp, #20
        StackType_t * pxIdleTaskStackBuffer = NULL;
3400a584:	e9cd 5505 	strd	r5, r5, [sp, #20]
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
3400a588:	f012 ff28 	bl	3401d3dc <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
3400a58c:	9b05      	ldr	r3, [sp, #20]
3400a58e:	9a07      	ldr	r2, [sp, #28]
3400a590:	9302      	str	r3, [sp, #8]
3400a592:	9b06      	ldr	r3, [sp, #24]
3400a594:	4916      	ldr	r1, [pc, #88]	@ (3400a5f0 <vTaskStartScheduler+0x78>)
3400a596:	e9cd 5300 	strd	r5, r3, [sp]
3400a59a:	4816      	ldr	r0, [pc, #88]	@ (3400a5f4 <vTaskStartScheduler+0x7c>)
3400a59c:	462b      	mov	r3, r5
3400a59e:	f7ff fea1 	bl	3400a2e4 <xTaskCreateStatic>
3400a5a2:	4b15      	ldr	r3, [pc, #84]	@ (3400a5f8 <vTaskStartScheduler+0x80>)
3400a5a4:	6018      	str	r0, [r3, #0]
        if( xIdleTaskHandle != NULL )
3400a5a6:	b1a0      	cbz	r0, 3400a5d2 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
3400a5a8:	f000 fd96 	bl	3400b0d8 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
3400a5ac:	2801      	cmp	r0, #1
            xReturn = xTimerCreateTimerTask();
3400a5ae:	4604      	mov	r4, r0
    if( xReturn == pdPASS )
3400a5b0:	d113      	bne.n	3400a5da <vTaskStartScheduler+0x62>
    #include "freertos_tasks_c_additions.h"

    #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
        static void freertos_tasks_c_additions_init( void )
        {
            FREERTOS_TASKS_C_ADDITIONS_INIT();
3400a5b2:	f7f7 fca3 	bl	34001efc <freertos_libc_init>
        portDISABLE_INTERRUPTS();
3400a5b6:	f000 ff85 	bl	3400b4c4 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
3400a5ba:	f04f 32ff 	mov.w	r2, #4294967295
3400a5be:	4b0f      	ldr	r3, [pc, #60]	@ (3400a5fc <vTaskStartScheduler+0x84>)
3400a5c0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
3400a5c2:	4b0f      	ldr	r3, [pc, #60]	@ (3400a600 <vTaskStartScheduler+0x88>)
3400a5c4:	601c      	str	r4, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
3400a5c6:	4b0f      	ldr	r3, [pc, #60]	@ (3400a604 <vTaskStartScheduler+0x8c>)
3400a5c8:	601d      	str	r5, [r3, #0]
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
3400a5ca:	f012 fec5 	bl	3401d358 <TIM4_Config>
        xPortStartScheduler();
3400a5ce:	f000 fe99 	bl	3400b304 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
3400a5d2:	4b0d      	ldr	r3, [pc, #52]	@ (3400a608 <vTaskStartScheduler+0x90>)
3400a5d4:	681b      	ldr	r3, [r3, #0]
}
3400a5d6:	b009      	add	sp, #36	@ 0x24
3400a5d8:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
3400a5da:	3401      	adds	r4, #1
3400a5dc:	d1f9      	bne.n	3400a5d2 <vTaskStartScheduler+0x5a>
3400a5de:	f000 ff71 	bl	3400b4c4 <ulSetInterruptMask>
3400a5e2:	f44f 6102 	mov.w	r1, #2080	@ 0x820
3400a5e6:	4b09      	ldr	r3, [pc, #36]	@ (3400a60c <vTaskStartScheduler+0x94>)
3400a5e8:	4a09      	ldr	r2, [pc, #36]	@ (3400a610 <vTaskStartScheduler+0x98>)
3400a5ea:	480a      	ldr	r0, [pc, #40]	@ (3400a614 <vTaskStartScheduler+0x9c>)
3400a5ec:	f013 f9fe 	bl	3401d9ec <__assert_func>
3400a5f0:	3402437f 	.word	0x3402437f
3400a5f4:	3400a1ed 	.word	0x3400a1ed
3400a5f8:	340a485c 	.word	0x340a485c
3400a5fc:	340a4860 	.word	0x340a4860
3400a600:	340a4874 	.word	0x340a4874
3400a604:	340a487c 	.word	0x340a487c
3400a608:	3402ec08 	.word	0x3402ec08
3400a60c:	340235d8 	.word	0x340235d8
3400a610:	3402ebb3 	.word	0x3402ebb3
3400a614:	34024348 	.word	0x34024348

3400a618 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
3400a618:	4a02      	ldr	r2, [pc, #8]	@ (3400a624 <vTaskSuspendAll+0xc>)
3400a61a:	6813      	ldr	r3, [r2, #0]
3400a61c:	3301      	adds	r3, #1
3400a61e:	6013      	str	r3, [r2, #0]
}
3400a620:	4770      	bx	lr
3400a622:	bf00      	nop
3400a624:	340a4858 	.word	0x340a4858

3400a628 <xTaskGetTickCount>:
        xTicks = xTickCount;
3400a628:	4b01      	ldr	r3, [pc, #4]	@ (3400a630 <xTaskGetTickCount+0x8>)
3400a62a:	6818      	ldr	r0, [r3, #0]
}
3400a62c:	4770      	bx	lr
3400a62e:	bf00      	nop
3400a630:	340a487c 	.word	0x340a487c

3400a634 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
3400a634:	4b01      	ldr	r3, [pc, #4]	@ (3400a63c <uxTaskGetNumberOfTasks+0x8>)
3400a636:	6818      	ldr	r0, [r3, #0]
}
3400a638:	4770      	bx	lr
3400a63a:	bf00      	nop
3400a63c:	340a4880 	.word	0x340a4880

3400a640 <xTaskIncrementTick>:
{
3400a640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400a644:	4b4e      	ldr	r3, [pc, #312]	@ (3400a780 <xTaskIncrementTick+0x140>)
3400a646:	681b      	ldr	r3, [r3, #0]
3400a648:	2b00      	cmp	r3, #0
3400a64a:	f040 8093 	bne.w	3400a774 <xTaskIncrementTick+0x134>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
3400a64e:	4b4d      	ldr	r3, [pc, #308]	@ (3400a784 <xTaskIncrementTick+0x144>)
3400a650:	681c      	ldr	r4, [r3, #0]
3400a652:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
3400a654:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
3400a656:	b9bc      	cbnz	r4, 3400a688 <xTaskIncrementTick+0x48>
            taskSWITCH_DELAYED_LISTS();
3400a658:	4b4b      	ldr	r3, [pc, #300]	@ (3400a788 <xTaskIncrementTick+0x148>)
3400a65a:	681a      	ldr	r2, [r3, #0]
3400a65c:	6812      	ldr	r2, [r2, #0]
3400a65e:	b142      	cbz	r2, 3400a672 <xTaskIncrementTick+0x32>
3400a660:	f000 ff30 	bl	3400b4c4 <ulSetInterruptMask>
3400a664:	f640 21f4 	movw	r1, #2804	@ 0xaf4
3400a668:	4b48      	ldr	r3, [pc, #288]	@ (3400a78c <xTaskIncrementTick+0x14c>)
3400a66a:	4a49      	ldr	r2, [pc, #292]	@ (3400a790 <xTaskIncrementTick+0x150>)
3400a66c:	4849      	ldr	r0, [pc, #292]	@ (3400a794 <xTaskIncrementTick+0x154>)
3400a66e:	f013 f9bd 	bl	3401d9ec <__assert_func>
3400a672:	4a49      	ldr	r2, [pc, #292]	@ (3400a798 <xTaskIncrementTick+0x158>)
3400a674:	6819      	ldr	r1, [r3, #0]
3400a676:	6810      	ldr	r0, [r2, #0]
3400a678:	6018      	str	r0, [r3, #0]
3400a67a:	6011      	str	r1, [r2, #0]
3400a67c:	4a47      	ldr	r2, [pc, #284]	@ (3400a79c <xTaskIncrementTick+0x15c>)
3400a67e:	6813      	ldr	r3, [r2, #0]
3400a680:	3301      	adds	r3, #1
3400a682:	6013      	str	r3, [r2, #0]
3400a684:	f7ff fe1c 	bl	3400a2c0 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
3400a688:	f8df c120 	ldr.w	ip, [pc, #288]	@ 3400a7ac <xTaskIncrementTick+0x16c>
    BaseType_t xSwitchRequired = pdFALSE;
3400a68c:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
3400a68e:	f8dc 3000 	ldr.w	r3, [ip]
3400a692:	4a43      	ldr	r2, [pc, #268]	@ (3400a7a0 <xTaskIncrementTick+0x160>)
3400a694:	429c      	cmp	r4, r3
3400a696:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 3400a7b0 <xTaskIncrementTick+0x170>
3400a69a:	d20f      	bcs.n	3400a6bc <xTaskIncrementTick+0x7c>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
3400a69c:	2114      	movs	r1, #20
3400a69e:	f8d8 3000 	ldr.w	r3, [r8]
3400a6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a6a4:	434b      	muls	r3, r1
3400a6a6:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
3400a6a8:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
3400a6aa:	4b3e      	ldr	r3, [pc, #248]	@ (3400a7a4 <xTaskIncrementTick+0x164>)
                xSwitchRequired = pdTRUE;
3400a6ac:	bf28      	it	cs
3400a6ae:	2001      	movcs	r0, #1
            if( xYieldPending != pdFALSE )
3400a6b0:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
3400a6b2:	2b00      	cmp	r3, #0
3400a6b4:	bf18      	it	ne
3400a6b6:	2001      	movne	r0, #1
}
3400a6b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400a6bc:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 3400a788 <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
3400a6c0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 3400a7b4 <xTaskIncrementTick+0x174>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400a6c4:	f8de 3000 	ldr.w	r3, [lr]
3400a6c8:	681b      	ldr	r3, [r3, #0]
3400a6ca:	b923      	cbnz	r3, 3400a6d6 <xTaskIncrementTick+0x96>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400a6cc:	f04f 33ff 	mov.w	r3, #4294967295
3400a6d0:	f8cc 3000 	str.w	r3, [ip]
                    break;
3400a6d4:	e7e2      	b.n	3400a69c <xTaskIncrementTick+0x5c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a6d6:	f8de 3000 	ldr.w	r3, [lr]
3400a6da:	68db      	ldr	r3, [r3, #12]
3400a6dc:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
3400a6de:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
3400a6e0:	428c      	cmp	r4, r1
3400a6e2:	d202      	bcs.n	3400a6ea <xTaskIncrementTick+0xaa>
                        xNextTaskUnblockTime = xItemValue;
3400a6e4:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
3400a6e8:	e7d8      	b.n	3400a69c <xTaskIncrementTick+0x5c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3400a6ea:	695d      	ldr	r5, [r3, #20]
3400a6ec:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
3400a6f0:	608e      	str	r6, [r1, #8]
3400a6f2:	6071      	str	r1, [r6, #4]
3400a6f4:	6869      	ldr	r1, [r5, #4]
3400a6f6:	1d1f      	adds	r7, r3, #4
3400a6f8:	42b9      	cmp	r1, r7
3400a6fa:	f04f 0100 	mov.w	r1, #0
3400a6fe:	bf08      	it	eq
3400a700:	606e      	streq	r6, [r5, #4]
3400a702:	6159      	str	r1, [r3, #20]
3400a704:	6829      	ldr	r1, [r5, #0]
3400a706:	3901      	subs	r1, #1
3400a708:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3400a70a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
3400a70c:	b17d      	cbz	r5, 3400a72e <xTaskIncrementTick+0xee>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3400a70e:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
3400a712:	608e      	str	r6, [r1, #8]
3400a714:	6071      	str	r1, [r6, #4]
3400a716:	6869      	ldr	r1, [r5, #4]
3400a718:	f103 0a18 	add.w	sl, r3, #24
3400a71c:	4551      	cmp	r1, sl
3400a71e:	f04f 0100 	mov.w	r1, #0
3400a722:	bf08      	it	eq
3400a724:	606e      	streq	r6, [r5, #4]
3400a726:	6299      	str	r1, [r3, #40]	@ 0x28
3400a728:	6829      	ldr	r1, [r5, #0]
3400a72a:	3901      	subs	r1, #1
3400a72c:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
3400a72e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3400a730:	f8d9 5000 	ldr.w	r5, [r9]
3400a734:	42a9      	cmp	r1, r5
3400a736:	f04f 0514 	mov.w	r5, #20
3400a73a:	fb05 f501 	mul.w	r5, r5, r1
3400a73e:	eb02 0a05 	add.w	sl, r2, r5
3400a742:	f8da 6004 	ldr.w	r6, [sl, #4]
3400a746:	bf88      	it	hi
3400a748:	f8c9 1000 	strhi.w	r1, [r9]
3400a74c:	f8d6 b008 	ldr.w	fp, [r6, #8]
3400a750:	609e      	str	r6, [r3, #8]
3400a752:	f8c3 b00c 	str.w	fp, [r3, #12]
3400a756:	f8cb 7004 	str.w	r7, [fp, #4]
3400a75a:	60b7      	str	r7, [r6, #8]
3400a75c:	f8c3 a014 	str.w	sl, [r3, #20]
3400a760:	5953      	ldr	r3, [r2, r5]
3400a762:	3301      	adds	r3, #1
3400a764:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400a766:	f8d8 3000 	ldr.w	r3, [r8]
3400a76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
3400a76c:	4299      	cmp	r1, r3
3400a76e:	bf88      	it	hi
3400a770:	2001      	movhi	r0, #1
3400a772:	e7a7      	b.n	3400a6c4 <xTaskIncrementTick+0x84>
        ++xPendedTicks;
3400a774:	4a0c      	ldr	r2, [pc, #48]	@ (3400a7a8 <xTaskIncrementTick+0x168>)
    BaseType_t xSwitchRequired = pdFALSE;
3400a776:	2000      	movs	r0, #0
        ++xPendedTicks;
3400a778:	6813      	ldr	r3, [r2, #0]
3400a77a:	3301      	adds	r3, #1
3400a77c:	6013      	str	r3, [r2, #0]
3400a77e:	e79b      	b.n	3400a6b8 <xTaskIncrementTick+0x78>
3400a780:	340a4858 	.word	0x340a4858
3400a784:	340a487c 	.word	0x340a487c
3400a788:	340a48c8 	.word	0x340a48c8
3400a78c:	340235d8 	.word	0x340235d8
3400a790:	3402eb91 	.word	0x3402eb91
3400a794:	34024348 	.word	0x34024348
3400a798:	340a48c4 	.word	0x340a48c4
3400a79c:	340a4868 	.word	0x340a4868
3400a7a0:	340a48f4 	.word	0x340a48f4
3400a7a4:	340a486c 	.word	0x340a486c
3400a7a8:	340a4870 	.word	0x340a4870
3400a7ac:	340a4860 	.word	0x340a4860
3400a7b0:	340a4d54 	.word	0x340a4d54
3400a7b4:	340a4878 	.word	0x340a4878

3400a7b8 <xTaskResumeAll>:
{
3400a7b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3400a7bc:	4c40      	ldr	r4, [pc, #256]	@ (3400a8c0 <xTaskResumeAll+0x108>)
3400a7be:	6823      	ldr	r3, [r4, #0]
3400a7c0:	b943      	cbnz	r3, 3400a7d4 <xTaskResumeAll+0x1c>
3400a7c2:	f000 fe7f 	bl	3400b4c4 <ulSetInterruptMask>
3400a7c6:	f640 0193 	movw	r1, #2195	@ 0x893
3400a7ca:	4b3e      	ldr	r3, [pc, #248]	@ (3400a8c4 <xTaskResumeAll+0x10c>)
3400a7cc:	4a3e      	ldr	r2, [pc, #248]	@ (3400a8c8 <xTaskResumeAll+0x110>)
3400a7ce:	483f      	ldr	r0, [pc, #252]	@ (3400a8cc <xTaskResumeAll+0x114>)
3400a7d0:	f013 f90c 	bl	3401d9ec <__assert_func>
    taskENTER_CRITICAL();
3400a7d4:	f000 fcf6 	bl	3400b1c4 <vPortEnterCritical>
        --uxSchedulerSuspended;
3400a7d8:	6823      	ldr	r3, [r4, #0]
3400a7da:	3b01      	subs	r3, #1
3400a7dc:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400a7de:	6823      	ldr	r3, [r4, #0]
3400a7e0:	b12b      	cbz	r3, 3400a7ee <xTaskResumeAll+0x36>
    BaseType_t xAlreadyYielded = pdFALSE;
3400a7e2:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
3400a7e4:	f000 fcfc 	bl	3400b1e0 <vPortExitCritical>
}
3400a7e8:	4620      	mov	r0, r4
3400a7ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
3400a7ee:	4a38      	ldr	r2, [pc, #224]	@ (3400a8d0 <xTaskResumeAll+0x118>)
3400a7f0:	6812      	ldr	r2, [r2, #0]
3400a7f2:	2a00      	cmp	r2, #0
3400a7f4:	d0f5      	beq.n	3400a7e2 <xTaskResumeAll+0x2a>
                    prvAddTaskToReadyList( pxTCB );
3400a7f6:	f04f 0c14 	mov.w	ip, #20
                        xYieldPending = pdTRUE;
3400a7fa:	f04f 0901 	mov.w	r9, #1
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3400a7fe:	4e35      	ldr	r6, [pc, #212]	@ (3400a8d4 <xTaskResumeAll+0x11c>)
                    prvAddTaskToReadyList( pxTCB );
3400a800:	4f35      	ldr	r7, [pc, #212]	@ (3400a8d8 <xTaskResumeAll+0x120>)
3400a802:	4936      	ldr	r1, [pc, #216]	@ (3400a8dc <xTaskResumeAll+0x124>)
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400a804:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 3400a8e8 <xTaskResumeAll+0x130>
                        xYieldPending = pdTRUE;
3400a808:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 3400a8e4 <xTaskResumeAll+0x12c>
3400a80c:	e03e      	b.n	3400a88c <xTaskResumeAll+0xd4>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a80e:	68f3      	ldr	r3, [r6, #12]
3400a810:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3400a812:	6a98      	ldr	r0, [r3, #40]	@ 0x28
3400a814:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
3400a818:	6094      	str	r4, [r2, #8]
3400a81a:	6062      	str	r2, [r4, #4]
3400a81c:	6842      	ldr	r2, [r0, #4]
3400a81e:	f103 0518 	add.w	r5, r3, #24
3400a822:	42aa      	cmp	r2, r5
3400a824:	f04f 0200 	mov.w	r2, #0
3400a828:	bf08      	it	eq
3400a82a:	6044      	streq	r4, [r0, #4]
3400a82c:	629a      	str	r2, [r3, #40]	@ 0x28
3400a82e:	6802      	ldr	r2, [r0, #0]
3400a830:	3a01      	subs	r2, #1
3400a832:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3400a834:	6958      	ldr	r0, [r3, #20]
3400a836:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
3400a83a:	6094      	str	r4, [r2, #8]
3400a83c:	6062      	str	r2, [r4, #4]
3400a83e:	6842      	ldr	r2, [r0, #4]
3400a840:	1d1d      	adds	r5, r3, #4
3400a842:	42aa      	cmp	r2, r5
3400a844:	6802      	ldr	r2, [r0, #0]
3400a846:	bf08      	it	eq
3400a848:	6044      	streq	r4, [r0, #4]
3400a84a:	3a01      	subs	r2, #1
3400a84c:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
3400a84e:	6838      	ldr	r0, [r7, #0]
3400a850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a852:	4282      	cmp	r2, r0
3400a854:	fb0c f002 	mul.w	r0, ip, r2
3400a858:	eb01 0a00 	add.w	sl, r1, r0
3400a85c:	f8da 4004 	ldr.w	r4, [sl, #4]
3400a860:	bf88      	it	hi
3400a862:	603a      	strhi	r2, [r7, #0]
3400a864:	f8d4 b008 	ldr.w	fp, [r4, #8]
3400a868:	609c      	str	r4, [r3, #8]
3400a86a:	f8c3 b00c 	str.w	fp, [r3, #12]
3400a86e:	f8cb 5004 	str.w	r5, [fp, #4]
3400a872:	60a5      	str	r5, [r4, #8]
3400a874:	580c      	ldr	r4, [r1, r0]
3400a876:	f8c3 a014 	str.w	sl, [r3, #20]
3400a87a:	3401      	adds	r4, #1
3400a87c:	500c      	str	r4, [r1, r0]
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400a87e:	f8de 0000 	ldr.w	r0, [lr]
3400a882:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
3400a884:	4282      	cmp	r2, r0
3400a886:	d901      	bls.n	3400a88c <xTaskResumeAll+0xd4>
                        xYieldPending = pdTRUE;
3400a888:	f8c8 9000 	str.w	r9, [r8]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3400a88c:	6832      	ldr	r2, [r6, #0]
3400a88e:	2a00      	cmp	r2, #0
3400a890:	d1bd      	bne.n	3400a80e <xTaskResumeAll+0x56>
                if( pxTCB != NULL )
3400a892:	b10b      	cbz	r3, 3400a898 <xTaskResumeAll+0xe0>
                    prvResetNextTaskUnblockTime();
3400a894:	f7ff fd14 	bl	3400a2c0 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
3400a898:	4d11      	ldr	r5, [pc, #68]	@ (3400a8e0 <xTaskResumeAll+0x128>)
3400a89a:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
3400a89c:	b144      	cbz	r4, 3400a8b0 <xTaskResumeAll+0xf8>
                                xYieldPending = pdTRUE;
3400a89e:	2701      	movs	r7, #1
3400a8a0:	4e10      	ldr	r6, [pc, #64]	@ (3400a8e4 <xTaskResumeAll+0x12c>)
                            if( xTaskIncrementTick() != pdFALSE )
3400a8a2:	f7ff fecd 	bl	3400a640 <xTaskIncrementTick>
3400a8a6:	b100      	cbz	r0, 3400a8aa <xTaskResumeAll+0xf2>
                                xYieldPending = pdTRUE;
3400a8a8:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
3400a8aa:	3c01      	subs	r4, #1
3400a8ac:	d1f9      	bne.n	3400a8a2 <xTaskResumeAll+0xea>
                        xPendedTicks = 0;
3400a8ae:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
3400a8b0:	4b0c      	ldr	r3, [pc, #48]	@ (3400a8e4 <xTaskResumeAll+0x12c>)
3400a8b2:	681b      	ldr	r3, [r3, #0]
3400a8b4:	2b00      	cmp	r3, #0
3400a8b6:	d094      	beq.n	3400a7e2 <xTaskResumeAll+0x2a>
                    taskYIELD_IF_USING_PREEMPTION();
3400a8b8:	f000 fc78 	bl	3400b1ac <vPortYield>
                        xAlreadyYielded = pdTRUE;
3400a8bc:	2401      	movs	r4, #1
3400a8be:	e791      	b.n	3400a7e4 <xTaskResumeAll+0x2c>
3400a8c0:	340a4858 	.word	0x340a4858
3400a8c4:	340235d8 	.word	0x340235d8
3400a8c8:	3402eba4 	.word	0x3402eba4
3400a8cc:	34024348 	.word	0x34024348
3400a8d0:	340a4880 	.word	0x340a4880
3400a8d4:	340a48b0 	.word	0x340a48b0
3400a8d8:	340a4878 	.word	0x340a4878
3400a8dc:	340a48f4 	.word	0x340a48f4
3400a8e0:	340a4870 	.word	0x340a4870
3400a8e4:	340a486c 	.word	0x340a486c
3400a8e8:	340a4d54 	.word	0x340a4d54

3400a8ec <vTaskDelay>:
    {
3400a8ec:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
3400a8ee:	b918      	cbnz	r0, 3400a8f8 <vTaskDelay+0xc>
    }
3400a8f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            portYIELD_WITHIN_API();
3400a8f4:	f000 bc5a 	b.w	3400b1ac <vPortYield>
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400a8f8:	4b0a      	ldr	r3, [pc, #40]	@ (3400a924 <vTaskDelay+0x38>)
3400a8fa:	6819      	ldr	r1, [r3, #0]
3400a8fc:	b141      	cbz	r1, 3400a910 <vTaskDelay+0x24>
3400a8fe:	f000 fde1 	bl	3400b4c4 <ulSetInterruptMask>
3400a902:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
3400a906:	4b08      	ldr	r3, [pc, #32]	@ (3400a928 <vTaskDelay+0x3c>)
3400a908:	4a08      	ldr	r2, [pc, #32]	@ (3400a92c <vTaskDelay+0x40>)
3400a90a:	4809      	ldr	r0, [pc, #36]	@ (3400a930 <vTaskDelay+0x44>)
3400a90c:	f013 f86e 	bl	3401d9ec <__assert_func>
            vTaskSuspendAll();
3400a910:	f7ff fe82 	bl	3400a618 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
3400a914:	f7ff fc90 	bl	3400a238 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
3400a918:	f7ff ff4e 	bl	3400a7b8 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
3400a91c:	2800      	cmp	r0, #0
3400a91e:	d0e7      	beq.n	3400a8f0 <vTaskDelay+0x4>
    }
3400a920:	bd08      	pop	{r3, pc}
3400a922:	bf00      	nop
3400a924:	340a4858 	.word	0x340a4858
3400a928:	340235d8 	.word	0x340235d8
3400a92c:	3402ebc7 	.word	0x3402ebc7
3400a930:	34024348 	.word	0x34024348

3400a934 <vTaskSwitchContext>:
{
3400a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
3400a936:	4b22      	ldr	r3, [pc, #136]	@ (3400a9c0 <vTaskSwitchContext+0x8c>)
3400a938:	681a      	ldr	r2, [r3, #0]
3400a93a:	4b22      	ldr	r3, [pc, #136]	@ (3400a9c4 <vTaskSwitchContext+0x90>)
3400a93c:	b112      	cbz	r2, 3400a944 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
3400a93e:	2201      	movs	r2, #1
3400a940:	601a      	str	r2, [r3, #0]
}
3400a942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xYieldPending = pdFALSE;
3400a944:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3400a946:	f012 fd43 	bl	3401d3d0 <TIM4_Get_Value>
3400a94a:	4a1f      	ldr	r2, [pc, #124]	@ (3400a9c8 <vTaskSwitchContext+0x94>)
            if( ulTotalRunTime > ulTaskSwitchedInTime )
3400a94c:	491f      	ldr	r1, [pc, #124]	@ (3400a9cc <vTaskSwitchContext+0x98>)
                ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3400a94e:	6010      	str	r0, [r2, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
3400a950:	6813      	ldr	r3, [r2, #0]
3400a952:	680c      	ldr	r4, [r1, #0]
3400a954:	42a3      	cmp	r3, r4
3400a956:	d906      	bls.n	3400a966 <vTaskSwitchContext+0x32>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3400a958:	4b1d      	ldr	r3, [pc, #116]	@ (3400a9d0 <vTaskSwitchContext+0x9c>)
3400a95a:	6815      	ldr	r5, [r2, #0]
3400a95c:	6818      	ldr	r0, [r3, #0]
3400a95e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
3400a960:	1b1b      	subs	r3, r3, r4
3400a962:	442b      	add	r3, r5
3400a964:	6543      	str	r3, [r0, #84]	@ 0x54
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a966:	2714      	movs	r7, #20
3400a968:	4d1a      	ldr	r5, [pc, #104]	@ (3400a9d4 <vTaskSwitchContext+0xa0>)
            ulTaskSwitchedInTime = ulTotalRunTime;
3400a96a:	6813      	ldr	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a96c:	682a      	ldr	r2, [r5, #0]
            ulTaskSwitchedInTime = ulTotalRunTime;
3400a96e:	600b      	str	r3, [r1, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a970:	4919      	ldr	r1, [pc, #100]	@ (3400a9d8 <vTaskSwitchContext+0xa4>)
3400a972:	1c54      	adds	r4, r2, #1
3400a974:	fb07 f302 	mul.w	r3, r7, r2
3400a978:	58ce      	ldr	r6, [r1, r3]
3400a97a:	18c8      	adds	r0, r1, r3
3400a97c:	b196      	cbz	r6, 3400a9a4 <vTaskSwitchContext+0x70>
3400a97e:	6844      	ldr	r4, [r0, #4]
3400a980:	3308      	adds	r3, #8
3400a982:	6864      	ldr	r4, [r4, #4]
3400a984:	440b      	add	r3, r1
3400a986:	429c      	cmp	r4, r3
3400a988:	bf08      	it	eq
3400a98a:	68c3      	ldreq	r3, [r0, #12]
3400a98c:	6044      	str	r4, [r0, #4]
3400a98e:	bf08      	it	eq
3400a990:	6043      	streq	r3, [r0, #4]
3400a992:	2314      	movs	r3, #20
3400a994:	fb03 1102 	mla	r1, r3, r2, r1
3400a998:	684b      	ldr	r3, [r1, #4]
3400a99a:	68d9      	ldr	r1, [r3, #12]
3400a99c:	4b0c      	ldr	r3, [pc, #48]	@ (3400a9d0 <vTaskSwitchContext+0x9c>)
3400a99e:	6019      	str	r1, [r3, #0]
3400a9a0:	602a      	str	r2, [r5, #0]
}
3400a9a2:	e7ce      	b.n	3400a942 <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a9a4:	3c01      	subs	r4, #1
3400a9a6:	d108      	bne.n	3400a9ba <vTaskSwitchContext+0x86>
3400a9a8:	f000 fd8c 	bl	3400b4c4 <ulSetInterruptMask>
3400a9ac:	f640 4133 	movw	r1, #3123	@ 0xc33
3400a9b0:	4b0a      	ldr	r3, [pc, #40]	@ (3400a9dc <vTaskSwitchContext+0xa8>)
3400a9b2:	4a0b      	ldr	r2, [pc, #44]	@ (3400a9e0 <vTaskSwitchContext+0xac>)
3400a9b4:	480b      	ldr	r0, [pc, #44]	@ (3400a9e4 <vTaskSwitchContext+0xb0>)
3400a9b6:	f013 f819 	bl	3401d9ec <__assert_func>
3400a9ba:	3a01      	subs	r2, #1
3400a9bc:	e7da      	b.n	3400a974 <vTaskSwitchContext+0x40>
3400a9be:	bf00      	nop
3400a9c0:	340a4858 	.word	0x340a4858
3400a9c4:	340a486c 	.word	0x340a486c
3400a9c8:	340a4850 	.word	0x340a4850
3400a9cc:	340a4854 	.word	0x340a4854
3400a9d0:	340a4d54 	.word	0x340a4d54
3400a9d4:	340a4878 	.word	0x340a4878
3400a9d8:	340a48f4 	.word	0x340a48f4
3400a9dc:	340235d8 	.word	0x340235d8
3400a9e0:	3402eb7e 	.word	0x3402eb7e
3400a9e4:	34024348 	.word	0x34024348

3400a9e8 <vTaskPlaceOnEventList>:
{
3400a9e8:	b510      	push	{r4, lr}
3400a9ea:	460c      	mov	r4, r1
    configASSERT( pxEventList );
3400a9ec:	b940      	cbnz	r0, 3400aa00 <vTaskPlaceOnEventList+0x18>
3400a9ee:	f000 fd69 	bl	3400b4c4 <ulSetInterruptMask>
3400a9f2:	f640 414b 	movw	r1, #3147	@ 0xc4b
3400a9f6:	4b08      	ldr	r3, [pc, #32]	@ (3400aa18 <vTaskPlaceOnEventList+0x30>)
3400a9f8:	4a08      	ldr	r2, [pc, #32]	@ (3400aa1c <vTaskPlaceOnEventList+0x34>)
3400a9fa:	4809      	ldr	r0, [pc, #36]	@ (3400aa20 <vTaskPlaceOnEventList+0x38>)
3400a9fc:	f012 fff6 	bl	3401d9ec <__assert_func>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400aa00:	4b08      	ldr	r3, [pc, #32]	@ (3400aa24 <vTaskPlaceOnEventList+0x3c>)
3400aa02:	6819      	ldr	r1, [r3, #0]
3400aa04:	3118      	adds	r1, #24
3400aa06:	f7fe ffbc 	bl	34009982 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3400aa0a:	4620      	mov	r0, r4
}
3400aa0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3400aa10:	2101      	movs	r1, #1
3400aa12:	f7ff bc11 	b.w	3400a238 <prvAddCurrentTaskToDelayedList>
3400aa16:	bf00      	nop
3400aa18:	340235d8 	.word	0x340235d8
3400aa1c:	3402eb68 	.word	0x3402eb68
3400aa20:	34024348 	.word	0x34024348
3400aa24:	340a4d54 	.word	0x340a4d54

3400aa28 <vTaskPlaceOnEventListRestricted>:
    {
3400aa28:	b570      	push	{r4, r5, r6, lr}
3400aa2a:	460c      	mov	r4, r1
3400aa2c:	4611      	mov	r1, r2
        configASSERT( pxEventList );
3400aa2e:	b940      	cbnz	r0, 3400aa42 <vTaskPlaceOnEventListRestricted+0x1a>
3400aa30:	f000 fd48 	bl	3400b4c4 <ulSetInterruptMask>
3400aa34:	f640 4181 	movw	r1, #3201	@ 0xc81
3400aa38:	4b11      	ldr	r3, [pc, #68]	@ (3400aa80 <vTaskPlaceOnEventListRestricted+0x58>)
3400aa3a:	4a12      	ldr	r2, [pc, #72]	@ (3400aa84 <vTaskPlaceOnEventListRestricted+0x5c>)
3400aa3c:	4812      	ldr	r0, [pc, #72]	@ (3400aa88 <vTaskPlaceOnEventListRestricted+0x60>)
3400aa3e:	f012 ffd5 	bl	3401d9ec <__assert_func>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400aa42:	4b12      	ldr	r3, [pc, #72]	@ (3400aa8c <vTaskPlaceOnEventListRestricted+0x64>)
3400aa44:	6842      	ldr	r2, [r0, #4]
3400aa46:	681d      	ldr	r5, [r3, #0]
3400aa48:	6896      	ldr	r6, [r2, #8]
3400aa4a:	61ea      	str	r2, [r5, #28]
3400aa4c:	681d      	ldr	r5, [r3, #0]
            xTicksToWait = portMAX_DELAY;
3400aa4e:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400aa50:	622e      	str	r6, [r5, #32]
3400aa52:	681d      	ldr	r5, [r3, #0]
3400aa54:	f105 0518 	add.w	r5, r5, #24
3400aa58:	6075      	str	r5, [r6, #4]
3400aa5a:	681d      	ldr	r5, [r3, #0]
3400aa5c:	681b      	ldr	r3, [r3, #0]
3400aa5e:	f105 0518 	add.w	r5, r5, #24
3400aa62:	6095      	str	r5, [r2, #8]
3400aa64:	6298      	str	r0, [r3, #40]	@ 0x28
3400aa66:	6803      	ldr	r3, [r0, #0]
3400aa68:	f103 0301 	add.w	r3, r3, #1
3400aa6c:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3400aa6e:	bf08      	it	eq
3400aa70:	4620      	moveq	r0, r4
    }
3400aa72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3400aa76:	bf18      	it	ne
3400aa78:	f04f 30ff 	movne.w	r0, #4294967295
3400aa7c:	f7ff bbdc 	b.w	3400a238 <prvAddCurrentTaskToDelayedList>
3400aa80:	340235d8 	.word	0x340235d8
3400aa84:	3402eb48 	.word	0x3402eb48
3400aa88:	34024348 	.word	0x34024348
3400aa8c:	340a4d54 	.word	0x340a4d54

3400aa90 <xTaskRemoveFromEventList>:
{
3400aa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400aa92:	68c3      	ldr	r3, [r0, #12]
3400aa94:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
3400aa96:	b943      	cbnz	r3, 3400aaaa <xTaskRemoveFromEventList+0x1a>
3400aa98:	f000 fd14 	bl	3400b4c4 <ulSetInterruptMask>
3400aa9c:	f640 41b1 	movw	r1, #3249	@ 0xcb1
3400aaa0:	4b27      	ldr	r3, [pc, #156]	@ (3400ab40 <xTaskRemoveFromEventList+0xb0>)
3400aaa2:	4a28      	ldr	r2, [pc, #160]	@ (3400ab44 <xTaskRemoveFromEventList+0xb4>)
3400aaa4:	4828      	ldr	r0, [pc, #160]	@ (3400ab48 <xTaskRemoveFromEventList+0xb8>)
3400aaa6:	f012 ffa1 	bl	3401d9ec <__assert_func>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3400aaaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400aaac:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
3400aab0:	6081      	str	r1, [r0, #8]
3400aab2:	6048      	str	r0, [r1, #4]
3400aab4:	6850      	ldr	r0, [r2, #4]
3400aab6:	f103 0418 	add.w	r4, r3, #24
3400aaba:	42a0      	cmp	r0, r4
3400aabc:	bf08      	it	eq
3400aabe:	6051      	streq	r1, [r2, #4]
3400aac0:	2100      	movs	r1, #0
3400aac2:	6299      	str	r1, [r3, #40]	@ 0x28
3400aac4:	6811      	ldr	r1, [r2, #0]
3400aac6:	3901      	subs	r1, #1
3400aac8:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400aaca:	4a20      	ldr	r2, [pc, #128]	@ (3400ab4c <xTaskRemoveFromEventList+0xbc>)
3400aacc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3400aace:	6812      	ldr	r2, [r2, #0]
3400aad0:	2a00      	cmp	r2, #0
3400aad2:	d129      	bne.n	3400ab28 <xTaskRemoveFromEventList+0x98>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3400aad4:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
3400aad8:	695a      	ldr	r2, [r3, #20]
3400aada:	60a0      	str	r0, [r4, #8]
3400aadc:	6044      	str	r4, [r0, #4]
3400aade:	6854      	ldr	r4, [r2, #4]
3400aae0:	1d1d      	adds	r5, r3, #4
3400aae2:	42ac      	cmp	r4, r5
3400aae4:	bf08      	it	eq
3400aae6:	6050      	streq	r0, [r2, #4]
3400aae8:	6810      	ldr	r0, [r2, #0]
3400aaea:	3801      	subs	r0, #1
3400aaec:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
3400aaee:	4a18      	ldr	r2, [pc, #96]	@ (3400ab50 <xTaskRemoveFromEventList+0xc0>)
3400aaf0:	6810      	ldr	r0, [r2, #0]
3400aaf2:	4281      	cmp	r1, r0
3400aaf4:	bf88      	it	hi
3400aaf6:	6011      	strhi	r1, [r2, #0]
3400aaf8:	2214      	movs	r2, #20
3400aafa:	434a      	muls	r2, r1
3400aafc:	4815      	ldr	r0, [pc, #84]	@ (3400ab54 <xTaskRemoveFromEventList+0xc4>)
3400aafe:	1886      	adds	r6, r0, r2
3400ab00:	6874      	ldr	r4, [r6, #4]
3400ab02:	68a7      	ldr	r7, [r4, #8]
3400ab04:	609c      	str	r4, [r3, #8]
3400ab06:	60df      	str	r7, [r3, #12]
3400ab08:	607d      	str	r5, [r7, #4]
3400ab0a:	60a5      	str	r5, [r4, #8]
3400ab0c:	615e      	str	r6, [r3, #20]
3400ab0e:	5883      	ldr	r3, [r0, r2]
3400ab10:	3301      	adds	r3, #1
3400ab12:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3400ab14:	4b10      	ldr	r3, [pc, #64]	@ (3400ab58 <xTaskRemoveFromEventList+0xc8>)
3400ab16:	681b      	ldr	r3, [r3, #0]
3400ab18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ab1a:	4299      	cmp	r1, r3
        xYieldPending = pdTRUE;
3400ab1c:	bf85      	ittet	hi
3400ab1e:	2001      	movhi	r0, #1
3400ab20:	4b0e      	ldrhi	r3, [pc, #56]	@ (3400ab5c <xTaskRemoveFromEventList+0xcc>)
        xReturn = pdFALSE;
3400ab22:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
3400ab24:	6018      	strhi	r0, [r3, #0]
}
3400ab26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3400ab28:	4a0d      	ldr	r2, [pc, #52]	@ (3400ab60 <xTaskRemoveFromEventList+0xd0>)
3400ab2a:	6850      	ldr	r0, [r2, #4]
3400ab2c:	6885      	ldr	r5, [r0, #8]
3400ab2e:	61d8      	str	r0, [r3, #28]
3400ab30:	621d      	str	r5, [r3, #32]
3400ab32:	606c      	str	r4, [r5, #4]
3400ab34:	6084      	str	r4, [r0, #8]
3400ab36:	629a      	str	r2, [r3, #40]	@ 0x28
3400ab38:	6813      	ldr	r3, [r2, #0]
3400ab3a:	3301      	adds	r3, #1
3400ab3c:	6013      	str	r3, [r2, #0]
3400ab3e:	e7e9      	b.n	3400ab14 <xTaskRemoveFromEventList+0x84>
3400ab40:	340235d8 	.word	0x340235d8
3400ab44:	3402eb2f 	.word	0x3402eb2f
3400ab48:	34024348 	.word	0x34024348
3400ab4c:	340a4858 	.word	0x340a4858
3400ab50:	340a4878 	.word	0x340a4878
3400ab54:	340a48f4 	.word	0x340a48f4
3400ab58:	340a4d54 	.word	0x340a4d54
3400ab5c:	340a486c 	.word	0x340a486c
3400ab60:	340a48b0 	.word	0x340a48b0

3400ab64 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
3400ab64:	4b03      	ldr	r3, [pc, #12]	@ (3400ab74 <vTaskInternalSetTimeOutState+0x10>)
3400ab66:	681b      	ldr	r3, [r3, #0]
3400ab68:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
3400ab6a:	4b03      	ldr	r3, [pc, #12]	@ (3400ab78 <vTaskInternalSetTimeOutState+0x14>)
3400ab6c:	681b      	ldr	r3, [r3, #0]
3400ab6e:	6043      	str	r3, [r0, #4]
}
3400ab70:	4770      	bx	lr
3400ab72:	bf00      	nop
3400ab74:	340a4868 	.word	0x340a4868
3400ab78:	340a487c 	.word	0x340a487c

3400ab7c <xTaskCheckForTimeOut>:
{
3400ab7c:	b570      	push	{r4, r5, r6, lr}
3400ab7e:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
3400ab80:	4604      	mov	r4, r0
3400ab82:	b940      	cbnz	r0, 3400ab96 <xTaskCheckForTimeOut+0x1a>
3400ab84:	f000 fc9e 	bl	3400b4c4 <ulSetInterruptMask>
3400ab88:	f640 512c 	movw	r1, #3372	@ 0xd2c
3400ab8c:	4b16      	ldr	r3, [pc, #88]	@ (3400abe8 <xTaskCheckForTimeOut+0x6c>)
3400ab8e:	4a17      	ldr	r2, [pc, #92]	@ (3400abec <xTaskCheckForTimeOut+0x70>)
    configASSERT( pxTicksToWait );
3400ab90:	4817      	ldr	r0, [pc, #92]	@ (3400abf0 <xTaskCheckForTimeOut+0x74>)
3400ab92:	f012 ff2b 	bl	3401d9ec <__assert_func>
3400ab96:	b931      	cbnz	r1, 3400aba6 <xTaskCheckForTimeOut+0x2a>
3400ab98:	f000 fc94 	bl	3400b4c4 <ulSetInterruptMask>
3400ab9c:	f640 512d 	movw	r1, #3373	@ 0xd2d
3400aba0:	4b11      	ldr	r3, [pc, #68]	@ (3400abe8 <xTaskCheckForTimeOut+0x6c>)
3400aba2:	4a12      	ldr	r2, [pc, #72]	@ (3400abec <xTaskCheckForTimeOut+0x70>)
3400aba4:	e7f4      	b.n	3400ab90 <xTaskCheckForTimeOut+0x14>
    taskENTER_CRITICAL();
3400aba6:	f000 fb0d 	bl	3400b1c4 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
3400abaa:	4b12      	ldr	r3, [pc, #72]	@ (3400abf4 <xTaskCheckForTimeOut+0x78>)
3400abac:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
3400abae:	682b      	ldr	r3, [r5, #0]
3400abb0:	1c5a      	adds	r2, r3, #1
3400abb2:	d017      	beq.n	3400abe4 <xTaskCheckForTimeOut+0x68>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
3400abb4:	4810      	ldr	r0, [pc, #64]	@ (3400abf8 <xTaskCheckForTimeOut+0x7c>)
3400abb6:	6826      	ldr	r6, [r4, #0]
3400abb8:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3400abba:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
3400abbc:	4286      	cmp	r6, r0
3400abbe:	d008      	beq.n	3400abd2 <xTaskCheckForTimeOut+0x56>
3400abc0:	428a      	cmp	r2, r1
3400abc2:	d806      	bhi.n	3400abd2 <xTaskCheckForTimeOut+0x56>
            *pxTicksToWait = ( TickType_t ) 0;
3400abc4:	2300      	movs	r3, #0
            xReturn = pdTRUE;
3400abc6:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
3400abc8:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
3400abca:	f000 fb09 	bl	3400b1e0 <vPortExitCritical>
}
3400abce:	4620      	mov	r0, r4
3400abd0:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3400abd2:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
3400abd4:	4283      	cmp	r3, r0
3400abd6:	d9f5      	bls.n	3400abc4 <xTaskCheckForTimeOut+0x48>
            *pxTicksToWait -= xElapsedTime;
3400abd8:	1a5b      	subs	r3, r3, r1
3400abda:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
3400abdc:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
3400abde:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
3400abe0:	f7ff ffc0 	bl	3400ab64 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
3400abe4:	2400      	movs	r4, #0
3400abe6:	e7f0      	b.n	3400abca <xTaskCheckForTimeOut+0x4e>
3400abe8:	340235d8 	.word	0x340235d8
3400abec:	3402eb1a 	.word	0x3402eb1a
3400abf0:	34024348 	.word	0x34024348
3400abf4:	340a487c 	.word	0x340a487c
3400abf8:	340a4868 	.word	0x340a4868

3400abfc <vTaskMissedYield>:
    xYieldPending = pdTRUE;
3400abfc:	2201      	movs	r2, #1
3400abfe:	4b01      	ldr	r3, [pc, #4]	@ (3400ac04 <vTaskMissedYield+0x8>)
3400ac00:	601a      	str	r2, [r3, #0]
}
3400ac02:	4770      	bx	lr
3400ac04:	340a486c 	.word	0x340a486c

3400ac08 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
3400ac08:	4b05      	ldr	r3, [pc, #20]	@ (3400ac20 <xTaskGetSchedulerState+0x18>)
3400ac0a:	681b      	ldr	r3, [r3, #0]
3400ac0c:	b133      	cbz	r3, 3400ac1c <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400ac0e:	4b05      	ldr	r3, [pc, #20]	@ (3400ac24 <xTaskGetSchedulerState+0x1c>)
3400ac10:	6818      	ldr	r0, [r3, #0]
3400ac12:	fab0 f080 	clz	r0, r0
3400ac16:	0940      	lsrs	r0, r0, #5
3400ac18:	0040      	lsls	r0, r0, #1
3400ac1a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
3400ac1c:	2001      	movs	r0, #1
    }
3400ac1e:	4770      	bx	lr
3400ac20:	340a4874 	.word	0x340a4874
3400ac24:	340a4858 	.word	0x340a4858

3400ac28 <xTaskPriorityInherit>:
    {
3400ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
3400ac2a:	4604      	mov	r4, r0
3400ac2c:	2800      	cmp	r0, #0
3400ac2e:	d02e      	beq.n	3400ac8e <xTaskPriorityInherit+0x66>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3400ac30:	4d1d      	ldr	r5, [pc, #116]	@ (3400aca8 <xTaskPriorityInherit+0x80>)
3400ac32:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400ac34:	682a      	ldr	r2, [r5, #0]
3400ac36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400ac38:	4293      	cmp	r3, r2
3400ac3a:	d22d      	bcs.n	3400ac98 <xTaskPriorityInherit+0x70>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400ac3c:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
3400ac3e:	4e1b      	ldr	r6, [pc, #108]	@ (3400acac <xTaskPriorityInherit+0x84>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400ac40:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400ac42:	bfa1      	itttt	ge
3400ac44:	682a      	ldrge	r2, [r5, #0]
3400ac46:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
3400ac48:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
3400ac4c:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
3400ac4e:	2214      	movs	r2, #20
3400ac50:	fb02 6303 	mla	r3, r2, r3, r6
3400ac54:	6942      	ldr	r2, [r0, #20]
3400ac56:	429a      	cmp	r2, r3
3400ac58:	d11a      	bne.n	3400ac90 <xTaskPriorityInherit+0x68>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400ac5a:	1d07      	adds	r7, r0, #4
3400ac5c:	4638      	mov	r0, r7
3400ac5e:	f7fe fea7 	bl	340099b0 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400ac62:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400ac64:	4a12      	ldr	r2, [pc, #72]	@ (3400acb0 <xTaskPriorityInherit+0x88>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400ac66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400ac68:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400ac6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400ac6c:	428b      	cmp	r3, r1
3400ac6e:	bf88      	it	hi
3400ac70:	6013      	strhi	r3, [r2, #0]
3400ac72:	2214      	movs	r2, #20
3400ac74:	4353      	muls	r3, r2
3400ac76:	18f1      	adds	r1, r6, r3
3400ac78:	684a      	ldr	r2, [r1, #4]
3400ac7a:	6890      	ldr	r0, [r2, #8]
3400ac7c:	60a2      	str	r2, [r4, #8]
3400ac7e:	60e0      	str	r0, [r4, #12]
3400ac80:	6047      	str	r7, [r0, #4]
3400ac82:	6097      	str	r7, [r2, #8]
3400ac84:	58f2      	ldr	r2, [r6, r3]
3400ac86:	6161      	str	r1, [r4, #20]
3400ac88:	3201      	adds	r2, #1
3400ac8a:	50f2      	str	r2, [r6, r3]
                xReturn = pdTRUE;
3400ac8c:	2001      	movs	r0, #1
    }
3400ac8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400ac90:	682b      	ldr	r3, [r5, #0]
3400ac92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ac94:	62c3      	str	r3, [r0, #44]	@ 0x2c
3400ac96:	e7f9      	b.n	3400ac8c <xTaskPriorityInherit+0x64>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3400ac98:	682b      	ldr	r3, [r5, #0]
3400ac9a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
3400ac9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ac9e:	4298      	cmp	r0, r3
3400aca0:	bf2c      	ite	cs
3400aca2:	2000      	movcs	r0, #0
3400aca4:	2001      	movcc	r0, #1
3400aca6:	e7f2      	b.n	3400ac8e <xTaskPriorityInherit+0x66>
3400aca8:	340a4d54 	.word	0x340a4d54
3400acac:	340a48f4 	.word	0x340a48f4
3400acb0:	340a4878 	.word	0x340a4878

3400acb4 <xTaskPriorityDisinherit>:
    {
3400acb4:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
3400acb6:	4604      	mov	r4, r0
3400acb8:	b908      	cbnz	r0, 3400acbe <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
3400acba:	2000      	movs	r0, #0
    }
3400acbc:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB == pxCurrentTCB );
3400acbe:	4b1e      	ldr	r3, [pc, #120]	@ (3400ad38 <xTaskPriorityDisinherit+0x84>)
3400acc0:	681b      	ldr	r3, [r3, #0]
3400acc2:	4283      	cmp	r3, r0
3400acc4:	d008      	beq.n	3400acd8 <xTaskPriorityDisinherit+0x24>
3400acc6:	f000 fbfd 	bl	3400b4c4 <ulSetInterruptMask>
3400acca:	f241 018c 	movw	r1, #4236	@ 0x108c
3400acce:	4b1b      	ldr	r3, [pc, #108]	@ (3400ad3c <xTaskPriorityDisinherit+0x88>)
3400acd0:	4a1b      	ldr	r2, [pc, #108]	@ (3400ad40 <xTaskPriorityDisinherit+0x8c>)
            configASSERT( pxTCB->uxMutexesHeld );
3400acd2:	481c      	ldr	r0, [pc, #112]	@ (3400ad44 <xTaskPriorityDisinherit+0x90>)
3400acd4:	f012 fe8a 	bl	3401d9ec <__assert_func>
3400acd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400acda:	b933      	cbnz	r3, 3400acea <xTaskPriorityDisinherit+0x36>
3400acdc:	f000 fbf2 	bl	3400b4c4 <ulSetInterruptMask>
3400ace0:	f241 018d 	movw	r1, #4237	@ 0x108d
3400ace4:	4b15      	ldr	r3, [pc, #84]	@ (3400ad3c <xTaskPriorityDisinherit+0x88>)
3400ace6:	4a16      	ldr	r2, [pc, #88]	@ (3400ad40 <xTaskPriorityDisinherit+0x8c>)
3400ace8:	e7f3      	b.n	3400acd2 <xTaskPriorityDisinherit+0x1e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400acea:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
3400acec:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
3400acee:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400acf0:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
3400acf2:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400acf4:	d0e1      	beq.n	3400acba <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3400acf6:	2b00      	cmp	r3, #0
3400acf8:	d1df      	bne.n	3400acba <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400acfa:	1d05      	adds	r5, r0, #4
3400acfc:	4628      	mov	r0, r5
3400acfe:	f7fe fe57 	bl	340099b0 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
3400ad02:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400ad04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
3400ad08:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
3400ad0a:	4a0f      	ldr	r2, [pc, #60]	@ (3400ad48 <xTaskPriorityDisinherit+0x94>)
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
3400ad0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
3400ad0e:	6811      	ldr	r1, [r2, #0]
3400ad10:	428b      	cmp	r3, r1
3400ad12:	f04f 0114 	mov.w	r1, #20
3400ad16:	bf88      	it	hi
3400ad18:	6013      	strhi	r3, [r2, #0]
3400ad1a:	434b      	muls	r3, r1
3400ad1c:	4a0b      	ldr	r2, [pc, #44]	@ (3400ad4c <xTaskPriorityDisinherit+0x98>)
3400ad1e:	18d0      	adds	r0, r2, r3
3400ad20:	6841      	ldr	r1, [r0, #4]
3400ad22:	688e      	ldr	r6, [r1, #8]
3400ad24:	60a1      	str	r1, [r4, #8]
3400ad26:	60e6      	str	r6, [r4, #12]
3400ad28:	6075      	str	r5, [r6, #4]
3400ad2a:	608d      	str	r5, [r1, #8]
3400ad2c:	58d1      	ldr	r1, [r2, r3]
3400ad2e:	6160      	str	r0, [r4, #20]
3400ad30:	3101      	adds	r1, #1
                    xReturn = pdTRUE;
3400ad32:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
3400ad34:	50d1      	str	r1, [r2, r3]
        return xReturn;
3400ad36:	e7c1      	b.n	3400acbc <xTaskPriorityDisinherit+0x8>
3400ad38:	340a4d54 	.word	0x340a4d54
3400ad3c:	340235d8 	.word	0x340235d8
3400ad40:	3402eb02 	.word	0x3402eb02
3400ad44:	34024348 	.word	0x34024348
3400ad48:	340a4878 	.word	0x340a4878
3400ad4c:	340a48f4 	.word	0x340a48f4

3400ad50 <vTaskPriorityDisinheritAfterTimeout>:
    {
3400ad50:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
3400ad52:	4604      	mov	r4, r0
3400ad54:	2800      	cmp	r0, #0
3400ad56:	d044      	beq.n	3400ade2 <vTaskPriorityDisinheritAfterTimeout+0x92>
            configASSERT( pxTCB->uxMutexesHeld );
3400ad58:	6d02      	ldr	r2, [r0, #80]	@ 0x50
3400ad5a:	b942      	cbnz	r2, 3400ad6e <vTaskPriorityDisinheritAfterTimeout+0x1e>
3400ad5c:	f000 fbb2 	bl	3400b4c4 <ulSetInterruptMask>
3400ad60:	f241 01dc 	movw	r1, #4316	@ 0x10dc
3400ad64:	4b1f      	ldr	r3, [pc, #124]	@ (3400ade4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
3400ad66:	4a20      	ldr	r2, [pc, #128]	@ (3400ade8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
                    configASSERT( pxTCB != pxCurrentTCB );
3400ad68:	4820      	ldr	r0, [pc, #128]	@ (3400adec <vTaskPriorityDisinheritAfterTimeout+0x9c>)
3400ad6a:	f012 fe3f 	bl	3401d9ec <__assert_func>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3400ad6e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
3400ad70:	4299      	cmp	r1, r3
3400ad72:	bf38      	it	cc
3400ad74:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
3400ad76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400ad78:	428b      	cmp	r3, r1
3400ad7a:	d032      	beq.n	3400ade2 <vTaskPriorityDisinheritAfterTimeout+0x92>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3400ad7c:	2a01      	cmp	r2, #1
3400ad7e:	d130      	bne.n	3400ade2 <vTaskPriorityDisinheritAfterTimeout+0x92>
                    configASSERT( pxTCB != pxCurrentTCB );
3400ad80:	4a1b      	ldr	r2, [pc, #108]	@ (3400adf0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
3400ad82:	6812      	ldr	r2, [r2, #0]
3400ad84:	4282      	cmp	r2, r0
3400ad86:	d106      	bne.n	3400ad96 <vTaskPriorityDisinheritAfterTimeout+0x46>
3400ad88:	f000 fb9c 	bl	3400b4c4 <ulSetInterruptMask>
3400ad8c:	f241 01f7 	movw	r1, #4343	@ 0x10f7
3400ad90:	4b14      	ldr	r3, [pc, #80]	@ (3400ade4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
3400ad92:	4a15      	ldr	r2, [pc, #84]	@ (3400ade8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
3400ad94:	e7e8      	b.n	3400ad68 <vTaskPriorityDisinheritAfterTimeout+0x18>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400ad96:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400ad98:	4d16      	ldr	r5, [pc, #88]	@ (3400adf4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400ad9a:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400ad9c:	f04f 0214 	mov.w	r2, #20
3400ada0:	fb02 5303 	mla	r3, r2, r3, r5
3400ada4:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
3400ada6:	62c1      	str	r1, [r0, #44]	@ 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400ada8:	bfa4      	itt	ge
3400adaa:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
3400adae:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400adb0:	429a      	cmp	r2, r3
3400adb2:	d116      	bne.n	3400ade2 <vTaskPriorityDisinheritAfterTimeout+0x92>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400adb4:	1d06      	adds	r6, r0, #4
3400adb6:	4630      	mov	r0, r6
3400adb8:	f7fe fdfa 	bl	340099b0 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
3400adbc:	4a0e      	ldr	r2, [pc, #56]	@ (3400adf8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
3400adbe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400adc0:	6811      	ldr	r1, [r2, #0]
3400adc2:	428b      	cmp	r3, r1
3400adc4:	bf88      	it	hi
3400adc6:	6013      	strhi	r3, [r2, #0]
3400adc8:	2214      	movs	r2, #20
3400adca:	4353      	muls	r3, r2
3400adcc:	18e9      	adds	r1, r5, r3
3400adce:	684a      	ldr	r2, [r1, #4]
3400add0:	6890      	ldr	r0, [r2, #8]
3400add2:	60a2      	str	r2, [r4, #8]
3400add4:	60e0      	str	r0, [r4, #12]
3400add6:	6046      	str	r6, [r0, #4]
3400add8:	6096      	str	r6, [r2, #8]
3400adda:	58ea      	ldr	r2, [r5, r3]
3400addc:	6161      	str	r1, [r4, #20]
3400adde:	3201      	adds	r2, #1
3400ade0:	50ea      	str	r2, [r5, r3]
    }
3400ade2:	bd70      	pop	{r4, r5, r6, pc}
3400ade4:	340235d8 	.word	0x340235d8
3400ade8:	3402eade 	.word	0x3402eade
3400adec:	34024348 	.word	0x34024348
3400adf0:	340a4d54 	.word	0x340a4d54
3400adf4:	340a48f4 	.word	0x340a48f4
3400adf8:	340a4878 	.word	0x340a4878

3400adfc <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
3400adfc:	4b04      	ldr	r3, [pc, #16]	@ (3400ae10 <pvTaskIncrementMutexHeldCount+0x14>)
3400adfe:	681a      	ldr	r2, [r3, #0]
3400ae00:	b11a      	cbz	r2, 3400ae0a <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
3400ae02:	6819      	ldr	r1, [r3, #0]
3400ae04:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
3400ae06:	3201      	adds	r2, #1
3400ae08:	650a      	str	r2, [r1, #80]	@ 0x50
        return pxCurrentTCB;
3400ae0a:	6818      	ldr	r0, [r3, #0]
    }
3400ae0c:	4770      	bx	lr
3400ae0e:	bf00      	nop
3400ae10:	340a4d54 	.word	0x340a4d54

3400ae14 <ulTaskGetIdleRunTimeCounter>:
        return xTask->ulRunTimeCounter;
3400ae14:	4b01      	ldr	r3, [pc, #4]	@ (3400ae1c <ulTaskGetIdleRunTimeCounter+0x8>)
3400ae16:	681b      	ldr	r3, [r3, #0]
    }
3400ae18:	6d58      	ldr	r0, [r3, #84]	@ 0x54
3400ae1a:	4770      	bx	lr
3400ae1c:	340a485c 	.word	0x340a485c

3400ae20 <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
3400ae20:	4291      	cmp	r1, r2
    {
3400ae22:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
3400ae24:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
3400ae26:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
3400ae28:	d80a      	bhi.n	3400ae40 <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400ae2a:	1ad2      	subs	r2, r2, r3
3400ae2c:	6983      	ldr	r3, [r0, #24]
3400ae2e:	429a      	cmp	r2, r3
3400ae30:	d20d      	bcs.n	3400ae4e <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
3400ae32:	4b08      	ldr	r3, [pc, #32]	@ (3400ae54 <prvInsertTimerInActiveList+0x34>)
3400ae34:	1d01      	adds	r1, r0, #4
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
3400ae36:	6818      	ldr	r0, [r3, #0]
3400ae38:	f7fe fda3 	bl	34009982 <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
3400ae3c:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
3400ae3e:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
3400ae40:	429a      	cmp	r2, r3
3400ae42:	d201      	bcs.n	3400ae48 <prvInsertTimerInActiveList+0x28>
3400ae44:	4299      	cmp	r1, r3
3400ae46:	d202      	bcs.n	3400ae4e <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
3400ae48:	4b03      	ldr	r3, [pc, #12]	@ (3400ae58 <prvInsertTimerInActiveList+0x38>)
3400ae4a:	1d01      	adds	r1, r0, #4
3400ae4c:	e7f3      	b.n	3400ae36 <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
3400ae4e:	2001      	movs	r0, #1
        return xProcessTimerNow;
3400ae50:	e7f5      	b.n	3400ae3e <prvInsertTimerInActiveList+0x1e>
3400ae52:	bf00      	nop
3400ae54:	340a4e54 	.word	0x340a4e54
3400ae58:	340a4e58 	.word	0x340a4e58

3400ae5c <prvReloadTimer>:
    {
3400ae5c:	b570      	push	{r4, r5, r6, lr}
3400ae5e:	4604      	mov	r4, r0
3400ae60:	460d      	mov	r5, r1
3400ae62:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
3400ae64:	69a1      	ldr	r1, [r4, #24]
3400ae66:	462b      	mov	r3, r5
3400ae68:	4632      	mov	r2, r6
3400ae6a:	4620      	mov	r0, r4
3400ae6c:	4429      	add	r1, r5
3400ae6e:	f7ff ffd7 	bl	3400ae20 <prvInsertTimerInActiveList>
3400ae72:	b900      	cbnz	r0, 3400ae76 <prvReloadTimer+0x1a>
    }
3400ae74:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
3400ae76:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400ae78:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
3400ae7a:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400ae7c:	6a23      	ldr	r3, [r4, #32]
3400ae7e:	4798      	blx	r3
3400ae80:	e7f0      	b.n	3400ae64 <prvReloadTimer+0x8>
	...

3400ae84 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400ae84:	4b0e      	ldr	r3, [pc, #56]	@ (3400aec0 <prvProcessExpiredTimer+0x3c>)
    {
3400ae86:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400ae88:	681b      	ldr	r3, [r3, #0]
    {
3400ae8a:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400ae8c:	68db      	ldr	r3, [r3, #12]
    {
3400ae8e:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400ae90:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
3400ae92:	1d20      	adds	r0, r4, #4
3400ae94:	f7fe fd8c 	bl	340099b0 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
3400ae98:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400ae9c:	075a      	lsls	r2, r3, #29
3400ae9e:	d509      	bpl.n	3400aeb4 <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
3400aea0:	4632      	mov	r2, r6
3400aea2:	4629      	mov	r1, r5
3400aea4:	4620      	mov	r0, r4
3400aea6:	f7ff ffd9 	bl	3400ae5c <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400aeaa:	4620      	mov	r0, r4
3400aeac:	6a23      	ldr	r3, [r4, #32]
    }
3400aeae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400aeb2:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400aeb4:	f023 0301 	bic.w	r3, r3, #1
3400aeb8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
3400aebc:	e7f5      	b.n	3400aeaa <prvProcessExpiredTimer+0x26>
3400aebe:	bf00      	nop
3400aec0:	340a4e58 	.word	0x340a4e58

3400aec4 <prvSampleTimeNow>:
    {
3400aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400aec6:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
3400aec8:	f7ff fbae 	bl	3400a628 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
3400aecc:	4e0d      	ldr	r6, [pc, #52]	@ (3400af04 <prvSampleTimeNow+0x40>)
        xTimeNow = xTaskGetTickCount();
3400aece:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
3400aed0:	6833      	ldr	r3, [r6, #0]
3400aed2:	4283      	cmp	r3, r0
3400aed4:	d909      	bls.n	3400aeea <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
3400aed6:	4f0c      	ldr	r7, [pc, #48]	@ (3400af08 <prvSampleTimeNow+0x44>)
3400aed8:	683b      	ldr	r3, [r7, #0]
3400aeda:	681a      	ldr	r2, [r3, #0]
3400aedc:	b952      	cbnz	r2, 3400aef4 <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
3400aede:	4a0b      	ldr	r2, [pc, #44]	@ (3400af0c <prvSampleTimeNow+0x48>)
3400aee0:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
3400aee2:	6013      	str	r3, [r2, #0]
        pxCurrentTimerList = pxOverflowTimerList;
3400aee4:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
3400aee6:	2301      	movs	r3, #1
3400aee8:	e000      	b.n	3400aeec <prvSampleTimeNow+0x28>
3400aeea:	2300      	movs	r3, #0
    }
3400aeec:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
3400aeee:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
3400aef0:	6034      	str	r4, [r6, #0]
    }
3400aef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
3400aef4:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
3400aef6:	f04f 31ff 	mov.w	r1, #4294967295
3400aefa:	6818      	ldr	r0, [r3, #0]
3400aefc:	f7ff ffc2 	bl	3400ae84 <prvProcessExpiredTimer>
3400af00:	e7ea      	b.n	3400aed8 <prvSampleTimeNow+0x14>
3400af02:	bf00      	nop
3400af04:	340a4e48 	.word	0x340a4e48
3400af08:	340a4e58 	.word	0x340a4e58
3400af0c:	340a4e54 	.word	0x340a4e54

3400af10 <prvTimerTask>:
    {
3400af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400af14:	4f50      	ldr	r7, [pc, #320]	@ (3400b058 <prvTimerTask+0x148>)
3400af16:	4e51      	ldr	r6, [pc, #324]	@ (3400b05c <prvTimerTask+0x14c>)
    {
3400af18:	b086      	sub	sp, #24
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400af1a:	683b      	ldr	r3, [r7, #0]
3400af1c:	f8d3 8000 	ldr.w	r8, [r3]
3400af20:	f1b8 0f00 	cmp.w	r8, #0
3400af24:	d032      	beq.n	3400af8c <prvTimerTask+0x7c>
3400af26:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
3400af28:	68db      	ldr	r3, [r3, #12]
3400af2a:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
3400af2e:	f7ff fb73 	bl	3400a618 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400af32:	a802      	add	r0, sp, #8
3400af34:	f7ff ffc6 	bl	3400aec4 <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
3400af38:	9b02      	ldr	r3, [sp, #8]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400af3a:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
3400af3c:	2b00      	cmp	r3, #0
3400af3e:	d13a      	bne.n	3400afb6 <prvTimerTask+0xa6>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
3400af40:	bb34      	cbnz	r4, 3400af90 <prvTimerTask+0x80>
3400af42:	4540      	cmp	r0, r8
3400af44:	d32a      	bcc.n	3400af9c <prvTimerTask+0x8c>
                    ( void ) xTaskResumeAll();
3400af46:	f7ff fc37 	bl	3400a7b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
3400af4a:	4629      	mov	r1, r5
3400af4c:	4640      	mov	r0, r8
3400af4e:	f7ff ff99 	bl	3400ae84 <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
3400af52:	2200      	movs	r2, #0
3400af54:	6830      	ldr	r0, [r6, #0]
3400af56:	a902      	add	r1, sp, #8
3400af58:	f7fe ff7e 	bl	34009e58 <xQueueReceive>
3400af5c:	2800      	cmp	r0, #0
3400af5e:	d0dc      	beq.n	3400af1a <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
3400af60:	9b02      	ldr	r3, [sp, #8]
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
3400af62:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
3400af64:	2b00      	cmp	r3, #0
3400af66:	db29      	blt.n	3400afbc <prvTimerTask+0xac>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
3400af68:	9c04      	ldr	r4, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
3400af6a:	6963      	ldr	r3, [r4, #20]
3400af6c:	bb6b      	cbnz	r3, 3400afca <prvTimerTask+0xba>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400af6e:	a801      	add	r0, sp, #4
3400af70:	f7ff ffa8 	bl	3400aec4 <prvSampleTimeNow>
                switch( xMessage.xMessageID )
3400af74:	9b02      	ldr	r3, [sp, #8]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400af76:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
3400af78:	3b01      	subs	r3, #1
3400af7a:	2b08      	cmp	r3, #8
3400af7c:	d8e9      	bhi.n	3400af52 <prvTimerTask+0x42>
3400af7e:	e8df f003 	tbb	[pc, r3]
3400af82:	2828      	.short	0x2828
3400af84:	28644b64 	.word	0x28644b64
3400af88:	6428      	.short	0x6428
3400af8a:	4b          	.byte	0x4b
3400af8b:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400af8c:	2401      	movs	r4, #1
3400af8e:	e7ce      	b.n	3400af2e <prvTimerTask+0x1e>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
3400af90:	4b33      	ldr	r3, [pc, #204]	@ (3400b060 <prvTimerTask+0x150>)
3400af92:	681b      	ldr	r3, [r3, #0]
3400af94:	681c      	ldr	r4, [r3, #0]
3400af96:	fab4 f484 	clz	r4, r4
3400af9a:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
3400af9c:	4622      	mov	r2, r4
3400af9e:	6830      	ldr	r0, [r6, #0]
3400afa0:	eba8 0105 	sub.w	r1, r8, r5
3400afa4:	f7ff f8fe 	bl	3400a1a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
3400afa8:	f7ff fc06 	bl	3400a7b8 <xTaskResumeAll>
3400afac:	2800      	cmp	r0, #0
3400afae:	d1d0      	bne.n	3400af52 <prvTimerTask+0x42>
                        portYIELD_WITHIN_API();
3400afb0:	f000 f8fc 	bl	3400b1ac <vPortYield>
3400afb4:	e7cd      	b.n	3400af52 <prvTimerTask+0x42>
                ( void ) xTaskResumeAll();
3400afb6:	f7ff fbff 	bl	3400a7b8 <xTaskResumeAll>
    }
3400afba:	e7ca      	b.n	3400af52 <prvTimerTask+0x42>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
3400afbc:	9b03      	ldr	r3, [sp, #12]
3400afbe:	9905      	ldr	r1, [sp, #20]
3400afc0:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
3400afc2:	9b02      	ldr	r3, [sp, #8]
3400afc4:	2b00      	cmp	r3, #0
3400afc6:	dbc4      	blt.n	3400af52 <prvTimerTask+0x42>
3400afc8:	e7ce      	b.n	3400af68 <prvTimerTask+0x58>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
3400afca:	1d20      	adds	r0, r4, #4
3400afcc:	f7fe fcf0 	bl	340099b0 <uxListRemove>
3400afd0:	e7cd      	b.n	3400af6e <prvTimerTask+0x5e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400afd2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
3400afd6:	69a1      	ldr	r1, [r4, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400afd8:	f043 0301 	orr.w	r3, r3, #1
3400afdc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
3400afe0:	9b03      	ldr	r3, [sp, #12]
3400afe2:	4602      	mov	r2, r0
3400afe4:	4419      	add	r1, r3
3400afe6:	4620      	mov	r0, r4
3400afe8:	f7ff ff1a 	bl	3400ae20 <prvInsertTimerInActiveList>
3400afec:	2800      	cmp	r0, #0
3400afee:	d0b0      	beq.n	3400af52 <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
3400aff0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400aff4:	075a      	lsls	r2, r3, #29
3400aff6:	d50a      	bpl.n	3400b00e <prvTimerTask+0xfe>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
3400aff8:	69a3      	ldr	r3, [r4, #24]
3400affa:	9903      	ldr	r1, [sp, #12]
3400affc:	462a      	mov	r2, r5
3400affe:	4620      	mov	r0, r4
3400b000:	4419      	add	r1, r3
3400b002:	f7ff ff2b 	bl	3400ae5c <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b006:	4620      	mov	r0, r4
3400b008:	6a23      	ldr	r3, [r4, #32]
3400b00a:	4798      	blx	r3
3400b00c:	e7a1      	b.n	3400af52 <prvTimerTask+0x42>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b00e:	f023 0301 	bic.w	r3, r3, #1
3400b012:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
3400b016:	e7f6      	b.n	3400b006 <prvTimerTask+0xf6>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b018:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b01c:	f043 0301 	orr.w	r3, r3, #1
3400b020:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
3400b024:	9903      	ldr	r1, [sp, #12]
3400b026:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
3400b028:	b941      	cbnz	r1, 3400b03c <prvTimerTask+0x12c>
3400b02a:	f000 fa4b 	bl	3400b4c4 <ulSetInterruptMask>
3400b02e:	f44f 715d 	mov.w	r1, #884	@ 0x374
3400b032:	4b0c      	ldr	r3, [pc, #48]	@ (3400b064 <prvTimerTask+0x154>)
3400b034:	4a0c      	ldr	r2, [pc, #48]	@ (3400b068 <prvTimerTask+0x158>)
3400b036:	480d      	ldr	r0, [pc, #52]	@ (3400b06c <prvTimerTask+0x15c>)
3400b038:	f012 fcd8 	bl	3401d9ec <__assert_func>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
3400b03c:	4603      	mov	r3, r0
3400b03e:	4602      	mov	r2, r0
3400b040:	4401      	add	r1, r0
3400b042:	4620      	mov	r0, r4
3400b044:	f7ff feec 	bl	3400ae20 <prvInsertTimerInActiveList>
                        break;
3400b048:	e783      	b.n	3400af52 <prvTimerTask+0x42>
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b04a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b04e:	f023 0301 	bic.w	r3, r3, #1
3400b052:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        break;
3400b056:	e77c      	b.n	3400af52 <prvTimerTask+0x42>
3400b058:	340a4e58 	.word	0x340a4e58
3400b05c:	340a4e50 	.word	0x340a4e50
3400b060:	340a4e54 	.word	0x340a4e54
3400b064:	340235d8 	.word	0x340235d8
3400b068:	3402ec0c 	.word	0x3402ec0c
3400b06c:	34024384 	.word	0x34024384

3400b070 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
3400b070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
3400b072:	4c11      	ldr	r4, [pc, #68]	@ (3400b0b8 <prvCheckForValidListAndQueue+0x48>)
        taskENTER_CRITICAL();
3400b074:	f000 f8a6 	bl	3400b1c4 <vPortEnterCritical>
            if( xTimerQueue == NULL )
3400b078:	6825      	ldr	r5, [r4, #0]
3400b07a:	b9bd      	cbnz	r5, 3400b0ac <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
3400b07c:	4f0f      	ldr	r7, [pc, #60]	@ (3400b0bc <prvCheckForValidListAndQueue+0x4c>)
                vListInitialise( &xActiveTimerList2 );
3400b07e:	4e10      	ldr	r6, [pc, #64]	@ (3400b0c0 <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList1 );
3400b080:	4638      	mov	r0, r7
3400b082:	f7fe fc65 	bl	34009950 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
3400b086:	4630      	mov	r0, r6
3400b088:	f7fe fc62 	bl	34009950 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
3400b08c:	4b0d      	ldr	r3, [pc, #52]	@ (3400b0c4 <prvCheckForValidListAndQueue+0x54>)
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b08e:	2110      	movs	r1, #16
                pxCurrentTimerList = &xActiveTimerList1;
3400b090:	601f      	str	r7, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
3400b092:	4b0d      	ldr	r3, [pc, #52]	@ (3400b0c8 <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b094:	200a      	movs	r0, #10
                pxOverflowTimerList = &xActiveTimerList2;
3400b096:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b098:	4a0c      	ldr	r2, [pc, #48]	@ (3400b0cc <prvCheckForValidListAndQueue+0x5c>)
3400b09a:	4b0d      	ldr	r3, [pc, #52]	@ (3400b0d0 <prvCheckForValidListAndQueue+0x60>)
3400b09c:	9500      	str	r5, [sp, #0]
3400b09e:	f7fe fd6b 	bl	34009b78 <xQueueGenericCreateStatic>
3400b0a2:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
3400b0a4:	b110      	cbz	r0, 3400b0ac <prvCheckForValidListAndQueue+0x3c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
3400b0a6:	490b      	ldr	r1, [pc, #44]	@ (3400b0d4 <prvCheckForValidListAndQueue+0x64>)
3400b0a8:	f7ff f80c 	bl	3400a0c4 <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
3400b0ac:	b003      	add	sp, #12
3400b0ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
3400b0b2:	f000 b895 	b.w	3400b1e0 <vPortExitCritical>
3400b0b6:	bf00      	nop
3400b0b8:	340a4e50 	.word	0x340a4e50
3400b0bc:	340a4e70 	.word	0x340a4e70
3400b0c0:	340a4e5c 	.word	0x340a4e5c
3400b0c4:	340a4e58 	.word	0x340a4e58
3400b0c8:	340a4e54 	.word	0x340a4e54
3400b0cc:	340a4da8 	.word	0x340a4da8
3400b0d0:	340a4d58 	.word	0x340a4d58
3400b0d4:	340243bc 	.word	0x340243bc

3400b0d8 <xTimerCreateTimerTask>:
    {
3400b0d8:	b510      	push	{r4, lr}
3400b0da:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
3400b0dc:	f7ff ffc8 	bl	3400b070 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
3400b0e0:	4b12      	ldr	r3, [pc, #72]	@ (3400b12c <xTimerCreateTimerTask+0x54>)
3400b0e2:	681b      	ldr	r3, [r3, #0]
3400b0e4:	b1b3      	cbz	r3, 3400b114 <xTimerCreateTimerTask+0x3c>
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
3400b0e6:	2400      	movs	r4, #0
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
3400b0e8:	aa07      	add	r2, sp, #28
3400b0ea:	a906      	add	r1, sp, #24
3400b0ec:	a805      	add	r0, sp, #20
                StackType_t * pxTimerTaskStackBuffer = NULL;
3400b0ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
3400b0f2:	f012 f97f 	bl	3401d3f4 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
3400b0f6:	9b05      	ldr	r3, [sp, #20]
3400b0f8:	9a07      	ldr	r2, [sp, #28]
3400b0fa:	9302      	str	r3, [sp, #8]
3400b0fc:	9b06      	ldr	r3, [sp, #24]
3400b0fe:	490c      	ldr	r1, [pc, #48]	@ (3400b130 <xTimerCreateTimerTask+0x58>)
3400b100:	9301      	str	r3, [sp, #4]
3400b102:	2302      	movs	r3, #2
3400b104:	480b      	ldr	r0, [pc, #44]	@ (3400b134 <xTimerCreateTimerTask+0x5c>)
3400b106:	9300      	str	r3, [sp, #0]
3400b108:	4623      	mov	r3, r4
3400b10a:	f7ff f8eb 	bl	3400a2e4 <xTaskCreateStatic>
3400b10e:	4b0a      	ldr	r3, [pc, #40]	@ (3400b138 <xTimerCreateTimerTask+0x60>)
3400b110:	6018      	str	r0, [r3, #0]
                if( xTimerTaskHandle != NULL )
3400b112:	b940      	cbnz	r0, 3400b126 <xTimerCreateTimerTask+0x4e>
        configASSERT( xReturn );
3400b114:	f000 f9d6 	bl	3400b4c4 <ulSetInterruptMask>
3400b118:	f240 1119 	movw	r1, #281	@ 0x119
3400b11c:	4b07      	ldr	r3, [pc, #28]	@ (3400b13c <xTimerCreateTimerTask+0x64>)
3400b11e:	4a08      	ldr	r2, [pc, #32]	@ (3400b140 <xTimerCreateTimerTask+0x68>)
3400b120:	4808      	ldr	r0, [pc, #32]	@ (3400b144 <xTimerCreateTimerTask+0x6c>)
3400b122:	f012 fc63 	bl	3401d9ec <__assert_func>
    }
3400b126:	2001      	movs	r0, #1
3400b128:	b008      	add	sp, #32
3400b12a:	bd10      	pop	{r4, pc}
3400b12c:	340a4e50 	.word	0x340a4e50
3400b130:	340243c1 	.word	0x340243c1
3400b134:	3400af11 	.word	0x3400af11
3400b138:	340a4e4c 	.word	0x340a4e4c
3400b13c:	340235d8 	.word	0x340235d8
3400b140:	3402ec27 	.word	0x3402ec27
3400b144:	34024384 	.word	0x34024384

3400b148 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
3400b148:	2300      	movs	r3, #0
{
3400b14a:	b507      	push	{r0, r1, r2, lr}
    volatile uint32_t ulDummy = 0UL;
3400b14c:	9301      	str	r3, [sp, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
3400b14e:	4b0a      	ldr	r3, [pc, #40]	@ (3400b178 <prvTaskExitError+0x30>)
3400b150:	681b      	ldr	r3, [r3, #0]
3400b152:	3301      	adds	r3, #1
3400b154:	d008      	beq.n	3400b168 <prvTaskExitError+0x20>
3400b156:	f000 f9b5 	bl	3400b4c4 <ulSetInterruptMask>
3400b15a:	f240 310e 	movw	r1, #782	@ 0x30e
3400b15e:	4b07      	ldr	r3, [pc, #28]	@ (3400b17c <prvTaskExitError+0x34>)
3400b160:	4a07      	ldr	r2, [pc, #28]	@ (3400b180 <prvTaskExitError+0x38>)
3400b162:	4808      	ldr	r0, [pc, #32]	@ (3400b184 <prvTaskExitError+0x3c>)
3400b164:	f012 fc42 	bl	3401d9ec <__assert_func>
    portDISABLE_INTERRUPTS();
3400b168:	f000 f9ac 	bl	3400b4c4 <ulSetInterruptMask>

    while( ulDummy == 0 )
3400b16c:	9b01      	ldr	r3, [sp, #4]
3400b16e:	2b00      	cmp	r3, #0
3400b170:	d0fc      	beq.n	3400b16c <prvTaskExitError+0x24>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
3400b172:	b003      	add	sp, #12
3400b174:	f85d fb04 	ldr.w	pc, [sp], #4
3400b178:	340a31f8 	.word	0x340a31f8
3400b17c:	340235d8 	.word	0x340235d8
3400b180:	3402ec70 	.word	0x3402ec70
3400b184:	340243c9 	.word	0x340243c9

3400b188 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
3400b188:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
3400b18c:	2300      	movs	r3, #0
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
3400b18e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
3400b192:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
3400b194:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
3400b196:	4b04      	ldr	r3, [pc, #16]	@ (3400b1a8 <vPortSetupTimerInterrupt+0x20>)
3400b198:	681b      	ldr	r3, [r3, #0]
3400b19a:	fbb3 f3f1 	udiv	r3, r3, r1
3400b19e:	3b01      	subs	r3, #1
3400b1a0:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
3400b1a2:	2307      	movs	r3, #7
3400b1a4:	6113      	str	r3, [r2, #16]
}
3400b1a6:	4770      	bx	lr
3400b1a8:	340a31fc 	.word	0x340a31fc

3400b1ac <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
3400b1ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400b1b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400b1b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
3400b1b8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
3400b1bc:	f3bf 8f6f 	isb	sy
}
3400b1c0:	4770      	bx	lr
	...

3400b1c4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
3400b1c4:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
3400b1c6:	f000 f97d 	bl	3400b4c4 <ulSetInterruptMask>
    ulCriticalNesting++;
3400b1ca:	4a04      	ldr	r2, [pc, #16]	@ (3400b1dc <vPortEnterCritical+0x18>)
3400b1cc:	6813      	ldr	r3, [r2, #0]
3400b1ce:	3301      	adds	r3, #1
3400b1d0:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
3400b1d2:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
3400b1d6:	f3bf 8f6f 	isb	sy
}
3400b1da:	bd08      	pop	{r3, pc}
3400b1dc:	340a31f8 	.word	0x340a31f8

3400b1e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
3400b1e0:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
3400b1e2:	4b0b      	ldr	r3, [pc, #44]	@ (3400b210 <vPortExitCritical+0x30>)
3400b1e4:	681a      	ldr	r2, [r3, #0]
3400b1e6:	b942      	cbnz	r2, 3400b1fa <vPortExitCritical+0x1a>
3400b1e8:	f000 f96c 	bl	3400b4c4 <ulSetInterruptMask>
3400b1ec:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
3400b1f0:	4b08      	ldr	r3, [pc, #32]	@ (3400b214 <vPortExitCritical+0x34>)
3400b1f2:	4a09      	ldr	r2, [pc, #36]	@ (3400b218 <vPortExitCritical+0x38>)
3400b1f4:	4809      	ldr	r0, [pc, #36]	@ (3400b21c <vPortExitCritical+0x3c>)
3400b1f6:	f012 fbf9 	bl	3401d9ec <__assert_func>
    ulCriticalNesting--;
3400b1fa:	681a      	ldr	r2, [r3, #0]
3400b1fc:	3a01      	subs	r2, #1
3400b1fe:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
3400b200:	6818      	ldr	r0, [r3, #0]
3400b202:	b918      	cbnz	r0, 3400b20c <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
    }
}
3400b204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
3400b208:	f000 b967 	b.w	3400b4da <vClearInterruptMask>
}
3400b20c:	bd08      	pop	{r3, pc}
3400b20e:	bf00      	nop
3400b210:	340a31f8 	.word	0x340a31f8
3400b214:	340235d8 	.word	0x340235d8
3400b218:	3402ec93 	.word	0x3402ec93
3400b21c:	340243c9 	.word	0x340243c9

3400b220 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
3400b220:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
3400b222:	f000 f94f 	bl	3400b4c4 <ulSetInterruptMask>
3400b226:	4604      	mov	r4, r0
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
3400b228:	f7ff fa0a 	bl	3400a640 <xTaskIncrementTick>
3400b22c:	b128      	cbz	r0, 3400b23a <SysTick_Handler+0x1a>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
3400b22e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400b232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400b236:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
3400b23a:	4620      	mov	r0, r4
}
3400b23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
3400b240:	f000 b94b 	b.w	3400b4da <vClearInterruptMask>

3400b244 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
3400b244:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
3400b246:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
3400b248:	f813 3c02 	ldrb.w	r3, [r3, #-2]
3400b24c:	2b66      	cmp	r3, #102	@ 0x66
3400b24e:	d111      	bne.n	3400b274 <vPortSVCHandler_C+0x30>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
3400b250:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400b254:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
3400b258:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
3400b25c:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
3400b260:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
3400b264:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
3400b268:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
    }
}
3400b26c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
3400b270:	f000 b8f6 	b.w	3400b460 <vRestoreContextOfFirstTask>
            configASSERT( pdFALSE );
3400b274:	f000 f926 	bl	3400b4c4 <ulSetInterruptMask>
3400b278:	f240 414d 	movw	r1, #1101	@ 0x44d
3400b27c:	4b02      	ldr	r3, [pc, #8]	@ (3400b288 <vPortSVCHandler_C+0x44>)
3400b27e:	4a03      	ldr	r2, [pc, #12]	@ (3400b28c <vPortSVCHandler_C+0x48>)
3400b280:	4803      	ldr	r0, [pc, #12]	@ (3400b290 <vPortSVCHandler_C+0x4c>)
3400b282:	f012 fbb3 	bl	3401d9ec <__assert_func>
3400b286:	bf00      	nop
3400b288:	340235d8 	.word	0x340235d8
3400b28c:	3402ec81 	.word	0x3402ec81
3400b290:	340243c9 	.word	0x340243c9

3400b294 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
3400b294:	b510      	push	{r4, lr}
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
3400b296:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
3400b29a:	e940 2402 	strd	r2, r4, [r0, #-8]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
3400b29e:	4a18      	ldr	r2, [pc, #96]	@ (3400b300 <pxPortInitialiseStack+0x6c>)
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400b2a0:	f04f 3412 	mov.w	r4, #303174162	@ 0x12121212
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
3400b2a4:	f840 2c0c 	str.w	r2, [r0, #-12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400b2a8:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400b2ac:	f04f 3c02 	mov.w	ip, #33686018	@ 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400b2b0:	e940 2405 	strd	r2, r4, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400b2b4:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
3400b2b8:	f840 3c20 	str.w	r3, [r0, #-32]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400b2bc:	e940 2c07 	strd	r2, ip, [r0, #-28]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
3400b2c0:	f04f 3310 	mov.w	r3, #269488144	@ 0x10101010
3400b2c4:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400b2c8:	f04f 3409 	mov.w	r4, #151587081	@ 0x9090909
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
3400b2cc:	e940 320a 	strd	r3, r2, [r0, #-40]	@ 0x28
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400b2d0:	f04f 3308 	mov.w	r3, #134744072	@ 0x8080808
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400b2d4:	f04f 3c07 	mov.w	ip, #117901063	@ 0x7070707
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400b2d8:	e940 340c 	strd	r3, r4, [r0, #-48]	@ 0x30
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400b2dc:	f04f 3306 	mov.w	r3, #101058054	@ 0x6060606
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
3400b2e0:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400b2e4:	e940 3c0e 	strd	r3, ip, [r0, #-56]	@ 0x38
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
3400b2e8:	f04f 3304 	mov.w	r3, #67372036	@ 0x4040404
3400b2ec:	e940 3210 	strd	r3, r2, [r0, #-64]	@ 0x40
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
3400b2f0:	f06f 0302 	mvn.w	r3, #2
3400b2f4:	f840 3c44 	str.w	r3, [r0, #-68]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
3400b2f8:	f840 1d48 	str.w	r1, [r0, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
3400b2fc:	bd10      	pop	{r4, pc}
3400b2fe:	bf00      	nop
3400b300:	3400b149 	.word	0x3400b149

3400b304 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
3400b304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
3400b306:	2300      	movs	r3, #0
3400b308:	9303      	str	r3, [sp, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
3400b30a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400b30e:	f8d3 2d1c 	ldr.w	r2, [r3, #3356]	@ 0xd1c
3400b312:	9202      	str	r2, [sp, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
3400b314:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
3400b318:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
3400b31c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
3400b320:	4a2c      	ldr	r2, [pc, #176]	@ (3400b3d4 <xPortStartScheduler+0xd0>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
3400b322:	0e1b      	lsrs	r3, r3, #24
3400b324:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
3400b328:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400b32c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
3400b330:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
3400b332:	b943      	cbnz	r3, 3400b346 <xPortStartScheduler+0x42>
3400b334:	f000 f8c6 	bl	3400b4c4 <ulSetInterruptMask>
3400b338:	f44f 61c7 	mov.w	r1, #1592	@ 0x638
3400b33c:	4b26      	ldr	r3, [pc, #152]	@ (3400b3d8 <xPortStartScheduler+0xd4>)
3400b33e:	4a27      	ldr	r2, [pc, #156]	@ (3400b3dc <xPortStartScheduler+0xd8>)

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
3400b340:	4827      	ldr	r0, [pc, #156]	@ (3400b3e0 <xPortStartScheduler+0xdc>)
3400b342:	f012 fb53 	bl	3401d9ec <__assert_func>
3400b346:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400b34a:	43db      	mvns	r3, r3
3400b34c:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400b350:	d00e      	beq.n	3400b370 <xPortStartScheduler+0x6c>
3400b352:	f000 f8b7 	bl	3400b4c4 <ulSetInterruptMask>
3400b356:	f240 613c 	movw	r1, #1596	@ 0x63c
3400b35a:	4b1f      	ldr	r3, [pc, #124]	@ (3400b3d8 <xPortStartScheduler+0xd4>)
3400b35c:	4a1f      	ldr	r2, [pc, #124]	@ (3400b3dc <xPortStartScheduler+0xd8>)
3400b35e:	e7ef      	b.n	3400b340 <xPortStartScheduler+0x3c>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
3400b360:	3301      	adds	r3, #1
3400b362:	9303      	str	r3, [sp, #12]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
3400b364:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400b368:	005b      	lsls	r3, r3, #1
3400b36a:	b2db      	uxtb	r3, r3
3400b36c:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
3400b370:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400b374:	f013 0f80 	tst.w	r3, #128	@ 0x80
            ulImplementedPrioBits++;
3400b378:	9b03      	ldr	r3, [sp, #12]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
3400b37a:	d1f1      	bne.n	3400b360 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
3400b37c:	2b08      	cmp	r3, #8
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
3400b37e:	bf0c      	ite	eq
3400b380:	2300      	moveq	r3, #0
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
3400b382:	9b03      	ldrne	r3, [sp, #12]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
3400b384:	4a17      	ldr	r2, [pc, #92]	@ (3400b3e4 <xPortStartScheduler+0xe0>)
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
3400b386:	bf18      	it	ne
3400b388:	f1c3 0307 	rsbne	r3, r3, #7
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
3400b38c:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
3400b38e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3400b392:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
3400b394:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
3400b398:	2400      	movs	r4, #0
        portNVIC_SHPR2_REG = ulOriginalPriority;
3400b39a:	9a02      	ldr	r2, [sp, #8]
3400b39c:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
3400b3a0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
3400b3a4:	f442 027f 	orr.w	r2, r2, #16711680	@ 0xff0000
3400b3a8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
3400b3ac:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
3400b3b0:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
3400b3b4:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
3400b3b8:	f7ff fee6 	bl	3400b188 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
3400b3bc:	4b0a      	ldr	r3, [pc, #40]	@ (3400b3e8 <xPortStartScheduler+0xe4>)
3400b3be:	601c      	str	r4, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
3400b3c0:	f000 f86e 	bl	3400b4a0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
3400b3c4:	f7ff fab6 	bl	3400a934 <vTaskSwitchContext>
    prvTaskExitError();
3400b3c8:	f7ff febe 	bl	3400b148 <prvTaskExitError>

    /* Should not get here. */
    return 0;
}
3400b3cc:	4620      	mov	r0, r4
3400b3ce:	b004      	add	sp, #16
3400b3d0:	bd10      	pop	{r4, pc}
3400b3d2:	bf00      	nop
3400b3d4:	340a4e88 	.word	0x340a4e88
3400b3d8:	340235d8 	.word	0x340235d8
3400b3dc:	3402ec5c 	.word	0x3402ec5c
3400b3e0:	340243c9 	.word	0x340243c9
3400b3e4:	340a4e84 	.word	0x340a4e84
3400b3e8:	340a31f8 	.word	0x340a31f8

3400b3ec <xPortIsInsideInterrupt>:
    BaseType_t xReturn;

    /* Obtain the number of the currently executing interrupt. Interrupt Program
     * Status Register (IPSR) holds the exception number of the currently-executing
     * exception or zero for Thread mode.*/
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
3400b3ec:	f3ef 8005 	mrs	r0, IPSR
    {
        xReturn = pdTRUE;
    }

    return xReturn;
}
3400b3f0:	3800      	subs	r0, #0
3400b3f2:	bf18      	it	ne
3400b3f4:	2001      	movne	r0, #1
3400b3f6:	4770      	bx	lr

3400b3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
3400b3f8:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
3400b3fa:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
3400b3fe:	2b0f      	cmp	r3, #15
3400b400:	d90e      	bls.n	3400b420 <vPortValidateInterruptPriority+0x28>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
3400b402:	4a10      	ldr	r2, [pc, #64]	@ (3400b444 <vPortValidateInterruptPriority+0x4c>)
3400b404:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
3400b406:	4a10      	ldr	r2, [pc, #64]	@ (3400b448 <vPortValidateInterruptPriority+0x50>)
3400b408:	7812      	ldrb	r2, [r2, #0]
3400b40a:	429a      	cmp	r2, r3
3400b40c:	d908      	bls.n	3400b420 <vPortValidateInterruptPriority+0x28>
3400b40e:	f000 f859 	bl	3400b4c4 <ulSetInterruptMask>
3400b412:	f44f 61f1 	mov.w	r1, #1928	@ 0x788
3400b416:	4b0d      	ldr	r3, [pc, #52]	@ (3400b44c <vPortValidateInterruptPriority+0x54>)
3400b418:	4a0d      	ldr	r2, [pc, #52]	@ (3400b450 <vPortValidateInterruptPriority+0x58>)
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
3400b41a:	480e      	ldr	r0, [pc, #56]	@ (3400b454 <vPortValidateInterruptPriority+0x5c>)
3400b41c:	f012 fae6 	bl	3401d9ec <__assert_func>
3400b420:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400b424:	4a0c      	ldr	r2, [pc, #48]	@ (3400b458 <vPortValidateInterruptPriority+0x60>)
3400b426:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
3400b42a:	6812      	ldr	r2, [r2, #0]
3400b42c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3400b430:	4293      	cmp	r3, r2
3400b432:	d906      	bls.n	3400b442 <vPortValidateInterruptPriority+0x4a>
3400b434:	f000 f846 	bl	3400b4c4 <ulSetInterruptMask>
3400b438:	f44f 61f3 	mov.w	r1, #1944	@ 0x798
3400b43c:	4b03      	ldr	r3, [pc, #12]	@ (3400b44c <vPortValidateInterruptPriority+0x54>)
3400b43e:	4a04      	ldr	r2, [pc, #16]	@ (3400b450 <vPortValidateInterruptPriority+0x58>)
3400b440:	e7eb      	b.n	3400b41a <vPortValidateInterruptPriority+0x22>
    }
3400b442:	bd08      	pop	{r3, pc}
3400b444:	e000e3f0 	.word	0xe000e3f0
3400b448:	340a4e88 	.word	0x340a4e88
3400b44c:	340235d8 	.word	0x340235d8
3400b450:	3402ec3d 	.word	0x3402ec3d
3400b454:	340243c9 	.word	0x340243c9
3400b458:	340a4e84 	.word	0x340a4e84
3400b45c:	00000000 	.word	0x00000000

3400b460 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400b460:	4a0b      	ldr	r2, [pc, #44]	@ (3400b490 <pxCurrentTCBConst2>)
3400b462:	6811      	ldr	r1, [r2, #0]
3400b464:	6808      	ldr	r0, [r1, #0]
3400b466:	c806      	ldmia	r0!, {r1, r2}
3400b468:	f381 880b 	msr	PSPLIM, r1
3400b46c:	2102      	movs	r1, #2
3400b46e:	f381 8814 	msr	CONTROL, r1
3400b472:	3020      	adds	r0, #32
3400b474:	f380 8809 	msr	PSP, r0
3400b478:	f3bf 8f6f 	isb	sy
3400b47c:	f04f 0000 	mov.w	r0, #0
3400b480:	f380 8811 	msr	BASEPRI, r0
3400b484:	4710      	bx	r2
3400b486:	bf00      	nop
3400b488:	f3af 8000 	nop.w
3400b48c:	f3af 8000 	nop.w

3400b490 <pxCurrentTCBConst2>:
3400b490:	340a4d54 	.word	0x340a4d54
	...

3400b4a0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400b4a0:	4807      	ldr	r0, [pc, #28]	@ (3400b4c0 <xVTORConst>)
3400b4a2:	6800      	ldr	r0, [r0, #0]
3400b4a4:	6800      	ldr	r0, [r0, #0]
3400b4a6:	f380 8808 	msr	MSP, r0
3400b4aa:	b662      	cpsie	i
3400b4ac:	b661      	cpsie	f
3400b4ae:	f3bf 8f4f 	dsb	sy
3400b4b2:	f3bf 8f6f 	isb	sy
3400b4b6:	df66      	svc	102	@ 0x66
3400b4b8:	bf00      	nop
3400b4ba:	bf00      	nop
3400b4bc:	f3af 8000 	nop.w

3400b4c0 <xVTORConst>:
3400b4c0:	e000ed08 	.word	0xe000ed08

3400b4c4 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400b4c4:	f3ef 8011 	mrs	r0, BASEPRI
3400b4c8:	f04f 0150 	mov.w	r1, #80	@ 0x50
3400b4cc:	f381 8811 	msr	BASEPRI, r1
3400b4d0:	f3bf 8f4f 	dsb	sy
3400b4d4:	f3bf 8f6f 	isb	sy
3400b4d8:	4770      	bx	lr

3400b4da <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400b4da:	f380 8811 	msr	BASEPRI, r0
3400b4de:	f3bf 8f4f 	dsb	sy
3400b4e2:	f3bf 8f6f 	isb	sy
3400b4e6:	4770      	bx	lr
	...

3400b4f0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400b4f0:	f3ef 8009 	mrs	r0, PSP
3400b4f4:	f01e 0f10 	tst.w	lr, #16
3400b4f8:	bf08      	it	eq
3400b4fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
3400b4fe:	f3ef 820b 	mrs	r2, PSPLIM
3400b502:	4673      	mov	r3, lr
3400b504:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
3400b508:	4a11      	ldr	r2, [pc, #68]	@ (3400b550 <pxCurrentTCBConst>)
3400b50a:	6811      	ldr	r1, [r2, #0]
3400b50c:	6008      	str	r0, [r1, #0]
3400b50e:	f04f 0050 	mov.w	r0, #80	@ 0x50
3400b512:	f380 8811 	msr	BASEPRI, r0
3400b516:	f3bf 8f4f 	dsb	sy
3400b51a:	f3bf 8f6f 	isb	sy
3400b51e:	f7ff fa09 	bl	3400a934 <vTaskSwitchContext>
3400b522:	f04f 0000 	mov.w	r0, #0
3400b526:	f380 8811 	msr	BASEPRI, r0
3400b52a:	4a09      	ldr	r2, [pc, #36]	@ (3400b550 <pxCurrentTCBConst>)
3400b52c:	6811      	ldr	r1, [r2, #0]
3400b52e:	6808      	ldr	r0, [r1, #0]
3400b530:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
3400b534:	f013 0f10 	tst.w	r3, #16
3400b538:	bf08      	it	eq
3400b53a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
3400b53e:	f382 880b 	msr	PSPLIM, r2
3400b542:	f380 8809 	msr	PSP, r0
3400b546:	4718      	bx	r3
3400b548:	f3af 8000 	nop.w
3400b54c:	f3af 8000 	nop.w

3400b550 <pxCurrentTCBConst>:
3400b550:	340a4d54 	.word	0x340a4d54
	...

3400b560 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400b560:	f01e 0f04 	tst.w	lr, #4
3400b564:	bf0c      	ite	eq
3400b566:	f3ef 8008 	mrseq	r0, MSP
3400b56a:	f3ef 8009 	mrsne	r0, PSP
3400b56e:	4904      	ldr	r1, [pc, #16]	@ (3400b580 <svchandler_address_const>)
3400b570:	4708      	bx	r1
3400b572:	bf00      	nop
3400b574:	f3af 8000 	nop.w
3400b578:	f3af 8000 	nop.w
3400b57c:	f3af 8000 	nop.w

3400b580 <svchandler_address_const>:
3400b580:	3400b245 	.word	0x3400b245

3400b584 <app_postprocess_init>:
int32_t app_postprocess_init(void *params_postprocess)
{
  int32_t error = AI_OD_POSTPROCESS_ERROR_NO;
  st_yolox_pp_static_param_t *params = (st_yolox_pp_static_param_t *) params_postprocess;
  params->nb_classes = AI_OD_ST_YOLOX_PP_NB_CLASSES;
  params->nb_anchors = AI_OD_ST_YOLOX_PP_NB_ANCHORS;
3400b584:	2203      	movs	r2, #3
3400b586:	2101      	movs	r1, #1
3400b588:	e9c0 1200 	strd	r1, r2, [r0]
  params->grid_width_L = AI_OD_ST_YOLOX_PP_L_GRID_WIDTH;
3400b58c:	223c      	movs	r2, #60	@ 0x3c
  params->grid_height_L = AI_OD_ST_YOLOX_PP_L_GRID_HEIGHT;
3400b58e:	e9c0 2202 	strd	r2, r2, [r0, #8]
  params->grid_width_M = AI_OD_ST_YOLOX_PP_M_GRID_WIDTH;
3400b592:	221e      	movs	r2, #30
  params->grid_height_M = AI_OD_ST_YOLOX_PP_M_GRID_HEIGHT;
3400b594:	e9c0 2204 	strd	r2, r2, [r0, #16]
  params->grid_width_S = AI_OD_ST_YOLOX_PP_S_GRID_WIDTH;
3400b598:	220f      	movs	r2, #15
  params->grid_height_S = AI_OD_ST_YOLOX_PP_S_GRID_HEIGHT;
3400b59a:	e9c0 2206 	strd	r2, r2, [r0, #24]
  params->pAnchors_L = AI_OD_ST_YOLOX_PP_L_ANCHORS;
3400b59e:	4a07      	ldr	r2, [pc, #28]	@ (3400b5bc <app_postprocess_init+0x38>)
3400b5a0:	6302      	str	r2, [r0, #48]	@ 0x30
  params->pAnchors_M = AI_OD_ST_YOLOX_PP_M_ANCHORS;
3400b5a2:	4a07      	ldr	r2, [pc, #28]	@ (3400b5c0 <app_postprocess_init+0x3c>)
3400b5a4:	6342      	str	r2, [r0, #52]	@ 0x34
  params->pAnchors_S = AI_OD_ST_YOLOX_PP_S_ANCHORS;
3400b5a6:	4a07      	ldr	r2, [pc, #28]	@ (3400b5c4 <app_postprocess_init+0x40>)
3400b5a8:	6382      	str	r2, [r0, #56]	@ 0x38
  params->max_boxes_limit = AI_OD_ST_YOLOX_PP_MAX_BOXES_LIMIT;
3400b5aa:	220a      	movs	r2, #10
3400b5ac:	6242      	str	r2, [r0, #36]	@ 0x24
  params->conf_threshold = AI_OD_ST_YOLOX_PP_CONF_THRESHOLD;
3400b5ae:	4a06      	ldr	r2, [pc, #24]	@ (3400b5c8 <app_postprocess_init+0x44>)
3400b5b0:	6282      	str	r2, [r0, #40]	@ 0x28
  params->iou_threshold = AI_OD_ST_YOLOX_PP_IOU_THRESHOLD;
3400b5b2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
3400b5b6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  error = od_st_yolox_pp_reset(params);
3400b5b8:	f000 bb2f 	b.w	3400bc1a <od_st_yolox_pp_reset>
3400b5bc:	3402ecec 	.word	0x3402ecec
3400b5c0:	3402ecd4 	.word	0x3402ecd4
3400b5c4:	3402ecbc 	.word	0x3402ecbc
3400b5c8:	3f19999a 	.word	0x3f19999a

3400b5cc <app_postprocess_run>:
  return error;
}

int32_t app_postprocess_run(void *pInput[], int nb_input, void *pOutput, void *pInput_param)
{
3400b5cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400b5ce:	460c      	mov	r4, r1
  assert(nb_input == 3);
3400b5d0:	2c03      	cmp	r4, #3
{
3400b5d2:	4611      	mov	r1, r2
3400b5d4:	461a      	mov	r2, r3
  assert(nb_input == 3);
3400b5d6:	d005      	beq.n	3400b5e4 <app_postprocess_run+0x18>
3400b5d8:	2131      	movs	r1, #49	@ 0x31
3400b5da:	4b08      	ldr	r3, [pc, #32]	@ (3400b5fc <app_postprocess_run+0x30>)
3400b5dc:	4a08      	ldr	r2, [pc, #32]	@ (3400b600 <app_postprocess_run+0x34>)
3400b5de:	4809      	ldr	r0, [pc, #36]	@ (3400b604 <app_postprocess_run+0x38>)
3400b5e0:	f012 fa04 	bl	3401d9ec <__assert_func>
  int32_t error = AI_OD_POSTPROCESS_ERROR_NO;
  od_pp_out_t *pObjDetOutput = (od_pp_out_t *) pOutput;
  st_yolox_pp_in_t pp_input = {
3400b5e4:	6843      	ldr	r3, [r0, #4]
3400b5e6:	9301      	str	r3, [sp, #4]
3400b5e8:	6883      	ldr	r3, [r0, #8]
3400b5ea:	9302      	str	r3, [sp, #8]
3400b5ec:	6803      	ldr	r3, [r0, #0]
      .pRaw_detections_S = (float32_t *) pInput[0],
      .pRaw_detections_L = (float32_t *) pInput[1],
      .pRaw_detections_M = (float32_t *) pInput[2],
  };
  error = od_st_yolox_pp_process(&pp_input, pObjDetOutput,
3400b5ee:	a801      	add	r0, sp, #4
  st_yolox_pp_in_t pp_input = {
3400b5f0:	9303      	str	r3, [sp, #12]
  error = od_st_yolox_pp_process(&pp_input, pObjDetOutput,
3400b5f2:	f000 fb16 	bl	3400bc22 <od_st_yolox_pp_process>
                                 (st_yolox_pp_static_param_t *) pInput_param);
  return error;
}
3400b5f6:	b004      	add	sp, #16
3400b5f8:	bd10      	pop	{r4, pc}
3400b5fa:	bf00      	nop
3400b5fc:	34024424 	.word	0x34024424
3400b600:	3402eca5 	.word	0x3402eca5
3400b604:	34024432 	.word	0x34024432

3400b608 <st_yolox_nms_comparator>:

    float32_t diff = 0.0;
    float32_t a_weighted_conf = 0.0;
    float32_t b_weighted_conf = 0.0;

    if (a.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400b608:	4b0f      	ldr	r3, [pc, #60]	@ (3400b648 <st_yolox_nms_comparator+0x40>)
{
3400b60a:	b510      	push	{r4, lr}
    if (a.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400b60c:	681b      	ldr	r3, [r3, #0]
3400b60e:	6944      	ldr	r4, [r0, #20]
    od_pp_outBuffer_t b = *(od_pp_outBuffer_t *)pb;
3400b610:	694a      	ldr	r2, [r1, #20]
    if (a.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400b612:	42a3      	cmp	r3, r4
    od_pp_outBuffer_t a = *(od_pp_outBuffer_t *)pa;
3400b614:	bf0c      	ite	eq
3400b616:	edd0 7a04 	vldreq	s15, [r0, #16]
    {
        a_weighted_conf = a.conf;
    }
    else
    {
         a_weighted_conf = 0.0;
3400b61a:	eddf 7a0c 	vldrne	s15, [pc, #48]	@ 3400b64c <st_yolox_nms_comparator+0x44>
    }

    if (b.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400b61e:	4293      	cmp	r3, r2
    od_pp_outBuffer_t b = *(od_pp_outBuffer_t *)pb;
3400b620:	bf0c      	ite	eq
3400b622:	ed91 7a04 	vldreq	s14, [r1, #16]
    {
        b_weighted_conf = b.conf;
    }
    else
    {
         b_weighted_conf = 0.0;
3400b626:	ed9f 7a09 	vldrne	s14, [pc, #36]	@ 3400b64c <st_yolox_nms_comparator+0x44>
    }

    diff = a_weighted_conf - b_weighted_conf;
3400b62a:	ee77 7ac7 	vsub.f32	s15, s15, s14

    if (diff < 0) return 1;
3400b62e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400b632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b636:	d404      	bmi.n	3400b642 <st_yolox_nms_comparator+0x3a>
    else if (diff > 0) return -1;
3400b638:	bfcc      	ite	gt
3400b63a:	f04f 30ff 	movgt.w	r0, #4294967295
3400b63e:	2000      	movle	r0, #0
    return 0;
}
3400b640:	bd10      	pop	{r4, pc}
    if (diff < 0) return 1;
3400b642:	2001      	movs	r0, #1
3400b644:	e7fc      	b.n	3400b640 <st_yolox_nms_comparator+0x38>
3400b646:	bf00      	nop
3400b648:	340a4e8c 	.word	0x340a4e8c
3400b64c:	00000000 	.word	0x00000000

3400b650 <st_yolox_pp_nmsFiltering_centroid>:

int32_t st_yolox_pp_nmsFiltering_centroid(od_pp_out_t *pOutput,
                                          st_yolox_pp_static_param_t *pInput_static_param)
{
3400b650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400b654:	4605      	mov	r5, r0
3400b656:	460e      	mov	r6, r1
    int32_t j, k, limit_counter, detections_per_class;
    for (k = 0; k < pInput_static_param->nb_classes; ++k)
3400b658:	2700      	movs	r7, #0
                for (j = i + 1; j < detections_per_class; j ++)
                {
                    float32_t *b = &(pOutput->pOutBuff[j].x_center);
                    if (vision_models_box_iou(a, b) > pInput_static_param->iou_threshold)
                    {
                        pOutput->pOutBuff[j].conf = 0;
3400b65a:	f04f 0800 	mov.w	r8, #0
    for (k = 0; k < pInput_static_param->nb_classes; ++k)
3400b65e:	6833      	ldr	r3, [r6, #0]
3400b660:	42bb      	cmp	r3, r7
3400b662:	dc03      	bgt.n	3400b66c <st_yolox_pp_nmsFiltering_centroid+0x1c>
                }
            }
        }
    }
    return (AI_OD_POSTPROCESS_ERROR_NO);
}
3400b664:	2000      	movs	r0, #0
3400b666:	b003      	add	sp, #12
3400b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400b66c:	2200      	movs	r2, #0
3400b66e:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
        AI_ST_YOLOX_PP_SORT_CLASS = k;
3400b670:	4b33      	ldr	r3, [pc, #204]	@ (3400b740 <st_yolox_pp_nmsFiltering_centroid+0xf0>)
3400b672:	4291      	cmp	r1, r2
3400b674:	601f      	str	r7, [r3, #0]
        detections_per_class = 0;
3400b676:	4614      	mov	r4, r2
3400b678:	f101 0301 	add.w	r3, r1, #1
            if(pOutput->pOutBuff[i].class_index == k)
3400b67c:	f04f 0c18 	mov.w	ip, #24
3400b680:	bfb8      	it	lt
3400b682:	2301      	movlt	r3, #1
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400b684:	3b01      	subs	r3, #1
3400b686:	d103      	bne.n	3400b690 <st_yolox_pp_nmsFiltering_centroid+0x40>
        if (detections_per_class > 0)
3400b688:	2c00      	cmp	r4, #0
3400b68a:	dc0a      	bgt.n	3400b6a2 <st_yolox_pp_nmsFiltering_centroid+0x52>
    for (k = 0; k < pInput_static_param->nb_classes; ++k)
3400b68c:	3701      	adds	r7, #1
3400b68e:	e7e6      	b.n	3400b65e <st_yolox_pp_nmsFiltering_centroid+0xe>
            if(pOutput->pOutBuff[i].class_index == k)
3400b690:	6828      	ldr	r0, [r5, #0]
3400b692:	fb0c 0002 	mla	r0, ip, r2, r0
3400b696:	6940      	ldr	r0, [r0, #20]
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400b698:	3201      	adds	r2, #1
                detections_per_class++;
3400b69a:	42b8      	cmp	r0, r7
3400b69c:	ea54 9414 			@ <UNDEFINED> instruction: 0xea549414
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400b6a0:	e7f0      	b.n	3400b684 <st_yolox_pp_nmsFiltering_centroid+0x34>
            qsort(pOutput->pOutBuff,
3400b6a2:	4b28      	ldr	r3, [pc, #160]	@ (3400b744 <st_yolox_pp_nmsFiltering_centroid+0xf4>)
3400b6a4:	2218      	movs	r2, #24
3400b6a6:	6828      	ldr	r0, [r5, #0]
3400b6a8:	f012 f9f7 	bl	3401da9a <qsort>
            for (int32_t i = 0; i < detections_per_class ; i ++)
3400b6ac:	f04f 0900 	mov.w	r9, #0
                if (pOutput->pOutBuff[i].conf == 0) continue;
3400b6b0:	2318      	movs	r3, #24
3400b6b2:	682a      	ldr	r2, [r5, #0]
3400b6b4:	fb03 2b09 	mla	fp, r3, r9, r2
3400b6b8:	eddb 7a04 	vldr	s15, [fp, #16]
3400b6bc:	eef5 7a40 	vcmp.f32	s15, #0.0
3400b6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                for (j = i + 1; j < detections_per_class; j ++)
3400b6c4:	f109 0901 	add.w	r9, r9, #1
                if (pOutput->pOutBuff[i].conf == 0) continue;
3400b6c8:	d119      	bne.n	3400b6fe <st_yolox_pp_nmsFiltering_centroid+0xae>
            for (int32_t i = 0; i < detections_per_class ; i ++)
3400b6ca:	454c      	cmp	r4, r9
3400b6cc:	d1f1      	bne.n	3400b6b2 <st_yolox_pp_nmsFiltering_centroid+0x62>
            for (int32_t i = 0; i < detections_per_class; i++)
3400b6ce:	2300      	movs	r3, #0
                    (pOutput->pOutBuff[i].conf != 0))
3400b6d0:	f04f 0e18 	mov.w	lr, #24
        limit_counter = 0;
3400b6d4:	461a      	mov	r2, r3
                if ((limit_counter < pInput_static_param->max_boxes_limit) &&
3400b6d6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
                    (pOutput->pOutBuff[i].conf != 0))
3400b6d8:	f8d5 c000 	ldr.w	ip, [r5]
                if ((limit_counter < pInput_static_param->max_boxes_limit) &&
3400b6dc:	4290      	cmp	r0, r2
                    (pOutput->pOutBuff[i].conf != 0))
3400b6de:	fb0e c103 	mla	r1, lr, r3, ip
                if ((limit_counter < pInput_static_param->max_boxes_limit) &&
3400b6e2:	dd29      	ble.n	3400b738 <st_yolox_pp_nmsFiltering_centroid+0xe8>
3400b6e4:	edd1 7a04 	vldr	s15, [r1, #16]
3400b6e8:	eef5 7a40 	vcmp.f32	s15, #0.0
3400b6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b6f0:	d022      	beq.n	3400b738 <st_yolox_pp_nmsFiltering_centroid+0xe8>
                    limit_counter++;
3400b6f2:	3201      	adds	r2, #1
            for (int32_t i = 0; i < detections_per_class; i++)
3400b6f4:	3c01      	subs	r4, #1
3400b6f6:	f103 0301 	add.w	r3, r3, #1
3400b6fa:	d1ef      	bne.n	3400b6dc <st_yolox_pp_nmsFiltering_centroid+0x8c>
3400b6fc:	e7c6      	b.n	3400b68c <st_yolox_pp_nmsFiltering_centroid+0x3c>
                for (j = i + 1; j < detections_per_class; j ++)
3400b6fe:	46ca      	mov	sl, r9
3400b700:	45a2      	cmp	sl, r4
                    float32_t *b = &(pOutput->pOutBuff[j].x_center);
3400b702:	6829      	ldr	r1, [r5, #0]
                for (j = i + 1; j < detections_per_class; j ++)
3400b704:	dae1      	bge.n	3400b6ca <st_yolox_pp_nmsFiltering_centroid+0x7a>
                    float32_t *b = &(pOutput->pOutBuff[j].x_center);
3400b706:	fb03 f20a 	mul.w	r2, r3, sl
                    if (vision_models_box_iou(a, b) > pInput_static_param->iou_threshold)
3400b70a:	4658      	mov	r0, fp
3400b70c:	4411      	add	r1, r2
3400b70e:	9201      	str	r2, [sp, #4]
3400b710:	f000 fb38 	bl	3400bd84 <vision_models_box_iou>
3400b714:	edd6 7a0b 	vldr	s15, [r6, #44]	@ 0x2c
3400b718:	eeb4 0ae7 	vcmpe.f32	s0, s15
3400b71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        pOutput->pOutBuff[j].conf = 0;
3400b720:	bfc4      	itt	gt
3400b722:	6829      	ldrgt	r1, [r5, #0]
3400b724:	9a01      	ldrgt	r2, [sp, #4]
                    if (vision_models_box_iou(a, b) > pInput_static_param->iou_threshold)
3400b726:	f04f 0318 	mov.w	r3, #24
                        pOutput->pOutBuff[j].conf = 0;
3400b72a:	bfc4      	itt	gt
3400b72c:	1889      	addgt	r1, r1, r2
3400b72e:	f8c1 8010 	strgt.w	r8, [r1, #16]
                for (j = i + 1; j < detections_per_class; j ++)
3400b732:	f10a 0a01 	add.w	sl, sl, #1
3400b736:	e7e3      	b.n	3400b700 <st_yolox_pp_nmsFiltering_centroid+0xb0>
                    pOutput->pOutBuff[i].conf = 0;
3400b738:	f8c1 8010 	str.w	r8, [r1, #16]
3400b73c:	e7da      	b.n	3400b6f4 <st_yolox_pp_nmsFiltering_centroid+0xa4>
3400b73e:	bf00      	nop
3400b740:	340a4e8c 	.word	0x340a4e8c
3400b744:	3400b609 	.word	0x3400b609

3400b748 <st_yolox_pp_scoreFiltering_centroid>:


int32_t st_yolox_pp_scoreFiltering_centroid(od_pp_out_t *pOutput,
                                            st_yolox_pp_static_param_t *pInput_static_param)
{
3400b748:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t det_count = 0;

    for (int32_t i = 0; i < pInput_static_param->nb_detect; i++)
3400b74a:	2600      	movs	r6, #0
3400b74c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
    int32_t det_count = 0;
3400b74e:	4635      	mov	r5, r6
3400b750:	42b3      	cmp	r3, r6
3400b752:	f103 0201 	add.w	r2, r3, #1
    {
        if (pOutput->pOutBuff[i].conf >= pInput_static_param->conf_threshold)
3400b756:	f04f 0718 	mov.w	r7, #24
3400b75a:	bfb8      	it	lt
3400b75c:	2201      	movlt	r2, #1
    for (int32_t i = 0; i < pInput_static_param->nb_detect; i++)
3400b75e:	3a01      	subs	r2, #1
3400b760:	d102      	bne.n	3400b768 <st_yolox_pp_scoreFiltering_centroid+0x20>
            pOutput->pOutBuff[det_count].conf = pOutput->pOutBuff[i].conf;
            pOutput->pOutBuff[det_count].class_index = pOutput->pOutBuff[i].class_index;
            det_count++;
        }
    }
    pOutput->nb_detect = det_count;
3400b762:	6045      	str	r5, [r0, #4]

    return (AI_OD_POSTPROCESS_ERROR_NO);
}
3400b764:	2000      	movs	r0, #0
3400b766:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pOutput->pOutBuff[i].conf >= pInput_static_param->conf_threshold)
3400b768:	6803      	ldr	r3, [r0, #0]
3400b76a:	ed91 7a0a 	vldr	s14, [r1, #40]	@ 0x28
3400b76e:	fb07 3406 	mla	r4, r7, r6, r3
3400b772:	edd4 7a04 	vldr	s15, [r4, #16]
3400b776:	eef4 7ac7 	vcmpe.f32	s15, s14
3400b77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b77e:	db16      	blt.n	3400b7ae <st_yolox_pp_scoreFiltering_centroid+0x66>
            pOutput->pOutBuff[det_count].x_center = pOutput->pOutBuff[i].x_center;
3400b780:	fb07 3305 	mla	r3, r7, r5, r3
3400b784:	f8d4 c000 	ldr.w	ip, [r4]
            det_count++;
3400b788:	3501      	adds	r5, #1
            pOutput->pOutBuff[det_count].x_center = pOutput->pOutBuff[i].x_center;
3400b78a:	f8c3 c000 	str.w	ip, [r3]
            pOutput->pOutBuff[det_count].y_center = pOutput->pOutBuff[i].y_center;
3400b78e:	f8d4 c004 	ldr.w	ip, [r4, #4]
3400b792:	f8c3 c004 	str.w	ip, [r3, #4]
            pOutput->pOutBuff[det_count].width = pOutput->pOutBuff[i].width;
3400b796:	f8d4 c008 	ldr.w	ip, [r4, #8]
3400b79a:	f8c3 c008 	str.w	ip, [r3, #8]
            pOutput->pOutBuff[det_count].height = pOutput->pOutBuff[i].height;
3400b79e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
            pOutput->pOutBuff[det_count].conf = pOutput->pOutBuff[i].conf;
3400b7a2:	edc3 7a04 	vstr	s15, [r3, #16]
            pOutput->pOutBuff[det_count].class_index = pOutput->pOutBuff[i].class_index;
3400b7a6:	6964      	ldr	r4, [r4, #20]
            pOutput->pOutBuff[det_count].height = pOutput->pOutBuff[i].height;
3400b7a8:	f8c3 c00c 	str.w	ip, [r3, #12]
            pOutput->pOutBuff[det_count].class_index = pOutput->pOutBuff[i].class_index;
3400b7ac:	615c      	str	r4, [r3, #20]
    for (int32_t i = 0; i < pInput_static_param->nb_detect; i++)
3400b7ae:	3601      	adds	r6, #1
3400b7b0:	e7d5      	b.n	3400b75e <st_yolox_pp_scoreFiltering_centroid+0x16>

3400b7b2 <st_yolox_pp_level_decode>:
                                 int32_t grid_width,
                                 int32_t grid_height,
                                 float32_t *tmp_a,
                                 st_yolox_pp_static_param_t *pInput_static_param)

{
3400b7b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400b7b6:	ed2d 8b04 	vpush	{d8-d9}
3400b7ba:	b08d      	sub	sp, #52	@ 0x34
3400b7bc:	9306      	str	r3, [sp, #24]
    int32_t count        = 0;
    int32_t count_detect = 0;
    float32_t best_score = 0;
    uint32_t class_index;
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
    float32_t grid_width_inv = 1.0f / grid_width;
3400b7be:	eddd 7a06 	vldr	s15, [sp, #24]
3400b7c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3400b7c6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400b7ca:	eec7 8a87 	vdiv.f32	s17, s15, s14
    float32_t grid_height_inv = 1.0f / grid_height;
3400b7ce:	ed9d 7a1a 	vldr	s14, [sp, #104]	@ 0x68
    float32_t best_score = 0;
3400b7d2:	2300      	movs	r3, #0
    float32_t grid_height_inv = 1.0f / grid_height;
3400b7d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
{
3400b7d8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
    float32_t best_score = 0;
3400b7da:	930a      	str	r3, [sp, #40]	@ 0x28
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400b7dc:	6833      	ldr	r3, [r6, #0]
{
3400b7de:	9209      	str	r2, [sp, #36]	@ 0x24


    if ( 1 == pInput_static_param->nb_classes) {
3400b7e0:	2b01      	cmp	r3, #1
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400b7e2:	f103 0205 	add.w	r2, r3, #5
    float32_t grid_height_inv = 1.0f / grid_height;
3400b7e6:	ee87 9a87 	vdiv.f32	s18, s15, s14
{
3400b7ea:	9008      	str	r0, [sp, #32]
3400b7ec:	9102      	str	r1, [sp, #8]
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400b7ee:	9205      	str	r2, [sp, #20]
    if ( 1 == pInput_static_param->nb_classes) {
3400b7f0:	d00c      	beq.n	3400b80c <st_yolox_pp_level_decode+0x5a>
        } // for col
      } // for row
    } // if nb_classes == 1
    else
    {
      for (int32_t row = 0; row < grid_width; ++row)
3400b7f2:	f04f 0800 	mov.w	r8, #0
    int32_t count_detect = 0;
3400b7f6:	46c1      	mov	r9, r8
    int32_t el_offset    = 0;
3400b7f8:	4645      	mov	r5, r8
3400b7fa:	0093      	lsls	r3, r2, #2
3400b7fc:	9307      	str	r3, [sp, #28]
    int32_t count        = 0;
3400b7fe:	f8cd 800c 	str.w	r8, [sp, #12]
      for (int32_t row = 0; row < grid_width; ++row)
3400b802:	9b06      	ldr	r3, [sp, #24]
3400b804:	4598      	cmp	r8, r3
3400b806:	da13      	bge.n	3400b830 <st_yolox_pp_level_decode+0x7e>
      {
          for (int32_t col = 0; col < grid_height; ++col)
3400b808:	2300      	movs	r3, #0
3400b80a:	e104      	b.n	3400ba16 <st_yolox_pp_level_decode+0x264>
      float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400b80c:	ed96 7a0a 	vldr	s14, [r6, #40]	@ 0x28
3400b810:	ee87 0a87 	vdiv.f32	s0, s15, s14
3400b814:	ee30 0a67 	vsub.f32	s0, s0, s15
3400b818:	f015 fe82 	bl	34021520 <logf>
      for (int32_t row = 0; row < grid_width; ++row)
3400b81c:	2500      	movs	r5, #0
      float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400b81e:	eef1 9a40 	vneg.f32	s19, s0
    int32_t count_detect = 0;
3400b822:	46a9      	mov	r9, r5
    int32_t count        = 0;
3400b824:	4629      	mov	r1, r5
    int32_t el_offset    = 0;
3400b826:	462b      	mov	r3, r5
3400b828:	2006      	movs	r0, #6
      for (int32_t row = 0; row < grid_width; ++row)
3400b82a:	9a06      	ldr	r2, [sp, #24]
3400b82c:	4295      	cmp	r5, r2
3400b82e:	db69      	blt.n	3400b904 <st_yolox_pp_level_decode+0x152>
      } // for row
    } //  else (nb_classes != 1)

    return count_detect;

}
3400b830:	4648      	mov	r0, r9
3400b832:	b00d      	add	sp, #52	@ 0x34
3400b834:	ecbd 8b04 	vpop	{d8-d9}
3400b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ( pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] >= computedThreshold) {
3400b83c:	ed97 0a04 	vldr	s0, [r7, #16]
3400b840:	eeb4 0ae9 	vcmpe.f32	s0, s19
3400b844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b848:	db45      	blt.n	3400b8d6 <st_yolox_pp_level_decode+0x124>
3400b84a:	9303      	str	r3, [sp, #12]
              pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS] = vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS]);
3400b84c:	9b02      	ldr	r3, [sp, #8]
3400b84e:	1d0c      	adds	r4, r1, #4
3400b850:	eb03 0484 	add.w	r4, r3, r4, lsl #2
3400b854:	9101      	str	r1, [sp, #4]
3400b856:	f000 f9f6 	bl	3400bc46 <vision_models_sigmoid_f>
3400b85a:	ed84 0a00 	vstr	s0, [r4]
              pOutBuff[count + AI_YOLOV2_PP_CLASSPROB] = pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS];
3400b85e:	ed84 0a01 	vstr	s0, [r4, #4]
              pOutBuff[count + AI_YOLOV2_PP_XCENTER]   = (col + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_XCENTER])) * grid_width_inv;
3400b862:	ed97 0a00 	vldr	s0, [r7]
3400b866:	f000 f9ee 	bl	3400bc46 <vision_models_sigmoid_f>
3400b86a:	ee07 ba90 	vmov	s15, fp
3400b86e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b872:	ee77 7a80 	vadd.f32	s15, s15, s0
3400b876:	ee67 7aa8 	vmul.f32	s15, s15, s17
3400b87a:	ed44 7a04 	vstr	s15, [r4, #-16]
              pOutBuff[count + AI_YOLOV2_PP_YCENTER]   = (row + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_YCENTER])) * grid_height_inv;
3400b87e:	ed97 0a01 	vldr	s0, [r7, #4]
3400b882:	f000 f9e0 	bl	3400bc46 <vision_models_sigmoid_f>
3400b886:	ee07 5a90 	vmov	s15, r5
3400b88a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b88e:	ee77 7a80 	vadd.f32	s15, s15, s0
3400b892:	ee67 7a89 	vmul.f32	s15, s15, s18
3400b896:	ed44 7a03 	vstr	s15, [r4, #-12]
              pOutBuff[count + AI_YOLOV2_PP_WIDTHREL]  = (pAnchors[2 * anch + 0] * expf(pInbuff[el_offset + AI_YOLOV2_PP_WIDTHREL])) * grid_width_inv;
3400b89a:	ed97 0a02 	vldr	s0, [r7, #8]
3400b89e:	ed9a 8a00 	vldr	s16, [sl]
3400b8a2:	f015 fdc9 	bl	34021438 <expf>
3400b8a6:	ee28 8a00 	vmul.f32	s16, s16, s0
3400b8aa:	ee28 8a28 	vmul.f32	s16, s16, s17
3400b8ae:	ed04 8a02 	vstr	s16, [r4, #-8]
              pOutBuff[count + AI_YOLOV2_PP_HEIGHTREL] = (pAnchors[2 * anch + 1] * expf(pInbuff[el_offset + AI_YOLOV2_PP_HEIGHTREL])) * grid_height_inv;
3400b8b2:	ed97 0a03 	vldr	s0, [r7, #12]
3400b8b6:	ed9a 8a01 	vldr	s16, [sl, #4]
3400b8ba:	f015 fdbd 	bl	34021438 <expf>
3400b8be:	ee28 8a00 	vmul.f32	s16, s16, s0
3400b8c2:	ee28 8a09 	vmul.f32	s16, s16, s18
              count_detect++;
3400b8c6:	2006      	movs	r0, #6
              pOutBuff[count + AI_YOLOV2_PP_HEIGHTREL] = (pAnchors[2 * anch + 1] * expf(pInbuff[el_offset + AI_YOLOV2_PP_HEIGHTREL])) * grid_height_inv;
3400b8c8:	ed04 8a01 	vstr	s16, [r4, #-4]
              count += anch_stride;
3400b8cc:	9901      	ldr	r1, [sp, #4]
              count_detect++;
3400b8ce:	9b03      	ldr	r3, [sp, #12]
              count += anch_stride;
3400b8d0:	3106      	adds	r1, #6
              count_detect++;
3400b8d2:	f109 0901 	add.w	r9, r9, #1
          for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400b8d6:	f108 0801 	add.w	r8, r8, #1
3400b8da:	3718      	adds	r7, #24
3400b8dc:	f10a 0a08 	add.w	sl, sl, #8
3400b8e0:	6872      	ldr	r2, [r6, #4]
3400b8e2:	4542      	cmp	r2, r8
3400b8e4:	dcaa      	bgt.n	3400b83c <st_yolox_pp_level_decode+0x8a>
3400b8e6:	fb00 3308 	mla	r3, r0, r8, r3
        for (int32_t col = 0; col < grid_height; ++col)
3400b8ea:	f10b 0b01 	add.w	fp, fp, #1
3400b8ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
3400b8f0:	4593      	cmp	fp, r2
3400b8f2:	da0a      	bge.n	3400b90a <st_yolox_pp_level_decode+0x158>
3400b8f4:	9a08      	ldr	r2, [sp, #32]
          for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400b8f6:	f04f 0800 	mov.w	r8, #0
3400b8fa:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
3400b8fe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
3400b902:	e7ed      	b.n	3400b8e0 <st_yolox_pp_level_decode+0x12e>
        for (int32_t col = 0; col < grid_height; ++col)
3400b904:	f04f 0b00 	mov.w	fp, #0
3400b908:	e7f1      	b.n	3400b8ee <st_yolox_pp_level_decode+0x13c>
      for (int32_t row = 0; row < grid_width; ++row)
3400b90a:	3501      	adds	r5, #1
3400b90c:	e78d      	b.n	3400b82a <st_yolox_pp_level_decode+0x78>
                  pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] = vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS]);
3400b90e:	ed17 0a01 	vldr	s0, [r7, #-4]
3400b912:	f000 f998 	bl	3400bc46 <vision_models_sigmoid_f>
                  vision_models_softmax_f(&pInbuff[el_offset + AI_YOLOV2_PP_CLASSPROB],
3400b916:	4621      	mov	r1, r4
3400b918:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
3400b91a:	6832      	ldr	r2, [r6, #0]
                  pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] = vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS]);
3400b91c:	ed04 0a01 	vstr	s0, [r4, #-4]
                  vision_models_softmax_f(&pInbuff[el_offset + AI_YOLOV2_PP_CLASSPROB],
3400b920:	4638      	mov	r0, r7
3400b922:	f000 f99d 	bl	3400bc60 <vision_models_softmax_f>
                  for (int32_t k = 0; k < pInput_static_param->nb_classes; k++)
3400b926:	6831      	ldr	r1, [r6, #0]
3400b928:	4622      	mov	r2, r4
3400b92a:	2900      	cmp	r1, #0
3400b92c:	f101 0301 	add.w	r3, r1, #1
3400b930:	bfb8      	it	lt
3400b932:	2301      	movlt	r3, #1
3400b934:	3b01      	subs	r3, #1
3400b936:	d17f      	bne.n	3400ba38 <st_yolox_pp_level_decode+0x286>
                  vision_models_maxi_if32ou32(&pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB],
3400b938:	4620      	mov	r0, r4
3400b93a:	ab0b      	add	r3, sp, #44	@ 0x2c
3400b93c:	aa0a      	add	r2, sp, #40	@ 0x28
3400b93e:	f000 fa6e 	bl	3400be1e <vision_models_maxi_if32ou32>
                  if (best_score >= pInput_static_param->conf_threshold)
3400b942:	ed96 7a0a 	vldr	s14, [r6, #40]	@ 0x28
3400b946:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
3400b94a:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400b952:	d84d      	bhi.n	3400b9f0 <st_yolox_pp_level_decode+0x23e>
                      pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS] = pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS];
3400b954:	9b03      	ldr	r3, [sp, #12]
3400b956:	9902      	ldr	r1, [sp, #8]
3400b958:	3304      	adds	r3, #4
3400b95a:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
                      for (int32_t k = 0; k < pInput_static_param->nb_classes; ++k)
3400b95e:	6831      	ldr	r1, [r6, #0]
                      pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS] = pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS];
3400b960:	f854 2c04 	ldr.w	r2, [r4, #-4]
3400b964:	4653      	mov	r3, sl
3400b966:	2900      	cmp	r1, #0
3400b968:	f8ca 2000 	str.w	r2, [sl]
                      for (int32_t k = 0; k < pInput_static_param->nb_classes; ++k)
3400b96c:	4620      	mov	r0, r4
3400b96e:	f101 0201 	add.w	r2, r1, #1
3400b972:	bfb8      	it	lt
3400b974:	2201      	movlt	r2, #1
3400b976:	3304      	adds	r3, #4
3400b978:	3a01      	subs	r2, #1
3400b97a:	d166      	bne.n	3400ba4a <st_yolox_pp_level_decode+0x298>
                      pOutBuff[count + AI_YOLOV2_PP_XCENTER]   = (col + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_XCENTER])) * grid_width_inv;
3400b97c:	ed17 0a05 	vldr	s0, [r7, #-20]	@ 0xffffffec
3400b980:	f000 f961 	bl	3400bc46 <vision_models_sigmoid_f>
3400b984:	eddd 7a01 	vldr	s15, [sp, #4]
3400b988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b98c:	ee77 7a80 	vadd.f32	s15, s15, s0
3400b990:	ee67 7aa8 	vmul.f32	s15, s15, s17
3400b994:	ed4a 7a04 	vstr	s15, [sl, #-16]
                      pOutBuff[count + AI_YOLOV2_PP_YCENTER]   = (row + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_YCENTER])) * grid_height_inv;
3400b998:	ed17 0a04 	vldr	s0, [r7, #-16]
3400b99c:	f000 f953 	bl	3400bc46 <vision_models_sigmoid_f>
3400b9a0:	ee07 8a90 	vmov	s15, r8
3400b9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400b9a8:	ee77 7a80 	vadd.f32	s15, s15, s0
3400b9ac:	ee67 7a89 	vmul.f32	s15, s15, s18
3400b9b0:	ed4a 7a03 	vstr	s15, [sl, #-12]
                      pOutBuff[count + AI_YOLOV2_PP_WIDTHREL]  = (pAnchors[2 * anch + 0] * expf(pInbuff[el_offset + AI_YOLOV2_PP_WIDTHREL])) * grid_width_inv;
3400b9b4:	ed17 0a03 	vldr	s0, [r7, #-12]
3400b9b8:	ed9b 8a00 	vldr	s16, [fp]
3400b9bc:	f015 fd3c 	bl	34021438 <expf>
3400b9c0:	ee28 8a00 	vmul.f32	s16, s16, s0
3400b9c4:	ee28 8a28 	vmul.f32	s16, s16, s17
3400b9c8:	ed0a 8a02 	vstr	s16, [sl, #-8]
                      pOutBuff[count + AI_YOLOV2_PP_HEIGHTREL] = (pAnchors[2 * anch + 1] * expf(pInbuff[el_offset + AI_YOLOV2_PP_HEIGHTREL])) * grid_height_inv;
3400b9cc:	ed17 0a02 	vldr	s0, [r7, #-8]
3400b9d0:	ed9b 8a01 	vldr	s16, [fp, #4]
3400b9d4:	f015 fd30 	bl	34021438 <expf>
3400b9d8:	ee28 8a00 	vmul.f32	s16, s16, s0
3400b9dc:	ee28 8a09 	vmul.f32	s16, s16, s18
3400b9e0:	ed0a 8a01 	vstr	s16, [sl, #-4]
                      count += anch_stride;
3400b9e4:	9b03      	ldr	r3, [sp, #12]
3400b9e6:	9a05      	ldr	r2, [sp, #20]
                      count_detect++;
3400b9e8:	f109 0901 	add.w	r9, r9, #1
                      count += anch_stride;
3400b9ec:	4413      	add	r3, r2
3400b9ee:	9303      	str	r3, [sp, #12]
              for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400b9f0:	9b04      	ldr	r3, [sp, #16]
3400b9f2:	f10b 0b08 	add.w	fp, fp, #8
3400b9f6:	3301      	adds	r3, #1
3400b9f8:	9304      	str	r3, [sp, #16]
3400b9fa:	9b07      	ldr	r3, [sp, #28]
3400b9fc:	441c      	add	r4, r3
3400b9fe:	9b05      	ldr	r3, [sp, #20]
3400ba00:	441d      	add	r5, r3
3400ba02:	9b07      	ldr	r3, [sp, #28]
3400ba04:	441f      	add	r7, r3
3400ba06:	6873      	ldr	r3, [r6, #4]
3400ba08:	9a04      	ldr	r2, [sp, #16]
3400ba0a:	4293      	cmp	r3, r2
3400ba0c:	f73f af7f 	bgt.w	3400b90e <st_yolox_pp_level_decode+0x15c>
          for (int32_t col = 0; col < grid_height; ++col)
3400ba10:	9b01      	ldr	r3, [sp, #4]
3400ba12:	3d05      	subs	r5, #5
3400ba14:	3301      	adds	r3, #1
3400ba16:	9301      	str	r3, [sp, #4]
3400ba18:	9b01      	ldr	r3, [sp, #4]
3400ba1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
3400ba1c:	4293      	cmp	r3, r2
3400ba1e:	da19      	bge.n	3400ba54 <st_yolox_pp_level_decode+0x2a2>
3400ba20:	9b02      	ldr	r3, [sp, #8]
3400ba22:	3505      	adds	r5, #5
3400ba24:	eb03 0485 	add.w	r4, r3, r5, lsl #2
3400ba28:	9b08      	ldr	r3, [sp, #32]
3400ba2a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
3400ba2e:	eb03 0785 	add.w	r7, r3, r5, lsl #2
              for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400ba32:	2300      	movs	r3, #0
3400ba34:	9304      	str	r3, [sp, #16]
3400ba36:	e7e6      	b.n	3400ba06 <st_yolox_pp_level_decode+0x254>
                                                                       pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB + k];
3400ba38:	ed92 7a00 	vldr	s14, [r2]
                    pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB + k] = pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] *
3400ba3c:	ed54 7a01 	vldr	s15, [r4, #-4]
3400ba40:	ee67 7a87 	vmul.f32	s15, s15, s14
3400ba44:	ece2 7a01 	vstmia	r2!, {s15}
                  for (int32_t k = 0; k < pInput_static_param->nb_classes; k++)
3400ba48:	e774      	b.n	3400b934 <st_yolox_pp_level_decode+0x182>
                          pOutBuff[count + AI_YOLOV2_PP_CLASSPROB + k] = pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB + k];
3400ba4a:	f850 1b04 	ldr.w	r1, [r0], #4
3400ba4e:	f843 1b04 	str.w	r1, [r3], #4
                      for (int32_t k = 0; k < pInput_static_param->nb_classes; ++k)
3400ba52:	e791      	b.n	3400b978 <st_yolox_pp_level_decode+0x1c6>
      for (int32_t row = 0; row < grid_width; ++row)
3400ba54:	f108 0801 	add.w	r8, r8, #1
3400ba58:	e6d3      	b.n	3400b802 <st_yolox_pp_level_decode+0x50>

3400ba5a <st_yolox_pp_store_detections>:
int32_t st_yolox_pp_store_detections(float32_t *pInbuff,
                                     od_pp_out_t *pOutput,
                                     int32_t level_count_detect,
                                     int32_t det_count,
                                     st_yolox_pp_static_param_t *pInput_static_param)
{
3400ba5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ba5e:	b08b      	sub	sp, #44	@ 0x2c
3400ba60:	461e      	mov	r6, r3
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400ba62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
{
3400ba64:	4604      	mov	r4, r0
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400ba66:	681b      	ldr	r3, [r3, #0]
{
3400ba68:	468b      	mov	fp, r1


    if (1 == pInput_static_param->nb_classes) {
3400ba6a:	2b01      	cmp	r3, #1
{
3400ba6c:	4617      	mov	r7, r2
    if (1 == pInput_static_param->nb_classes) {
3400ba6e:	d030      	beq.n	3400bad2 <st_yolox_pp_store_detections+0x78>
      }
    } // if nb_classes == 1
    else
    {
      int32_t remaining_boxes = level_count_detect;
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400ba70:	f04f 0900 	mov.w	r9, #0
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400ba74:	f103 0805 	add.w	r8, r3, #5
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400ba78:	fb02 f308 	mul.w	r3, r2, r8
3400ba7c:	9303      	str	r3, [sp, #12]
3400ba7e:	ea4f 0388 	mov.w	r3, r8, lsl #2
3400ba82:	9302      	str	r3, [sp, #8]
3400ba84:	9b03      	ldr	r3, [sp, #12]
3400ba86:	454b      	cmp	r3, r9
3400ba88:	dd2c      	ble.n	3400bae4 <st_yolox_pp_store_detections+0x8a>
          vision_models_maxi_p_if32ou16(&pInbuff[i + AI_YOLOV2_PP_CLASSPROB],
              pInput_static_param->nb_classes,
              anch_stride,
              best_score_array,
              class_index_array,
              MIN(remaining_boxes,4));
3400ba8a:	2f04      	cmp	r7, #4
3400ba8c:	46ba      	mov	sl, r7
3400ba8e:	bfa8      	it	ge
3400ba90:	f04f 0a04 	movge.w	sl, #4
          vision_models_maxi_p_if32ou16(&pInbuff[i + AI_YOLOV2_PP_CLASSPROB],
3400ba94:	9914      	ldr	r1, [sp, #80]	@ 0x50
3400ba96:	ab04      	add	r3, sp, #16
3400ba98:	9300      	str	r3, [sp, #0]
3400ba9a:	f8cd a004 	str.w	sl, [sp, #4]
3400ba9e:	f104 0014 	add.w	r0, r4, #20
3400baa2:	6809      	ldr	r1, [r1, #0]
3400baa4:	ab06      	add	r3, sp, #24
3400baa6:	eb00 0089 	add.w	r0, r0, r9, lsl #2
3400baaa:	fa1f f288 	uxth.w	r2, r8
3400baae:	f000 f985 	bl	3400bdbc <vision_models_maxi_p_if32ou16>

          for (int _i = 0; _i < MIN(remaining_boxes,4); _i++)
3400bab2:	2100      	movs	r1, #0
3400bab4:	458a      	cmp	sl, r1
3400bab6:	f10a 0301 	add.w	r3, sl, #1
3400baba:	bfb8      	it	lt
3400babc:	2301      	movlt	r3, #1
3400babe:	ea4f 0589 	mov.w	r5, r9, lsl #2
3400bac2:	4425      	add	r5, r4
3400bac4:	a806      	add	r0, sp, #24
3400bac6:	3b01      	subs	r3, #1
3400bac8:	d127      	bne.n	3400bb1a <st_yolox_pp_store_detections+0xc0>
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400baca:	9b02      	ldr	r3, [sp, #8]
                  pOutput->pOutBuff[det_count].conf        = best_score_array[_i];
                  pOutput->pOutBuff[det_count].class_index = class_index_array[_i];
                  det_count++;
              }
          } // for _i
          remaining_boxes-=4;
3400bacc:	3f04      	subs	r7, #4
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400bace:	4499      	add	r9, r3
3400bad0:	e7d8      	b.n	3400ba84 <st_yolox_pp_store_detections+0x2a>
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400bad2:	2106      	movs	r1, #6
3400bad4:	4351      	muls	r1, r2
3400bad6:	2200      	movs	r2, #0
          pOutput->pOutBuff[det_count].x_center    = pInbuff[i + AI_YOLOV2_PP_XCENTER];
3400bad8:	2018      	movs	r0, #24
          pOutput->pOutBuff[det_count].class_index = 0;
3400bada:	4615      	mov	r5, r2
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400badc:	4291      	cmp	r1, r2
3400bade:	f104 0418 	add.w	r4, r4, #24
3400bae2:	dc03      	bgt.n	3400baec <st_yolox_pp_store_detections+0x92>
      } // for i
    } // else (nb_classes != 1=

    return det_count;

}
3400bae4:	4630      	mov	r0, r6
3400bae6:	b00b      	add	sp, #44	@ 0x2c
3400bae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          pOutput->pOutBuff[det_count].x_center    = pInbuff[i + AI_YOLOV2_PP_XCENTER];
3400baec:	f8db 3000 	ldr.w	r3, [fp]
3400baf0:	f854 7c18 	ldr.w	r7, [r4, #-24]
3400baf4:	fb00 3306 	mla	r3, r0, r6, r3
3400baf8:	601f      	str	r7, [r3, #0]
          pOutput->pOutBuff[det_count].y_center    = pInbuff[i + AI_YOLOV2_PP_YCENTER];
3400bafa:	f854 7c14 	ldr.w	r7, [r4, #-20]
          det_count++;
3400bafe:	3601      	adds	r6, #1
          pOutput->pOutBuff[det_count].y_center    = pInbuff[i + AI_YOLOV2_PP_YCENTER];
3400bb00:	605f      	str	r7, [r3, #4]
          pOutput->pOutBuff[det_count].width       = pInbuff[i + AI_YOLOV2_PP_WIDTHREL];
3400bb02:	f854 7c10 	ldr.w	r7, [r4, #-16]
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400bb06:	3206      	adds	r2, #6
          pOutput->pOutBuff[det_count].width       = pInbuff[i + AI_YOLOV2_PP_WIDTHREL];
3400bb08:	609f      	str	r7, [r3, #8]
          pOutput->pOutBuff[det_count].height      = pInbuff[i + AI_YOLOV2_PP_HEIGHTREL];
3400bb0a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
          pOutput->pOutBuff[det_count].class_index = 0;
3400bb0e:	615d      	str	r5, [r3, #20]
          pOutput->pOutBuff[det_count].height      = pInbuff[i + AI_YOLOV2_PP_HEIGHTREL];
3400bb10:	60df      	str	r7, [r3, #12]
          pOutput->pOutBuff[det_count].conf        = pInbuff[i + AI_YOLOV2_PP_CLASSPROB];
3400bb12:	f854 7c04 	ldr.w	r7, [r4, #-4]
3400bb16:	611f      	str	r7, [r3, #16]
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400bb18:	e7e0      	b.n	3400badc <st_yolox_pp_store_detections+0x82>
              if (best_score_array[_i] >= pInput_static_param->conf_threshold)
3400bb1a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
3400bb1c:	ecf0 7a01 	vldmia	r0!, {s15}
3400bb20:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
3400bb24:	eef4 7ac7 	vcmpe.f32	s15, s14
3400bb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bb2c:	db1e      	blt.n	3400bb6c <st_yolox_pp_store_detections+0x112>
                  pOutput->pOutBuff[det_count].x_center    = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_XCENTER ];
3400bb2e:	f04f 0c18 	mov.w	ip, #24
3400bb32:	f8db 2000 	ldr.w	r2, [fp]
3400bb36:	fb0c 2206 	mla	r2, ip, r6, r2
3400bb3a:	f8d5 c000 	ldr.w	ip, [r5]
                  det_count++;
3400bb3e:	3601      	adds	r6, #1
                  pOutput->pOutBuff[det_count].x_center    = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_XCENTER ];
3400bb40:	f8c2 c000 	str.w	ip, [r2]
                  pOutput->pOutBuff[det_count].y_center    = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_YCENTER];
3400bb44:	f8d5 c004 	ldr.w	ip, [r5, #4]
3400bb48:	f8c2 c004 	str.w	ip, [r2, #4]
                  pOutput->pOutBuff[det_count].width       = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_WIDTHREL];
3400bb4c:	f8d5 c008 	ldr.w	ip, [r5, #8]
3400bb50:	f8c2 c008 	str.w	ip, [r2, #8]
                  pOutput->pOutBuff[det_count].height      = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_HEIGHTREL];
3400bb54:	f8d5 c00c 	ldr.w	ip, [r5, #12]
                  pOutput->pOutBuff[det_count].conf        = best_score_array[_i];
3400bb58:	edc2 7a04 	vstr	s15, [r2, #16]
                  pOutput->pOutBuff[det_count].height      = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_HEIGHTREL];
3400bb5c:	f8c2 c00c 	str.w	ip, [r2, #12]
                  pOutput->pOutBuff[det_count].class_index = class_index_array[_i];
3400bb60:	f10d 0c10 	add.w	ip, sp, #16
3400bb64:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
3400bb68:	f8c2 c014 	str.w	ip, [r2, #20]
          for (int _i = 0; _i < MIN(remaining_boxes,4); _i++)
3400bb6c:	9a02      	ldr	r2, [sp, #8]
3400bb6e:	3101      	adds	r1, #1
3400bb70:	4415      	add	r5, r2
3400bb72:	e7a8      	b.n	3400bac6 <st_yolox_pp_store_detections+0x6c>

3400bb74 <st_yolox_pp_getNNBoxes_centroid>:

int32_t st_yolox_pp_getNNBoxes_centroid(st_yolox_pp_in_t *pInput,
                                        od_pp_out_t *pOut,
                                        st_yolox_pp_static_param_t *pInput_static_param)
{
3400bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400bb78:	b084      	sub	sp, #16

    int32_t count_detect_L = 0;
    int32_t count_detect_M = 0;
    int32_t count_detect_S = 0;

    float32_t tmp_a[pInput_static_param->nb_classes];
3400bb7a:	6813      	ldr	r3, [r2, #0]
{
3400bb7c:	af04      	add	r7, sp, #16
    float32_t tmp_a[pInput_static_param->nb_classes];
3400bb7e:	009b      	lsls	r3, r3, #2
3400bb80:	3307      	adds	r3, #7
3400bb82:	f023 0307 	bic.w	r3, r3, #7
3400bb86:	ebad 0d03 	sub.w	sp, sp, r3
3400bb8a:	f10d 0910 	add.w	r9, sp, #16
    float32_t *pInbuff, *pAnchors;

    //level L
    grid_width = pInput_static_param->grid_width_L;
    grid_height = pInput_static_param->grid_height_L;
    pInbuff = (float32_t *)pInput->pRaw_detections_L;
3400bb8e:	f8d0 8000 	ldr.w	r8, [r0]
    pAnchors = (float32_t *)pInput_static_param->pAnchors_L;
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bb92:	e9cd 9201 	strd	r9, r2, [sp, #4]
3400bb96:	68d3      	ldr	r3, [r2, #12]
{
3400bb98:	460d      	mov	r5, r1
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bb9a:	9300      	str	r3, [sp, #0]
3400bb9c:	6893      	ldr	r3, [r2, #8]
{
3400bb9e:	4606      	mov	r6, r0
3400bba0:	4614      	mov	r4, r2
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bba2:	4641      	mov	r1, r8
3400bba4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
3400bba6:	4640      	mov	r0, r8
3400bba8:	f7ff fe03 	bl	3400b7b2 <st_yolox_pp_level_decode>
    int32_t init_det_count = 0;
    int32_t det_count_L = 0;
    int32_t det_count_M = 0;
    int32_t det_count_S = 0;

    if (pOut->pOutBuff == NULL)
3400bbac:	682b      	ldr	r3, [r5, #0]
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bbae:	4602      	mov	r2, r0
    if (pOut->pOutBuff == NULL)
3400bbb0:	b90b      	cbnz	r3, 3400bbb6 <st_yolox_pp_getNNBoxes_centroid+0x42>
    {
      pOut->pOutBuff = (od_pp_outBuffer_t *)pInput->pRaw_detections_L;
3400bbb2:	6833      	ldr	r3, [r6, #0]
3400bbb4:	602b      	str	r3, [r5, #0]
    }

    det_count_L = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_L,init_det_count,pInput_static_param);
3400bbb6:	4629      	mov	r1, r5
3400bbb8:	2300      	movs	r3, #0
3400bbba:	4640      	mov	r0, r8
3400bbbc:	9400      	str	r4, [sp, #0]
3400bbbe:	f7ff ff4c 	bl	3400ba5a <st_yolox_pp_store_detections>
    //==============================================================================================================================================================

    //level M
    grid_width = pInput_static_param->grid_width_M;
    grid_height = pInput_static_param->grid_height_M;
    pInbuff = (float32_t *)pInput->pRaw_detections_M;
3400bbc2:	f8d6 8004 	ldr.w	r8, [r6, #4]
    pAnchors = (float32_t *)pInput_static_param->pAnchors_M;
    count_detect_M = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bbc6:	e9cd 9401 	strd	r9, r4, [sp, #4]
3400bbca:	6963      	ldr	r3, [r4, #20]
    det_count_L = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_L,init_det_count,pInput_static_param);
3400bbcc:	4682      	mov	sl, r0
    count_detect_M = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bbce:	9300      	str	r3, [sp, #0]
3400bbd0:	4641      	mov	r1, r8
3400bbd2:	6923      	ldr	r3, [r4, #16]
3400bbd4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
3400bbd6:	4640      	mov	r0, r8
3400bbd8:	f7ff fdeb 	bl	3400b7b2 <st_yolox_pp_level_decode>

    det_count_M = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_M,det_count_L,pInput_static_param);
3400bbdc:	4653      	mov	r3, sl
    count_detect_M = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bbde:	4602      	mov	r2, r0
    det_count_M = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_M,det_count_L,pInput_static_param);
3400bbe0:	4629      	mov	r1, r5
3400bbe2:	4640      	mov	r0, r8
3400bbe4:	9400      	str	r4, [sp, #0]
3400bbe6:	f7ff ff38 	bl	3400ba5a <st_yolox_pp_store_detections>


    //level S
    grid_width = pInput_static_param->grid_width_S;
    grid_height = pInput_static_param->grid_height_S;
    pInbuff = (float32_t *)pInput->pRaw_detections_S;
3400bbea:	68b6      	ldr	r6, [r6, #8]
    pAnchors = (float32_t *)pInput_static_param->pAnchors_S;
    count_detect_S = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bbec:	e9cd 9401 	strd	r9, r4, [sp, #4]
3400bbf0:	69e3      	ldr	r3, [r4, #28]
    det_count_M = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_M,det_count_L,pInput_static_param);
3400bbf2:	4680      	mov	r8, r0
    count_detect_S = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bbf4:	9300      	str	r3, [sp, #0]
3400bbf6:	4631      	mov	r1, r6
3400bbf8:	69a3      	ldr	r3, [r4, #24]
3400bbfa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3400bbfc:	4630      	mov	r0, r6
3400bbfe:	f7ff fdd8 	bl	3400b7b2 <st_yolox_pp_level_decode>

    det_count_S = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_S,det_count_M,pInput_static_param);
3400bc02:	4643      	mov	r3, r8
    count_detect_S = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400bc04:	4602      	mov	r2, r0
    det_count_S = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_S,det_count_M,pInput_static_param);
3400bc06:	4629      	mov	r1, r5
3400bc08:	4630      	mov	r0, r6
3400bc0a:	9400      	str	r4, [sp, #0]
3400bc0c:	f7ff ff25 	bl	3400ba5a <st_yolox_pp_store_detections>

    pInput_static_param->nb_detect = det_count_S;
3400bc10:	63e0      	str	r0, [r4, #60]	@ 0x3c

    return (error);
}
3400bc12:	2000      	movs	r0, #0
3400bc14:	46bd      	mov	sp, r7
3400bc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

3400bc1a <od_st_yolox_pp_reset>:


/* ----------------------       Exported routines      ---------------------- */

int32_t od_st_yolox_pp_reset(st_yolox_pp_static_param_t *pInput_static_param)
{
3400bc1a:	4603      	mov	r3, r0
    /* Initializations */
    pInput_static_param->nb_detect = 0;
3400bc1c:	2000      	movs	r0, #0
3400bc1e:	63d8      	str	r0, [r3, #60]	@ 0x3c

	return (AI_OD_POSTPROCESS_ERROR_NO);
}
3400bc20:	4770      	bx	lr

3400bc22 <od_st_yolox_pp_process>:


int32_t od_st_yolox_pp_process(st_yolox_pp_in_t *pInput,
                               od_pp_out_t *pOutput,
                               st_yolox_pp_static_param_t *pInput_static_param)
{
3400bc22:	b538      	push	{r3, r4, r5, lr}
3400bc24:	460c      	mov	r4, r1
3400bc26:	4615      	mov	r5, r2
    int32_t error   = AI_OD_POSTPROCESS_ERROR_NO;

    /* Call Get NN boxes first */
    error = st_yolox_pp_getNNBoxes_centroid(pInput,
3400bc28:	f7ff ffa4 	bl	3400bb74 <st_yolox_pp_getNNBoxes_centroid>
                                            pOutput,
                                            pInput_static_param);
    if (error != AI_OD_POSTPROCESS_ERROR_NO) return (error);
3400bc2c:	b950      	cbnz	r0, 3400bc44 <od_st_yolox_pp_process+0x22>

    /* Then NMS */
    error = st_yolox_pp_nmsFiltering_centroid(pOutput,
3400bc2e:	4629      	mov	r1, r5
3400bc30:	4620      	mov	r0, r4
3400bc32:	f7ff fd0d 	bl	3400b650 <st_yolox_pp_nmsFiltering_centroid>
                                              pInput_static_param);
    if (error != AI_OD_POSTPROCESS_ERROR_NO) return (error);
3400bc36:	b928      	cbnz	r0, 3400bc44 <od_st_yolox_pp_process+0x22>

    /* And score re-filtering */
    error = st_yolox_pp_scoreFiltering_centroid(pOutput,
3400bc38:	4629      	mov	r1, r5
3400bc3a:	4620      	mov	r0, r4
                                                pInput_static_param);

    return (error);
}
3400bc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    error = st_yolox_pp_scoreFiltering_centroid(pOutput,
3400bc40:	f7ff bd82 	b.w	3400b748 <st_yolox_pp_scoreFiltering_centroid>
}
3400bc44:	bd38      	pop	{r3, r4, r5, pc}

3400bc46 <vision_models_sigmoid_f>:
#include "vision_models_pp.h"



float32_t vision_models_sigmoid_f(float32_t x)
{
3400bc46:	b508      	push	{r3, lr}
  return (1.0f / (1.0f + expf(-x)));
3400bc48:	eeb1 0a40 	vneg.f32	s0, s0
3400bc4c:	f015 fbf4 	bl	34021438 <expf>
3400bc50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400bc54:	ee30 0a27 	vadd.f32	s0, s0, s15
}
3400bc58:	ee87 0a80 	vdiv.f32	s0, s15, s0
3400bc5c:	bd08      	pop	{r3, pc}
	...

3400bc60 <vision_models_softmax_f>:


void vision_models_softmax_f(float32_t *input_x, float32_t *output_x, int32_t len_x, float32_t *tmp_x)
{
3400bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400bc64:	460f      	mov	r7, r1
3400bc66:	ed2d 8b02 	vpush	{d8}
3400bc6a:	4614      	mov	r4, r2
3400bc6c:	461d      	mov	r5, r3
3400bc6e:	4606      	mov	r6, r0
3400bc70:	4698      	mov	r8, r3
  float32_t sum = 0;

  for (int32_t i = 0; i < len_x; ++i)
3400bc72:	469a      	mov	sl, r3
3400bc74:	f04f 0900 	mov.w	r9, #0
  float32_t sum = 0;
3400bc78:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 3400bccc <vision_models_softmax_f+0x6c>
  for (int32_t i = 0; i < len_x; ++i)
3400bc7c:	45a1      	cmp	r9, r4
3400bc7e:	db13      	blt.n	3400bca8 <vision_models_softmax_f+0x48>
  {
    tmp_x[i] = expf(input_x[i]);
    sum = sum + tmp_x[i];
  }
  sum = 1.0f / sum;
3400bc80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400bc84:	2c00      	cmp	r4, #0
3400bc86:	f104 0201 	add.w	r2, r4, #1
3400bc8a:	ee87 7a88 	vdiv.f32	s14, s15, s16
  for (int32_t i = 0; i < len_x; ++i)
3400bc8e:	bfb8      	it	lt
3400bc90:	2201      	movlt	r2, #1
3400bc92:	3a01      	subs	r2, #1
3400bc94:	d113      	bne.n	3400bcbe <vision_models_softmax_f+0x5e>
  {
    tmp_x[i] *= sum;
  }
  memcpy(output_x, tmp_x, len_x * sizeof(float32_t));
}
3400bc96:	ecbd 8b02 	vpop	{d8}
  memcpy(output_x, tmp_x, len_x * sizeof(float32_t));
3400bc9a:	4629      	mov	r1, r5
3400bc9c:	4638      	mov	r0, r7
3400bc9e:	00a2      	lsls	r2, r4, #2
}
3400bca0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  memcpy(output_x, tmp_x, len_x * sizeof(float32_t));
3400bca4:	f013 b973 	b.w	3401ef8e <memcpy>
    tmp_x[i] = expf(input_x[i]);
3400bca8:	ecb6 0a01 	vldmia	r6!, {s0}
3400bcac:	f015 fbc4 	bl	34021438 <expf>
  for (int32_t i = 0; i < len_x; ++i)
3400bcb0:	f109 0901 	add.w	r9, r9, #1
    tmp_x[i] = expf(input_x[i]);
3400bcb4:	ecaa 0a01 	vstmia	sl!, {s0}
    sum = sum + tmp_x[i];
3400bcb8:	ee38 8a00 	vadd.f32	s16, s16, s0
  for (int32_t i = 0; i < len_x; ++i)
3400bcbc:	e7de      	b.n	3400bc7c <vision_models_softmax_f+0x1c>
    tmp_x[i] *= sum;
3400bcbe:	edd8 7a00 	vldr	s15, [r8]
3400bcc2:	ee67 7a87 	vmul.f32	s15, s15, s14
3400bcc6:	ece8 7a01 	vstmia	r8!, {s15}
  for (int32_t i = 0; i < len_x; ++i)
3400bcca:	e7e2      	b.n	3400bc92 <vision_models_softmax_f+0x32>
3400bccc:	00000000 	.word	0x00000000

3400bcd0 <overlap>:

//***************iou ********
//inline
float32_t overlap(float32_t x1, float32_t w1, float32_t x2, float32_t w2)
{
  float32_t l1 = x1 - w1 / 2;
3400bcd0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
3400bcd4:	ee60 0aa7 	vmul.f32	s1, s1, s15
  float32_t l2 = x2 - w2 / 2;
3400bcd8:	ee61 1aa7 	vmul.f32	s3, s3, s15
  float32_t l1 = x1 - w1 / 2;
3400bcdc:	ee30 7a60 	vsub.f32	s14, s0, s1
  float32_t l2 = x2 - w2 / 2;
3400bce0:	ee71 7a61 	vsub.f32	s15, s2, s3
  float32_t left = l1 > l2 ? l1 : l2;
  float32_t r1 = x1 + w1 / 2;
3400bce4:	ee70 0a80 	vadd.f32	s1, s1, s0
  float32_t left = l1 > l2 ? l1 : l2;
3400bce8:	eeb4 7a67 	vcmp.f32	s14, s15
  float32_t r2 = x2 + w2 / 2;
3400bcec:	ee31 1a81 	vadd.f32	s2, s3, s2
  float32_t left = l1 > l2 ? l1 : l2;
3400bcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t right = r1 < r2 ? r1 : r2;
3400bcf4:	eef4 0a41 	vcmp.f32	s1, s2
  float32_t left = l1 > l2 ? l1 : l2;
3400bcf8:	fe77 7a27 	vselgt.f32	s15, s14, s15
  float32_t right = r1 < r2 ? r1 : r2;
3400bcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bd00:	bf48      	it	mi
3400bd02:	eeb0 1a60 	vmovmi.f32	s2, s1
  return (right - left);
}
3400bd06:	ee31 0a67 	vsub.f32	s0, s2, s15
3400bd0a:	4770      	bx	lr

3400bd0c <box_intersection>:

//inline
float32_t box_intersection(float32_t *a, float32_t *b)
{
  float32_t w = overlap(a[0], a[2], b[0], b[2]);
3400bd0c:	edd1 1a02 	vldr	s3, [r1, #8]
3400bd10:	ed91 1a00 	vldr	s2, [r1]
3400bd14:	edd0 0a02 	vldr	s1, [r0, #8]
3400bd18:	ed90 0a00 	vldr	s0, [r0]
{
3400bd1c:	b508      	push	{r3, lr}
  float32_t w = overlap(a[0], a[2], b[0], b[2]);
3400bd1e:	f7ff ffd7 	bl	3400bcd0 <overlap>
  float32_t h = overlap(a[1], a[3], b[1], b[3]);
  if (w < 0 || h < 0) return 0;
3400bd22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3400bd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t w = overlap(a[0], a[2], b[0], b[2]);
3400bd2a:	eef0 6a40 	vmov.f32	s13, s0
  if (w < 0 || h < 0) return 0;
3400bd2e:	d411      	bmi.n	3400bd54 <box_intersection+0x48>
  float32_t h = overlap(a[1], a[3], b[1], b[3]);
3400bd30:	edd1 1a03 	vldr	s3, [r1, #12]
3400bd34:	ed91 1a01 	vldr	s2, [r1, #4]
3400bd38:	edd0 0a03 	vldr	s1, [r0, #12]
3400bd3c:	ed90 0a01 	vldr	s0, [r0, #4]
3400bd40:	f7ff ffc6 	bl	3400bcd0 <overlap>
  if (w < 0 || h < 0) return 0;
3400bd44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3400bd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bd4c:	d402      	bmi.n	3400bd54 <box_intersection+0x48>
  float32_t area = w * h;
3400bd4e:	ee26 0a80 	vmul.f32	s0, s13, s0
  return (area);
}
3400bd52:	bd08      	pop	{r3, pc}
  if (w < 0 || h < 0) return 0;
3400bd54:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 3400bd5c <box_intersection+0x50>
3400bd58:	e7fb      	b.n	3400bd52 <box_intersection+0x46>
3400bd5a:	bf00      	nop
3400bd5c:	00000000 	.word	0x00000000

3400bd60 <box_union>:

//inline
float32_t box_union(float32_t *a, float32_t *b)
{
3400bd60:	b510      	push	{r4, lr}
  float32_t i = box_intersection(a, b);
3400bd62:	f7ff ffd3 	bl	3400bd0c <box_intersection>
  float32_t u = a[2] * a[3] + b[2] * b[3] - i;
3400bd66:	ed91 7a03 	vldr	s14, [r1, #12]
3400bd6a:	edd1 7a02 	vldr	s15, [r1, #8]
3400bd6e:	edd0 6a02 	vldr	s13, [r0, #8]
3400bd72:	ee67 7a87 	vmul.f32	s15, s15, s14
3400bd76:	ed90 7a03 	vldr	s14, [r0, #12]
3400bd7a:	eee6 7a87 	vfma.f32	s15, s13, s14
  return (u);
}
3400bd7e:	ee37 0ac0 	vsub.f32	s0, s15, s0
3400bd82:	bd10      	pop	{r4, pc}

3400bd84 <vision_models_box_iou>:


float32_t vision_models_box_iou(float32_t *a, float32_t *b)
{
3400bd84:	b508      	push	{r3, lr}
  float32_t I = box_intersection(a, b);
3400bd86:	f7ff ffc1 	bl	3400bd0c <box_intersection>
  float32_t U = box_union(a, b);
 if (I == 0 || U == 0)
3400bd8a:	eeb5 0a40 	vcmp.f32	s0, #0.0
3400bd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t I = box_intersection(a, b);
3400bd92:	eeb0 6a40 	vmov.f32	s12, s0
 if (I == 0 || U == 0)
3400bd96:	d00b      	beq.n	3400bdb0 <vision_models_box_iou+0x2c>
  float32_t U = box_union(a, b);
3400bd98:	f7ff ffe2 	bl	3400bd60 <box_union>
 if (I == 0 || U == 0)
3400bd9c:	eeb5 0a40 	vcmp.f32	s0, #0.0
3400bda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t U = box_union(a, b);
3400bda4:	eef0 7a40 	vmov.f32	s15, s0
 if (I == 0 || U == 0)
3400bda8:	d002      	beq.n	3400bdb0 <vision_models_box_iou+0x2c>
  {
    return 0;
  }
  return (I / U);
3400bdaa:	ee86 0a27 	vdiv.f32	s0, s12, s15
}
3400bdae:	bd08      	pop	{r3, pc}
    return 0;
3400bdb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 3400bdb8 <vision_models_box_iou+0x34>
3400bdb4:	e7fb      	b.n	3400bdae <vision_models_box_iou+0x2a>
3400bdb6:	bf00      	nop
3400bdb8:	00000000 	.word	0x00000000

3400bdbc <vision_models_maxi_p_if32ou16>:
    index++;
  }

}
void vision_models_maxi_p_if32ou16(float32_t *arr, uint32_t len_arr, uint16_t offset, float32_t *maxim, uint16_t *index, uint32_t parallelize)
{
3400bdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  parallelize = MIN(4, parallelize);
3400bdc0:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
3400bdc4:	2c04      	cmp	r4, #4
3400bdc6:	bf28      	it	cs
3400bdc8:	2404      	movcs	r4, #4
3400bdca:	46a4      	mov	ip, r4
  for (uint16_t k = 0; k < parallelize; k++)
3400bdcc:	2400      	movs	r4, #0
  {
    *index = 0;
3400bdce:	46a0      	mov	r8, r4
  for (uint16_t k = 0; k < parallelize; k++)
3400bdd0:	4564      	cmp	r4, ip
3400bdd2:	d301      	bcc.n	3400bdd8 <vision_models_maxi_p_if32ou16+0x1c>
    }
    maxim++;
    index++;
  }

}
3400bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *maxim = arr[k*offset];
3400bdd8:	fb02 fe04 	mul.w	lr, r2, r4
3400bddc:	eb00 058e 	add.w	r5, r0, lr, lsl #2
3400bde0:	682d      	ldr	r5, [r5, #0]
    *index = 0;
3400bde2:	f8a7 8000 	strh.w	r8, [r7]
    *maxim = arr[k*offset];
3400bde6:	601d      	str	r5, [r3, #0]
    for (uint16_t i = 1; i < len_arr; i++)
3400bde8:	2501      	movs	r5, #1
3400bdea:	428d      	cmp	r5, r1
3400bdec:	d304      	bcc.n	3400bdf8 <vision_models_maxi_p_if32ou16+0x3c>
  for (uint16_t k = 0; k < parallelize; k++)
3400bdee:	3401      	adds	r4, #1
    maxim++;
3400bdf0:	3304      	adds	r3, #4
    index++;
3400bdf2:	3702      	adds	r7, #2
  for (uint16_t k = 0; k < parallelize; k++)
3400bdf4:	b2a4      	uxth	r4, r4
3400bdf6:	e7eb      	b.n	3400bdd0 <vision_models_maxi_p_if32ou16+0x14>
      if (arr[k*offset+i] > *maxim)
3400bdf8:	eb05 060e 	add.w	r6, r5, lr
3400bdfc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
3400be00:	edd6 7a00 	vldr	s15, [r6]
3400be04:	ed93 7a00 	vldr	s14, [r3]
3400be08:	eef4 7ac7 	vcmpe.f32	s15, s14
3400be0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        *maxim = arr[k*offset+i];
3400be10:	bfc4      	itt	gt
3400be12:	edc3 7a00 	vstrgt	s15, [r3]
        *index = i;
3400be16:	803d      	strhgt	r5, [r7, #0]
    for (uint16_t i = 1; i < len_arr; i++)
3400be18:	3501      	adds	r5, #1
3400be1a:	b2ad      	uxth	r5, r5
3400be1c:	e7e5      	b.n	3400bdea <vision_models_maxi_p_if32ou16+0x2e>

3400be1e <vision_models_maxi_if32ou32>:
  }

}

void vision_models_maxi_if32ou32(float32_t *arr, uint32_t len_arr, float32_t *maxim, uint32_t *index)
{
3400be1e:	b530      	push	{r4, r5, lr}
  *index = 0;
3400be20:	2400      	movs	r4, #0
  *maxim = arr[0];

  for (uint32_t i = 1; i < len_arr; i++)
3400be22:	2501      	movs	r5, #1
  *index = 0;
3400be24:	601c      	str	r4, [r3, #0]
  *maxim = arr[0];
3400be26:	f850 4b04 	ldr.w	r4, [r0], #4
3400be2a:	2900      	cmp	r1, #0
3400be2c:	6014      	str	r4, [r2, #0]
  for (uint32_t i = 1; i < len_arr; i++)
3400be2e:	bf14      	ite	ne
3400be30:	460c      	movne	r4, r1
3400be32:	462c      	moveq	r4, r5
3400be34:	3c01      	subs	r4, #1
3400be36:	d100      	bne.n	3400be3a <vision_models_maxi_if32ou32+0x1c>
    {
      *maxim = arr[i];
      *index = i;
    }
  }
}
3400be38:	bd30      	pop	{r4, r5, pc}
    if (arr[i] > *maxim)
3400be3a:	ecf0 7a01 	vldmia	r0!, {s15}
3400be3e:	ed92 7a00 	vldr	s14, [r2]
3400be42:	eef4 7ac7 	vcmpe.f32	s15, s14
3400be46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *maxim = arr[i];
3400be4a:	bfc4      	itt	gt
3400be4c:	edc2 7a00 	vstrgt	s15, [r2]
      *index = i;
3400be50:	601d      	strgt	r5, [r3, #0]
  for (uint32_t i = 1; i < len_arr; i++)
3400be52:	3501      	adds	r5, #1
3400be54:	e7ee      	b.n	3400be34 <vision_models_maxi_if32ou32+0x16>
	...

3400be58 <LTDC_FillRectRgb888>:
  return 0;
}

static int32_t LTDC_FillRectRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                                   uint32_t Color)
{
3400be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  r = (Color >> 16) & 0xff;
  g = (Color >> 8) & 0xff;
  b = (Color >> 0) & 0xff;

  layer_width = Lcd_Ctx[Instance].XSize;
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400be5c:	f04f 0834 	mov.w	r8, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400be60:	4e18      	ldr	r6, [pc, #96]	@ (3400bec4 <LTDC_FillRectRgb888+0x6c>)
3400be62:	ea4f 1e40 	mov.w	lr, r0, lsl #5
3400be66:	eb06 1040 	add.w	r0, r6, r0, lsl #5
3400be6a:	f856 600e 	ldr.w	r6, [r6, lr]
  pel += (Ypos * layer_width * 3) + Xpos * 3;
  for (h = 0; h < Height; h++) {
3400be6e:	f04f 0e00 	mov.w	lr, #0
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400be72:	6885      	ldr	r5, [r0, #8]
3400be74:	4814      	ldr	r0, [pc, #80]	@ (3400bec8 <LTDC_FillRectRgb888+0x70>)
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400be76:	fb02 1206 	mla	r2, r2, r6, r1
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400be7a:	fb08 0005 	mla	r0, r8, r5, r0
{
3400be7e:	9c07      	ldr	r4, [sp, #28]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400be80:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400be82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  r = (Color >> 16) & 0xff;
3400be86:	f3c4 4707 	ubfx	r7, r4, #16, #8
  g = (Color >> 8) & 0xff;
3400be8a:	f3c4 2c07 	ubfx	ip, r4, #8, #8
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400be8e:	1881      	adds	r1, r0, r2
  b = (Color >> 0) & 0xff;
3400be90:	b2e4      	uxtb	r4, r4
      /* FIXME */
      pel[3 * w + 0] = b;
      pel[3 * w + 1] = g;
      pel[3 * w + 2] = r;
    }
    pel += layer_width * 3;
3400be92:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  for (h = 0; h < Height; h++) {
3400be96:	9a06      	ldr	r2, [sp, #24]
3400be98:	4596      	cmp	lr, r2
3400be9a:	d010      	beq.n	3400bebe <LTDC_FillRectRgb888+0x66>
3400be9c:	460a      	mov	r2, r1
    for (w = 0; w < Width; w++) {
3400be9e:	1c58      	adds	r0, r3, #1
3400bea0:	e005      	b.n	3400beae <LTDC_FillRectRgb888+0x56>
      pel[3 * w + 0] = b;
3400bea2:	f802 4c03 	strb.w	r4, [r2, #-3]
      pel[3 * w + 1] = g;
3400bea6:	f802 cc02 	strb.w	ip, [r2, #-2]
      pel[3 * w + 2] = r;
3400beaa:	f802 7c01 	strb.w	r7, [r2, #-1]
    for (w = 0; w < Width; w++) {
3400beae:	3801      	subs	r0, #1
3400beb0:	f102 0203 	add.w	r2, r2, #3
3400beb4:	d1f5      	bne.n	3400bea2 <LTDC_FillRectRgb888+0x4a>
    pel += layer_width * 3;
3400beb6:	4431      	add	r1, r6
  for (h = 0; h < Height; h++) {
3400beb8:	f10e 0e01 	add.w	lr, lr, #1
3400bebc:	e7eb      	b.n	3400be96 <LTDC_FillRectRgb888+0x3e>
  }

  return 0;
}
3400bebe:	2000      	movs	r0, #0
3400bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400bec4:	340dbe14 	.word	0x340dbe14
3400bec8:	340dbe34 	.word	0x340dbe34

3400becc <LTDC_FillRectArgb8888>:

static int32_t LTDC_FillRectArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                                     uint32_t Color)
{
3400becc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  r = (Color >> 16) & 0xff;
  g = (Color >> 8) & 0xff;
  b = (Color >> 0) & 0xff;

  layer_width = Lcd_Ctx[Instance].XSize;
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bed0:	f04f 0834 	mov.w	r8, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400bed4:	4c19      	ldr	r4, [pc, #100]	@ (3400bf3c <LTDC_FillRectArgb8888+0x70>)
3400bed6:	ea4f 1e40 	mov.w	lr, r0, lsl #5
3400beda:	eb04 1040 	add.w	r0, r4, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bede:	6886      	ldr	r6, [r0, #8]
3400bee0:	4817      	ldr	r0, [pc, #92]	@ (3400bf40 <LTDC_FillRectArgb8888+0x74>)
  layer_width = Lcd_Ctx[Instance].XSize;
3400bee2:	f854 400e 	ldr.w	r4, [r4, lr]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bee6:	fb08 0006 	mla	r0, r8, r6, r0
  pel += (Ypos * layer_width * 4) + Xpos * 4;
  for (h = 0; h < Height; h++) {
3400beea:	f04f 0e00 	mov.w	lr, #0
    for (w = 0; w < Width; w++) {
      /* FIXME */
      pel[4 * w + 0] = r;
      pel[4 * w + 1] = g;
      pel[4 * w + 2] = b;
      pel[4 * w + 3] = 0xff;
3400beee:	f04f 08ff 	mov.w	r8, #255	@ 0xff
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400bef2:	fb02 1104 	mla	r1, r2, r4, r1
{
3400bef6:	9d07      	ldr	r5, [sp, #28]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bef8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  r = (Color >> 16) & 0xff;
3400befa:	f3c5 4707 	ubfx	r7, r5, #16, #8
  g = (Color >> 8) & 0xff;
3400befe:	f3c5 2c07 	ubfx	ip, r5, #8, #8
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400bf02:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  b = (Color >> 0) & 0xff;
3400bf06:	b2ed      	uxtb	r5, r5
    }
    pel += layer_width * 4;
3400bf08:	00a1      	lsls	r1, r4, #2
3400bf0a:	009b      	lsls	r3, r3, #2
  for (h = 0; h < Height; h++) {
3400bf0c:	9806      	ldr	r0, [sp, #24]
3400bf0e:	4586      	cmp	lr, r0
3400bf10:	d010      	beq.n	3400bf34 <LTDC_FillRectArgb8888+0x68>
      pel[4 * w + 3] = 0xff;
3400bf12:	089c      	lsrs	r4, r3, #2
3400bf14:	4610      	mov	r0, r2
3400bf16:	3401      	adds	r4, #1
3400bf18:	e006      	b.n	3400bf28 <LTDC_FillRectArgb8888+0x5c>
      pel[4 * w + 0] = r;
3400bf1a:	7007      	strb	r7, [r0, #0]
      pel[4 * w + 1] = g;
3400bf1c:	f880 c001 	strb.w	ip, [r0, #1]
      pel[4 * w + 2] = b;
3400bf20:	7085      	strb	r5, [r0, #2]
      pel[4 * w + 3] = 0xff;
3400bf22:	f880 8003 	strb.w	r8, [r0, #3]
    for (w = 0; w < Width; w++) {
3400bf26:	3004      	adds	r0, #4
3400bf28:	3c01      	subs	r4, #1
3400bf2a:	d1f6      	bne.n	3400bf1a <LTDC_FillRectArgb8888+0x4e>
    pel += layer_width * 4;
3400bf2c:	440a      	add	r2, r1
  for (h = 0; h < Height; h++) {
3400bf2e:	f10e 0e01 	add.w	lr, lr, #1
3400bf32:	e7eb      	b.n	3400bf0c <LTDC_FillRectArgb8888+0x40>
  }

  return 0;
}
3400bf34:	2000      	movs	r0, #0
3400bf36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400bf3a:	bf00      	nop
3400bf3c:	340dbe14 	.word	0x340dbe14
3400bf40:	340dbe34 	.word	0x340dbe34

3400bf44 <LTDC_GetFormat>:
  return res;
}

static int32_t LTDC_GetFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  return BSP_LCD_GetPixelFormat(Instance, PixelFormat);
3400bf44:	f002 b946 	b.w	3400e1d4 <BSP_LCD_GetPixelFormat>

3400bf48 <LTDC_SetLayer>:
{
3400bf48:	b538      	push	{r3, r4, r5, lr}
3400bf4a:	460c      	mov	r4, r1
  current_layer = LayerIndex;
3400bf4c:	4b08      	ldr	r3, [pc, #32]	@ (3400bf70 <LTDC_SetLayer+0x28>)
{
3400bf4e:	4605      	mov	r5, r0
  current_layer = LayerIndex;
3400bf50:	7019      	strb	r1, [r3, #0]
  res = BSP_LCD_SetActiveLayer(Instance, LayerIndex);
3400bf52:	f002 f949 	bl	3400e1e8 <BSP_LCD_SetActiveLayer>
  if (is_layer_rgb888[LayerIndex]) {
3400bf56:	4b07      	ldr	r3, [pc, #28]	@ (3400bf74 <LTDC_SetLayer+0x2c>)
3400bf58:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
3400bf5c:	b133      	cbz	r3, 3400bf6c <LTDC_SetLayer+0x24>
    Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400bf5e:	2201      	movs	r2, #1
3400bf60:	2103      	movs	r1, #3
    Lcd_Ctx[Instance].BppFactor = 3;
3400bf62:	4b05      	ldr	r3, [pc, #20]	@ (3400bf78 <LTDC_SetLayer+0x30>)
3400bf64:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400bf68:	e9c3 2103 	strd	r2, r1, [r3, #12]
}
3400bf6c:	bd38      	pop	{r3, r4, r5, pc}
3400bf6e:	bf00      	nop
3400bf70:	340a4ea0 	.word	0x340a4ea0
3400bf74:	340a4e98 	.word	0x340a4e98
3400bf78:	340dbe14 	.word	0x340dbe14

3400bf7c <LTDC_GetYSize>:
  return BSP_LCD_GetYSize(Instance, YSize);
3400bf7c:	f002 b96a 	b.w	3400e254 <BSP_LCD_GetYSize>

3400bf80 <LTDC_GetXSize>:
  return BSP_LCD_GetXSize(Instance, YSize);
3400bf80:	f002 b95e 	b.w	3400e240 <BSP_LCD_GetXSize>

3400bf84 <LTDC_GetPixel>:
  return BSP_LCD_ReadPixel(Instance, Xpos, Ypos, Color);
3400bf84:	f002 b970 	b.w	3400e268 <BSP_LCD_ReadPixel>

3400bf88 <LTDC_FillRect>:
{
3400bf88:	b4f0      	push	{r4, r5, r6, r7}
  if (is_layer_rgb888[current_layer])
3400bf8a:	4e0c      	ldr	r6, [pc, #48]	@ (3400bfbc <LTDC_FillRect+0x34>)
3400bf8c:	4f0c      	ldr	r7, [pc, #48]	@ (3400bfc0 <LTDC_FillRect+0x38>)
3400bf8e:	7836      	ldrb	r6, [r6, #0]
{
3400bf90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  if (is_layer_rgb888[current_layer])
3400bf94:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
3400bf98:	b127      	cbz	r7, 3400bfa4 <LTDC_FillRect+0x1c>
    return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
3400bf9a:	e9cd 4504 	strd	r4, r5, [sp, #16]
}
3400bf9e:	bcf0      	pop	{r4, r5, r6, r7}
    return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
3400bfa0:	f7ff bf5a 	b.w	3400be58 <LTDC_FillRectRgb888>
  if (is_layer_argb8888[current_layer])
3400bfa4:	4f07      	ldr	r7, [pc, #28]	@ (3400bfc4 <LTDC_FillRect+0x3c>)
3400bfa6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
3400bfaa:	e9cd 4504 	strd	r4, r5, [sp, #16]
  if (is_layer_argb8888[current_layer])
3400bfae:	b116      	cbz	r6, 3400bfb6 <LTDC_FillRect+0x2e>
}
3400bfb0:	bcf0      	pop	{r4, r5, r6, r7}
    return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
3400bfb2:	f7ff bf8b 	b.w	3400becc <LTDC_FillRectArgb8888>
}
3400bfb6:	bcf0      	pop	{r4, r5, r6, r7}
  return BSP_LCD_FillRect(Instance, Xpos, Ypos, Width, Height, Color);
3400bfb8:	f002 bb28 	b.w	3400e60c <BSP_LCD_FillRect>
3400bfbc:	340a4ea0 	.word	0x340a4ea0
3400bfc0:	340a4e98 	.word	0x340a4e98
3400bfc4:	340a4e90 	.word	0x340a4e90

3400bfc8 <LTDC_FillRGBRect>:
{
3400bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (is_layer_rgb888[current_layer])
3400bfcc:	4f3f      	ldr	r7, [pc, #252]	@ (3400c0cc <LTDC_FillRGBRect+0x104>)
{
3400bfce:	4688      	mov	r8, r1
3400bfd0:	e9dd 6c08 	ldrd	r6, ip, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400bfd4:	f897 9000 	ldrb.w	r9, [r7]
3400bfd8:	4f3d      	ldr	r7, [pc, #244]	@ (3400c0d0 <LTDC_FillRGBRect+0x108>)
{
3400bfda:	4615      	mov	r5, r2
  if (is_layer_rgb888[current_layer])
3400bfdc:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
{
3400bfe0:	469e      	mov	lr, r3
  if (is_layer_rgb888[current_layer])
3400bfe2:	b37f      	cbz	r7, 3400c044 <LTDC_FillRGBRect+0x7c>
  layer_width = Lcd_Ctx[Instance].XSize;
3400bfe4:	4b3b      	ldr	r3, [pc, #236]	@ (3400c0d4 <LTDC_FillRGBRect+0x10c>)
3400bfe6:	0142      	lsls	r2, r0, #5
3400bfe8:	eb03 1440 	add.w	r4, r3, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bfec:	2034      	movs	r0, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400bfee:	589a      	ldr	r2, [r3, r2]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bff0:	68a1      	ldr	r1, [r4, #8]
3400bff2:	4b39      	ldr	r3, [pc, #228]	@ (3400c0d8 <LTDC_FillRGBRect+0x110>)
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400bff4:	fb02 8505 	mla	r5, r2, r5, r8
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400bff8:	fb00 3301 	mla	r3, r0, r1, r3
3400bffc:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400bffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400c002:	4429      	add	r1, r5
  for (h = 0; h < Height; h++) {
3400c004:	2500      	movs	r5, #0
3400c006:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    pel += layer_width + 3;
3400c00a:	1cd0      	adds	r0, r2, #3
  for (h = 0; h < Height; h++) {
3400c00c:	4565      	cmp	r5, ip
3400c00e:	d05a      	beq.n	3400c0c6 <LTDC_FillRGBRect+0xfe>
3400c010:	4672      	mov	r2, lr
3400c012:	460b      	mov	r3, r1
    for (w = 0; w < Width; w++) {
3400c014:	1c74      	adds	r4, r6, #1
3400c016:	e00b      	b.n	3400c030 <LTDC_FillRGBRect+0x68>
      pel[3 * w + 0] = *pData++;
3400c018:	f812 8c03 	ldrb.w	r8, [r2, #-3]
3400c01c:	f803 8c03 	strb.w	r8, [r3, #-3]
      pel[3 * w + 1] = *pData++;
3400c020:	f812 8c02 	ldrb.w	r8, [r2, #-2]
3400c024:	f803 8c02 	strb.w	r8, [r3, #-2]
      pel[3 * w + 2] = *pData++;
3400c028:	f812 8c01 	ldrb.w	r8, [r2, #-1]
3400c02c:	f803 8c01 	strb.w	r8, [r3, #-1]
    for (w = 0; w < Width; w++) {
3400c030:	3c01      	subs	r4, #1
3400c032:	f102 0203 	add.w	r2, r2, #3
3400c036:	f103 0303 	add.w	r3, r3, #3
3400c03a:	d1ed      	bne.n	3400c018 <LTDC_FillRGBRect+0x50>
3400c03c:	44be      	add	lr, r7
    pel += layer_width + 3;
3400c03e:	4401      	add	r1, r0
  for (h = 0; h < Height; h++) {
3400c040:	3501      	adds	r5, #1
3400c042:	e7e3      	b.n	3400c00c <LTDC_FillRGBRect+0x44>
  if (is_layer_argb8888[current_layer])
3400c044:	f8df a094 	ldr.w	sl, [pc, #148]	@ 3400c0dc <LTDC_FillRGBRect+0x114>
3400c048:	f85a 9029 	ldr.w	r9, [sl, r9, lsl #2]
3400c04c:	f1b9 0f00 	cmp.w	r9, #0
3400c050:	d033      	beq.n	3400c0ba <LTDC_FillRGBRect+0xf2>
  layer_width = Lcd_Ctx[Instance].XSize;
3400c052:	4b20      	ldr	r3, [pc, #128]	@ (3400c0d4 <LTDC_FillRGBRect+0x10c>)
3400c054:	0142      	lsls	r2, r0, #5
3400c056:	eb03 1440 	add.w	r4, r3, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c05a:	2034      	movs	r0, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400c05c:	589a      	ldr	r2, [r3, r2]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400c05e:	68a1      	ldr	r1, [r4, #8]
3400c060:	4b1d      	ldr	r3, [pc, #116]	@ (3400c0d8 <LTDC_FillRGBRect+0x110>)
3400c062:	00b6      	lsls	r6, r6, #2
3400c064:	fb00 3301 	mla	r3, r0, r1, r3
3400c068:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400c06a:	fb02 8305 	mla	r3, r2, r5, r8
    pel += layer_width + 4;
3400c06e:	1d15      	adds	r5, r2, #4
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400c070:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  for (h = 0; h < Height; h++) {
3400c074:	4567      	cmp	r7, ip
3400c076:	d026      	beq.n	3400c0c6 <LTDC_FillRGBRect+0xfe>
3400c078:	4673      	mov	r3, lr
3400c07a:	eb0e 0406 	add.w	r4, lr, r6
3400c07e:	1ae0      	subs	r0, r4, r3
3400c080:	0880      	lsrs	r0, r0, #2
3400c082:	460a      	mov	r2, r1
3400c084:	3001      	adds	r0, #1
3400c086:	e010      	b.n	3400c0aa <LTDC_FillRGBRect+0xe2>
      pel[4 * w + 2] = *pData++;
3400c088:	f893 e000 	ldrb.w	lr, [r3]
      pel[4 * w + 3] = *pData++;
3400c08c:	3304      	adds	r3, #4
      pel[4 * w + 2] = *pData++;
3400c08e:	f802 ec02 	strb.w	lr, [r2, #-2]
      pel[4 * w + 1] = *pData++;
3400c092:	f813 ec03 	ldrb.w	lr, [r3, #-3]
3400c096:	f802 ec03 	strb.w	lr, [r2, #-3]
      pel[4 * w + 0] = *pData++;
3400c09a:	f813 ec02 	ldrb.w	lr, [r3, #-2]
3400c09e:	f802 ec04 	strb.w	lr, [r2, #-4]
      pel[4 * w + 3] = *pData++;
3400c0a2:	f813 ec01 	ldrb.w	lr, [r3, #-1]
3400c0a6:	f802 ec01 	strb.w	lr, [r2, #-1]
    for (w = 0; w < Width; w++) {
3400c0aa:	3801      	subs	r0, #1
3400c0ac:	f102 0204 	add.w	r2, r2, #4
3400c0b0:	d1ea      	bne.n	3400c088 <LTDC_FillRGBRect+0xc0>
3400c0b2:	46a6      	mov	lr, r4
    pel += layer_width + 4;
3400c0b4:	4429      	add	r1, r5
  for (h = 0; h < Height; h++) {
3400c0b6:	3701      	adds	r7, #1
3400c0b8:	e7dc      	b.n	3400c074 <LTDC_FillRGBRect+0xac>
  return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
3400c0ba:	e9cd 6c08 	strd	r6, ip, [sp, #32]
}
3400c0be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
3400c0c2:	f002 b947 	b.w	3400e354 <BSP_LCD_FillRGBRect>
}
3400c0c6:	2000      	movs	r0, #0
3400c0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400c0cc:	340a4ea0 	.word	0x340a4ea0
3400c0d0:	340a4e98 	.word	0x340a4e98
3400c0d4:	340dbe14 	.word	0x340dbe14
3400c0d8:	340dbe34 	.word	0x340dbe34
3400c0dc:	340a4e90 	.word	0x340a4e90

3400c0e0 <LTDC_DrawBitmap>:
  return BSP_LCD_DrawBitmap(Instance, Xpos, Ypos, pBmp);
3400c0e0:	f002 b95e 	b.w	3400e3a0 <BSP_LCD_DrawBitmap>

3400c0e4 <fill_lcd_layer_config_from_scrl_layer_config>:
{
3400c0e4:	b510      	push	{r4, lr}
  layer_config->X1 = layer_config->X0 + l->size.width;
3400c0e6:	8883      	ldrh	r3, [r0, #4]
  layer_config->X0 = l->origin.x;
3400c0e8:	8804      	ldrh	r4, [r0, #0]
  layer_config->Y0 = l->origin.y;
3400c0ea:	8842      	ldrh	r2, [r0, #2]
  layer_config->X1 = layer_config->X0 + l->size.width;
3400c0ec:	4423      	add	r3, r4
3400c0ee:	604b      	str	r3, [r1, #4]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400c0f0:	88c3      	ldrh	r3, [r0, #6]
  layer_config->X0 = l->origin.x;
3400c0f2:	600c      	str	r4, [r1, #0]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400c0f4:	4413      	add	r3, r2
  layer_config->Y0 = l->origin.y;
3400c0f6:	608a      	str	r2, [r1, #8]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400c0f8:	60cb      	str	r3, [r1, #12]
  switch (fmt) {
3400c0fa:	7a03      	ldrb	r3, [r0, #8]
3400c0fc:	2b05      	cmp	r3, #5
3400c0fe:	d80b      	bhi.n	3400c118 <fill_lcd_layer_config_from_scrl_layer_config+0x34>
3400c100:	e8df f003 	tbb	[pc, r3]
3400c104:	080a1203 	.word	0x080a1203
3400c108:	1010      	.short	0x1010
    res = LCD_PIXEL_FORMAT_RGB565;
3400c10a:	2302      	movs	r3, #2
  layer_config->PixelFormat = pixel_format_from_scrl_format(l->format);
3400c10c:	610b      	str	r3, [r1, #16]
  layer_config->Address = (uint32_t) l->address;
3400c10e:	68c3      	ldr	r3, [r0, #12]
3400c110:	614b      	str	r3, [r1, #20]
}
3400c112:	bd10      	pop	{r4, pc}
    res = LCD_PIXEL_FORMAT_ARGB8888;
3400c114:	2300      	movs	r3, #0
    break;
3400c116:	e7f9      	b.n	3400c10c <fill_lcd_layer_config_from_scrl_layer_config+0x28>
    assert(0);
3400c118:	2179      	movs	r1, #121	@ 0x79
3400c11a:	4b04      	ldr	r3, [pc, #16]	@ (3400c12c <fill_lcd_layer_config_from_scrl_layer_config+0x48>)
3400c11c:	4a04      	ldr	r2, [pc, #16]	@ (3400c130 <fill_lcd_layer_config_from_scrl_layer_config+0x4c>)
3400c11e:	4805      	ldr	r0, [pc, #20]	@ (3400c134 <fill_lcd_layer_config_from_scrl_layer_config+0x50>)
3400c120:	f011 fc64 	bl	3401d9ec <__assert_func>
    res = LCD_PIXEL_FORMAT_RGB888;
3400c124:	2301      	movs	r3, #1
3400c126:	e7f1      	b.n	3400c10c <fill_lcd_layer_config_from_scrl_layer_config+0x28>
  switch (fmt) {
3400c128:	2304      	movs	r3, #4
3400c12a:	e7ef      	b.n	3400c10c <fill_lcd_layer_config_from_scrl_layer_config+0x28>
3400c12c:	340235d8 	.word	0x340235d8
3400c130:	3402ed18 	.word	0x3402ed18
3400c134:	3402448c 	.word	0x3402448c

3400c138 <LTDC_SetPixel>:
{
3400c138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400c13a:	4d0f      	ldr	r5, [pc, #60]	@ (3400c178 <LTDC_SetPixel+0x40>)
3400c13c:	782e      	ldrb	r6, [r5, #0]
3400c13e:	4d0f      	ldr	r5, [pc, #60]	@ (3400c17c <LTDC_SetPixel+0x44>)
3400c140:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
3400c144:	b13d      	cbz	r5, 3400c156 <LTDC_SetPixel+0x1e>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , 1, Color);
3400c146:	9301      	str	r3, [sp, #4]
3400c148:	2301      	movs	r3, #1
3400c14a:	2000      	movs	r0, #0
3400c14c:	9300      	str	r3, [sp, #0]
3400c14e:	f7ff fe83 	bl	3400be58 <LTDC_FillRectRgb888>
}
3400c152:	b003      	add	sp, #12
3400c154:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400c156:	4f0a      	ldr	r7, [pc, #40]	@ (3400c180 <LTDC_SetPixel+0x48>)
3400c158:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
3400c15c:	b136      	cbz	r6, 3400c16c <LTDC_SetPixel+0x34>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , 1, Color);
3400c15e:	9301      	str	r3, [sp, #4]
3400c160:	2301      	movs	r3, #1
3400c162:	4628      	mov	r0, r5
3400c164:	9300      	str	r3, [sp, #0]
3400c166:	f7ff feb1 	bl	3400becc <LTDC_FillRectArgb8888>
    return LTDC_SetPixelArgb8888(Instance, Xpos, Ypos, Color);
3400c16a:	e7f2      	b.n	3400c152 <LTDC_SetPixel+0x1a>
}
3400c16c:	b003      	add	sp, #12
3400c16e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_WritePixel(Instance, Xpos, Ypos, Color);
3400c172:	f002 b89f 	b.w	3400e2b4 <BSP_LCD_WritePixel>
3400c176:	bf00      	nop
3400c178:	340a4ea0 	.word	0x340a4ea0
3400c17c:	340a4e98 	.word	0x340a4e98
3400c180:	340a4e90 	.word	0x340a4e90

3400c184 <LTDC_DrawVLine>:
{
3400c184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400c186:	4e10      	ldr	r6, [pc, #64]	@ (3400c1c8 <LTDC_DrawVLine+0x44>)
{
3400c188:	9d08      	ldr	r5, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400c18a:	7837      	ldrb	r7, [r6, #0]
3400c18c:	4e0f      	ldr	r6, [pc, #60]	@ (3400c1cc <LTDC_DrawVLine+0x48>)
3400c18e:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
3400c192:	b13e      	cbz	r6, 3400c1a4 <LTDC_DrawVLine+0x20>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , Length, Color);
3400c194:	e9cd 3500 	strd	r3, r5, [sp]
3400c198:	2000      	movs	r0, #0
3400c19a:	2301      	movs	r3, #1
3400c19c:	f7ff fe5c 	bl	3400be58 <LTDC_FillRectRgb888>
}
3400c1a0:	b003      	add	sp, #12
3400c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400c1a4:	f8df c028 	ldr.w	ip, [pc, #40]	@ 3400c1d0 <LTDC_DrawVLine+0x4c>
3400c1a8:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
3400c1ac:	b137      	cbz	r7, 3400c1bc <LTDC_DrawVLine+0x38>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , Length, Color);
3400c1ae:	e9cd 3500 	strd	r3, r5, [sp]
3400c1b2:	4630      	mov	r0, r6
3400c1b4:	2301      	movs	r3, #1
3400c1b6:	f7ff fe89 	bl	3400becc <LTDC_FillRectArgb8888>
    return LTDC_DrawVLineArgb8888(Instance, Xpos, Ypos, Length, Color);
3400c1ba:	e7f1      	b.n	3400c1a0 <LTDC_DrawVLine+0x1c>
  return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
3400c1bc:	9508      	str	r5, [sp, #32]
}
3400c1be:	b003      	add	sp, #12
3400c1c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
3400c1c4:	f002 ba02 	b.w	3400e5cc <BSP_LCD_DrawVLine>
3400c1c8:	340a4ea0 	.word	0x340a4ea0
3400c1cc:	340a4e98 	.word	0x340a4e98
3400c1d0:	340a4e90 	.word	0x340a4e90

3400c1d4 <LTDC_DrawHLine>:
{
3400c1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400c1d6:	4d10      	ldr	r5, [pc, #64]	@ (3400c218 <LTDC_DrawHLine+0x44>)
{
3400c1d8:	9c08      	ldr	r4, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400c1da:	782e      	ldrb	r6, [r5, #0]
3400c1dc:	4d0f      	ldr	r5, [pc, #60]	@ (3400c21c <LTDC_DrawHLine+0x48>)
3400c1de:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
3400c1e2:	b13d      	cbz	r5, 3400c1f4 <LTDC_DrawHLine+0x20>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, Length , 1, Color);
3400c1e4:	2001      	movs	r0, #1
3400c1e6:	9401      	str	r4, [sp, #4]
3400c1e8:	9000      	str	r0, [sp, #0]
3400c1ea:	2000      	movs	r0, #0
3400c1ec:	f7ff fe34 	bl	3400be58 <LTDC_FillRectRgb888>
}
3400c1f0:	b003      	add	sp, #12
3400c1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400c1f4:	4f0a      	ldr	r7, [pc, #40]	@ (3400c220 <LTDC_DrawHLine+0x4c>)
3400c1f6:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
3400c1fa:	b136      	cbz	r6, 3400c20a <LTDC_DrawHLine+0x36>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, Length , 1, Color);
3400c1fc:	2001      	movs	r0, #1
3400c1fe:	9401      	str	r4, [sp, #4]
3400c200:	9000      	str	r0, [sp, #0]
3400c202:	4628      	mov	r0, r5
3400c204:	f7ff fe62 	bl	3400becc <LTDC_FillRectArgb8888>
    return LTDC_DrawHLineArgb8888(Instance, Xpos, Ypos, Length, Color);
3400c208:	e7f2      	b.n	3400c1f0 <LTDC_DrawHLine+0x1c>
  return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
3400c20a:	9408      	str	r4, [sp, #32]
}
3400c20c:	b003      	add	sp, #12
3400c20e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
3400c212:	f002 b9b9 	b.w	3400e588 <BSP_LCD_DrawHLine>
3400c216:	bf00      	nop
3400c218:	340a4ea0 	.word	0x340a4ea0
3400c21c:	340a4e98 	.word	0x340a4e98
3400c220:	340a4e90 	.word	0x340a4e90

3400c224 <SCRL_Init>:
  .SetLayer = LTDC_SetLayer,
  .GetFormat = LTDC_GetFormat,
};

int SCRL_Init(SCRL_LayerConfig *layers_config[SCRL_LAYER_NB], SCRL_ScreenConfig *screen_config)
{
3400c224:	b5f0      	push	{r4, r5, r6, r7, lr}
3400c226:	4605      	mov	r5, r0
3400c228:	b087      	sub	sp, #28
  BSP_LCD_LayerConfig_t LayerConfig = {0};
3400c22a:	2218      	movs	r2, #24
3400c22c:	2100      	movs	r1, #0
3400c22e:	4668      	mov	r0, sp
3400c230:	f012 fc26 	bl	3401ea80 <memset>
    if (!layers_config[i])
3400c234:	682a      	ldr	r2, [r5, #0]
3400c236:	2a00      	cmp	r2, #0
3400c238:	d044      	beq.n	3400c2c4 <SCRL_Init+0xa0>
3400c23a:	686b      	ldr	r3, [r5, #4]
3400c23c:	2b00      	cmp	r3, #0
3400c23e:	d041      	beq.n	3400c2c4 <SCRL_Init+0xa0>
    if (!layers_config[i]->address)
3400c240:	68d1      	ldr	r1, [r2, #12]
3400c242:	2900      	cmp	r1, #0
3400c244:	d03e      	beq.n	3400c2c4 <SCRL_Init+0xa0>
3400c246:	68d9      	ldr	r1, [r3, #12]
3400c248:	2900      	cmp	r1, #0
3400c24a:	d03b      	beq.n	3400c2c4 <SCRL_Init+0xa0>
    if (layers_config[i]->format == SCRL_YUV422)
3400c24c:	7a12      	ldrb	r2, [r2, #8]
3400c24e:	2a02      	cmp	r2, #2
3400c250:	d038      	beq.n	3400c2c4 <SCRL_Init+0xa0>
3400c252:	7a1b      	ldrb	r3, [r3, #8]
3400c254:	2b02      	cmp	r3, #2
3400c256:	d035      	beq.n	3400c2c4 <SCRL_Init+0xa0>

  ret = SCRL_validate_parameters(layers_config, screen_config);
  if (ret)
    return ret;

  current_layer = SCRL_LAYER_0;
3400c258:	2400      	movs	r4, #0
3400c25a:	4b1c      	ldr	r3, [pc, #112]	@ (3400c2cc <SCRL_Init+0xa8>)

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
3400c25c:	2101      	movs	r1, #1
3400c25e:	4620      	mov	r0, r4
  current_layer = SCRL_LAYER_0;
3400c260:	701c      	strb	r4, [r3, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
3400c262:	f002 fb3d 	bl	3400e8e0 <BSP_LCD_Init>

  fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_0], &LayerConfig);
3400c266:	682e      	ldr	r6, [r5, #0]
3400c268:	4669      	mov	r1, sp
3400c26a:	4630      	mov	r0, r6
3400c26c:	f7ff ff3a 	bl	3400c0e4 <fill_lcd_layer_config_from_scrl_layer_config>
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400c270:	7a33      	ldrb	r3, [r6, #8]
3400c272:	4f17      	ldr	r7, [pc, #92]	@ (3400c2d0 <SCRL_Init+0xac>)
3400c274:	1f19      	subs	r1, r3, #4
3400c276:	424a      	negs	r2, r1
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400c278:	f1a3 0003 	sub.w	r0, r3, #3
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400c27c:	414a      	adcs	r2, r1
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400c27e:	4e15      	ldr	r6, [pc, #84]	@ (3400c2d4 <SCRL_Init+0xb0>)
3400c280:	4243      	negs	r3, r0
3400c282:	4143      	adcs	r3, r0
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400c284:	603a      	str	r2, [r7, #0]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
3400c286:	4621      	mov	r1, r4
3400c288:	466a      	mov	r2, sp
3400c28a:	4620      	mov	r0, r4
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400c28c:	6033      	str	r3, [r6, #0]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
3400c28e:	f002 fb33 	bl	3400e8f8 <BSP_LCD_ConfigLayer>

  fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_1], &LayerConfig);
3400c292:	686d      	ldr	r5, [r5, #4]
3400c294:	4669      	mov	r1, sp
3400c296:	4628      	mov	r0, r5
3400c298:	f7ff ff24 	bl	3400c0e4 <fill_lcd_layer_config_from_scrl_layer_config>
  is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
3400c29c:	7a2b      	ldrb	r3, [r5, #8]
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400c29e:	2101      	movs	r1, #1
  is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
3400c2a0:	1f1d      	subs	r5, r3, #4
3400c2a2:	426a      	negs	r2, r5
3400c2a4:	416a      	adcs	r2, r5
3400c2a6:	607a      	str	r2, [r7, #4]
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
3400c2a8:	1edf      	subs	r7, r3, #3
3400c2aa:	427b      	negs	r3, r7
3400c2ac:	417b      	adcs	r3, r7
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400c2ae:	466a      	mov	r2, sp
3400c2b0:	4620      	mov	r0, r4
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
3400c2b2:	6073      	str	r3, [r6, #4]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400c2b4:	f002 fb20 	bl	3400e8f8 <BSP_LCD_ConfigLayer>

  UTIL_LCD_SetFuncDriver(&Dummy_Driver);
3400c2b8:	4807      	ldr	r0, [pc, #28]	@ (3400c2d8 <SCRL_Init+0xb4>)
3400c2ba:	f00f fc49 	bl	3401bb50 <UTIL_LCD_SetFuncDriver>
  return 0;
3400c2be:	4620      	mov	r0, r4

  return 0;
}
3400c2c0:	b007      	add	sp, #28
3400c2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
3400c2c4:	f04f 30ff 	mov.w	r0, #4294967295
3400c2c8:	e7fa      	b.n	3400c2c0 <SCRL_Init+0x9c>
3400c2ca:	bf00      	nop
3400c2cc:	340a4ea0 	.word	0x340a4ea0
3400c2d0:	340a4e98 	.word	0x340a4e98
3400c2d4:	340a4e90 	.word	0x340a4e90
3400c2d8:	3402ed38 	.word	0x3402ed38

3400c2dc <SCRL_SetAddress_NoReload>:

int SCRL_SetAddress_NoReload(void *address, SCRL_Layer layer)
{
3400c2dc:	b508      	push	{r3, lr}
3400c2de:	460a      	mov	r2, r1
  return HAL_LTDC_SetAddress_NoReload(&hlcd_ltdc, (uint32_t) address, layer);
3400c2e0:	4601      	mov	r1, r0
3400c2e2:	4802      	ldr	r0, [pc, #8]	@ (3400c2ec <SCRL_SetAddress_NoReload+0x10>)
3400c2e4:	f007 fd98 	bl	34013e18 <HAL_LTDC_SetAddress_NoReload>
}
3400c2e8:	bd08      	pop	{r3, pc}
3400c2ea:	bf00      	nop
3400c2ec:	340dbe34 	.word	0x340dbe34

3400c2f0 <SCRL_ReloadLayer>:

int SCRL_ReloadLayer(SCRL_Layer layer)
{
3400c2f0:	b508      	push	{r3, lr}
3400c2f2:	4602      	mov	r2, r0
  return HAL_LTDC_ReloadLayer(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING, layer);
3400c2f4:	2102      	movs	r1, #2
3400c2f6:	4802      	ldr	r0, [pc, #8]	@ (3400c300 <SCRL_ReloadLayer+0x10>)
3400c2f8:	f007 fd66 	bl	34013dc8 <HAL_LTDC_ReloadLayer>
}
3400c2fc:	bd08      	pop	{r3, pc}
3400c2fe:	bf00      	nop
3400c300:	340dbe34 	.word	0x340dbe34

3400c304 <SRCL_Update>:

int SRCL_Update(void)
{
  /* Nothing to do */
  return 0;
}
3400c304:	2000      	movs	r0, #0
3400c306:	4770      	bx	lr

3400c308 <MX_LTDC_ConfigLayer>:

HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
3400c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert(LayerIndex < SCRL_LAYER_NB);
3400c30c:	2901      	cmp	r1, #1
{
3400c30e:	b099      	sub	sp, #100	@ 0x64
3400c310:	460c      	mov	r4, r1
3400c312:	4613      	mov	r3, r2
3400c314:	9000      	str	r0, [sp, #0]
  assert(LayerIndex < SCRL_LAYER_NB);
3400c316:	d906      	bls.n	3400c326 <MX_LTDC_ConfigLayer+0x1e>
3400c318:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
3400c31c:	4b34      	ldr	r3, [pc, #208]	@ (3400c3f0 <MX_LTDC_ConfigLayer+0xe8>)
3400c31e:	4a35      	ldr	r2, [pc, #212]	@ (3400c3f4 <MX_LTDC_ConfigLayer+0xec>)
3400c320:	4835      	ldr	r0, [pc, #212]	@ (3400c3f8 <MX_LTDC_ConfigLayer+0xf0>)
3400c322:	f011 fb63 	bl	3401d9ec <__assert_func>
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400c326:	e9d2 9800 	ldrd	r9, r8, [r2]
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400c32a:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
  pLayerCfg.ARGBAddress = Config->Address;
3400c32e:	f8d2 b014 	ldr.w	fp, [r2, #20]

  if (is_layer_rgb888[LayerIndex])
3400c332:	4a32      	ldr	r2, [pc, #200]	@ (3400c3fc <MX_LTDC_ConfigLayer+0xf4>)
  pLayerCfg.Layer.ImageWidth = (Config->X1 - Config->X0);
3400c334:	eba8 0a09 	sub.w	sl, r8, r9
  if (is_layer_rgb888[LayerIndex])
3400c338:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400c33c:	1bf5      	subs	r5, r6, r7
  if (is_layer_rgb888[LayerIndex])
3400c33e:	b318      	cbz	r0, 3400c388 <MX_LTDC_ConfigLayer+0x80>
  LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
3400c340:	2230      	movs	r2, #48	@ 0x30
3400c342:	2100      	movs	r1, #0
3400c344:	a808      	add	r0, sp, #32
3400c346:	f012 fb9b 	bl	3401ea80 <memset>
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c34a:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c34c:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c350:	9307      	str	r3, [sp, #28]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c352:	2307      	movs	r3, #7
3400c354:	e9cd c309 	strd	ip, r3, [sp, #36]	@ 0x24
  pLayerCfg.FlexARGB.PixelSize = 3;/*LTDC_ARGB_PIXEL_SIZE_3_BYTES;*/
3400c358:	2303      	movs	r3, #3
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400c35a:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400c35e:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400c362:	e9cd a50b 	strd	sl, r5, [sp, #44]	@ 0x2c
  pLayerCfg.FlexARGB.BluePos = 16;
3400c366:	2210      	movs	r2, #16
  pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
3400c368:	930e      	str	r3, [sp, #56]	@ 0x38
  pLayerCfg.FlexARGB.BluePos = 16;
3400c36a:	2308      	movs	r3, #8
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400c36c:	9800      	ldr	r0, [sp, #0]
  pLayerCfg.FlexARGB.BluePos = 16;
3400c36e:	e9cd 3211 	strd	r3, r2, [sp, #68]	@ 0x44
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400c372:	a903      	add	r1, sp, #12
3400c374:	4622      	mov	r2, r4
  pLayerCfg.FlexARGB.GreenWidth = 8;
3400c376:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  pLayerCfg.ARGBAddress = Config->Address;
3400c37a:	e9cd 3b16 	strd	r3, fp, [sp, #88]	@ 0x58
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400c37e:	f007 fd7f 	bl	34013e80 <HAL_LTDC_ConfigLayerFlexARGB>
    return SCRL_ConfigLayer_Layer_rgb888(hltdc, LayerIndex, Config);
  else if (is_layer_argb8888[LayerIndex])
    return SCRL_ConfigLayer_Layer_argb888(hltdc, LayerIndex, Config);
  else
    return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
}
3400c382:	b019      	add	sp, #100	@ 0x64
3400c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (is_layer_argb8888[LayerIndex])
3400c388:	4a1d      	ldr	r2, [pc, #116]	@ (3400c400 <MX_LTDC_ConfigLayer+0xf8>)
3400c38a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
3400c38e:	b199      	cbz	r1, 3400c3b8 <MX_LTDC_ConfigLayer+0xb0>
  LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
3400c390:	4601      	mov	r1, r0
3400c392:	2230      	movs	r2, #48	@ 0x30
3400c394:	a808      	add	r0, sp, #32
3400c396:	f012 fb73 	bl	3401ea80 <memset>
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c39a:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400c39c:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400c3a0:	9307      	str	r3, [sp, #28]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c3a2:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
3400c3a6:	2307      	movs	r3, #7
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400c3a8:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c3ac:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400c3b0:	e9cd a50b 	strd	sl, r5, [sp, #44]	@ 0x2c
  pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
3400c3b4:	2304      	movs	r3, #4
3400c3b6:	e7d6      	b.n	3400c366 <MX_LTDC_ConfigLayer+0x5e>
  LTDC_LayerCfgTypeDef pLayerCfg ={0};
3400c3b8:	221c      	movs	r2, #28
3400c3ba:	a809      	add	r0, sp, #36	@ 0x24
3400c3bc:	9301      	str	r3, [sp, #4]
3400c3be:	f012 fb5f 	bl	3401ea80 <memset>
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400c3c2:	9b01      	ldr	r3, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c3c4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400c3c8:	691b      	ldr	r3, [r3, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c3ca:	4622      	mov	r2, r4
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400c3cc:	9307      	str	r3, [sp, #28]
  pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
3400c3ce:	23ff      	movs	r3, #255	@ 0xff
3400c3d0:	9308      	str	r3, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c3d2:	2307      	movs	r3, #7
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c3d4:	9800      	ldr	r0, [sp, #0]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400c3d6:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c3da:	a903      	add	r1, sp, #12
  pLayerCfg.WindowX1 = Config->X1;
3400c3dc:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.WindowY1 = Config->Y1;
3400c3e0:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
3400c3e4:	e9cd ba0c 	strd	fp, sl, [sp, #48]	@ 0x30
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
3400c3e8:	950e      	str	r5, [sp, #56]	@ 0x38
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400c3ea:	f007 fc47 	bl	34013c7c <HAL_LTDC_ConfigLayer>
    return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
3400c3ee:	e7c8      	b.n	3400c382 <MX_LTDC_ConfigLayer+0x7a>
3400c3f0:	340244c2 	.word	0x340244c2
3400c3f4:	3402ed04 	.word	0x3402ed04
3400c3f8:	3402448c 	.word	0x3402448c
3400c3fc:	340a4e98 	.word	0x340a4e98
3400c400:	340a4e90 	.word	0x340a4e90
3400c404:	00000000 	.word	0x00000000

3400c408 <kf_mat_dot_product>:
 * m1     is a matrix of size row_nb   * inter_nb
 * m2     is a matrix of size inter_nb * col_nb
 * result can overlap with either m1 or m2
*/
static void kf_mat_dot_product(double *result, double *m1, double *m2, int row_nb, int col_nb, int inter_nb)
{
3400c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c40c:	b087      	sub	sp, #28
3400c40e:	af00      	add	r7, sp, #0
3400c410:	e9c7 2001 	strd	r2, r0, [r7, #4]
  double res[row_nb][col_nb];
3400c414:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
{
3400c416:	617b      	str	r3, [r7, #20]
  double res[row_nb][col_nb];
3400c418:	435a      	muls	r2, r3
3400c41a:	466b      	mov	r3, sp
3400c41c:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
3400c420:	469d      	mov	sp, r3
3400c422:	00d0      	lsls	r0, r2, #3
3400c424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3400c426:	466e      	mov	r6, sp
  int r, c, i;

  for (r = 0; r < row_nb; r++) {
3400c428:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
  double res[row_nb][col_nb];
3400c42c:	2200      	movs	r2, #0
3400c42e:	4634      	mov	r4, r6
  for (r = 0; r < row_nb; r++) {
3400c430:	4615      	mov	r5, r2
  double res[row_nb][col_nb];
3400c432:	6138      	str	r0, [r7, #16]
{
3400c434:	46a0      	mov	r8, r4
    for (c = 0; c < col_nb; c++) {
3400c436:	2000      	movs	r0, #0
3400c438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3400c43a:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
3400c43e:	441a      	add	r2, r3
3400c440:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
3400c444:	60fb      	str	r3, [r7, #12]
      res[r][c] = 0;
      for (i = 0; i < inter_nb; i++) {
3400c446:	687b      	ldr	r3, [r7, #4]
    for (c = 0; c < col_nb; c++) {
3400c448:	46cb      	mov	fp, r9
3400c44a:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
3400c44e:	68fb      	ldr	r3, [r7, #12]
3400c450:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 3400c4a8 <kf_mat_dot_product+0xa0>
3400c454:	eba3 0e09 	sub.w	lr, r3, r9
3400c458:	f1ae 0e08 	sub.w	lr, lr, #8
3400c45c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
3400c460:	f10e 0e01 	add.w	lr, lr, #1
3400c464:	f04e e001 	dls	lr, lr
        res[r][c] += m1[r * inter_nb + i] * m2[i * col_nb + c];
3400c468:	ed9c 6b00 	vldr	d6, [ip]
3400c46c:	ecbb 5b02 	vldmia	fp!, {d5}
      for (i = 0; i < inter_nb; i++) {
3400c470:	44d4      	add	ip, sl
        res[r][c] += m1[r * inter_nb + i] * m2[i * col_nb + c];
3400c472:	eea5 7b06 	vfma.f64	d7, d5, d6
      for (i = 0; i < inter_nb; i++) {
3400c476:	f00f c809 	le	lr, 3400c468 <kf_mat_dot_product+0x60>
    for (c = 0; c < col_nb; c++) {
3400c47a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400c47c:	3001      	adds	r0, #1
3400c47e:	4283      	cmp	r3, r0
3400c480:	eca8 7b02 	vstmia	r8!, {d7}
3400c484:	d1df      	bne.n	3400c446 <kf_mat_dot_product+0x3e>
  for (r = 0; r < row_nb; r++) {
3400c486:	697b      	ldr	r3, [r7, #20]
3400c488:	3501      	adds	r5, #1
3400c48a:	42ab      	cmp	r3, r5
3400c48c:	4454      	add	r4, sl
3400c48e:	d1d1      	bne.n	3400c434 <kf_mat_dot_product+0x2c>
      }
    }
  }

  memcpy(result, res, sizeof(res));
3400c490:	693a      	ldr	r2, [r7, #16]
3400c492:	4631      	mov	r1, r6
3400c494:	68b8      	ldr	r0, [r7, #8]
3400c496:	f012 fd7a 	bl	3401ef8e <memcpy>
}
3400c49a:	371c      	adds	r7, #28
3400c49c:	46bd      	mov	sp, r7
3400c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400c4a2:	bf00      	nop
3400c4a4:	f3af 8000 	nop.w
	...

3400c4b0 <kf_mat_transpose.constprop.0>:
*/
static void kf_mat_transpose(double *result, double *m, int row_nb, int col_nb)
{
  int r, c;

  for (r = 0; r < row_nb; r++) {
3400c4b0:	2300      	movs	r3, #0
static void kf_mat_transpose(double *result, double *m, int row_nb, int col_nb)
3400c4b2:	b5f0      	push	{r4, r5, r6, r7, lr}
3400c4b4:	00d7      	lsls	r7, r2, #3
    for (c = 0; c < col_nb; c++) {
3400c4b6:	f04f 0e04 	mov.w	lr, #4
3400c4ba:	f04e e001 	dls	lr, lr
3400c4be:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
      result[r * col_nb + c] = m[c * row_nb + r];
3400c4c2:	e9d6 4500 	ldrd	r4, r5, [r6]
    for (c = 0; c < col_nb; c++) {
3400c4c6:	443e      	add	r6, r7
      result[r * col_nb + c] = m[c * row_nb + r];
3400c4c8:	e8e0 4502 	strd	r4, r5, [r0], #8
    for (c = 0; c < col_nb; c++) {
3400c4cc:	f00f c807 	le	lr, 3400c4c2 <kf_mat_transpose.constprop.0+0x12>
  for (r = 0; r < row_nb; r++) {
3400c4d0:	3301      	adds	r3, #1
3400c4d2:	429a      	cmp	r2, r3
3400c4d4:	d1ef      	bne.n	3400c4b6 <kf_mat_transpose.constprop.0+0x6>
    }
  }
}
3400c4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

3400c4d8 <kf_vector_mat_dot_product.constprop.0>:
static void kf_vector_mat_dot_product(double *result, double *v, double *m, int row_nb, int col_nb)
3400c4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
3400c4dc:	b091      	sub	sp, #68	@ 0x44
  for (c = 0; c < col_nb; c++) {
3400c4de:	466e      	mov	r6, sp
3400c4e0:	2500      	movs	r5, #0
3400c4e2:	4634      	mov	r4, r6
3400c4e4:	ea4f 09c3 	mov.w	r9, r3, lsl #3
3400c4e8:	f101 0840 	add.w	r8, r1, #64	@ 0x40
3400c4ec:	eba8 0e01 	sub.w	lr, r8, r1
3400c4f0:	f1ae 0e08 	sub.w	lr, lr, #8
3400c4f4:	ea4f 0ede 	mov.w	lr, lr, lsr #3
3400c4f8:	f10e 0e01 	add.w	lr, lr, #1
3400c4fc:	468c      	mov	ip, r1
3400c4fe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 3400c548 <kf_vector_mat_dot_product.constprop.0+0x70>
3400c502:	f04e e001 	dls	lr, lr
3400c506:	eb02 07c5 	add.w	r7, r2, r5, lsl #3
      res[c] += v[r] * m[r * col_nb + c];
3400c50a:	ed97 6b00 	vldr	d6, [r7]
3400c50e:	ecbc 5b02 	vldmia	ip!, {d5}
    for (r = 0; r < row_nb; r++) {
3400c512:	444f      	add	r7, r9
      res[c] += v[r] * m[r * col_nb + c];
3400c514:	eea5 7b06 	vfma.f64	d7, d5, d6
    for (r = 0; r < row_nb; r++) {
3400c518:	f00f c809 	le	lr, 3400c50a <kf_vector_mat_dot_product.constprop.0+0x32>
  for (c = 0; c < col_nb; c++) {
3400c51c:	3501      	adds	r5, #1
3400c51e:	42ab      	cmp	r3, r5
3400c520:	eca6 7b02 	vstmia	r6!, {d7}
3400c524:	d1e2      	bne.n	3400c4ec <kf_vector_mat_dot_product.constprop.0+0x14>
  memcpy(result, res, sizeof(res));
3400c526:	4603      	mov	r3, r0
3400c528:	ad10      	add	r5, sp, #64	@ 0x40
3400c52a:	4622      	mov	r2, r4
3400c52c:	ca03      	ldmia	r2!, {r0, r1}
3400c52e:	42aa      	cmp	r2, r5
3400c530:	6018      	str	r0, [r3, #0]
3400c532:	6059      	str	r1, [r3, #4]
3400c534:	4614      	mov	r4, r2
3400c536:	f103 0308 	add.w	r3, r3, #8
3400c53a:	d1f6      	bne.n	3400c52a <kf_vector_mat_dot_product.constprop.0+0x52>
}
3400c53c:	b011      	add	sp, #68	@ 0x44
3400c53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3400c542:	bf00      	nop
3400c544:	f3af 8000 	nop.w
	...

3400c550 <kf_init>:
  for (i = 0; i < KF_DIM; i++)
    projected_cov[i][i] += innovation_cov[i];
}

void kf_init(struct kf_state *state, struct kf_box *measure)
{
3400c550:	b538      	push	{r3, r4, r5, lr}
  int i;

  /* init mean */
  state->mean[0] = measure->cx;
3400c552:	e9d1 2300 	ldrd	r2, r3, [r1]
3400c556:	e9c0 2300 	strd	r2, r3, [r0]
  state->mean[1] = measure->cy;
3400c55a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
3400c55e:	e9c0 2302 	strd	r2, r3, [r0, #8]
  state->mean[2] = measure->a;
3400c562:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
3400c566:	e9c0 2304 	strd	r2, r3, [r0, #16]
  state->mean[3] = measure->h;
3400c56a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
3400c56e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  state->mean[4] = 0;
3400c572:	2300      	movs	r3, #0
3400c574:	2200      	movs	r2, #0
{
3400c576:	460d      	mov	r5, r1
3400c578:	4604      	mov	r4, r0
  state->mean[4] = 0;
3400c57a:	e9c0 2308 	strd	r2, r3, [r0, #32]
  state->mean[5] = 0;
3400c57e:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  state->mean[6] = 0;
3400c582:	e9c0 230c 	strd	r2, r3, [r0, #48]	@ 0x30
  state->mean[7] = 0;
3400c586:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38

  /* init covariance */
  memset(state->covariance, 0, sizeof(state->covariance));
3400c58a:	2100      	movs	r1, #0
3400c58c:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400c590:	3040      	adds	r0, #64	@ 0x40
3400c592:	f012 fa75 	bl	3401ea80 <memset>
  state->covariance[0][0] = 2 * std_weight_position * measure->h;
  state->covariance[1][1] = 2 * std_weight_position * measure->h;
  state->covariance[2][2] = 1e-2;
3400c596:	a31c      	add	r3, pc, #112	@ (adr r3, 3400c608 <kf_init+0xb8>)
3400c598:	e9d3 2300 	ldrd	r2, r3, [r3]
  state->covariance[0][0] = 2 * std_weight_position * measure->h;
3400c59c:	ed95 7b06 	vldr	d7, [r5, #24]
3400c5a0:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 3400c5f8 <kf_init+0xa8>
3400c5a4:	ee27 6b06 	vmul.f64	d6, d7, d6
3400c5a8:	ed84 6b10 	vstr	d6, [r4, #64]	@ 0x40
  state->covariance[1][1] = 2 * std_weight_position * measure->h;
3400c5ac:	ed84 6b22 	vstr	d6, [r4, #136]	@ 0x88
  state->covariance[3][3] = 2 * std_weight_position * measure->h;
3400c5b0:	ed84 6b46 	vstr	d6, [r4, #280]	@ 0x118
  state->covariance[4][4] = 10 * std_weight_velocity * measure->h;
3400c5b4:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 3400c600 <kf_init+0xb0>
3400c5b8:	f04f 0e08 	mov.w	lr, #8
3400c5bc:	ee27 7b06 	vmul.f64	d7, d7, d6
3400c5c0:	f04e e001 	dls	lr, lr
3400c5c4:	ed84 7b58 	vstr	d7, [r4, #352]	@ 0x160
  state->covariance[5][5] = 10 * std_weight_velocity * measure->h;
3400c5c8:	ed84 7b6a 	vstr	d7, [r4, #424]	@ 0x1a8
  state->covariance[6][6] = 1e-5;
  state->covariance[7][7] = 10 * std_weight_velocity * measure->h;
3400c5cc:	ed84 7b8e 	vstr	d7, [r4, #568]	@ 0x238
  state->covariance[2][2] = 1e-2;
3400c5d0:	e9c4 2334 	strd	r2, r3, [r4, #208]	@ 0xd0
  state->covariance[6][6] = 1e-5;
3400c5d4:	a30e      	add	r3, pc, #56	@ (adr r3, 3400c610 <kf_init+0xc0>)
3400c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
3400c5da:	e9c4 237c 	strd	r2, r3, [r4, #496]	@ 0x1f0
  for (i = 0; i < 2 * KF_DIM; i ++)
    state->covariance[i][i] *= state->covariance[i][i];
3400c5de:	ed94 7b10 	vldr	d7, [r4, #64]	@ 0x40
3400c5e2:	ee27 7b07 	vmul.f64	d7, d7, d7
  for (i = 0; i < 2 * KF_DIM; i ++)
3400c5e6:	3448      	adds	r4, #72	@ 0x48
    state->covariance[i][i] *= state->covariance[i][i];
3400c5e8:	ed04 7b02 	vstr	d7, [r4, #-8]
  for (i = 0; i < 2 * KF_DIM; i ++)
3400c5ec:	f00f c809 	le	lr, 3400c5de <kf_init+0x8e>
}
3400c5f0:	bd38      	pop	{r3, r4, r5, pc}
3400c5f2:	bf00      	nop
3400c5f4:	f3af 8000 	nop.w
3400c5f8:	9999999a 	.word	0x9999999a
3400c5fc:	3fb99999 	.word	0x3fb99999
3400c600:	00000000 	.word	0x00000000
3400c604:	3fb00000 	.word	0x3fb00000
3400c608:	47ae147b 	.word	0x47ae147b
3400c60c:	3f847ae1 	.word	0x3f847ae1
3400c610:	88e368f1 	.word	0x88e368f1
3400c614:	3ee4f8b5 	.word	0x3ee4f8b5

3400c618 <kf_predict>:
void kf_predict(struct kf_state *state, struct kf_box *predicted)
{
  double motion_cov[2 * KF_DIM];
  int i;

  motion_cov[0] = state->mean[3] * std_weight_position;
3400c618:	ed90 7b06 	vldr	d7, [r0, #24]
  motion_cov[1] = state->mean[3] * std_weight_position;
  motion_cov[2] = 1e-2;
3400c61c:	a33c      	add	r3, pc, #240	@ (adr r3, 3400c710 <kf_predict+0xf8>)
3400c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
  motion_cov[0] = state->mean[3] * std_weight_position;
3400c622:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 3400c6f8 <kf_predict+0xe0>
3400c626:	ee27 6b06 	vmul.f64	d6, d7, d6
{
3400c62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c62e:	b092      	sub	sp, #72	@ 0x48
  motion_cov[0] = state->mean[3] * std_weight_position;
3400c630:	ed8d 6b02 	vstr	d6, [sp, #8]
  motion_cov[1] = state->mean[3] * std_weight_position;
3400c634:	ed8d 6b04 	vstr	d6, [sp, #16]
  motion_cov[3] = state->mean[3] * std_weight_position;
3400c638:	ed8d 6b08 	vstr	d6, [sp, #32]
  motion_cov[4] = state->mean[3] * std_weight_velocity;
3400c63c:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 3400c700 <kf_predict+0xe8>
  motion_cov[2] = 1e-2;
3400c640:	e9cd 2306 	strd	r2, r3, [sp, #24]
  motion_cov[5] = state->mean[3] * std_weight_velocity;
  motion_cov[6] = 1e-5;
3400c644:	a334      	add	r3, pc, #208	@ (adr r3, 3400c718 <kf_predict+0x100>)
3400c646:	e9d3 2300 	ldrd	r2, r3, [r3]
  motion_cov[4] = state->mean[3] * std_weight_velocity;
3400c64a:	ee27 7b06 	vmul.f64	d7, d7, d6
  motion_cov[6] = 1e-5;
3400c64e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  motion_cov[7] = state->mean[3] * std_weight_velocity;
3400c652:	2208      	movs	r2, #8
3400c654:	f10d 0808 	add.w	r8, sp, #8
{
3400c658:	4604      	mov	r4, r0
3400c65a:	460e      	mov	r6, r1
  motion_cov[4] = state->mean[3] * std_weight_velocity;
3400c65c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  motion_cov[5] = state->mean[3] * std_weight_velocity;
3400c660:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  motion_cov[7] = state->mean[3] * std_weight_velocity;
3400c664:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
3400c668:	4643      	mov	r3, r8
3400c66a:	f042 e001 	dls	lr, r2
  for (i = 0; i < 2 * KF_DIM; i ++)
    motion_cov[i] *= motion_cov[i];
3400c66e:	ed93 7b00 	vldr	d7, [r3]
3400c672:	ee27 7b07 	vmul.f64	d7, d7, d7
3400c676:	eca3 7b02 	vstmia	r3!, {d7}
  for (i = 0; i < 2 * KF_DIM; i ++)
3400c67a:	f00f c009 	le	lr, 3400c66e <kf_predict+0x56>

  /* predict state */
  kf_vector_mat_dot_product(state->mean, state->mean, (double *) motion_mat_t, 2 * KF_DIM, 2 * KF_DIM);

  /*predict covariance : motion_mat * state->covariance * motion_mat_t + motion_cov */
  kf_mat_dot_product((double *) state->covariance, (double *) motion_mat, (double *) state->covariance,
3400c67e:	2508      	movs	r5, #8
3400c680:	f104 0740 	add.w	r7, r4, #64	@ 0x40
  kf_vector_mat_dot_product(state->mean, state->mean, (double *) motion_mat_t, 2 * KF_DIM, 2 * KF_DIM);
3400c684:	2308      	movs	r3, #8
3400c686:	4621      	mov	r1, r4
3400c688:	4620      	mov	r0, r4
3400c68a:	4a1f      	ldr	r2, [pc, #124]	@ (3400c708 <kf_predict+0xf0>)
3400c68c:	f7ff ff24 	bl	3400c4d8 <kf_vector_mat_dot_product.constprop.0>
  kf_mat_dot_product((double *) state->covariance, (double *) motion_mat, (double *) state->covariance,
3400c690:	462b      	mov	r3, r5
3400c692:	463a      	mov	r2, r7
3400c694:	4638      	mov	r0, r7
3400c696:	491d      	ldr	r1, [pc, #116]	@ (3400c70c <kf_predict+0xf4>)
3400c698:	e9cd 5500 	strd	r5, r5, [sp]
3400c69c:	f7ff feb4 	bl	3400c408 <kf_mat_dot_product>
             2 * KF_DIM, 2 * KF_DIM, 2 * KF_DIM);
  kf_mat_dot_product((double *) state->covariance, (double *) state->covariance, (double *) motion_mat_t,
3400c6a0:	462b      	mov	r3, r5
3400c6a2:	4639      	mov	r1, r7
3400c6a4:	4638      	mov	r0, r7
3400c6a6:	e9cd 5500 	strd	r5, r5, [sp]
3400c6aa:	4a17      	ldr	r2, [pc, #92]	@ (3400c708 <kf_predict+0xf0>)
3400c6ac:	f7ff feac 	bl	3400c408 <kf_mat_dot_product>
             2 * KF_DIM, 2 * KF_DIM, 2 * KF_DIM);
  for (i = 0; i < 2 * KF_DIM; i ++)
3400c6b0:	4623      	mov	r3, r4
3400c6b2:	f045 e001 	dls	lr, r5
    state->covariance[i][i] += motion_cov[i];
3400c6b6:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
3400c6ba:	ecb8 6b02 	vldmia	r8!, {d6}
3400c6be:	ee37 7b06 	vadd.f64	d7, d7, d6
  for (i = 0; i < 2 * KF_DIM; i ++)
3400c6c2:	3348      	adds	r3, #72	@ 0x48
    state->covariance[i][i] += motion_cov[i];
3400c6c4:	ed03 7b02 	vstr	d7, [r3, #-8]
  for (i = 0; i < 2 * KF_DIM; i ++)
3400c6c8:	f00f c80b 	le	lr, 3400c6b6 <kf_predict+0x9e>

  /* set predicted result */
  predicted->cx = state->mean[0];
3400c6cc:	e9d4 2300 	ldrd	r2, r3, [r4]
3400c6d0:	e9c6 2300 	strd	r2, r3, [r6]
  predicted->cy = state->mean[1];
3400c6d4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
3400c6d8:	e9c6 2302 	strd	r2, r3, [r6, #8]
  predicted->a  = state->mean[2];
3400c6dc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
3400c6e0:	e9c6 2304 	strd	r2, r3, [r6, #16]
  predicted->h  = state->mean[3];
3400c6e4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
3400c6e8:	e9c6 2306 	strd	r2, r3, [r6, #24]
}
3400c6ec:	b012      	add	sp, #72	@ 0x48
3400c6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400c6f2:	bf00      	nop
3400c6f4:	f3af 8000 	nop.w
3400c6f8:	9999999a 	.word	0x9999999a
3400c6fc:	3fa99999 	.word	0x3fa99999
3400c700:	9999999a 	.word	0x9999999a
3400c704:	3f799999 	.word	0x3f799999
3400c708:	3402ef68 	.word	0x3402ef68
3400c70c:	3402f168 	.word	0x3402f168
3400c710:	47ae147b 	.word	0x47ae147b
3400c714:	3f847ae1 	.word	0x3f847ae1
3400c718:	88e368f1 	.word	0x88e368f1
3400c71c:	3ee4f8b5 	.word	0x3ee4f8b5

3400c720 <kf_update>:

void kf_update(struct kf_state *state, struct kf_box *measure)
{
3400c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  innovation_cov[2] = 1e-1;
3400c724:	a3e6      	add	r3, pc, #920	@ (adr r3, 3400cac0 <kf_update+0x3a0>)
3400c726:	e9d3 2300 	ldrd	r2, r3, [r3]
{
3400c72a:	f2ad 7da4 	subw	sp, sp, #1956	@ 0x7a4
  innovation_cov[0] = std_weight_position * state->mean[3];
3400c72e:	ed9f 6be0 	vldr	d6, [pc, #896]	@ 3400cab0 <kf_update+0x390>
3400c732:	ed90 7b06 	vldr	d7, [r0, #24]
3400c736:	f04f 0e04 	mov.w	lr, #4
3400c73a:	ee27 7b06 	vmul.f64	d7, d7, d6
{
3400c73e:	af02      	add	r7, sp, #8
  innovation_cov[0] = std_weight_position * state->mean[3];
3400c740:	f507 6593 	add.w	r5, r7, #1176	@ 0x498
  innovation_cov[2] = 1e-1;
3400c744:	e9c5 2304 	strd	r2, r3, [r5, #16]
{
3400c748:	4604      	mov	r4, r0
3400c74a:	460e      	mov	r6, r1
  innovation_cov[0] = std_weight_position * state->mean[3];
3400c74c:	ed85 7b00 	vstr	d7, [r5]
  innovation_cov[1] = std_weight_position * state->mean[3];
3400c750:	ed85 7b02 	vstr	d7, [r5, #8]
  innovation_cov[3] = std_weight_position * state->mean[3];
3400c754:	ed85 7b06 	vstr	d7, [r5, #24]
  for (i = 0; i < KF_DIM; i ++)
3400c758:	46a9      	mov	r9, r5
  innovation_cov[3] = std_weight_position * state->mean[3];
3400c75a:	462b      	mov	r3, r5
  for (i = 0; i < KF_DIM; i ++)
3400c75c:	f04f 0a00 	mov.w	sl, #0
3400c760:	f04e e001 	dls	lr, lr
    innovation_cov[i] *= innovation_cov[i];
3400c764:	ed93 7b00 	vldr	d7, [r3]
3400c768:	ee27 7b07 	vmul.f64	d7, d7, d7
  for (i = 0; i < KF_DIM; i ++)
3400c76c:	f10a 0a01 	add.w	sl, sl, #1
    innovation_cov[i] *= innovation_cov[i];
3400c770:	eca3 7b02 	vstmia	r3!, {d7}
  for (i = 0; i < KF_DIM; i ++)
3400c774:	f00f c00b 	le	lr, 3400c764 <kf_update+0x44>
  kf_mat_dot_product((double *) tmp, (double *) update_mat, (double *) state->covariance,
3400c778:	f04f 0b08 	mov.w	fp, #8
  kf_vector_mat_dot_product(projected_mean, (double *) update_mat, state->mean, 2 * KF_DIM, KF_DIM);
3400c77c:	2304      	movs	r3, #4
3400c77e:	4622      	mov	r2, r4
3400c780:	49cd      	ldr	r1, [pc, #820]	@ (3400cab8 <kf_update+0x398>)
3400c782:	f107 0018 	add.w	r0, r7, #24
  kf_mat_dot_product((double *) tmp, (double *) update_mat, (double *) state->covariance,
3400c786:	f104 0840 	add.w	r8, r4, #64	@ 0x40
  kf_vector_mat_dot_product(projected_mean, (double *) update_mat, state->mean, 2 * KF_DIM, KF_DIM);
3400c78a:	f7ff fea5 	bl	3400c4d8 <kf_vector_mat_dot_product.constprop.0>
  kf_mat_dot_product((double *) tmp, (double *) update_mat, (double *) state->covariance,
3400c78e:	2304      	movs	r3, #4
3400c790:	4642      	mov	r2, r8
3400c792:	49c9      	ldr	r1, [pc, #804]	@ (3400cab8 <kf_update+0x398>)
3400c794:	f507 60b3 	add.w	r0, r7, #1432	@ 0x598
3400c798:	e9cd bb00 	strd	fp, fp, [sp]
3400c79c:	f7ff fe34 	bl	3400c408 <kf_mat_dot_product>
  kf_mat_dot_product((double *) projected_cov, (double *) tmp, (double *) update_mat_t,
3400c7a0:	2304      	movs	r3, #4
3400c7a2:	e9cd ab00 	strd	sl, fp, [sp]
3400c7a6:	4ac5      	ldr	r2, [pc, #788]	@ (3400cabc <kf_update+0x39c>)
3400c7a8:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
3400c7ac:	f107 0098 	add.w	r0, r7, #152	@ 0x98
3400c7b0:	f7ff fe2a 	bl	3400c408 <kf_mat_dot_product>
  for (i = 0; i < KF_DIM; i++)
3400c7b4:	f04f 0e04 	mov.w	lr, #4
3400c7b8:	f04e e001 	dls	lr, lr
3400c7bc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
3400c7c0:	617b      	str	r3, [r7, #20]
    projected_cov[i][i] += innovation_cov[i];
3400c7c2:	ed93 7b00 	vldr	d7, [r3]
3400c7c6:	ecb9 6b02 	vldmia	r9!, {d6}
3400c7ca:	461a      	mov	r2, r3
3400c7cc:	ee37 7b06 	vadd.f64	d7, d7, d6
3400c7d0:	3328      	adds	r3, #40	@ 0x28
3400c7d2:	ed82 7b00 	vstr	d7, [r2]
  for (i = 0; i < KF_DIM; i++)
3400c7d6:	f00f c00d 	le	lr, 3400c7c2 <kf_update+0xa2>
  for (r = 0; r < row_nb; r++) {
3400c7da:	2200      	movs	r2, #0
{
3400c7dc:	f8c7 d010 	str.w	sp, [r7, #16]
  double res[row_nb][col_nb];
3400c7e0:	f8df c2d8 	ldr.w	ip, [pc, #728]	@ 3400cabc <kf_update+0x39c>
3400c7e4:	b0c0      	sub	sp, #256	@ 0x100
3400c7e6:	a902      	add	r1, sp, #8
  for (r = 0; r < row_nb; r++) {
3400c7e8:	f8c7 8008 	str.w	r8, [r7, #8]
    for (c = 0; c < col_nb; c++) {
3400c7ec:	4643      	mov	r3, r8
3400c7ee:	2000      	movs	r0, #0
3400c7f0:	eb01 1a82 	add.w	sl, r1, r2, lsl #6
      for (i = 0; i < inter_nb; i++) {
3400c7f4:	f04f 0e08 	mov.w	lr, #8
3400c7f8:	46e3      	mov	fp, ip
3400c7fa:	ed9f 7bb3 	vldr	d7, [pc, #716]	@ 3400cac8 <kf_update+0x3a8>
3400c7fe:	f04e e001 	dls	lr, lr
        res[r][c] += m1[c * inter_nb + i] * m2[i * row_nb + r];
3400c802:	46d9      	mov	r9, fp
3400c804:	ecb3 5b02 	vldmia	r3!, {d5}
3400c808:	ed99 6b00 	vldr	d6, [r9]
3400c80c:	f10b 0b20 	add.w	fp, fp, #32
3400c810:	eea5 7b06 	vfma.f64	d7, d5, d6
      for (i = 0; i < inter_nb; i++) {
3400c814:	f00f c80b 	le	lr, 3400c802 <kf_update+0xe2>
    for (c = 0; c < col_nb; c++) {
3400c818:	3008      	adds	r0, #8
3400c81a:	2840      	cmp	r0, #64	@ 0x40
3400c81c:	ecaa 7b02 	vstmia	sl!, {d7}
3400c820:	d1e8      	bne.n	3400c7f4 <kf_update+0xd4>
  for (r = 0; r < row_nb; r++) {
3400c822:	3201      	adds	r2, #1
3400c824:	2a04      	cmp	r2, #4
3400c826:	f10c 0c08 	add.w	ip, ip, #8
3400c82a:	d1df      	bne.n	3400c7ec <kf_update+0xcc>
  memcpy(result, res, sizeof(res));
3400c82c:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400c830:	4628      	mov	r0, r5
3400c832:	f012 fbac 	bl	3401ef8e <memcpy>
  memset(lower, 0, row_col_nb * row_col_nb * sizeof(double));
3400c836:	2280      	movs	r2, #128	@ 0x80
3400c838:	2100      	movs	r1, #0
3400c83a:	f8d7 d010 	ldr.w	sp, [r7, #16]
3400c83e:	f507 7006 	add.w	r0, r7, #536	@ 0x218
3400c842:	f012 f91d 	bl	3401ea80 <memset>
  for (r = 0; r < row_col_nb; r++) {
3400c846:	f507 7306 	add.w	r3, r7, #536	@ 0x218
  memset(lower, 0, row_col_nb * row_col_nb * sizeof(double));
3400c84a:	469b      	mov	fp, r3
  for (r = 0; r < row_col_nb; r++) {
3400c84c:	f04f 0900 	mov.w	r9, #0
3400c850:	613b      	str	r3, [r7, #16]
  for (r = 0; r < row_nb; r++) {
3400c852:	f507 7306 	add.w	r3, r7, #536	@ 0x218
3400c856:	469a      	mov	sl, r3
    for (c = 0; c <= r; c++) {
3400c858:	f04f 0800 	mov.w	r8, #0
  for (r = 0; r < row_nb; r++) {
3400c85c:	697a      	ldr	r2, [r7, #20]
3400c85e:	f8c7 b00c 	str.w	fp, [r7, #12]
      if (r == c) {
3400c862:	45c1      	cmp	r9, r8
3400c864:	f000 8102 	beq.w	3400ca6c <kf_update+0x34c>
3400c868:	469c      	mov	ip, r3
3400c86a:	4658      	mov	r0, fp
      sum = 0;
3400c86c:	ed9f 6b96 	vldr	d6, [pc, #600]	@ 3400cac8 <kf_update+0x3a8>
3400c870:	f108 0101 	add.w	r1, r8, #1
        for (i = 0; i < c; i++)
3400c874:	3901      	subs	r1, #1
3400c876:	f040 80ff 	bne.w	3400ca78 <kf_update+0x358>
        lower[r * n + c] = (A[r * n + c] - sum) / lower[c * n + c];
3400c87a:	ed92 7b00 	vldr	d7, [r2]
3400c87e:	ed9a 5b00 	vldr	d5, [sl]
3400c882:	ee37 7b46 	vsub.f64	d7, d7, d6
3400c886:	ee87 6b05 	vdiv.f64	d6, d7, d5
3400c88a:	68f9      	ldr	r1, [r7, #12]
3400c88c:	ed81 6b00 	vstr	d6, [r1]
3400c890:	e016      	b.n	3400c8c0 <kf_update+0x1a0>
          sum += lower[c * n + i] * lower[c * n + i];
3400c892:	ecb0 6b02 	vldmia	r0!, {d6}
3400c896:	eea6 7b06 	vfma.f64	d7, d6, d6
        for (i = 0; i < c; i++)
3400c89a:	3901      	subs	r1, #1
3400c89c:	d1f9      	bne.n	3400c892 <kf_update+0x172>
3400c89e:	e9c7 3200 	strd	r3, r2, [r7]
        lower[c * n + c] = sqrt(A[c * n + c] - sum);
3400c8a2:	2228      	movs	r2, #40	@ 0x28
3400c8a4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
3400c8a8:	fb02 3108 	mla	r1, r2, r8, r3
3400c8ac:	ed91 0b00 	vldr	d0, [r1]
3400c8b0:	ee30 0b47 	vsub.f64	d0, d0, d7
3400c8b4:	f014 fa9c 	bl	34020df0 <sqrt>
3400c8b8:	e9d7 3200 	ldrd	r3, r2, [r7]
3400c8bc:	ed8a 0b00 	vstr	d0, [sl]
    for (c = 0; c <= r; c++) {
3400c8c0:	68f9      	ldr	r1, [r7, #12]
3400c8c2:	f108 0801 	add.w	r8, r8, #1
3400c8c6:	3108      	adds	r1, #8
3400c8c8:	45c8      	cmp	r8, r9
3400c8ca:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
3400c8ce:	f102 0208 	add.w	r2, r2, #8
3400c8d2:	60f9      	str	r1, [r7, #12]
3400c8d4:	f103 0320 	add.w	r3, r3, #32
3400c8d8:	ddc3      	ble.n	3400c862 <kf_update+0x142>
  for (r = 0; r < row_col_nb; r++) {
3400c8da:	697b      	ldr	r3, [r7, #20]
3400c8dc:	f109 0901 	add.w	r9, r9, #1
3400c8e0:	3320      	adds	r3, #32
3400c8e2:	f1b9 0f04 	cmp.w	r9, #4
3400c8e6:	f10b 0b20 	add.w	fp, fp, #32
3400c8ea:	617b      	str	r3, [r7, #20]
3400c8ec:	d1b1      	bne.n	3400c852 <kf_update+0x132>
  memset(m_inv, 0, row_col_nb * row_col_nb * sizeof(double));
3400c8ee:	2280      	movs	r2, #128	@ 0x80
3400c8f0:	2100      	movs	r1, #0
3400c8f2:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
3400c8f6:	f012 f8c3 	bl	3401ea80 <memset>
  for (r = 0; r < row_col_nb; r++) {
3400c8fa:	f04f 0800 	mov.w	r8, #0
        m_inv[r * n + c] = 1 / m[r * n + c];
3400c8fe:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
  memset(m_inv, 0, row_col_nb * row_col_nb * sizeof(double));
3400c902:	f507 7c06 	add.w	ip, r7, #536	@ 0x218
3400c906:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
  for (r = 0; r < row_col_nb; r++) {
3400c90a:	4661      	mov	r1, ip
3400c90c:	4682      	mov	sl, r0
    for (c = 0; c <= r; c++) {
3400c90e:	2300      	movs	r3, #0
  for (r = 0; r < row_col_nb; r++) {
3400c910:	f507 7ecc 	add.w	lr, r7, #408	@ 0x198
      if (r == c) {
3400c914:	4598      	cmp	r8, r3
3400c916:	f040 80db 	bne.w	3400cad0 <kf_update+0x3b0>
        m_inv[r * n + c] = 1 / m[r * n + c];
3400c91a:	ed91 7b00 	vldr	d7, [r1]
3400c91e:	ee85 6b07 	vdiv.f64	d6, d5, d7
    for (c = 0; c <= r; c++) {
3400c922:	3301      	adds	r3, #1
3400c924:	4543      	cmp	r3, r8
        m_inv[r * n + c] = 1 / m[r * n + c];
3400c926:	ecaa 6b02 	vstmia	sl!, {d6}
    for (c = 0; c <= r; c++) {
3400c92a:	f101 0108 	add.w	r1, r1, #8
3400c92e:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
3400c932:	ddef      	ble.n	3400c914 <kf_update+0x1f4>
  for (r = 0; r < row_col_nb; r++) {
3400c934:	693b      	ldr	r3, [r7, #16]
3400c936:	f108 0801 	add.w	r8, r8, #1
3400c93a:	3328      	adds	r3, #40	@ 0x28
3400c93c:	f1b8 0f04 	cmp.w	r8, #4
3400c940:	613b      	str	r3, [r7, #16]
3400c942:	f100 0020 	add.w	r0, r0, #32
3400c946:	f10c 0c20 	add.w	ip, ip, #32
3400c94a:	d1de      	bne.n	3400c90a <kf_update+0x1ea>
3400c94c:	46a1      	mov	r9, r4
  kf_mat_dot_product(x, cho, B, row_nb, col_nb, row_nb);
3400c94e:	2408      	movs	r4, #8
  kf_mat_transpose(cho_inv_t, cho_inv, row_nb, row_nb);
3400c950:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
3400c954:	4642      	mov	r2, r8
3400c956:	f507 708c 	add.w	r0, r7, #280	@ 0x118
3400c95a:	f7ff fda9 	bl	3400c4b0 <kf_mat_transpose.constprop.0>
  kf_mat_dot_product(cho, cho_inv_t, cho_inv, row_nb, row_nb, row_nb);
3400c95e:	460a      	mov	r2, r1
3400c960:	4643      	mov	r3, r8
3400c962:	f507 718c 	add.w	r1, r7, #280	@ 0x118
3400c966:	f507 7006 	add.w	r0, r7, #536	@ 0x218
3400c96a:	e9cd 8800 	strd	r8, r8, [sp]
3400c96e:	f7ff fd4b 	bl	3400c408 <kf_mat_dot_product>
  kf_mat_dot_product(x, cho, B, row_nb, col_nb, row_nb);
3400c972:	4643      	mov	r3, r8
3400c974:	462a      	mov	r2, r5
3400c976:	f507 7106 	add.w	r1, r7, #536	@ 0x218
3400c97a:	f507 7026 	add.w	r0, r7, #664	@ 0x298
3400c97e:	f8cd 8004 	str.w	r8, [sp, #4]
3400c982:	9400      	str	r4, [sp, #0]
3400c984:	f7ff fd40 	bl	3400c408 <kf_mat_dot_product>
   *         diagonal. In that case projected_cov is also diagonal. If this is case then we can replace
             kf_cho_solve with a faster version.
   */
  kf_cho_solve((double *) kalman_gain_T, (double *) projected_cov, (double *) B, (double *) cho, (double *) cho_inv,
               (double *) cho_inv_t, KF_DIM, 2 * KF_DIM);
  kf_mat_transpose((double *) kalman_gain, (double *) kalman_gain_T, 2 * KF_DIM, KF_DIM);
3400c988:	4622      	mov	r2, r4
3400c98a:	f507 7126 	add.w	r1, r7, #664	@ 0x298
3400c98e:	f507 7066 	add.w	r0, r7, #920	@ 0x398
3400c992:	f7ff fd8d 	bl	3400c4b0 <kf_mat_transpose.constprop.0>

  innovation[0] = measure->cx - projected_mean[0];
3400c996:	ed97 6b06 	vldr	d6, [r7, #24]
3400c99a:	ed96 7b00 	vldr	d7, [r6]
3400c99e:	ee37 7b46 	vsub.f64	d7, d7, d6
  innovation[1] = measure->cy - projected_mean[1];
3400c9a2:	ed97 6b08 	vldr	d6, [r7, #32]
  innovation[0] = measure->cx - projected_mean[0];
3400c9a6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  innovation[1] = measure->cy - projected_mean[1];
3400c9aa:	ed96 7b02 	vldr	d7, [r6, #8]
3400c9ae:	ee37 7b46 	vsub.f64	d7, d7, d6
  innovation[2] = measure->a  - projected_mean[2];
3400c9b2:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
  innovation[1] = measure->cy - projected_mean[1];
3400c9b6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  innovation[2] = measure->a  - projected_mean[2];
3400c9ba:	ed96 7b04 	vldr	d7, [r6, #16]
3400c9be:	ee37 7b46 	vsub.f64	d7, d7, d6
  innovation[3] = measure->h  - projected_mean[3];
3400c9c2:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
  innovation[2] = measure->a  - projected_mean[2];
3400c9c6:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
  innovation[3] = measure->h  - projected_mean[3];
3400c9ca:	ed96 7b06 	vldr	d7, [r6, #24]

  /* update mean */
  kf_mat_dot_product(mean_temp, (double *) kalman_gain, innovation, 2 * KF_DIM, 1, KF_DIM);
3400c9ce:	2301      	movs	r3, #1
  innovation[3] = measure->h  - projected_mean[3];
3400c9d0:	ee37 7b46 	vsub.f64	d7, d7, d6
  kf_mat_dot_product(mean_temp, (double *) kalman_gain, innovation, 2 * KF_DIM, 1, KF_DIM);
3400c9d4:	f107 0238 	add.w	r2, r7, #56	@ 0x38
  innovation[3] = measure->h  - projected_mean[3];
3400c9d8:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
  kf_mat_dot_product(mean_temp, (double *) kalman_gain, innovation, 2 * KF_DIM, 1, KF_DIM);
3400c9dc:	f507 7166 	add.w	r1, r7, #920	@ 0x398
3400c9e0:	9300      	str	r3, [sp, #0]
3400c9e2:	f8cd 8004 	str.w	r8, [sp, #4]
3400c9e6:	4623      	mov	r3, r4
3400c9e8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
3400c9ec:	f7ff fd0c 	bl	3400c408 <kf_mat_dot_product>
  for (i = 0; i < 2 * KF_DIM; i++)
3400c9f0:	f044 e001 	dls	lr, r4
3400c9f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
    state->mean[i] += mean_temp[i];
3400c9f8:	ed99 7b00 	vldr	d7, [r9]
3400c9fc:	ecb3 6b02 	vldmia	r3!, {d6}
3400ca00:	ee37 7b06 	vadd.f64	d7, d7, d6
3400ca04:	eca9 7b02 	vstmia	r9!, {d7}
  for (i = 0; i < 2 * KF_DIM; i++)
3400ca08:	f00f c00b 	le	lr, 3400c9f8 <kf_update+0x2d8>

  /* update covariance */
  kf_mat_dot_product((double *) kalman_gain, (double *) kalman_gain, (double *) projected_cov,
3400ca0c:	2404      	movs	r4, #4
3400ca0e:	f507 7166 	add.w	r1, r7, #920	@ 0x398
3400ca12:	4608      	mov	r0, r1
3400ca14:	2308      	movs	r3, #8
3400ca16:	f107 0298 	add.w	r2, r7, #152	@ 0x98
3400ca1a:	e9cd 4400 	strd	r4, r4, [sp]
3400ca1e:	f7ff fcf3 	bl	3400c408 <kf_mat_dot_product>
                     2 * KF_DIM, KF_DIM, KF_DIM);
  kf_mat_dot_product((double *) covariance_temp, (double *) kalman_gain, (double *) kalman_gain_T,
3400ca22:	2308      	movs	r3, #8
3400ca24:	f507 7226 	add.w	r2, r7, #664	@ 0x298
3400ca28:	f507 7166 	add.w	r1, r7, #920	@ 0x398
3400ca2c:	9401      	str	r4, [sp, #4]
3400ca2e:	9300      	str	r3, [sp, #0]
3400ca30:	f507 60b3 	add.w	r0, r7, #1432	@ 0x598
3400ca34:	f7ff fce8 	bl	3400c408 <kf_mat_dot_product>
3400ca38:	2100      	movs	r1, #0
3400ca3a:	f507 62b3 	add.w	r2, r7, #1432	@ 0x598
    for (c = 0; c < col_nb; c++) {
3400ca3e:	f04f 0e08 	mov.w	lr, #8
  for (r = 0; r < row_col_nb; r++) {
3400ca42:	4610      	mov	r0, r2
3400ca44:	f04e e001 	dls	lr, lr
3400ca48:	68bb      	ldr	r3, [r7, #8]
      result[r * col_nb + c] = m1[r * col_nb + c] - m2[r * col_nb + c];
3400ca4a:	ed93 7b00 	vldr	d7, [r3]
3400ca4e:	ecb0 6b02 	vldmia	r0!, {d6}
3400ca52:	ee37 7b46 	vsub.f64	d7, d7, d6
3400ca56:	eca3 7b02 	vstmia	r3!, {d7}
    for (c = 0; c < col_nb; c++) {
3400ca5a:	f00f c00b 	le	lr, 3400ca4a <kf_update+0x32a>
  for (r = 0; r < row_nb; r++) {
3400ca5e:	3108      	adds	r1, #8
3400ca60:	2940      	cmp	r1, #64	@ 0x40
3400ca62:	f102 0240 	add.w	r2, r2, #64	@ 0x40
3400ca66:	d042      	beq.n	3400caee <kf_update+0x3ce>
3400ca68:	60bb      	str	r3, [r7, #8]
3400ca6a:	e7e8      	b.n	3400ca3e <kf_update+0x31e>
3400ca6c:	4618      	mov	r0, r3
      sum = 0;
3400ca6e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 3400cac8 <kf_update+0x3a8>
3400ca72:	f109 0101 	add.w	r1, r9, #1
3400ca76:	e710      	b.n	3400c89a <kf_update+0x17a>
          sum += lower[r * n + i] * lower[c * n + i];
3400ca78:	ecb0 5b02 	vldmia	r0!, {d5}
3400ca7c:	ecbc 7b02 	vldmia	ip!, {d7}
3400ca80:	eea5 6b07 	vfma.f64	d6, d5, d7
        for (i = 0; i < c; i++)
3400ca84:	e6f6      	b.n	3400c874 <kf_update+0x154>
          sum += m[r * n + k] * m_inv[k * n + c];
3400ca86:	ecbb 4b02 	vldmia	fp!, {d4}
3400ca8a:	ed19 6b08 	vldr	d6, [r9, #-32]	@ 0xffffffe0
3400ca8e:	eea4 7b06 	vfma.f64	d7, d4, d6
        for (k = c; k < r; k++)
3400ca92:	3a01      	subs	r2, #1
3400ca94:	f109 0920 	add.w	r9, r9, #32
3400ca98:	d1f5      	bne.n	3400ca86 <kf_update+0x366>
        m_inv[r * n + c] = -sum / m[r * n + r];
3400ca9a:	693a      	ldr	r2, [r7, #16]
3400ca9c:	eeb1 7b47 	vneg.f64	d7, d7
3400caa0:	ed92 4b00 	vldr	d4, [r2]
3400caa4:	ee87 6b04 	vdiv.f64	d6, d7, d4
3400caa8:	e73b      	b.n	3400c922 <kf_update+0x202>
3400caaa:	bf00      	nop
3400caac:	f3af 8000 	nop.w
3400cab0:	9999999a 	.word	0x9999999a
3400cab4:	3fa99999 	.word	0x3fa99999
3400cab8:	3402ee68 	.word	0x3402ee68
3400cabc:	3402ed68 	.word	0x3402ed68
3400cac0:	9999999a 	.word	0x9999999a
3400cac4:	3fb99999 	.word	0x3fb99999
	...
        sum = 0;
3400cad0:	eba8 0203 	sub.w	r2, r8, r3
3400cad4:	4543      	cmp	r3, r8
3400cad6:	46f1      	mov	r9, lr
3400cad8:	468b      	mov	fp, r1
3400cada:	ed1f 7b05 	vldr	d7, [pc, #-20]	@ 3400cac8 <kf_update+0x3a8>
3400cade:	f102 0201 	add.w	r2, r2, #1
3400cae2:	dc02      	bgt.n	3400caea <kf_update+0x3ca>
3400cae4:	f1b8 4f00 	cmp.w	r8, #2147483648	@ 0x80000000
3400cae8:	d1d3      	bne.n	3400ca92 <kf_update+0x372>
3400caea:	2201      	movs	r2, #1
3400caec:	e7d1      	b.n	3400ca92 <kf_update+0x372>
                     2 * KF_DIM, 2 * KF_DIM, KF_DIM);
  kf_mat_sub((double *) state->covariance, (double *) state->covariance, (double *) covariance_temp,
             2 * KF_DIM, 2 * KF_DIM);
}
3400caee:	f207 779c 	addw	r7, r7, #1948	@ 0x79c
3400caf2:	46bd      	mov	sp, r7
3400caf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

3400caf8 <ulist_del>:
  ulist_add_internal(item, head->prev, head);
}

static inline void ulist_del(struct ulist *item)
{
  item->prev->next = item->next;
3400caf8:	e9d0 3200 	ldrd	r3, r2, [r0]
3400cafc:	6013      	str	r3, [r2, #0]
  item->next->prev = item->prev;
3400cafe:	605a      	str	r2, [r3, #4]
  item->next = NULL;
3400cb00:	2300      	movs	r3, #0
  item->prev = NULL;
3400cb02:	e9c0 3300 	strd	r3, r3, [r0]
}
3400cb06:	4770      	bx	lr

3400cb08 <trk_box_intersection>:
  return right - left;
}

static double trk_box_intersection(trk_box_t *a, trk_box_t *b)
{
  double w = trk_overlap(a->cx, a->w, b->cx, b->w);
3400cb08:	ed90 6b00 	vldr	d6, [r0]
3400cb0c:	ed91 7b00 	vldr	d7, [r1]
  double l1 = x1 - w1 / 2;
3400cb10:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
  double w = trk_overlap(a->cx, a->w, b->cx, b->w);
3400cb14:	ed90 1b04 	vldr	d1, [r0, #16]
3400cb18:	ed91 2b04 	vldr	d2, [r1, #16]
  double l1 = x1 - w1 / 2;
3400cb1c:	eeb0 3b46 	vmov.f64	d3, d6
  double l2 = x2 - w2 / 2;
3400cb20:	eeb0 4b47 	vmov.f64	d4, d7
  double l1 = x1 - w1 / 2;
3400cb24:	eea1 3b45 	vfms.f64	d3, d1, d5
  double l2 = x2 - w2 / 2;
3400cb28:	eea2 4b45 	vfms.f64	d4, d2, d5
  double r1 = x1 + w1 / 2;
3400cb2c:	eea1 6b05 	vfma.f64	d6, d1, d5
  double left = l1 > l2 ? l1 : l2;
3400cb30:	eeb4 3b44 	vcmp.f64	d3, d4
  double r2 = x2 + w2 / 2;
3400cb34:	eea2 7b05 	vfma.f64	d7, d2, d5
  double left = l1 > l2 ? l1 : l2;
3400cb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  double right = r1 < r2 ? r1 : r2;
3400cb3c:	eeb4 6b47 	vcmp.f64	d6, d7
  double left = l1 > l2 ? l1 : l2;
3400cb40:	fe33 4b04 	vselgt.f64	d4, d3, d4
  double right = r1 < r2 ? r1 : r2;
3400cb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cb48:	bf48      	it	mi
3400cb4a:	eeb0 7b46 	vmovmi.f64	d7, d6
  return right - left;
3400cb4e:	ee37 6b44 	vsub.f64	d6, d7, d4
  double h = trk_overlap(a->cy, a->h, b->cy, b->h);
3400cb52:	ed90 4b02 	vldr	d4, [r0, #8]
3400cb56:	ed91 7b02 	vldr	d7, [r1, #8]
3400cb5a:	ed90 0b06 	vldr	d0, [r0, #24]
3400cb5e:	ed91 1b06 	vldr	d1, [r1, #24]
  double l1 = x1 - w1 / 2;
3400cb62:	eeb0 2b44 	vmov.f64	d2, d4
  double l2 = x2 - w2 / 2;
3400cb66:	eeb0 3b47 	vmov.f64	d3, d7
  double l1 = x1 - w1 / 2;
3400cb6a:	eea0 2b45 	vfms.f64	d2, d0, d5
  double l2 = x2 - w2 / 2;
3400cb6e:	eea1 3b45 	vfms.f64	d3, d1, d5
  double r1 = x1 + w1 / 2;
3400cb72:	eea0 4b05 	vfma.f64	d4, d0, d5
  double left = l1 > l2 ? l1 : l2;
3400cb76:	eeb4 2b43 	vcmp.f64	d2, d3
  double r2 = x2 + w2 / 2;
3400cb7a:	eea1 7b05 	vfma.f64	d7, d1, d5
  double left = l1 > l2 ? l1 : l2;
3400cb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  double right = r1 < r2 ? r1 : r2;
3400cb82:	eeb4 4b47 	vcmp.f64	d4, d7
  double left = l1 > l2 ? l1 : l2;
3400cb86:	fe32 3b03 	vselgt.f64	d3, d2, d3
  double right = r1 < r2 ? r1 : r2;
3400cb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

  return w < 0 || h < 0 ? 0 : w * h;
3400cb8e:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
  double right = r1 < r2 ? r1 : r2;
3400cb92:	bf48      	it	mi
3400cb94:	eeb0 7b44 	vmovmi.f64	d7, d4
  return w < 0 || h < 0 ? 0 : w * h;
3400cb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cb9c:	d409      	bmi.n	3400cbb2 <trk_box_intersection+0xaa>
  return right - left;
3400cb9e:	ee37 0b43 	vsub.f64	d0, d7, d3
  return w < 0 || h < 0 ? 0 : w * h;
3400cba2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400cba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cbaa:	d402      	bmi.n	3400cbb2 <trk_box_intersection+0xaa>
3400cbac:	ee20 0b06 	vmul.f64	d0, d0, d6
3400cbb0:	4770      	bx	lr
3400cbb2:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 3400cbb8 <trk_box_intersection+0xb0>
}
3400cbb6:	4770      	bx	lr
	...

3400cbc0 <trk_compute_iou>:

  return a->w * a->h + b->w * b->h - I;
}

static double trk_compute_iou(trk_tbox_t *tbox, trk_dbox_t *dbox)
{
3400cbc0:	b500      	push	{lr}
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400cbc2:	e9d1 2300 	ldrd	r2, r3, [r1]
{
3400cbc6:	ed2d 8b08 	vpush	{d8-d11}
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400cbca:	ed91 8b04 	vldr	d8, [r1, #16]
3400cbce:	ed91 bb06 	vldr	d11, [r1, #24]
  trk_box_t boxb = {tbox->cx, tbox->cy, tbox->w, tbox->h};
3400cbd2:	ed90 ab08 	vldr	d10, [r0, #32]
3400cbd6:	ed90 9b0a 	vldr	d9, [r0, #40]	@ 0x28
{
3400cbda:	b091      	sub	sp, #68	@ 0x44
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400cbdc:	e9cd 2300 	strd	r2, r3, [sp]
3400cbe0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  double I, U;

  I = trk_box_intersection(&boxa, &boxb);
3400cbe4:	a908      	add	r1, sp, #32
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400cbe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  trk_box_t boxb = {tbox->cx, tbox->cy, tbox->w, tbox->h};
3400cbea:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
3400cbee:	e9cd 2308 	strd	r2, r3, [sp, #32]
3400cbf2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  I = trk_box_intersection(&boxa, &boxb);
3400cbf6:	4668      	mov	r0, sp
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400cbf8:	ed8d 8b04 	vstr	d8, [sp, #16]
3400cbfc:	ed8d bb06 	vstr	d11, [sp, #24]
  trk_box_t boxb = {tbox->cx, tbox->cy, tbox->w, tbox->h};
3400cc00:	ed8d ab0c 	vstr	d10, [sp, #48]	@ 0x30
3400cc04:	ed8d 9b0e 	vstr	d9, [sp, #56]	@ 0x38
3400cc08:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  I = trk_box_intersection(&boxa, &boxb);
3400cc0c:	f7ff ff7c 	bl	3400cb08 <trk_box_intersection>
  U = trk_box_union(&boxa, &boxb);

  return I == 0 || U == 0 ? 0 : I / U;
3400cc10:	eeb5 0b40 	vcmp.f64	d0, #0.0
3400cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  I = trk_box_intersection(&boxa, &boxb);
3400cc18:	eeb0 7b40 	vmov.f64	d7, d0
  return I == 0 || U == 0 ? 0 : I / U;
3400cc1c:	d011      	beq.n	3400cc42 <trk_compute_iou+0x82>
  return a->w * a->h + b->w * b->h - I;
3400cc1e:	ee28 8b0b 	vmul.f64	d8, d8, d11
3400cc22:	eeaa 8b09 	vfma.f64	d8, d10, d9
3400cc26:	ee38 8b40 	vsub.f64	d8, d8, d0
  return I == 0 || U == 0 ? 0 : I / U;
3400cc2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400cc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cc32:	d006      	beq.n	3400cc42 <trk_compute_iou+0x82>
3400cc34:	ee87 0b08 	vdiv.f64	d0, d7, d8
}
3400cc38:	b011      	add	sp, #68	@ 0x44
3400cc3a:	ecbd 8b08 	vpop	{d8-d11}
3400cc3e:	f85d fb04 	ldr.w	pc, [sp], #4
  return I == 0 || U == 0 ? 0 : I / U;
3400cc42:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 3400cc48 <trk_compute_iou+0x88>
3400cc46:	e7f7      	b.n	3400cc38 <trk_compute_iou+0x78>
	...

3400cc50 <trk_kalman_pred>:
  m.h = dbox->h;
  kf_init(&tbox->kf_state, &m);
}

static void trk_kalman_pred(trk_tbox_t *tbox)
{
3400cc50:	b510      	push	{r4, lr}
  struct kf_box predicted;

  if (tbox->tlost_cnt)
3400cc52:	6883      	ldr	r3, [r0, #8]
{
3400cc54:	4604      	mov	r4, r0
3400cc56:	b088      	sub	sp, #32
  if (tbox->tlost_cnt)
3400cc58:	b11b      	cbz	r3, 3400cc62 <trk_kalman_pred+0x12>
    tbox->kf_state.mean[7] = 0;
3400cc5a:	2200      	movs	r2, #0
3400cc5c:	2300      	movs	r3, #0
3400cc5e:	e9c0 231e 	strd	r2, r3, [r0, #120]	@ 0x78
  kf_predict(&tbox->kf_state, &predicted);
3400cc62:	4669      	mov	r1, sp
3400cc64:	f104 0040 	add.w	r0, r4, #64	@ 0x40
3400cc68:	f7ff fcd6 	bl	3400c618 <kf_predict>
  tbox->cx = predicted.cx;
3400cc6c:	e9dd 2300 	ldrd	r2, r3, [sp]
  tbox->cy = predicted.cy;
  tbox->w = predicted.a * predicted.h;
3400cc70:	ed9d 6b06 	vldr	d6, [sp, #24]
3400cc74:	ed9d 7b04 	vldr	d7, [sp, #16]
3400cc78:	ee27 7b06 	vmul.f64	d7, d7, d6
  tbox->cx = predicted.cx;
3400cc7c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  tbox->cy = predicted.cy;
3400cc80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  tbox->w = predicted.a * predicted.h;
3400cc84:	ed84 7b08 	vstr	d7, [r4, #32]
  tbox->h = predicted.h;
3400cc88:	ed84 6b0a 	vstr	d6, [r4, #40]	@ 0x28
  tbox->cy = predicted.cy;
3400cc8c:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
3400cc90:	b008      	add	sp, #32
3400cc92:	bd10      	pop	{r4, pc}

3400cc94 <trk_kalman_update.constprop.0>:
{
  struct kf_box m;

  m.cx = dbox->cx;
  m.cy = dbox->cy;
  m.a = dbox->w / dbox->h;
3400cc94:	ed91 7b06 	vldr	d7, [r1, #24]
  m.cx = dbox->cx;
3400cc98:	e9d1 2300 	ldrd	r2, r3, [r1]
  m.a = dbox->w / dbox->h;
3400cc9c:	ed91 5b04 	vldr	d5, [r1, #16]
static void trk_kalman_update(trk_tbox_t *tbox, trk_dbox_t *dbox)
3400cca0:	b510      	push	{r4, lr}
  m.a = dbox->w / dbox->h;
3400cca2:	ee85 6b07 	vdiv.f64	d6, d5, d7
static void trk_kalman_update(trk_tbox_t *tbox, trk_dbox_t *dbox)
3400cca6:	4604      	mov	r4, r0
3400cca8:	b088      	sub	sp, #32
  m.cx = dbox->cx;
3400ccaa:	e9cd 2300 	strd	r2, r3, [sp]
  m.cy = dbox->cy;
3400ccae:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  m.h = dbox->h;
  kf_update(&tbox->kf_state, &m);
3400ccb2:	3040      	adds	r0, #64	@ 0x40
3400ccb4:	4669      	mov	r1, sp
  m.a = dbox->w / dbox->h;
3400ccb6:	ed8d 6b04 	vstr	d6, [sp, #16]
  m.h = dbox->h;
3400ccba:	ed8d 7b06 	vstr	d7, [sp, #24]
  m.cy = dbox->cy;
3400ccbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
  kf_update(&tbox->kf_state, &m);
3400ccc2:	f7ff fd2d 	bl	3400c720 <kf_update>
  tbox->cx = tbox->kf_state.mean[0];
3400ccc6:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
  tbox->cy = tbox->kf_state.mean[1];
  tbox->w = tbox->kf_state.mean[2] * tbox->kf_state.mean[3];
3400ccca:	ed94 6b16 	vldr	d6, [r4, #88]	@ 0x58
3400ccce:	ed94 7b14 	vldr	d7, [r4, #80]	@ 0x50
3400ccd2:	ee27 7b06 	vmul.f64	d7, d7, d6
  tbox->cx = tbox->kf_state.mean[0];
3400ccd6:	e9c4 2304 	strd	r2, r3, [r4, #16]
  tbox->cy = tbox->kf_state.mean[1];
3400ccda:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
  tbox->w = tbox->kf_state.mean[2] * tbox->kf_state.mean[3];
3400ccde:	ed84 7b08 	vstr	d7, [r4, #32]
  tbox->h = tbox->kf_state.mean[3];
3400cce2:	ed84 6b0a 	vstr	d6, [r4, #40]	@ 0x28
  tbox->cy = tbox->kf_state.mean[1];
3400cce6:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
3400ccea:	b008      	add	sp, #32
3400ccec:	bd10      	pop	{r4, pc}

3400ccee <trk_init>:
    trk_tbox_set_tracking(ctx, dbox);
  }
}

int trk_init(trk_ctx_t *ctx, trk_conf_t *cfg, int trk_tbox_nb, trk_tbox_t *tboxes)
{
3400ccee:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;

  ctx->cfg = *cfg;
3400ccf0:	4606      	mov	r6, r0
3400ccf2:	460d      	mov	r5, r1
{
3400ccf4:	4604      	mov	r4, r0
3400ccf6:	4694      	mov	ip, r2
3400ccf8:	461f      	mov	r7, r3
  ctx->cfg = *cfg;
3400ccfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400ccfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400ccfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400cd00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400cd02:	e895 0003 	ldmia.w	r5, {r0, r1}
  tbox->is_tracking = 0;
3400cd06:	2500      	movs	r5, #0
  ctx->next_id = 1;
3400cd08:	2201      	movs	r2, #1
3400cd0a:	45ac      	cmp	ip, r5
  ctx->cfg = *cfg;
3400cd0c:	e886 0003 	stmia.w	r6, {r0, r1}
  ctx->next_id = 1;
3400cd10:	eb0c 0102 	add.w	r1, ip, r2
3400cd14:	bfb8      	it	lt
3400cd16:	4611      	movlt	r1, r2
  ulist_init_head(&ctx->tfree);
  ulist_init_head(&ctx->ttracking);
3400cd18:	f104 0334 	add.w	r3, r4, #52	@ 0x34
3400cd1c:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
  ulist_init_head(&ctx->tlost);
3400cd20:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
3400cd24:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
  ulist_init_head(&ctx->tremain);
3400cd28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400cd2c:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  ulist_init_head(&ctx->tfree);
3400cd30:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
  ulist_init_head(&ctx->dhigh);
3400cd34:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
  ulist_init_head(&ctx->tfree);
3400cd38:	e9c4 000b 	strd	r0, r0, [r4, #44]	@ 0x2c
  ctx->next_id = 1;
3400cd3c:	62a2      	str	r2, [r4, #40]	@ 0x28
  ulist_init_head(&ctx->dhigh);
3400cd3e:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  ulist_init_head(&ctx->dlow);
3400cd42:	f104 0354 	add.w	r3, r4, #84	@ 0x54
3400cd46:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  for (i = 0; i < trk_tbox_nb; i++)
3400cd4a:	3738      	adds	r7, #56	@ 0x38
3400cd4c:	3901      	subs	r1, #1
3400cd4e:	d101      	bne.n	3400cd54 <trk_init+0x66>
    trk_tbox_set_free(ctx, &tboxes[i]);

  return 0;
}
3400cd50:	2000      	movs	r0, #0
3400cd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tbox->dbox_userdata = NULL;
3400cd54:	f847 5c04 	str.w	r5, [r7, #-4]
  ulist_add_internal(item, head, head->next);
3400cd58:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  tbox->is_tracking = 0;
3400cd5a:	f847 5c38 	str.w	r5, [r7, #-56]
  next->prev = item;
3400cd5e:	6057      	str	r7, [r2, #4]
  item->prev = prev;
3400cd60:	e9c7 2000 	strd	r2, r0, [r7]
  prev->next = item;
3400cd64:	62e7      	str	r7, [r4, #44]	@ 0x2c
  for (i = 0; i < trk_tbox_nb; i++)
3400cd66:	f507 7720 	add.w	r7, r7, #640	@ 0x280
3400cd6a:	e7ef      	b.n	3400cd4c <trk_init+0x5e>

3400cd6c <trk_update>:

int trk_update(trk_ctx_t *ctx, int trk_dbox_nb, trk_dbox_t *dboxes)
{
3400cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400cd70:	4607      	mov	r7, r0
{
3400cd72:	ed2d 8b04 	vpush	{d8-d9}
3400cd76:	4604      	mov	r4, r0
3400cd78:	4688      	mov	r8, r1
3400cd7a:	4615      	mov	r5, r2
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400cd7c:	f857 6f34 	ldr.w	r6, [r7, #52]!
{
3400cd80:	b08d      	sub	sp, #52	@ 0x34
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400cd82:	3e38      	subs	r6, #56	@ 0x38
3400cd84:	f106 0338 	add.w	r3, r6, #56	@ 0x38
3400cd88:	429f      	cmp	r7, r3
3400cd8a:	d160      	bne.n	3400ce4e <trk_update+0xe2>
  ulist_for_each_entry(tbox, &ctx->tlost, list)
3400cd8c:	46a2      	mov	sl, r4
3400cd8e:	f85a 6f3c 	ldr.w	r6, [sl, #60]!
3400cd92:	3e38      	subs	r6, #56	@ 0x38
3400cd94:	f106 0338 	add.w	r3, r6, #56	@ 0x38
3400cd98:	459a      	cmp	sl, r3
3400cd9a:	d15d      	bne.n	3400ce58 <trk_update+0xec>
  ulist_init_head(&ctx->dlow);
3400cd9c:	f104 0354 	add.w	r3, r4, #84	@ 0x54
3400cda0:	f1b8 0f00 	cmp.w	r8, #0
3400cda4:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
3400cda8:	9300      	str	r3, [sp, #0]
3400cdaa:	f108 0301 	add.w	r3, r8, #1
3400cdae:	bfb8      	it	lt
3400cdb0:	2301      	movlt	r3, #1
  ulist_init_head(&ctx->dhigh);
3400cdb2:	f104 094c 	add.w	r9, r4, #76	@ 0x4c
3400cdb6:	e9c4 9913 	strd	r9, r9, [r4, #76]	@ 0x4c
  for (i = 0; i < trk_dbox_nb; i++) {
3400cdba:	352c      	adds	r5, #44	@ 0x2c
3400cdbc:	3b01      	subs	r3, #1
3400cdbe:	d150      	bne.n	3400ce62 <trk_update+0xf6>
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->ttracking, list)
3400cdc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400cdc2:	f104 0844 	add.w	r8, r4, #68	@ 0x44
3400cdc6:	f851 5938 	ldr.w	r5, [r1], #-56
3400cdca:	3d38      	subs	r5, #56	@ 0x38
3400cdcc:	f101 0038 	add.w	r0, r1, #56	@ 0x38
3400cdd0:	42b8      	cmp	r0, r7
3400cdd2:	d15c      	bne.n	3400ce8e <trk_update+0x122>
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tlost, list)
3400cdd4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400cdd6:	f851 5938 	ldr.w	r5, [r1], #-56
3400cdda:	3d38      	subs	r5, #56	@ 0x38
3400cddc:	f101 0038 	add.w	r0, r1, #56	@ 0x38
3400cde0:	4550      	cmp	r0, sl
3400cde2:	d160      	bne.n	3400cea6 <trk_update+0x13a>
    if (max_score < 1 - ctx->cfg.sim1_thresh)
3400cde4:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400cde8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400cdea:	f851 692c 	ldr.w	r6, [r1], #-44
3400cdee:	3e2c      	subs	r6, #44	@ 0x2c
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400cdf0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400cdf2:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
3400cdf6:	9301      	str	r3, [sp, #4]
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400cdf8:	f850 3938 	ldr.w	r3, [r0], #-56
3400cdfc:	f1a3 0b38 	sub.w	fp, r3, #56	@ 0x38
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400ce00:	9b01      	ldr	r3, [sp, #4]
3400ce02:	454b      	cmp	r3, r9
3400ce04:	f040 8097 	bne.w	3400cf36 <trk_update+0x1ca>
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400ce08:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3400ce0a:	f851 292c 	ldr.w	r2, [r1], #-44
3400ce0e:	3a2c      	subs	r2, #44	@ 0x2c
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400ce10:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400ce12:	9800      	ldr	r0, [sp, #0]
3400ce14:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400ce18:	f855 6938 	ldr.w	r6, [r5], #-56
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400ce1c:	4283      	cmp	r3, r0
3400ce1e:	9301      	str	r3, [sp, #4]
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400ce20:	f1a6 0638 	sub.w	r6, r6, #56	@ 0x38
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400ce24:	f040 80c5 	bne.w	3400cfb2 <trk_update+0x246>
3400ce28:	2100      	movs	r1, #0
  ulist_add(&tbox->list, &ctx->tfree);
3400ce2a:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
3400ce2e:	9300      	str	r3, [sp, #0]
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400ce30:	f105 0038 	add.w	r0, r5, #56	@ 0x38
3400ce34:	4540      	cmp	r0, r8
3400ce36:	f040 80c1 	bne.w	3400cfbc <trk_update+0x250>
  assert(ulist_is_empty(&ctx->tremain) == 1);
3400ce3a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400ce3c:	4598      	cmp	r8, r3
3400ce3e:	f000 80db 	beq.w	3400cff8 <trk_update+0x28c>
3400ce42:	21fb      	movs	r1, #251	@ 0xfb
3400ce44:	4b9c      	ldr	r3, [pc, #624]	@ (3400d0b8 <trk_update+0x34c>)
3400ce46:	4a9d      	ldr	r2, [pc, #628]	@ (3400d0bc <trk_update+0x350>)
    assert(0);
3400ce48:	489d      	ldr	r0, [pc, #628]	@ (3400d0c0 <trk_update+0x354>)
3400ce4a:	f010 fdcf 	bl	3401d9ec <__assert_func>
    trk_kalman_pred(tbox);
3400ce4e:	4630      	mov	r0, r6
3400ce50:	f7ff fefe 	bl	3400cc50 <trk_kalman_pred>
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400ce54:	6bb6      	ldr	r6, [r6, #56]	@ 0x38
3400ce56:	e794      	b.n	3400cd82 <trk_update+0x16>
    trk_kalman_pred(tbox);
3400ce58:	4630      	mov	r0, r6
3400ce5a:	f7ff fef9 	bl	3400cc50 <trk_kalman_pred>
  ulist_for_each_entry(tbox, &ctx->tlost, list)
3400ce5e:	6bb6      	ldr	r6, [r6, #56]	@ 0x38
3400ce60:	e797      	b.n	3400cd92 <trk_update+0x26>
    if (dbox->conf > ctx->cfg.track_thresh)
3400ce62:	ed15 6b03 	vldr	d6, [r5, #-12]
3400ce66:	ed94 7b00 	vldr	d7, [r4]
3400ce6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  ulist_add_internal(item, head->prev, head);
3400ce72:	bfcd      	iteet	gt
3400ce74:	6d21      	ldrgt	r1, [r4, #80]	@ 0x50
3400ce76:	6da1      	ldrle	r1, [r4, #88]	@ 0x58
  item->next = next;
3400ce78:	9a00      	ldrle	r2, [sp, #0]
  next->prev = item;
3400ce7a:	6525      	strgt	r5, [r4, #80]	@ 0x50
3400ce7c:	bfd6      	itet	le
3400ce7e:	65a5      	strle	r5, [r4, #88]	@ 0x58
  item->next = next;
3400ce80:	f8c5 9000 	strgt.w	r9, [r5]
3400ce84:	602a      	strle	r2, [r5, #0]
  item->prev = prev;
3400ce86:	6069      	str	r1, [r5, #4]
  prev->next = item;
3400ce88:	600d      	str	r5, [r1, #0]
  for (i = 0; i < trk_dbox_nb; i++) {
3400ce8a:	3538      	adds	r5, #56	@ 0x38
3400ce8c:	e796      	b.n	3400cdbc <trk_update+0x50>
  ulist_add(item, head);
}

static inline void ulist_move_tail(struct ulist *item, struct ulist *head)
{
  ulist_del(item);
3400ce8e:	f7ff fe33 	bl	3400caf8 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400ce92:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  next->prev = item;
3400ce94:	64a0      	str	r0, [r4, #72]	@ 0x48
  item->prev = prev;
3400ce96:	e9c1 830e 	strd	r8, r3, [r1, #56]	@ 0x38
  prev->next = item;
3400ce9a:	6018      	str	r0, [r3, #0]
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->ttracking, list)
3400ce9c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
3400ce9e:	4629      	mov	r1, r5
3400cea0:	f1a3 0538 	sub.w	r5, r3, #56	@ 0x38
3400cea4:	e792      	b.n	3400cdcc <trk_update+0x60>
  ulist_del(item);
3400cea6:	f7ff fe27 	bl	3400caf8 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400ceaa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  next->prev = item;
3400ceac:	64a0      	str	r0, [r4, #72]	@ 0x48
  item->prev = prev;
3400ceae:	e9c1 830e 	strd	r8, r3, [r1, #56]	@ 0x38
  prev->next = item;
3400ceb2:	6018      	str	r0, [r3, #0]
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tlost, list)
3400ceb4:	6bab      	ldr	r3, [r5, #56]	@ 0x38
3400ceb6:	4629      	mov	r1, r5
3400ceb8:	f1a3 0538 	sub.w	r5, r3, #56	@ 0x38
3400cebc:	e78e      	b.n	3400cddc <trk_update+0x70>
      score = trk_compute_iou(tbox, dbox) * dbox->conf;
3400cebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
3400cec2:	f7ff fe7d 	bl	3400cbc0 <trk_compute_iou>
3400cec6:	9903      	ldr	r1, [sp, #12]
3400cec8:	ed91 7b08 	vldr	d7, [r1, #32]
3400cecc:	ee20 0b07 	vmul.f64	d0, d0, d7
      if (score <= max_score)
3400ced0:	eeb4 0bc9 	vcmpe.f64	d0, d9
3400ced4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ced8:	d903      	bls.n	3400cee2 <trk_update+0x176>
      tboxhigh = tbox;
3400ceda:	9802      	ldr	r0, [sp, #8]
      max_score = score;
3400cedc:	eeb0 9b40 	vmov.f64	d9, d0
      tboxhigh = tbox;
3400cee0:	4605      	mov	r5, r0
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400cee2:	f8db 3038 	ldr.w	r3, [fp, #56]	@ 0x38
3400cee6:	4658      	mov	r0, fp
3400cee8:	f1a3 0b38 	sub.w	fp, r3, #56	@ 0x38
3400ceec:	f100 0c38 	add.w	ip, r0, #56	@ 0x38
3400cef0:	45c4      	cmp	ip, r8
3400cef2:	d1e4      	bne.n	3400cebe <trk_update+0x152>
    if (max_score < 1 - ctx->cfg.sim1_thresh)
3400cef4:	ed94 7b04 	vldr	d7, [r4, #16]
3400cef8:	ee38 7b47 	vsub.f64	d7, d8, d7
3400cefc:	eeb4 9bc7 	vcmpe.f64	d9, d7
3400cf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cf04:	d412      	bmi.n	3400cf2c <trk_update+0x1c0>
  tbox->tlost_cnt = 0;
3400cf06:	2300      	movs	r3, #0
3400cf08:	60ab      	str	r3, [r5, #8]
  tbox->dbox_userdata = dbox->userdata;
3400cf0a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  trk_kalman_update(tbox, dbox);
3400cf0c:	4628      	mov	r0, r5
  tbox->dbox_userdata = dbox->userdata;
3400cf0e:	636b      	str	r3, [r5, #52]	@ 0x34
  trk_kalman_update(tbox, dbox);
3400cf10:	f7ff fec0 	bl	3400cc94 <trk_kalman_update.constprop.0>
  ulist_move_tail(&tbox->list, &ctx->ttracking);
3400cf14:	f105 0038 	add.w	r0, r5, #56	@ 0x38
  ulist_del(item);
3400cf18:	f7ff fdee 	bl	3400caf8 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400cf1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  next->prev = item;
3400cf1e:	63a0      	str	r0, [r4, #56]	@ 0x38
  item->prev = prev;
3400cf20:	e9c5 730e 	strd	r7, r3, [r5, #56]	@ 0x38
  prev->next = item;
3400cf24:	6018      	str	r0, [r3, #0]
    ulist_del(&dbox->list);
3400cf26:	9801      	ldr	r0, [sp, #4]
3400cf28:	f7ff fde6 	bl	3400caf8 <ulist_del>
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400cf2c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400cf2e:	4631      	mov	r1, r6
3400cf30:	f1a3 062c 	sub.w	r6, r3, #44	@ 0x2c
3400cf34:	e75c      	b.n	3400cdf0 <trk_update+0x84>
    max_score = -1;
3400cf36:	eebf 9b00 	vmov.f64	d9, #240	@ 0xbf800000 -1.0
    tboxhigh = NULL;
3400cf3a:	2500      	movs	r5, #0
3400cf3c:	e7d6      	b.n	3400ceec <trk_update+0x180>
      score = trk_compute_iou(tbox, dbox);
3400cf3e:	4628      	mov	r0, r5
3400cf40:	e9cd 1202 	strd	r1, r2, [sp, #8]
3400cf44:	f7ff fe3c 	bl	3400cbc0 <trk_compute_iou>
      if (score <= max_score)
3400cf48:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
3400cf4c:	eeb4 0bc8 	vcmpe.f64	d0, d8
3400cf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cf54:	d902      	bls.n	3400cf5c <trk_update+0x1f0>
      max_score = score;
3400cf56:	eeb0 8b40 	vmov.f64	d8, d0
      tboxhigh = tbox;
3400cf5a:	46ab      	mov	fp, r5
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400cf5c:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
3400cf5e:	4635      	mov	r5, r6
3400cf60:	f1a0 0638 	sub.w	r6, r0, #56	@ 0x38
3400cf64:	f105 0038 	add.w	r0, r5, #56	@ 0x38
3400cf68:	4540      	cmp	r0, r8
3400cf6a:	d1e8      	bne.n	3400cf3e <trk_update+0x1d2>
    if (max_score < ctx->cfg.sim2_thresh)
3400cf6c:	ed94 7b06 	vldr	d7, [r4, #24]
3400cf70:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400cf74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400cf78:	d416      	bmi.n	3400cfa8 <trk_update+0x23c>
  tbox->tlost_cnt = 0;
3400cf7a:	2300      	movs	r3, #0
  tbox->dbox_userdata = dbox->userdata;
3400cf7c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  tbox->tlost_cnt = 0;
3400cf7e:	f8cb 3008 	str.w	r3, [fp, #8]
  tbox->dbox_userdata = dbox->userdata;
3400cf82:	f8cb 0034 	str.w	r0, [fp, #52]	@ 0x34
  trk_kalman_update(tbox, dbox);
3400cf86:	4658      	mov	r0, fp
3400cf88:	9202      	str	r2, [sp, #8]
3400cf8a:	f7ff fe83 	bl	3400cc94 <trk_kalman_update.constprop.0>
  ulist_move_tail(&tbox->list, &ctx->ttracking);
3400cf8e:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
  ulist_del(item);
3400cf92:	f7ff fdb1 	bl	3400caf8 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400cf96:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  next->prev = item;
3400cf98:	63a0      	str	r0, [r4, #56]	@ 0x38
  item->prev = prev;
3400cf9a:	e9cb 710e 	strd	r7, r1, [fp, #56]	@ 0x38
  prev->next = item;
3400cf9e:	6008      	str	r0, [r1, #0]
    ulist_del(&dbox->list);
3400cfa0:	9801      	ldr	r0, [sp, #4]
3400cfa2:	f7ff fda9 	bl	3400caf8 <ulist_del>
3400cfa6:	9a02      	ldr	r2, [sp, #8]
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400cfa8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
3400cfaa:	4611      	mov	r1, r2
3400cfac:	f1a3 022c 	sub.w	r2, r3, #44	@ 0x2c
3400cfb0:	e72e      	b.n	3400ce10 <trk_update+0xa4>
    max_score = -1;
3400cfb2:	eebf 8b00 	vmov.f64	d8, #240	@ 0xbf800000 -1.0
    tboxhigh = NULL;
3400cfb6:	f04f 0b00 	mov.w	fp, #0
3400cfba:	e7d3      	b.n	3400cf64 <trk_update+0x1f8>
    tbox->tlost_cnt++;
3400cfbc:	68ab      	ldr	r3, [r5, #8]
3400cfbe:	f103 0b01 	add.w	fp, r3, #1
3400cfc2:	f8c5 b008 	str.w	fp, [r5, #8]
    ulist_del(&tbox->list);
3400cfc6:	f7ff fd97 	bl	3400caf8 <ulist_del>
    if (tbox->tlost_cnt == ctx->cfg.tlost_cnt)
3400cfca:	6a22      	ldr	r2, [r4, #32]
3400cfcc:	4593      	cmp	fp, r2
3400cfce:	d10c      	bne.n	3400cfea <trk_update+0x27e>
  ulist_add_internal(item, head, head->next);
3400cfd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  tbox->is_tracking = 0;
3400cfd2:	6029      	str	r1, [r5, #0]
  tbox->dbox_userdata = NULL;
3400cfd4:	6369      	str	r1, [r5, #52]	@ 0x34
  next->prev = item;
3400cfd6:	6058      	str	r0, [r3, #4]
  item->next = next;
3400cfd8:	63ab      	str	r3, [r5, #56]	@ 0x38
  item->prev = prev;
3400cfda:	9b00      	ldr	r3, [sp, #0]
3400cfdc:	63eb      	str	r3, [r5, #60]	@ 0x3c
  prev->next = item;
3400cfde:	62e0      	str	r0, [r4, #44]	@ 0x2c
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400cfe0:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
3400cfe2:	4635      	mov	r5, r6
3400cfe4:	f1a3 0638 	sub.w	r6, r3, #56	@ 0x38
3400cfe8:	e722      	b.n	3400ce30 <trk_update+0xc4>
  ulist_add_internal(item, head->prev, head);
3400cfea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  tbox->dbox_userdata = NULL;
3400cfec:	6369      	str	r1, [r5, #52]	@ 0x34
  next->prev = item;
3400cfee:	6420      	str	r0, [r4, #64]	@ 0x40
  item->prev = prev;
3400cff0:	e9c5 a30e 	strd	sl, r3, [r5, #56]	@ 0x38
  prev->next = item;
3400cff4:	6018      	str	r0, [r3, #0]
}
3400cff6:	e7f3      	b.n	3400cfe0 <trk_update+0x274>
  tbox->is_tracking = 1;
3400cff8:	f04f 0801 	mov.w	r8, #1
  ulist_for_each_entry(dbox, &ctx->dhigh, list) {
3400cffc:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
  if (ulist_is_empty(&ctx->tfree)) {
3400cffe:	f104 0a2c 	add.w	sl, r4, #44	@ 0x2c
  ulist_for_each_entry(dbox, &ctx->dhigh, list) {
3400d002:	3d2c      	subs	r5, #44	@ 0x2c
3400d004:	f105 032c 	add.w	r3, r5, #44	@ 0x2c
3400d008:	4599      	cmp	r9, r3
3400d00a:	d105      	bne.n	3400d018 <trk_update+0x2ac>
  trk_matching_step2(ctx);
  trk_update_tlost(ctx);
  trk_add_new_tracks(ctx);

  return 0;
}
3400d00c:	2000      	movs	r0, #0
3400d00e:	b00d      	add	sp, #52	@ 0x34
3400d010:	ecbd 8b04 	vpop	{d8-d9}
3400d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dbox->conf < ctx->cfg.det_thresh)
3400d018:	ed95 6b08 	vldr	d6, [r5, #32]
3400d01c:	ed94 7b02 	vldr	d7, [r4, #8]
3400d020:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400d024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d028:	d442      	bmi.n	3400d0b0 <trk_update+0x344>
  ulist_add_tail(item, head);
}

static inline int ulist_is_empty(const struct ulist *head)
{
  return head->next == head;
3400d02a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
  if (ulist_is_empty(&ctx->tfree)) {
3400d02c:	4556      	cmp	r6, sl
3400d02e:	d103      	bne.n	3400d038 <trk_update+0x2cc>
    assert(0);
3400d030:	2181      	movs	r1, #129	@ 0x81
3400d032:	4b24      	ldr	r3, [pc, #144]	@ (3400d0c4 <trk_update+0x358>)
3400d034:	4a24      	ldr	r2, [pc, #144]	@ (3400d0c8 <trk_update+0x35c>)
3400d036:	e707      	b.n	3400ce48 <trk_update+0xdc>
  m.a = dbox->w / dbox->h;
3400d038:	ed95 5b04 	vldr	d5, [r5, #16]
  m.cx = dbox->cx;
3400d03c:	e9d5 2300 	ldrd	r2, r3, [r5]
  m.a = dbox->w / dbox->h;
3400d040:	ed95 7b06 	vldr	d7, [r5, #24]
3400d044:	ee85 6b07 	vdiv.f64	d6, d5, d7
  kf_init(&tbox->kf_state, &m);
3400d048:	f106 0008 	add.w	r0, r6, #8
3400d04c:	a904      	add	r1, sp, #16
  m.cx = dbox->cx;
3400d04e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  m.cy = dbox->cy;
3400d052:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m.a = dbox->w / dbox->h;
3400d056:	ed8d 6b08 	vstr	d6, [sp, #32]
  m.cy = dbox->cy;
3400d05a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  m.h = dbox->h;
3400d05e:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  kf_init(&tbox->kf_state, &m);
3400d062:	f7ff fa75 	bl	3400c550 <kf_init>
  tbox->id = ctx->next_id++;
3400d066:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  tbox->is_tracking = 1;
3400d068:	f846 8c38 	str.w	r8, [r6, #-56]
  tbox->id = ctx->next_id++;
3400d06c:	1c5a      	adds	r2, r3, #1
3400d06e:	62a2      	str	r2, [r4, #40]	@ 0x28
3400d070:	f846 3c34 	str.w	r3, [r6, #-52]
  tbox->tlost_cnt = 0;
3400d074:	2300      	movs	r3, #0
3400d076:	f846 3c30 	str.w	r3, [r6, #-48]
  tbox->cx = dbox->cx;
3400d07a:	e9d5 2300 	ldrd	r2, r3, [r5]
3400d07e:	e946 230a 	strd	r2, r3, [r6, #-40]	@ 0x28
  tbox->cy = dbox->cy;
3400d082:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
3400d086:	e946 2308 	strd	r2, r3, [r6, #-32]
  tbox->w = dbox->w;
3400d08a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
3400d08e:	e946 2306 	strd	r2, r3, [r6, #-24]
  tbox->h = dbox->h;
3400d092:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
3400d096:	e946 2304 	strd	r2, r3, [r6, #-16]
  tbox->dbox_userdata = dbox->userdata;
3400d09a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
  ulist_del(item);
3400d09c:	4630      	mov	r0, r6
3400d09e:	f846 3c04 	str.w	r3, [r6, #-4]
3400d0a2:	f7ff fd29 	bl	3400caf8 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400d0a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  next->prev = item;
3400d0a8:	63a6      	str	r6, [r4, #56]	@ 0x38
  item->prev = prev;
3400d0aa:	e9c6 7300 	strd	r7, r3, [r6]
  prev->next = item;
3400d0ae:	601e      	str	r6, [r3, #0]
  ulist_for_each_entry(dbox, &ctx->dhigh, list) {
3400d0b0:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
3400d0b2:	3d2c      	subs	r5, #44	@ 0x2c
3400d0b4:	e7a6      	b.n	3400d004 <trk_update+0x298>
3400d0b6:	bf00      	nop
3400d0b8:	340244dd 	.word	0x340244dd
3400d0bc:	3402f37e 	.word	0x3402f37e
3400d0c0:	34024500 	.word	0x34024500
3400d0c4:	340235d8 	.word	0x340235d8
3400d0c8:	3402f368 	.word	0x3402f368

3400d0cc <LL_ATON_End_EpochBlock_197>:


/* scheduling epoch=197  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_197(const void *epoch_block)
{
3400d0cc:	b530      	push	{r4, r5, lr}
3400d0ce:	b0af      	sub	sp, #188	@ 0xbc
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_835 */
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
3400d0d0:	22b4      	movs	r2, #180	@ 0xb4
3400d0d2:	2100      	movs	r1, #0
3400d0d4:	a801      	add	r0, sp, #4
3400d0d6:	f011 fcd3 	bl	3401ea80 <memset>
3400d0da:	f44f 7407 	mov.w	r4, #540	@ 0x21c
3400d0de:	f643 7148 	movw	r1, #16200	@ 0x3f48
3400d0e2:	221e      	movs	r2, #30
3400d0e4:	e9cd 1406 	strd	r1, r4, [sp, #24]
3400d0e8:	e9cd 2202 	strd	r2, r2, [sp, #8]
3400d0ec:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
3400d0f0:	910a      	str	r1, [sp, #40]	@ 0x28
3400d0f2:	9111      	str	r1, [sp, #68]	@ 0x44
3400d0f4:	2248      	movs	r2, #72	@ 0x48
3400d0f6:	f44f 6107 	mov.w	r1, #2160	@ 0x870
3400d0fa:	232a      	movs	r3, #42	@ 0x2a
3400d0fc:	4c16      	ldr	r4, [pc, #88]	@ (3400d158 <LL_ATON_End_EpochBlock_197+0x8c>)
3400d0fe:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400d102:	940b      	str	r4, [sp, #44]	@ 0x2c
3400d104:	2204      	movs	r2, #4
3400d106:	f64f 5420 	movw	r4, #64800	@ 0xfd20
3400d10a:	2012      	movs	r0, #18
3400d10c:	f88d 3004 	strb.w	r3, [sp, #4]
3400d110:	2301      	movs	r3, #1
3400d112:	4d12      	ldr	r5, [pc, #72]	@ (3400d15c <LL_ATON_End_EpochBlock_197+0x90>)
3400d114:	e9cd 2414 	strd	r2, r4, [sp, #80]	@ 0x50
3400d118:	682a      	ldr	r2, [r5, #0]
3400d11a:	e9cd 0304 	strd	r0, r3, [sp, #16]
3400d11e:	9216      	str	r2, [sp, #88]	@ 0x58
3400d120:	4a0f      	ldr	r2, [pc, #60]	@ (3400d160 <LL_ATON_End_EpochBlock_197+0x94>)
3400d122:	e9cd 0308 	strd	r0, r3, [sp, #32]
3400d126:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
3400d12a:	9221      	str	r2, [sp, #132]	@ 0x84
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_835 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
3400d12c:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
3400d12e:	3230      	adds	r2, #48	@ 0x30
3400d130:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400d134:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400d138:	931c      	str	r3, [sp, #112]	@ 0x70
3400d13a:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400d13e:	9327      	str	r3, [sp, #156]	@ 0x9c
3400d140:	922c      	str	r2, [sp, #176]	@ 0xb0
3400d142:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
3400d146:	f7f7 fad1 	bl	340046ec <ll_sw_forward_dequantizelinear>
  /* *** MCU cache clean (only) operation (SW, whole range) *** */
  /*     memory pool: 12 */
  /*     start: (((uintptr_t)(_mem_pool__user_io_output_2_Default)) + 0) */
  /*     end:   (((uintptr_t)(_mem_pool__user_io_output_2_Default)) + 64800) */
  LL_ATON_Cache_MCU_Clean_Range((((uintptr_t)(_mem_pool__user_io_output_2_Default)) + 0) /* Equivalent hex offset = 0x0 */, 64800);
3400d14a:	6828      	ldr	r0, [r5, #0]
  void LL_ATON_Cache_MCU_Clean_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Clean_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d14c:	1901      	adds	r1, r0, r4
3400d14e:	f7f4 ff93 	bl	34002078 <mcu_cache_clean_range>

}
3400d152:	b02f      	add	sp, #188	@ 0xbc
3400d154:	bd30      	pop	{r4, r5, pc}
3400d156:	bf00      	nop
3400d158:	34200000 	.word	0x34200000
3400d15c:	340db390 	.word	0x340db390
3400d160:	704c76d0 	.word	0x704c76d0

3400d164 <_ec_blob_cache_start_func_198>:
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400d164:	4901      	ldr	r1, [pc, #4]	@ (3400d16c <_ec_blob_cache_start_func_198+0x8>)
3400d166:	4802      	ldr	r0, [pc, #8]	@ (3400d170 <_ec_blob_cache_start_func_198+0xc>)
3400d168:	f7f4 bf5c 	b.w	34002024 <mcu_cache_invalidate_range>
3400d16c:	3420f0e0 	.word	0x3420f0e0
3400d170:	3420e100 	.word	0x3420e100

3400d174 <_ec_blob_cache_start_func_168>:
3400d174:	4901      	ldr	r1, [pc, #4]	@ (3400d17c <_ec_blob_cache_start_func_168+0x8>)
3400d176:	4802      	ldr	r0, [pc, #8]	@ (3400d180 <_ec_blob_cache_start_func_168+0xc>)
3400d178:	f7f4 bf54 	b.w	34002024 <mcu_cache_invalidate_range>
3400d17c:	34274760 	.word	0x34274760
3400d180:	34270800 	.word	0x34270800

3400d184 <_ec_blob_cache_start_func_138>:
3400d184:	4901      	ldr	r1, [pc, #4]	@ (3400d18c <_ec_blob_cache_start_func_138+0x8>)
3400d186:	4802      	ldr	r0, [pc, #8]	@ (3400d190 <_ec_blob_cache_start_func_138+0xc>)
3400d188:	f7f4 bf4c 	b.w	34002024 <mcu_cache_invalidate_range>
3400d18c:	342f0d20 	.word	0x342f0d20
3400d190:	342e1000 	.word	0x342e1000

3400d194 <_ec_blob_cache_start_func_119>:
3400d194:	4901      	ldr	r1, [pc, #4]	@ (3400d19c <_ec_blob_cache_start_func_119+0x8>)
3400d196:	4802      	ldr	r0, [pc, #8]	@ (3400d1a0 <_ec_blob_cache_start_func_119+0xc>)
3400d198:	f7f4 bf44 	b.w	34002024 <mcu_cache_invalidate_range>
3400d19c:	342a8c00 	.word	0x342a8c00
3400d1a0:	34270800 	.word	0x34270800

3400d1a4 <_ec_blob_cache_start_func_1>:
3400d1a4:	4901      	ldr	r1, [pc, #4]	@ (3400d1ac <_ec_blob_cache_start_func_1+0x8>)
3400d1a6:	4802      	ldr	r0, [pc, #8]	@ (3400d1b0 <_ec_blob_cache_start_func_1+0xc>)
3400d1a8:	f7f4 bf3c 	b.w	34002024 <mcu_cache_invalidate_range>
3400d1ac:	342c4e00 	.word	0x342c4e00
3400d1b0:	342a8c00 	.word	0x342a8c00

3400d1b4 <LL_ATON_End_EpochBlock_227>:


/* scheduling epoch=227  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_227(const void *epoch_block)
{
3400d1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
3400d1b6:	4d0d      	ldr	r5, [pc, #52]	@ (3400d1ec <LL_ATON_End_EpochBlock_227+0x38>)
3400d1b8:	4c0d      	ldr	r4, [pc, #52]	@ (3400d1f0 <LL_ATON_End_EpochBlock_227+0x3c>)
3400d1ba:	4629      	mov	r1, r5
3400d1bc:	4620      	mov	r0, r4
3400d1be:	f7f4 ff31 	bl	34002024 <mcu_cache_invalidate_range>
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) /* Equivalent hex address = 0x34200000UL */, 4064);

  LL_ATON_LIB_UNUSED(epoch_block);

  /* Reset the stream switch */
  LL_Switch_Init(NULL, 0);
3400d1c2:	2100      	movs	r1, #0
3400d1c4:	4608      	mov	r0, r1
3400d1c6:	f7f5 fcb7 	bl	34002b38 <LL_Switch_Init>
    {
      .name = NULL,
    }
  };

  LL_ATON_LIB_Concat(Concat_780_tensor_info_in_227, 3, Concat_780_tensor_info_out_227, 1, 4, 8);
3400d1ca:	2304      	movs	r3, #4
3400d1cc:	2208      	movs	r2, #8
3400d1ce:	2103      	movs	r1, #3
3400d1d0:	e9cd 3200 	strd	r3, r2, [sp]
3400d1d4:	4807      	ldr	r0, [pc, #28]	@ (3400d1f4 <LL_ATON_End_EpochBlock_227+0x40>)
3400d1d6:	2301      	movs	r3, #1
3400d1d8:	4a07      	ldr	r2, [pc, #28]	@ (3400d1f8 <LL_ATON_End_EpochBlock_227+0x44>)
3400d1da:	f7f6 faf9 	bl	340037d0 <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d1de:	4629      	mov	r1, r5
3400d1e0:	4620      	mov	r0, r4
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 4064))) */
  LL_ATON_Cache_MCU_Clean_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) /* Equivalent hex address = 0x34200000UL */, 4064);

}
3400d1e2:	b003      	add	sp, #12
3400d1e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400d1e8:	f7f4 bf46 	b.w	34002078 <mcu_cache_clean_range>
3400d1ec:	34200fe0 	.word	0x34200fe0
3400d1f0:	34200000 	.word	0x34200000
3400d1f4:	34034be4 	.word	0x34034be4
3400d1f8:	34034b74 	.word	0x34034b74

3400d1fc <LL_ATON_End_EpochBlock_196>:
{
3400d1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400d1fe:	4d0d      	ldr	r5, [pc, #52]	@ (3400d234 <LL_ATON_End_EpochBlock_196+0x38>)
3400d200:	4c0d      	ldr	r4, [pc, #52]	@ (3400d238 <LL_ATON_End_EpochBlock_196+0x3c>)
3400d202:	4629      	mov	r1, r5
3400d204:	4620      	mov	r0, r4
3400d206:	f7f4 ff0d 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400d20a:	2100      	movs	r1, #0
3400d20c:	4608      	mov	r0, r1
3400d20e:	f7f5 fc93 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_Concat(Concat_833_tensor_info_in_196, 3, Concat_833_tensor_info_out_196, 1, 6, 0);
3400d212:	2306      	movs	r3, #6
3400d214:	2200      	movs	r2, #0
3400d216:	2103      	movs	r1, #3
3400d218:	e9cd 3200 	strd	r3, r2, [sp]
3400d21c:	4807      	ldr	r0, [pc, #28]	@ (3400d23c <LL_ATON_End_EpochBlock_196+0x40>)
3400d21e:	2301      	movs	r3, #1
3400d220:	4a07      	ldr	r2, [pc, #28]	@ (3400d240 <LL_ATON_End_EpochBlock_196+0x44>)
3400d222:	f7f6 fad5 	bl	340037d0 <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d226:	4629      	mov	r1, r5
3400d228:	4620      	mov	r0, r4
}
3400d22a:	b003      	add	sp, #12
3400d22c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400d230:	f7f4 bf22 	b.w	34002078 <mcu_cache_clean_range>
3400d234:	34203f60 	.word	0x34203f60
3400d238:	34200000 	.word	0x34200000
3400d23c:	34034a14 	.word	0x34034a14
3400d240:	340349a4 	.word	0x340349a4

3400d244 <LL_ATON_End_EpochBlock_166>:
{
3400d244:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400d246:	4d0d      	ldr	r5, [pc, #52]	@ (3400d27c <LL_ATON_End_EpochBlock_166+0x38>)
3400d248:	4c0d      	ldr	r4, [pc, #52]	@ (3400d280 <LL_ATON_End_EpochBlock_166+0x3c>)
3400d24a:	4629      	mov	r1, r5
3400d24c:	4620      	mov	r0, r4
3400d24e:	f7f4 fee9 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400d252:	2100      	movs	r1, #0
3400d254:	4608      	mov	r0, r1
3400d256:	f7f5 fc6f 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_Concat(Concat_886_tensor_info_in_166, 3, Concat_886_tensor_info_out_166, 1, 4, 6);
3400d25a:	2304      	movs	r3, #4
3400d25c:	2206      	movs	r2, #6
3400d25e:	2103      	movs	r1, #3
3400d260:	e9cd 3200 	strd	r3, r2, [sp]
3400d264:	4807      	ldr	r0, [pc, #28]	@ (3400d284 <LL_ATON_End_EpochBlock_166+0x40>)
3400d266:	2301      	movs	r3, #1
3400d268:	4a07      	ldr	r2, [pc, #28]	@ (3400d288 <LL_ATON_End_EpochBlock_166+0x44>)
3400d26a:	f7f6 fab1 	bl	340037d0 <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d26e:	4629      	mov	r1, r5
3400d270:	4620      	mov	r0, r4
}
3400d272:	b003      	add	sp, #12
3400d274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400d278:	f7f4 befe 	b.w	34002078 <mcu_cache_clean_range>
3400d27c:	34300a40 	.word	0x34300a40
3400d280:	342f0d20 	.word	0x342f0d20
3400d284:	34034844 	.word	0x34034844
3400d288:	340347d4 	.word	0x340347d4

3400d28c <LL_ATON_End_EpochBlock_137>:
{
3400d28c:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400d28e:	4d0e      	ldr	r5, [pc, #56]	@ (3400d2c8 <LL_ATON_End_EpochBlock_137+0x3c>)
3400d290:	4c0e      	ldr	r4, [pc, #56]	@ (3400d2cc <LL_ATON_End_EpochBlock_137+0x40>)
3400d292:	b085      	sub	sp, #20
3400d294:	4629      	mov	r1, r5
3400d296:	4620      	mov	r0, r4
3400d298:	f7f4 fec4 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400d29c:	2100      	movs	r1, #0
3400d29e:	4608      	mov	r0, r1
3400d2a0:	f7f5 fc4a 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_DepthToSpace(Resize_553_resize_NN_to_expansion_dts_1803_tensor_info_in_137, 1, Resize_553_resize_NN_to_expansion_dts_1803_tensor_info_out_137, 2, 2, 2, 5);
3400d2a4:	2302      	movs	r3, #2
3400d2a6:	2205      	movs	r2, #5
3400d2a8:	2101      	movs	r1, #1
3400d2aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
3400d2ae:	9300      	str	r3, [sp, #0]
3400d2b0:	4a07      	ldr	r2, [pc, #28]	@ (3400d2d0 <LL_ATON_End_EpochBlock_137+0x44>)
3400d2b2:	4808      	ldr	r0, [pc, #32]	@ (3400d2d4 <LL_ATON_End_EpochBlock_137+0x48>)
3400d2b4:	f7f6 fa7e 	bl	340037b4 <LL_ATON_LIB_DMA_DepthToSpace>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d2b8:	4629      	mov	r1, r5
3400d2ba:	4620      	mov	r0, r4
}
3400d2bc:	b005      	add	sp, #20
3400d2be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400d2c2:	f7f4 bed9 	b.w	34002078 <mcu_cache_clean_range>
3400d2c6:	bf00      	nop
3400d2c8:	34238400 	.word	0x34238400
3400d2cc:	34200000 	.word	0x34200000
3400d2d0:	34034674 	.word	0x34034674
3400d2d4:	340346e4 	.word	0x340346e4

3400d2d8 <LL_ATON_End_EpochBlock_118>:
{
3400d2d8:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400d2da:	4d0e      	ldr	r5, [pc, #56]	@ (3400d314 <LL_ATON_End_EpochBlock_118+0x3c>)
3400d2dc:	4c0e      	ldr	r4, [pc, #56]	@ (3400d318 <LL_ATON_End_EpochBlock_118+0x40>)
3400d2de:	b085      	sub	sp, #20
3400d2e0:	4629      	mov	r1, r5
3400d2e2:	4620      	mov	r0, r4
3400d2e4:	f7f4 fe9e 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400d2e8:	2100      	movs	r1, #0
3400d2ea:	4608      	mov	r0, r1
3400d2ec:	f7f5 fc24 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_DepthToSpace(Resize_495_resize_NN_to_expansion_dts_1799_tensor_info_in_118, 1, Resize_495_resize_NN_to_expansion_dts_1799_tensor_info_out_118, 2, 2, 2, 3);
3400d2f0:	2302      	movs	r3, #2
3400d2f2:	2203      	movs	r2, #3
3400d2f4:	2101      	movs	r1, #1
3400d2f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
3400d2fa:	9300      	str	r3, [sp, #0]
3400d2fc:	4a07      	ldr	r2, [pc, #28]	@ (3400d31c <LL_ATON_End_EpochBlock_118+0x44>)
3400d2fe:	4808      	ldr	r0, [pc, #32]	@ (3400d320 <LL_ATON_End_EpochBlock_118+0x48>)
3400d300:	f7f6 fa58 	bl	340037b4 <LL_ATON_LIB_DMA_DepthToSpace>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d304:	4629      	mov	r1, r5
3400d306:	4620      	mov	r0, r4
}
3400d308:	b005      	add	sp, #20
3400d30a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400d30e:	f7f4 beb3 	b.w	34002078 <mcu_cache_clean_range>
3400d312:	bf00      	nop
3400d314:	3428ca00 	.word	0x3428ca00
3400d318:	34270800 	.word	0x34270800
3400d31c:	34034544 	.word	0x34034544
3400d320:	340345b4 	.word	0x340345b4

3400d324 <LL_ATON_End_EpochBlock_228>:


/* scheduling epoch=228  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_228(const void *epoch_block)
{
3400d324:	b570      	push	{r4, r5, r6, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400d326:	f643 7560 	movw	r5, #16224	@ 0x3f60
  /* *** MCU cache invalidate (only) operation for unaligned buffer end address (last line) *** */
  /*     memory pool: 10 */
  /*     start: (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16192) */
  /*     end:   (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16224) */
  LL_ATON_Cache_MCU_Invalidate_Range((((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16192) /* Equivalent hex offset = 0x3f40 */, 32);
3400d32a:	4c25      	ldr	r4, [pc, #148]	@ (3400d3c0 <LL_ATON_End_EpochBlock_228+0x9c>)
{
3400d32c:	b0ae      	sub	sp, #184	@ 0xb8
  LL_ATON_Cache_MCU_Invalidate_Range((((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16192) /* Equivalent hex offset = 0x3f40 */, 32);
3400d32e:	6820      	ldr	r0, [r4, #0]
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_782 */
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400d330:	f44f 7687 	mov.w	r6, #270	@ 0x10e
3400d334:	1941      	adds	r1, r0, r5
3400d336:	f500 507d 	add.w	r0, r0, #16192	@ 0x3f40
3400d33a:	f7f4 fe73 	bl	34002024 <mcu_cache_invalidate_range>
3400d33e:	22b4      	movs	r2, #180	@ 0xb4
3400d340:	2100      	movs	r1, #0
3400d342:	a801      	add	r0, sp, #4
3400d344:	f011 fb9c 	bl	3401ea80 <memset>
3400d348:	f640 71d2 	movw	r1, #4050	@ 0xfd2
3400d34c:	220f      	movs	r2, #15
3400d34e:	232a      	movs	r3, #42	@ 0x2a
3400d350:	2012      	movs	r0, #18
3400d352:	e9cd 1606 	strd	r1, r6, [sp, #24]
3400d356:	e9cd 2202 	strd	r2, r2, [sp, #8]
3400d35a:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
3400d35e:	f88d 3004 	strb.w	r3, [sp, #4]
3400d362:	910a      	str	r1, [sp, #40]	@ 0x28
3400d364:	2301      	movs	r3, #1
3400d366:	9111      	str	r1, [sp, #68]	@ 0x44
3400d368:	2248      	movs	r2, #72	@ 0x48
3400d36a:	f44f 6187 	mov.w	r1, #1080	@ 0x438
3400d36e:	e9cd 0304 	strd	r0, r3, [sp, #16]
3400d372:	e9cd 0308 	strd	r0, r3, [sp, #32]
3400d376:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
3400d37a:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400d37e:	2004      	movs	r0, #4
3400d380:	f643 7248 	movw	r2, #16200	@ 0x3f48
3400d384:	e9cd 0214 	strd	r0, r2, [sp, #80]	@ 0x50
3400d388:	6822      	ldr	r2, [r4, #0]
3400d38a:	4e0e      	ldr	r6, [pc, #56]	@ (3400d3c4 <LL_ATON_End_EpochBlock_228+0xa0>)
3400d38c:	9216      	str	r2, [sp, #88]	@ 0x58
3400d38e:	4a0e      	ldr	r2, [pc, #56]	@ (3400d3c8 <LL_ATON_End_EpochBlock_228+0xa4>)
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_782 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400d390:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400d392:	9221      	str	r2, [sp, #132]	@ 0x84
3400d394:	3230      	adds	r2, #48	@ 0x30
3400d396:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400d39a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400d39e:	931c      	str	r3, [sp, #112]	@ 0x70
3400d3a0:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400d3a4:	9327      	str	r3, [sp, #156]	@ 0x9c
3400d3a6:	922c      	str	r2, [sp, #176]	@ 0xb0
3400d3a8:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400d3ac:	960b      	str	r6, [sp, #44]	@ 0x2c
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400d3ae:	f7f7 f99d 	bl	340046ec <ll_sw_forward_dequantizelinear>
  /* *** MCU cache clean (only) operation (SW, whole range) *** */
  /*     memory pool: 10 */
  /*     start: (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 0) */
  /*     end:   (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16224) */
  LL_ATON_Cache_MCU_Clean_Range((((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 0) /* Equivalent hex offset = 0x0 */, 16224);
3400d3b2:	6820      	ldr	r0, [r4, #0]
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d3b4:	1941      	adds	r1, r0, r5
3400d3b6:	f7f4 fe5f 	bl	34002078 <mcu_cache_clean_range>

}
3400d3ba:	b02e      	add	sp, #184	@ 0xb8
3400d3bc:	bd70      	pop	{r4, r5, r6, pc}
3400d3be:	bf00      	nop
3400d3c0:	340db398 	.word	0x340db398
3400d3c4:	34200000 	.word	0x34200000
3400d3c8:	704c76e0 	.word	0x704c76e0

3400d3cc <LL_ATON_End_EpochBlock_167>:
{
3400d3cc:	b510      	push	{r4, lr}
3400d3ce:	b0ae      	sub	sp, #184	@ 0xb8
  Dequantizelinear_sw_info dequantizelinear1_sw_info = {
3400d3d0:	22b4      	movs	r2, #180	@ 0xb4
3400d3d2:	2100      	movs	r1, #0
3400d3d4:	a801      	add	r0, sp, #4
3400d3d6:	f011 fb53 	bl	3401ea80 <memset>
3400d3da:	232a      	movs	r3, #42	@ 0x2a
3400d3dc:	f64f 5120 	movw	r1, #64800	@ 0xfd20
3400d3e0:	223c      	movs	r2, #60	@ 0x3c
3400d3e2:	f44f 6487 	mov.w	r4, #1080	@ 0x438
3400d3e6:	2012      	movs	r0, #18
3400d3e8:	f88d 3004 	strb.w	r3, [sp, #4]
3400d3ec:	2301      	movs	r3, #1
3400d3ee:	e9cd 1406 	strd	r1, r4, [sp, #24]
3400d3f2:	e9cd 2202 	strd	r2, r2, [sp, #8]
3400d3f6:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
3400d3fa:	910a      	str	r1, [sp, #40]	@ 0x28
3400d3fc:	9111      	str	r1, [sp, #68]	@ 0x44
3400d3fe:	2248      	movs	r2, #72	@ 0x48
3400d400:	f44f 5187 	mov.w	r1, #4320	@ 0x10e0
3400d404:	e9cd 0304 	strd	r0, r3, [sp, #16]
3400d408:	e9cd 0308 	strd	r0, r3, [sp, #32]
3400d40c:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
3400d410:	2004      	movs	r0, #4
3400d412:	4c11      	ldr	r4, [pc, #68]	@ (3400d458 <LL_ATON_End_EpochBlock_167+0x8c>)
3400d414:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400d418:	940b      	str	r4, [sp, #44]	@ 0x2c
3400d41a:	4a10      	ldr	r2, [pc, #64]	@ (3400d45c <LL_ATON_End_EpochBlock_167+0x90>)
3400d41c:	4c10      	ldr	r4, [pc, #64]	@ (3400d460 <LL_ATON_End_EpochBlock_167+0x94>)
3400d41e:	e9cd 0214 	strd	r0, r2, [sp, #80]	@ 0x50
3400d422:	6822      	ldr	r2, [r4, #0]
  ll_sw_forward_dequantizelinear(&dequantizelinear1_sw_info);
3400d424:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear1_sw_info = {
3400d426:	9216      	str	r2, [sp, #88]	@ 0x58
3400d428:	4a0e      	ldr	r2, [pc, #56]	@ (3400d464 <LL_ATON_End_EpochBlock_167+0x98>)
3400d42a:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400d42e:	9221      	str	r2, [sp, #132]	@ 0x84
3400d430:	3230      	adds	r2, #48	@ 0x30
3400d432:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400d436:	931c      	str	r3, [sp, #112]	@ 0x70
3400d438:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400d43c:	9327      	str	r3, [sp, #156]	@ 0x9c
3400d43e:	922c      	str	r2, [sp, #176]	@ 0xb0
3400d440:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  ll_sw_forward_dequantizelinear(&dequantizelinear1_sw_info);
3400d444:	f7f7 f952 	bl	340046ec <ll_sw_forward_dequantizelinear>
  LL_ATON_Cache_MCU_Clean_Range((((uintptr_t)(_mem_pool__user_io_output_1_Default)) + 0) /* Equivalent hex offset = 0x0 */, 259200);
3400d448:	6820      	ldr	r0, [r4, #0]
3400d44a:	f500 317d 	add.w	r1, r0, #259072	@ 0x3f400
3400d44e:	3180      	adds	r1, #128	@ 0x80
3400d450:	f7f4 fe12 	bl	34002078 <mcu_cache_clean_range>
}
3400d454:	b02e      	add	sp, #184	@ 0xb8
3400d456:	bd10      	pop	{r4, pc}
3400d458:	342f0d20 	.word	0x342f0d20
3400d45c:	0003f480 	.word	0x0003f480
3400d460:	340db394 	.word	0x340db394
3400d464:	704c76c0 	.word	0x704c76c0

3400d468 <LL_ATON_Set_User_Input_Buffer_Default>:
  if (num == 0) {
3400d468:	b940      	cbnz	r0, 3400d47c <LL_ATON_Set_User_Input_Buffer_Default+0x14>
    if (((uintptr_t)buffer % 32) != 0)
3400d46a:	f011 001f 	ands.w	r0, r1, #31
3400d46e:	d107      	bne.n	3400d480 <LL_ATON_Set_User_Input_Buffer_Default+0x18>
    if (size < 691200)
3400d470:	4b05      	ldr	r3, [pc, #20]	@ (3400d488 <LL_ATON_Set_User_Input_Buffer_Default+0x20>)
3400d472:	429a      	cmp	r2, r3
3400d474:	d906      	bls.n	3400d484 <LL_ATON_Set_User_Input_Buffer_Default+0x1c>
    _mem_pool__user_io_input_0_Default = buffer;
3400d476:	4b05      	ldr	r3, [pc, #20]	@ (3400d48c <LL_ATON_Set_User_Input_Buffer_Default+0x24>)
3400d478:	6019      	str	r1, [r3, #0]
    return LL_ATON_User_IO_NOERROR;
3400d47a:	4770      	bx	lr
    return LL_ATON_User_IO_WRONG_INDEX;
3400d47c:	2003      	movs	r0, #3
3400d47e:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_ALIGN; /* enforce MCU cacheline alignment */
3400d480:	2001      	movs	r0, #1
3400d482:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_SIZE; /* enforce size needed */
3400d484:	2002      	movs	r0, #2
}
3400d486:	4770      	bx	lr
3400d488:	000a8bff 	.word	0x000a8bff
3400d48c:	340db39c 	.word	0x340db39c

3400d490 <LL_ATON_Get_User_Input_Buffer_Default>:
  if (num == 0) {
3400d490:	b910      	cbnz	r0, 3400d498 <LL_ATON_Get_User_Input_Buffer_Default+0x8>
    return _mem_pool__user_io_input_0_Default;
3400d492:	4b02      	ldr	r3, [pc, #8]	@ (3400d49c <LL_ATON_Get_User_Input_Buffer_Default+0xc>)
3400d494:	6818      	ldr	r0, [r3, #0]
3400d496:	4770      	bx	lr
    return NULL;
3400d498:	2000      	movs	r0, #0
}
3400d49a:	4770      	bx	lr
3400d49c:	340db39c 	.word	0x340db39c

3400d4a0 <LL_ATON_Set_User_Output_Buffer_Default>:
  if (num == 0) {
3400d4a0:	b948      	cbnz	r0, 3400d4b6 <LL_ATON_Set_User_Output_Buffer_Default+0x16>
    if (((uintptr_t)buffer % 32) != 0)
3400d4a2:	06c8      	lsls	r0, r1, #27
3400d4a4:	d11e      	bne.n	3400d4e4 <LL_ATON_Set_User_Output_Buffer_Default+0x44>
    if (size < 16200)
3400d4a6:	f643 7347 	movw	r3, #16199	@ 0x3f47
3400d4aa:	429a      	cmp	r2, r3
3400d4ac:	d916      	bls.n	3400d4dc <LL_ATON_Set_User_Output_Buffer_Default+0x3c>
    _mem_pool__user_io_output_0_Default = buffer;
3400d4ae:	4b0e      	ldr	r3, [pc, #56]	@ (3400d4e8 <LL_ATON_Set_User_Output_Buffer_Default+0x48>)
    return LL_ATON_User_IO_NOERROR;
3400d4b0:	2000      	movs	r0, #0
    _mem_pool__user_io_output_2_Default = buffer;
3400d4b2:	6019      	str	r1, [r3, #0]
    return LL_ATON_User_IO_NOERROR;
3400d4b4:	4770      	bx	lr
  if (num == 1) {
3400d4b6:	2801      	cmp	r0, #1
3400d4b8:	d106      	bne.n	3400d4c8 <LL_ATON_Set_User_Output_Buffer_Default+0x28>
    if (((uintptr_t)buffer % 32) != 0)
3400d4ba:	06cb      	lsls	r3, r1, #27
3400d4bc:	d113      	bne.n	3400d4e6 <LL_ATON_Set_User_Output_Buffer_Default+0x46>
    if (size < 259200)
3400d4be:	4b0b      	ldr	r3, [pc, #44]	@ (3400d4ec <LL_ATON_Set_User_Output_Buffer_Default+0x4c>)
3400d4c0:	429a      	cmp	r2, r3
3400d4c2:	d90b      	bls.n	3400d4dc <LL_ATON_Set_User_Output_Buffer_Default+0x3c>
    _mem_pool__user_io_output_1_Default = buffer;
3400d4c4:	4b0a      	ldr	r3, [pc, #40]	@ (3400d4f0 <LL_ATON_Set_User_Output_Buffer_Default+0x50>)
3400d4c6:	e7f3      	b.n	3400d4b0 <LL_ATON_Set_User_Output_Buffer_Default+0x10>
  if (num == 2) {
3400d4c8:	2802      	cmp	r0, #2
3400d4ca:	d109      	bne.n	3400d4e0 <LL_ATON_Set_User_Output_Buffer_Default+0x40>
    if (((uintptr_t)buffer % 32) != 0)
3400d4cc:	06cb      	lsls	r3, r1, #27
3400d4ce:	d109      	bne.n	3400d4e4 <LL_ATON_Set_User_Output_Buffer_Default+0x44>
    if (size < 64800)
3400d4d0:	f64f 531f 	movw	r3, #64799	@ 0xfd1f
3400d4d4:	429a      	cmp	r2, r3
3400d4d6:	d906      	bls.n	3400d4e6 <LL_ATON_Set_User_Output_Buffer_Default+0x46>
    _mem_pool__user_io_output_2_Default = buffer;
3400d4d8:	4b06      	ldr	r3, [pc, #24]	@ (3400d4f4 <LL_ATON_Set_User_Output_Buffer_Default+0x54>)
3400d4da:	e7e9      	b.n	3400d4b0 <LL_ATON_Set_User_Output_Buffer_Default+0x10>
      return LL_ATON_User_IO_WRONG_SIZE; /* enforce size needed */
3400d4dc:	2002      	movs	r0, #2
3400d4de:	4770      	bx	lr
    return LL_ATON_User_IO_WRONG_INDEX;
3400d4e0:	2003      	movs	r0, #3
3400d4e2:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_ALIGN; /* enforce MCU cacheline alignment */
3400d4e4:	2001      	movs	r0, #1
}
3400d4e6:	4770      	bx	lr
3400d4e8:	340db398 	.word	0x340db398
3400d4ec:	0003f47f 	.word	0x0003f47f
3400d4f0:	340db394 	.word	0x340db394
3400d4f4:	340db390 	.word	0x340db390

3400d4f8 <LL_ATON_Get_User_Output_Buffer_Default>:
  if (num == 0) {
3400d4f8:	b910      	cbnz	r0, 3400d500 <LL_ATON_Get_User_Output_Buffer_Default+0x8>
    return _mem_pool__user_io_output_0_Default;
3400d4fa:	4b06      	ldr	r3, [pc, #24]	@ (3400d514 <LL_ATON_Get_User_Output_Buffer_Default+0x1c>)
    return _mem_pool__user_io_output_1_Default;
3400d4fc:	6818      	ldr	r0, [r3, #0]
3400d4fe:	4770      	bx	lr
  if (num == 1) {
3400d500:	2801      	cmp	r0, #1
3400d502:	d101      	bne.n	3400d508 <LL_ATON_Get_User_Output_Buffer_Default+0x10>
    return _mem_pool__user_io_output_1_Default;
3400d504:	4b04      	ldr	r3, [pc, #16]	@ (3400d518 <LL_ATON_Get_User_Output_Buffer_Default+0x20>)
3400d506:	e7f9      	b.n	3400d4fc <LL_ATON_Get_User_Output_Buffer_Default+0x4>
  if (num == 2) {
3400d508:	2802      	cmp	r0, #2
3400d50a:	d101      	bne.n	3400d510 <LL_ATON_Get_User_Output_Buffer_Default+0x18>
    return _mem_pool__user_io_output_2_Default;
3400d50c:	4b03      	ldr	r3, [pc, #12]	@ (3400d51c <LL_ATON_Get_User_Output_Buffer_Default+0x24>)
3400d50e:	e7f5      	b.n	3400d4fc <LL_ATON_Get_User_Output_Buffer_Default+0x4>
    return NULL;
3400d510:	2000      	movs	r0, #0
}
3400d512:	4770      	bx	lr
3400d514:	340db398 	.word	0x340db398
3400d518:	340db394 	.word	0x340db394
3400d51c:	340db390 	.word	0x340db390

3400d520 <LL_ATON_EC_Network_Init_Default>:


// this function MUST be called ONLY ONCE once for initializing the network
bool LL_ATON_EC_Network_Init_Default(void)
{
  memset(_ec_blob_1_prev_base_addrs, 0, 1 * sizeof(ECAddr));
3400d520:	2200      	movs	r2, #0
3400d522:	4b10      	ldr	r3, [pc, #64]	@ (3400d564 <LL_ATON_EC_Network_Init_Default+0x44>)
{
3400d524:	b513      	push	{r0, r1, r4, lr}
  memset(_ec_blob_1_prev_base_addrs, 0, 1 * sizeof(ECAddr));
3400d526:	601a      	str	r2, [r3, #0]
#else
  static inline void LL_ATON_Cache_NPU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    /* NOTE: The ATON NPU cache does not provide a pure invalidate-range function, but only a clean-invalidate range
       function! One has to take this into account when using `stai_ext_cache_npu_clean_invalidate_range`. */
    LL_ATON_OSAL_LOCK_NPU_CACHE();
3400d528:	f7f6 fbfa 	bl	34003d20 <aton_osal_freertos_lock>
    npu_cache_clean_invalidate_range(ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr),
3400d52c:	490e      	ldr	r1, [pc, #56]	@ (3400d568 <LL_ATON_EC_Network_Init_Default+0x48>)
3400d52e:	480f      	ldr	r0, [pc, #60]	@ (3400d56c <LL_ATON_EC_Network_Init_Default+0x4c>)
3400d530:	f7f4 fe0a 	bl	34002148 <npu_cache_clean_invalidate_range>
                                     ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr + size));
    LL_ATON_OSAL_UNLOCK_NPU_CACHE();
3400d534:	f7f6 fc0c 	bl	34003d50 <aton_osal_freertos_unlock>

  LL_ATON_Cache_NPU_Clean_Invalidate_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  unsigned int size;
  size = 55608;
3400d538:	f64d 1338 	movw	r3, #55608	@ 0xd938

  if (!ec_copy_program((const uint8_t *)_ec_blob_1_reloc, (ECInstr *)_ec_blob_1, &size))
3400d53c:	490b      	ldr	r1, [pc, #44]	@ (3400d56c <LL_ATON_EC_Network_Init_Default+0x4c>)
3400d53e:	480c      	ldr	r0, [pc, #48]	@ (3400d570 <LL_ATON_EC_Network_Init_Default+0x50>)
3400d540:	aa01      	add	r2, sp, #4
  size = 55608;
3400d542:	9301      	str	r3, [sp, #4]
  if (!ec_copy_program((const uint8_t *)_ec_blob_1_reloc, (ECInstr *)_ec_blob_1, &size))
3400d544:	f7f4 fe08 	bl	34002158 <ec_copy_program>
3400d548:	4604      	mov	r4, r0
3400d54a:	b140      	cbz	r0, 3400d55e <LL_ATON_EC_Network_Init_Default+0x3e>
  {
    // TODO maybe generate/print error because it was not possible to copy the blob
    return false;
  }

  _ec_blob_1_reloc_table_ptr = ec_get_reloc_table_ptr((const uint8_t *)_ec_blob_1_reloc);
3400d54c:	4808      	ldr	r0, [pc, #32]	@ (3400d570 <LL_ATON_EC_Network_Init_Default+0x50>)
3400d54e:	f7f4 fe4d 	bl	340021ec <ec_get_reloc_table_ptr>
3400d552:	4b08      	ldr	r3, [pc, #32]	@ (3400d574 <LL_ATON_EC_Network_Init_Default+0x54>)
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d554:	4904      	ldr	r1, [pc, #16]	@ (3400d568 <LL_ATON_EC_Network_Init_Default+0x48>)
3400d556:	6018      	str	r0, [r3, #0]
3400d558:	4804      	ldr	r0, [pc, #16]	@ (3400d56c <LL_ATON_EC_Network_Init_Default+0x4c>)
3400d55a:	f7f4 fd8d 	bl	34002078 <mcu_cache_clean_range>

  LL_ATON_Cache_MCU_Clean_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  return true;
}
3400d55e:	4620      	mov	r0, r4
3400d560:	b002      	add	sp, #8
3400d562:	bd10      	pop	{r4, pc}
3400d564:	340a4ea4 	.word	0x340a4ea4
3400d568:	340db390 	.word	0x340db390
3400d56c:	340a4eb0 	.word	0x340a4eb0
3400d570:	34069280 	.word	0x34069280
3400d574:	340a4ea8 	.word	0x340a4ea8

3400d578 <LL_ATON_EC_Inference_Init_Default>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_Default(void)
{
3400d578:	b513      	push	{r0, r1, r4, lr}
    LL_ATON_OSAL_LOCK_NPU_CACHE();
3400d57a:	f7f6 fbd1 	bl	34003d20 <aton_osal_freertos_lock>
    npu_cache_clean_invalidate_range(ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr),
3400d57e:	490c      	ldr	r1, [pc, #48]	@ (3400d5b0 <LL_ATON_EC_Inference_Init_Default+0x38>)
3400d580:	480c      	ldr	r0, [pc, #48]	@ (3400d5b4 <LL_ATON_EC_Inference_Init_Default+0x3c>)
3400d582:	f7f4 fde1 	bl	34002148 <npu_cache_clean_invalidate_range>
    LL_ATON_OSAL_UNLOCK_NPU_CACHE();
3400d586:	f7f6 fbe3 	bl	34003d50 <aton_osal_freertos_unlock>
  LL_ATON_Cache_NPU_Clean_Invalidate_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  if (!ec_reloc(_ec_blob_1_reloc_table_ptr, (ECInstr *)_ec_blob_1, _ec_blob_1__user_io_input_0_RELOC_IDX, (ECAddr)(uintptr_t)_ec_blob_1__user_io_input_0_BASE_SYMBOL, _ec_blob_1_prev_base_addrs + _ec_blob_1__user_io_input_0_RELOC_IDX))
3400d58a:	4b0b      	ldr	r3, [pc, #44]	@ (3400d5b8 <LL_ATON_EC_Inference_Init_Default+0x40>)
3400d58c:	480b      	ldr	r0, [pc, #44]	@ (3400d5bc <LL_ATON_EC_Inference_Init_Default+0x44>)
3400d58e:	9300      	str	r3, [sp, #0]
3400d590:	4b0b      	ldr	r3, [pc, #44]	@ (3400d5c0 <LL_ATON_EC_Inference_Init_Default+0x48>)
3400d592:	2200      	movs	r2, #0
3400d594:	681b      	ldr	r3, [r3, #0]
3400d596:	4907      	ldr	r1, [pc, #28]	@ (3400d5b4 <LL_ATON_EC_Inference_Init_Default+0x3c>)
3400d598:	6800      	ldr	r0, [r0, #0]
3400d59a:	f7f4 fe3b 	bl	34002214 <ec_reloc>
3400d59e:	4604      	mov	r4, r0
3400d5a0:	b118      	cbz	r0, 3400d5aa <LL_ATON_EC_Inference_Init_Default+0x32>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400d5a2:	4903      	ldr	r1, [pc, #12]	@ (3400d5b0 <LL_ATON_EC_Inference_Init_Default+0x38>)
3400d5a4:	4803      	ldr	r0, [pc, #12]	@ (3400d5b4 <LL_ATON_EC_Inference_Init_Default+0x3c>)
3400d5a6:	f7f4 fd67 	bl	34002078 <mcu_cache_clean_range>
  }

  LL_ATON_Cache_MCU_Clean_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  return true;
}
3400d5aa:	4620      	mov	r0, r4
3400d5ac:	b002      	add	sp, #8
3400d5ae:	bd10      	pop	{r4, pc}
3400d5b0:	340db390 	.word	0x340db390
3400d5b4:	340a4eb0 	.word	0x340a4eb0
3400d5b8:	340a4ea4 	.word	0x340a4ea4
3400d5bc:	340a4ea8 	.word	0x340a4ea8
3400d5c0:	340db39c 	.word	0x340db39c

3400d5c4 <LL_ATON_EpochBlockItems_Default>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
3400d5c4:	4800      	ldr	r0, [pc, #0]	@ (3400d5c8 <LL_ATON_EpochBlockItems_Default+0x4>)
3400d5c6:	4770      	bx	lr
3400d5c8:	34034cc4 	.word	0x34034cc4

3400d5cc <LL_ATON_Input_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400d5cc:	4800      	ldr	r0, [pc, #0]	@ (3400d5d0 <LL_ATON_Input_Buffers_Info_Default+0x4>)
3400d5ce:	4770      	bx	lr
3400d5d0:	34034484 	.word	0x34034484

3400d5d4 <LL_ATON_Output_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400d5d4:	4800      	ldr	r0, [pc, #0]	@ (3400d5d8 <LL_ATON_Output_Buffers_Info_Default+0x4>)
3400d5d6:	4770      	bx	lr
3400d5d8:	3403437c 	.word	0x3403437c

3400d5dc <LL_ATON_Internal_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400d5dc:	4800      	ldr	r0, [pc, #0]	@ (3400d5e0 <LL_ATON_Internal_Buffers_Info_Default+0x4>)
3400d5de:	4770      	bx	lr
3400d5e0:	3403009c 	.word	0x3403009c

3400d5e4 <APS256XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS256XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
3400d5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400d5e8:	b098      	sub	sp, #96	@ 0x60
3400d5ea:	4605      	mov	r5, r0
3400d5ec:	4617      	mov	r7, r2
3400d5ee:	460e      	mov	r6, r1
  XSPI_RegularCmdTypeDef   sCommand = {0};
3400d5f0:	223c      	movs	r2, #60	@ 0x3c
3400d5f2:	2100      	movs	r1, #0
3400d5f4:	a806      	add	r0, sp, #24
{
3400d5f6:	4698      	mov	r8, r3
3400d5f8:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
  XSPI_RegularCmdTypeDef   sCommand = {0};
3400d5fa:	f011 fa41 	bl	3401ea80 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3400d5fe:	2210      	movs	r2, #16
3400d600:	2100      	movs	r1, #0
3400d602:	a801      	add	r0, sp, #4
3400d604:	f011 fa3c 	bl	3401ea80 <memset>

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
3400d608:	2302      	movs	r3, #2
3400d60a:	9305      	str	r3, [sp, #20]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
3400d60c:	2304      	movs	r3, #4
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400d60e:	2c00      	cmp	r4, #0
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
3400d610:	9308      	str	r3, [sp, #32]
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400d612:	bf14      	ite	ne
3400d614:	2380      	movne	r3, #128	@ 0x80
3400d616:	23a0      	moveq	r3, #160	@ 0xa0
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400d61c:	9307      	str	r3, [sp, #28]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d61e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400d622:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400d626:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
3400d62a:	f1b8 0f00 	cmp.w	r8, #0
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400d62e:	930e      	str	r3, [sp, #56]	@ 0x38
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
3400d630:	bf14      	ite	ne
3400d632:	f04f 63a0 	movne.w	r3, #83886080	@ 0x5000000
3400d636:	f04f 6380 	moveq.w	r3, #67108864	@ 0x4000000
3400d63a:	9313      	str	r3, [sp, #76]	@ 0x4c
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
3400d63c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3400d640:	9315      	str	r3, [sp, #84]	@ 0x54
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
3400d642:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400d646:	3f01      	subs	r7, #1
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d648:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d64c:	4628      	mov	r0, r5
3400d64e:	a905      	add	r1, sp, #20
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400d650:	9716      	str	r7, [sp, #88]	@ 0x58
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
3400d652:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d654:	f00d ffc4 	bl	3401b5e0 <HAL_XSPI_Command>
3400d658:	b120      	cbz	r0, 3400d664 <APS256XX_EnableMemoryMappedMode+0x80>
  {
    return APS256XX_ERROR;
3400d65a:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
3400d65e:	b018      	add	sp, #96	@ 0x60
3400d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d664:	2301      	movs	r3, #1
3400d666:	9305      	str	r3, [sp, #20]
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
3400d668:	fab4 f384 	clz	r3, r4
3400d66c:	095b      	lsrs	r3, r3, #5
3400d66e:	015b      	lsls	r3, r3, #5
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
3400d670:	3e01      	subs	r6, #1
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d672:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d676:	4628      	mov	r0, r5
3400d678:	a905      	add	r1, sp, #20
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
3400d67a:	9307      	str	r3, [sp, #28]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
3400d67c:	9616      	str	r6, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d67e:	f00d ffaf 	bl	3401b5e0 <HAL_XSPI_Command>
3400d682:	2800      	cmp	r0, #0
3400d684:	d1e9      	bne.n	3400d65a <APS256XX_EnableMemoryMappedMode+0x76>
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400d686:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
3400d688:	a901      	add	r1, sp, #4
3400d68a:	4628      	mov	r0, r5
3400d68c:	f00e f9d6 	bl	3401ba3c <HAL_XSPI_MemoryMapped>
3400d690:	3800      	subs	r0, #0
3400d692:	bf18      	it	ne
3400d694:	2001      	movne	r0, #1
3400d696:	4240      	negs	r0, r0
3400d698:	e7e1      	b.n	3400d65e <APS256XX_EnableMemoryMappedMode+0x7a>

3400d69a <APS256XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS256XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
3400d69a:	b530      	push	{r4, r5, lr}
3400d69c:	b097      	sub	sp, #92	@ 0x5c
3400d69e:	460d      	mov	r5, r1
3400d6a0:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef sCommand = {0};
3400d6a2:	2100      	movs	r1, #0
{
3400d6a4:	f88d 2007 	strb.w	r2, [sp, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
3400d6a8:	a803      	add	r0, sp, #12
3400d6aa:	224c      	movs	r2, #76	@ 0x4c
3400d6ac:	f011 f9e8 	bl	3401ea80 <memset>
  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
3400d6b0:	23c0      	movs	r3, #192	@ 0xc0
3400d6b2:	2204      	movs	r2, #4
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d6b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
3400d6b8:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400d6bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400d6c0:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400d6c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400d6c8:	930c      	str	r3, [sp, #48]	@ 0x30
  sCommand.Address             = Address;
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
3400d6ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  sCommand.Address             = Address;
3400d6ce:	9509      	str	r5, [sp, #36]	@ 0x24
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
3400d6d0:	9311      	str	r3, [sp, #68]	@ 0x44
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
  sCommand.DataLength          = 2;
3400d6d2:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
3400d6d6:	2302      	movs	r3, #2
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d6d8:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d6dc:	4620      	mov	r0, r4
3400d6de:	a903      	add	r1, sp, #12
  sCommand.DataLength          = 2;
3400d6e0:	e9cd 3512 	strd	r3, r5, [sp, #72]	@ 0x48
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d6e4:	f00d ff7c 	bl	3401b5e0 <HAL_XSPI_Command>
3400d6e8:	b960      	cbnz	r0, 3400d704 <APS256XX_WriteReg+0x6a>
  {
    return APS256XX_ERROR;
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d6ea:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d6ee:	4620      	mov	r0, r4
3400d6f0:	f10d 0107 	add.w	r1, sp, #7
3400d6f4:	f00e f88c 	bl	3401b810 <HAL_XSPI_Transmit>
3400d6f8:	3800      	subs	r0, #0
3400d6fa:	bf18      	it	ne
3400d6fc:	2001      	movne	r0, #1
3400d6fe:	4240      	negs	r0, r0
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
3400d700:	b017      	add	sp, #92	@ 0x5c
3400d702:	bd30      	pop	{r4, r5, pc}
    return APS256XX_ERROR;
3400d704:	f04f 30ff 	mov.w	r0, #4294967295
3400d708:	e7fa      	b.n	3400d700 <APS256XX_WriteReg+0x66>

3400d70a <MX66UW1G45G_GetFlashInfo>:
  */
int32_t MX66UW1G45G_GetFlashInfo(MX66UW1G45G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize = MX66UW1G45G_FLASH_SIZE;
  pInfo->EraseSectorSize = MX66UW1G45G_BLOCK_64K;
3400d70a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
3400d70e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400d712:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_64K);
  pInfo->EraseSubSectorSize = MX66UW1G45G_BLOCK_4K;
3400d716:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400d71a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400d71e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
3400d722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
  pInfo->ProgPageSize = MX66UW1G45G_PAGE_SIZE;
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400d726:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
3400d72a:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
3400d72e:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400d730:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3400d734:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX66UW1G45G_OK;
};
3400d738:	2000      	movs	r0, #0
3400d73a:	4770      	bx	lr

3400d73c <MX66UW1G45G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX66UW1G45G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                        MX66UW1G45G_Transfer_t Rate)
{
3400d73c:	b570      	push	{r4, r5, r6, lr}
3400d73e:	460d      	mov	r5, r1
3400d740:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
3400d742:	2100      	movs	r1, #0
{
3400d744:	4606      	mov	r6, r0
3400d746:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d748:	a805      	add	r0, sp, #20
3400d74a:	224c      	movs	r2, #76	@ 0x4c
3400d74c:	f011 f998 	bl	3401ea80 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400d750:	2214      	movs	r2, #20
3400d752:	2100      	movs	r1, #0
3400d754:	4668      	mov	r0, sp
3400d756:	f011 f993 	bl	3401ea80 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d75a:	b92d      	cbnz	r5, 3400d768 <MX66UW1G45G_AutoPollingMemReady+0x2c>
3400d75c:	2c01      	cmp	r4, #1
3400d75e:	d14d      	bne.n	3400d7fc <MX66UW1G45G_AutoPollingMemReady+0xc0>
  {
    return MX66UW1G45G_ERROR;
3400d760:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d764:	b018      	add	sp, #96	@ 0x60
3400d766:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d768:	2204      	movs	r2, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d76a:	f104 3cff 	add.w	ip, r4, #4294967295
3400d76e:	f1dc 0300 	rsbs	r3, ip, #0
3400d772:	eb43 030c 	adc.w	r3, r3, ip
3400d776:	00db      	lsls	r3, r3, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d778:	9208      	str	r2, [sp, #32]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d77a:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d77c:	2d00      	cmp	r5, #0
3400d77e:	d040      	beq.n	3400d802 <MX66UW1G45G_AutoPollingMemReady+0xc6>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d780:	2310      	movs	r3, #16
3400d782:	f240 52fa 	movw	r2, #1530	@ 0x5fa
3400d786:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d788:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d78c:	1e60      	subs	r0, r4, #1
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d78e:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d790:	4243      	negs	r3, r0
3400d792:	4143      	adcs	r3, r0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d794:	9207      	str	r2, [sp, #28]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d796:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d798:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d79a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d79e:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d7a0:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d7a2:	bf14      	ite	ne
3400d7a4:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
3400d7a8:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400d7ac:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d7b0:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d7b2:	9315      	str	r3, [sp, #84]	@ 0x54
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400d7b4:	d02d      	beq.n	3400d812 <MX66UW1G45G_AutoPollingMemReady+0xd6>
3400d7b6:	2c01      	cmp	r4, #1
3400d7b8:	d126      	bne.n	3400d808 <MX66UW1G45G_AutoPollingMemReady+0xcc>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d7ba:	2305      	movs	r3, #5
3400d7bc:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d7be:	2202      	movs	r2, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d7c0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400d7c4:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400d7c6:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d7c8:	2110      	movs	r1, #16
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400d7ca:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400d7cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400d7d0:	9214      	str	r2, [sp, #80]	@ 0x50
3400d7d2:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d7d6:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d7da:	4630      	mov	r0, r6
3400d7dc:	a905      	add	r1, sp, #20
3400d7de:	f00d feff 	bl	3401b5e0 <HAL_XSPI_Command>
3400d7e2:	2800      	cmp	r0, #0
3400d7e4:	d1bc      	bne.n	3400d760 <MX66UW1G45G_AutoPollingMemReady+0x24>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d7e6:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d7ea:	4669      	mov	r1, sp
3400d7ec:	4630      	mov	r0, r6
3400d7ee:	f00e f8a9 	bl	3401b944 <HAL_XSPI_AutoPolling>
3400d7f2:	3800      	subs	r0, #0
3400d7f4:	bf18      	it	ne
3400d7f6:	2001      	movne	r0, #1
3400d7f8:	4240      	negs	r0, r0
3400d7fa:	e7b3      	b.n	3400d764 <MX66UW1G45G_AutoPollingMemReady+0x28>
3400d7fc:	2201      	movs	r2, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d7fe:	462b      	mov	r3, r5
3400d800:	e7ba      	b.n	3400d778 <MX66UW1G45G_AutoPollingMemReady+0x3c>
3400d802:	2205      	movs	r2, #5
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400d804:	462b      	mov	r3, r5
3400d806:	e7c1      	b.n	3400d78c <MX66UW1G45G_AutoPollingMemReady+0x50>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400d808:	2304      	movs	r3, #4
3400d80a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d80c:	2201      	movs	r2, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400d80e:	2300      	movs	r3, #0
3400d810:	e7d8      	b.n	3400d7c4 <MX66UW1G45G_AutoPollingMemReady+0x88>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400d812:	2c01      	cmp	r4, #1
3400d814:	d1fa      	bne.n	3400d80c <MX66UW1G45G_AutoPollingMemReady+0xd0>
3400d816:	e7d2      	b.n	3400d7be <MX66UW1G45G_AutoPollingMemReady+0x82>

3400d818 <MX66UW1G45G_EnableSTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                              MX66UW1G45G_AddressWidth_t AddressWidth)
{
3400d818:	b570      	push	{r4, r5, r6, lr}
3400d81a:	460c      	mov	r4, r1
3400d81c:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
3400d81e:	2100      	movs	r1, #0
{
3400d820:	4606      	mov	r6, r0
3400d822:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d824:	a805      	add	r0, sp, #20
3400d826:	224c      	movs	r2, #76	@ 0x4c
3400d828:	f011 f92a 	bl	3401ea80 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400d82c:	2210      	movs	r2, #16
3400d82e:	2100      	movs	r1, #0
3400d830:	a801      	add	r0, sp, #4
3400d832:	f011 f925 	bl	3401ea80 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX66UW1G45G_OPI_MODE) && (AddressWidth == MX66UW1G45G_3BYTES_SIZE))
3400d836:	2c01      	cmp	r4, #1
3400d838:	d144      	bne.n	3400d8c4 <MX66UW1G45G_EnableSTRMemoryMappedMode+0xac>
3400d83a:	b91d      	cbnz	r5, 3400d844 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX66UW1G45G_ERROR;
3400d83c:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d840:	b018      	add	sp, #96	@ 0x60
3400d842:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d844:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d846:	2204      	movs	r2, #4
3400d848:	2310      	movs	r3, #16
3400d84a:	e9cd 2308 	strd	r2, r3, [sp, #32]
3400d84e:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d852:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                               : HAL_XSPI_ADDRESS_32_BITS;
3400d856:	2d00      	cmp	r5, #0
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d858:	930c      	str	r3, [sp, #48]	@ 0x30
                               : HAL_XSPI_ADDRESS_32_BITS;
3400d85a:	bf14      	ite	ne
3400d85c:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
3400d860:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d864:	2c00      	cmp	r4, #0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d866:	9207      	str	r2, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d868:	bf0c      	ite	eq
3400d86a:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
3400d86e:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth = (AddressWidth == MX66UW1G45G_3BYTES_SIZE)
3400d872:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d874:	bf0c      	ite	eq
3400d876:	2308      	moveq	r3, #8
3400d878:	230a      	movne	r3, #10
3400d87a:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d87c:	4630      	mov	r0, r6
3400d87e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d882:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
3400d884:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d886:	f00d feab 	bl	3401b5e0 <HAL_XSPI_Command>
3400d88a:	2800      	cmp	r0, #0
3400d88c:	d1d6      	bne.n	3400d83c <MX66UW1G45G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
3400d88e:	2302      	movs	r3, #2
3400d890:	9305      	str	r3, [sp, #20]
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d892:	bb1c      	cbnz	r4, 3400d8dc <MX66UW1G45G_EnableSTRMemoryMappedMode+0xc4>
3400d894:	2d00      	cmp	r5, #0
3400d896:	bf18      	it	ne
3400d898:	2312      	movne	r3, #18
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d89a:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles = 0U;
3400d89c:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d89e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d8a2:	4630      	mov	r0, r6
3400d8a4:	a905      	add	r1, sp, #20
  s_command.DummyCycles = 0U;
3400d8a6:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d8a8:	f00d fe9a 	bl	3401b5e0 <HAL_XSPI_Command>
3400d8ac:	2800      	cmp	r0, #0
3400d8ae:	d1c5      	bne.n	3400d83c <MX66UW1G45G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400d8b0:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400d8b2:	a901      	add	r1, sp, #4
3400d8b4:	4630      	mov	r0, r6
3400d8b6:	f00e f8c1 	bl	3401ba3c <HAL_XSPI_MemoryMapped>
3400d8ba:	3800      	subs	r0, #0
3400d8bc:	bf18      	it	ne
3400d8be:	2001      	movne	r0, #1
3400d8c0:	4240      	negs	r0, r0
3400d8c2:	e7bd      	b.n	3400d840 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d8c4:	2301      	movs	r3, #1
3400d8c6:	9305      	str	r3, [sp, #20]
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400d8c8:	2c00      	cmp	r4, #0
3400d8ca:	d1bc      	bne.n	3400d846 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2e>
                              : MX66UW1G45G_OCTA_READ_CMD;
3400d8cc:	2d00      	cmp	r5, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d8ce:	9308      	str	r3, [sp, #32]
                              : MX66UW1G45G_OCTA_READ_CMD;
3400d8d0:	bf14      	ite	ne
3400d8d2:	220c      	movne	r2, #12
3400d8d4:	220b      	moveq	r2, #11
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400d8d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400d8da:	e7bc      	b.n	3400d856 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x3e>
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d8dc:	f241 23ed 	movw	r3, #4845	@ 0x12ed
3400d8e0:	e7db      	b.n	3400d89a <MX66UW1G45G_EnableSTRMemoryMappedMode+0x82>

3400d8e2 <MX66UW1G45G_EnableDTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode)
{
3400d8e2:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400d8e4:	2510      	movs	r5, #16
{
3400d8e6:	b099      	sub	sp, #100	@ 0x64
3400d8e8:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef s_command = {0};
3400d8ea:	223c      	movs	r2, #60	@ 0x3c
3400d8ec:	2100      	movs	r1, #0
3400d8ee:	a806      	add	r0, sp, #24
3400d8f0:	f011 f8c6 	bl	3401ea80 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400d8f4:	462a      	mov	r2, r5
3400d8f6:	2100      	movs	r1, #0
3400d8f8:	a801      	add	r0, sp, #4
3400d8fa:	f011 f8c1 	bl	3401ea80 <memset>

  /* Initialize the read command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400d8fe:	2301      	movs	r3, #1
3400d900:	9305      	str	r3, [sp, #20]
  s_command.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3400d902:	2304      	movs	r3, #4
3400d904:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3400d906:	2308      	movs	r3, #8
  s_command.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3400d908:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction = MX66UW1G45G_OCTA_READ_DTR_CMD;
3400d90c:	f64e 6311 	movw	r3, #60945	@ 0xee11
3400d910:	9307      	str	r3, [sp, #28]
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400d912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d916:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400d91a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400d91c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400d920:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400d924:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400d928:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400d92c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400d92e:	230a      	movs	r3, #10
3400d930:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3400d934:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d938:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d93c:	4620      	mov	r0, r4
3400d93e:	a905      	add	r1, sp, #20
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3400d940:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d942:	f00d fe4d 	bl	3401b5e0 <HAL_XSPI_Command>
3400d946:	b118      	cbz	r0, 3400d950 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX66UW1G45G_ERROR;
3400d948:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d94c:	b019      	add	sp, #100	@ 0x64
3400d94e:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
3400d950:	2302      	movs	r3, #2
3400d952:	9305      	str	r3, [sp, #20]
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d954:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3400d958:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d95c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d960:	4620      	mov	r0, r4
3400d962:	a905      	add	r1, sp, #20
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400d964:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d966:	f00d fe3b 	bl	3401b5e0 <HAL_XSPI_Command>
3400d96a:	2800      	cmp	r0, #0
3400d96c:	d1ec      	bne.n	3400d948 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400d96e:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400d970:	a901      	add	r1, sp, #4
3400d972:	4620      	mov	r0, r4
3400d974:	f00e f862 	bl	3401ba3c <HAL_XSPI_MemoryMapped>
3400d978:	3800      	subs	r0, #0
3400d97a:	bf18      	it	ne
3400d97c:	2001      	movne	r0, #1
3400d97e:	4240      	negs	r0, r0
3400d980:	e7e4      	b.n	3400d94c <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6a>

3400d982 <MX66UW1G45G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400d982:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d984:	460c      	mov	r4, r1
3400d986:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef s_command = {0};
3400d988:	2100      	movs	r1, #0
{
3400d98a:	4606      	mov	r6, r0
3400d98c:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400d98e:	a805      	add	r0, sp, #20
3400d990:	224c      	movs	r2, #76	@ 0x4c
3400d992:	f011 f875 	bl	3401ea80 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400d996:	2214      	movs	r2, #20
3400d998:	2100      	movs	r1, #0
3400d99a:	4668      	mov	r0, sp
3400d99c:	f011 f870 	bl	3401ea80 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400d9a0:	b92c      	cbnz	r4, 3400d9ae <MX66UW1G45G_WriteEnable+0x2c>
3400d9a2:	2d01      	cmp	r5, #1
3400d9a4:	d15d      	bne.n	3400da62 <MX66UW1G45G_WriteEnable+0xe0>
  {
    return MX66UW1G45G_ERROR;
3400d9a6:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400d9aa:	b019      	add	sp, #100	@ 0x64
3400d9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d9ae:	2204      	movs	r2, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400d9b0:	1e69      	subs	r1, r5, #1
3400d9b2:	424b      	negs	r3, r1
3400d9b4:	414b      	adcs	r3, r1
3400d9b6:	00db      	lsls	r3, r3, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400d9b8:	9208      	str	r2, [sp, #32]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400d9ba:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400d9bc:	2c00      	cmp	r4, #0
3400d9be:	d053      	beq.n	3400da68 <MX66UW1G45G_WriteEnable+0xe6>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400d9c0:	2310      	movs	r3, #16
3400d9c2:	9309      	str	r3, [sp, #36]	@ 0x24
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
3400d9c4:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d9c8:	f241 3288 	movw	r2, #5000	@ 0x1388
3400d9cc:	4630      	mov	r0, r6
3400d9ce:	a905      	add	r1, sp, #20
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d9d0:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400d9d2:	f00d fe05 	bl	3401b5e0 <HAL_XSPI_Command>
3400d9d6:	4603      	mov	r3, r0
3400d9d8:	2800      	cmp	r0, #0
3400d9da:	d1e4      	bne.n	3400d9a6 <MX66UW1G45G_WriteEnable+0x24>
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d9dc:	2c00      	cmp	r4, #0
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d9de:	f105 32ff 	add.w	r2, r5, #4294967295
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400d9e2:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
3400d9e6:	bf12      	itee	ne
3400d9e8:	f44f 6e80 	movne.w	lr, #1024	@ 0x400
3400d9ec:	f04f 0c05 	moveq.w	ip, #5
3400d9f0:	f04f 0e00 	moveq.w	lr, #0
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400d9f4:	4257      	negs	r7, r2
3400d9f6:	4157      	adcs	r7, r2
3400d9f8:	02ff      	lsls	r7, r7, #11
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400d9fa:	2c00      	cmp	r4, #0
3400d9fc:	d036      	beq.n	3400da6c <MX66UW1G45G_WriteEnable+0xea>
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400d9fe:	2d01      	cmp	r5, #1
3400da00:	d03a      	beq.n	3400da78 <MX66UW1G45G_WriteEnable+0xf6>
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400da02:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400da06:	2404      	movs	r4, #4
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400da08:	2101      	movs	r1, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400da0a:	461a      	mov	r2, r3
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400da0c:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
3400da10:	950d      	str	r5, [sp, #52]	@ 0x34
  s_command.Address = 0U;
3400da12:	2500      	movs	r5, #0
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400da14:	9013      	str	r0, [sp, #76]	@ 0x4c
3400da16:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400da18:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400da1a:	4630      	mov	r0, r6
3400da1c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400da20:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400da22:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
3400da26:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400da2a:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400da2e:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address = 0U;
3400da30:	950b      	str	r5, [sp, #44]	@ 0x2c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400da32:	f00d fdd5 	bl	3401b5e0 <HAL_XSPI_Command>
3400da36:	2800      	cmp	r0, #0
3400da38:	d1b5      	bne.n	3400d9a6 <MX66UW1G45G_WriteEnable+0x24>
  s_config.MatchValue = 2U;
3400da3a:	2302      	movs	r3, #2
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400da3c:	2210      	movs	r2, #16
  s_config.MatchMask = 2U;
3400da3e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400da42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode = HAL_XSPI_MATCH_MODE_AND;
3400da46:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400da48:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400da4c:	4669      	mov	r1, sp
3400da4e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400da52:	4630      	mov	r0, r6
3400da54:	f00d ff76 	bl	3401b944 <HAL_XSPI_AutoPolling>
3400da58:	1b40      	subs	r0, r0, r5
3400da5a:	bf18      	it	ne
3400da5c:	2001      	movne	r0, #1
3400da5e:	4240      	negs	r0, r0
3400da60:	e7a3      	b.n	3400d9aa <MX66UW1G45G_WriteEnable+0x28>
3400da62:	2201      	movs	r2, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400da64:	4623      	mov	r3, r4
3400da66:	e7a7      	b.n	3400d9b8 <MX66UW1G45G_WriteEnable+0x36>
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
3400da68:	2306      	movs	r3, #6
3400da6a:	e7ad      	b.n	3400d9c8 <MX66UW1G45G_WriteEnable+0x46>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400da6c:	2d01      	cmp	r5, #1
3400da6e:	d00c      	beq.n	3400da8a <MX66UW1G45G_WriteEnable+0x108>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400da70:	4623      	mov	r3, r4
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400da72:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400da76:	e7c7      	b.n	3400da08 <MX66UW1G45G_WriteEnable+0x86>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400da78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400da7c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
3400da80:	2405      	movs	r4, #5
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400da82:	2102      	movs	r1, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400da84:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
3400da88:	e7c0      	b.n	3400da0c <MX66UW1G45G_WriteEnable+0x8a>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400da8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400da8e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400da92:	e7f6      	b.n	3400da82 <MX66UW1G45G_WriteEnable+0x100>

3400da94 <MX66UW1G45G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX66UW1G45G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                      MX66UW1G45G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
3400da94:	b5f0      	push	{r4, r5, r6, r7, lr}
3400da96:	460d      	mov	r5, r1
3400da98:	b095      	sub	sp, #84	@ 0x54
3400da9a:	4606      	mov	r6, r0
3400da9c:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400da9e:	2100      	movs	r1, #0
3400daa0:	224c      	movs	r2, #76	@ 0x4c
3400daa2:	a801      	add	r0, sp, #4
{
3400daa4:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400daa6:	f010 ffeb 	bl	3401ea80 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400daaa:	b92d      	cbnz	r5, 3400dab8 <MX66UW1G45G_WriteCfg2Register+0x24>
3400daac:	2c01      	cmp	r4, #1
3400daae:	d140      	bne.n	3400db32 <MX66UW1G45G_WriteCfg2Register+0x9e>
  {
    return MX66UW1G45G_ERROR;
3400dab0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400dab4:	b015      	add	sp, #84	@ 0x54
3400dab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dab8:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400daba:	1e61      	subs	r1, r4, #1
3400dabc:	424a      	negs	r2, r1
3400dabe:	414a      	adcs	r2, r1
3400dac0:	00d2      	lsls	r2, r2, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400dac2:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dac4:	9206      	str	r2, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400dac6:	2d00      	cmp	r5, #0
3400dac8:	d036      	beq.n	3400db38 <MX66UW1G45G_WriteCfg2Register+0xa4>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400daca:	2310      	movs	r3, #16
3400dacc:	f247 228d 	movw	r2, #29325	@ 0x728d
3400dad0:	9305      	str	r3, [sp, #20]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400dad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400dad6:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400dad8:	1e63      	subs	r3, r4, #1
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400dada:	9203      	str	r2, [sp, #12]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400dadc:	425a      	negs	r2, r3
3400dade:	415a      	adcs	r2, r3
3400dae0:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dae2:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400dae4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400dae8:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400daea:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400daec:	bf14      	ite	ne
3400daee:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400daf2:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400daf6:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = WriteAddr;
3400dafa:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400dafc:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dafe:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400db00:	d01e      	beq.n	3400db40 <MX66UW1G45G_WriteCfg2Register+0xac>
3400db02:	2c01      	cmp	r4, #1
3400db04:	bf0c      	ite	eq
3400db06:	2302      	moveq	r3, #2
3400db08:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400db0a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400db0e:	4630      	mov	r0, r6
3400db10:	a901      	add	r1, sp, #4
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400db12:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400db14:	f00d fd64 	bl	3401b5e0 <HAL_XSPI_Command>
3400db18:	2800      	cmp	r0, #0
3400db1a:	d1c9      	bne.n	3400dab0 <MX66UW1G45G_WriteCfg2Register+0x1c>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400db1c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400db20:	4630      	mov	r0, r6
3400db22:	a91a      	add	r1, sp, #104	@ 0x68
3400db24:	f00d fe74 	bl	3401b810 <HAL_XSPI_Transmit>
3400db28:	3800      	subs	r0, #0
3400db2a:	bf18      	it	ne
3400db2c:	2001      	movne	r0, #1
3400db2e:	4240      	negs	r0, r0
3400db30:	e7c0      	b.n	3400dab4 <MX66UW1G45G_WriteCfg2Register+0x20>
3400db32:	2301      	movs	r3, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400db34:	462a      	mov	r2, r5
3400db36:	e7c4      	b.n	3400dac2 <MX66UW1G45G_WriteCfg2Register+0x2e>
3400db38:	2272      	movs	r2, #114	@ 0x72
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400db3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400db3e:	e7ca      	b.n	3400dad6 <MX66UW1G45G_WriteCfg2Register+0x42>
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400db40:	2301      	movs	r3, #1
3400db42:	e7e2      	b.n	3400db0a <MX66UW1G45G_WriteCfg2Register+0x76>

3400db44 <MX66UW1G45G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX66UW1G45G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                     MX66UW1G45G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
3400db44:	b5f0      	push	{r4, r5, r6, r7, lr}
3400db46:	460d      	mov	r5, r1
3400db48:	b095      	sub	sp, #84	@ 0x54
3400db4a:	4606      	mov	r6, r0
3400db4c:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400db4e:	2100      	movs	r1, #0
3400db50:	224c      	movs	r2, #76	@ 0x4c
3400db52:	a801      	add	r0, sp, #4
{
3400db54:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400db56:	f010 ff93 	bl	3401ea80 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400db5a:	b92d      	cbnz	r5, 3400db68 <MX66UW1G45G_ReadCfg2Register+0x24>
3400db5c:	2c01      	cmp	r4, #1
3400db5e:	d144      	bne.n	3400dbea <MX66UW1G45G_ReadCfg2Register+0xa6>
  {
    return MX66UW1G45G_ERROR;
3400db60:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400db64:	b015      	add	sp, #84	@ 0x54
3400db66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400db68:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400db6a:	1e61      	subs	r1, r4, #1
3400db6c:	424a      	negs	r2, r1
3400db6e:	414a      	adcs	r2, r1
3400db70:	00d2      	lsls	r2, r2, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400db72:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400db74:	9206      	str	r2, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400db76:	2d00      	cmp	r5, #0
3400db78:	d03a      	beq.n	3400dbf0 <MX66UW1G45G_ReadCfg2Register+0xac>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400db7a:	2310      	movs	r3, #16
3400db7c:	f247 128e 	movw	r2, #29070	@ 0x718e
3400db80:	9305      	str	r3, [sp, #20]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400db82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400db86:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400db88:	1e63      	subs	r3, r4, #1
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400db8a:	9203      	str	r2, [sp, #12]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400db8c:	425a      	negs	r2, r3
3400db8e:	415a      	adcs	r2, r3
3400db90:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400db92:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400db94:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400db98:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400db9a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400db9c:	bf14      	ite	ne
3400db9e:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400dba2:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400dba6:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = ReadAddr;
3400dbaa:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400dbac:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dbae:	9211      	str	r2, [sp, #68]	@ 0x44
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400dbb0:	d027      	beq.n	3400dc02 <MX66UW1G45G_ReadCfg2Register+0xbe>
3400dbb2:	2c01      	cmp	r4, #1
3400dbb4:	d120      	bne.n	3400dbf8 <MX66UW1G45G_ReadCfg2Register+0xb4>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400dbb6:	2305      	movs	r3, #5
3400dbb8:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400dbba:	2202      	movs	r2, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400dbbc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400dbc0:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dbc2:	4630      	mov	r0, r6
3400dbc4:	f241 3288 	movw	r2, #5000	@ 0x1388
3400dbc8:	a901      	add	r1, sp, #4
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400dbca:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dbcc:	f00d fd08 	bl	3401b5e0 <HAL_XSPI_Command>
3400dbd0:	2800      	cmp	r0, #0
3400dbd2:	d1c5      	bne.n	3400db60 <MX66UW1G45G_ReadCfg2Register+0x1c>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dbd4:	f241 3288 	movw	r2, #5000	@ 0x1388
3400dbd8:	4630      	mov	r0, r6
3400dbda:	991a      	ldr	r1, [sp, #104]	@ 0x68
3400dbdc:	f00d fe5c 	bl	3401b898 <HAL_XSPI_Receive>
3400dbe0:	3800      	subs	r0, #0
3400dbe2:	bf18      	it	ne
3400dbe4:	2001      	movne	r0, #1
3400dbe6:	4240      	negs	r0, r0
3400dbe8:	e7bc      	b.n	3400db64 <MX66UW1G45G_ReadCfg2Register+0x20>
3400dbea:	2301      	movs	r3, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400dbec:	462a      	mov	r2, r5
3400dbee:	e7c0      	b.n	3400db72 <MX66UW1G45G_ReadCfg2Register+0x2e>
3400dbf0:	2271      	movs	r2, #113	@ 0x71
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400dbf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400dbf6:	e7c6      	b.n	3400db86 <MX66UW1G45G_ReadCfg2Register+0x42>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400dbf8:	2304      	movs	r3, #4
3400dbfa:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400dbfc:	2201      	movs	r2, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400dbfe:	2300      	movs	r3, #0
3400dc00:	e7de      	b.n	3400dbc0 <MX66UW1G45G_ReadCfg2Register+0x7c>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400dc02:	2c01      	cmp	r4, #1
3400dc04:	d1fa      	bne.n	3400dbfc <MX66UW1G45G_ReadCfg2Register+0xb8>
3400dc06:	e7d8      	b.n	3400dbba <MX66UW1G45G_ReadCfg2Register+0x76>

3400dc08 <MX66UW1G45G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400dc08:	b570      	push	{r4, r5, r6, lr}
3400dc0a:	460d      	mov	r5, r1
3400dc0c:	b094      	sub	sp, #80	@ 0x50
3400dc0e:	4606      	mov	r6, r0
3400dc10:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400dc12:	2100      	movs	r1, #0
3400dc14:	224c      	movs	r2, #76	@ 0x4c
3400dc16:	a801      	add	r0, sp, #4
3400dc18:	f010 ff32 	bl	3401ea80 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400dc1c:	b9d5      	cbnz	r5, 3400dc54 <MX66UW1G45G_ResetEnable+0x4c>
3400dc1e:	2c01      	cmp	r4, #1
3400dc20:	d01c      	beq.n	3400dc5c <MX66UW1G45G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect =  HAL_XSPI_SELECT_IO_3_0;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400dc22:	2301      	movs	r3, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400dc24:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400dc26:	1e63      	subs	r3, r4, #1
3400dc28:	425c      	negs	r4, r3
3400dc2a:	415c      	adcs	r4, r3
3400dc2c:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dc2e:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400dc30:	b195      	cbz	r5, 3400dc58 <MX66UW1G45G_ResetEnable+0x50>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400dc32:	2310      	movs	r3, #16
3400dc34:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_ENABLE_CMD
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
3400dc36:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.DummyCycles = 0U;
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;


  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dc3a:	f241 3288 	movw	r2, #5000	@ 0x1388
3400dc3e:	4630      	mov	r0, r6
3400dc40:	a901      	add	r1, sp, #4
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400dc42:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dc44:	f00d fccc 	bl	3401b5e0 <HAL_XSPI_Command>
3400dc48:	3800      	subs	r0, #0
3400dc4a:	bf18      	it	ne
3400dc4c:	2001      	movne	r0, #1
3400dc4e:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400dc50:	b014      	add	sp, #80	@ 0x50
3400dc52:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400dc54:	2304      	movs	r3, #4
3400dc56:	e7e5      	b.n	3400dc24 <MX66UW1G45G_ResetEnable+0x1c>
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
3400dc58:	2366      	movs	r3, #102	@ 0x66
3400dc5a:	e7ee      	b.n	3400dc3a <MX66UW1G45G_ResetEnable+0x32>
    return MX66UW1G45G_ERROR;
3400dc5c:	f04f 30ff 	mov.w	r0, #4294967295
3400dc60:	e7f6      	b.n	3400dc50 <MX66UW1G45G_ResetEnable+0x48>

3400dc62 <MX66UW1G45G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400dc62:	b570      	push	{r4, r5, r6, lr}
3400dc64:	460d      	mov	r5, r1
3400dc66:	b094      	sub	sp, #80	@ 0x50
3400dc68:	4606      	mov	r6, r0
3400dc6a:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400dc6c:	2100      	movs	r1, #0
3400dc6e:	224c      	movs	r2, #76	@ 0x4c
3400dc70:	a801      	add	r0, sp, #4
3400dc72:	f010 ff05 	bl	3401ea80 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400dc76:	b9bd      	cbnz	r5, 3400dca8 <MX66UW1G45G_ResetMemory+0x46>
3400dc78:	2c01      	cmp	r4, #1
3400dc7a:	d01d      	beq.n	3400dcb8 <MX66UW1G45G_ResetMemory+0x56>
3400dc7c:	2301      	movs	r3, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400dc7e:	462c      	mov	r4, r5
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400dc80:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400dc82:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400dc84:	b1b5      	cbz	r5, 3400dcb4 <MX66UW1G45G_ResetMemory+0x52>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400dc86:	2310      	movs	r3, #16
3400dc88:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_MEMORY_CMD
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
3400dc8a:	f649 1366 	movw	r3, #39270	@ 0x9966
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dc8e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400dc92:	4630      	mov	r0, r6
3400dc94:	a901      	add	r1, sp, #4
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400dc96:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400dc98:	f00d fca2 	bl	3401b5e0 <HAL_XSPI_Command>
3400dc9c:	3800      	subs	r0, #0
3400dc9e:	bf18      	it	ne
3400dca0:	2001      	movne	r0, #1
3400dca2:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400dca4:	b014      	add	sp, #80	@ 0x50
3400dca6:	bd70      	pop	{r4, r5, r6, pc}
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400dca8:	1e63      	subs	r3, r4, #1
3400dcaa:	425c      	negs	r4, r3
3400dcac:	415c      	adcs	r4, r3
3400dcae:	00e4      	lsls	r4, r4, #3
3400dcb0:	2304      	movs	r3, #4
3400dcb2:	e7e5      	b.n	3400dc80 <MX66UW1G45G_ResetMemory+0x1e>
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
3400dcb4:	2399      	movs	r3, #153	@ 0x99
3400dcb6:	e7ea      	b.n	3400dc8e <MX66UW1G45G_ResetMemory+0x2c>
    return MX66UW1G45G_ERROR;
3400dcb8:	f04f 30ff 	mov.w	r0, #4294967295
3400dcbc:	e7f2      	b.n	3400dca4 <MX66UW1G45G_ResetMemory+0x42>
	...

3400dcc0 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400dcc0:	4b04      	ldr	r3, [pc, #16]	@ (3400dcd4 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400dcc2:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400dcc4:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400dcc8:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400dccc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400dcce:	9b01      	ldr	r3, [sp, #4]
}
3400dcd0:	b002      	add	sp, #8
3400dcd2:	4770      	bx	lr
3400dcd4:	56028000 	.word	0x56028000

3400dcd8 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
3400dcd8:	b570      	push	{r4, r5, r6, lr}
3400dcda:	4604      	mov	r4, r0
3400dcdc:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
3400dcde:	2020      	movs	r0, #32
3400dce0:	f7ff ffee 	bl	3400dcc0 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400dce4:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400dce6:	2610      	movs	r6, #16
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400dce8:	9303      	str	r3, [sp, #12]
3400dcea:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400dcec:	2301      	movs	r3, #1
3400dcee:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400dcf2:	2303      	movs	r3, #3
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
3400dcf4:	4d06      	ldr	r5, [pc, #24]	@ (3400dd10 <BSP_SMPS_Init+0x38>)
3400dcf6:	a901      	add	r1, sp, #4
3400dcf8:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400dcfa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
3400dcfc:	f004 fbea 	bl	340124d4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
3400dd00:	4622      	mov	r2, r4
3400dd02:	4631      	mov	r1, r6
3400dd04:	4628      	mov	r0, r5
3400dd06:	f004 ff3d 	bl	34012b84 <HAL_GPIO_WritePin>
}
3400dd0a:	b006      	add	sp, #24
3400dd0c:	bd70      	pop	{r4, r5, r6, pc}
3400dd0e:	bf00      	nop
3400dd10:	56021400 	.word	0x56021400

3400dd14 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
3400dd14:	b570      	push	{r4, r5, r6, lr}
3400dd16:	4604      	mov	r4, r0
3400dd18:	b086      	sub	sp, #24
3400dd1a:	460d      	mov	r5, r1
  GPIO_InitTypeDef             gpio_init_structure       = {0};
3400dd1c:	2214      	movs	r2, #20
3400dd1e:	2100      	movs	r1, #0
3400dd20:	a801      	add	r0, sp, #4
3400dd22:	f010 fead 	bl	3401ea80 <memset>
                                                            BSP_BUTTON_TAMP_IT_PRIORITY};
  static const uint32_t        BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER1_EXTI_LINE,
                                                            BUTTON_TAMP_EXTI_LINE};

  /* Enable the BUTTON clock */
  if (Button == BUTTON_USER1)
3400dd26:	b9ac      	cbnz	r4, 3400dd54 <BSP_PB_Init+0x40>
  {
    BUTTON_USER1_GPIO_CLK_ENABLE();
3400dd28:	2004      	movs	r0, #4
  }
  else /* BUTTON_TAMP */
  {
    BUTTON_TAMP_GPIO_CLK_ENABLE();
3400dd2a:	f7ff ffc9 	bl	3400dcc0 <LL_AHB4_GRP1_EnableClock>
  }
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
3400dd2e:	4b21      	ldr	r3, [pc, #132]	@ (3400ddb4 <BSP_PB_Init+0xa0>)
  gpio_init_structure.Pull  = GPIO_PULLDOWN;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
3400dd30:	2600      	movs	r6, #0
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
3400dd32:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
3400dd36:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
3400dd38:	2302      	movs	r3, #2
3400dd3a:	e9cd 3603 	strd	r3, r6, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
3400dd3e:	b95d      	cbnz	r5, 3400dd58 <BSP_PB_Init+0x44>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
3400dd40:	4b1d      	ldr	r3, [pc, #116]	@ (3400ddb8 <BSP_PB_Init+0xa4>)
3400dd42:	a901      	add	r1, sp, #4
3400dd44:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
3400dd48:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
3400dd4a:	f004 fbc3 	bl	340124d4 <HAL_GPIO_Init>
  {
    /* Bad value of ButtonMode parameter */
    return BSP_ERROR_WRONG_PARAM;
  }

  return BSP_ERROR_NONE;
3400dd4e:	2000      	movs	r0, #0
}
3400dd50:	b006      	add	sp, #24
3400dd52:	bd70      	pop	{r4, r5, r6, pc}
    BUTTON_TAMP_GPIO_CLK_ENABLE();
3400dd54:	2010      	movs	r0, #16
3400dd56:	e7e8      	b.n	3400dd2a <BSP_PB_Init+0x16>
  else if(ButtonMode == BUTTON_MODE_EXTI)
3400dd58:	2d01      	cmp	r5, #1
3400dd5a:	d127      	bne.n	3400ddac <BSP_PB_Init+0x98>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
3400dd5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
3400dd60:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
3400dd62:	4b15      	ldr	r3, [pc, #84]	@ (3400ddb8 <BSP_PB_Init+0xa4>)
3400dd64:	a901      	add	r1, sp, #4
3400dd66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
3400dd6a:	f004 fbb3 	bl	340124d4 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
3400dd6e:	230c      	movs	r3, #12
3400dd70:	4d12      	ldr	r5, [pc, #72]	@ (3400ddbc <BSP_PB_Init+0xa8>)
3400dd72:	fb03 5504 	mla	r5, r3, r4, r5
3400dd76:	4b12      	ldr	r3, [pc, #72]	@ (3400ddc0 <BSP_PB_Init+0xac>)
3400dd78:	4628      	mov	r0, r5
3400dd7a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
3400dd7e:	f004 fb81 	bl	34012484 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
3400dd82:	4b10      	ldr	r3, [pc, #64]	@ (3400ddc4 <BSP_PB_Init+0xb0>)
3400dd84:	4631      	mov	r1, r6
3400dd86:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
3400dd8a:	4628      	mov	r0, r5
3400dd8c:	f004 fb6c 	bl	34012468 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
3400dd90:	4b0d      	ldr	r3, [pc, #52]	@ (3400ddc8 <BSP_PB_Init+0xb4>)
3400dd92:	4632      	mov	r2, r6
3400dd94:	f933 5014 	ldrsh.w	r5, [r3, r4, lsl #1]
3400dd98:	4b0c      	ldr	r3, [pc, #48]	@ (3400ddcc <BSP_PB_Init+0xb8>)
3400dd9a:	4628      	mov	r0, r5
3400dd9c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
3400dda0:	f001 fd20 	bl	3400f7e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
3400dda4:	4628      	mov	r0, r5
3400dda6:	f001 fd7b 	bl	3400f8a0 <HAL_NVIC_EnableIRQ>
3400ddaa:	e7d0      	b.n	3400dd4e <BSP_PB_Init+0x3a>
    return BSP_ERROR_WRONG_PARAM;
3400ddac:	f06f 0001 	mvn.w	r0, #1
3400ddb0:	e7ce      	b.n	3400dd50 <BSP_PB_Init+0x3c>
3400ddb2:	bf00      	nop
3400ddb4:	3409f7bc 	.word	0x3409f7bc
3400ddb8:	3409f7c0 	.word	0x3409f7c0
3400ddbc:	340db3a0 	.word	0x340db3a0
3400ddc0:	3409f7b0 	.word	0x3409f7b0
3400ddc4:	3409f7a8 	.word	0x3409f7a8
3400ddc8:	3409f7b8 	.word	0x3409f7b8
3400ddcc:	3409f7a0 	.word	0x3409f7a0

3400ddd0 <BSP_PB_GetState>:
  *            @arg  BUTTON_USER2: User2 Push Button
  *            @arg  BUTTON_TAMP : TAMP Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
3400ddd0:	b508      	push	{r3, lr}
  return (uint32_t) HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
3400ddd2:	4b04      	ldr	r3, [pc, #16]	@ (3400dde4 <BSP_PB_GetState+0x14>)
3400ddd4:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
3400ddd8:	4b03      	ldr	r3, [pc, #12]	@ (3400dde8 <BSP_PB_GetState+0x18>)
3400ddda:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
3400ddde:	f004 febf 	bl	34012b60 <HAL_GPIO_ReadPin>
}
3400dde2:	bd08      	pop	{r3, pc}
3400dde4:	3409f7bc 	.word	0x3409f7bc
3400dde8:	3409f7c0 	.word	0x3409f7c0

3400ddec <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
3400ddec:	4770      	bx	lr

3400ddee <BUTTON_TAMP_EXTI_Callback>:
{
3400ddee:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_TAMP);
3400ddf0:	2001      	movs	r0, #1
3400ddf2:	f7ff fffb 	bl	3400ddec <BSP_PB_Callback>
}
3400ddf6:	bd08      	pop	{r3, pc}

3400ddf8 <BUTTON_USER1_EXTI_Callback>:
{
3400ddf8:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER1);
3400ddfa:	2000      	movs	r0, #0
3400ddfc:	f7ff fff6 	bl	3400ddec <BSP_PB_Callback>
}
3400de00:	bd08      	pop	{r3, pc}
	...

3400de04 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400de04:	4b04      	ldr	r3, [pc, #16]	@ (3400de18 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400de06:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400de08:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400de0c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400de10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400de12:	9b01      	ldr	r3, [sp, #4]
}
3400de14:	b002      	add	sp, #8
3400de16:	4770      	bx	lr
3400de18:	56028000 	.word	0x56028000

3400de1c <I2C_GetTiming.constprop.0>:
  * @brief  Compute I2C timing according current I2C clock source and required I2C clock.
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
3400de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400de20:	b08b      	sub	sp, #44	@ 0x2c
{
  uint32_t ret = 0;
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
3400de22:	b918      	cbnz	r0, 3400de2c <I2C_GetTiming.constprop.0+0x10>
  uint32_t ret = 0;
3400de24:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
3400de26:	b00b      	add	sp, #44	@ 0x2c
3400de28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
3400de2c:	4b6f      	ldr	r3, [pc, #444]	@ (3400dfec <I2C_GetTiming.constprop.0+0x1d0>)
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3400de2e:	f640 15f6 	movw	r5, #2550	@ 0x9f6
  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
3400de32:	eb03 0350 	add.w	r3, r3, r0, lsr #1
3400de36:	fbb3 f3f0 	udiv	r3, r3, r0
3400de3a:	9300      	str	r3, [sp, #0]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
3400de3c:	005b      	lsls	r3, r3, #1
3400de3e:	9301      	str	r3, [sp, #4]
3400de40:	9b00      	ldr	r3, [sp, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
3400de42:	f04f 0b10 	mov.w	fp, #16
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
3400de46:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3400de4a:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
  if (tsdadel_min <= 0)
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
3400de4e:	4619      	mov	r1, r3
3400de50:	2300      	movs	r3, #0
3400de52:	469a      	mov	sl, r3
3400de54:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 3400dff4 <I2C_GetTiming.constprop.0+0x1d8>
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
3400de58:	f1c4 24ff 	rsb	r4, r4, #4278255360	@ 0xff00ff00
3400de5c:	f504 047f 	add.w	r4, r4, #16711680	@ 0xff0000
3400de60:	34e2      	adds	r4, #226	@ 0xe2
3400de62:	f8dc 2000 	ldr.w	r2, [ip]
  if (tsdadel_min <= 0)
3400de66:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  if (tsdadel_max <= 0)
3400de6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
3400de6e:	468e      	mov	lr, r1
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3400de70:	2700      	movs	r7, #0
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
3400de72:	f240 3079 	movw	r0, #889	@ 0x379
3400de76:	4586      	cmp	lr, r0
3400de78:	9702      	str	r7, [sp, #8]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
3400de7a:	f107 0701 	add.w	r7, r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
3400de7e:	d950      	bls.n	3400df22 <I2C_GetTiming.constprop.0+0x106>
3400de80:	2600      	movs	r6, #0
3400de82:	f04f 0810 	mov.w	r8, #16
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3400de86:	46b1      	mov	r9, r6
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
3400de88:	42b4      	cmp	r4, r6
3400de8a:	d844      	bhi.n	3400df16 <I2C_GetTiming.constprop.0+0xfa>
3400de8c:	42b5      	cmp	r5, r6
3400de8e:	d342      	bcc.n	3400df16 <I2C_GetTiming.constprop.0+0xfa>
          {
            if (presc != prev_presc)
3400de90:	459b      	cmp	fp, r3
3400de92:	d040      	beq.n	3400df16 <I2C_GetTiming.constprop.0+0xfa>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3400de94:	2014      	movs	r0, #20
3400de96:	fb00 fb02 	mul.w	fp, r0, r2
3400de9a:	4855      	ldr	r0, [pc, #340]	@ (3400dff0 <I2C_GetTiming.constprop.0+0x1d4>)
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
3400de9c:	3201      	adds	r2, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3400de9e:	eb00 0a0b 	add.w	sl, r0, fp
3400dea2:	f840 300b 	str.w	r3, [r0, fp]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
3400dea6:	9802      	ldr	r0, [sp, #8]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3400dea8:	2a7f      	cmp	r2, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
3400deaa:	e9ca 0901 	strd	r0, r9, [sl, #4]
              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3400deae:	d92f      	bls.n	3400df10 <I2C_GetTiming.constprop.0+0xf4>
3400deb0:	f8cc 2000 	str.w	r2, [ip]
  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;

  prev_error = ti2cspeed;

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400deb4:	f8dc 3000 	ldr.w	r3, [ip]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400deb8:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400deba:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400debc:	f242 7310 	movw	r3, #10000	@ 0x2710
3400dec0:	f04f 32ff 	mov.w	r2, #4294967295
3400dec4:	9304      	str	r3, [sp, #16]
3400dec6:	9b01      	ldr	r3, [sp, #4]
3400dec8:	4949      	ldr	r1, [pc, #292]	@ (3400dff0 <I2C_GetTiming.constprop.0+0x1d4>)
3400deca:	3332      	adds	r3, #50	@ 0x32
3400decc:	9309      	str	r3, [sp, #36]	@ 0x24
3400dece:	9b01      	ldr	r3, [sp, #4]
3400ded0:	f5c3 5e90 	rsb	lr, r3, #4608	@ 0x1200
3400ded4:	f10e 0e0c 	add.w	lr, lr, #12
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400ded8:	9b06      	ldr	r3, [sp, #24]
3400deda:	429e      	cmp	r6, r3
3400dedc:	d12d      	bne.n	3400df3a <I2C_GetTiming.constprop.0+0x11e>
        if (idx < I2C_VALID_TIMING_NBR)
3400dede:	2a7f      	cmp	r2, #127	@ 0x7f
3400dee0:	d8a0      	bhi.n	3400de24 <I2C_GetTiming.constprop.0+0x8>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400dee2:	2114      	movs	r1, #20
3400dee4:	434a      	muls	r2, r1
3400dee6:	4b42      	ldr	r3, [pc, #264]	@ (3400dff0 <I2C_GetTiming.constprop.0+0x1d4>)
3400dee8:	1899      	adds	r1, r3, r2
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
3400deea:	7c08      	ldrb	r0, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400deec:	589b      	ldr	r3, [r3, r2]
3400deee:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
3400def2:	684b      	ldr	r3, [r1, #4]
3400def4:	051b      	lsls	r3, r3, #20
3400def6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400defa:	4318      	orrs	r0, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
3400defc:	688b      	ldr	r3, [r1, #8]
3400defe:	041b      	lsls	r3, r3, #16
3400df00:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400df04:	4318      	orrs	r0, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
3400df06:	68cb      	ldr	r3, [r1, #12]
3400df08:	021b      	lsls	r3, r3, #8
3400df0a:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400df0c:	4318      	orrs	r0, r3
  return ret;
3400df0e:	e78a      	b.n	3400de26 <I2C_GetTiming.constprop.0+0xa>
              prev_presc = presc;
3400df10:	469b      	mov	fp, r3
3400df12:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3400df16:	f1b8 0801 	subs.w	r8, r8, #1
3400df1a:	f109 0901 	add.w	r9, r9, #1
3400df1e:	440e      	add	r6, r1
3400df20:	d1b2      	bne.n	3400de88 <I2C_GetTiming.constprop.0+0x6c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3400df22:	2f10      	cmp	r7, #16
3400df24:	448e      	add	lr, r1
3400df26:	d1a4      	bne.n	3400de72 <I2C_GetTiming.constprop.0+0x56>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
3400df28:	9800      	ldr	r0, [sp, #0]
3400df2a:	3301      	adds	r3, #1
3400df2c:	2b10      	cmp	r3, #16
3400df2e:	4401      	add	r1, r0
3400df30:	d19d      	bne.n	3400de6e <I2C_GetTiming.constprop.0+0x52>
3400df32:	f1ba 0f00 	cmp.w	sl, #0
3400df36:	d1bb      	bne.n	3400deb0 <I2C_GetTiming.constprop.0+0x94>
3400df38:	e7bc      	b.n	3400deb4 <I2C_GetTiming.constprop.0+0x98>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400df3a:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
3400df3c:	9800      	ldr	r0, [sp, #0]
3400df3e:	680b      	ldr	r3, [r1, #0]
3400df40:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400df44:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400df46:	ebae 0403 	sub.w	r4, lr, r3
3400df4a:	4418      	add	r0, r3
3400df4c:	9003      	str	r0, [sp, #12]
3400df4e:	9801      	ldr	r0, [sp, #4]
3400df50:	ea4f 0b44 	mov.w	fp, r4, lsl #1
3400df54:	181d      	adds	r5, r3, r0
3400df56:	f5a5 5011 	sub.w	r0, r5, #9280	@ 0x2440
3400df5a:	380a      	subs	r0, #10
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
3400df5c:	9c03      	ldr	r4, [sp, #12]
3400df5e:	9002      	str	r0, [sp, #8]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400df60:	f241 205c 	movw	r0, #4700	@ 0x125c
3400df64:	4284      	cmp	r4, r0
3400df66:	9708      	str	r7, [sp, #32]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400df68:	f107 0701 	add.w	r7, r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400df6c:	d935      	bls.n	3400dfda <I2C_GetTiming.constprop.0+0x1be>
3400df6e:	9800      	ldr	r0, [sp, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400df70:	f1a4 0532 	sub.w	r5, r4, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400df74:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
3400df78:	d22f      	bcs.n	3400dfda <I2C_GetTiming.constprop.0+0x1be>
3400df7a:	9802      	ldr	r0, [sp, #8]
3400df7c:	46d8      	mov	r8, fp
3400df7e:	1905      	adds	r5, r0, r4
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
3400df80:	f44f 7080 	mov.w	r0, #256	@ 0x100
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3400df84:	f04f 0900 	mov.w	r9, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400df88:	f8dd c00c 	ldr.w	ip, [sp, #12]
              ret = count;
3400df8c:	9005      	str	r0, [sp, #20]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
3400df8e:	f241 0047 	movw	r0, #4167	@ 0x1047
3400df92:	f205 6a83 	addw	sl, r5, #1667	@ 0x683
3400df96:	4582      	cmp	sl, r0
3400df98:	f8cd 901c 	str.w	r9, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
3400df9c:	f109 0901 	add.w	r9, r9, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
3400dfa0:	d813      	bhi.n	3400dfca <I2C_GetTiming.constprop.0+0x1ae>
3400dfa2:	f5bc 6f7a 	cmp.w	ip, #4000	@ 0xfa0
3400dfa6:	d310      	bcc.n	3400dfca <I2C_GetTiming.constprop.0+0x1ae>
3400dfa8:	9800      	ldr	r0, [sp, #0]
3400dfaa:	4560      	cmp	r0, ip
3400dfac:	d20d      	bcs.n	3400dfca <I2C_GetTiming.constprop.0+0x1ae>
              error = -error;
3400dfae:	2d00      	cmp	r5, #0
3400dfb0:	bfac      	ite	ge
3400dfb2:	46aa      	movge	sl, r5
3400dfb4:	46c2      	movlt	sl, r8
            if ((uint32_t)error < prev_error)
3400dfb6:	9804      	ldr	r0, [sp, #16]
3400dfb8:	4582      	cmp	sl, r0
3400dfba:	d206      	bcs.n	3400dfca <I2C_GetTiming.constprop.0+0x1ae>
              I2c_valid_timing[count].scll = scll;
3400dfbc:	9a08      	ldr	r2, [sp, #32]
              prev_error = (uint32_t)error;
3400dfbe:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
3400dfc2:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
3400dfc4:	9a07      	ldr	r2, [sp, #28]
3400dfc6:	60ca      	str	r2, [r1, #12]
              ret = count;
3400dfc8:	4632      	mov	r2, r6
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3400dfca:	9805      	ldr	r0, [sp, #20]
3400dfcc:	449c      	add	ip, r3
3400dfce:	3801      	subs	r0, #1
3400dfd0:	441d      	add	r5, r3
3400dfd2:	eba8 0803 	sub.w	r8, r8, r3
3400dfd6:	9005      	str	r0, [sp, #20]
3400dfd8:	d1d9      	bne.n	3400df8e <I2C_GetTiming.constprop.0+0x172>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400dfda:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
3400dfde:	441c      	add	r4, r3
3400dfe0:	ebab 0b03 	sub.w	fp, fp, r3
3400dfe4:	d1bc      	bne.n	3400df60 <I2C_GetTiming.constprop.0+0x144>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400dfe6:	3601      	adds	r6, #1
3400dfe8:	3114      	adds	r1, #20
3400dfea:	e775      	b.n	3400ded8 <I2C_GetTiming.constprop.0+0xbc>
3400dfec:	3b9aca00 	.word	0x3b9aca00
3400dff0:	340db410 	.word	0x340db410
3400dff4:	340db40c 	.word	0x340db40c

3400dff8 <BSP_I2C1_DeInit>:
  I2c1InitCounter--;
3400dff8:	4a0e      	ldr	r2, [pc, #56]	@ (3400e034 <BSP_I2C1_DeInit+0x3c>)
{
3400dffa:	b508      	push	{r3, lr}
  I2c1InitCounter--;
3400dffc:	6813      	ldr	r3, [r2, #0]
3400dffe:	3b01      	subs	r3, #1
3400e000:	6013      	str	r3, [r2, #0]
  if (I2c1InitCounter == 0U)
3400e002:	b10b      	cbz	r3, 3400e008 <BSP_I2C1_DeInit+0x10>
  int32_t ret = BSP_ERROR_NONE;
3400e004:	2000      	movs	r0, #0
}
3400e006:	bd08      	pop	{r3, pc}
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
3400e008:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400e00c:	480a      	ldr	r0, [pc, #40]	@ (3400e038 <BSP_I2C1_DeInit+0x40>)
3400e00e:	f004 fc79 	bl	34012904 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
3400e012:	480a      	ldr	r0, [pc, #40]	@ (3400e03c <BSP_I2C1_DeInit+0x44>)
3400e014:	2102      	movs	r1, #2
3400e016:	f004 fc75 	bl	34012904 <HAL_GPIO_DeInit>
  WRITE_REG(RCC->APB1ENCR1, Periphs);
3400e01a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400e01e:	4b08      	ldr	r3, [pc, #32]	@ (3400e040 <BSP_I2C1_DeInit+0x48>)
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
3400e020:	4808      	ldr	r0, [pc, #32]	@ (3400e044 <BSP_I2C1_DeInit+0x4c>)
3400e022:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
3400e026:	f005 f80d 	bl	34013044 <HAL_I2C_DeInit>
3400e02a:	2800      	cmp	r0, #0
3400e02c:	d0ea      	beq.n	3400e004 <BSP_I2C1_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
3400e02e:	f06f 0007 	mvn.w	r0, #7
  return ret;
3400e032:	e7e8      	b.n	3400e006 <BSP_I2C1_DeInit+0xe>
3400e034:	340dbe10 	.word	0x340dbe10
3400e038:	56021c00 	.word	0x56021c00
3400e03c:	56020800 	.word	0x56020800
3400e040:	56029000 	.word	0x56029000
3400e044:	340db3b8 	.word	0x340db3b8

3400e048 <MX_I2C1_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
3400e048:	2300      	movs	r3, #0
3400e04a:	2201      	movs	r2, #1
{
3400e04c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
3400e04e:	6041      	str	r1, [r0, #4]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
3400e050:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
3400e054:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
3400e058:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
3400e05c:	6203      	str	r3, [r0, #32]
{
3400e05e:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
3400e060:	f004 ff2e 	bl	34012ec0 <HAL_I2C_Init>
3400e064:	4601      	mov	r1, r0
3400e066:	b108      	cbz	r0, 3400e06c <MX_I2C1_Init+0x24>
    status = HAL_ERROR;
3400e068:	2001      	movs	r0, #1
}
3400e06a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
3400e06c:	4620      	mov	r0, r4
3400e06e:	f005 fa03 	bl	34013478 <HAL_I2CEx_ConfigAnalogFilter>
3400e072:	4601      	mov	r1, r0
3400e074:	2800      	cmp	r0, #0
3400e076:	d1f7      	bne.n	3400e068 <MX_I2C1_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
3400e078:	4620      	mov	r0, r4
3400e07a:	f005 fa57 	bl	3401352c <HAL_I2CEx_ConfigDigitalFilter>
3400e07e:	3800      	subs	r0, #0
3400e080:	bf18      	it	ne
3400e082:	2001      	movne	r0, #1
3400e084:	e7f1      	b.n	3400e06a <MX_I2C1_Init+0x22>
	...

3400e088 <BSP_I2C1_Init>:
{
3400e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hbus_i2c1.Instance = BUS_I2C1;
3400e08c:	4b28      	ldr	r3, [pc, #160]	@ (3400e130 <BSP_I2C1_Init+0xa8>)
3400e08e:	4e29      	ldr	r6, [pc, #164]	@ (3400e134 <BSP_I2C1_Init+0xac>)
{
3400e090:	b086      	sub	sp, #24
  hbus_i2c1.Instance = BUS_I2C1;
3400e092:	6033      	str	r3, [r6, #0]
  if (I2c1InitCounter == 0U)
3400e094:	4b28      	ldr	r3, [pc, #160]	@ (3400e138 <BSP_I2C1_Init+0xb0>)
3400e096:	681a      	ldr	r2, [r3, #0]
3400e098:	b11a      	cbz	r2, 3400e0a2 <BSP_I2C1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
3400e09a:	2000      	movs	r0, #0
}
3400e09c:	b006      	add	sp, #24
3400e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    I2c1InitCounter++;
3400e0a2:	2201      	movs	r2, #1
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3400e0a4:	4630      	mov	r0, r6
    I2c1InitCounter++;
3400e0a6:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3400e0a8:	f005 f9e0 	bl	3401346c <HAL_I2C_GetState>
3400e0ac:	4604      	mov	r4, r0
3400e0ae:	2800      	cmp	r0, #0
3400e0b0:	d1f3      	bne.n	3400e09a <BSP_I2C1_Init+0x12>
  HAL_PWREx_EnableVddIO4();
3400e0b2:	f005 ffd5 	bl	34014060 <HAL_PWREx_EnableVddIO4>
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
3400e0b6:	2080      	movs	r0, #128	@ 0x80
3400e0b8:	f7ff fea4 	bl	3400de04 <LL_AHB4_GRP1_EnableClock>
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
3400e0bc:	2004      	movs	r0, #4
3400e0be:	f7ff fea1 	bl	3400de04 <LL_AHB4_GRP1_EnableClock>
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400e0c2:	2702      	movs	r7, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400e0c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3400e0c8:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400e0ca:	f04f 0812 	mov.w	r8, #18
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400e0ce:	eb0d 0100 	add.w	r1, sp, r0
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3400e0d2:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400e0d4:	4819      	ldr	r0, [pc, #100]	@ (3400e13c <BSP_I2C1_Init+0xb4>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400e0d6:	e9cd 3801 	strd	r3, r8, [sp, #4]
  gpio_init_structure.Pull      = GPIO_NOPULL;
3400e0da:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400e0dc:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400e0de:	f004 f9f9 	bl	340124d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
3400e0e2:	4817      	ldr	r0, [pc, #92]	@ (3400e140 <BSP_I2C1_Init+0xb8>)
3400e0e4:	eb0d 0105 	add.w	r1, sp, r5
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400e0e8:	e9cd 7801 	strd	r7, r8, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400e0ec:	e9cd 4703 	strd	r4, r7, [sp, #12]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
3400e0f0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
3400e0f2:	f004 f9ef 	bl	340124d4 <HAL_GPIO_Init>
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3400e0f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
3400e0fa:	4a12      	ldr	r2, [pc, #72]	@ (3400e144 <BSP_I2C1_Init+0xbc>)
3400e0fc:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3400e100:	f8d2 1264 	ldr.w	r1, [r2, #612]	@ 0x264
3400e104:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
3400e106:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->APB1RSTSR1, Periphs);
3400e108:	f8c2 3a24 	str.w	r3, [r2, #2596]	@ 0xa24
  WRITE_REG(RCC->APB1RSTCR1, Periphs);
3400e10c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3400e110:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
3400e114:	f007 f856 	bl	340151c4 <HAL_RCC_GetPCLK1Freq>
3400e118:	f7ff fe80 	bl	3400de1c <I2C_GetTiming.constprop.0>
3400e11c:	4601      	mov	r1, r0
3400e11e:	4630      	mov	r0, r6
3400e120:	f7ff ff92 	bl	3400e048 <MX_I2C1_Init>
3400e124:	2800      	cmp	r0, #0
3400e126:	d0b8      	beq.n	3400e09a <BSP_I2C1_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
3400e128:	f06f 0007 	mvn.w	r0, #7
  return ret;
3400e12c:	e7b6      	b.n	3400e09c <BSP_I2C1_Init+0x14>
3400e12e:	bf00      	nop
3400e130:	50005400 	.word	0x50005400
3400e134:	340db3b8 	.word	0x340db3b8
3400e138:	340dbe10 	.word	0x340dbe10
3400e13c:	56021c00 	.word	0x56021c00
3400e140:	56020800 	.word	0x56020800
3400e144:	56028000 	.word	0x56028000

3400e148 <BSP_I2C1_WriteReg16>:
{
3400e148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400e14a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3400e14e:	9200      	str	r2, [sp, #0]
3400e150:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400e154:	460a      	mov	r2, r1
3400e156:	2302      	movs	r3, #2
3400e158:	4601      	mov	r1, r0
3400e15a:	4808      	ldr	r0, [pc, #32]	@ (3400e17c <BSP_I2C1_WriteReg16+0x34>)
3400e15c:	f004 ffba 	bl	340130d4 <HAL_I2C_Mem_Write>
    ret = BSP_ERROR_NONE;
3400e160:	2300      	movs	r3, #0
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400e162:	b140      	cbz	r0, 3400e176 <BSP_I2C1_WriteReg16+0x2e>
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3400e164:	4805      	ldr	r0, [pc, #20]	@ (3400e17c <BSP_I2C1_WriteReg16+0x34>)
3400e166:	f005 f984 	bl	34013472 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3400e16a:	2804      	cmp	r0, #4
3400e16c:	bf14      	ite	ne
3400e16e:	f06f 0303 	mvnne.w	r3, #3
3400e172:	f06f 0365 	mvneq.w	r3, #101	@ 0x65
}
3400e176:	4618      	mov	r0, r3
3400e178:	b004      	add	sp, #16
3400e17a:	bd10      	pop	{r4, pc}
3400e17c:	340db3b8 	.word	0x340db3b8

3400e180 <BSP_I2C1_ReadReg16>:
{
3400e180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400e182:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3400e186:	9200      	str	r2, [sp, #0]
3400e188:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400e18c:	460a      	mov	r2, r1
3400e18e:	2302      	movs	r3, #2
3400e190:	4601      	mov	r1, r0
3400e192:	4808      	ldr	r0, [pc, #32]	@ (3400e1b4 <BSP_I2C1_ReadReg16+0x34>)
3400e194:	f005 f882 	bl	3401329c <HAL_I2C_Mem_Read>
    ret = BSP_ERROR_NONE;
3400e198:	2300      	movs	r3, #0
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400e19a:	b140      	cbz	r0, 3400e1ae <BSP_I2C1_ReadReg16+0x2e>
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3400e19c:	4805      	ldr	r0, [pc, #20]	@ (3400e1b4 <BSP_I2C1_ReadReg16+0x34>)
3400e19e:	f005 f968 	bl	34013472 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3400e1a2:	2804      	cmp	r0, #4
3400e1a4:	bf14      	ite	ne
3400e1a6:	f06f 0303 	mvnne.w	r3, #3
3400e1aa:	f06f 0365 	mvneq.w	r3, #101	@ 0x65
}
3400e1ae:	4618      	mov	r0, r3
3400e1b0:	b004      	add	sp, #16
3400e1b2:	bd10      	pop	{r4, pc}
3400e1b4:	340db3b8 	.word	0x340db3b8

3400e1b8 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
3400e1b8:	f00f b8b6 	b.w	3401d328 <HAL_GetTick>

3400e1bc <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400e1bc:	4b04      	ldr	r3, [pc, #16]	@ (3400e1d0 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400e1be:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400e1c0:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400e1c4:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400e1c8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400e1ca:	9b01      	ldr	r3, [sp, #4]
}
3400e1cc:	b002      	add	sp, #8
3400e1ce:	4770      	bx	lr
3400e1d0:	56028000 	.word	0x56028000

3400e1d4 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400e1d4:	b918      	cbnz	r0, 3400e1de <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat =  Lcd_Ctx[Instance].PixelFormat;
3400e1d6:	4b03      	ldr	r3, [pc, #12]	@ (3400e1e4 <BSP_LCD_GetPixelFormat+0x10>)
3400e1d8:	68db      	ldr	r3, [r3, #12]
3400e1da:	600b      	str	r3, [r1, #0]
3400e1dc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400e1de:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400e1e2:	4770      	bx	lr
3400e1e4:	340dbe14 	.word	0x340dbe14

3400e1e8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
3400e1e8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;
  LTDC_LayerCfgTypeDef *pLayerCfg;

  if(Instance >= LCD_INSTANCES_NBR)
3400e1ea:	bb08      	cbnz	r0, 3400e230 <BSP_LCD_SetActiveLayer+0x48>
  else
  {
    pLayerCfg = &hlcd_ltdc.LayerCfg[LayerIndex];

    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400e1ec:	2434      	movs	r4, #52	@ 0x34
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
3400e1ee:	4b12      	ldr	r3, [pc, #72]	@ (3400e238 <BSP_LCD_SetActiveLayer+0x50>)
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400e1f0:	4a12      	ldr	r2, [pc, #72]	@ (3400e23c <BSP_LCD_SetActiveLayer+0x54>)
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
3400e1f2:	6099      	str	r1, [r3, #8]
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400e1f4:	fb04 2101 	mla	r1, r4, r1, r2
3400e1f8:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
3400e1fa:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize = pLayerCfg->ImageHeight;
3400e1fc:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
3400e1fe:	605a      	str	r2, [r3, #4]

    if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB565)
3400e200:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
3400e202:	2a04      	cmp	r2, #4
3400e204:	d104      	bne.n	3400e210 <BSP_LCD_SetActiveLayer+0x28>
    {
      Lcd_Ctx[Instance].BppFactor = 2;
3400e206:	2202      	movs	r2, #2
3400e208:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB565;
    }
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
    {
      Lcd_Ctx[Instance].BppFactor = 2;
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
3400e20a:	60da      	str	r2, [r3, #12]
  int32_t ret = BSP_ERROR_NONE;
3400e20c:	2000      	movs	r0, #0
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
    }
  }

  return ret;
}
3400e20e:	bd10      	pop	{r4, pc}
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
3400e210:	2a08      	cmp	r2, #8
3400e212:	d103      	bne.n	3400e21c <BSP_LCD_SetActiveLayer+0x34>
      Lcd_Ctx[Instance].BppFactor = 2;
3400e214:	2202      	movs	r2, #2
3400e216:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
3400e218:	2204      	movs	r2, #4
3400e21a:	e7f6      	b.n	3400e20a <BSP_LCD_SetActiveLayer+0x22>
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB888)
3400e21c:	2a06      	cmp	r2, #6
3400e21e:	d103      	bne.n	3400e228 <BSP_LCD_SetActiveLayer+0x40>
      Lcd_Ctx[Instance].BppFactor = 3;
3400e220:	2203      	movs	r2, #3
3400e222:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400e224:	2201      	movs	r2, #1
3400e226:	e7f0      	b.n	3400e20a <BSP_LCD_SetActiveLayer+0x22>
      Lcd_Ctx[Instance].BppFactor = 4;
3400e228:	2204      	movs	r2, #4
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
3400e22a:	e9c3 0203 	strd	r0, r2, [r3, #12]
3400e22e:	e7ed      	b.n	3400e20c <BSP_LCD_SetActiveLayer+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400e230:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400e234:	e7eb      	b.n	3400e20e <BSP_LCD_SetActiveLayer+0x26>
3400e236:	bf00      	nop
3400e238:	340dbe14 	.word	0x340dbe14
3400e23c:	340dbe34 	.word	0x340dbe34

3400e240 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400e240:	b918      	cbnz	r0, 3400e24a <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
3400e242:	4b03      	ldr	r3, [pc, #12]	@ (3400e250 <BSP_LCD_GetXSize+0x10>)
3400e244:	681b      	ldr	r3, [r3, #0]
3400e246:	600b      	str	r3, [r1, #0]
3400e248:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400e24a:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400e24e:	4770      	bx	lr
3400e250:	340dbe14 	.word	0x340dbe14

3400e254 <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400e254:	b918      	cbnz	r0, 3400e25e <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
3400e256:	4b03      	ldr	r3, [pc, #12]	@ (3400e264 <BSP_LCD_GetYSize+0x10>)
3400e258:	685b      	ldr	r3, [r3, #4]
3400e25a:	600b      	str	r3, [r1, #0]
3400e25c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400e25e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400e262:	4770      	bx	lr
3400e264:	340dbe14 	.word	0x340dbe14

3400e268 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
3400e268:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400e26a:	2734      	movs	r7, #52	@ 0x34
3400e26c:	4d0f      	ldr	r5, [pc, #60]	@ (3400e2ac <BSP_LCD_ReadPixel+0x44>)
3400e26e:	0146      	lsls	r6, r0, #5
3400e270:	eb05 1040 	add.w	r0, r5, r0, lsl #5
3400e274:	6884      	ldr	r4, [r0, #8]
3400e276:	480e      	ldr	r0, [pc, #56]	@ (3400e2b0 <BSP_LCD_ReadPixel+0x48>)
  {
    /* Read data value from RAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e278:	59ad      	ldr	r5, [r5, r6]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400e27a:	fb07 0004 	mla	r0, r7, r4, r0
3400e27e:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e280:	fb05 1202 	mla	r2, r5, r2, r1
3400e284:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400e286:	b924      	cbnz	r4, 3400e292 <BSP_LCD_ReadPixel+0x2a>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e288:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    /* Read data value from RAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
  }

  return BSP_ERROR_NONE;
}
3400e28c:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e28e:	601a      	str	r2, [r3, #0]
}
3400e290:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
3400e292:	2c06      	cmp	r4, #6
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e294:	bf05      	ittet	eq
3400e296:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
3400e29a:	5812      	ldreq	r2, [r2, r0]
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e29c:	f830 2012 	ldrhne.w	r2, [r0, r2, lsl #1]
    *Color = CONVERTARGB88882RGB888(*Color);
3400e2a0:	f022 427f 	biceq.w	r2, r2, #4278190080	@ 0xff000000
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400e2a4:	bf18      	it	ne
3400e2a6:	b292      	uxthne	r2, r2
3400e2a8:	e7f0      	b.n	3400e28c <BSP_LCD_ReadPixel+0x24>
3400e2aa:	bf00      	nop
3400e2ac:	340dbe14 	.word	0x340dbe14
3400e2b0:	340dbe34 	.word	0x340dbe34

3400e2b4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
3400e2b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400e2b8:	2734      	movs	r7, #52	@ 0x34
3400e2ba:	4e24      	ldr	r6, [pc, #144]	@ (3400e34c <BSP_LCD_WritePixel+0x98>)
3400e2bc:	ea4f 1c40 	mov.w	ip, r0, lsl #5
3400e2c0:	eb06 1040 	add.w	r0, r6, r0, lsl #5
3400e2c4:	6884      	ldr	r4, [r0, #8]
3400e2c6:	4d22      	ldr	r5, [pc, #136]	@ (3400e350 <BSP_LCD_WritePixel+0x9c>)
3400e2c8:	fb07 5404 	mla	r4, r7, r4, r5
3400e2cc:	f8d4 8048 	ldr.w	r8, [r4, #72]	@ 0x48
  {
    /* Write data value to RAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
3400e2d0:	f8d4 e05c 	ldr.w	lr, [r4, #92]	@ 0x5c
3400e2d4:	f856 400c 	ldr.w	r4, [r6, ip]
3400e2d8:	fb04 1402 	mla	r4, r4, r2, r1
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400e2dc:	f1b8 0f00 	cmp.w	r8, #0
3400e2e0:	d104      	bne.n	3400e2ec <BSP_LCD_WritePixel+0x38>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
3400e2e2:	f84e 3024 	str.w	r3, [lr, r4, lsl #2]
    /* Write data value to RAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
  }

  return BSP_ERROR_NONE;
}
3400e2e6:	2000      	movs	r0, #0
3400e2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
3400e2ec:	f1b8 0f06 	cmp.w	r8, #6
3400e2f0:	d127      	bne.n	3400e342 <BSP_LCD_WritePixel+0x8e>
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-3U)) = (uint8_t) (Color);
3400e2f2:	fa5f f883 	uxtb.w	r8, r3
3400e2f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
3400e2fa:	f1ae 0e03 	sub.w	lr, lr, #3
3400e2fe:	f804 800e 	strb.w	r8, [r4, lr]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
3400e302:	f856 400c 	ldr.w	r4, [r6, ip]
3400e306:	f3c3 2807 	ubfx	r8, r3, #8, #8
3400e30a:	fb04 1402 	mla	r4, r4, r2, r1
3400e30e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
3400e312:	6884      	ldr	r4, [r0, #8]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
3400e314:	f3c3 4307 	ubfx	r3, r3, #16, #8
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
3400e318:	fb07 5e04 	mla	lr, r7, r4, r5
3400e31c:	f8de e05c 	ldr.w	lr, [lr, #92]	@ 0x5c
3400e320:	f1ae 0e02 	sub.w	lr, lr, #2
3400e324:	f809 800e 	strb.w	r8, [r9, lr]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
3400e328:	f856 400c 	ldr.w	r4, [r6, ip]
3400e32c:	fb04 1202 	mla	r2, r4, r2, r1
3400e330:	6881      	ldr	r1, [r0, #8]
3400e332:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400e336:	fb07 5501 	mla	r5, r7, r1, r5
3400e33a:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
3400e33c:	3901      	subs	r1, #1
3400e33e:	5453      	strb	r3, [r2, r1]
3400e340:	e7d1      	b.n	3400e2e6 <BSP_LCD_WritePixel+0x32>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
3400e342:	b29b      	uxth	r3, r3
3400e344:	f82e 3014 	strh.w	r3, [lr, r4, lsl #1]
3400e348:	e7cd      	b.n	3400e2e6 <BSP_LCD_WritePixel+0x32>
3400e34a:	bf00      	nop
3400e34c:	340dbe14 	.word	0x340dbe14
3400e350:	340dbe34 	.word	0x340dbe34

3400e354 <BSP_LCD_FillRGBRect>:
{
3400e354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e358:	4680      	mov	r8, r0
3400e35a:	460e      	mov	r6, r1
3400e35c:	4614      	mov	r4, r2
3400e35e:	461d      	mov	r5, r3
  for(i = 0; i < Height; i++)
3400e360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400e362:	eb03 0902 	add.w	r9, r3, r2
      pdata += Lcd_Ctx[Instance].BppFactor;
3400e366:	4b0d      	ldr	r3, [pc, #52]	@ (3400e39c <BSP_LCD_FillRGBRect+0x48>)
3400e368:	eb03 1a40 	add.w	sl, r3, r0, lsl #5
  for(i = 0; i < Height; i++)
3400e36c:	454c      	cmp	r4, r9
3400e36e:	d012      	beq.n	3400e396 <BSP_LCD_FillRGBRect+0x42>
3400e370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400e372:	4637      	mov	r7, r6
3400e374:	eb03 0b06 	add.w	fp, r3, r6
3400e378:	e009      	b.n	3400e38e <BSP_LCD_FillRGBRect+0x3a>
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
3400e37a:	682b      	ldr	r3, [r5, #0]
3400e37c:	4639      	mov	r1, r7
3400e37e:	4622      	mov	r2, r4
3400e380:	4640      	mov	r0, r8
3400e382:	f7ff ff97 	bl	3400e2b4 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
3400e386:	f8da 3010 	ldr.w	r3, [sl, #16]
3400e38a:	3701      	adds	r7, #1
3400e38c:	441d      	add	r5, r3
    for(j = 0; j < Width; j++)
3400e38e:	455f      	cmp	r7, fp
3400e390:	d1f3      	bne.n	3400e37a <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
3400e392:	3401      	adds	r4, #1
3400e394:	e7ea      	b.n	3400e36c <BSP_LCD_FillRGBRect+0x18>
}
3400e396:	2000      	movs	r0, #0
3400e398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400e39c:	340dbe14 	.word	0x340dbe14

3400e3a0 <BSP_LCD_DrawBitmap>:
{
3400e3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e3a4:	2634      	movs	r6, #52	@ 0x34
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
3400e3a6:	f8d3 4012 	ldr.w	r4, [r3, #18]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e3aa:	4f39      	ldr	r7, [pc, #228]	@ (3400e490 <BSP_LCD_DrawBitmap+0xf0>)
3400e3ac:	ea4f 1840 	mov.w	r8, r0, lsl #5
{
3400e3b0:	b085      	sub	sp, #20
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
3400e3b2:	9402      	str	r4, [sp, #8]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e3b4:	f857 4008 	ldr.w	r4, [r7, r8]
3400e3b8:	eb07 1040 	add.w	r0, r7, r0, lsl #5
3400e3bc:	fb04 1202 	mla	r2, r4, r2, r1
3400e3c0:	6904      	ldr	r4, [r0, #16]
3400e3c2:	4934      	ldr	r1, [pc, #208]	@ (3400e494 <BSP_LCD_DrawBitmap+0xf4>)
3400e3c4:	6880      	ldr	r0, [r0, #8]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
3400e3c6:	8b9d      	ldrh	r5, [r3, #28]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e3c8:	fb06 1100 	mla	r1, r6, r0, r1
3400e3cc:	6dce      	ldr	r6, [r1, #92]	@ 0x5c
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
3400e3ce:	f8d3 c00a 	ldr.w	ip, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400e3d2:	fb04 6602 	mla	r6, r4, r2, r6
  if ((bit_pixel/8U) == 4U)
3400e3d6:	f1a5 0220 	sub.w	r2, r5, #32
3400e3da:	2a07      	cmp	r2, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
3400e3dc:	f8d3 a016 	ldr.w	sl, [r3, #22]
  if ((bit_pixel/8U) == 4U)
3400e3e0:	d91b      	bls.n	3400e41a <BSP_LCD_DrawBitmap+0x7a>
  else if ((bit_pixel/8U) == 2U)
3400e3e2:	f1a5 0210 	sub.w	r2, r5, #16
    input_color_mode = DMA2D_INPUT_RGB565;
3400e3e6:	2a07      	cmp	r2, #7
3400e3e8:	bf8c      	ite	hi
3400e3ea:	f04f 0b01 	movhi.w	fp, #1
3400e3ee:	f04f 0b02 	movls.w	fp, #2
  for(index=0; index < height; index++)
3400e3f2:	f04f 0900 	mov.w	r9, #0
3400e3f6:	9a02      	ldr	r2, [sp, #8]
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
3400e3f8:	08ed      	lsrs	r5, r5, #3
3400e3fa:	4355      	muls	r5, r2
3400e3fc:	f10a 32ff 	add.w	r2, sl, #4294967295
3400e400:	fb05 cc02 	mla	ip, r5, r2, ip
3400e404:	eb03 040c 	add.w	r4, r3, ip
    pbmp -= width*(bit_pixel/8U);
3400e408:	426b      	negs	r3, r5
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
    break;
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
3400e40a:	4d23      	ldr	r5, [pc, #140]	@ (3400e498 <BSP_LCD_DrawBitmap+0xf8>)
    pbmp -= width*(bit_pixel/8U);
3400e40c:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
3400e40e:	45d1      	cmp	r9, sl
3400e410:	d106      	bne.n	3400e420 <BSP_LCD_DrawBitmap+0x80>
}
3400e412:	2000      	movs	r0, #0
3400e414:	b005      	add	sp, #20
3400e416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
3400e41a:	f04f 0b00 	mov.w	fp, #0
3400e41e:	e7e8      	b.n	3400e3f2 <BSP_LCD_DrawBitmap+0x52>
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e420:	eb07 0308 	add.w	r3, r7, r8
3400e424:	68db      	ldr	r3, [r3, #12]
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e426:	481c      	ldr	r0, [pc, #112]	@ (3400e498 <BSP_LCD_DrawBitmap+0xf8>)
3400e428:	3b01      	subs	r3, #1
3400e42a:	2b03      	cmp	r3, #3
3400e42c:	bf96      	itet	ls
3400e42e:	4a1b      	ldrls	r2, [pc, #108]	@ (3400e49c <BSP_LCD_DrawBitmap+0xfc>)
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e430:	2300      	movhi	r3, #0
3400e432:	5cd3      	ldrbls	r3, [r2, r3]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
3400e434:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
3400e438:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hlcd_dma2d.Init.OutputOffset = 0;
3400e43c:	2300      	movs	r3, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
3400e43e:	22ff      	movs	r2, #255	@ 0xff
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
3400e440:	e9c5 3b11 	strd	r3, fp, [r5, #68]	@ 0x44
  hlcd_dma2d.Init.OutputOffset = 0;
3400e444:	60eb      	str	r3, [r5, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
3400e446:	64eb      	str	r3, [r5, #76]	@ 0x4c
  hlcd_dma2d.Instance = DMA2D;
3400e448:	4b15      	ldr	r3, [pc, #84]	@ (3400e4a0 <BSP_LCD_DrawBitmap+0x100>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
3400e44a:	652a      	str	r2, [r5, #80]	@ 0x50
  hlcd_dma2d.Instance = DMA2D;
3400e44c:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e44e:	f003 fe1f 	bl	34012090 <HAL_DMA2D_Init>
3400e452:	b988      	cbnz	r0, 3400e478 <BSP_LCD_DrawBitmap+0xd8>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
3400e454:	2101      	movs	r1, #1
3400e456:	4628      	mov	r0, r5
3400e458:	f003 ff56 	bl	34012308 <HAL_DMA2D_ConfigLayer>
3400e45c:	b960      	cbnz	r0, 3400e478 <BSP_LCD_DrawBitmap+0xd8>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
3400e45e:	2301      	movs	r3, #1
3400e460:	4632      	mov	r2, r6
3400e462:	9300      	str	r3, [sp, #0]
3400e464:	4621      	mov	r1, r4
3400e466:	9b02      	ldr	r3, [sp, #8]
3400e468:	480b      	ldr	r0, [pc, #44]	@ (3400e498 <BSP_LCD_DrawBitmap+0xf8>)
3400e46a:	f003 fe99 	bl	340121a0 <HAL_DMA2D_Start>
3400e46e:	b918      	cbnz	r0, 3400e478 <BSP_LCD_DrawBitmap+0xd8>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400e470:	2132      	movs	r1, #50	@ 0x32
3400e472:	4809      	ldr	r0, [pc, #36]	@ (3400e498 <BSP_LCD_DrawBitmap+0xf8>)
3400e474:	f003 feca 	bl	3401220c <HAL_DMA2D_PollForTransfer>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
3400e478:	eb07 0308 	add.w	r3, r7, r8
3400e47c:	691b      	ldr	r3, [r3, #16]
3400e47e:	f857 2008 	ldr.w	r2, [r7, r8]
  for(index=0; index < height; index++)
3400e482:	f109 0901 	add.w	r9, r9, #1
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
3400e486:	fb03 6602 	mla	r6, r3, r2, r6
    pbmp -= width*(bit_pixel/8U);
3400e48a:	9b03      	ldr	r3, [sp, #12]
3400e48c:	441c      	add	r4, r3
  for(index=0; index < height; index++)
3400e48e:	e7be      	b.n	3400e40e <BSP_LCD_DrawBitmap+0x6e>
3400e490:	340dbe14 	.word	0x340dbe14
3400e494:	340dbe34 	.word	0x340dbe34
3400e498:	340dbedc 	.word	0x340dbedc
3400e49c:	3409f7c8 	.word	0x3409f7c8
3400e4a0:	58021000 	.word	0x58021000

3400e4a4 <LL_FillBuffer>:
{
3400e4a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400e4a8:	461f      	mov	r7, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e4aa:	4b34      	ldr	r3, [pc, #208]	@ (3400e57c <LL_FillBuffer+0xd8>)
{
3400e4ac:	4616      	mov	r6, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e4ae:	eb03 1340 	add.w	r3, r3, r0, lsl #5
3400e4b2:	68da      	ldr	r2, [r3, #12]
{
3400e4b4:	460d      	mov	r5, r1
3400e4b6:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
3400e4ba:	2a02      	cmp	r2, #2
3400e4bc:	d023      	beq.n	3400e506 <LL_FillBuffer+0x62>
3400e4be:	2a04      	cmp	r2, #4
3400e4c0:	d03e      	beq.n	3400e540 <LL_FillBuffer+0x9c>
3400e4c2:	2a01      	cmp	r2, #1
3400e4c4:	d054      	beq.n	3400e570 <LL_FillBuffer+0xcc>
3400e4c6:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
3400e4c8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3400e4cc:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 3400e584 <LL_FillBuffer+0xe0>
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
3400e4d0:	e9c8 3201 	strd	r3, r2, [r8, #4]
  hlcd_dma2d.Instance = DMA2D;
3400e4d4:	4b2a      	ldr	r3, [pc, #168]	@ (3400e580 <LL_FillBuffer+0xdc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e4d6:	4640      	mov	r0, r8
  hlcd_dma2d.Init.OutputOffset = OffLine;
3400e4d8:	f8c8 100c 	str.w	r1, [r8, #12]
  hlcd_dma2d.Instance = DMA2D;
3400e4dc:	f8c8 3000 	str.w	r3, [r8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400e4e0:	f003 fdd6 	bl	34012090 <HAL_DMA2D_Init>
3400e4e4:	2800      	cmp	r0, #0
3400e4e6:	d146      	bne.n	3400e576 <LL_FillBuffer+0xd2>
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
3400e4e8:	4633      	mov	r3, r6
3400e4ea:	462a      	mov	r2, r5
3400e4ec:	4621      	mov	r1, r4
3400e4ee:	4640      	mov	r0, r8
3400e4f0:	9700      	str	r7, [sp, #0]
3400e4f2:	f003 fe55 	bl	340121a0 <HAL_DMA2D_Start>
3400e4f6:	bbf0      	cbnz	r0, 3400e576 <LL_FillBuffer+0xd2>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400e4f8:	2132      	movs	r1, #50	@ 0x32
3400e4fa:	4640      	mov	r0, r8
}
3400e4fc:	b002      	add	sp, #8
3400e4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400e502:	f003 be83 	b.w	3401220c <HAL_DMA2D_PollForTransfer>
    input_color = CONVERTRGB5652ARGB8888(Color);
3400e506:	f240 1e03 	movw	lr, #259	@ 0x103
3400e50a:	f240 2c0f 	movw	ip, #527	@ 0x20f
3400e50e:	f3c4 1045 	ubfx	r0, r4, #5, #6
3400e512:	f3c4 23c4 	ubfx	r3, r4, #11, #5
3400e516:	fb0e f000 	mul.w	r0, lr, r0
3400e51a:	fb0c f303 	mul.w	r3, ip, r3
3400e51e:	f004 041f 	and.w	r4, r4, #31
3400e522:	fb0c f404 	mul.w	r4, ip, r4
3400e526:	3021      	adds	r0, #33	@ 0x21
3400e528:	3317      	adds	r3, #23
3400e52a:	0980      	lsrs	r0, r0, #6
3400e52c:	099b      	lsrs	r3, r3, #6
3400e52e:	0200      	lsls	r0, r0, #8
3400e530:	3417      	adds	r4, #23
3400e532:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
3400e536:	ea40 1094 	orr.w	r0, r0, r4, lsr #6
3400e53a:	f040 447f 	orr.w	r4, r0, #4278190080	@ 0xff000000
    break;
3400e53e:	e7c3      	b.n	3400e4c8 <LL_FillBuffer+0x24>
    input_color = CONVERTARGB44442ARGB8888(Color);
3400e540:	f3c4 3303 	ubfx	r3, r4, #12, #4
3400e544:	eb03 1003 	add.w	r0, r3, r3, lsl #4
3400e548:	f3c4 2303 	ubfx	r3, r4, #8, #4
3400e54c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
3400e550:	041b      	lsls	r3, r3, #16
3400e552:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
3400e556:	f004 000f 	and.w	r0, r4, #15
3400e55a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
3400e55e:	4303      	orrs	r3, r0
3400e560:	f3c4 1003 	ubfx	r0, r4, #4, #4
3400e564:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
3400e568:	4404      	add	r4, r0
3400e56a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    break;
3400e56e:	e7ab      	b.n	3400e4c8 <LL_FillBuffer+0x24>
    input_color = CONVERTRGB8882ARGB8888(Color);
3400e570:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
    break;
3400e574:	e7a8      	b.n	3400e4c8 <LL_FillBuffer+0x24>
}
3400e576:	b002      	add	sp, #8
3400e578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400e57c:	340dbe14 	.word	0x340dbe14
3400e580:	58021000 	.word	0x58021000
3400e584:	340dbedc 	.word	0x340dbedc

3400e588 <BSP_LCD_DrawHLine>:
{
3400e588:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400e58a:	4615      	mov	r5, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e58c:	4c0d      	ldr	r4, [pc, #52]	@ (3400e5c4 <BSP_LCD_DrawHLine+0x3c>)
3400e58e:	0146      	lsls	r6, r0, #5
{
3400e590:	461a      	mov	r2, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e592:	eb04 1340 	add.w	r3, r4, r0, lsl #5
3400e596:	59a4      	ldr	r4, [r4, r6]
3400e598:	691e      	ldr	r6, [r3, #16]
3400e59a:	fb04 1105 	mla	r1, r4, r5, r1
3400e59e:	2534      	movs	r5, #52	@ 0x34
3400e5a0:	689c      	ldr	r4, [r3, #8]
3400e5a2:	4b09      	ldr	r3, [pc, #36]	@ (3400e5c8 <BSP_LCD_DrawHLine+0x40>)
3400e5a4:	fb05 3304 	mla	r3, r5, r4, r3
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
3400e5a8:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e5aa:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
3400e5ac:	9b06      	ldr	r3, [sp, #24]
3400e5ae:	fb06 5101 	mla	r1, r6, r1, r5
3400e5b2:	9301      	str	r3, [sp, #4]
3400e5b4:	9400      	str	r4, [sp, #0]
3400e5b6:	2301      	movs	r3, #1
3400e5b8:	f7ff ff74 	bl	3400e4a4 <LL_FillBuffer>
}
3400e5bc:	4620      	mov	r0, r4
3400e5be:	b002      	add	sp, #8
3400e5c0:	bd70      	pop	{r4, r5, r6, pc}
3400e5c2:	bf00      	nop
3400e5c4:	340dbe14 	.word	0x340dbe14
3400e5c8:	340dbe34 	.word	0x340dbe34

3400e5cc <BSP_LCD_DrawVLine>:
{
3400e5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e5ce:	2734      	movs	r7, #52	@ 0x34
3400e5d0:	4d0c      	ldr	r5, [pc, #48]	@ (3400e604 <BSP_LCD_DrawVLine+0x38>)
3400e5d2:	0146      	lsls	r6, r0, #5
3400e5d4:	eb05 1440 	add.w	r4, r5, r0, lsl #5
3400e5d8:	59ad      	ldr	r5, [r5, r6]
3400e5da:	6926      	ldr	r6, [r4, #16]
3400e5dc:	fb02 1105 	mla	r1, r2, r5, r1
3400e5e0:	68a4      	ldr	r4, [r4, #8]
3400e5e2:	4a09      	ldr	r2, [pc, #36]	@ (3400e608 <BSP_LCD_DrawVLine+0x3c>)
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
3400e5e4:	3d01      	subs	r5, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e5e6:	fb07 2204 	mla	r2, r7, r4, r2
3400e5ea:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
3400e5ec:	9a08      	ldr	r2, [sp, #32]
3400e5ee:	fb06 4101 	mla	r1, r6, r1, r4
3400e5f2:	9201      	str	r2, [sp, #4]
3400e5f4:	9500      	str	r5, [sp, #0]
3400e5f6:	2201      	movs	r2, #1
3400e5f8:	f7ff ff54 	bl	3400e4a4 <LL_FillBuffer>
}
3400e5fc:	2000      	movs	r0, #0
3400e5fe:	b003      	add	sp, #12
3400e600:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e602:	bf00      	nop
3400e604:	340dbe14 	.word	0x340dbe14
3400e608:	340dbe34 	.word	0x340dbe34

3400e60c <BSP_LCD_FillRect>:
{
3400e60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400e60e:	4615      	mov	r5, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e610:	2734      	movs	r7, #52	@ 0x34
{
3400e612:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e614:	4b0c      	ldr	r3, [pc, #48]	@ (3400e648 <BSP_LCD_FillRect+0x3c>)
3400e616:	0146      	lsls	r6, r0, #5
3400e618:	eb03 1440 	add.w	r4, r3, r0, lsl #5
3400e61c:	599b      	ldr	r3, [r3, r6]
3400e61e:	6926      	ldr	r6, [r4, #16]
3400e620:	fb05 1503 	mla	r5, r5, r3, r1
3400e624:	68a1      	ldr	r1, [r4, #8]
3400e626:	4c09      	ldr	r4, [pc, #36]	@ (3400e64c <BSP_LCD_FillRect+0x40>)
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3400e628:	1a9b      	subs	r3, r3, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400e62a:	fb07 4401 	mla	r4, r7, r1, r4
3400e62e:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3400e630:	9c09      	ldr	r4, [sp, #36]	@ 0x24
3400e632:	9300      	str	r3, [sp, #0]
3400e634:	fb06 1105 	mla	r1, r6, r5, r1
3400e638:	9b08      	ldr	r3, [sp, #32]
3400e63a:	9401      	str	r4, [sp, #4]
3400e63c:	f7ff ff32 	bl	3400e4a4 <LL_FillBuffer>
}
3400e640:	2000      	movs	r0, #0
3400e642:	b003      	add	sp, #12
3400e644:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400e646:	bf00      	nop
3400e648:	340dbe14 	.word	0x340dbe14
3400e64c:	340dbe34 	.word	0x340dbe34

3400e650 <MX_LTDC_Init>:
{
3400e650:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
3400e652:	2400      	movs	r4, #0
3400e654:	4d0c      	ldr	r5, [pc, #48]	@ (3400e688 <MX_LTDC_Init+0x38>)
  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
3400e656:	2603      	movs	r6, #3
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
3400e658:	e9c0 5400 	strd	r5, r4, [r0]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
3400e65c:	2507      	movs	r5, #7
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
3400e65e:	194f      	adds	r7, r1, r5
  hltdc->Init.TotalWidth         = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP + RK050HR18_HFP - 1U;
3400e660:	310b      	adds	r1, #11
3400e662:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hltdc->Init.Backcolor.Blue  = 0x0;
3400e664:	8684      	strh	r4, [r0, #52]	@ 0x34
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
3400e666:	1951      	adds	r1, r2, r5
  hltdc->Init.Backcolor.Red   = 0x0;
3400e668:	f880 4036 	strb.w	r4, [r0, #54]	@ 0x36
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
3400e66c:	320b      	adds	r2, #11
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
3400e66e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
3400e672:	6104      	str	r4, [r0, #16]
  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
3400e674:	6146      	str	r6, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
3400e676:	61c5      	str	r5, [r0, #28]
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
3400e678:	6247      	str	r7, [r0, #36]	@ 0x24
  hltdc->Init.VerticalSync       = (uint32_t)RK050HR18_VSYNC - 1U;
3400e67a:	6186      	str	r6, [r0, #24]
  hltdc->Init.AccumulatedVBP     = (uint32_t)RK050HR18_VSYNC + (uint32_t)RK050HR18_VBP - 1U;
3400e67c:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
3400e67e:	6281      	str	r1, [r0, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
3400e680:	6302      	str	r2, [r0, #48]	@ 0x30
}
3400e682:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_LTDC_Init(hltdc);
3400e684:	f005 ba28 	b.w	34013ad8 <HAL_LTDC_Init>
3400e688:	58001000 	.word	0x58001000

3400e68c <MX_LTDC_ClockConfig>:
{
3400e68c:	b500      	push	{lr}
3400e68e:	b0e5      	sub	sp, #404	@ 0x194
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3400e690:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3400e694:	2100      	movs	r1, #0
3400e696:	4668      	mov	r0, sp
3400e698:	f010 f9f2 	bl	3401ea80 <memset>
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
3400e69c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400e6a0:	2300      	movs	r3, #0
3400e6a2:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
3400e6a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400e6aa:	f04f 5140 	mov.w	r1, #805306368	@ 0x30000000
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
3400e6ae:	9346      	str	r3, [sp, #280]	@ 0x118
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400e6b0:	2302      	movs	r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400e6b2:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400e6b4:	e9cd 1320 	strd	r1, r3, [sp, #128]	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400e6b8:	f006 feb0 	bl	3401541c <HAL_RCCEx_PeriphCLKConfig>
}
3400e6bc:	3800      	subs	r0, #0
3400e6be:	bf18      	it	ne
3400e6c0:	2001      	movne	r0, #1
3400e6c2:	b065      	add	sp, #404	@ 0x194
3400e6c4:	f85d fb04 	ldr.w	pc, [sp], #4

3400e6c8 <BSP_LCD_InitEx>:
{
3400e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400e6cc:	4614      	mov	r4, r2
  MX_LTDC_LayerConfig_t config = {0};
3400e6ce:	2218      	movs	r2, #24
{
3400e6d0:	460e      	mov	r6, r1
3400e6d2:	b08d      	sub	sp, #52	@ 0x34
3400e6d4:	4605      	mov	r5, r0
  MX_LTDC_LayerConfig_t config = {0};
3400e6d6:	2100      	movs	r1, #0
3400e6d8:	eb0d 0002 	add.w	r0, sp, r2
{
3400e6dc:	4699      	mov	r9, r3
  MX_LTDC_LayerConfig_t config = {0};
3400e6de:	f010 f9cf 	bl	3401ea80 <memset>
  if ((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
3400e6e2:	2e01      	cmp	r6, #1
3400e6e4:	f200 80da 	bhi.w	3400e89c <BSP_LCD_InitEx+0x1d4>
3400e6e8:	2d00      	cmp	r5, #0
3400e6ea:	f040 80d7 	bne.w	3400e89c <BSP_LCD_InitEx+0x1d4>
3400e6ee:	2c02      	cmp	r4, #2
3400e6f0:	f240 80ad 	bls.w	3400e84e <BSP_LCD_InitEx+0x186>
      (PixelFormat != LCD_PIXEL_FORMAT_ARGB8888) &&  (PixelFormat != LCD_PIXEL_FORMAT_ARGB4444)))
3400e6f4:	2c04      	cmp	r4, #4
3400e6f6:	f040 80d1 	bne.w	3400e89c <BSP_LCD_InitEx+0x1d4>
3400e6fa:	2302      	movs	r3, #2
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB4444;
3400e6fc:	2508      	movs	r5, #8
      Lcd_Ctx[Instance].BppFactor = 2U;
3400e6fe:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 3400e8d4 <BSP_LCD_InitEx+0x20c>
    hlcd_ltdc.Instance = LTDC;
3400e702:	4a68      	ldr	r2, [pc, #416]	@ (3400e8a4 <BSP_LCD_InitEx+0x1dc>)
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
3400e704:	e9c8 4303 	strd	r4, r3, [r8, #12]
  WRITE_REG(RCC->APB5ENSR, Periphs);
3400e708:	2402      	movs	r4, #2
    Lcd_Ctx[Instance].YSize  = Height;
3400e70a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
3400e70c:	4e66      	ldr	r6, [pc, #408]	@ (3400e8a8 <BSP_LCD_InitEx+0x1e0>)
3400e70e:	f8c8 3004 	str.w	r3, [r8, #4]
    hlcd_ltdc.Instance = LTDC;
3400e712:	4b66      	ldr	r3, [pc, #408]	@ (3400e8ac <BSP_LCD_InitEx+0x1e4>)
    hlcd_dma2d.Instance = DMA2D;
3400e714:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 3400e8d8 <BSP_LCD_InitEx+0x210>
    hlcd_ltdc.Instance = LTDC;
3400e718:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
3400e71a:	4b65      	ldr	r3, [pc, #404]	@ (3400e8b0 <BSP_LCD_InitEx+0x1e8>)
    Lcd_Ctx[Instance].XSize  = Width;
3400e71c:	f8c8 9000 	str.w	r9, [r8]
    hlcd_dma2d.Instance = DMA2D;
3400e720:	f8cb 3000 	str.w	r3, [fp]
3400e724:	f8c6 4a7c 	str.w	r4, [r6, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
3400e728:	f8d6 327c 	ldr.w	r3, [r6, #636]	@ 0x27c
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400e72c:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 3400e8dc <BSP_LCD_InitEx+0x214>
  tmpreg = READ_REG(RCC->APB5ENR);
3400e730:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
3400e732:	9b00      	ldr	r3, [sp, #0]
    /* PB13 LCD_CLK     */
    /* PQ4  LCD_INT     */
    /* PQ6  LCD_BL_CTRL */
    /* PE1  NRST        */

    __HAL_RCC_GPIOA_CLK_ENABLE();
3400e734:	2001      	movs	r0, #1
  WRITE_REG(RCC->APB5RSTSR, Periphs);
3400e736:	f8c6 4a3c 	str.w	r4, [r6, #2620]	@ 0xa3c
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400e73a:	f8ca 423c 	str.w	r4, [sl, #572]	@ 0x23c
3400e73e:	f7ff fd3d 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
3400e742:	4620      	mov	r0, r4
3400e744:	f7ff fd3a 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
3400e748:	2008      	movs	r0, #8
3400e74a:	f7ff fd37 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
3400e74e:	2010      	movs	r0, #16
3400e750:	f7ff fd34 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOG_CLK_ENABLE();
3400e754:	2040      	movs	r0, #64	@ 0x40
3400e756:	f7ff fd31 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
3400e75a:	2080      	movs	r0, #128	@ 0x80
3400e75c:	f7ff fd2e 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOQ_CLK_ENABLE();
3400e760:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
3400e764:	f7ff fd2a 	bl	3400e1bc <LL_AHB4_GRP1_EnableClock>

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
3400e768:	2300      	movs	r3, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;

    /* G3, G2, B7, B1, B6, R5 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e76a:	270e      	movs	r7, #14
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400e76c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
3400e770:	f248 1387 	movw	r3, #33159	@ 0x8187
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
3400e774:	484f      	ldr	r0, [pc, #316]	@ (3400e8b4 <BSP_LCD_InitEx+0x1ec>)
3400e776:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
3400e778:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e77a:	9705      	str	r7, [sp, #20]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
3400e77c:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
3400e77e:	f003 fea9 	bl	340124d4 <HAL_GPIO_Init>

    /* LCD_CLK, LCD_HSYNC B2, R3, G6, G5, G4 */
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
3400e782:	f64f 0314 	movw	r3, #63508	@ 0xf814
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
3400e786:	484c      	ldr	r0, [pc, #304]	@ (3400e8b8 <BSP_LCD_InitEx+0x1f0>)
3400e788:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
3400e78a:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e78c:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
3400e78e:	f003 fea1 	bl	340124d4 <HAL_GPIO_Init>

    /* R7, R1, R2 */
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
3400e792:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3400e796:	4849      	ldr	r0, [pc, #292]	@ (3400e8bc <BSP_LCD_InitEx+0x1f4>)
3400e798:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
3400e79a:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e79c:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3400e79e:	f003 fe99 	bl	340124d4 <HAL_GPIO_Init>

    /* LCD_VSYNC */
    gpio_init_structure.Pin       = GPIO_PIN_11;
3400e7a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e7a6:	4846      	ldr	r0, [pc, #280]	@ (3400e8c0 <BSP_LCD_InitEx+0x1f8>)
3400e7a8:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_11;
3400e7aa:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e7ac:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e7ae:	f003 fe91 	bl	340124d4 <HAL_GPIO_Init>

    /* R0, G1, B3, G7, R6, G0 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
3400e7b2:	f641 1343 	movw	r3, #6467	@ 0x1943
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e7b6:	4843      	ldr	r0, [pc, #268]	@ (3400e8c4 <BSP_LCD_InitEx+0x1fc>)
3400e7b8:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
3400e7ba:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e7bc:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e7be:	f003 fe89 	bl	340124d4 <HAL_GPIO_Init>

    /* B4, R4, B5 */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3400e7c2:	2358      	movs	r3, #88	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400e7c4:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);

    /* NRST */
    gpio_init_structure.Pin       = GPIO_PIN_1;
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e7c6:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3400e7c8:	483f      	ldr	r0, [pc, #252]	@ (3400e8c8 <BSP_LCD_InitEx+0x200>)
3400e7ca:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3400e7cc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3400e7ce:	f003 fe81 	bl	340124d4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e7d2:	483b      	ldr	r0, [pc, #236]	@ (3400e8c0 <BSP_LCD_InitEx+0x1f8>)
3400e7d4:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_1;
3400e7d6:	9401      	str	r4, [sp, #4]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e7d8:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400e7da:	f003 fe7b 	bl	340124d4 <HAL_GPIO_Init>

    /* LCD_ONOFF, LCD_BL_CTRL */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_6;
3400e7de:	2348      	movs	r3, #72	@ 0x48
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3400e7e0:	483a      	ldr	r0, [pc, #232]	@ (3400e8cc <BSP_LCD_InitEx+0x204>)
3400e7e2:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e7e4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3400e7e8:	f003 fe74 	bl	340124d4 <HAL_GPIO_Init>

    /* LCD_DE */
    gpio_init_structure.Pin       = GPIO_PIN_13;
3400e7ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e7f0:	4834      	ldr	r0, [pc, #208]	@ (3400e8c4 <BSP_LCD_InitEx+0x1fc>)
3400e7f2:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400e7f4:	e9cd 3701 	strd	r3, r7, [sp, #4]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400e7f8:	f003 fe6c 	bl	340124d4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_3, GPIO_PIN_SET); /* LCD On */ /* PQ3  LCD_ONOFF   */
3400e7fc:	463a      	mov	r2, r7
3400e7fe:	2108      	movs	r1, #8
3400e800:	4832      	ldr	r0, [pc, #200]	@ (3400e8cc <BSP_LCD_InitEx+0x204>)
3400e802:	f004 f9bf 	bl	34012b84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); /* Display Enable */ /* PG13 LCD_DE      */
3400e806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400e80a:	463a      	mov	r2, r7
3400e80c:	4619      	mov	r1, r3
3400e80e:	482d      	ldr	r0, [pc, #180]	@ (3400e8c4 <BSP_LCD_InitEx+0x1fc>)
3400e810:	f004 f9b8 	bl	34012b84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_6, GPIO_PIN_SET); /* 100% Brightness */ /* PQ6  LCD_BL_CTRL */
3400e814:	463a      	mov	r2, r7
3400e816:	2140      	movs	r1, #64	@ 0x40
3400e818:	482c      	ldr	r0, [pc, #176]	@ (3400e8cc <BSP_LCD_InitEx+0x204>)
3400e81a:	f004 f9b3 	bl	34012b84 <HAL_GPIO_WritePin>
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
3400e81e:	f8db 3000 	ldr.w	r3, [fp]
3400e822:	4a23      	ldr	r2, [pc, #140]	@ (3400e8b0 <BSP_LCD_InitEx+0x1e8>)
3400e824:	4293      	cmp	r3, r2
3400e826:	d109      	bne.n	3400e83c <BSP_LCD_InitEx+0x174>
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400e828:	f8c6 4a60 	str.w	r4, [r6, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400e82c:	f8d6 3260 	ldr.w	r3, [r6, #608]	@ 0x260
3400e830:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400e832:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400e834:	f8c6 4a20 	str.w	r4, [r6, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400e838:	f8ca 4220 	str.w	r4, [sl, #544]	@ 0x220
    if (MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
3400e83c:	481b      	ldr	r0, [pc, #108]	@ (3400e8ac <BSP_LCD_InitEx+0x1e4>)
3400e83e:	f7ff ff25 	bl	3400e68c <MX_LTDC_ClockConfig>
3400e842:	b170      	cbz	r0, 3400e862 <BSP_LCD_InitEx+0x19a>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400e844:	f06f 0003 	mvn.w	r0, #3
}
3400e848:	b00d      	add	sp, #52	@ 0x34
3400e84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (PixelFormat == LCD_PIXEL_FORMAT_RGB565)
3400e84e:	d005      	beq.n	3400e85c <BSP_LCD_InitEx+0x194>
    else if  (PixelFormat == LCD_PIXEL_FORMAT_RGB888)
3400e850:	2c01      	cmp	r4, #1
3400e852:	bf0a      	itet	eq
3400e854:	2303      	moveq	r3, #3
3400e856:	2304      	movne	r3, #4
3400e858:	2506      	moveq	r5, #6
3400e85a:	e750      	b.n	3400e6fe <BSP_LCD_InitEx+0x36>
3400e85c:	4623      	mov	r3, r4
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
3400e85e:	2504      	movs	r5, #4
3400e860:	e74d      	b.n	3400e6fe <BSP_LCD_InitEx+0x36>
      if (MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
3400e862:	4649      	mov	r1, r9
3400e864:	9a16      	ldr	r2, [sp, #88]	@ 0x58
3400e866:	4811      	ldr	r0, [pc, #68]	@ (3400e8ac <BSP_LCD_InitEx+0x1e4>)
3400e868:	f7ff fef2 	bl	3400e650 <MX_LTDC_Init>
3400e86c:	4601      	mov	r1, r0
3400e86e:	2800      	cmp	r0, #0
3400e870:	d1e8      	bne.n	3400e844 <BSP_LCD_InitEx+0x17c>
        config.Y1          = Height;
3400e872:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        config.X1          = Width;
3400e874:	e9cd 0906 	strd	r0, r9, [sp, #24]
        config.PixelFormat = ltdc_pixel_format;
3400e878:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
        config.Address     = LCD_LAYER_0_ADDRESS;
3400e87c:	4b14      	ldr	r3, [pc, #80]	@ (3400e8d0 <BSP_LCD_InitEx+0x208>)
        config.Y0          = 0;
3400e87e:	9008      	str	r0, [sp, #32]
        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
3400e880:	aa06      	add	r2, sp, #24
3400e882:	480a      	ldr	r0, [pc, #40]	@ (3400e8ac <BSP_LCD_InitEx+0x1e4>)
        config.Address     = LCD_LAYER_0_ADDRESS;
3400e884:	930b      	str	r3, [sp, #44]	@ 0x2c
        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
3400e886:	f7fd fd3f 	bl	3400c308 <MX_LTDC_ConfigLayer>
        Lcd_Ctx[Instance].ReloadEnable = 1U;
3400e88a:	2301      	movs	r3, #1
  int32_t ret = BSP_ERROR_NONE;
3400e88c:	2800      	cmp	r0, #0
3400e88e:	bf14      	ite	ne
3400e890:	f06f 0003 	mvnne.w	r0, #3
3400e894:	2000      	moveq	r0, #0
        Lcd_Ctx[Instance].ReloadEnable = 1U;
3400e896:	f8c8 3018 	str.w	r3, [r8, #24]
3400e89a:	e7d5      	b.n	3400e848 <BSP_LCD_InitEx+0x180>
    ret = BSP_ERROR_WRONG_PARAM;
3400e89c:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400e8a0:	e7d2      	b.n	3400e848 <BSP_LCD_InitEx+0x180>
3400e8a2:	bf00      	nop
3400e8a4:	58001000 	.word	0x58001000
3400e8a8:	56028000 	.word	0x56028000
3400e8ac:	340dbe34 	.word	0x340dbe34
3400e8b0:	58021000 	.word	0x58021000
3400e8b4:	56020000 	.word	0x56020000
3400e8b8:	56020400 	.word	0x56020400
3400e8bc:	56020c00 	.word	0x56020c00
3400e8c0:	56021000 	.word	0x56021000
3400e8c4:	56021800 	.word	0x56021800
3400e8c8:	56021c00 	.word	0x56021c00
3400e8cc:	56024000 	.word	0x56024000
3400e8d0:	34200000 	.word	0x34200000
3400e8d4:	340dbe14 	.word	0x340dbe14
3400e8d8:	340dbedc 	.word	0x340dbedc
3400e8dc:	56029000 	.word	0x56029000

3400e8e0 <BSP_LCD_Init>:
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
3400e8e0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
{
3400e8e4:	b507      	push	{r0, r1, r2, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
3400e8e6:	2202      	movs	r2, #2
3400e8e8:	9300      	str	r3, [sp, #0]
3400e8ea:	f44f 7348 	mov.w	r3, #800	@ 0x320
3400e8ee:	f7ff feeb 	bl	3400e6c8 <BSP_LCD_InitEx>
}
3400e8f2:	b003      	add	sp, #12
3400e8f4:	f85d fb04 	ldr.w	pc, [sp], #4

3400e8f8 <BSP_LCD_ConfigLayer>:
{
3400e8f8:	b508      	push	{r3, lr}
  if(Instance >= LCD_INSTANCES_NBR)
3400e8fa:	b9a8      	cbnz	r0, 3400e928 <BSP_LCD_ConfigLayer+0x30>
    if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_RGB565)
3400e8fc:	6913      	ldr	r3, [r2, #16]
3400e8fe:	2b02      	cmp	r3, #2
3400e900:	d10a      	bne.n	3400e918 <BSP_LCD_ConfigLayer+0x20>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
3400e902:	2304      	movs	r3, #4
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
3400e904:	6113      	str	r3, [r2, #16]
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
3400e906:	480a      	ldr	r0, [pc, #40]	@ (3400e930 <BSP_LCD_ConfigLayer+0x38>)
3400e908:	f7fd fcfe 	bl	3400c308 <MX_LTDC_ConfigLayer>
  int32_t ret = BSP_ERROR_NONE;
3400e90c:	2800      	cmp	r0, #0
3400e90e:	bf14      	ite	ne
3400e910:	f06f 0003 	mvnne.w	r0, #3
3400e914:	2000      	moveq	r0, #0
}
3400e916:	bd08      	pop	{r3, pc}
    else if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_ARGB4444)
3400e918:	2b04      	cmp	r3, #4
3400e91a:	d101      	bne.n	3400e920 <BSP_LCD_ConfigLayer+0x28>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_ARGB4444;
3400e91c:	2308      	movs	r3, #8
3400e91e:	e7f1      	b.n	3400e904 <BSP_LCD_ConfigLayer+0xc>
    else if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_ARGB8888)
3400e920:	2b00      	cmp	r3, #0
3400e922:	d0f0      	beq.n	3400e906 <BSP_LCD_ConfigLayer+0xe>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
3400e924:	2306      	movs	r3, #6
3400e926:	e7ed      	b.n	3400e904 <BSP_LCD_ConfigLayer+0xc>
    ret = BSP_ERROR_WRONG_PARAM;
3400e928:	f06f 0001 	mvn.w	r0, #1
3400e92c:	e7f3      	b.n	3400e916 <BSP_LCD_ConfigLayer+0x1e>
3400e92e:	bf00      	nop
3400e930:	340dbe34 	.word	0x340dbe34

3400e934 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400e934:	4b04      	ldr	r3, [pc, #16]	@ (3400e948 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400e936:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400e938:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400e93c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400e940:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400e942:	9b01      	ldr	r3, [sp, #4]
}
3400e944:	b002      	add	sp, #8
3400e946:	4770      	bx	lr
3400e948:	56028000 	.word	0x56028000

3400e94c <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400e94c:	b530      	push	{r4, r5, lr}
{
  int32_t ret;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e94e:	4c20      	ldr	r4, [pc, #128]	@ (3400e9d0 <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400e950:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e952:	78a2      	ldrb	r2, [r4, #2]
3400e954:	7861      	ldrb	r1, [r4, #1]
3400e956:	481f      	ldr	r0, [pc, #124]	@ (3400e9d4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e958:	f7ff f813 	bl	3400d982 <MX66UW1G45G_WriteEnable>
3400e95c:	b118      	cbz	r0, 3400e966 <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    XSPI_Nor_Ctx[Instance].TransferRate) != MX66UW1G45G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400e95e:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
3400e962:	b005      	add	sp, #20
3400e964:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e966:	9000      	str	r0, [sp, #0]
3400e968:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400e96c:	78a2      	ldrb	r2, [r4, #2]
3400e96e:	7861      	ldrb	r1, [r4, #1]
3400e970:	4818      	ldr	r0, [pc, #96]	@ (3400e9d4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e972:	f7ff f88f 	bl	3400da94 <MX66UW1G45G_WriteCfg2Register>
3400e976:	2800      	cmp	r0, #0
3400e978:	d1f1      	bne.n	3400e95e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e97a:	78a2      	ldrb	r2, [r4, #2]
3400e97c:	7861      	ldrb	r1, [r4, #1]
3400e97e:	4815      	ldr	r0, [pc, #84]	@ (3400e9d4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e980:	f7fe ffff 	bl	3400d982 <MX66UW1G45G_WriteEnable>
3400e984:	4603      	mov	r3, r0
3400e986:	2800      	cmp	r0, #0
3400e988:	d1e9      	bne.n	3400e95e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e98a:	2501      	movs	r5, #1
3400e98c:	9500      	str	r5, [sp, #0]
3400e98e:	78a2      	ldrb	r2, [r4, #2]
3400e990:	7861      	ldrb	r1, [r4, #1]
3400e992:	4810      	ldr	r0, [pc, #64]	@ (3400e9d4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e994:	f7ff f87e 	bl	3400da94 <MX66UW1G45G_WriteCfg2Register>
3400e998:	4604      	mov	r4, r0
3400e99a:	2800      	cmp	r0, #0
3400e99c:	d1df      	bne.n	3400e95e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400e99e:	2028      	movs	r0, #40	@ 0x28
3400e9a0:	f00e fcc4 	bl	3401d32c <HAL_Delay>
    if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400e9a4:	4622      	mov	r2, r4
3400e9a6:	4629      	mov	r1, r5
3400e9a8:	480a      	ldr	r0, [pc, #40]	@ (3400e9d4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e9aa:	f7fe fec7 	bl	3400d73c <MX66UW1G45G_AutoPollingMemReady>
3400e9ae:	4603      	mov	r3, r0
3400e9b0:	2800      	cmp	r0, #0
3400e9b2:	d1d4      	bne.n	3400e95e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400e9b4:	aa03      	add	r2, sp, #12
3400e9b6:	9200      	str	r2, [sp, #0]
3400e9b8:	4629      	mov	r1, r5
3400e9ba:	4602      	mov	r2, r0
3400e9bc:	4805      	ldr	r0, [pc, #20]	@ (3400e9d4 <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400e9be:	f7ff f8c1 	bl	3400db44 <MX66UW1G45G_ReadCfg2Register>
3400e9c2:	2800      	cmp	r0, #0
3400e9c4:	d1cb      	bne.n	3400e95e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX66UW1G45G_CR2_SOPI)
3400e9c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400e9ca:	42ab      	cmp	r3, r5
3400e9cc:	d0c9      	beq.n	3400e962 <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
3400e9ce:	e7c6      	b.n	3400e95e <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
3400e9d0:	340dbfac 	.word	0x340dbfac
3400e9d4:	340dbfb0 	.word	0x340dbfb0

3400e9d8 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400e9d8:	b530      	push	{r4, r5, lr}
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e9da:	4d27      	ldr	r5, [pc, #156]	@ (3400ea78 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
3400e9dc:	4c27      	ldr	r4, [pc, #156]	@ (3400ea7c <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400e9de:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e9e0:	4620      	mov	r0, r4
3400e9e2:	78aa      	ldrb	r2, [r5, #2]
3400e9e4:	7869      	ldrb	r1, [r5, #1]
3400e9e6:	f7fe ffcc 	bl	3400d982 <MX66UW1G45G_WriteEnable>
3400e9ea:	b118      	cbz	r0, 3400e9f4 <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400e9ec:	f06f 0004 	mvn.w	r0, #4
}
3400e9f0:	b005      	add	sp, #20
3400e9f2:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400e9f4:	9000      	str	r0, [sp, #0]
3400e9f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400e9fa:	4620      	mov	r0, r4
3400e9fc:	78aa      	ldrb	r2, [r5, #2]
3400e9fe:	7869      	ldrb	r1, [r5, #1]
3400ea00:	f7ff f848 	bl	3400da94 <MX66UW1G45G_WriteCfg2Register>
3400ea04:	2800      	cmp	r0, #0
3400ea06:	d1f1      	bne.n	3400e9ec <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400ea08:	4620      	mov	r0, r4
3400ea0a:	78aa      	ldrb	r2, [r5, #2]
3400ea0c:	7869      	ldrb	r1, [r5, #1]
3400ea0e:	f7fe ffb8 	bl	3400d982 <MX66UW1G45G_WriteEnable>
3400ea12:	4603      	mov	r3, r0
3400ea14:	2800      	cmp	r0, #0
3400ea16:	d1e9      	bne.n	3400e9ec <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400ea18:	2202      	movs	r2, #2
3400ea1a:	9200      	str	r2, [sp, #0]
3400ea1c:	4620      	mov	r0, r4
3400ea1e:	78aa      	ldrb	r2, [r5, #2]
3400ea20:	7869      	ldrb	r1, [r5, #1]
3400ea22:	f7ff f837 	bl	3400da94 <MX66UW1G45G_WriteCfg2Register>
3400ea26:	2800      	cmp	r0, #0
3400ea28:	d1e0      	bne.n	3400e9ec <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400ea2a:	2028      	movs	r0, #40	@ 0x28
3400ea2c:	f00e fc7e 	bl	3401d32c <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400ea30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3400ea34:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400ea36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400ea3a:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400ea3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400ea3e:	f00c fc91 	bl	3401b364 <HAL_XSPI_Init>
3400ea42:	b9a8      	cbnz	r0, 3400ea70 <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ea44:	2201      	movs	r2, #1
3400ea46:	4620      	mov	r0, r4
3400ea48:	4611      	mov	r1, r2
3400ea4a:	f7fe fe77 	bl	3400d73c <MX66UW1G45G_AutoPollingMemReady>
3400ea4e:	4603      	mov	r3, r0
3400ea50:	2800      	cmp	r0, #0
3400ea52:	d1cb      	bne.n	3400e9ec <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
3400ea54:	aa03      	add	r2, sp, #12
3400ea56:	9200      	str	r2, [sp, #0]
3400ea58:	2201      	movs	r2, #1
3400ea5a:	4620      	mov	r0, r4
3400ea5c:	4611      	mov	r1, r2
3400ea5e:	f7ff f871 	bl	3400db44 <MX66UW1G45G_ReadCfg2Register>
3400ea62:	2800      	cmp	r0, #0
3400ea64:	d1c2      	bne.n	3400e9ec <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX66UW1G45G_CR2_DOPI)
3400ea66:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400ea6a:	2b02      	cmp	r3, #2
3400ea6c:	d0c0      	beq.n	3400e9f0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400ea6e:	e7bd      	b.n	3400e9ec <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400ea70:	f06f 0003 	mvn.w	r0, #3
  return ret;
3400ea74:	e7bc      	b.n	3400e9f0 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400ea76:	bf00      	nop
3400ea78:	340dbfac 	.word	0x340dbfac
3400ea7c:	340dbfb0 	.word	0x340dbfb0

3400ea80 <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 1;
3400ea80:	2301      	movs	r3, #1
3400ea82:	4a0f      	ldr	r2, [pc, #60]	@ (3400eac0 <MX_XSPI_NOR_Init+0x40>)
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400ea84:	f04f 0c02 	mov.w	ip, #2
  hxspi->Init.FifoThresholdByte       = 1;
3400ea88:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400ea8c:	680b      	ldr	r3, [r1, #0]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400ea8e:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400ea90:	6103      	str	r3, [r0, #16]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400ea92:	2300      	movs	r3, #0
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400ea94:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
3400ea96:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hxspi->Init.SampleShifting          = Init->SampleShifting;
3400ea98:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400ea9a:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
3400ea9e:	61c3      	str	r3, [r0, #28]
  hxspi->Init.ChipSelectBoundary      = HAL_XSPI_BONDARYOF_NONE;
3400eaa0:	6303      	str	r3, [r0, #48]	@ 0x30
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
3400eaa2:	6083      	str	r3, [r0, #8]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
3400eaa4:	6203      	str	r3, [r0, #32]
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400eaa6:	68cb      	ldr	r3, [r1, #12]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
3400eaa8:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400eaaa:	2b01      	cmp	r3, #1
3400eaac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400eab0:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400eab2:	bf04      	itt	eq
3400eab4:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
3400eab8:	62c3      	streq	r3, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
3400eaba:	f00c bc53 	b.w	3401b364 <HAL_XSPI_Init>
3400eabe:	bf00      	nop
3400eac0:	5802a000 	.word	0x5802a000

3400eac4 <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400eac4:	4601      	mov	r1, r0
{
3400eac6:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400eac8:	b9b0      	cbnz	r0, 3400eaf8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400eaca:	4c0d      	ldr	r4, [pc, #52]	@ (3400eb00 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x3c>)
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
3400eacc:	480d      	ldr	r0, [pc, #52]	@ (3400eb04 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400eace:	f00d f823 	bl	3401bb18 <HAL_XSPI_SetClockPrescaler>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400ead2:	78a3      	ldrb	r3, [r4, #2]
3400ead4:	7861      	ldrb	r1, [r4, #1]
3400ead6:	b95b      	cbnz	r3, 3400eaf0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX66UW1G45G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400ead8:	2201      	movs	r2, #1
3400eada:	480a      	ldr	r0, [pc, #40]	@ (3400eb04 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400eadc:	f7fe fe9c 	bl	3400d818 <MX66UW1G45G_EnableSTRMemoryMappedMode>
3400eae0:	b110      	cbz	r0, 3400eae8 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400eae2:	f06f 0004 	mvn.w	r0, #4
}
3400eae6:	bd10      	pop	{r4, pc}
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400eae8:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
3400eaea:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400eaec:	7023      	strb	r3, [r4, #0]
3400eaee:	e7fa      	b.n	3400eae6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
      if (MX66UW1G45G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
3400eaf0:	4804      	ldr	r0, [pc, #16]	@ (3400eb04 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400eaf2:	f7fe fef6 	bl	3400d8e2 <MX66UW1G45G_EnableDTRMemoryMappedMode>
3400eaf6:	e7f3      	b.n	3400eae0 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
    ret = BSP_ERROR_WRONG_PARAM;
3400eaf8:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400eafc:	e7f3      	b.n	3400eae6 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
3400eafe:	bf00      	nop
3400eb00:	340dbfac 	.word	0x340dbfac
3400eb04:	340dbfb0 	.word	0x340dbfb0

3400eb08 <BSP_XSPI_NOR_ConfigFlash>:
{
3400eb08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400eb0c:	460d      	mov	r5, r1
3400eb0e:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400eb10:	2800      	cmp	r0, #0
3400eb12:	d15f      	bne.n	3400ebd4 <BSP_XSPI_NOR_ConfigFlash+0xcc>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
3400eb14:	4c32      	ldr	r4, [pc, #200]	@ (3400ebe0 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
3400eb16:	7823      	ldrb	r3, [r4, #0]
3400eb18:	2b02      	cmp	r3, #2
3400eb1a:	d05e      	beq.n	3400ebda <BSP_XSPI_NOR_ConfigFlash+0xd2>
      switch (XSPI_Nor_Ctx[Instance].InterfaceMode)
3400eb1c:	7863      	ldrb	r3, [r4, #1]
3400eb1e:	2b01      	cmp	r3, #1
3400eb20:	d14f      	bne.n	3400ebc2 <BSP_XSPI_NOR_ConfigFlash+0xba>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != XSPI_Nor_Ctx[Instance].TransferRate))
3400eb22:	2901      	cmp	r1, #1
3400eb24:	78a2      	ldrb	r2, [r4, #2]
3400eb26:	d109      	bne.n	3400eb3c <BSP_XSPI_NOR_ConfigFlash+0x34>
3400eb28:	4296      	cmp	r6, r2
3400eb2a:	d107      	bne.n	3400eb3c <BSP_XSPI_NOR_ConfigFlash+0x34>
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400eb2c:	2301      	movs	r3, #1
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
3400eb2e:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400eb30:	7023      	strb	r3, [r4, #0]
        XSPI_Nor_Ctx[Instance].InterfaceMode = Mode;
3400eb32:	7065      	strb	r5, [r4, #1]
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
3400eb34:	70a6      	strb	r6, [r4, #2]
}
3400eb36:	b004      	add	sp, #16
3400eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400eb3c:	4f29      	ldr	r7, [pc, #164]	@ (3400ebe4 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400eb3e:	2101      	movs	r1, #1
3400eb40:	4638      	mov	r0, r7
3400eb42:	f7fe ff1e 	bl	3400d982 <MX66UW1G45G_WriteEnable>
3400eb46:	4603      	mov	r3, r0
3400eb48:	b110      	cbz	r0, 3400eb50 <BSP_XSPI_NOR_ConfigFlash+0x48>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400eb4a:	f06f 0004 	mvn.w	r0, #4
3400eb4e:	e7f2      	b.n	3400eb36 <BSP_XSPI_NOR_ConfigFlash+0x2e>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400eb50:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
3400eb52:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400eb56:	78a2      	ldrb	r2, [r4, #2]
3400eb58:	4638      	mov	r0, r7
3400eb5a:	7861      	ldrb	r1, [r4, #1]
3400eb5c:	f7fe ff9a 	bl	3400da94 <MX66UW1G45G_WriteCfg2Register>
3400eb60:	4680      	mov	r8, r0
3400eb62:	2800      	cmp	r0, #0
3400eb64:	d1f1      	bne.n	3400eb4a <BSP_XSPI_NOR_ConfigFlash+0x42>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400eb66:	2028      	movs	r0, #40	@ 0x28
3400eb68:	f00e fbe0 	bl	3401d32c <HAL_Delay>

      if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
3400eb6c:	78a3      	ldrb	r3, [r4, #2]
3400eb6e:	2b01      	cmp	r3, #1
3400eb70:	d01b      	beq.n	3400ebaa <BSP_XSPI_NOR_ConfigFlash+0xa2>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400eb72:	2200      	movs	r2, #0
3400eb74:	481b      	ldr	r0, [pc, #108]	@ (3400ebe4 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400eb76:	4611      	mov	r1, r2
3400eb78:	f7fe fde0 	bl	3400d73c <MX66UW1G45G_AutoPollingMemReady>
3400eb7c:	4603      	mov	r3, r0
3400eb7e:	2800      	cmp	r0, #0
3400eb80:	d1e3      	bne.n	3400eb4a <BSP_XSPI_NOR_ConfigFlash+0x42>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400eb82:	aa03      	add	r2, sp, #12
3400eb84:	4601      	mov	r1, r0
3400eb86:	9200      	str	r2, [sp, #0]
3400eb88:	4602      	mov	r2, r0
3400eb8a:	4816      	ldr	r0, [pc, #88]	@ (3400ebe4 <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400eb8c:	f7fe ffda 	bl	3400db44 <MX66UW1G45G_ReadCfg2Register>
3400eb90:	2800      	cmp	r0, #0
3400eb92:	d1da      	bne.n	3400eb4a <BSP_XSPI_NOR_ConfigFlash+0x42>
                                               MX66UW1G45G_CR2_REG1_ADDR, reg) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
3400eb94:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400eb98:	2b00      	cmp	r3, #0
3400eb9a:	d1d6      	bne.n	3400eb4a <BSP_XSPI_NOR_ConfigFlash+0x42>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
3400eb9c:	2d01      	cmp	r5, #1
3400eb9e:	d1c5      	bne.n	3400eb2c <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400eba0:	78a3      	ldrb	r3, [r4, #2]
3400eba2:	b993      	cbnz	r3, 3400ebca <BSP_XSPI_NOR_ConfigFlash+0xc2>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
3400eba4:	f7ff ff18 	bl	3400e9d8 <XSPI_NOR_EnterDOPIMode.constprop.0>
3400eba8:	e011      	b.n	3400ebce <BSP_XSPI_NOR_ConfigFlash+0xc6>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400ebaa:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
3400ebac:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3400ebb0:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400ebb4:	f00c fbd6 	bl	3401b364 <HAL_XSPI_Init>
3400ebb8:	2800      	cmp	r0, #0
3400ebba:	d0da      	beq.n	3400eb72 <BSP_XSPI_NOR_ConfigFlash+0x6a>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400ebbc:	f06f 0003 	mvn.w	r0, #3
3400ebc0:	e7b9      	b.n	3400eb36 <BSP_XSPI_NOR_ConfigFlash+0x2e>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
3400ebc2:	2901      	cmp	r1, #1
3400ebc4:	d1b2      	bne.n	3400eb2c <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
3400ebc6:	2a00      	cmp	r2, #0
3400ebc8:	d1ec      	bne.n	3400eba4 <BSP_XSPI_NOR_ConfigFlash+0x9c>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
3400ebca:	f7ff febf 	bl	3400e94c <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
3400ebce:	2800      	cmp	r0, #0
3400ebd0:	d1b1      	bne.n	3400eb36 <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400ebd2:	e7ab      	b.n	3400eb2c <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400ebd4:	f06f 0001 	mvn.w	r0, #1
3400ebd8:	e7ad      	b.n	3400eb36 <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
3400ebda:	f06f 0019 	mvn.w	r0, #25
  return ret;
3400ebde:	e7aa      	b.n	3400eb36 <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400ebe0:	340dbfac 	.word	0x340dbfac
3400ebe4:	340dbfb0 	.word	0x340dbfb0

3400ebe8 <BSP_XSPI_NOR_Init>:
{
3400ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ebec:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400ebee:	4604      	mov	r4, r0
3400ebf0:	4e82      	ldr	r6, [pc, #520]	@ (3400edfc <BSP_XSPI_NOR_Init+0x214>)
{
3400ebf2:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400ebf4:	2800      	cmp	r0, #0
3400ebf6:	f040 80fa 	bne.w	3400edee <BSP_XSPI_NOR_Init+0x206>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
3400ebfa:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 3400ee08 <BSP_XSPI_NOR_Init+0x220>
3400ebfe:	f898 3000 	ldrb.w	r3, [r8]
3400ec02:	b153      	cbz	r3, 3400ec1a <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
3400ec04:	2500      	movs	r5, #0
 (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
3400ec06:	2064      	movs	r0, #100	@ 0x64
3400ec08:	2100      	movs	r1, #0
3400ec0a:	fb00 6004 	mla	r0, r0, r4, r6
3400ec0e:	f00c ff83 	bl	3401bb18 <HAL_XSPI_SetClockPrescaler>
}
3400ec12:	4628      	mov	r0, r5
3400ec14:	b00f      	add	sp, #60	@ 0x3c
3400ec16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400ec1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3400ec1e:	4a78      	ldr	r2, [pc, #480]	@ (3400ee00 <BSP_XSPI_NOR_Init+0x218>)
  __HAL_RCC_PWR_CLK_ENABLE();
3400ec20:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3400ec24:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400ec28:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
3400ec2c:	2509      	movs	r5, #9
3400ec2e:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
3400ec30:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400ec32:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400ec36:	441a      	add	r2, r3
3400ec38:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
  __HAL_RCC_PWR_CLK_ENABLE();
3400ec3c:	f7ff fe7a 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
3400ec40:	f005 fa06 	bl	34014050 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
3400ec44:	2101      	movs	r1, #1
3400ec46:	2002      	movs	r0, #2
3400ec48:	f005 f9b4 	bl	34013fb4 <HAL_PWREx_ConfigVddIORange>
  XSPI_NOR_CLK_GPIO_CLK_ENABLE();
3400ec4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400ec50:	f7ff fe70 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400ec54:	2701      	movs	r7, #1
  XSPI_NOR_DQS_GPIO_CLK_ENABLE();
3400ec56:	f7ff fe6d 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400ec5a:	f04f 0b03 	mov.w	fp, #3
  XSPI_NOR_CS_GPIO_CLK_ENABLE();
3400ec5e:	f7ff fe69 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D0_GPIO_CLK_ENABLE();
3400ec62:	f7ff fe67 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D1_GPIO_CLK_ENABLE();
3400ec66:	f7ff fe65 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D2_GPIO_CLK_ENABLE();
3400ec6a:	f7ff fe63 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D3_GPIO_CLK_ENABLE();
3400ec6e:	f7ff fe61 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D4_GPIO_CLK_ENABLE();
3400ec72:	f7ff fe5f 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D5_GPIO_CLK_ENABLE();
3400ec76:	f7ff fe5d 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D6_GPIO_CLK_ENABLE();
3400ec7a:	f7ff fe5b 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D7_GPIO_CLK_ENABLE();
3400ec7e:	f7ff fe59 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_NOR_CS_PIN;
3400ec82:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
3400ec84:	485f      	ldr	r0, [pc, #380]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ec86:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400ec88:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400ec8c:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
3400ec90:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
3400ec92:	f003 fc1f 	bl	340124d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
3400ec96:	485b      	ldr	r0, [pc, #364]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ec98:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_DQS_PIN;
3400ec9a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_DQS_PIN_AF;
3400ec9c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
3400ec9e:	f003 fc19 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
3400eca2:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
3400eca4:	4857      	ldr	r0, [pc, #348]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400eca6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
3400eca8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
3400ecaa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CLK_PIN_AF;
3400ecac:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
3400ecae:	f003 fc11 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
3400ecb2:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
3400ecb4:	4853      	ldr	r0, [pc, #332]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ecb6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
3400ecb8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D0_PIN_AF;
3400ecba:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
3400ecbc:	f003 fc0a 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
3400ecc0:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
3400ecc2:	4850      	ldr	r0, [pc, #320]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ecc4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
3400ecc6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D1_PIN_AF;
3400ecc8:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
3400ecca:	f003 fc03 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
3400ecce:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
3400ecd0:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
3400ecd4:	484b      	ldr	r0, [pc, #300]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ecd6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
3400ecd8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D2_PIN_AF;
3400ecda:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
3400ecdc:	f003 fbfa 	bl	340124d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
3400ece0:	4848      	ldr	r0, [pc, #288]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ece2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
3400ece4:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D3_PIN_AF;
3400ece8:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
3400ecea:	f003 fbf3 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
3400ecee:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
3400ecf2:	4844      	ldr	r0, [pc, #272]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ecf4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
3400ecf6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D4_PIN_AF;
3400ecf8:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
3400ecfa:	f003 fbeb 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
3400ecfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
3400ed02:	4840      	ldr	r0, [pc, #256]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ed04:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
3400ed06:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D5_PIN_AF;
3400ed08:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
3400ed0a:	f003 fbe3 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
3400ed0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
3400ed12:	483c      	ldr	r0, [pc, #240]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
3400ed14:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
3400ed16:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D6_PIN_AF;
3400ed18:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
3400ed1a:	f003 fbdb 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
3400ed1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
3400ed22:	a905      	add	r1, sp, #20
3400ed24:	4837      	ldr	r0, [pc, #220]	@ (3400ee04 <BSP_XSPI_NOR_Init+0x21c>)
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
3400ed26:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D7_PIN_AF;
3400ed28:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
3400ed2a:	f003 fbd3 	bl	340124d4 <HAL_GPIO_Init>
      (void)MX66UW1G45G_GetFlashInfo(&pInfo);
3400ed2e:	a805      	add	r0, sp, #20
3400ed30:	f7fe fceb 	bl	3400d70a <MX66UW1G45G_GetFlashInfo>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3400ed34:	9b05      	ldr	r3, [sp, #20]
3400ed36:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3400ed3a:	2b00      	cmp	r3, #0
3400ed3c:	fab3 f283 	clz	r2, r3
3400ed40:	bf08      	it	eq
3400ed42:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
3400ed44:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
3400ed48:	4630      	mov	r0, r6
3400ed4a:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 0x03; /* XSPI clock = 200MHz / ClockPrescaler = 50MHz, then switch to 200MHz*/
3400ed4c:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
3400ed50:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400ed52:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
3400ed54:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
3400ed56:	f7ff fe93 	bl	3400ea80 <MX_XSPI_NOR_Init>
3400ed5a:	2800      	cmp	r0, #0
3400ed5c:	d14a      	bne.n	3400edf4 <BSP_XSPI_NOR_Init+0x20c>
  if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400ed5e:	4622      	mov	r2, r4
3400ed60:	4621      	mov	r1, r4
3400ed62:	4630      	mov	r0, r6
3400ed64:	f7fe ff50 	bl	3400dc08 <MX66UW1G45G_ResetEnable>
3400ed68:	b110      	cbz	r0, 3400ed70 <BSP_XSPI_NOR_Init+0x188>
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400ed6a:	f06f 0504 	mvn.w	r5, #4
3400ed6e:	e74a      	b.n	3400ec06 <BSP_XSPI_NOR_Init+0x1e>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400ed70:	4622      	mov	r2, r4
3400ed72:	4621      	mov	r1, r4
3400ed74:	4630      	mov	r0, r6
3400ed76:	f7fe ff74 	bl	3400dc62 <MX66UW1G45G_ResetMemory>
3400ed7a:	2800      	cmp	r0, #0
3400ed7c:	d1f5      	bne.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ed7e:	4622      	mov	r2, r4
3400ed80:	4639      	mov	r1, r7
3400ed82:	4630      	mov	r0, r6
3400ed84:	f7fe ff40 	bl	3400dc08 <MX66UW1G45G_ResetEnable>
3400ed88:	2800      	cmp	r0, #0
3400ed8a:	d1ee      	bne.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ed8c:	4622      	mov	r2, r4
3400ed8e:	4639      	mov	r1, r7
3400ed90:	4630      	mov	r0, r6
3400ed92:	f7fe ff66 	bl	3400dc62 <MX66UW1G45G_ResetMemory>
3400ed96:	2800      	cmp	r0, #0
3400ed98:	d1e7      	bne.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400ed9a:	463a      	mov	r2, r7
3400ed9c:	4639      	mov	r1, r7
3400ed9e:	4630      	mov	r0, r6
3400eda0:	f7fe ff32 	bl	3400dc08 <MX66UW1G45G_ResetEnable>
3400eda4:	2800      	cmp	r0, #0
3400eda6:	d1e0      	bne.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400eda8:	463a      	mov	r2, r7
3400edaa:	4639      	mov	r1, r7
3400edac:	4630      	mov	r0, r6
3400edae:	f7fe ff58 	bl	3400dc62 <MX66UW1G45G_ResetMemory>
3400edb2:	2800      	cmp	r0, #0
3400edb4:	d1d9      	bne.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
3400edb6:	2064      	movs	r0, #100	@ 0x64
    XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
3400edb8:	f888 7000 	strb.w	r7, [r8]
    XSPI_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
3400edbc:	f888 4001 	strb.w	r4, [r8, #1]
    XSPI_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
3400edc0:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
3400edc4:	f00e fab2 	bl	3401d32c <HAL_Delay>
      else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400edc8:	4630      	mov	r0, r6
3400edca:	f898 2002 	ldrb.w	r2, [r8, #2]
3400edce:	f898 1001 	ldrb.w	r1, [r8, #1]
3400edd2:	f7fe fcb3 	bl	3400d73c <MX66UW1G45G_AutoPollingMemReady>
3400edd6:	2800      	cmp	r0, #0
3400edd8:	d1c7      	bne.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
3400edda:	f899 2001 	ldrb.w	r2, [r9, #1]
3400edde:	f899 1000 	ldrb.w	r1, [r9]
3400ede2:	f7ff fe91 	bl	3400eb08 <BSP_XSPI_NOR_ConfigFlash>
3400ede6:	2800      	cmp	r0, #0
3400ede8:	f43f af0c 	beq.w	3400ec04 <BSP_XSPI_NOR_Init+0x1c>
3400edec:	e7bd      	b.n	3400ed6a <BSP_XSPI_NOR_Init+0x182>
    ret = BSP_ERROR_WRONG_PARAM;
3400edee:	f06f 0501 	mvn.w	r5, #1
3400edf2:	e708      	b.n	3400ec06 <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
3400edf4:	f06f 0503 	mvn.w	r5, #3
3400edf8:	e705      	b.n	3400ec06 <BSP_XSPI_NOR_Init+0x1e>
3400edfa:	bf00      	nop
3400edfc:	340dbfb0 	.word	0x340dbfb0
3400ee00:	56028000 	.word	0x56028000
3400ee04:	56023400 	.word	0x56023400
3400ee08:	340dbfac 	.word	0x340dbfac

3400ee0c <MX_XSPI_RAM_Init>:
{
3400ee0c:	b538      	push	{r3, r4, r5, lr}
3400ee0e:	4604      	mov	r4, r0
3400ee10:	460d      	mov	r5, r1
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1);
3400ee12:	2000      	movs	r0, #0
3400ee14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400ee18:	f00a fc6e 	bl	340196f8 <HAL_RCCEx_GetPeriphCLKFreq>
  hxspi->Init.FifoThresholdByte          = 8;
3400ee1c:	2308      	movs	r3, #8
3400ee1e:	4a13      	ldr	r2, [pc, #76]	@ (3400ee6c <MX_XSPI_RAM_Init+0x60>)
  hxspi->Init.SampleShifting             = Init->SampleShifting;
3400ee20:	68a9      	ldr	r1, [r5, #8]
  hxspi->Init.FifoThresholdByte          = 8;
3400ee22:	e9c4 2300 	strd	r2, r3, [r4]
  hxspi->Init.MemoryMode                 = HAL_XSPI_SINGLE_MEM;
3400ee26:	2200      	movs	r2, #0
3400ee28:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
3400ee2c:	e9c4 2302 	strd	r2, r3, [r4, #8]
  hxspi->Init.MemorySize                 = Init->MemorySize;
3400ee30:	682b      	ldr	r3, [r5, #0]
  hxspi->Init.MemorySelect               = HAL_XSPI_CSSEL_NCS1;
3400ee32:	63e2      	str	r2, [r4, #60]	@ 0x3c
  hxspi->Init.MemorySize                 = Init->MemorySize;
3400ee34:	6123      	str	r3, [r4, #16]
  hxspi->Init.ChipSelectHighTimeCycle    = 5;
3400ee36:	2305      	movs	r3, #5
3400ee38:	6163      	str	r3, [r4, #20]
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
3400ee3a:	686b      	ldr	r3, [r5, #4]
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
3400ee3c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  hxspi->Init.SampleShifting             = Init->SampleShifting;
3400ee40:	62a1      	str	r1, [r4, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
3400ee42:	210b      	movs	r1, #11
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
3400ee44:	6263      	str	r3, [r4, #36]	@ 0x24
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
3400ee46:	fbb0 f3f3 	udiv	r3, r0, r3
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
3400ee4a:	e9c4 510b 	strd	r5, r1, [r4, #44]	@ 0x2c
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
3400ee4e:	4908      	ldr	r1, [pc, #32]	@ (3400ee70 <MX_XSPI_RAM_Init+0x64>)
3400ee50:	005b      	lsls	r3, r3, #1
3400ee52:	fbb3 f3f1 	udiv	r3, r3, r1
3400ee56:	3b04      	subs	r3, #4
  return HAL_XSPI_Init(hxspi);
3400ee58:	4620      	mov	r0, r4
  hxspi->Init.ClockMode                  = HAL_XSPI_CLOCK_MODE_0;
3400ee5a:	61e2      	str	r2, [r4, #28]
  hxspi->Init.FreeRunningClock           = HAL_XSPI_FREERUNCLK_DISABLE;
3400ee5c:	61a2      	str	r2, [r4, #24]
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
3400ee5e:	63a3      	str	r3, [r4, #56]	@ 0x38
  hxspi->Init.WrapSize                   = HAL_XSPI_WRAP_NOT_SUPPORTED;
3400ee60:	6222      	str	r2, [r4, #32]
}
3400ee62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HAL_XSPI_Init(hxspi);
3400ee66:	f00c ba7d 	b.w	3401b364 <HAL_XSPI_Init>
3400ee6a:	bf00      	nop
3400ee6c:	58025000 	.word	0x58025000
3400ee70:	000f4240 	.word	0x000f4240

3400ee74 <BSP_XSPI_RAM_Init>:
{
3400ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
3400ee78:	4604      	mov	r4, r0
{
3400ee7a:	b08b      	sub	sp, #44	@ 0x2c
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
3400ee7c:	2800      	cmp	r0, #0
3400ee7e:	f040 810d 	bne.w	3400f09c <BSP_XSPI_RAM_Init+0x228>
    if (XSPI_Ram_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
3400ee82:	4e88      	ldr	r6, [pc, #544]	@ (3400f0a4 <BSP_XSPI_RAM_Init+0x230>)
3400ee84:	7833      	ldrb	r3, [r6, #0]
3400ee86:	9301      	str	r3, [sp, #4]
3400ee88:	2b00      	cmp	r3, #0
3400ee8a:	f040 80f0 	bne.w	3400f06e <BSP_XSPI_RAM_Init+0x1fa>

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

 /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
3400ee8e:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3400ee92:	f7ff fd4f 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
3400ee96:	f005 f8d3 	bl	34014040 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO2, PWR_VDDIO_RANGE_1V8);
3400ee9a:	2101      	movs	r1, #1
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400ee9c:	f04f 0820 	mov.w	r8, #32
3400eea0:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
3400eea4:	4608      	mov	r0, r1
3400eea6:	f005 f885 	bl	34013fb4 <HAL_PWREx_ConfigVddIORange>
3400eeaa:	4b7f      	ldr	r3, [pc, #508]	@ (3400f0a8 <BSP_XSPI_RAM_Init+0x234>)
  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CS_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
3400eeac:	2409      	movs	r4, #9
3400eeae:	f8c3 8a60 	str.w	r8, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400eeb2:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400eeb6:	2501      	movs	r5, #1
3400eeb8:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
3400eeba:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400eebc:	4a7b      	ldr	r2, [pc, #492]	@ (3400f0ac <BSP_XSPI_RAM_Init+0x238>)
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400eebe:	f8c3 8a20 	str.w	r8, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400eec2:	f8c2 8220 	str.w	r8, [r2, #544]	@ 0x220
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400eec6:	f8c3 7a60 	str.w	r7, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400eeca:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
3400eece:	f04f 0903 	mov.w	r9, #3
3400eed2:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
3400eed4:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400eed6:	f8c3 7a20 	str.w	r7, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400eeda:	f8c2 7220 	str.w	r7, [r2, #544]	@ 0x220
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400eede:	2202      	movs	r2, #2
  XSPI_RAM_CLK_GPIO_CLK_ENABLE();
3400eee0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
3400eee4:	f7ff fd26 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_DQS_GPIO_CLK_ENABLE();
3400eee8:	f7ff fd24 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_CS_GPIO_CLK_ENABLE();
3400eeec:	f7ff fd22 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D0_GPIO_CLK_ENABLE();
3400eef0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
3400eef4:	f7ff fd1e 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3400eef8:	a905      	add	r1, sp, #20
  XSPI_RAM_D1_GPIO_CLK_ENABLE();
3400eefa:	f7ff fd1b 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D2_GPIO_CLK_ENABLE();
3400eefe:	f7ff fd19 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D3_GPIO_CLK_ENABLE();
3400ef02:	f7ff fd17 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D4_GPIO_CLK_ENABLE();
3400ef06:	f7ff fd15 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D5_GPIO_CLK_ENABLE();
3400ef0a:	f7ff fd13 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D6_GPIO_CLK_ENABLE();
3400ef0e:	f7ff fd11 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D7_GPIO_CLK_ENABLE();
3400ef12:	f7ff fd0f 	bl	3400e934 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3400ef16:	4866      	ldr	r0, [pc, #408]	@ (3400f0b0 <BSP_XSPI_RAM_Init+0x23c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3400ef18:	e9cd 5205 	strd	r5, r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
3400ef1c:	e9cd 9408 	strd	r9, r4, [sp, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ef20:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3400ef22:	f003 fad7 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
3400ef26:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
3400ef28:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
3400ef2c:	f04f 0a10 	mov.w	sl, #16
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
3400ef30:	485f      	ldr	r0, [pc, #380]	@ (3400f0b0 <BSP_XSPI_RAM_Init+0x23c>)
3400ef32:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
3400ef34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
3400ef36:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ef38:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
3400ef3a:	f003 facb 	bl	340124d4 <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
3400ef3e:	485c      	ldr	r0, [pc, #368]	@ (3400f0b0 <BSP_XSPI_RAM_Init+0x23c>)
3400ef40:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
3400ef42:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
3400ef44:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ef48:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
3400ef4a:	f003 fac3 	bl	340124d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
3400ef4e:	4858      	ldr	r0, [pc, #352]	@ (3400f0b0 <BSP_XSPI_RAM_Init+0x23c>)
3400ef50:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
3400ef52:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
3400ef54:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ef58:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
3400ef5a:	f003 fabb 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
3400ef5e:	4855      	ldr	r0, [pc, #340]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400ef60:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
3400ef62:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
3400ef64:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
3400ef66:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
3400ef68:	f003 fab4 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
3400ef6c:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
3400ef6e:	4851      	ldr	r0, [pc, #324]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400ef70:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
3400ef72:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
3400ef74:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
3400ef76:	f003 faad 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
3400ef7a:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
3400ef7c:	484d      	ldr	r0, [pc, #308]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400ef7e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
3400ef80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
3400ef82:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
3400ef84:	f003 faa6 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
3400ef88:	484a      	ldr	r0, [pc, #296]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400ef8a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
3400ef8c:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
3400ef8e:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
3400ef92:	f003 fa9f 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
3400ef96:	4847      	ldr	r0, [pc, #284]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400ef98:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
3400ef9a:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
3400ef9c:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
3400efa0:	f003 fa98 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
3400efa4:	4843      	ldr	r0, [pc, #268]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400efa6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
3400efa8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
3400efaa:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
3400efae:	f003 fa91 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
3400efb2:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
3400efb4:	483f      	ldr	r0, [pc, #252]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400efb6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
3400efb8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
3400efba:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
3400efbc:	f003 fa8a 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
3400efc0:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
3400efc2:	483c      	ldr	r0, [pc, #240]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400efc4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
3400efc6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
3400efc8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
3400efca:	f003 fa83 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
3400efce:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
3400efd2:	4838      	ldr	r0, [pc, #224]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400efd4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
3400efd6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
3400efd8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
3400efda:	f003 fa7b 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
3400efde:	f44f 7300 	mov.w	r3, #512	@ 0x200
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
3400efe2:	4834      	ldr	r0, [pc, #208]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400efe4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
3400efe6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
3400efe8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
3400efea:	f003 fa73 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
3400efee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
3400eff2:	4830      	ldr	r0, [pc, #192]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400eff4:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
3400eff6:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
3400eff8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
3400effa:	f003 fa6b 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
3400effe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
3400f002:	482c      	ldr	r0, [pc, #176]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400f004:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
3400f006:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
3400f008:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
3400f00a:	f003 fa63 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
3400f00e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
3400f012:	4828      	ldr	r0, [pc, #160]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400f014:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
3400f016:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
3400f018:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
3400f01a:	f003 fa5b 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
3400f01e:	4825      	ldr	r0, [pc, #148]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400f020:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
3400f022:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
3400f024:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
3400f026:	f003 fa55 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
3400f02a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
3400f02e:	4821      	ldr	r0, [pc, #132]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400f030:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
3400f032:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
3400f034:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
3400f036:	f003 fa4d 	bl	340124d4 <HAL_GPIO_Init>

  /* XSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
3400f03a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
3400f03e:	481d      	ldr	r0, [pc, #116]	@ (3400f0b4 <BSP_XSPI_RAM_Init+0x240>)
3400f040:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
3400f042:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
3400f044:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
3400f046:	f003 fa45 	bl	340124d4 <HAL_GPIO_Init>
      xspi_init.MemorySize     = HAL_XSPI_SIZE_256MB;
3400f04a:	2318      	movs	r3, #24
3400f04c:	9305      	str	r3, [sp, #20]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400f04e:	9b01      	ldr	r3, [sp, #4]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
3400f050:	4819      	ldr	r0, [pc, #100]	@ (3400f0b8 <BSP_XSPI_RAM_Init+0x244>)
3400f052:	a905      	add	r1, sp, #20
      xspi_init.ClockPrescaler = 3;
3400f054:	f8cd 9018 	str.w	r9, [sp, #24]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
3400f058:	9307      	str	r3, [sp, #28]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
3400f05a:	f7ff fed7 	bl	3400ee0c <MX_XSPI_RAM_Init>
  int32_t ret = BSP_ERROR_NONE;
3400f05e:	2800      	cmp	r0, #0
3400f060:	bf14      	ite	ne
3400f062:	f06f 0403 	mvnne.w	r4, #3
3400f066:	2400      	moveq	r4, #0
      XSPI_Ram_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400f068:	7035      	strb	r5, [r6, #0]
      XSPI_Ram_Ctx[Instance].LatencyType   = BSP_XSPI_RAM_FIXED_LATENCY;
3400f06a:	7075      	strb	r5, [r6, #1]
      XSPI_Ram_Ctx[Instance].BurstType     = BSP_XSPI_RAM_LINEAR_BURST;
3400f06c:	70b5      	strb	r5, [r6, #2]
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 0, 0x30));
3400f06e:	2230      	movs	r2, #48	@ 0x30
3400f070:	2100      	movs	r1, #0
3400f072:	4811      	ldr	r0, [pc, #68]	@ (3400f0b8 <BSP_XSPI_RAM_Init+0x244>)
3400f074:	f7fe fb11 	bl	3400d69a <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 4, 0x20));
3400f078:	2220      	movs	r2, #32
3400f07a:	2104      	movs	r1, #4
3400f07c:	480e      	ldr	r0, [pc, #56]	@ (3400f0b8 <BSP_XSPI_RAM_Init+0x244>)
3400f07e:	f7fe fb0c 	bl	3400d69a <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 8, 0x40));
3400f082:	2108      	movs	r1, #8
3400f084:	2240      	movs	r2, #64	@ 0x40
3400f086:	480c      	ldr	r0, [pc, #48]	@ (3400f0b8 <BSP_XSPI_RAM_Init+0x244>)
3400f088:	f7fe fb07 	bl	3400d69a <APS256XX_WriteReg>
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_ram[Instance], 0));
3400f08c:	2100      	movs	r1, #0
3400f08e:	480a      	ldr	r0, [pc, #40]	@ (3400f0b8 <BSP_XSPI_RAM_Init+0x244>)
3400f090:	f00c fd42 	bl	3401bb18 <HAL_XSPI_SetClockPrescaler>
}
3400f094:	4620      	mov	r0, r4
3400f096:	b00b      	add	sp, #44	@ 0x2c
3400f098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
3400f09c:	f06f 0401 	mvn.w	r4, #1
  return ret;
3400f0a0:	e7f8      	b.n	3400f094 <BSP_XSPI_RAM_Init+0x220>
3400f0a2:	bf00      	nop
3400f0a4:	340dbf44 	.word	0x340dbf44
3400f0a8:	56028000 	.word	0x56028000
3400f0ac:	56029000 	.word	0x56029000
3400f0b0:	56023800 	.word	0x56023800
3400f0b4:	56023c00 	.word	0x56023c00
3400f0b8:	340dbf48 	.word	0x340dbf48

3400f0bc <BSP_XSPI_RAM_EnableMemoryMappedMode>:
{
3400f0bc:	b507      	push	{r0, r1, r2, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
3400f0be:	b968      	cbnz	r0, 3400f0dc <BSP_XSPI_RAM_EnableMemoryMappedMode+0x20>
    if (APS256XX_EnableMemoryMappedMode(&hxspi_ram[Instance], 7, 7, 1, 0) != APS256XX_OK)
3400f0c0:	2207      	movs	r2, #7
3400f0c2:	9000      	str	r0, [sp, #0]
3400f0c4:	2301      	movs	r3, #1
3400f0c6:	4611      	mov	r1, r2
3400f0c8:	4806      	ldr	r0, [pc, #24]	@ (3400f0e4 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x28>)
3400f0ca:	f7fe fa8b 	bl	3400d5e4 <APS256XX_EnableMemoryMappedMode>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400f0ce:	2800      	cmp	r0, #0
3400f0d0:	bf18      	it	ne
3400f0d2:	f06f 0003 	mvnne.w	r0, #3
}
3400f0d6:	b003      	add	sp, #12
3400f0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = BSP_ERROR_WRONG_PARAM;
3400f0dc:	f06f 0001 	mvn.w	r0, #1
3400f0e0:	e7f9      	b.n	3400f0d6 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x1a>
3400f0e2:	bf00      	nop
3400f0e4:	340dbf48 	.word	0x340dbf48

3400f0e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
3400f0e8:	480f      	ldr	r0, [pc, #60]	@ (3400f128 <LoopForever+0x4>)
  msr   MSPLIM, r0
3400f0ea:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
3400f0ee:	480f      	ldr	r0, [pc, #60]	@ (3400f12c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
3400f0f0:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3400f0f2:	f000 f829 	bl	3400f148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3400f0f6:	480e      	ldr	r0, [pc, #56]	@ (3400f130 <LoopForever+0xc>)
  ldr r1, =_edata
3400f0f8:	490e      	ldr	r1, [pc, #56]	@ (3400f134 <LoopForever+0x10>)
  ldr r2, =_sidata
3400f0fa:	4a0f      	ldr	r2, [pc, #60]	@ (3400f138 <LoopForever+0x14>)
  movs r3, #0
3400f0fc:	2300      	movs	r3, #0
  b LoopCopyDataInit
3400f0fe:	e002      	b.n	3400f106 <LoopCopyDataInit>

3400f100 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3400f100:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3400f102:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3400f104:	3304      	adds	r3, #4

3400f106 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3400f106:	18c4      	adds	r4, r0, r3
  cmp r4, r1
3400f108:	428c      	cmp	r4, r1
  bcc CopyDataInit
3400f10a:	d3f9      	bcc.n	3400f100 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
3400f10c:	4a0b      	ldr	r2, [pc, #44]	@ (3400f13c <LoopForever+0x18>)
  ldr r4, =_ebss
3400f10e:	4c0c      	ldr	r4, [pc, #48]	@ (3400f140 <LoopForever+0x1c>)
  movs r3, #0
3400f110:	2300      	movs	r3, #0
  b LoopFillZerobss
3400f112:	e001      	b.n	3400f118 <LoopFillZerobss>

3400f114 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3400f114:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3400f116:	3204      	adds	r2, #4

3400f118 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
3400f118:	42a2      	cmp	r2, r4
  bcc FillZerobss
3400f11a:	d3fb      	bcc.n	3400f114 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
3400f11c:	f00f fefa 	bl	3401ef14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3400f120:	f00e fb64 	bl	3401d7ec <main>

3400f124 <LoopForever>:

LoopForever:
  b LoopForever
3400f124:	e7fe      	b.n	3400f124 <LoopForever>
3400f126:	0000      	.short	0x0000
  ldr   r0, =_sstack
3400f128:	341ff000 	.word	0x341ff000
  ldr   r0, =_estack
3400f12c:	34200000 	.word	0x34200000
  ldr r0, =_sdata
3400f130:	340a3034 	.word	0x340a3034
  ldr r1, =_edata
3400f134:	340a3414 	.word	0x340a3414
  ldr r2, =_sidata
3400f138:	340a3034 	.word	0x340a3034
  ldr r2, =_sbss
3400f13c:	340a3420 	.word	0x340a3420
  ldr r4, =_ebss
3400f140:	34190520 	.word	0x34190520

3400f144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3400f144:	e7fe      	b.n	3400f144 <ADC1_2_IRQHandler>
	...

3400f148 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
3400f148:	4b44      	ldr	r3, [pc, #272]	@ (3400f25c <SystemInit+0x114>)
3400f14a:	4a45      	ldr	r2, [pc, #276]	@ (3400f260 <SystemInit+0x118>)
{
3400f14c:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400f14e:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
3400f150:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
3400f152:	2502      	movs	r5, #2
  SAU->RNR = 0;
3400f154:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400f156:	4943      	ldr	r1, [pc, #268]	@ (3400f264 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400f158:	4e43      	ldr	r6, [pc, #268]	@ (3400f268 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400f15a:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3400f15e:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3400f162:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
3400f166:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
3400f16a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400f16e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f172:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
3400f176:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400f17a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f17e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
3400f182:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
3400f186:	2503      	movs	r5, #3
  SAU->RBAR = 0;
3400f188:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f18c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
3400f190:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
3400f194:	2504      	movs	r5, #4
  SAU->RBAR = 0;
3400f196:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f19a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
3400f19e:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
3400f1a2:	2505      	movs	r5, #5
  SAU->RBAR = 0;
3400f1a4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f1a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
3400f1ac:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
3400f1b0:	2506      	movs	r5, #6
  SAU->RBAR = 0;
3400f1b2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f1b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
3400f1ba:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
3400f1be:	2507      	movs	r5, #7
  SAU->RBAR = 0;
3400f1c0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f1c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
3400f1c8:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
3400f1cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3400f1d0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3400f1d4:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
3400f1d8:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
3400f1dc:	689a      	ldr	r2, [r3, #8]
3400f1de:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
3400f1e0:	4a22      	ldr	r2, [pc, #136]	@ (3400f26c <SystemInit+0x124>)
3400f1e2:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3400f1e4:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
3400f1e8:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3400f1ea:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3400f1ec:	f045 0510 	orr.w	r5, r5, #16
3400f1f0:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
3400f1f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3400f1f4:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
3400f1f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3400f1fc:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
3400f200:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3400f204:	f042 0210 	orr.w	r2, r2, #16
3400f208:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
3400f20c:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3400f210:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3400f214:	f022 0210 	bic.w	r2, r2, #16
3400f218:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
3400f21c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
3400f220:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
3400f224:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400f228:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
3400f22a:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
3400f22e:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3400f232:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
3400f236:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3400f23a:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
3400f23c:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3400f240:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
3400f244:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
3400f248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3400f24c:	4a08      	ldr	r2, [pc, #32]	@ (3400f270 <SystemInit+0x128>)
3400f24e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
3400f252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400f256:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
3400f25a:	bd70      	pop	{r4, r5, r6, pc}
3400f25c:	e000ed00 	.word	0xe000ed00
3400f260:	34000400 	.word	0x34000400
3400f264:	56028000 	.word	0x56028000
3400f268:	56008000 	.word	0x56008000
3400f26c:	56024800 	.word	0x56024800
3400f270:	e002ed00 	.word	0xe002ed00

3400f274 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400f274:	4b6e      	ldr	r3, [pc, #440]	@ (3400f430 <SystemCoreClockUpdate+0x1bc>)
{
3400f276:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400f278:	6a1a      	ldr	r2, [r3, #32]
3400f27a:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
3400f27e:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3400f282:	f000 80b8 	beq.w	3400f3f6 <SystemCoreClockUpdate+0x182>
3400f286:	d806      	bhi.n	3400f296 <SystemCoreClockUpdate+0x22>
3400f288:	b962      	cbnz	r2, 3400f2a4 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400f28a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400f28c:	4b69      	ldr	r3, [pc, #420]	@ (3400f434 <SystemCoreClockUpdate+0x1c0>)
3400f28e:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3400f292:	40d3      	lsrs	r3, r2
    break;
3400f294:	e003      	b.n	3400f29e <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400f296:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
3400f29a:	d00b      	beq.n	3400f2b4 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
3400f29c:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
3400f29e:	4a66      	ldr	r2, [pc, #408]	@ (3400f438 <SystemCoreClockUpdate+0x1c4>)
3400f2a0:	6013      	str	r3, [r2, #0]
}
3400f2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400f2a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
3400f2a6:	4a65      	ldr	r2, [pc, #404]	@ (3400f43c <SystemCoreClockUpdate+0x1c8>)
3400f2a8:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400f2ac:	4b64      	ldr	r3, [pc, #400]	@ (3400f440 <SystemCoreClockUpdate+0x1cc>)
3400f2ae:	bf08      	it	eq
3400f2b0:	4613      	moveq	r3, r2
3400f2b2:	e7f4      	b.n	3400f29e <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
3400f2b4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
3400f2b8:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
3400f2bc:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
3400f2c0:	d02a      	beq.n	3400f318 <SystemCoreClockUpdate+0xa4>
3400f2c2:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3400f2c6:	d036      	beq.n	3400f336 <SystemCoreClockUpdate+0xc2>
3400f2c8:	2a00      	cmp	r2, #0
3400f2ca:	d143      	bne.n	3400f354 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
3400f2cc:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
3400f2d0:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
3400f2d2:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400f2d6:	f100 8096 	bmi.w	3400f406 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400f2da:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3400f2de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3400f2e2:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3400f2e6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400f2ea:	460e      	mov	r6, r1
    switch (pllsource)
3400f2ec:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
3400f2f0:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3400f2f4:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
3400f2f8:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
3400f2fc:	d04f      	beq.n	3400f39e <SystemCoreClockUpdate+0x12a>
3400f2fe:	d87c      	bhi.n	3400f3fa <SystemCoreClockUpdate+0x186>
3400f300:	2e00      	cmp	r6, #0
3400f302:	d03c      	beq.n	3400f37e <SystemCoreClockUpdate+0x10a>
3400f304:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400f306:	4b4a      	ldr	r3, [pc, #296]	@ (3400f430 <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
3400f308:	4f4c      	ldr	r7, [pc, #304]	@ (3400f43c <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3400f30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
3400f30c:	f413 7f00 	tst.w	r3, #512	@ 0x200
3400f310:	4b4b      	ldr	r3, [pc, #300]	@ (3400f440 <SystemCoreClockUpdate+0x1cc>)
3400f312:	bf08      	it	eq
3400f314:	463b      	moveq	r3, r7
3400f316:	e038      	b.n	3400f38a <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3400f318:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
3400f31c:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3400f31e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400f322:	d470      	bmi.n	3400f406 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3400f324:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
3400f328:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
3400f32c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3400f330:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
3400f334:	e7d9      	b.n	3400f2ea <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
3400f336:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
3400f33a:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
3400f33c:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400f340:	d461      	bmi.n	3400f406 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3400f342:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
3400f346:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
3400f34a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3400f34e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3400f352:	e7ca      	b.n	3400f2ea <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
3400f354:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
3400f358:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400f35a:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3400f35e:	d452      	bmi.n	3400f406 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
3400f360:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3400f364:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400f368:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
3400f36c:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
3400f370:	e7bb      	b.n	3400f2ea <SystemCoreClockUpdate+0x76>
    switch (pllsource)
3400f372:	460a      	mov	r2, r1
3400f374:	460d      	mov	r5, r1
3400f376:	4608      	mov	r0, r1
3400f378:	460c      	mov	r4, r1
3400f37a:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400f37e:	4b2c      	ldr	r3, [pc, #176]	@ (3400f430 <SystemCoreClockUpdate+0x1bc>)
3400f380:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
3400f382:	4b2c      	ldr	r3, [pc, #176]	@ (3400f434 <SystemCoreClockUpdate+0x1c0>)
3400f384:	f3c7 17c1 	ubfx	r7, r7, #7, #2
3400f388:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
3400f38a:	b14e      	cbz	r6, 3400f3a0 <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
3400f38c:	4a28      	ldr	r2, [pc, #160]	@ (3400f430 <SystemCoreClockUpdate+0x1bc>)
3400f38e:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
3400f392:	f3c2 4207 	ubfx	r2, r2, #16, #8
3400f396:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
3400f398:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
3400f39c:	e77f      	b.n	3400f29e <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
3400f39e:	4b29      	ldr	r3, [pc, #164]	@ (3400f444 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
3400f3a0:	ee07 0a10 	vmov	s14, r0
3400f3a4:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
3400f3a8:	ee07 4a10 	vmov	s14, r4
3400f3ac:	ee07 3a90 	vmov	s15, r3
3400f3b0:	eddf 6a25 	vldr	s13, [pc, #148]	@ 3400f448 <SystemCoreClockUpdate+0x1d4>
3400f3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400f3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400f3bc:	eea6 7a26 	vfma.f32	s14, s12, s13
3400f3c0:	ee67 7a87 	vmul.f32	s15, s15, s14
3400f3c4:	ee07 1a10 	vmov	s14, r1
3400f3c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400f3cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400f3d0:	ee07 5a90 	vmov	s15, r5
3400f3d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3400f3d8:	ee07 2a90 	vmov	s15, r2
3400f3dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400f3e0:	ee27 7a27 	vmul.f32	s14, s14, s15
3400f3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400f3e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3400f3ec:	ee17 3a90 	vmov	r3, s15
3400f3f0:	e7cc      	b.n	3400f38c <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
3400f3f2:	4b14      	ldr	r3, [pc, #80]	@ (3400f444 <SystemCoreClockUpdate+0x1d0>)
3400f3f4:	e7ca      	b.n	3400f38c <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400f3f6:	4b13      	ldr	r3, [pc, #76]	@ (3400f444 <SystemCoreClockUpdate+0x1d0>)
3400f3f8:	e751      	b.n	3400f29e <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400f3fa:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
3400f3fe:	4b13      	ldr	r3, [pc, #76]	@ (3400f44c <SystemCoreClockUpdate+0x1d8>)
3400f400:	bf18      	it	ne
3400f402:	2300      	movne	r3, #0
3400f404:	e7cc      	b.n	3400f3a0 <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
3400f406:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3400f40a:	d0f2      	beq.n	3400f3f2 <SystemCoreClockUpdate+0x17e>
3400f40c:	d809      	bhi.n	3400f422 <SystemCoreClockUpdate+0x1ae>
3400f40e:	2900      	cmp	r1, #0
3400f410:	d0af      	beq.n	3400f372 <SystemCoreClockUpdate+0xfe>
3400f412:	2200      	movs	r2, #0
3400f414:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
3400f418:	4615      	mov	r5, r2
3400f41a:	4610      	mov	r0, r2
3400f41c:	4614      	mov	r4, r2
3400f41e:	4611      	mov	r1, r2
3400f420:	e771      	b.n	3400f306 <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3400f422:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3400f426:	4b09      	ldr	r3, [pc, #36]	@ (3400f44c <SystemCoreClockUpdate+0x1d8>)
3400f428:	bf18      	it	ne
3400f42a:	2300      	movne	r3, #0
3400f42c:	e7ae      	b.n	3400f38c <SystemCoreClockUpdate+0x118>
3400f42e:	bf00      	nop
3400f430:	56028000 	.word	0x56028000
3400f434:	03d09000 	.word	0x03d09000
3400f438:	340a31fc 	.word	0x340a31fc
3400f43c:	003d0900 	.word	0x003d0900
3400f440:	00f42400 	.word	0x00f42400
3400f444:	02dc6c00 	.word	0x02dc6c00
3400f448:	33800000 	.word	0x33800000
3400f44c:	00bb8000 	.word	0x00bb8000

3400f450 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400f450:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
3400f454:	b500      	push	{lr}
  SystemCoreClockUpdate();
3400f456:	f7ff ff0d 	bl	3400f274 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
3400f45a:	4b05      	ldr	r3, [pc, #20]	@ (3400f470 <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
3400f45c:	f85d eb04 	ldr.w	lr, [sp], #4
3400f460:	6818      	ldr	r0, [r3, #0]
3400f462:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
3400f466:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
3400f46a:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
3400f46e:	4774      	bxns	lr
3400f470:	340a31fc 	.word	0x340a31fc

3400f474 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
3400f474:	4770      	bx	lr

3400f476 <HAL_Init>:
{
3400f476:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
3400f478:	2003      	movs	r0, #3
3400f47a:	f000 f995 	bl	3400f7a8 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
3400f47e:	f7ff fef9 	bl	3400f274 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3400f482:	200f      	movs	r0, #15
3400f484:	f00d ff66 	bl	3401d354 <HAL_InitTick>
3400f488:	4604      	mov	r4, r0
3400f48a:	b918      	cbnz	r0, 3400f494 <HAL_Init+0x1e>
  HAL_MspInit();
3400f48c:	f7ff fff2 	bl	3400f474 <HAL_MspInit>
}
3400f490:	4620      	mov	r0, r4
3400f492:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3400f494:	2401      	movs	r4, #1
3400f496:	e7fb      	b.n	3400f490 <HAL_Init+0x1a>

3400f498 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
3400f498:	b570      	push	{r4, r5, r6, lr}
3400f49a:	4604      	mov	r4, r0
3400f49c:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
3400f49e:	f00d ff43 	bl	3401d328 <HAL_GetTick>
3400f4a2:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
3400f4a4:	b12c      	cbz	r4, 3400f4b2 <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3400f4a6:	6822      	ldr	r2, [r4, #0]
3400f4a8:	4b1b      	ldr	r3, [pc, #108]	@ (3400f518 <HAL_BSEC_OTP_Reload+0x80>)
3400f4aa:	429a      	cmp	r2, r3
3400f4ac:	d003      	beq.n	3400f4b6 <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400f4ae:	2301      	movs	r3, #1
3400f4b0:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400f4b2:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
3400f4b4:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400f4b6:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
3400f4ba:	d2f8      	bcs.n	3400f4ae <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
3400f4bc:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400f4be:	f503 7308 	add.w	r3, r3, #544	@ 0x220
3400f4c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400f4c6:	2301      	movs	r3, #1
3400f4c8:	f005 001f 	and.w	r0, r5, #31
3400f4cc:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
3400f4ce:	420b      	tst	r3, r1
3400f4d0:	d11f      	bne.n	3400f512 <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
3400f4d2:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
3400f4d6:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
3400f4da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3400f4de:	432b      	orrs	r3, r5
3400f4e0:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400f4e4:	6823      	ldr	r3, [r4, #0]
3400f4e6:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400f4ea:	07d2      	lsls	r2, r2, #31
3400f4ec:	d409      	bmi.n	3400f502 <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
3400f4ee:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
3400f4f2:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
3400f4f6:	d0dd      	beq.n	3400f4b4 <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
3400f4f8:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400f4fc:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
3400f500:	e7d6      	b.n	3400f4b0 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400f502:	f00d ff11 	bl	3401d328 <HAL_GetTick>
3400f506:	1b80      	subs	r0, r0, r6
3400f508:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400f50c:	d9ea      	bls.n	3400f4e4 <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400f50e:	230a      	movs	r3, #10
3400f510:	e7ce      	b.n	3400f4b0 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400f512:	2304      	movs	r3, #4
3400f514:	e7cc      	b.n	3400f4b0 <HAL_BSEC_OTP_Reload+0x18>
3400f516:	bf00      	nop
3400f518:	56009000 	.word	0x56009000

3400f51c <HAL_BSEC_OTP_Read>:
{
3400f51c:	b570      	push	{r4, r5, r6, lr}
3400f51e:	460e      	mov	r6, r1
3400f520:	4615      	mov	r5, r2
  if (hbsec == NULL)
3400f522:	4604      	mov	r4, r0
3400f524:	b130      	cbz	r0, 3400f534 <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
3400f526:	b11a      	cbz	r2, 3400f530 <HAL_BSEC_OTP_Read+0x14>
3400f528:	6802      	ldr	r2, [r0, #0]
3400f52a:	4b09      	ldr	r3, [pc, #36]	@ (3400f550 <HAL_BSEC_OTP_Read+0x34>)
3400f52c:	429a      	cmp	r2, r3
3400f52e:	d003      	beq.n	3400f538 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400f530:	2301      	movs	r3, #1
3400f532:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400f534:	2001      	movs	r0, #1
}
3400f536:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3400f538:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
3400f53c:	d2f8      	bcs.n	3400f530 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
3400f53e:	f7ff ffab 	bl	3400f498 <HAL_BSEC_OTP_Reload>
3400f542:	2800      	cmp	r0, #0
3400f544:	d1f6      	bne.n	3400f534 <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
3400f546:	6823      	ldr	r3, [r4, #0]
3400f548:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
3400f54c:	602b      	str	r3, [r5, #0]
  return HAL_OK;
3400f54e:	e7f2      	b.n	3400f536 <HAL_BSEC_OTP_Read+0x1a>
3400f550:	56009000 	.word	0x56009000

3400f554 <HAL_BSEC_OTP_Program>:
{
3400f554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3400f558:	4604      	mov	r4, r0
3400f55a:	460e      	mov	r6, r1
3400f55c:	4617      	mov	r7, r2
3400f55e:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
3400f560:	f00d fee2 	bl	3401d328 <HAL_GetTick>
3400f564:	4680      	mov	r8, r0
  if (hbsec == NULL)
3400f566:	b12c      	cbz	r4, 3400f574 <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
3400f568:	6822      	ldr	r2, [r4, #0]
3400f56a:	4b28      	ldr	r3, [pc, #160]	@ (3400f60c <HAL_BSEC_OTP_Program+0xb8>)
3400f56c:	429a      	cmp	r2, r3
3400f56e:	d005      	beq.n	3400f57c <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
3400f570:	2301      	movs	r3, #1
3400f572:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3400f574:	2001      	movs	r0, #1
}
3400f576:	b003      	add	sp, #12
3400f578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
3400f57c:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
3400f580:	d004      	beq.n	3400f58c <HAL_BSEC_OTP_Program+0x38>
3400f582:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
3400f586:	4822      	ldr	r0, [pc, #136]	@ (3400f610 <HAL_BSEC_OTP_Program+0xbc>)
3400f588:	f00e f9fe 	bl	3401d988 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
3400f58c:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
3400f590:	d2ee      	bcs.n	3400f570 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400f592:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
3400f594:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400f596:	f503 7300 	add.w	r3, r3, #512	@ 0x200
3400f59a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3400f59e:	2301      	movs	r3, #1
3400f5a0:	f006 001f 	and.w	r0, r6, #31
3400f5a4:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3400f5a6:	420b      	tst	r3, r1
3400f5a8:	d12e      	bne.n	3400f608 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
3400f5aa:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
3400f5ae:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
3400f5b2:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
3400f5b6:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
3400f5ba:	4335      	orrs	r5, r6
3400f5bc:	ea45 0509 	orr.w	r5, r5, r9
3400f5c0:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
3400f5c4:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3400f5c8:	6823      	ldr	r3, [r4, #0]
3400f5ca:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
3400f5ce:	07d2      	lsls	r2, r2, #31
3400f5d0:	d406      	bmi.n	3400f5e0 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
3400f5d2:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3400f5d6:	03db      	lsls	r3, r3, #15
3400f5d8:	d50b      	bpl.n	3400f5f2 <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
3400f5da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400f5de:	e7c8      	b.n	3400f572 <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3400f5e0:	f00d fea2 	bl	3401d328 <HAL_GetTick>
3400f5e4:	eba0 0008 	sub.w	r0, r0, r8
3400f5e8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400f5ec:	d9ec      	bls.n	3400f5c8 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
3400f5ee:	230a      	movs	r3, #10
3400f5f0:	e7bf      	b.n	3400f572 <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
3400f5f2:	4631      	mov	r1, r6
3400f5f4:	4620      	mov	r0, r4
3400f5f6:	aa01      	add	r2, sp, #4
3400f5f8:	f7ff ff90 	bl	3400f51c <HAL_BSEC_OTP_Read>
3400f5fc:	2800      	cmp	r0, #0
3400f5fe:	d1b9      	bne.n	3400f574 <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
3400f600:	9b01      	ldr	r3, [sp, #4]
3400f602:	42bb      	cmp	r3, r7
3400f604:	d1e9      	bne.n	3400f5da <HAL_BSEC_OTP_Program+0x86>
3400f606:	e7b6      	b.n	3400f576 <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3400f608:	2304      	movs	r3, #4
3400f60a:	e7b2      	b.n	3400f572 <HAL_BSEC_OTP_Program+0x1e>
3400f60c:	56009000 	.word	0x56009000
3400f610:	34026661 	.word	0x34026661

3400f614 <CACHEAXI_CommandByAddr>:
  *                       CACHEAXI_IT_MODE, CACHEAXI_POLLING_MODE.
  * @retval HAL status
  */
static HAL_StatusTypeDef CACHEAXI_CommandByAddr(CACHEAXI_HandleTypeDef *hcacheaxi, uint32_t Command,
                                                const uint32_t *pAddr, uint32_t dSize, uint32_t mode)
{
3400f614:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t op_addr = (uint32_t)pAddr;
  uint32_t tickstart;

  /* Check no ongoing operation */
  if (READ_BIT(hcacheaxi->Instance->SR, (CACHEAXI_SR_BUSYF | CACHEAXI_SR_BUSYCMDF)) != 0U)
3400f616:	6804      	ldr	r4, [r0, #0]
{
3400f618:	4605      	mov	r5, r0
  if (READ_BIT(hcacheaxi->Instance->SR, (CACHEAXI_SR_BUSYF | CACHEAXI_SR_BUSYCMDF)) != 0U)
3400f61a:	6860      	ldr	r0, [r4, #4]
3400f61c:	f010 0009 	ands.w	r0, r0, #9
3400f620:	d13f      	bne.n	3400f6a2 <CACHEAXI_CommandByAddr+0x8e>
    status =  HAL_BUSY;
  }
  else
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f622:	60a8      	str	r0, [r5, #8]

    /* Update the CACHEAXI handle State */
    hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
3400f624:	2001      	movs	r0, #1
3400f626:	7128      	strb	r0, [r5, #4]

    /* Make sure flags are reset */
    WRITE_REG(hcacheaxi->Instance->FCR, (CACHEAXI_FCR_CBSYENDF | CACHEAXI_FCR_CCMDENDF));
3400f628:	2012      	movs	r0, #18

    /* Fill area start address */
    WRITE_REG(hcacheaxi->Instance->CMDRSADDRR, op_addr);

    /* Fill area end address */
    WRITE_REG(hcacheaxi->Instance->CMDREADDRR, (op_addr + dSize - 1U));
3400f62a:	3b01      	subs	r3, #1
    WRITE_REG(hcacheaxi->Instance->FCR, (CACHEAXI_FCR_CBSYENDF | CACHEAXI_FCR_CCMDENDF));
3400f62c:	60e0      	str	r0, [r4, #12]
    WRITE_REG(hcacheaxi->Instance->CMDRSADDRR, op_addr);
3400f62e:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
    WRITE_REG(hcacheaxi->Instance->CMDREADDRR, (op_addr + dSize - 1U));
3400f632:	441a      	add	r2, r3
3400f634:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108

    /* Set command */
    MODIFY_REG(hcacheaxi->Instance->CR2, CACHEAXI_CR2_CACHECMD, Command);
3400f638:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400f63c:	f023 0306 	bic.w	r3, r3, #6
3400f640:	4319      	orrs	r1, r3

    /* Enable IT if required */
    if (mode == CACHEAXI_IT_MODE)
3400f642:	9b04      	ldr	r3, [sp, #16]
    MODIFY_REG(hcacheaxi->Instance->CR2, CACHEAXI_CR2_CACHECMD, Command);
3400f644:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
    if (mode == CACHEAXI_IT_MODE)
3400f648:	2b01      	cmp	r3, #1
    {
      /* Enable end of cache command interrupt */
      SET_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
3400f64a:	68a3      	ldr	r3, [r4, #8]
    if (mode == CACHEAXI_IT_MODE)
3400f64c:	d10a      	bne.n	3400f664 <CACHEAXI_CommandByAddr+0x50>
      SET_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
3400f64e:	f043 0310 	orr.w	r3, r3, #16
3400f652:	60a3      	str	r3, [r4, #8]

      /* Launch cache command */
      SET_BIT(hcacheaxi->Instance->CR2, CACHEAXI_CR2_STARTCMD);
3400f654:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400f658:	f043 0301 	orr.w	r3, r3, #1
3400f65c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  HAL_StatusTypeDef status = HAL_OK;
3400f660:	2000      	movs	r0, #0
3400f662:	e01d      	b.n	3400f6a0 <CACHEAXI_CommandByAddr+0x8c>
    }
    else
    {
      /* Make sure that end of cache command interrupt is disabled */
      CLEAR_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
3400f664:	f023 0310 	bic.w	r3, r3, #16
3400f668:	60a3      	str	r3, [r4, #8]

      /* Launch cache command */
      SET_BIT(hcacheaxi->Instance->CR2, CACHEAXI_CR2_STARTCMD);
3400f66a:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3400f66e:	f043 0301 	orr.w	r3, r3, #1
3400f672:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100

      /* Get timeout */
      tickstart = HAL_GetTick();
3400f676:	f00d fe57 	bl	3401d328 <HAL_GetTick>
3400f67a:	4604      	mov	r4, r0

      /* Wait for end of cache command */
      while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_CMDENDF) == 0U)
3400f67c:	682b      	ldr	r3, [r5, #0]
3400f67e:	685b      	ldr	r3, [r3, #4]
3400f680:	06db      	lsls	r3, r3, #27
3400f682:	d4ed      	bmi.n	3400f660 <CACHEAXI_CommandByAddr+0x4c>
      {
        if ((HAL_GetTick() - tickstart) > CACHEAXI_COMMAND_TIMEOUT_VALUE)
3400f684:	f00d fe50 	bl	3401d328 <HAL_GetTick>
3400f688:	1b00      	subs	r0, r0, r4
3400f68a:	28c8      	cmp	r0, #200	@ 0xc8
3400f68c:	d9f6      	bls.n	3400f67c <CACHEAXI_CommandByAddr+0x68>
        {
          if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_CMDENDF) == 0U)
3400f68e:	682b      	ldr	r3, [r5, #0]
3400f690:	685b      	ldr	r3, [r3, #4]
3400f692:	06da      	lsls	r2, r3, #27
3400f694:	d4f2      	bmi.n	3400f67c <CACHEAXI_CommandByAddr+0x68>
          {
            /* Update error code */
            hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
3400f696:	2310      	movs	r3, #16
3400f698:	60ab      	str	r3, [r5, #8]

            /* Change the CACHEAXI state */
            hcacheaxi->State = HAL_CACHEAXI_STATE_ERROR;
3400f69a:	2306      	movs	r3, #6

            /* Return error status */
            status =  HAL_ERROR;
3400f69c:	2001      	movs	r0, #1
            hcacheaxi->State = HAL_CACHEAXI_STATE_ERROR;
3400f69e:	712b      	strb	r3, [r5, #4]
      }
    }
  }

  return status;
}
3400f6a0:	bd38      	pop	{r3, r4, r5, pc}
    status =  HAL_BUSY;
3400f6a2:	2002      	movs	r0, #2
3400f6a4:	e7fc      	b.n	3400f6a0 <CACHEAXI_CommandByAddr+0x8c>
	...

3400f6a8 <HAL_CACHEAXI_Enable>:
{
3400f6a8:	b538      	push	{r3, r4, r5, lr}
  if (hcacheaxi == NULL)
3400f6aa:	4604      	mov	r4, r0
3400f6ac:	b350      	cbz	r0, 3400f704 <HAL_CACHEAXI_Enable+0x5c>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400f6ae:	6803      	ldr	r3, [r0, #0]
3400f6b0:	4a15      	ldr	r2, [pc, #84]	@ (3400f708 <HAL_CACHEAXI_Enable+0x60>)
3400f6b2:	4293      	cmp	r3, r2
3400f6b4:	d008      	beq.n	3400f6c8 <HAL_CACHEAXI_Enable+0x20>
3400f6b6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f6ba:	4293      	cmp	r3, r2
3400f6bc:	d004      	beq.n	3400f6c8 <HAL_CACHEAXI_Enable+0x20>
3400f6be:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3400f6c2:	4812      	ldr	r0, [pc, #72]	@ (3400f70c <HAL_CACHEAXI_Enable+0x64>)
3400f6c4:	f00e f960 	bl	3401d988 <assert_failed>
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400f6c8:	6823      	ldr	r3, [r4, #0]
3400f6ca:	685b      	ldr	r3, [r3, #4]
3400f6cc:	07d9      	lsls	r1, r3, #31
3400f6ce:	d407      	bmi.n	3400f6e0 <HAL_CACHEAXI_Enable+0x38>
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f6d0:	2000      	movs	r0, #0
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400f6d2:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f6d4:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
3400f6d6:	6813      	ldr	r3, [r2, #0]
3400f6d8:	f043 0301 	orr.w	r3, r3, #1
3400f6dc:	6013      	str	r3, [r2, #0]
}
3400f6de:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
3400f6e0:	f00d fe22 	bl	3401d328 <HAL_GetTick>
3400f6e4:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
3400f6e6:	6823      	ldr	r3, [r4, #0]
3400f6e8:	685b      	ldr	r3, [r3, #4]
3400f6ea:	07db      	lsls	r3, r3, #31
3400f6ec:	d5f0      	bpl.n	3400f6d0 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
3400f6ee:	f00d fe1b 	bl	3401d328 <HAL_GetTick>
3400f6f2:	1b40      	subs	r0, r0, r5
3400f6f4:	2801      	cmp	r0, #1
3400f6f6:	d9f6      	bls.n	3400f6e6 <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
3400f6f8:	6823      	ldr	r3, [r4, #0]
3400f6fa:	685b      	ldr	r3, [r3, #4]
3400f6fc:	07da      	lsls	r2, r3, #31
3400f6fe:	d4f2      	bmi.n	3400f6e6 <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
3400f700:	2310      	movs	r3, #16
3400f702:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
3400f704:	2001      	movs	r0, #1
3400f706:	e7ea      	b.n	3400f6de <HAL_CACHEAXI_Enable+0x36>
3400f708:	580dfc00 	.word	0x580dfc00
3400f70c:	340266c2 	.word	0x340266c2

3400f710 <HAL_CACHEAXI_Init>:
{
3400f710:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
3400f712:	4604      	mov	r4, r0
3400f714:	b1c8      	cbz	r0, 3400f74a <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400f716:	6803      	ldr	r3, [r0, #0]
3400f718:	4a0d      	ldr	r2, [pc, #52]	@ (3400f750 <HAL_CACHEAXI_Init+0x40>)
3400f71a:	4293      	cmp	r3, r2
3400f71c:	d007      	beq.n	3400f72e <HAL_CACHEAXI_Init+0x1e>
3400f71e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f722:	4293      	cmp	r3, r2
3400f724:	d003      	beq.n	3400f72e <HAL_CACHEAXI_Init+0x1e>
3400f726:	21bc      	movs	r1, #188	@ 0xbc
3400f728:	480a      	ldr	r0, [pc, #40]	@ (3400f754 <HAL_CACHEAXI_Init+0x44>)
3400f72a:	f00e f92d 	bl	3401d988 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
3400f72e:	7923      	ldrb	r3, [r4, #4]
3400f730:	b913      	cbnz	r3, 3400f738 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
3400f732:	4620      	mov	r0, r4
3400f734:	f00e f90e 	bl	3401d954 <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
3400f738:	2300      	movs	r3, #0
3400f73a:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
3400f73c:	2301      	movs	r3, #1
3400f73e:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400f740:	4620      	mov	r0, r4
}
3400f742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
3400f746:	f7ff bfaf 	b.w	3400f6a8 <HAL_CACHEAXI_Enable>
}
3400f74a:	2001      	movs	r0, #1
3400f74c:	bd10      	pop	{r4, pc}
3400f74e:	bf00      	nop
3400f750:	580dfc00 	.word	0x580dfc00
3400f754:	340266c2 	.word	0x340266c2

3400f758 <HAL_CACHEAXI_CleanInvalidByAddr>:
{
3400f758:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400f75a:	460e      	mov	r6, r1
3400f75c:	4615      	mov	r5, r2
  if (hcacheaxi == NULL)
3400f75e:	4604      	mov	r4, r0
3400f760:	b1e0      	cbz	r0, 3400f79c <HAL_CACHEAXI_CleanInvalidByAddr+0x44>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
3400f762:	6803      	ldr	r3, [r0, #0]
3400f764:	4a0e      	ldr	r2, [pc, #56]	@ (3400f7a0 <HAL_CACHEAXI_CleanInvalidByAddr+0x48>)
3400f766:	4293      	cmp	r3, r2
3400f768:	d008      	beq.n	3400f77c <HAL_CACHEAXI_CleanInvalidByAddr+0x24>
3400f76a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400f76e:	4293      	cmp	r3, r2
3400f770:	d004      	beq.n	3400f77c <HAL_CACHEAXI_CleanInvalidByAddr+0x24>
3400f772:	f240 214d 	movw	r1, #589	@ 0x24d
3400f776:	480b      	ldr	r0, [pc, #44]	@ (3400f7a4 <HAL_CACHEAXI_CleanInvalidByAddr+0x4c>)
3400f778:	f00e f906 	bl	3401d988 <assert_failed>
  assert_param(IS_CACHEAXI_REGION_SIZE(dSize));
3400f77c:	b925      	cbnz	r5, 3400f788 <HAL_CACHEAXI_CleanInvalidByAddr+0x30>
3400f77e:	f240 214e 	movw	r1, #590	@ 0x24e
3400f782:	4808      	ldr	r0, [pc, #32]	@ (3400f7a4 <HAL_CACHEAXI_CleanInvalidByAddr+0x4c>)
3400f784:	f00e f900 	bl	3401d988 <assert_failed>
  status = CACHEAXI_CommandByAddr(hcacheaxi, CACHEAXI_COMMAND_CLEAN_INVALIDATE, pAddr, dSize, CACHEAXI_POLLING_MODE);
3400f788:	2300      	movs	r3, #0
3400f78a:	4632      	mov	r2, r6
3400f78c:	9300      	str	r3, [sp, #0]
3400f78e:	2106      	movs	r1, #6
3400f790:	462b      	mov	r3, r5
3400f792:	4620      	mov	r0, r4
3400f794:	f7ff ff3e 	bl	3400f614 <CACHEAXI_CommandByAddr>
}
3400f798:	b002      	add	sp, #8
3400f79a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
3400f79c:	2001      	movs	r0, #1
3400f79e:	e7fb      	b.n	3400f798 <HAL_CACHEAXI_CleanInvalidByAddr+0x40>
3400f7a0:	580dfc00 	.word	0x580dfc00
3400f7a4:	340266c2 	.word	0x340266c2

3400f7a8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400f7a8:	1ec3      	subs	r3, r0, #3
3400f7aa:	2b04      	cmp	r3, #4
{
3400f7ac:	b510      	push	{r4, lr}
3400f7ae:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400f7b0:	d903      	bls.n	3400f7ba <HAL_NVIC_SetPriorityGrouping+0x12>
3400f7b2:	21e6      	movs	r1, #230	@ 0xe6
3400f7b4:	4809      	ldr	r0, [pc, #36]	@ (3400f7dc <HAL_NVIC_SetPriorityGrouping+0x34>)
3400f7b6:	f00e f8e7 	bl	3401d988 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400f7ba:	4909      	ldr	r1, [pc, #36]	@ (3400f7e0 <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400f7bc:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
3400f7be:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
3400f7c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
3400f7c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
3400f7c8:	0412      	lsls	r2, r2, #16
3400f7ca:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
3400f7cc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400f7ce:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
3400f7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
3400f7d6:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
3400f7d8:	bd10      	pop	{r4, pc}
3400f7da:	bf00      	nop
3400f7dc:	34026727 	.word	0x34026727
3400f7e0:	e000ed00 	.word	0xe000ed00

3400f7e4 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f7e4:	f110 0f0c 	cmn.w	r0, #12
{
3400f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400f7ec:	4605      	mov	r5, r0
3400f7ee:	460c      	mov	r4, r1
3400f7f0:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f7f2:	db01      	blt.n	3400f7f8 <HAL_NVIC_SetPriority+0x14>
3400f7f4:	1d03      	adds	r3, r0, #4
3400f7f6:	d103      	bne.n	3400f800 <HAL_NVIC_SetPriority+0x1c>
3400f7f8:	21ff      	movs	r1, #255	@ 0xff
3400f7fa:	4826      	ldr	r0, [pc, #152]	@ (3400f894 <HAL_NVIC_SetPriority+0xb0>)
3400f7fc:	f00e f8c4 	bl	3401d988 <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
3400f800:	4b25      	ldr	r3, [pc, #148]	@ (3400f898 <HAL_NVIC_SetPriority+0xb4>)
3400f802:	68de      	ldr	r6, [r3, #12]
3400f804:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
3400f808:	2e02      	cmp	r6, #2
3400f80a:	d806      	bhi.n	3400f81a <HAL_NVIC_SetPriority+0x36>
3400f80c:	b157      	cbz	r7, 3400f824 <HAL_NVIC_SetPriority+0x40>
3400f80e:	f44f 7181 	mov.w	r1, #258	@ 0x102
3400f812:	4820      	ldr	r0, [pc, #128]	@ (3400f894 <HAL_NVIC_SetPriority+0xb0>)
3400f814:	f00e f8b8 	bl	3401d988 <assert_failed>
3400f818:	e004      	b.n	3400f824 <HAL_NVIC_SetPriority+0x40>
3400f81a:	2301      	movs	r3, #1
3400f81c:	1ef2      	subs	r2, r6, #3
3400f81e:	4093      	lsls	r3, r2
3400f820:	42bb      	cmp	r3, r7
3400f822:	d9f4      	bls.n	3400f80e <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
3400f824:	2c0f      	cmp	r4, #15
3400f826:	f1c6 0807 	rsb	r8, r6, #7
3400f82a:	d804      	bhi.n	3400f836 <HAL_NVIC_SetPriority+0x52>
3400f82c:	2301      	movs	r3, #1
3400f82e:	fa03 f308 	lsl.w	r3, r3, r8
3400f832:	42a3      	cmp	r3, r4
3400f834:	d804      	bhi.n	3400f840 <HAL_NVIC_SetPriority+0x5c>
3400f836:	f240 1103 	movw	r1, #259	@ 0x103
3400f83a:	4816      	ldr	r0, [pc, #88]	@ (3400f894 <HAL_NVIC_SetPriority+0xb0>)
3400f83c:	f00e f8a4 	bl	3401d988 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f840:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f844:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f848:	bf28      	it	cs
3400f84a:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f84e:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f852:	2b06      	cmp	r3, #6
3400f854:	f1a6 0603 	sub.w	r6, r6, #3
3400f858:	bf98      	it	ls
3400f85a:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f85c:	fa02 f808 	lsl.w	r8, r2, r8
3400f860:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
3400f864:	40b2      	lsls	r2, r6
3400f866:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f86a:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
3400f86c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3400f86e:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f872:	bfac      	ite	ge
3400f874:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f878:	4a08      	ldrlt	r2, [pc, #32]	@ (3400f89c <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f87a:	ea4f 1303 	mov.w	r3, r3, lsl #4
3400f87e:	b2db      	uxtb	r3, r3
3400f880:	bfab      	itete	ge
3400f882:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f886:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f88a:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3400f88e:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
3400f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400f894:	34026727 	.word	0x34026727
3400f898:	e000ed00 	.word	0xe000ed00
3400f89c:	e000ed14 	.word	0xe000ed14

3400f8a0 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400f8a0:	2800      	cmp	r0, #0
3400f8a2:	db08      	blt.n	3400f8b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
3400f8a4:	2301      	movs	r3, #1
3400f8a6:	0941      	lsrs	r1, r0, #5
3400f8a8:	4a05      	ldr	r2, [pc, #20]	@ (3400f8c0 <HAL_NVIC_EnableIRQ+0x20>)
3400f8aa:	f000 001f 	and.w	r0, r0, #31
3400f8ae:	4083      	lsls	r3, r0
3400f8b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
3400f8b4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
3400f8b6:	f240 1115 	movw	r1, #277	@ 0x115
3400f8ba:	4802      	ldr	r0, [pc, #8]	@ (3400f8c4 <HAL_NVIC_EnableIRQ+0x24>)
3400f8bc:	f00e b864 	b.w	3401d988 <assert_failed>
3400f8c0:	e000e100 	.word	0xe000e100
3400f8c4:	34026727 	.word	0x34026727

3400f8c8 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
3400f8c8:	4b02      	ldr	r3, [pc, #8]	@ (3400f8d4 <HAL_NVIC_GetPriorityGrouping+0xc>)
3400f8ca:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
3400f8cc:	f3c0 2002 	ubfx	r0, r0, #8, #3
3400f8d0:	4770      	bx	lr
3400f8d2:	bf00      	nop
3400f8d4:	e000ed00 	.word	0xe000ed00

3400f8d8 <HAL_NVIC_GetPriority>:
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f8d8:	f110 0f0c 	cmn.w	r0, #12
{
3400f8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400f8de:	4604      	mov	r4, r0
3400f8e0:	460d      	mov	r5, r1
3400f8e2:	4617      	mov	r7, r2
3400f8e4:	461e      	mov	r6, r3
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
3400f8e6:	db01      	blt.n	3400f8ec <HAL_NVIC_GetPriority+0x14>
3400f8e8:	1d03      	adds	r3, r0, #4
3400f8ea:	d104      	bne.n	3400f8f6 <HAL_NVIC_GetPriority+0x1e>
3400f8ec:	f44f 71bc 	mov.w	r1, #376	@ 0x178
3400f8f0:	4819      	ldr	r0, [pc, #100]	@ (3400f958 <HAL_NVIC_GetPriority+0x80>)
3400f8f2:	f00e f849 	bl	3401d988 <assert_failed>
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
3400f8f6:	1eeb      	subs	r3, r5, #3
3400f8f8:	2b04      	cmp	r3, #4
3400f8fa:	d904      	bls.n	3400f906 <HAL_NVIC_GetPriority+0x2e>
3400f8fc:	f240 1179 	movw	r1, #377	@ 0x179
3400f900:	4815      	ldr	r0, [pc, #84]	@ (3400f958 <HAL_NVIC_GetPriority+0x80>)
3400f902:	f00e f841 	bl	3401d988 <assert_failed>
  if ((int32_t)(IRQn) >= 0)
3400f906:	2c00      	cmp	r4, #0
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
3400f908:	bfac      	ite	ge
3400f90a:	f104 4460 	addge.w	r4, r4, #3758096384	@ 0xe0000000
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f90e:	4b13      	ldrlt	r3, [pc, #76]	@ (3400f95c <HAL_NVIC_GetPriority+0x84>)
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
3400f910:	f005 0107 	and.w	r1, r5, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f914:	f1c1 0207 	rsb	r2, r1, #7
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
3400f918:	bfab      	itete	ge
3400f91a:	f504 4461 	addge.w	r4, r4, #57600	@ 0xe100
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f91e:	f004 040f 	andlt.w	r4, r4, #15
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
3400f922:	f894 3300 	ldrbge.w	r3, [r4, #768]	@ 0x300
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f926:	5d1b      	ldrblt	r3, [r3, r4]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f928:	1d08      	adds	r0, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3400f92a:	2a04      	cmp	r2, #4
3400f92c:	bf28      	it	cs
3400f92e:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f930:	2806      	cmp	r0, #6
3400f932:	f1a1 0103 	sub.w	r1, r1, #3

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f936:	f04f 30ff 	mov.w	r0, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400f93a:	bf98      	it	ls
3400f93c:	2100      	movls	r1, #0
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
3400f93e:	091b      	lsrs	r3, r3, #4
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f940:	fa00 f202 	lsl.w	r2, r0, r2
3400f944:	fa23 f401 	lsr.w	r4, r3, r1
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
3400f948:	4088      	lsls	r0, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f94a:	ea24 0202 	bic.w	r2, r4, r2
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
3400f94e:	ea23 0300 	bic.w	r3, r3, r0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
3400f952:	603a      	str	r2, [r7, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
3400f954:	6033      	str	r3, [r6, #0]

  /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
3400f956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400f958:	34026727 	.word	0x34026727
3400f95c:	e000ed14 	.word	0xe000ed14

3400f960 <DCMIPP_CSI_SetVCConfig>:
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  Pipe            Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_SetVCConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
3400f960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400f962:	4614      	mov	r4, r2
  uint32_t tickstart;

  /* Set Virtual Channel ID for the selected Pipe */
  if (Pipe == DCMIPP_PIPE0)
  {
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
3400f964:	6803      	ldr	r3, [r0, #0]
  if (Pipe == DCMIPP_PIPE0)
3400f966:	bb71      	cbnz	r1, 3400f9c6 <DCMIPP_CSI_SetVCConfig+0x66>
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
3400f968:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
3400f96c:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
3400f970:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
3400f974:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
    }
  }

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
3400f978:	4b23      	ldr	r3, [pc, #140]	@ (3400fa08 <DCMIPP_CSI_SetVCConfig+0xa8>)
3400f97a:	2c02      	cmp	r4, #2
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
      break;
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3400f97c:	681a      	ldr	r2, [r3, #0]
  switch (VirtualChannel)
3400f97e:	d038      	beq.n	3400f9f2 <DCMIPP_CSI_SetVCConfig+0x92>
3400f980:	2c03      	cmp	r4, #3
3400f982:	d039      	beq.n	3400f9f8 <DCMIPP_CSI_SetVCConfig+0x98>
3400f984:	2c01      	cmp	r4, #1
3400f986:	d13a      	bne.n	3400f9fe <DCMIPP_CSI_SetVCConfig+0x9e>
      SET_BIT(csi_instance->CR, CSI_CR_VC1START);
3400f988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3400f98c:	601a      	str	r2, [r3, #0]
      break;
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
3400f98e:	f00d fccb 	bl	3401d328 <HAL_GetTick>
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
    {
      return HAL_ERROR;
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
3400f992:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  tickstart = HAL_GetTick();
3400f996:	4607      	mov	r7, r0
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
3400f998:	4d1b      	ldr	r5, [pc, #108]	@ (3400fa08 <DCMIPP_CSI_SetVCConfig+0xa8>)
3400f99a:	40a6      	lsls	r6, r4
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
3400f99c:	f00d fcc4 	bl	3401d328 <HAL_GetTick>
3400f9a0:	1bc0      	subs	r0, r0, r7
3400f9a2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
3400f9a6:	d82d      	bhi.n	3400fa04 <DCMIPP_CSI_SetVCConfig+0xa4>
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
3400f9a8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
3400f9ac:	ea36 0303 	bics.w	r3, r6, r3
3400f9b0:	d1f4      	bne.n	3400f99c <DCMIPP_CSI_SetVCConfig+0x3c>

  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
3400f9b2:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
                             (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
3400f9b6:	2000      	movs	r0, #0
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
3400f9b8:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
3400f9bc:	40a3      	lsls	r3, r4
3400f9be:	4313      	orrs	r3, r2
3400f9c0:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
3400f9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Pipe == DCMIPP_PIPE1)
3400f9c6:	2901      	cmp	r1, #1
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
3400f9c8:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
  else if (Pipe == DCMIPP_PIPE1)
3400f9cc:	d106      	bne.n	3400f9dc <DCMIPP_CSI_SetVCConfig+0x7c>
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
3400f9ce:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
3400f9d2:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
3400f9d6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
3400f9da:	e7cd      	b.n	3400f978 <DCMIPP_CSI_SetVCConfig+0x18>
    if ((hdcmipp->Instance->P1FSCR & DCMIPP_P1FSCR_PIPEDIFF) == DCMIPP_P1FSCR_PIPEDIFF)
3400f9dc:	0352      	lsls	r2, r2, #13
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
3400f9de:	bf41      	itttt	mi
3400f9e0:	f8d3 2c04 	ldrmi.w	r2, [r3, #3076]	@ 0xc04
3400f9e4:	f422 12c0 	bicmi.w	r2, r2, #1572864	@ 0x180000
3400f9e8:	ea42 42c4 	orrmi.w	r2, r2, r4, lsl #19
3400f9ec:	f8c3 2c04 	strmi.w	r2, [r3, #3076]	@ 0xc04
3400f9f0:	e7c2      	b.n	3400f978 <DCMIPP_CSI_SetVCConfig+0x18>
      SET_BIT(csi_instance->CR, CSI_CR_VC2START);
3400f9f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3400f9f6:	e7c9      	b.n	3400f98c <DCMIPP_CSI_SetVCConfig+0x2c>
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
3400f9f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
3400f9fc:	e7c6      	b.n	3400f98c <DCMIPP_CSI_SetVCConfig+0x2c>
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
3400f9fe:	f042 0204 	orr.w	r2, r2, #4
3400fa02:	e7c3      	b.n	3400f98c <DCMIPP_CSI_SetVCConfig+0x2c>
      return HAL_ERROR;
3400fa04:	2001      	movs	r0, #1
3400fa06:	e7dd      	b.n	3400f9c4 <DCMIPP_CSI_SetVCConfig+0x64>
3400fa08:	58006000 	.word	0x58006000

3400fa0c <DCMIPP_SetConfig.part.0>:
  else if (Pipe == DCMIPP_PIPE1)
3400fa0c:	2901      	cmp	r1, #1
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
3400fa0e:	b530      	push	{r4, r5, lr}
3400fa10:	f04f 0502 	mov.w	r5, #2
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
3400fa14:	6804      	ldr	r4, [r0, #0]
  else if (Pipe == DCMIPP_PIPE1)
3400fa16:	d110      	bne.n	3400fa3a <DCMIPP_SetConfig.part.0+0x2e>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400fa18:	7185      	strb	r5, [r0, #6]
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
3400fa1a:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
3400fa1e:	430b      	orrs	r3, r1
3400fa20:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
    WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
3400fa24:	f8c4 29c4 	str.w	r2, [r4, #2500]	@ 0x9c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME  | DCMIPP_IT_PIPE1_OVR | DCMIPP_IT_PIPE1_VSYNC |
3400fa28:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
3400fa2c:	f443 0306 	orr.w	r3, r3, #8781824	@ 0x860000
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
3400fa30:	f043 0320 	orr.w	r3, r3, #32
3400fa34:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
}
3400fa38:	bd30      	pop	{r4, r5, pc}
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400fa3a:	4408      	add	r0, r1
3400fa3c:	7145      	strb	r5, [r0, #5]
    hdcmipp->Instance->P2FCTCR |= CaptureMode;
3400fa3e:	f8d4 1d00 	ldr.w	r1, [r4, #3328]	@ 0xd00
3400fa42:	430b      	orrs	r3, r1
3400fa44:	f8c4 3d00 	str.w	r3, [r4, #3328]	@ 0xd00
    WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
3400fa48:	f8c4 2dc4 	str.w	r2, [r4, #3524]	@ 0xdc4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
3400fa4c:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
3400fa50:	f043 4306 	orr.w	r3, r3, #2248146944	@ 0x86000000
3400fa54:	e7ec      	b.n	3400fa30 <DCMIPP_SetConfig.part.0+0x24>

3400fa56 <DCMIPP_SetConfig>:
{
3400fa56:	b470      	push	{r4, r5, r6}
3400fa58:	4615      	mov	r5, r2
3400fa5a:	461e      	mov	r6, r3
  if (Pipe == DCMIPP_PIPE0)
3400fa5c:	b999      	cbnz	r1, 3400fa86 <DCMIPP_SetConfig+0x30>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400fa5e:	2302      	movs	r3, #2
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
3400fa60:	6801      	ldr	r1, [r0, #0]
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400fa62:	7143      	strb	r3, [r0, #5]
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
3400fa64:	f8d1 2500 	ldr.w	r2, [r1, #1280]	@ 0x500
3400fa68:	4332      	orrs	r2, r6
3400fa6a:	f8c1 2500 	str.w	r2, [r1, #1280]	@ 0x500
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
3400fa6e:	f8c1 55c4 	str.w	r5, [r1, #1476]	@ 0x5c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
3400fa72:	f8d1 33f0 	ldr.w	r3, [r1, #1008]	@ 0x3f0
}
3400fa76:	bc70      	pop	{r4, r5, r6}
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
3400fa78:	f443 4306 	orr.w	r3, r3, #34304	@ 0x8600
3400fa7c:	f043 0320 	orr.w	r3, r3, #32
3400fa80:	f8c1 33f0 	str.w	r3, [r1, #1008]	@ 0x3f0
}
3400fa84:	4770      	bx	lr
3400fa86:	bc70      	pop	{r4, r5, r6}
3400fa88:	f7ff bfc0 	b.w	3400fa0c <DCMIPP_SetConfig.part.0>

3400fa8c <DCMIPP_EnableCapture.part.0>:
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400fa8c:	2302      	movs	r3, #2
3400fa8e:	7183      	strb	r3, [r0, #6]
    SET_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
3400fa90:	6803      	ldr	r3, [r0, #0]
3400fa92:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
3400fa96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3400fa9a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    SET_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
3400fa9e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3400faa2:	f042 0208 	orr.w	r2, r2, #8
3400faa6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
3400faaa:	4770      	bx	lr

3400faac <DCMIPP_EnableCapture>:
  if (Pipe == DCMIPP_PIPE0)
3400faac:	b969      	cbnz	r1, 3400faca <DCMIPP_EnableCapture+0x1e>
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
3400faae:	6803      	ldr	r3, [r0, #0]
3400fab0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
3400fab4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3400fab8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
3400fabc:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
3400fac0:	f042 0208 	orr.w	r2, r2, #8
3400fac4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
3400fac8:	4770      	bx	lr
  else if (Pipe == DCMIPP_PIPE1)
3400faca:	2901      	cmp	r1, #1
3400facc:	d101      	bne.n	3400fad2 <DCMIPP_EnableCapture+0x26>
3400face:	f7ff bfdd 	b.w	3400fa8c <DCMIPP_EnableCapture.part.0>
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
3400fad2:	6803      	ldr	r3, [r0, #0]
3400fad4:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
3400fad8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
3400fadc:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
3400fae0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3400fae4:	f042 0208 	orr.w	r2, r2, #8
3400fae8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
}
3400faec:	4770      	bx	lr
	...

3400faf0 <DCMIPP_CSI_WritePHYReg.constprop.0>:
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400faf0:	4b18      	ldr	r3, [pc, #96]	@ (3400fb54 <DCMIPP_CSI_WritePHYReg.constprop.0+0x64>)
static void DCMIPP_CSI_WritePHYReg(CSI_TypeDef *hcsi, uint32_t reg_msb, uint32_t reg_lsb, uint32_t val)
3400faf2:	b510      	push	{r4, lr}
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400faf4:	695a      	ldr	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
3400faf6:	b2c9      	uxtb	r1, r1
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400faf8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
3400fafc:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400fafe:	691a      	ldr	r2, [r3, #16]
3400fb00:	f042 0201 	orr.w	r2, r2, #1
3400fb04:	611a      	str	r2, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400fb06:	695a      	ldr	r2, [r3, #20]
3400fb08:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
3400fb0c:	615a      	str	r2, [r3, #20]
  CLEAR_REG(hcsi->PTCR0);
3400fb0e:	2200      	movs	r2, #0
3400fb10:	611a      	str	r2, [r3, #16]
  CLEAR_REG(hcsi->PTCR1);
3400fb12:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, reg_msb & 0xFFU);
3400fb14:	695c      	ldr	r4, [r3, #20]
3400fb16:	615c      	str	r4, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400fb18:	691c      	ldr	r4, [r3, #16]
3400fb1a:	f044 0401 	orr.w	r4, r4, #1
3400fb1e:	611c      	str	r4, [r3, #16]
  CLEAR_REG(hcsi->PTCR0);
3400fb20:	611a      	str	r2, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
3400fb22:	695c      	ldr	r4, [r3, #20]
3400fb24:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
3400fb28:	615c      	str	r4, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400fb2a:	691c      	ldr	r4, [r3, #16]
3400fb2c:	f044 0401 	orr.w	r4, r4, #1
3400fb30:	611c      	str	r4, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM | (reg_lsb & 0xFFU));
3400fb32:	695c      	ldr	r4, [r3, #20]
3400fb34:	4304      	orrs	r4, r0
3400fb36:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
3400fb3a:	615c      	str	r4, [r3, #20]
  CLEAR_REG(hcsi->PTCR0);
3400fb3c:	611a      	str	r2, [r3, #16]
  CLEAR_REG(hcsi->PTCR1);
3400fb3e:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
3400fb40:	6958      	ldr	r0, [r3, #20]
3400fb42:	4301      	orrs	r1, r0
3400fb44:	6159      	str	r1, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
3400fb46:	6919      	ldr	r1, [r3, #16]
3400fb48:	f041 0101 	orr.w	r1, r1, #1
3400fb4c:	6119      	str	r1, [r3, #16]
  CLEAR_REG(hcsi->PTCR0);
3400fb4e:	611a      	str	r2, [r3, #16]
}
3400fb50:	bd10      	pop	{r4, pc}
3400fb52:	bf00      	nop
3400fb54:	58007000 	.word	0x58007000

3400fb58 <HAL_DCMIPP_Init>:
{
3400fb58:	b510      	push	{r4, lr}
  if (hdcmipp == NULL)
3400fb5a:	4604      	mov	r4, r0
3400fb5c:	b1d8      	cbz	r0, 3400fb96 <HAL_DCMIPP_Init+0x3e>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400fb5e:	6803      	ldr	r3, [r0, #0]
3400fb60:	4a0e      	ldr	r2, [pc, #56]	@ (3400fb9c <HAL_DCMIPP_Init+0x44>)
3400fb62:	4293      	cmp	r3, r2
3400fb64:	d008      	beq.n	3400fb78 <HAL_DCMIPP_Init+0x20>
3400fb66:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400fb6a:	4293      	cmp	r3, r2
3400fb6c:	d004      	beq.n	3400fb78 <HAL_DCMIPP_Init+0x20>
3400fb6e:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
3400fb72:	480b      	ldr	r0, [pc, #44]	@ (3400fba0 <HAL_DCMIPP_Init+0x48>)
3400fb74:	f00d ff08 	bl	3401d988 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
3400fb78:	7923      	ldrb	r3, [r4, #4]
3400fb7a:	b913      	cbnz	r3, 3400fb82 <HAL_DCMIPP_Init+0x2a>
    HAL_DCMIPP_MspInit(hdcmipp);
3400fb7c:	4620      	mov	r0, r4
3400fb7e:	f7f7 f82f 	bl	34006be0 <HAL_DCMIPP_MspInit>
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
3400fb82:	2303      	movs	r3, #3
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
3400fb84:	2000      	movs	r0, #0
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
3400fb86:	7123      	strb	r3, [r4, #4]
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
3400fb88:	2301      	movs	r3, #1
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
3400fb8a:	7160      	strb	r0, [r4, #5]
3400fb8c:	71a0      	strb	r0, [r4, #6]
3400fb8e:	71e0      	strb	r0, [r4, #7]
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
3400fb90:	60a0      	str	r0, [r4, #8]
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
3400fb92:	7123      	strb	r3, [r4, #4]
}
3400fb94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3400fb96:	2001      	movs	r0, #1
3400fb98:	e7fc      	b.n	3400fb94 <HAL_DCMIPP_Init+0x3c>
3400fb9a:	bf00      	nop
3400fb9c:	58002000 	.word	0x58002000
3400fba0:	3402678a 	.word	0x3402678a

3400fba4 <HAL_DCMIPP_CSI_SetConfig>:
{
3400fba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400fba8:	4605      	mov	r5, r0
3400fbaa:	b0fe      	sub	sp, #504	@ 0x1f8
3400fbac:	460c      	mov	r4, r1
  const SNPS_FreqsTypeDef SNPS_Freqs[63] =
3400fbae:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
3400fbb2:	4668      	mov	r0, sp
3400fbb4:	4954      	ldr	r1, [pc, #336]	@ (3400fd08 <HAL_DCMIPP_CSI_SetConfig+0x164>)
3400fbb6:	f00f f9ea 	bl	3401ef8e <memcpy>
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
3400fbba:	b91d      	cbnz	r5, 3400fbc4 <HAL_DCMIPP_CSI_SetConfig+0x20>
    return HAL_ERROR;
3400fbbc:	2001      	movs	r0, #1
}
3400fbbe:	b07e      	add	sp, #504	@ 0x1f8
3400fbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
3400fbc4:	2c00      	cmp	r4, #0
3400fbc6:	d0f9      	beq.n	3400fbbc <HAL_DCMIPP_CSI_SetConfig+0x18>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400fbc8:	682b      	ldr	r3, [r5, #0]
3400fbca:	4a50      	ldr	r2, [pc, #320]	@ (3400fd0c <HAL_DCMIPP_CSI_SetConfig+0x168>)
3400fbcc:	4293      	cmp	r3, r2
3400fbce:	d008      	beq.n	3400fbe2 <HAL_DCMIPP_CSI_SetConfig+0x3e>
3400fbd0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400fbd4:	4293      	cmp	r3, r2
3400fbd6:	d004      	beq.n	3400fbe2 <HAL_DCMIPP_CSI_SetConfig+0x3e>
3400fbd8:	f240 218b 	movw	r1, #651	@ 0x28b
3400fbdc:	484c      	ldr	r0, [pc, #304]	@ (3400fd10 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400fbde:	f00d fed3 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_NUMBER_OF_LANES(pCSI_Config->NumberOfLanes));
3400fbe2:	6823      	ldr	r3, [r4, #0]
3400fbe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400fbe8:	d007      	beq.n	3400fbfa <HAL_DCMIPP_CSI_SetConfig+0x56>
3400fbea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400fbee:	d004      	beq.n	3400fbfa <HAL_DCMIPP_CSI_SetConfig+0x56>
3400fbf0:	f44f 7123 	mov.w	r1, #652	@ 0x28c
3400fbf4:	4846      	ldr	r0, [pc, #280]	@ (3400fd10 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400fbf6:	f00d fec7 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_LANE_MAPPING(pCSI_Config->DataLaneMapping));
3400fbfa:	6863      	ldr	r3, [r4, #4]
3400fbfc:	3b01      	subs	r3, #1
3400fbfe:	2b01      	cmp	r3, #1
3400fc00:	d904      	bls.n	3400fc0c <HAL_DCMIPP_CSI_SetConfig+0x68>
3400fc02:	f240 218d 	movw	r1, #653	@ 0x28d
3400fc06:	4842      	ldr	r0, [pc, #264]	@ (3400fd10 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400fc08:	f00d febe 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_PHY_BITRATE(pCSI_Config->PHYBitrate));
3400fc0c:	68a3      	ldr	r3, [r4, #8]
3400fc0e:	2b3e      	cmp	r3, #62	@ 0x3e
3400fc10:	d904      	bls.n	3400fc1c <HAL_DCMIPP_CSI_SetConfig+0x78>
3400fc12:	f240 218e 	movw	r1, #654	@ 0x28e
3400fc16:	483e      	ldr	r0, [pc, #248]	@ (3400fd10 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
3400fc18:	f00d feb6 	bl	3401d988 <assert_failed>
  CLEAR_BIT(csi_instance->CR, CSI_CR_CSIEN);
3400fc1c:	4b3d      	ldr	r3, [pc, #244]	@ (3400fd14 <HAL_DCMIPP_CSI_SetConfig+0x170>)
3400fc1e:	681a      	ldr	r2, [r3, #0]
3400fc20:	f022 0201 	bic.w	r2, r2, #1
3400fc24:	601a      	str	r2, [r3, #0]
  if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
3400fc26:	6861      	ldr	r1, [r4, #4]
3400fc28:	2901      	cmp	r1, #1
3400fc2a:	d11a      	bne.n	3400fc62 <HAL_DCMIPP_CSI_SetConfig+0xbe>
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL0MAP_Pos) | \
3400fc2c:	6822      	ldr	r2, [r4, #0]
3400fc2e:	f442 1204 	orr.w	r2, r2, #2162688	@ 0x210000
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
3400fc32:	671a      	str	r2, [r3, #112]	@ 0x70
  SET_BIT(csi_instance->CR, CSI_CR_CSIEN);
3400fc34:	681a      	ldr	r2, [r3, #0]
3400fc36:	f042 0201 	orr.w	r2, r2, #1
3400fc3a:	601a      	str	r2, [r3, #0]
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO |  DCMIPP_CSI_IT_SYNCERR | \
3400fc3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400fc40:	f042 42b0 	orr.w	r2, r2, #1476395008	@ 0x58000000
3400fc44:	f442 1204 	orr.w	r2, r2, #2162688	@ 0x210000
3400fc48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400fc4c:	6822      	ldr	r2, [r4, #0]
3400fc4e:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0 | DCMIPP_CSI_IT_ESOTSYNCDL0 |
3400fc52:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400fc56:	d154      	bne.n	3400fd02 <HAL_DCMIPP_CSI_SetConfig+0x15e>
    if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
3400fc58:	2901      	cmp	r1, #1
3400fc5a:	d108      	bne.n	3400fc6e <HAL_DCMIPP_CSI_SetConfig+0xca>
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400fc5c:	f042 021f 	orr.w	r2, r2, #31
3400fc60:	e007      	b.n	3400fc72 <HAL_DCMIPP_CSI_SetConfig+0xce>
  else if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_INVERTED_DATA_LANES)
3400fc62:	2902      	cmp	r1, #2
3400fc64:	d1aa      	bne.n	3400fbbc <HAL_DCMIPP_CSI_SetConfig+0x18>
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
3400fc66:	6822      	ldr	r2, [r4, #0]
3400fc68:	f442 1290 	orr.w	r2, r2, #1179648	@ 0x120000
3400fc6c:	e7e1      	b.n	3400fc32 <HAL_DCMIPP_CSI_SetConfig+0x8e>
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400fc6e:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
  CLEAR_REG(csi_instance-> PCR);
3400fc72:	2600      	movs	r6, #0
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3400fc74:	4d28      	ldr	r5, [pc, #160]	@ (3400fd18 <HAL_DCMIPP_CSI_SetConfig+0x174>)
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400fc76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3400fc7a:	682b      	ldr	r3, [r5, #0]
3400fc7c:	4f25      	ldr	r7, [pc, #148]	@ (3400fd14 <HAL_DCMIPP_CSI_SetConfig+0x170>)
3400fc7e:	f023 0302 	bic.w	r3, r3, #2
3400fc82:	602b      	str	r3, [r5, #0]
  CLEAR_REG(csi_instance-> PCR);
3400fc84:	607e      	str	r6, [r7, #4]
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
3400fc86:	692b      	ldr	r3, [r5, #16]
  HAL_Delay(1);
3400fc88:	2001      	movs	r0, #1
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
3400fc8a:	f043 0301 	orr.w	r3, r3, #1
3400fc8e:	612b      	str	r3, [r5, #16]
  HAL_Delay(1);
3400fc90:	f00d fb4c 	bl	3401d32c <HAL_Delay>
  CLEAR_REG(csi_instance->PTCR0);
3400fc94:	612e      	str	r6, [r5, #16]
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400fc96:	f8d4 8008 	ldr.w	r8, [r4, #8]
3400fc9a:	68ab      	ldr	r3, [r5, #8]
3400fc9c:	f85d 2038 	ldr.w	r2, [sp, r8, lsl #3]
3400fca0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
3400fca4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
3400fca8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
3400fcac:	60ab      	str	r3, [r5, #8]
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
3400fcae:	2138      	movs	r1, #56	@ 0x38
3400fcb0:	2008      	movs	r0, #8
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400fcb2:	0216      	lsls	r6, r2, #8
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
3400fcb4:	f7ff ff1c 	bl	3400faf0 <DCMIPP_CSI_WritePHYReg.constprop.0>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe4, 0x11);
3400fcb8:	2111      	movs	r1, #17
3400fcba:	20e4      	movs	r0, #228	@ 0xe4
3400fcbc:	f7ff ff18 	bl	3400faf0 <DCMIPP_CSI_WritePHYReg.constprop.0>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
3400fcc0:	eb0d 03c8 	add.w	r3, sp, r8, lsl #3
3400fcc4:	f8d3 8004 	ldr.w	r8, [r3, #4]
3400fcc8:	20e3      	movs	r0, #227	@ 0xe3
3400fcca:	ea4f 2118 	mov.w	r1, r8, lsr #8
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400fcce:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
3400fcd2:	f7ff ff0d 	bl	3400faf0 <DCMIPP_CSI_WritePHYReg.constprop.0>
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400fcd6:	f046 0628 	orr.w	r6, r6, #40	@ 0x28
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target & 0xFFU);
3400fcda:	20e3      	movs	r0, #227	@ 0xe3
3400fcdc:	fa5f f188 	uxtb.w	r1, r8
3400fce0:	f7ff ff06 	bl	3400faf0 <DCMIPP_CSI_WritePHYReg.constprop.0>
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3400fce4:	60ae      	str	r6, [r5, #8]
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400fce6:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(csi_instance->PMCR);
3400fce8:	2000      	movs	r0, #0
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3400fcea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
3400fcee:	bf0c      	ite	eq
3400fcf0:	2307      	moveq	r3, #7
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_DL1EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
3400fcf2:	230f      	movne	r3, #15
3400fcf4:	607b      	str	r3, [r7, #4]
  SET_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3400fcf6:	682b      	ldr	r3, [r5, #0]
3400fcf8:	f043 0302 	orr.w	r3, r3, #2
3400fcfc:	602b      	str	r3, [r5, #0]
  CLEAR_REG(csi_instance->PMCR);
3400fcfe:	6068      	str	r0, [r5, #4]
  return HAL_OK;
3400fd00:	e75d      	b.n	3400fbbe <HAL_DCMIPP_CSI_SetConfig+0x1a>
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3400fd02:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
3400fd06:	e7a9      	b.n	3400fc5c <HAL_DCMIPP_CSI_SetConfig+0xb8>
3400fd08:	340229bc 	.word	0x340229bc
3400fd0c:	58002000 	.word	0x58002000
3400fd10:	3402678a 	.word	0x3402678a
3400fd14:	58006000 	.word	0x58006000
3400fd18:	58007000 	.word	0x58007000

3400fd1c <HAL_DCMIPP_CSI_PIPE_SetConfig>:
{
3400fd1c:	b570      	push	{r4, r5, r6, lr}
3400fd1e:	460d      	mov	r5, r1
3400fd20:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
3400fd22:	4606      	mov	r6, r0
3400fd24:	b908      	cbnz	r0, 3400fd2a <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe>
    return HAL_ERROR;
3400fd26:	2001      	movs	r0, #1
}
3400fd28:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
3400fd2a:	2a00      	cmp	r2, #0
3400fd2c:	d0fb      	beq.n	3400fd26 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400fd2e:	6803      	ldr	r3, [r0, #0]
3400fd30:	4a50      	ldr	r2, [pc, #320]	@ (3400fe74 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x158>)
3400fd32:	4293      	cmp	r3, r2
3400fd34:	d008      	beq.n	3400fd48 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2c>
3400fd36:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400fd3a:	4293      	cmp	r3, r2
3400fd3c:	d004      	beq.n	3400fd48 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2c>
3400fd3e:	f44f 7144 	mov.w	r1, #784	@ 0x310
3400fd42:	484d      	ldr	r0, [pc, #308]	@ (3400fe78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fd44:	f00d fe20 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3400fd48:	2d02      	cmp	r5, #2
3400fd4a:	d904      	bls.n	3400fd56 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x3a>
3400fd4c:	f240 3111 	movw	r1, #785	@ 0x311
3400fd50:	4849      	ldr	r0, [pc, #292]	@ (3400fe78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fd52:	f00d fe19 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
3400fd56:	6823      	ldr	r3, [r4, #0]
3400fd58:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400fd5c:	d004      	beq.n	3400fd68 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x4c>
3400fd5e:	f240 3112 	movw	r1, #786	@ 0x312
3400fd62:	4845      	ldr	r0, [pc, #276]	@ (3400fe78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fd64:	f00d fe10 	bl	3401d988 <assert_failed>
  if (Pipe != DCMIPP_PIPE2)
3400fd68:	2d02      	cmp	r5, #2
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
3400fd6a:	6823      	ldr	r3, [r4, #0]
  if (Pipe != DCMIPP_PIPE2)
3400fd6c:	d01c      	beq.n	3400fda8 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
3400fd6e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3400fd72:	d004      	beq.n	3400fd7e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x62>
3400fd74:	f240 3116 	movw	r1, #790	@ 0x316
3400fd78:	483f      	ldr	r0, [pc, #252]	@ (3400fe78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fd7a:	f00d fe05 	bl	3401d988 <assert_failed>
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3400fd7e:	6823      	ldr	r3, [r4, #0]
3400fd80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400fd84:	d002      	beq.n	3400fd8c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x70>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
3400fd86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3400fd8a:	d10d      	bne.n	3400fda8 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
      assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDB));
3400fd8c:	68a3      	ldr	r3, [r4, #8]
3400fd8e:	3b18      	subs	r3, #24
3400fd90:	2b15      	cmp	r3, #21
3400fd92:	d804      	bhi.n	3400fd9e <HAL_DCMIPP_CSI_PIPE_SetConfig+0x82>
3400fd94:	4a39      	ldr	r2, [pc, #228]	@ (3400fe7c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x160>)
3400fd96:	fa22 f303 	lsr.w	r3, r2, r3
3400fd9a:	07da      	lsls	r2, r3, #31
3400fd9c:	d404      	bmi.n	3400fda8 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
3400fd9e:	f240 311b 	movw	r1, #795	@ 0x31b
3400fda2:	4835      	ldr	r0, [pc, #212]	@ (3400fe78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fda4:	f00d fdf0 	bl	3401d988 <assert_failed>
  if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
3400fda8:	6823      	ldr	r3, [r4, #0]
3400fdaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3400fdae:	d00d      	beq.n	3400fdcc <HAL_DCMIPP_CSI_PIPE_SetConfig+0xb0>
    assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDA));
3400fdb0:	6863      	ldr	r3, [r4, #4]
3400fdb2:	3b18      	subs	r3, #24
3400fdb4:	2b15      	cmp	r3, #21
3400fdb6:	d804      	bhi.n	3400fdc2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa6>
3400fdb8:	4a30      	ldr	r2, [pc, #192]	@ (3400fe7c <HAL_DCMIPP_CSI_PIPE_SetConfig+0x160>)
3400fdba:	fa22 f303 	lsr.w	r3, r2, r3
3400fdbe:	07db      	lsls	r3, r3, #31
3400fdc0:	d404      	bmi.n	3400fdcc <HAL_DCMIPP_CSI_PIPE_SetConfig+0xb0>
3400fdc2:	f240 3121 	movw	r1, #801	@ 0x321
3400fdc6:	482c      	ldr	r0, [pc, #176]	@ (3400fe78 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3400fdc8:	f00d fdde 	bl	3401d988 <assert_failed>
  state = hdcmipp->State;
3400fdcc:	7933      	ldrb	r3, [r6, #4]
  if ((state == HAL_DCMIPP_STATE_INIT) || (state == HAL_DCMIPP_STATE_READY))
3400fdce:	3b01      	subs	r3, #1
3400fdd0:	2b01      	cmp	r3, #1
3400fdd2:	d82e      	bhi.n	3400fe32 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x116>
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
3400fdd4:	6822      	ldr	r2, [r4, #0]
3400fdd6:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
3400fdda:	d045      	beq.n	3400fe68 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x14c>
3400fddc:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
3400fde0:	d12b      	bne.n	3400fe3a <HAL_DCMIPP_CSI_PIPE_SetConfig+0x11e>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
3400fde2:	2d00      	cmp	r5, #0
3400fde4:	d19f      	bne.n	3400fd26 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
3400fde6:	4613      	mov	r3, r2
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
3400fde8:	6861      	ldr	r1, [r4, #4]
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3400fdea:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
3400fdee:	ea43 0301 	orr.w	r3, r3, r1
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3400fdf2:	6831      	ldr	r1, [r6, #0]
3400fdf4:	d002      	beq.n	3400fdfc <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe0>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
3400fdf6:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
3400fdfa:	d104      	bne.n	3400fe06 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xea>
      if (Pipe != DCMIPP_PIPE2)
3400fdfc:	2d02      	cmp	r5, #2
3400fdfe:	d02b      	beq.n	3400fe58 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>
        pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDB << DCMIPP_P0FSCR_DTIDB_Pos);
3400fe00:	68a2      	ldr	r2, [r4, #8]
3400fe02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (Pipe == DCMIPP_PIPE0)
3400fe06:	b9ed      	cbnz	r5, 3400fe44 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x128>
      MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_DTMODE | DCMIPP_P0FSCR_DTIDA |
3400fe08:	6831      	ldr	r1, [r6, #0]
3400fe0a:	4a1d      	ldr	r2, [pc, #116]	@ (3400fe80 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x164>)
3400fe0c:	f8d1 0404 	ldr.w	r0, [r1, #1028]	@ 0x404
3400fe10:	4002      	ands	r2, r0
3400fe12:	431a      	orrs	r2, r3
3400fe14:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
    CLEAR_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
3400fe18:	6833      	ldr	r3, [r6, #0]
3400fe1a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400fe1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
3400fe22:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    SET_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3400fe26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
3400fe2a:	f042 0201 	orr.w	r2, r2, #1
3400fe2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
3400fe32:	2302      	movs	r3, #2
  return HAL_OK;
3400fe34:	2000      	movs	r0, #0
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
3400fe36:	7133      	strb	r3, [r6, #4]
  return HAL_OK;
3400fe38:	e776      	b.n	3400fd28 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc>
  uint32_t pxfscr_reg = 0;
3400fe3a:	2d02      	cmp	r5, #2
3400fe3c:	bf14      	ite	ne
3400fe3e:	4613      	movne	r3, r2
3400fe40:	2300      	moveq	r3, #0
3400fe42:	e7d1      	b.n	3400fde8 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xcc>
    else if (Pipe == DCMIPP_PIPE1)
3400fe44:	2d01      	cmp	r5, #1
3400fe46:	d107      	bne.n	3400fe58 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>
      MODIFY_REG(hdcmipp->Instance->P1FSCR, (DCMIPP_P1FSCR_DTIDA | DCMIPP_P1FSCR_DTIDB |
3400fe48:	f8d1 0804 	ldr.w	r0, [r1, #2052]	@ 0x804
3400fe4c:	4a0c      	ldr	r2, [pc, #48]	@ (3400fe80 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x164>)
3400fe4e:	4002      	ands	r2, r0
3400fe50:	431a      	orrs	r2, r3
3400fe52:	f8c1 2804 	str.w	r2, [r1, #2052]	@ 0x804
3400fe56:	e7df      	b.n	3400fe18 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xfc>
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_DTIDA, pxfscr_reg);
3400fe58:	f8d1 2c04 	ldr.w	r2, [r1, #3076]	@ 0xc04
3400fe5c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
3400fe60:	4313      	orrs	r3, r2
3400fe62:	f8c1 3c04 	str.w	r3, [r1, #3076]	@ 0xc04
3400fe66:	e7d7      	b.n	3400fe18 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xfc>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
3400fe68:	2d00      	cmp	r5, #0
3400fe6a:	f47f af5c 	bne.w	3400fd26 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
3400fe6e:	4613      	mov	r3, r2
3400fe70:	e7ca      	b.n	3400fe08 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xec>
3400fe72:	bf00      	nop
3400fe74:	58002000 	.word	0x58002000
3400fe78:	3402678a 	.word	0x3402678a
3400fe7c:	003c1fc3 	.word	0x003c1fc3
3400fe80:	fffcc0c0 	.word	0xfffcc0c0

3400fe84 <HAL_DCMIPP_CSI_SetVCConfig>:
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3400fe84:	2903      	cmp	r1, #3
{
3400fe86:	b570      	push	{r4, r5, r6, lr}
3400fe88:	4606      	mov	r6, r0
3400fe8a:	460d      	mov	r5, r1
3400fe8c:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3400fe8e:	d904      	bls.n	3400fe9a <HAL_DCMIPP_CSI_SetVCConfig+0x16>
3400fe90:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
3400fe94:	4815      	ldr	r0, [pc, #84]	@ (3400feec <HAL_DCMIPP_CSI_SetVCConfig+0x68>)
3400fe96:	f00d fd77 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_TYPE_FORMAT(DataTypeFormat));
3400fe9a:	2c06      	cmp	r4, #6
3400fe9c:	d904      	bls.n	3400fea8 <HAL_DCMIPP_CSI_SetVCConfig+0x24>
3400fe9e:	f240 31c9 	movw	r1, #969	@ 0x3c9
3400fea2:	4812      	ldr	r0, [pc, #72]	@ (3400feec <HAL_DCMIPP_CSI_SetVCConfig+0x68>)
3400fea4:	f00d fd70 	bl	3401d988 <assert_failed>
  if (hdcmipp == NULL)
3400fea8:	b1f6      	cbz	r6, 3400fee8 <HAL_DCMIPP_CSI_SetVCConfig+0x64>
  switch (VirtualChannel)
3400feaa:	2d03      	cmp	r5, #3
3400feac:	d808      	bhi.n	3400fec0 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
3400feae:	e8df f005 	tbb	[pc, r5]
3400feb2:	0902      	.short	0x0902
3400feb4:	150f      	.short	0x150f
      WRITE_REG(csi_instance->VC0CFGR1, (DataTypeFormat << CSI_VC0CFGR1_CDTFT_Pos) | CSI_VC0CFGR1_ALLDT);
3400feb6:	4b0e      	ldr	r3, [pc, #56]	@ (3400fef0 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400feb8:	0224      	lsls	r4, r4, #8
3400feba:	f044 0401 	orr.w	r4, r4, #1
3400febe:	611c      	str	r4, [r3, #16]
  return HAL_OK;
3400fec0:	2000      	movs	r0, #0
}
3400fec2:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(csi_instance->VC1CFGR1, (DataTypeFormat << CSI_VC1CFGR1_CDTFT_Pos) | CSI_VC1CFGR1_ALLDT);
3400fec4:	4b0a      	ldr	r3, [pc, #40]	@ (3400fef0 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fec6:	0224      	lsls	r4, r4, #8
3400fec8:	f044 0401 	orr.w	r4, r4, #1
3400fecc:	621c      	str	r4, [r3, #32]
      break;
3400fece:	e7f7      	b.n	3400fec0 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
      WRITE_REG(csi_instance->VC2CFGR1, (DataTypeFormat << CSI_VC2CFGR1_CDTFT_Pos) | CSI_VC2CFGR1_ALLDT);
3400fed0:	4b07      	ldr	r3, [pc, #28]	@ (3400fef0 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fed2:	0224      	lsls	r4, r4, #8
3400fed4:	f044 0401 	orr.w	r4, r4, #1
3400fed8:	631c      	str	r4, [r3, #48]	@ 0x30
      break;
3400feda:	e7f1      	b.n	3400fec0 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
      WRITE_REG(csi_instance->VC3CFGR1, (DataTypeFormat << CSI_VC3CFGR1_CDTFT_Pos) | CSI_VC3CFGR1_ALLDT);
3400fedc:	4b04      	ldr	r3, [pc, #16]	@ (3400fef0 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3400fede:	0224      	lsls	r4, r4, #8
3400fee0:	f044 0401 	orr.w	r4, r4, #1
3400fee4:	641c      	str	r4, [r3, #64]	@ 0x40
      break;
3400fee6:	e7eb      	b.n	3400fec0 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
    return HAL_ERROR;
3400fee8:	2001      	movs	r0, #1
3400feea:	e7ea      	b.n	3400fec2 <HAL_DCMIPP_CSI_SetVCConfig+0x3e>
3400feec:	3402678a 	.word	0x3402678a
3400fef0:	58006000 	.word	0x58006000

3400fef4 <HAL_DCMIPP_PIPE_SetConfig>:
{
3400fef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400fef6:	460d      	mov	r5, r1
3400fef8:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
3400fefa:	4606      	mov	r6, r0
3400fefc:	b908      	cbnz	r0, 3400ff02 <HAL_DCMIPP_PIPE_SetConfig+0xe>
    return HAL_ERROR;
3400fefe:	2001      	movs	r0, #1
}
3400ff00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
3400ff02:	2a00      	cmp	r2, #0
3400ff04:	d0fb      	beq.n	3400fefe <HAL_DCMIPP_PIPE_SetConfig+0xa>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3400ff06:	6803      	ldr	r3, [r0, #0]
3400ff08:	4a46      	ldr	r2, [pc, #280]	@ (34010024 <HAL_DCMIPP_PIPE_SetConfig+0x130>)
3400ff0a:	4293      	cmp	r3, r2
3400ff0c:	d008      	beq.n	3400ff20 <HAL_DCMIPP_PIPE_SetConfig+0x2c>
3400ff0e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3400ff12:	4293      	cmp	r3, r2
3400ff14:	d004      	beq.n	3400ff20 <HAL_DCMIPP_PIPE_SetConfig+0x2c>
3400ff16:	f240 4102 	movw	r1, #1026	@ 0x402
3400ff1a:	4843      	ldr	r0, [pc, #268]	@ (34010028 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400ff1c:	f00d fd34 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3400ff20:	2d02      	cmp	r5, #2
3400ff22:	d904      	bls.n	3400ff2e <HAL_DCMIPP_PIPE_SetConfig+0x3a>
3400ff24:	f240 4103 	movw	r1, #1027	@ 0x403
3400ff28:	483f      	ldr	r0, [pc, #252]	@ (34010028 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400ff2a:	f00d fd2d 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_FRAME_RATE(pPipeConfig->FrameRate));
3400ff2e:	6823      	ldr	r3, [r4, #0]
3400ff30:	2b03      	cmp	r3, #3
3400ff32:	d904      	bls.n	3400ff3e <HAL_DCMIPP_PIPE_SetConfig+0x4a>
3400ff34:	f240 4104 	movw	r1, #1028	@ 0x404
3400ff38:	483b      	ldr	r0, [pc, #236]	@ (34010028 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400ff3a:	f00d fd25 	bl	3401d988 <assert_failed>
  if (Pipe != DCMIPP_PIPE0)
3400ff3e:	b9bd      	cbnz	r5, 3400ff70 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  pipe_state = hdcmipp->PipeState[Pipe];
3400ff40:	1971      	adds	r1, r6, r5
3400ff42:	7948      	ldrb	r0, [r1, #5]
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3400ff44:	7933      	ldrb	r3, [r6, #4]
  pipe_state = hdcmipp->PipeState[Pipe];
3400ff46:	b2c0      	uxtb	r0, r0
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3400ff48:	2b02      	cmp	r3, #2
3400ff4a:	b2da      	uxtb	r2, r3
3400ff4c:	d1d7      	bne.n	3400fefe <HAL_DCMIPP_PIPE_SetConfig+0xa>
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
3400ff4e:	f010 00fb 	ands.w	r0, r0, #251	@ 0xfb
3400ff52:	d1d4      	bne.n	3400fefe <HAL_DCMIPP_PIPE_SetConfig+0xa>
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
3400ff54:	714a      	strb	r2, [r1, #5]
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
3400ff56:	6833      	ldr	r3, [r6, #0]
3400ff58:	6827      	ldr	r7, [r4, #0]
  if (Pipe == DCMIPP_PIPE0)
3400ff5a:	bb15      	cbnz	r5, 3400ffa2 <HAL_DCMIPP_PIPE_SetConfig+0xae>
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
3400ff5c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
3400ff60:	f022 0203 	bic.w	r2, r2, #3
3400ff64:	433a      	orrs	r2, r7
3400ff66:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
3400ff6a:	2301      	movs	r3, #1
3400ff6c:	714b      	strb	r3, [r1, #5]
  return HAL_OK;
3400ff6e:	e7c7      	b.n	3400ff00 <HAL_DCMIPP_PIPE_SetConfig+0xc>
    assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(pPipeConfig->PixelPackerFormat));
3400ff70:	68a3      	ldr	r3, [r4, #8]
3400ff72:	2b09      	cmp	r3, #9
3400ff74:	d904      	bls.n	3400ff80 <HAL_DCMIPP_PIPE_SetConfig+0x8c>
3400ff76:	f240 4107 	movw	r1, #1031	@ 0x407
3400ff7a:	482b      	ldr	r0, [pc, #172]	@ (34010028 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400ff7c:	f00d fd04 	bl	3401d988 <assert_failed>
    assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(pPipeConfig->PixelPipePitch));
3400ff80:	6863      	ldr	r3, [r4, #4]
3400ff82:	071a      	lsls	r2, r3, #28
3400ff84:	d102      	bne.n	3400ff8c <HAL_DCMIPP_PIPE_SetConfig+0x98>
3400ff86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3400ff8a:	d304      	bcc.n	3400ff96 <HAL_DCMIPP_PIPE_SetConfig+0xa2>
3400ff8c:	f44f 6181 	mov.w	r1, #1032	@ 0x408
3400ff90:	4825      	ldr	r0, [pc, #148]	@ (34010028 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3400ff92:	f00d fcf9 	bl	3401d988 <assert_failed>
  if ((Pipe == DCMIPP_PIPE2) && ((pPipeConfig->PixelPackerFormat) > DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1))
3400ff96:	2d02      	cmp	r5, #2
3400ff98:	d1d2      	bne.n	3400ff40 <HAL_DCMIPP_PIPE_SetConfig+0x4c>
3400ff9a:	68a3      	ldr	r3, [r4, #8]
3400ff9c:	2b06      	cmp	r3, #6
3400ff9e:	d9cf      	bls.n	3400ff40 <HAL_DCMIPP_PIPE_SetConfig+0x4c>
3400ffa0:	e7ad      	b.n	3400fefe <HAL_DCMIPP_PIPE_SetConfig+0xa>
  else if (Pipe == DCMIPP_PIPE1)
3400ffa2:	2d01      	cmp	r5, #1
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3400ffa4:	e9d4 4601 	ldrd	r4, r6, [r4, #4]
  else if (Pipe == DCMIPP_PIPE1)
3400ffa8:	d126      	bne.n	3400fff8 <HAL_DCMIPP_PIPE_SetConfig+0x104>
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
3400ffaa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3400ffae:	4d1f      	ldr	r5, [pc, #124]	@ (3401002c <HAL_DCMIPP_PIPE_SetConfig+0x138>)
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
3400ffb0:	f022 0203 	bic.w	r2, r2, #3
3400ffb4:	433a      	orrs	r2, r7
3400ffb6:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
3400ffba:	f8d3 29c0 	ldr.w	r2, [r3, #2496]	@ 0x9c0
3400ffbe:	f022 020f 	bic.w	r2, r2, #15
3400ffc2:	4332      	orrs	r2, r6
3400ffc4:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3400ffc8:	f8d3 29cc 	ldr.w	r2, [r3, #2508]	@ 0x9cc
3400ffcc:	402a      	ands	r2, r5
3400ffce:	4322      	orrs	r2, r4
3400ffd0:	f8c3 29cc 	str.w	r2, [r3, #2508]	@ 0x9cc
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
3400ffd4:	1ff2      	subs	r2, r6, #7
3400ffd6:	2a01      	cmp	r2, #1
3400ffd8:	d806      	bhi.n	3400ffe8 <HAL_DCMIPP_PIPE_SetConfig+0xf4>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3400ffda:	f8d3 29dc 	ldr.w	r2, [r3, #2524]	@ 0x9dc
3400ffde:	402a      	ands	r2, r5
3400ffe0:	4322      	orrs	r2, r4
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3400ffe2:	f8c3 29dc 	str.w	r2, [r3, #2524]	@ 0x9dc
3400ffe6:	e7c0      	b.n	3400ff6a <HAL_DCMIPP_PIPE_SetConfig+0x76>
    else if (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_3)
3400ffe8:	2e09      	cmp	r6, #9
3400ffea:	d1be      	bne.n	3400ff6a <HAL_DCMIPP_PIPE_SetConfig+0x76>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3400ffec:	f8d3 29dc 	ldr.w	r2, [r3, #2524]	@ 0x9dc
3400fff0:	402a      	ands	r2, r5
3400fff2:	ea42 0254 	orr.w	r2, r2, r4, lsr #1
3400fff6:	e7f4      	b.n	3400ffe2 <HAL_DCMIPP_PIPE_SetConfig+0xee>
    MODIFY_REG(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_FRATE, pPipeConfig->FrameRate);
3400fff8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3400fffc:	f022 0203 	bic.w	r2, r2, #3
34010000:	433a      	orrs	r2, r7
34010002:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34010006:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	@ 0xdc0
3401000a:	f022 020f 	bic.w	r2, r2, #15
3401000e:	4332      	orrs	r2, r6
34010010:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
34010014:	f8d3 2dcc 	ldr.w	r2, [r3, #3532]	@ 0xdcc
34010018:	f36f 020e 	bfc	r2, #0, #15
3401001c:	4322      	orrs	r2, r4
3401001e:	f8c3 2dcc 	str.w	r2, [r3, #3532]	@ 0xdcc
34010022:	e7a2      	b.n	3400ff6a <HAL_DCMIPP_PIPE_SetConfig+0x76>
34010024:	58002000 	.word	0x58002000
34010028:	3402678a 	.word	0x3402678a
3401002c:	ffff8000 	.word	0xffff8000

34010030 <HAL_DCMIPP_CSI_PIPE_Start>:
{
34010030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010034:	2902      	cmp	r1, #2
{
34010036:	4604      	mov	r4, r0
34010038:	460d      	mov	r5, r1
3401003a:	4616      	mov	r6, r2
3401003c:	461f      	mov	r7, r3
3401003e:	f8dd 8018 	ldr.w	r8, [sp, #24]
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010042:	d904      	bls.n	3401004e <HAL_DCMIPP_CSI_PIPE_Start+0x1e>
34010044:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
34010048:	481a      	ldr	r0, [pc, #104]	@ (340100b4 <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
3401004a:	f00d fc9d 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3401004e:	2e03      	cmp	r6, #3
34010050:	d904      	bls.n	3401005c <HAL_DCMIPP_CSI_PIPE_Start+0x2c>
34010052:	f240 6111 	movw	r1, #1553	@ 0x611
34010056:	4817      	ldr	r0, [pc, #92]	@ (340100b4 <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
34010058:	f00d fc96 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));
3401005c:	f038 0304 	bics.w	r3, r8, #4
34010060:	d004      	beq.n	3401006c <HAL_DCMIPP_CSI_PIPE_Start+0x3c>
34010062:	f240 6112 	movw	r1, #1554	@ 0x612
34010066:	4813      	ldr	r0, [pc, #76]	@ (340100b4 <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
34010068:	f00d fc8e 	bl	3401d988 <assert_failed>
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
3401006c:	b91c      	cbnz	r4, 34010076 <HAL_DCMIPP_CSI_PIPE_Start+0x46>
    return HAL_ERROR;
3401006e:	2601      	movs	r6, #1
}
34010070:	4630      	mov	r0, r6
34010072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
34010076:	073a      	lsls	r2, r7, #28
34010078:	d1f9      	bne.n	3401006e <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3401007a:	6823      	ldr	r3, [r4, #0]
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
3401007c:	1962      	adds	r2, r4, r5
  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
3401007e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
34010082:	7952      	ldrb	r2, [r2, #5]
34010084:	2a01      	cmp	r2, #1
34010086:	d1f2      	bne.n	3401006e <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
34010088:	07db      	lsls	r3, r3, #31
3401008a:	d5f0      	bpl.n	3401006e <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  if (DCMIPP_CSI_SetVCConfig(hdcmipp, Pipe, VirtualChannel) != HAL_OK)
3401008c:	4632      	mov	r2, r6
3401008e:	4629      	mov	r1, r5
34010090:	4620      	mov	r0, r4
34010092:	f7ff fc65 	bl	3400f960 <DCMIPP_CSI_SetVCConfig>
34010096:	4606      	mov	r6, r0
34010098:	2800      	cmp	r0, #0
3401009a:	d1e8      	bne.n	3401006e <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
3401009c:	4629      	mov	r1, r5
3401009e:	4620      	mov	r0, r4
340100a0:	4643      	mov	r3, r8
340100a2:	463a      	mov	r2, r7
340100a4:	f7ff fcd7 	bl	3400fa56 <DCMIPP_SetConfig>
  DCMIPP_EnableCapture(hdcmipp, Pipe);
340100a8:	4629      	mov	r1, r5
340100aa:	4620      	mov	r0, r4
340100ac:	f7ff fcfe 	bl	3400faac <DCMIPP_EnableCapture>
  return HAL_OK;
340100b0:	e7de      	b.n	34010070 <HAL_DCMIPP_CSI_PIPE_Start+0x40>
340100b2:	bf00      	nop
340100b4:	3402678a 	.word	0x3402678a

340100b8 <HAL_DCMIPP_PIPE_LineEventCallback>:
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340100b8:	4770      	bx	lr

340100ba <HAL_DCMIPP_PIPE_LimitEventCallback>:
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340100ba:	4770      	bx	lr

340100bc <HAL_DCMIPP_PIPE_ErrorCallback>:
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
340100bc:	4770      	bx	lr

340100be <HAL_DCMIPP_ErrorCallback>:
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
340100be:	4770      	bx	lr

340100c0 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340100c0:	6803      	ldr	r3, [r0, #0]
{
340100c2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
340100c4:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
340100c8:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340100ca:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
340100cc:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
340100d0:	d512      	bpl.n	340100f8 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
340100d2:	0469      	lsls	r1, r5, #17
340100d4:	d510      	bpl.n	340100f8 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340100d6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340100da:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
340100dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
340100e0:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
340100e4:	6882      	ldr	r2, [r0, #8]
340100e6:	f042 0204 	orr.w	r2, r2, #4
340100ea:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
340100ec:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
340100f0:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
340100f4:	f7ff ffe1 	bl	340100ba <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
340100f8:	0572      	lsls	r2, r6, #21
340100fa:	d50a      	bpl.n	34010112 <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
340100fc:	056b      	lsls	r3, r5, #21
340100fe:	d508      	bpl.n	34010112 <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34010100:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34010104:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34010106:	2100      	movs	r1, #0
34010108:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
3401010a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3401010e:	f7f6 fd47 	bl	34006ba0 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
34010112:	05b0      	lsls	r0, r6, #22
34010114:	d516      	bpl.n	34010144 <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
34010116:	05a9      	lsls	r1, r5, #22
34010118:	d514      	bpl.n	34010144 <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401011a:	6823      	ldr	r3, [r4, #0]
3401011c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34010120:	0752      	lsls	r2, r2, #29
34010122:	d507      	bpl.n	34010134 <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
34010124:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34010128:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
3401012c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
34010130:	2201      	movs	r2, #1
34010132:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
34010134:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34010138:	2100      	movs	r1, #0
3401013a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
3401013c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
34010140:	f7f6 fd3e 	bl	34006bc0 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
34010144:	05f3      	lsls	r3, r6, #23
34010146:	d50a      	bpl.n	3401015e <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
34010148:	05e8      	lsls	r0, r5, #23
3401014a:	d508      	bpl.n	3401015e <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
3401014c:	f44f 7280 	mov.w	r2, #256	@ 0x100
34010150:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
34010152:	2100      	movs	r1, #0
34010154:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
34010156:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
3401015a:	f7ff ffad 	bl	340100b8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
3401015e:	0431      	lsls	r1, r6, #16
34010160:	d516      	bpl.n	34010190 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
34010162:	042a      	lsls	r2, r5, #16
34010164:	d514      	bpl.n	34010190 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34010166:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34010168:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
3401016a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3401016e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
34010170:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34010174:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34010178:	68a2      	ldr	r2, [r4, #8]
3401017a:	f042 0208 	orr.w	r2, r2, #8
3401017e:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34010180:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34010184:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34010188:	2304      	movs	r3, #4
3401018a:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
3401018c:	f7ff ff96 	bl	340100bc <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34010190:	03f3      	lsls	r3, r6, #15
34010192:	d50a      	bpl.n	340101aa <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34010194:	03e8      	lsls	r0, r5, #15
34010196:	d508      	bpl.n	340101aa <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34010198:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3401019c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3401019e:	2101      	movs	r1, #1
340101a0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
340101a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
340101a6:	f7ff ff87 	bl	340100b8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
340101aa:	0371      	lsls	r1, r6, #13
340101ac:	d50a      	bpl.n	340101c4 <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
340101ae:	036a      	lsls	r2, r5, #13
340101b0:	d508      	bpl.n	340101c4 <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340101b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
340101b6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340101b8:	2101      	movs	r1, #1
340101ba:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
340101bc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
340101c0:	f7f6 fcee 	bl	34006ba0 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
340101c4:	03b3      	lsls	r3, r6, #14
340101c6:	d516      	bpl.n	340101f6 <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
340101c8:	03a8      	lsls	r0, r5, #14
340101ca:	d514      	bpl.n	340101f6 <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340101cc:	6823      	ldr	r3, [r4, #0]
340101ce:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
340101d2:	0751      	lsls	r1, r2, #29
340101d4:	d507      	bpl.n	340101e6 <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
340101d6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340101da:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
340101de:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
340101e2:	2201      	movs	r2, #1
340101e4:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340101e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340101ea:	2101      	movs	r1, #1
340101ec:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
340101ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
340101f2:	f7f6 fce5 	bl	34006bc0 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
340101f6:	0232      	lsls	r2, r6, #8
340101f8:	d516      	bpl.n	34010228 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
340101fa:	022b      	lsls	r3, r5, #8
340101fc:	d514      	bpl.n	34010228 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
340101fe:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34010200:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34010202:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34010206:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34010208:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
3401020c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34010210:	68a2      	ldr	r2, [r4, #8]
34010212:	f042 0210 	orr.w	r2, r2, #16
34010216:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
34010218:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3401021c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
34010220:	2304      	movs	r3, #4
34010222:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34010224:	f7ff ff4a 	bl	340100bc <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
34010228:	01f0      	lsls	r0, r6, #7
3401022a:	d50a      	bpl.n	34010242 <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
3401022c:	01e9      	lsls	r1, r5, #7
3401022e:	d508      	bpl.n	34010242 <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
34010230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34010234:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
34010236:	2102      	movs	r1, #2
34010238:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
3401023a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
3401023e:	f7ff ff3b 	bl	340100b8 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
34010242:	0172      	lsls	r2, r6, #5
34010244:	d50a      	bpl.n	3401025c <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
34010246:	016b      	lsls	r3, r5, #5
34010248:	d508      	bpl.n	3401025c <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
3401024a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
3401024e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34010250:	2102      	movs	r1, #2
34010252:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
34010254:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
34010258:	f7f6 fca2 	bl	34006ba0 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
3401025c:	01b0      	lsls	r0, r6, #6
3401025e:	d516      	bpl.n	3401028e <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
34010260:	01a9      	lsls	r1, r5, #6
34010262:	d514      	bpl.n	3401028e <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010264:	6823      	ldr	r3, [r4, #0]
34010266:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
3401026a:	0752      	lsls	r2, r2, #29
3401026c:	d507      	bpl.n	3401027e <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
3401026e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34010272:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
34010276:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
3401027a:	2201      	movs	r2, #1
3401027c:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3401027e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34010282:	2102      	movs	r1, #2
34010284:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34010286:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3401028a:	f7f6 fc99 	bl	34006bc0 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
3401028e:	2e00      	cmp	r6, #0
34010290:	da16      	bge.n	340102c0 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
34010292:	2d00      	cmp	r5, #0
34010294:	da14      	bge.n	340102c0 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34010296:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34010298:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3401029a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
3401029e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
340102a0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
340102a4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
340102a8:	68a2      	ldr	r2, [r4, #8]
340102aa:	f042 0220 	orr.w	r2, r2, #32
340102ae:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
340102b0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
340102b4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
340102b8:	2304      	movs	r3, #4
340102ba:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
340102bc:	f7ff fefe 	bl	340100bc <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
340102c0:	0670      	lsls	r0, r6, #25
340102c2:	d514      	bpl.n	340102ee <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
340102c4:	0669      	lsls	r1, r5, #25
340102c6:	d512      	bpl.n	340102ee <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340102c8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340102ca:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
340102cc:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340102d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
340102d4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
340102d8:	68a2      	ldr	r2, [r4, #8]
340102da:	f042 0202 	orr.w	r2, r2, #2
340102de:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
340102e0:	2240      	movs	r2, #64	@ 0x40
340102e2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340102e6:	2304      	movs	r3, #4
340102e8:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340102ea:	f7ff fee8 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
340102ee:	06b2      	lsls	r2, r6, #26
340102f0:	d514      	bpl.n	3401031c <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
340102f2:	06ab      	lsls	r3, r5, #26
340102f4:	d512      	bpl.n	3401031c <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340102f6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340102f8:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
340102fa:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340102fe:	f022 0220 	bic.w	r2, r2, #32
34010302:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
34010306:	68a2      	ldr	r2, [r4, #8]
34010308:	f042 0201 	orr.w	r2, r2, #1
3401030c:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
3401030e:	2220      	movs	r2, #32
34010310:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34010314:	2304      	movs	r3, #4
34010316:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010318:	f7ff fed1 	bl	340100be <HAL_DCMIPP_ErrorCallback>
}
3401031c:	bd70      	pop	{r4, r5, r6, pc}

3401031e <HAL_DCMIPP_CSI_LineErrorCallback>:
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
3401031e:	4770      	bx	lr

34010320 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34010320:	4770      	bx	lr

34010322 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
34010322:	4770      	bx	lr

34010324 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34010324:	4770      	bx	lr

34010326 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
34010326:	4770      	bx	lr

34010328 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
34010328:	4770      	bx	lr

3401032a <HAL_DCMIPP_CSI_LineByteEventCallback>:
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
3401032a:	4770      	bx	lr

3401032c <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
3401032c:	4bb5      	ldr	r3, [pc, #724]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
3401032e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
34010332:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
34010336:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34010338:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
3401033a:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
3401033e:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
34010342:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
34010346:	d50d      	bpl.n	34010364 <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
34010348:	02a9      	lsls	r1, r5, #10
3401034a:	d50b      	bpl.n	34010364 <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
3401034c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010350:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
34010354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
34010358:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3401035c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
34010360:	f7ff ffde 	bl	34010320 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
34010364:	0732      	lsls	r2, r6, #28
34010366:	d515      	bpl.n	34010394 <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
34010368:	072b      	lsls	r3, r5, #28
3401036a:	d513      	bpl.n	34010394 <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401036c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
3401036e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010370:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34010374:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010376:	f013 0f04 	tst.w	r3, #4
3401037a:	4ba2      	ldr	r3, [pc, #648]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
3401037c:	bf1e      	ittt	ne
3401037e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010382:	f022 0208 	bicne.w	r2, r2, #8
34010386:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
3401038a:	2208      	movs	r2, #8
3401038c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34010390:	f7ff ffcb 	bl	3401032a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
34010394:	0770      	lsls	r0, r6, #29
34010396:	d515      	bpl.n	340103c4 <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34010398:	0769      	lsls	r1, r5, #29
3401039a:	d513      	bpl.n	340103c4 <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401039c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
3401039e:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103a0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
340103a4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103a6:	f013 0f04 	tst.w	r3, #4
340103aa:	4b96      	ldr	r3, [pc, #600]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
340103ac:	bf1e      	ittt	ne
340103ae:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340103b2:	f022 0204 	bicne.w	r2, r2, #4
340103b6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
340103ba:	2204      	movs	r2, #4
340103bc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
340103c0:	f7ff ffb3 	bl	3401032a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
340103c4:	07b2      	lsls	r2, r6, #30
340103c6:	d515      	bpl.n	340103f4 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
340103c8:	07ab      	lsls	r3, r5, #30
340103ca:	d513      	bpl.n	340103f4 <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103cc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340103ce:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103d0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340103d4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103d6:	f013 0f04 	tst.w	r3, #4
340103da:	4b8a      	ldr	r3, [pc, #552]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
340103dc:	bf1e      	ittt	ne
340103de:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340103e2:	f022 0202 	bicne.w	r2, r2, #2
340103e6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
340103ea:	2202      	movs	r2, #2
340103ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
340103f0:	f7ff ff9b 	bl	3401032a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
340103f4:	07f0      	lsls	r0, r6, #31
340103f6:	d515      	bpl.n	34010424 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
340103f8:	07e9      	lsls	r1, r5, #31
340103fa:	d513      	bpl.n	34010424 <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340103fc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340103fe:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010400:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34010404:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010406:	f013 0f04 	tst.w	r3, #4
3401040a:	4b7e      	ldr	r3, [pc, #504]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
3401040c:	bf1e      	ittt	ne
3401040e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010412:	f022 0201 	bicne.w	r2, r2, #1
34010416:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
3401041a:	2201      	movs	r2, #1
3401041c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34010420:	f7ff ff83 	bl	3401032a <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
34010424:	0432      	lsls	r2, r6, #16
34010426:	d516      	bpl.n	34010456 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
34010428:	042b      	lsls	r3, r5, #16
3401042a:	d514      	bpl.n	34010456 <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401042c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3401042e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010430:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34010434:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010436:	f013 0f04 	tst.w	r3, #4
3401043a:	4b72      	ldr	r3, [pc, #456]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
3401043c:	bf1e      	ittt	ne
3401043e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010442:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
34010446:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
3401044a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3401044e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34010452:	f7ff ff67 	bl	34010324 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
34010456:	0470      	lsls	r0, r6, #17
34010458:	d516      	bpl.n	34010488 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
3401045a:	0469      	lsls	r1, r5, #17
3401045c:	d514      	bpl.n	34010488 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401045e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010460:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010462:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010466:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010468:	f013 0f04 	tst.w	r3, #4
3401046c:	4b65      	ldr	r3, [pc, #404]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
3401046e:	bf1e      	ittt	ne
34010470:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010474:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34010478:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
3401047c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34010480:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010484:	f7ff ff4e 	bl	34010324 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34010488:	04b2      	lsls	r2, r6, #18
3401048a:	d516      	bpl.n	340104ba <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
3401048c:	04ab      	lsls	r3, r5, #18
3401048e:	d514      	bpl.n	340104ba <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010490:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34010492:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010494:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34010498:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401049a:	f013 0f04 	tst.w	r3, #4
3401049e:	4b59      	ldr	r3, [pc, #356]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
340104a0:	bf1e      	ittt	ne
340104a2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340104a6:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
340104aa:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
340104ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340104b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340104b6:	f7ff ff35 	bl	34010324 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
340104ba:	04f0      	lsls	r0, r6, #19
340104bc:	d516      	bpl.n	340104ec <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
340104be:	04e9      	lsls	r1, r5, #19
340104c0:	d514      	bpl.n	340104ec <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340104c2:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340104c4:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340104c6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340104ca:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340104cc:	f013 0f04 	tst.w	r3, #4
340104d0:	4b4c      	ldr	r3, [pc, #304]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
340104d2:	bf1e      	ittt	ne
340104d4:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340104d8:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
340104dc:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
340104e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340104e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340104e8:	f7ff ff1c 	bl	34010324 <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
340104ec:	0532      	lsls	r2, r6, #20
340104ee:	d516      	bpl.n	3401051e <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
340104f0:	052b      	lsls	r3, r5, #20
340104f2:	d514      	bpl.n	3401051e <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340104f4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340104f6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340104f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340104fc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340104fe:	f013 0f04 	tst.w	r3, #4
34010502:	4b40      	ldr	r3, [pc, #256]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
34010504:	bf1e      	ittt	ne
34010506:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401050a:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
3401050e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
34010512:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34010516:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3401051a:	f7ff ff04 	bl	34010326 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
3401051e:	0570      	lsls	r0, r6, #21
34010520:	d516      	bpl.n	34010550 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
34010522:	0569      	lsls	r1, r5, #21
34010524:	d514      	bpl.n	34010550 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010526:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
34010528:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401052a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
3401052e:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010530:	f013 0f04 	tst.w	r3, #4
34010534:	4b33      	ldr	r3, [pc, #204]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
34010536:	bf1e      	ittt	ne
34010538:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401053c:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
34010540:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
34010544:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34010548:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
3401054c:	f7ff feeb 	bl	34010326 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
34010550:	05b2      	lsls	r2, r6, #22
34010552:	d516      	bpl.n	34010582 <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
34010554:	05ab      	lsls	r3, r5, #22
34010556:	d514      	bpl.n	34010582 <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010558:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3401055a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401055c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34010560:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010562:	f013 0f04 	tst.w	r3, #4
34010566:	4b27      	ldr	r3, [pc, #156]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
34010568:	bf1e      	ittt	ne
3401056a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401056e:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
34010572:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
34010576:	f44f 7200 	mov.w	r2, #512	@ 0x200
3401057a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3401057e:	f7ff fed2 	bl	34010326 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
34010582:	05f0      	lsls	r0, r6, #23
34010584:	d516      	bpl.n	340105b4 <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
34010586:	05e9      	lsls	r1, r5, #23
34010588:	d514      	bpl.n	340105b4 <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401058a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
3401058c:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401058e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34010592:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010594:	f013 0f04 	tst.w	r3, #4
34010598:	4b1a      	ldr	r3, [pc, #104]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
3401059a:	bf1e      	ittt	ne
3401059c:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340105a0:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
340105a4:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
340105a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
340105ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
340105b0:	f7ff feb9 	bl	34010326 <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
340105b4:	0632      	lsls	r2, r6, #24
340105b6:	d515      	bpl.n	340105e4 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
340105b8:	062b      	lsls	r3, r5, #24
340105ba:	d513      	bpl.n	340105e4 <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340105bc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340105be:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340105c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340105c4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340105c6:	f013 0f04 	tst.w	r3, #4
340105ca:	4b0e      	ldr	r3, [pc, #56]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
340105cc:	bf1e      	ittt	ne
340105ce:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340105d2:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
340105d6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
340105da:	2280      	movs	r2, #128	@ 0x80
340105dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
340105e0:	f7ff fea2 	bl	34010328 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
340105e4:	0670      	lsls	r0, r6, #25
340105e6:	d519      	bpl.n	3401061c <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
340105e8:	0669      	lsls	r1, r5, #25
340105ea:	d517      	bpl.n	3401061c <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340105ec:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
340105ee:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340105f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
340105f4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340105f6:	f013 0f04 	tst.w	r3, #4
340105fa:	4b02      	ldr	r3, [pc, #8]	@ (34010604 <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
340105fc:	bf18      	it	ne
340105fe:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34010602:	e001      	b.n	34010608 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
34010604:	58006000 	.word	0x58006000
34010608:	bf1c      	itt	ne
3401060a:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
3401060e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
34010612:	2240      	movs	r2, #64	@ 0x40
34010614:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34010618:	f7ff fe86 	bl	34010328 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
3401061c:	06b2      	lsls	r2, r6, #26
3401061e:	d515      	bpl.n	3401064c <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
34010620:	06ab      	lsls	r3, r5, #26
34010622:	d513      	bpl.n	3401064c <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010624:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34010626:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010628:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
3401062c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401062e:	f013 0f04 	tst.w	r3, #4
34010632:	4bb9      	ldr	r3, [pc, #740]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
34010634:	bf1e      	ittt	ne
34010636:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401063a:	f022 0220 	bicne.w	r2, r2, #32
3401063e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
34010642:	2220      	movs	r2, #32
34010644:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
34010648:	f7ff fe6e 	bl	34010328 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
3401064c:	06f0      	lsls	r0, r6, #27
3401064e:	d515      	bpl.n	3401067c <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
34010650:	06e9      	lsls	r1, r5, #27
34010652:	d513      	bpl.n	3401067c <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010654:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34010656:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34010658:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
3401065c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401065e:	f013 0f04 	tst.w	r3, #4
34010662:	4bad      	ldr	r3, [pc, #692]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
34010664:	bf1e      	ittt	ne
34010666:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401066a:	f022 0210 	bicne.w	r2, r2, #16
3401066e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
34010672:	2210      	movs	r2, #16
34010674:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34010678:	f7ff fe56 	bl	34010328 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
3401067c:	0072      	lsls	r2, r6, #1
3401067e:	d513      	bpl.n	340106a8 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34010680:	006b      	lsls	r3, r5, #1
34010682:	d511      	bpl.n	340106a8 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34010684:	4ba4      	ldr	r3, [pc, #656]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010686:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34010688:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3401068c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34010690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34010694:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34010698:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
3401069c:	68a3      	ldr	r3, [r4, #8]
3401069e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
340106a2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340106a4:	f7ff fd0b 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
340106a8:	00b0      	lsls	r0, r6, #2
340106aa:	d513      	bpl.n	340106d4 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
340106ac:	00a9      	lsls	r1, r5, #2
340106ae:	d511      	bpl.n	340106d4 <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
340106b0:	4b99      	ldr	r3, [pc, #612]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340106b2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
340106b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340106b8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
340106bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
340106c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
340106c4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
340106c8:	68a3      	ldr	r3, [r4, #8]
340106ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
340106ce:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340106d0:	f7ff fcf5 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
340106d4:	00f2      	lsls	r2, r6, #3
340106d6:	d513      	bpl.n	34010700 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
340106d8:	00eb      	lsls	r3, r5, #3
340106da:	d511      	bpl.n	34010700 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
340106dc:	4b8e      	ldr	r3, [pc, #568]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340106de:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
340106e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340106e4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
340106e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
340106ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
340106f0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
340106f4:	68a3      	ldr	r3, [r4, #8]
340106f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
340106fa:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340106fc:	f7ff fcdf 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34010700:	0130      	lsls	r0, r6, #4
34010702:	d513      	bpl.n	3401072c <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34010704:	0129      	lsls	r1, r5, #4
34010706:	d511      	bpl.n	3401072c <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34010708:	4b83      	ldr	r3, [pc, #524]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3401070a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
3401070c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010710:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34010714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34010718:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
3401071c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34010720:	68a3      	ldr	r3, [r4, #8]
34010722:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34010726:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010728:	f7ff fcc9 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
3401072c:	0172      	lsls	r2, r6, #5
3401072e:	d513      	bpl.n	34010758 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34010730:	016b      	lsls	r3, r5, #5
34010732:	d511      	bpl.n	34010758 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34010734:	4b78      	ldr	r3, [pc, #480]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010736:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34010738:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3401073c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34010740:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34010744:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34010748:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
3401074c:	68a3      	ldr	r3, [r4, #8]
3401074e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34010752:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010754:	f7ff fcb3 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34010758:	01b0      	lsls	r0, r6, #6
3401075a:	d513      	bpl.n	34010784 <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
3401075c:	01a9      	lsls	r1, r5, #6
3401075e:	d511      	bpl.n	34010784 <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34010760:	4b6d      	ldr	r3, [pc, #436]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010762:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34010764:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010768:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
3401076c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34010770:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34010774:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34010778:	68a3      	ldr	r3, [r4, #8]
3401077a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3401077e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34010780:	f7ff fc9d 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34010784:	01f2      	lsls	r2, r6, #7
34010786:	d513      	bpl.n	340107b0 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34010788:	01eb      	lsls	r3, r5, #7
3401078a:	d511      	bpl.n	340107b0 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
3401078c:	4b62      	ldr	r3, [pc, #392]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
3401078e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34010790:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010794:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34010798:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
3401079c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340107a0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
340107a4:	68a3      	ldr	r3, [r4, #8]
340107a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
340107aa:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340107ac:	f7ff fc87 	bl	340100be <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
340107b0:	f018 0f01 	tst.w	r8, #1
340107b4:	d014      	beq.n	340107e0 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
340107b6:	07f8      	lsls	r0, r7, #31
340107b8:	d512      	bpl.n	340107e0 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
340107ba:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
340107bc:	4b56      	ldr	r3, [pc, #344]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340107be:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
340107c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340107c4:	f022 0201 	bic.w	r2, r2, #1
340107c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
340107cc:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340107d0:	68a3      	ldr	r3, [r4, #8]
340107d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340107d6:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340107d8:	2304      	movs	r3, #4
340107da:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340107dc:	f7ff fd9f 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
340107e0:	f018 0f02 	tst.w	r8, #2
340107e4:	d015      	beq.n	34010812 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
340107e6:	07b9      	lsls	r1, r7, #30
340107e8:	d513      	bpl.n	34010812 <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
340107ea:	4b4b      	ldr	r3, [pc, #300]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340107ec:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
340107ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
340107f2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
340107f4:	f022 0202 	bic.w	r2, r2, #2
340107f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
340107fc:	2202      	movs	r2, #2
340107fe:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34010802:	68a3      	ldr	r3, [r4, #8]
34010804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34010808:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3401080a:	2304      	movs	r3, #4
3401080c:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401080e:	f7ff fd86 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34010812:	f018 0f04 	tst.w	r8, #4
34010816:	d013      	beq.n	34010840 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34010818:	077a      	lsls	r2, r7, #29
3401081a:	d511      	bpl.n	34010840 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
3401081c:	4b3e      	ldr	r3, [pc, #248]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401081e:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34010820:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010824:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34010826:	f022 0204 	bic.w	r2, r2, #4
3401082a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
3401082e:	2204      	movs	r2, #4
34010830:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34010834:	68a3      	ldr	r3, [r4, #8]
34010836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
3401083a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401083c:	f7ff fd6f 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34010840:	f018 0f08 	tst.w	r8, #8
34010844:	d013      	beq.n	3401086e <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34010846:	073b      	lsls	r3, r7, #28
34010848:	d511      	bpl.n	3401086e <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3401084a:	4b33      	ldr	r3, [pc, #204]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401084c:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
3401084e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010852:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34010854:	f022 0208 	bic.w	r2, r2, #8
34010858:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
3401085c:	2208      	movs	r2, #8
3401085e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34010862:	68a3      	ldr	r3, [r4, #8]
34010864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34010868:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401086a:	f7ff fd58 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
3401086e:	f018 0f10 	tst.w	r8, #16
34010872:	d013      	beq.n	3401089c <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34010874:	06f8      	lsls	r0, r7, #27
34010876:	d511      	bpl.n	3401089c <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34010878:	4b27      	ldr	r3, [pc, #156]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
3401087a:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
3401087c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010880:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34010882:	f022 0210 	bic.w	r2, r2, #16
34010886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
3401088a:	2210      	movs	r2, #16
3401088c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34010890:	68a3      	ldr	r3, [r4, #8]
34010892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34010896:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34010898:	f7ff fd41 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
3401089c:	f418 7f80 	tst.w	r8, #256	@ 0x100
340108a0:	d016      	beq.n	340108d0 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
340108a2:	05f9      	lsls	r1, r7, #23
340108a4:	d514      	bpl.n	340108d0 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340108a6:	4b1c      	ldr	r3, [pc, #112]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340108a8:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340108aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340108ae:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
340108b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
340108b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
340108b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
340108bc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
340108c0:	68a3      	ldr	r3, [r4, #8]
340108c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
340108c6:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340108c8:	2304      	movs	r3, #4
340108ca:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340108cc:	f7ff fd27 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
340108d0:	f418 7f00 	tst.w	r8, #512	@ 0x200
340108d4:	d016      	beq.n	34010904 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
340108d6:	05ba      	lsls	r2, r7, #22
340108d8:	d514      	bpl.n	34010904 <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
340108da:	4b0f      	ldr	r3, [pc, #60]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340108dc:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
340108de:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
340108e2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
340108e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
340108e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
340108ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
340108f0:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
340108f4:	68a3      	ldr	r3, [r4, #8]
340108f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
340108fa:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
340108fc:	2304      	movs	r3, #4
340108fe:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010900:	f7ff fd0d 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34010904:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34010908:	d017      	beq.n	3401093a <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
3401090a:	057b      	lsls	r3, r7, #21
3401090c:	d515      	bpl.n	3401093a <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3401090e:	4b02      	ldr	r3, [pc, #8]	@ (34010918 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010910:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34010912:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010916:	e001      	b.n	3401091c <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34010918:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401091c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
3401091e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34010922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34010926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3401092a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
3401092e:	68a3      	ldr	r3, [r4, #8]
34010930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34010934:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010936:	f7ff fcf2 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
3401093a:	f418 6f00 	tst.w	r8, #2048	@ 0x800
3401093e:	d014      	beq.n	3401096a <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34010940:	0538      	lsls	r0, r7, #20
34010942:	d512      	bpl.n	3401096a <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34010944:	4b1f      	ldr	r3, [pc, #124]	@ (340109c4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010946:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34010948:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401094c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
3401094e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34010952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34010956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401095a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
3401095e:	68a3      	ldr	r3, [r4, #8]
34010960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34010964:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010966:	f7ff fcda 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
3401096a:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
3401096e:	d014      	beq.n	3401099a <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34010970:	04f9      	lsls	r1, r7, #19
34010972:	d512      	bpl.n	3401099a <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34010974:	4b13      	ldr	r3, [pc, #76]	@ (340109c4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010976:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34010978:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
3401097c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
3401097e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34010982:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34010986:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3401098a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
3401098e:	68a3      	ldr	r3, [r4, #8]
34010990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34010994:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34010996:	f7ff fcc2 	bl	3401031e <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
3401099a:	03f2      	lsls	r2, r6, #15
3401099c:	d50f      	bpl.n	340109be <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
3401099e:	03eb      	lsls	r3, r5, #15
340109a0:	d50d      	bpl.n	340109be <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340109a2:	4b08      	ldr	r3, [pc, #32]	@ (340109c4 <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340109a4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
340109a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340109aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
340109ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
340109b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340109b6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
340109ba:	f7ff fcb2 	bl	34010322 <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
340109be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340109c2:	bf00      	nop
340109c4:	58006000 	.word	0x58006000

340109c8 <HAL_DCMIPP_PIPE_SetCropConfig>:
{
340109c8:	b570      	push	{r4, r5, r6, lr}
340109ca:	460e      	mov	r6, r1
340109cc:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pCropConfig == NULL))
340109ce:	4605      	mov	r5, r0
340109d0:	b908      	cbnz	r0, 340109d6 <HAL_DCMIPP_PIPE_SetCropConfig+0xe>
    return HAL_ERROR;
340109d2:	2001      	movs	r0, #1
}
340109d4:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pCropConfig == NULL))
340109d6:	2a00      	cmp	r2, #0
340109d8:	d0fb      	beq.n	340109d2 <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340109da:	2902      	cmp	r1, #2
340109dc:	d904      	bls.n	340109e8 <HAL_DCMIPP_PIPE_SetCropConfig+0x20>
340109de:	f640 61ef 	movw	r1, #3823	@ 0xeef
340109e2:	484a      	ldr	r0, [pc, #296]	@ (34010b0c <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
340109e4:	f00c ffd0 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_AREA(pCropConfig->PipeArea));
340109e8:	6923      	ldr	r3, [r4, #16]
340109ea:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
340109ee:	d004      	beq.n	340109fa <HAL_DCMIPP_PIPE_SetCropConfig+0x32>
340109f0:	f44f 616f 	mov.w	r1, #3824	@ 0xef0
340109f4:	4845      	ldr	r0, [pc, #276]	@ (34010b0c <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
340109f6:	f00c ffc7 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_HSTART(pCropConfig->HStart));
340109fa:	6863      	ldr	r3, [r4, #4]
340109fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010a00:	d304      	bcc.n	34010a0c <HAL_DCMIPP_PIPE_SetCropConfig+0x44>
34010a02:	f640 61f1 	movw	r1, #3825	@ 0xef1
34010a06:	4841      	ldr	r0, [pc, #260]	@ (34010b0c <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34010a08:	f00c ffbe 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_HSIZE(pCropConfig->HSize));
34010a0c:	f640 72fe 	movw	r2, #4094	@ 0xffe
34010a10:	68e3      	ldr	r3, [r4, #12]
34010a12:	3b01      	subs	r3, #1
34010a14:	4293      	cmp	r3, r2
34010a16:	d904      	bls.n	34010a22 <HAL_DCMIPP_PIPE_SetCropConfig+0x5a>
34010a18:	f640 61f2 	movw	r1, #3826	@ 0xef2
34010a1c:	483b      	ldr	r0, [pc, #236]	@ (34010b0c <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34010a1e:	f00c ffb3 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_VSIZE(pCropConfig->VSize));
34010a22:	f640 72fe 	movw	r2, #4094	@ 0xffe
34010a26:	68a3      	ldr	r3, [r4, #8]
34010a28:	3b01      	subs	r3, #1
34010a2a:	4293      	cmp	r3, r2
34010a2c:	d904      	bls.n	34010a38 <HAL_DCMIPP_PIPE_SetCropConfig+0x70>
34010a2e:	f640 61f3 	movw	r1, #3827	@ 0xef3
34010a32:	4836      	ldr	r0, [pc, #216]	@ (34010b0c <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34010a34:	f00c ffa8 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_VSTART(pCropConfig->VStart));
34010a38:	6823      	ldr	r3, [r4, #0]
34010a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010a3e:	d304      	bcc.n	34010a4a <HAL_DCMIPP_PIPE_SetCropConfig+0x82>
34010a40:	f640 61f4 	movw	r1, #3828	@ 0xef4
34010a44:	4831      	ldr	r0, [pc, #196]	@ (34010b0c <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34010a46:	f00c ff9f 	bl	3401d988 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010a4a:	792b      	ldrb	r3, [r5, #4]
34010a4c:	2b02      	cmp	r3, #2
34010a4e:	d1c0      	bne.n	340109d2 <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
    if (Pipe == DCMIPP_PIPE0)
34010a50:	bb3e      	cbnz	r6, 34010aa2 <HAL_DCMIPP_PIPE_SetCropConfig+0xda>
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34010a52:	682a      	ldr	r2, [r5, #0]
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34010a54:	4b2e      	ldr	r3, [pc, #184]	@ (34010b10 <HAL_DCMIPP_PIPE_SetCropConfig+0x148>)
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34010a56:	f8d2 1104 	ldr.w	r1, [r2, #260]	@ 0x104
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34010a5a:	400b      	ands	r3, r1
34010a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34010a60:	d0b7      	beq.n	340109d2 <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
        MODIFY_REG(hdcmipp->Instance->P0SCSTR, DCMIPP_P0SCSTR_HSTART | DCMIPP_P0SCSTR_VSTART,
34010a62:	e9d4 0300 	ldrd	r0, r3, [r4]
34010a66:	f8d2 1504 	ldr.w	r1, [r2, #1284]	@ 0x504
34010a6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010a6e:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010a72:	430b      	orrs	r3, r1
34010a74:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
        MODIFY_REG(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_HSIZE | DCMIPP_P0SCSZR_VSIZE | DCMIPP_P0SCSZR_POSNEG,
34010a78:	f8d2 1508 	ldr.w	r1, [r2, #1288]	@ 0x508
34010a7c:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
34010a80:	f021 419f 	bic.w	r1, r1, #1333788672	@ 0x4f800000
34010a84:	4303      	orrs	r3, r0
34010a86:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
34010a8a:	68a0      	ldr	r0, [r4, #8]
34010a8c:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
34010a90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010a94:	f021 010f 	bic.w	r1, r1, #15
34010a98:	430b      	orrs	r3, r1
34010a9a:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  return HAL_OK;
34010a9e:	2000      	movs	r0, #0
34010aa0:	e798      	b.n	340109d4 <HAL_DCMIPP_PIPE_SetCropConfig+0xc>
    else if (Pipe == DCMIPP_PIPE1)
34010aa2:	2e01      	cmp	r6, #1
34010aa4:	d117      	bne.n	34010ad6 <HAL_DCMIPP_PIPE_SetCropConfig+0x10e>
      MODIFY_REG(hdcmipp->Instance->P1CRSTR, DCMIPP_P1CRSTR_HSTART | DCMIPP_P1CRSTR_VSTART,
34010aa6:	e9d4 0300 	ldrd	r0, r3, [r4]
34010aaa:	682a      	ldr	r2, [r5, #0]
34010aac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010ab0:	f8d2 1904 	ldr.w	r1, [r2, #2308]	@ 0x904
34010ab4:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010ab8:	430b      	orrs	r3, r1
34010aba:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
      MODIFY_REG(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_HSIZE | DCMIPP_P1CRSZR_VSIZE,
34010abe:	f8d2 1908 	ldr.w	r1, [r2, #2312]	@ 0x908
34010ac2:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34010ac6:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010aca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010ace:	430b      	orrs	r3, r1
34010ad0:	f8c2 3908 	str.w	r3, [r2, #2312]	@ 0x908
34010ad4:	e7e3      	b.n	34010a9e <HAL_DCMIPP_PIPE_SetCropConfig+0xd6>
    else if (Pipe == DCMIPP_PIPE2)
34010ad6:	2e02      	cmp	r6, #2
34010ad8:	f47f af7b 	bne.w	340109d2 <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2CRSTR, DCMIPP_P2CRSTR_HSTART | DCMIPP_P2CRSTR_VSTART,
34010adc:	e9d4 0300 	ldrd	r0, r3, [r4]
34010ae0:	682a      	ldr	r2, [r5, #0]
34010ae2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010ae6:	f8d2 1d04 	ldr.w	r1, [r2, #3332]	@ 0xd04
34010aea:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010aee:	430b      	orrs	r3, r1
34010af0:	f8c2 3d04 	str.w	r3, [r2, #3332]	@ 0xd04
      MODIFY_REG(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_HSIZE | DCMIPP_P2CRSZR_VSIZE,
34010af4:	f8d2 1d08 	ldr.w	r1, [r2, #3336]	@ 0xd08
34010af8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34010afc:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010b00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34010b04:	430b      	orrs	r3, r1
34010b06:	f8c2 3d08 	str.w	r3, [r2, #3336]	@ 0xd08
34010b0a:	e7c8      	b.n	34010a9e <HAL_DCMIPP_PIPE_SetCropConfig+0xd6>
34010b0c:	3402678a 	.word	0x3402678a
34010b10:	00ff4000 	.word	0x00ff4000

34010b14 <HAL_DCMIPP_PIPE_EnableCrop>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010b14:	2902      	cmp	r1, #2
{
34010b16:	b538      	push	{r3, r4, r5, lr}
34010b18:	4605      	mov	r5, r0
34010b1a:	460c      	mov	r4, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010b1c:	d904      	bls.n	34010b28 <HAL_DCMIPP_PIPE_EnableCrop+0x14>
34010b1e:	f640 713f 	movw	r1, #3903	@ 0xf3f
34010b22:	481a      	ldr	r0, [pc, #104]	@ (34010b8c <HAL_DCMIPP_PIPE_EnableCrop+0x78>)
34010b24:	f00c ff30 	bl	3401d988 <assert_failed>
  if (hdcmipp == NULL)
34010b28:	b36d      	cbz	r5, 34010b86 <HAL_DCMIPP_PIPE_EnableCrop+0x72>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010b2a:	792b      	ldrb	r3, [r5, #4]
34010b2c:	2b02      	cmp	r3, #2
34010b2e:	d12a      	bne.n	34010b86 <HAL_DCMIPP_PIPE_EnableCrop+0x72>
    if (Pipe == DCMIPP_PIPE0)
34010b30:	b97c      	cbnz	r4, 34010b52 <HAL_DCMIPP_PIPE_EnableCrop+0x3e>
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34010b32:	682b      	ldr	r3, [r5, #0]
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34010b34:	4a16      	ldr	r2, [pc, #88]	@ (34010b90 <HAL_DCMIPP_PIPE_EnableCrop+0x7c>)
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34010b36:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34010b3a:	400a      	ands	r2, r1
34010b3c:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
34010b40:	d021      	beq.n	34010b86 <HAL_DCMIPP_PIPE_EnableCrop+0x72>
        SET_BIT(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_ENABLE);
34010b42:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
34010b46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010b4a:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  return HAL_OK;
34010b4e:	2000      	movs	r0, #0
}
34010b50:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE1)
34010b52:	2c01      	cmp	r4, #1
34010b54:	d10d      	bne.n	34010b72 <HAL_DCMIPP_PIPE_EnableCrop+0x5e>
      if (hdcmipp->Instance->P1SRCR != DCMIPP_P1SRCR_CROPEN)
34010b56:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
34010b58:	4620      	mov	r0, r4
      if (hdcmipp->Instance->P1SRCR != DCMIPP_P1SRCR_CROPEN)
34010b5a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
34010b5e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
34010b62:	d0f5      	beq.n	34010b50 <HAL_DCMIPP_PIPE_EnableCrop+0x3c>
        SET_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34010b64:	f8d3 2908 	ldr.w	r2, [r3, #2312]	@ 0x908
34010b68:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010b6c:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
34010b70:	e7ed      	b.n	34010b4e <HAL_DCMIPP_PIPE_EnableCrop+0x3a>
    else if (Pipe == DCMIPP_PIPE2)
34010b72:	2c02      	cmp	r4, #2
34010b74:	d107      	bne.n	34010b86 <HAL_DCMIPP_PIPE_EnableCrop+0x72>
      SET_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34010b76:	682a      	ldr	r2, [r5, #0]
34010b78:	f8d2 3d08 	ldr.w	r3, [r2, #3336]	@ 0xd08
34010b7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34010b80:	f8c2 3d08 	str.w	r3, [r2, #3336]	@ 0xd08
34010b84:	e7e3      	b.n	34010b4e <HAL_DCMIPP_PIPE_EnableCrop+0x3a>
    return HAL_ERROR;
34010b86:	2001      	movs	r0, #1
34010b88:	e7e2      	b.n	34010b50 <HAL_DCMIPP_PIPE_EnableCrop+0x3c>
34010b8a:	bf00      	nop
34010b8c:	3402678a 	.word	0x3402678a
34010b90:	00ff4000 	.word	0x00ff4000

34010b94 <HAL_DCMIPP_PIPE_DisableCrop>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010b94:	2902      	cmp	r1, #2
{
34010b96:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010b98:	d906      	bls.n	34010ba8 <HAL_DCMIPP_PIPE_DisableCrop+0x14>
34010b9a:	f640 717e 	movw	r1, #3966	@ 0xf7e
34010b9e:	4810      	ldr	r0, [pc, #64]	@ (34010be0 <HAL_DCMIPP_PIPE_DisableCrop+0x4c>)
34010ba0:	f00c fef2 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010ba4:	2001      	movs	r0, #1
34010ba6:	e00a      	b.n	34010bbe <HAL_DCMIPP_PIPE_DisableCrop+0x2a>
  if (hdcmipp == NULL)
34010ba8:	2800      	cmp	r0, #0
34010baa:	d0fb      	beq.n	34010ba4 <HAL_DCMIPP_PIPE_DisableCrop+0x10>
  if (Pipe == DCMIPP_PIPE0)
34010bac:	6803      	ldr	r3, [r0, #0]
34010bae:	b939      	cbnz	r1, 34010bc0 <HAL_DCMIPP_PIPE_DisableCrop+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_ENABLE);
34010bb0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
34010bb4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34010bb8:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  return HAL_OK;
34010bbc:	2000      	movs	r0, #0
}
34010bbe:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE1)
34010bc0:	2901      	cmp	r1, #1
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34010bc2:	bf0b      	itete	eq
34010bc4:	f8d3 2908 	ldreq.w	r2, [r3, #2312]	@ 0x908
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34010bc8:	f8d3 2d08 	ldrne.w	r2, [r3, #3336]	@ 0xd08
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34010bcc:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34010bd0:	f022 4200 	bicne.w	r2, r2, #2147483648	@ 0x80000000
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34010bd4:	bf0c      	ite	eq
34010bd6:	f8c3 2908 	streq.w	r2, [r3, #2312]	@ 0x908
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34010bda:	f8c3 2d08 	strne.w	r2, [r3, #3336]	@ 0xd08
34010bde:	e7ed      	b.n	34010bbc <HAL_DCMIPP_PIPE_DisableCrop+0x28>
34010be0:	3402678a 	.word	0x3402678a

34010be4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010be4:	2902      	cmp	r1, #2
{
34010be6:	b570      	push	{r4, r5, r6, lr}
34010be8:	4605      	mov	r5, r0
34010bea:	460e      	mov	r6, r1
34010bec:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010bee:	d904      	bls.n	34010bfa <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x16>
34010bf0:	f241 0152 	movw	r1, #4178	@ 0x1052
34010bf4:	4818      	ldr	r0, [pc, #96]	@ (34010c58 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34010bf6:	f00c fec7 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34010bfa:	6822      	ldr	r2, [r4, #0]
34010bfc:	b152      	cbz	r2, 34010c14 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x30>
34010bfe:	2a18      	cmp	r2, #24
34010c00:	d803      	bhi.n	34010c0a <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x26>
34010c02:	4b16      	ldr	r3, [pc, #88]	@ (34010c5c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x78>)
34010c04:	40d3      	lsrs	r3, r2
34010c06:	07da      	lsls	r2, r3, #31
34010c08:	d404      	bmi.n	34010c14 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x30>
34010c0a:	f241 0153 	movw	r1, #4179	@ 0x1053
34010c0e:	4812      	ldr	r0, [pc, #72]	@ (34010c58 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34010c10:	f00c feba 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
34010c14:	6862      	ldr	r2, [r4, #4]
34010c16:	b152      	cbz	r2, 34010c2e <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x4a>
34010c18:	2a06      	cmp	r2, #6
34010c1a:	d803      	bhi.n	34010c24 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x40>
34010c1c:	2354      	movs	r3, #84	@ 0x54
34010c1e:	40d3      	lsrs	r3, r2
34010c20:	07db      	lsls	r3, r3, #31
34010c22:	d404      	bmi.n	34010c2e <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x4a>
34010c24:	f241 0154 	movw	r1, #4180	@ 0x1054
34010c28:	480b      	ldr	r0, [pc, #44]	@ (34010c58 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34010c2a:	f00c fead 	bl	3401d988 <assert_failed>
  if ((hdcmipp == NULL) || (pDecConfig == NULL))
34010c2e:	b18d      	cbz	r5, 34010c54 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010c30:	792b      	ldrb	r3, [r5, #4]
34010c32:	2b02      	cmp	r3, #2
34010c34:	d10e      	bne.n	34010c54 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
    if (Pipe == DCMIPP_PIPE1)
34010c36:	2e01      	cmp	r6, #1
34010c38:	d10c      	bne.n	34010c54 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34010c3a:	e9d4 3000 	ldrd	r3, r0, [r4]
34010c3e:	4303      	orrs	r3, r0
  return HAL_OK;
34010c40:	2000      	movs	r0, #0
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34010c42:	6829      	ldr	r1, [r5, #0]
34010c44:	f8d1 2830 	ldr.w	r2, [r1, #2096]	@ 0x830
34010c48:	f022 021e 	bic.w	r2, r2, #30
34010c4c:	4313      	orrs	r3, r2
34010c4e:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830
}
34010c52:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
34010c54:	2001      	movs	r0, #1
34010c56:	e7fc      	b.n	34010c52 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x6e>
34010c58:	3402678a 	.word	0x3402678a
34010c5c:	01010100 	.word	0x01010100

34010c60 <HAL_DCMIPP_PIPE_EnableISPDecimation>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010c60:	2902      	cmp	r1, #2
{
34010c62:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010c64:	d906      	bls.n	34010c74 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x14>
34010c66:	f241 017a 	movw	r1, #4218	@ 0x107a
34010c6a:	4809      	ldr	r0, [pc, #36]	@ (34010c90 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x30>)
34010c6c:	f00c fe8c 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010c70:	2001      	movs	r0, #1
}
34010c72:	bd08      	pop	{r3, pc}
  if (hdcmipp == NULL)
34010c74:	2800      	cmp	r0, #0
34010c76:	d0fb      	beq.n	34010c70 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x10>
  if (Pipe == DCMIPP_PIPE1)
34010c78:	2901      	cmp	r1, #1
34010c7a:	d1f9      	bne.n	34010c70 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x10>
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34010c7c:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34010c7e:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34010c80:	f8d2 3830 	ldr.w	r3, [r2, #2096]	@ 0x830
34010c84:	f043 0301 	orr.w	r3, r3, #1
34010c88:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830
  return HAL_OK;
34010c8c:	e7f1      	b.n	34010c72 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x12>
34010c8e:	bf00      	nop
34010c90:	3402678a 	.word	0x3402678a

34010c94 <HAL_DCMIPP_PIPE_SetDecimationConfig>:
{
34010c94:	b570      	push	{r4, r5, r6, lr}
34010c96:	460e      	mov	r6, r1
34010c98:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34010c9a:	4605      	mov	r5, r0
34010c9c:	b908      	cbnz	r0, 34010ca2 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xe>
    return HAL_ERROR;
34010c9e:	2001      	movs	r0, #1
}
34010ca0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010ca2:	2902      	cmp	r1, #2
34010ca4:	d904      	bls.n	34010cb0 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x1c>
34010ca6:	f241 01bc 	movw	r1, #4284	@ 0x10bc
34010caa:	481e      	ldr	r0, [pc, #120]	@ (34010d24 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34010cac:	f00c fe6c 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34010cb0:	6822      	ldr	r2, [r4, #0]
34010cb2:	b152      	cbz	r2, 34010cca <HAL_DCMIPP_PIPE_SetDecimationConfig+0x36>
34010cb4:	2a18      	cmp	r2, #24
34010cb6:	d803      	bhi.n	34010cc0 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x2c>
34010cb8:	4b1b      	ldr	r3, [pc, #108]	@ (34010d28 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x94>)
34010cba:	40d3      	lsrs	r3, r2
34010cbc:	07da      	lsls	r2, r3, #31
34010cbe:	d404      	bmi.n	34010cca <HAL_DCMIPP_PIPE_SetDecimationConfig+0x36>
34010cc0:	f241 01bd 	movw	r1, #4285	@ 0x10bd
34010cc4:	4817      	ldr	r0, [pc, #92]	@ (34010d24 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34010cc6:	f00c fe5f 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
34010cca:	6862      	ldr	r2, [r4, #4]
34010ccc:	b152      	cbz	r2, 34010ce4 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x50>
34010cce:	2a06      	cmp	r2, #6
34010cd0:	d803      	bhi.n	34010cda <HAL_DCMIPP_PIPE_SetDecimationConfig+0x46>
34010cd2:	2354      	movs	r3, #84	@ 0x54
34010cd4:	40d3      	lsrs	r3, r2
34010cd6:	07db      	lsls	r3, r3, #31
34010cd8:	d404      	bmi.n	34010ce4 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x50>
34010cda:	f241 01be 	movw	r1, #4286	@ 0x10be
34010cde:	4811      	ldr	r0, [pc, #68]	@ (34010d24 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34010ce0:	f00c fe52 	bl	3401d988 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010ce4:	792b      	ldrb	r3, [r5, #4]
34010ce6:	2b02      	cmp	r3, #2
34010ce8:	d1d9      	bne.n	34010c9e <HAL_DCMIPP_PIPE_SetDecimationConfig+0xa>
    if (Pipe == DCMIPP_PIPE1)
34010cea:	2e01      	cmp	r6, #1
34010cec:	d10c      	bne.n	34010d08 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x74>
      MODIFY_REG(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_VDEC | DCMIPP_P1DCCR_HDEC,
34010cee:	e9d4 3000 	ldrd	r3, r0, [r4]
34010cf2:	6829      	ldr	r1, [r5, #0]
34010cf4:	4303      	orrs	r3, r0
34010cf6:	f8d1 290c 	ldr.w	r2, [r1, #2316]	@ 0x90c
34010cfa:	f022 021e 	bic.w	r2, r2, #30
34010cfe:	4313      	orrs	r3, r2
34010d00:	f8c1 390c 	str.w	r3, [r1, #2316]	@ 0x90c
  return HAL_OK;
34010d04:	2000      	movs	r0, #0
34010d06:	e7cb      	b.n	34010ca0 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xc>
    else if (Pipe == DCMIPP_PIPE2)
34010d08:	2e02      	cmp	r6, #2
34010d0a:	d1c8      	bne.n	34010c9e <HAL_DCMIPP_PIPE_SetDecimationConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_VDEC | DCMIPP_P2DCCR_HDEC,
34010d0c:	e9d4 3000 	ldrd	r3, r0, [r4]
34010d10:	6829      	ldr	r1, [r5, #0]
34010d12:	4303      	orrs	r3, r0
34010d14:	f8d1 2d0c 	ldr.w	r2, [r1, #3340]	@ 0xd0c
34010d18:	f022 021e 	bic.w	r2, r2, #30
34010d1c:	4313      	orrs	r3, r2
34010d1e:	f8c1 3d0c 	str.w	r3, [r1, #3340]	@ 0xd0c
34010d22:	e7ef      	b.n	34010d04 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x70>
34010d24:	3402678a 	.word	0x3402678a
34010d28:	01010100 	.word	0x01010100

34010d2c <HAL_DCMIPP_PIPE_EnableDecimation>:
{
34010d2c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010d2e:	b130      	cbz	r0, 34010d3e <HAL_DCMIPP_PIPE_EnableDecimation+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010d30:	2902      	cmp	r1, #2
34010d32:	d906      	bls.n	34010d42 <HAL_DCMIPP_PIPE_EnableDecimation+0x16>
34010d34:	f241 01e9 	movw	r1, #4329	@ 0x10e9
34010d38:	480c      	ldr	r0, [pc, #48]	@ (34010d6c <HAL_DCMIPP_PIPE_EnableDecimation+0x40>)
34010d3a:	f00c fe25 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010d3e:	2001      	movs	r0, #1
34010d40:	e009      	b.n	34010d56 <HAL_DCMIPP_PIPE_EnableDecimation+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010d42:	2901      	cmp	r1, #1
34010d44:	d108      	bne.n	34010d58 <HAL_DCMIPP_PIPE_EnableDecimation+0x2c>
    SET_BIT(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_ENABLE);
34010d46:	6802      	ldr	r2, [r0, #0]
34010d48:	f8d2 390c 	ldr.w	r3, [r2, #2316]	@ 0x90c
34010d4c:	f043 0301 	orr.w	r3, r3, #1
34010d50:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  return HAL_OK;
34010d54:	2000      	movs	r0, #0
}
34010d56:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010d58:	2902      	cmp	r1, #2
34010d5a:	d1f0      	bne.n	34010d3e <HAL_DCMIPP_PIPE_EnableDecimation+0x12>
    SET_BIT(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_ENABLE);
34010d5c:	6802      	ldr	r2, [r0, #0]
34010d5e:	f8d2 3d0c 	ldr.w	r3, [r2, #3340]	@ 0xd0c
34010d62:	f043 0301 	orr.w	r3, r3, #1
34010d66:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
34010d6a:	e7f3      	b.n	34010d54 <HAL_DCMIPP_PIPE_EnableDecimation+0x28>
34010d6c:	3402678a 	.word	0x3402678a

34010d70 <HAL_DCMIPP_PIPE_DisableDecimation>:
{
34010d70:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010d72:	b130      	cbz	r0, 34010d82 <HAL_DCMIPP_PIPE_DisableDecimation+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010d74:	2902      	cmp	r1, #2
34010d76:	d906      	bls.n	34010d86 <HAL_DCMIPP_PIPE_DisableDecimation+0x16>
34010d78:	f241 110a 	movw	r1, #4362	@ 0x110a
34010d7c:	480c      	ldr	r0, [pc, #48]	@ (34010db0 <HAL_DCMIPP_PIPE_DisableDecimation+0x40>)
34010d7e:	f00c fe03 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010d82:	2001      	movs	r0, #1
34010d84:	e009      	b.n	34010d9a <HAL_DCMIPP_PIPE_DisableDecimation+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010d86:	2901      	cmp	r1, #1
34010d88:	d108      	bne.n	34010d9c <HAL_DCMIPP_PIPE_DisableDecimation+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_ENABLE);
34010d8a:	6802      	ldr	r2, [r0, #0]
34010d8c:	f8d2 390c 	ldr.w	r3, [r2, #2316]	@ 0x90c
34010d90:	f023 0301 	bic.w	r3, r3, #1
34010d94:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  return HAL_OK;
34010d98:	2000      	movs	r0, #0
}
34010d9a:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010d9c:	2902      	cmp	r1, #2
34010d9e:	d1f0      	bne.n	34010d82 <HAL_DCMIPP_PIPE_DisableDecimation+0x12>
    CLEAR_BIT(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_ENABLE);
34010da0:	6802      	ldr	r2, [r0, #0]
34010da2:	f8d2 3d0c 	ldr.w	r3, [r2, #3340]	@ 0xd0c
34010da6:	f023 0301 	bic.w	r3, r3, #1
34010daa:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
34010dae:	e7f3      	b.n	34010d98 <HAL_DCMIPP_PIPE_DisableDecimation+0x28>
34010db0:	3402678a 	.word	0x3402678a

34010db4 <HAL_DCMIPP_PIPE_SetDownsizeConfig>:
{
34010db4:	b570      	push	{r4, r5, r6, lr}
34010db6:	460e      	mov	r6, r1
34010db8:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34010dba:	4605      	mov	r5, r0
34010dbc:	b908      	cbnz	r0, 34010dc2 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xe>
    return HAL_ERROR;
34010dbe:	2001      	movs	r0, #1
}
34010dc0:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34010dc2:	2a00      	cmp	r2, #0
34010dc4:	d0fb      	beq.n	34010dbe <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010dc6:	2902      	cmp	r1, #2
34010dc8:	d904      	bls.n	34010dd4 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x20>
34010dca:	f241 1134 	movw	r1, #4404	@ 0x1134
34010dce:	483f      	ldr	r0, [pc, #252]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010dd0:	f00c fdda 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->HDivFactor));
34010dd4:	6963      	ldr	r3, [r4, #20]
34010dd6:	3b80      	subs	r3, #128	@ 0x80
34010dd8:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
34010ddc:	d304      	bcc.n	34010de8 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x34>
34010dde:	f241 1135 	movw	r1, #4405	@ 0x1135
34010de2:	483a      	ldr	r0, [pc, #232]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010de4:	f00c fdd0 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->VDivFactor));
34010de8:	6923      	ldr	r3, [r4, #16]
34010dea:	3b80      	subs	r3, #128	@ 0x80
34010dec:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
34010df0:	d304      	bcc.n	34010dfc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x48>
34010df2:	f241 1136 	movw	r1, #4406	@ 0x1136
34010df6:	4835      	ldr	r0, [pc, #212]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010df8:	f00c fdc6 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->HRatio));
34010dfc:	68e3      	ldr	r3, [r4, #12]
34010dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34010e02:	d304      	bcc.n	34010e0e <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x5a>
34010e04:	f241 1137 	movw	r1, #4407	@ 0x1137
34010e08:	4830      	ldr	r0, [pc, #192]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010e0a:	f00c fdbd 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->VRatio));
34010e0e:	68a3      	ldr	r3, [r4, #8]
34010e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34010e14:	d304      	bcc.n	34010e20 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x6c>
34010e16:	f241 1138 	movw	r1, #4408	@ 0x1138
34010e1a:	482c      	ldr	r0, [pc, #176]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010e1c:	f00c fdb4 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->HSize));
34010e20:	6863      	ldr	r3, [r4, #4]
34010e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010e26:	d304      	bcc.n	34010e32 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x7e>
34010e28:	f241 1139 	movw	r1, #4409	@ 0x1139
34010e2c:	4827      	ldr	r0, [pc, #156]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010e2e:	f00c fdab 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->VSize));
34010e32:	6823      	ldr	r3, [r4, #0]
34010e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34010e38:	d304      	bcc.n	34010e44 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x90>
34010e3a:	f241 113a 	movw	r1, #4410	@ 0x113a
34010e3e:	4823      	ldr	r0, [pc, #140]	@ (34010ecc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34010e40:	f00c fda2 	bl	3401d988 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34010e44:	792b      	ldrb	r3, [r5, #4]
34010e46:	2b02      	cmp	r3, #2
34010e48:	d1b9      	bne.n	34010dbe <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
    if (Pipe == DCMIPP_PIPE1)
34010e4a:	2e01      	cmp	r6, #1
34010e4c:	d11e      	bne.n	34010e8c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xd8>
      MODIFY_REG(hdcmipp->Instance->P1DSCR, (DCMIPP_P1DSCR_HDIV | DCMIPP_P1DSCR_VDIV),
34010e4e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
34010e52:	682b      	ldr	r3, [r5, #0]
34010e54:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010e58:	f8d3 1910 	ldr.w	r1, [r3, #2320]	@ 0x910
34010e5c:	f001 21fc 	and.w	r1, r1, #4227922944	@ 0xfc00fc00
34010e60:	430a      	orrs	r2, r1
34010e62:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
      WRITE_REG(hdcmipp->Instance->P1DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P1DSRTIOR_HRATIO_Pos) | \
34010e66:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
34010e6a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34010e6e:	f8c3 2914 	str.w	r2, [r3, #2324]	@ 0x914
      MODIFY_REG(hdcmipp->Instance->P1DSSZR, DCMIPP_P1DSSZR_HSIZE | DCMIPP_P1DSSZR_VSIZE,
34010e72:	f8d3 1918 	ldr.w	r1, [r3, #2328]	@ 0x918
34010e76:	e9d4 0200 	ldrd	r0, r2, [r4]
34010e7a:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010e82:	430a      	orrs	r2, r1
34010e84:	f8c3 2918 	str.w	r2, [r3, #2328]	@ 0x918
  return HAL_OK;
34010e88:	2000      	movs	r0, #0
34010e8a:	e799      	b.n	34010dc0 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xc>
    else if (Pipe == DCMIPP_PIPE2)
34010e8c:	2e02      	cmp	r6, #2
34010e8e:	d196      	bne.n	34010dbe <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_HDIV | DCMIPP_P2DSCR_VDIV,
34010e90:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
34010e94:	682b      	ldr	r3, [r5, #0]
34010e96:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010e9a:	f8d3 1d10 	ldr.w	r1, [r3, #3344]	@ 0xd10
34010e9e:	f001 21fc 	and.w	r1, r1, #4227922944	@ 0xfc00fc00
34010ea2:	430a      	orrs	r2, r1
34010ea4:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
      WRITE_REG(hdcmipp->Instance->P2DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P2DSRTIOR_HRATIO_Pos) | \
34010ea8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
34010eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34010eb0:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
      MODIFY_REG(hdcmipp->Instance->P2DSSZR, DCMIPP_P2DSSZR_HSIZE | DCMIPP_P2DSSZR_VSIZE,
34010eb4:	f8d3 1d18 	ldr.w	r1, [r3, #3352]	@ 0xd18
34010eb8:	e9d4 0200 	ldrd	r0, r2, [r4]
34010ebc:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34010ec0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34010ec4:	430a      	orrs	r2, r1
34010ec6:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
34010eca:	e7dd      	b.n	34010e88 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xd4>
34010ecc:	3402678a 	.word	0x3402678a

34010ed0 <HAL_DCMIPP_PIPE_EnableDownsize>:
{
34010ed0:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010ed2:	b130      	cbz	r0, 34010ee2 <HAL_DCMIPP_PIPE_EnableDownsize+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010ed4:	2902      	cmp	r1, #2
34010ed6:	d906      	bls.n	34010ee6 <HAL_DCMIPP_PIPE_EnableDownsize+0x16>
34010ed8:	f241 117a 	movw	r1, #4474	@ 0x117a
34010edc:	480c      	ldr	r0, [pc, #48]	@ (34010f10 <HAL_DCMIPP_PIPE_EnableDownsize+0x40>)
34010ede:	f00c fd53 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010ee2:	2001      	movs	r0, #1
34010ee4:	e009      	b.n	34010efa <HAL_DCMIPP_PIPE_EnableDownsize+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010ee6:	2901      	cmp	r1, #1
34010ee8:	d108      	bne.n	34010efc <HAL_DCMIPP_PIPE_EnableDownsize+0x2c>
    SET_BIT(hdcmipp->Instance->P1DSCR, DCMIPP_P1DSCR_ENABLE);
34010eea:	6802      	ldr	r2, [r0, #0]
34010eec:	f8d2 3910 	ldr.w	r3, [r2, #2320]	@ 0x910
34010ef0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34010ef4:	f8c2 3910 	str.w	r3, [r2, #2320]	@ 0x910
  return HAL_OK;
34010ef8:	2000      	movs	r0, #0
}
34010efa:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010efc:	2902      	cmp	r1, #2
34010efe:	d1f0      	bne.n	34010ee2 <HAL_DCMIPP_PIPE_EnableDownsize+0x12>
    SET_BIT(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_ENABLE);
34010f00:	6802      	ldr	r2, [r0, #0]
34010f02:	f8d2 3d10 	ldr.w	r3, [r2, #3344]	@ 0xd10
34010f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34010f0a:	f8c2 3d10 	str.w	r3, [r2, #3344]	@ 0xd10
34010f0e:	e7f3      	b.n	34010ef8 <HAL_DCMIPP_PIPE_EnableDownsize+0x28>
34010f10:	3402678a 	.word	0x3402678a

34010f14 <HAL_DCMIPP_PIPE_EnableGammaConversion>:
{
34010f14:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010f16:	b130      	cbz	r0, 34010f26 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010f18:	2902      	cmp	r1, #2
34010f1a:	d906      	bls.n	34010f2a <HAL_DCMIPP_PIPE_EnableGammaConversion+0x16>
34010f1c:	f241 11bc 	movw	r1, #4540	@ 0x11bc
34010f20:	480c      	ldr	r0, [pc, #48]	@ (34010f54 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x40>)
34010f22:	f00c fd31 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010f26:	2001      	movs	r0, #1
34010f28:	e009      	b.n	34010f3e <HAL_DCMIPP_PIPE_EnableGammaConversion+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010f2a:	2901      	cmp	r1, #1
34010f2c:	d108      	bne.n	34010f40 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x2c>
    SET_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34010f2e:	6802      	ldr	r2, [r0, #0]
34010f30:	f8d2 3970 	ldr.w	r3, [r2, #2416]	@ 0x970
34010f34:	f043 0301 	orr.w	r3, r3, #1
34010f38:	f8c2 3970 	str.w	r3, [r2, #2416]	@ 0x970
  return HAL_OK;
34010f3c:	2000      	movs	r0, #0
}
34010f3e:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010f40:	2902      	cmp	r1, #2
34010f42:	d1f0      	bne.n	34010f26 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x12>
    SET_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34010f44:	6802      	ldr	r2, [r0, #0]
34010f46:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	@ 0xd70
34010f4a:	f043 0301 	orr.w	r3, r3, #1
34010f4e:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
34010f52:	e7f3      	b.n	34010f3c <HAL_DCMIPP_PIPE_EnableGammaConversion+0x28>
34010f54:	3402678a 	.word	0x3402678a

34010f58 <HAL_DCMIPP_PIPE_DisableGammaConversion>:
{
34010f58:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34010f5a:	b130      	cbz	r0, 34010f6a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010f5c:	2902      	cmp	r1, #2
34010f5e:	d906      	bls.n	34010f6e <HAL_DCMIPP_PIPE_DisableGammaConversion+0x16>
34010f60:	f241 11dd 	movw	r1, #4573	@ 0x11dd
34010f64:	480c      	ldr	r0, [pc, #48]	@ (34010f98 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x40>)
34010f66:	f00c fd0f 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34010f6a:	2001      	movs	r0, #1
34010f6c:	e009      	b.n	34010f82 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x2a>
  if (Pipe == DCMIPP_PIPE1)
34010f6e:	2901      	cmp	r1, #1
34010f70:	d108      	bne.n	34010f84 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
34010f72:	6802      	ldr	r2, [r0, #0]
34010f74:	f8d2 3970 	ldr.w	r3, [r2, #2416]	@ 0x970
34010f78:	f023 0301 	bic.w	r3, r3, #1
34010f7c:	f8c2 3970 	str.w	r3, [r2, #2416]	@ 0x970
  return HAL_OK;
34010f80:	2000      	movs	r0, #0
}
34010f82:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34010f84:	2902      	cmp	r1, #2
34010f86:	d1f0      	bne.n	34010f6a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x12>
    CLEAR_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34010f88:	6802      	ldr	r2, [r0, #0]
34010f8a:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	@ 0xd70
34010f8e:	f023 0301 	bic.w	r3, r3, #1
34010f92:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
34010f96:	e7f3      	b.n	34010f80 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x28>
34010f98:	3402678a 	.word	0x3402678a

34010f9c <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>:
{
34010f9c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010f9e:	4a13      	ldr	r2, [pc, #76]	@ (34010fec <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x50>)
34010fa0:	6803      	ldr	r3, [r0, #0]
{
34010fa2:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010fa4:	4293      	cmp	r3, r2
{
34010fa6:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010fa8:	d008      	beq.n	34010fbc <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x20>
34010faa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010fae:	4293      	cmp	r3, r2
34010fb0:	d004      	beq.n	34010fbc <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x20>
34010fb2:	f241 11f8 	movw	r1, #4600	@ 0x11f8
34010fb6:	480e      	ldr	r0, [pc, #56]	@ (34010ff0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x54>)
34010fb8:	f00c fce6 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34010fbc:	2d02      	cmp	r5, #2
34010fbe:	d906      	bls.n	34010fce <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x32>
34010fc0:	f241 11f9 	movw	r1, #4601	@ 0x11f9
34010fc4:	480a      	ldr	r0, [pc, #40]	@ (34010ff0 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x54>)
34010fc6:	f00c fcdf 	bl	3401d988 <assert_failed>
    return 0;
34010fca:	2000      	movs	r0, #0
}
34010fcc:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34010fce:	2d01      	cmp	r5, #1
34010fd0:	d105      	bne.n	34010fde <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x42>
    return ((READ_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE) == DCMIPP_P1GMCR_ENABLE) ? 1U : 0U);
34010fd2:	6823      	ldr	r3, [r4, #0]
34010fd4:	f8d3 0970 	ldr.w	r0, [r3, #2416]	@ 0x970
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34010fd8:	f000 0001 	and.w	r0, r0, #1
34010fdc:	e7f6      	b.n	34010fcc <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x30>
  else if (Pipe == DCMIPP_PIPE2)
34010fde:	2d02      	cmp	r5, #2
34010fe0:	d1f3      	bne.n	34010fca <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34010fe2:	6823      	ldr	r3, [r4, #0]
34010fe4:	f8d3 0d70 	ldr.w	r0, [r3, #3440]	@ 0xd70
34010fe8:	e7f6      	b.n	34010fd8 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x3c>
34010fea:	bf00      	nop
34010fec:	58002000 	.word	0x58002000
34010ff0:	3402678a 	.word	0x3402678a

34010ff4 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>:
{
34010ff4:	b570      	push	{r4, r5, r6, lr}
34010ff6:	460e      	mov	r6, r1
34010ff8:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34010ffa:	4605      	mov	r5, r0
34010ffc:	b908      	cbnz	r0, 34011002 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xe>
    return HAL_ERROR;
34010ffe:	2001      	movs	r0, #1
}
34011000:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34011002:	2a00      	cmp	r2, #0
34011004:	d0fb      	beq.n	34010ffe <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011006:	2902      	cmp	r1, #2
34011008:	d904      	bls.n	34011014 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x20>
3401100a:	f241 211e 	movw	r1, #4638	@ 0x121e
3401100e:	4824      	ldr	r0, [pc, #144]	@ (340110a0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34011010:	f00c fcba 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_RAW_TYPE(pRawBayer2RGBConfig->RawBayerType));
34011014:	68a2      	ldr	r2, [r4, #8]
34011016:	b152      	cbz	r2, 3401102e <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x3a>
34011018:	2a06      	cmp	r2, #6
3401101a:	d803      	bhi.n	34011024 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x30>
3401101c:	2354      	movs	r3, #84	@ 0x54
3401101e:	40d3      	lsrs	r3, r2
34011020:	07db      	lsls	r3, r3, #31
34011022:	d404      	bmi.n	3401102e <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x3a>
34011024:	f241 211f 	movw	r1, #4639	@ 0x121f
34011028:	481d      	ldr	r0, [pc, #116]	@ (340110a0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
3401102a:	f00c fcad 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->PeakStrength));
3401102e:	68e3      	ldr	r3, [r4, #12]
34011030:	2b07      	cmp	r3, #7
34011032:	d904      	bls.n	3401103e <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x4a>
34011034:	f44f 5191 	mov.w	r1, #4640	@ 0x1220
34011038:	4819      	ldr	r0, [pc, #100]	@ (340110a0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
3401103a:	f00c fca5 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->VLineStrength));
3401103e:	6823      	ldr	r3, [r4, #0]
34011040:	2b07      	cmp	r3, #7
34011042:	d904      	bls.n	3401104e <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x5a>
34011044:	f241 2121 	movw	r1, #4641	@ 0x1221
34011048:	4815      	ldr	r0, [pc, #84]	@ (340110a0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
3401104a:	f00c fc9d 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->HLineStrength));
3401104e:	6863      	ldr	r3, [r4, #4]
34011050:	2b07      	cmp	r3, #7
34011052:	d904      	bls.n	3401105e <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x6a>
34011054:	f241 2122 	movw	r1, #4642	@ 0x1222
34011058:	4811      	ldr	r0, [pc, #68]	@ (340110a0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
3401105a:	f00c fc95 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->EdgeStrength));
3401105e:	6923      	ldr	r3, [r4, #16]
34011060:	2b07      	cmp	r3, #7
34011062:	d904      	bls.n	3401106e <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x7a>
34011064:	f241 2123 	movw	r1, #4643	@ 0x1223
34011068:	480d      	ldr	r0, [pc, #52]	@ (340110a0 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
3401106a:	f00c fc8d 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401106e:	2e01      	cmp	r6, #1
34011070:	d1c5      	bne.n	34010ffe <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xa>
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34011072:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
34011076:	071b      	lsls	r3, r3, #28
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34011078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401107c:	68a2      	ldr	r2, [r4, #8]
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
3401107e:	6829      	ldr	r1, [r5, #0]
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34011080:	4313      	orrs	r3, r2
                  (pRawBayer2RGBConfig->VLineStrength << DCMIPP_P1DMCR_LINEV_Pos)   | \
34011082:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34011084:	f8d1 0870 	ldr.w	r0, [r1, #2160]	@ 0x870
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34011088:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                  (pRawBayer2RGBConfig->HLineStrength << DCMIPP_P1DMCR_LINEH_Pos));
3401108c:	6862      	ldr	r2, [r4, #4]
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
3401108e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34011092:	4a04      	ldr	r2, [pc, #16]	@ (340110a4 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xb0>)
34011094:	4002      	ands	r2, r0
34011096:	4313      	orrs	r3, r2
  return HAL_OK;
34011098:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
3401109a:	f8c1 3870 	str.w	r3, [r1, #2160]	@ 0x870
  return HAL_OK;
3401109e:	e7af      	b.n	34011000 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xc>
340110a0:	3402678a 	.word	0x3402678a
340110a4:	8888fff9 	.word	0x8888fff9

340110a8 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>:
{
340110a8:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340110aa:	b130      	cbz	r0, 340110ba <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340110ac:	2902      	cmp	r1, #2
340110ae:	d906      	bls.n	340110be <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x16>
340110b0:	f241 214a 	movw	r1, #4682	@ 0x124a
340110b4:	4807      	ldr	r0, [pc, #28]	@ (340110d4 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x2c>)
340110b6:	f00c fc67 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340110ba:	2001      	movs	r0, #1
}
340110bc:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340110be:	2901      	cmp	r1, #1
340110c0:	d1fb      	bne.n	340110ba <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x12>
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
340110c2:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340110c4:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
340110c6:	f8d2 3870 	ldr.w	r3, [r2, #2160]	@ 0x870
340110ca:	f043 0301 	orr.w	r3, r3, #1
340110ce:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  return HAL_OK;
340110d2:	e7f3      	b.n	340110bc <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x14>
340110d4:	3402678a 	.word	0x3402678a

340110d8 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>:
{
340110d8:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340110da:	b130      	cbz	r0, 340110ea <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340110dc:	2902      	cmp	r1, #2
340110de:	d906      	bls.n	340110ee <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x16>
340110e0:	f241 2167 	movw	r1, #4711	@ 0x1267
340110e4:	4807      	ldr	r0, [pc, #28]	@ (34011104 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x2c>)
340110e6:	f00c fc4f 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340110ea:	2001      	movs	r0, #1
}
340110ec:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340110ee:	2901      	cmp	r1, #1
340110f0:	d1fb      	bne.n	340110ea <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
340110f2:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340110f4:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
340110f6:	f8d2 3870 	ldr.w	r3, [r2, #2160]	@ 0x870
340110fa:	f023 0301 	bic.w	r3, r3, #1
340110fe:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  return HAL_OK;
34011102:	e7f3      	b.n	340110ec <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x14>
34011104:	3402678a 	.word	0x3402678a

34011108 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>:
{
34011108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401110a:	460f      	mov	r7, r1
3401110c:	4615      	mov	r5, r2
3401110e:	461c      	mov	r4, r3
  if (hdcmipp == NULL)
34011110:	4606      	mov	r6, r0
34011112:	b908      	cbnz	r0, 34011118 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x10>
    return HAL_ERROR;
34011114:	2001      	movs	r0, #1
}
34011116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011118:	2902      	cmp	r1, #2
3401111a:	d904      	bls.n	34011126 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x1e>
3401111c:	f241 2189 	movw	r1, #4745	@ 0x1289
34011120:	480f      	ldr	r0, [pc, #60]	@ (34011160 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
34011122:	f00c fc31 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_NB_FIRST_LINES(NbFirstLines));
34011126:	2d07      	cmp	r5, #7
34011128:	d904      	bls.n	34011134 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x2c>
3401112a:	f241 218a 	movw	r1, #4746	@ 0x128a
3401112e:	480c      	ldr	r0, [pc, #48]	@ (34011160 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
34011130:	f00c fc2a 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_NB_LAST_LINES(NbLastLines));
34011134:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
34011138:	d304      	bcc.n	34011144 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x3c>
3401113a:	f241 218b 	movw	r1, #4747	@ 0x128b
3401113e:	4808      	ldr	r0, [pc, #32]	@ (34011160 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
34011140:	f00c fc22 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011144:	2f01      	cmp	r7, #1
34011146:	d1e5      	bne.n	34011114 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0xc>
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34011148:	6832      	ldr	r2, [r6, #0]
    p1srcr_reg = ((NbFirstLines << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos) | (NbLastLines << DCMIPP_P1SRCR_LASTLINE_Pos));
3401114a:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
3401114e:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
34011152:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
34011154:	f36f 030e 	bfc	r3, #0, #15
34011158:	431c      	orrs	r4, r3
3401115a:	f8c2 4820 	str.w	r4, [r2, #2080]	@ 0x820
  return HAL_OK;
3401115e:	e7da      	b.n	34011116 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0xe>
34011160:	3402678a 	.word	0x3402678a

34011164 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>:
  if (hdcmipp == NULL)
34011164:	b150      	cbz	r0, 3401117c <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x18>
  if (Pipe == DCMIPP_PIPE1)
34011166:	2901      	cmp	r1, #1
34011168:	d108      	bne.n	3401117c <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x18>
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
3401116a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401116c:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
3401116e:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
34011172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34011176:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
3401117a:	4770      	bx	lr
    return HAL_ERROR;
3401117c:	2001      	movs	r0, #1
}
3401117e:	4770      	bx	lr

34011180 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>:
  if (hdcmipp == NULL)
34011180:	b150      	cbz	r0, 34011198 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x18>
  if (Pipe == DCMIPP_PIPE1)
34011182:	2901      	cmp	r1, #1
34011184:	d108      	bne.n	34011198 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x18>
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34011186:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011188:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
3401118a:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
3401118e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34011192:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
34011196:	4770      	bx	lr
    return HAL_ERROR;
34011198:	2001      	movs	r0, #1
}
3401119a:	4770      	bx	lr

3401119c <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>:
{
3401119c:	b570      	push	{r4, r5, r6, lr}
3401119e:	460e      	mov	r6, r1
340111a0:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
340111a2:	4605      	mov	r5, r0
340111a4:	b908      	cbnz	r0, 340111aa <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xe>
    return HAL_ERROR;
340111a6:	2001      	movs	r0, #1
}
340111a8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340111aa:	2902      	cmp	r1, #2
340111ac:	d918      	bls.n	340111e0 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x44>
340111ae:	f241 21ea 	movw	r1, #4842	@ 0x12ea
340111b2:	480d      	ldr	r0, [pc, #52]	@ (340111e8 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x4c>)
340111b4:	f00c fbe8 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
340111b8:	2c07      	cmp	r4, #7
340111ba:	d9f4      	bls.n	340111a6 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xa>
340111bc:	f241 21eb 	movw	r1, #4843	@ 0x12eb
340111c0:	4809      	ldr	r0, [pc, #36]	@ (340111e8 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x4c>)
340111c2:	f00c fbe1 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340111c6:	2e01      	cmp	r6, #1
340111c8:	d1ed      	bne.n	340111a6 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
340111ca:	6829      	ldr	r1, [r5, #0]
  return HAL_OK;
340111cc:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
340111ce:	f8d1 3824 	ldr.w	r3, [r1, #2084]	@ 0x824
340111d2:	f023 030e 	bic.w	r3, r3, #14
340111d6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
340111da:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824
  return HAL_OK;
340111de:	e7e3      	b.n	340111a8 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xc>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
340111e0:	2a07      	cmp	r2, #7
340111e2:	d9f0      	bls.n	340111c6 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x2a>
340111e4:	e7ea      	b.n	340111bc <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x20>
340111e6:	bf00      	nop
340111e8:	3402678a 	.word	0x3402678a

340111ec <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>:
{
340111ec:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340111ee:	b130      	cbz	r0, 340111fe <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340111f0:	2902      	cmp	r1, #2
340111f2:	d906      	bls.n	34011202 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x16>
340111f4:	f241 3108 	movw	r1, #4872	@ 0x1308
340111f8:	4807      	ldr	r0, [pc, #28]	@ (34011218 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x2c>)
340111fa:	f00c fbc5 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340111fe:	2001      	movs	r0, #1
}
34011200:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011202:	2901      	cmp	r1, #1
34011204:	d1fb      	bne.n	340111fe <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x12>
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34011206:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011208:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
3401120a:	f8d2 3824 	ldr.w	r3, [r2, #2084]	@ 0x824
3401120e:	f043 0301 	orr.w	r3, r3, #1
34011212:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  return HAL_OK;
34011216:	e7f3      	b.n	34011200 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x14>
34011218:	3402678a 	.word	0x3402678a

3401121c <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>:
{
3401121c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
3401121e:	b130      	cbz	r0, 3401122e <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011220:	2902      	cmp	r1, #2
34011222:	d906      	bls.n	34011232 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x16>
34011224:	f241 3125 	movw	r1, #4901	@ 0x1325
34011228:	4807      	ldr	r0, [pc, #28]	@ (34011248 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x2c>)
3401122a:	f00c fbad 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
3401122e:	2001      	movs	r0, #1
}
34011230:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011232:	2901      	cmp	r1, #1
34011234:	d1fb      	bne.n	3401122e <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34011236:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011238:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
3401123a:	f8d2 3824 	ldr.w	r3, [r2, #2084]	@ 0x824
3401123e:	f023 0301 	bic.w	r3, r3, #1
34011242:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  return HAL_OK;
34011246:	e7f3      	b.n	34011230 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x14>
34011248:	3402678a 	.word	0x3402678a

3401124c <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401124c:	2902      	cmp	r1, #2
{
3401124e:	b510      	push	{r4, lr}
34011250:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011252:	d904      	bls.n	3401125e <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x12>
34011254:	f241 313b 	movw	r1, #4923	@ 0x133b
34011258:	4804      	ldr	r0, [pc, #16]	@ (3401126c <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x20>)
3401125a:	f00c fb95 	bl	3401d988 <assert_failed>
  return (((READ_REG(hdcmipp->Instance->P1BPRCR)) & DCMIPP_P1BPRCR_STRENGTH) >> DCMIPP_P1BPRCR_STRENGTH_Pos);
3401125e:	6823      	ldr	r3, [r4, #0]
34011260:	f8d3 0824 	ldr.w	r0, [r3, #2084]	@ 0x824
}
34011264:	f3c0 0042 	ubfx	r0, r0, #1, #3
34011268:	bd10      	pop	{r4, pc}
3401126a:	bf00      	nop
3401126c:	3402678a 	.word	0x3402678a

34011270 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>:
{
34011270:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011272:	4a10      	ldr	r2, [pc, #64]	@ (340112b4 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x44>)
34011274:	6803      	ldr	r3, [r0, #0]
{
34011276:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011278:	4293      	cmp	r3, r2
{
3401127a:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3401127c:	d008      	beq.n	34011290 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x20>
3401127e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34011282:	4293      	cmp	r3, r2
34011284:	d004      	beq.n	34011290 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x20>
34011286:	f241 3148 	movw	r1, #4936	@ 0x1348
3401128a:	480b      	ldr	r0, [pc, #44]	@ (340112b8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x48>)
3401128c:	f00c fb7c 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011290:	2d02      	cmp	r5, #2
34011292:	d906      	bls.n	340112a2 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x32>
34011294:	f241 3149 	movw	r1, #4937	@ 0x1349
34011298:	4807      	ldr	r0, [pc, #28]	@ (340112b8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x48>)
3401129a:	f00c fb75 	bl	3401d988 <assert_failed>
    return 0;
3401129e:	2000      	movs	r0, #0
}
340112a0:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
340112a2:	2d01      	cmp	r5, #1
340112a4:	d1fb      	bne.n	3401129e <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE) == DCMIPP_P1BPRCR_ENABLE) ? 1U : 0U);
340112a6:	6823      	ldr	r3, [r4, #0]
340112a8:	f8d3 0824 	ldr.w	r0, [r3, #2084]	@ 0x824
340112ac:	f000 0001 	and.w	r0, r0, #1
340112b0:	e7f6      	b.n	340112a0 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x30>
340112b2:	bf00      	nop
340112b4:	58002000 	.word	0x58002000
340112b8:	3402678a 	.word	0x3402678a

340112bc <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>:
{
340112bc:	b538      	push	{r3, r4, r5, lr}
340112be:	4615      	mov	r5, r2
  if ((hdcmipp == NULL) || (pCounter == NULL))
340112c0:	4604      	mov	r4, r0
340112c2:	b908      	cbnz	r0, 340112c8 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0xc>
    return HAL_ERROR;
340112c4:	2001      	movs	r0, #1
}
340112c6:	bd38      	pop	{r3, r4, r5, pc}
  if ((hdcmipp == NULL) || (pCounter == NULL))
340112c8:	2a00      	cmp	r2, #0
340112ca:	d0fb      	beq.n	340112c4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x8>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340112cc:	2902      	cmp	r1, #2
340112ce:	d904      	bls.n	340112da <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x1e>
340112d0:	f241 3166 	movw	r1, #4966	@ 0x1366
340112d4:	4806      	ldr	r0, [pc, #24]	@ (340112f0 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x34>)
340112d6:	f00c fb57 	bl	3401d988 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
340112da:	7923      	ldrb	r3, [r4, #4]
340112dc:	2b02      	cmp	r3, #2
340112de:	d1f1      	bne.n	340112c4 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x8>
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
340112e0:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
340112e2:	2000      	movs	r0, #0
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
340112e4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
340112e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
340112ec:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340112ee:	e7ea      	b.n	340112c6 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0xa>
340112f0:	3402678a 	.word	0x3402678a

340112f4 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>:
{
340112f4:	b570      	push	{r4, r5, r6, lr}
340112f6:	460e      	mov	r6, r1
340112f8:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
340112fa:	4605      	mov	r5, r0
340112fc:	b908      	cbnz	r0, 34011302 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xe>
    return HAL_ERROR;
340112fe:	2001      	movs	r0, #1
}
34011300:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
34011302:	2a00      	cmp	r2, #0
34011304:	d0fb      	beq.n	340112fe <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011306:	2902      	cmp	r1, #2
34011308:	d904      	bls.n	34011314 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x20>
3401130a:	f241 4125 	movw	r1, #5157	@ 0x1425
3401130e:	4898      	ldr	r0, [pc, #608]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011310:	f00c fb3a 	bl	3401d988 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pColorConversionConfig->ClampOutputSamples));
34011314:	7823      	ldrb	r3, [r4, #0]
34011316:	2b01      	cmp	r3, #1
34011318:	d904      	bls.n	34011324 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x30>
3401131a:	f241 4126 	movw	r1, #5158	@ 0x1426
3401131e:	4894      	ldr	r0, [pc, #592]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011320:	f00c fb32 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_OUTPUT_SAMPLES_TYPES(pColorConversionConfig->OutputSamplesType));
34011324:	7863      	ldrb	r3, [r4, #1]
34011326:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
3401132a:	d004      	beq.n	34011336 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x42>
3401132c:	f241 4127 	movw	r1, #5159	@ 0x1427
34011330:	488f      	ldr	r0, [pc, #572]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011332:	f00c fb29 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RR));
34011336:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
3401133a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401133e:	db04      	blt.n	3401134a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x56>
34011340:	f241 4128 	movw	r1, #5160	@ 0x1428
34011344:	488a      	ldr	r0, [pc, #552]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011346:	f00c fb1f 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RG));
3401134a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
3401134e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34011352:	db04      	blt.n	3401135e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6a>
34011354:	f241 4129 	movw	r1, #5161	@ 0x1429
34011358:	4885      	ldr	r0, [pc, #532]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401135a:	f00c fb15 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RB));
3401135e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
34011362:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34011366:	db04      	blt.n	34011372 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x7e>
34011368:	f241 412a 	movw	r1, #5162	@ 0x142a
3401136c:	4880      	ldr	r0, [pc, #512]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401136e:	f00c fb0b 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RA));
34011372:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
34011376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401137a:	db04      	blt.n	34011386 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x92>
3401137c:	f241 412b 	movw	r1, #5163	@ 0x142b
34011380:	487b      	ldr	r0, [pc, #492]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011382:	f00c fb01 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GR));
34011386:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
3401138a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401138e:	db04      	blt.n	3401139a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa6>
34011390:	f241 412c 	movw	r1, #5164	@ 0x142c
34011394:	4876      	ldr	r0, [pc, #472]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011396:	f00c faf7 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GG));
3401139a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401139e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340113a2:	db04      	blt.n	340113ae <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xba>
340113a4:	f241 412d 	movw	r1, #5165	@ 0x142d
340113a8:	4871      	ldr	r0, [pc, #452]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340113aa:	f00c faed 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GB));
340113ae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
340113b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340113b6:	db04      	blt.n	340113c2 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xce>
340113b8:	f241 412e 	movw	r1, #5166	@ 0x142e
340113bc:	486c      	ldr	r0, [pc, #432]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340113be:	f00c fae3 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GA));
340113c2:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
340113c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340113ca:	db04      	blt.n	340113d6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xe2>
340113cc:	f241 412f 	movw	r1, #5167	@ 0x142f
340113d0:	4867      	ldr	r0, [pc, #412]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340113d2:	f00c fad9 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BR));
340113d6:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
340113da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340113de:	db04      	blt.n	340113ea <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xf6>
340113e0:	f241 4130 	movw	r1, #5168	@ 0x1430
340113e4:	4862      	ldr	r0, [pc, #392]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340113e6:	f00c facf 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BG));
340113ea:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
340113ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340113f2:	db04      	blt.n	340113fe <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x10a>
340113f4:	f241 4131 	movw	r1, #5169	@ 0x1431
340113f8:	485d      	ldr	r0, [pc, #372]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340113fa:	f00c fac5 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BB));
340113fe:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
34011402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34011406:	db04      	blt.n	34011412 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x11e>
34011408:	f241 4132 	movw	r1, #5170	@ 0x1432
3401140c:	4858      	ldr	r0, [pc, #352]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401140e:	f00c fabb 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BA));
34011412:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
34011416:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401141a:	db04      	blt.n	34011426 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x132>
3401141c:	f241 4133 	movw	r1, #5171	@ 0x1433
34011420:	4853      	ldr	r0, [pc, #332]	@ (34011570 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34011422:	f00c fab1 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011426:	2e01      	cmp	r6, #1
34011428:	f47f af69 	bne.w	340112fe <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
3401142c:	682b      	ldr	r3, [r5, #0]
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
3401142e:	7820      	ldrb	r0, [r4, #0]
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34011430:	f8d3 1880 	ldr.w	r1, [r3, #2176]	@ 0x880
                 ((uint32_t)pColorConversionConfig->OutputSamplesType);
34011434:	7862      	ldrb	r2, [r4, #1]
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
34011436:	f021 0106 	bic.w	r1, r1, #6
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
3401143a:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
3401143e:	430a      	orrs	r2, r1
34011440:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
34011444:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
34011448:	b290      	uxth	r0, r2
3401144a:	f3c2 010a 	ubfx	r1, r2, #0, #11
3401144e:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
34011450:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
34011454:	bfb8      	it	lt
34011456:	4608      	movlt	r0, r1
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
34011458:	f3c2 050a 	ubfx	r5, r2, #0, #11
3401145c:	2a00      	cmp	r2, #0
3401145e:	b291      	uxth	r1, r2
34011460:	bfb8      	it	lt
34011462:	4629      	movlt	r1, r5
    MODIFY_REG(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR | DCMIPP_P1CCRR1_RG,
34011464:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
34011468:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
3401146c:	4302      	orrs	r2, r0
3401146e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34011472:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
34011476:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
3401147a:	b295      	uxth	r5, r2
3401147c:	f3c2 010a 	ubfx	r1, r2, #0, #11
34011480:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
34011482:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
34011486:	bfb8      	it	lt
34011488:	460d      	movlt	r5, r1
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
3401148a:	f3c2 0109 	ubfx	r1, r2, #0, #10
3401148e:	2a00      	cmp	r2, #0
34011490:	b290      	uxth	r0, r2
34011492:	bfb8      	it	lt
34011494:	4608      	movlt	r0, r1
    MODIFY_REG(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB | DCMIPP_P1CCRR2_RA,
34011496:	f8d3 2888 	ldr.w	r2, [r3, #2184]	@ 0x888
3401149a:	4936      	ldr	r1, [pc, #216]	@ (34011574 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x280>)
3401149c:	400a      	ands	r2, r1
3401149e:	432a      	orrs	r2, r5
340114a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340114a4:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
340114a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
340114ac:	b295      	uxth	r5, r2
340114ae:	f3c2 000a 	ubfx	r0, r2, #0, #11
340114b2:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
340114b4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
340114b8:	bfb8      	it	lt
340114ba:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
340114bc:	f3c2 060a 	ubfx	r6, r2, #0, #11
340114c0:	2a00      	cmp	r2, #0
340114c2:	b290      	uxth	r0, r2
340114c4:	bfb8      	it	lt
340114c6:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR | DCMIPP_P1CCGR1_GG,
340114c8:	f8d3 288c 	ldr.w	r2, [r3, #2188]	@ 0x88c
340114cc:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
340114d0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
340114d4:	4302      	orrs	r2, r0
340114d6:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
340114da:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
340114de:	b295      	uxth	r5, r2
340114e0:	f3c2 000a 	ubfx	r0, r2, #0, #11
340114e4:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
340114e6:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
340114ea:	bfb8      	it	lt
340114ec:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
340114ee:	f3c2 0609 	ubfx	r6, r2, #0, #10
340114f2:	2a00      	cmp	r2, #0
340114f4:	b290      	uxth	r0, r2
340114f6:	bfb8      	it	lt
340114f8:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB | DCMIPP_P1CCGR2_GA,
340114fa:	f8d3 2890 	ldr.w	r2, [r3, #2192]	@ 0x890
340114fe:	400a      	ands	r2, r1
34011500:	432a      	orrs	r2, r5
34011502:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34011506:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
3401150a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
3401150e:	b295      	uxth	r5, r2
34011510:	f3c2 000a 	ubfx	r0, r2, #0, #11
34011514:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
34011516:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
3401151a:	bfb8      	it	lt
3401151c:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
3401151e:	f3c2 060a 	ubfx	r6, r2, #0, #11
34011522:	2a00      	cmp	r2, #0
34011524:	b290      	uxth	r0, r2
34011526:	bfb8      	it	lt
34011528:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR | DCMIPP_P1CCBR1_BG,
3401152a:	f8d3 2894 	ldr.w	r2, [r3, #2196]	@ 0x894
3401152e:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
34011532:	432a      	orrs	r2, r5
34011534:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34011538:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
3401153c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
34011540:	f3c2 000a 	ubfx	r0, r2, #0, #11
34011544:	b295      	uxth	r5, r2
34011546:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
34011548:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
3401154c:	bfb8      	it	lt
3401154e:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
34011550:	f3c2 0409 	ubfx	r4, r2, #0, #10
34011554:	2a00      	cmp	r2, #0
34011556:	b290      	uxth	r0, r2
34011558:	bfb8      	it	lt
3401155a:	4620      	movlt	r0, r4
    MODIFY_REG(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB | DCMIPP_P1CCBR2_BA,
3401155c:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
34011560:	400a      	ands	r2, r1
34011562:	432a      	orrs	r2, r5
34011564:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34011568:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
  return HAL_OK;
3401156c:	2000      	movs	r0, #0
3401156e:	e6c7      	b.n	34011300 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xc>
34011570:	3402678a 	.word	0x3402678a
34011574:	fc00f800 	.word	0xfc00f800

34011578 <HAL_DCMIPP_PIPE_EnableISPColorConversion>:
{
34011578:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
3401157a:	b130      	cbz	r0, 3401158a <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401157c:	2902      	cmp	r1, #2
3401157e:	d906      	bls.n	3401158e <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x16>
34011580:	f241 417b 	movw	r1, #5243	@ 0x147b
34011584:	4807      	ldr	r0, [pc, #28]	@ (340115a4 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x2c>)
34011586:	f00c f9ff 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
3401158a:	2001      	movs	r0, #1
}
3401158c:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
3401158e:	2901      	cmp	r1, #1
34011590:	d1fb      	bne.n	3401158a <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x12>
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
34011592:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011594:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
34011596:	f8d2 3880 	ldr.w	r3, [r2, #2176]	@ 0x880
3401159a:	f043 0301 	orr.w	r3, r3, #1
3401159e:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
  return HAL_OK;
340115a2:	e7f3      	b.n	3401158c <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x14>
340115a4:	3402678a 	.word	0x3402678a

340115a8 <HAL_DCMIPP_PIPE_DisableISPColorConversion>:
{
340115a8:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340115aa:	b130      	cbz	r0, 340115ba <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340115ac:	2902      	cmp	r1, #2
340115ae:	d906      	bls.n	340115be <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x16>
340115b0:	f241 4197 	movw	r1, #5271	@ 0x1497
340115b4:	4807      	ldr	r0, [pc, #28]	@ (340115d4 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x2c>)
340115b6:	f00c f9e7 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340115ba:	2001      	movs	r0, #1
}
340115bc:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340115be:	2901      	cmp	r1, #1
340115c0:	d1fb      	bne.n	340115ba <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
340115c2:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340115c4:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
340115c6:	f8d2 3880 	ldr.w	r3, [r2, #2176]	@ 0x880
340115ca:	f023 0301 	bic.w	r3, r3, #1
340115ce:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
  return HAL_OK;
340115d2:	e7f3      	b.n	340115bc <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x14>
340115d4:	3402678a 	.word	0x3402678a

340115d8 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>:
{
340115d8:	b510      	push	{r4, lr}
  if ((hdcmipp == NULL) || (pBlackLevelConfig == NULL))
340115da:	b100      	cbz	r0, 340115de <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
340115dc:	b90a      	cbnz	r2, 340115e2 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0xa>
    return HAL_ERROR;
340115de:	2001      	movs	r0, #1
}
340115e0:	bd10      	pop	{r4, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340115e2:	2902      	cmp	r1, #2
340115e4:	d905      	bls.n	340115f2 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x1a>
340115e6:	f241 515b 	movw	r1, #5467	@ 0x155b
340115ea:	480b      	ldr	r0, [pc, #44]	@ (34011618 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x40>)
340115ec:	f00c f9cc 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340115f0:	e7f5      	b.n	340115de <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
340115f2:	2901      	cmp	r1, #1
340115f4:	d1f3      	bne.n	340115de <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
    MODIFY_REG(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_BLCR | DCMIPP_P1BLCCR_BLCG | DCMIPP_P1BLCCR_BLCB,
340115f6:	6800      	ldr	r0, [r0, #0]
340115f8:	7853      	ldrb	r3, [r2, #1]
340115fa:	7814      	ldrb	r4, [r2, #0]
340115fc:	f8d0 1840 	ldr.w	r1, [r0, #2112]	@ 0x840
34011600:	7892      	ldrb	r2, [r2, #2]
34011602:	041b      	lsls	r3, r3, #16
34011604:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34011608:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
3401160c:	b2ca      	uxtb	r2, r1
3401160e:	4313      	orrs	r3, r2
34011610:	f8c0 3840 	str.w	r3, [r0, #2112]	@ 0x840
  return HAL_OK;
34011614:	2000      	movs	r0, #0
34011616:	e7e3      	b.n	340115e0 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x8>
34011618:	3402678a 	.word	0x3402678a

3401161c <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>:
{
3401161c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
3401161e:	b130      	cbz	r0, 3401162e <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011620:	2902      	cmp	r1, #2
34011622:	d906      	bls.n	34011632 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x16>
34011624:	f241 517a 	movw	r1, #5498	@ 0x157a
34011628:	4807      	ldr	r0, [pc, #28]	@ (34011648 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x2c>)
3401162a:	f00c f9ad 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
3401162e:	2001      	movs	r0, #1
}
34011630:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011632:	2901      	cmp	r1, #1
34011634:	d1fb      	bne.n	3401162e <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x12>
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34011636:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011638:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
3401163a:	f8d2 3840 	ldr.w	r3, [r2, #2112]	@ 0x840
3401163e:	f043 0301 	orr.w	r3, r3, #1
34011642:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840
  return HAL_OK;
34011646:	e7f3      	b.n	34011630 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x14>
34011648:	3402678a 	.word	0x3402678a

3401164c <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>:
{
3401164c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
3401164e:	b130      	cbz	r0, 3401165e <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011650:	2902      	cmp	r1, #2
34011652:	d906      	bls.n	34011662 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x16>
34011654:	f241 5196 	movw	r1, #5526	@ 0x1596
34011658:	4807      	ldr	r0, [pc, #28]	@ (34011678 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x2c>)
3401165a:	f00c f995 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
3401165e:	2001      	movs	r0, #1
}
34011660:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011662:	2901      	cmp	r1, #1
34011664:	d1fb      	bne.n	3401165e <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
34011666:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011668:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
3401166a:	f8d2 3840 	ldr.w	r3, [r2, #2112]	@ 0x840
3401166e:	f023 0301 	bic.w	r3, r3, #1
34011672:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840
  return HAL_OK;
34011676:	e7f3      	b.n	34011660 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x14>
34011678:	3402678a 	.word	0x3402678a

3401167c <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401167c:	2902      	cmp	r1, #2
3401167e:	d904      	bls.n	3401168a <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0xe>
34011680:	f241 51b0 	movw	r1, #5552	@ 0x15b0
34011684:	4807      	ldr	r0, [pc, #28]	@ (340116a4 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x28>)
34011686:	f00c b97f 	b.w	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401168a:	2901      	cmp	r1, #1
3401168c:	d108      	bne.n	340116a0 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x24>
    p1blccr_reg = READ_REG(hdcmipp->Instance->P1BLCCR);
3401168e:	6803      	ldr	r3, [r0, #0]
34011690:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
    pBlackLevelConfig->BlueCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCB) >> DCMIPP_P1BLCCR_BLCB_Pos);
34011694:	0a19      	lsrs	r1, r3, #8
34011696:	7091      	strb	r1, [r2, #2]
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
34011698:	0c19      	lsrs	r1, r3, #16
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
3401169a:	0e1b      	lsrs	r3, r3, #24
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
3401169c:	7051      	strb	r1, [r2, #1]
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
3401169e:	7013      	strb	r3, [r2, #0]
}
340116a0:	4770      	bx	lr
340116a2:	bf00      	nop
340116a4:	3402678a 	.word	0x3402678a

340116a8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>:
{
340116a8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340116aa:	4a10      	ldr	r2, [pc, #64]	@ (340116ec <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x44>)
340116ac:	6803      	ldr	r3, [r0, #0]
{
340116ae:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340116b0:	4293      	cmp	r3, r2
{
340116b2:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340116b4:	d008      	beq.n	340116c8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x20>
340116b6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340116ba:	4293      	cmp	r3, r2
340116bc:	d004      	beq.n	340116c8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x20>
340116be:	f241 51c4 	movw	r1, #5572	@ 0x15c4
340116c2:	480b      	ldr	r0, [pc, #44]	@ (340116f0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x48>)
340116c4:	f00c f960 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340116c8:	2d02      	cmp	r5, #2
340116ca:	d906      	bls.n	340116da <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x32>
340116cc:	f241 51c5 	movw	r1, #5573	@ 0x15c5
340116d0:	4807      	ldr	r0, [pc, #28]	@ (340116f0 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x48>)
340116d2:	f00c f959 	bl	3401d988 <assert_failed>
    return 0;
340116d6:	2000      	movs	r0, #0
}
340116d8:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
340116da:	2d01      	cmp	r5, #1
340116dc:	d1fb      	bne.n	340116d6 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE) == DCMIPP_P1BLCCR_ENABLE) ? 1U : 0U);
340116de:	6823      	ldr	r3, [r4, #0]
340116e0:	f8d3 0840 	ldr.w	r0, [r3, #2112]	@ 0x840
340116e4:	f000 0001 	and.w	r0, r0, #1
340116e8:	e7f6      	b.n	340116d8 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x30>
340116ea:	bf00      	nop
340116ec:	58002000 	.word	0x58002000
340116f0:	3402678a 	.word	0x3402678a

340116f4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>:
{
340116f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340116f6:	460f      	mov	r7, r1
340116f8:	4615      	mov	r5, r2
340116fa:	461c      	mov	r4, r3
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
340116fc:	4606      	mov	r6, r0
340116fe:	b908      	cbnz	r0, 34011704 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x10>
    return HAL_ERROR;
34011700:	2001      	movs	r0, #1
}
34011702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
34011704:	2b00      	cmp	r3, #0
34011706:	d0fb      	beq.n	34011700 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011708:	2902      	cmp	r1, #2
3401170a:	d904      	bls.n	34011716 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x22>
3401170c:	f241 51e9 	movw	r1, #5609	@ 0x15e9
34011710:	482a      	ldr	r0, [pc, #168]	@ (340117bc <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34011712:	f00c f939 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34011716:	1e6b      	subs	r3, r5, #1
34011718:	2b02      	cmp	r3, #2
3401171a:	d904      	bls.n	34011726 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x32>
3401171c:	f241 51ea 	movw	r1, #5610	@ 0x15ea
34011720:	4826      	ldr	r0, [pc, #152]	@ (340117bc <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34011722:	f00c f931 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_BINS(pStatisticExtractionConfig->Bins));
34011726:	68a3      	ldr	r3, [r4, #8]
34011728:	b16b      	cbz	r3, 34011746 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x52>
3401172a:	3b04      	subs	r3, #4
3401172c:	2b08      	cmp	r3, #8
3401172e:	d805      	bhi.n	3401173c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x48>
34011730:	f240 1211 	movw	r2, #273	@ 0x111
34011734:	fa22 f303 	lsr.w	r3, r2, r3
34011738:	07db      	lsls	r3, r3, #31
3401173a:	d404      	bmi.n	34011746 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x52>
3401173c:	f241 51eb 	movw	r1, #5611	@ 0x15eb
34011740:	481e      	ldr	r0, [pc, #120]	@ (340117bc <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34011742:	f00c f921 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_SOURCE(pStatisticExtractionConfig->Source));
34011746:	6863      	ldr	r3, [r4, #4]
34011748:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3401174c:	d006      	beq.n	3401175c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x68>
3401174e:	2b40      	cmp	r3, #64	@ 0x40
34011750:	d004      	beq.n	3401175c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x68>
34011752:	f241 51ec 	movw	r1, #5612	@ 0x15ec
34011756:	4819      	ldr	r0, [pc, #100]	@ (340117bc <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34011758:	f00c f916 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODE(pStatisticExtractionConfig->Mode));
3401175c:	6823      	ldr	r3, [r4, #0]
3401175e:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
34011762:	d004      	beq.n	3401176e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x7a>
34011764:	f241 51ed 	movw	r1, #5613	@ 0x15ed
34011768:	4814      	ldr	r0, [pc, #80]	@ (340117bc <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
3401176a:	f00c f90d 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401176e:	2f01      	cmp	r7, #1
34011770:	d1c6      	bne.n	34011700 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc>
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
34011772:	e9d4 3200 	ldrd	r3, r2, [r4]
34011776:	4313      	orrs	r3, r2
34011778:	68a2      	ldr	r2, [r4, #8]
    switch (ModuleID)
3401177a:	2d01      	cmp	r5, #1
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
3401177c:	6831      	ldr	r1, [r6, #0]
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
3401177e:	ea43 0302 	orr.w	r3, r3, r2
    switch (ModuleID)
34011782:	d009      	beq.n	34011798 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa4>
34011784:	2d02      	cmp	r5, #2
34011786:	d010      	beq.n	340117aa <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb6>
        MODIFY_REG(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_BINS | DCMIPP_P1ST3CR_SRC | \
34011788:	f8d1 2858 	ldr.w	r2, [r1, #2136]	@ 0x858
3401178c:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
34011790:	4313      	orrs	r3, r2
34011792:	f8c1 3858 	str.w	r3, [r1, #2136]	@ 0x858
        break;
34011796:	e006      	b.n	340117a6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb2>
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
34011798:	f8d1 2850 	ldr.w	r2, [r1, #2128]	@ 0x850
3401179c:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
340117a0:	4313      	orrs	r3, r2
340117a2:	f8c1 3850 	str.w	r3, [r1, #2128]	@ 0x850
  return HAL_OK;
340117a6:	2000      	movs	r0, #0
340117a8:	e7ab      	b.n	34011702 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xe>
        MODIFY_REG(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_BINS | DCMIPP_P1ST2CR_SRC | \
340117aa:	f8d1 2854 	ldr.w	r2, [r1, #2132]	@ 0x854
340117ae:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
340117b2:	4313      	orrs	r3, r2
340117b4:	f8c1 3854 	str.w	r3, [r1, #2132]	@ 0x854
        break;
340117b8:	e7f5      	b.n	340117a6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb2>
340117ba:	bf00      	nop
340117bc:	3402678a 	.word	0x3402678a

340117c0 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>:
{
340117c0:	b570      	push	{r4, r5, r6, lr}
340117c2:	460e      	mov	r6, r1
340117c4:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
340117c6:	4605      	mov	r5, r0
340117c8:	b908      	cbnz	r0, 340117ce <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe>
    return HAL_ERROR;
340117ca:	2001      	movs	r0, #1
}
340117cc:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
340117ce:	2a00      	cmp	r2, #0
340117d0:	d0fb      	beq.n	340117ca <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340117d2:	2902      	cmp	r1, #2
340117d4:	d904      	bls.n	340117e0 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x20>
340117d6:	f241 611f 	movw	r1, #5663	@ 0x161f
340117da:	4821      	ldr	r0, [pc, #132]	@ (34011860 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
340117dc:	f00c f8d4 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->HStart));
340117e0:	6863      	ldr	r3, [r4, #4]
340117e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340117e6:	d304      	bcc.n	340117f2 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x32>
340117e8:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
340117ec:	481c      	ldr	r0, [pc, #112]	@ (34011860 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
340117ee:	f00c f8cb 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->VStart));
340117f2:	6823      	ldr	r3, [r4, #0]
340117f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340117f8:	d304      	bcc.n	34011804 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x44>
340117fa:	f241 6121 	movw	r1, #5665	@ 0x1621
340117fe:	4818      	ldr	r0, [pc, #96]	@ (34011860 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34011800:	f00c f8c2 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->HSize));
34011804:	68e3      	ldr	r3, [r4, #12]
34011806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401180a:	d304      	bcc.n	34011816 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x56>
3401180c:	f241 6122 	movw	r1, #5666	@ 0x1622
34011810:	4813      	ldr	r0, [pc, #76]	@ (34011860 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34011812:	f00c f8b9 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->VSize));
34011816:	68a3      	ldr	r3, [r4, #8]
34011818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3401181c:	d304      	bcc.n	34011828 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x68>
3401181e:	f241 6123 	movw	r1, #5667	@ 0x1623
34011822:	480f      	ldr	r0, [pc, #60]	@ (34011860 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34011824:	f00c f8b0 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011828:	2e01      	cmp	r6, #1
3401182a:	d1ce      	bne.n	340117ca <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1STSTR, DCMIPP_P1STSTR_HSTART | DCMIPP_P1STSTR_VSTART,
3401182c:	e9d4 0300 	ldrd	r0, r3, [r4]
34011830:	682a      	ldr	r2, [r5, #0]
34011832:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011836:	f8d2 185c 	ldr.w	r1, [r2, #2140]	@ 0x85c
3401183a:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
3401183e:	430b      	orrs	r3, r1
34011840:	f8c2 385c 	str.w	r3, [r2, #2140]	@ 0x85c
    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
34011844:	f8d2 1860 	ldr.w	r1, [r2, #2144]	@ 0x860
34011848:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
3401184c:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011850:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011854:	430b      	orrs	r3, r1
  return HAL_OK;
34011856:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
34011858:	f8c2 3860 	str.w	r3, [r2, #2144]	@ 0x860
  return HAL_OK;
3401185c:	e7b6      	b.n	340117cc <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xc>
3401185e:	bf00      	nop
34011860:	3402678a 	.word	0x3402678a

34011864 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>:
{
34011864:	b570      	push	{r4, r5, r6, lr}
34011866:	460e      	mov	r6, r1
34011868:	4615      	mov	r5, r2
  if (hdcmipp == NULL)
3401186a:	4604      	mov	r4, r0
3401186c:	b908      	cbnz	r0, 34011872 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xe>
    return HAL_ERROR;
3401186e:	2001      	movs	r0, #1
}
34011870:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011872:	2902      	cmp	r1, #2
34011874:	d904      	bls.n	34011880 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x1c>
34011876:	f241 6147 	movw	r1, #5703	@ 0x1647
3401187a:	4815      	ldr	r0, [pc, #84]	@ (340118d0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>)
3401187c:	f00c f884 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34011880:	1e6b      	subs	r3, r5, #1
34011882:	2b02      	cmp	r3, #2
34011884:	d90e      	bls.n	340118a4 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x40>
34011886:	f241 6148 	movw	r1, #5704	@ 0x1648
3401188a:	4811      	ldr	r0, [pc, #68]	@ (340118d0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>)
3401188c:	f00c f87c 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011890:	2e01      	cmp	r6, #1
34011892:	d1ec      	bne.n	3401186e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa>
        SET_BIT(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_ENABLE);
34011894:	6822      	ldr	r2, [r4, #0]
34011896:	f8d2 3858 	ldr.w	r3, [r2, #2136]	@ 0x858
3401189a:	f043 0301 	orr.w	r3, r3, #1
3401189e:	f8c2 3858 	str.w	r3, [r2, #2136]	@ 0x858
        break;
340118a2:	e013      	b.n	340118cc <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x68>
  if (Pipe == DCMIPP_PIPE1)
340118a4:	2e01      	cmp	r6, #1
340118a6:	d1e2      	bne.n	3401186e <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa>
    switch (ModuleID)
340118a8:	2d01      	cmp	r5, #1
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
340118aa:	6823      	ldr	r3, [r4, #0]
    switch (ModuleID)
340118ac:	d008      	beq.n	340118c0 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x5c>
340118ae:	2d02      	cmp	r5, #2
340118b0:	d1f0      	bne.n	34011894 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x30>
        SET_BIT(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_ENABLE);
340118b2:	f8d3 2854 	ldr.w	r2, [r3, #2132]	@ 0x854
340118b6:	f042 0201 	orr.w	r2, r2, #1
340118ba:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
        break;
340118be:	e005      	b.n	340118cc <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x68>
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
340118c0:	f8d3 2850 	ldr.w	r2, [r3, #2128]	@ 0x850
340118c4:	f042 0201 	orr.w	r2, r2, #1
340118c8:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
  return HAL_OK;
340118cc:	2000      	movs	r0, #0
340118ce:	e7cf      	b.n	34011870 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xc>
340118d0:	3402678a 	.word	0x3402678a

340118d4 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>:
{
340118d4:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340118d6:	b130      	cbz	r0, 340118e6 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340118d8:	2902      	cmp	r1, #2
340118da:	d906      	bls.n	340118ea <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x16>
340118dc:	f241 619f 	movw	r1, #5791	@ 0x169f
340118e0:	4807      	ldr	r0, [pc, #28]	@ (34011900 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x2c>)
340118e2:	f00c f851 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340118e6:	2001      	movs	r0, #1
}
340118e8:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340118ea:	2901      	cmp	r1, #1
340118ec:	d1fb      	bne.n	340118e6 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x12>
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
340118ee:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340118f0:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
340118f2:	f8d2 3860 	ldr.w	r3, [r2, #2144]	@ 0x860
340118f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
340118fa:	f8c2 3860 	str.w	r3, [r2, #2144]	@ 0x860
  return HAL_OK;
340118fe:	e7f3      	b.n	340118e8 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x14>
34011900:	3402678a 	.word	0x3402678a

34011904 <HAL_DCMIPP_PIPE_SetISPExposureConfig>:
{
34011904:	b570      	push	{r4, r5, r6, lr}
34011906:	460e      	mov	r6, r1
34011908:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
3401190a:	4605      	mov	r5, r0
3401190c:	b908      	cbnz	r0, 34011912 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xe>
    return HAL_ERROR;
3401190e:	2001      	movs	r0, #1
}
34011910:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
34011912:	2a00      	cmp	r2, #0
34011914:	d0fb      	beq.n	3401190e <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011916:	2902      	cmp	r1, #2
34011918:	d904      	bls.n	34011924 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x20>
3401191a:	f241 61db 	movw	r1, #5851	@ 0x16db
3401191e:	481c      	ldr	r0, [pc, #112]	@ (34011990 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011920:	f00c f832 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftRed));
34011924:	7823      	ldrb	r3, [r4, #0]
34011926:	2b07      	cmp	r3, #7
34011928:	d904      	bls.n	34011934 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x30>
3401192a:	f241 61dc 	movw	r1, #5852	@ 0x16dc
3401192e:	4818      	ldr	r0, [pc, #96]	@ (34011990 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011930:	f00c f82a 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftGreen));
34011934:	78a3      	ldrb	r3, [r4, #2]
34011936:	2b07      	cmp	r3, #7
34011938:	d904      	bls.n	34011944 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x40>
3401193a:	f241 61dd 	movw	r1, #5853	@ 0x16dd
3401193e:	4814      	ldr	r0, [pc, #80]	@ (34011990 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011940:	f00c f822 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftBlue));
34011944:	7923      	ldrb	r3, [r4, #4]
34011946:	2b07      	cmp	r3, #7
34011948:	d904      	bls.n	34011954 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x50>
3401194a:	f241 61de 	movw	r1, #5854	@ 0x16de
3401194e:	4810      	ldr	r0, [pc, #64]	@ (34011990 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34011950:	f00c f81a 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011954:	2e01      	cmp	r6, #1
34011956:	d1da      	bne.n	3401190e <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_SHFR | DCMIPP_P1EXCR1_MULTR,
34011958:	682a      	ldr	r2, [r5, #0]
3401195a:	7863      	ldrb	r3, [r4, #1]
3401195c:	7820      	ldrb	r0, [r4, #0]
3401195e:	f8d2 1844 	ldr.w	r1, [r2, #2116]	@ 0x844
34011962:	051b      	lsls	r3, r3, #20
34011964:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
34011968:	f36f 511e 	bfc	r1, #20, #11
3401196c:	430b      	orrs	r3, r1
3401196e:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
34011972:	78e3      	ldrb	r3, [r4, #3]
34011974:	78a1      	ldrb	r1, [r4, #2]
34011976:	051b      	lsls	r3, r3, #20
34011978:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
3401197c:	7921      	ldrb	r1, [r4, #4]
  return HAL_OK;
3401197e:	2000      	movs	r0, #0
    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
34011980:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
34011984:	7961      	ldrb	r1, [r4, #5]
34011986:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
3401198a:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
  return HAL_OK;
3401198e:	e7bf      	b.n	34011910 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xc>
34011990:	3402678a 	.word	0x3402678a

34011994 <HAL_DCMIPP_PIPE_EnableISPExposure>:
{
34011994:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011996:	b130      	cbz	r0, 340119a6 <HAL_DCMIPP_PIPE_EnableISPExposure+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011998:	2902      	cmp	r1, #2
3401199a:	d906      	bls.n	340119aa <HAL_DCMIPP_PIPE_EnableISPExposure+0x16>
3401199c:	f241 7101 	movw	r1, #5889	@ 0x1701
340119a0:	4807      	ldr	r0, [pc, #28]	@ (340119c0 <HAL_DCMIPP_PIPE_EnableISPExposure+0x2c>)
340119a2:	f00b fff1 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340119a6:	2001      	movs	r0, #1
}
340119a8:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340119aa:	2901      	cmp	r1, #1
340119ac:	d1fb      	bne.n	340119a6 <HAL_DCMIPP_PIPE_EnableISPExposure+0x12>
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
340119ae:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340119b0:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
340119b2:	f8d2 3844 	ldr.w	r3, [r2, #2116]	@ 0x844
340119b6:	f043 0301 	orr.w	r3, r3, #1
340119ba:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
  return HAL_OK;
340119be:	e7f3      	b.n	340119a8 <HAL_DCMIPP_PIPE_EnableISPExposure+0x14>
340119c0:	3402678a 	.word	0x3402678a

340119c4 <HAL_DCMIPP_PIPE_DisableISPExposure>:
{
340119c4:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340119c6:	b130      	cbz	r0, 340119d6 <HAL_DCMIPP_PIPE_DisableISPExposure+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340119c8:	2902      	cmp	r1, #2
340119ca:	d906      	bls.n	340119da <HAL_DCMIPP_PIPE_DisableISPExposure+0x16>
340119cc:	f241 711d 	movw	r1, #5917	@ 0x171d
340119d0:	4807      	ldr	r0, [pc, #28]	@ (340119f0 <HAL_DCMIPP_PIPE_DisableISPExposure+0x2c>)
340119d2:	f00b ffd9 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
340119d6:	2001      	movs	r0, #1
}
340119d8:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340119da:	2901      	cmp	r1, #1
340119dc:	d1fb      	bne.n	340119d6 <HAL_DCMIPP_PIPE_DisableISPExposure+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
340119de:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340119e0:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
340119e2:	f8d2 3844 	ldr.w	r3, [r2, #2116]	@ 0x844
340119e6:	f023 0301 	bic.w	r3, r3, #1
340119ea:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
  return HAL_OK;
340119ee:	e7f3      	b.n	340119d8 <HAL_DCMIPP_PIPE_DisableISPExposure+0x14>
340119f0:	3402678a 	.word	0x3402678a

340119f4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>:
{
340119f4:	b570      	push	{r4, r5, r6, lr}
340119f6:	460e      	mov	r6, r1
340119f8:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
340119fa:	4605      	mov	r5, r0
340119fc:	b908      	cbnz	r0, 34011a02 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xe>
    return HAL_ERROR;
340119fe:	2001      	movs	r0, #1
}
34011a00:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
34011a02:	2a00      	cmp	r2, #0
34011a04:	d0fb      	beq.n	340119fe <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011a06:	2902      	cmp	r1, #2
34011a08:	d904      	bls.n	34011a14 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x20>
34011a0a:	f241 713b 	movw	r1, #5947	@ 0x173b
34011a0e:	4839      	ldr	r0, [pc, #228]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a10:	f00b ffba 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_0));
34011a14:	7823      	ldrb	r3, [r4, #0]
34011a16:	2b3f      	cmp	r3, #63	@ 0x3f
34011a18:	d904      	bls.n	34011a24 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x30>
34011a1a:	f241 713c 	movw	r1, #5948	@ 0x173c
34011a1e:	4835      	ldr	r0, [pc, #212]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a20:	f00b ffb2 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_32));
34011a24:	7863      	ldrb	r3, [r4, #1]
34011a26:	2b3f      	cmp	r3, #63	@ 0x3f
34011a28:	d904      	bls.n	34011a34 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x40>
34011a2a:	f241 713d 	movw	r1, #5949	@ 0x173d
34011a2e:	4831      	ldr	r0, [pc, #196]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a30:	f00b ffaa 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_64));
34011a34:	78a3      	ldrb	r3, [r4, #2]
34011a36:	2b3f      	cmp	r3, #63	@ 0x3f
34011a38:	d904      	bls.n	34011a44 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x50>
34011a3a:	f241 713e 	movw	r1, #5950	@ 0x173e
34011a3e:	482d      	ldr	r0, [pc, #180]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a40:	f00b ffa2 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_96));
34011a44:	78e3      	ldrb	r3, [r4, #3]
34011a46:	2b3f      	cmp	r3, #63	@ 0x3f
34011a48:	d904      	bls.n	34011a54 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x60>
34011a4a:	f241 713f 	movw	r1, #5951	@ 0x173f
34011a4e:	4829      	ldr	r0, [pc, #164]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a50:	f00b ff9a 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_128));
34011a54:	7923      	ldrb	r3, [r4, #4]
34011a56:	2b3f      	cmp	r3, #63	@ 0x3f
34011a58:	d904      	bls.n	34011a64 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x70>
34011a5a:	f44f 51ba 	mov.w	r1, #5952	@ 0x1740
34011a5e:	4825      	ldr	r0, [pc, #148]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a60:	f00b ff92 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_160));
34011a64:	7963      	ldrb	r3, [r4, #5]
34011a66:	2b3f      	cmp	r3, #63	@ 0x3f
34011a68:	d904      	bls.n	34011a74 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x80>
34011a6a:	f241 7141 	movw	r1, #5953	@ 0x1741
34011a6e:	4821      	ldr	r0, [pc, #132]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a70:	f00b ff8a 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_192));
34011a74:	79a3      	ldrb	r3, [r4, #6]
34011a76:	2b3f      	cmp	r3, #63	@ 0x3f
34011a78:	d904      	bls.n	34011a84 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x90>
34011a7a:	f241 7142 	movw	r1, #5954	@ 0x1742
34011a7e:	481d      	ldr	r0, [pc, #116]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a80:	f00b ff82 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_224));
34011a84:	79e3      	ldrb	r3, [r4, #7]
34011a86:	2b3f      	cmp	r3, #63	@ 0x3f
34011a88:	d904      	bls.n	34011a94 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa0>
34011a8a:	f241 7143 	movw	r1, #5955	@ 0x1743
34011a8e:	4819      	ldr	r0, [pc, #100]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011a90:	f00b ff7a 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_256));
34011a94:	7a23      	ldrb	r3, [r4, #8]
34011a96:	2b3f      	cmp	r3, #63	@ 0x3f
34011a98:	d904      	bls.n	34011aa4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xb0>
34011a9a:	f241 7144 	movw	r1, #5956	@ 0x1744
34011a9e:	4815      	ldr	r0, [pc, #84]	@ (34011af4 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34011aa0:	f00b ff72 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011aa4:	2e01      	cmp	r6, #1
34011aa6:	d1aa      	bne.n	340119fe <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
34011aa8:	682a      	ldr	r2, [r5, #0]
34011aaa:	7821      	ldrb	r1, [r4, #0]
34011aac:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
34011ab0:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
34011ab2:	f423 43fc 	bic.w	r3, r3, #32256	@ 0x7e00
34011ab6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34011aba:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
    WRITE_REG(hdcmipp->Instance->P1CTCR2, (((uint32_t)pContrastConfig->LUM_32 << DCMIPP_P1CTCR2_LUM1_Pos) |
34011abe:	78a3      	ldrb	r3, [r4, #2]
34011ac0:	7861      	ldrb	r1, [r4, #1]
34011ac2:	045b      	lsls	r3, r3, #17
34011ac4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
34011ac8:	78e1      	ldrb	r1, [r4, #3]
34011aca:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34011ace:	7921      	ldrb	r1, [r4, #4]
34011ad0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
34011ad4:	f8c2 38a4 	str.w	r3, [r2, #2212]	@ 0x8a4
    WRITE_REG(hdcmipp->Instance->P1CTCR3, (((uint32_t)pContrastConfig->LUM_160 << DCMIPP_P1CTCR3_LUM5_Pos) |
34011ad8:	79a3      	ldrb	r3, [r4, #6]
34011ada:	7961      	ldrb	r1, [r4, #5]
34011adc:	045b      	lsls	r3, r3, #17
34011ade:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
34011ae2:	79e1      	ldrb	r1, [r4, #7]
34011ae4:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34011ae8:	7a21      	ldrb	r1, [r4, #8]
34011aea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
34011aee:	f8c2 38a8 	str.w	r3, [r2, #2216]	@ 0x8a8
  return HAL_OK;
34011af2:	e785      	b.n	34011a00 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xc>
34011af4:	3402678a 	.word	0x3402678a

34011af8 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>:
{
34011af8:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011afa:	b130      	cbz	r0, 34011b0a <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011afc:	2902      	cmp	r1, #2
34011afe:	d906      	bls.n	34011b0e <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x16>
34011b00:	f241 716c 	movw	r1, #5996	@ 0x176c
34011b04:	4807      	ldr	r0, [pc, #28]	@ (34011b24 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x2c>)
34011b06:	f00b ff3f 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34011b0a:	2001      	movs	r0, #1
}
34011b0c:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011b0e:	2901      	cmp	r1, #1
34011b10:	d1fb      	bne.n	34011b0a <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x12>
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34011b12:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011b14:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34011b16:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
34011b1a:	f043 0301 	orr.w	r3, r3, #1
34011b1e:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
34011b22:	e7f3      	b.n	34011b0c <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x14>
34011b24:	3402678a 	.word	0x3402678a

34011b28 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>:
{
34011b28:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34011b2a:	b130      	cbz	r0, 34011b3a <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011b2c:	2902      	cmp	r1, #2
34011b2e:	d906      	bls.n	34011b3e <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x16>
34011b30:	f241 7188 	movw	r1, #6024	@ 0x1788
34011b34:	4807      	ldr	r0, [pc, #28]	@ (34011b54 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x2c>)
34011b36:	f00b ff27 	bl	3401d988 <assert_failed>
    return HAL_ERROR;
34011b3a:	2001      	movs	r0, #1
}
34011b3c:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34011b3e:	2901      	cmp	r1, #1
34011b40:	d1fb      	bne.n	34011b3a <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34011b42:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34011b44:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34011b46:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
34011b4a:	f023 0301 	bic.w	r3, r3, #1
34011b4e:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
34011b52:	e7f3      	b.n	34011b3c <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x14>
34011b54:	3402678a 	.word	0x3402678a

34011b58 <HAL_DCMIPP_PIPE_SetPitch>:
{
34011b58:	b570      	push	{r4, r5, r6, lr}
34011b5a:	460e      	mov	r6, r1
34011b5c:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34011b5e:	4605      	mov	r5, r0
34011b60:	b908      	cbnz	r0, 34011b66 <HAL_DCMIPP_PIPE_SetPitch+0xe>
    return HAL_ERROR;
34011b62:	2001      	movs	r0, #1
}
34011b64:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011b66:	2902      	cmp	r1, #2
34011b68:	d904      	bls.n	34011b74 <HAL_DCMIPP_PIPE_SetPitch+0x1c>
34011b6a:	f241 71d2 	movw	r1, #6098	@ 0x17d2
34011b6e:	4812      	ldr	r0, [pc, #72]	@ (34011bb8 <HAL_DCMIPP_PIPE_SetPitch+0x60>)
34011b70:	f00b ff0a 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(LinePitch));
34011b74:	0723      	lsls	r3, r4, #28
34011b76:	d102      	bne.n	34011b7e <HAL_DCMIPP_PIPE_SetPitch+0x26>
34011b78:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
34011b7c:	d304      	bcc.n	34011b88 <HAL_DCMIPP_PIPE_SetPitch+0x30>
34011b7e:	f241 71d3 	movw	r1, #6099	@ 0x17d3
34011b82:	480d      	ldr	r0, [pc, #52]	@ (34011bb8 <HAL_DCMIPP_PIPE_SetPitch+0x60>)
34011b84:	f00b ff00 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011b88:	2e01      	cmp	r6, #1
34011b8a:	d109      	bne.n	34011ba0 <HAL_DCMIPP_PIPE_SetPitch+0x48>
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH, LinePitch << DCMIPP_P1PPM0PR_PITCH_Pos);
34011b8c:	682a      	ldr	r2, [r5, #0]
34011b8e:	f8d2 39cc 	ldr.w	r3, [r2, #2508]	@ 0x9cc
34011b92:	f36f 030e 	bfc	r3, #0, #15
34011b96:	4323      	orrs	r3, r4
34011b98:	f8c2 39cc 	str.w	r3, [r2, #2508]	@ 0x9cc
  return HAL_OK;
34011b9c:	2000      	movs	r0, #0
34011b9e:	e7e1      	b.n	34011b64 <HAL_DCMIPP_PIPE_SetPitch+0xc>
  else if (Pipe == DCMIPP_PIPE2)
34011ba0:	2e02      	cmp	r6, #2
34011ba2:	d1de      	bne.n	34011b62 <HAL_DCMIPP_PIPE_SetPitch+0xa>
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH, LinePitch << DCMIPP_P2PPM0PR_PITCH_Pos);
34011ba4:	682a      	ldr	r2, [r5, #0]
34011ba6:	f8d2 3dcc 	ldr.w	r3, [r2, #3532]	@ 0xdcc
34011baa:	f36f 030e 	bfc	r3, #0, #15
34011bae:	4323      	orrs	r3, r4
34011bb0:	f8c2 3dcc 	str.w	r3, [r2, #3532]	@ 0xdcc
34011bb4:	e7f2      	b.n	34011b9c <HAL_DCMIPP_PIPE_SetPitch+0x44>
34011bb6:	bf00      	nop
34011bb8:	3402678a 	.word	0x3402678a

34011bbc <HAL_DCMIPP_PIPE_SetPixelPackerFormat>:
{
34011bbc:	b570      	push	{r4, r5, r6, lr}
34011bbe:	460e      	mov	r6, r1
34011bc0:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34011bc2:	4605      	mov	r5, r0
34011bc4:	b908      	cbnz	r0, 34011bca <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xe>
    return HAL_ERROR;
34011bc6:	2001      	movs	r0, #1
}
34011bc8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011bca:	2902      	cmp	r1, #2
34011bcc:	d917      	bls.n	34011bfe <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x42>
34011bce:	f241 71f6 	movw	r1, #6134	@ 0x17f6
34011bd2:	4812      	ldr	r0, [pc, #72]	@ (34011c1c <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x60>)
34011bd4:	f00b fed8 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(PixelPackerFormat));
34011bd8:	2c09      	cmp	r4, #9
34011bda:	d9f4      	bls.n	34011bc6 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xa>
34011bdc:	f241 71f7 	movw	r1, #6135	@ 0x17f7
34011be0:	480e      	ldr	r0, [pc, #56]	@ (34011c1c <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x60>)
34011be2:	f00b fed1 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011be6:	2e01      	cmp	r6, #1
34011be8:	d10c      	bne.n	34011c04 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x48>
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, PixelPackerFormat);
34011bea:	682a      	ldr	r2, [r5, #0]
34011bec:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011bf0:	f023 030f 	bic.w	r3, r3, #15
34011bf4:	4323      	orrs	r3, r4
34011bf6:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34011bfa:	2000      	movs	r0, #0
34011bfc:	e7e4      	b.n	34011bc8 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xc>
  assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(PixelPackerFormat));
34011bfe:	2a09      	cmp	r2, #9
34011c00:	d9f1      	bls.n	34011be6 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x2a>
34011c02:	e7eb      	b.n	34011bdc <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x20>
  else if (Pipe == DCMIPP_PIPE2)
34011c04:	2e02      	cmp	r6, #2
34011c06:	d1de      	bne.n	34011bc6 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xa>
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, PixelPackerFormat);
34011c08:	682a      	ldr	r2, [r5, #0]
34011c0a:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011c0e:	f023 030f 	bic.w	r3, r3, #15
34011c12:	4323      	orrs	r3, r4
34011c14:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34011c18:	e7ef      	b.n	34011bfa <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x3e>
34011c1a:	bf00      	nop
34011c1c:	3402678a 	.word	0x3402678a

34011c20 <HAL_DCMIPP_PIPE_SetMemoryAddress>:
{
34011c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34011c22:	460d      	mov	r5, r1
34011c24:	4616      	mov	r6, r2
34011c26:	461c      	mov	r4, r3
  if (hdcmipp == NULL)
34011c28:	4607      	mov	r7, r0
34011c2a:	b908      	cbnz	r0, 34011c30 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x10>
    return HAL_ERROR;
34011c2c:	2001      	movs	r0, #1
}
34011c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011c30:	2902      	cmp	r1, #2
34011c32:	d912      	bls.n	34011c5a <HAL_DCMIPP_PIPE_SetMemoryAddress+0x3a>
34011c34:	f641 0165 	movw	r1, #6245	@ 0x1865
34011c38:	481a      	ldr	r0, [pc, #104]	@ (34011ca4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x84>)
34011c3a:	f00b fea5 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_MEMORY_ADDRESS(Memory));
34011c3e:	2e01      	cmp	r6, #1
34011c40:	d9f4      	bls.n	34011c2c <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
34011c42:	f641 0166 	movw	r1, #6246	@ 0x1866
34011c46:	4817      	ldr	r0, [pc, #92]	@ (34011ca4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x84>)
34011c48:	f00b fe9e 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE0)
34011c4c:	b175      	cbz	r5, 34011c6c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x4c>
  else if (Pipe == DCMIPP_PIPE1)
34011c4e:	2d01      	cmp	r5, #1
34011c50:	d11a      	bne.n	34011c88 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x68>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011c52:	683a      	ldr	r2, [r7, #0]
      WRITE_REG(hdcmipp->Instance->P1PPM0AR2, DstAddress);
34011c54:	f8c2 49c8 	str.w	r4, [r2, #2504]	@ 0x9c8
34011c58:	e006      	b.n	34011c68 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  assert_param(IS_DCMIPP_MEMORY_ADDRESS(Memory));
34011c5a:	2a01      	cmp	r2, #1
34011c5c:	d8f1      	bhi.n	34011c42 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x22>
  if (Pipe == DCMIPP_PIPE0)
34011c5e:	6803      	ldr	r3, [r0, #0]
34011c60:	b9c1      	cbnz	r1, 34011c94 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x74>
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34011c62:	b91a      	cbnz	r2, 34011c6c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x4c>
      WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
34011c64:	f8c3 45c4 	str.w	r4, [r3, #1476]	@ 0x5c4
  return HAL_OK;
34011c68:	2000      	movs	r0, #0
34011c6a:	e7e0      	b.n	34011c2e <HAL_DCMIPP_PIPE_SetMemoryAddress+0xe>
      if ((hdcmipp->Instance->P0PPCR & DCMIPP_P0PPCR_DBM) == DCMIPP_P0PPCR_DBM)
34011c6c:	683b      	ldr	r3, [r7, #0]
34011c6e:	f8d3 25c0 	ldr.w	r2, [r3, #1472]	@ 0x5c0
34011c72:	03d2      	lsls	r2, r2, #15
34011c74:	d5da      	bpl.n	34011c2c <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
        WRITE_REG(hdcmipp->Instance->P0PPM0AR2, DstAddress);
34011c76:	f8c3 45c8 	str.w	r4, [r3, #1480]	@ 0x5c8
34011c7a:	e7f5      	b.n	34011c68 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011c7c:	461a      	mov	r2, r3
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34011c7e:	2e00      	cmp	r6, #0
34011c80:	d1e8      	bne.n	34011c54 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x34>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011c82:	f8c3 49c4 	str.w	r4, [r3, #2500]	@ 0x9c4
34011c86:	e7ef      	b.n	34011c68 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  else if (Pipe == DCMIPP_PIPE2)
34011c88:	2d02      	cmp	r5, #2
34011c8a:	d1cf      	bne.n	34011c2c <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011c8c:	683a      	ldr	r2, [r7, #0]
      WRITE_REG(hdcmipp->Instance->P2PPM0AR2, DstAddress);
34011c8e:	f8c2 4dc8 	str.w	r4, [r2, #3528]	@ 0xdc8
34011c92:	e7e9      	b.n	34011c68 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  else if (Pipe == DCMIPP_PIPE1)
34011c94:	2901      	cmp	r1, #1
34011c96:	d0f1      	beq.n	34011c7c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x5c>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34011c98:	461a      	mov	r2, r3
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34011c9a:	2e00      	cmp	r6, #0
34011c9c:	d1f7      	bne.n	34011c8e <HAL_DCMIPP_PIPE_SetMemoryAddress+0x6e>
      WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
34011c9e:	f8c3 4dc4 	str.w	r4, [r3, #3524]	@ 0xdc4
34011ca2:	e7e1      	b.n	34011c68 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
34011ca4:	3402678a 	.word	0x3402678a

34011ca8 <HAL_DCMIPP_PIPE_EnableRedBlueSwap>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011ca8:	2902      	cmp	r1, #2
{
34011caa:	b538      	push	{r3, r4, r5, lr}
34011cac:	4604      	mov	r4, r0
34011cae:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011cb0:	d904      	bls.n	34011cbc <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x14>
34011cb2:	f641 1139 	movw	r1, #6457	@ 0x1939
34011cb6:	480f      	ldr	r0, [pc, #60]	@ (34011cf4 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x4c>)
34011cb8:	f00b fe66 	bl	3401d988 <assert_failed>
  if (hdcmipp == NULL)
34011cbc:	b1bc      	cbz	r4, 34011cee <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x46>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011cbe:	7923      	ldrb	r3, [r4, #4]
34011cc0:	2b02      	cmp	r3, #2
34011cc2:	d108      	bne.n	34011cd6 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x2e>
    if (Pipe == DCMIPP_PIPE1)
34011cc4:	2d01      	cmp	r5, #1
34011cc6:	d108      	bne.n	34011cda <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x32>
      SET_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_SWAPRB);
34011cc8:	6822      	ldr	r2, [r4, #0]
34011cca:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011cce:	f043 0310 	orr.w	r3, r3, #16
34011cd2:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34011cd6:	2000      	movs	r0, #0
}
34011cd8:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE2)
34011cda:	2d02      	cmp	r5, #2
34011cdc:	d107      	bne.n	34011cee <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x46>
      SET_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_SWAPRB);
34011cde:	6822      	ldr	r2, [r4, #0]
34011ce0:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011ce4:	f043 0310 	orr.w	r3, r3, #16
34011ce8:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34011cec:	e7f3      	b.n	34011cd6 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x2e>
    return HAL_ERROR;
34011cee:	2001      	movs	r0, #1
34011cf0:	e7f2      	b.n	34011cd8 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x30>
34011cf2:	bf00      	nop
34011cf4:	3402678a 	.word	0x3402678a

34011cf8 <HAL_DCMIPP_PIPE_DisableRedBlueSwap>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011cf8:	2902      	cmp	r1, #2
{
34011cfa:	b538      	push	{r3, r4, r5, lr}
34011cfc:	4604      	mov	r4, r0
34011cfe:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d00:	d904      	bls.n	34011d0c <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x14>
34011d02:	f641 115b 	movw	r1, #6491	@ 0x195b
34011d06:	480f      	ldr	r0, [pc, #60]	@ (34011d44 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x4c>)
34011d08:	f00b fe3e 	bl	3401d988 <assert_failed>
  if (hdcmipp == NULL)
34011d0c:	b1bc      	cbz	r4, 34011d3e <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x46>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011d0e:	7923      	ldrb	r3, [r4, #4]
34011d10:	2b02      	cmp	r3, #2
34011d12:	d108      	bne.n	34011d26 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x2e>
    if (Pipe == DCMIPP_PIPE1)
34011d14:	2d01      	cmp	r5, #1
34011d16:	d108      	bne.n	34011d2a <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x32>
      CLEAR_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_SWAPRB);
34011d18:	6822      	ldr	r2, [r4, #0]
34011d1a:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34011d1e:	f023 0310 	bic.w	r3, r3, #16
34011d22:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34011d26:	2000      	movs	r0, #0
}
34011d28:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE2)
34011d2a:	2d02      	cmp	r5, #2
34011d2c:	d107      	bne.n	34011d3e <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x46>
      CLEAR_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_SWAPRB);
34011d2e:	6822      	ldr	r2, [r4, #0]
34011d30:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34011d34:	f023 0310 	bic.w	r3, r3, #16
34011d38:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34011d3c:	e7f3      	b.n	34011d26 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x2e>
    return HAL_ERROR;
34011d3e:	2001      	movs	r0, #1
34011d40:	e7f2      	b.n	34011d28 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x30>
34011d42:	bf00      	nop
34011d44:	3402678a 	.word	0x3402678a

34011d48 <HAL_DCMIPP_PIPE_CSI_EnableShare>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d48:	2902      	cmp	r1, #2
{
34011d4a:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d4c:	d906      	bls.n	34011d5c <HAL_DCMIPP_PIPE_CSI_EnableShare+0x14>
34011d4e:	f641 217d 	movw	r1, #6781	@ 0x1a7d
34011d52:	480a      	ldr	r0, [pc, #40]	@ (34011d7c <HAL_DCMIPP_PIPE_CSI_EnableShare+0x34>)
34011d54:	f00b fe18 	bl	3401d988 <assert_failed>
      return HAL_ERROR;
34011d58:	2001      	movs	r0, #1
}
34011d5a:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE2)
34011d5c:	d1fc      	bne.n	34011d58 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x10>
    tmp1 = hdcmipp->Instance->P2FSCR;
34011d5e:	6803      	ldr	r3, [r0, #0]
34011d60:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
    tmp2 = hdcmipp->Instance->P1FSCR;
34011d64:	f8d3 1804 	ldr.w	r1, [r3, #2052]	@ 0x804
    if (((tmp1 & DCMIPP_P2FSCR_PIPEN) == DCMIPP_P2FSCR_PIPEN) || ((tmp2 & DCMIPP_P1FSCR_PIPEN) == DCMIPP_P1FSCR_PIPEN))
34011d68:	430a      	orrs	r2, r1
34011d6a:	d4f5      	bmi.n	34011d58 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x10>
      CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEDIFF);
34011d6c:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
  return HAL_OK;
34011d70:	2000      	movs	r0, #0
      CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEDIFF);
34011d72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
34011d76:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  return HAL_OK;
34011d7a:	e7ee      	b.n	34011d5a <HAL_DCMIPP_PIPE_CSI_EnableShare+0x12>
34011d7c:	3402678a 	.word	0x3402678a

34011d80 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>:
{
34011d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34011d82:	460e      	mov	r6, r1
34011d84:	4615      	mov	r5, r2
34011d86:	461c      	mov	r4, r3
  if ((hdcmipp == NULL) || (pCounter == NULL))
34011d88:	4607      	mov	r7, r0
34011d8a:	b908      	cbnz	r0, 34011d90 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x10>
    return HAL_ERROR;
34011d8c:	2001      	movs	r0, #1
}
34011d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pCounter == NULL))
34011d90:	2b00      	cmp	r3, #0
34011d92:	d0fb      	beq.n	34011d8c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d94:	2902      	cmp	r1, #2
34011d96:	d904      	bls.n	34011da2 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x22>
34011d98:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
34011d9c:	4810      	ldr	r0, [pc, #64]	@ (34011de0 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x60>)
34011d9e:	f00b fdf3 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34011da2:	1e6b      	subs	r3, r5, #1
34011da4:	2b02      	cmp	r3, #2
34011da6:	d908      	bls.n	34011dba <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3a>
34011da8:	f641 4101 	movw	r1, #7169	@ 0x1c01
34011dac:	480c      	ldr	r0, [pc, #48]	@ (34011de0 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x60>)
34011dae:	f00b fdeb 	bl	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011db2:	2e01      	cmp	r6, #1
34011db4:	d1ea      	bne.n	34011d8c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
  return HAL_OK;
34011db6:	2000      	movs	r0, #0
34011db8:	e7e9      	b.n	34011d8e <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xe>
  if (Pipe == DCMIPP_PIPE1)
34011dba:	2e01      	cmp	r6, #1
34011dbc:	d1e6      	bne.n	34011d8c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
    switch (ModuleID)
34011dbe:	2d02      	cmp	r5, #2
34011dc0:	683b      	ldr	r3, [r7, #0]
34011dc2:	d007      	beq.n	34011dd4 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x54>
34011dc4:	2d03      	cmp	r5, #3
34011dc6:	d008      	beq.n	34011dda <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x5a>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST1SR & DCMIPP_P1ST1SR_ACCU));
34011dc8:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34011dcc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34011dd0:	6023      	str	r3, [r4, #0]
        break;
34011dd2:	e7f0      	b.n	34011db6 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x36>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34011dd4:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
34011dd8:	e7f8      	b.n	34011dcc <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
34011dda:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
34011dde:	e7f5      	b.n	34011dcc <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
34011de0:	3402678a 	.word	0x3402678a

34011de4 <HAL_DCMIPP_PIPE_GetISPExposureConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011de4:	2902      	cmp	r1, #2
34011de6:	d904      	bls.n	34011df2 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0xe>
34011de8:	f641 41e6 	movw	r1, #7398	@ 0x1ce6
34011dec:	480c      	ldr	r0, [pc, #48]	@ (34011e20 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x3c>)
34011dee:	f00b bdcb 	b.w	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011df2:	2901      	cmp	r1, #1
34011df4:	d113      	bne.n	34011e1e <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x3a>
    tmp = READ_REG(hdcmipp->Instance->P1EXCR2);
34011df6:	6801      	ldr	r1, [r0, #0]
34011df8:	f8d1 3848 	ldr.w	r3, [r1, #2120]	@ 0x848
    pExposureConfig->MultiplierBlue  = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTB) >> DCMIPP_P1EXCR2_MULTB_Pos);
34011dfc:	0918      	lsrs	r0, r3, #4
34011dfe:	7150      	strb	r0, [r2, #5]
    pExposureConfig->ShiftBlue       = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFB) >> DCMIPP_P1EXCR2_SHFB_Pos);
34011e00:	f3c3 3002 	ubfx	r0, r3, #12, #3
34011e04:	7110      	strb	r0, [r2, #4]
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34011e06:	f3c3 7002 	ubfx	r0, r3, #28, #3
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34011e0a:	0d1b      	lsrs	r3, r3, #20
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34011e0c:	7090      	strb	r0, [r2, #2]
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34011e0e:	70d3      	strb	r3, [r2, #3]
    tmp = READ_REG(hdcmipp->Instance->P1EXCR1);
34011e10:	f8d1 3844 	ldr.w	r3, [r1, #2116]	@ 0x844
    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
34011e14:	0d19      	lsrs	r1, r3, #20
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34011e16:	f3c3 7302 	ubfx	r3, r3, #28, #3
    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
34011e1a:	7051      	strb	r1, [r2, #1]
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
34011e1c:	7013      	strb	r3, [r2, #0]
}
34011e1e:	4770      	bx	lr
34011e20:	3402678a 	.word	0x3402678a

34011e24 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011e24:	2902      	cmp	r1, #2
{
34011e26:	b470      	push	{r4, r5, r6}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011e28:	d905      	bls.n	34011e36 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x12>
}
34011e2a:	bc70      	pop	{r4, r5, r6}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011e2c:	f641 511f 	movw	r1, #7455	@ 0x1d1f
34011e30:	484a      	ldr	r0, [pc, #296]	@ (34011f5c <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x138>)
34011e32:	f00b bda9 	b.w	3401d988 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34011e36:	2901      	cmp	r1, #1
34011e38:	f040 808d 	bne.w	34011f56 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x132>
    tmp = (uint16_t)READ_REG(hdcmipp->Instance->P1CCCR);
34011e3c:	6803      	ldr	r3, [r0, #0]
34011e3e:	f8d3 1880 	ldr.w	r1, [r3, #2176]	@ 0x880
                                                 ? ENABLE : DISABLE;
34011e42:	f3c1 0080 	ubfx	r0, r1, #2, #1
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
34011e46:	f001 0102 	and.w	r1, r1, #2
    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
34011e4a:	7010      	strb	r0, [r2, #0]
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
34011e4c:	7051      	strb	r1, [r2, #1]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
34011e4e:	f8d3 4884 	ldr.w	r4, [r3, #2180]	@ 0x884
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e52:	4943      	ldr	r1, [pc, #268]	@ (34011f60 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x13c>)
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
34011e54:	f3c4 400a 	ubfx	r0, r4, #16, #11
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e58:	ea40 0501 	orr.w	r5, r0, r1
34011e5c:	f014 6f80 	tst.w	r4, #67108864	@ 0x4000000
34011e60:	bf18      	it	ne
34011e62:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34011e64:	f8d3 4884 	ldr.w	r4, [r3, #2180]	@ 0x884
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e68:	8090      	strh	r0, [r2, #4]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
34011e6a:	f3c4 000a 	ubfx	r0, r4, #0, #11
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e6e:	ea40 0501 	orr.w	r5, r0, r1
34011e72:	f414 6f80 	tst.w	r4, #1024	@ 0x400
34011e76:	bf18      	it	ne
34011e78:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34011e7a:	f8d3 5888 	ldr.w	r5, [r3, #2184]	@ 0x888
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e7e:	8050      	strh	r0, [r2, #2]
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011e80:	4838      	ldr	r0, [pc, #224]	@ (34011f64 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x140>)
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34011e82:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011e86:	ea44 0600 	orr.w	r6, r4, r0
34011e8a:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34011e8e:	bf18      	it	ne
34011e90:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34011e92:	f8d3 5888 	ldr.w	r5, [r3, #2184]	@ 0x888
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011e96:	8114      	strh	r4, [r2, #8]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34011e98:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011e9c:	ea44 0601 	orr.w	r6, r4, r1
34011ea0:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34011ea4:	bf18      	it	ne
34011ea6:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34011ea8:	f8d3 588c 	ldr.w	r5, [r3, #2188]	@ 0x88c
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011eac:	80d4      	strh	r4, [r2, #6]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34011eae:	f3c5 440a 	ubfx	r4, r5, #16, #11
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011eb2:	ea44 0601 	orr.w	r6, r4, r1
34011eb6:	f015 6f80 	tst.w	r5, #67108864	@ 0x4000000
34011eba:	bf18      	it	ne
34011ebc:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34011ebe:	f8d3 588c 	ldr.w	r5, [r3, #2188]	@ 0x88c
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011ec2:	8194      	strh	r4, [r2, #12]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34011ec4:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011ec8:	ea44 0601 	orr.w	r6, r4, r1
34011ecc:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34011ed0:	bf18      	it	ne
34011ed2:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34011ed4:	f8d3 5890 	ldr.w	r5, [r3, #2192]	@ 0x890
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011ed8:	8154      	strh	r4, [r2, #10]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34011eda:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011ede:	ea44 0600 	orr.w	r6, r4, r0
34011ee2:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34011ee6:	bf18      	it	ne
34011ee8:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34011eea:	f8d3 5890 	ldr.w	r5, [r3, #2192]	@ 0x890
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011eee:	8214      	strh	r4, [r2, #16]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34011ef0:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011ef4:	ea44 0601 	orr.w	r6, r4, r1
34011ef8:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34011efc:	bf18      	it	ne
34011efe:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34011f00:	f8d3 5898 	ldr.w	r5, [r3, #2200]	@ 0x898
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011f04:	81d4      	strh	r4, [r2, #14]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34011f06:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->BA = (int16_t)GET_MATRIX_VALUE10(tmp);
34011f0a:	4320      	orrs	r0, r4
34011f0c:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34011f10:	bf18      	it	ne
34011f12:	4604      	movne	r4, r0
34011f14:	8314      	strh	r4, [r2, #24]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB) >> DCMIPP_P1CCBR2_BB_Pos);
34011f16:	f8d3 4898 	ldr.w	r4, [r3, #2200]	@ 0x898
34011f1a:	f3c4 000a 	ubfx	r0, r4, #0, #11
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011f1e:	ea40 0501 	orr.w	r5, r0, r1
34011f22:	f414 6f80 	tst.w	r4, #1024	@ 0x400
34011f26:	bf18      	it	ne
34011f28:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
34011f2a:	f8d3 4894 	ldr.w	r4, [r3, #2196]	@ 0x894
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
34011f2e:	82d0      	strh	r0, [r2, #22]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
34011f30:	f3c4 400a 	ubfx	r0, r4, #16, #11
    pColorConversionConfig->BG = (int16_t)GET_MATRIX_VALUE11(tmp);
34011f34:	ea40 0501 	orr.w	r5, r0, r1
34011f38:	f014 6f80 	tst.w	r4, #67108864	@ 0x4000000
34011f3c:	bf18      	it	ne
34011f3e:	4628      	movne	r0, r5
34011f40:	8290      	strh	r0, [r2, #20]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR) >> DCMIPP_P1CCBR1_BR_Pos);
34011f42:	f8d3 0894 	ldr.w	r0, [r3, #2196]	@ 0x894
34011f46:	f3c0 030a 	ubfx	r3, r0, #0, #11
    pColorConversionConfig->BR = (int16_t)GET_MATRIX_VALUE11(tmp);
34011f4a:	4319      	orrs	r1, r3
34011f4c:	f410 6f80 	tst.w	r0, #1024	@ 0x400
34011f50:	bf18      	it	ne
34011f52:	460b      	movne	r3, r1
34011f54:	8253      	strh	r3, [r2, #18]
}
34011f56:	bc70      	pop	{r4, r5, r6}
34011f58:	4770      	bx	lr
34011f5a:	bf00      	nop
34011f5c:	3402678a 	.word	0x3402678a
34011f60:	fffff800 	.word	0xfffff800
34011f64:	fffffc00 	.word	0xfffffc00

34011f68 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>:
{
34011f68:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011f6a:	4a10      	ldr	r2, [pc, #64]	@ (34011fac <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x44>)
34011f6c:	6803      	ldr	r3, [r0, #0]
{
34011f6e:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011f70:	4293      	cmp	r3, r2
{
34011f72:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011f74:	d008      	beq.n	34011f88 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x20>
34011f76:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34011f7a:	4293      	cmp	r3, r2
34011f7c:	d004      	beq.n	34011f88 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x20>
34011f7e:	f641 519b 	movw	r1, #7579	@ 0x1d9b
34011f82:	480b      	ldr	r0, [pc, #44]	@ (34011fb0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x48>)
34011f84:	f00b fd00 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011f88:	2d02      	cmp	r5, #2
34011f8a:	d906      	bls.n	34011f9a <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x32>
34011f8c:	f641 519c 	movw	r1, #7580	@ 0x1d9c
34011f90:	4807      	ldr	r0, [pc, #28]	@ (34011fb0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x48>)
34011f92:	f00b fcf9 	bl	3401d988 <assert_failed>
    return 0;
34011f96:	2000      	movs	r0, #0
}
34011f98:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34011f9a:	2d01      	cmp	r5, #1
34011f9c:	d1fb      	bne.n	34011f96 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE) == DCMIPP_P1EXCR1_ENABLE) ? 1U : 0U);
34011f9e:	6823      	ldr	r3, [r4, #0]
34011fa0:	f8d3 0844 	ldr.w	r0, [r3, #2116]	@ 0x844
34011fa4:	f000 0001 	and.w	r0, r0, #1
34011fa8:	e7f6      	b.n	34011f98 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x30>
34011faa:	bf00      	nop
34011fac:	58002000 	.word	0x58002000
34011fb0:	3402678a 	.word	0x3402678a

34011fb4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>:
{
34011fb4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011fb6:	4a10      	ldr	r2, [pc, #64]	@ (34011ff8 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x44>)
34011fb8:	6803      	ldr	r3, [r0, #0]
{
34011fba:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011fbc:	4293      	cmp	r3, r2
{
34011fbe:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34011fc0:	d008      	beq.n	34011fd4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x20>
34011fc2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34011fc6:	4293      	cmp	r3, r2
34011fc8:	d004      	beq.n	34011fd4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x20>
34011fca:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
34011fce:	480b      	ldr	r0, [pc, #44]	@ (34011ffc <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x48>)
34011fd0:	f00b fcda 	bl	3401d988 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011fd4:	2d02      	cmp	r5, #2
34011fd6:	d906      	bls.n	34011fe6 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x32>
34011fd8:	f641 51c8 	movw	r1, #7624	@ 0x1dc8
34011fdc:	4807      	ldr	r0, [pc, #28]	@ (34011ffc <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x48>)
34011fde:	f00b fcd3 	bl	3401d988 <assert_failed>
    return 0;
34011fe2:	2000      	movs	r0, #0
}
34011fe4:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34011fe6:	2d01      	cmp	r5, #1
34011fe8:	d1fb      	bne.n	34011fe2 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE) == DCMIPP_P1CCCR_ENABLE) ? 1U : 0U);
34011fea:	6823      	ldr	r3, [r4, #0]
34011fec:	f8d3 0880 	ldr.w	r0, [r3, #2176]	@ 0x880
34011ff0:	f000 0001 	and.w	r0, r0, #1
34011ff4:	e7f6      	b.n	34011fe4 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x30>
34011ff6:	bf00      	nop
34011ff8:	58002000 	.word	0x58002000
34011ffc:	3402678a 	.word	0x3402678a

34012000 <HAL_DCMIPP_GetState>:
  return hdcmipp->State;
34012000:	7900      	ldrb	r0, [r0, #4]
}
34012002:	4770      	bx	lr

34012004 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
34012004:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
34012006:	6804      	ldr	r4, [r0, #0]
34012008:	9d05      	ldr	r5, [sp, #20]
3401200a:	6c66      	ldr	r6, [r4, #68]	@ 0x44
3401200c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
34012010:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
34012012:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
34012016:	4335      	orrs	r5, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
34012018:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
3401201c:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
3401201e:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
34012020:	d12f      	bne.n	34012082 <DMA2D_SetConfig+0x7e>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
34012022:	6880      	ldr	r0, [r0, #8]
34012024:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
34012028:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
3401202c:	f401 427f 	and.w	r2, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
34012030:	b2cd      	uxtb	r5, r1

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
34012032:	2803      	cmp	r0, #3
34012034:	d81a      	bhi.n	3401206c <DMA2D_SetConfig+0x68>
34012036:	e8df f000 	tbb	[pc, r0]
3401203a:	0204      	.short	0x0204
3401203c:	0e06      	.short	0x0e06
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
    {
      tmp = (tmp3 | tmp2 | tmp4);
3401203e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
34012042:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
34012044:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp2 = (tmp2 >> 19U);
34012046:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
34012048:	0a92      	lsrs	r2, r2, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
3401204a:	02c9      	lsls	r1, r1, #11
3401204c:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
34012050:	ea41 01d5 	orr.w	r1, r1, r5, lsr #3
34012054:	e7f5      	b.n	34012042 <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 19U);
34012056:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
34012058:	0ad2      	lsrs	r2, r2, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
3401205a:	029b      	lsls	r3, r3, #10
3401205c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
34012060:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
      tmp1 = (tmp1 >> 31U);
34012064:	0ff1      	lsrs	r1, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
34012066:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
3401206a:	e7ea      	b.n	34012042 <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 20U);
3401206c:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
3401206e:	0b12      	lsrs	r2, r2, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
34012070:	021b      	lsls	r3, r3, #8
34012072:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34012076:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
      tmp1 = (tmp1 >> 28U);
3401207a:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
3401207c:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
34012080:	e7df      	b.n	34012042 <DMA2D_SetConfig+0x3e>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
34012082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
34012086:	bf0c      	ite	eq
34012088:	6161      	streq	r1, [r4, #20]
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
3401208a:	60e1      	strne	r1, [r4, #12]
}
3401208c:	e7da      	b.n	34012044 <DMA2D_SetConfig+0x40>

3401208e <HAL_DMA2D_MspInit>:
}
3401208e:	4770      	bx	lr

34012090 <HAL_DMA2D_Init>:
{
34012090:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
34012092:	4604      	mov	r4, r0
34012094:	2800      	cmp	r0, #0
34012096:	d07d      	beq.n	34012194 <HAL_DMA2D_Init+0x104>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
34012098:	6803      	ldr	r3, [r0, #0]
3401209a:	4a3f      	ldr	r2, [pc, #252]	@ (34012198 <HAL_DMA2D_Init+0x108>)
3401209c:	4293      	cmp	r3, r2
3401209e:	d007      	beq.n	340120b0 <HAL_DMA2D_Init+0x20>
340120a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340120a4:	4293      	cmp	r3, r2
340120a6:	d003      	beq.n	340120b0 <HAL_DMA2D_Init+0x20>
340120a8:	21f7      	movs	r1, #247	@ 0xf7
340120aa:	483c      	ldr	r0, [pc, #240]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
340120ac:	f00b fc6c 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
340120b0:	6863      	ldr	r3, [r4, #4]
340120b2:	f433 3240 	bics.w	r2, r3, #196608	@ 0x30000
340120b6:	d008      	beq.n	340120ca <HAL_DMA2D_Init+0x3a>
340120b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340120bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340120c0:	d003      	beq.n	340120ca <HAL_DMA2D_Init+0x3a>
340120c2:	21f8      	movs	r1, #248	@ 0xf8
340120c4:	4835      	ldr	r0, [pc, #212]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
340120c6:	f00b fc5f 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
340120ca:	68a3      	ldr	r3, [r4, #8]
340120cc:	2b04      	cmp	r3, #4
340120ce:	d903      	bls.n	340120d8 <HAL_DMA2D_Init+0x48>
340120d0:	21f9      	movs	r1, #249	@ 0xf9
340120d2:	4832      	ldr	r0, [pc, #200]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
340120d4:	f00b fc58 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
340120d8:	68e3      	ldr	r3, [r4, #12]
340120da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340120de:	d303      	bcc.n	340120e8 <HAL_DMA2D_Init+0x58>
340120e0:	21fa      	movs	r1, #250	@ 0xfa
340120e2:	482e      	ldr	r0, [pc, #184]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
340120e4:	f00b fc50 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->Init.AlphaInverted));
340120e8:	6923      	ldr	r3, [r4, #16]
340120ea:	2b01      	cmp	r3, #1
340120ec:	d903      	bls.n	340120f6 <HAL_DMA2D_Init+0x66>
340120ee:	21fb      	movs	r1, #251	@ 0xfb
340120f0:	482a      	ldr	r0, [pc, #168]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
340120f2:	f00b fc49 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->Init.RedBlueSwap));
340120f6:	6963      	ldr	r3, [r4, #20]
340120f8:	2b01      	cmp	r3, #1
340120fa:	d903      	bls.n	34012104 <HAL_DMA2D_Init+0x74>
340120fc:	21fc      	movs	r1, #252	@ 0xfc
340120fe:	4827      	ldr	r0, [pc, #156]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
34012100:	f00b fc42 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_LOM_MODE(hdma2d->Init.LineOffsetMode));
34012104:	69e3      	ldr	r3, [r4, #28]
34012106:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3401210a:	d003      	beq.n	34012114 <HAL_DMA2D_Init+0x84>
3401210c:	21fd      	movs	r1, #253	@ 0xfd
3401210e:	4823      	ldr	r0, [pc, #140]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
34012110:	f00b fc3a 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_BYTES_SWAP(hdma2d->Init.BytesSwap));
34012114:	69a3      	ldr	r3, [r4, #24]
34012116:	f433 7380 	bics.w	r3, r3, #256	@ 0x100
3401211a:	d003      	beq.n	34012124 <HAL_DMA2D_Init+0x94>
3401211c:	21fe      	movs	r1, #254	@ 0xfe
3401211e:	481f      	ldr	r0, [pc, #124]	@ (3401219c <HAL_DMA2D_Init+0x10c>)
34012120:	f00b fc32 	bl	3401d988 <assert_failed>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
34012124:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
34012128:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
3401212c:	b923      	cbnz	r3, 34012138 <HAL_DMA2D_Init+0xa8>
    HAL_DMA2D_MspInit(hdma2d);
3401212e:	4620      	mov	r0, r4
    hdma2d->Lock = HAL_UNLOCKED;
34012130:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
34012134:	f7ff ffab 	bl	3401208e <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
34012138:	2302      	movs	r3, #2
3401213a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
3401213e:	6823      	ldr	r3, [r4, #0]
34012140:	69e0      	ldr	r0, [r4, #28]
34012142:	6819      	ldr	r1, [r3, #0]
34012144:	6862      	ldr	r2, [r4, #4]
34012146:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
3401214a:	4302      	orrs	r2, r0
3401214c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
34012150:	430a      	orrs	r2, r1
34012152:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
34012154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
34012156:	69a0      	ldr	r0, [r4, #24]
34012158:	68a2      	ldr	r2, [r4, #8]
3401215a:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
3401215e:	4302      	orrs	r2, r0
34012160:	f021 0101 	bic.w	r1, r1, #1
34012164:	430a      	orrs	r2, r1
34012166:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
34012168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3401216a:	68e1      	ldr	r1, [r4, #12]
3401216c:	f36f 020f 	bfc	r2, #0, #16
34012170:	430a      	orrs	r2, r1
34012172:	641a      	str	r2, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
34012174:	6b59      	ldr	r1, [r3, #52]	@ 0x34
34012176:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
3401217a:	0552      	lsls	r2, r2, #21
3401217c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
34012180:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
34012184:	430a      	orrs	r2, r1
34012186:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
34012188:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
3401218a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
3401218c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
3401218e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
34012192:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34012194:	2001      	movs	r0, #1
34012196:	e7fc      	b.n	34012192 <HAL_DMA2D_Init+0x102>
34012198:	58021000 	.word	0x58021000
3401219c:	340267ed 	.word	0x340267ed

340121a0 <HAL_DMA2D_Start>:
{
340121a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
340121a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
340121a8:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_LINE(Height));
340121aa:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
{
340121ae:	460e      	mov	r6, r1
340121b0:	4617      	mov	r7, r2
340121b2:	461d      	mov	r5, r3
  assert_param(IS_DMA2D_LINE(Height));
340121b4:	d304      	bcc.n	340121c0 <HAL_DMA2D_Start+0x20>
340121b6:	f240 21a9 	movw	r1, #681	@ 0x2a9
340121ba:	4813      	ldr	r0, [pc, #76]	@ (34012208 <HAL_DMA2D_Start+0x68>)
340121bc:	f00b fbe4 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_PIXEL(Width));
340121c0:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
340121c4:	d304      	bcc.n	340121d0 <HAL_DMA2D_Start+0x30>
340121c6:	f240 21aa 	movw	r1, #682	@ 0x2aa
340121ca:	480f      	ldr	r0, [pc, #60]	@ (34012208 <HAL_DMA2D_Start+0x68>)
340121cc:	f00b fbdc 	bl	3401d988 <assert_failed>
  __HAL_LOCK(hdma2d);
340121d0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
340121d4:	2002      	movs	r0, #2
340121d6:	2b01      	cmp	r3, #1
340121d8:	d012      	beq.n	34012200 <HAL_DMA2D_Start+0x60>
340121da:	2301      	movs	r3, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
340121dc:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
340121e0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
340121e4:	463a      	mov	r2, r7
340121e6:	462b      	mov	r3, r5
340121e8:	4620      	mov	r0, r4
340121ea:	4631      	mov	r1, r6
340121ec:	f8cd 8000 	str.w	r8, [sp]
340121f0:	f7ff ff08 	bl	34012004 <DMA2D_SetConfig>
  return HAL_OK;
340121f4:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
340121f6:	6822      	ldr	r2, [r4, #0]
340121f8:	6813      	ldr	r3, [r2, #0]
340121fa:	f043 0301 	orr.w	r3, r3, #1
340121fe:	6013      	str	r3, [r2, #0]
}
34012200:	b002      	add	sp, #8
34012202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34012206:	bf00      	nop
34012208:	340267ed 	.word	0x340267ed

3401220c <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
3401220c:	2300      	movs	r3, #0
{
3401220e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
34012210:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
34012212:	6803      	ldr	r3, [r0, #0]
{
34012214:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
34012216:	681b      	ldr	r3, [r3, #0]
{
34012218:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
3401221a:	07db      	lsls	r3, r3, #31
3401221c:	d418      	bmi.n	34012250 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
3401221e:	6822      	ldr	r2, [r4, #0]
34012220:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
34012222:	6a52      	ldr	r2, [r2, #36]	@ 0x24
34012224:	4313      	orrs	r3, r2
  if (layer_start != 0U)
34012226:	069e      	lsls	r6, r3, #26
34012228:	d506      	bpl.n	34012238 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
3401222a:	f00b f87d 	bl	3401d328 <HAL_GetTick>
3401222e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
34012230:	6823      	ldr	r3, [r4, #0]
34012232:	685a      	ldr	r2, [r3, #4]
34012234:	06d2      	lsls	r2, r2, #27
34012236:	d53f      	bpl.n	340122b8 <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
34012238:	2212      	movs	r2, #18
3401223a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
3401223c:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
3401223e:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
34012240:	2301      	movs	r3, #1
34012242:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
34012246:	2300      	movs	r3, #0
34012248:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
3401224c:	b002      	add	sp, #8
3401224e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
34012250:	f00b f86a 	bl	3401d328 <HAL_GetTick>
34012254:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
34012256:	6823      	ldr	r3, [r4, #0]
34012258:	685a      	ldr	r2, [r3, #4]
3401225a:	0792      	lsls	r2, r2, #30
3401225c:	d4df      	bmi.n	3401221e <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
3401225e:	685a      	ldr	r2, [r3, #4]
34012260:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
34012262:	9a01      	ldr	r2, [sp, #4]
34012264:	f012 0f21 	tst.w	r2, #33	@ 0x21
34012268:	d014      	beq.n	34012294 <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
3401226a:	9a01      	ldr	r2, [sp, #4]
3401226c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
3401226e:	bf42      	ittt	mi
34012270:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34012272:	f042 0202 	orrmi.w	r2, r2, #2
34012276:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
34012278:	9a01      	ldr	r2, [sp, #4]
3401227a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
3401227c:	bf42      	ittt	mi
3401227e:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34012280:	f042 0201 	orrmi.w	r2, r2, #1
34012284:	6662      	strmi	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
34012286:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
34012288:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
3401228a:	2304      	movs	r3, #4
        return HAL_ERROR;
3401228c:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
3401228e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        return HAL_ERROR;
34012292:	e7d8      	b.n	34012246 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
34012294:	1c69      	adds	r1, r5, #1
34012296:	d0df      	beq.n	34012258 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
34012298:	f00b f846 	bl	3401d328 <HAL_GetTick>
3401229c:	1b80      	subs	r0, r0, r6
3401229e:	42a8      	cmp	r0, r5
340122a0:	d801      	bhi.n	340122a6 <HAL_DMA2D_PollForTransfer+0x9a>
340122a2:	2d00      	cmp	r5, #0
340122a4:	d1d7      	bne.n	34012256 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
340122a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          return HAL_TIMEOUT;
340122a8:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
340122aa:	f043 0320 	orr.w	r3, r3, #32
340122ae:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
340122b0:	2303      	movs	r3, #3
340122b2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
340122b6:	e7c6      	b.n	34012246 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
340122b8:	685a      	ldr	r2, [r3, #4]
340122ba:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
340122bc:	9a01      	ldr	r2, [sp, #4]
340122be:	f012 0f29 	tst.w	r2, #41	@ 0x29
340122c2:	d016      	beq.n	340122f2 <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
340122c4:	9a01      	ldr	r2, [sp, #4]
340122c6:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
340122c8:	bf42      	ittt	mi
340122ca:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
340122cc:	f042 0204 	orrmi.w	r2, r2, #4
340122d0:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
340122d2:	9a01      	ldr	r2, [sp, #4]
340122d4:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340122d6:	bf42      	ittt	mi
340122d8:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
340122da:	f042 0202 	orrmi.w	r2, r2, #2
340122de:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
340122e0:	9a01      	ldr	r2, [sp, #4]
340122e2:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
340122e4:	bf42      	ittt	mi
340122e6:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
340122e8:	f042 0201 	orrmi.w	r2, r2, #1
340122ec:	6662      	strmi	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
340122ee:	2229      	movs	r2, #41	@ 0x29
340122f0:	e7ca      	b.n	34012288 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
340122f2:	1c69      	adds	r1, r5, #1
340122f4:	d09d      	beq.n	34012232 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
340122f6:	f00b f817 	bl	3401d328 <HAL_GetTick>
340122fa:	1b80      	subs	r0, r0, r6
340122fc:	42a8      	cmp	r0, r5
340122fe:	d8d2      	bhi.n	340122a6 <HAL_DMA2D_PollForTransfer+0x9a>
34012300:	2d00      	cmp	r5, #0
34012302:	d195      	bne.n	34012230 <HAL_DMA2D_PollForTransfer+0x24>
34012304:	e7cf      	b.n	340122a6 <HAL_DMA2D_PollForTransfer+0x9a>
	...

34012308 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_LAYER(LayerIdx));
34012308:	2901      	cmp	r1, #1
{
3401230a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401230c:	4604      	mov	r4, r0
3401230e:	460d      	mov	r5, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
34012310:	d904      	bls.n	3401231c <HAL_DMA2D_ConfigLayer+0x14>
34012312:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34012316:	4850      	ldr	r0, [pc, #320]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
34012318:	f00b fb36 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
3401231c:	231c      	movs	r3, #28
3401231e:	fb03 4305 	mla	r3, r3, r5, r4
34012322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34012324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34012328:	d304      	bcc.n	34012334 <HAL_DMA2D_ConfigLayer+0x2c>
3401232a:	f240 61f4 	movw	r1, #1780	@ 0x6f4
3401232e:	484a      	ldr	r0, [pc, #296]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
34012330:	f00b fb2a 	bl	3401d988 <assert_failed>
  if (hdma2d->Init.Mode != DMA2D_R2M)
34012334:	6863      	ldr	r3, [r4, #4]
34012336:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401233a:	d017      	beq.n	3401236c <HAL_DMA2D_ConfigLayer+0x64>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
3401233c:	231c      	movs	r3, #28
3401233e:	fb03 4305 	mla	r3, r3, r5, r4
34012342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34012344:	2b0b      	cmp	r3, #11
34012346:	d904      	bls.n	34012352 <HAL_DMA2D_ConfigLayer+0x4a>
34012348:	f240 61f7 	movw	r1, #1783	@ 0x6f7
3401234c:	4842      	ldr	r0, [pc, #264]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
3401234e:	f00b fb1b 	bl	3401d988 <assert_failed>
    if (hdma2d->Init.Mode != DMA2D_M2M)
34012352:	6863      	ldr	r3, [r4, #4]
34012354:	b153      	cbz	r3, 3401236c <HAL_DMA2D_ConfigLayer+0x64>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
34012356:	231c      	movs	r3, #28
34012358:	fb03 4305 	mla	r3, r3, r5, r4
3401235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3401235e:	2b02      	cmp	r3, #2
34012360:	d904      	bls.n	3401236c <HAL_DMA2D_ConfigLayer+0x64>
34012362:	f240 61fa 	movw	r1, #1786	@ 0x6fa
34012366:	483c      	ldr	r0, [pc, #240]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
34012368:	f00b fb0e 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
3401236c:	261c      	movs	r6, #28
3401236e:	fb06 4305 	mla	r3, r6, r5, r4
34012372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34012374:	2b01      	cmp	r3, #1
34012376:	d904      	bls.n	34012382 <HAL_DMA2D_ConfigLayer+0x7a>
34012378:	f240 61fd 	movw	r1, #1789	@ 0x6fd
3401237c:	4836      	ldr	r0, [pc, #216]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
3401237e:	f00b fb03 	bl	3401d988 <assert_failed>
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
34012382:	fb06 4605 	mla	r6, r6, r5, r4
34012386:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
34012388:	2b01      	cmp	r3, #1
3401238a:	d904      	bls.n	34012396 <HAL_DMA2D_ConfigLayer+0x8e>
3401238c:	f240 61fe 	movw	r1, #1790	@ 0x6fe
34012390:	4831      	ldr	r0, [pc, #196]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
34012392:	f00b faf9 	bl	3401d988 <assert_failed>
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
34012396:	2d01      	cmp	r5, #1
34012398:	d10a      	bne.n	340123b0 <HAL_DMA2D_ConfigLayer+0xa8>
3401239a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401239c:	2b0b      	cmp	r3, #11
3401239e:	d107      	bne.n	340123b0 <HAL_DMA2D_ConfigLayer+0xa8>
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
340123a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
340123a2:	2b02      	cmp	r3, #2
340123a4:	d904      	bls.n	340123b0 <HAL_DMA2D_ConfigLayer+0xa8>
340123a6:	f240 7102 	movw	r1, #1794	@ 0x702
340123aa:	482b      	ldr	r0, [pc, #172]	@ (34012458 <HAL_DMA2D_ConfigLayer+0x150>)
340123ac:	f00b faec 	bl	3401d988 <assert_failed>
  __HAL_LOCK(hdma2d);
340123b0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
340123b4:	2002      	movs	r0, #2
340123b6:	2b01      	cmp	r3, #1
340123b8:	d033      	beq.n	34012422 <HAL_DMA2D_ConfigLayer+0x11a>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340123ba:	211c      	movs	r1, #28
  __HAL_LOCK(hdma2d);
340123bc:	2301      	movs	r3, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340123be:	fb01 4105 	mla	r1, r1, r5, r4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
340123c2:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
340123c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
340123ca:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340123cc:	e9d1 620b 	ldrd	r6, r2, [r1, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
340123d0:	051b      	lsls	r3, r3, #20
340123d2:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340123d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
340123d8:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
340123da:	4333      	orrs	r3, r6
340123dc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
340123e0:	f1a6 0009 	sub.w	r0, r6, #9
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
340123e4:	f007 427f 	and.w	r2, r7, #4278190080	@ 0xff000000
340123e8:	431a      	orrs	r2, r3
340123ea:	2801      	cmp	r0, #1
340123ec:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
340123f0:	bf98      	it	ls
340123f2:	4613      	movls	r3, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
340123f4:	6822      	ldr	r2, [r4, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
340123f6:	b9ad      	cbnz	r5, 34012424 <HAL_DMA2D_ConfigLayer+0x11c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
340123f8:	6a55      	ldr	r5, [r2, #36]	@ 0x24
340123fa:	4918      	ldr	r1, [pc, #96]	@ (3401245c <HAL_DMA2D_ConfigLayer+0x154>)
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
340123fc:	2801      	cmp	r0, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
340123fe:	ea01 0105 	and.w	r1, r1, r5
34012402:	ea41 0103 	orr.w	r1, r1, r3
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
34012406:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34012408:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
3401240a:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
3401240c:	d803      	bhi.n	34012416 <HAL_DMA2D_ConfigLayer+0x10e>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
3401240e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34012410:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34012414:	6293      	str	r3, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
34012416:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
34012418:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
3401241a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
3401241e:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
}
34012422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
34012424:	2e0b      	cmp	r6, #11
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
34012426:	bf03      	ittte	eq
34012428:	6c09      	ldreq	r1, [r1, #64]	@ 0x40
      regMask  |= DMA2D_FGPFCCR_CSS;
3401242a:	4e0d      	ldreq	r6, [pc, #52]	@ (34012460 <HAL_DMA2D_ConfigLayer+0x158>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
3401242c:	ea43 4381 	orreq.w	r3, r3, r1, lsl #18
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
34012430:	4e0c      	ldrne	r6, [pc, #48]	@ (34012464 <HAL_DMA2D_ConfigLayer+0x15c>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
34012432:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34012434:	2801      	cmp	r0, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
34012436:	ea21 0106 	bic.w	r1, r1, r6
3401243a:	ea43 0301 	orr.w	r3, r3, r1
3401243e:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
34012440:	f04f 031c 	mov.w	r3, #28
34012444:	fb03 4505 	mla	r5, r3, r5, r4
34012448:	6aab      	ldr	r3, [r5, #40]	@ 0x28
3401244a:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
3401244c:	bf9e      	ittt	ls
3401244e:	6b6b      	ldrls	r3, [r5, #52]	@ 0x34
34012450:	f023 437f 	bicls.w	r3, r3, #4278190080	@ 0xff000000
34012454:	6213      	strls	r3, [r2, #32]
34012456:	e7de      	b.n	34012416 <HAL_DMA2D_ConfigLayer+0x10e>
34012458:	340267ed 	.word	0x340267ed
3401245c:	00ccfff0 	.word	0x00ccfff0
34012460:	ff3f000f 	.word	0xff3f000f
34012464:	ff33000f 	.word	0xff33000f

34012468 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
34012468:	2901      	cmp	r1, #1
3401246a:	d005      	beq.n	34012478 <HAL_EXTI_RegisterCallback+0x10>
3401246c:	2902      	cmp	r1, #2
3401246e:	d001      	beq.n	34012474 <HAL_EXTI_RegisterCallback+0xc>
34012470:	b929      	cbnz	r1, 3401247e <HAL_EXTI_RegisterCallback+0x16>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
34012472:	6042      	str	r2, [r0, #4]
    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
      break;

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
34012474:	6082      	str	r2, [r0, #8]
      break;
34012476:	e000      	b.n	3401247a <HAL_EXTI_RegisterCallback+0x12>
      hexti->RisingCallback = pPendingCbfn;
34012478:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
3401247a:	2000      	movs	r0, #0
3401247c:	4770      	bx	lr
  switch (CallbackID)
3401247e:	2001      	movs	r0, #1
      status = HAL_ERROR;
      break;
  }

  return status;
}
34012480:	4770      	bx	lr
	...

34012484 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
34012484:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
34012486:	4b0f      	ldr	r3, [pc, #60]	@ (340124c4 <HAL_EXTI_GetHandle+0x40>)
{
34012488:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
3401248a:	400b      	ands	r3, r1
{
3401248c:	460c      	mov	r4, r1
  assert_param(IS_EXTI_LINE(ExtiLine));
3401248e:	b973      	cbnz	r3, 340124ae <HAL_EXTI_GetHandle+0x2a>
34012490:	f001 63e0 	and.w	r3, r1, #117440512	@ 0x7000000
34012494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34012498:	d004      	beq.n	340124a4 <HAL_EXTI_GetHandle+0x20>
3401249a:	f001 7340 	and.w	r3, r1, #50331648	@ 0x3000000
3401249e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340124a2:	d104      	bne.n	340124ae <HAL_EXTI_GetHandle+0x2a>
340124a4:	4b08      	ldr	r3, [pc, #32]	@ (340124c8 <HAL_EXTI_GetHandle+0x44>)
340124a6:	4a09      	ldr	r2, [pc, #36]	@ (340124cc <HAL_EXTI_GetHandle+0x48>)
340124a8:	4023      	ands	r3, r4
340124aa:	4293      	cmp	r3, r2
340124ac:	d904      	bls.n	340124b8 <HAL_EXTI_GetHandle+0x34>
340124ae:	f240 11d5 	movw	r1, #469	@ 0x1d5
340124b2:	4807      	ldr	r0, [pc, #28]	@ (340124d0 <HAL_EXTI_GetHandle+0x4c>)
340124b4:	f00b fa68 	bl	3401d988 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
340124b8:	b115      	cbz	r5, 340124c0 <HAL_EXTI_GetHandle+0x3c>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
340124ba:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
340124bc:	602c      	str	r4, [r5, #0]
  }
}
340124be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
340124c0:	2001      	movs	r0, #1
340124c2:	e7fc      	b.n	340124be <HAL_EXTI_GetHandle+0x3a>
340124c4:	e8fcffe0 	.word	0xe8fcffe0
340124c8:	0003001f 	.word	0x0003001f
340124cc:	0002000d 	.word	0x0002000d
340124d0:	3402684f 	.word	0x3402684f

340124d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
340124d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340124d8:	4b47      	ldr	r3, [pc, #284]	@ (340125f8 <HAL_GPIO_Init+0x124>)
{
340124da:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340124dc:	4298      	cmp	r0, r3
{
340124de:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
340124e0:	d054      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
340124e2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340124e6:	4298      	cmp	r0, r3
340124e8:	d050      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
340124ea:	4b44      	ldr	r3, [pc, #272]	@ (340125fc <HAL_GPIO_Init+0x128>)
340124ec:	4298      	cmp	r0, r3
340124ee:	d04d      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
340124f0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340124f4:	4298      	cmp	r0, r3
340124f6:	d049      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
340124f8:	4b41      	ldr	r3, [pc, #260]	@ (34012600 <HAL_GPIO_Init+0x12c>)
340124fa:	4298      	cmp	r0, r3
340124fc:	d046      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
340124fe:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012502:	4298      	cmp	r0, r3
34012504:	d042      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012506:	4b3f      	ldr	r3, [pc, #252]	@ (34012604 <HAL_GPIO_Init+0x130>)
34012508:	4298      	cmp	r0, r3
3401250a:	d03f      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401250c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012510:	4298      	cmp	r0, r3
34012512:	d03b      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012514:	4b3c      	ldr	r3, [pc, #240]	@ (34012608 <HAL_GPIO_Init+0x134>)
34012516:	4298      	cmp	r0, r3
34012518:	d038      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401251a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401251e:	4298      	cmp	r0, r3
34012520:	d034      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012522:	4b3a      	ldr	r3, [pc, #232]	@ (3401260c <HAL_GPIO_Init+0x138>)
34012524:	4298      	cmp	r0, r3
34012526:	d031      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012528:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401252c:	4298      	cmp	r0, r3
3401252e:	d02d      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012530:	4b37      	ldr	r3, [pc, #220]	@ (34012610 <HAL_GPIO_Init+0x13c>)
34012532:	4298      	cmp	r0, r3
34012534:	d02a      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012536:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401253a:	4298      	cmp	r0, r3
3401253c:	d026      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401253e:	4b35      	ldr	r3, [pc, #212]	@ (34012614 <HAL_GPIO_Init+0x140>)
34012540:	4298      	cmp	r0, r3
34012542:	d023      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012544:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012548:	4298      	cmp	r0, r3
3401254a:	d01f      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401254c:	4b32      	ldr	r3, [pc, #200]	@ (34012618 <HAL_GPIO_Init+0x144>)
3401254e:	4298      	cmp	r0, r3
34012550:	d01c      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012552:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012556:	4298      	cmp	r0, r3
34012558:	d018      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401255a:	4b30      	ldr	r3, [pc, #192]	@ (3401261c <HAL_GPIO_Init+0x148>)
3401255c:	4298      	cmp	r0, r3
3401255e:	d015      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012560:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012564:	4298      	cmp	r0, r3
34012566:	d011      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012568:	4b2d      	ldr	r3, [pc, #180]	@ (34012620 <HAL_GPIO_Init+0x14c>)
3401256a:	4298      	cmp	r0, r3
3401256c:	d00e      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401256e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012572:	4298      	cmp	r0, r3
34012574:	d00a      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012576:	4b2b      	ldr	r3, [pc, #172]	@ (34012624 <HAL_GPIO_Init+0x150>)
34012578:	4298      	cmp	r0, r3
3401257a:	d007      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
3401257c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012580:	4298      	cmp	r0, r3
34012582:	d003      	beq.n	3401258c <HAL_GPIO_Init+0xb8>
34012584:	21ad      	movs	r1, #173	@ 0xad
34012586:	4828      	ldr	r0, [pc, #160]	@ (34012628 <HAL_GPIO_Init+0x154>)
34012588:	f00b f9fe 	bl	3401d988 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
3401258c:	6833      	ldr	r3, [r6, #0]
3401258e:	b29a      	uxth	r2, r3
34012590:	b112      	cbz	r2, 34012598 <HAL_GPIO_Init+0xc4>
34012592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34012596:	d303      	bcc.n	340125a0 <HAL_GPIO_Init+0xcc>
34012598:	21ae      	movs	r1, #174	@ 0xae
3401259a:	4823      	ldr	r0, [pc, #140]	@ (34012628 <HAL_GPIO_Init+0x154>)
3401259c:	f00b f9f4 	bl	3401d988 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
340125a0:	6873      	ldr	r3, [r6, #4]
340125a2:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
340125a6:	d011      	beq.n	340125cc <HAL_GPIO_Init+0xf8>
340125a8:	d81d      	bhi.n	340125e6 <HAL_GPIO_Init+0x112>
340125aa:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
340125ae:	d00d      	beq.n	340125cc <HAL_GPIO_Init+0xf8>
340125b0:	d809      	bhi.n	340125c6 <HAL_GPIO_Init+0xf2>
340125b2:	2b03      	cmp	r3, #3
340125b4:	d90a      	bls.n	340125cc <HAL_GPIO_Init+0xf8>
340125b6:	3b11      	subs	r3, #17
340125b8:	2b01      	cmp	r3, #1
340125ba:	d907      	bls.n	340125cc <HAL_GPIO_Init+0xf8>
340125bc:	21af      	movs	r1, #175	@ 0xaf
340125be:	481a      	ldr	r0, [pc, #104]	@ (34012628 <HAL_GPIO_Init+0x154>)
340125c0:	f00b f9e2 	bl	3401d988 <assert_failed>
340125c4:	e002      	b.n	340125cc <HAL_GPIO_Init+0xf8>
340125c6:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
340125ca:	d1f7      	bne.n	340125bc <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340125cc:	f04f 0900 	mov.w	r9, #0
340125d0:	464f      	mov	r7, r9
340125d2:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 340125f8 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
340125d6:	f8df a054 	ldr.w	sl, [pc, #84]	@ 3401262c <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
340125da:	6835      	ldr	r5, [r6, #0]
340125dc:	fa35 f307 	lsrs.w	r3, r5, r7
340125e0:	d126      	bne.n	34012630 <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
340125e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
340125e6:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
340125ea:	d0ef      	beq.n	340125cc <HAL_GPIO_Init+0xf8>
340125ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340125f0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
340125f4:	e7e9      	b.n	340125ca <HAL_GPIO_Init+0xf6>
340125f6:	bf00      	nop
340125f8:	56020000 	.word	0x56020000
340125fc:	56020400 	.word	0x56020400
34012600:	56020800 	.word	0x56020800
34012604:	56020c00 	.word	0x56020c00
34012608:	56021000 	.word	0x56021000
3401260c:	56021400 	.word	0x56021400
34012610:	56021800 	.word	0x56021800
34012614:	56021c00 	.word	0x56021c00
34012618:	56023400 	.word	0x56023400
3401261c:	56023800 	.word	0x56023800
34012620:	56023c00 	.word	0x56023c00
34012624:	56024000 	.word	0x56024000
34012628:	340268b0 	.word	0x340268b0
3401262c:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34012630:	f04f 0b01 	mov.w	fp, #1
34012634:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
34012638:	ea1b 0505 	ands.w	r5, fp, r5
3401263c:	f000 8130 	beq.w	340128a0 <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34012640:	6873      	ldr	r3, [r6, #4]
34012642:	f003 0303 	and.w	r3, r3, #3
34012646:	3b01      	subs	r3, #1
34012648:	2b01      	cmp	r3, #1
3401264a:	d81a      	bhi.n	34012682 <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
3401264c:	68f3      	ldr	r3, [r6, #12]
3401264e:	2b03      	cmp	r3, #3
34012650:	d903      	bls.n	3401265a <HAL_GPIO_Init+0x186>
34012652:	21be      	movs	r1, #190	@ 0xbe
34012654:	489e      	ldr	r0, [pc, #632]	@ (340128d0 <HAL_GPIO_Init+0x3fc>)
34012656:	f00b f997 	bl	3401d988 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3401265a:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
3401265c:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3401265e:	fa03 f309 	lsl.w	r3, r3, r9
34012662:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34012666:	68f3      	ldr	r3, [r6, #12]
34012668:	fa03 f309 	lsl.w	r3, r3, r9
3401266c:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
3401266e:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34012670:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
34012672:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34012674:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34012678:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
3401267c:	40bb      	lsls	r3, r7
3401267e:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34012680:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34012682:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
34012686:	f003 0303 	and.w	r3, r3, #3
3401268a:	2b03      	cmp	r3, #3
3401268c:	d102      	bne.n	34012694 <HAL_GPIO_Init+0x1c0>
3401268e:	2a01      	cmp	r2, #1
34012690:	f000 8082 	beq.w	34012798 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34012694:	2a02      	cmp	r2, #2
34012696:	d903      	bls.n	340126a0 <HAL_GPIO_Init+0x1cc>
34012698:	21d1      	movs	r1, #209	@ 0xd1
3401269a:	488d      	ldr	r0, [pc, #564]	@ (340128d0 <HAL_GPIO_Init+0x3fc>)
3401269c:	f00b f974 	bl	3401d988 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340126a0:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
340126a2:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340126a4:	fa03 f309 	lsl.w	r3, r3, r9
340126a8:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
340126ac:	68b3      	ldr	r3, [r6, #8]
340126ae:	fa03 f309 	lsl.w	r3, r3, r9
340126b2:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
340126b4:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
340126b6:	6873      	ldr	r3, [r6, #4]
340126b8:	f003 0303 	and.w	r3, r3, #3
340126bc:	2b02      	cmp	r3, #2
340126be:	d16b      	bne.n	34012798 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
340126c0:	4544      	cmp	r4, r8
340126c2:	d053      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126c4:	4b83      	ldr	r3, [pc, #524]	@ (340128d4 <HAL_GPIO_Init+0x400>)
340126c6:	429c      	cmp	r4, r3
340126c8:	d050      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126ca:	4b83      	ldr	r3, [pc, #524]	@ (340128d8 <HAL_GPIO_Init+0x404>)
340126cc:	429c      	cmp	r4, r3
340126ce:	d04d      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126d0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126d4:	429c      	cmp	r4, r3
340126d6:	d049      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126d8:	4b80      	ldr	r3, [pc, #512]	@ (340128dc <HAL_GPIO_Init+0x408>)
340126da:	429c      	cmp	r4, r3
340126dc:	d046      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126de:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126e2:	429c      	cmp	r4, r3
340126e4:	d042      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126e6:	4b7e      	ldr	r3, [pc, #504]	@ (340128e0 <HAL_GPIO_Init+0x40c>)
340126e8:	429c      	cmp	r4, r3
340126ea:	d03f      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126ec:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126f0:	429c      	cmp	r4, r3
340126f2:	d03b      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126f4:	4b7b      	ldr	r3, [pc, #492]	@ (340128e4 <HAL_GPIO_Init+0x410>)
340126f6:	429c      	cmp	r4, r3
340126f8:	d038      	beq.n	3401276c <HAL_GPIO_Init+0x298>
340126fa:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340126fe:	429c      	cmp	r4, r3
34012700:	d034      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012702:	4b79      	ldr	r3, [pc, #484]	@ (340128e8 <HAL_GPIO_Init+0x414>)
34012704:	429c      	cmp	r4, r3
34012706:	d031      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012708:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401270c:	429c      	cmp	r4, r3
3401270e:	d02d      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012710:	4b76      	ldr	r3, [pc, #472]	@ (340128ec <HAL_GPIO_Init+0x418>)
34012712:	429c      	cmp	r4, r3
34012714:	d02a      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012716:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401271a:	429c      	cmp	r4, r3
3401271c:	d026      	beq.n	3401276c <HAL_GPIO_Init+0x298>
3401271e:	4b74      	ldr	r3, [pc, #464]	@ (340128f0 <HAL_GPIO_Init+0x41c>)
34012720:	429c      	cmp	r4, r3
34012722:	d023      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012724:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012728:	429c      	cmp	r4, r3
3401272a:	d01f      	beq.n	3401276c <HAL_GPIO_Init+0x298>
3401272c:	4b71      	ldr	r3, [pc, #452]	@ (340128f4 <HAL_GPIO_Init+0x420>)
3401272e:	429c      	cmp	r4, r3
34012730:	d01c      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012732:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012736:	429c      	cmp	r4, r3
34012738:	d018      	beq.n	3401276c <HAL_GPIO_Init+0x298>
3401273a:	4b6f      	ldr	r3, [pc, #444]	@ (340128f8 <HAL_GPIO_Init+0x424>)
3401273c:	429c      	cmp	r4, r3
3401273e:	d015      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012740:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012744:	429c      	cmp	r4, r3
34012746:	d011      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012748:	4b6c      	ldr	r3, [pc, #432]	@ (340128fc <HAL_GPIO_Init+0x428>)
3401274a:	429c      	cmp	r4, r3
3401274c:	d00e      	beq.n	3401276c <HAL_GPIO_Init+0x298>
3401274e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012752:	429c      	cmp	r4, r3
34012754:	d00a      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012756:	4b6a      	ldr	r3, [pc, #424]	@ (34012900 <HAL_GPIO_Init+0x42c>)
34012758:	429c      	cmp	r4, r3
3401275a:	d007      	beq.n	3401276c <HAL_GPIO_Init+0x298>
3401275c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012760:	429c      	cmp	r4, r3
34012762:	d003      	beq.n	3401276c <HAL_GPIO_Init+0x298>
34012764:	21de      	movs	r1, #222	@ 0xde
34012766:	485a      	ldr	r0, [pc, #360]	@ (340128d0 <HAL_GPIO_Init+0x3fc>)
34012768:	f00b f90e 	bl	3401d988 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
3401276c:	6933      	ldr	r3, [r6, #16]
3401276e:	2b0f      	cmp	r3, #15
34012770:	d903      	bls.n	3401277a <HAL_GPIO_Init+0x2a6>
34012772:	21df      	movs	r1, #223	@ 0xdf
34012774:	4856      	ldr	r0, [pc, #344]	@ (340128d0 <HAL_GPIO_Init+0x3fc>)
34012776:	f00b f907 	bl	3401d988 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
3401277a:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
3401277c:	08fa      	lsrs	r2, r7, #3
3401277e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34012782:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34012786:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34012788:	0089      	lsls	r1, r1, #2
3401278a:	408b      	lsls	r3, r1
3401278c:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34012790:	6933      	ldr	r3, [r6, #16]
34012792:	408b      	lsls	r3, r1
34012794:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34012796:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34012798:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
3401279a:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
3401279c:	fa03 f209 	lsl.w	r2, r3, r9
340127a0:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
340127a4:	6872      	ldr	r2, [r6, #4]
340127a6:	ea02 0103 	and.w	r1, r2, r3
340127aa:	fa01 f109 	lsl.w	r1, r1, r9
340127ae:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340127b0:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
340127b4:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
340127b6:	d073      	beq.n	340128a0 <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340127b8:	f04f 0e0f 	mov.w	lr, #15
340127bc:	f027 0103 	bic.w	r1, r7, #3
340127c0:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
340127c4:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
340127c8:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
340127cc:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340127d0:	4098      	lsls	r0, r3
340127d2:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340127d6:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340127d8:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340127dc:	d064      	beq.n	340128a8 <HAL_GPIO_Init+0x3d4>
340127de:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 340128d8 <HAL_GPIO_Init+0x404>
340127e2:	4574      	cmp	r4, lr
340127e4:	d062      	beq.n	340128ac <HAL_GPIO_Init+0x3d8>
340127e6:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340127ea:	4574      	cmp	r4, lr
340127ec:	d060      	beq.n	340128b0 <HAL_GPIO_Init+0x3dc>
340127ee:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340127f2:	4574      	cmp	r4, lr
340127f4:	d020      	beq.n	34012838 <HAL_GPIO_Init+0x364>
340127f6:	4b3b      	ldr	r3, [pc, #236]	@ (340128e4 <HAL_GPIO_Init+0x410>)
340127f8:	429c      	cmp	r4, r3
340127fa:	d05b      	beq.n	340128b4 <HAL_GPIO_Init+0x3e0>
340127fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012800:	429c      	cmp	r4, r3
34012802:	d059      	beq.n	340128b8 <HAL_GPIO_Init+0x3e4>
34012804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012808:	429c      	cmp	r4, r3
3401280a:	d057      	beq.n	340128bc <HAL_GPIO_Init+0x3e8>
3401280c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012810:	429c      	cmp	r4, r3
34012812:	d055      	beq.n	340128c0 <HAL_GPIO_Init+0x3ec>
34012814:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34012818:	429c      	cmp	r4, r3
3401281a:	d053      	beq.n	340128c4 <HAL_GPIO_Init+0x3f0>
3401281c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012820:	429c      	cmp	r4, r3
34012822:	d051      	beq.n	340128c8 <HAL_GPIO_Init+0x3f4>
34012824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012828:	429c      	cmp	r4, r3
3401282a:	d04f      	beq.n	340128cc <HAL_GPIO_Init+0x3f8>
3401282c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012830:	429c      	cmp	r4, r3
34012832:	bf14      	ite	ne
34012834:	2310      	movne	r3, #16
34012836:	230b      	moveq	r3, #11
34012838:	4083      	lsls	r3, r0
3401283a:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
3401283e:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34012840:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34012844:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34012848:	ea23 0105 	bic.w	r1, r3, r5
3401284c:	ea43 0305 	orr.w	r3, r3, r5
34012850:	bf08      	it	eq
34012852:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34012854:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34012858:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
3401285c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34012860:	ea23 0105 	bic.w	r1, r3, r5
34012864:	ea43 0305 	orr.w	r3, r3, r5
34012868:	bf08      	it	eq
3401286a:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
3401286c:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34012870:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34012874:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34012878:	ea23 0105 	bic.w	r1, r3, r5
3401287c:	ea43 0305 	orr.w	r3, r3, r5
34012880:	bf08      	it	eq
34012882:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34012884:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34012888:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
3401288c:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34012890:	ea23 0105 	bic.w	r1, r3, r5
34012894:	ea45 0503 	orr.w	r5, r5, r3
34012898:	bf08      	it	eq
3401289a:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
3401289c:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
340128a0:	3701      	adds	r7, #1
340128a2:	f109 0902 	add.w	r9, r9, #2
340128a6:	e698      	b.n	340125da <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340128a8:	2300      	movs	r3, #0
340128aa:	e7c5      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128ac:	2301      	movs	r3, #1
340128ae:	e7c3      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128b0:	2302      	movs	r3, #2
340128b2:	e7c1      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128b4:	2304      	movs	r3, #4
340128b6:	e7bf      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128b8:	2305      	movs	r3, #5
340128ba:	e7bd      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128bc:	2306      	movs	r3, #6
340128be:	e7bb      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128c0:	2307      	movs	r3, #7
340128c2:	e7b9      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128c4:	2308      	movs	r3, #8
340128c6:	e7b7      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128c8:	2309      	movs	r3, #9
340128ca:	e7b5      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128cc:	230a      	movs	r3, #10
340128ce:	e7b3      	b.n	34012838 <HAL_GPIO_Init+0x364>
340128d0:	340268b0 	.word	0x340268b0
340128d4:	46020000 	.word	0x46020000
340128d8:	56020400 	.word	0x56020400
340128dc:	56020800 	.word	0x56020800
340128e0:	56020c00 	.word	0x56020c00
340128e4:	56021000 	.word	0x56021000
340128e8:	56021400 	.word	0x56021400
340128ec:	56021800 	.word	0x56021800
340128f0:	56021c00 	.word	0x56021c00
340128f4:	56023400 	.word	0x56023400
340128f8:	56023800 	.word	0x56023800
340128fc:	56023c00 	.word	0x56023c00
34012900:	56024000 	.word	0x56024000

34012904 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
34012904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34012908:	4b87      	ldr	r3, [pc, #540]	@ (34012b28 <HAL_GPIO_DeInit+0x224>)
{
3401290a:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
3401290c:	4298      	cmp	r0, r3
{
3401290e:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34012910:	d055      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012912:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012916:	4298      	cmp	r0, r3
34012918:	d051      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401291a:	4b84      	ldr	r3, [pc, #528]	@ (34012b2c <HAL_GPIO_DeInit+0x228>)
3401291c:	4298      	cmp	r0, r3
3401291e:	d04e      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012920:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012924:	4298      	cmp	r0, r3
34012926:	d04a      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012928:	4b81      	ldr	r3, [pc, #516]	@ (34012b30 <HAL_GPIO_DeInit+0x22c>)
3401292a:	4298      	cmp	r0, r3
3401292c:	d047      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401292e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012932:	4298      	cmp	r0, r3
34012934:	d043      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012936:	4b7f      	ldr	r3, [pc, #508]	@ (34012b34 <HAL_GPIO_DeInit+0x230>)
34012938:	4298      	cmp	r0, r3
3401293a:	d040      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401293c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012940:	4298      	cmp	r0, r3
34012942:	d03c      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012944:	4b7c      	ldr	r3, [pc, #496]	@ (34012b38 <HAL_GPIO_DeInit+0x234>)
34012946:	4298      	cmp	r0, r3
34012948:	d039      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401294a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401294e:	4298      	cmp	r0, r3
34012950:	d035      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012952:	4b7a      	ldr	r3, [pc, #488]	@ (34012b3c <HAL_GPIO_DeInit+0x238>)
34012954:	4298      	cmp	r0, r3
34012956:	d032      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012958:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401295c:	4298      	cmp	r0, r3
3401295e:	d02e      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012960:	4b77      	ldr	r3, [pc, #476]	@ (34012b40 <HAL_GPIO_DeInit+0x23c>)
34012962:	4298      	cmp	r0, r3
34012964:	d02b      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012966:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401296a:	4298      	cmp	r0, r3
3401296c:	d027      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401296e:	4b75      	ldr	r3, [pc, #468]	@ (34012b44 <HAL_GPIO_DeInit+0x240>)
34012970:	4298      	cmp	r0, r3
34012972:	d024      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012974:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012978:	4298      	cmp	r0, r3
3401297a:	d020      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401297c:	4b72      	ldr	r3, [pc, #456]	@ (34012b48 <HAL_GPIO_DeInit+0x244>)
3401297e:	4298      	cmp	r0, r3
34012980:	d01d      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012982:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012986:	4298      	cmp	r0, r3
34012988:	d019      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401298a:	4b70      	ldr	r3, [pc, #448]	@ (34012b4c <HAL_GPIO_DeInit+0x248>)
3401298c:	4298      	cmp	r0, r3
3401298e:	d016      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012990:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012994:	4298      	cmp	r0, r3
34012996:	d012      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
34012998:	4b6d      	ldr	r3, [pc, #436]	@ (34012b50 <HAL_GPIO_DeInit+0x24c>)
3401299a:	4298      	cmp	r0, r3
3401299c:	d00f      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
3401299e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340129a2:	4298      	cmp	r0, r3
340129a4:	d00b      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
340129a6:	4b6b      	ldr	r3, [pc, #428]	@ (34012b54 <HAL_GPIO_DeInit+0x250>)
340129a8:	4298      	cmp	r0, r3
340129aa:	d008      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
340129ac:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340129b0:	4298      	cmp	r0, r3
340129b2:	d004      	beq.n	340129be <HAL_GPIO_DeInit+0xba>
340129b4:	f240 112d 	movw	r1, #301	@ 0x12d
340129b8:	4867      	ldr	r0, [pc, #412]	@ (34012b58 <HAL_GPIO_DeInit+0x254>)
340129ba:	f00a ffe5 	bl	3401d988 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
340129be:	b2ab      	uxth	r3, r5
340129c0:	b113      	cbz	r3, 340129c8 <HAL_GPIO_DeInit+0xc4>
340129c2:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
340129c6:	d304      	bcc.n	340129d2 <HAL_GPIO_DeInit+0xce>
340129c8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
340129cc:	4862      	ldr	r0, [pc, #392]	@ (34012b58 <HAL_GPIO_DeInit+0x254>)
340129ce:	f00a ffdb 	bl	3401d988 <assert_failed>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
340129d2:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
340129d4:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
340129d8:	f04f 080f 	mov.w	r8, #15
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
340129dc:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR1 &= ~(iocurrent);
340129e0:	485e      	ldr	r0, [pc, #376]	@ (34012b5c <HAL_GPIO_DeInit+0x258>)
  while ((GPIO_Pin >> position) != 0x00u)
340129e2:	fa35 f302 	lsrs.w	r3, r5, r2
340129e6:	d101      	bne.n	340129ec <HAL_GPIO_DeInit+0xe8>
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
    }

    position++;
  }
}
340129e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
340129ec:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00u)
340129f0:	ea1c 0605 	ands.w	r6, ip, r5
340129f4:	d07f      	beq.n	34012af6 <HAL_GPIO_DeInit+0x1f2>
      tmp = EXTI->EXTICR[position >> 2u];
340129f6:	f022 0103 	bic.w	r1, r2, #3
340129fa:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
340129fe:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012a02:	f002 0703 	and.w	r7, r2, #3
      tmp = EXTI->EXTICR[position >> 2u];
34012a06:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34012a08:	00ff      	lsls	r7, r7, #3
34012a0a:	fa08 f907 	lsl.w	r9, r8, r7
34012a0e:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34012a12:	4b45      	ldr	r3, [pc, #276]	@ (34012b28 <HAL_GPIO_DeInit+0x224>)
34012a14:	429c      	cmp	r4, r3
34012a16:	d070      	beq.n	34012afa <HAL_GPIO_DeInit+0x1f6>
34012a18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a1c:	429c      	cmp	r4, r3
34012a1e:	d06e      	beq.n	34012afe <HAL_GPIO_DeInit+0x1fa>
34012a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a24:	429c      	cmp	r4, r3
34012a26:	d06c      	beq.n	34012b02 <HAL_GPIO_DeInit+0x1fe>
34012a28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a2c:	429c      	cmp	r4, r3
34012a2e:	d06a      	beq.n	34012b06 <HAL_GPIO_DeInit+0x202>
34012a30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a34:	429c      	cmp	r4, r3
34012a36:	d068      	beq.n	34012b0a <HAL_GPIO_DeInit+0x206>
34012a38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a3c:	429c      	cmp	r4, r3
34012a3e:	d066      	beq.n	34012b0e <HAL_GPIO_DeInit+0x20a>
34012a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a44:	429c      	cmp	r4, r3
34012a46:	d064      	beq.n	34012b12 <HAL_GPIO_DeInit+0x20e>
34012a48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a4c:	429c      	cmp	r4, r3
34012a4e:	d062      	beq.n	34012b16 <HAL_GPIO_DeInit+0x212>
34012a50:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34012a54:	429c      	cmp	r4, r3
34012a56:	d060      	beq.n	34012b1a <HAL_GPIO_DeInit+0x216>
34012a58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a5c:	429c      	cmp	r4, r3
34012a5e:	d05e      	beq.n	34012b1e <HAL_GPIO_DeInit+0x21a>
34012a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a64:	429c      	cmp	r4, r3
34012a66:	d05c      	beq.n	34012b22 <HAL_GPIO_DeInit+0x21e>
34012a68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34012a6c:	429c      	cmp	r4, r3
34012a6e:	bf14      	ite	ne
34012a70:	2310      	movne	r3, #16
34012a72:	230b      	moveq	r3, #11
34012a74:	40bb      	lsls	r3, r7
34012a76:	4573      	cmp	r3, lr
34012a78:	d117      	bne.n	34012aaa <HAL_GPIO_DeInit+0x1a6>
        EXTI->IMR1 &= ~(iocurrent);
34012a7a:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
34012a7e:	ea23 0306 	bic.w	r3, r3, r6
34012a82:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
34012a86:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
34012a8a:	ea23 0306 	bic.w	r3, r3, r6
34012a8e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
34012a92:	6803      	ldr	r3, [r0, #0]
34012a94:	ea23 0306 	bic.w	r3, r3, r6
34012a98:	6003      	str	r3, [r0, #0]
        EXTI->FTSR1 &= ~(iocurrent);
34012a9a:	6843      	ldr	r3, [r0, #4]
34012a9c:	ea23 0306 	bic.w	r3, r3, r6
34012aa0:	6043      	str	r3, [r0, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
34012aa2:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
34012aa4:	ea23 0309 	bic.w	r3, r3, r9
34012aa8:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34012aaa:	6823      	ldr	r3, [r4, #0]
34012aac:	0056      	lsls	r6, r2, #1
34012aae:	fa0b f606 	lsl.w	r6, fp, r6
34012ab2:	4333      	orrs	r3, r6
34012ab4:	6023      	str	r3, [r4, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
34012ab6:	08d3      	lsrs	r3, r2, #3
34012ab8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34012abc:	f002 0107 	and.w	r1, r2, #7
34012ac0:	6a1f      	ldr	r7, [r3, #32]
34012ac2:	0089      	lsls	r1, r1, #2
34012ac4:	fa08 f101 	lsl.w	r1, r8, r1
34012ac8:	ea27 0701 	bic.w	r7, r7, r1
34012acc:	621f      	str	r7, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34012ace:	68a7      	ldr	r7, [r4, #8]
34012ad0:	ea27 0706 	bic.w	r7, r7, r6
34012ad4:	60a7      	str	r7, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
34012ad6:	6867      	ldr	r7, [r4, #4]
34012ad8:	ea27 070c 	bic.w	r7, r7, ip
34012adc:	6067      	str	r7, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34012ade:	68e7      	ldr	r7, [r4, #12]
34012ae0:	ea27 0706 	bic.w	r7, r7, r6
34012ae4:	60e7      	str	r7, [r4, #12]
      GPIOx->DELAYR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_DELAYRL_DLY1_Pos)) ;
34012ae6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
34012ae8:	ea26 0601 	bic.w	r6, r6, r1
34012aec:	641e      	str	r6, [r3, #64]	@ 0x40
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
34012aee:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
34012af0:	ea26 0101 	bic.w	r1, r6, r1
34012af4:	6499      	str	r1, [r3, #72]	@ 0x48
    position++;
34012af6:	3201      	adds	r2, #1
34012af8:	e773      	b.n	340129e2 <HAL_GPIO_DeInit+0xde>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34012afa:	2300      	movs	r3, #0
34012afc:	e7ba      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012afe:	2301      	movs	r3, #1
34012b00:	e7b8      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b02:	2302      	movs	r3, #2
34012b04:	e7b6      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b06:	2303      	movs	r3, #3
34012b08:	e7b4      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b0a:	2304      	movs	r3, #4
34012b0c:	e7b2      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b0e:	2305      	movs	r3, #5
34012b10:	e7b0      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b12:	2306      	movs	r3, #6
34012b14:	e7ae      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b16:	2307      	movs	r3, #7
34012b18:	e7ac      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b1a:	2308      	movs	r3, #8
34012b1c:	e7aa      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b1e:	2309      	movs	r3, #9
34012b20:	e7a8      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b22:	230a      	movs	r3, #10
34012b24:	e7a6      	b.n	34012a74 <HAL_GPIO_DeInit+0x170>
34012b26:	bf00      	nop
34012b28:	56020000 	.word	0x56020000
34012b2c:	56020400 	.word	0x56020400
34012b30:	56020800 	.word	0x56020800
34012b34:	56020c00 	.word	0x56020c00
34012b38:	56021000 	.word	0x56021000
34012b3c:	56021400 	.word	0x56021400
34012b40:	56021800 	.word	0x56021800
34012b44:	56021c00 	.word	0x56021c00
34012b48:	56023400 	.word	0x56023400
34012b4c:	56023800 	.word	0x56023800
34012b50:	56023c00 	.word	0x56023c00
34012b54:	56024000 	.word	0x56024000
34012b58:	340268b0 	.word	0x340268b0
34012b5c:	56025000 	.word	0x56025000

34012b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34012b60:	b538      	push	{r3, r4, r5, lr}
34012b62:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34012b64:	460c      	mov	r4, r1
34012b66:	b921      	cbnz	r1, 34012b72 <HAL_GPIO_ReadPin+0x12>
34012b68:	f44f 71c1 	mov.w	r1, #386	@ 0x182
34012b6c:	4804      	ldr	r0, [pc, #16]	@ (34012b80 <HAL_GPIO_ReadPin+0x20>)
34012b6e:	f00a ff0b 	bl	3401d988 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
34012b72:	692b      	ldr	r3, [r5, #16]
34012b74:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
34012b76:	bf14      	ite	ne
34012b78:	2001      	movne	r0, #1
34012b7a:	2000      	moveq	r0, #0
34012b7c:	bd38      	pop	{r3, r4, r5, pc}
34012b7e:	bf00      	nop
34012b80:	340268b0 	.word	0x340268b0

34012b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34012b84:	b570      	push	{r4, r5, r6, lr}
34012b86:	4605      	mov	r5, r0
34012b88:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34012b8a:	460c      	mov	r4, r1
34012b8c:	b921      	cbnz	r1, 34012b98 <HAL_GPIO_WritePin+0x14>
34012b8e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34012b92:	4808      	ldr	r0, [pc, #32]	@ (34012bb4 <HAL_GPIO_WritePin+0x30>)
34012b94:	f00a fef8 	bl	3401d988 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34012b98:	2e01      	cmp	r6, #1
34012b9a:	d906      	bls.n	34012baa <HAL_GPIO_WritePin+0x26>
34012b9c:	f240 11a1 	movw	r1, #417	@ 0x1a1
34012ba0:	4804      	ldr	r0, [pc, #16]	@ (34012bb4 <HAL_GPIO_WritePin+0x30>)
34012ba2:	f00a fef1 	bl	3401d988 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34012ba6:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34012ba8:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34012baa:	2e00      	cmp	r6, #0
34012bac:	d1fb      	bne.n	34012ba6 <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34012bae:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34012bb0:	e7fa      	b.n	34012ba8 <HAL_GPIO_WritePin+0x24>
34012bb2:	bf00      	nop
34012bb4:	340268b0 	.word	0x340268b0

34012bb8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
34012bb8:	6803      	ldr	r3, [r0, #0]
34012bba:	699a      	ldr	r2, [r3, #24]
34012bbc:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
34012bbe:	bf44      	itt	mi
34012bc0:	2200      	movmi	r2, #0
34012bc2:	629a      	strmi	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
34012bc4:	699a      	ldr	r2, [r3, #24]
34012bc6:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
34012bc8:	bf5e      	ittt	pl
34012bca:	699a      	ldrpl	r2, [r3, #24]
34012bcc:	f042 0201 	orrpl.w	r2, r2, #1
34012bd0:	619a      	strpl	r2, [r3, #24]
  }
}
34012bd2:	4770      	bx	lr

34012bd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
34012bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34012bd8:	4614      	mov	r4, r2
34012bda:	461f      	mov	r7, r3
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012bdc:	6802      	ldr	r2, [r0, #0]
34012bde:	4b29      	ldr	r3, [pc, #164]	@ (34012c84 <I2C_TransferConfig+0xb0>)
{
34012be0:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012be2:	429a      	cmp	r2, r3
{
34012be4:	460e      	mov	r6, r1
34012be6:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012be8:	d01d      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012bea:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012bee:	429a      	cmp	r2, r3
34012bf0:	d019      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012bf2:	4b25      	ldr	r3, [pc, #148]	@ (34012c88 <I2C_TransferConfig+0xb4>)
34012bf4:	429a      	cmp	r2, r3
34012bf6:	d016      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012bf8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012bfc:	429a      	cmp	r2, r3
34012bfe:	d012      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012c00:	4b22      	ldr	r3, [pc, #136]	@ (34012c8c <I2C_TransferConfig+0xb8>)
34012c02:	429a      	cmp	r2, r3
34012c04:	d00f      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012c06:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012c0a:	429a      	cmp	r2, r3
34012c0c:	d00b      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012c0e:	4b20      	ldr	r3, [pc, #128]	@ (34012c90 <I2C_TransferConfig+0xbc>)
34012c10:	429a      	cmp	r2, r3
34012c12:	d008      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012c14:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34012c18:	429a      	cmp	r2, r3
34012c1a:	d004      	beq.n	34012c26 <I2C_TransferConfig+0x52>
34012c1c:	f641 51c9 	movw	r1, #7625	@ 0x1dc9
34012c20:	481c      	ldr	r0, [pc, #112]	@ (34012c94 <I2C_TransferConfig+0xc0>)
34012c22:	f00a feb1 	bl	3401d988 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
34012c26:	f037 7380 	bics.w	r3, r7, #16777216	@ 0x1000000
34012c2a:	d007      	beq.n	34012c3c <I2C_TransferConfig+0x68>
34012c2c:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
34012c30:	d004      	beq.n	34012c3c <I2C_TransferConfig+0x68>
34012c32:	f641 51ca 	movw	r1, #7626	@ 0x1dca
34012c36:	4817      	ldr	r0, [pc, #92]	@ (34012c94 <I2C_TransferConfig+0xc0>)
34012c38:	f00a fea6 	bl	3401d988 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
34012c3c:	4b16      	ldr	r3, [pc, #88]	@ (34012c98 <I2C_TransferConfig+0xc4>)
34012c3e:	429d      	cmp	r5, r3
34012c40:	d00b      	beq.n	34012c5a <I2C_TransferConfig+0x86>
34012c42:	f425 6280 	bic.w	r2, r5, #1024	@ 0x400
34012c46:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
34012c4a:	429a      	cmp	r2, r3
34012c4c:	d005      	beq.n	34012c5a <I2C_TransferConfig+0x86>
34012c4e:	b125      	cbz	r5, 34012c5a <I2C_TransferConfig+0x86>
34012c50:	f641 51cb 	movw	r1, #7627	@ 0x1dcb
34012c54:	480f      	ldr	r0, [pc, #60]	@ (34012c94 <I2C_TransferConfig+0xc0>)
34012c56:	f00a fe97 	bl	3401d988 <assert_failed>
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
34012c5a:	f8d8 0000 	ldr.w	r0, [r8]
34012c5e:	490f      	ldr	r1, [pc, #60]	@ (34012c9c <I2C_TransferConfig+0xc8>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34012c60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
34012c64:	6842      	ldr	r2, [r0, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34012c66:	ea44 0307 	orr.w	r3, r4, r7
34012c6a:	f3c6 0609 	ubfx	r6, r6, #0, #10
34012c6e:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->CR2, \
34012c70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34012c74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
34012c78:	ea22 0201 	bic.w	r2, r2, r1
34012c7c:	4313      	orrs	r3, r2
34012c7e:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
34012c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34012c84:	50005400 	.word	0x50005400
34012c88:	50005800 	.word	0x50005800
34012c8c:	50005c00 	.word	0x50005c00
34012c90:	56001c00 	.word	0x56001c00
34012c94:	34026911 	.word	0x34026911
34012c98:	80004000 	.word	0x80004000
34012c9c:	03ff63ff 	.word	0x03ff63ff

34012ca0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
34012ca0:	6803      	ldr	r3, [r0, #0]
{
34012ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
34012ca6:	699c      	ldr	r4, [r3, #24]
{
34012ca8:	4605      	mov	r5, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
34012caa:	f014 0410 	ands.w	r4, r4, #16
{
34012cae:	460f      	mov	r7, r1
34012cb0:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
34012cb2:	d06f      	beq.n	34012d94 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
34012cb4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34012cb6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
34012cb8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34012cba:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
34012cbc:	682b      	ldr	r3, [r5, #0]
34012cbe:	699a      	ldr	r2, [r3, #24]
34012cc0:	0690      	lsls	r0, r2, #26
34012cc2:	d461      	bmi.n	34012d88 <I2C_IsErrorOccurred+0xe8>
34012cc4:	f1b8 0f00 	cmp.w	r8, #0
34012cc8:	d035      	beq.n	34012d36 <I2C_IsErrorOccurred+0x96>
    status = HAL_ERROR;
34012cca:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
34012ccc:	f044 0404 	orr.w	r4, r4, #4
  itflag = hi2c->Instance->ISR;
34012cd0:	682e      	ldr	r6, [r5, #0]
34012cd2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
34012cd4:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34012cd6:	bf41      	itttt	mi
34012cd8:	f44f 7280 	movmi.w	r2, #256	@ 0x100
    status = HAL_ERROR;
34012cdc:	2001      	movmi	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34012cde:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
34012ce0:	f044 0401 	orrmi.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
34012ce4:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
34012ce6:	bf41      	itttt	mi
34012ce8:	f44f 6280 	movmi.w	r2, #1024	@ 0x400
    status = HAL_ERROR;
34012cec:	2001      	movmi	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
34012cee:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
34012cf2:	61f2      	strmi	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
34012cf4:	059b      	lsls	r3, r3, #22
34012cf6:	d54f      	bpl.n	34012d98 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34012cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
34012cfc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34012d00:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
34012d02:	4628      	mov	r0, r5
34012d04:	f7ff ff58 	bl	34012bb8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
34012d08:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
34012d0a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
34012d0c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
34012d10:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
34012d14:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
34012d18:	f023 0301 	bic.w	r3, r3, #1
34012d1c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
34012d1e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
34012d20:	4323      	orrs	r3, r4
34012d22:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
34012d24:	2320      	movs	r3, #32
34012d26:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
34012d2a:	2300      	movs	r3, #0
34012d2c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
34012d30:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
34012d34:	e032      	b.n	34012d9c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
34012d36:	1c7a      	adds	r2, r7, #1
34012d38:	d0c1      	beq.n	34012cbe <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
34012d3a:	f00a faf5 	bl	3401d328 <HAL_GetTick>
34012d3e:	1b80      	subs	r0, r0, r6
34012d40:	42b8      	cmp	r0, r7
34012d42:	d801      	bhi.n	34012d48 <I2C_IsErrorOccurred+0xa8>
34012d44:	2f00      	cmp	r7, #0
34012d46:	d1b9      	bne.n	34012cbc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
34012d48:	682b      	ldr	r3, [r5, #0]
34012d4a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
34012d4c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
34012d50:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
34012d52:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
34012d54:	0400      	lsls	r0, r0, #16
34012d56:	d50a      	bpl.n	34012d6e <I2C_IsErrorOccurred+0xce>
34012d58:	0449      	lsls	r1, r1, #17
34012d5a:	d408      	bmi.n	34012d6e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
34012d5c:	2a20      	cmp	r2, #32
34012d5e:	d006      	beq.n	34012d6e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
34012d60:	685a      	ldr	r2, [r3, #4]
34012d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
34012d66:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
34012d68:	f00a fade 	bl	3401d328 <HAL_GetTick>
34012d6c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34012d6e:	682b      	ldr	r3, [r5, #0]
34012d70:	699b      	ldr	r3, [r3, #24]
34012d72:	069b      	lsls	r3, r3, #26
34012d74:	d4a2      	bmi.n	34012cbc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
34012d76:	f00a fad7 	bl	3401d328 <HAL_GetTick>
34012d7a:	1b80      	subs	r0, r0, r6
34012d7c:	2819      	cmp	r0, #25
34012d7e:	d9f6      	bls.n	34012d6e <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
34012d80:	2420      	movs	r4, #32
              status = HAL_ERROR;
34012d82:	f04f 0801 	mov.w	r8, #1
34012d86:	e799      	b.n	34012cbc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
34012d88:	f1b8 0f00 	cmp.w	r8, #0
34012d8c:	d19d      	bne.n	34012cca <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34012d8e:	2220      	movs	r2, #32
34012d90:	61da      	str	r2, [r3, #28]
34012d92:	e79a      	b.n	34012cca <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
34012d94:	4620      	mov	r0, r4
34012d96:	e79b      	b.n	34012cd0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
34012d98:	2800      	cmp	r0, #0
34012d9a:	d1b2      	bne.n	34012d02 <I2C_IsErrorOccurred+0x62>
}
34012d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34012da0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
34012da0:	b570      	push	{r4, r5, r6, lr}
34012da2:	4604      	mov	r4, r0
34012da4:	460d      	mov	r5, r1
34012da6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34012da8:	6823      	ldr	r3, [r4, #0]
34012daa:	699b      	ldr	r3, [r3, #24]
34012dac:	079b      	lsls	r3, r3, #30
34012dae:	d501      	bpl.n	34012db4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
34012db0:	2000      	movs	r0, #0
34012db2:	e01f      	b.n	34012df4 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34012db4:	4632      	mov	r2, r6
34012db6:	4629      	mov	r1, r5
34012db8:	4620      	mov	r0, r4
34012dba:	f7ff ff71 	bl	34012ca0 <I2C_IsErrorOccurred>
34012dbe:	b9c0      	cbnz	r0, 34012df2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
34012dc0:	1c6a      	adds	r2, r5, #1
34012dc2:	d0f1      	beq.n	34012da8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34012dc4:	f00a fab0 	bl	3401d328 <HAL_GetTick>
34012dc8:	1b80      	subs	r0, r0, r6
34012dca:	42a8      	cmp	r0, r5
34012dcc:	d801      	bhi.n	34012dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
34012dce:	2d00      	cmp	r5, #0
34012dd0:	d1ea      	bne.n	34012da8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34012dd2:	6823      	ldr	r3, [r4, #0]
34012dd4:	699b      	ldr	r3, [r3, #24]
34012dd6:	f013 0302 	ands.w	r3, r3, #2
34012dda:	d1e5      	bne.n	34012da8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34012ddc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
34012dde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34012de2:	f042 0220 	orr.w	r2, r2, #32
34012de6:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
34012de8:	2220      	movs	r2, #32
34012dea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34012dee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
34012df2:	2001      	movs	r0, #1
}
34012df4:	bd70      	pop	{r4, r5, r6, pc}

34012df6 <I2C_WaitOnFlagUntilTimeout>:
{
34012df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34012dfa:	4604      	mov	r4, r0
34012dfc:	460f      	mov	r7, r1
34012dfe:	4616      	mov	r6, r2
34012e00:	461d      	mov	r5, r3
34012e02:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34012e06:	6823      	ldr	r3, [r4, #0]
34012e08:	699b      	ldr	r3, [r3, #24]
34012e0a:	ea37 0303 	bics.w	r3, r7, r3
34012e0e:	bf0c      	ite	eq
34012e10:	2301      	moveq	r3, #1
34012e12:	2300      	movne	r3, #0
34012e14:	42b3      	cmp	r3, r6
34012e16:	d001      	beq.n	34012e1c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
34012e18:	2000      	movs	r0, #0
34012e1a:	e025      	b.n	34012e68 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34012e1c:	4642      	mov	r2, r8
34012e1e:	4629      	mov	r1, r5
34012e20:	4620      	mov	r0, r4
34012e22:	f7ff ff3d 	bl	34012ca0 <I2C_IsErrorOccurred>
34012e26:	b9f0      	cbnz	r0, 34012e66 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
34012e28:	1c6b      	adds	r3, r5, #1
34012e2a:	d0ec      	beq.n	34012e06 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34012e2c:	f00a fa7c 	bl	3401d328 <HAL_GetTick>
34012e30:	eba0 0008 	sub.w	r0, r0, r8
34012e34:	42a8      	cmp	r0, r5
34012e36:	d801      	bhi.n	34012e3c <I2C_WaitOnFlagUntilTimeout+0x46>
34012e38:	2d00      	cmp	r5, #0
34012e3a:	d1e4      	bne.n	34012e06 <I2C_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
34012e3c:	6823      	ldr	r3, [r4, #0]
34012e3e:	699b      	ldr	r3, [r3, #24]
34012e40:	ea37 0303 	bics.w	r3, r7, r3
34012e44:	bf0c      	ite	eq
34012e46:	2301      	moveq	r3, #1
34012e48:	2300      	movne	r3, #0
34012e4a:	42b3      	cmp	r3, r6
34012e4c:	d1db      	bne.n	34012e06 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34012e4e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34012e50:	f043 0320 	orr.w	r3, r3, #32
34012e54:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
34012e56:	2320      	movs	r3, #32
34012e58:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34012e5c:	2300      	movs	r3, #0
34012e5e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
34012e62:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
34012e66:	2001      	movs	r0, #1
}
34012e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34012e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
34012e6c:	b570      	push	{r4, r5, r6, lr}
34012e6e:	4604      	mov	r4, r0
34012e70:	460d      	mov	r5, r1
34012e72:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34012e74:	6823      	ldr	r3, [r4, #0]
34012e76:	699b      	ldr	r3, [r3, #24]
34012e78:	069b      	lsls	r3, r3, #26
34012e7a:	d501      	bpl.n	34012e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
34012e7c:	2000      	movs	r0, #0
34012e7e:	e01d      	b.n	34012ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34012e80:	4632      	mov	r2, r6
34012e82:	4629      	mov	r1, r5
34012e84:	4620      	mov	r0, r4
34012e86:	f7ff ff0b 	bl	34012ca0 <I2C_IsErrorOccurred>
34012e8a:	b9b0      	cbnz	r0, 34012eba <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34012e8c:	f00a fa4c 	bl	3401d328 <HAL_GetTick>
34012e90:	1b80      	subs	r0, r0, r6
34012e92:	42a8      	cmp	r0, r5
34012e94:	d801      	bhi.n	34012e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
34012e96:	2d00      	cmp	r5, #0
34012e98:	d1ec      	bne.n	34012e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34012e9a:	6823      	ldr	r3, [r4, #0]
34012e9c:	699b      	ldr	r3, [r3, #24]
34012e9e:	f013 0320 	ands.w	r3, r3, #32
34012ea2:	d1e7      	bne.n	34012e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34012ea4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
34012ea6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34012eaa:	f042 0220 	orr.w	r2, r2, #32
34012eae:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
34012eb0:	2220      	movs	r2, #32
34012eb2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
34012eb6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
34012eba:	2001      	movs	r0, #1
}
34012ebc:	bd70      	pop	{r4, r5, r6, pc}

34012ebe <HAL_I2C_MspInit>:
}
34012ebe:	4770      	bx	lr

34012ec0 <HAL_I2C_Init>:
{
34012ec0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
34012ec2:	4604      	mov	r4, r0
34012ec4:	2800      	cmp	r0, #0
34012ec6:	f000 80af 	beq.w	34013028 <HAL_I2C_Init+0x168>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34012eca:	6803      	ldr	r3, [r0, #0]
34012ecc:	4a57      	ldr	r2, [pc, #348]	@ (3401302c <HAL_I2C_Init+0x16c>)
34012ece:	4293      	cmp	r3, r2
34012ed0:	d01d      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012ed2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012ed6:	4293      	cmp	r3, r2
34012ed8:	d019      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012eda:	4a55      	ldr	r2, [pc, #340]	@ (34013030 <HAL_I2C_Init+0x170>)
34012edc:	4293      	cmp	r3, r2
34012ede:	d016      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012ee0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012ee4:	4293      	cmp	r3, r2
34012ee6:	d012      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012ee8:	4a52      	ldr	r2, [pc, #328]	@ (34013034 <HAL_I2C_Init+0x174>)
34012eea:	4293      	cmp	r3, r2
34012eec:	d00f      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012eee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012ef2:	4293      	cmp	r3, r2
34012ef4:	d00b      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012ef6:	4a50      	ldr	r2, [pc, #320]	@ (34013038 <HAL_I2C_Init+0x178>)
34012ef8:	4293      	cmp	r3, r2
34012efa:	d008      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012efc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012f00:	4293      	cmp	r3, r2
34012f02:	d004      	beq.n	34012f0e <HAL_I2C_Init+0x4e>
34012f04:	f240 2126 	movw	r1, #550	@ 0x226
34012f08:	484c      	ldr	r0, [pc, #304]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f0a:	f00a fd3d 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
34012f0e:	68a3      	ldr	r3, [r4, #8]
34012f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34012f14:	d304      	bcc.n	34012f20 <HAL_I2C_Init+0x60>
34012f16:	f240 2127 	movw	r1, #551	@ 0x227
34012f1a:	4848      	ldr	r0, [pc, #288]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f1c:	f00a fd34 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
34012f20:	68e3      	ldr	r3, [r4, #12]
34012f22:	3b01      	subs	r3, #1
34012f24:	2b01      	cmp	r3, #1
34012f26:	d904      	bls.n	34012f32 <HAL_I2C_Init+0x72>
34012f28:	f44f 710a 	mov.w	r1, #552	@ 0x228
34012f2c:	4843      	ldr	r0, [pc, #268]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f2e:	f00a fd2b 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
34012f32:	6923      	ldr	r3, [r4, #16]
34012f34:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
34012f38:	d004      	beq.n	34012f44 <HAL_I2C_Init+0x84>
34012f3a:	f240 2129 	movw	r1, #553	@ 0x229
34012f3e:	483f      	ldr	r0, [pc, #252]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f40:	f00a fd22 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
34012f44:	6963      	ldr	r3, [r4, #20]
34012f46:	2bff      	cmp	r3, #255	@ 0xff
34012f48:	d904      	bls.n	34012f54 <HAL_I2C_Init+0x94>
34012f4a:	f240 212a 	movw	r1, #554	@ 0x22a
34012f4e:	483b      	ldr	r0, [pc, #236]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f50:	f00a fd1a 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
34012f54:	69a3      	ldr	r3, [r4, #24]
34012f56:	2b07      	cmp	r3, #7
34012f58:	d904      	bls.n	34012f64 <HAL_I2C_Init+0xa4>
34012f5a:	f240 212b 	movw	r1, #555	@ 0x22b
34012f5e:	4837      	ldr	r0, [pc, #220]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f60:	f00a fd12 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
34012f64:	69e3      	ldr	r3, [r4, #28]
34012f66:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
34012f6a:	d004      	beq.n	34012f76 <HAL_I2C_Init+0xb6>
34012f6c:	f44f 710b 	mov.w	r1, #556	@ 0x22c
34012f70:	4832      	ldr	r0, [pc, #200]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f72:	f00a fd09 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
34012f76:	6a23      	ldr	r3, [r4, #32]
34012f78:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
34012f7c:	d004      	beq.n	34012f88 <HAL_I2C_Init+0xc8>
34012f7e:	f240 212d 	movw	r1, #557	@ 0x22d
34012f82:	482e      	ldr	r0, [pc, #184]	@ (3401303c <HAL_I2C_Init+0x17c>)
34012f84:	f00a fd00 	bl	3401d988 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
34012f88:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
34012f8c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34012f90:	b923      	cbnz	r3, 34012f9c <HAL_I2C_Init+0xdc>
    HAL_I2C_MspInit(hi2c);
34012f92:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
34012f94:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
34012f98:	f7ff ff91 	bl	34012ebe <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
34012f9c:	2324      	movs	r3, #36	@ 0x24
34012f9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
34012fa2:	6823      	ldr	r3, [r4, #0]
34012fa4:	681a      	ldr	r2, [r3, #0]
34012fa6:	f022 0201 	bic.w	r2, r2, #1
34012faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
34012fac:	6862      	ldr	r2, [r4, #4]
34012fae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
34012fb2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
34012fb4:	689a      	ldr	r2, [r3, #8]
34012fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34012fba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34012fbc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
34012fc0:	2901      	cmp	r1, #1
34012fc2:	d106      	bne.n	34012fd2 <HAL_I2C_Init+0x112>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34012fc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34012fc8:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34012fca:	685a      	ldr	r2, [r3, #4]
34012fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34012fd0:	e007      	b.n	34012fe2 <HAL_I2C_Init+0x122>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
34012fd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
34012fd6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
34012fd8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
34012fda:	d1f6      	bne.n	34012fca <HAL_I2C_Init+0x10a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34012fdc:	685a      	ldr	r2, [r3, #4]
34012fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34012fe2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34012fe4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34012fe6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34012fe8:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
34012fec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34012ff0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
34012ff2:	68da      	ldr	r2, [r3, #12]
34012ff4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34012ff8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34012ffa:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
34012ffe:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
34013000:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34013002:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
34013006:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
34013008:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
3401300c:	430a      	orrs	r2, r1
3401300e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
34013010:	681a      	ldr	r2, [r3, #0]
34013012:	f042 0201 	orr.w	r2, r2, #1
34013016:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
34013018:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3401301a:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
3401301c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
34013020:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
34013022:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
34013026:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34013028:	2001      	movs	r0, #1
3401302a:	e7fc      	b.n	34013026 <HAL_I2C_Init+0x166>
3401302c:	50005400 	.word	0x50005400
34013030:	50005800 	.word	0x50005800
34013034:	50005c00 	.word	0x50005c00
34013038:	56001c00 	.word	0x56001c00
3401303c:	34026911 	.word	0x34026911

34013040 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
34013040:	4770      	bx	lr
	...

34013044 <HAL_I2C_DeInit>:
{
34013044:	b510      	push	{r4, lr}
  if (hi2c == NULL)
34013046:	4604      	mov	r4, r0
34013048:	2800      	cmp	r0, #0
3401304a:	d036      	beq.n	340130ba <HAL_I2C_DeInit+0x76>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3401304c:	6803      	ldr	r3, [r0, #0]
3401304e:	4a1c      	ldr	r2, [pc, #112]	@ (340130c0 <HAL_I2C_DeInit+0x7c>)
34013050:	4293      	cmp	r3, r2
34013052:	d01d      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
34013054:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013058:	4293      	cmp	r3, r2
3401305a:	d019      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
3401305c:	4a19      	ldr	r2, [pc, #100]	@ (340130c4 <HAL_I2C_DeInit+0x80>)
3401305e:	4293      	cmp	r3, r2
34013060:	d016      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
34013062:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013066:	4293      	cmp	r3, r2
34013068:	d012      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
3401306a:	4a17      	ldr	r2, [pc, #92]	@ (340130c8 <HAL_I2C_DeInit+0x84>)
3401306c:	4293      	cmp	r3, r2
3401306e:	d00f      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
34013070:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013074:	4293      	cmp	r3, r2
34013076:	d00b      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
34013078:	4a14      	ldr	r2, [pc, #80]	@ (340130cc <HAL_I2C_DeInit+0x88>)
3401307a:	4293      	cmp	r3, r2
3401307c:	d008      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
3401307e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013082:	4293      	cmp	r3, r2
34013084:	d004      	beq.n	34013090 <HAL_I2C_DeInit+0x4c>
34013086:	f240 2199 	movw	r1, #665	@ 0x299
3401308a:	4811      	ldr	r0, [pc, #68]	@ (340130d0 <HAL_I2C_DeInit+0x8c>)
3401308c:	f00a fc7c 	bl	3401d988 <assert_failed>
  hi2c->State = HAL_I2C_STATE_BUSY;
34013090:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
34013092:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
34013094:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
34013098:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
3401309a:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE(hi2c);
3401309c:	f023 0301 	bic.w	r3, r3, #1
340130a0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
340130a2:	f7ff ffcd 	bl	34013040 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340130a6:	2000      	movs	r0, #0
340130a8:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
340130aa:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
340130ae:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
340130b2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
340130b4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
340130b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340130ba:	2001      	movs	r0, #1
340130bc:	e7fc      	b.n	340130b8 <HAL_I2C_DeInit+0x74>
340130be:	bf00      	nop
340130c0:	50005400 	.word	0x50005400
340130c4:	50005800 	.word	0x50005800
340130c8:	50005c00 	.word	0x50005c00
340130cc:	56001c00 	.word	0x56001c00
340130d0:	34026911 	.word	0x34026911

340130d4 <HAL_I2C_Mem_Write>:
{
340130d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
340130d8:	4699      	mov	r9, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
340130da:	3b01      	subs	r3, #1
340130dc:	2b01      	cmp	r3, #1
{
340130de:	4604      	mov	r4, r0
340130e0:	460f      	mov	r7, r1
340130e2:	4616      	mov	r6, r2
340130e4:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
340130e8:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
340130ec:	d904      	bls.n	340130f8 <HAL_I2C_Mem_Write+0x24>
340130ee:	f640 2138 	movw	r1, #2616	@ 0xa38
340130f2:	4868      	ldr	r0, [pc, #416]	@ (34013294 <HAL_I2C_Mem_Write+0x1c0>)
340130f4:	f00a fc48 	bl	3401d988 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
340130f8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
340130fc:	2b20      	cmp	r3, #32
340130fe:	f040 80c6 	bne.w	3401328e <HAL_I2C_Mem_Write+0x1ba>
    if ((pData == NULL) || (Size == 0U))
34013102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34013104:	b113      	cbz	r3, 3401310c <HAL_I2C_Mem_Write+0x38>
34013106:	f1ba 0f00 	cmp.w	sl, #0
3401310a:	d106      	bne.n	3401311a <HAL_I2C_Mem_Write+0x46>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
3401310c:	f44f 7300 	mov.w	r3, #512	@ 0x200
34013110:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
34013112:	2001      	movs	r0, #1
}
34013114:	b003      	add	sp, #12
34013116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
3401311a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
3401311e:	2b01      	cmp	r3, #1
34013120:	f000 80b5 	beq.w	3401328e <HAL_I2C_Mem_Write+0x1ba>
34013124:	f04f 0b01 	mov.w	fp, #1
34013128:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
3401312c:	f00a f8fc 	bl	3401d328 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34013130:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
34013132:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34013134:	9000      	str	r0, [sp, #0]
34013136:	465a      	mov	r2, fp
34013138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3401313c:	4620      	mov	r0, r4
3401313e:	f7ff fe5a 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
34013142:	2800      	cmp	r0, #0
34013144:	d1e5      	bne.n	34013112 <HAL_I2C_Mem_Write+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
34013146:	2321      	movs	r3, #33	@ 0x21
34013148:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
3401314c:	2340      	movs	r3, #64	@ 0x40
3401314e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
34013152:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
34013154:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
34013156:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
34013158:	4b4f      	ldr	r3, [pc, #316]	@ (34013298 <HAL_I2C_Mem_Write+0x1c4>)
    hi2c->XferISR   = NULL;
3401315a:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
3401315c:	4639      	mov	r1, r7
3401315e:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
34013160:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
34013164:	fa5f f289 	uxtb.w	r2, r9
34013168:	9300      	str	r3, [sp, #0]
3401316a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3401316e:	f7ff fd31 	bl	34012bd4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34013172:	462a      	mov	r2, r5
34013174:	4641      	mov	r1, r8
34013176:	4620      	mov	r0, r4
34013178:	f7ff fe12 	bl	34012da0 <I2C_WaitOnTXISFlagUntilTimeout>
3401317c:	bb18      	cbnz	r0, 340131c6 <HAL_I2C_Mem_Write+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3401317e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34013182:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34013184:	d115      	bne.n	340131b2 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34013186:	b2f6      	uxtb	r6, r6
34013188:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
3401318a:	2200      	movs	r2, #0
3401318c:	4643      	mov	r3, r8
3401318e:	2180      	movs	r1, #128	@ 0x80
34013190:	4620      	mov	r0, r4
34013192:	9500      	str	r5, [sp, #0]
34013194:	f7ff fe2f 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
34013198:	b9a8      	cbnz	r0, 340131c6 <HAL_I2C_Mem_Write+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
3401319a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
3401319c:	b29b      	uxth	r3, r3
3401319e:	2bff      	cmp	r3, #255	@ 0xff
340131a0:	d815      	bhi.n	340131ce <HAL_I2C_Mem_Write+0xfa>
      hi2c->XferSize = hi2c->XferCount;
340131a2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
340131a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
340131a8:	b292      	uxth	r2, r2
340131aa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
340131ac:	9000      	str	r0, [sp, #0]
340131ae:	b2d2      	uxtb	r2, r2
340131b0:	e012      	b.n	340131d8 <HAL_I2C_Mem_Write+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
340131b2:	0a32      	lsrs	r2, r6, #8
340131b4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
340131b6:	4641      	mov	r1, r8
340131b8:	462a      	mov	r2, r5
340131ba:	4620      	mov	r0, r4
340131bc:	f7ff fdf0 	bl	34012da0 <I2C_WaitOnTXISFlagUntilTimeout>
340131c0:	b908      	cbnz	r0, 340131c6 <HAL_I2C_Mem_Write+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
340131c2:	6823      	ldr	r3, [r4, #0]
340131c4:	e7df      	b.n	34013186 <HAL_I2C_Mem_Write+0xb2>
      __HAL_UNLOCK(hi2c);
340131c6:	2300      	movs	r3, #0
340131c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
340131cc:	e7a1      	b.n	34013112 <HAL_I2C_Mem_Write+0x3e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
340131ce:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
340131d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
340131d4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
340131d6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
340131d8:	4639      	mov	r1, r7
340131da:	4620      	mov	r0, r4
340131dc:	f7ff fcfa 	bl	34012bd4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
340131e0:	462a      	mov	r2, r5
340131e2:	4641      	mov	r1, r8
340131e4:	4620      	mov	r0, r4
340131e6:	f7ff fddb 	bl	34012da0 <I2C_WaitOnTXISFlagUntilTimeout>
340131ea:	2800      	cmp	r0, #0
340131ec:	d191      	bne.n	34013112 <HAL_I2C_Mem_Write+0x3e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
340131ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340131f0:	6822      	ldr	r2, [r4, #0]
340131f2:	f813 1b01 	ldrb.w	r1, [r3], #1
340131f6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
340131f8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
340131fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340131fc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
340131fe:	3b01      	subs	r3, #1
34013200:	b29b      	uxth	r3, r3
34013202:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34013204:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
34013206:	3a01      	subs	r2, #1
34013208:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
3401320a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
3401320c:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
3401320e:	b1b3      	cbz	r3, 3401323e <HAL_I2C_Mem_Write+0x16a>
34013210:	b9aa      	cbnz	r2, 3401323e <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
34013212:	4643      	mov	r3, r8
34013214:	2180      	movs	r1, #128	@ 0x80
34013216:	4620      	mov	r0, r4
34013218:	9500      	str	r5, [sp, #0]
3401321a:	f7ff fdec 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
3401321e:	2800      	cmp	r0, #0
34013220:	f47f af77 	bne.w	34013112 <HAL_I2C_Mem_Write+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
34013224:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34013226:	b29b      	uxth	r3, r3
34013228:	2bff      	cmp	r3, #255	@ 0xff
3401322a:	d928      	bls.n	3401327e <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
3401322c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
3401322e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
34013232:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
34013234:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013236:	4639      	mov	r1, r7
34013238:	4620      	mov	r0, r4
3401323a:	f7ff fccb 	bl	34012bd4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
3401323e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34013240:	b29b      	uxth	r3, r3
34013242:	2b00      	cmp	r3, #0
34013244:	d1cc      	bne.n	340131e0 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
34013246:	462a      	mov	r2, r5
34013248:	4641      	mov	r1, r8
3401324a:	4620      	mov	r0, r4
3401324c:	f7ff fe0e 	bl	34012e6c <I2C_WaitOnSTOPFlagUntilTimeout>
34013250:	2800      	cmp	r0, #0
34013252:	f47f af5e 	bne.w	34013112 <HAL_I2C_Mem_Write+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34013256:	2120      	movs	r1, #32
34013258:	6823      	ldr	r3, [r4, #0]
3401325a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
3401325c:	685a      	ldr	r2, [r3, #4]
3401325e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
34013262:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
34013266:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
3401326a:	f022 0201 	bic.w	r2, r2, #1
3401326e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
34013270:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
34013274:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34013278:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
3401327c:	e74a      	b.n	34013114 <HAL_I2C_Mem_Write+0x40>
          hi2c->XferSize = hi2c->XferCount;
3401327e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013280:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
34013284:	b292      	uxth	r2, r2
34013286:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013288:	9000      	str	r0, [sp, #0]
3401328a:	b2d2      	uxtb	r2, r2
3401328c:	e7d3      	b.n	34013236 <HAL_I2C_Mem_Write+0x162>
    __HAL_LOCK(hi2c);
3401328e:	2002      	movs	r0, #2
34013290:	e740      	b.n	34013114 <HAL_I2C_Mem_Write+0x40>
34013292:	bf00      	nop
34013294:	34026911 	.word	0x34026911
34013298:	80002000 	.word	0x80002000

3401329c <HAL_I2C_Mem_Read>:
{
3401329c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
340132a0:	4699      	mov	r9, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
340132a2:	3b01      	subs	r3, #1
340132a4:	2b01      	cmp	r3, #1
{
340132a6:	4604      	mov	r4, r0
340132a8:	460f      	mov	r7, r1
340132aa:	4616      	mov	r6, r2
340132ac:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
340132b0:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
340132b4:	d904      	bls.n	340132c0 <HAL_I2C_Mem_Read+0x24>
340132b6:	f640 21c1 	movw	r1, #2753	@ 0xac1
340132ba:	4869      	ldr	r0, [pc, #420]	@ (34013460 <HAL_I2C_Mem_Read+0x1c4>)
340132bc:	f00a fb64 	bl	3401d988 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
340132c0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
340132c4:	2b20      	cmp	r3, #32
340132c6:	f040 80c9 	bne.w	3401345c <HAL_I2C_Mem_Read+0x1c0>
    if ((pData == NULL) || (Size == 0U))
340132ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
340132cc:	b113      	cbz	r3, 340132d4 <HAL_I2C_Mem_Read+0x38>
340132ce:	f1ba 0f00 	cmp.w	sl, #0
340132d2:	d106      	bne.n	340132e2 <HAL_I2C_Mem_Read+0x46>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
340132d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
340132d8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
340132da:	2001      	movs	r0, #1
}
340132dc:	b003      	add	sp, #12
340132de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
340132e2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
340132e6:	2b01      	cmp	r3, #1
340132e8:	f000 80b8 	beq.w	3401345c <HAL_I2C_Mem_Read+0x1c0>
340132ec:	f04f 0b01 	mov.w	fp, #1
340132f0:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
340132f4:	f00a f818 	bl	3401d328 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
340132f8:	2319      	movs	r3, #25
340132fa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
340132fc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
340132fe:	465a      	mov	r2, fp
34013300:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
34013304:	4620      	mov	r0, r4
34013306:	f7ff fd76 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
3401330a:	4603      	mov	r3, r0
3401330c:	2800      	cmp	r0, #0
3401330e:	d1e4      	bne.n	340132da <HAL_I2C_Mem_Read+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
34013310:	2222      	movs	r2, #34	@ 0x22
34013312:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
34013316:	2240      	movs	r2, #64	@ 0x40
34013318:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
3401331c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3401331e:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
34013320:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
34013322:	4a50      	ldr	r2, [pc, #320]	@ (34013464 <HAL_I2C_Mem_Read+0x1c8>)
    hi2c->XferISR   = NULL;
34013324:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
34013326:	4639      	mov	r1, r7
34013328:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
3401332a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
3401332e:	9200      	str	r2, [sp, #0]
34013330:	fa5f f289 	uxtb.w	r2, r9
34013334:	f7ff fc4e 	bl	34012bd4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34013338:	462a      	mov	r2, r5
3401333a:	4641      	mov	r1, r8
3401333c:	4620      	mov	r0, r4
3401333e:	f7ff fd2f 	bl	34012da0 <I2C_WaitOnTXISFlagUntilTimeout>
34013342:	bb20      	cbnz	r0, 3401338e <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34013344:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34013348:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3401334a:	d116      	bne.n	3401337a <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401334c:	b2f6      	uxtb	r6, r6
3401334e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
34013350:	2200      	movs	r2, #0
34013352:	4643      	mov	r3, r8
34013354:	2140      	movs	r1, #64	@ 0x40
34013356:	4620      	mov	r0, r4
34013358:	9500      	str	r5, [sp, #0]
3401335a:	f7ff fd4c 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
3401335e:	b9b0      	cbnz	r0, 3401338e <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
34013360:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34013362:	b29b      	uxth	r3, r3
34013364:	2bff      	cmp	r3, #255	@ 0xff
34013366:	4b40      	ldr	r3, [pc, #256]	@ (34013468 <HAL_I2C_Mem_Read+0x1cc>)
34013368:	d815      	bhi.n	34013396 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
3401336a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
3401336c:	b292      	uxth	r2, r2
3401336e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013370:	9300      	str	r3, [sp, #0]
34013372:	b2d2      	uxtb	r2, r2
34013374:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34013378:	e012      	b.n	340133a0 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
3401337a:	0a32      	lsrs	r2, r6, #8
3401337c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3401337e:	4641      	mov	r1, r8
34013380:	462a      	mov	r2, r5
34013382:	4620      	mov	r0, r4
34013384:	f7ff fd0c 	bl	34012da0 <I2C_WaitOnTXISFlagUntilTimeout>
34013388:	b908      	cbnz	r0, 3401338e <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401338a:	6823      	ldr	r3, [r4, #0]
3401338c:	e7de      	b.n	3401334c <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
3401338e:	2300      	movs	r3, #0
34013390:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
34013394:	e7a1      	b.n	340132da <HAL_I2C_Mem_Read+0x3e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
34013396:	22ff      	movs	r2, #255	@ 0xff
34013398:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
3401339a:	9300      	str	r3, [sp, #0]
3401339c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
340133a0:	4639      	mov	r1, r7
340133a2:	4620      	mov	r0, r4
340133a4:	f7ff fc16 	bl	34012bd4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
340133a8:	4643      	mov	r3, r8
340133aa:	2200      	movs	r2, #0
340133ac:	2104      	movs	r1, #4
340133ae:	4620      	mov	r0, r4
340133b0:	9500      	str	r5, [sp, #0]
340133b2:	f7ff fd20 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
340133b6:	2800      	cmp	r0, #0
340133b8:	d18f      	bne.n	340132da <HAL_I2C_Mem_Read+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
340133ba:	6823      	ldr	r3, [r4, #0]
340133bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
340133be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340133c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
340133c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
340133c4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
340133c6:	3301      	adds	r3, #1
340133c8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
340133ca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340133cc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
340133ce:	3b01      	subs	r3, #1
340133d0:	b29b      	uxth	r3, r3
340133d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340133d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
340133d6:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340133d8:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
340133da:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
340133dc:	b1b3      	cbz	r3, 3401340c <HAL_I2C_Mem_Read+0x170>
340133de:	b9aa      	cbnz	r2, 3401340c <HAL_I2C_Mem_Read+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
340133e0:	4643      	mov	r3, r8
340133e2:	2180      	movs	r1, #128	@ 0x80
340133e4:	4620      	mov	r0, r4
340133e6:	9500      	str	r5, [sp, #0]
340133e8:	f7ff fd05 	bl	34012df6 <I2C_WaitOnFlagUntilTimeout>
340133ec:	2800      	cmp	r0, #0
340133ee:	f47f af74 	bne.w	340132da <HAL_I2C_Mem_Read+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
340133f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340133f4:	b29b      	uxth	r3, r3
340133f6:	2bff      	cmp	r3, #255	@ 0xff
340133f8:	d928      	bls.n	3401344c <HAL_I2C_Mem_Read+0x1b0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
340133fa:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
340133fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
34013400:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
34013402:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013404:	4639      	mov	r1, r7
34013406:	4620      	mov	r0, r4
34013408:	f7ff fbe4 	bl	34012bd4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
3401340c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
3401340e:	b29b      	uxth	r3, r3
34013410:	2b00      	cmp	r3, #0
34013412:	d1c9      	bne.n	340133a8 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
34013414:	462a      	mov	r2, r5
34013416:	4641      	mov	r1, r8
34013418:	4620      	mov	r0, r4
3401341a:	f7ff fd27 	bl	34012e6c <I2C_WaitOnSTOPFlagUntilTimeout>
3401341e:	2800      	cmp	r0, #0
34013420:	f47f af5b 	bne.w	340132da <HAL_I2C_Mem_Read+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34013424:	2120      	movs	r1, #32
34013426:	6823      	ldr	r3, [r4, #0]
34013428:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
3401342a:	685a      	ldr	r2, [r3, #4]
3401342c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
34013430:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
34013434:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
34013438:	f022 0201 	bic.w	r2, r2, #1
3401343c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
3401343e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
34013442:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34013446:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
3401344a:	e747      	b.n	340132dc <HAL_I2C_Mem_Read+0x40>
          hi2c->XferSize = hi2c->XferCount;
3401344c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
3401344e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
34013452:	b292      	uxth	r2, r2
34013454:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34013456:	9000      	str	r0, [sp, #0]
34013458:	b2d2      	uxtb	r2, r2
3401345a:	e7d3      	b.n	34013404 <HAL_I2C_Mem_Read+0x168>
    __HAL_LOCK(hi2c);
3401345c:	2002      	movs	r0, #2
3401345e:	e73d      	b.n	340132dc <HAL_I2C_Mem_Read+0x40>
34013460:	34026911 	.word	0x34026911
34013464:	80002000 	.word	0x80002000
34013468:	80002400 	.word	0x80002400

3401346c <HAL_I2C_GetState>:
  return hi2c->State;
3401346c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
34013470:	4770      	bx	lr

34013472 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
34013472:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
34013474:	4770      	bx	lr
	...

34013478 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34013478:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3401347a:	4a27      	ldr	r2, [pc, #156]	@ (34013518 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
3401347c:	6803      	ldr	r3, [r0, #0]
{
3401347e:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013480:	4293      	cmp	r3, r2
{
34013482:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013484:	d01c      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013486:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401348a:	4293      	cmp	r3, r2
3401348c:	d018      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401348e:	4a23      	ldr	r2, [pc, #140]	@ (3401351c <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
34013490:	4293      	cmp	r3, r2
34013492:	d015      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34013494:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013498:	4293      	cmp	r3, r2
3401349a:	d011      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401349c:	4a20      	ldr	r2, [pc, #128]	@ (34013520 <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
3401349e:	4293      	cmp	r3, r2
340134a0:	d00e      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
340134a2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340134a6:	4293      	cmp	r3, r2
340134a8:	d00a      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
340134aa:	4a1e      	ldr	r2, [pc, #120]	@ (34013524 <HAL_I2CEx_ConfigAnalogFilter+0xac>)
340134ac:	4293      	cmp	r3, r2
340134ae:	d007      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
340134b0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340134b4:	4293      	cmp	r3, r2
340134b6:	d003      	beq.n	340134c0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
340134b8:	2162      	movs	r1, #98	@ 0x62
340134ba:	481b      	ldr	r0, [pc, #108]	@ (34013528 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
340134bc:	f00a fa64 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
340134c0:	f435 5380 	bics.w	r3, r5, #4096	@ 0x1000
340134c4:	d003      	beq.n	340134ce <HAL_I2CEx_ConfigAnalogFilter+0x56>
340134c6:	2163      	movs	r1, #99	@ 0x63
340134c8:	4817      	ldr	r0, [pc, #92]	@ (34013528 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
340134ca:	f00a fa5d 	bl	3401d988 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
340134ce:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
340134d2:	2b20      	cmp	r3, #32
340134d4:	b2d9      	uxtb	r1, r3
340134d6:	d11c      	bne.n	34013512 <HAL_I2CEx_ConfigAnalogFilter+0x9a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
340134d8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
340134dc:	2b01      	cmp	r3, #1
340134de:	d018      	beq.n	34013512 <HAL_I2CEx_ConfigAnalogFilter+0x9a>

    hi2c->State = HAL_I2C_STATE_BUSY;
340134e0:	2324      	movs	r3, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
340134e2:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
340134e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
340134e8:	6823      	ldr	r3, [r4, #0]
340134ea:	681a      	ldr	r2, [r3, #0]
340134ec:	f022 0201 	bic.w	r2, r2, #1
340134f0:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
340134f2:	681a      	ldr	r2, [r3, #0]
340134f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
340134f8:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
340134fa:	681a      	ldr	r2, [r3, #0]
340134fc:	432a      	orrs	r2, r5
340134fe:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
34013500:	681a      	ldr	r2, [r3, #0]
34013502:	f042 0201 	orr.w	r2, r2, #1
34013506:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
34013508:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
3401350c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
34013510:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
34013512:	2002      	movs	r0, #2
34013514:	e7fc      	b.n	34013510 <HAL_I2CEx_ConfigAnalogFilter+0x98>
34013516:	bf00      	nop
34013518:	50005400 	.word	0x50005400
3401351c:	50005800 	.word	0x50005800
34013520:	50005c00 	.word	0x50005c00
34013524:	56001c00 	.word	0x56001c00
34013528:	34026971 	.word	0x34026971

3401352c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
3401352c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3401352e:	4a26      	ldr	r2, [pc, #152]	@ (340135c8 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
34013530:	6803      	ldr	r3, [r0, #0]
{
34013532:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013534:	4293      	cmp	r3, r2
{
34013536:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013538:	d01c      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
3401353a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401353e:	4293      	cmp	r3, r2
34013540:	d018      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013542:	4a22      	ldr	r2, [pc, #136]	@ (340135cc <HAL_I2CEx_ConfigDigitalFilter+0xa0>)
34013544:	4293      	cmp	r3, r2
34013546:	d015      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013548:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401354c:	4293      	cmp	r3, r2
3401354e:	d011      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013550:	4a1f      	ldr	r2, [pc, #124]	@ (340135d0 <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
34013552:	4293      	cmp	r3, r2
34013554:	d00e      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013556:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401355a:	4293      	cmp	r3, r2
3401355c:	d00a      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
3401355e:	4a1d      	ldr	r2, [pc, #116]	@ (340135d4 <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
34013560:	4293      	cmp	r3, r2
34013562:	d007      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
34013564:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013568:	4293      	cmp	r3, r2
3401356a:	d003      	beq.n	34013574 <HAL_I2CEx_ConfigDigitalFilter+0x48>
3401356c:	2190      	movs	r1, #144	@ 0x90
3401356e:	481a      	ldr	r0, [pc, #104]	@ (340135d8 <HAL_I2CEx_ConfigDigitalFilter+0xac>)
34013570:	f00a fa0a 	bl	3401d988 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
34013574:	2d0f      	cmp	r5, #15
34013576:	d903      	bls.n	34013580 <HAL_I2CEx_ConfigDigitalFilter+0x54>
34013578:	2191      	movs	r1, #145	@ 0x91
3401357a:	4817      	ldr	r0, [pc, #92]	@ (340135d8 <HAL_I2CEx_ConfigDigitalFilter+0xac>)
3401357c:	f00a fa04 	bl	3401d988 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
34013580:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
34013584:	2b20      	cmp	r3, #32
34013586:	b2d8      	uxtb	r0, r3
34013588:	d11b      	bne.n	340135c2 <HAL_I2CEx_ConfigDigitalFilter+0x96>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
3401358a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
3401358e:	2b01      	cmp	r3, #1
34013590:	d017      	beq.n	340135c2 <HAL_I2CEx_ConfigDigitalFilter+0x96>

    hi2c->State = HAL_I2C_STATE_BUSY;
34013592:	2324      	movs	r3, #36	@ 0x24
34013594:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34013598:	6823      	ldr	r3, [r4, #0]
3401359a:	681a      	ldr	r2, [r3, #0]
3401359c:	f022 0201 	bic.w	r2, r2, #1
340135a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
340135a2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
340135a4:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
340135a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
340135ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
340135ae:	681a      	ldr	r2, [r3, #0]
340135b0:	f042 0201 	orr.w	r2, r2, #1
340135b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
340135b6:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
340135ba:	2000      	movs	r0, #0
340135bc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
340135c0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
340135c2:	2002      	movs	r0, #2
340135c4:	e7fc      	b.n	340135c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>
340135c6:	bf00      	nop
340135c8:	50005400 	.word	0x50005400
340135cc:	50005800 	.word	0x50005800
340135d0:	50005c00 	.word	0x50005c00
340135d4:	56001c00 	.word	0x56001c00
340135d8:	34026971 	.word	0x34026971

340135dc <LTDC_SetConfig>:
  *       This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, uint32_t Aux0Addr, uint32_t Aux1Addr, uint32_t Mirror,
                           uint32_t LayerIdx)
{
340135dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t stride;
  uint32_t tmp;

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340135e0:	2634      	movs	r6, #52	@ 0x34
{
340135e2:	b087      	sub	sp, #28
340135e4:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340135e8:	6804      	ldr	r4, [r0, #0]
340135ea:	fb06 060c 	mla	r6, r6, ip, r0

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340135ee:	f8d6 e048 	ldr.w	lr, [r6, #72]	@ 0x48
{
340135f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
340135f6:	6e75      	ldr	r5, [r6, #100]	@ 0x64
340135f8:	f10c 0301 	add.w	r3, ip, #1
340135fc:	eb04 2303 	add.w	r3, r4, r3, lsl #8
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013600:	f1be 0f03 	cmp.w	lr, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
34013604:	63dd      	str	r5, [r3, #60]	@ 0x3c
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013606:	d84c      	bhi.n	340136a2 <LTDC_SetConfig+0xc6>
  {
    case LTDC_PIXEL_FORMAT_ARGB8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_ABGR8888:
    case LTDC_PIXEL_FORMAT_RGBA8888:
      stride = 4U;
34013608:	2604      	movs	r6, #4
      stride = 1U;
      break;
  }

  /* Configure the horizontal start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
3401360a:	2734      	movs	r7, #52	@ 0x34
3401360c:	fb07 000c 	mla	r0, r7, ip, r0
34013610:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34013614:	f8d0 b038 	ldr.w	fp, [r0, #56]	@ 0x38
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
34013618:	68e7      	ldr	r7, [r4, #12]
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
3401361a:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
3401361e:	f10b 0901 	add.w	r9, fp, #1
34013622:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
34013626:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
3401362a:	444f      	add	r7, r9
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
3401362c:	44c4      	add	ip, r8
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
3401362e:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
34013632:	611f      	str	r7, [r3, #16]

  /* Configure the vertical start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013634:	6c47      	ldr	r7, [r0, #68]	@ 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34013636:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013638:	9704      	str	r7, [sp, #16]
3401363a:	68e7      	ldr	r7, [r4, #12]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
3401363c:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
3401363e:	9205      	str	r2, [sp, #20]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34013640:	f3c4 0c0b 	ubfx	ip, r4, #0, #12
34013644:	1c54      	adds	r4, r2, #1
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
34013646:	9a04      	ldr	r2, [sp, #16]
34013648:	f3c7 070b 	ubfx	r7, r7, #0, #12
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
3401364c:	4464      	add	r4, ip
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
3401364e:	4417      	add	r7, r2
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
34013650:	ea44 4407 	orr.w	r4, r4, r7, lsl #16

  if (Mirror == LTDC_MIRROR_NONE)
  {
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013654:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
34013656:	615c      	str	r4, [r3, #20]
        /* Configure the auxiliary frame buffer address 1 */
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;

        /* Configure the buffer length */
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
34013658:	eba8 040b 	sub.w	r4, r8, fp
        break;
    }

    /* Configure the color frame buffer pitch in byte */
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0) *
3401365c:	fb04 f906 	mul.w	r9, r4, r6
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013660:	9201      	str	r2, [sp, #4]
  if (Mirror == LTDC_MIRROR_NONE)
34013662:	9a03      	ldr	r2, [sp, #12]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34013664:	6e00      	ldr	r0, [r0, #96]	@ 0x60
  if (Mirror == LTDC_MIRROR_NONE)
34013666:	2a03      	cmp	r2, #3
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34013668:	fb00 fc06 	mul.w	ip, r0, r6
                                            stride)  + 7U));
3401366c:	f109 0a07 	add.w	sl, r9, #7
  if (Mirror == LTDC_MIRROR_NONE)
34013670:	d145      	bne.n	340136fe <LTDC_SetConfig+0x122>
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013672:	f240 160d 	movw	r6, #269	@ 0x10d
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34013676:	9a01      	ldr	r2, [sp, #4]
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013678:	45b6      	cmp	lr, r6
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
3401367a:	635a      	str	r2, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3401367c:	d02a      	beq.n	340136d4 <LTDC_SetConfig+0xf8>
3401367e:	f240 260d 	movw	r6, #525	@ 0x20d
34013682:	45b6      	cmp	lr, r6
34013684:	d031      	beq.n	340136ea <LTDC_SetConfig+0x10e>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34013686:	ea4a 420c 	orr.w	r2, sl, ip, lsl #16
3401368a:	639a      	str	r2, [r3, #56]	@ 0x38
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable LTDC_Layer by setting LEN bit */
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
3401368c:	68da      	ldr	r2, [r3, #12]
3401368e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34013692:	f022 0201 	bic.w	r2, r2, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable horizontal mirroring bit & LTDC_Layer by setting LEN bit */
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34013696:	f042 0201 	orr.w	r2, r2, #1
3401369a:	60da      	str	r2, [r3, #12]
  }
}
3401369c:	b007      	add	sp, #28
3401369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340136a2:	f1ae 0704 	sub.w	r7, lr, #4
340136a6:	2f09      	cmp	r7, #9
340136a8:	f04f 0601 	mov.w	r6, #1
340136ac:	d8ad      	bhi.n	3401360a <LTDC_SetConfig+0x2e>
340136ae:	f240 299b 	movw	r9, #667	@ 0x29b
340136b2:	fa06 f807 	lsl.w	r8, r6, r7
340136b6:	ea18 0f09 	tst.w	r8, r9
340136ba:	d107      	bne.n	340136cc <LTDC_SetConfig+0xf0>
340136bc:	2f02      	cmp	r7, #2
340136be:	d007      	beq.n	340136d0 <LTDC_SetConfig+0xf4>
340136c0:	2f08      	cmp	r7, #8
340136c2:	d1a2      	bne.n	3401360a <LTDC_SetConfig+0x2e>
      stride = (((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos);
340136c4:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
340136c6:	f3c6 4682 	ubfx	r6, r6, #18, #3
      break;
340136ca:	e79e      	b.n	3401360a <LTDC_SetConfig+0x2e>
      stride = 2U;
340136cc:	2602      	movs	r6, #2
340136ce:	e79c      	b.n	3401360a <LTDC_SetConfig+0x2e>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340136d0:	2603      	movs	r6, #3
340136d2:	e79a      	b.n	3401360a <LTDC_SetConfig+0x2e>
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
340136d4:	f108 0207 	add.w	r2, r8, #7
340136d8:	eba2 020b 	sub.w	r2, r2, fp
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
340136dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
340136e0:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
340136e2:	649a      	str	r2, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
340136e4:	086d      	lsrs	r5, r5, #1
340136e6:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
340136e8:	e7cd      	b.n	34013686 <LTDC_SetConfig+0xaa>
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
340136ea:	0864      	lsrs	r4, r4, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
340136ec:	9a02      	ldr	r2, [sp, #8]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
340136ee:	0840      	lsrs	r0, r0, #1
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
340136f0:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
340136f2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
340136f6:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
340136f8:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
340136fa:	649c      	str	r4, [r3, #72]	@ 0x48
340136fc:	e7f2      	b.n	340136e4 <LTDC_SetConfig+0x108>
  else if (Mirror == LTDC_MIRROR_HORIZONTAL)
340136fe:	9a03      	ldr	r2, [sp, #12]
34013700:	bb3a      	cbnz	r2, 34013752 <LTDC_SetConfig+0x176>
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34013702:	9a01      	ldr	r2, [sp, #4]
34013704:	1e57      	subs	r7, r2, #1
34013706:	444f      	add	r7, r9
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34013708:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3401370a:	f240 170d 	movw	r7, #269	@ 0x10d
3401370e:	45be      	cmp	lr, r7
34013710:	d00a      	beq.n	34013728 <LTDC_SetConfig+0x14c>
34013712:	f240 270d 	movw	r7, #525	@ 0x20d
34013716:	45be      	cmp	lr, r7
34013718:	d010      	beq.n	3401373c <LTDC_SetConfig+0x160>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
3401371a:	ea4a 420c 	orr.w	r2, sl, ip, lsl #16
3401371e:	639a      	str	r2, [r3, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34013720:	68da      	ldr	r2, [r3, #12]
34013722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34013726:	e7b6      	b.n	34013696 <LTDC_SetConfig+0xba>
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34013728:	3901      	subs	r1, #1
3401372a:	4449      	add	r1, r9
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3401372c:	6419      	str	r1, [r3, #64]	@ 0x40
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
3401372e:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013730:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34013734:	086d      	lsrs	r5, r5, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013736:	649c      	str	r4, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34013738:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
3401373a:	e7ee      	b.n	3401371a <LTDC_SetConfig+0x13e>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
3401373c:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
3401373e:	4366      	muls	r6, r4
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013740:	9a02      	ldr	r2, [sp, #8]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013742:	3901      	subs	r1, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013744:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013746:	4431      	add	r1, r6
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34013748:	4432      	add	r2, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
3401374a:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
3401374c:	0840      	lsrs	r0, r0, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
3401374e:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34013750:	e7ed      	b.n	3401372e <LTDC_SetConfig+0x152>
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34013752:	e9dd 2704 	ldrd	r2, r7, [sp, #16]
34013756:	eba2 0807 	sub.w	r8, r2, r7
  else if (Mirror == LTDC_MIRROR_VERTICAL)
3401375a:	9a03      	ldr	r2, [sp, #12]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
3401375c:	f5cc 4c00 	rsb	ip, ip, #32768	@ 0x8000
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34013760:	2a01      	cmp	r2, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34013762:	ea4a 4c0c 	orr.w	ip, sl, ip, lsl #16
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34013766:	d131      	bne.n	340137cc <LTDC_SetConfig+0x1f0>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34013768:	9a01      	ldr	r2, [sp, #4]
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
3401376a:	f108 3aff 	add.w	sl, r8, #4294967295
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
3401376e:	fb09 270a 	mla	r7, r9, sl, r2
34013772:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013774:	f240 170d 	movw	r7, #269	@ 0x10d
34013778:	45be      	cmp	lr, r7
3401377a:	d006      	beq.n	3401378a <LTDC_SetConfig+0x1ae>
3401377c:	f240 270d 	movw	r7, #525	@ 0x20d
34013780:	45be      	cmp	lr, r7
34013782:	d00d      	beq.n	340137a0 <LTDC_SetConfig+0x1c4>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34013784:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
34013788:	e780      	b.n	3401368c <LTDC_SetConfig+0xb0>
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
3401378a:	ea4f 0258 	mov.w	r2, r8, lsr #1
3401378e:	3a01      	subs	r2, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013790:	fb09 1202 	mla	r2, r9, r2, r1
34013794:	641a      	str	r2, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34013796:	f8c3 c048 	str.w	ip, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
3401379a:	086d      	lsrs	r5, r5, #1
3401379c:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
3401379e:	e7f1      	b.n	34013784 <LTDC_SetConfig+0x1a8>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
340137a0:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
340137a2:	4374      	muls	r4, r6
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
340137a4:	ea4f 0858 	mov.w	r8, r8, lsr #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
340137a8:	0840      	lsrs	r0, r0, #1
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
340137aa:	f108 38ff 	add.w	r8, r8, #4294967295
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
340137ae:	f5c0 4000 	rsb	r0, r0, #32768	@ 0x8000
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
340137b2:	fb04 f808 	mul.w	r8, r4, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
340137b6:	4370      	muls	r0, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
340137b8:	9a02      	ldr	r2, [sp, #8]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
340137ba:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
340137bc:	4441      	add	r1, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
340137be:	4442      	add	r2, r8
                                               stride) << 16U) |
340137c0:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
340137c4:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
340137c6:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
340137c8:	649c      	str	r4, [r3, #72]	@ 0x48
340137ca:	e7e6      	b.n	3401379a <LTDC_SetConfig+0x1be>
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
340137cc:	9a01      	ldr	r2, [sp, #4]
340137ce:	1e57      	subs	r7, r2, #1
340137d0:	fb09 7708 	mla	r7, r9, r8, r7
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
340137d4:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340137d6:	f240 170d 	movw	r7, #269	@ 0x10d
340137da:	45be      	cmp	lr, r7
340137dc:	d006      	beq.n	340137ec <LTDC_SetConfig+0x210>
340137de:	f240 270d 	movw	r7, #525	@ 0x20d
340137e2:	45be      	cmp	lr, r7
340137e4:	d00d      	beq.n	34013802 <LTDC_SetConfig+0x226>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
340137e6:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
340137ea:	e799      	b.n	34013720 <LTDC_SetConfig+0x144>
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
340137ec:	ea4f 0858 	mov.w	r8, r8, lsr #1
340137f0:	3901      	subs	r1, #1
340137f2:	fb09 1108 	mla	r1, r9, r8, r1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
340137f6:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
340137f8:	f8c3 c048 	str.w	ip, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
340137fc:	086d      	lsrs	r5, r5, #1
340137fe:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34013800:	e7f1      	b.n	340137e6 <LTDC_SetConfig+0x20a>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34013802:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34013804:	4374      	muls	r4, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34013806:	0840      	lsrs	r0, r0, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013808:	ea4f 0858 	mov.w	r8, r8, lsr #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
3401380c:	f5c0 4000 	rsb	r0, r0, #32768	@ 0x8000
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34013810:	fb04 f808 	mul.w	r8, r4, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34013814:	4370      	muls	r0, r6
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013816:	9a02      	ldr	r2, [sp, #8]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013818:	3901      	subs	r1, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3401381a:	3a01      	subs	r2, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
3401381c:	3407      	adds	r4, #7
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
3401381e:	4442      	add	r2, r8
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34013820:	4441      	add	r1, r8
                                              << 16U) |
34013822:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34013826:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34013828:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
3401382a:	649c      	str	r4, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR &= ~(LTDC_L1AFBLNR_AFBLNBR);
3401382c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3401382e:	f36f 020f 	bfc	r2, #0, #16
34013832:	64da      	str	r2, [r3, #76]	@ 0x4c
34013834:	e7e2      	b.n	340137fc <LTDC_SetConfig+0x220>
	...

34013838 <LTDC_SetCompositionConfig>:

  /* Configure the default color values */
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013838:	6802      	ldr	r2, [r0, #0]
3401383a:	1c4b      	adds	r3, r1, #1
3401383c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
34013840:	2334      	movs	r3, #52	@ 0x34
34013842:	fb03 0101 	mla	r1, r3, r1, r0
34013846:	6d08      	ldr	r0, [r1, #80]	@ 0x50
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013848:	f891 3068 	ldrb.w	r3, [r1, #104]	@ 0x68
3401384c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
34013850:	f891 0069 	ldrb.w	r0, [r1, #105]	@ 0x69
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34013854:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
34013858:	f891 006a 	ldrb.w	r0, [r1, #106]	@ 0x6a
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
3401385c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34013860:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
34013862:	6a13      	ldr	r3, [r2, #32]
34013864:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34013868:	6213      	str	r3, [r2, #32]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (hltdc->LayerCfg[LayerIdx].Alpha);
3401386a:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
3401386c:	6213      	str	r3, [r2, #32]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BOR | LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
3401386e:	6a90      	ldr	r0, [r2, #40]	@ 0x28
34013870:	4b05      	ldr	r3, [pc, #20]	@ (34013888 <LTDC_SetCompositionConfig+0x50>)
34013872:	4003      	ands	r3, r0
34013874:	6293      	str	r3, [r2, #40]	@ 0x28
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34013876:	6a90      	ldr	r0, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34013878:	e9d1 3115 	ldrd	r3, r1, [r1, #84]	@ 0x54
3401387c:	430b      	orrs	r3, r1
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
3401387e:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34013882:	430b      	orrs	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34013884:	6293      	str	r3, [r2, #40]	@ 0x28
}
34013886:	4770      	bx	lr
34013888:	fffef8f8 	.word	0xfffef8f8

3401388c <LTDC_SetPredefFormat>:
  uint32_t BPOS = 0U;
  uint32_t GLEN = 0U;
  uint32_t GPOS = 0U;

  /* Specify Flex ARGB parameters according to pixel format */
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3401388c:	2334      	movs	r3, #52	@ 0x34
3401388e:	fb03 0301 	mla	r3, r3, r1, r0
34013892:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
{
34013894:	b5f0      	push	{r4, r5, r6, r7, lr}
34013896:	1fd4      	subs	r4, r2, #7
34013898:	2c04      	cmp	r4, #4
3401389a:	d823      	bhi.n	340138e4 <LTDC_SetPredefFormat+0x58>
3401389c:	4a16      	ldr	r2, [pc, #88]	@ (340138f8 <LTDC_SetPredefFormat+0x6c>)
3401389e:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 3401390c <LTDC_SetPredefFormat+0x80>
340138a2:	5d16      	ldrb	r6, [r2, r4]
340138a4:	4a15      	ldr	r2, [pc, #84]	@ (340138fc <LTDC_SetPredefFormat+0x70>)
340138a6:	4b16      	ldr	r3, [pc, #88]	@ (34013900 <LTDC_SetPredefFormat+0x74>)
340138a8:	5d17      	ldrb	r7, [r2, r4]
340138aa:	4a16      	ldr	r2, [pc, #88]	@ (34013904 <LTDC_SetPredefFormat+0x78>)
340138ac:	5d1b      	ldrb	r3, [r3, r4]
340138ae:	5d15      	ldrb	r5, [r2, r4]
340138b0:	4a15      	ldr	r2, [pc, #84]	@ (34013908 <LTDC_SetPredefFormat+0x7c>)
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
                                           APOS;
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
340138b2:	049b      	lsls	r3, r3, #18
340138b4:	5d12      	ldrb	r2, [r2, r4]
340138b6:	f81c 4004 	ldrb.w	r4, [ip, r4]
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
340138ba:	f101 0c01 	add.w	ip, r1, #1
340138be:	6801      	ldr	r1, [r0, #0]
340138c0:	2007      	movs	r0, #7
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
340138c2:	0252      	lsls	r2, r2, #9
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
340138c4:	eb02 3285 	add.w	r2, r2, r5, lsl #14
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
340138c8:	443a      	add	r2, r7
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
340138ca:	eb03 3385 	add.w	r3, r3, r5, lsl #14
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
340138ce:	eb01 210c 	add.w	r1, r1, ip, lsl #8
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
340138d2:	eb02 1246 	add.w	r2, r2, r6, lsl #5
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
340138d6:	4423      	add	r3, r4
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
340138d8:	61c8      	str	r0, [r1, #28]
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
340138da:	eb03 1345 	add.w	r3, r3, r5, lsl #5
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
340138de:	674a      	str	r2, [r1, #116]	@ 0x74
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = 0U;
340138e0:	678b      	str	r3, [r1, #120]	@ 0x78
                                           GPOS;
      break;
    default:
      break;
  }
}
340138e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340138e4:	2a06      	cmp	r2, #6
340138e6:	d8fc      	bhi.n	340138e2 <LTDC_SetPredefFormat+0x56>
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
340138e8:	6803      	ldr	r3, [r0, #0]
340138ea:	3101      	adds	r1, #1
340138ec:	eb03 2101 	add.w	r1, r3, r1, lsl #8
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
340138f0:	2300      	movs	r3, #0
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
340138f2:	61ca      	str	r2, [r1, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
340138f4:	674b      	str	r3, [r1, #116]	@ 0x74
340138f6:	e7f3      	b.n	340138e0 <LTDC_SetPredefFormat+0x54>
340138f8:	3409f7e0 	.word	0x3409f7e0
340138fc:	3409f7db 	.word	0x3409f7db
34013900:	3409f7e5 	.word	0x3409f7e5
34013904:	3409f7d6 	.word	0x3409f7d6
34013908:	3409f7d1 	.word	0x3409f7d1
3401390c:	3409f7cc 	.word	0x3409f7cc

34013910 <LTDC_RetrieveUserConfig.constprop.0>:
static void LTDC_RetrieveUserConfig(LTDC_HandleTypeDef *hltdc, uint32_t *Mirror, uint32_t *Aux0Addr,
34013910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34013914:	468c      	mov	ip, r1
34013916:	9907      	ldr	r1, [sp, #28]
  const uint32_t hmirror = ((LTDC_LAYER(hltdc, LayerIdx)->CR) & LTDC_LxCR_HMEN_Msk);
34013918:	6805      	ldr	r5, [r0, #0]
3401391a:	1c4c      	adds	r4, r1, #1
3401391c:	eb05 2504 	add.w	r5, r5, r4, lsl #8
34013920:	68ec      	ldr	r4, [r5, #12]
34013922:	f404 7e80 	and.w	lr, r4, #256	@ 0x100
  const uint32_t pitchSign = (LTDC_LAYER(hltdc, LayerIdx)->CFBLR & LTDC_LxCFBLR_CFBP) & LTDC_PITCH_SIGN_MSK;
34013926:	6bac      	ldr	r4, [r5, #56]	@ 0x38
34013928:	f004 4880 	and.w	r8, r4, #1073741824	@ 0x40000000
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3401392c:	2434      	movs	r4, #52	@ 0x34
3401392e:	fb04 0401 	mla	r4, r4, r1, r0
34013932:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
34013934:	2e03      	cmp	r6, #3
34013936:	d813      	bhi.n	34013960 <LTDC_RetrieveUserConfig.constprop.0+0x50>
      stride = 4U;
34013938:	2404      	movs	r4, #4
  if ((pitchSign == 0U) && (hmirror == 0U))
3401393a:	f1b8 0f00 	cmp.w	r8, #0
3401393e:	d153      	bne.n	340139e8 <LTDC_RetrieveUserConfig.constprop.0+0xd8>
34013940:	2734      	movs	r7, #52	@ 0x34
34013942:	f1be 0f00 	cmp.w	lr, #0
34013946:	d123      	bne.n	34013990 <LTDC_RetrieveUserConfig.constprop.0+0x80>
    *Mirror = LTDC_MIRROR_NONE;
34013948:	2403      	movs	r4, #3
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
3401394a:	fb07 0701 	mla	r7, r7, r1, r0
    *Mirror = LTDC_MIRROR_NONE;
3401394e:	f8cc 4000 	str.w	r4, [ip]
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34013952:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
    *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R;
34013954:	6c29      	ldr	r1, [r5, #64]	@ 0x40
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34013956:	65fc      	str	r4, [r7, #92]	@ 0x5c
    *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R;
34013958:	6011      	str	r1, [r2, #0]
    *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R;
3401395a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
3401395c:	601a      	str	r2, [r3, #0]
}
3401395e:	e02d      	b.n	340139bc <LTDC_RetrieveUserConfig.constprop.0+0xac>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013960:	3e04      	subs	r6, #4
34013962:	2e09      	cmp	r6, #9
34013964:	f04f 0401 	mov.w	r4, #1
34013968:	d8e7      	bhi.n	3401393a <LTDC_RetrieveUserConfig.constprop.0+0x2a>
3401396a:	f240 299b 	movw	r9, #667	@ 0x29b
3401396e:	fa04 f706 	lsl.w	r7, r4, r6
34013972:	ea17 0f09 	tst.w	r7, r9
34013976:	d107      	bne.n	34013988 <LTDC_RetrieveUserConfig.constprop.0+0x78>
34013978:	2e02      	cmp	r6, #2
3401397a:	d007      	beq.n	3401398c <LTDC_RetrieveUserConfig.constprop.0+0x7c>
3401397c:	2e08      	cmp	r6, #8
3401397e:	d1dc      	bne.n	3401393a <LTDC_RetrieveUserConfig.constprop.0+0x2a>
      stride = ((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos;
34013980:	6fac      	ldr	r4, [r5, #120]	@ 0x78
34013982:	f3c4 4482 	ubfx	r4, r4, #18, #3
      break;
34013986:	e7d8      	b.n	3401393a <LTDC_RetrieveUserConfig.constprop.0+0x2a>
      stride = 2U;
34013988:	2402      	movs	r4, #2
3401398a:	e7d6      	b.n	3401393a <LTDC_RetrieveUserConfig.constprop.0+0x2a>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3401398c:	2403      	movs	r4, #3
3401398e:	e7d4      	b.n	3401393a <LTDC_RetrieveUserConfig.constprop.0+0x2a>
    *Mirror = LTDC_MIRROR_HORIZONTAL;
34013990:	f8cc 8000 	str.w	r8, [ip]
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013994:	f240 1c0d 	movw	ip, #269	@ 0x10d
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013998:	fb07 0001 	mla	r0, r7, r1, r0
3401399c:	e9d0 710e 	ldrd	r7, r1, [r0, #56]	@ 0x38
340139a0:	1bc9      	subs	r1, r1, r7
340139a2:	fb04 f701 	mul.w	r7, r4, r1
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
340139a6:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) + 1U;
340139a8:	3601      	adds	r6, #1
340139aa:	1bf6      	subs	r6, r6, r7
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
340139ac:	65c6      	str	r6, [r0, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340139ae:	6c86      	ldr	r6, [r0, #72]	@ 0x48
340139b0:	4566      	cmp	r6, ip
340139b2:	d005      	beq.n	340139c0 <LTDC_RetrieveUserConfig.constprop.0+0xb0>
340139b4:	f240 270d 	movw	r7, #525	@ 0x20d
340139b8:	42be      	cmp	r6, r7
340139ba:	d006      	beq.n	340139ca <LTDC_RetrieveUserConfig.constprop.0+0xba>
}
340139bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
340139c0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                               hltdc->LayerCfg[LayerIdx].WindowX0)) + 1U;
340139c2:	3301      	adds	r3, #1
340139c4:	1bdb      	subs	r3, r3, r7
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
340139c6:	6013      	str	r3, [r2, #0]
        break;
340139c8:	e7f8      	b.n	340139bc <LTDC_RetrieveUserConfig.constprop.0+0xac>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
340139ca:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) + 1U;
340139cc:	0849      	lsrs	r1, r1, #1
340139ce:	3601      	adds	r6, #1
340139d0:	fb04 6111 	mls	r1, r4, r1, r6
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
340139d4:	6011      	str	r1, [r2, #0]
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - \
340139d6:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
                    (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
340139d8:	e9d0 010e 	ldrd	r0, r1, [r0, #56]	@ 0x38
340139dc:	1a09      	subs	r1, r1, r0
                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) + 1U;
340139de:	3201      	adds	r2, #1
340139e0:	0849      	lsrs	r1, r1, #1
340139e2:	fb04 2211 	mls	r2, r4, r1, r2
340139e6:	e7b9      	b.n	3401395c <LTDC_RetrieveUserConfig.constprop.0+0x4c>
  else if ((pitchSign != 0U) && (hmirror == 0U))
340139e8:	2634      	movs	r6, #52	@ 0x34
340139ea:	f1be 0f00 	cmp.w	lr, #0
340139ee:	d138      	bne.n	34013a62 <LTDC_RetrieveUserConfig.constprop.0+0x152>
    *Mirror = LTDC_MIRROR_VERTICAL;
340139f0:	2701      	movs	r7, #1
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
340139f2:	fb06 0601 	mla	r6, r6, r1, r0
    *Mirror = LTDC_MIRROR_VERTICAL;
340139f6:	f8cc 7000 	str.w	r7, [ip]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
340139fa:	e9d6 100e 	ldrd	r1, r0, [r6, #56]	@ 0x38
340139fe:	1a40      	subs	r0, r0, r1
34013a00:	fb00 fc04 	mul.w	ip, r0, r4
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013a04:	e9d6 1710 	ldrd	r1, r7, [r6, #64]	@ 0x40
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013a08:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013a0c:	1a79      	subs	r1, r7, r1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
34013a0e:	f101 3eff 	add.w	lr, r1, #4294967295
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013a12:	fb0c 871e 	mls	r7, ip, lr, r8
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a16:	f240 1e0d 	movw	lr, #269	@ 0x10d
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013a1a:	65f7      	str	r7, [r6, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a1c:	6cb7      	ldr	r7, [r6, #72]	@ 0x48
34013a1e:	4577      	cmp	r7, lr
34013a20:	d019      	beq.n	34013a56 <LTDC_RetrieveUserConfig.constprop.0+0x146>
34013a22:	f240 2c0d 	movw	ip, #525	@ 0x20d
34013a26:	4567      	cmp	r7, ip
34013a28:	d1c8      	bne.n	340139bc <LTDC_RetrieveUserConfig.constprop.0+0xac>
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013a2a:	0849      	lsrs	r1, r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013a2c:	0840      	lsrs	r0, r0, #1
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013a2e:	3901      	subs	r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013a30:	4341      	muls	r1, r0
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013a32:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
34013a34:	fb04 7111 	mls	r1, r4, r1, r7
34013a38:	6011      	str	r1, [r2, #0]
                                                           (((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013a3a:	e9d6 1210 	ldrd	r1, r2, [r6, #64]	@ 0x40
34013a3e:	1a52      	subs	r2, r2, r1
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013a40:	6c68      	ldr	r0, [r5, #68]	@ 0x44
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013a42:	0852      	lsrs	r2, r2, #1
                                                           ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013a44:	e9d6 510e 	ldrd	r5, r1, [r6, #56]	@ 0x38
34013a48:	1b49      	subs	r1, r1, r5
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013a4a:	3a01      	subs	r2, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013a4c:	0849      	lsrs	r1, r1, #1
34013a4e:	434a      	muls	r2, r1
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013a50:	fb04 0212 	mls	r2, r4, r2, r0
34013a54:	e782      	b.n	3401395c <LTDC_RetrieveUserConfig.constprop.0+0x4c>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013a56:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34013a58:	0849      	lsrs	r1, r1, #1
34013a5a:	3901      	subs	r1, #1
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013a5c:	fb0c 3311 	mls	r3, ip, r1, r3
34013a60:	e7b1      	b.n	340139c6 <LTDC_RetrieveUserConfig.constprop.0+0xb6>
    *Mirror = LTDC_MIRROR_HORIZONTAL_VERTICAL;
34013a62:	2702      	movs	r7, #2
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013a64:	fb06 0001 	mla	r0, r6, r1, r0
    *Mirror = LTDC_MIRROR_HORIZONTAL_VERTICAL;
34013a68:	f8cc 7000 	str.w	r7, [ip]
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013a6c:	f8d5 e034 	ldr.w	lr, [r5, #52]	@ 0x34
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013a70:	e9d0 610e 	ldrd	r6, r1, [r0, #56]	@ 0x38
34013a74:	1b89      	subs	r1, r1, r6
                                               (hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013a76:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
34013a7a:	1bf7      	subs	r7, r6, r7
                                                hltdc->LayerCfg[LayerIdx].WindowY0)) + 1U;
34013a7c:	f10e 0601 	add.w	r6, lr, #1
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a80:	f240 1e0d 	movw	lr, #269	@ 0x10d
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013a84:	fb01 fc04 	mul.w	ip, r1, r4
                                                hltdc->LayerCfg[LayerIdx].WindowY0)) + 1U;
34013a88:	fb07 661c 	mls	r6, r7, ip, r6
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34013a8c:	65c6      	str	r6, [r0, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34013a8e:	6c86      	ldr	r6, [r0, #72]	@ 0x48
34013a90:	4576      	cmp	r6, lr
34013a92:	d019      	beq.n	34013ac8 <LTDC_RetrieveUserConfig.constprop.0+0x1b8>
34013a94:	f240 2c0d 	movw	ip, #525	@ 0x20d
34013a98:	4566      	cmp	r6, ip
34013a9a:	d18f      	bne.n	340139bc <LTDC_RetrieveUserConfig.constprop.0+0xac>
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013a9c:	0849      	lsrs	r1, r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013a9e:	087f      	lsrs	r7, r7, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013aa0:	4379      	muls	r1, r7
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013aa2:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013aa4:	3601      	adds	r6, #1
34013aa6:	fb04 6111 	mls	r1, r4, r1, r6
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013aaa:	6011      	str	r1, [r2, #0]
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34013aac:	6c69      	ldr	r1, [r5, #68]	@ 0x44
                                                           ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34013aae:	e9d0 520e 	ldrd	r5, r2, [r0, #56]	@ 0x38
34013ab2:	1b52      	subs	r2, r2, r5
                                                           ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34013ab4:	e9d0 0510 	ldrd	r0, r5, [r0, #64]	@ 0x40
34013ab8:	1a28      	subs	r0, r5, r0
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013aba:	0852      	lsrs	r2, r2, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013abc:	0840      	lsrs	r0, r0, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34013abe:	4342      	muls	r2, r0
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013ac0:	3101      	adds	r1, #1
34013ac2:	fb04 1212 	mls	r2, r4, r2, r1
34013ac6:	e749      	b.n	3401395c <LTDC_RetrieveUserConfig.constprop.0+0x4c>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34013ac8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34013aca:	087f      	lsrs	r7, r7, #1
34013acc:	3301      	adds	r3, #1
34013ace:	fb0c 3317 	mls	r3, ip, r7, r3
34013ad2:	e778      	b.n	340139c6 <LTDC_RetrieveUserConfig.constprop.0+0xb6>

34013ad4 <HAL_LTDC_MspInit>:
}
34013ad4:	4770      	bx	lr
	...

34013ad8 <HAL_LTDC_Init>:
{
34013ad8:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
34013ada:	4604      	mov	r4, r0
34013adc:	2800      	cmp	r0, #0
34013ade:	f000 80c6 	beq.w	34013c6e <HAL_LTDC_Init+0x196>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
34013ae2:	6803      	ldr	r3, [r0, #0]
34013ae4:	4a63      	ldr	r2, [pc, #396]	@ (34013c74 <HAL_LTDC_Init+0x19c>)
34013ae6:	4293      	cmp	r3, r2
34013ae8:	d007      	beq.n	34013afa <HAL_LTDC_Init+0x22>
34013aea:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013aee:	4293      	cmp	r3, r2
34013af0:	d003      	beq.n	34013afa <HAL_LTDC_Init+0x22>
34013af2:	21f8      	movs	r1, #248	@ 0xf8
34013af4:	4860      	ldr	r0, [pc, #384]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013af6:	f009 ff47 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
34013afa:	6963      	ldr	r3, [r4, #20]
34013afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b00:	d303      	bcc.n	34013b0a <HAL_LTDC_Init+0x32>
34013b02:	21f9      	movs	r1, #249	@ 0xf9
34013b04:	485c      	ldr	r0, [pc, #368]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b06:	f009 ff3f 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
34013b0a:	69a3      	ldr	r3, [r4, #24]
34013b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b10:	d303      	bcc.n	34013b1a <HAL_LTDC_Init+0x42>
34013b12:	21fa      	movs	r1, #250	@ 0xfa
34013b14:	4858      	ldr	r0, [pc, #352]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b16:	f009 ff37 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
34013b1a:	69e3      	ldr	r3, [r4, #28]
34013b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b20:	d303      	bcc.n	34013b2a <HAL_LTDC_Init+0x52>
34013b22:	21fb      	movs	r1, #251	@ 0xfb
34013b24:	4854      	ldr	r0, [pc, #336]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b26:	f009 ff2f 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
34013b2a:	6a23      	ldr	r3, [r4, #32]
34013b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b30:	d303      	bcc.n	34013b3a <HAL_LTDC_Init+0x62>
34013b32:	21fc      	movs	r1, #252	@ 0xfc
34013b34:	4850      	ldr	r0, [pc, #320]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b36:	f009 ff27 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
34013b3a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34013b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b40:	d303      	bcc.n	34013b4a <HAL_LTDC_Init+0x72>
34013b42:	21fd      	movs	r1, #253	@ 0xfd
34013b44:	484c      	ldr	r0, [pc, #304]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b46:	f009 ff1f 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
34013b4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34013b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b50:	d303      	bcc.n	34013b5a <HAL_LTDC_Init+0x82>
34013b52:	21fe      	movs	r1, #254	@ 0xfe
34013b54:	4848      	ldr	r0, [pc, #288]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b56:	f009 ff17 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
34013b5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34013b5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b60:	d303      	bcc.n	34013b6a <HAL_LTDC_Init+0x92>
34013b62:	21ff      	movs	r1, #255	@ 0xff
34013b64:	4844      	ldr	r0, [pc, #272]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b66:	f009 ff0f 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
34013b6a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34013b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013b70:	d304      	bcc.n	34013b7c <HAL_LTDC_Init+0xa4>
34013b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
34013b76:	4840      	ldr	r0, [pc, #256]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b78:	f009 ff06 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
34013b7c:	6863      	ldr	r3, [r4, #4]
34013b7e:	f033 4300 	bics.w	r3, r3, #2147483648	@ 0x80000000
34013b82:	d004      	beq.n	34013b8e <HAL_LTDC_Init+0xb6>
34013b84:	f240 1101 	movw	r1, #257	@ 0x101
34013b88:	483b      	ldr	r0, [pc, #236]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b8a:	f009 fefd 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
34013b8e:	68a3      	ldr	r3, [r4, #8]
34013b90:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
34013b94:	d004      	beq.n	34013ba0 <HAL_LTDC_Init+0xc8>
34013b96:	f44f 7181 	mov.w	r1, #258	@ 0x102
34013b9a:	4837      	ldr	r0, [pc, #220]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013b9c:	f009 fef4 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
34013ba0:	68e3      	ldr	r3, [r4, #12]
34013ba2:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
34013ba6:	d004      	beq.n	34013bb2 <HAL_LTDC_Init+0xda>
34013ba8:	f240 1103 	movw	r1, #259	@ 0x103
34013bac:	4832      	ldr	r0, [pc, #200]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013bae:	f009 feeb 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
34013bb2:	6923      	ldr	r3, [r4, #16]
34013bb4:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
34013bb8:	d004      	beq.n	34013bc4 <HAL_LTDC_Init+0xec>
34013bba:	f44f 7182 	mov.w	r1, #260	@ 0x104
34013bbe:	482e      	ldr	r0, [pc, #184]	@ (34013c78 <HAL_LTDC_Init+0x1a0>)
34013bc0:	f009 fee2 	bl	3401d988 <assert_failed>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
34013bc4:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
34013bc8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34013bcc:	b923      	cbnz	r3, 34013bd8 <HAL_LTDC_Init+0x100>
    HAL_LTDC_MspInit(hltdc);
34013bce:	4620      	mov	r0, r4
    hltdc->Lock = HAL_UNLOCKED;
34013bd0:	f884 20a0 	strb.w	r2, [r4, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
34013bd4:	f7ff ff7e 	bl	34013ad4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
34013bd8:	2302      	movs	r3, #2
34013bda:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
34013bde:	6823      	ldr	r3, [r4, #0]
34013be0:	699a      	ldr	r2, [r3, #24]
34013be2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
34013be6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34013be8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
34013bec:	4302      	orrs	r2, r0
34013bee:	68e0      	ldr	r0, [r4, #12]
34013bf0:	6999      	ldr	r1, [r3, #24]
34013bf2:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34013bf4:	6920      	ldr	r0, [r4, #16]
34013bf6:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34013bf8:	430a      	orrs	r2, r1
34013bfa:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
34013bfc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
34013c00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013c04:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
34013c06:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
34013c0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013c0e:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
34013c10:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
34013c14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013c18:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
34013c1a:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
34013c1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013c22:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34013c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
34013c26:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34013c2a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
34013c2e:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34013c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
34013c34:	6add      	ldr	r5, [r3, #44]	@ 0x2c
34013c36:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
34013c3a:	432a      	orrs	r2, r5
34013c3c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
34013c40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34013c44:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_1)->RCR, LTDC_LxRCR_GRMSK);
34013c46:	2204      	movs	r2, #4
34013c48:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_2)->RCR, LTDC_LxRCR_GRMSK);
34013c4c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34013c50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34013c52:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34013c54:	f042 0244 	orr.w	r2, r2, #68	@ 0x44
34013c58:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_LTDC_ENABLE(hltdc);
34013c5a:	699a      	ldr	r2, [r3, #24]
34013c5c:	f042 0201 	orr.w	r2, r2, #1
34013c60:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
34013c62:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34013c64:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
34013c68:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
34013c6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
34013c6e:	2001      	movs	r0, #1
34013c70:	e7fc      	b.n	34013c6c <HAL_LTDC_Init+0x194>
34013c72:	bf00      	nop
34013c74:	58001000 	.word	0x58001000
34013c78:	340269d4 	.word	0x340269d4

34013c7c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
34013c7c:	2a01      	cmp	r2, #1
{
34013c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34013c80:	4606      	mov	r6, r0
34013c82:	460c      	mov	r4, r1
34013c84:	4617      	mov	r7, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
34013c86:	d904      	bls.n	34013c92 <HAL_LTDC_ConfigLayer+0x16>
34013c88:	f240 4104 	movw	r1, #1028	@ 0x404
34013c8c:	484d      	ldr	r0, [pc, #308]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013c8e:	f009 fe7b 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
34013c92:	6823      	ldr	r3, [r4, #0]
34013c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013c98:	d304      	bcc.n	34013ca4 <HAL_LTDC_ConfigLayer+0x28>
34013c9a:	f240 4105 	movw	r1, #1029	@ 0x405
34013c9e:	4849      	ldr	r0, [pc, #292]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013ca0:	f009 fe72 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
34013ca4:	6863      	ldr	r3, [r4, #4]
34013ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013caa:	d304      	bcc.n	34013cb6 <HAL_LTDC_ConfigLayer+0x3a>
34013cac:	f240 4106 	movw	r1, #1030	@ 0x406
34013cb0:	4844      	ldr	r0, [pc, #272]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013cb2:	f009 fe69 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
34013cb6:	68a3      	ldr	r3, [r4, #8]
34013cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013cbc:	d304      	bcc.n	34013cc8 <HAL_LTDC_ConfigLayer+0x4c>
34013cbe:	f240 4107 	movw	r1, #1031	@ 0x407
34013cc2:	4840      	ldr	r0, [pc, #256]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013cc4:	f009 fe60 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
34013cc8:	68e3      	ldr	r3, [r4, #12]
34013cca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013cce:	d304      	bcc.n	34013cda <HAL_LTDC_ConfigLayer+0x5e>
34013cd0:	f44f 6181 	mov.w	r1, #1032	@ 0x408
34013cd4:	483b      	ldr	r0, [pc, #236]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013cd6:	f009 fe57 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
34013cda:	6923      	ldr	r3, [r4, #16]
34013cdc:	2b0b      	cmp	r3, #11
34013cde:	d904      	bls.n	34013cea <HAL_LTDC_ConfigLayer+0x6e>
34013ce0:	f240 4109 	movw	r1, #1033	@ 0x409
34013ce4:	4837      	ldr	r0, [pc, #220]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013ce6:	f009 fe4f 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
34013cea:	6963      	ldr	r3, [r4, #20]
34013cec:	2bff      	cmp	r3, #255	@ 0xff
34013cee:	d904      	bls.n	34013cfa <HAL_LTDC_ConfigLayer+0x7e>
34013cf0:	f240 410a 	movw	r1, #1034	@ 0x40a
34013cf4:	4833      	ldr	r0, [pc, #204]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013cf6:	f009 fe47 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
34013cfa:	69a3      	ldr	r3, [r4, #24]
34013cfc:	2bff      	cmp	r3, #255	@ 0xff
34013cfe:	d904      	bls.n	34013d0a <HAL_LTDC_ConfigLayer+0x8e>
34013d00:	f240 410b 	movw	r1, #1035	@ 0x40b
34013d04:	482f      	ldr	r0, [pc, #188]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013d06:	f009 fe3f 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
34013d0a:	69e3      	ldr	r3, [r4, #28]
34013d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34013d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34013d14:	d004      	beq.n	34013d20 <HAL_LTDC_ConfigLayer+0xa4>
34013d16:	f240 410c 	movw	r1, #1036	@ 0x40c
34013d1a:	482a      	ldr	r0, [pc, #168]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013d1c:	f009 fe34 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
34013d20:	6a23      	ldr	r3, [r4, #32]
34013d22:	f023 0302 	bic.w	r3, r3, #2
34013d26:	2b05      	cmp	r3, #5
34013d28:	d004      	beq.n	34013d34 <HAL_LTDC_ConfigLayer+0xb8>
34013d2a:	f240 410d 	movw	r1, #1037	@ 0x40d
34013d2e:	4825      	ldr	r0, [pc, #148]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013d30:	f009 fe2a 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
34013d34:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34013d36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34013d3a:	d304      	bcc.n	34013d46 <HAL_LTDC_ConfigLayer+0xca>
34013d3c:	f240 410e 	movw	r1, #1038	@ 0x40e
34013d40:	4820      	ldr	r0, [pc, #128]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013d42:	f009 fe21 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
34013d46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34013d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34013d4c:	d304      	bcc.n	34013d58 <HAL_LTDC_ConfigLayer+0xdc>
34013d4e:	f240 410f 	movw	r1, #1039	@ 0x40f
34013d52:	481c      	ldr	r0, [pc, #112]	@ (34013dc4 <HAL_LTDC_ConfigLayer+0x148>)
34013d54:	f009 fe18 	bl	3401d988 <assert_failed>
  __HAL_LOCK(hltdc);
34013d58:	f896 30a0 	ldrb.w	r3, [r6, #160]	@ 0xa0
34013d5c:	2002      	movs	r0, #2
34013d5e:	2b01      	cmp	r3, #1
34013d60:	d02d      	beq.n	34013dbe <HAL_LTDC_ConfigLayer+0x142>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34013d62:	2534      	movs	r5, #52	@ 0x34
34013d64:	fb05 6507 	mla	r5, r5, r7, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
34013d68:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34013d6c:	3538      	adds	r5, #56	@ 0x38
34013d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34013d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34013d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34013d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34013d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34013d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34013d7a:	6823      	ldr	r3, [r4, #0]
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34013d7c:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34013d7e:	602b      	str	r3, [r5, #0]
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34013d80:	4630      	mov	r0, r6
34013d82:	f7ff fd83 	bl	3401388c <LTDC_SetPredefFormat>
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34013d86:	4639      	mov	r1, r7
34013d88:	4630      	mov	r0, r6
34013d8a:	f7ff fd55 	bl	34013838 <LTDC_SetCompositionConfig>
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34013d8e:	2200      	movs	r2, #0
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34013d90:	6834      	ldr	r4, [r6, #0]
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34013d92:	4630      	mov	r0, r6
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34013d94:	f504 7480 	add.w	r4, r4, #256	@ 0x100
34013d98:	eb04 2407 	add.w	r4, r4, r7, lsl #8
34013d9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34013d9e:	4611      	mov	r1, r2
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34013da0:	f023 0308 	bic.w	r3, r3, #8
34013da4:	6323      	str	r3, [r4, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34013da6:	2303      	movs	r3, #3
34013da8:	9700      	str	r7, [sp, #0]
34013daa:	f7ff fc17 	bl	340135dc <LTDC_SetConfig>
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34013dae:	2305      	movs	r3, #5
  __HAL_UNLOCK(hltdc);
34013db0:	2000      	movs	r0, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34013db2:	60a3      	str	r3, [r4, #8]
  hltdc->State  = HAL_LTDC_STATE_READY;
34013db4:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34013db6:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
  hltdc->State  = HAL_LTDC_STATE_READY;
34013dba:	f886 30a1 	strb.w	r3, [r6, #161]	@ 0xa1
}
34013dbe:	b003      	add	sp, #12
34013dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
34013dc2:	bf00      	nop
34013dc4:	340269d4 	.word	0x340269d4

34013dc8 <HAL_LTDC_ReloadLayer>:
  assert_param(IS_LTDC_RELOAD(ReloadType));
34013dc8:	1e4b      	subs	r3, r1, #1
34013dca:	2b01      	cmp	r3, #1
{
34013dcc:	b570      	push	{r4, r5, r6, lr}
34013dce:	4604      	mov	r4, r0
34013dd0:	460d      	mov	r5, r1
34013dd2:	4616      	mov	r6, r2
  assert_param(IS_LTDC_RELOAD(ReloadType));
34013dd4:	d904      	bls.n	34013de0 <HAL_LTDC_ReloadLayer+0x18>
34013dd6:	f640 0119 	movw	r1, #2073	@ 0x819
34013dda:	480e      	ldr	r0, [pc, #56]	@ (34013e14 <HAL_LTDC_ReloadLayer+0x4c>)
34013ddc:	f009 fdd4 	bl	3401d988 <assert_failed>
  __HAL_LOCK(hltdc);
34013de0:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
34013de4:	2002      	movs	r0, #2
34013de6:	2b01      	cmp	r3, #1
34013de8:	d012      	beq.n	34013e10 <HAL_LTDC_ReloadLayer+0x48>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
34013dea:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
34013dec:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
34013df0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, ReloadType | LTDC_LxRCR_GRMSK);
34013df2:	3601      	adds	r6, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
34013df4:	f042 0208 	orr.w	r2, r2, #8
34013df8:	665a      	str	r2, [r3, #100]	@ 0x64
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, ReloadType | LTDC_LxRCR_GRMSK);
34013dfa:	f045 0504 	orr.w	r5, r5, #4
34013dfe:	eb03 2306 	add.w	r3, r3, r6, lsl #8
34013e02:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hltdc);
34013e04:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
34013e06:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34013e08:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
34013e0c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
34013e10:	bd70      	pop	{r4, r5, r6, pc}
34013e12:	bf00      	nop
34013e14:	340269d4 	.word	0x340269d4

34013e18 <HAL_LTDC_SetAddress_NoReload>:
  uint32_t aux0Addr = 0U;
34013e18:	2300      	movs	r3, #0
{
34013e1a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LTDC_LAYER(LayerIdx));
34013e1c:	2a01      	cmp	r2, #1
{
34013e1e:	b086      	sub	sp, #24
34013e20:	4604      	mov	r4, r0
34013e22:	460e      	mov	r6, r1
34013e24:	4615      	mov	r5, r2
  uint32_t aux1Addr = 0U;
34013e26:	e9cd 3303 	strd	r3, r3, [sp, #12]
  uint32_t mirror = 0U;
34013e2a:	9305      	str	r3, [sp, #20]
  assert_param(IS_LTDC_LAYER(LayerIdx));
34013e2c:	d904      	bls.n	34013e38 <HAL_LTDC_SetAddress_NoReload+0x20>
34013e2e:	f640 1165 	movw	r1, #2405	@ 0x965
34013e32:	4812      	ldr	r0, [pc, #72]	@ (34013e7c <HAL_LTDC_SetAddress_NoReload+0x64>)
34013e34:	f009 fda8 	bl	3401d988 <assert_failed>
  __HAL_LOCK(hltdc);
34013e38:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
34013e3c:	2002      	movs	r0, #2
34013e3e:	2b01      	cmp	r3, #1
34013e40:	d019      	beq.n	34013e76 <HAL_LTDC_SetAddress_NoReload+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
34013e42:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
  LTDC_RetrieveUserConfig(hltdc, &mirror, &aux0Addr, &aux1Addr, LayerIdx);
34013e46:	ab04      	add	r3, sp, #16
34013e48:	4620      	mov	r0, r4
34013e4a:	aa03      	add	r2, sp, #12
34013e4c:	a905      	add	r1, sp, #20
34013e4e:	9500      	str	r5, [sp, #0]
34013e50:	f7ff fd5e 	bl	34013910 <LTDC_RetrieveUserConfig.constprop.0>
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
34013e54:	2334      	movs	r3, #52	@ 0x34
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
34013e56:	2200      	movs	r2, #0
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
34013e58:	fb03 4305 	mla	r3, r3, r5, r4
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
34013e5c:	4620      	mov	r0, r4
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
34013e5e:	65de      	str	r6, [r3, #92]	@ 0x5c
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
34013e60:	4611      	mov	r1, r2
34013e62:	9b05      	ldr	r3, [sp, #20]
34013e64:	9500      	str	r5, [sp, #0]
34013e66:	f7ff fbb9 	bl	340135dc <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
34013e6a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34013e6c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
34013e6e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
34013e72:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
34013e76:	b006      	add	sp, #24
34013e78:	bd70      	pop	{r4, r5, r6, pc}
34013e7a:	bf00      	nop
34013e7c:	340269d4 	.word	0x340269d4

34013e80 <HAL_LTDC_ConfigLayerFlexARGB>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
34013e80:	2a01      	cmp	r2, #1
{
34013e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34013e84:	4606      	mov	r6, r0
34013e86:	460c      	mov	r4, r1
34013e88:	4617      	mov	r7, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
34013e8a:	d904      	bls.n	34013e96 <HAL_LTDC_ConfigLayerFlexARGB+0x16>
34013e8c:	f640 31a1 	movw	r1, #2977	@ 0xba1
34013e90:	4847      	ldr	r0, [pc, #284]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013e92:	f009 fd79 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.RedWidth));
34013e96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34013e98:	2b0f      	cmp	r3, #15
34013e9a:	d904      	bls.n	34013ea6 <HAL_LTDC_ConfigLayerFlexARGB+0x26>
34013e9c:	f640 31a2 	movw	r1, #2978	@ 0xba2
34013ea0:	4843      	ldr	r0, [pc, #268]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013ea2:	f009 fd71 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.GreenWidth));
34013ea6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34013ea8:	2b0f      	cmp	r3, #15
34013eaa:	d904      	bls.n	34013eb6 <HAL_LTDC_ConfigLayerFlexARGB+0x36>
34013eac:	f640 31a3 	movw	r1, #2979	@ 0xba3
34013eb0:	483f      	ldr	r0, [pc, #252]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013eb2:	f009 fd69 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.BlueWidth));
34013eb6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34013eb8:	2b0f      	cmp	r3, #15
34013eba:	d904      	bls.n	34013ec6 <HAL_LTDC_ConfigLayerFlexARGB+0x46>
34013ebc:	f640 31a4 	movw	r1, #2980	@ 0xba4
34013ec0:	483b      	ldr	r0, [pc, #236]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013ec2:	f009 fd61 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.RedPos));
34013ec6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34013ec8:	2b1f      	cmp	r3, #31
34013eca:	d904      	bls.n	34013ed6 <HAL_LTDC_ConfigLayerFlexARGB+0x56>
34013ecc:	f640 31a5 	movw	r1, #2981	@ 0xba5
34013ed0:	4837      	ldr	r0, [pc, #220]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013ed2:	f009 fd59 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.GreenPos));
34013ed6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34013ed8:	2b1f      	cmp	r3, #31
34013eda:	d904      	bls.n	34013ee6 <HAL_LTDC_ConfigLayerFlexARGB+0x66>
34013edc:	f640 31a6 	movw	r1, #2982	@ 0xba6
34013ee0:	4833      	ldr	r0, [pc, #204]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013ee2:	f009 fd51 	bl	3401d988 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.BluePos));
34013ee6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34013ee8:	2b1f      	cmp	r3, #31
34013eea:	d904      	bls.n	34013ef6 <HAL_LTDC_ConfigLayerFlexARGB+0x76>
34013eec:	f640 31a7 	movw	r1, #2983	@ 0xba7
34013ef0:	482f      	ldr	r0, [pc, #188]	@ (34013fb0 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
34013ef2:	f009 fd49 	bl	3401d988 <assert_failed>
  __HAL_LOCK(hltdc);
34013ef6:	f896 30a0 	ldrb.w	r3, [r6, #160]	@ 0xa0
34013efa:	2002      	movs	r0, #2
34013efc:	2b01      	cmp	r3, #1
34013efe:	d054      	beq.n	34013faa <HAL_LTDC_ConfigLayerFlexARGB+0x12a>
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
34013f00:	2334      	movs	r3, #52	@ 0x34
34013f02:	fb03 6307 	mla	r3, r3, r7, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
34013f06:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
34013f0a:	6822      	ldr	r2, [r4, #0]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
34013f0c:	6835      	ldr	r5, [r6, #0]
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
34013f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hltdc->LayerCfg[LayerIdx].WindowX1 = pLayerFlexARGB->Layer.WindowX1;
34013f10:	6862      	ldr	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
34013f12:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  hltdc->LayerCfg[LayerIdx].WindowX1 = pLayerFlexARGB->Layer.WindowX1;
34013f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hltdc->LayerCfg[LayerIdx].WindowY0 = pLayerFlexARGB->Layer.WindowY0;
34013f18:	68a2      	ldr	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
34013f1a:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  hltdc->LayerCfg[LayerIdx].WindowY0 = pLayerFlexARGB->Layer.WindowY0;
34013f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hltdc->LayerCfg[LayerIdx].WindowY1 = pLayerFlexARGB->Layer.WindowY1;
34013f20:	68e2      	ldr	r2, [r4, #12]
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34013f22:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx].WindowY1 = pLayerFlexARGB->Layer.WindowY1;
34013f24:	645a      	str	r2, [r3, #68]	@ 0x44
  hltdc->LayerCfg[LayerIdx].PixelFormat = LTDC_PIXEL_FORMAT_FLEX_ARGB;
34013f26:	220c      	movs	r2, #12
34013f28:	649a      	str	r2, [r3, #72]	@ 0x48
  hltdc->LayerCfg[LayerIdx].Alpha = pLayerFlexARGB->Layer.Alpha;
34013f2a:	6922      	ldr	r2, [r4, #16]
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34013f2c:	4630      	mov	r0, r6
  hltdc->LayerCfg[LayerIdx].Alpha = pLayerFlexARGB->Layer.Alpha;
34013f2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hltdc->LayerCfg[LayerIdx].Alpha0 = pLayerFlexARGB->Layer.Alpha0;
34013f30:	6962      	ldr	r2, [r4, #20]
34013f32:	651a      	str	r2, [r3, #80]	@ 0x50
  hltdc->LayerCfg[LayerIdx].BlendingFactor1 = pLayerFlexARGB->Layer.BlendingFactor1;
34013f34:	69a2      	ldr	r2, [r4, #24]
34013f36:	655a      	str	r2, [r3, #84]	@ 0x54
  hltdc->LayerCfg[LayerIdx].BlendingFactor2 = pLayerFlexARGB->Layer.BlendingFactor2;
34013f38:	69e2      	ldr	r2, [r4, #28]
34013f3a:	659a      	str	r2, [r3, #88]	@ 0x58
  hltdc->LayerCfg[LayerIdx].FBStartAdress = pLayerFlexARGB->ARGBAddress;
34013f3c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
34013f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hltdc->LayerCfg[LayerIdx].ImageWidth = pLayerFlexARGB->Layer.ImageWidth;
34013f40:	6a22      	ldr	r2, [r4, #32]
34013f42:	661a      	str	r2, [r3, #96]	@ 0x60
  hltdc->LayerCfg[LayerIdx].ImageHeight = pLayerFlexARGB->Layer.ImageHeight;
34013f44:	6a62      	ldr	r2, [r4, #36]	@ 0x24
34013f46:	665a      	str	r2, [r3, #100]	@ 0x64
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
34013f48:	2307      	movs	r3, #7
34013f4a:	61eb      	str	r3, [r5, #28]
                                       (pLayerFlexARGB->FlexARGB.RedPos << LTDC_LxFPF0R_RPOS_Pos) |
34013f4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
34013f4e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
                                       (pLayerFlexARGB->FlexARGB.RedPos << LTDC_LxFPF0R_RPOS_Pos) |
34013f50:	025b      	lsls	r3, r3, #9
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
34013f52:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                                       (pLayerFlexARGB->FlexARGB.AlphaWidth << LTDC_LxFPF0R_ALEN_Pos) |
34013f56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
34013f58:	4313      	orrs	r3, r2
34013f5a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
34013f5c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
34013f60:	676b      	str	r3, [r5, #116]	@ 0x74
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
34013f62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                                       (pLayerFlexARGB->FlexARGB.BlueWidth << LTDC_LxFPF1R_BLEN_Pos) |
34013f64:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34013f66:	039b      	lsls	r3, r3, #14
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
34013f68:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
34013f6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
34013f6e:	4313      	orrs	r3, r2
                                       (pLayerFlexARGB->FlexARGB.BluePos << LTDC_LxFPF1R_BPOS_Pos) |
34013f70:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
34013f72:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
34013f76:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34013f78:	2405      	movs	r4, #5
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
34013f7a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
34013f7e:	67ab      	str	r3, [r5, #120]	@ 0x78
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34013f80:	f7ff fc5a 	bl	34013838 <LTDC_SetCompositionConfig>
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
34013f84:	2200      	movs	r2, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34013f86:	60ac      	str	r4, [r5, #8]
  MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN, 0U);
34013f88:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
34013f8a:	4630      	mov	r0, r6
  MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN, 0U);
34013f8c:	f023 0308 	bic.w	r3, r3, #8
34013f90:	632b      	str	r3, [r5, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
34013f92:	4611      	mov	r1, r2
34013f94:	2303      	movs	r3, #3
34013f96:	9700      	str	r7, [sp, #0]
34013f98:	f7ff fb20 	bl	340135dc <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
34013f9c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34013f9e:	2000      	movs	r0, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34013fa0:	60ac      	str	r4, [r5, #8]
  hltdc->State = HAL_LTDC_STATE_READY;
34013fa2:	f886 30a1 	strb.w	r3, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
34013fa6:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
34013faa:	b003      	add	sp, #12
34013fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
34013fae:	bf00      	nop
34013fb0:	340269d4 	.word	0x340269d4

34013fb4 <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
34013fb4:	2804      	cmp	r0, #4
{
34013fb6:	b538      	push	{r3, r4, r5, lr}
34013fb8:	4605      	mov	r5, r0
34013fba:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34013fbc:	d912      	bls.n	34013fe4 <HAL_PWREx_ConfigVddIORange+0x30>
34013fbe:	f240 316a 	movw	r1, #874	@ 0x36a
34013fc2:	481d      	ldr	r0, [pc, #116]	@ (34014038 <HAL_PWREx_ConfigVddIORange+0x84>)
34013fc4:	f009 fce0 	bl	3401d988 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34013fc8:	2c01      	cmp	r4, #1
34013fca:	d915      	bls.n	34013ff8 <HAL_PWREx_ConfigVddIORange+0x44>
34013fcc:	f240 316b 	movw	r1, #875	@ 0x36b
34013fd0:	4819      	ldr	r0, [pc, #100]	@ (34014038 <HAL_PWREx_ConfigVddIORange+0x84>)
34013fd2:	f009 fcd9 	bl	3401d988 <assert_failed>

  switch (VddIOPort)
34013fd6:	2d04      	cmp	r5, #4
34013fd8:	d80e      	bhi.n	34013ff8 <HAL_PWREx_ConfigVddIORange+0x44>
34013fda:	e8df f005 	tbb	[pc, r5]
34013fde:	0e06      	.short	0x0e06
34013fe0:	1c15      	.short	0x1c15
34013fe2:	24          	.byte	0x24
34013fe3:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34013fe4:	2901      	cmp	r1, #1
34013fe6:	d9f6      	bls.n	34013fd6 <HAL_PWREx_ConfigVddIORange+0x22>
34013fe8:	e7f0      	b.n	34013fcc <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34013fea:	4a14      	ldr	r2, [pc, #80]	@ (3401403c <HAL_PWREx_ConfigVddIORange+0x88>)
34013fec:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34013fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34013ff2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34013ff6:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34013ff8:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34013ffa:	4a10      	ldr	r2, [pc, #64]	@ (3401403c <HAL_PWREx_ConfigVddIORange+0x88>)
34013ffc:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34013ffe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
34014002:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
34014006:	e7f6      	b.n	34013ff6 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34014008:	4a0c      	ldr	r2, [pc, #48]	@ (3401403c <HAL_PWREx_ConfigVddIORange+0x88>)
3401400a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
3401400c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34014010:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
34014014:	e7ef      	b.n	34013ff6 <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
34014016:	4a09      	ldr	r2, [pc, #36]	@ (3401403c <HAL_PWREx_ConfigVddIORange+0x88>)
34014018:	6b53      	ldr	r3, [r2, #52]	@ 0x34
3401401a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3401401e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34014022:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
34014024:	e7e8      	b.n	34013ff8 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
34014026:	4a05      	ldr	r2, [pc, #20]	@ (3401403c <HAL_PWREx_ConfigVddIORange+0x88>)
34014028:	6b93      	ldr	r3, [r2, #56]	@ 0x38
3401402a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3401402e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34014032:	6393      	str	r3, [r2, #56]	@ 0x38
}
34014034:	e7e0      	b.n	34013ff8 <HAL_PWREx_ConfigVddIORange+0x44>
34014036:	bf00      	nop
34014038:	34026a35 	.word	0x34026a35
3401403c:	56024800 	.word	0x56024800

34014040 <HAL_PWREx_EnableVddIO2>:
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34014040:	4a02      	ldr	r2, [pc, #8]	@ (3401404c <HAL_PWREx_EnableVddIO2+0xc>)
34014042:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34014044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34014048:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
3401404a:	4770      	bx	lr
3401404c:	56024800 	.word	0x56024800

34014050 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34014050:	4a02      	ldr	r2, [pc, #8]	@ (3401405c <HAL_PWREx_EnableVddIO3+0xc>)
34014052:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34014054:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34014058:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
3401405a:	4770      	bx	lr
3401405c:	56024800 	.word	0x56024800

34014060 <HAL_PWREx_EnableVddIO4>:
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
34014060:	4a02      	ldr	r2, [pc, #8]	@ (3401406c <HAL_PWREx_EnableVddIO4+0xc>)
34014062:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34014064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34014068:	6353      	str	r3, [r2, #52]	@ 0x34
}
3401406a:	4770      	bx	lr
3401406c:	56024800 	.word	0x56024800

34014070 <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34014070:	6803      	ldr	r3, [r0, #0]
34014072:	4a1c      	ldr	r2, [pc, #112]	@ (340140e4 <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
34014074:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34014076:	4293      	cmp	r3, r2
{
34014078:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
3401407a:	d02c      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
3401407c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014080:	4293      	cmp	r3, r2
34014082:	d028      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014084:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34014088:	3280      	adds	r2, #128	@ 0x80
3401408a:	4293      	cmp	r3, r2
3401408c:	d023      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
3401408e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014092:	4293      	cmp	r3, r2
34014094:	d01f      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
34014096:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
3401409a:	3280      	adds	r2, #128	@ 0x80
3401409c:	4293      	cmp	r3, r2
3401409e:	d01a      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
340140a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340140a4:	4293      	cmp	r3, r2
340140a6:	d016      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
340140a8:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340140ac:	3280      	adds	r2, #128	@ 0x80
340140ae:	4293      	cmp	r3, r2
340140b0:	d011      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
340140b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340140b6:	4293      	cmp	r3, r2
340140b8:	d00d      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
340140ba:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
340140be:	3280      	adds	r2, #128	@ 0x80
340140c0:	4293      	cmp	r3, r2
340140c2:	d008      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
340140c4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340140c8:	4293      	cmp	r3, r2
340140ca:	d004      	beq.n	340140d6 <HAL_RAMCFG_EnableAXISRAM+0x66>
340140cc:	f240 4107 	movw	r1, #1031	@ 0x407
340140d0:	4805      	ldr	r0, [pc, #20]	@ (340140e8 <HAL_RAMCFG_EnableAXISRAM+0x78>)
340140d2:	f009 fc59 	bl	3401d988 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
340140d6:	6822      	ldr	r2, [r4, #0]
340140d8:	6813      	ldr	r3, [r2, #0]
340140da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
340140de:	6013      	str	r3, [r2, #0]
}
340140e0:	bd10      	pop	{r4, pc}
340140e2:	bf00      	nop
340140e4:	52023080 	.word	0x52023080
340140e8:	34026a98 	.word	0x34026a98

340140ec <LL_RCC_HSI_IsReady>:
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
340140ec:	4b02      	ldr	r3, [pc, #8]	@ (340140f8 <LL_RCC_HSI_IsReady+0xc>)
340140ee:	6858      	ldr	r0, [r3, #4]
}
340140f0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
340140f4:	4770      	bx	lr
340140f6:	bf00      	nop
340140f8:	56028000 	.word	0x56028000

340140fc <LL_RCC_MSI_IsReady>:
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
340140fc:	4b02      	ldr	r3, [pc, #8]	@ (34014108 <LL_RCC_MSI_IsReady+0xc>)
340140fe:	6858      	ldr	r0, [r3, #4]
}
34014100:	f3c0 0080 	ubfx	r0, r0, #2, #1
34014104:	4770      	bx	lr
34014106:	bf00      	nop
34014108:	56028000 	.word	0x56028000

3401410c <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3401410c:	4b02      	ldr	r3, [pc, #8]	@ (34014118 <LL_RCC_PLL1_IsReady+0xc>)
3401410e:	6858      	ldr	r0, [r3, #4]
}
34014110:	f3c0 2000 	ubfx	r0, r0, #8, #1
34014114:	4770      	bx	lr
34014116:	bf00      	nop
34014118:	56028000 	.word	0x56028000

3401411c <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
3401411c:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
3401411e:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34014120:	4d1b      	ldr	r5, [pc, #108]	@ (34014190 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34014122:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34014124:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34014126:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34014128:	021b      	lsls	r3, r3, #8
3401412a:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
3401412e:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34014130:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34014134:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34014138:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
3401413a:	429a      	cmp	r2, r3
3401413c:	d126      	bne.n	3401418c <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3401413e:	4b15      	ldr	r3, [pc, #84]	@ (34014194 <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34014140:	68ca      	ldr	r2, [r1, #12]
34014142:	58e3      	ldr	r3, [r4, r3]
34014144:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34014148:	4293      	cmp	r3, r2
3401414a:	d11f      	bne.n	3401418c <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3401414c:	4b12      	ldr	r3, [pc, #72]	@ (34014198 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3401414e:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34014150:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34014154:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34014156:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
3401415a:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3401415e:	429a      	cmp	r2, r3
34014160:	d114      	bne.n	3401418c <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34014162:	4b0e      	ldr	r3, [pc, #56]	@ (3401419c <RCC_PLL_IsNewConfig+0x80>)
34014164:	685a      	ldr	r2, [r3, #4]
34014166:	f44f 7380 	mov.w	r3, #256	@ 0x100
3401416a:	fa03 f000 	lsl.w	r0, r3, r0
3401416e:	4390      	bics	r0, r2
34014170:	d00a      	beq.n	34014188 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34014172:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34014174:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34014178:	bf0c      	ite	eq
3401417a:	2301      	moveq	r3, #1
3401417c:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
3401417e:	6808      	ldr	r0, [r1, #0]
34014180:	1ac0      	subs	r0, r0, r3
34014182:	bf18      	it	ne
34014184:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34014186:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34014188:	2302      	movs	r3, #2
3401418a:	e7f8      	b.n	3401417e <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
3401418c:	2001      	movs	r0, #1
  return ret;
3401418e:	e7fa      	b.n	34014186 <RCC_PLL_IsNewConfig+0x6a>
34014190:	56028080 	.word	0x56028080
34014194:	56028084 	.word	0x56028084
34014198:	56028088 	.word	0x56028088
3401419c:	56028000 	.word	0x56028000

340141a0 <RCC_PLL_Enable>:
{
340141a0:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340141a2:	f44f 7480 	mov.w	r4, #256	@ 0x100
340141a6:	4e09      	ldr	r6, [pc, #36]	@ (340141cc <RCC_PLL_Enable+0x2c>)
340141a8:	4084      	lsls	r4, r0
340141aa:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
340141ae:	f009 f8bb 	bl	3401d328 <HAL_GetTick>
340141b2:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340141b4:	6873      	ldr	r3, [r6, #4]
340141b6:	421c      	tst	r4, r3
340141b8:	d001      	beq.n	340141be <RCC_PLL_Enable+0x1e>
  return ret;
340141ba:	2000      	movs	r0, #0
}
340141bc:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340141be:	f009 f8b3 	bl	3401d328 <HAL_GetTick>
340141c2:	1b40      	subs	r0, r0, r5
340141c4:	2801      	cmp	r0, #1
340141c6:	d9f5      	bls.n	340141b4 <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
340141c8:	2003      	movs	r0, #3
340141ca:	e7f7      	b.n	340141bc <RCC_PLL_Enable+0x1c>
340141cc:	56028000 	.word	0x56028000

340141d0 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
340141d0:	680b      	ldr	r3, [r1, #0]
{
340141d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
340141d6:	2b02      	cmp	r3, #2
{
340141d8:	4681      	mov	r9, r0
340141da:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340141dc:	4f83      	ldr	r7, [pc, #524]	@ (340143ec <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340141de:	4e84      	ldr	r6, [pc, #528]	@ (340143f0 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340141e0:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
340141e4:	f040 8099 	bne.w	3401431a <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340141e8:	684b      	ldr	r3, [r1, #4]
340141ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340141ee:	d004      	beq.n	340141fa <RCC_PLL_Config+0x2a>
340141f0:	f240 71fa 	movw	r1, #2042	@ 0x7fa
340141f4:	487f      	ldr	r0, [pc, #508]	@ (340143f4 <RCC_PLL_Config+0x224>)
340141f6:	f009 fbc7 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
340141fa:	68eb      	ldr	r3, [r5, #12]
340141fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34014200:	d304      	bcc.n	3401420c <RCC_PLL_Config+0x3c>
34014202:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34014206:	487b      	ldr	r0, [pc, #492]	@ (340143f4 <RCC_PLL_Config+0x224>)
34014208:	f009 fbbe 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
3401420c:	68ab      	ldr	r3, [r5, #8]
3401420e:	3b01      	subs	r3, #1
34014210:	2b3e      	cmp	r3, #62	@ 0x3e
34014212:	d904      	bls.n	3401421e <RCC_PLL_Config+0x4e>
34014214:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34014218:	4876      	ldr	r0, [pc, #472]	@ (340143f4 <RCC_PLL_Config+0x224>)
3401421a:	f009 fbb5 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
3401421e:	f640 12ba 	movw	r2, #2490	@ 0x9ba
34014222:	692b      	ldr	r3, [r5, #16]
34014224:	3b0a      	subs	r3, #10
34014226:	4293      	cmp	r3, r2
34014228:	d904      	bls.n	34014234 <RCC_PLL_Config+0x64>
3401422a:	f240 71fd 	movw	r1, #2045	@ 0x7fd
3401422e:	4871      	ldr	r0, [pc, #452]	@ (340143f4 <RCC_PLL_Config+0x224>)
34014230:	f009 fbaa 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34014234:	696b      	ldr	r3, [r5, #20]
34014236:	3b01      	subs	r3, #1
34014238:	2b06      	cmp	r3, #6
3401423a:	d904      	bls.n	34014246 <RCC_PLL_Config+0x76>
3401423c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34014240:	486c      	ldr	r0, [pc, #432]	@ (340143f4 <RCC_PLL_Config+0x224>)
34014242:	f009 fba1 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34014246:	69ab      	ldr	r3, [r5, #24]
34014248:	3b01      	subs	r3, #1
3401424a:	2b06      	cmp	r3, #6
3401424c:	d904      	bls.n	34014258 <RCC_PLL_Config+0x88>
3401424e:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34014252:	4868      	ldr	r0, [pc, #416]	@ (340143f4 <RCC_PLL_Config+0x224>)
34014254:	f009 fb98 	bl	3401d988 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34014258:	f44f 7880 	mov.w	r8, #256	@ 0x100
3401425c:	4b66      	ldr	r3, [pc, #408]	@ (340143f8 <RCC_PLL_Config+0x228>)
3401425e:	fa08 f809 	lsl.w	r8, r8, r9
34014262:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34014266:	f009 f85f 	bl	3401d328 <HAL_GetTick>
3401426a:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3401426c:	f8df a194 	ldr.w	sl, [pc, #404]	@ 34014404 <RCC_PLL_Config+0x234>
34014270:	f8da 3004 	ldr.w	r3, [sl, #4]
34014274:	ea38 0303 	bics.w	r3, r8, r3
34014278:	d040      	beq.n	340142fc <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3401427a:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
3401427c:	495f      	ldr	r1, [pc, #380]	@ (340143fc <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
3401427e:	f043 0304 	orr.w	r3, r3, #4
34014282:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34014284:	59e3      	ldr	r3, [r4, r7]
34014286:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
3401428a:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
3401428c:	692b      	ldr	r3, [r5, #16]
3401428e:	68aa      	ldr	r2, [r5, #8]
34014290:	021b      	lsls	r3, r3, #8
34014292:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34014296:	686a      	ldr	r2, [r5, #4]
34014298:	59e0      	ldr	r0, [r4, r7]
3401429a:	4313      	orrs	r3, r2
3401429c:	4a58      	ldr	r2, [pc, #352]	@ (34014400 <RCC_PLL_Config+0x230>)
3401429e:	4002      	ands	r2, r0
340142a0:	4313      	orrs	r3, r2
340142a2:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
340142a4:	59a2      	ldr	r2, [r4, r6]
340142a6:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
340142aa:	061b      	lsls	r3, r3, #24
340142ac:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
340142b0:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
340142b4:	4313      	orrs	r3, r2
340142b6:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
340142b8:	5863      	ldr	r3, [r4, r1]
340142ba:	68ea      	ldr	r2, [r5, #12]
340142bc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
340142c0:	4313      	orrs	r3, r2
340142c2:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
340142c4:	59a3      	ldr	r3, [r4, r6]
340142c6:	f023 0308 	bic.w	r3, r3, #8
340142ca:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
340142cc:	68eb      	ldr	r3, [r5, #12]
340142ce:	b11b      	cbz	r3, 340142d8 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
340142d0:	59a3      	ldr	r3, [r4, r6]
340142d2:	f043 030a 	orr.w	r3, r3, #10
340142d6:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340142d8:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340142da:	4d4a      	ldr	r5, [pc, #296]	@ (34014404 <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
340142dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
340142e0:	f043 0301 	orr.w	r3, r3, #1
340142e4:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
340142e6:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
340142ea:	f009 f81d 	bl	3401d328 <HAL_GetTick>
340142ee:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
340142f0:	686b      	ldr	r3, [r5, #4]
340142f2:	ea18 0f03 	tst.w	r8, r3
340142f6:	d00a      	beq.n	3401430e <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
340142f8:	2000      	movs	r0, #0
340142fa:	e006      	b.n	3401430a <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340142fc:	f009 f814 	bl	3401d328 <HAL_GetTick>
34014300:	eba0 0009 	sub.w	r0, r0, r9
34014304:	2801      	cmp	r0, #1
34014306:	d9b3      	bls.n	34014270 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
34014308:	2003      	movs	r0, #3
}
3401430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3401430e:	f009 f80b 	bl	3401d328 <HAL_GetTick>
34014312:	1b00      	subs	r0, r0, r4
34014314:	2801      	cmp	r0, #1
34014316:	d9eb      	bls.n	340142f0 <RCC_PLL_Config+0x120>
34014318:	e7f6      	b.n	34014308 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
3401431a:	2b03      	cmp	r3, #3
3401431c:	d146      	bne.n	340143ac <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
3401431e:	684b      	ldr	r3, [r1, #4]
34014320:	b37b      	cbz	r3, 34014382 <RCC_PLL_Config+0x1b2>
34014322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014326:	d032      	beq.n	3401438e <RCC_PLL_Config+0x1be>
34014328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401432c:	d032      	beq.n	34014394 <RCC_PLL_Config+0x1c4>
3401432e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014332:	d00d      	beq.n	34014350 <RCC_PLL_Config+0x180>
34014334:	f640 013f 	movw	r1, #2111	@ 0x83f
34014338:	482e      	ldr	r0, [pc, #184]	@ (340143f4 <RCC_PLL_Config+0x224>)
3401433a:	f009 fb25 	bl	3401d988 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
3401433e:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
34014340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014344:	d026      	beq.n	34014394 <RCC_PLL_Config+0x1c4>
34014346:	d803      	bhi.n	34014350 <RCC_PLL_Config+0x180>
34014348:	b1db      	cbz	r3, 34014382 <RCC_PLL_Config+0x1b2>
3401434a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401434e:	d01e      	beq.n	3401438e <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34014350:	f44f 7680 	mov.w	r6, #256	@ 0x100
34014354:	4b28      	ldr	r3, [pc, #160]	@ (340143f8 <RCC_PLL_Config+0x228>)
34014356:	fa06 f609 	lsl.w	r6, r6, r9
3401435a:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
3401435c:	f008 ffe4 	bl	3401d328 <HAL_GetTick>
34014360:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34014362:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34014404 <RCC_PLL_Config+0x234>
34014366:	f8d9 3004 	ldr.w	r3, [r9, #4]
3401436a:	ea36 0303 	bics.w	r3, r6, r3
3401436e:	d016      	beq.n	3401439e <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34014370:	59e3      	ldr	r3, [r4, r7]
34014372:	686a      	ldr	r2, [r5, #4]
34014374:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34014378:	4313      	orrs	r3, r2
3401437a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401437e:	51e3      	str	r3, [r4, r7]
34014380:	e7ba      	b.n	340142f8 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
34014382:	f7ff feb3 	bl	340140ec <LL_RCC_HSI_IsReady>
34014386:	2800      	cmp	r0, #0
34014388:	d1e2      	bne.n	34014350 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
3401438a:	2001      	movs	r0, #1
3401438c:	e7bd      	b.n	3401430a <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
3401438e:	f7ff feb5 	bl	340140fc <LL_RCC_MSI_IsReady>
34014392:	e7f8      	b.n	34014386 <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34014394:	4b1b      	ldr	r3, [pc, #108]	@ (34014404 <RCC_PLL_Config+0x234>)
34014396:	685b      	ldr	r3, [r3, #4]
34014398:	06db      	lsls	r3, r3, #27
3401439a:	d5f6      	bpl.n	3401438a <RCC_PLL_Config+0x1ba>
3401439c:	e7d8      	b.n	34014350 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3401439e:	f008 ffc3 	bl	3401d328 <HAL_GetTick>
340143a2:	eba0 0008 	sub.w	r0, r0, r8
340143a6:	2801      	cmp	r0, #1
340143a8:	d9dd      	bls.n	34014366 <RCC_PLL_Config+0x196>
340143aa:	e7ad      	b.n	34014308 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
340143ac:	2b01      	cmp	r3, #1
340143ae:	d1a3      	bne.n	340142f8 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340143b0:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340143b4:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340143b6:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
340143b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
340143bc:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340143be:	4b0e      	ldr	r3, [pc, #56]	@ (340143f8 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340143c0:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 34014404 <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340143c4:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
340143c6:	f008 ffaf 	bl	3401d328 <HAL_GetTick>
340143ca:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340143cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
340143d0:	ea35 0303 	bics.w	r3, r5, r3
340143d4:	d003      	beq.n	340143de <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
340143d6:	59e3      	ldr	r3, [r4, r7]
340143d8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
340143dc:	e7cf      	b.n	3401437e <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
340143de:	f008 ffa3 	bl	3401d328 <HAL_GetTick>
340143e2:	1b80      	subs	r0, r0, r6
340143e4:	2801      	cmp	r0, #1
340143e6:	d9f1      	bls.n	340143cc <RCC_PLL_Config+0x1fc>
340143e8:	e78e      	b.n	34014308 <RCC_PLL_Config+0x138>
340143ea:	bf00      	nop
340143ec:	56028080 	.word	0x56028080
340143f0:	56028088 	.word	0x56028088
340143f4:	34026afb 	.word	0x34026afb
340143f8:	56029000 	.word	0x56029000
340143fc:	56028084 	.word	0x56028084
34014400:	8c0000ff 	.word	0x8c0000ff
34014404:	56028000 	.word	0x56028000

34014408 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34014408:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
3401440c:	b508      	push	{r3, lr}
  switch (PLLSource1)
3401440e:	d021      	beq.n	34014454 <RCC_IC_CheckPLLSources+0x4c>
34014410:	d805      	bhi.n	3401441e <RCC_IC_CheckPLLSources+0x16>
34014412:	b9c0      	cbnz	r0, 34014446 <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34014414:	f7ff fe7a 	bl	3401410c <LL_RCC_PLL1_IsReady>
34014418:	b178      	cbz	r0, 3401443a <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
3401441a:	2201      	movs	r2, #1
3401441c:	e003      	b.n	34014426 <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
3401441e:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34014422:	d01e      	beq.n	34014462 <RCC_IC_CheckPLLSources+0x5a>
34014424:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
34014426:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
3401442a:	d03c      	beq.n	340144a6 <RCC_IC_CheckPLLSources+0x9e>
3401442c:	d820      	bhi.n	34014470 <RCC_IC_CheckPLLSources+0x68>
3401442e:	b349      	cbz	r1, 34014484 <RCC_IC_CheckPLLSources+0x7c>
34014430:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
34014434:	d030      	beq.n	34014498 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
34014436:	2200      	movs	r2, #0
34014438:	e02c      	b.n	34014494 <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3401443a:	4b1e      	ldr	r3, [pc, #120]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
3401443c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34014440:	f3c2 62c0 	ubfx	r2, r2, #27, #1
34014444:	e7ef      	b.n	34014426 <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34014446:	4b1b      	ldr	r3, [pc, #108]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
34014448:	685a      	ldr	r2, [r3, #4]
3401444a:	0592      	lsls	r2, r2, #22
3401444c:	d4e5      	bmi.n	3401441a <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3401444e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34014452:	e7f5      	b.n	34014440 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34014454:	4b17      	ldr	r3, [pc, #92]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
34014456:	685a      	ldr	r2, [r3, #4]
34014458:	0550      	lsls	r0, r2, #21
3401445a:	d4de      	bmi.n	3401441a <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3401445c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34014460:	e7ee      	b.n	34014440 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34014462:	4b14      	ldr	r3, [pc, #80]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
34014464:	685a      	ldr	r2, [r3, #4]
34014466:	0512      	lsls	r2, r2, #20
34014468:	d4d7      	bmi.n	3401441a <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3401446a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3401446e:	e7e7      	b.n	34014440 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
34014470:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34014474:	d1df      	bne.n	34014436 <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34014476:	4b0f      	ldr	r3, [pc, #60]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
34014478:	6859      	ldr	r1, [r3, #4]
3401447a:	0509      	lsls	r1, r1, #20
3401447c:	d40a      	bmi.n	34014494 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3401447e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34014482:	e005      	b.n	34014490 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
34014484:	f7ff fe42 	bl	3401410c <LL_RCC_PLL1_IsReady>
34014488:	b920      	cbnz	r0, 34014494 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3401448a:	4b0a      	ldr	r3, [pc, #40]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
3401448c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34014490:	0118      	lsls	r0, r3, #4
34014492:	d5d0      	bpl.n	34014436 <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
34014494:	4610      	mov	r0, r2
34014496:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34014498:	4b06      	ldr	r3, [pc, #24]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
3401449a:	6859      	ldr	r1, [r3, #4]
3401449c:	0589      	lsls	r1, r1, #22
3401449e:	d4f9      	bmi.n	34014494 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340144a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340144a4:	e7f4      	b.n	34014490 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340144a6:	4b03      	ldr	r3, [pc, #12]	@ (340144b4 <RCC_IC_CheckPLLSources+0xac>)
340144a8:	6859      	ldr	r1, [r3, #4]
340144aa:	0548      	lsls	r0, r1, #21
340144ac:	d4f2      	bmi.n	34014494 <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340144ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340144b2:	e7ed      	b.n	34014490 <RCC_IC_CheckPLLSources+0x88>
340144b4:	56028000 	.word	0x56028000

340144b8 <HAL_RCC_OscConfig>:
{
340144b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
340144bc:	4604      	mov	r4, r0
340144be:	b918      	cbnz	r0, 340144c8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
340144c0:	2001      	movs	r0, #1
}
340144c2:	b003      	add	sp, #12
340144c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
340144c8:	6803      	ldr	r3, [r0, #0]
340144ca:	b133      	cbz	r3, 340144da <HAL_RCC_OscConfig+0x22>
340144cc:	06dd      	lsls	r5, r3, #27
340144ce:	d104      	bne.n	340144da <HAL_RCC_OscConfig+0x22>
340144d0:	f44f 71b9 	mov.w	r1, #370	@ 0x172
340144d4:	4893      	ldr	r0, [pc, #588]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
340144d6:	f009 fa57 	bl	3401d988 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340144da:	4b93      	ldr	r3, [pc, #588]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
340144dc:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340144de:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340144e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
340144e4:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340144e8:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340144ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340144f0:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340144f4:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
340144f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340144fc:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34014500:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
34014504:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
34014506:	6823      	ldr	r3, [r4, #0]
34014508:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
3401450c:	07d8      	lsls	r0, r3, #31
3401450e:	d463      	bmi.n	340145d8 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34014510:	6823      	ldr	r3, [r4, #0]
34014512:	0799      	lsls	r1, r3, #30
34014514:	f100 80d4 	bmi.w	340146c0 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34014518:	6823      	ldr	r3, [r4, #0]
3401451a:	06d8      	lsls	r0, r3, #27
3401451c:	d522      	bpl.n	34014564 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
3401451e:	69e3      	ldr	r3, [r4, #28]
34014520:	2b00      	cmp	r3, #0
34014522:	f000 8347 	beq.w	34014bb4 <HAL_RCC_OscConfig+0x6fc>
34014526:	2b04      	cmp	r3, #4
34014528:	f000 834d 	beq.w	34014bc6 <HAL_RCC_OscConfig+0x70e>
3401452c:	f240 2105 	movw	r1, #517	@ 0x205
34014530:	487c      	ldr	r0, [pc, #496]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
34014532:	f009 fa29 	bl	3401d988 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34014536:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
3401453a:	f040 8148 	bne.w	340147ce <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3401453e:	69e3      	ldr	r3, [r4, #28]
34014540:	2b00      	cmp	r3, #0
34014542:	d0bd      	beq.n	340144c0 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34014544:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014546:	2b1f      	cmp	r3, #31
34014548:	d904      	bls.n	34014554 <HAL_RCC_OscConfig+0x9c>
3401454a:	f44f 7106 	mov.w	r1, #536	@ 0x218
3401454e:	4875      	ldr	r0, [pc, #468]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
34014550:	f009 fa1a 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
34014554:	4a74      	ldr	r2, [pc, #464]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
34014556:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34014558:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3401455a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3401455e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34014562:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
34014564:	6823      	ldr	r3, [r4, #0]
34014566:	0718      	lsls	r0, r3, #28
34014568:	f100 8189 	bmi.w	3401487e <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
3401456c:	6823      	ldr	r3, [r4, #0]
3401456e:	0759      	lsls	r1, r3, #29
34014570:	f100 81b4 	bmi.w	340148dc <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
34014574:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34014576:	2b03      	cmp	r3, #3
34014578:	d904      	bls.n	34014584 <HAL_RCC_OscConfig+0xcc>
3401457a:	f240 21a5 	movw	r1, #677	@ 0x2a5
3401457e:	4869      	ldr	r0, [pc, #420]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
34014580:	f009 fa02 	bl	3401d988 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34014584:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
34014586:	2f00      	cmp	r7, #0
34014588:	f040 8210 	bne.w	340149ac <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
3401458c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401458e:	2b03      	cmp	r3, #3
34014590:	d904      	bls.n	3401459c <HAL_RCC_OscConfig+0xe4>
34014592:	f240 21d3 	movw	r1, #723	@ 0x2d3
34014596:	4863      	ldr	r0, [pc, #396]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
34014598:	f009 f9f6 	bl	3401d988 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
3401459c:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3401459e:	2f00      	cmp	r7, #0
340145a0:	f040 8246 	bne.w	34014a30 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
340145a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
340145a6:	2b03      	cmp	r3, #3
340145a8:	d904      	bls.n	340145b4 <HAL_RCC_OscConfig+0xfc>
340145aa:	f240 3101 	movw	r1, #769	@ 0x301
340145ae:	485d      	ldr	r0, [pc, #372]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
340145b0:	f009 f9ea 	bl	3401d988 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
340145b4:	6e27      	ldr	r7, [r4, #96]	@ 0x60
340145b6:	2f00      	cmp	r7, #0
340145b8:	f040 827a 	bne.w	34014ab0 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
340145bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340145be:	2b03      	cmp	r3, #3
340145c0:	d904      	bls.n	340145cc <HAL_RCC_OscConfig+0x114>
340145c2:	f240 312e 	movw	r1, #814	@ 0x32e
340145c6:	4857      	ldr	r0, [pc, #348]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
340145c8:	f009 f9de 	bl	3401d988 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
340145cc:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
340145ce:	2f00      	cmp	r7, #0
340145d0:	f040 82b0 	bne.w	34014b34 <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
340145d4:	2000      	movs	r0, #0
340145d6:	e774      	b.n	340144c2 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
340145d8:	6863      	ldr	r3, [r4, #4]
340145da:	2b00      	cmp	r3, #0
340145dc:	f000 8313 	beq.w	34014c06 <HAL_RCC_OscConfig+0x74e>
340145e0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340145e4:	2a10      	cmp	r2, #16
340145e6:	f000 8305 	beq.w	34014bf4 <HAL_RCC_OscConfig+0x73c>
340145ea:	4a50      	ldr	r2, [pc, #320]	@ (3401472c <HAL_RCC_OscConfig+0x274>)
340145ec:	4293      	cmp	r3, r2
340145ee:	f000 8301 	beq.w	34014bf4 <HAL_RCC_OscConfig+0x73c>
340145f2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
340145f6:	484b      	ldr	r0, [pc, #300]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
340145f8:	f009 f9c6 	bl	3401d988 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
340145fc:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34014600:	d103      	bne.n	3401460a <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
34014602:	6863      	ldr	r3, [r4, #4]
34014604:	2b00      	cmp	r3, #0
34014606:	d183      	bne.n	34014510 <HAL_RCC_OscConfig+0x58>
34014608:	e75a      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3401460a:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
3401460e:	d0f8      	beq.n	34014602 <HAL_RCC_OscConfig+0x14a>
34014610:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
34014614:	d101      	bne.n	3401461a <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34014616:	05fa      	lsls	r2, r7, #23
34014618:	d4f3      	bmi.n	34014602 <HAL_RCC_OscConfig+0x14a>
3401461a:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
3401461e:	d101      	bne.n	34014624 <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34014620:	05bb      	lsls	r3, r7, #22
34014622:	d4ee      	bmi.n	34014602 <HAL_RCC_OscConfig+0x14a>
34014624:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
34014628:	d101      	bne.n	3401462e <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3401462a:	0578      	lsls	r0, r7, #21
3401462c:	d4e9      	bmi.n	34014602 <HAL_RCC_OscConfig+0x14a>
3401462e:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
34014632:	d101      	bne.n	34014638 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34014634:	0539      	lsls	r1, r7, #20
34014636:	d4e4      	bmi.n	34014602 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34014638:	6862      	ldr	r2, [r4, #4]
3401463a:	4b3b      	ldr	r3, [pc, #236]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
3401463c:	2a10      	cmp	r2, #16
3401463e:	d114      	bne.n	3401466a <HAL_RCC_OscConfig+0x1b2>
34014640:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34014644:	f008 fe70 	bl	3401d328 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34014648:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
3401464a:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
3401464c:	b35b      	cbz	r3, 340146a6 <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3401464e:	4b36      	ldr	r3, [pc, #216]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
34014650:	685a      	ldr	r2, [r3, #4]
34014652:	06d2      	lsls	r2, r2, #27
34014654:	f53f af5c 	bmi.w	34014510 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34014658:	f008 fe66 	bl	3401d328 <HAL_GetTick>
3401465c:	9b01      	ldr	r3, [sp, #4]
3401465e:	1ac0      	subs	r0, r0, r3
34014660:	2864      	cmp	r0, #100	@ 0x64
34014662:	4b31      	ldr	r3, [pc, #196]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
34014664:	d9f4      	bls.n	34014650 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
34014666:	2003      	movs	r0, #3
34014668:	e72b      	b.n	340144c2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
3401466a:	b93a      	cbnz	r2, 3401467c <HAL_RCC_OscConfig+0x1c4>
3401466c:	2110      	movs	r1, #16
3401466e:	4a30      	ldr	r2, [pc, #192]	@ (34014730 <HAL_RCC_OscConfig+0x278>)
34014670:	6011      	str	r1, [r2, #0]
34014672:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34014674:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34014678:	655a      	str	r2, [r3, #84]	@ 0x54
3401467a:	e7e3      	b.n	34014644 <HAL_RCC_OscConfig+0x18c>
3401467c:	f248 0110 	movw	r1, #32784	@ 0x8010
34014680:	428a      	cmp	r2, r1
34014682:	d109      	bne.n	34014698 <HAL_RCC_OscConfig+0x1e0>
34014684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34014686:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
3401468a:	655a      	str	r2, [r3, #84]	@ 0x54
3401468c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3401468e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34014692:	655a      	str	r2, [r3, #84]	@ 0x54
34014694:	2210      	movs	r2, #16
34014696:	e7d3      	b.n	34014640 <HAL_RCC_OscConfig+0x188>
34014698:	4924      	ldr	r1, [pc, #144]	@ (3401472c <HAL_RCC_OscConfig+0x274>)
3401469a:	428a      	cmp	r2, r1
3401469c:	d1e6      	bne.n	3401466c <HAL_RCC_OscConfig+0x1b4>
3401469e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340146a0:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
340146a4:	e7f5      	b.n	34014692 <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
340146a6:	4b20      	ldr	r3, [pc, #128]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
340146a8:	685a      	ldr	r2, [r3, #4]
340146aa:	06d3      	lsls	r3, r2, #27
340146ac:	f57f af30 	bpl.w	34014510 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340146b0:	f008 fe3a 	bl	3401d328 <HAL_GetTick>
340146b4:	9b01      	ldr	r3, [sp, #4]
340146b6:	1ac0      	subs	r0, r0, r3
340146b8:	2864      	cmp	r0, #100	@ 0x64
340146ba:	4b1b      	ldr	r3, [pc, #108]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
340146bc:	d9f4      	bls.n	340146a8 <HAL_RCC_OscConfig+0x1f0>
340146be:	e7d2      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
340146c0:	68e3      	ldr	r3, [r4, #12]
340146c2:	2b00      	cmp	r3, #0
340146c4:	f000 8288 	beq.w	34014bd8 <HAL_RCC_OscConfig+0x720>
340146c8:	2b08      	cmp	r3, #8
340146ca:	f000 828c 	beq.w	34014be6 <HAL_RCC_OscConfig+0x72e>
340146ce:	f240 11b5 	movw	r1, #437	@ 0x1b5
340146d2:	4814      	ldr	r0, [pc, #80]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
340146d4:	f009 f958 	bl	3401d988 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
340146d8:	bb66      	cbnz	r6, 34014734 <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
340146da:	68e3      	ldr	r3, [r4, #12]
340146dc:	2b00      	cmp	r3, #0
340146de:	f43f aeef 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
340146e2:	6923      	ldr	r3, [r4, #16]
340146e4:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
340146e8:	d004      	beq.n	340146f4 <HAL_RCC_OscConfig+0x23c>
340146ea:	f240 11c7 	movw	r1, #455	@ 0x1c7
340146ee:	480d      	ldr	r0, [pc, #52]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
340146f0:	f009 f94a 	bl	3401d988 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
340146f4:	6963      	ldr	r3, [r4, #20]
340146f6:	2b7f      	cmp	r3, #127	@ 0x7f
340146f8:	d904      	bls.n	34014704 <HAL_RCC_OscConfig+0x24c>
340146fa:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
340146fe:	4809      	ldr	r0, [pc, #36]	@ (34014724 <HAL_RCC_OscConfig+0x26c>)
34014700:	f009 f942 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34014704:	4a08      	ldr	r2, [pc, #32]	@ (34014728 <HAL_RCC_OscConfig+0x270>)
34014706:	6921      	ldr	r1, [r4, #16]
34014708:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3401470a:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
3401470e:	430b      	orrs	r3, r1
34014710:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34014712:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34014714:	6961      	ldr	r1, [r4, #20]
34014716:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
3401471a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401471e:	6493      	str	r3, [r2, #72]	@ 0x48
}
34014720:	e6fa      	b.n	34014518 <HAL_RCC_OscConfig+0x60>
34014722:	bf00      	nop
34014724:	34026afb 	.word	0x34026afb
34014728:	56028000 	.word	0x56028000
3401472c:	00018010 	.word	0x00018010
34014730:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34014734:	2d00      	cmp	r5, #0
34014736:	d0d0      	beq.n	340146da <HAL_RCC_OscConfig+0x222>
34014738:	f1bb 0f00 	cmp.w	fp, #0
3401473c:	d101      	bne.n	34014742 <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3401473e:	05f8      	lsls	r0, r7, #23
34014740:	d4cb      	bmi.n	340146da <HAL_RCC_OscConfig+0x222>
34014742:	f1ba 0f00 	cmp.w	sl, #0
34014746:	d101      	bne.n	3401474c <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34014748:	05b9      	lsls	r1, r7, #22
3401474a:	d4c6      	bmi.n	340146da <HAL_RCC_OscConfig+0x222>
3401474c:	f1b9 0f00 	cmp.w	r9, #0
34014750:	d101      	bne.n	34014756 <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34014752:	057a      	lsls	r2, r7, #21
34014754:	d4c1      	bmi.n	340146da <HAL_RCC_OscConfig+0x222>
34014756:	f1b8 0f00 	cmp.w	r8, #0
3401475a:	d101      	bne.n	34014760 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3401475c:	053b      	lsls	r3, r7, #20
3401475e:	d4bc      	bmi.n	340146da <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34014760:	68e3      	ldr	r3, [r4, #12]
34014762:	b313      	cbz	r3, 340147aa <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34014764:	6923      	ldr	r3, [r4, #16]
34014766:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
3401476a:	d004      	beq.n	34014776 <HAL_RCC_OscConfig+0x2be>
3401476c:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34014770:	48ab      	ldr	r0, [pc, #684]	@ (34014a20 <HAL_RCC_OscConfig+0x568>)
34014772:	f009 f909 	bl	3401d988 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34014776:	6963      	ldr	r3, [r4, #20]
34014778:	2b7f      	cmp	r3, #127	@ 0x7f
3401477a:	d904      	bls.n	34014786 <HAL_RCC_OscConfig+0x2ce>
3401477c:	f240 11d7 	movw	r1, #471	@ 0x1d7
34014780:	48a7      	ldr	r0, [pc, #668]	@ (34014a20 <HAL_RCC_OscConfig+0x568>)
34014782:	f009 f901 	bl	3401d988 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34014786:	2208      	movs	r2, #8
34014788:	4ba6      	ldr	r3, [pc, #664]	@ (34014a24 <HAL_RCC_OscConfig+0x56c>)
3401478a:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
3401478e:	f008 fdcb 	bl	3401d328 <HAL_GetTick>
34014792:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34014794:	f7ff fcaa 	bl	340140ec <LL_RCC_HSI_IsReady>
34014798:	2800      	cmp	r0, #0
3401479a:	d1b3      	bne.n	34014704 <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3401479c:	f008 fdc4 	bl	3401d328 <HAL_GetTick>
340147a0:	9b01      	ldr	r3, [sp, #4]
340147a2:	1ac0      	subs	r0, r0, r3
340147a4:	2801      	cmp	r0, #1
340147a6:	d9f5      	bls.n	34014794 <HAL_RCC_OscConfig+0x2dc>
340147a8:	e75d      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
340147aa:	2208      	movs	r2, #8
340147ac:	4b9e      	ldr	r3, [pc, #632]	@ (34014a28 <HAL_RCC_OscConfig+0x570>)
340147ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
340147b0:	f008 fdba 	bl	3401d328 <HAL_GetTick>
340147b4:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
340147b6:	f7ff fc99 	bl	340140ec <LL_RCC_HSI_IsReady>
340147ba:	2800      	cmp	r0, #0
340147bc:	f43f aeac 	beq.w	34014518 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
340147c0:	f008 fdb2 	bl	3401d328 <HAL_GetTick>
340147c4:	9b01      	ldr	r3, [sp, #4]
340147c6:	1ac0      	subs	r0, r0, r3
340147c8:	2801      	cmp	r0, #1
340147ca:	d9f4      	bls.n	340147b6 <HAL_RCC_OscConfig+0x2fe>
340147cc:	e74b      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340147ce:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
340147d2:	f43f aeb4 	beq.w	3401453e <HAL_RCC_OscConfig+0x86>
340147d6:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
340147da:	d102      	bne.n	340147e2 <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
340147dc:	05f9      	lsls	r1, r7, #23
340147de:	f53f aeae 	bmi.w	3401453e <HAL_RCC_OscConfig+0x86>
340147e2:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
340147e6:	d102      	bne.n	340147ee <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340147e8:	05ba      	lsls	r2, r7, #22
340147ea:	f53f aea8 	bmi.w	3401453e <HAL_RCC_OscConfig+0x86>
340147ee:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
340147f2:	d102      	bne.n	340147fa <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340147f4:	057b      	lsls	r3, r7, #21
340147f6:	f53f aea2 	bmi.w	3401453e <HAL_RCC_OscConfig+0x86>
340147fa:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
340147fe:	d102      	bne.n	34014806 <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34014800:	053f      	lsls	r7, r7, #20
34014802:	f53f ae9c 	bmi.w	3401453e <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34014806:	69e3      	ldr	r3, [r4, #28]
34014808:	b343      	cbz	r3, 3401485c <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
3401480a:	6a23      	ldr	r3, [r4, #32]
3401480c:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34014810:	d004      	beq.n	3401481c <HAL_RCC_OscConfig+0x364>
34014812:	f44f 7109 	mov.w	r1, #548	@ 0x224
34014816:	4882      	ldr	r0, [pc, #520]	@ (34014a20 <HAL_RCC_OscConfig+0x568>)
34014818:	f009 f8b6 	bl	3401d988 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
3401481c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401481e:	2b1f      	cmp	r3, #31
34014820:	d904      	bls.n	3401482c <HAL_RCC_OscConfig+0x374>
34014822:	f240 2125 	movw	r1, #549	@ 0x225
34014826:	487e      	ldr	r0, [pc, #504]	@ (34014a20 <HAL_RCC_OscConfig+0x568>)
34014828:	f009 f8ae 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
3401482c:	4a7d      	ldr	r2, [pc, #500]	@ (34014a24 <HAL_RCC_OscConfig+0x56c>)
3401482e:	6a21      	ldr	r1, [r4, #32]
34014830:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34014832:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34014836:	430b      	orrs	r3, r1
34014838:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
3401483a:	2304      	movs	r3, #4
3401483c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34014840:	f008 fd72 	bl	3401d328 <HAL_GetTick>
34014844:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
34014846:	f7ff fc59 	bl	340140fc <LL_RCC_MSI_IsReady>
3401484a:	2800      	cmp	r0, #0
3401484c:	f47f ae82 	bne.w	34014554 <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34014850:	f008 fd6a 	bl	3401d328 <HAL_GetTick>
34014854:	1bc0      	subs	r0, r0, r7
34014856:	2801      	cmp	r0, #1
34014858:	d9f5      	bls.n	34014846 <HAL_RCC_OscConfig+0x38e>
3401485a:	e704      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
3401485c:	2204      	movs	r2, #4
3401485e:	4b72      	ldr	r3, [pc, #456]	@ (34014a28 <HAL_RCC_OscConfig+0x570>)
34014860:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34014862:	f008 fd61 	bl	3401d328 <HAL_GetTick>
34014866:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34014868:	f7ff fc48 	bl	340140fc <LL_RCC_MSI_IsReady>
3401486c:	2800      	cmp	r0, #0
3401486e:	f43f ae79 	beq.w	34014564 <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34014872:	f008 fd59 	bl	3401d328 <HAL_GetTick>
34014876:	1bc0      	subs	r0, r0, r7
34014878:	2801      	cmp	r0, #1
3401487a:	d9f5      	bls.n	34014868 <HAL_RCC_OscConfig+0x3b0>
3401487c:	e6f3      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
3401487e:	69a3      	ldr	r3, [r4, #24]
34014880:	2b01      	cmp	r3, #1
34014882:	d904      	bls.n	3401488e <HAL_RCC_OscConfig+0x3d6>
34014884:	f240 2155 	movw	r1, #597	@ 0x255
34014888:	4865      	ldr	r0, [pc, #404]	@ (34014a20 <HAL_RCC_OscConfig+0x568>)
3401488a:	f009 f87d 	bl	3401d988 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
3401488e:	69a2      	ldr	r2, [r4, #24]
34014890:	2301      	movs	r3, #1
34014892:	b18a      	cbz	r2, 340148b8 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34014894:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34014a24 <HAL_RCC_OscConfig+0x56c>
34014898:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
3401489c:	f008 fd44 	bl	3401d328 <HAL_GetTick>
340148a0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340148a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
340148a6:	07da      	lsls	r2, r3, #31
340148a8:	f53f ae60 	bmi.w	3401456c <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340148ac:	f008 fd3c 	bl	3401d328 <HAL_GetTick>
340148b0:	1bc0      	subs	r0, r0, r7
340148b2:	2801      	cmp	r0, #1
340148b4:	d9f5      	bls.n	340148a2 <HAL_RCC_OscConfig+0x3ea>
340148b6:	e6d6      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340148b8:	4a5b      	ldr	r2, [pc, #364]	@ (34014a28 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340148ba:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34014a24 <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
340148be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
340148c0:	f008 fd32 	bl	3401d328 <HAL_GetTick>
340148c4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
340148c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
340148ca:	07db      	lsls	r3, r3, #31
340148cc:	f57f ae4e 	bpl.w	3401456c <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
340148d0:	f008 fd2a 	bl	3401d328 <HAL_GetTick>
340148d4:	1bc0      	subs	r0, r0, r7
340148d6:	2801      	cmp	r0, #1
340148d8:	d9f5      	bls.n	340148c6 <HAL_RCC_OscConfig+0x40e>
340148da:	e6c4      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
340148dc:	68a3      	ldr	r3, [r4, #8]
340148de:	f033 0202 	bics.w	r2, r3, #2
340148e2:	d00a      	beq.n	340148fa <HAL_RCC_OscConfig+0x442>
340148e4:	f248 0202 	movw	r2, #32770	@ 0x8002
340148e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340148ec:	4293      	cmp	r3, r2
340148ee:	d004      	beq.n	340148fa <HAL_RCC_OscConfig+0x442>
340148f0:	f44f 7120 	mov.w	r1, #640	@ 0x280
340148f4:	484a      	ldr	r0, [pc, #296]	@ (34014a20 <HAL_RCC_OscConfig+0x568>)
340148f6:	f009 f847 	bl	3401d988 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
340148fa:	68a3      	ldr	r3, [r4, #8]
340148fc:	4f49      	ldr	r7, [pc, #292]	@ (34014a24 <HAL_RCC_OscConfig+0x56c>)
340148fe:	2b02      	cmp	r3, #2
34014900:	d113      	bne.n	3401492a <HAL_RCC_OscConfig+0x472>
34014902:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34014906:	f008 fd0f 	bl	3401d328 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3401490a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
3401490e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34014910:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34014a24 <HAL_RCC_OscConfig+0x56c>
34014914:	f8d9 3004 	ldr.w	r3, [r9, #4]
34014918:	0798      	lsls	r0, r3, #30
3401491a:	f53f ae2b 	bmi.w	34014574 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3401491e:	f008 fd03 	bl	3401d328 <HAL_GetTick>
34014922:	1bc3      	subs	r3, r0, r7
34014924:	4543      	cmp	r3, r8
34014926:	d9f5      	bls.n	34014914 <HAL_RCC_OscConfig+0x45c>
34014928:	e69d      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3401492a:	b9d3      	cbnz	r3, 34014962 <HAL_RCC_OscConfig+0x4aa>
3401492c:	2202      	movs	r2, #2
3401492e:	4b3e      	ldr	r3, [pc, #248]	@ (34014a28 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34014930:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34014934:	601a      	str	r2, [r3, #0]
34014936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401493c:	643b      	str	r3, [r7, #64]	@ 0x40
3401493e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014940:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34014944:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
34014946:	f008 fcef 	bl	3401d328 <HAL_GetTick>
3401494a:	4680      	mov	r8, r0
3401494c:	687b      	ldr	r3, [r7, #4]
3401494e:	0799      	lsls	r1, r3, #30
34014950:	f57f ae10 	bpl.w	34014574 <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34014954:	f008 fce8 	bl	3401d328 <HAL_GetTick>
34014958:	eba0 0308 	sub.w	r3, r0, r8
3401495c:	454b      	cmp	r3, r9
3401495e:	d9f5      	bls.n	3401494c <HAL_RCC_OscConfig+0x494>
34014960:	e681      	b.n	34014666 <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34014962:	f248 0202 	movw	r2, #32770	@ 0x8002
34014966:	4293      	cmp	r3, r2
34014968:	d109      	bne.n	3401497e <HAL_RCC_OscConfig+0x4c6>
3401496a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3401496c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34014970:	643b      	str	r3, [r7, #64]	@ 0x40
34014972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34014978:	643b      	str	r3, [r7, #64]	@ 0x40
3401497a:	2302      	movs	r3, #2
3401497c:	e7c1      	b.n	34014902 <HAL_RCC_OscConfig+0x44a>
3401497e:	4a2b      	ldr	r2, [pc, #172]	@ (34014a2c <HAL_RCC_OscConfig+0x574>)
34014980:	4293      	cmp	r3, r2
34014982:	d107      	bne.n	34014994 <HAL_RCC_OscConfig+0x4dc>
34014984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34014986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3401498a:	643b      	str	r3, [r7, #64]	@ 0x40
3401498c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3401498e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34014992:	e7f1      	b.n	34014978 <HAL_RCC_OscConfig+0x4c0>
34014994:	2202      	movs	r2, #2
34014996:	4b24      	ldr	r3, [pc, #144]	@ (34014a28 <HAL_RCC_OscConfig+0x570>)
34014998:	601a      	str	r2, [r3, #0]
3401499a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3401499c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
340149a0:	643b      	str	r3, [r7, #64]	@ 0x40
340149a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
340149a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340149a8:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
340149aa:	e7ac      	b.n	34014906 <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
340149ac:	2000      	movs	r0, #0
340149ae:	f104 0128 	add.w	r1, r4, #40	@ 0x28
340149b2:	f7ff fbb3 	bl	3401411c <RCC_PLL_IsNewConfig>
340149b6:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
340149b8:	f7ff fba8 	bl	3401410c <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
340149bc:	2a01      	cmp	r2, #1
340149be:	d125      	bne.n	34014a0c <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340149c0:	4b18      	ldr	r3, [pc, #96]	@ (34014a24 <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
340149c2:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
340149c6:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340149ca:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
340149ce:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
340149d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
340149d6:	d103      	bne.n	340149e0 <HAL_RCC_OscConfig+0x528>
340149d8:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
340149dc:	f43f ad70 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
340149e0:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
340149e4:	d10b      	bne.n	340149fe <HAL_RCC_OscConfig+0x546>
340149e6:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
340149ea:	f43f ad69 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
340149ee:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
340149f2:	f43f ad65 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
340149f6:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
340149fa:	f43f ad61 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
340149fe:	2000      	movs	r0, #0
34014a00:	f7ff fbe6 	bl	340141d0 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34014a04:	2800      	cmp	r0, #0
34014a06:	f43f adc1 	beq.w	3401458c <HAL_RCC_OscConfig+0xd4>
34014a0a:	e559      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34014a0c:	2f02      	cmp	r7, #2
34014a0e:	f47f adbd 	bne.w	3401458c <HAL_RCC_OscConfig+0xd4>
34014a12:	2800      	cmp	r0, #0
34014a14:	f47f adba 	bne.w	3401458c <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34014a18:	f7ff fbc2 	bl	340141a0 <RCC_PLL_Enable>
34014a1c:	e7f2      	b.n	34014a04 <HAL_RCC_OscConfig+0x54c>
34014a1e:	bf00      	nop
34014a20:	34026afb 	.word	0x34026afb
34014a24:	56028000 	.word	0x56028000
34014a28:	56029000 	.word	0x56029000
34014a2c:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34014a30:	2001      	movs	r0, #1
34014a32:	f104 0144 	add.w	r1, r4, #68	@ 0x44
34014a36:	f7ff fb71 	bl	3401411c <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34014a3a:	4b77      	ldr	r3, [pc, #476]	@ (34014c18 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34014a3c:	2801      	cmp	r0, #1
34014a3e:	685a      	ldr	r2, [r3, #4]
34014a40:	d12c      	bne.n	34014a9c <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34014a42:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014a46:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014a4a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014a4e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014a52:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014a56:	d105      	bne.n	34014a64 <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014a58:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34014a5c:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34014a60:	f43f ad2e 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34014a64:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014a68:	d111      	bne.n	34014a8e <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014a6a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014a6e:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34014a72:	f43f ad25 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014a76:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34014a7a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34014a7e:	f43f ad1f 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014a82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34014a86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34014a8a:	f43f ad19 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34014a8e:	2001      	movs	r0, #1
34014a90:	f7ff fb9e 	bl	340141d0 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34014a94:	2800      	cmp	r0, #0
34014a96:	f43f ad85 	beq.w	340145a4 <HAL_RCC_OscConfig+0xec>
34014a9a:	e511      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34014a9c:	2f02      	cmp	r7, #2
34014a9e:	f47f ad81 	bne.w	340145a4 <HAL_RCC_OscConfig+0xec>
34014aa2:	0592      	lsls	r2, r2, #22
34014aa4:	f53f ad7e 	bmi.w	340145a4 <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34014aa8:	2001      	movs	r0, #1
34014aaa:	f7ff fb79 	bl	340141a0 <RCC_PLL_Enable>
34014aae:	e7f1      	b.n	34014a94 <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34014ab0:	2002      	movs	r0, #2
34014ab2:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34014ab6:	f7ff fb31 	bl	3401411c <RCC_PLL_IsNewConfig>
34014aba:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34014abc:	f7ff fb26 	bl	3401410c <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34014ac0:	2a01      	cmp	r2, #1
34014ac2:	d12d      	bne.n	34014b20 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014ac4:	4b54      	ldr	r3, [pc, #336]	@ (34014c18 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34014ac6:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34014aca:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014ace:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014ad2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014ad6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014ada:	d105      	bne.n	34014ae8 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014adc:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34014ae0:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
34014ae4:	f43f acec 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34014ae8:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014aec:	d111      	bne.n	34014b12 <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014aee:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014af2:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34014af6:	f43f ace3 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014afa:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34014afe:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34014b02:	f43f acdd 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014b06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34014b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34014b0e:	f43f acd7 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34014b12:	2002      	movs	r0, #2
34014b14:	f7ff fb5c 	bl	340141d0 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34014b18:	2800      	cmp	r0, #0
34014b1a:	f43f ad4f 	beq.w	340145bc <HAL_RCC_OscConfig+0x104>
34014b1e:	e4cf      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34014b20:	2f02      	cmp	r7, #2
34014b22:	f47f ad4b 	bne.w	340145bc <HAL_RCC_OscConfig+0x104>
34014b26:	2800      	cmp	r0, #0
34014b28:	f47f ad48 	bne.w	340145bc <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34014b2c:	4638      	mov	r0, r7
34014b2e:	f7ff fb37 	bl	340141a0 <RCC_PLL_Enable>
34014b32:	e7f1      	b.n	34014b18 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34014b34:	2003      	movs	r0, #3
34014b36:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34014b3a:	f7ff faef 	bl	3401411c <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34014b3e:	4b36      	ldr	r3, [pc, #216]	@ (34014c18 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34014b40:	2801      	cmp	r0, #1
34014b42:	685a      	ldr	r2, [r3, #4]
34014b44:	d12c      	bne.n	34014ba0 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34014b46:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014b4a:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014b4e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014b52:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014b56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34014b5a:	d105      	bne.n	34014b68 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014b5c:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34014b60:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34014b64:	f43f acac 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34014b68:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34014b6c:	d111      	bne.n	34014b92 <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34014b6e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014b72:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34014b76:	f43f aca3 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34014b7a:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34014b7e:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34014b82:	f43f ac9d 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34014b86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34014b8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014b8e:	f43f ac97 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34014b92:	2003      	movs	r0, #3
34014b94:	f7ff fb1c 	bl	340141d0 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34014b98:	3800      	subs	r0, #0
34014b9a:	bf18      	it	ne
34014b9c:	2001      	movne	r0, #1
34014b9e:	e490      	b.n	340144c2 <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34014ba0:	2f02      	cmp	r7, #2
34014ba2:	f47f ad17 	bne.w	340145d4 <HAL_RCC_OscConfig+0x11c>
34014ba6:	0513      	lsls	r3, r2, #20
34014ba8:	f53f ad14 	bmi.w	340145d4 <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34014bac:	2003      	movs	r0, #3
34014bae:	f7ff faf7 	bl	340141a0 <RCC_PLL_Enable>
34014bb2:	e7f1      	b.n	34014b98 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34014bb4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34014bb8:	f43f ac82 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
34014bbc:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34014bc0:	f47f ae09 	bne.w	340147d6 <HAL_RCC_OscConfig+0x31e>
34014bc4:	e47c      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
34014bc6:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34014bca:	f43f acbb 	beq.w	34014544 <HAL_RCC_OscConfig+0x8c>
34014bce:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34014bd2:	f47f ae00 	bne.w	340147d6 <HAL_RCC_OscConfig+0x31e>
34014bd6:	e4b5      	b.n	34014544 <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34014bd8:	2e00      	cmp	r6, #0
34014bda:	f43f ac71 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
34014bde:	2d00      	cmp	r5, #0
34014be0:	f47f adaa 	bne.w	34014738 <HAL_RCC_OscConfig+0x280>
34014be4:	e46c      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
34014be6:	2e00      	cmp	r6, #0
34014be8:	f43f ad7b 	beq.w	340146e2 <HAL_RCC_OscConfig+0x22a>
34014bec:	2d00      	cmp	r5, #0
34014bee:	f43f ad78 	beq.w	340146e2 <HAL_RCC_OscConfig+0x22a>
34014bf2:	e5a1      	b.n	34014738 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34014bf4:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34014bf8:	f43f ac8a 	beq.w	34014510 <HAL_RCC_OscConfig+0x58>
34014bfc:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34014c00:	f47f ad06 	bne.w	34014610 <HAL_RCC_OscConfig+0x158>
34014c04:	e484      	b.n	34014510 <HAL_RCC_OscConfig+0x58>
34014c06:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34014c0a:	f43f ac59 	beq.w	340144c0 <HAL_RCC_OscConfig+0x8>
34014c0e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34014c12:	f47f acfd 	bne.w	34014610 <HAL_RCC_OscConfig+0x158>
34014c16:	e453      	b.n	340144c0 <HAL_RCC_OscConfig+0x8>
34014c18:	56028000 	.word	0x56028000

34014c1c <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34014c1c:	4b1f      	ldr	r3, [pc, #124]	@ (34014c9c <HAL_RCC_GetCpuClockFreq+0x80>)
{
34014c1e:	b510      	push	{r4, lr}
34014c20:	6a1a      	ldr	r2, [r3, #32]
34014c22:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34014c26:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34014c2a:	d034      	beq.n	34014c96 <HAL_RCC_GetCpuClockFreq+0x7a>
34014c2c:	d806      	bhi.n	34014c3c <HAL_RCC_GetCpuClockFreq+0x20>
34014c2e:	b952      	cbnz	r2, 34014c46 <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34014c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34014c32:	481b      	ldr	r0, [pc, #108]	@ (34014ca0 <HAL_RCC_GetCpuClockFreq+0x84>)
34014c34:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34014c38:	40d8      	lsrs	r0, r3
}
34014c3a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34014c3c:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34014c40:	d009      	beq.n	34014c56 <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
34014c42:	2000      	movs	r0, #0
34014c44:	e7f9      	b.n	34014c3a <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34014c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34014c48:	4816      	ldr	r0, [pc, #88]	@ (34014ca4 <HAL_RCC_GetCpuClockFreq+0x88>)
34014c4a:	f413 7f00 	tst.w	r3, #512	@ 0x200
34014c4e:	4b16      	ldr	r3, [pc, #88]	@ (34014ca8 <HAL_RCC_GetCpuClockFreq+0x8c>)
34014c50:	bf08      	it	eq
34014c52:	4618      	moveq	r0, r3
34014c54:	e7f1      	b.n	34014c3a <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34014c56:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014c5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34014c5e:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014c62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
34014c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34014c6a:	f100 0401 	add.w	r4, r0, #1
34014c6e:	d00f      	beq.n	34014c90 <HAL_RCC_GetCpuClockFreq+0x74>
34014c70:	d805      	bhi.n	34014c7e <HAL_RCC_GetCpuClockFreq+0x62>
34014c72:	b953      	cbnz	r3, 34014c8a <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34014c74:	f003 fbba 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34014c78:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34014c7c:	e7dd      	b.n	34014c3a <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34014c7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34014c82:	d1de      	bne.n	34014c42 <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34014c84:	f003 fc72 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34014c88:	e7f6      	b.n	34014c78 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34014c8a:	f003 fbef 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
34014c8e:	e7f3      	b.n	34014c78 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34014c90:	f003 fc2c 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34014c94:	e7f0      	b.n	34014c78 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
34014c96:	4805      	ldr	r0, [pc, #20]	@ (34014cac <HAL_RCC_GetCpuClockFreq+0x90>)
34014c98:	e7cf      	b.n	34014c3a <HAL_RCC_GetCpuClockFreq+0x1e>
34014c9a:	bf00      	nop
34014c9c:	56028000 	.word	0x56028000
34014ca0:	03d09000 	.word	0x03d09000
34014ca4:	00f42400 	.word	0x00f42400
34014ca8:	003d0900 	.word	0x003d0900
34014cac:	02dc6c00 	.word	0x02dc6c00

34014cb0 <HAL_RCC_ClockConfig>:
{
34014cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
34014cb4:	4604      	mov	r4, r0
34014cb6:	b910      	cbnz	r0, 34014cbe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34014cb8:	2001      	movs	r0, #1
}
34014cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34014cbe:	6803      	ldr	r3, [r0, #0]
34014cc0:	2b7f      	cmp	r3, #127	@ 0x7f
34014cc2:	d904      	bls.n	34014cce <HAL_RCC_ClockConfig+0x1e>
34014cc4:	f240 317e 	movw	r1, #894	@ 0x37e
34014cc8:	4893      	ldr	r0, [pc, #588]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014cca:	f008 fe5d 	bl	3401d988 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34014cce:	6823      	ldr	r3, [r4, #0]
34014cd0:	071f      	lsls	r7, r3, #28
34014cd2:	d513      	bpl.n	34014cfc <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34014cd4:	6923      	ldr	r3, [r4, #16]
34014cd6:	2b07      	cmp	r3, #7
34014cd8:	d904      	bls.n	34014ce4 <HAL_RCC_ClockConfig+0x34>
34014cda:	f240 3185 	movw	r1, #901	@ 0x385
34014cde:	488e      	ldr	r0, [pc, #568]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014ce0:	f008 fe52 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34014ce4:	4a8d      	ldr	r2, [pc, #564]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014ce6:	6921      	ldr	r1, [r4, #16]
34014ce8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014cea:	f003 0307 	and.w	r3, r3, #7
34014cee:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34014cf0:	bf81      	itttt	hi
34014cf2:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34014cf4:	f023 0307 	bichi.w	r3, r3, #7
34014cf8:	430b      	orrhi	r3, r1
34014cfa:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34014cfc:	6823      	ldr	r3, [r4, #0]
34014cfe:	06de      	lsls	r6, r3, #27
34014d00:	d516      	bpl.n	34014d30 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34014d02:	6963      	ldr	r3, [r4, #20]
34014d04:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34014d08:	d006      	beq.n	34014d18 <HAL_RCC_ClockConfig+0x68>
34014d0a:	2b40      	cmp	r3, #64	@ 0x40
34014d0c:	d004      	beq.n	34014d18 <HAL_RCC_ClockConfig+0x68>
34014d0e:	f240 318f 	movw	r1, #911	@ 0x38f
34014d12:	4881      	ldr	r0, [pc, #516]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014d14:	f008 fe38 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34014d18:	4a80      	ldr	r2, [pc, #512]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014d1a:	6961      	ldr	r1, [r4, #20]
34014d1c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34014d22:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34014d24:	bf81      	itttt	hi
34014d26:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34014d28:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34014d2c:	430b      	orrhi	r3, r1
34014d2e:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34014d30:	6823      	ldr	r3, [r4, #0]
34014d32:	069d      	lsls	r5, r3, #26
34014d34:	d517      	bpl.n	34014d66 <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34014d36:	69a3      	ldr	r3, [r4, #24]
34014d38:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34014d3c:	d007      	beq.n	34014d4e <HAL_RCC_ClockConfig+0x9e>
34014d3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34014d42:	d004      	beq.n	34014d4e <HAL_RCC_ClockConfig+0x9e>
34014d44:	f240 3199 	movw	r1, #921	@ 0x399
34014d48:	4873      	ldr	r0, [pc, #460]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014d4a:	f008 fe1d 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34014d4e:	4a73      	ldr	r2, [pc, #460]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014d50:	69a1      	ldr	r1, [r4, #24]
34014d52:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014d54:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34014d58:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34014d5a:	bf81      	itttt	hi
34014d5c:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34014d5e:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
34014d62:	430b      	orrhi	r3, r1
34014d64:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34014d66:	6823      	ldr	r3, [r4, #0]
34014d68:	0658      	lsls	r0, r3, #25
34014d6a:	d517      	bpl.n	34014d9c <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34014d6c:	69e3      	ldr	r3, [r4, #28]
34014d6e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34014d72:	d007      	beq.n	34014d84 <HAL_RCC_ClockConfig+0xd4>
34014d74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34014d78:	d004      	beq.n	34014d84 <HAL_RCC_ClockConfig+0xd4>
34014d7a:	f240 31a3 	movw	r1, #931	@ 0x3a3
34014d7e:	4866      	ldr	r0, [pc, #408]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014d80:	f008 fe02 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34014d84:	4a65      	ldr	r2, [pc, #404]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014d86:	69e1      	ldr	r1, [r4, #28]
34014d88:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014d8a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34014d8e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34014d90:	bf81      	itttt	hi
34014d92:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34014d94:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34014d98:	430b      	orrhi	r3, r1
34014d9a:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34014d9c:	6823      	ldr	r3, [r4, #0]
34014d9e:	0759      	lsls	r1, r3, #29
34014da0:	d517      	bpl.n	34014dd2 <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34014da2:	68e3      	ldr	r3, [r4, #12]
34014da4:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34014da8:	d007      	beq.n	34014dba <HAL_RCC_ClockConfig+0x10a>
34014daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34014dae:	d004      	beq.n	34014dba <HAL_RCC_ClockConfig+0x10a>
34014db0:	f240 31ad 	movw	r1, #941	@ 0x3ad
34014db4:	4858      	ldr	r0, [pc, #352]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014db6:	f008 fde7 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34014dba:	4a58      	ldr	r2, [pc, #352]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014dbc:	68e1      	ldr	r1, [r4, #12]
34014dbe:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014dc0:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34014dc4:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34014dc6:	bf81      	itttt	hi
34014dc8:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34014dca:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34014dce:	430b      	orrhi	r3, r1
34014dd0:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34014dd2:	6823      	ldr	r3, [r4, #0]
34014dd4:	07da      	lsls	r2, r3, #31
34014dd6:	d52a      	bpl.n	34014e2e <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34014dd8:	6863      	ldr	r3, [r4, #4]
34014dda:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34014dde:	d004      	beq.n	34014dea <HAL_RCC_ClockConfig+0x13a>
34014de0:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
34014de4:	484c      	ldr	r0, [pc, #304]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014de6:	f008 fdcf 	bl	3401d988 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34014dea:	6863      	ldr	r3, [r4, #4]
34014dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34014df0:	f040 809a 	bne.w	34014f28 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34014df4:	4b49      	ldr	r3, [pc, #292]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014df6:	685b      	ldr	r3, [r3, #4]
34014df8:	06db      	lsls	r3, r3, #27
34014dfa:	f57f af5d 	bpl.w	34014cb8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34014dfe:	4d47      	ldr	r5, [pc, #284]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014e00:	6862      	ldr	r2, [r4, #4]
34014e02:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34014e04:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34014e08:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34014e0c:	4313      	orrs	r3, r2
34014e0e:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34014e10:	f008 fa8a 	bl	3401d328 <HAL_GetTick>
34014e14:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34014e16:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34014e18:	6862      	ldr	r2, [r4, #4]
34014e1a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34014e1e:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34014e22:	f040 80b7 	bne.w	34014f94 <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34014e26:	f7ff fef9 	bl	34014c1c <HAL_RCC_GetCpuClockFreq>
34014e2a:	4b3d      	ldr	r3, [pc, #244]	@ (34014f20 <HAL_RCC_ClockConfig+0x270>)
34014e2c:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34014e2e:	6823      	ldr	r3, [r4, #0]
34014e30:	079f      	lsls	r7, r3, #30
34014e32:	f100 80b7 	bmi.w	34014fa4 <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34014e36:	6823      	ldr	r3, [r4, #0]
34014e38:	075e      	lsls	r6, r3, #29
34014e3a:	f100 815c 	bmi.w	340150f6 <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34014e3e:	6823      	ldr	r3, [r4, #0]
34014e40:	0718      	lsls	r0, r3, #28
34014e42:	d513      	bpl.n	34014e6c <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34014e44:	6923      	ldr	r3, [r4, #16]
34014e46:	2b07      	cmp	r3, #7
34014e48:	d904      	bls.n	34014e54 <HAL_RCC_ClockConfig+0x1a4>
34014e4a:	f240 4163 	movw	r1, #1123	@ 0x463
34014e4e:	4832      	ldr	r0, [pc, #200]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014e50:	f008 fd9a 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34014e54:	4a31      	ldr	r2, [pc, #196]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014e56:	6921      	ldr	r1, [r4, #16]
34014e58:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014e5a:	f003 0307 	and.w	r3, r3, #7
34014e5e:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34014e60:	bf3f      	itttt	cc
34014e62:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34014e64:	f023 0307 	biccc.w	r3, r3, #7
34014e68:	430b      	orrcc	r3, r1
34014e6a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34014e6c:	6823      	ldr	r3, [r4, #0]
34014e6e:	06d9      	lsls	r1, r3, #27
34014e70:	d516      	bpl.n	34014ea0 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34014e72:	6963      	ldr	r3, [r4, #20]
34014e74:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34014e78:	d006      	beq.n	34014e88 <HAL_RCC_ClockConfig+0x1d8>
34014e7a:	2b40      	cmp	r3, #64	@ 0x40
34014e7c:	d004      	beq.n	34014e88 <HAL_RCC_ClockConfig+0x1d8>
34014e7e:	f240 416d 	movw	r1, #1133	@ 0x46d
34014e82:	4825      	ldr	r0, [pc, #148]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014e84:	f008 fd80 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34014e88:	4a24      	ldr	r2, [pc, #144]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014e8a:	6961      	ldr	r1, [r4, #20]
34014e8c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34014e92:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34014e94:	bf3f      	itttt	cc
34014e96:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34014e98:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34014e9c:	430b      	orrcc	r3, r1
34014e9e:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34014ea0:	6823      	ldr	r3, [r4, #0]
34014ea2:	069a      	lsls	r2, r3, #26
34014ea4:	d517      	bpl.n	34014ed6 <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34014ea6:	69a3      	ldr	r3, [r4, #24]
34014ea8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34014eac:	d007      	beq.n	34014ebe <HAL_RCC_ClockConfig+0x20e>
34014eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34014eb2:	d004      	beq.n	34014ebe <HAL_RCC_ClockConfig+0x20e>
34014eb4:	f240 4177 	movw	r1, #1143	@ 0x477
34014eb8:	4817      	ldr	r0, [pc, #92]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014eba:	f008 fd65 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34014ebe:	4a17      	ldr	r2, [pc, #92]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014ec0:	69a1      	ldr	r1, [r4, #24]
34014ec2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014ec4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34014ec8:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34014eca:	bf3f      	itttt	cc
34014ecc:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34014ece:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34014ed2:	430b      	orrcc	r3, r1
34014ed4:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34014ed6:	6823      	ldr	r3, [r4, #0]
34014ed8:	065b      	lsls	r3, r3, #25
34014eda:	d517      	bpl.n	34014f0c <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34014edc:	69e3      	ldr	r3, [r4, #28]
34014ede:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34014ee2:	d007      	beq.n	34014ef4 <HAL_RCC_ClockConfig+0x244>
34014ee4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34014ee8:	d004      	beq.n	34014ef4 <HAL_RCC_ClockConfig+0x244>
34014eea:	f240 4181 	movw	r1, #1153	@ 0x481
34014eee:	480a      	ldr	r0, [pc, #40]	@ (34014f18 <HAL_RCC_ClockConfig+0x268>)
34014ef0:	f008 fd4a 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34014ef4:	4a09      	ldr	r2, [pc, #36]	@ (34014f1c <HAL_RCC_ClockConfig+0x26c>)
34014ef6:	69e1      	ldr	r1, [r4, #28]
34014ef8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34014efa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34014efe:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34014f00:	bf3f      	itttt	cc
34014f02:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34014f04:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34014f08:	430b      	orrcc	r3, r1
34014f0a:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34014f0c:	4b05      	ldr	r3, [pc, #20]	@ (34014f24 <HAL_RCC_ClockConfig+0x274>)
}
34014f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34014f12:	6818      	ldr	r0, [r3, #0]
34014f14:	f008 ba1e 	b.w	3401d354 <HAL_InitTick>
34014f18:	34026afb 	.word	0x34026afb
34014f1c:	56028000 	.word	0x56028000
34014f20:	340a31fc 	.word	0x340a31fc
34014f24:	340a3200 	.word	0x340a3200
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34014f28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34014f2c:	d126      	bne.n	34014f7c <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34014f2e:	6a23      	ldr	r3, [r4, #32]
34014f30:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34014f34:	d004      	beq.n	34014f40 <HAL_RCC_ClockConfig+0x290>
34014f36:	f240 31c7 	movw	r1, #967	@ 0x3c7
34014f3a:	487b      	ldr	r0, [pc, #492]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34014f3c:	f008 fd24 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34014f40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014f42:	3b01      	subs	r3, #1
34014f44:	2bff      	cmp	r3, #255	@ 0xff
34014f46:	d904      	bls.n	34014f52 <HAL_RCC_ClockConfig+0x2a2>
34014f48:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34014f4c:	4876      	ldr	r0, [pc, #472]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34014f4e:	f008 fd1b 	bl	3401d988 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34014f52:	4e76      	ldr	r6, [pc, #472]	@ (3401512c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34014f54:	6a25      	ldr	r5, [r4, #32]
34014f56:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34014f5a:	4629      	mov	r1, r5
34014f5c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34014f60:	f7ff fa52 	bl	34014408 <RCC_IC_CheckPLLSources>
34014f64:	2801      	cmp	r0, #1
34014f66:	f47f aea7 	bne.w	34014cb8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34014f6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014f6c:	3b01      	subs	r3, #1
34014f6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34014f72:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34014f76:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34014f7a:	e740      	b.n	34014dfe <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34014f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34014f80:	d105      	bne.n	34014f8e <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34014f82:	f7ff f8bb 	bl	340140fc <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34014f86:	2800      	cmp	r0, #0
34014f88:	f47f af39 	bne.w	34014dfe <HAL_RCC_ClockConfig+0x14e>
34014f8c:	e694      	b.n	34014cb8 <HAL_RCC_ClockConfig+0x8>
34014f8e:	f7ff f8ad 	bl	340140ec <LL_RCC_HSI_IsReady>
34014f92:	e7f8      	b.n	34014f86 <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34014f94:	f008 f9c8 	bl	3401d328 <HAL_GetTick>
34014f98:	1b80      	subs	r0, r0, r6
34014f9a:	42b8      	cmp	r0, r7
34014f9c:	f67f af3b 	bls.w	34014e16 <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34014fa0:	2003      	movs	r0, #3
34014fa2:	e68a      	b.n	34014cba <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34014fa4:	68a3      	ldr	r3, [r4, #8]
34014fa6:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34014faa:	d004      	beq.n	34014fb6 <HAL_RCC_ClockConfig+0x306>
34014fac:	f240 4101 	movw	r1, #1025	@ 0x401
34014fb0:	485d      	ldr	r0, [pc, #372]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34014fb2:	f008 fce9 	bl	3401d988 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34014fb6:	68a3      	ldr	r3, [r4, #8]
34014fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34014fbc:	d11e      	bne.n	34014ffc <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34014fbe:	4b5b      	ldr	r3, [pc, #364]	@ (3401512c <HAL_RCC_ClockConfig+0x47c>)
34014fc0:	685b      	ldr	r3, [r3, #4]
34014fc2:	06dd      	lsls	r5, r3, #27
34014fc4:	f57f ae78 	bpl.w	34014cb8 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34014fc8:	4d58      	ldr	r5, [pc, #352]	@ (3401512c <HAL_RCC_ClockConfig+0x47c>)
34014fca:	68a2      	ldr	r2, [r4, #8]
34014fcc:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34014fce:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34014fd2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34014fd6:	4313      	orrs	r3, r2
34014fd8:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34014fda:	f008 f9a5 	bl	3401d328 <HAL_GetTick>
34014fde:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34014fe0:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34014fe2:	68a2      	ldr	r2, [r4, #8]
34014fe4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34014fe8:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34014fec:	f43f af23 	beq.w	34014e36 <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34014ff0:	f008 f99a 	bl	3401d328 <HAL_GetTick>
34014ff4:	1b80      	subs	r0, r0, r6
34014ff6:	42b8      	cmp	r0, r7
34014ff8:	d9f2      	bls.n	34014fe0 <HAL_RCC_ClockConfig+0x330>
34014ffa:	e7d1      	b.n	34014fa0 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34014ffc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34015000:	d16f      	bne.n	340150e2 <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34015002:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34015004:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015008:	d004      	beq.n	34015014 <HAL_RCC_ClockConfig+0x364>
3401500a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
3401500e:	4846      	ldr	r0, [pc, #280]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34015010:	f008 fcba 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34015014:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34015016:	3b01      	subs	r3, #1
34015018:	2bff      	cmp	r3, #255	@ 0xff
3401501a:	d904      	bls.n	34015026 <HAL_RCC_ClockConfig+0x376>
3401501c:	f240 4111 	movw	r1, #1041	@ 0x411
34015020:	4841      	ldr	r0, [pc, #260]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34015022:	f008 fcb1 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34015026:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34015028:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401502c:	d004      	beq.n	34015038 <HAL_RCC_ClockConfig+0x388>
3401502e:	f240 4112 	movw	r1, #1042	@ 0x412
34015032:	483d      	ldr	r0, [pc, #244]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34015034:	f008 fca8 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34015038:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401503a:	3b01      	subs	r3, #1
3401503c:	2bff      	cmp	r3, #255	@ 0xff
3401503e:	d904      	bls.n	3401504a <HAL_RCC_ClockConfig+0x39a>
34015040:	f240 4113 	movw	r1, #1043	@ 0x413
34015044:	4838      	ldr	r0, [pc, #224]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34015046:	f008 fc9f 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
3401504a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401504c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015050:	d004      	beq.n	3401505c <HAL_RCC_ClockConfig+0x3ac>
34015052:	f240 4114 	movw	r1, #1044	@ 0x414
34015056:	4834      	ldr	r0, [pc, #208]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
34015058:	f008 fc96 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
3401505c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401505e:	3b01      	subs	r3, #1
34015060:	2bff      	cmp	r3, #255	@ 0xff
34015062:	d904      	bls.n	3401506e <HAL_RCC_ClockConfig+0x3be>
34015064:	f240 4115 	movw	r1, #1045	@ 0x415
34015068:	482f      	ldr	r0, [pc, #188]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
3401506a:	f008 fc8d 	bl	3401d988 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3401506e:	4d2f      	ldr	r5, [pc, #188]	@ (3401512c <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34015070:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34015074:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34015078:	4641      	mov	r1, r8
3401507a:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3401507e:	f7ff f9c3 	bl	34014408 <RCC_IC_CheckPLLSources>
34015082:	2801      	cmp	r0, #1
34015084:	f47f ae18 	bne.w	34014cb8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015088:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
3401508c:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3401508e:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34015092:	4639      	mov	r1, r7
34015094:	f7ff f9b8 	bl	34014408 <RCC_IC_CheckPLLSources>
34015098:	2801      	cmp	r0, #1
3401509a:	f47f ae0d 	bne.w	34014cb8 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3401509e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
340150a2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
340150a4:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340150a8:	4631      	mov	r1, r6
340150aa:	f7ff f9ad 	bl	34014408 <RCC_IC_CheckPLLSources>
340150ae:	2801      	cmp	r0, #1
340150b0:	f47f ae02 	bne.w	34014cb8 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
340150b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340150b6:	3b01      	subs	r3, #1
340150b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
340150bc:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
340150c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340150c2:	3b01      	subs	r3, #1
340150c4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
340150c8:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
340150cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340150ce:	3b01      	subs	r3, #1
340150d0:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
340150d4:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
340150d8:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
340150dc:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
340150e0:	e772      	b.n	34014fc8 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
340150e2:	b92b      	cbnz	r3, 340150f0 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
340150e4:	f7ff f802 	bl	340140ec <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
340150e8:	2800      	cmp	r0, #0
340150ea:	f47f af6d 	bne.w	34014fc8 <HAL_RCC_ClockConfig+0x318>
340150ee:	e5e3      	b.n	34014cb8 <HAL_RCC_ClockConfig+0x8>
340150f0:	f7ff f804 	bl	340140fc <LL_RCC_MSI_IsReady>
340150f4:	e7f8      	b.n	340150e8 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
340150f6:	68e3      	ldr	r3, [r4, #12]
340150f8:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
340150fc:	d007      	beq.n	3401510e <HAL_RCC_ClockConfig+0x45e>
340150fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34015102:	d004      	beq.n	3401510e <HAL_RCC_ClockConfig+0x45e>
34015104:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34015108:	4807      	ldr	r0, [pc, #28]	@ (34015128 <HAL_RCC_ClockConfig+0x478>)
3401510a:	f008 fc3d 	bl	3401d988 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
3401510e:	4a07      	ldr	r2, [pc, #28]	@ (3401512c <HAL_RCC_ClockConfig+0x47c>)
34015110:	68e1      	ldr	r1, [r4, #12]
34015112:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34015114:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34015118:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3401511a:	bf3f      	itttt	cc
3401511c:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
3401511e:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34015122:	430b      	orrcc	r3, r1
34015124:	6253      	strcc	r3, [r2, #36]	@ 0x24
34015126:	e68a      	b.n	34014e3e <HAL_RCC_ClockConfig+0x18e>
34015128:	34026afb 	.word	0x34026afb
3401512c:	56028000 	.word	0x56028000

34015130 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34015130:	4b1f      	ldr	r3, [pc, #124]	@ (340151b0 <HAL_RCC_GetSysClockFreq+0x80>)
{
34015132:	b510      	push	{r4, lr}
34015134:	6a1a      	ldr	r2, [r3, #32]
34015136:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
3401513a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3401513e:	d034      	beq.n	340151aa <HAL_RCC_GetSysClockFreq+0x7a>
34015140:	d806      	bhi.n	34015150 <HAL_RCC_GetSysClockFreq+0x20>
34015142:	b952      	cbnz	r2, 3401515a <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34015144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34015146:	481b      	ldr	r0, [pc, #108]	@ (340151b4 <HAL_RCC_GetSysClockFreq+0x84>)
34015148:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401514c:	40d8      	lsrs	r0, r3
}
3401514e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34015150:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34015154:	d009      	beq.n	3401516a <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
34015156:	2000      	movs	r0, #0
34015158:	e7f9      	b.n	3401514e <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3401515a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
3401515c:	4816      	ldr	r0, [pc, #88]	@ (340151b8 <HAL_RCC_GetSysClockFreq+0x88>)
3401515e:	f413 7f00 	tst.w	r3, #512	@ 0x200
34015162:	4b16      	ldr	r3, [pc, #88]	@ (340151bc <HAL_RCC_GetSysClockFreq+0x8c>)
34015164:	bf08      	it	eq
34015166:	4618      	moveq	r0, r3
34015168:	e7f1      	b.n	3401514e <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3401516a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
3401516e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34015172:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015176:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
3401517a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
3401517e:	f100 0401 	add.w	r4, r0, #1
34015182:	d00f      	beq.n	340151a4 <HAL_RCC_GetSysClockFreq+0x74>
34015184:	d805      	bhi.n	34015192 <HAL_RCC_GetSysClockFreq+0x62>
34015186:	b953      	cbnz	r3, 3401519e <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015188:	f003 f930 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
3401518c:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34015190:	e7dd      	b.n	3401514e <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
34015192:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015196:	d1de      	bne.n	34015156 <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34015198:	f003 f9e8 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
3401519c:	e7f6      	b.n	3401518c <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401519e:	f003 f965 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
340151a2:	e7f3      	b.n	3401518c <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
340151a4:	f003 f9a2 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
340151a8:	e7f0      	b.n	3401518c <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
340151aa:	4805      	ldr	r0, [pc, #20]	@ (340151c0 <HAL_RCC_GetSysClockFreq+0x90>)
340151ac:	e7cf      	b.n	3401514e <HAL_RCC_GetSysClockFreq+0x1e>
340151ae:	bf00      	nop
340151b0:	56028000 	.word	0x56028000
340151b4:	03d09000 	.word	0x03d09000
340151b8:	00f42400 	.word	0x00f42400
340151bc:	003d0900 	.word	0x003d0900
340151c0:	02dc6c00 	.word	0x02dc6c00

340151c4 <HAL_RCC_GetPCLK1Freq>:
{
340151c4:	b508      	push	{r3, lr}
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
340151c6:	f7ff ffb3 	bl	34015130 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340151ca:	4b05      	ldr	r3, [pc, #20]	@ (340151e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
340151cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340151ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340151d0:	f3c2 5202 	ubfx	r2, r2, #20, #3
340151d4:	40d0      	lsrs	r0, r2
340151d6:	f003 0307 	and.w	r3, r3, #7
}
340151da:	40d8      	lsrs	r0, r3
340151dc:	bd08      	pop	{r3, pc}
340151de:	bf00      	nop
340151e0:	56028000 	.word	0x56028000

340151e4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340151e4:	4a02      	ldr	r2, [pc, #8]	@ (340151f0 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
340151e6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
340151e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
340151ec:	6553      	str	r3, [r2, #84]	@ 0x54
}
340151ee:	4770      	bx	lr
340151f0:	56028000 	.word	0x56028000

340151f4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
340151f4:	4a02      	ldr	r2, [pc, #8]	@ (34015200 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
340151f6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
340151f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340151fc:	6553      	str	r3, [r2, #84]	@ 0x54
}
340151fe:	4770      	bx	lr
34015200:	56028000 	.word	0x56028000

34015204 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34015204:	4b02      	ldr	r3, [pc, #8]	@ (34015210 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
34015206:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34015208:	f3c0 1080 	ubfx	r0, r0, #6, #1
3401520c:	4770      	bx	lr
3401520e:	bf00      	nop
34015210:	56028000 	.word	0x56028000

34015214 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34015214:	4b02      	ldr	r3, [pc, #8]	@ (34015220 <LL_RCC_HSE_IsReady+0xc>)
34015216:	6858      	ldr	r0, [r3, #4]
}
34015218:	f3c0 1000 	ubfx	r0, r0, #4, #1
3401521c:	4770      	bx	lr
3401521e:	bf00      	nop
34015220:	56028000 	.word	0x56028000

34015224 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34015224:	4b02      	ldr	r3, [pc, #8]	@ (34015230 <LL_RCC_HSI_IsReady+0xc>)
34015226:	6858      	ldr	r0, [r3, #4]
}
34015228:	f3c0 00c0 	ubfx	r0, r0, #3, #1
3401522c:	4770      	bx	lr
3401522e:	bf00      	nop
34015230:	56028000 	.word	0x56028000

34015234 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34015234:	4b02      	ldr	r3, [pc, #8]	@ (34015240 <LL_RCC_MSI_IsReady+0xc>)
34015236:	6858      	ldr	r0, [r3, #4]
}
34015238:	f3c0 0080 	ubfx	r0, r0, #2, #1
3401523c:	4770      	bx	lr
3401523e:	bf00      	nop
34015240:	56028000 	.word	0x56028000

34015244 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34015244:	4b02      	ldr	r3, [pc, #8]	@ (34015250 <LL_RCC_LSE_IsReady+0xc>)
34015246:	6858      	ldr	r0, [r3, #4]
}
34015248:	f3c0 0040 	ubfx	r0, r0, #1, #1
3401524c:	4770      	bx	lr
3401524e:	bf00      	nop
34015250:	56028000 	.word	0x56028000

34015254 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34015254:	4907      	ldr	r1, [pc, #28]	@ (34015274 <LL_RCC_SetClockSource+0x20>)
{
34015256:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34015258:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3401525a:	f3c0 2504 	ubfx	r5, r0, #8, #5
3401525e:	5863      	ldr	r3, [r4, r1]
34015260:	0e02      	lsrs	r2, r0, #24
34015262:	40aa      	lsls	r2, r5
34015264:	f3c0 4007 	ubfx	r0, r0, #16, #8
34015268:	ea23 0302 	bic.w	r3, r3, r2
3401526c:	40a8      	lsls	r0, r5
3401526e:	4303      	orrs	r3, r0
34015270:	5063      	str	r3, [r4, r1]
}
34015272:	bd30      	pop	{r4, r5, pc}
34015274:	56028144 	.word	0x56028144

34015278 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34015278:	4b05      	ldr	r3, [pc, #20]	@ (34015290 <LL_RCC_GetClockSource+0x18>)
3401527a:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
3401527c:	58d1      	ldr	r1, [r2, r3]
3401527e:	f3c0 2204 	ubfx	r2, r0, #8, #5
34015282:	0e03      	lsrs	r3, r0, #24
34015284:	4093      	lsls	r3, r2
34015286:	400b      	ands	r3, r1
34015288:	40d3      	lsrs	r3, r2
}
3401528a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
3401528e:	4770      	bx	lr
34015290:	56028144 	.word	0x56028144

34015294 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34015294:	4b02      	ldr	r3, [pc, #8]	@ (340152a0 <LL_RCC_IC7_IsEnabled+0xc>)
34015296:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3401529a:	f3c0 1080 	ubfx	r0, r0, #6, #1
3401529e:	4770      	bx	lr
340152a0:	56028000 	.word	0x56028000

340152a4 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
340152a4:	4b03      	ldr	r3, [pc, #12]	@ (340152b4 <LL_RCC_IC7_GetDivider+0x10>)
340152a6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
340152aa:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340152ae:	3001      	adds	r0, #1
340152b0:	4770      	bx	lr
340152b2:	bf00      	nop
340152b4:	56028000 	.word	0x56028000

340152b8 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
340152b8:	4b02      	ldr	r3, [pc, #8]	@ (340152c4 <LL_RCC_IC8_IsEnabled+0xc>)
340152ba:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340152be:	f3c0 10c0 	ubfx	r0, r0, #7, #1
340152c2:	4770      	bx	lr
340152c4:	56028000 	.word	0x56028000

340152c8 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
340152c8:	4b03      	ldr	r3, [pc, #12]	@ (340152d8 <LL_RCC_IC8_GetDivider+0x10>)
340152ca:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
340152ce:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340152d2:	3001      	adds	r0, #1
340152d4:	4770      	bx	lr
340152d6:	bf00      	nop
340152d8:	56028000 	.word	0x56028000

340152dc <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
340152dc:	4b02      	ldr	r3, [pc, #8]	@ (340152e8 <LL_RCC_IC9_IsEnabled+0xc>)
340152de:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340152e2:	f3c0 2000 	ubfx	r0, r0, #8, #1
340152e6:	4770      	bx	lr
340152e8:	56028000 	.word	0x56028000

340152ec <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
340152ec:	4b03      	ldr	r3, [pc, #12]	@ (340152fc <LL_RCC_IC9_GetDivider+0x10>)
340152ee:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
340152f2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340152f6:	3001      	adds	r0, #1
340152f8:	4770      	bx	lr
340152fa:	bf00      	nop
340152fc:	56028000 	.word	0x56028000

34015300 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34015300:	4b02      	ldr	r3, [pc, #8]	@ (3401530c <LL_RCC_IC14_IsEnabled+0xc>)
34015302:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34015306:	f3c0 3040 	ubfx	r0, r0, #13, #1
3401530a:	4770      	bx	lr
3401530c:	56028000 	.word	0x56028000

34015310 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34015310:	4b03      	ldr	r3, [pc, #12]	@ (34015320 <LL_RCC_IC14_GetDivider+0x10>)
34015312:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
34015316:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3401531a:	3001      	adds	r0, #1
3401531c:	4770      	bx	lr
3401531e:	bf00      	nop
34015320:	56028000 	.word	0x56028000

34015324 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34015324:	4b02      	ldr	r3, [pc, #8]	@ (34015330 <LL_RCC_IC15_IsEnabled+0xc>)
34015326:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3401532a:	f3c0 3080 	ubfx	r0, r0, #14, #1
3401532e:	4770      	bx	lr
34015330:	56028000 	.word	0x56028000

34015334 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34015334:	4b03      	ldr	r3, [pc, #12]	@ (34015344 <LL_RCC_IC15_GetDivider+0x10>)
34015336:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
3401533a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3401533e:	3001      	adds	r0, #1
34015340:	4770      	bx	lr
34015342:	bf00      	nop
34015344:	56028000 	.word	0x56028000

34015348 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34015348:	4b02      	ldr	r3, [pc, #8]	@ (34015354 <RCCEx_GetHCLKFreq+0xc>)
3401534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
3401534c:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34015350:	40d8      	lsrs	r0, r3
34015352:	4770      	bx	lr
34015354:	56028000 	.word	0x56028000

34015358 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
34015358:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
3401535c:	b508      	push	{r3, lr}
  switch (PLLsource)
3401535e:	d01d      	beq.n	3401539c <RCCEx_GetPLLSourceFreq+0x44>
34015360:	d80a      	bhi.n	34015378 <RCCEx_GetPLLSourceFreq+0x20>
34015362:	b970      	cbnz	r0, 34015382 <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34015364:	f7ff ff5e 	bl	34015224 <LL_RCC_HSI_IsReady>
34015368:	b148      	cbz	r0, 3401537e <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401536a:	4b10      	ldr	r3, [pc, #64]	@ (340153ac <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401536c:	4810      	ldr	r0, [pc, #64]	@ (340153b0 <RCCEx_GetPLLSourceFreq+0x58>)
3401536e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34015370:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34015374:	40d8      	lsrs	r0, r3
34015376:	e003      	b.n	34015380 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
34015378:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3401537c:	d014      	beq.n	340153a8 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3401537e:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34015380:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34015382:	f7ff ff57 	bl	34015234 <LL_RCC_MSI_IsReady>
34015386:	2800      	cmp	r0, #0
34015388:	d0f9      	beq.n	3401537e <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3401538a:	4b08      	ldr	r3, [pc, #32]	@ (340153ac <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
3401538c:	4809      	ldr	r0, [pc, #36]	@ (340153b4 <RCCEx_GetPLLSourceFreq+0x5c>)
3401538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34015390:	f413 7f00 	tst.w	r3, #512	@ 0x200
34015394:	4b08      	ldr	r3, [pc, #32]	@ (340153b8 <RCCEx_GetPLLSourceFreq+0x60>)
34015396:	bf08      	it	eq
34015398:	4618      	moveq	r0, r3
3401539a:	e7f1      	b.n	34015380 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
3401539c:	f7ff ff3a 	bl	34015214 <LL_RCC_HSE_IsReady>
340153a0:	2800      	cmp	r0, #0
340153a2:	d0ec      	beq.n	3401537e <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
340153a4:	4805      	ldr	r0, [pc, #20]	@ (340153bc <RCCEx_GetPLLSourceFreq+0x64>)
340153a6:	e7eb      	b.n	34015380 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
340153a8:	4805      	ldr	r0, [pc, #20]	@ (340153c0 <RCCEx_GetPLLSourceFreq+0x68>)
340153aa:	e7e9      	b.n	34015380 <RCCEx_GetPLLSourceFreq+0x28>
340153ac:	56028000 	.word	0x56028000
340153b0:	03d09000 	.word	0x03d09000
340153b4:	00f42400 	.word	0x00f42400
340153b8:	003d0900 	.word	0x003d0900
340153bc:	02dc6c00 	.word	0x02dc6c00
340153c0:	00bb8000 	.word	0x00bb8000

340153c4 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
340153c4:	ee07 2a10 	vmov	s14, r2
340153c8:	ee06 3a10 	vmov	s12, r3
340153cc:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340153d0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
340153d4:	eddf 5a10 	vldr	s11, [pc, #64]	@ 34015418 <RCCEx_CalcPLLFreq+0x54>
340153d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
340153dc:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
340153e0:	eea6 7a25 	vfma.f32	s14, s12, s11
340153e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
340153e8:	ee67 7a87 	vmul.f32	s15, s15, s14
340153ec:	eeb8 7a66 	vcvt.f32.u32	s14, s13
340153f0:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
340153f4:	eddd 7a00 	vldr	s15, [sp]
340153f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340153fc:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
34015400:	eddd 7a01 	vldr	s15, [sp, #4]
34015404:	eef8 7a67 	vcvt.f32.u32	s15, s15
34015408:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
3401540c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
34015410:	ee17 0a90 	vmov	r0, s15
34015414:	4770      	bx	lr
34015416:	bf00      	nop
34015418:	33800000 	.word	0x33800000

3401541c <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3401541c:	e9d0 2300 	ldrd	r2, r3, [r0]
34015420:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34015424:	431a      	orrs	r2, r3
{
34015426:	b570      	push	{r4, r5, r6, lr}
34015428:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
3401542a:	d103      	bne.n	34015434 <HAL_RCCEx_PeriphCLKConfig+0x18>
3401542c:	2188      	movs	r1, #136	@ 0x88
3401542e:	4861      	ldr	r0, [pc, #388]	@ (340155b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34015430:	f008 faaa 	bl	3401d988 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34015434:	6823      	ldr	r3, [r4, #0]
34015436:	011a      	lsls	r2, r3, #4
34015438:	f140 808e 	bpl.w	34015558 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
3401543c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34015440:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34015444:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
34015448:	d05a      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401544a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401544e:	d057      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
34015454:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
34015458:	d052      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401545a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
3401545e:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
34015462:	d04d      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015464:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
34015468:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
3401546c:	d048      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401546e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
34015472:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
34015476:	d043      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015478:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3401547c:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34015480:	d03e      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015482:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34015486:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
3401548a:	d039      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401548c:	494a      	ldr	r1, [pc, #296]	@ (340155b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
3401548e:	428a      	cmp	r2, r1
34015490:	d036      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34015492:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34015496:	428a      	cmp	r2, r1
34015498:	d032      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401549a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401549e:	428a      	cmp	r2, r1
340154a0:	d02e      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154a2:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
340154a6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154aa:	4288      	cmp	r0, r1
340154ac:	d028      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154ae:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
340154b2:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
340154b6:	4288      	cmp	r0, r1
340154b8:	d022      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154ba:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
340154be:	428a      	cmp	r2, r1
340154c0:	d01e      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154c2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154c6:	428a      	cmp	r2, r1
340154c8:	d01a      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154ca:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154ce:	428a      	cmp	r2, r1
340154d0:	d016      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154d2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154d6:	428a      	cmp	r2, r1
340154d8:	d012      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154da:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154de:	428a      	cmp	r2, r1
340154e0:	d00e      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154e2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154e6:	428a      	cmp	r2, r1
340154e8:	d00a      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154ea:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
340154ee:	428a      	cmp	r2, r1
340154f0:	d006      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154f2:	4a32      	ldr	r2, [pc, #200]	@ (340155bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
340154f4:	4293      	cmp	r3, r2
340154f6:	d003      	beq.n	34015500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340154f8:	218e      	movs	r1, #142	@ 0x8e
340154fa:	482e      	ldr	r0, [pc, #184]	@ (340155b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
340154fc:	f008 fa44 	bl	3401d988 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34015500:	4b2f      	ldr	r3, [pc, #188]	@ (340155c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34015502:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
34015506:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3401550a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
3401550e:	d13b      	bne.n	34015588 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34015510:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34015514:	d108      	bne.n	34015528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
34015516:	f007 ff07 	bl	3401d328 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3401551a:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
3401551e:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
34015520:	f7ff fe90 	bl	34015244 <LL_RCC_LSE_IsReady>
34015524:	2800      	cmp	r0, #0
34015526:	d03d      	beq.n	340155a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34015528:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
3401552c:	4a24      	ldr	r2, [pc, #144]	@ (340155c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
3401552e:	f403 7040 	and.w	r0, r3, #768	@ 0x300
34015532:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
34015536:	d108      	bne.n	3401554a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34015538:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
3401553c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34015540:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34015544:	430b      	orrs	r3, r1
34015546:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
3401554a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3401554e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34015552:	4303      	orrs	r3, r0
34015554:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34015558:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
3401555a:	6823      	ldr	r3, [r4, #0]
3401555c:	075e      	lsls	r6, r3, #29
3401555e:	d55f      	bpl.n	34015620 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
34015560:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34015564:	2b07      	cmp	r3, #7
34015566:	d903      	bls.n	34015570 <HAL_RCCEx_PeriphCLKConfig+0x154>
34015568:	21d4      	movs	r1, #212	@ 0xd4
3401556a:	4812      	ldr	r0, [pc, #72]	@ (340155b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
3401556c:	f008 fa0c 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
34015570:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34015574:	3b03      	subs	r3, #3
34015576:	2b04      	cmp	r3, #4
34015578:	d848      	bhi.n	3401560c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
3401557a:	e8df f013 	tbh	[pc, r3, lsl #1]
3401557e:	0f27      	.short	0x0f27
34015580:	0ee10025 	.word	0x0ee10025
34015584:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34015588:	f401 7240 	and.w	r2, r1, #768	@ 0x300
3401558c:	429a      	cmp	r2, r3
3401558e:	d0bf      	beq.n	34015510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34015590:	4b0c      	ldr	r3, [pc, #48]	@ (340155c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
34015592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34015594:	f042 0201 	orr.w	r2, r2, #1
34015598:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
3401559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3401559c:	07db      	lsls	r3, r3, #31
3401559e:	d4b7      	bmi.n	34015510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
340155a0:	2501      	movs	r5, #1
340155a2:	e7da      	b.n	3401555a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340155a4:	f007 fec0 	bl	3401d328 <HAL_GetTick>
340155a8:	1b40      	subs	r0, r0, r5
340155aa:	42b0      	cmp	r0, r6
340155ac:	d9b8      	bls.n	34015520 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
340155ae:	2503      	movs	r5, #3
340155b0:	e7d3      	b.n	3401555a <HAL_RCCEx_PeriphCLKConfig+0x13e>
340155b2:	bf00      	nop
340155b4:	34026b5b 	.word	0x34026b5b
340155b8:	00010300 	.word	0x00010300
340155bc:	0003e300 	.word	0x0003e300
340155c0:	56028000 	.word	0x56028000
340155c4:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340155c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340155ca:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340155ce:	d003      	beq.n	340155d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
340155d0:	21d9      	movs	r1, #217	@ 0xd9
340155d2:	48bd      	ldr	r0, [pc, #756]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340155d4:	f008 f9d8 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340155d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340155da:	3b01      	subs	r3, #1
340155dc:	2bff      	cmp	r3, #255	@ 0xff
340155de:	d903      	bls.n	340155e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
340155e0:	21da      	movs	r1, #218	@ 0xda
340155e2:	48b9      	ldr	r0, [pc, #740]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340155e4:	f008 f9d0 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340155e8:	4ab8      	ldr	r2, [pc, #736]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340155ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340155ec:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340155f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340155f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340155f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340155fa:	3901      	subs	r1, #1
340155fc:	4303      	orrs	r3, r0
340155fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015602:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34015606:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34015608:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
3401560c:	4aaf      	ldr	r2, [pc, #700]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
3401560e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
34015612:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34015616:	f023 0307 	bic.w	r3, r3, #7
3401561a:	430b      	orrs	r3, r1
3401561c:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34015620:	6863      	ldr	r3, [r4, #4]
34015622:	0258      	lsls	r0, r3, #9
34015624:	d539      	bpl.n	3401569a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
34015626:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
3401562a:	4aa9      	ldr	r2, [pc, #676]	@ (340158d0 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
3401562c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015630:	4293      	cmp	r3, r2
34015632:	d004      	beq.n	3401563e <HAL_RCCEx_PeriphCLKConfig+0x222>
34015634:	f44f 7192 	mov.w	r1, #292	@ 0x124
34015638:	48a3      	ldr	r0, [pc, #652]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401563a:	f008 f9a5 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3401563e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34015642:	4aa4      	ldr	r2, [pc, #656]	@ (340158d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
34015644:	4293      	cmp	r3, r2
34015646:	f041 8713 	bne.w	34017470 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3401564a:	69a3      	ldr	r3, [r4, #24]
3401564c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015650:	d004      	beq.n	3401565c <HAL_RCCEx_PeriphCLKConfig+0x240>
34015652:	f240 1129 	movw	r1, #297	@ 0x129
34015656:	489c      	ldr	r0, [pc, #624]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015658:	f008 f996 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3401565c:	69e3      	ldr	r3, [r4, #28]
3401565e:	3b01      	subs	r3, #1
34015660:	2bff      	cmp	r3, #255	@ 0xff
34015662:	d904      	bls.n	3401566e <HAL_RCCEx_PeriphCLKConfig+0x252>
34015664:	f44f 7195 	mov.w	r1, #298	@ 0x12a
34015668:	4897      	ldr	r0, [pc, #604]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401566a:	f008 f98d 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
3401566e:	4a97      	ldr	r2, [pc, #604]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015670:	69e1      	ldr	r1, [r4, #28]
34015672:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34015676:	69a0      	ldr	r0, [r4, #24]
34015678:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401567c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015680:	3901      	subs	r1, #1
34015682:	4303      	orrs	r3, r0
34015684:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015688:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
3401568c:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3401568e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015692:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
34015696:	f7ff fddd 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
3401569a:	6863      	ldr	r3, [r4, #4]
3401569c:	0219      	lsls	r1, r3, #8
3401569e:	d539      	bpl.n	34015714 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
340156a0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340156a4:	4a8c      	ldr	r2, [pc, #560]	@ (340158d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
340156a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340156aa:	4293      	cmp	r3, r2
340156ac:	d004      	beq.n	340156b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
340156ae:	f240 1151 	movw	r1, #337	@ 0x151
340156b2:	4885      	ldr	r0, [pc, #532]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340156b4:	f008 f968 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
340156b8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
340156bc:	4a87      	ldr	r2, [pc, #540]	@ (340158dc <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
340156be:	4293      	cmp	r3, r2
340156c0:	f041 8706 	bne.w	340174d0 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340156c4:	69a3      	ldr	r3, [r4, #24]
340156c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340156ca:	d004      	beq.n	340156d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
340156cc:	f44f 71ab 	mov.w	r1, #342	@ 0x156
340156d0:	487d      	ldr	r0, [pc, #500]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340156d2:	f008 f959 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340156d6:	69e3      	ldr	r3, [r4, #28]
340156d8:	3b01      	subs	r3, #1
340156da:	2bff      	cmp	r3, #255	@ 0xff
340156dc:	d904      	bls.n	340156e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
340156de:	f240 1157 	movw	r1, #343	@ 0x157
340156e2:	4879      	ldr	r0, [pc, #484]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340156e4:	f008 f950 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340156e8:	4a78      	ldr	r2, [pc, #480]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340156ea:	69e1      	ldr	r1, [r4, #28]
340156ec:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340156f0:	69a0      	ldr	r0, [r4, #24]
340156f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340156f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340156fa:	3901      	subs	r1, #1
340156fc:	4303      	orrs	r3, r0
340156fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015702:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34015706:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015708:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401570c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
34015710:	f7ff fda0 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34015714:	6863      	ldr	r3, [r4, #4]
34015716:	01da      	lsls	r2, r3, #7
34015718:	d539      	bpl.n	3401578e <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
3401571a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3401571e:	4a70      	ldr	r2, [pc, #448]	@ (340158e0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
34015720:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015724:	4293      	cmp	r3, r2
34015726:	d004      	beq.n	34015732 <HAL_RCCEx_PeriphCLKConfig+0x316>
34015728:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
3401572c:	4866      	ldr	r0, [pc, #408]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401572e:	f008 f92b 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34015732:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34015736:	4a6b      	ldr	r2, [pc, #428]	@ (340158e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34015738:	4293      	cmp	r3, r2
3401573a:	f041 86f9 	bne.w	34017530 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3401573e:	69a3      	ldr	r3, [r4, #24]
34015740:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015744:	d004      	beq.n	34015750 <HAL_RCCEx_PeriphCLKConfig+0x334>
34015746:	f240 1183 	movw	r1, #387	@ 0x183
3401574a:	485f      	ldr	r0, [pc, #380]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401574c:	f008 f91c 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34015750:	69e3      	ldr	r3, [r4, #28]
34015752:	3b01      	subs	r3, #1
34015754:	2bff      	cmp	r3, #255	@ 0xff
34015756:	d904      	bls.n	34015762 <HAL_RCCEx_PeriphCLKConfig+0x346>
34015758:	f44f 71c2 	mov.w	r1, #388	@ 0x184
3401575c:	485a      	ldr	r0, [pc, #360]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401575e:	f008 f913 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34015762:	4a5a      	ldr	r2, [pc, #360]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34015764:	69e1      	ldr	r1, [r4, #28]
34015766:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3401576a:	69a0      	ldr	r0, [r4, #24]
3401576c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015770:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015774:	3901      	subs	r1, #1
34015776:	4303      	orrs	r3, r0
34015778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401577c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34015780:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015782:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015786:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
3401578a:	f7ff fd63 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3401578e:	6823      	ldr	r3, [r4, #0]
34015790:	051b      	lsls	r3, r3, #20
34015792:	d53c      	bpl.n	3401580e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34015794:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34015798:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3401579c:	d004      	beq.n	340157a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
3401579e:	f240 11ab 	movw	r1, #427	@ 0x1ab
340157a2:	4849      	ldr	r0, [pc, #292]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340157a4:	f008 f8f0 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
340157a8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340157ac:	2b20      	cmp	r3, #32
340157ae:	f041 86ff 	bne.w	340175b0 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340157b2:	69a3      	ldr	r3, [r4, #24]
340157b4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340157b8:	d004      	beq.n	340157c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
340157ba:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
340157be:	4842      	ldr	r0, [pc, #264]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340157c0:	f008 f8e2 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340157c4:	69e3      	ldr	r3, [r4, #28]
340157c6:	3b01      	subs	r3, #1
340157c8:	2bff      	cmp	r3, #255	@ 0xff
340157ca:	d904      	bls.n	340157d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
340157cc:	f240 11b1 	movw	r1, #433	@ 0x1b1
340157d0:	483d      	ldr	r0, [pc, #244]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340157d2:	f008 f8d9 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340157d6:	4a3d      	ldr	r2, [pc, #244]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340157d8:	69e1      	ldr	r1, [r4, #28]
340157da:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340157de:	69a0      	ldr	r0, [r4, #24]
340157e0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340157e4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340157e8:	3901      	subs	r1, #1
340157ea:	4303      	orrs	r3, r0
340157ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340157f0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
340157f4:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340157f6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
340157fa:	4a34      	ldr	r2, [pc, #208]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340157fc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
34015800:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34015804:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34015808:	430b      	orrs	r3, r1
3401580a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3401580e:	6823      	ldr	r3, [r4, #0]
34015810:	005e      	lsls	r6, r3, #1
34015812:	d539      	bpl.n	34015888 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34015814:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34015818:	4a33      	ldr	r2, [pc, #204]	@ (340158e8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
3401581a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3401581e:	4293      	cmp	r3, r2
34015820:	d004      	beq.n	3401582c <HAL_RCCEx_PeriphCLKConfig+0x410>
34015822:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34015826:	4828      	ldr	r0, [pc, #160]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015828:	f008 f8ae 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
3401582c:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34015830:	4a2e      	ldr	r2, [pc, #184]	@ (340158ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
34015832:	4293      	cmp	r3, r2
34015834:	f041 86ea 	bne.w	3401760c <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34015838:	6a23      	ldr	r3, [r4, #32]
3401583a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401583e:	d004      	beq.n	3401584a <HAL_RCCEx_PeriphCLKConfig+0x42e>
34015840:	f240 11dd 	movw	r1, #477	@ 0x1dd
34015844:	4820      	ldr	r0, [pc, #128]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015846:	f008 f89f 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3401584a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401584c:	3b01      	subs	r3, #1
3401584e:	2bff      	cmp	r3, #255	@ 0xff
34015850:	d904      	bls.n	3401585c <HAL_RCCEx_PeriphCLKConfig+0x440>
34015852:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34015856:	481c      	ldr	r0, [pc, #112]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34015858:	f008 f896 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3401585c:	4a1b      	ldr	r2, [pc, #108]	@ (340158cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
3401585e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34015860:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34015864:	6a20      	ldr	r0, [r4, #32]
34015866:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401586a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401586e:	3901      	subs	r1, #1
34015870:	4303      	orrs	r3, r0
34015872:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015876:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3401587a:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3401587c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015880:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34015884:	f7ff fce6 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34015888:	6823      	ldr	r3, [r4, #0]
3401588a:	2b00      	cmp	r3, #0
3401588c:	da53      	bge.n	34015936 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
3401588e:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34015892:	4a17      	ldr	r2, [pc, #92]	@ (340158f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
34015894:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34015898:	4293      	cmp	r3, r2
3401589a:	d004      	beq.n	340158a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
3401589c:	f240 2105 	movw	r1, #517	@ 0x205
340158a0:	4809      	ldr	r0, [pc, #36]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340158a2:	f008 f871 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
340158a6:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
340158aa:	4a12      	ldr	r2, [pc, #72]	@ (340158f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
340158ac:	4293      	cmp	r3, r2
340158ae:	f041 86dd 	bne.w	3401766c <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340158b2:	6a23      	ldr	r3, [r4, #32]
340158b4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340158b8:	d01e      	beq.n	340158f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
340158ba:	f240 210a 	movw	r1, #522	@ 0x20a
340158be:	4802      	ldr	r0, [pc, #8]	@ (340158c8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340158c0:	f008 f862 	bl	3401d988 <assert_failed>
340158c4:	e018      	b.n	340158f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
340158c6:	bf00      	nop
340158c8:	34026b5b 	.word	0x34026b5b
340158cc:	56028000 	.word	0x56028000
340158d0:	03000014 	.word	0x03000014
340158d4:	03020014 	.word	0x03020014
340158d8:	03000414 	.word	0x03000414
340158dc:	03020414 	.word	0x03020414
340158e0:	03000814 	.word	0x03000814
340158e4:	03020814 	.word	0x03020814
340158e8:	0300001c 	.word	0x0300001c
340158ec:	0302001c 	.word	0x0302001c
340158f0:	0300041c 	.word	0x0300041c
340158f4:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340158f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340158fa:	3b01      	subs	r3, #1
340158fc:	2bff      	cmp	r3, #255	@ 0xff
340158fe:	d904      	bls.n	3401590a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
34015900:	f240 210b 	movw	r1, #523	@ 0x20b
34015904:	48c4      	ldr	r0, [pc, #784]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015906:	f008 f83f 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3401590a:	4ac4      	ldr	r2, [pc, #784]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
3401590c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401590e:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34015912:	6a20      	ldr	r0, [r4, #32]
34015914:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015918:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401591c:	3901      	subs	r1, #1
3401591e:	4303      	orrs	r3, r0
34015920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015924:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34015928:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3401592a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401592e:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
34015932:	f7ff fc8f 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34015936:	6823      	ldr	r3, [r4, #0]
34015938:	07d8      	lsls	r0, r3, #31
3401593a:	d54f      	bpl.n	340159dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
3401593c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34015940:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34015944:	d006      	beq.n	34015954 <HAL_RCCEx_PeriphCLKConfig+0x538>
34015946:	2b40      	cmp	r3, #64	@ 0x40
34015948:	d004      	beq.n	34015954 <HAL_RCCEx_PeriphCLKConfig+0x538>
3401594a:	f240 2132 	movw	r1, #562	@ 0x232
3401594e:	48b2      	ldr	r0, [pc, #712]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015950:	f008 f81a 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34015954:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34015958:	3b01      	subs	r3, #1
3401595a:	2bff      	cmp	r3, #255	@ 0xff
3401595c:	d904      	bls.n	34015968 <HAL_RCCEx_PeriphCLKConfig+0x54c>
3401595e:	f240 2133 	movw	r1, #563	@ 0x233
34015962:	48ad      	ldr	r0, [pc, #692]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015964:	f008 f810 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34015968:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
3401596c:	2b20      	cmp	r3, #32
3401596e:	f041 86ad 	bne.w	340176cc <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34015972:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34015974:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015978:	d004      	beq.n	34015984 <HAL_RCCEx_PeriphCLKConfig+0x568>
3401597a:	f44f 710e 	mov.w	r1, #568	@ 0x238
3401597e:	48a6      	ldr	r0, [pc, #664]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015980:	f008 f802 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34015984:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34015986:	3b01      	subs	r3, #1
34015988:	2bff      	cmp	r3, #255	@ 0xff
3401598a:	d904      	bls.n	34015996 <HAL_RCCEx_PeriphCLKConfig+0x57a>
3401598c:	f240 2139 	movw	r1, #569	@ 0x239
34015990:	48a1      	ldr	r0, [pc, #644]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015992:	f007 fff9 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34015996:	4aa1      	ldr	r2, [pc, #644]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015998:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3401599a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3401599e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340159a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340159a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340159a8:	3901      	subs	r1, #1
340159aa:	4303      	orrs	r3, r0
340159ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340159b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340159b4:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340159b6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
340159ba:	4998      	ldr	r1, [pc, #608]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
340159bc:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
340159c0:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
340159c4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
340159c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
340159cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
340159d0:	3a01      	subs	r2, #1
340159d2:	4303      	orrs	r3, r0
340159d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
340159d8:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
340159dc:	6823      	ldr	r3, [r4, #0]
340159de:	0799      	lsls	r1, r3, #30
340159e0:	d53b      	bpl.n	34015a5a <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
340159e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340159e6:	2b07      	cmp	r3, #7
340159e8:	d904      	bls.n	340159f4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
340159ea:	f240 2161 	movw	r1, #609	@ 0x261
340159ee:	488a      	ldr	r0, [pc, #552]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
340159f0:	f007 ffca 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
340159f4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
340159f8:	2b02      	cmp	r3, #2
340159fa:	f041 8695 	bne.w	34017728 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340159fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34015a00:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015a04:	d004      	beq.n	34015a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
34015a06:	f240 2166 	movw	r1, #614	@ 0x266
34015a0a:	4883      	ldr	r0, [pc, #524]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015a0c:	f007 ffbc 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34015a10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34015a12:	3b01      	subs	r3, #1
34015a14:	2bff      	cmp	r3, #255	@ 0xff
34015a16:	d904      	bls.n	34015a22 <HAL_RCCEx_PeriphCLKConfig+0x606>
34015a18:	f240 2167 	movw	r1, #615	@ 0x267
34015a1c:	487e      	ldr	r0, [pc, #504]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015a1e:	f007 ffb3 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34015a22:	4a7e      	ldr	r2, [pc, #504]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015a24:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34015a26:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34015a2a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34015a2c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015a30:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015a34:	3901      	subs	r1, #1
34015a36:	4303      	orrs	r3, r0
34015a38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015a3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34015a40:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34015a42:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34015a46:	4a75      	ldr	r2, [pc, #468]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015a48:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34015a4c:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34015a50:	f023 0307 	bic.w	r3, r3, #7
34015a54:	430b      	orrs	r3, r1
34015a56:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34015a5a:	6823      	ldr	r3, [r4, #0]
34015a5c:	071a      	lsls	r2, r3, #28
34015a5e:	d528      	bpl.n	34015ab2 <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34015a60:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34015a64:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015a68:	d004      	beq.n	34015a74 <HAL_RCCEx_PeriphCLKConfig+0x658>
34015a6a:	f240 218e 	movw	r1, #654	@ 0x28e
34015a6e:	486a      	ldr	r0, [pc, #424]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015a70:	f007 ff8a 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34015a74:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34015a78:	3b01      	subs	r3, #1
34015a7a:	2bff      	cmp	r3, #255	@ 0xff
34015a7c:	d904      	bls.n	34015a88 <HAL_RCCEx_PeriphCLKConfig+0x66c>
34015a7e:	f240 218f 	movw	r1, #655	@ 0x28f
34015a82:	4865      	ldr	r0, [pc, #404]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015a84:	f007 ff80 	bl	3401d988 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34015a88:	4a64      	ldr	r2, [pc, #400]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015a8a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34015a8e:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34015a92:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34015a96:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015a9a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015a9e:	3901      	subs	r1, #1
34015aa0:	4303      	orrs	r3, r0
34015aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015aa6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34015aaa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34015aae:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34015ab2:	6823      	ldr	r3, [r4, #0]
34015ab4:	06db      	lsls	r3, r3, #27
34015ab6:	d542      	bpl.n	34015b3e <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34015ab8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34015abc:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34015ac0:	d004      	beq.n	34015acc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
34015ac2:	f240 219d 	movw	r1, #669	@ 0x29d
34015ac6:	4854      	ldr	r0, [pc, #336]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015ac8:	f007 ff5e 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34015acc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34015ad0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34015ad4:	f041 8656 	bne.w	34017784 <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34015ad8:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34015adc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015ae0:	d004      	beq.n	34015aec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
34015ae2:	f240 21a2 	movw	r1, #674	@ 0x2a2
34015ae6:	484c      	ldr	r0, [pc, #304]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015ae8:	f007 ff4e 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34015aec:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34015af0:	3b01      	subs	r3, #1
34015af2:	2bff      	cmp	r3, #255	@ 0xff
34015af4:	d904      	bls.n	34015b00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
34015af6:	f240 21a3 	movw	r1, #675	@ 0x2a3
34015afa:	4847      	ldr	r0, [pc, #284]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015afc:	f007 ff44 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34015b00:	4a46      	ldr	r2, [pc, #280]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015b02:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
34015b06:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
34015b0a:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
34015b0e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015b12:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015b16:	3901      	subs	r1, #1
34015b18:	4303      	orrs	r3, r0
34015b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015b1e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34015b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34015b26:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34015b2a:	4a3c      	ldr	r2, [pc, #240]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015b2c:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34015b30:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34015b34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34015b38:	430b      	orrs	r3, r1
34015b3a:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34015b3e:	6823      	ldr	r3, [r4, #0]
34015b40:	069e      	lsls	r6, r3, #26
34015b42:	d53e      	bpl.n	34015bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34015b44:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34015b48:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34015b4c:	d004      	beq.n	34015b58 <HAL_RCCEx_PeriphCLKConfig+0x73c>
34015b4e:	f240 21bd 	movw	r1, #701	@ 0x2bd
34015b52:	4831      	ldr	r0, [pc, #196]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015b54:	f007 ff18 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34015b58:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34015b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34015b60:	f041 8619 	bne.w	34017796 <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34015b64:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34015b66:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015b6a:	d004      	beq.n	34015b76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
34015b6c:	f240 21c2 	movw	r1, #706	@ 0x2c2
34015b70:	4829      	ldr	r0, [pc, #164]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015b72:	f007 ff09 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34015b76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34015b78:	3b01      	subs	r3, #1
34015b7a:	2bff      	cmp	r3, #255	@ 0xff
34015b7c:	d904      	bls.n	34015b88 <HAL_RCCEx_PeriphCLKConfig+0x76c>
34015b7e:	f240 21c3 	movw	r1, #707	@ 0x2c3
34015b82:	4825      	ldr	r0, [pc, #148]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015b84:	f007 ff00 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34015b88:	4a24      	ldr	r2, [pc, #144]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015b8a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34015b8c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34015b90:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34015b92:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015b96:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015b9a:	3901      	subs	r1, #1
34015b9c:	4303      	orrs	r3, r0
34015b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34015ba6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34015baa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34015bae:	4a1b      	ldr	r2, [pc, #108]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015bb0:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34015bb4:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34015bb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34015bbc:	430b      	orrs	r3, r1
34015bbe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34015bc2:	6823      	ldr	r3, [r4, #0]
34015bc4:	0658      	lsls	r0, r3, #25
34015bc6:	d516      	bpl.n	34015bf6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34015bc8:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34015bcc:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34015bd0:	d007      	beq.n	34015be2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34015bd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34015bd6:	d004      	beq.n	34015be2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34015bd8:	f240 21dd 	movw	r1, #733	@ 0x2dd
34015bdc:	480e      	ldr	r0, [pc, #56]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015bde:	f007 fed3 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34015be2:	4a0e      	ldr	r2, [pc, #56]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015be4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34015be8:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34015bec:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34015bf0:	430b      	orrs	r3, r1
34015bf2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34015bf6:	6823      	ldr	r3, [r4, #0]
34015bf8:	0619      	lsls	r1, r3, #24
34015bfa:	d518      	bpl.n	34015c2e <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34015bfc:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34015c00:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34015c04:	d004      	beq.n	34015c10 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34015c06:	f240 21e7 	movw	r1, #743	@ 0x2e7
34015c0a:	4803      	ldr	r0, [pc, #12]	@ (34015c18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34015c0c:	f007 febc 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34015c10:	4a02      	ldr	r2, [pc, #8]	@ (34015c1c <HAL_RCCEx_PeriphCLKConfig+0x800>)
34015c12:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34015c16:	e003      	b.n	34015c20 <HAL_RCCEx_PeriphCLKConfig+0x804>
34015c18:	34026b5b 	.word	0x34026b5b
34015c1c:	56028000 	.word	0x56028000
34015c20:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34015c24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34015c28:	430b      	orrs	r3, r1
34015c2a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34015c2e:	6823      	ldr	r3, [r4, #0]
34015c30:	05da      	lsls	r2, r3, #23
34015c32:	d513      	bpl.n	34015c5c <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34015c34:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34015c38:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34015c3c:	d004      	beq.n	34015c48 <HAL_RCCEx_PeriphCLKConfig+0x82c>
34015c3e:	f240 21f1 	movw	r1, #753	@ 0x2f1
34015c42:	48c1      	ldr	r0, [pc, #772]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015c44:	f007 fea0 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34015c48:	4ac0      	ldr	r2, [pc, #768]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015c4a:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34015c4e:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34015c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34015c56:	430b      	orrs	r3, r1
34015c58:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34015c5c:	6823      	ldr	r3, [r4, #0]
34015c5e:	059b      	lsls	r3, r3, #22
34015c60:	d54b      	bpl.n	34015cfa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34015c62:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34015c66:	2b03      	cmp	r3, #3
34015c68:	d904      	bls.n	34015c74 <HAL_RCCEx_PeriphCLKConfig+0x858>
34015c6a:	f240 21fb 	movw	r1, #763	@ 0x2fb
34015c6e:	48b6      	ldr	r0, [pc, #728]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015c70:	f007 fe8a 	bl	3401d988 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34015c74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34015c78:	3b01      	subs	r3, #1
34015c7a:	2b0f      	cmp	r3, #15
34015c7c:	d904      	bls.n	34015c88 <HAL_RCCEx_PeriphCLKConfig+0x86c>
34015c7e:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
34015c82:	48b1      	ldr	r0, [pc, #708]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015c84:	f007 fe80 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34015c88:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34015c8c:	2b02      	cmp	r3, #2
34015c8e:	f041 858b 	bne.w	340177a8 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
34015c92:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
34015c94:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015c98:	d004      	beq.n	34015ca4 <HAL_RCCEx_PeriphCLKConfig+0x888>
34015c9a:	f240 3101 	movw	r1, #769	@ 0x301
34015c9e:	48aa      	ldr	r0, [pc, #680]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015ca0:	f007 fe72 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
34015ca4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
34015ca6:	3b01      	subs	r3, #1
34015ca8:	2bff      	cmp	r3, #255	@ 0xff
34015caa:	d904      	bls.n	34015cb6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
34015cac:	f240 3102 	movw	r1, #770	@ 0x302
34015cb0:	48a5      	ldr	r0, [pc, #660]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015cb2:	f007 fe69 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34015cb6:	4aa5      	ldr	r2, [pc, #660]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015cb8:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34015cba:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34015cbe:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34015cc0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015cc4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015cc8:	3901      	subs	r1, #1
34015cca:	4303      	orrs	r3, r0
34015ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34015cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34015cd8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34015cdc:	499b      	ldr	r1, [pc, #620]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015cde:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
34015ce2:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34015ce6:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34015cea:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34015cee:	3a01      	subs	r2, #1
34015cf0:	4303      	orrs	r3, r0
34015cf2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34015cf6:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34015cfa:	6823      	ldr	r3, [r4, #0]
34015cfc:	055e      	lsls	r6, r3, #21
34015cfe:	d540      	bpl.n	34015d82 <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34015d00:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34015d04:	2b03      	cmp	r3, #3
34015d06:	d904      	bls.n	34015d12 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34015d08:	f240 311d 	movw	r1, #797	@ 0x31d
34015d0c:	488e      	ldr	r0, [pc, #568]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015d0e:	f007 fe3b 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
34015d12:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34015d16:	2b02      	cmp	r3, #2
34015d18:	f041 854e 	bne.w	340177b8 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34015d1c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34015d20:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015d24:	d004      	beq.n	34015d30 <HAL_RCCEx_PeriphCLKConfig+0x914>
34015d26:	f240 3122 	movw	r1, #802	@ 0x322
34015d2a:	4887      	ldr	r0, [pc, #540]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015d2c:	f007 fe2c 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34015d30:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34015d34:	3b01      	subs	r3, #1
34015d36:	2bff      	cmp	r3, #255	@ 0xff
34015d38:	d904      	bls.n	34015d44 <HAL_RCCEx_PeriphCLKConfig+0x928>
34015d3a:	f240 3123 	movw	r1, #803	@ 0x323
34015d3e:	4882      	ldr	r0, [pc, #520]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015d40:	f007 fe22 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34015d44:	4a81      	ldr	r2, [pc, #516]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015d46:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34015d4a:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34015d4e:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34015d52:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015d56:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015d5a:	3901      	subs	r1, #1
34015d5c:	4303      	orrs	r3, r0
34015d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015d62:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34015d66:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34015d6a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34015d6e:	4a77      	ldr	r2, [pc, #476]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015d70:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
34015d74:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34015d78:	f023 0303 	bic.w	r3, r3, #3
34015d7c:	430b      	orrs	r3, r1
34015d7e:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34015d82:	6823      	ldr	r3, [r4, #0]
34015d84:	04d8      	lsls	r0, r3, #19
34015d86:	d540      	bpl.n	34015e0a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34015d88:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34015d8c:	4a70      	ldr	r2, [pc, #448]	@ (34015f50 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34015d8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34015d92:	4291      	cmp	r1, r2
34015d94:	d00a      	beq.n	34015dac <HAL_RCCEx_PeriphCLKConfig+0x990>
34015d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015d9a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34015d9e:	4293      	cmp	r3, r2
34015da0:	d004      	beq.n	34015dac <HAL_RCCEx_PeriphCLKConfig+0x990>
34015da2:	f240 313d 	movw	r1, #829	@ 0x33d
34015da6:	4868      	ldr	r0, [pc, #416]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015da8:	f007 fdee 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34015dac:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34015db0:	4a68      	ldr	r2, [pc, #416]	@ (34015f54 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
34015db2:	4293      	cmp	r3, r2
34015db4:	f041 8508 	bne.w	340177c8 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34015db8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34015dba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015dbe:	d004      	beq.n	34015dca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34015dc0:	f240 3142 	movw	r1, #834	@ 0x342
34015dc4:	4860      	ldr	r0, [pc, #384]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015dc6:	f007 fddf 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34015dca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34015dcc:	3b01      	subs	r3, #1
34015dce:	2bff      	cmp	r3, #255	@ 0xff
34015dd0:	d904      	bls.n	34015ddc <HAL_RCCEx_PeriphCLKConfig+0x9c0>
34015dd2:	f240 3143 	movw	r1, #835	@ 0x343
34015dd6:	485c      	ldr	r0, [pc, #368]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015dd8:	f007 fdd6 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34015ddc:	4a5b      	ldr	r2, [pc, #364]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015dde:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34015de0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34015de4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34015de6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015dea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015dee:	3901      	subs	r1, #1
34015df0:	4303      	orrs	r3, r0
34015df2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015df6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34015dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34015dfe:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015e02:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34015e06:	f7ff fa25 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34015e0a:	6823      	ldr	r3, [r4, #0]
34015e0c:	0499      	lsls	r1, r3, #18
34015e0e:	d540      	bpl.n	34015e92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34015e10:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34015e14:	4a50      	ldr	r2, [pc, #320]	@ (34015f58 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34015e16:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34015e1a:	4291      	cmp	r1, r2
34015e1c:	d00a      	beq.n	34015e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34015e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015e22:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34015e26:	4293      	cmp	r3, r2
34015e28:	d004      	beq.n	34015e34 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34015e2a:	f240 316a 	movw	r1, #874	@ 0x36a
34015e2e:	4846      	ldr	r0, [pc, #280]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015e30:	f007 fdaa 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34015e34:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34015e38:	4a48      	ldr	r2, [pc, #288]	@ (34015f5c <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34015e3a:	4293      	cmp	r3, r2
34015e3c:	f041 84f5 	bne.w	3401782a <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34015e40:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34015e42:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015e46:	d004      	beq.n	34015e52 <HAL_RCCEx_PeriphCLKConfig+0xa36>
34015e48:	f240 316f 	movw	r1, #879	@ 0x36f
34015e4c:	483e      	ldr	r0, [pc, #248]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015e4e:	f007 fd9b 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34015e52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34015e54:	3b01      	subs	r3, #1
34015e56:	2bff      	cmp	r3, #255	@ 0xff
34015e58:	d904      	bls.n	34015e64 <HAL_RCCEx_PeriphCLKConfig+0xa48>
34015e5a:	f44f 715c 	mov.w	r1, #880	@ 0x370
34015e5e:	483a      	ldr	r0, [pc, #232]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015e60:	f007 fd92 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34015e64:	4a39      	ldr	r2, [pc, #228]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015e66:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34015e68:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34015e6c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34015e6e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015e72:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015e76:	3901      	subs	r1, #1
34015e78:	4303      	orrs	r3, r0
34015e7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34015e82:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34015e86:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015e8a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34015e8e:	f7ff f9e1 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34015e92:	6823      	ldr	r3, [r4, #0]
34015e94:	045a      	lsls	r2, r3, #17
34015e96:	d540      	bpl.n	34015f1a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34015e98:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34015e9c:	4a30      	ldr	r2, [pc, #192]	@ (34015f60 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34015e9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34015ea2:	4291      	cmp	r1, r2
34015ea4:	d00a      	beq.n	34015ebc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34015ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015eaa:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34015eae:	4293      	cmp	r3, r2
34015eb0:	d004      	beq.n	34015ebc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34015eb2:	f240 3197 	movw	r1, #919	@ 0x397
34015eb6:	4824      	ldr	r0, [pc, #144]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015eb8:	f007 fd66 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34015ebc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34015ec0:	4a28      	ldr	r2, [pc, #160]	@ (34015f64 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34015ec2:	4293      	cmp	r3, r2
34015ec4:	f041 84f6 	bne.w	340178b4 <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34015ec8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34015eca:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015ece:	d004      	beq.n	34015eda <HAL_RCCEx_PeriphCLKConfig+0xabe>
34015ed0:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34015ed4:	481c      	ldr	r0, [pc, #112]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015ed6:	f007 fd57 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34015eda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34015edc:	3b01      	subs	r3, #1
34015ede:	2bff      	cmp	r3, #255	@ 0xff
34015ee0:	d904      	bls.n	34015eec <HAL_RCCEx_PeriphCLKConfig+0xad0>
34015ee2:	f240 319d 	movw	r1, #925	@ 0x39d
34015ee6:	4818      	ldr	r0, [pc, #96]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015ee8:	f007 fd4e 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34015eec:	4a17      	ldr	r2, [pc, #92]	@ (34015f4c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34015eee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34015ef0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34015ef4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34015ef6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015efa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015efe:	3901      	subs	r1, #1
34015f00:	4303      	orrs	r3, r0
34015f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015f06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34015f0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34015f0e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015f12:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34015f16:	f7ff f99d 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34015f1a:	6823      	ldr	r3, [r4, #0]
34015f1c:	041b      	lsls	r3, r3, #16
34015f1e:	d554      	bpl.n	34015fca <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34015f20:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34015f24:	4a10      	ldr	r2, [pc, #64]	@ (34015f68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34015f26:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34015f2a:	4291      	cmp	r1, r2
34015f2c:	d01e      	beq.n	34015f6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
34015f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015f32:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34015f36:	4293      	cmp	r3, r2
34015f38:	d018      	beq.n	34015f6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
34015f3a:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34015f3e:	4802      	ldr	r0, [pc, #8]	@ (34015f48 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34015f40:	f007 fd22 	bl	3401d988 <assert_failed>
34015f44:	e012      	b.n	34015f6c <HAL_RCCEx_PeriphCLKConfig+0xb50>
34015f46:	bf00      	nop
34015f48:	34026b5b 	.word	0x34026b5b
34015f4c:	56028000 	.word	0x56028000
34015f50:	0700000c 	.word	0x0700000c
34015f54:	0702000c 	.word	0x0702000c
34015f58:	0700040c 	.word	0x0700040c
34015f5c:	0702040c 	.word	0x0702040c
34015f60:	0700080c 	.word	0x0700080c
34015f64:	0702080c 	.word	0x0702080c
34015f68:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34015f6c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34015f70:	4abd      	ldr	r2, [pc, #756]	@ (34016268 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34015f72:	4293      	cmp	r3, r2
34015f74:	f041 84cf 	bne.w	34017916 <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34015f78:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34015f7a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015f7e:	d004      	beq.n	34015f8a <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34015f80:	f240 31c9 	movw	r1, #969	@ 0x3c9
34015f84:	48b9      	ldr	r0, [pc, #740]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34015f86:	f007 fcff 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34015f8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34015f8c:	3b01      	subs	r3, #1
34015f8e:	2bff      	cmp	r3, #255	@ 0xff
34015f90:	d904      	bls.n	34015f9c <HAL_RCCEx_PeriphCLKConfig+0xb80>
34015f92:	f240 31ca 	movw	r1, #970	@ 0x3ca
34015f96:	48b5      	ldr	r0, [pc, #724]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34015f98:	f007 fcf6 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34015f9c:	4ab4      	ldr	r2, [pc, #720]	@ (34016270 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34015f9e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34015fa0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34015fa4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34015fa6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34015faa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34015fae:	3901      	subs	r1, #1
34015fb0:	4303      	orrs	r3, r0
34015fb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34015fba:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34015fbe:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34015fc2:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34015fc6:	f7ff f945 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34015fca:	6823      	ldr	r3, [r4, #0]
34015fcc:	03de      	lsls	r6, r3, #15
34015fce:	d540      	bpl.n	34016052 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34015fd0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34015fd4:	4aa7      	ldr	r2, [pc, #668]	@ (34016274 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
34015fd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34015fda:	4291      	cmp	r1, r2
34015fdc:	d00a      	beq.n	34015ff4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34015fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015fe2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34015fe6:	4293      	cmp	r3, r2
34015fe8:	d004      	beq.n	34015ff4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34015fea:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34015fee:	489f      	ldr	r0, [pc, #636]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34015ff0:	f007 fcca 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34015ff4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34015ff8:	4a9f      	ldr	r2, [pc, #636]	@ (34016278 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34015ffa:	4293      	cmp	r3, r2
34015ffc:	f041 84bc 	bne.w	34017978 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34016000:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34016002:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016006:	d004      	beq.n	34016012 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34016008:	f240 31f6 	movw	r1, #1014	@ 0x3f6
3401600c:	4897      	ldr	r0, [pc, #604]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401600e:	f007 fcbb 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34016012:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34016014:	3b01      	subs	r3, #1
34016016:	2bff      	cmp	r3, #255	@ 0xff
34016018:	d904      	bls.n	34016024 <HAL_RCCEx_PeriphCLKConfig+0xc08>
3401601a:	f240 31f7 	movw	r1, #1015	@ 0x3f7
3401601e:	4893      	ldr	r0, [pc, #588]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016020:	f007 fcb2 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34016024:	4a92      	ldr	r2, [pc, #584]	@ (34016270 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34016026:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34016028:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3401602c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401602e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016032:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016036:	3901      	subs	r1, #1
34016038:	4303      	orrs	r3, r0
3401603a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401603e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34016042:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016046:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401604a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
3401604e:	f7ff f901 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34016052:	6823      	ldr	r3, [r4, #0]
34016054:	0398      	lsls	r0, r3, #14
34016056:	d540      	bpl.n	340160da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34016058:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
3401605c:	4a87      	ldr	r2, [pc, #540]	@ (3401627c <HAL_RCCEx_PeriphCLKConfig+0xe60>)
3401605e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016062:	4291      	cmp	r1, r2
34016064:	d00a      	beq.n	3401607c <HAL_RCCEx_PeriphCLKConfig+0xc60>
34016066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401606a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401606e:	4293      	cmp	r3, r2
34016070:	d004      	beq.n	3401607c <HAL_RCCEx_PeriphCLKConfig+0xc60>
34016072:	f240 411e 	movw	r1, #1054	@ 0x41e
34016076:	487d      	ldr	r0, [pc, #500]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016078:	f007 fc86 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
3401607c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34016080:	4a7f      	ldr	r2, [pc, #508]	@ (34016280 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
34016082:	4293      	cmp	r3, r2
34016084:	f041 84a9 	bne.w	340179da <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34016088:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3401608a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401608e:	d004      	beq.n	3401609a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34016090:	f240 4123 	movw	r1, #1059	@ 0x423
34016094:	4875      	ldr	r0, [pc, #468]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016096:	f007 fc77 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3401609a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3401609c:	3b01      	subs	r3, #1
3401609e:	2bff      	cmp	r3, #255	@ 0xff
340160a0:	d904      	bls.n	340160ac <HAL_RCCEx_PeriphCLKConfig+0xc90>
340160a2:	f240 4124 	movw	r1, #1060	@ 0x424
340160a6:	4871      	ldr	r0, [pc, #452]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340160a8:	f007 fc6e 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340160ac:	4a70      	ldr	r2, [pc, #448]	@ (34016270 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340160ae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340160b0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340160b4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340160b6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340160ba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340160be:	3901      	subs	r1, #1
340160c0:	4303      	orrs	r3, r0
340160c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340160c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340160ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340160ce:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340160d2:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
340160d6:	f7ff f8bd 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
340160da:	6823      	ldr	r3, [r4, #0]
340160dc:	0359      	lsls	r1, r3, #13
340160de:	d540      	bpl.n	34016162 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
340160e0:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340160e4:	4a67      	ldr	r2, [pc, #412]	@ (34016284 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
340160e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340160ea:	4291      	cmp	r1, r2
340160ec:	d00a      	beq.n	34016104 <HAL_RCCEx_PeriphCLKConfig+0xce8>
340160ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340160f2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340160f6:	4293      	cmp	r3, r2
340160f8:	d004      	beq.n	34016104 <HAL_RCCEx_PeriphCLKConfig+0xce8>
340160fa:	f240 414b 	movw	r1, #1099	@ 0x44b
340160fe:	485b      	ldr	r0, [pc, #364]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016100:	f007 fc42 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34016104:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34016108:	4a5f      	ldr	r2, [pc, #380]	@ (34016288 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
3401610a:	4293      	cmp	r3, r2
3401610c:	f041 8496 	bne.w	34017a3c <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34016110:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34016112:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016116:	d004      	beq.n	34016122 <HAL_RCCEx_PeriphCLKConfig+0xd06>
34016118:	f44f 618a 	mov.w	r1, #1104	@ 0x450
3401611c:	4853      	ldr	r0, [pc, #332]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401611e:	f007 fc33 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34016122:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34016124:	3b01      	subs	r3, #1
34016126:	2bff      	cmp	r3, #255	@ 0xff
34016128:	d904      	bls.n	34016134 <HAL_RCCEx_PeriphCLKConfig+0xd18>
3401612a:	f240 4151 	movw	r1, #1105	@ 0x451
3401612e:	484f      	ldr	r0, [pc, #316]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016130:	f007 fc2a 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34016134:	4a4e      	ldr	r2, [pc, #312]	@ (34016270 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34016136:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34016138:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401613c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401613e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016142:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016146:	3901      	subs	r1, #1
34016148:	4303      	orrs	r3, r0
3401614a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401614e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016152:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34016156:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401615a:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
3401615e:	f7ff f879 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34016162:	6823      	ldr	r3, [r4, #0]
34016164:	031a      	lsls	r2, r3, #12
34016166:	d540      	bpl.n	340161ea <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
34016168:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
3401616c:	4a47      	ldr	r2, [pc, #284]	@ (3401628c <HAL_RCCEx_PeriphCLKConfig+0xe70>)
3401616e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016172:	4291      	cmp	r1, r2
34016174:	d00a      	beq.n	3401618c <HAL_RCCEx_PeriphCLKConfig+0xd70>
34016176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401617a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401617e:	4293      	cmp	r3, r2
34016180:	d004      	beq.n	3401618c <HAL_RCCEx_PeriphCLKConfig+0xd70>
34016182:	f240 416b 	movw	r1, #1131	@ 0x46b
34016186:	4839      	ldr	r0, [pc, #228]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016188:	f007 fbfe 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
3401618c:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34016190:	4a3f      	ldr	r2, [pc, #252]	@ (34016290 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
34016192:	4293      	cmp	r3, r2
34016194:	f041 845b 	bne.w	34017a4e <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34016198:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401619a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401619e:	d004      	beq.n	340161aa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
340161a0:	f44f 618e 	mov.w	r1, #1136	@ 0x470
340161a4:	4831      	ldr	r0, [pc, #196]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340161a6:	f007 fbef 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340161aa:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340161ac:	3b01      	subs	r3, #1
340161ae:	2bff      	cmp	r3, #255	@ 0xff
340161b0:	d904      	bls.n	340161bc <HAL_RCCEx_PeriphCLKConfig+0xda0>
340161b2:	f240 4171 	movw	r1, #1137	@ 0x471
340161b6:	482d      	ldr	r0, [pc, #180]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340161b8:	f007 fbe6 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340161bc:	4a2c      	ldr	r2, [pc, #176]	@ (34016270 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340161be:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340161c0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340161c4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340161c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340161ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340161ce:	3901      	subs	r1, #1
340161d0:	4303      	orrs	r3, r0
340161d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340161d6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340161da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340161de:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340161e2:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
340161e6:	f7ff f835 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
340161ea:	6823      	ldr	r3, [r4, #0]
340161ec:	02db      	lsls	r3, r3, #11
340161ee:	d55b      	bpl.n	340162a8 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
340161f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340161f4:	4a27      	ldr	r2, [pc, #156]	@ (34016294 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
340161f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340161fa:	4291      	cmp	r1, r2
340161fc:	d00a      	beq.n	34016214 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
340161fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34016202:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016206:	4293      	cmp	r3, r2
34016208:	d004      	beq.n	34016214 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
3401620a:	f240 418b 	movw	r1, #1163	@ 0x48b
3401620e:	4817      	ldr	r0, [pc, #92]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016210:	f007 fbba 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34016214:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34016218:	4a1f      	ldr	r2, [pc, #124]	@ (34016298 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
3401621a:	4293      	cmp	r3, r2
3401621c:	f041 8420 	bne.w	34017a60 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34016220:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34016222:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016226:	d004      	beq.n	34016232 <HAL_RCCEx_PeriphCLKConfig+0xe16>
34016228:	f44f 6192 	mov.w	r1, #1168	@ 0x490
3401622c:	480f      	ldr	r0, [pc, #60]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401622e:	f007 fbab 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34016232:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34016234:	3b01      	subs	r3, #1
34016236:	2bff      	cmp	r3, #255	@ 0xff
34016238:	d904      	bls.n	34016244 <HAL_RCCEx_PeriphCLKConfig+0xe28>
3401623a:	f240 4191 	movw	r1, #1169	@ 0x491
3401623e:	480b      	ldr	r0, [pc, #44]	@ (3401626c <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34016240:	f007 fba2 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34016244:	4a0a      	ldr	r2, [pc, #40]	@ (34016270 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34016246:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34016248:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401624c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401624e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016252:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016256:	3901      	subs	r1, #1
34016258:	4303      	orrs	r3, r0
3401625a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401625e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016262:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34016266:	e019      	b.n	3401629c <HAL_RCCEx_PeriphCLKConfig+0xe80>
34016268:	07020c0c 	.word	0x07020c0c
3401626c:	34026b5b 	.word	0x34026b5b
34016270:	56028000 	.word	0x56028000
34016274:	0700100c 	.word	0x0700100c
34016278:	0702100c 	.word	0x0702100c
3401627c:	0700140c 	.word	0x0700140c
34016280:	0702140c 	.word	0x0702140c
34016284:	0700082c 	.word	0x0700082c
34016288:	0702082c 	.word	0x0702082c
3401628c:	07000c2c 	.word	0x07000c2c
34016290:	07020c2c 	.word	0x07020c2c
34016294:	0700102c 	.word	0x0700102c
34016298:	0702102c 	.word	0x0702102c
3401629c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340162a0:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
340162a4:	f7fe ffd6 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
340162a8:	6823      	ldr	r3, [r4, #0]
340162aa:	029e      	lsls	r6, r3, #10
340162ac:	d540      	bpl.n	34016330 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
340162ae:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
340162b2:	4ac2      	ldr	r2, [pc, #776]	@ (340165bc <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
340162b4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340162b8:	4291      	cmp	r1, r2
340162ba:	d00a      	beq.n	340162d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
340162bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340162c0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340162c4:	4293      	cmp	r3, r2
340162c6:	d004      	beq.n	340162d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
340162c8:	f240 41ab 	movw	r1, #1195	@ 0x4ab
340162cc:	48bc      	ldr	r0, [pc, #752]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340162ce:	f007 fb5b 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
340162d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
340162d6:	4abb      	ldr	r2, [pc, #748]	@ (340165c4 <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
340162d8:	4293      	cmp	r3, r2
340162da:	f041 83ca 	bne.w	34017a72 <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340162de:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340162e0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340162e4:	d004      	beq.n	340162f0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
340162e6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
340162ea:	48b5      	ldr	r0, [pc, #724]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340162ec:	f007 fb4c 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340162f0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340162f2:	3b01      	subs	r3, #1
340162f4:	2bff      	cmp	r3, #255	@ 0xff
340162f6:	d904      	bls.n	34016302 <HAL_RCCEx_PeriphCLKConfig+0xee6>
340162f8:	f240 41b1 	movw	r1, #1201	@ 0x4b1
340162fc:	48b0      	ldr	r0, [pc, #704]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340162fe:	f007 fb43 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34016302:	4ab1      	ldr	r2, [pc, #708]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34016304:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34016306:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401630a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401630c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016310:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016314:	3901      	subs	r1, #1
34016316:	4303      	orrs	r3, r0
34016318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401631c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34016320:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34016324:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016328:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
3401632c:	f7fe ff92 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34016330:	6823      	ldr	r3, [r4, #0]
34016332:	0258      	lsls	r0, r3, #9
34016334:	d540      	bpl.n	340163b8 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
34016336:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
3401633a:	4aa4      	ldr	r2, [pc, #656]	@ (340165cc <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
3401633c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016340:	4291      	cmp	r1, r2
34016342:	d00a      	beq.n	3401635a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34016344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34016348:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401634c:	4293      	cmp	r3, r2
3401634e:	d004      	beq.n	3401635a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34016350:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34016354:	489a      	ldr	r0, [pc, #616]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016356:	f007 fb17 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3401635a:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
3401635e:	4a9c      	ldr	r2, [pc, #624]	@ (340165d0 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
34016360:	4293      	cmp	r3, r2
34016362:	f041 838f 	bne.w	34017a84 <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34016366:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34016368:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401636c:	d004      	beq.n	34016378 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
3401636e:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34016372:	4893      	ldr	r0, [pc, #588]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016374:	f007 fb08 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34016378:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3401637a:	3b01      	subs	r3, #1
3401637c:	2bff      	cmp	r3, #255	@ 0xff
3401637e:	d904      	bls.n	3401638a <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34016380:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34016384:	488e      	ldr	r0, [pc, #568]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016386:	f007 faff 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401638a:	4a8f      	ldr	r2, [pc, #572]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401638c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401638e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34016392:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34016394:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016398:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401639c:	3901      	subs	r1, #1
3401639e:	4303      	orrs	r3, r0
340163a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340163a4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340163a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340163ac:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340163b0:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
340163b4:	f7fe ff4e 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
340163b8:	6823      	ldr	r3, [r4, #0]
340163ba:	0219      	lsls	r1, r3, #8
340163bc:	d546      	bpl.n	3401644c <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
340163be:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340163c2:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
340163c6:	d00c      	beq.n	340163e2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340163c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
340163cc:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
340163d0:	d007      	beq.n	340163e2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340163d2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
340163d6:	d004      	beq.n	340163e2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
340163d8:	f240 41eb 	movw	r1, #1259	@ 0x4eb
340163dc:	4878      	ldr	r0, [pc, #480]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340163de:	f007 fad3 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
340163e2:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
340163e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340163ea:	f041 8354 	bne.w	34017a96 <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340163ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340163f0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340163f4:	d004      	beq.n	34016400 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
340163f6:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
340163fa:	4871      	ldr	r0, [pc, #452]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340163fc:	f007 fac4 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016400:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016402:	3b01      	subs	r3, #1
34016404:	2bff      	cmp	r3, #255	@ 0xff
34016406:	d904      	bls.n	34016412 <HAL_RCCEx_PeriphCLKConfig+0xff6>
34016408:	f240 41f1 	movw	r1, #1265	@ 0x4f1
3401640c:	486c      	ldr	r0, [pc, #432]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401640e:	f007 fabb 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016412:	4a6d      	ldr	r2, [pc, #436]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34016414:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016416:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401641a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3401641c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016420:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016424:	3901      	subs	r1, #1
34016426:	4303      	orrs	r3, r0
34016428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401642c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016430:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016434:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34016438:	4a63      	ldr	r2, [pc, #396]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401643a:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
3401643e:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34016442:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
34016446:	430b      	orrs	r3, r1
34016448:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
3401644c:	6823      	ldr	r3, [r4, #0]
3401644e:	01da      	lsls	r2, r3, #7
34016450:	d542      	bpl.n	340164d8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
34016452:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
34016456:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
3401645a:	d004      	beq.n	34016466 <HAL_RCCEx_PeriphCLKConfig+0x104a>
3401645c:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
34016460:	4857      	ldr	r0, [pc, #348]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016462:	f007 fa91 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34016466:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
3401646a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401646e:	f041 8343 	bne.w	34017af8 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
34016472:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34016476:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401647a:	d004      	beq.n	34016486 <HAL_RCCEx_PeriphCLKConfig+0x106a>
3401647c:	f240 511d 	movw	r1, #1309	@ 0x51d
34016480:	484f      	ldr	r0, [pc, #316]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016482:	f007 fa81 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
34016486:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
3401648a:	3b01      	subs	r3, #1
3401648c:	2bff      	cmp	r3, #255	@ 0xff
3401648e:	d904      	bls.n	3401649a <HAL_RCCEx_PeriphCLKConfig+0x107e>
34016490:	f240 511e 	movw	r1, #1310	@ 0x51e
34016494:	484a      	ldr	r0, [pc, #296]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016496:	f007 fa77 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3401649a:	4a4b      	ldr	r2, [pc, #300]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401649c:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
340164a0:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
340164a4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
340164a8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340164ac:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340164b0:	3901      	subs	r1, #1
340164b2:	4303      	orrs	r3, r0
340164b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340164b8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
340164bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340164c0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
340164c4:	4a40      	ldr	r2, [pc, #256]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340164c6:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
340164ca:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
340164ce:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340164d2:	430b      	orrs	r3, r1
340164d4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
340164d8:	6823      	ldr	r3, [r4, #0]
340164da:	019b      	lsls	r3, r3, #6
340164dc:	d540      	bpl.n	34016560 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
340164de:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340164e2:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340164e6:	d007      	beq.n	340164f8 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340164e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340164ec:	d004      	beq.n	340164f8 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
340164ee:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
340164f2:	4833      	ldr	r0, [pc, #204]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340164f4:	f007 fa48 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340164f8:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
340164fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016500:	f041 8303 	bne.w	34017b0a <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016506:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401650a:	d004      	beq.n	34016516 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
3401650c:	f240 513d 	movw	r1, #1341	@ 0x53d
34016510:	482b      	ldr	r0, [pc, #172]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016512:	f007 fa39 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016516:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016518:	3b01      	subs	r3, #1
3401651a:	2bff      	cmp	r3, #255	@ 0xff
3401651c:	d904      	bls.n	34016528 <HAL_RCCEx_PeriphCLKConfig+0x110c>
3401651e:	f240 513e 	movw	r1, #1342	@ 0x53e
34016522:	4827      	ldr	r0, [pc, #156]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016524:	f007 fa30 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34016528:	4a27      	ldr	r2, [pc, #156]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401652a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3401652c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016530:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016532:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016536:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401653a:	3901      	subs	r1, #1
3401653c:	4303      	orrs	r3, r0
3401653e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016542:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016546:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016548:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
3401654c:	4a1e      	ldr	r2, [pc, #120]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401654e:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
34016552:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
34016556:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3401655a:	430b      	orrs	r3, r1
3401655c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34016560:	6823      	ldr	r3, [r4, #0]
34016562:	015e      	lsls	r6, r3, #5
34016564:	d54e      	bpl.n	34016604 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
34016566:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3401656a:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3401656e:	d004      	beq.n	3401657a <HAL_RCCEx_PeriphCLKConfig+0x115e>
34016570:	f240 5165 	movw	r1, #1381	@ 0x565
34016574:	4812      	ldr	r0, [pc, #72]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016576:	f007 fa07 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
3401657a:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
3401657e:	2b20      	cmp	r3, #32
34016580:	f041 82f3 	bne.w	34017b6a <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
34016584:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34016588:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401658c:	d004      	beq.n	34016598 <HAL_RCCEx_PeriphCLKConfig+0x117c>
3401658e:	f240 516a 	movw	r1, #1386	@ 0x56a
34016592:	480b      	ldr	r0, [pc, #44]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34016594:	f007 f9f8 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34016598:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
3401659c:	3b01      	subs	r3, #1
3401659e:	2bff      	cmp	r3, #255	@ 0xff
340165a0:	d904      	bls.n	340165ac <HAL_RCCEx_PeriphCLKConfig+0x1190>
340165a2:	f240 516b 	movw	r1, #1387	@ 0x56b
340165a6:	4806      	ldr	r0, [pc, #24]	@ (340165c0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340165a8:	f007 f9ee 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
340165ac:	4a06      	ldr	r2, [pc, #24]	@ (340165c8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340165ae:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
340165b2:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
340165b6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
340165ba:	e00b      	b.n	340165d4 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
340165bc:	0700142c 	.word	0x0700142c
340165c0:	34026b5b 	.word	0x34026b5b
340165c4:	0702142c 	.word	0x0702142c
340165c8:	56028000 	.word	0x56028000
340165cc:	0700182c 	.word	0x0700182c
340165d0:	0702182c 	.word	0x0702182c
340165d4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340165d8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340165dc:	3901      	subs	r1, #1
340165de:	4303      	orrs	r3, r0
340165e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340165e4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340165e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340165ec:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
340165f0:	4abc      	ldr	r2, [pc, #752]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340165f2:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
340165f6:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340165fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
340165fe:	430b      	orrs	r3, r1
34016600:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34016604:	6823      	ldr	r3, [r4, #0]
34016606:	00d8      	lsls	r0, r3, #3
34016608:	d53d      	bpl.n	34016686 <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
3401660a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3401660e:	4ab6      	ldr	r2, [pc, #728]	@ (340168e8 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
34016610:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016614:	4293      	cmp	r3, r2
34016616:	d008      	beq.n	3401662a <HAL_RCCEx_PeriphCLKConfig+0x120e>
34016618:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401661c:	4293      	cmp	r3, r2
3401661e:	d004      	beq.n	3401662a <HAL_RCCEx_PeriphCLKConfig+0x120e>
34016620:	f240 5185 	movw	r1, #1413	@ 0x585
34016624:	48b1      	ldr	r0, [pc, #708]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016626:	f007 f9af 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3401662a:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3401662e:	4ab0      	ldr	r2, [pc, #704]	@ (340168f0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
34016630:	4293      	cmp	r3, r2
34016632:	f041 82c1 	bne.w	34017bb8 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016636:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016638:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401663c:	d004      	beq.n	34016648 <HAL_RCCEx_PeriphCLKConfig+0x122c>
3401663e:	f240 518a 	movw	r1, #1418	@ 0x58a
34016642:	48aa      	ldr	r0, [pc, #680]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016644:	f007 f9a0 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016648:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401664a:	3b01      	subs	r3, #1
3401664c:	2bff      	cmp	r3, #255	@ 0xff
3401664e:	d904      	bls.n	3401665a <HAL_RCCEx_PeriphCLKConfig+0x123e>
34016650:	f240 518b 	movw	r1, #1419	@ 0x58b
34016654:	48a5      	ldr	r0, [pc, #660]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016656:	f007 f997 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3401665a:	4aa2      	ldr	r2, [pc, #648]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3401665c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3401665e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016662:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016664:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016668:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401666c:	3901      	subs	r1, #1
3401666e:	4303      	orrs	r3, r0
34016670:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016674:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016678:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3401667a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401667e:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
34016682:	f7fe fde7 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34016686:	6823      	ldr	r3, [r4, #0]
34016688:	0099      	lsls	r1, r3, #2
3401668a:	d53d      	bpl.n	34016708 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
3401668c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34016690:	4a98      	ldr	r2, [pc, #608]	@ (340168f4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
34016692:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016696:	4293      	cmp	r3, r2
34016698:	d008      	beq.n	340166ac <HAL_RCCEx_PeriphCLKConfig+0x1290>
3401669a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401669e:	4293      	cmp	r3, r2
340166a0:	d004      	beq.n	340166ac <HAL_RCCEx_PeriphCLKConfig+0x1290>
340166a2:	f240 51b2 	movw	r1, #1458	@ 0x5b2
340166a6:	4891      	ldr	r0, [pc, #580]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340166a8:	f007 f96e 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
340166ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
340166b0:	4a91      	ldr	r2, [pc, #580]	@ (340168f8 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
340166b2:	4293      	cmp	r3, r2
340166b4:	f041 82b0 	bne.w	34017c18 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340166b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340166ba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340166be:	d004      	beq.n	340166ca <HAL_RCCEx_PeriphCLKConfig+0x12ae>
340166c0:	f240 51b7 	movw	r1, #1463	@ 0x5b7
340166c4:	4889      	ldr	r0, [pc, #548]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340166c6:	f007 f95f 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340166ca:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340166cc:	3b01      	subs	r3, #1
340166ce:	2bff      	cmp	r3, #255	@ 0xff
340166d0:	d904      	bls.n	340166dc <HAL_RCCEx_PeriphCLKConfig+0x12c0>
340166d2:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
340166d6:	4885      	ldr	r0, [pc, #532]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340166d8:	f007 f956 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340166dc:	4a81      	ldr	r2, [pc, #516]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340166de:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340166e0:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340166e4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340166e6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340166ea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340166ee:	3901      	subs	r1, #1
340166f0:	4303      	orrs	r3, r0
340166f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340166f6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340166fa:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340166fc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016700:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
34016704:	f7fe fda6 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34016708:	6863      	ldr	r3, [r4, #4]
3401670a:	07da      	lsls	r2, r3, #31
3401670c:	d53b      	bpl.n	34016786 <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3401670e:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34016712:	2b06      	cmp	r3, #6
34016714:	d904      	bls.n	34016720 <HAL_RCCEx_PeriphCLKConfig+0x1304>
34016716:	f240 51df 	movw	r1, #1503	@ 0x5df
3401671a:	4874      	ldr	r0, [pc, #464]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3401671c:	f007 f934 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34016720:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34016724:	2b02      	cmp	r3, #2
34016726:	f041 82a7 	bne.w	34017c78 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3401672a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401672c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016730:	d004      	beq.n	3401673c <HAL_RCCEx_PeriphCLKConfig+0x1320>
34016732:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34016736:	486d      	ldr	r0, [pc, #436]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016738:	f007 f926 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3401673c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401673e:	3b01      	subs	r3, #1
34016740:	2bff      	cmp	r3, #255	@ 0xff
34016742:	d904      	bls.n	3401674e <HAL_RCCEx_PeriphCLKConfig+0x1332>
34016744:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34016748:	4868      	ldr	r0, [pc, #416]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3401674a:	f007 f91d 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3401674e:	4a65      	ldr	r2, [pc, #404]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016750:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016752:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016756:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016758:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401675c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016760:	3901      	subs	r1, #1
34016762:	4303      	orrs	r3, r0
34016764:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016768:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3401676c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3401676e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34016772:	4a5c      	ldr	r2, [pc, #368]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016774:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
34016778:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
3401677c:	f023 0307 	bic.w	r3, r3, #7
34016780:	430b      	orrs	r3, r1
34016782:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34016786:	6863      	ldr	r3, [r4, #4]
34016788:	079b      	lsls	r3, r3, #30
3401678a:	d543      	bpl.n	34016814 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
3401678c:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34016790:	4a5a      	ldr	r2, [pc, #360]	@ (340168fc <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
34016792:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016796:	4291      	cmp	r1, r2
34016798:	d00e      	beq.n	340167b8 <HAL_RCCEx_PeriphCLKConfig+0x139c>
3401679a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401679e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340167a2:	4291      	cmp	r1, r2
340167a4:	d008      	beq.n	340167b8 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340167a6:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340167aa:	4293      	cmp	r3, r2
340167ac:	d004      	beq.n	340167b8 <HAL_RCCEx_PeriphCLKConfig+0x139c>
340167ae:	f240 610c 	movw	r1, #1548	@ 0x60c
340167b2:	484e      	ldr	r0, [pc, #312]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340167b4:	f007 f8e8 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
340167b8:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
340167bc:	4a50      	ldr	r2, [pc, #320]	@ (34016900 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
340167be:	4293      	cmp	r3, r2
340167c0:	f041 8288 	bne.w	34017cd4 <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340167c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340167c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340167ca:	d004      	beq.n	340167d6 <HAL_RCCEx_PeriphCLKConfig+0x13ba>
340167cc:	f240 6111 	movw	r1, #1553	@ 0x611
340167d0:	4846      	ldr	r0, [pc, #280]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340167d2:	f007 f8d9 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340167d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340167d8:	3b01      	subs	r3, #1
340167da:	2bff      	cmp	r3, #255	@ 0xff
340167dc:	d904      	bls.n	340167e8 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
340167de:	f240 6112 	movw	r1, #1554	@ 0x612
340167e2:	4842      	ldr	r0, [pc, #264]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340167e4:	f007 f8d0 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340167e8:	4a3e      	ldr	r2, [pc, #248]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340167ea:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340167ec:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340167f0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340167f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340167f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340167fa:	3901      	subs	r1, #1
340167fc:	4303      	orrs	r3, r0
340167fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016806:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016808:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401680c:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
34016810:	f7fe fd20 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34016814:	6863      	ldr	r3, [r4, #4]
34016816:	075e      	lsls	r6, r3, #29
34016818:	d543      	bpl.n	340168a2 <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
3401681a:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
3401681e:	4a39      	ldr	r2, [pc, #228]	@ (34016904 <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
34016820:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016824:	4291      	cmp	r1, r2
34016826:	d00e      	beq.n	34016846 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34016828:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401682c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016830:	4291      	cmp	r1, r2
34016832:	d008      	beq.n	34016846 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34016834:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016838:	4293      	cmp	r3, r2
3401683a:	d004      	beq.n	34016846 <HAL_RCCEx_PeriphCLKConfig+0x142a>
3401683c:	f240 6139 	movw	r1, #1593	@ 0x639
34016840:	482a      	ldr	r0, [pc, #168]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016842:	f007 f8a1 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34016846:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
3401684a:	4a2f      	ldr	r2, [pc, #188]	@ (34016908 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
3401684c:	4293      	cmp	r3, r2
3401684e:	f041 8272 	bne.w	34017d36 <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016852:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016854:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016858:	d004      	beq.n	34016864 <HAL_RCCEx_PeriphCLKConfig+0x1448>
3401685a:	f240 613e 	movw	r1, #1598	@ 0x63e
3401685e:	4823      	ldr	r0, [pc, #140]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016860:	f007 f892 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016864:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016866:	3b01      	subs	r3, #1
34016868:	2bff      	cmp	r3, #255	@ 0xff
3401686a:	d904      	bls.n	34016876 <HAL_RCCEx_PeriphCLKConfig+0x145a>
3401686c:	f240 613f 	movw	r1, #1599	@ 0x63f
34016870:	481e      	ldr	r0, [pc, #120]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34016872:	f007 f889 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016876:	4a1b      	ldr	r2, [pc, #108]	@ (340168e4 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34016878:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3401687a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3401687e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016880:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016884:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016888:	3901      	subs	r1, #1
3401688a:	4303      	orrs	r3, r0
3401688c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016894:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016896:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401689a:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
3401689e:	f7fe fcd9 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
340168a2:	6863      	ldr	r3, [r4, #4]
340168a4:	0718      	lsls	r0, r3, #28
340168a6:	d55d      	bpl.n	34016964 <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
340168a8:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340168ac:	4a17      	ldr	r2, [pc, #92]	@ (3401690c <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
340168ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340168b2:	4291      	cmp	r1, r2
340168b4:	d00e      	beq.n	340168d4 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340168b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340168ba:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340168be:	4291      	cmp	r1, r2
340168c0:	d008      	beq.n	340168d4 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340168c2:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340168c6:	4293      	cmp	r3, r2
340168c8:	d004      	beq.n	340168d4 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
340168ca:	f240 6166 	movw	r1, #1638	@ 0x666
340168ce:	4807      	ldr	r0, [pc, #28]	@ (340168ec <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340168d0:	f007 f85a 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
340168d4:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340168d8:	4a0d      	ldr	r2, [pc, #52]	@ (34016910 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
340168da:	4293      	cmp	r3, r2
340168dc:	f041 825c 	bne.w	34017d98 <HAL_RCCEx_PeriphCLKConfig+0x297c>
340168e0:	e018      	b.n	34016914 <HAL_RCCEx_PeriphCLKConfig+0x14f8>
340168e2:	bf00      	nop
340168e4:	56028000 	.word	0x56028000
340168e8:	07001418 	.word	0x07001418
340168ec:	34026b5b 	.word	0x34026b5b
340168f0:	07021418 	.word	0x07021418
340168f4:	07001818 	.word	0x07001818
340168f8:	07021818 	.word	0x07021818
340168fc:	07000420 	.word	0x07000420
34016900:	07020420 	.word	0x07020420
34016904:	07000820 	.word	0x07000820
34016908:	07020820 	.word	0x07020820
3401690c:	07000c20 	.word	0x07000c20
34016910:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016914:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016916:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401691a:	d004      	beq.n	34016926 <HAL_RCCEx_PeriphCLKConfig+0x150a>
3401691c:	f240 616b 	movw	r1, #1643	@ 0x66b
34016920:	48bb      	ldr	r0, [pc, #748]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016922:	f007 f831 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016926:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016928:	3b01      	subs	r3, #1
3401692a:	2bff      	cmp	r3, #255	@ 0xff
3401692c:	d904      	bls.n	34016938 <HAL_RCCEx_PeriphCLKConfig+0x151c>
3401692e:	f240 616c 	movw	r1, #1644	@ 0x66c
34016932:	48b7      	ldr	r0, [pc, #732]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016934:	f007 f828 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016938:	4ab6      	ldr	r2, [pc, #728]	@ (34016c14 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
3401693a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3401693c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34016940:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016942:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016946:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401694a:	3901      	subs	r1, #1
3401694c:	4303      	orrs	r3, r0
3401694e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016956:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016958:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401695c:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34016960:	f7fe fc78 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34016964:	6863      	ldr	r3, [r4, #4]
34016966:	06d9      	lsls	r1, r3, #27
34016968:	d544      	bpl.n	340169f4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
3401696a:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3401696e:	4aaa      	ldr	r2, [pc, #680]	@ (34016c18 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34016970:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016974:	4291      	cmp	r1, r2
34016976:	d00e      	beq.n	34016996 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34016978:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401697c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016980:	4291      	cmp	r1, r2
34016982:	d008      	beq.n	34016996 <HAL_RCCEx_PeriphCLKConfig+0x157a>
34016984:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016988:	4293      	cmp	r3, r2
3401698a:	d004      	beq.n	34016996 <HAL_RCCEx_PeriphCLKConfig+0x157a>
3401698c:	f240 6193 	movw	r1, #1683	@ 0x693
34016990:	489f      	ldr	r0, [pc, #636]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016992:	f006 fff9 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34016996:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
3401699a:	4aa0      	ldr	r2, [pc, #640]	@ (34016c1c <HAL_RCCEx_PeriphCLKConfig+0x1800>)
3401699c:	4293      	cmp	r3, r2
3401699e:	f041 822c 	bne.w	34017dfa <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340169a2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340169a4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340169a8:	d004      	beq.n	340169b4 <HAL_RCCEx_PeriphCLKConfig+0x1598>
340169aa:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
340169ae:	4898      	ldr	r0, [pc, #608]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340169b0:	f006 ffea 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340169b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340169b6:	3b01      	subs	r3, #1
340169b8:	2bff      	cmp	r3, #255	@ 0xff
340169ba:	d904      	bls.n	340169c6 <HAL_RCCEx_PeriphCLKConfig+0x15aa>
340169bc:	f240 6199 	movw	r1, #1689	@ 0x699
340169c0:	4893      	ldr	r0, [pc, #588]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
340169c2:	f006 ffe1 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340169c6:	4a93      	ldr	r2, [pc, #588]	@ (34016c14 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
340169c8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340169ca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340169ce:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340169d0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340169d4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340169d8:	3901      	subs	r1, #1
340169da:	4303      	orrs	r3, r0
340169dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340169e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340169e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340169e8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340169ec:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
340169f0:	f7fe fc30 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
340169f4:	6863      	ldr	r3, [r4, #4]
340169f6:	069a      	lsls	r2, r3, #26
340169f8:	d544      	bpl.n	34016a84 <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
340169fa:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
340169fe:	4a88      	ldr	r2, [pc, #544]	@ (34016c20 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
34016a00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016a04:	4291      	cmp	r1, r2
34016a06:	d00e      	beq.n	34016a26 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34016a08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016a0c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016a10:	4291      	cmp	r1, r2
34016a12:	d008      	beq.n	34016a26 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34016a14:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016a18:	4293      	cmp	r3, r2
34016a1a:	d004      	beq.n	34016a26 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34016a1c:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34016a20:	487b      	ldr	r0, [pc, #492]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016a22:	f006 ffb1 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34016a26:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34016a2a:	4a7e      	ldr	r2, [pc, #504]	@ (34016c24 <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34016a2c:	4293      	cmp	r3, r2
34016a2e:	f041 8231 	bne.w	34017e94 <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016a32:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016a34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016a38:	d004      	beq.n	34016a44 <HAL_RCCEx_PeriphCLKConfig+0x1628>
34016a3a:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34016a3e:	4874      	ldr	r0, [pc, #464]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016a40:	f006 ffa2 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016a44:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016a46:	3b01      	subs	r3, #1
34016a48:	2bff      	cmp	r3, #255	@ 0xff
34016a4a:	d904      	bls.n	34016a56 <HAL_RCCEx_PeriphCLKConfig+0x163a>
34016a4c:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34016a50:	486f      	ldr	r0, [pc, #444]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016a52:	f006 ff99 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016a56:	4a6f      	ldr	r2, [pc, #444]	@ (34016c14 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016a58:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016a5a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016a5e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016a60:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016a64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016a68:	3901      	subs	r1, #1
34016a6a:	4303      	orrs	r3, r0
34016a6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016a70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016a74:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016a78:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016a7c:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34016a80:	f7fe fbe8 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34016a84:	6863      	ldr	r3, [r4, #4]
34016a86:	065b      	lsls	r3, r3, #25
34016a88:	d543      	bpl.n	34016b12 <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34016a8a:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34016a8e:	4a66      	ldr	r2, [pc, #408]	@ (34016c28 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34016a90:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016a94:	4291      	cmp	r1, r2
34016a96:	d00e      	beq.n	34016ab6 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34016a98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016a9c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016aa0:	4291      	cmp	r1, r2
34016aa2:	d008      	beq.n	34016ab6 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34016aa4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016aa8:	4293      	cmp	r3, r2
34016aaa:	d004      	beq.n	34016ab6 <HAL_RCCEx_PeriphCLKConfig+0x169a>
34016aac:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34016ab0:	4857      	ldr	r0, [pc, #348]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016ab2:	f006 ff69 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34016ab6:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34016aba:	4a5c      	ldr	r2, [pc, #368]	@ (34016c2c <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34016abc:	4293      	cmp	r3, r2
34016abe:	f041 821a 	bne.w	34017ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34016ac2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34016ac4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016ac8:	d004      	beq.n	34016ad4 <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34016aca:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34016ace:	4850      	ldr	r0, [pc, #320]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016ad0:	f006 ff5a 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34016ad4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34016ad6:	3b01      	subs	r3, #1
34016ad8:	2bff      	cmp	r3, #255	@ 0xff
34016ada:	d904      	bls.n	34016ae6 <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34016adc:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34016ae0:	484b      	ldr	r0, [pc, #300]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016ae2:	f006 ff51 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34016ae6:	4a4b      	ldr	r2, [pc, #300]	@ (34016c14 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016ae8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34016aea:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34016aee:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34016af0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016af4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016af8:	3901      	subs	r1, #1
34016afa:	4303      	orrs	r3, r0
34016afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016b04:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016b06:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016b0a:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
34016b0e:	f7fe fba1 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34016b12:	6863      	ldr	r3, [r4, #4]
34016b14:	05de      	lsls	r6, r3, #23
34016b16:	d544      	bpl.n	34016ba2 <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34016b18:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34016b1c:	4a44      	ldr	r2, [pc, #272]	@ (34016c30 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
34016b1e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016b22:	4291      	cmp	r1, r2
34016b24:	d00e      	beq.n	34016b44 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34016b26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016b2a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016b2e:	4291      	cmp	r1, r2
34016b30:	d008      	beq.n	34016b44 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34016b32:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016b36:	4293      	cmp	r3, r2
34016b38:	d004      	beq.n	34016b44 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34016b3a:	f240 711a 	movw	r1, #1818	@ 0x71a
34016b3e:	4834      	ldr	r0, [pc, #208]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016b40:	f006 ff22 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34016b44:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34016b48:	4a3a      	ldr	r2, [pc, #232]	@ (34016c34 <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34016b4a:	4293      	cmp	r3, r2
34016b4c:	f041 8204 	bne.w	34017f58 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016b50:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016b52:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016b56:	d004      	beq.n	34016b62 <HAL_RCCEx_PeriphCLKConfig+0x1746>
34016b58:	f240 711f 	movw	r1, #1823	@ 0x71f
34016b5c:	482c      	ldr	r0, [pc, #176]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016b5e:	f006 ff13 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016b62:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016b64:	3b01      	subs	r3, #1
34016b66:	2bff      	cmp	r3, #255	@ 0xff
34016b68:	d904      	bls.n	34016b74 <HAL_RCCEx_PeriphCLKConfig+0x1758>
34016b6a:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34016b6e:	4828      	ldr	r0, [pc, #160]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016b70:	f006 ff0a 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016b74:	4a27      	ldr	r2, [pc, #156]	@ (34016c14 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016b76:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016b78:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016b7c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016b7e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016b82:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016b86:	3901      	subs	r1, #1
34016b88:	4303      	orrs	r3, r0
34016b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016b8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016b92:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016b96:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016b9a:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34016b9e:	f7fe fb59 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34016ba2:	6863      	ldr	r3, [r4, #4]
34016ba4:	0598      	lsls	r0, r3, #22
34016ba6:	d55d      	bpl.n	34016c64 <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34016ba8:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34016bac:	4a22      	ldr	r2, [pc, #136]	@ (34016c38 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34016bae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016bb2:	4291      	cmp	r1, r2
34016bb4:	d00e      	beq.n	34016bd4 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34016bb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016bba:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016bbe:	4291      	cmp	r1, r2
34016bc0:	d008      	beq.n	34016bd4 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34016bc2:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016bc6:	4293      	cmp	r3, r2
34016bc8:	d004      	beq.n	34016bd4 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34016bca:	f240 7147 	movw	r1, #1863	@ 0x747
34016bce:	4810      	ldr	r0, [pc, #64]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016bd0:	f006 feda 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34016bd4:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34016bd8:	4a18      	ldr	r2, [pc, #96]	@ (34016c3c <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34016bda:	4293      	cmp	r3, r2
34016bdc:	f041 81ed 	bne.w	34017fba <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016be0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016be2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016be6:	d004      	beq.n	34016bf2 <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34016be8:	f240 714c 	movw	r1, #1868	@ 0x74c
34016bec:	4808      	ldr	r0, [pc, #32]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016bee:	f006 fecb 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016bf2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016bf4:	3b01      	subs	r3, #1
34016bf6:	2bff      	cmp	r3, #255	@ 0xff
34016bf8:	d904      	bls.n	34016c04 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34016bfa:	f240 714d 	movw	r1, #1869	@ 0x74d
34016bfe:	4804      	ldr	r0, [pc, #16]	@ (34016c10 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34016c00:	f006 fec2 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016c04:	4a03      	ldr	r2, [pc, #12]	@ (34016c14 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34016c06:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016c08:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016c0c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016c0e:	e017      	b.n	34016c40 <HAL_RCCEx_PeriphCLKConfig+0x1824>
34016c10:	34026b5b 	.word	0x34026b5b
34016c14:	56028000 	.word	0x56028000
34016c18:	07001020 	.word	0x07001020
34016c1c:	07021020 	.word	0x07021020
34016c20:	07001420 	.word	0x07001420
34016c24:	07021420 	.word	0x07021420
34016c28:	07001820 	.word	0x07001820
34016c2c:	07021820 	.word	0x07021820
34016c30:	07000030 	.word	0x07000030
34016c34:	07020030 	.word	0x07020030
34016c38:	07000430 	.word	0x07000430
34016c3c:	07020430 	.word	0x07020430
34016c40:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016c44:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016c48:	3901      	subs	r1, #1
34016c4a:	4303      	orrs	r3, r0
34016c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016c50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016c58:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016c5c:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34016c60:	f7fe faf8 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34016c64:	6863      	ldr	r3, [r4, #4]
34016c66:	0559      	lsls	r1, r3, #21
34016c68:	d544      	bpl.n	34016cf4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34016c6a:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34016c6e:	4abc      	ldr	r2, [pc, #752]	@ (34016f60 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34016c70:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016c74:	4291      	cmp	r1, r2
34016c76:	d00e      	beq.n	34016c96 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34016c78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016c7c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016c80:	4291      	cmp	r1, r2
34016c82:	d008      	beq.n	34016c96 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34016c84:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016c88:	4293      	cmp	r3, r2
34016c8a:	d004      	beq.n	34016c96 <HAL_RCCEx_PeriphCLKConfig+0x187a>
34016c8c:	f240 7174 	movw	r1, #1908	@ 0x774
34016c90:	48b4      	ldr	r0, [pc, #720]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016c92:	f006 fe79 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34016c96:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34016c9a:	4ab3      	ldr	r2, [pc, #716]	@ (34016f68 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34016c9c:	4293      	cmp	r3, r2
34016c9e:	f041 81bd 	bne.w	3401801c <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016ca2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016ca4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016ca8:	d004      	beq.n	34016cb4 <HAL_RCCEx_PeriphCLKConfig+0x1898>
34016caa:	f240 7179 	movw	r1, #1913	@ 0x779
34016cae:	48ad      	ldr	r0, [pc, #692]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016cb0:	f006 fe6a 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016cb4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016cb6:	3b01      	subs	r3, #1
34016cb8:	2bff      	cmp	r3, #255	@ 0xff
34016cba:	d904      	bls.n	34016cc6 <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34016cbc:	f240 717a 	movw	r1, #1914	@ 0x77a
34016cc0:	48a8      	ldr	r0, [pc, #672]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016cc2:	f006 fe61 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016cc6:	4aa9      	ldr	r2, [pc, #676]	@ (34016f6c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34016cc8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016cca:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016cce:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016cd0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016cd4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016cd8:	3901      	subs	r1, #1
34016cda:	4303      	orrs	r3, r0
34016cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016ce0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016ce8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016cec:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34016cf0:	f7fe fab0 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34016cf4:	6863      	ldr	r3, [r4, #4]
34016cf6:	051a      	lsls	r2, r3, #20
34016cf8:	d544      	bpl.n	34016d84 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34016cfa:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34016cfe:	4a9c      	ldr	r2, [pc, #624]	@ (34016f70 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
34016d00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016d04:	4291      	cmp	r1, r2
34016d06:	d00e      	beq.n	34016d26 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34016d08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016d0c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016d10:	4291      	cmp	r1, r2
34016d12:	d008      	beq.n	34016d26 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34016d14:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016d18:	4293      	cmp	r3, r2
34016d1a:	d004      	beq.n	34016d26 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34016d1c:	f240 71a1 	movw	r1, #1953	@ 0x7a1
34016d20:	4890      	ldr	r0, [pc, #576]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016d22:	f006 fe31 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34016d26:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34016d2a:	4a92      	ldr	r2, [pc, #584]	@ (34016f74 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34016d2c:	4293      	cmp	r3, r2
34016d2e:	f041 81a6 	bne.w	3401807e <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016d32:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016d34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016d38:	d004      	beq.n	34016d44 <HAL_RCCEx_PeriphCLKConfig+0x1928>
34016d3a:	f240 71a6 	movw	r1, #1958	@ 0x7a6
34016d3e:	4889      	ldr	r0, [pc, #548]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016d40:	f006 fe22 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016d44:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016d46:	3b01      	subs	r3, #1
34016d48:	2bff      	cmp	r3, #255	@ 0xff
34016d4a:	d904      	bls.n	34016d56 <HAL_RCCEx_PeriphCLKConfig+0x193a>
34016d4c:	f240 71a7 	movw	r1, #1959	@ 0x7a7
34016d50:	4884      	ldr	r0, [pc, #528]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016d52:	f006 fe19 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016d56:	4a85      	ldr	r2, [pc, #532]	@ (34016f6c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34016d58:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016d5a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016d5e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016d60:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016d64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016d68:	3901      	subs	r1, #1
34016d6a:	4303      	orrs	r3, r0
34016d6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016d70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016d78:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016d7c:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34016d80:	f7fe fa68 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34016d84:	6863      	ldr	r3, [r4, #4]
34016d86:	04db      	lsls	r3, r3, #19
34016d88:	d544      	bpl.n	34016e14 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34016d8a:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34016d8e:	4a7a      	ldr	r2, [pc, #488]	@ (34016f78 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34016d90:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016d94:	4291      	cmp	r1, r2
34016d96:	d00e      	beq.n	34016db6 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34016d98:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016d9c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016da0:	4291      	cmp	r1, r2
34016da2:	d008      	beq.n	34016db6 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34016da4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016da8:	4293      	cmp	r3, r2
34016daa:	d004      	beq.n	34016db6 <HAL_RCCEx_PeriphCLKConfig+0x199a>
34016dac:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34016db0:	486c      	ldr	r0, [pc, #432]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016db2:	f006 fde9 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34016db6:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34016dba:	4a70      	ldr	r2, [pc, #448]	@ (34016f7c <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34016dbc:	4293      	cmp	r3, r2
34016dbe:	f041 818f 	bne.w	340180e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016dc2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016dc4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016dc8:	d004      	beq.n	34016dd4 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34016dca:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34016dce:	4865      	ldr	r0, [pc, #404]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016dd0:	f006 fdda 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016dd4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016dd6:	3b01      	subs	r3, #1
34016dd8:	2bff      	cmp	r3, #255	@ 0xff
34016dda:	d904      	bls.n	34016de6 <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34016ddc:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34016de0:	4860      	ldr	r0, [pc, #384]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016de2:	f006 fdd1 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016de6:	4a61      	ldr	r2, [pc, #388]	@ (34016f6c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34016de8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016dea:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016dee:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016df0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016df4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016df8:	3901      	subs	r1, #1
34016dfa:	4303      	orrs	r3, r0
34016dfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016e00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016e04:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016e08:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016e0c:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34016e10:	f7fe fa20 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34016e14:	6863      	ldr	r3, [r4, #4]
34016e16:	049e      	lsls	r6, r3, #18
34016e18:	d544      	bpl.n	34016ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34016e1a:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34016e1e:	4a58      	ldr	r2, [pc, #352]	@ (34016f80 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34016e20:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016e24:	4291      	cmp	r1, r2
34016e26:	d00e      	beq.n	34016e46 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34016e28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016e2c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016e30:	4291      	cmp	r1, r2
34016e32:	d008      	beq.n	34016e46 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34016e34:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016e38:	4293      	cmp	r3, r2
34016e3a:	d004      	beq.n	34016e46 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34016e3c:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34016e40:	4848      	ldr	r0, [pc, #288]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016e42:	f006 fda1 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34016e46:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34016e4a:	4a4e      	ldr	r2, [pc, #312]	@ (34016f84 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34016e4c:	4293      	cmp	r3, r2
34016e4e:	f041 8199 	bne.w	34018184 <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016e52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016e54:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016e58:	d004      	beq.n	34016e64 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34016e5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34016e5e:	4841      	ldr	r0, [pc, #260]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016e60:	f006 fd92 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016e64:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016e66:	3b01      	subs	r3, #1
34016e68:	2bff      	cmp	r3, #255	@ 0xff
34016e6a:	d904      	bls.n	34016e76 <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34016e6c:	f640 0101 	movw	r1, #2049	@ 0x801
34016e70:	483c      	ldr	r0, [pc, #240]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016e72:	f006 fd89 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016e76:	4a3d      	ldr	r2, [pc, #244]	@ (34016f6c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34016e78:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016e7a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016e7e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016e80:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016e84:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016e88:	3901      	subs	r1, #1
34016e8a:	4303      	orrs	r3, r0
34016e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016e90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016e94:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016e98:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016e9c:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34016ea0:	f7fe f9d8 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34016ea4:	6863      	ldr	r3, [r4, #4]
34016ea6:	0458      	lsls	r0, r3, #17
34016ea8:	d544      	bpl.n	34016f34 <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34016eaa:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34016eae:	4a36      	ldr	r2, [pc, #216]	@ (34016f88 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34016eb0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016eb4:	4291      	cmp	r1, r2
34016eb6:	d00e      	beq.n	34016ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34016eb8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016ebc:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016ec0:	4291      	cmp	r1, r2
34016ec2:	d008      	beq.n	34016ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34016ec4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016ec8:	4293      	cmp	r3, r2
34016eca:	d004      	beq.n	34016ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34016ecc:	f640 0128 	movw	r1, #2088	@ 0x828
34016ed0:	4824      	ldr	r0, [pc, #144]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016ed2:	f006 fd59 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34016ed6:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34016eda:	4a2c      	ldr	r2, [pc, #176]	@ (34016f8c <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34016edc:	4293      	cmp	r3, r2
34016ede:	f041 8182 	bne.w	340181e6 <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016ee2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016ee4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016ee8:	d004      	beq.n	34016ef4 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34016eea:	f640 012d 	movw	r1, #2093	@ 0x82d
34016eee:	481d      	ldr	r0, [pc, #116]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016ef0:	f006 fd4a 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016ef4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016ef6:	3b01      	subs	r3, #1
34016ef8:	2bff      	cmp	r3, #255	@ 0xff
34016efa:	d904      	bls.n	34016f06 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34016efc:	f640 012e 	movw	r1, #2094	@ 0x82e
34016f00:	4818      	ldr	r0, [pc, #96]	@ (34016f64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34016f02:	f006 fd41 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016f06:	4a19      	ldr	r2, [pc, #100]	@ (34016f6c <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34016f08:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016f0a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016f0e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016f10:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016f14:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016f18:	3901      	subs	r1, #1
34016f1a:	4303      	orrs	r3, r0
34016f1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016f20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016f28:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016f2c:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34016f30:	f7fe f990 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34016f34:	6863      	ldr	r3, [r4, #4]
34016f36:	0419      	lsls	r1, r3, #16
34016f38:	d560      	bpl.n	34016ffc <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34016f3a:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34016f3e:	4a14      	ldr	r2, [pc, #80]	@ (34016f90 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34016f40:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34016f44:	4291      	cmp	r1, r2
34016f46:	d02a      	beq.n	34016f9e <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34016f48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34016f4c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34016f50:	4291      	cmp	r1, r2
34016f52:	d024      	beq.n	34016f9e <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34016f54:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34016f58:	4293      	cmp	r3, r2
34016f5a:	d020      	beq.n	34016f9e <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34016f5c:	e01a      	b.n	34016f94 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34016f5e:	bf00      	nop
34016f60:	07000830 	.word	0x07000830
34016f64:	34026b5b 	.word	0x34026b5b
34016f68:	07020830 	.word	0x07020830
34016f6c:	56028000 	.word	0x56028000
34016f70:	07000c30 	.word	0x07000c30
34016f74:	07020c30 	.word	0x07020c30
34016f78:	07001030 	.word	0x07001030
34016f7c:	07021030 	.word	0x07021030
34016f80:	07001430 	.word	0x07001430
34016f84:	07021430 	.word	0x07021430
34016f88:	07001830 	.word	0x07001830
34016f8c:	07021830 	.word	0x07021830
34016f90:	07001c30 	.word	0x07001c30
34016f94:	f640 0155 	movw	r1, #2133	@ 0x855
34016f98:	48bb      	ldr	r0, [pc, #748]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34016f9a:	f006 fcf5 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34016f9e:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34016fa2:	4aba      	ldr	r2, [pc, #744]	@ (3401728c <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34016fa4:	4293      	cmp	r3, r2
34016fa6:	f041 814f 	bne.w	34018248 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34016faa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34016fac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016fb0:	d004      	beq.n	34016fbc <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34016fb2:	f640 015a 	movw	r1, #2138	@ 0x85a
34016fb6:	48b4      	ldr	r0, [pc, #720]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34016fb8:	f006 fce6 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34016fbc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34016fbe:	3b01      	subs	r3, #1
34016fc0:	2bff      	cmp	r3, #255	@ 0xff
34016fc2:	d904      	bls.n	34016fce <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34016fc4:	f640 015b 	movw	r1, #2139	@ 0x85b
34016fc8:	48af      	ldr	r0, [pc, #700]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34016fca:	f006 fcdd 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34016fce:	4ab0      	ldr	r2, [pc, #704]	@ (34017290 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34016fd0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34016fd2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34016fd6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34016fd8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016fdc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016fe0:	3901      	subs	r1, #1
34016fe2:	4303      	orrs	r3, r0
34016fe4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016fe8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34016fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34016ff0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016ff4:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34016ff8:	f7fe f92c 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34016ffc:	6863      	ldr	r3, [r4, #4]
34016ffe:	03da      	lsls	r2, r3, #15
34017000:	d544      	bpl.n	3401708c <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34017002:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34017006:	4aa3      	ldr	r2, [pc, #652]	@ (34017294 <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34017008:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401700c:	4291      	cmp	r1, r2
3401700e:	d00e      	beq.n	3401702e <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34017010:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017014:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017018:	4291      	cmp	r1, r2
3401701a:	d008      	beq.n	3401702e <HAL_RCCEx_PeriphCLKConfig+0x1c12>
3401701c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017020:	4293      	cmp	r3, r2
34017022:	d004      	beq.n	3401702e <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34017024:	f640 0182 	movw	r1, #2178	@ 0x882
34017028:	4897      	ldr	r0, [pc, #604]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401702a:	f006 fcad 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
3401702e:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34017032:	4a99      	ldr	r2, [pc, #612]	@ (34017298 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34017034:	4293      	cmp	r3, r2
34017036:	f041 8138 	bne.w	340182aa <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401703a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401703c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017040:	d004      	beq.n	3401704c <HAL_RCCEx_PeriphCLKConfig+0x1c30>
34017042:	f640 0187 	movw	r1, #2183	@ 0x887
34017046:	4890      	ldr	r0, [pc, #576]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017048:	f006 fc9e 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401704c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401704e:	3b01      	subs	r3, #1
34017050:	2bff      	cmp	r3, #255	@ 0xff
34017052:	d904      	bls.n	3401705e <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34017054:	f640 0188 	movw	r1, #2184	@ 0x888
34017058:	488b      	ldr	r0, [pc, #556]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401705a:	f006 fc95 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401705e:	4a8c      	ldr	r2, [pc, #560]	@ (34017290 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34017060:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017062:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017066:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017068:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401706c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017070:	3901      	subs	r1, #1
34017072:	4303      	orrs	r3, r0
34017074:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017078:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3401707c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017080:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017084:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34017088:	f7fe f8e4 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3401708c:	6863      	ldr	r3, [r4, #4]
3401708e:	039b      	lsls	r3, r3, #14
34017090:	d544      	bpl.n	3401711c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34017092:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34017096:	4a81      	ldr	r2, [pc, #516]	@ (3401729c <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
34017098:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401709c:	4291      	cmp	r1, r2
3401709e:	d00e      	beq.n	340170be <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340170a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340170a4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340170a8:	4291      	cmp	r1, r2
340170aa:	d008      	beq.n	340170be <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340170ac:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340170b0:	4293      	cmp	r3, r2
340170b2:	d004      	beq.n	340170be <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
340170b4:	f640 01af 	movw	r1, #2223	@ 0x8af
340170b8:	4873      	ldr	r0, [pc, #460]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340170ba:	f006 fc65 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
340170be:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
340170c2:	4a77      	ldr	r2, [pc, #476]	@ (340172a0 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
340170c4:	4293      	cmp	r3, r2
340170c6:	f041 8121 	bne.w	3401830c <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340170ca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340170cc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340170d0:	d004      	beq.n	340170dc <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
340170d2:	f640 01b4 	movw	r1, #2228	@ 0x8b4
340170d6:	486c      	ldr	r0, [pc, #432]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340170d8:	f006 fc56 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340170dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340170de:	3b01      	subs	r3, #1
340170e0:	2bff      	cmp	r3, #255	@ 0xff
340170e2:	d904      	bls.n	340170ee <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
340170e4:	f640 01b5 	movw	r1, #2229	@ 0x8b5
340170e8:	4867      	ldr	r0, [pc, #412]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340170ea:	f006 fc4d 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340170ee:	4a68      	ldr	r2, [pc, #416]	@ (34017290 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
340170f0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340170f2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340170f6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340170f8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340170fc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017100:	3901      	subs	r1, #1
34017102:	4303      	orrs	r3, r0
34017104:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017108:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3401710c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017110:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017114:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34017118:	f7fe f89c 	bl	34015254 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
3401711c:	6863      	ldr	r3, [r4, #4]
3401711e:	035e      	lsls	r6, r3, #13
34017120:	d51e      	bpl.n	34017160 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34017122:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34017126:	4a5f      	ldr	r2, [pc, #380]	@ (340172a4 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34017128:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401712c:	4291      	cmp	r1, r2
3401712e:	d00a      	beq.n	34017146 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34017130:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34017134:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34017138:	4293      	cmp	r3, r2
3401713a:	d004      	beq.n	34017146 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
3401713c:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34017140:	4851      	ldr	r0, [pc, #324]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017142:	f006 fc21 	bl	3401d988 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34017146:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
3401714a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
3401714e:	f7fe f881 	bl	34015254 <LL_RCC_SetClockSource>
34017152:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34017156:	2b00      	cmp	r3, #0
34017158:	f281 8109 	bge.w	3401836e <HAL_RCCEx_PeriphCLKConfig+0x2f52>
3401715c:	f7fe f84a 	bl	340151f4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34017160:	6863      	ldr	r3, [r4, #4]
34017162:	02d8      	lsls	r0, r3, #11
34017164:	d51e      	bpl.n	340171a4 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34017166:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
3401716a:	4a4f      	ldr	r2, [pc, #316]	@ (340172a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
3401716c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017170:	4291      	cmp	r1, r2
34017172:	d00a      	beq.n	3401718a <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34017174:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34017178:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
3401717c:	4293      	cmp	r3, r2
3401717e:	d004      	beq.n	3401718a <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34017180:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34017184:	4840      	ldr	r0, [pc, #256]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017186:	f006 fbff 	bl	3401d988 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
3401718a:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
3401718e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34017192:	f7fe f85f 	bl	34015254 <LL_RCC_SetClockSource>
34017196:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
3401719a:	2b00      	cmp	r3, #0
3401719c:	f281 80eb 	bge.w	34018376 <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
340171a0:	f7fe f828 	bl	340151f4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
340171a4:	6863      	ldr	r3, [r4, #4]
340171a6:	0319      	lsls	r1, r3, #12
340171a8:	d549      	bpl.n	3401723e <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
340171aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340171ae:	4a3f      	ldr	r2, [pc, #252]	@ (340172ac <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
340171b0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340171b4:	4291      	cmp	r1, r2
340171b6:	d00a      	beq.n	340171ce <HAL_RCCEx_PeriphCLKConfig+0x1db2>
340171b8:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340171bc:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
340171c0:	4293      	cmp	r3, r2
340171c2:	d004      	beq.n	340171ce <HAL_RCCEx_PeriphCLKConfig+0x1db2>
340171c4:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
340171c8:	482f      	ldr	r0, [pc, #188]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340171ca:	f006 fbdd 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
340171ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340171d2:	4a37      	ldr	r2, [pc, #220]	@ (340172b0 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
340171d4:	4293      	cmp	r3, r2
340171d6:	f041 80d2 	bne.w	3401837e <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340171da:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340171dc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340171e0:	d004      	beq.n	340171ec <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
340171e2:	f640 01f5 	movw	r1, #2293	@ 0x8f5
340171e6:	4828      	ldr	r0, [pc, #160]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340171e8:	f006 fbce 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340171ec:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340171ee:	3b01      	subs	r3, #1
340171f0:	2bff      	cmp	r3, #255	@ 0xff
340171f2:	d904      	bls.n	340171fe <HAL_RCCEx_PeriphCLKConfig+0x1de2>
340171f4:	f640 01f6 	movw	r1, #2294	@ 0x8f6
340171f8:	4823      	ldr	r0, [pc, #140]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340171fa:	f006 fbc5 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340171fe:	4a24      	ldr	r2, [pc, #144]	@ (34017290 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34017200:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017202:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017206:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017208:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401720c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017210:	3901      	subs	r1, #1
34017212:	4303      	orrs	r3, r0
34017214:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017218:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401721c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017220:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34017224:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
34017228:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
3401722c:	f7fe f812 	bl	34015254 <LL_RCC_SetClockSource>
34017230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34017234:	2b00      	cmp	r3, #0
34017236:	f281 80ab 	bge.w	34018390 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
3401723a:	f7fd ffdb 	bl	340151f4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
3401723e:	6863      	ldr	r3, [r4, #4]
34017240:	029a      	lsls	r2, r3, #10
34017242:	d564      	bpl.n	3401730e <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34017244:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34017248:	4a1a      	ldr	r2, [pc, #104]	@ (340172b4 <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
3401724a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401724e:	4291      	cmp	r1, r2
34017250:	d00a      	beq.n	34017268 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34017252:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34017256:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
3401725a:	4293      	cmp	r3, r2
3401725c:	d004      	beq.n	34017268 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
3401725e:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34017262:	4809      	ldr	r0, [pc, #36]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017264:	f006 fb90 	bl	3401d988 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34017268:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3401726c:	4a12      	ldr	r2, [pc, #72]	@ (340172b8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
3401726e:	4293      	cmp	r3, r2
34017270:	f041 8092 	bne.w	34018398 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017274:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017276:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401727a:	d01f      	beq.n	340172bc <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
3401727c:	f640 1115 	movw	r1, #2325	@ 0x915
34017280:	4801      	ldr	r0, [pc, #4]	@ (34017288 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34017282:	f006 fb81 	bl	3401d988 <assert_failed>
34017286:	e019      	b.n	340172bc <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34017288:	34026b5b 	.word	0x34026b5b
3401728c:	07021c30 	.word	0x07021c30
34017290:	56028000 	.word	0x56028000
34017294:	07000034 	.word	0x07000034
34017298:	07020034 	.word	0x07020034
3401729c:	07000434 	.word	0x07000434
340172a0:	07020434 	.word	0x07020434
340172a4:	01001014 	.word	0x01001014
340172a8:	01001814 	.word	0x01001814
340172ac:	03000c14 	.word	0x03000c14
340172b0:	03020c14 	.word	0x03020c14
340172b4:	03001414 	.word	0x03001414
340172b8:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340172bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340172be:	3b01      	subs	r3, #1
340172c0:	2bff      	cmp	r3, #255	@ 0xff
340172c2:	d904      	bls.n	340172ce <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
340172c4:	f640 1116 	movw	r1, #2326	@ 0x916
340172c8:	48b1      	ldr	r0, [pc, #708]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340172ca:	f006 fb5d 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340172ce:	4ab1      	ldr	r2, [pc, #708]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340172d0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340172d2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340172d6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340172d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340172dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340172e0:	3901      	subs	r1, #1
340172e2:	4303      	orrs	r3, r0
340172e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340172e8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340172ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340172f0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340172f4:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
340172f8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340172fc:	f7fd ffaa 	bl	34015254 <LL_RCC_SetClockSource>
34017300:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34017304:	2b00      	cmp	r3, #0
34017306:	f281 8050 	bge.w	340183aa <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
3401730a:	f7fd ff73 	bl	340151f4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
3401730e:	6863      	ldr	r3, [r4, #4]
34017310:	061b      	lsls	r3, r3, #24
34017312:	d511      	bpl.n	34017338 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34017314:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
34017318:	2b03      	cmp	r3, #3
3401731a:	d904      	bls.n	34017326 <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
3401731c:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34017320:	489b      	ldr	r0, [pc, #620]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017322:	f006 fb31 	bl	3401d988 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34017326:	4a9b      	ldr	r2, [pc, #620]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017328:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
3401732c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3401732e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34017332:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
34017336:	6253      	str	r3, [r2, #36]	@ 0x24
}
34017338:	1e28      	subs	r0, r5, #0
3401733a:	bf18      	it	ne
3401733c:	2001      	movne	r0, #1
3401733e:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017340:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34017342:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017346:	d003      	beq.n	34017350 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
34017348:	21e6      	movs	r1, #230	@ 0xe6
3401734a:	4891      	ldr	r0, [pc, #580]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401734c:	f006 fb1c 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34017350:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34017352:	3b01      	subs	r3, #1
34017354:	2bff      	cmp	r3, #255	@ 0xff
34017356:	d903      	bls.n	34017360 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
34017358:	21e7      	movs	r1, #231	@ 0xe7
3401735a:	488d      	ldr	r0, [pc, #564]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401735c:	f006 fb14 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34017360:	4a8c      	ldr	r2, [pc, #560]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017362:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34017364:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34017368:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401736a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401736e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017372:	3901      	subs	r1, #1
34017374:	4303      	orrs	r3, r0
34017376:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401737a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3401737e:	f44f 7300 	mov.w	r3, #512	@ 0x200
34017382:	f7fe b941 	b.w	34015608 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017386:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017388:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401738c:	d003      	beq.n	34017396 <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
3401738e:	21f3      	movs	r1, #243	@ 0xf3
34017390:	487f      	ldr	r0, [pc, #508]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017392:	f006 faf9 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017396:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017398:	3b01      	subs	r3, #1
3401739a:	2bff      	cmp	r3, #255	@ 0xff
3401739c:	d903      	bls.n	340173a6 <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
3401739e:	21f4      	movs	r1, #244	@ 0xf4
340173a0:	487b      	ldr	r0, [pc, #492]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340173a2:	f006 faf1 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340173a6:	4a7b      	ldr	r2, [pc, #492]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340173a8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340173aa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340173ae:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340173b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340173b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340173b8:	3901      	subs	r1, #1
340173ba:	4303      	orrs	r3, r0
340173bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340173c0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340173c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340173c8:	f7fe b91e 	b.w	34015608 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340173cc:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340173d0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340173d4:	d004      	beq.n	340173e0 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
340173d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
340173da:	486d      	ldr	r0, [pc, #436]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340173dc:	f006 fad4 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
340173e0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
340173e4:	3b01      	subs	r3, #1
340173e6:	2bff      	cmp	r3, #255	@ 0xff
340173e8:	d904      	bls.n	340173f4 <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
340173ea:	f240 1101 	movw	r1, #257	@ 0x101
340173ee:	4868      	ldr	r0, [pc, #416]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340173f0:	f006 faca 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
340173f4:	4a67      	ldr	r2, [pc, #412]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340173f6:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
340173fa:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
340173fe:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
34017402:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017406:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401740a:	3901      	subs	r1, #1
3401740c:	4303      	orrs	r3, r0
3401740e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017412:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34017416:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
3401741a:	f7fe b8f5 	b.w	34015608 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3401741e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34017422:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017426:	d004      	beq.n	34017432 <HAL_RCCEx_PeriphCLKConfig+0x2016>
34017428:	f240 110d 	movw	r1, #269	@ 0x10d
3401742c:	4858      	ldr	r0, [pc, #352]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401742e:	f006 faab 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34017432:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34017436:	3b01      	subs	r3, #1
34017438:	2bff      	cmp	r3, #255	@ 0xff
3401743a:	d904      	bls.n	34017446 <HAL_RCCEx_PeriphCLKConfig+0x202a>
3401743c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34017440:	4853      	ldr	r0, [pc, #332]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017442:	f006 faa1 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34017446:	4a53      	ldr	r2, [pc, #332]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017448:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
3401744c:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34017450:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34017454:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017458:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401745c:	3901      	subs	r1, #1
3401745e:	4303      	orrs	r3, r0
34017460:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017464:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34017468:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3401746c:	f7fe b8cc 	b.w	34015608 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34017470:	4a49      	ldr	r2, [pc, #292]	@ (34017598 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
34017472:	4293      	cmp	r3, r2
34017474:	d123      	bne.n	340174be <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34017476:	6a23      	ldr	r3, [r4, #32]
34017478:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401747c:	d004      	beq.n	34017488 <HAL_RCCEx_PeriphCLKConfig+0x206c>
3401747e:	f44f 719b 	mov.w	r1, #310	@ 0x136
34017482:	4843      	ldr	r0, [pc, #268]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017484:	f006 fa80 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34017488:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401748a:	3b01      	subs	r3, #1
3401748c:	2bff      	cmp	r3, #255	@ 0xff
3401748e:	d904      	bls.n	3401749a <HAL_RCCEx_PeriphCLKConfig+0x207e>
34017490:	f240 1137 	movw	r1, #311	@ 0x137
34017494:	483e      	ldr	r0, [pc, #248]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017496:	f006 fa77 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3401749a:	4a3e      	ldr	r2, [pc, #248]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401749c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401749e:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340174a2:	6a20      	ldr	r0, [r4, #32]
340174a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340174a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340174ac:	3901      	subs	r1, #1
340174ae:	4303      	orrs	r3, r0
340174b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340174b4:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340174b8:	2308      	movs	r3, #8
340174ba:	f7fe b8e8 	b.w	3401568e <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
340174be:	4a37      	ldr	r2, [pc, #220]	@ (3401759c <HAL_RCCEx_PeriphCLKConfig+0x2180>)
340174c0:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340174c2:	bf02      	ittt	eq
340174c4:	2240      	moveq	r2, #64	@ 0x40
340174c6:	4b33      	ldreq	r3, [pc, #204]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340174c8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340174cc:	f7fe b8e1 	b.w	34015692 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
340174d0:	4a33      	ldr	r2, [pc, #204]	@ (340175a0 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
340174d2:	4293      	cmp	r3, r2
340174d4:	d123      	bne.n	3401751e <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340174d6:	6a23      	ldr	r3, [r4, #32]
340174d8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340174dc:	d004      	beq.n	340174e8 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
340174de:	f240 1163 	movw	r1, #355	@ 0x163
340174e2:	482b      	ldr	r0, [pc, #172]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340174e4:	f006 fa50 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340174e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340174ea:	3b01      	subs	r3, #1
340174ec:	2bff      	cmp	r3, #255	@ 0xff
340174ee:	d904      	bls.n	340174fa <HAL_RCCEx_PeriphCLKConfig+0x20de>
340174f0:	f44f 71b2 	mov.w	r1, #356	@ 0x164
340174f4:	4826      	ldr	r0, [pc, #152]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340174f6:	f006 fa47 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340174fa:	4a26      	ldr	r2, [pc, #152]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340174fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340174fe:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34017502:	6a20      	ldr	r0, [r4, #32]
34017504:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017508:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401750c:	3901      	subs	r1, #1
3401750e:	4303      	orrs	r3, r0
34017510:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017514:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34017518:	2308      	movs	r3, #8
3401751a:	f7fe b8f5 	b.w	34015708 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3401751e:	4a21      	ldr	r2, [pc, #132]	@ (340175a4 <HAL_RCCEx_PeriphCLKConfig+0x2188>)
34017520:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017522:	bf02      	ittt	eq
34017524:	2240      	moveq	r2, #64	@ 0x40
34017526:	4b1b      	ldreq	r3, [pc, #108]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017528:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401752c:	f7fe b8ee 	b.w	3401570c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34017530:	4a1d      	ldr	r2, [pc, #116]	@ (340175a8 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
34017532:	4293      	cmp	r3, r2
34017534:	d123      	bne.n	3401757e <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34017536:	6a23      	ldr	r3, [r4, #32]
34017538:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401753c:	d004      	beq.n	34017548 <HAL_RCCEx_PeriphCLKConfig+0x212c>
3401753e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
34017542:	4813      	ldr	r0, [pc, #76]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017544:	f006 fa20 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34017548:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401754a:	3b01      	subs	r3, #1
3401754c:	2bff      	cmp	r3, #255	@ 0xff
3401754e:	d904      	bls.n	3401755a <HAL_RCCEx_PeriphCLKConfig+0x213e>
34017550:	f240 1191 	movw	r1, #401	@ 0x191
34017554:	480e      	ldr	r0, [pc, #56]	@ (34017590 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34017556:	f006 fa17 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3401755a:	4a0e      	ldr	r2, [pc, #56]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401755c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401755e:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34017562:	6a20      	ldr	r0, [r4, #32]
34017564:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017568:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401756c:	3901      	subs	r1, #1
3401756e:	4303      	orrs	r3, r0
34017570:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017574:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34017578:	2308      	movs	r3, #8
3401757a:	f7fe b902 	b.w	34015782 <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3401757e:	4a0b      	ldr	r2, [pc, #44]	@ (340175ac <HAL_RCCEx_PeriphCLKConfig+0x2190>)
34017580:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017582:	bf02      	ittt	eq
34017584:	2240      	moveq	r2, #64	@ 0x40
34017586:	4b03      	ldreq	r3, [pc, #12]	@ (34017594 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34017588:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401758c:	f7fe b8fb 	b.w	34015786 <HAL_RCCEx_PeriphCLKConfig+0x36a>
34017590:	34026b5b 	.word	0x34026b5b
34017594:	56028000 	.word	0x56028000
34017598:	03030014 	.word	0x03030014
3401759c:	03010014 	.word	0x03010014
340175a0:	03030414 	.word	0x03030414
340175a4:	03010414 	.word	0x03010414
340175a8:	03030814 	.word	0x03030814
340175ac:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
340175b0:	2b30      	cmp	r3, #48	@ 0x30
340175b2:	d123      	bne.n	340175fc <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340175b4:	6a23      	ldr	r3, [r4, #32]
340175b6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340175ba:	d004      	beq.n	340175c6 <HAL_RCCEx_PeriphCLKConfig+0x21aa>
340175bc:	f240 11bd 	movw	r1, #445	@ 0x1bd
340175c0:	48b2      	ldr	r0, [pc, #712]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340175c2:	f006 f9e1 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340175c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340175c8:	3b01      	subs	r3, #1
340175ca:	2bff      	cmp	r3, #255	@ 0xff
340175cc:	d904      	bls.n	340175d8 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
340175ce:	f44f 71df 	mov.w	r1, #446	@ 0x1be
340175d2:	48ae      	ldr	r0, [pc, #696]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340175d4:	f006 f9d8 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340175d8:	4aad      	ldr	r2, [pc, #692]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340175da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340175dc:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340175e0:	6a20      	ldr	r0, [r4, #32]
340175e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340175e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340175ea:	3901      	subs	r1, #1
340175ec:	4303      	orrs	r3, r0
340175ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340175f2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340175f6:	2308      	movs	r3, #8
340175f8:	f7fe b8fd 	b.w	340157f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
340175fc:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340175fe:	bf02      	ittt	eq
34017600:	2240      	moveq	r2, #64	@ 0x40
34017602:	4ba3      	ldreq	r3, [pc, #652]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017604:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017608:	f7fe b8f7 	b.w	340157fa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
3401760c:	4aa1      	ldr	r2, [pc, #644]	@ (34017894 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3401760e:	4293      	cmp	r3, r2
34017610:	d123      	bne.n	3401765a <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34017612:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34017614:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017618:	d004      	beq.n	34017624 <HAL_RCCEx_PeriphCLKConfig+0x2208>
3401761a:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3401761e:	489b      	ldr	r0, [pc, #620]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017620:	f006 f9b2 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34017624:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34017626:	3b01      	subs	r3, #1
34017628:	2bff      	cmp	r3, #255	@ 0xff
3401762a:	d904      	bls.n	34017636 <HAL_RCCEx_PeriphCLKConfig+0x221a>
3401762c:	f240 11eb 	movw	r1, #491	@ 0x1eb
34017630:	4896      	ldr	r0, [pc, #600]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017632:	f006 f9a9 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34017636:	4a96      	ldr	r2, [pc, #600]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017638:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3401763a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3401763e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34017640:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017644:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017648:	3901      	subs	r1, #1
3401764a:	4303      	orrs	r3, r0
3401764c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017650:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34017654:	2310      	movs	r3, #16
34017656:	f7fe b911 	b.w	3401587c <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
3401765a:	4a8f      	ldr	r2, [pc, #572]	@ (34017898 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
3401765c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401765e:	bf02      	ittt	eq
34017660:	2240      	moveq	r2, #64	@ 0x40
34017662:	4b8b      	ldreq	r3, [pc, #556]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017664:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017668:	f7fe b90a 	b.w	34015880 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3401766c:	4a8b      	ldr	r2, [pc, #556]	@ (3401789c <HAL_RCCEx_PeriphCLKConfig+0x2480>)
3401766e:	4293      	cmp	r3, r2
34017670:	d123      	bne.n	340176ba <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34017672:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34017674:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017678:	d004      	beq.n	34017684 <HAL_RCCEx_PeriphCLKConfig+0x2268>
3401767a:	f240 2117 	movw	r1, #535	@ 0x217
3401767e:	4883      	ldr	r0, [pc, #524]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017680:	f006 f982 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34017684:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34017686:	3b01      	subs	r3, #1
34017688:	2bff      	cmp	r3, #255	@ 0xff
3401768a:	d904      	bls.n	34017696 <HAL_RCCEx_PeriphCLKConfig+0x227a>
3401768c:	f44f 7106 	mov.w	r1, #536	@ 0x218
34017690:	487e      	ldr	r0, [pc, #504]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017692:	f006 f979 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34017696:	4a7e      	ldr	r2, [pc, #504]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017698:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3401769a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3401769e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340176a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340176a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340176a8:	3901      	subs	r1, #1
340176aa:	4303      	orrs	r3, r0
340176ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340176b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340176b4:	2310      	movs	r3, #16
340176b6:	f7fe b938 	b.w	3401592a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
340176ba:	4a79      	ldr	r2, [pc, #484]	@ (340178a0 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
340176bc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340176be:	bf02      	ittt	eq
340176c0:	2240      	moveq	r2, #64	@ 0x40
340176c2:	4b73      	ldreq	r3, [pc, #460]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340176c4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340176c8:	f7fe b931 	b.w	3401592e <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
340176cc:	2b30      	cmp	r3, #48	@ 0x30
340176ce:	d123      	bne.n	34017718 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
340176d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340176d2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340176d6:	d004      	beq.n	340176e2 <HAL_RCCEx_PeriphCLKConfig+0x22c6>
340176d8:	f240 2145 	movw	r1, #581	@ 0x245
340176dc:	486b      	ldr	r0, [pc, #428]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340176de:	f006 f953 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
340176e2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340176e4:	3b01      	subs	r3, #1
340176e6:	2bff      	cmp	r3, #255	@ 0xff
340176e8:	d904      	bls.n	340176f4 <HAL_RCCEx_PeriphCLKConfig+0x22d8>
340176ea:	f240 2146 	movw	r1, #582	@ 0x246
340176ee:	4867      	ldr	r0, [pc, #412]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340176f0:	f006 f94a 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
340176f4:	4a66      	ldr	r2, [pc, #408]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340176f6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
340176f8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
340176fc:	6c20      	ldr	r0, [r4, #64]	@ 0x40
340176fe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017702:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017706:	3901      	subs	r1, #1
34017708:	4303      	orrs	r3, r0
3401770a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401770e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017712:	2380      	movs	r3, #128	@ 0x80
34017714:	f7fe b94f 	b.w	340159b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34017718:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401771a:	bf02      	ittt	eq
3401771c:	2240      	moveq	r2, #64	@ 0x40
3401771e:	4b5c      	ldreq	r3, [pc, #368]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017720:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017724:	f7fe b949 	b.w	340159ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34017728:	2b03      	cmp	r3, #3
3401772a:	d123      	bne.n	34017774 <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3401772c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401772e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017732:	d004      	beq.n	3401773e <HAL_RCCEx_PeriphCLKConfig+0x2322>
34017734:	f240 2173 	movw	r1, #627	@ 0x273
34017738:	4854      	ldr	r0, [pc, #336]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3401773a:	f006 f925 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3401773e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017740:	3b01      	subs	r3, #1
34017742:	2bff      	cmp	r3, #255	@ 0xff
34017744:	d904      	bls.n	34017750 <HAL_RCCEx_PeriphCLKConfig+0x2334>
34017746:	f44f 711d 	mov.w	r1, #628	@ 0x274
3401774a:	4850      	ldr	r0, [pc, #320]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3401774c:	f006 f91c 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017750:	4a4f      	ldr	r2, [pc, #316]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017752:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017754:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017758:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401775a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401775e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017762:	3901      	subs	r1, #1
34017764:	4303      	orrs	r3, r0
34017766:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401776a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3401776e:	2380      	movs	r3, #128	@ 0x80
34017770:	f7fe b967 	b.w	34015a42 <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34017774:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017776:	bf02      	ittt	eq
34017778:	2240      	moveq	r2, #64	@ 0x40
3401777a:	4b45      	ldreq	r3, [pc, #276]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3401777c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017780:	f7fe b961 	b.w	34015a46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34017784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017788:	bf02      	ittt	eq
3401778a:	2240      	moveq	r2, #64	@ 0x40
3401778c:	4b40      	ldreq	r3, [pc, #256]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3401778e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017792:	f7fe b9ca 	b.w	34015b2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34017796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401779a:	bf02      	ittt	eq
3401779c:	2240      	moveq	r2, #64	@ 0x40
3401779e:	4b3c      	ldreq	r3, [pc, #240]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340177a0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340177a4:	f7fe ba03 	b.w	34015bae <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
340177a8:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340177aa:	bf02      	ittt	eq
340177ac:	2240      	moveq	r2, #64	@ 0x40
340177ae:	4b38      	ldreq	r3, [pc, #224]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340177b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340177b4:	f7fe ba92 	b.w	34015cdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
340177b8:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340177ba:	bf02      	ittt	eq
340177bc:	2240      	moveq	r2, #64	@ 0x40
340177be:	4b34      	ldreq	r3, [pc, #208]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340177c0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340177c4:	f7fe bad3 	b.w	34015d6e <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
340177c8:	4a36      	ldr	r2, [pc, #216]	@ (340178a4 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
340177ca:	4293      	cmp	r3, r2
340177cc:	d124      	bne.n	34017818 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340177ce:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340177d0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340177d4:	d004      	beq.n	340177e0 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
340177d6:	f240 314f 	movw	r1, #847	@ 0x34f
340177da:	482c      	ldr	r0, [pc, #176]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340177dc:	f006 f8d4 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340177e0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340177e2:	3b01      	subs	r3, #1
340177e4:	2bff      	cmp	r3, #255	@ 0xff
340177e6:	d904      	bls.n	340177f2 <HAL_RCCEx_PeriphCLKConfig+0x23d6>
340177e8:	f44f 7154 	mov.w	r1, #848	@ 0x350
340177ec:	4827      	ldr	r0, [pc, #156]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340177ee:	f006 f8cb 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340177f2:	4a27      	ldr	r2, [pc, #156]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340177f4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340177f6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340177fa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340177fc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017800:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017804:	3901      	subs	r1, #1
34017806:	4303      	orrs	r3, r0
34017808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401780c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017810:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017814:	f7fe baf3 	b.w	34015dfe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34017818:	4a23      	ldr	r2, [pc, #140]	@ (340178a8 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
3401781a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401781c:	bf02      	ittt	eq
3401781e:	2240      	moveq	r2, #64	@ 0x40
34017820:	4b1b      	ldreq	r3, [pc, #108]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017822:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017826:	f7fe baec 	b.w	34015e02 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3401782a:	4a20      	ldr	r2, [pc, #128]	@ (340178ac <HAL_RCCEx_PeriphCLKConfig+0x2490>)
3401782c:	4293      	cmp	r3, r2
3401782e:	d124      	bne.n	3401787a <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017830:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017832:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017836:	d004      	beq.n	34017842 <HAL_RCCEx_PeriphCLKConfig+0x2426>
34017838:	f44f 715f 	mov.w	r1, #892	@ 0x37c
3401783c:	4813      	ldr	r0, [pc, #76]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3401783e:	f006 f8a3 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017842:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017844:	3b01      	subs	r3, #1
34017846:	2bff      	cmp	r3, #255	@ 0xff
34017848:	d904      	bls.n	34017854 <HAL_RCCEx_PeriphCLKConfig+0x2438>
3401784a:	f240 317d 	movw	r1, #893	@ 0x37d
3401784e:	480f      	ldr	r0, [pc, #60]	@ (3401788c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34017850:	f006 f89a 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017854:	4a0e      	ldr	r2, [pc, #56]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017856:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017858:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401785c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401785e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017862:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017866:	3901      	subs	r1, #1
34017868:	4303      	orrs	r3, r0
3401786a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401786e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017872:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017876:	f7fe bb06 	b.w	34015e86 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
3401787a:	4a0d      	ldr	r2, [pc, #52]	@ (340178b0 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
3401787c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401787e:	bf02      	ittt	eq
34017880:	2240      	moveq	r2, #64	@ 0x40
34017882:	4b03      	ldreq	r3, [pc, #12]	@ (34017890 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34017884:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017888:	f7fe baff 	b.w	34015e8a <HAL_RCCEx_PeriphCLKConfig+0xa6e>
3401788c:	34026b5b 	.word	0x34026b5b
34017890:	56028000 	.word	0x56028000
34017894:	0303001c 	.word	0x0303001c
34017898:	0301001c 	.word	0x0301001c
3401789c:	0303041c 	.word	0x0303041c
340178a0:	0301041c 	.word	0x0301041c
340178a4:	0703000c 	.word	0x0703000c
340178a8:	0701000c 	.word	0x0701000c
340178ac:	0703040c 	.word	0x0703040c
340178b0:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
340178b4:	4ab1      	ldr	r2, [pc, #708]	@ (34017b7c <HAL_RCCEx_PeriphCLKConfig+0x2760>)
340178b6:	4293      	cmp	r3, r2
340178b8:	d124      	bne.n	34017904 <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340178ba:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340178bc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340178c0:	d004      	beq.n	340178cc <HAL_RCCEx_PeriphCLKConfig+0x24b0>
340178c2:	f240 31a9 	movw	r1, #937	@ 0x3a9
340178c6:	48ae      	ldr	r0, [pc, #696]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340178c8:	f006 f85e 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340178cc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340178ce:	3b01      	subs	r3, #1
340178d0:	2bff      	cmp	r3, #255	@ 0xff
340178d2:	d904      	bls.n	340178de <HAL_RCCEx_PeriphCLKConfig+0x24c2>
340178d4:	f240 31aa 	movw	r1, #938	@ 0x3aa
340178d8:	48a9      	ldr	r0, [pc, #676]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340178da:	f006 f855 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340178de:	4aa9      	ldr	r2, [pc, #676]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340178e0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340178e2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340178e6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340178e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340178ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340178f0:	3901      	subs	r1, #1
340178f2:	4303      	orrs	r3, r0
340178f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340178f8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340178fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017900:	f7fe bb05 	b.w	34015f0e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34017904:	4aa0      	ldr	r2, [pc, #640]	@ (34017b88 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
34017906:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017908:	bf02      	ittt	eq
3401790a:	2240      	moveq	r2, #64	@ 0x40
3401790c:	4b9d      	ldreq	r3, [pc, #628]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3401790e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017912:	f7fe bafe 	b.w	34015f12 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34017916:	4a9d      	ldr	r2, [pc, #628]	@ (34017b8c <HAL_RCCEx_PeriphCLKConfig+0x2770>)
34017918:	4293      	cmp	r3, r2
3401791a:	d124      	bne.n	34017966 <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401791c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401791e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017922:	d004      	beq.n	3401792e <HAL_RCCEx_PeriphCLKConfig+0x2512>
34017924:	f240 31d6 	movw	r1, #982	@ 0x3d6
34017928:	4895      	ldr	r0, [pc, #596]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3401792a:	f006 f82d 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401792e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017930:	3b01      	subs	r3, #1
34017932:	2bff      	cmp	r3, #255	@ 0xff
34017934:	d904      	bls.n	34017940 <HAL_RCCEx_PeriphCLKConfig+0x2524>
34017936:	f240 31d7 	movw	r1, #983	@ 0x3d7
3401793a:	4891      	ldr	r0, [pc, #580]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3401793c:	f006 f824 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017940:	4a90      	ldr	r2, [pc, #576]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017942:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017944:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017948:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401794a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401794e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017952:	3901      	subs	r1, #1
34017954:	4303      	orrs	r3, r0
34017956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401795a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401795e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017962:	f7fe bb2c 	b.w	34015fbe <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34017966:	4a8a      	ldr	r2, [pc, #552]	@ (34017b90 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
34017968:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401796a:	bf02      	ittt	eq
3401796c:	2240      	moveq	r2, #64	@ 0x40
3401796e:	4b85      	ldreq	r3, [pc, #532]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017970:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017974:	f7fe bb25 	b.w	34015fc2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34017978:	4a86      	ldr	r2, [pc, #536]	@ (34017b94 <HAL_RCCEx_PeriphCLKConfig+0x2778>)
3401797a:	4293      	cmp	r3, r2
3401797c:	d124      	bne.n	340179c8 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401797e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017980:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017984:	d004      	beq.n	34017990 <HAL_RCCEx_PeriphCLKConfig+0x2574>
34017986:	f240 4103 	movw	r1, #1027	@ 0x403
3401798a:	487d      	ldr	r0, [pc, #500]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3401798c:	f005 fffc 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017990:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017992:	3b01      	subs	r3, #1
34017994:	2bff      	cmp	r3, #255	@ 0xff
34017996:	d904      	bls.n	340179a2 <HAL_RCCEx_PeriphCLKConfig+0x2586>
34017998:	f240 4104 	movw	r1, #1028	@ 0x404
3401799c:	4878      	ldr	r0, [pc, #480]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3401799e:	f005 fff3 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340179a2:	4a78      	ldr	r2, [pc, #480]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340179a4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340179a6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340179aa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340179ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340179b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340179b4:	3901      	subs	r1, #1
340179b6:	4303      	orrs	r3, r0
340179b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340179bc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340179c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340179c4:	f7fe bb3f 	b.w	34016046 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
340179c8:	4a73      	ldr	r2, [pc, #460]	@ (34017b98 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
340179ca:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340179cc:	bf02      	ittt	eq
340179ce:	2240      	moveq	r2, #64	@ 0x40
340179d0:	4b6c      	ldreq	r3, [pc, #432]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
340179d2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340179d6:	f7fe bb38 	b.w	3401604a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
340179da:	4a70      	ldr	r2, [pc, #448]	@ (34017b9c <HAL_RCCEx_PeriphCLKConfig+0x2780>)
340179dc:	4293      	cmp	r3, r2
340179de:	d124      	bne.n	34017a2a <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340179e0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340179e2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340179e6:	d004      	beq.n	340179f2 <HAL_RCCEx_PeriphCLKConfig+0x25d6>
340179e8:	f44f 6186 	mov.w	r1, #1072	@ 0x430
340179ec:	4864      	ldr	r0, [pc, #400]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
340179ee:	f005 ffcb 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340179f2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340179f4:	3b01      	subs	r3, #1
340179f6:	2bff      	cmp	r3, #255	@ 0xff
340179f8:	d904      	bls.n	34017a04 <HAL_RCCEx_PeriphCLKConfig+0x25e8>
340179fa:	f240 4131 	movw	r1, #1073	@ 0x431
340179fe:	4860      	ldr	r0, [pc, #384]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017a00:	f005 ffc2 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017a04:	4a5f      	ldr	r2, [pc, #380]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a06:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017a08:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017a0c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017a0e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017a12:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017a16:	3901      	subs	r1, #1
34017a18:	4303      	orrs	r3, r0
34017a1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017a1e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017a22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017a26:	f7fe bb52 	b.w	340160ce <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34017a2a:	4a5d      	ldr	r2, [pc, #372]	@ (34017ba0 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34017a2c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a2e:	bf02      	ittt	eq
34017a30:	2240      	moveq	r2, #64	@ 0x40
34017a32:	4b54      	ldreq	r3, [pc, #336]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a34:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a38:	f7fe bb4b 	b.w	340160d2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34017a3c:	4a59      	ldr	r2, [pc, #356]	@ (34017ba4 <HAL_RCCEx_PeriphCLKConfig+0x2788>)
34017a3e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a40:	bf02      	ittt	eq
34017a42:	2240      	moveq	r2, #64	@ 0x40
34017a44:	4b4f      	ldreq	r3, [pc, #316]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a46:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a4a:	f7fe bb86 	b.w	3401615a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34017a4e:	4a56      	ldr	r2, [pc, #344]	@ (34017ba8 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34017a50:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a52:	bf02      	ittt	eq
34017a54:	2240      	moveq	r2, #64	@ 0x40
34017a56:	4b4b      	ldreq	r3, [pc, #300]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a58:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a5c:	f7fe bbc1 	b.w	340161e2 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34017a60:	4a52      	ldr	r2, [pc, #328]	@ (34017bac <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34017a62:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a64:	bf02      	ittt	eq
34017a66:	2240      	moveq	r2, #64	@ 0x40
34017a68:	4b46      	ldreq	r3, [pc, #280]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a6a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a6e:	f7fe bc17 	b.w	340162a0 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34017a72:	4a4f      	ldr	r2, [pc, #316]	@ (34017bb0 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34017a74:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a76:	bf02      	ittt	eq
34017a78:	2240      	moveq	r2, #64	@ 0x40
34017a7a:	4b42      	ldreq	r3, [pc, #264]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a7c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a80:	f7fe bc52 	b.w	34016328 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34017a84:	4a4b      	ldr	r2, [pc, #300]	@ (34017bb4 <HAL_RCCEx_PeriphCLKConfig+0x2798>)
34017a86:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017a88:	bf02      	ittt	eq
34017a8a:	2240      	moveq	r2, #64	@ 0x40
34017a8c:	4b3d      	ldreq	r3, [pc, #244]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017a8e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017a92:	f7fe bc8d 	b.w	340163b0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34017a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34017a9a:	d124      	bne.n	34017ae6 <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34017a9c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34017a9e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017aa2:	d004      	beq.n	34017aae <HAL_RCCEx_PeriphCLKConfig+0x2692>
34017aa4:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34017aa8:	4835      	ldr	r0, [pc, #212]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017aaa:	f005 ff6d 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34017aae:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34017ab0:	3b01      	subs	r3, #1
34017ab2:	2bff      	cmp	r3, #255	@ 0xff
34017ab4:	d904      	bls.n	34017ac0 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34017ab6:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34017aba:	4831      	ldr	r0, [pc, #196]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017abc:	f005 ff64 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34017ac0:	4a30      	ldr	r2, [pc, #192]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017ac2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34017ac4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34017ac8:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34017aca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017ace:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017ad2:	3901      	subs	r1, #1
34017ad4:	4303      	orrs	r3, r0
34017ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017ada:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017ade:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34017ae2:	f7fe bca7 	b.w	34016434 <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34017ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017aea:	bf02      	ittt	eq
34017aec:	2240      	moveq	r2, #64	@ 0x40
34017aee:	4b25      	ldreq	r3, [pc, #148]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017af0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017af4:	f7fe bca0 	b.w	34016438 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34017af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017afc:	bf02      	ittt	eq
34017afe:	2240      	moveq	r2, #64	@ 0x40
34017b00:	4b20      	ldreq	r3, [pc, #128]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017b02:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b06:	f7fe bcdd 	b.w	340164c4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34017b0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34017b0e:	d123      	bne.n	34017b58 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017b10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017b12:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017b16:	d004      	beq.n	34017b22 <HAL_RCCEx_PeriphCLKConfig+0x2706>
34017b18:	f240 514a 	movw	r1, #1354	@ 0x54a
34017b1c:	4818      	ldr	r0, [pc, #96]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017b1e:	f005 ff33 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017b22:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017b24:	3b01      	subs	r3, #1
34017b26:	2bff      	cmp	r3, #255	@ 0xff
34017b28:	d904      	bls.n	34017b34 <HAL_RCCEx_PeriphCLKConfig+0x2718>
34017b2a:	f240 514b 	movw	r1, #1355	@ 0x54b
34017b2e:	4814      	ldr	r0, [pc, #80]	@ (34017b80 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34017b30:	f005 ff2a 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017b34:	4a13      	ldr	r2, [pc, #76]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017b36:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017b38:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017b3c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017b3e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017b42:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017b46:	3901      	subs	r1, #1
34017b48:	4303      	orrs	r3, r0
34017b4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017b52:	2380      	movs	r3, #128	@ 0x80
34017b54:	f7fe bcf8 	b.w	34016548 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34017b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b5c:	bf02      	ittt	eq
34017b5e:	2240      	moveq	r2, #64	@ 0x40
34017b60:	4b08      	ldreq	r3, [pc, #32]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017b62:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b66:	f7fe bcf1 	b.w	3401654c <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34017b6a:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017b6c:	bf02      	ittt	eq
34017b6e:	2240      	moveq	r2, #64	@ 0x40
34017b70:	4b04      	ldreq	r3, [pc, #16]	@ (34017b84 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34017b72:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017b76:	f7fe bd3b 	b.w	340165f0 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34017b7a:	bf00      	nop
34017b7c:	0703080c 	.word	0x0703080c
34017b80:	34026b5b 	.word	0x34026b5b
34017b84:	56028000 	.word	0x56028000
34017b88:	0701080c 	.word	0x0701080c
34017b8c:	07030c0c 	.word	0x07030c0c
34017b90:	07010c0c 	.word	0x07010c0c
34017b94:	0703100c 	.word	0x0703100c
34017b98:	0701100c 	.word	0x0701100c
34017b9c:	0703140c 	.word	0x0703140c
34017ba0:	0701140c 	.word	0x0701140c
34017ba4:	0701082c 	.word	0x0701082c
34017ba8:	07010c2c 	.word	0x07010c2c
34017bac:	0701102c 	.word	0x0701102c
34017bb0:	0701142c 	.word	0x0701142c
34017bb4:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34017bb8:	4aa8      	ldr	r2, [pc, #672]	@ (34017e5c <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34017bba:	4293      	cmp	r3, r2
34017bbc:	d123      	bne.n	34017c06 <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017bbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017bc0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017bc4:	d004      	beq.n	34017bd0 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34017bc6:	f240 5197 	movw	r1, #1431	@ 0x597
34017bca:	48a5      	ldr	r0, [pc, #660]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017bcc:	f005 fedc 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017bd0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017bd2:	3b01      	subs	r3, #1
34017bd4:	2bff      	cmp	r3, #255	@ 0xff
34017bd6:	d904      	bls.n	34017be2 <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34017bd8:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34017bdc:	48a0      	ldr	r0, [pc, #640]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017bde:	f005 fed3 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017be2:	4aa0      	ldr	r2, [pc, #640]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017be4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017be6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017bea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017bec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017bf0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017bf4:	3901      	subs	r1, #1
34017bf6:	4303      	orrs	r3, r0
34017bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017c00:	2380      	movs	r3, #128	@ 0x80
34017c02:	f7fe bd3a 	b.w	3401667a <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34017c06:	4a98      	ldr	r2, [pc, #608]	@ (34017e68 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34017c08:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017c0a:	bf02      	ittt	eq
34017c0c:	2240      	moveq	r2, #64	@ 0x40
34017c0e:	4b95      	ldreq	r3, [pc, #596]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017c10:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017c14:	f7fe bd33 	b.w	3401667e <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34017c18:	4a94      	ldr	r2, [pc, #592]	@ (34017e6c <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34017c1a:	4293      	cmp	r3, r2
34017c1c:	d123      	bne.n	34017c66 <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017c1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017c20:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017c24:	d004      	beq.n	34017c30 <HAL_RCCEx_PeriphCLKConfig+0x2814>
34017c26:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34017c2a:	488d      	ldr	r0, [pc, #564]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017c2c:	f005 feac 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017c30:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017c32:	3b01      	subs	r3, #1
34017c34:	2bff      	cmp	r3, #255	@ 0xff
34017c36:	d904      	bls.n	34017c42 <HAL_RCCEx_PeriphCLKConfig+0x2826>
34017c38:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34017c3c:	4888      	ldr	r0, [pc, #544]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017c3e:	f005 fea3 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017c42:	4a88      	ldr	r2, [pc, #544]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017c44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017c46:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017c4a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017c4c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017c50:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017c54:	3901      	subs	r1, #1
34017c56:	4303      	orrs	r3, r0
34017c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017c60:	2380      	movs	r3, #128	@ 0x80
34017c62:	f7fe bd4b 	b.w	340166fc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34017c66:	4a82      	ldr	r2, [pc, #520]	@ (34017e70 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34017c68:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017c6a:	bf02      	ittt	eq
34017c6c:	2240      	moveq	r2, #64	@ 0x40
34017c6e:	4b7d      	ldreq	r3, [pc, #500]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017c70:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017c74:	f7fe bd44 	b.w	34016700 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34017c78:	2b03      	cmp	r3, #3
34017c7a:	d123      	bne.n	34017cc4 <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017c7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017c7e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017c82:	d004      	beq.n	34017c8e <HAL_RCCEx_PeriphCLKConfig+0x2872>
34017c84:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34017c88:	4875      	ldr	r0, [pc, #468]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017c8a:	f005 fe7d 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017c8e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017c90:	3b01      	subs	r3, #1
34017c92:	2bff      	cmp	r3, #255	@ 0xff
34017c94:	d904      	bls.n	34017ca0 <HAL_RCCEx_PeriphCLKConfig+0x2884>
34017c96:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34017c9a:	4871      	ldr	r0, [pc, #452]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017c9c:	f005 fe74 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017ca0:	4a70      	ldr	r2, [pc, #448]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017ca2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017ca4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017ca8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017caa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017cae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017cb2:	3901      	subs	r1, #1
34017cb4:	4303      	orrs	r3, r0
34017cb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017cba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017cbe:	2380      	movs	r3, #128	@ 0x80
34017cc0:	f7fe bd55 	b.w	3401676e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34017cc4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017cc6:	bf02      	ittt	eq
34017cc8:	2240      	moveq	r2, #64	@ 0x40
34017cca:	4b66      	ldreq	r3, [pc, #408]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017ccc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017cd0:	f7fe bd4f 	b.w	34016772 <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34017cd4:	4a67      	ldr	r2, [pc, #412]	@ (34017e74 <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
34017cd6:	4293      	cmp	r3, r2
34017cd8:	d124      	bne.n	34017d24 <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017cda:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017cdc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017ce0:	d004      	beq.n	34017cec <HAL_RCCEx_PeriphCLKConfig+0x28d0>
34017ce2:	f240 611e 	movw	r1, #1566	@ 0x61e
34017ce6:	485e      	ldr	r0, [pc, #376]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017ce8:	f005 fe4e 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017cec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017cee:	3b01      	subs	r3, #1
34017cf0:	2bff      	cmp	r3, #255	@ 0xff
34017cf2:	d904      	bls.n	34017cfe <HAL_RCCEx_PeriphCLKConfig+0x28e2>
34017cf4:	f240 611f 	movw	r1, #1567	@ 0x61f
34017cf8:	4859      	ldr	r0, [pc, #356]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017cfa:	f005 fe45 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017cfe:	4a59      	ldr	r2, [pc, #356]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017d00:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017d02:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017d06:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017d08:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017d0c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017d10:	3901      	subs	r1, #1
34017d12:	4303      	orrs	r3, r0
34017d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017d18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34017d20:	f7fe bd72 	b.w	34016808 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34017d24:	4a54      	ldr	r2, [pc, #336]	@ (34017e78 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34017d26:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017d28:	bf02      	ittt	eq
34017d2a:	2240      	moveq	r2, #64	@ 0x40
34017d2c:	4b4d      	ldreq	r3, [pc, #308]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017d2e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017d32:	f7fe bd6b 	b.w	3401680c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34017d36:	4a51      	ldr	r2, [pc, #324]	@ (34017e7c <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34017d38:	4293      	cmp	r3, r2
34017d3a:	d124      	bne.n	34017d86 <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017d3c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017d3e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017d42:	d004      	beq.n	34017d4e <HAL_RCCEx_PeriphCLKConfig+0x2932>
34017d44:	f240 614b 	movw	r1, #1611	@ 0x64b
34017d48:	4845      	ldr	r0, [pc, #276]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017d4a:	f005 fe1d 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017d4e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017d50:	3b01      	subs	r3, #1
34017d52:	2bff      	cmp	r3, #255	@ 0xff
34017d54:	d904      	bls.n	34017d60 <HAL_RCCEx_PeriphCLKConfig+0x2944>
34017d56:	f240 614c 	movw	r1, #1612	@ 0x64c
34017d5a:	4841      	ldr	r0, [pc, #260]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017d5c:	f005 fe14 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017d60:	4a40      	ldr	r2, [pc, #256]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017d62:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017d64:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017d68:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017d6a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017d6e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017d72:	3901      	subs	r1, #1
34017d74:	4303      	orrs	r3, r0
34017d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017d7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017d7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34017d82:	f7fe bd88 	b.w	34016896 <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34017d86:	4a3e      	ldr	r2, [pc, #248]	@ (34017e80 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34017d88:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017d8a:	bf02      	ittt	eq
34017d8c:	2240      	moveq	r2, #64	@ 0x40
34017d8e:	4b35      	ldreq	r3, [pc, #212]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017d90:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017d94:	f7fe bd81 	b.w	3401689a <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34017d98:	4a3a      	ldr	r2, [pc, #232]	@ (34017e84 <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
34017d9a:	4293      	cmp	r3, r2
34017d9c:	d124      	bne.n	34017de8 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017d9e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017da0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017da4:	d004      	beq.n	34017db0 <HAL_RCCEx_PeriphCLKConfig+0x2994>
34017da6:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34017daa:	482d      	ldr	r0, [pc, #180]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017dac:	f005 fdec 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017db0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017db2:	3b01      	subs	r3, #1
34017db4:	2bff      	cmp	r3, #255	@ 0xff
34017db6:	d904      	bls.n	34017dc2 <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34017db8:	f240 6179 	movw	r1, #1657	@ 0x679
34017dbc:	4828      	ldr	r0, [pc, #160]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017dbe:	f005 fde3 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017dc2:	4a28      	ldr	r2, [pc, #160]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017dc4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017dc6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017dca:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017dcc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017dd0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017dd4:	3901      	subs	r1, #1
34017dd6:	4303      	orrs	r3, r0
34017dd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017ddc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
34017de4:	f7fe bdb8 	b.w	34016958 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34017de8:	4a27      	ldr	r2, [pc, #156]	@ (34017e88 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34017dea:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017dec:	bf02      	ittt	eq
34017dee:	2240      	moveq	r2, #64	@ 0x40
34017df0:	4b1c      	ldreq	r3, [pc, #112]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017df2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017df6:	f7fe bdb1 	b.w	3401695c <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34017dfa:	4a24      	ldr	r2, [pc, #144]	@ (34017e8c <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34017dfc:	4293      	cmp	r3, r2
34017dfe:	d124      	bne.n	34017e4a <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34017e00:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34017e02:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017e06:	d004      	beq.n	34017e12 <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34017e08:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34017e0c:	4814      	ldr	r0, [pc, #80]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017e0e:	f005 fdbb 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34017e12:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34017e14:	3b01      	subs	r3, #1
34017e16:	2bff      	cmp	r3, #255	@ 0xff
34017e18:	d904      	bls.n	34017e24 <HAL_RCCEx_PeriphCLKConfig+0x2a08>
34017e1a:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34017e1e:	4810      	ldr	r0, [pc, #64]	@ (34017e60 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34017e20:	f005 fdb2 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34017e24:	4a0f      	ldr	r2, [pc, #60]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017e26:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34017e28:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34017e2c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34017e2e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017e32:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017e36:	3901      	subs	r1, #1
34017e38:	4303      	orrs	r3, r0
34017e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017e3e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34017e46:	f7fe bdcf 	b.w	340169e8 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34017e4a:	4a11      	ldr	r2, [pc, #68]	@ (34017e90 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34017e4c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017e4e:	bf02      	ittt	eq
34017e50:	2240      	moveq	r2, #64	@ 0x40
34017e52:	4b04      	ldreq	r3, [pc, #16]	@ (34017e64 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34017e54:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017e58:	f7fe bdc8 	b.w	340169ec <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34017e5c:	07031418 	.word	0x07031418
34017e60:	34026b5b 	.word	0x34026b5b
34017e64:	56028000 	.word	0x56028000
34017e68:	07011418 	.word	0x07011418
34017e6c:	07031818 	.word	0x07031818
34017e70:	07011818 	.word	0x07011818
34017e74:	07030420 	.word	0x07030420
34017e78:	07010420 	.word	0x07010420
34017e7c:	07030820 	.word	0x07030820
34017e80:	07010820 	.word	0x07010820
34017e84:	07030c20 	.word	0x07030c20
34017e88:	07010c20 	.word	0x07010c20
34017e8c:	07031020 	.word	0x07031020
34017e90:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34017e94:	4aab      	ldr	r2, [pc, #684]	@ (34018144 <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
34017e96:	4293      	cmp	r3, r2
34017e98:	d124      	bne.n	34017ee4 <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34017e9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34017e9c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017ea0:	d004      	beq.n	34017eac <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34017ea2:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34017ea6:	48a8      	ldr	r0, [pc, #672]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017ea8:	f005 fd6e 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34017eac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34017eae:	3b01      	subs	r3, #1
34017eb0:	2bff      	cmp	r3, #255	@ 0xff
34017eb2:	d904      	bls.n	34017ebe <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34017eb4:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34017eb8:	48a3      	ldr	r0, [pc, #652]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017eba:	f005 fd65 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34017ebe:	4aa3      	ldr	r2, [pc, #652]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017ec0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34017ec2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34017ec6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34017ec8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017ecc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017ed0:	3901      	subs	r1, #1
34017ed2:	4303      	orrs	r3, r0
34017ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017ed8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017edc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34017ee0:	f7fe bdca 	b.w	34016a78 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34017ee4:	4a9a      	ldr	r2, [pc, #616]	@ (34018150 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34017ee6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017ee8:	bf02      	ittt	eq
34017eea:	2240      	moveq	r2, #64	@ 0x40
34017eec:	4b97      	ldreq	r3, [pc, #604]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017eee:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017ef2:	f7fe bdc3 	b.w	34016a7c <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34017ef6:	4a97      	ldr	r2, [pc, #604]	@ (34018154 <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34017ef8:	4293      	cmp	r3, r2
34017efa:	d124      	bne.n	34017f46 <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017efc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017efe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017f02:	d004      	beq.n	34017f0e <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34017f04:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34017f08:	488f      	ldr	r0, [pc, #572]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017f0a:	f005 fd3d 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017f0e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017f10:	3b01      	subs	r3, #1
34017f12:	2bff      	cmp	r3, #255	@ 0xff
34017f14:	d904      	bls.n	34017f20 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34017f16:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34017f1a:	488b      	ldr	r0, [pc, #556]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017f1c:	f005 fd34 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017f20:	4a8a      	ldr	r2, [pc, #552]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017f22:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017f24:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017f28:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017f2a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017f2e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017f32:	3901      	subs	r1, #1
34017f34:	4303      	orrs	r3, r0
34017f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017f3a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34017f42:	f7fe bde0 	b.w	34016b06 <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34017f46:	4a84      	ldr	r2, [pc, #528]	@ (34018158 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34017f48:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017f4a:	bf02      	ittt	eq
34017f4c:	2240      	moveq	r2, #64	@ 0x40
34017f4e:	4b7f      	ldreq	r3, [pc, #508]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017f50:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017f54:	f7fe bdd9 	b.w	34016b0a <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34017f58:	4a80      	ldr	r2, [pc, #512]	@ (3401815c <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34017f5a:	4293      	cmp	r3, r2
34017f5c:	d124      	bne.n	34017fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34017f5e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34017f60:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017f64:	d004      	beq.n	34017f70 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
34017f66:	f240 712c 	movw	r1, #1836	@ 0x72c
34017f6a:	4877      	ldr	r0, [pc, #476]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017f6c:	f005 fd0c 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34017f70:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34017f72:	3b01      	subs	r3, #1
34017f74:	2bff      	cmp	r3, #255	@ 0xff
34017f76:	d904      	bls.n	34017f82 <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34017f78:	f240 712d 	movw	r1, #1837	@ 0x72d
34017f7c:	4872      	ldr	r0, [pc, #456]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017f7e:	f005 fd03 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34017f82:	4a72      	ldr	r2, [pc, #456]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017f84:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34017f86:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34017f8a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34017f8c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017f90:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017f94:	3901      	subs	r1, #1
34017f96:	4303      	orrs	r3, r0
34017f98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017f9c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34017fa4:	f7fe bdf7 	b.w	34016b96 <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34017fa8:	4a6d      	ldr	r2, [pc, #436]	@ (34018160 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34017faa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34017fac:	bf02      	ittt	eq
34017fae:	2240      	moveq	r2, #64	@ 0x40
34017fb0:	4b66      	ldreq	r3, [pc, #408]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017fb2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34017fb6:	f7fe bdf0 	b.w	34016b9a <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34017fba:	4a6a      	ldr	r2, [pc, #424]	@ (34018164 <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34017fbc:	4293      	cmp	r3, r2
34017fbe:	d124      	bne.n	3401800a <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34017fc0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34017fc2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017fc6:	d004      	beq.n	34017fd2 <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34017fc8:	f240 7159 	movw	r1, #1881	@ 0x759
34017fcc:	485e      	ldr	r0, [pc, #376]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017fce:	f005 fcdb 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34017fd2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34017fd4:	3b01      	subs	r3, #1
34017fd6:	2bff      	cmp	r3, #255	@ 0xff
34017fd8:	d904      	bls.n	34017fe4 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34017fda:	f240 715a 	movw	r1, #1882	@ 0x75a
34017fde:	485a      	ldr	r0, [pc, #360]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34017fe0:	f005 fcd2 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34017fe4:	4a59      	ldr	r2, [pc, #356]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34017fe6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34017fe8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34017fec:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34017fee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017ff2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017ff6:	3901      	subs	r1, #1
34017ff8:	4303      	orrs	r3, r0
34017ffa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017ffe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018006:	f7fe be27 	b.w	34016c58 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
3401800a:	4a57      	ldr	r2, [pc, #348]	@ (34018168 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
3401800c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401800e:	bf02      	ittt	eq
34018010:	2240      	moveq	r2, #64	@ 0x40
34018012:	4b4e      	ldreq	r3, [pc, #312]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018014:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018018:	f7fe be20 	b.w	34016c5c <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
3401801c:	4a53      	ldr	r2, [pc, #332]	@ (3401816c <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
3401801e:	4293      	cmp	r3, r2
34018020:	d124      	bne.n	3401806c <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018022:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018024:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018028:	d004      	beq.n	34018034 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
3401802a:	f240 7186 	movw	r1, #1926	@ 0x786
3401802e:	4846      	ldr	r0, [pc, #280]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018030:	f005 fcaa 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018034:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018036:	3b01      	subs	r3, #1
34018038:	2bff      	cmp	r3, #255	@ 0xff
3401803a:	d904      	bls.n	34018046 <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
3401803c:	f240 7187 	movw	r1, #1927	@ 0x787
34018040:	4841      	ldr	r0, [pc, #260]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018042:	f005 fca1 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018046:	4a41      	ldr	r2, [pc, #260]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018048:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401804a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401804e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018050:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018054:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018058:	3901      	subs	r1, #1
3401805a:	4303      	orrs	r3, r0
3401805c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018060:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018064:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018068:	f7fe be3e 	b.w	34016ce8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
3401806c:	4a40      	ldr	r2, [pc, #256]	@ (34018170 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
3401806e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018070:	bf02      	ittt	eq
34018072:	2240      	moveq	r2, #64	@ 0x40
34018074:	4b35      	ldreq	r3, [pc, #212]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34018076:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401807a:	f7fe be37 	b.w	34016cec <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3401807e:	4a3d      	ldr	r2, [pc, #244]	@ (34018174 <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34018080:	4293      	cmp	r3, r2
34018082:	d124      	bne.n	340180ce <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018084:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018086:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401808a:	d004      	beq.n	34018096 <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
3401808c:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34018090:	482d      	ldr	r0, [pc, #180]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018092:	f005 fc79 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018096:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018098:	3b01      	subs	r3, #1
3401809a:	2bff      	cmp	r3, #255	@ 0xff
3401809c:	d904      	bls.n	340180a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
3401809e:	f240 71b4 	movw	r1, #1972	@ 0x7b4
340180a2:	4829      	ldr	r0, [pc, #164]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340180a4:	f005 fc70 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340180a8:	4a28      	ldr	r2, [pc, #160]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340180aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340180ac:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340180b0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340180b2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340180b6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340180ba:	3901      	subs	r1, #1
340180bc:	4303      	orrs	r3, r0
340180be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340180c2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340180c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340180ca:	f7fe be55 	b.w	34016d78 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
340180ce:	4a2a      	ldr	r2, [pc, #168]	@ (34018178 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
340180d0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340180d2:	bf02      	ittt	eq
340180d4:	2240      	moveq	r2, #64	@ 0x40
340180d6:	4b1d      	ldreq	r3, [pc, #116]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340180d8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340180dc:	f7fe be4e 	b.w	34016d7c <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
340180e0:	4a26      	ldr	r2, [pc, #152]	@ (3401817c <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
340180e2:	4293      	cmp	r3, r2
340180e4:	d124      	bne.n	34018130 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340180e6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340180e8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340180ec:	d004      	beq.n	340180f8 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
340180ee:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
340180f2:	4815      	ldr	r0, [pc, #84]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340180f4:	f005 fc48 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340180f8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340180fa:	3b01      	subs	r3, #1
340180fc:	2bff      	cmp	r3, #255	@ 0xff
340180fe:	d904      	bls.n	3401810a <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34018100:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34018104:	4810      	ldr	r0, [pc, #64]	@ (34018148 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34018106:	f005 fc3f 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401810a:	4a10      	ldr	r2, [pc, #64]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401810c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401810e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018112:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018114:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018118:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401811c:	3901      	subs	r1, #1
3401811e:	4303      	orrs	r3, r0
34018120:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018124:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401812c:	f7fe be6c 	b.w	34016e08 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34018130:	4a13      	ldr	r2, [pc, #76]	@ (34018180 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
34018132:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018134:	bf02      	ittt	eq
34018136:	2240      	moveq	r2, #64	@ 0x40
34018138:	4b04      	ldreq	r3, [pc, #16]	@ (3401814c <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401813a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401813e:	f7fe be65 	b.w	34016e0c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
34018142:	bf00      	nop
34018144:	07031420 	.word	0x07031420
34018148:	34026b5b 	.word	0x34026b5b
3401814c:	56028000 	.word	0x56028000
34018150:	07011420 	.word	0x07011420
34018154:	07031820 	.word	0x07031820
34018158:	07011820 	.word	0x07011820
3401815c:	07030030 	.word	0x07030030
34018160:	07010030 	.word	0x07010030
34018164:	07030430 	.word	0x07030430
34018168:	07010430 	.word	0x07010430
3401816c:	07030830 	.word	0x07030830
34018170:	07010830 	.word	0x07010830
34018174:	07030c30 	.word	0x07030c30
34018178:	07010c30 	.word	0x07010c30
3401817c:	07031030 	.word	0x07031030
34018180:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34018184:	4a8b      	ldr	r2, [pc, #556]	@ (340183b4 <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
34018186:	4293      	cmp	r3, r2
34018188:	d124      	bne.n	340181d4 <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401818a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401818c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018190:	d004      	beq.n	3401819c <HAL_RCCEx_PeriphCLKConfig+0x2d80>
34018192:	f640 010d 	movw	r1, #2061	@ 0x80d
34018196:	4888      	ldr	r0, [pc, #544]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018198:	f005 fbf6 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401819c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401819e:	3b01      	subs	r3, #1
340181a0:	2bff      	cmp	r3, #255	@ 0xff
340181a2:	d904      	bls.n	340181ae <HAL_RCCEx_PeriphCLKConfig+0x2d92>
340181a4:	f640 010e 	movw	r1, #2062	@ 0x80e
340181a8:	4883      	ldr	r0, [pc, #524]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340181aa:	f005 fbed 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340181ae:	4a83      	ldr	r2, [pc, #524]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340181b0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340181b2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340181b6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340181b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340181bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340181c0:	3901      	subs	r1, #1
340181c2:	4303      	orrs	r3, r0
340181c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340181c8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340181cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340181d0:	f7fe be62 	b.w	34016e98 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
340181d4:	4a7a      	ldr	r2, [pc, #488]	@ (340183c0 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
340181d6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340181d8:	bf02      	ittt	eq
340181da:	2240      	moveq	r2, #64	@ 0x40
340181dc:	4b77      	ldreq	r3, [pc, #476]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340181de:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340181e2:	f7fe be5b 	b.w	34016e9c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
340181e6:	4a77      	ldr	r2, [pc, #476]	@ (340183c4 <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
340181e8:	4293      	cmp	r3, r2
340181ea:	d124      	bne.n	34018236 <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340181ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340181ee:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340181f2:	d004      	beq.n	340181fe <HAL_RCCEx_PeriphCLKConfig+0x2de2>
340181f4:	f640 013a 	movw	r1, #2106	@ 0x83a
340181f8:	486f      	ldr	r0, [pc, #444]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340181fa:	f005 fbc5 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340181fe:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018200:	3b01      	subs	r3, #1
34018202:	2bff      	cmp	r3, #255	@ 0xff
34018204:	d904      	bls.n	34018210 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
34018206:	f640 013b 	movw	r1, #2107	@ 0x83b
3401820a:	486b      	ldr	r0, [pc, #428]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3401820c:	f005 fbbc 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018210:	4a6a      	ldr	r2, [pc, #424]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018212:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34018214:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018218:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3401821a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401821e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018222:	3901      	subs	r1, #1
34018224:	4303      	orrs	r3, r0
34018226:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401822a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401822e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018232:	f7fe be79 	b.w	34016f28 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34018236:	4a64      	ldr	r2, [pc, #400]	@ (340183c8 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
34018238:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401823a:	bf02      	ittt	eq
3401823c:	2240      	moveq	r2, #64	@ 0x40
3401823e:	4b5f      	ldreq	r3, [pc, #380]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018240:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018244:	f7fe be72 	b.w	34016f2c <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34018248:	4a60      	ldr	r2, [pc, #384]	@ (340183cc <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
3401824a:	4293      	cmp	r3, r2
3401824c:	d124      	bne.n	34018298 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401824e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018250:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018254:	d004      	beq.n	34018260 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
34018256:	f640 0167 	movw	r1, #2151	@ 0x867
3401825a:	4857      	ldr	r0, [pc, #348]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3401825c:	f005 fb94 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018260:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018262:	3b01      	subs	r3, #1
34018264:	2bff      	cmp	r3, #255	@ 0xff
34018266:	d904      	bls.n	34018272 <HAL_RCCEx_PeriphCLKConfig+0x2e56>
34018268:	f640 0168 	movw	r1, #2152	@ 0x868
3401826c:	4852      	ldr	r0, [pc, #328]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
3401826e:	f005 fb8b 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018272:	4a52      	ldr	r2, [pc, #328]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018274:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34018276:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401827a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3401827c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018280:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018284:	3901      	subs	r1, #1
34018286:	4303      	orrs	r3, r0
34018288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401828c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018290:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018294:	f7fe beac 	b.w	34016ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34018298:	4a4d      	ldr	r2, [pc, #308]	@ (340183d0 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
3401829a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401829c:	bf02      	ittt	eq
3401829e:	2240      	moveq	r2, #64	@ 0x40
340182a0:	4b46      	ldreq	r3, [pc, #280]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340182a2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340182a6:	f7fe bea5 	b.w	34016ff4 <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
340182aa:	4a4a      	ldr	r2, [pc, #296]	@ (340183d4 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
340182ac:	4293      	cmp	r3, r2
340182ae:	d124      	bne.n	340182fa <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340182b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340182b2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340182b6:	d004      	beq.n	340182c2 <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
340182b8:	f640 0194 	movw	r1, #2196	@ 0x894
340182bc:	483e      	ldr	r0, [pc, #248]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340182be:	f005 fb63 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340182c2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340182c4:	3b01      	subs	r3, #1
340182c6:	2bff      	cmp	r3, #255	@ 0xff
340182c8:	d904      	bls.n	340182d4 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
340182ca:	f640 0195 	movw	r1, #2197	@ 0x895
340182ce:	483a      	ldr	r0, [pc, #232]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340182d0:	f005 fb5a 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340182d4:	4a39      	ldr	r2, [pc, #228]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340182d6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340182d8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340182dc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340182de:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340182e2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340182e6:	3901      	subs	r1, #1
340182e8:	4303      	orrs	r3, r0
340182ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340182ee:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340182f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340182f6:	f7fe bec3 	b.w	34017080 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
340182fa:	4a37      	ldr	r2, [pc, #220]	@ (340183d8 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
340182fc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340182fe:	bf02      	ittt	eq
34018300:	2240      	moveq	r2, #64	@ 0x40
34018302:	4b2e      	ldreq	r3, [pc, #184]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018304:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018308:	f7fe bebc 	b.w	34017084 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3401830c:	4a33      	ldr	r2, [pc, #204]	@ (340183dc <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
3401830e:	4293      	cmp	r3, r2
34018310:	d124      	bne.n	3401835c <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018312:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018314:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018318:	d004      	beq.n	34018324 <HAL_RCCEx_PeriphCLKConfig+0x2f08>
3401831a:	f640 01c1 	movw	r1, #2241	@ 0x8c1
3401831e:	4826      	ldr	r0, [pc, #152]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018320:	f005 fb32 	bl	3401d988 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018324:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018326:	3b01      	subs	r3, #1
34018328:	2bff      	cmp	r3, #255	@ 0xff
3401832a:	d904      	bls.n	34018336 <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
3401832c:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34018330:	4821      	ldr	r0, [pc, #132]	@ (340183b8 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34018332:	f005 fb29 	bl	3401d988 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018336:	4a21      	ldr	r2, [pc, #132]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018338:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401833a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401833e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018340:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018344:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018348:	3901      	subs	r1, #1
3401834a:	4303      	orrs	r3, r0
3401834c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018350:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018358:	f7fe beda 	b.w	34017110 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
3401835c:	4a20      	ldr	r2, [pc, #128]	@ (340183e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
3401835e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018360:	bf02      	ittt	eq
34018362:	2240      	moveq	r2, #64	@ 0x40
34018364:	4b15      	ldreq	r3, [pc, #84]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018366:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401836a:	f7fe bed3 	b.w	34017114 <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
3401836e:	f7fc ff39 	bl	340151e4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34018372:	f7fe bef5 	b.w	34017160 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34018376:	f7fc ff35 	bl	340151e4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
3401837a:	f7fe bf13 	b.w	340171a4 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
3401837e:	4a19      	ldr	r2, [pc, #100]	@ (340183e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34018380:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018382:	bf02      	ittt	eq
34018384:	2240      	moveq	r2, #64	@ 0x40
34018386:	4b0d      	ldreq	r3, [pc, #52]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34018388:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401838c:	f7fe bf4a 	b.w	34017224 <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34018390:	f7fc ff28 	bl	340151e4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34018394:	f7fe bf53 	b.w	3401723e <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34018398:	4a13      	ldr	r2, [pc, #76]	@ (340183e8 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
3401839a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401839c:	bf02      	ittt	eq
3401839e:	2240      	moveq	r2, #64	@ 0x40
340183a0:	4b06      	ldreq	r3, [pc, #24]	@ (340183bc <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340183a2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340183a6:	f7fe bfa5 	b.w	340172f4 <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
340183aa:	f7fc ff1b 	bl	340151e4 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340183ae:	f7fe bfae 	b.w	3401730e <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
340183b2:	bf00      	nop
340183b4:	07031430 	.word	0x07031430
340183b8:	34026b5b 	.word	0x34026b5b
340183bc:	56028000 	.word	0x56028000
340183c0:	07011430 	.word	0x07011430
340183c4:	07031830 	.word	0x07031830
340183c8:	07011830 	.word	0x07011830
340183cc:	07031c30 	.word	0x07031c30
340183d0:	07011c30 	.word	0x07011c30
340183d4:	07030034 	.word	0x07030034
340183d8:	07010034 	.word	0x07010034
340183dc:	07030434 	.word	0x07030434
340183e0:	07010434 	.word	0x07010434
340183e4:	03010c14 	.word	0x03010c14
340183e8:	03011414 	.word	0x03011414

340183ec <HAL_RCCEx_GetPLL1CLKFreq>:
{
340183ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
340183ee:	4c1e      	ldr	r4, [pc, #120]	@ (34018468 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
340183f0:	6863      	ldr	r3, [r4, #4]
340183f2:	05d9      	lsls	r1, r3, #23
340183f4:	d506      	bpl.n	34018404 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
340183f6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
340183fa:	005a      	lsls	r2, r3, #1
340183fc:	d40f      	bmi.n	3401841e <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340183fe:	2000      	movs	r0, #0
}
34018400:	b003      	add	sp, #12
34018402:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34018404:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34018408:	011b      	lsls	r3, r3, #4
3401840a:	d5f8      	bpl.n	340183fe <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
3401840c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34018410:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34018414:	b003      	add	sp, #12
34018416:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3401841a:	f7fc bf9d 	b.w	34015358 <RCCEx_GetPLLSourceFreq>
3401841e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34018422:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34018426:	f7fc ff97 	bl	34015358 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401842a:	2800      	cmp	r0, #0
3401842c:	d0e7      	beq.n	340183fe <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3401842e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
34018432:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34018436:	f3c3 5105 	ubfx	r1, r3, #20, #6
3401843a:	d0e0      	beq.n	340183fe <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3401843c:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34018440:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34018444:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34018448:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3401844c:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34018450:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34018454:	9401      	str	r4, [sp, #4]
34018456:	9500      	str	r5, [sp, #0]
34018458:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3401845c:	f3c2 220b 	ubfx	r2, r2, #8, #12
34018460:	f7fc ffb0 	bl	340153c4 <RCCEx_CalcPLLFreq>
34018464:	e7cc      	b.n	34018400 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
34018466:	bf00      	nop
34018468:	56028000 	.word	0x56028000

3401846c <HAL_RCCEx_GetPLL2CLKFreq>:
{
3401846c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3401846e:	4c1e      	ldr	r4, [pc, #120]	@ (340184e8 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
34018470:	6863      	ldr	r3, [r4, #4]
34018472:	0599      	lsls	r1, r3, #22
34018474:	d506      	bpl.n	34018484 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34018476:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3401847a:	005a      	lsls	r2, r3, #1
3401847c:	d40f      	bmi.n	3401849e <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3401847e:	2000      	movs	r0, #0
}
34018480:	b003      	add	sp, #12
34018482:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34018484:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34018488:	011b      	lsls	r3, r3, #4
3401848a:	d5f8      	bpl.n	3401847e <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3401848c:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34018490:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34018494:	b003      	add	sp, #12
34018496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3401849a:	f7fc bf5d 	b.w	34015358 <RCCEx_GetPLLSourceFreq>
3401849e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340184a2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340184a6:	f7fc ff57 	bl	34015358 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340184aa:	2800      	cmp	r0, #0
340184ac:	d0e7      	beq.n	3401847e <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
340184ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
340184b2:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340184b6:	f3c3 5105 	ubfx	r1, r3, #20, #6
340184ba:	d0e0      	beq.n	3401847e <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
340184bc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
340184c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340184c4:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340184c8:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
340184cc:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
340184d0:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
340184d4:	9401      	str	r4, [sp, #4]
340184d6:	9500      	str	r5, [sp, #0]
340184d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340184dc:	f3c2 220b 	ubfx	r2, r2, #8, #12
340184e0:	f7fc ff70 	bl	340153c4 <RCCEx_CalcPLLFreq>
340184e4:	e7cc      	b.n	34018480 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
340184e6:	bf00      	nop
340184e8:	56028000 	.word	0x56028000

340184ec <HAL_RCCEx_GetPLL3CLKFreq>:
{
340184ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340184ee:	4c1e      	ldr	r4, [pc, #120]	@ (34018568 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
340184f0:	6863      	ldr	r3, [r4, #4]
340184f2:	0559      	lsls	r1, r3, #21
340184f4:	d506      	bpl.n	34018504 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
340184f6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
340184fa:	005a      	lsls	r2, r3, #1
340184fc:	d40f      	bmi.n	3401851e <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340184fe:	2000      	movs	r0, #0
}
34018500:	b003      	add	sp, #12
34018502:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34018504:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34018508:	011b      	lsls	r3, r3, #4
3401850a:	d5f8      	bpl.n	340184fe <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3401850c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34018510:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34018514:	b003      	add	sp, #12
34018516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3401851a:	f7fc bf1d 	b.w	34015358 <RCCEx_GetPLLSourceFreq>
3401851e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34018522:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34018526:	f7fc ff17 	bl	34015358 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3401852a:	2800      	cmp	r0, #0
3401852c:	d0e7      	beq.n	340184fe <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3401852e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
34018532:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34018536:	f3c3 5105 	ubfx	r1, r3, #20, #6
3401853a:	d0e0      	beq.n	340184fe <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
3401853c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34018540:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34018544:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34018548:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
3401854c:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34018550:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34018554:	9401      	str	r4, [sp, #4]
34018556:	9500      	str	r5, [sp, #0]
34018558:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3401855c:	f3c2 220b 	ubfx	r2, r2, #8, #12
34018560:	f7fc ff30 	bl	340153c4 <RCCEx_CalcPLLFreq>
34018564:	e7cc      	b.n	34018500 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
34018566:	bf00      	nop
34018568:	56028000 	.word	0x56028000

3401856c <HAL_RCCEx_GetPLL4CLKFreq>:
{
3401856c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3401856e:	4c1e      	ldr	r4, [pc, #120]	@ (340185e8 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
34018570:	6863      	ldr	r3, [r4, #4]
34018572:	0519      	lsls	r1, r3, #20
34018574:	d506      	bpl.n	34018584 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34018576:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3401857a:	005a      	lsls	r2, r3, #1
3401857c:	d40f      	bmi.n	3401859e <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3401857e:	2000      	movs	r0, #0
}
34018580:	b003      	add	sp, #12
34018582:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34018584:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34018588:	011b      	lsls	r3, r3, #4
3401858a:	d5f8      	bpl.n	3401857e <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
3401858c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34018590:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34018594:	b003      	add	sp, #12
34018596:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3401859a:	f7fc bedd 	b.w	34015358 <RCCEx_GetPLLSourceFreq>
3401859e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340185a2:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340185a6:	f7fc fed7 	bl	34015358 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340185aa:	2800      	cmp	r0, #0
340185ac:	d0e7      	beq.n	3401857e <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
340185ae:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
340185b2:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340185b6:	f3c3 5105 	ubfx	r1, r3, #20, #6
340185ba:	d0e0      	beq.n	3401857e <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
340185bc:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
340185c0:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340185c4:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340185c8:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
340185cc:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
340185d0:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
340185d4:	9401      	str	r4, [sp, #4]
340185d6:	9500      	str	r5, [sp, #0]
340185d8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340185dc:	f3c2 220b 	ubfx	r2, r2, #8, #12
340185e0:	f7fc fef0 	bl	340153c4 <RCCEx_CalcPLLFreq>
340185e4:	e7cc      	b.n	34018580 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
340185e6:	bf00      	nop
340185e8:	56028000 	.word	0x56028000

340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
340185ec:	4b3e      	ldr	r3, [pc, #248]	@ (340186e8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
340185ee:	b510      	push	{r4, lr}
340185f0:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
340185f4:	0652      	lsls	r2, r2, #25
340185f6:	d56b      	bpl.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
340185f8:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340185fc:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34018600:	3a01      	subs	r2, #1
34018602:	2a06      	cmp	r2, #6
34018604:	d805      	bhi.n	34018612 <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
34018606:	e8df f002 	tbb	[pc, r2]
3401860a:	150f      	.short	0x150f
3401860c:	3e321b48 	.word	0x3e321b48
34018610:	54          	.byte	0x54
34018611:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34018612:	f7fc fe07 	bl	34015224 <LL_RCC_HSI_IsReady>
34018616:	2800      	cmp	r0, #0
34018618:	d05a      	beq.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401861a:	4b33      	ldr	r3, [pc, #204]	@ (340186e8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401861c:	4833      	ldr	r0, [pc, #204]	@ (340186ec <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
3401861e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018620:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018624:	40d8      	lsrs	r0, r3
34018626:	e054      	b.n	340186d2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34018628:	f7fc fe04 	bl	34015234 <LL_RCC_MSI_IsReady>
3401862c:	2800      	cmp	r0, #0
3401862e:	d04f      	beq.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
34018630:	482f      	ldr	r0, [pc, #188]	@ (340186f0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
34018632:	e04e      	b.n	340186d2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34018634:	f7fc fdee 	bl	34015214 <LL_RCC_HSE_IsReady>
34018638:	2800      	cmp	r0, #0
3401863a:	d049      	beq.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
3401863c:	482d      	ldr	r0, [pc, #180]	@ (340186f4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
3401863e:	e048      	b.n	340186d2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34018640:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34018644:	06d4      	lsls	r4, r2, #27
34018646:	d543      	bpl.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34018648:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3401864c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34018650:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018654:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34018656:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
3401865a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401865e:	d03c      	beq.n	340186da <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
34018660:	d833      	bhi.n	340186ca <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
34018662:	bbbb      	cbnz	r3, 340186d4 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018664:	f7ff fec2 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
34018668:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
3401866c:	e031      	b.n	340186d2 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3401866e:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34018672:	0590      	lsls	r0, r2, #22
34018674:	d52c      	bpl.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34018676:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3401867a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401867e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34018682:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34018684:	e7e7      	b.n	34018656 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
34018686:	f7fc fe4d 	bl	34015324 <LL_RCC_IC15_IsEnabled>
3401868a:	b308      	cbz	r0, 340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
3401868c:	f7fc fe52 	bl	34015334 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34018690:	4b15      	ldr	r3, [pc, #84]	@ (340186e8 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
34018692:	4604      	mov	r4, r0
34018694:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34018698:	e7dd      	b.n	34018656 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3401869a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401869e:	0351      	lsls	r1, r2, #13
340186a0:	d516      	bpl.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340186a2:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340186a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340186aa:	f3c0 4007 	ubfx	r0, r0, #16, #8
340186ae:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340186b0:	e7d1      	b.n	34018656 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
340186b2:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340186b6:	0312      	lsls	r2, r2, #12
340186b8:	d50a      	bpl.n	340186d0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340186ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340186be:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
340186c2:	f3c0 4007 	ubfx	r0, r0, #16, #8
340186c6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340186c8:	e7c5      	b.n	34018656 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
340186ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340186ce:	d007      	beq.n	340186e0 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
340186d0:	2000      	movs	r0, #0
}
340186d2:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340186d4:	f7ff feca 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
340186d8:	e7c6      	b.n	34018668 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340186da:	f7ff ff07 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
340186de:	e7c3      	b.n	34018668 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340186e0:	f7ff ff44 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
340186e4:	e7c0      	b.n	34018668 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
340186e6:	bf00      	nop
340186e8:	56028000 	.word	0x56028000
340186ec:	03d09000 	.word	0x03d09000
340186f0:	003d0900 	.word	0x003d0900
340186f4:	02dc6c00 	.word	0x02dc6c00

340186f8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
340186f8:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
340186fa:	4d2b      	ldr	r5, [pc, #172]	@ (340187a8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
340186fc:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
34018700:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34018704:	2b06      	cmp	r3, #6
34018706:	d835      	bhi.n	34018774 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34018708:	e8df f003 	tbb	[pc, r3]
3401870c:	28110d04 	.word	0x28110d04
34018710:	3c45      	.short	0x3c45
34018712:	4b          	.byte	0x4b
34018713:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018714:	f7fc fd0c 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018718:	f7fc fe16 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401871c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3401871e:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018722:	40d8      	lsrs	r0, r3
34018724:	e027      	b.n	34018776 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34018726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401872a:	f7ff bf5f 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401872e:	f7fc fdb1 	bl	34015294 <LL_RCC_IC7_IsEnabled>
34018732:	b1f8      	cbz	r0, 34018774 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34018734:	f7fc fdb6 	bl	340152a4 <LL_RCC_IC7_GetDivider>
34018738:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3401873a:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401873e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34018742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018746:	d017      	beq.n	34018778 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34018748:	d811      	bhi.n	3401876e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
3401874a:	b913      	cbnz	r3, 34018752 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401874c:	f7ff fe4e 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
34018750:	e001      	b.n	34018756 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018752:	f7ff fe8b 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34018756:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401875a:	e00c      	b.n	34018776 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401875c:	f7fc fdac 	bl	340152b8 <LL_RCC_IC8_IsEnabled>
34018760:	b140      	cbz	r0, 34018774 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
34018762:	f7fc fdb1 	bl	340152c8 <LL_RCC_IC8_GetDivider>
34018766:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3401876a:	4604      	mov	r4, r0
3401876c:	e7e7      	b.n	3401873e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
3401876e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018772:	d004      	beq.n	3401877e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34018774:	2000      	movs	r0, #0
}
34018776:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018778:	f7ff feb8 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
3401877c:	e7eb      	b.n	34018756 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401877e:	f7ff fef5 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34018782:	e7e8      	b.n	34018756 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
34018784:	f7fc fd4e 	bl	34015224 <LL_RCC_HSI_IsReady>
34018788:	2800      	cmp	r0, #0
3401878a:	d0f3      	beq.n	34018774 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401878c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401878e:	4807      	ldr	r0, [pc, #28]	@ (340187ac <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
34018790:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018794:	e7c5      	b.n	34018722 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
34018796:	f7fc fd4d 	bl	34015234 <LL_RCC_MSI_IsReady>
3401879a:	2800      	cmp	r0, #0
3401879c:	d0ea      	beq.n	34018774 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
3401879e:	4804      	ldr	r0, [pc, #16]	@ (340187b0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
340187a0:	e7e9      	b.n	34018776 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
340187a2:	4804      	ldr	r0, [pc, #16]	@ (340187b4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
340187a4:	e7e7      	b.n	34018776 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
340187a6:	bf00      	nop
340187a8:	56028000 	.word	0x56028000
340187ac:	03d09000 	.word	0x03d09000
340187b0:	003d0900 	.word	0x003d0900
340187b4:	00bb8000 	.word	0x00bb8000

340187b8 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
340187b8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340187ba:	f7fc fd5d 	bl	34015278 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340187be:	4b36      	ldr	r3, [pc, #216]	@ (34018898 <RCCEx_GetXSPICLKFreq+0xe0>)
340187c0:	4298      	cmp	r0, r3
340187c2:	d028      	beq.n	34018816 <RCCEx_GetXSPICLKFreq+0x5e>
340187c4:	d81b      	bhi.n	340187fe <RCCEx_GetXSPICLKFreq+0x46>
340187c6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340187ca:	4298      	cmp	r0, r3
340187cc:	d013      	beq.n	340187f6 <RCCEx_GetXSPICLKFreq+0x3e>
340187ce:	d80b      	bhi.n	340187e8 <RCCEx_GetXSPICLKFreq+0x30>
340187d0:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
340187d4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340187d8:	429a      	cmp	r2, r3
340187da:	d04a      	beq.n	34018872 <RCCEx_GetXSPICLKFreq+0xba>
340187dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340187e0:	4298      	cmp	r0, r3
340187e2:	d046      	beq.n	34018872 <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
340187e4:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
340187e6:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340187e8:	4b2c      	ldr	r3, [pc, #176]	@ (3401889c <RCCEx_GetXSPICLKFreq+0xe4>)
340187ea:	4298      	cmp	r0, r3
340187ec:	d003      	beq.n	340187f6 <RCCEx_GetXSPICLKFreq+0x3e>
340187ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340187f2:	4298      	cmp	r0, r3
340187f4:	d1f6      	bne.n	340187e4 <RCCEx_GetXSPICLKFreq+0x2c>
}
340187f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340187fa:	f7ff bef7 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
340187fe:	4b28      	ldr	r3, [pc, #160]	@ (340188a0 <RCCEx_GetXSPICLKFreq+0xe8>)
34018800:	4298      	cmp	r0, r3
34018802:	d028      	beq.n	34018856 <RCCEx_GetXSPICLKFreq+0x9e>
34018804:	d820      	bhi.n	34018848 <RCCEx_GetXSPICLKFreq+0x90>
34018806:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3401880a:	4298      	cmp	r0, r3
3401880c:	d003      	beq.n	34018816 <RCCEx_GetXSPICLKFreq+0x5e>
3401880e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018812:	4298      	cmp	r0, r3
34018814:	d1e6      	bne.n	340187e4 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34018816:	4b23      	ldr	r3, [pc, #140]	@ (340188a4 <RCCEx_GetXSPICLKFreq+0xec>)
34018818:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3401881c:	f010 0004 	ands.w	r0, r0, #4
34018820:	d0e1      	beq.n	340187e6 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34018822:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34018826:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3401882a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401882e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34018830:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34018834:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018838:	d02a      	beq.n	34018890 <RCCEx_GetXSPICLKFreq+0xd8>
3401883a:	d820      	bhi.n	3401887e <RCCEx_GetXSPICLKFreq+0xc6>
3401883c:	bb2b      	cbnz	r3, 3401888a <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401883e:	f7ff fdd5 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
34018842:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
34018846:	e7ce      	b.n	340187e6 <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34018848:	4b17      	ldr	r3, [pc, #92]	@ (340188a8 <RCCEx_GetXSPICLKFreq+0xf0>)
3401884a:	4298      	cmp	r0, r3
3401884c:	d003      	beq.n	34018856 <RCCEx_GetXSPICLKFreq+0x9e>
3401884e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018852:	4298      	cmp	r0, r3
34018854:	d1c6      	bne.n	340187e4 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34018856:	4b13      	ldr	r3, [pc, #76]	@ (340188a4 <RCCEx_GetXSPICLKFreq+0xec>)
34018858:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3401885c:	f010 0008 	ands.w	r0, r0, #8
34018860:	d0c1      	beq.n	340187e6 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34018862:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34018866:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401886a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401886e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34018870:	e7de      	b.n	34018830 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34018872:	f7fc fc5d 	bl	34015130 <HAL_RCC_GetSysClockFreq>
}
34018876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401887a:	f7fc bd65 	b.w	34015348 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
3401887e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018882:	d1af      	bne.n	340187e4 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018884:	f7ff fe72 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34018888:	e7db      	b.n	34018842 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401888a:	f7ff fdef 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
3401888e:	e7d8      	b.n	34018842 <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018890:	f7ff fe2c 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34018894:	e7d5      	b.n	34018842 <RCCEx_GetXSPICLKFreq+0x8a>
34018896:	bf00      	nop
34018898:	03020014 	.word	0x03020014
3401889c:	03010414 	.word	0x03010414
340188a0:	03030014 	.word	0x03030014
340188a4:	56028000 	.word	0x56028000
340188a8:	03030414 	.word	0x03030414

340188ac <RCCEx_GetOTGPHYCLKFreq>:
{
340188ac:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340188ae:	f7fc fce3 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340188b2:	4b2b      	ldr	r3, [pc, #172]	@ (34018960 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
340188b4:	4298      	cmp	r0, r3
340188b6:	d021      	beq.n	340188fc <RCCEx_GetOTGPHYCLKFreq+0x50>
340188b8:	d815      	bhi.n	340188e6 <RCCEx_GetOTGPHYCLKFreq+0x3a>
340188ba:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340188be:	4298      	cmp	r0, r3
340188c0:	d00d      	beq.n	340188de <RCCEx_GetOTGPHYCLKFreq+0x32>
340188c2:	d809      	bhi.n	340188d8 <RCCEx_GetOTGPHYCLKFreq+0x2c>
340188c4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340188c8:	4298      	cmp	r0, r3
340188ca:	d02d      	beq.n	34018928 <RCCEx_GetOTGPHYCLKFreq+0x7c>
340188cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340188d0:	4298      	cmp	r0, r3
340188d2:	d029      	beq.n	34018928 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
340188d4:	2000      	movs	r0, #0
}
340188d6:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340188d8:	4b22      	ldr	r3, [pc, #136]	@ (34018964 <RCCEx_GetOTGPHYCLKFreq+0xb8>)
340188da:	4298      	cmp	r0, r3
340188dc:	d1fa      	bne.n	340188d4 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
340188de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340188e2:	f7ff be83 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
340188e6:	4b20      	ldr	r3, [pc, #128]	@ (34018968 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
340188e8:	4298      	cmp	r0, r3
340188ea:	d023      	beq.n	34018934 <RCCEx_GetOTGPHYCLKFreq+0x88>
340188ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
340188f0:	4298      	cmp	r0, r3
340188f2:	d01f      	beq.n	34018934 <RCCEx_GetOTGPHYCLKFreq+0x88>
340188f4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340188f8:	4298      	cmp	r0, r3
340188fa:	d1eb      	bne.n	340188d4 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340188fc:	f7fc fd12 	bl	34015324 <LL_RCC_IC15_IsEnabled>
34018900:	2800      	cmp	r0, #0
34018902:	d0e7      	beq.n	340188d4 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34018904:	f7fc fd16 	bl	34015334 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34018908:	4b18      	ldr	r3, [pc, #96]	@ (3401896c <RCCEx_GetOTGPHYCLKFreq+0xc0>)
3401890a:	4604      	mov	r4, r0
3401890c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34018910:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34018914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018918:	d01f      	beq.n	3401895a <RCCEx_GetOTGPHYCLKFreq+0xae>
3401891a:	d815      	bhi.n	34018948 <RCCEx_GetOTGPHYCLKFreq+0x9c>
3401891c:	b9d3      	cbnz	r3, 34018954 <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401891e:	f7ff fd65 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
34018922:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018926:	e7d6      	b.n	340188d6 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34018928:	f7fc fc74 	bl	34015214 <LL_RCC_HSE_IsReady>
3401892c:	2800      	cmp	r0, #0
3401892e:	d0d1      	beq.n	340188d4 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34018930:	480f      	ldr	r0, [pc, #60]	@ (34018970 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34018932:	e7d0      	b.n	340188d6 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34018934:	f7fc fc6e 	bl	34015214 <LL_RCC_HSE_IsReady>
34018938:	2800      	cmp	r0, #0
3401893a:	d0cb      	beq.n	340188d4 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3401893c:	f7fc fc62 	bl	34015204 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34018940:	2800      	cmp	r0, #0
34018942:	d1f5      	bne.n	34018930 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34018944:	480b      	ldr	r0, [pc, #44]	@ (34018974 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
34018946:	e7c6      	b.n	340188d6 <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34018948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401894c:	d1c2      	bne.n	340188d4 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401894e:	f7ff fe0d 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34018952:	e7e6      	b.n	34018922 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018954:	f7ff fd8a 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
34018958:	e7e3      	b.n	34018922 <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401895a:	f7ff fdc7 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
3401895e:	e7e0      	b.n	34018922 <RCCEx_GetOTGPHYCLKFreq+0x76>
34018960:	03020c14 	.word	0x03020c14
34018964:	03011414 	.word	0x03011414
34018968:	03030c14 	.word	0x03030c14
3401896c:	56028000 	.word	0x56028000
34018970:	016e3600 	.word	0x016e3600
34018974:	02dc6c00 	.word	0x02dc6c00

34018978 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
34018978:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
3401897a:	f7fc fc7d 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3401897e:	4b11      	ldr	r3, [pc, #68]	@ (340189c4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34018980:	4298      	cmp	r0, r3
34018982:	d01c      	beq.n	340189be <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
34018984:	d805      	bhi.n	34018992 <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
34018986:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401898a:	4298      	cmp	r0, r3
3401898c:	d012      	beq.n	340189b4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3401898e:	2000      	movs	r0, #0
}
34018990:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34018992:	4b0d      	ldr	r3, [pc, #52]	@ (340189c8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
34018994:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34018998:	4298      	cmp	r0, r3
3401899a:	d1f8      	bne.n	3401898e <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
3401899c:	f7fc fc3a 	bl	34015214 <LL_RCC_HSE_IsReady>
340189a0:	2800      	cmp	r0, #0
340189a2:	d0f4      	beq.n	3401898e <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
340189a4:	f7fc fc2e 	bl	34015204 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
340189a8:	4b08      	ldr	r3, [pc, #32]	@ (340189cc <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
340189aa:	2800      	cmp	r0, #0
340189ac:	4808      	ldr	r0, [pc, #32]	@ (340189d0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
340189ae:	bf08      	it	eq
340189b0:	4618      	moveq	r0, r3
340189b2:	e7ed      	b.n	34018990 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340189b4:	4807      	ldr	r0, [pc, #28]	@ (340189d4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
340189b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340189ba:	f7ff bf77 	b.w	340188ac <RCCEx_GetOTGPHYCLKFreq>
340189be:	4806      	ldr	r0, [pc, #24]	@ (340189d8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
340189c0:	e7f9      	b.n	340189b6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
340189c2:	bf00      	nop
340189c4:	01001814 	.word	0x01001814
340189c8:	01011014 	.word	0x01011014
340189cc:	02dc6c00 	.word	0x02dc6c00
340189d0:	016e3600 	.word	0x016e3600
340189d4:	03000c14 	.word	0x03000c14
340189d8:	03001414 	.word	0x03001414

340189dc <RCCEx_GetUSARTCLKFreq>:
{
340189dc:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340189de:	f7fc fc4b 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
340189e2:	4b6f      	ldr	r3, [pc, #444]	@ (34018ba0 <RCCEx_GetUSARTCLKFreq+0x1c4>)
340189e4:	4298      	cmp	r0, r3
340189e6:	d039      	beq.n	34018a5c <RCCEx_GetUSARTCLKFreq+0x80>
340189e8:	d852      	bhi.n	34018a90 <RCCEx_GetUSARTCLKFreq+0xb4>
340189ea:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
340189ee:	4298      	cmp	r0, r3
340189f0:	f000 80b5 	beq.w	34018b5e <RCCEx_GetUSARTCLKFreq+0x182>
340189f4:	d813      	bhi.n	34018a1e <RCCEx_GetUSARTCLKFreq+0x42>
340189f6:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
340189fa:	4298      	cmp	r0, r3
340189fc:	f000 80af 	beq.w	34018b5e <RCCEx_GetUSARTCLKFreq+0x182>
34018a00:	d80b      	bhi.n	34018a1a <RCCEx_GetUSARTCLKFreq+0x3e>
34018a02:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34018a06:	4298      	cmp	r0, r3
34018a08:	f000 80a9 	beq.w	34018b5e <RCCEx_GetUSARTCLKFreq+0x182>
34018a0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018a10:	4298      	cmp	r0, r3
34018a12:	f000 80ae 	beq.w	34018b72 <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34018a16:	2000      	movs	r0, #0
}
34018a18:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018a1a:	4b62      	ldr	r3, [pc, #392]	@ (34018ba4 <RCCEx_GetUSARTCLKFreq+0x1c8>)
34018a1c:	e7f8      	b.n	34018a10 <RCCEx_GetUSARTCLKFreq+0x34>
34018a1e:	4b62      	ldr	r3, [pc, #392]	@ (34018ba8 <RCCEx_GetUSARTCLKFreq+0x1cc>)
34018a20:	4298      	cmp	r0, r3
34018a22:	d00c      	beq.n	34018a3e <RCCEx_GetUSARTCLKFreq+0x62>
34018a24:	d80f      	bhi.n	34018a46 <RCCEx_GetUSARTCLKFreq+0x6a>
34018a26:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34018a2a:	4298      	cmp	r0, r3
34018a2c:	d007      	beq.n	34018a3e <RCCEx_GetUSARTCLKFreq+0x62>
34018a2e:	bf8e      	itee	hi
34018a30:	4b5e      	ldrhi	r3, [pc, #376]	@ (34018bac <RCCEx_GetUSARTCLKFreq+0x1d0>)
34018a32:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34018a36:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34018a3a:	4298      	cmp	r0, r3
34018a3c:	d1eb      	bne.n	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
}
34018a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018a42:	f7ff bdd3 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018a46:	4b5a      	ldr	r3, [pc, #360]	@ (34018bb0 <RCCEx_GetUSARTCLKFreq+0x1d4>)
34018a48:	4298      	cmp	r0, r3
34018a4a:	d007      	beq.n	34018a5c <RCCEx_GetUSARTCLKFreq+0x80>
34018a4c:	bf8e      	itee	hi
34018a4e:	4b59      	ldrhi	r3, [pc, #356]	@ (34018bb4 <RCCEx_GetUSARTCLKFreq+0x1d8>)
34018a50:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34018a54:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34018a58:	4298      	cmp	r0, r3
34018a5a:	d1dc      	bne.n	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34018a5c:	f7fc fc3e 	bl	340152dc <LL_RCC_IC9_IsEnabled>
34018a60:	2800      	cmp	r0, #0
34018a62:	d0d8      	beq.n	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34018a64:	f7fc fc42 	bl	340152ec <LL_RCC_IC9_GetDivider>
34018a68:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34018a6a:	4b53      	ldr	r3, [pc, #332]	@ (34018bb8 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018a6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34018a70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34018a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018a78:	f000 808e 	beq.w	34018b98 <RCCEx_GetUSARTCLKFreq+0x1bc>
34018a7c:	f200 8082 	bhi.w	34018b84 <RCCEx_GetUSARTCLKFreq+0x1a8>
34018a80:	2b00      	cmp	r3, #0
34018a82:	f040 8086 	bne.w	34018b92 <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018a86:	f7ff fcb1 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
34018a8a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018a8e:	e7c3      	b.n	34018a18 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018a90:	4b4a      	ldr	r3, [pc, #296]	@ (34018bbc <RCCEx_GetUSARTCLKFreq+0x1e0>)
34018a92:	4298      	cmp	r0, r3
34018a94:	d045      	beq.n	34018b22 <RCCEx_GetUSARTCLKFreq+0x146>
34018a96:	d833      	bhi.n	34018b00 <RCCEx_GetUSARTCLKFreq+0x124>
34018a98:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018a9c:	4298      	cmp	r0, r3
34018a9e:	d028      	beq.n	34018af2 <RCCEx_GetUSARTCLKFreq+0x116>
34018aa0:	d81c      	bhi.n	34018adc <RCCEx_GetUSARTCLKFreq+0x100>
34018aa2:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
34018aa6:	3bfc      	subs	r3, #252	@ 0xfc
34018aa8:	4298      	cmp	r0, r3
34018aaa:	d006      	beq.n	34018aba <RCCEx_GetUSARTCLKFreq+0xde>
34018aac:	d810      	bhi.n	34018ad0 <RCCEx_GetUSARTCLKFreq+0xf4>
34018aae:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34018ab2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34018ab6:	4298      	cmp	r0, r3
34018ab8:	d1ad      	bne.n	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34018aba:	f7fc fc21 	bl	34015300 <LL_RCC_IC14_IsEnabled>
34018abe:	2800      	cmp	r0, #0
34018ac0:	d0a9      	beq.n	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34018ac2:	f7fc fc25 	bl	34015310 <LL_RCC_IC14_GetDivider>
34018ac6:	4b3c      	ldr	r3, [pc, #240]	@ (34018bb8 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018ac8:	4604      	mov	r4, r0
34018aca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34018ace:	e7cf      	b.n	34018a70 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018ad0:	4b3b      	ldr	r3, [pc, #236]	@ (34018bc0 <RCCEx_GetUSARTCLKFreq+0x1e4>)
34018ad2:	4298      	cmp	r0, r3
34018ad4:	d0f1      	beq.n	34018aba <RCCEx_GetUSARTCLKFreq+0xde>
34018ad6:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34018ada:	e7ec      	b.n	34018ab6 <RCCEx_GetUSARTCLKFreq+0xda>
34018adc:	4b39      	ldr	r3, [pc, #228]	@ (34018bc4 <RCCEx_GetUSARTCLKFreq+0x1e8>)
34018ade:	4298      	cmp	r0, r3
34018ae0:	d007      	beq.n	34018af2 <RCCEx_GetUSARTCLKFreq+0x116>
34018ae2:	bf8e      	itee	hi
34018ae4:	4b38      	ldrhi	r3, [pc, #224]	@ (34018bc8 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34018ae6:	f020 0004 	bicls.w	r0, r0, #4
34018aea:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34018aee:	4298      	cmp	r0, r3
34018af0:	d191      	bne.n	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
34018af2:	f7fc fba7 	bl	34015244 <LL_RCC_LSE_IsReady>
34018af6:	3800      	subs	r0, #0
34018af8:	bf18      	it	ne
34018afa:	2001      	movne	r0, #1
34018afc:	03c0      	lsls	r0, r0, #15
34018afe:	e78b      	b.n	34018a18 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018b00:	4b32      	ldr	r3, [pc, #200]	@ (34018bcc <RCCEx_GetUSARTCLKFreq+0x1f0>)
34018b02:	4298      	cmp	r0, r3
34018b04:	d020      	beq.n	34018b48 <RCCEx_GetUSARTCLKFreq+0x16c>
34018b06:	d813      	bhi.n	34018b30 <RCCEx_GetUSARTCLKFreq+0x154>
34018b08:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34018b0c:	4298      	cmp	r0, r3
34018b0e:	d008      	beq.n	34018b22 <RCCEx_GetUSARTCLKFreq+0x146>
34018b10:	bf8e      	itee	hi
34018b12:	4b2f      	ldrhi	r3, [pc, #188]	@ (34018bd0 <RCCEx_GetUSARTCLKFreq+0x1f4>)
34018b14:	f020 0004 	bicls.w	r0, r0, #4
34018b18:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34018b1c:	4298      	cmp	r0, r3
34018b1e:	f47f af7a 	bne.w	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34018b22:	f7fc fb87 	bl	34015234 <LL_RCC_MSI_IsReady>
34018b26:	2800      	cmp	r0, #0
34018b28:	f43f af75 	beq.w	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34018b2c:	4829      	ldr	r0, [pc, #164]	@ (34018bd4 <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
34018b2e:	e773      	b.n	34018a18 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34018b30:	4b29      	ldr	r3, [pc, #164]	@ (34018bd8 <RCCEx_GetUSARTCLKFreq+0x1fc>)
34018b32:	4298      	cmp	r0, r3
34018b34:	d008      	beq.n	34018b48 <RCCEx_GetUSARTCLKFreq+0x16c>
34018b36:	bf8e      	itee	hi
34018b38:	4b28      	ldrhi	r3, [pc, #160]	@ (34018bdc <RCCEx_GetUSARTCLKFreq+0x200>)
34018b3a:	f020 0004 	bicls.w	r0, r0, #4
34018b3e:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34018b42:	4298      	cmp	r0, r3
34018b44:	f47f af67 	bne.w	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34018b48:	f7fc fb6c 	bl	34015224 <LL_RCC_HSI_IsReady>
34018b4c:	2800      	cmp	r0, #0
34018b4e:	f43f af62 	beq.w	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34018b52:	4b19      	ldr	r3, [pc, #100]	@ (34018bb8 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018b54:	4822      	ldr	r0, [pc, #136]	@ (34018be0 <RCCEx_GetUSARTCLKFreq+0x204>)
34018b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018b58:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018b5c:	e007      	b.n	34018b6e <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018b5e:	f7fc fae7 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018b62:	f7fc fbf1 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34018b66:	4b14      	ldr	r3, [pc, #80]	@ (34018bb8 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34018b6a:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018b6e:	40d8      	lsrs	r0, r3
34018b70:	e752      	b.n	34018a18 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018b72:	f7fc fadd 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018b76:	f7fc fbe7 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34018b7a:	4b0f      	ldr	r3, [pc, #60]	@ (34018bb8 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34018b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018b7e:	f003 0307 	and.w	r3, r3, #7
34018b82:	e7f4      	b.n	34018b6e <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34018b84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018b88:	f47f af45 	bne.w	34018a16 <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018b8c:	f7ff fcee 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34018b90:	e77b      	b.n	34018a8a <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018b92:	f7ff fc6b 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
34018b96:	e778      	b.n	34018a8a <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018b98:	f7ff fca8 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34018b9c:	e775      	b.n	34018a8a <RCCEx_GetUSARTCLKFreq+0xae>
34018b9e:	bf00      	nop
34018ba0:	07021430 	.word	0x07021430
34018ba4:	07000830 	.word	0x07000830
34018ba8:	07011430 	.word	0x07011430
34018bac:	07010830 	.word	0x07010830
34018bb0:	07020434 	.word	0x07020434
34018bb4:	07020830 	.word	0x07020830
34018bb8:	56028000 	.word	0x56028000
34018bbc:	07050030 	.word	0x07050030
34018bc0:	07030830 	.word	0x07030830
34018bc4:	07040830 	.word	0x07040830
34018bc8:	07041430 	.word	0x07041430
34018bcc:	07060030 	.word	0x07060030
34018bd0:	07051430 	.word	0x07051430
34018bd4:	003d0900 	.word	0x003d0900
34018bd8:	07060830 	.word	0x07060830
34018bdc:	07061430 	.word	0x07061430
34018be0:	03d09000 	.word	0x03d09000

34018be4 <RCCEx_GetUARTCLKFreq>:
{
34018be4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34018be6:	f7fc fb47 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018bea:	4b77      	ldr	r3, [pc, #476]	@ (34018dc8 <RCCEx_GetUARTCLKFreq+0x1e4>)
34018bec:	4298      	cmp	r0, r3
34018bee:	d03e      	beq.n	34018c6e <RCCEx_GetUARTCLKFreq+0x8a>
34018bf0:	d859      	bhi.n	34018ca6 <RCCEx_GetUARTCLKFreq+0xc2>
34018bf2:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34018bf6:	4298      	cmp	r0, r3
34018bf8:	f000 80c6 	beq.w	34018d88 <RCCEx_GetUARTCLKFreq+0x1a4>
34018bfc:	d814      	bhi.n	34018c28 <RCCEx_GetUARTCLKFreq+0x44>
34018bfe:	4b73      	ldr	r3, [pc, #460]	@ (34018dcc <RCCEx_GetUARTCLKFreq+0x1e8>)
34018c00:	4298      	cmp	r0, r3
34018c02:	f000 80cb 	beq.w	34018d9c <RCCEx_GetUARTCLKFreq+0x1b8>
34018c06:	3b01      	subs	r3, #1
34018c08:	4298      	cmp	r0, r3
34018c0a:	d90b      	bls.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
34018c0c:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34018c10:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34018c14:	429a      	cmp	r2, r3
34018c16:	f000 80b7 	beq.w	34018d88 <RCCEx_GetUARTCLKFreq+0x1a4>
34018c1a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34018c1e:	4298      	cmp	r0, r3
34018c20:	f000 80b2 	beq.w	34018d88 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34018c24:	2000      	movs	r0, #0
}
34018c26:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018c28:	4b69      	ldr	r3, [pc, #420]	@ (34018dd0 <RCCEx_GetUARTCLKFreq+0x1ec>)
34018c2a:	4298      	cmp	r0, r3
34018c2c:	d00d      	beq.n	34018c4a <RCCEx_GetUARTCLKFreq+0x66>
34018c2e:	d812      	bhi.n	34018c56 <RCCEx_GetUARTCLKFreq+0x72>
34018c30:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34018c34:	4298      	cmp	r0, r3
34018c36:	d008      	beq.n	34018c4a <RCCEx_GetUARTCLKFreq+0x66>
34018c38:	d80b      	bhi.n	34018c52 <RCCEx_GetUARTCLKFreq+0x6e>
34018c3a:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34018c3e:	4298      	cmp	r0, r3
34018c40:	d003      	beq.n	34018c4a <RCCEx_GetUARTCLKFreq+0x66>
34018c42:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34018c46:	4298      	cmp	r0, r3
34018c48:	d1ec      	bne.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
}
34018c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018c4e:	f7ff bccd 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018c52:	4b60      	ldr	r3, [pc, #384]	@ (34018dd4 <RCCEx_GetUARTCLKFreq+0x1f0>)
34018c54:	e7f7      	b.n	34018c46 <RCCEx_GetUARTCLKFreq+0x62>
34018c56:	4b60      	ldr	r3, [pc, #384]	@ (34018dd8 <RCCEx_GetUARTCLKFreq+0x1f4>)
34018c58:	4298      	cmp	r0, r3
34018c5a:	d008      	beq.n	34018c6e <RCCEx_GetUARTCLKFreq+0x8a>
34018c5c:	d821      	bhi.n	34018ca2 <RCCEx_GetUARTCLKFreq+0xbe>
34018c5e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34018c62:	4298      	cmp	r0, r3
34018c64:	d003      	beq.n	34018c6e <RCCEx_GetUARTCLKFreq+0x8a>
34018c66:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34018c6a:	4298      	cmp	r0, r3
34018c6c:	d1da      	bne.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34018c6e:	f7fc fb35 	bl	340152dc <LL_RCC_IC9_IsEnabled>
34018c72:	2800      	cmp	r0, #0
34018c74:	d0d6      	beq.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34018c76:	f7fc fb39 	bl	340152ec <LL_RCC_IC9_GetDivider>
34018c7a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34018c7c:	4b57      	ldr	r3, [pc, #348]	@ (34018ddc <RCCEx_GetUARTCLKFreq+0x1f8>)
34018c7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34018c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34018c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018c8a:	f000 809a 	beq.w	34018dc2 <RCCEx_GetUARTCLKFreq+0x1de>
34018c8e:	f200 808e 	bhi.w	34018dae <RCCEx_GetUARTCLKFreq+0x1ca>
34018c92:	2b00      	cmp	r3, #0
34018c94:	f040 8092 	bne.w	34018dbc <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018c98:	f7ff fba8 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
34018c9c:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018ca0:	e7c1      	b.n	34018c26 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018ca2:	4b4f      	ldr	r3, [pc, #316]	@ (34018de0 <RCCEx_GetUARTCLKFreq+0x1fc>)
34018ca4:	e7e1      	b.n	34018c6a <RCCEx_GetUARTCLKFreq+0x86>
34018ca6:	4b4f      	ldr	r3, [pc, #316]	@ (34018de4 <RCCEx_GetUARTCLKFreq+0x200>)
34018ca8:	4298      	cmp	r0, r3
34018caa:	d04a      	beq.n	34018d42 <RCCEx_GetUARTCLKFreq+0x15e>
34018cac:	d836      	bhi.n	34018d1c <RCCEx_GetUARTCLKFreq+0x138>
34018cae:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34018cb2:	4298      	cmp	r0, r3
34018cb4:	d029      	beq.n	34018d0a <RCCEx_GetUARTCLKFreq+0x126>
34018cb6:	d81c      	bhi.n	34018cf2 <RCCEx_GetUARTCLKFreq+0x10e>
34018cb8:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34018cbc:	3b04      	subs	r3, #4
34018cbe:	4298      	cmp	r0, r3
34018cc0:	d008      	beq.n	34018cd4 <RCCEx_GetUARTCLKFreq+0xf0>
34018cc2:	d812      	bhi.n	34018cea <RCCEx_GetUARTCLKFreq+0x106>
34018cc4:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34018cc8:	4298      	cmp	r0, r3
34018cca:	d003      	beq.n	34018cd4 <RCCEx_GetUARTCLKFreq+0xf0>
34018ccc:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34018cd0:	4298      	cmp	r0, r3
34018cd2:	d1a7      	bne.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34018cd4:	f7fc fb14 	bl	34015300 <LL_RCC_IC14_IsEnabled>
34018cd8:	2800      	cmp	r0, #0
34018cda:	d0a3      	beq.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34018cdc:	f7fc fb18 	bl	34015310 <LL_RCC_IC14_GetDivider>
34018ce0:	4b3e      	ldr	r3, [pc, #248]	@ (34018ddc <RCCEx_GetUARTCLKFreq+0x1f8>)
34018ce2:	4604      	mov	r4, r0
34018ce4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34018ce8:	e7cb      	b.n	34018c82 <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018cea:	4b3f      	ldr	r3, [pc, #252]	@ (34018de8 <RCCEx_GetUARTCLKFreq+0x204>)
34018cec:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34018cf0:	e7ee      	b.n	34018cd0 <RCCEx_GetUARTCLKFreq+0xec>
34018cf2:	4b3e      	ldr	r3, [pc, #248]	@ (34018dec <RCCEx_GetUARTCLKFreq+0x208>)
34018cf4:	4298      	cmp	r0, r3
34018cf6:	d008      	beq.n	34018d0a <RCCEx_GetUARTCLKFreq+0x126>
34018cf8:	d80e      	bhi.n	34018d18 <RCCEx_GetUARTCLKFreq+0x134>
34018cfa:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34018cfe:	4298      	cmp	r0, r3
34018d00:	d003      	beq.n	34018d0a <RCCEx_GetUARTCLKFreq+0x126>
34018d02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018d06:	4298      	cmp	r0, r3
34018d08:	d18c      	bne.n	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34018d0a:	f7fc fa9b 	bl	34015244 <LL_RCC_LSE_IsReady>
34018d0e:	3800      	subs	r0, #0
34018d10:	bf18      	it	ne
34018d12:	2001      	movne	r0, #1
34018d14:	03c0      	lsls	r0, r0, #15
34018d16:	e786      	b.n	34018c26 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018d18:	4b35      	ldr	r3, [pc, #212]	@ (34018df0 <RCCEx_GetUARTCLKFreq+0x20c>)
34018d1a:	e7f4      	b.n	34018d06 <RCCEx_GetUARTCLKFreq+0x122>
34018d1c:	4b35      	ldr	r3, [pc, #212]	@ (34018df4 <RCCEx_GetUARTCLKFreq+0x210>)
34018d1e:	4298      	cmp	r0, r3
34018d20:	d025      	beq.n	34018d6e <RCCEx_GetUARTCLKFreq+0x18a>
34018d22:	d817      	bhi.n	34018d54 <RCCEx_GetUARTCLKFreq+0x170>
34018d24:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34018d28:	3b04      	subs	r3, #4
34018d2a:	4298      	cmp	r0, r3
34018d2c:	d009      	beq.n	34018d42 <RCCEx_GetUARTCLKFreq+0x15e>
34018d2e:	d80f      	bhi.n	34018d50 <RCCEx_GetUARTCLKFreq+0x16c>
34018d30:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34018d34:	4298      	cmp	r0, r3
34018d36:	d004      	beq.n	34018d42 <RCCEx_GetUARTCLKFreq+0x15e>
34018d38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018d3c:	4298      	cmp	r0, r3
34018d3e:	f47f af71 	bne.w	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
34018d42:	f7fc fa77 	bl	34015234 <LL_RCC_MSI_IsReady>
34018d46:	2800      	cmp	r0, #0
34018d48:	f43f af6c 	beq.w	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34018d4c:	482a      	ldr	r0, [pc, #168]	@ (34018df8 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
34018d4e:	e76a      	b.n	34018c26 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018d50:	4b2a      	ldr	r3, [pc, #168]	@ (34018dfc <RCCEx_GetUARTCLKFreq+0x218>)
34018d52:	e7f3      	b.n	34018d3c <RCCEx_GetUARTCLKFreq+0x158>
34018d54:	4b2a      	ldr	r3, [pc, #168]	@ (34018e00 <RCCEx_GetUARTCLKFreq+0x21c>)
34018d56:	4298      	cmp	r0, r3
34018d58:	d009      	beq.n	34018d6e <RCCEx_GetUARTCLKFreq+0x18a>
34018d5a:	d813      	bhi.n	34018d84 <RCCEx_GetUARTCLKFreq+0x1a0>
34018d5c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34018d60:	4298      	cmp	r0, r3
34018d62:	d004      	beq.n	34018d6e <RCCEx_GetUARTCLKFreq+0x18a>
34018d64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018d68:	4298      	cmp	r0, r3
34018d6a:	f47f af5b 	bne.w	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
34018d6e:	f7fc fa59 	bl	34015224 <LL_RCC_HSI_IsReady>
34018d72:	2800      	cmp	r0, #0
34018d74:	f43f af56 	beq.w	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34018d78:	4b18      	ldr	r3, [pc, #96]	@ (34018ddc <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018d7a:	4822      	ldr	r0, [pc, #136]	@ (34018e04 <RCCEx_GetUARTCLKFreq+0x220>)
34018d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018d7e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018d82:	e009      	b.n	34018d98 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34018d84:	4b20      	ldr	r3, [pc, #128]	@ (34018e08 <RCCEx_GetUARTCLKFreq+0x224>)
34018d86:	e7ef      	b.n	34018d68 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018d88:	f7fc f9d2 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018d8c:	f7fc fadc 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34018d90:	4b12      	ldr	r3, [pc, #72]	@ (34018ddc <RCCEx_GetUARTCLKFreq+0x1f8>)
34018d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018d94:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018d98:	40d8      	lsrs	r0, r3
34018d9a:	e744      	b.n	34018c26 <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018d9c:	f7fc f9c8 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018da0:	f7fc fad2 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34018da4:	4b0d      	ldr	r3, [pc, #52]	@ (34018ddc <RCCEx_GetUARTCLKFreq+0x1f8>)
34018da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34018da8:	f3c3 1302 	ubfx	r3, r3, #4, #3
34018dac:	e7f4      	b.n	34018d98 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
34018dae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34018db2:	f47f af37 	bne.w	34018c24 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34018db6:	f7ff fbd9 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34018dba:	e76f      	b.n	34018c9c <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34018dbc:	f7ff fb56 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
34018dc0:	e76c      	b.n	34018c9c <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34018dc2:	f7ff fb93 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34018dc6:	e769      	b.n	34018c9c <RCCEx_GetUARTCLKFreq+0xb8>
34018dc8:	07021c30 	.word	0x07021c30
34018dcc:	07000034 	.word	0x07000034
34018dd0:	07011c30 	.word	0x07011c30
34018dd4:	07011830 	.word	0x07011830
34018dd8:	07021030 	.word	0x07021030
34018ddc:	56028000 	.word	0x56028000
34018de0:	07021830 	.word	0x07021830
34018de4:	07050034 	.word	0x07050034
34018de8:	07031830 	.word	0x07031830
34018dec:	07041830 	.word	0x07041830
34018df0:	07041c30 	.word	0x07041c30
34018df4:	07060034 	.word	0x07060034
34018df8:	003d0900 	.word	0x003d0900
34018dfc:	07051c30 	.word	0x07051c30
34018e00:	07061830 	.word	0x07061830
34018e04:	03d09000 	.word	0x03d09000
34018e08:	07061c30 	.word	0x07061c30

34018e0c <RCCEx_GetSPICLKFreq>:
{
34018e0c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34018e0e:	f7fc fa33 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018e12:	4b89      	ldr	r3, [pc, #548]	@ (34019038 <RCCEx_GetSPICLKFreq+0x22c>)
34018e14:	4298      	cmp	r0, r3
34018e16:	d055      	beq.n	34018ec4 <RCCEx_GetSPICLKFreq+0xb8>
34018e18:	d865      	bhi.n	34018ee6 <RCCEx_GetSPICLKFreq+0xda>
34018e1a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34018e1e:	4298      	cmp	r0, r3
34018e20:	f000 80ca 	beq.w	34018fb8 <RCCEx_GetSPICLKFreq+0x1ac>
34018e24:	d81e      	bhi.n	34018e64 <RCCEx_GetSPICLKFreq+0x58>
34018e26:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34018e2a:	4298      	cmp	r0, r3
34018e2c:	f000 80ba 	beq.w	34018fa4 <RCCEx_GetSPICLKFreq+0x198>
34018e30:	d80a      	bhi.n	34018e48 <RCCEx_GetSPICLKFreq+0x3c>
34018e32:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018e36:	4298      	cmp	r0, r3
34018e38:	d00b      	beq.n	34018e52 <RCCEx_GetSPICLKFreq+0x46>
34018e3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018e3e:	4298      	cmp	r0, r3
34018e40:	f000 80b0 	beq.w	34018fa4 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34018e44:	2000      	movs	r0, #0
}
34018e46:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018e48:	4b7c      	ldr	r3, [pc, #496]	@ (3401903c <RCCEx_GetSPICLKFreq+0x230>)
34018e4a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34018e4e:	4298      	cmp	r0, r3
34018e50:	d1f8      	bne.n	34018e44 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018e52:	f7fc f96d 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018e56:	f7fc fa77 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34018e5a:	4b79      	ldr	r3, [pc, #484]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
34018e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34018e5e:	f3c3 1302 	ubfx	r3, r3, #4, #3
34018e62:	e0a7      	b.n	34018fb4 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018e64:	4b77      	ldr	r3, [pc, #476]	@ (34019044 <RCCEx_GetSPICLKFreq+0x238>)
34018e66:	4298      	cmp	r0, r3
34018e68:	f000 80af 	beq.w	34018fca <RCCEx_GetSPICLKFreq+0x1be>
34018e6c:	d81d      	bhi.n	34018eaa <RCCEx_GetSPICLKFreq+0x9e>
34018e6e:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34018e72:	4298      	cmp	r0, r3
34018e74:	d00a      	beq.n	34018e8c <RCCEx_GetSPICLKFreq+0x80>
34018e76:	d80d      	bhi.n	34018e94 <RCCEx_GetSPICLKFreq+0x88>
34018e78:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018e7c:	4298      	cmp	r0, r3
34018e7e:	d005      	beq.n	34018e8c <RCCEx_GetSPICLKFreq+0x80>
34018e80:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34018e84:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34018e88:	4298      	cmp	r0, r3
34018e8a:	d1db      	bne.n	34018e44 <RCCEx_GetSPICLKFreq+0x38>
}
34018e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34018e90:	f7ff bbac 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018e94:	4b6c      	ldr	r3, [pc, #432]	@ (34019048 <RCCEx_GetSPICLKFreq+0x23c>)
34018e96:	4298      	cmp	r0, r3
34018e98:	d0f8      	beq.n	34018e8c <RCCEx_GetSPICLKFreq+0x80>
34018e9a:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34018e9e:	4298      	cmp	r0, r3
34018ea0:	f000 8093 	beq.w	34018fca <RCCEx_GetSPICLKFreq+0x1be>
34018ea4:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34018ea8:	e7ee      	b.n	34018e88 <RCCEx_GetSPICLKFreq+0x7c>
34018eaa:	4b68      	ldr	r3, [pc, #416]	@ (3401904c <RCCEx_GetSPICLKFreq+0x240>)
34018eac:	4298      	cmp	r0, r3
34018eae:	d009      	beq.n	34018ec4 <RCCEx_GetSPICLKFreq+0xb8>
34018eb0:	d813      	bhi.n	34018eda <RCCEx_GetSPICLKFreq+0xce>
34018eb2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018eb6:	4298      	cmp	r0, r3
34018eb8:	f000 8087 	beq.w	34018fca <RCCEx_GetSPICLKFreq+0x1be>
34018ebc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018ec0:	4298      	cmp	r0, r3
34018ec2:	d1bf      	bne.n	34018e44 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34018ec4:	f7fc fa0a 	bl	340152dc <LL_RCC_IC9_IsEnabled>
34018ec8:	2800      	cmp	r0, #0
34018eca:	d0bb      	beq.n	34018e44 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34018ecc:	f7fc fa0e 	bl	340152ec <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34018ed0:	4b5b      	ldr	r3, [pc, #364]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
34018ed2:	4604      	mov	r4, r0
34018ed4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34018ed8:	e082      	b.n	34018fe0 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018eda:	4b5d      	ldr	r3, [pc, #372]	@ (34019050 <RCCEx_GetSPICLKFreq+0x244>)
34018edc:	4298      	cmp	r0, r3
34018ede:	d074      	beq.n	34018fca <RCCEx_GetSPICLKFreq+0x1be>
34018ee0:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34018ee4:	e7ec      	b.n	34018ec0 <RCCEx_GetSPICLKFreq+0xb4>
34018ee6:	4b5b      	ldr	r3, [pc, #364]	@ (34019054 <RCCEx_GetSPICLKFreq+0x248>)
34018ee8:	4298      	cmp	r0, r3
34018eea:	d043      	beq.n	34018f74 <RCCEx_GetSPICLKFreq+0x168>
34018eec:	d830      	bhi.n	34018f50 <RCCEx_GetSPICLKFreq+0x144>
34018eee:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34018ef2:	4298      	cmp	r0, r3
34018ef4:	d0e6      	beq.n	34018ec4 <RCCEx_GetSPICLKFreq+0xb8>
34018ef6:	d808      	bhi.n	34018f0a <RCCEx_GetSPICLKFreq+0xfe>
34018ef8:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34018efc:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018f00:	429a      	cmp	r2, r3
34018f02:	d079      	beq.n	34018ff8 <RCCEx_GetSPICLKFreq+0x1ec>
34018f04:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34018f08:	e7da      	b.n	34018ec0 <RCCEx_GetSPICLKFreq+0xb4>
34018f0a:	4b53      	ldr	r3, [pc, #332]	@ (34019058 <RCCEx_GetSPICLKFreq+0x24c>)
34018f0c:	4298      	cmp	r0, r3
34018f0e:	d00d      	beq.n	34018f2c <RCCEx_GetSPICLKFreq+0x120>
34018f10:	d814      	bhi.n	34018f3c <RCCEx_GetSPICLKFreq+0x130>
34018f12:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018f16:	4298      	cmp	r0, r3
34018f18:	d008      	beq.n	34018f2c <RCCEx_GetSPICLKFreq+0x120>
34018f1a:	d80d      	bhi.n	34018f38 <RCCEx_GetSPICLKFreq+0x12c>
34018f1c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34018f20:	4298      	cmp	r0, r3
34018f22:	d003      	beq.n	34018f2c <RCCEx_GetSPICLKFreq+0x120>
34018f24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018f28:	4298      	cmp	r0, r3
34018f2a:	d18b      	bne.n	34018e44 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34018f2c:	f7fc f982 	bl	34015234 <LL_RCC_MSI_IsReady>
34018f30:	2800      	cmp	r0, #0
34018f32:	d087      	beq.n	34018e44 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34018f34:	4849      	ldr	r0, [pc, #292]	@ (3401905c <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34018f36:	e786      	b.n	34018e46 <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018f38:	4b49      	ldr	r3, [pc, #292]	@ (34019060 <RCCEx_GetSPICLKFreq+0x254>)
34018f3a:	e7f5      	b.n	34018f28 <RCCEx_GetSPICLKFreq+0x11c>
34018f3c:	4b49      	ldr	r3, [pc, #292]	@ (34019064 <RCCEx_GetSPICLKFreq+0x258>)
34018f3e:	4298      	cmp	r0, r3
34018f40:	d018      	beq.n	34018f74 <RCCEx_GetSPICLKFreq+0x168>
34018f42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018f46:	4298      	cmp	r0, r3
34018f48:	d014      	beq.n	34018f74 <RCCEx_GetSPICLKFreq+0x168>
34018f4a:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34018f4e:	e7eb      	b.n	34018f28 <RCCEx_GetSPICLKFreq+0x11c>
34018f50:	4b45      	ldr	r3, [pc, #276]	@ (34019068 <RCCEx_GetSPICLKFreq+0x25c>)
34018f52:	4298      	cmp	r0, r3
34018f54:	d069      	beq.n	3401902a <RCCEx_GetSPICLKFreq+0x21e>
34018f56:	d81e      	bhi.n	34018f96 <RCCEx_GetSPICLKFreq+0x18a>
34018f58:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34018f5c:	4298      	cmp	r0, r3
34018f5e:	d018      	beq.n	34018f92 <RCCEx_GetSPICLKFreq+0x186>
34018f60:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34018f64:	d811      	bhi.n	34018f8a <RCCEx_GetSPICLKFreq+0x17e>
34018f66:	4a41      	ldr	r2, [pc, #260]	@ (3401906c <RCCEx_GetSPICLKFreq+0x260>)
34018f68:	4293      	cmp	r3, r2
34018f6a:	d003      	beq.n	34018f74 <RCCEx_GetSPICLKFreq+0x168>
34018f6c:	4b40      	ldr	r3, [pc, #256]	@ (34019070 <RCCEx_GetSPICLKFreq+0x264>)
34018f6e:	4298      	cmp	r0, r3
34018f70:	f47f af68 	bne.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34018f74:	f7fc f956 	bl	34015224 <LL_RCC_HSI_IsReady>
34018f78:	2800      	cmp	r0, #0
34018f7a:	f43f af63 	beq.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34018f7e:	4b30      	ldr	r3, [pc, #192]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34018f80:	483c      	ldr	r0, [pc, #240]	@ (34019074 <RCCEx_GetSPICLKFreq+0x268>)
34018f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34018f84:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34018f88:	e014      	b.n	34018fb4 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34018f8a:	4a3b      	ldr	r2, [pc, #236]	@ (34019078 <RCCEx_GetSPICLKFreq+0x26c>)
34018f8c:	4293      	cmp	r3, r2
34018f8e:	f47f af59 	bne.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
34018f92:	483a      	ldr	r0, [pc, #232]	@ (3401907c <RCCEx_GetSPICLKFreq+0x270>)
34018f94:	e757      	b.n	34018e46 <RCCEx_GetSPICLKFreq+0x3a>
34018f96:	4b3a      	ldr	r3, [pc, #232]	@ (34019080 <RCCEx_GetSPICLKFreq+0x274>)
34018f98:	4298      	cmp	r0, r3
34018f9a:	d046      	beq.n	3401902a <RCCEx_GetSPICLKFreq+0x21e>
34018f9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34018fa0:	4298      	cmp	r0, r3
34018fa2:	e7f4      	b.n	34018f8e <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018fa4:	f7fc f8c4 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018fa8:	f7fc f9ce 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34018fac:	4b24      	ldr	r3, [pc, #144]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
34018fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34018fb0:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34018fb4:	40d8      	lsrs	r0, r3
      break;
34018fb6:	e746      	b.n	34018e46 <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34018fb8:	f7fc f8ba 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34018fbc:	f7fc f9c4 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34018fc0:	4b1f      	ldr	r3, [pc, #124]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
34018fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34018fc4:	f3c3 3302 	ubfx	r3, r3, #12, #3
34018fc8:	e7f4      	b.n	34018fb4 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34018fca:	f7fc f975 	bl	340152b8 <LL_RCC_IC8_IsEnabled>
34018fce:	2800      	cmp	r0, #0
34018fd0:	f43f af38 	beq.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34018fd4:	f7fc f978 	bl	340152c8 <LL_RCC_IC8_GetDivider>
34018fd8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34018fda:	4b19      	ldr	r3, [pc, #100]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
34018fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34018fe0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34018fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34018fe8:	d01c      	beq.n	34019024 <RCCEx_GetSPICLKFreq+0x218>
34018fea:	d811      	bhi.n	34019010 <RCCEx_GetSPICLKFreq+0x204>
34018fec:	b9bb      	cbnz	r3, 3401901e <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34018fee:	f7ff f9fd 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34018ff2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34018ff6:	e726      	b.n	34018e46 <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34018ff8:	f7fc f982 	bl	34015300 <LL_RCC_IC14_IsEnabled>
34018ffc:	2800      	cmp	r0, #0
34018ffe:	f43f af21 	beq.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34019002:	f7fc f985 	bl	34015310 <LL_RCC_IC14_GetDivider>
34019006:	4b0e      	ldr	r3, [pc, #56]	@ (34019040 <RCCEx_GetSPICLKFreq+0x234>)
34019008:	4604      	mov	r4, r0
3401900a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3401900e:	e7e7      	b.n	34018fe0 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
34019010:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019014:	f47f af16 	bne.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019018:	f7ff faa8 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
3401901c:	e7e9      	b.n	34018ff2 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401901e:	f7ff fa25 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
34019022:	e7e6      	b.n	34018ff2 <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019024:	f7ff fa62 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34019028:	e7e3      	b.n	34018ff2 <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
3401902a:	f7fc f8f3 	bl	34015214 <LL_RCC_HSE_IsReady>
3401902e:	2800      	cmp	r0, #0
34019030:	f43f af08 	beq.w	34018e44 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34019034:	4813      	ldr	r0, [pc, #76]	@ (34019084 <RCCEx_GetSPICLKFreq+0x278>)
34019036:	e706      	b.n	34018e46 <RCCEx_GetSPICLKFreq+0x3a>
34019038:	07030820 	.word	0x07030820
3401903c:	07001020 	.word	0x07001020
34019040:	56028000 	.word	0x56028000
34019044:	07020820 	.word	0x07020820
34019048:	07011820 	.word	0x07011820
3401904c:	07021420 	.word	0x07021420
34019050:	07021820 	.word	0x07021820
34019054:	07050c20 	.word	0x07050c20
34019058:	07041420 	.word	0x07041420
3401905c:	003d0900 	.word	0x003d0900
34019060:	07041020 	.word	0x07041020
34019064:	07050420 	.word	0x07050420
34019068:	07061020 	.word	0x07061020
3401906c:	07051020 	.word	0x07051020
34019070:	07051820 	.word	0x07051820
34019074:	03d09000 	.word	0x03d09000
34019078:	07060820 	.word	0x07060820
3401907c:	00bb8000 	.word	0x00bb8000
34019080:	07061420 	.word	0x07061420
34019084:	02dc6c00 	.word	0x02dc6c00

34019088 <RCCEx_GetSAICLKFreq>:
{
34019088:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401908a:	f7fc f8f5 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401908e:	4b49      	ldr	r3, [pc, #292]	@ (340191b4 <RCCEx_GetSAICLKFreq+0x12c>)
34019090:	4298      	cmp	r0, r3
34019092:	d04a      	beq.n	3401912a <RCCEx_GetSAICLKFreq+0xa2>
34019094:	d839      	bhi.n	3401910a <RCCEx_GetSAICLKFreq+0x82>
34019096:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
3401909a:	4298      	cmp	r0, r3
3401909c:	d021      	beq.n	340190e2 <RCCEx_GetSAICLKFreq+0x5a>
3401909e:	d815      	bhi.n	340190cc <RCCEx_GetSAICLKFreq+0x44>
340190a0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340190a4:	4298      	cmp	r0, r3
340190a6:	d00d      	beq.n	340190c4 <RCCEx_GetSAICLKFreq+0x3c>
340190a8:	d809      	bhi.n	340190be <RCCEx_GetSAICLKFreq+0x36>
340190aa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340190ae:	4298      	cmp	r0, r3
340190b0:	d04e      	beq.n	34019150 <RCCEx_GetSAICLKFreq+0xc8>
340190b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340190b6:	4298      	cmp	r0, r3
340190b8:	d04a      	beq.n	34019150 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
340190ba:	2000      	movs	r0, #0
}
340190bc:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340190be:	4b3e      	ldr	r3, [pc, #248]	@ (340191b8 <RCCEx_GetSAICLKFreq+0x130>)
340190c0:	4298      	cmp	r0, r3
340190c2:	d1fa      	bne.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
}
340190c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340190c8:	f7ff ba90 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
340190cc:	4b3b      	ldr	r3, [pc, #236]	@ (340191bc <RCCEx_GetSAICLKFreq+0x134>)
340190ce:	4298      	cmp	r0, r3
340190d0:	d04d      	beq.n	3401916e <RCCEx_GetSAICLKFreq+0xe6>
340190d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340190d6:	4298      	cmp	r0, r3
340190d8:	d049      	beq.n	3401916e <RCCEx_GetSAICLKFreq+0xe6>
340190da:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340190de:	4298      	cmp	r0, r3
340190e0:	d1eb      	bne.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340190e2:	f7fc f8d7 	bl	34015294 <LL_RCC_IC7_IsEnabled>
340190e6:	2800      	cmp	r0, #0
340190e8:	d0e7      	beq.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
340190ea:	f7fc f8db 	bl	340152a4 <LL_RCC_IC7_GetDivider>
340190ee:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
340190f0:	4b33      	ldr	r3, [pc, #204]	@ (340191c0 <RCCEx_GetSAICLKFreq+0x138>)
340190f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340190f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
340190fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340190fe:	d047      	beq.n	34019190 <RCCEx_GetSAICLKFreq+0x108>
34019100:	d840      	bhi.n	34019184 <RCCEx_GetSAICLKFreq+0xfc>
34019102:	bb7b      	cbnz	r3, 34019164 <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019104:	f7ff f972 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
34019108:	e02e      	b.n	34019168 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401910a:	4b2e      	ldr	r3, [pc, #184]	@ (340191c4 <RCCEx_GetSAICLKFreq+0x13c>)
3401910c:	4298      	cmp	r0, r3
3401910e:	d01d      	beq.n	3401914c <RCCEx_GetSAICLKFreq+0xc4>
34019110:	d811      	bhi.n	34019136 <RCCEx_GetSAICLKFreq+0xae>
34019112:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019116:	4298      	cmp	r0, r3
34019118:	d03d      	beq.n	34019196 <RCCEx_GetSAICLKFreq+0x10e>
3401911a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401911e:	4298      	cmp	r0, r3
34019120:	d039      	beq.n	34019196 <RCCEx_GetSAICLKFreq+0x10e>
34019122:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019126:	4298      	cmp	r0, r3
34019128:	d1c7      	bne.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
3401912a:	f7fc f883 	bl	34015234 <LL_RCC_MSI_IsReady>
3401912e:	2800      	cmp	r0, #0
34019130:	d0c3      	beq.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34019132:	4825      	ldr	r0, [pc, #148]	@ (340191c8 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34019134:	e7c2      	b.n	340190bc <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34019136:	4b25      	ldr	r3, [pc, #148]	@ (340191cc <RCCEx_GetSAICLKFreq+0x144>)
34019138:	4298      	cmp	r0, r3
3401913a:	d036      	beq.n	340191aa <RCCEx_GetSAICLKFreq+0x122>
3401913c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019140:	4298      	cmp	r0, r3
34019142:	d032      	beq.n	340191aa <RCCEx_GetSAICLKFreq+0x122>
34019144:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019148:	4298      	cmp	r0, r3
3401914a:	d1b6      	bne.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
3401914c:	4820      	ldr	r0, [pc, #128]	@ (340191d0 <RCCEx_GetSAICLKFreq+0x148>)
3401914e:	e7b5      	b.n	340190bc <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019150:	f7fb ffee 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34019154:	f7fc f8f8 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34019158:	4b19      	ldr	r3, [pc, #100]	@ (340191c0 <RCCEx_GetSAICLKFreq+0x138>)
3401915a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3401915c:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019160:	40d8      	lsrs	r0, r3
34019162:	e7ab      	b.n	340190bc <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019164:	f7ff f982 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
34019168:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401916c:	e7a6      	b.n	340190bc <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401916e:	f7fc f8a3 	bl	340152b8 <LL_RCC_IC8_IsEnabled>
34019172:	2800      	cmp	r0, #0
34019174:	d0a1      	beq.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
34019176:	f7fc f8a7 	bl	340152c8 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401917a:	4b11      	ldr	r3, [pc, #68]	@ (340191c0 <RCCEx_GetSAICLKFreq+0x138>)
3401917c:	4604      	mov	r4, r0
3401917e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34019182:	e7b8      	b.n	340190f6 <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
34019184:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019188:	d197      	bne.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401918a:	f7ff f9ef 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
3401918e:	e7eb      	b.n	34019168 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019190:	f7ff f9ac 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34019194:	e7e8      	b.n	34019168 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
34019196:	f7fc f845 	bl	34015224 <LL_RCC_HSI_IsReady>
3401919a:	2800      	cmp	r0, #0
3401919c:	d08d      	beq.n	340190ba <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401919e:	4b08      	ldr	r3, [pc, #32]	@ (340191c0 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340191a0:	480c      	ldr	r0, [pc, #48]	@ (340191d4 <RCCEx_GetSAICLKFreq+0x14c>)
340191a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340191a4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340191a8:	e7da      	b.n	34019160 <RCCEx_GetSAICLKFreq+0xd8>
}
340191aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
340191ae:	f7ff baa3 	b.w	340186f8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
340191b2:	bf00      	nop
340191b4:	07041418 	.word	0x07041418
340191b8:	07011818 	.word	0x07011818
340191bc:	07031418 	.word	0x07031418
340191c0:	56028000 	.word	0x56028000
340191c4:	07061418 	.word	0x07061418
340191c8:	003d0900 	.word	0x003d0900
340191cc:	07071418 	.word	0x07071418
340191d0:	00bb8000 	.word	0x00bb8000
340191d4:	03d09000 	.word	0x03d09000

340191d8 <RCCEx_GetI3CCLKFreq>:
{
340191d8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340191da:	f7fc f84d 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340191de:	4b3d      	ldr	r3, [pc, #244]	@ (340192d4 <RCCEx_GetI3CCLKFreq+0xfc>)
340191e0:	4298      	cmp	r0, r3
340191e2:	d060      	beq.n	340192a6 <RCCEx_GetI3CCLKFreq+0xce>
340191e4:	d830      	bhi.n	34019248 <RCCEx_GetI3CCLKFreq+0x70>
340191e6:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
340191ea:	4298      	cmp	r0, r3
340191ec:	d057      	beq.n	3401929e <RCCEx_GetI3CCLKFreq+0xc6>
340191ee:	d80d      	bhi.n	3401920c <RCCEx_GetI3CCLKFreq+0x34>
340191f0:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
340191f4:	4298      	cmp	r0, r3
340191f6:	d048      	beq.n	3401928a <RCCEx_GetI3CCLKFreq+0xb2>
340191f8:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
340191fc:	4298      	cmp	r0, r3
340191fe:	d04e      	beq.n	3401929e <RCCEx_GetI3CCLKFreq+0xc6>
34019200:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019204:	4298      	cmp	r0, r3
34019206:	d040      	beq.n	3401928a <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34019208:	2000      	movs	r0, #0
}
3401920a:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401920c:	4b32      	ldr	r3, [pc, #200]	@ (340192d8 <RCCEx_GetI3CCLKFreq+0x100>)
3401920e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019212:	4298      	cmp	r0, r3
34019214:	d1f8      	bne.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34019216:	4b31      	ldr	r3, [pc, #196]	@ (340192dc <RCCEx_GetI3CCLKFreq+0x104>)
34019218:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401921c:	0592      	lsls	r2, r2, #22
3401921e:	d5f3      	bpl.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019220:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34019224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019228:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401922c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3401922e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34019232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019236:	d04a      	beq.n	340192ce <RCCEx_GetI3CCLKFreq+0xf6>
34019238:	d840      	bhi.n	340192bc <RCCEx_GetI3CCLKFreq+0xe4>
3401923a:	2b00      	cmp	r3, #0
3401923c:	d144      	bne.n	340192c8 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401923e:	f7ff f8d5 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
34019242:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019246:	e7e0      	b.n	3401920a <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34019248:	4b25      	ldr	r3, [pc, #148]	@ (340192e0 <RCCEx_GetI3CCLKFreq+0x108>)
3401924a:	4298      	cmp	r0, r3
3401924c:	d008      	beq.n	34019260 <RCCEx_GetI3CCLKFreq+0x88>
3401924e:	d80d      	bhi.n	3401926c <RCCEx_GetI3CCLKFreq+0x94>
34019250:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019254:	4298      	cmp	r0, r3
34019256:	d026      	beq.n	340192a6 <RCCEx_GetI3CCLKFreq+0xce>
34019258:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
3401925c:	4298      	cmp	r0, r3
3401925e:	d1d3      	bne.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34019260:	f7fb ffe8 	bl	34015234 <LL_RCC_MSI_IsReady>
34019264:	2800      	cmp	r0, #0
34019266:	d0cf      	beq.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
34019268:	481e      	ldr	r0, [pc, #120]	@ (340192e4 <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
3401926a:	e7ce      	b.n	3401920a <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401926c:	4b1e      	ldr	r3, [pc, #120]	@ (340192e8 <RCCEx_GetI3CCLKFreq+0x110>)
3401926e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019272:	4298      	cmp	r0, r3
34019274:	d1c8      	bne.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
34019276:	f7fb ffd5 	bl	34015224 <LL_RCC_HSI_IsReady>
3401927a:	2800      	cmp	r0, #0
3401927c:	d0c4      	beq.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401927e:	4b17      	ldr	r3, [pc, #92]	@ (340192dc <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019280:	481a      	ldr	r0, [pc, #104]	@ (340192ec <RCCEx_GetI3CCLKFreq+0x114>)
34019282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34019284:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34019288:	e007      	b.n	3401929a <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401928a:	f7fb ff51 	bl	34015130 <HAL_RCC_GetSysClockFreq>
3401928e:	f7fc f85b 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019292:	4b12      	ldr	r3, [pc, #72]	@ (340192dc <RCCEx_GetI3CCLKFreq+0x104>)
34019294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019296:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401929a:	40d8      	lsrs	r0, r3
3401929c:	e7b5      	b.n	3401920a <RCCEx_GetI3CCLKFreq+0x32>
}
3401929e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340192a2:	f7ff b9a3 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340192a6:	f7fc f83d 	bl	34015324 <LL_RCC_IC15_IsEnabled>
340192aa:	2800      	cmp	r0, #0
340192ac:	d0ac      	beq.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
340192ae:	f7fc f841 	bl	34015334 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340192b2:	4b0a      	ldr	r3, [pc, #40]	@ (340192dc <RCCEx_GetI3CCLKFreq+0x104>)
340192b4:	4604      	mov	r4, r0
340192b6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340192ba:	e7b8      	b.n	3401922e <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
340192bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340192c0:	d1a2      	bne.n	34019208 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340192c2:	f7ff f953 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
340192c6:	e7bc      	b.n	34019242 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340192c8:	f7ff f8d0 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
340192cc:	e7b9      	b.n	34019242 <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340192ce:	f7ff f90d 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
340192d2:	e7b6      	b.n	34019242 <RCCEx_GetI3CCLKFreq+0x6a>
340192d4:	0703100c 	.word	0x0703100c
340192d8:	0702100c 	.word	0x0702100c
340192dc:	56028000 	.word	0x56028000
340192e0:	0704140c 	.word	0x0704140c
340192e4:	003d0900 	.word	0x003d0900
340192e8:	0705100c 	.word	0x0705100c
340192ec:	03d09000 	.word	0x03d09000

340192f0 <RCCEx_GetSDMMCCLKFreq>:
{
340192f0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340192f2:	f7fb ffc1 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340192f6:	4b2d      	ldr	r3, [pc, #180]	@ (340193ac <RCCEx_GetSDMMCCLKFreq+0xbc>)
340192f8:	4298      	cmp	r0, r3
340192fa:	d01d      	beq.n	34019338 <RCCEx_GetSDMMCCLKFreq+0x48>
340192fc:	d813      	bhi.n	34019326 <RCCEx_GetSDMMCCLKFreq+0x36>
340192fe:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019302:	4298      	cmp	r0, r3
34019304:	d00b      	beq.n	3401931e <RCCEx_GetSDMMCCLKFreq+0x2e>
34019306:	d807      	bhi.n	34019318 <RCCEx_GetSDMMCCLKFreq+0x28>
34019308:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401930c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019310:	4298      	cmp	r0, r3
34019312:	d02a      	beq.n	3401936a <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34019314:	2000      	movs	r0, #0
}
34019316:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34019318:	4b25      	ldr	r3, [pc, #148]	@ (340193b0 <RCCEx_GetSDMMCCLKFreq+0xc0>)
3401931a:	4298      	cmp	r0, r3
3401931c:	d1fa      	bne.n	34019314 <RCCEx_GetSDMMCCLKFreq+0x24>
}
3401931e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019322:	f7ff b963 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34019326:	4b23      	ldr	r3, [pc, #140]	@ (340193b4 <RCCEx_GetSDMMCCLKFreq+0xc4>)
34019328:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3401932c:	429a      	cmp	r2, r3
3401932e:	d022      	beq.n	34019376 <RCCEx_GetSDMMCCLKFreq+0x86>
34019330:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34019334:	4298      	cmp	r0, r3
34019336:	d1ed      	bne.n	34019314 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34019338:	4b1f      	ldr	r3, [pc, #124]	@ (340193b8 <RCCEx_GetSDMMCCLKFreq+0xc8>)
3401933a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3401933e:	f010 0008 	ands.w	r0, r0, #8
34019342:	d0e8      	beq.n	34019316 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019344:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34019348:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401934c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019350:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34019352:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
34019356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401935a:	d023      	beq.n	340193a4 <RCCEx_GetSDMMCCLKFreq+0xb4>
3401935c:	d819      	bhi.n	34019392 <RCCEx_GetSDMMCCLKFreq+0xa2>
3401935e:	b9f3      	cbnz	r3, 3401939e <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019360:	f7ff f844 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34019364:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
34019368:	e7d5      	b.n	34019316 <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401936a:	f7fb fee1 	bl	34015130 <HAL_RCC_GetSysClockFreq>
}
3401936e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019372:	f7fb bfe9 	b.w	34015348 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34019376:	4b10      	ldr	r3, [pc, #64]	@ (340193b8 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34019378:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3401937c:	f010 0010 	ands.w	r0, r0, #16
34019380:	d0c9      	beq.n	34019316 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34019382:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34019386:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3401938a:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401938e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34019390:	e7df      	b.n	34019352 <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
34019392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019396:	d1bd      	bne.n	34019314 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019398:	f7ff f8e8 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
3401939c:	e7e2      	b.n	34019364 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401939e:	f7ff f865 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
340193a2:	e7df      	b.n	34019364 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340193a4:	f7ff f8a2 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
340193a8:	e7dc      	b.n	34019364 <RCCEx_GetSDMMCCLKFreq+0x74>
340193aa:	bf00      	nop
340193ac:	0302001c 	.word	0x0302001c
340193b0:	0301041c 	.word	0x0301041c
340193b4:	0303001c 	.word	0x0303001c
340193b8:	56028000 	.word	0x56028000

340193bc <RCCEx_GetI2CCLKFreq>:
{
340193bc:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
340193be:	f7fb ff5b 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340193c2:	4b50      	ldr	r3, [pc, #320]	@ (34019504 <RCCEx_GetI2CCLKFreq+0x148>)
340193c4:	4298      	cmp	r0, r3
340193c6:	f000 8085 	beq.w	340194d4 <RCCEx_GetI2CCLKFreq+0x118>
340193ca:	d84b      	bhi.n	34019464 <RCCEx_GetI2CCLKFreq+0xa8>
340193cc:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
340193d0:	4298      	cmp	r0, r3
340193d2:	d01a      	beq.n	3401940a <RCCEx_GetI2CCLKFreq+0x4e>
340193d4:	d81d      	bhi.n	34019412 <RCCEx_GetI2CCLKFreq+0x56>
340193d6:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340193da:	4298      	cmp	r0, r3
340193dc:	d008      	beq.n	340193f0 <RCCEx_GetI2CCLKFreq+0x34>
340193de:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
340193e2:	d80f      	bhi.n	34019404 <RCCEx_GetI2CCLKFreq+0x48>
340193e4:	4a48      	ldr	r2, [pc, #288]	@ (34019508 <RCCEx_GetI2CCLKFreq+0x14c>)
340193e6:	4293      	cmp	r3, r2
340193e8:	d002      	beq.n	340193f0 <RCCEx_GetI2CCLKFreq+0x34>
340193ea:	4b48      	ldr	r3, [pc, #288]	@ (3401950c <RCCEx_GetI2CCLKFreq+0x150>)
340193ec:	4298      	cmp	r0, r3
340193ee:	d14a      	bne.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340193f0:	f7fb fe9e 	bl	34015130 <HAL_RCC_GetSysClockFreq>
340193f4:	f7fb ffa8 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340193f8:	4b45      	ldr	r3, [pc, #276]	@ (34019510 <RCCEx_GetI2CCLKFreq+0x154>)
340193fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340193fc:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019400:	40d8      	lsrs	r0, r3
34019402:	e041      	b.n	34019488 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34019404:	4a43      	ldr	r2, [pc, #268]	@ (34019514 <RCCEx_GetI2CCLKFreq+0x158>)
34019406:	4293      	cmp	r3, r2
34019408:	d13d      	bne.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
}
3401940a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401940e:	f7ff b8ed 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34019412:	4b41      	ldr	r3, [pc, #260]	@ (34019518 <RCCEx_GetI2CCLKFreq+0x15c>)
34019414:	4298      	cmp	r0, r3
34019416:	d008      	beq.n	3401942a <RCCEx_GetI2CCLKFreq+0x6e>
34019418:	d820      	bhi.n	3401945c <RCCEx_GetI2CCLKFreq+0xa0>
3401941a:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3401941e:	4298      	cmp	r0, r3
34019420:	d0f3      	beq.n	3401940a <RCCEx_GetI2CCLKFreq+0x4e>
34019422:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34019426:	4298      	cmp	r0, r3
34019428:	d12d      	bne.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3401942a:	4b39      	ldr	r3, [pc, #228]	@ (34019510 <RCCEx_GetI2CCLKFreq+0x154>)
3401942c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019430:	0592      	lsls	r2, r2, #22
34019432:	d528      	bpl.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019434:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34019438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401943c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019440:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34019442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34019446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401944a:	d057      	beq.n	340194fc <RCCEx_GetI2CCLKFreq+0x140>
3401944c:	d84d      	bhi.n	340194ea <RCCEx_GetI2CCLKFreq+0x12e>
3401944e:	2b00      	cmp	r3, #0
34019450:	d151      	bne.n	340194f6 <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019452:	f7fe ffcb 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
34019456:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401945a:	e015      	b.n	34019488 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401945c:	4b2f      	ldr	r3, [pc, #188]	@ (3401951c <RCCEx_GetI2CCLKFreq+0x160>)
3401945e:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019462:	e7e0      	b.n	34019426 <RCCEx_GetI2CCLKFreq+0x6a>
34019464:	4b2e      	ldr	r3, [pc, #184]	@ (34019520 <RCCEx_GetI2CCLKFreq+0x164>)
34019466:	4298      	cmp	r0, r3
34019468:	d014      	beq.n	34019494 <RCCEx_GetI2CCLKFreq+0xd8>
3401946a:	d819      	bhi.n	340194a0 <RCCEx_GetI2CCLKFreq+0xe4>
3401946c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34019470:	4298      	cmp	r0, r3
34019472:	d02f      	beq.n	340194d4 <RCCEx_GetI2CCLKFreq+0x118>
34019474:	d809      	bhi.n	3401948a <RCCEx_GetI2CCLKFreq+0xce>
34019476:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401947a:	4298      	cmp	r0, r3
3401947c:	d02a      	beq.n	340194d4 <RCCEx_GetI2CCLKFreq+0x118>
3401947e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019482:	4298      	cmp	r0, r3
34019484:	d026      	beq.n	340194d4 <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34019486:	2000      	movs	r0, #0
}
34019488:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401948a:	4b26      	ldr	r3, [pc, #152]	@ (34019524 <RCCEx_GetI2CCLKFreq+0x168>)
3401948c:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019490:	4298      	cmp	r0, r3
34019492:	d1f8      	bne.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
34019494:	f7fb fece 	bl	34015234 <LL_RCC_MSI_IsReady>
34019498:	2800      	cmp	r0, #0
3401949a:	d0f4      	beq.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
3401949c:	4822      	ldr	r0, [pc, #136]	@ (34019528 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
3401949e:	e7f3      	b.n	34019488 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340194a0:	4b22      	ldr	r3, [pc, #136]	@ (3401952c <RCCEx_GetI2CCLKFreq+0x170>)
340194a2:	4298      	cmp	r0, r3
340194a4:	d008      	beq.n	340194b8 <RCCEx_GetI2CCLKFreq+0xfc>
340194a6:	d811      	bhi.n	340194cc <RCCEx_GetI2CCLKFreq+0x110>
340194a8:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
340194ac:	4298      	cmp	r0, r3
340194ae:	d0f1      	beq.n	34019494 <RCCEx_GetI2CCLKFreq+0xd8>
340194b0:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
340194b4:	4298      	cmp	r0, r3
340194b6:	d1e6      	bne.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
340194b8:	f7fb feb4 	bl	34015224 <LL_RCC_HSI_IsReady>
340194bc:	2800      	cmp	r0, #0
340194be:	d0e2      	beq.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340194c0:	4b13      	ldr	r3, [pc, #76]	@ (34019510 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340194c2:	481b      	ldr	r0, [pc, #108]	@ (34019530 <RCCEx_GetI2CCLKFreq+0x174>)
340194c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340194c6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340194ca:	e799      	b.n	34019400 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
340194cc:	4b19      	ldr	r3, [pc, #100]	@ (34019534 <RCCEx_GetI2CCLKFreq+0x178>)
340194ce:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
340194d2:	e7ef      	b.n	340194b4 <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340194d4:	f7fb ff26 	bl	34015324 <LL_RCC_IC15_IsEnabled>
340194d8:	2800      	cmp	r0, #0
340194da:	d0d4      	beq.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
340194dc:	f7fb ff2a 	bl	34015334 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340194e0:	4b0b      	ldr	r3, [pc, #44]	@ (34019510 <RCCEx_GetI2CCLKFreq+0x154>)
340194e2:	4604      	mov	r4, r0
340194e4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340194e8:	e7ab      	b.n	34019442 <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
340194ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340194ee:	d1ca      	bne.n	34019486 <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340194f0:	f7ff f83c 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
340194f4:	e7af      	b.n	34019456 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340194f6:	f7fe ffb9 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
340194fa:	e7ac      	b.n	34019456 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340194fc:	f7fe fff6 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34019500:	e7a9      	b.n	34019456 <RCCEx_GetI2CCLKFreq+0x9a>
34019502:	bf00      	nop
34019504:	0703000c 	.word	0x0703000c
34019508:	0700000c 	.word	0x0700000c
3401950c:	0700080c 	.word	0x0700080c
34019510:	56028000 	.word	0x56028000
34019514:	0701000c 	.word	0x0701000c
34019518:	0702040c 	.word	0x0702040c
3401951c:	0702080c 	.word	0x0702080c
34019520:	0704080c 	.word	0x0704080c
34019524:	0704000c 	.word	0x0704000c
34019528:	003d0900 	.word	0x003d0900
3401952c:	0705040c 	.word	0x0705040c
34019530:	03d09000 	.word	0x03d09000
34019534:	0705080c 	.word	0x0705080c

34019538 <RCCEx_GetLPTIMCLKFreq>:
{
34019538:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401953a:	f7fb fe9d 	bl	34015278 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401953e:	4b63      	ldr	r3, [pc, #396]	@ (340196cc <RCCEx_GetLPTIMCLKFreq+0x194>)
34019540:	4298      	cmp	r0, r3
34019542:	d03a      	beq.n	340195ba <RCCEx_GetLPTIMCLKFreq+0x82>
34019544:	d850      	bhi.n	340195e8 <RCCEx_GetLPTIMCLKFreq+0xb0>
34019546:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
3401954a:	4298      	cmp	r0, r3
3401954c:	f000 80a7 	beq.w	3401969e <RCCEx_GetLPTIMCLKFreq+0x166>
34019550:	d813      	bhi.n	3401957a <RCCEx_GetLPTIMCLKFreq+0x42>
34019552:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34019556:	4298      	cmp	r0, r3
34019558:	f000 8097 	beq.w	3401968a <RCCEx_GetLPTIMCLKFreq+0x152>
3401955c:	3b01      	subs	r3, #1
3401955e:	4298      	cmp	r0, r3
34019560:	d909      	bls.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
34019562:	f203 4301 	addw	r3, r3, #1025	@ 0x401
34019566:	4298      	cmp	r0, r3
34019568:	f000 8099 	beq.w	3401969e <RCCEx_GetLPTIMCLKFreq+0x166>
3401956c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019570:	4298      	cmp	r0, r3
34019572:	f000 8094 	beq.w	3401969e <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34019576:	2000      	movs	r0, #0
}
34019578:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401957a:	4b55      	ldr	r3, [pc, #340]	@ (340196d0 <RCCEx_GetLPTIMCLKFreq+0x198>)
3401957c:	4298      	cmp	r0, r3
3401957e:	d015      	beq.n	340195ac <RCCEx_GetLPTIMCLKFreq+0x74>
34019580:	d808      	bhi.n	34019594 <RCCEx_GetLPTIMCLKFreq+0x5c>
34019582:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34019586:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401958a:	429a      	cmp	r2, r3
3401958c:	d00e      	beq.n	340195ac <RCCEx_GetLPTIMCLKFreq+0x74>
3401958e:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34019592:	e7ed      	b.n	34019570 <RCCEx_GetLPTIMCLKFreq+0x38>
34019594:	4b4f      	ldr	r3, [pc, #316]	@ (340196d4 <RCCEx_GetLPTIMCLKFreq+0x19c>)
34019596:	4298      	cmp	r0, r3
34019598:	d00f      	beq.n	340195ba <RCCEx_GetLPTIMCLKFreq+0x82>
3401959a:	d80b      	bhi.n	340195b4 <RCCEx_GetLPTIMCLKFreq+0x7c>
3401959c:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
340195a0:	4298      	cmp	r0, r3
340195a2:	d003      	beq.n	340195ac <RCCEx_GetLPTIMCLKFreq+0x74>
340195a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
340195a8:	4298      	cmp	r0, r3
340195aa:	d1e4      	bne.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
}
340195ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340195b0:	f7ff b81c 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340195b4:	4b48      	ldr	r3, [pc, #288]	@ (340196d8 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
340195b6:	4298      	cmp	r0, r3
340195b8:	d1dd      	bne.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
340195ba:	f7fb feb3 	bl	34015324 <LL_RCC_IC15_IsEnabled>
340195be:	2800      	cmp	r0, #0
340195c0:	d0d9      	beq.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
340195c2:	f7fb feb7 	bl	34015334 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340195c6:	4b45      	ldr	r3, [pc, #276]	@ (340196dc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340195c8:	4604      	mov	r4, r0
340195ca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340195ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
340195d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340195d6:	d075      	beq.n	340196c4 <RCCEx_GetLPTIMCLKFreq+0x18c>
340195d8:	d86a      	bhi.n	340196b0 <RCCEx_GetLPTIMCLKFreq+0x178>
340195da:	2b00      	cmp	r3, #0
340195dc:	d16f      	bne.n	340196be <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340195de:	f7fe ff05 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
340195e2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
340195e6:	e7c7      	b.n	34019578 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
340195e8:	4b3d      	ldr	r3, [pc, #244]	@ (340196e0 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
340195ea:	4298      	cmp	r0, r3
340195ec:	d034      	beq.n	34019658 <RCCEx_GetLPTIMCLKFreq+0x120>
340195ee:	d824      	bhi.n	3401963a <RCCEx_GetLPTIMCLKFreq+0x102>
340195f0:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
340195f4:	4298      	cmp	r0, r3
340195f6:	d00f      	beq.n	34019618 <RCCEx_GetLPTIMCLKFreq+0xe0>
340195f8:	d815      	bhi.n	34019626 <RCCEx_GetLPTIMCLKFreq+0xee>
340195fa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
340195fe:	4298      	cmp	r0, r3
34019600:	d00a      	beq.n	34019618 <RCCEx_GetLPTIMCLKFreq+0xe0>
34019602:	d806      	bhi.n	34019612 <RCCEx_GetLPTIMCLKFreq+0xda>
34019604:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34019608:	4298      	cmp	r0, r3
3401960a:	d0d6      	beq.n	340195ba <RCCEx_GetLPTIMCLKFreq+0x82>
3401960c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019610:	e7d1      	b.n	340195b6 <RCCEx_GetLPTIMCLKFreq+0x7e>
34019612:	4b34      	ldr	r3, [pc, #208]	@ (340196e4 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
34019614:	4298      	cmp	r0, r3
34019616:	d1ae      	bne.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
34019618:	f7fb fe14 	bl	34015244 <LL_RCC_LSE_IsReady>
3401961c:	3800      	subs	r0, #0
3401961e:	bf18      	it	ne
34019620:	2001      	movne	r0, #1
34019622:	03c0      	lsls	r0, r0, #15
34019624:	e7a8      	b.n	34019578 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019626:	4b30      	ldr	r3, [pc, #192]	@ (340196e8 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34019628:	4298      	cmp	r0, r3
3401962a:	d0f5      	beq.n	34019618 <RCCEx_GetLPTIMCLKFreq+0xe0>
3401962c:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
34019630:	4298      	cmp	r0, r3
34019632:	d011      	beq.n	34019658 <RCCEx_GetLPTIMCLKFreq+0x120>
34019634:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34019638:	e7ec      	b.n	34019614 <RCCEx_GetLPTIMCLKFreq+0xdc>
3401963a:	4b2c      	ldr	r3, [pc, #176]	@ (340196ec <RCCEx_GetLPTIMCLKFreq+0x1b4>)
3401963c:	4298      	cmp	r0, r3
3401963e:	d015      	beq.n	3401966c <RCCEx_GetLPTIMCLKFreq+0x134>
34019640:	d81b      	bhi.n	3401967a <RCCEx_GetLPTIMCLKFreq+0x142>
34019642:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34019646:	4298      	cmp	r0, r3
34019648:	d006      	beq.n	34019658 <RCCEx_GetLPTIMCLKFreq+0x120>
3401964a:	d80c      	bhi.n	34019666 <RCCEx_GetLPTIMCLKFreq+0x12e>
3401964c:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019650:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34019654:	4298      	cmp	r0, r3
34019656:	d18e      	bne.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34019658:	4b20      	ldr	r3, [pc, #128]	@ (340196dc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3401965a:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
3401965c:	07db      	lsls	r3, r3, #31
3401965e:	d58a      	bpl.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
34019660:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
34019664:	e788      	b.n	34019578 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34019666:	4b22      	ldr	r3, [pc, #136]	@ (340196f0 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
34019668:	4298      	cmp	r0, r3
3401966a:	d184      	bne.n	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401966c:	f7fb fd60 	bl	34015130 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34019670:	4b1a      	ldr	r3, [pc, #104]	@ (340196dc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34019672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019674:	f3c3 6301 	ubfx	r3, r3, #24, #2
34019678:	e00f      	b.n	3401969a <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401967a:	4b1e      	ldr	r3, [pc, #120]	@ (340196f4 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
3401967c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34019680:	429a      	cmp	r2, r3
34019682:	d0f3      	beq.n	3401966c <RCCEx_GetLPTIMCLKFreq+0x134>
34019684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34019688:	e7ee      	b.n	34019668 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401968a:	f7fb fd51 	bl	34015130 <HAL_RCC_GetSysClockFreq>
3401968e:	f7fb fe5b 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019692:	4b12      	ldr	r3, [pc, #72]	@ (340196dc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34019694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019696:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3401969a:	40d8      	lsrs	r0, r3
      break;
3401969c:	e76c      	b.n	34019578 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401969e:	f7fb fd47 	bl	34015130 <HAL_RCC_GetSysClockFreq>
340196a2:	f7fb fe51 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340196a6:	4b0d      	ldr	r3, [pc, #52]	@ (340196dc <RCCEx_GetLPTIMCLKFreq+0x1a4>)
340196a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
340196aa:	f3c3 3302 	ubfx	r3, r3, #12, #3
340196ae:	e7f4      	b.n	3401969a <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
340196b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340196b4:	f47f af5f 	bne.w	34019576 <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340196b8:	f7fe ff58 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
340196bc:	e791      	b.n	340195e2 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340196be:	f7fe fed5 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
340196c2:	e78e      	b.n	340195e2 <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340196c4:	f7fe ff12 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
340196c8:	e78b      	b.n	340195e2 <RCCEx_GetLPTIMCLKFreq+0xaa>
340196ca:	bf00      	nop
340196cc:	0702102c 	.word	0x0702102c
340196d0:	0701102c 	.word	0x0701102c
340196d4:	0702082c 	.word	0x0702082c
340196d8:	07020c2c 	.word	0x07020c2c
340196dc:	56028000 	.word	0x56028000
340196e0:	07040c2c 	.word	0x07040c2c
340196e4:	07030c2c 	.word	0x07030c2c
340196e8:	0703182c 	.word	0x0703182c
340196ec:	07050c2c 	.word	0x07050c2c
340196f0:	0705082c 	.word	0x0705082c
340196f4:	0705102c 	.word	0x0705102c

340196f8 <HAL_RCCEx_GetPeriphCLKFreq>:
{
340196f8:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
340196fa:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
340196fe:	430b      	orrs	r3, r1
34019700:	f000 8447 	beq.w	34019f92 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
34019704:	4bbf      	ldr	r3, [pc, #764]	@ (34019a04 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
34019706:	4298      	cmp	r0, r3
34019708:	f171 0300 	sbcs.w	r3, r1, #0
3401970c:	f080 80e6 	bcs.w	340198dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
34019710:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
34019714:	430b      	orrs	r3, r1
34019716:	f000 835b 	beq.w	34019dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
3401971a:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3401971e:	f171 0300 	sbcs.w	r3, r1, #0
34019722:	d26a      	bcs.n	340197fa <HAL_RCCEx_GetPeriphCLKFreq+0x102>
34019724:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34019728:	430b      	orrs	r3, r1
3401972a:	f000 82b9 	beq.w	34019ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
3401972e:	f240 2301 	movw	r3, #513	@ 0x201
34019732:	4298      	cmp	r0, r3
34019734:	f171 0300 	sbcs.w	r3, r1, #0
34019738:	d224      	bcs.n	34019784 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
3401973a:	2809      	cmp	r0, #9
3401973c:	f171 0300 	sbcs.w	r3, r1, #0
34019740:	d215      	bcs.n	3401976e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
34019742:	ea50 0301 	orrs.w	r3, r0, r1
34019746:	d01b      	beq.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34019748:	3801      	subs	r0, #1
3401974a:	f141 31ff 	adc.w	r1, r1, #4294967295
3401974e:	2808      	cmp	r0, #8
34019750:	f171 0100 	sbcs.w	r1, r1, #0
34019754:	d214      	bcs.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34019756:	2807      	cmp	r0, #7
34019758:	d812      	bhi.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3401975a:	e8df f010 	tbh	[pc, r0, lsl #1]
3401975e:	01a6      	.short	0x01a6
34019760:	0011020f 	.word	0x0011020f
34019764:	00110285 	.word	0x00110285
34019768:	00110011 	.word	0x00110011
3401976c:	0235      	.short	0x0235
3401976e:	f1a0 0310 	sub.w	r3, r0, #16
34019772:	430b      	orrs	r3, r1
34019774:	f000 8242 	beq.w	34019bfc <HAL_RCCEx_GetPeriphCLKFreq+0x504>
34019778:	3820      	subs	r0, #32
3401977a:	4308      	orrs	r0, r1
3401977c:	f000 8268 	beq.w	34019c50 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34019780:	2000      	movs	r0, #0
34019782:	e219      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34019784:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
34019788:	430b      	orrs	r3, r1
3401978a:	f000 831d 	beq.w	34019dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
3401978e:	f242 0301 	movw	r3, #8193	@ 0x2001
34019792:	4298      	cmp	r0, r3
34019794:	f171 0300 	sbcs.w	r3, r1, #0
34019798:	d224      	bcs.n	340197e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
3401979a:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
3401979e:	430b      	orrs	r3, r1
340197a0:	f000 82df 	beq.w	34019d62 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
340197a4:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
340197a8:	430b      	orrs	r3, r1
340197aa:	f000 8308 	beq.w	34019dbe <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
340197ae:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
340197b2:	4308      	orrs	r0, r1
340197b4:	d1e4      	bne.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
340197b6:	4d94      	ldr	r5, [pc, #592]	@ (34019a08 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
340197b8:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
340197bc:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
340197c0:	2b02      	cmp	r3, #2
340197c2:	f000 82c1 	beq.w	34019d48 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
340197c6:	2b03      	cmp	r3, #3
340197c8:	f000 8256 	beq.w	34019c78 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
340197cc:	2b01      	cmp	r3, #1
340197ce:	f000 824b 	beq.w	34019c68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340197d2:	f7fb fcad 	bl	34015130 <HAL_RCC_GetSysClockFreq>
340197d6:	f7fb fdb7 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
340197da:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
340197dc:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340197e0:	40d8      	lsrs	r0, r3
340197e2:	e1e9      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
340197e4:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
340197e8:	430b      	orrs	r3, r1
340197ea:	f000 82ef 	beq.w	34019dcc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
340197ee:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
340197f2:	4308      	orrs	r0, r1
340197f4:	d1c4      	bne.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
340197f6:	4885      	ldr	r0, [pc, #532]	@ (34019a0c <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
340197f8:	e2e2      	b.n	34019dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
340197fa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
340197fe:	430b      	orrs	r3, r1
34019800:	f000 82f6 	beq.w	34019df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
34019804:	4b82      	ldr	r3, [pc, #520]	@ (34019a10 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
34019806:	4298      	cmp	r0, r3
34019808:	f171 0300 	sbcs.w	r3, r1, #0
3401980c:	d224      	bcs.n	34019858 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
3401980e:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
34019812:	430b      	orrs	r3, r1
34019814:	f000 82e8 	beq.w	34019de8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
34019818:	4b7e      	ldr	r3, [pc, #504]	@ (34019a14 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
3401981a:	4298      	cmp	r0, r3
3401981c:	f171 0300 	sbcs.w	r3, r1, #0
34019820:	d20f      	bcs.n	34019842 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
34019822:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
34019826:	430b      	orrs	r3, r1
34019828:	f000 82d7 	beq.w	34019dda <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3401982c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
34019830:	430b      	orrs	r3, r1
34019832:	f000 82d7 	beq.w	34019de4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34019836:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
3401983a:	4308      	orrs	r0, r1
3401983c:	d1a0      	bne.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401983e:	4876      	ldr	r0, [pc, #472]	@ (34019a18 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
34019840:	e2c7      	b.n	34019dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
34019842:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
34019846:	430b      	orrs	r3, r1
34019848:	f000 82d0 	beq.w	34019dec <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
3401984c:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
34019850:	4308      	orrs	r0, r1
34019852:	d195      	bne.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34019854:	4871      	ldr	r0, [pc, #452]	@ (34019a1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
34019856:	e2c1      	b.n	34019ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
34019858:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
3401985c:	430b      	orrs	r3, r1
3401985e:	f000 834d 	beq.w	34019efc <HAL_RCCEx_GetPeriphCLKFreq+0x804>
34019862:	4b6f      	ldr	r3, [pc, #444]	@ (34019a20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
34019864:	4298      	cmp	r0, r3
34019866:	f171 0300 	sbcs.w	r3, r1, #0
3401986a:	d228      	bcs.n	340198be <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
3401986c:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
34019870:	430b      	orrs	r3, r1
34019872:	f000 8302 	beq.w	34019e7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
34019876:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
3401987a:	4308      	orrs	r0, r1
3401987c:	d180      	bne.n	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
3401987e:	4d62      	ldr	r5, [pc, #392]	@ (34019a08 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34019880:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
34019884:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34019888:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401988c:	f000 8195 	beq.w	34019bba <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34019890:	f200 8319 	bhi.w	34019ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
34019894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34019898:	f000 831f 	beq.w	34019eda <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
3401989c:	f240 81e1 	bls.w	34019c62 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
340198a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340198a4:	f47f af6c 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340198a8:	f7fb fd06 	bl	340152b8 <LL_RCC_IC8_IsEnabled>
340198ac:	2800      	cmp	r0, #0
340198ae:	f43f af67 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
340198b2:	f7fb fd09 	bl	340152c8 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
340198b6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
340198ba:	4604      	mov	r4, r0
340198bc:	e191      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
340198be:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
340198c2:	430b      	orrs	r3, r1
340198c4:	f000 8344 	beq.w	34019f50 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
340198c8:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
340198cc:	4308      	orrs	r0, r1
340198ce:	f47f af57 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
340198d2:	4854      	ldr	r0, [pc, #336]	@ (34019a24 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
340198d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
340198d8:	f7ff bbd6 	b.w	34019088 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
340198dc:	2300      	movs	r3, #0
340198de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
340198e2:	4291      	cmp	r1, r2
340198e4:	bf08      	it	eq
340198e6:	4298      	cmpeq	r0, r3
340198e8:	f000 836f 	beq.w	34019fca <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
340198ec:	4283      	cmp	r3, r0
340198ee:	418a      	sbcs	r2, r1
340198f0:	d35f      	bcc.n	340199b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
340198f2:	2210      	movs	r2, #16
340198f4:	4291      	cmp	r1, r2
340198f6:	bf08      	it	eq
340198f8:	4298      	cmpeq	r0, r3
340198fa:	f000 8359 	beq.w	34019fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
340198fe:	4283      	cmp	r3, r0
34019900:	418a      	sbcs	r2, r1
34019902:	d329      	bcc.n	34019958 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
34019904:	2202      	movs	r2, #2
34019906:	4291      	cmp	r1, r2
34019908:	bf08      	it	eq
3401990a:	4298      	cmpeq	r0, r3
3401990c:	f000 8349 	beq.w	34019fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
34019910:	4283      	cmp	r3, r0
34019912:	418a      	sbcs	r2, r1
34019914:	d314      	bcc.n	34019940 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
34019916:	4299      	cmp	r1, r3
34019918:	bf08      	it	eq
3401991a:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
3401991e:	f000 833a 	beq.w	34019f96 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
34019922:	2901      	cmp	r1, #1
34019924:	bf08      	it	eq
34019926:	4298      	cmpeq	r0, r3
34019928:	f000 8337 	beq.w	34019f9a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
3401992c:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
34019930:	4308      	orrs	r0, r1
34019932:	f47f af25 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34019936:	483c      	ldr	r0, [pc, #240]	@ (34019a28 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
34019938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3401993c:	f7ff bcd8 	b.w	340192f0 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
34019940:	2904      	cmp	r1, #4
34019942:	bf08      	it	eq
34019944:	4298      	cmpeq	r0, r3
34019946:	f000 8331 	beq.w	34019fac <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
3401994a:	2908      	cmp	r1, #8
3401994c:	bf08      	it	eq
3401994e:	4298      	cmpeq	r0, r3
34019950:	f47f af16 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34019954:	4835      	ldr	r0, [pc, #212]	@ (34019a2c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
34019956:	e325      	b.n	34019fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34019958:	f44f 7200 	mov.w	r2, #512	@ 0x200
3401995c:	4291      	cmp	r1, r2
3401995e:	bf08      	it	eq
34019960:	4298      	cmpeq	r0, r3
34019962:	f000 832e 	beq.w	34019fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
34019966:	4283      	cmp	r3, r0
34019968:	418a      	sbcs	r2, r1
3401996a:	d311      	bcc.n	34019990 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
3401996c:	2940      	cmp	r1, #64	@ 0x40
3401996e:	bf08      	it	eq
34019970:	4298      	cmpeq	r0, r3
34019972:	f000 831f 	beq.w	34019fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
34019976:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3401997a:	bf08      	it	eq
3401997c:	4298      	cmpeq	r0, r3
3401997e:	f000 831b 	beq.w	34019fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
34019982:	2920      	cmp	r1, #32
34019984:	bf08      	it	eq
34019986:	2800      	cmpeq	r0, #0
34019988:	f47f aefa 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3401998c:	4828      	ldr	r0, [pc, #160]	@ (34019a30 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
3401998e:	e309      	b.n	34019fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
34019990:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
34019994:	bf08      	it	eq
34019996:	4298      	cmpeq	r0, r3
34019998:	f000 8315 	beq.w	34019fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
3401999c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
340199a0:	bf08      	it	eq
340199a2:	4298      	cmpeq	r0, r3
340199a4:	f47f aeec 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
340199a8:	4822      	ldr	r0, [pc, #136]	@ (34019a34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
340199aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
340199ae:	f7ff b919 	b.w	34018be4 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
340199b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
340199b6:	4291      	cmp	r1, r2
340199b8:	bf08      	it	eq
340199ba:	4298      	cmpeq	r0, r3
340199bc:	f000 830f 	beq.w	34019fde <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
340199c0:	4283      	cmp	r3, r0
340199c2:	418a      	sbcs	r2, r1
340199c4:	d34b      	bcc.n	34019a5e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
340199c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
340199ca:	4291      	cmp	r1, r2
340199cc:	bf08      	it	eq
340199ce:	4298      	cmpeq	r0, r3
340199d0:	f000 8301 	beq.w	34019fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
340199d4:	4283      	cmp	r3, r0
340199d6:	418a      	sbcs	r2, r1
340199d8:	d330      	bcc.n	34019a3c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
340199da:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
340199de:	bf08      	it	eq
340199e0:	4298      	cmpeq	r0, r3
340199e2:	f000 82f4 	beq.w	34019fce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
340199e6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
340199ea:	bf08      	it	eq
340199ec:	4298      	cmpeq	r0, r3
340199ee:	f000 82f0 	beq.w	34019fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
340199f2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
340199f6:	bf08      	it	eq
340199f8:	2800      	cmpeq	r0, #0
340199fa:	f47f aec1 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
340199fe:	480e      	ldr	r0, [pc, #56]	@ (34019a38 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
34019a00:	e2db      	b.n	34019fba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
34019a02:	bf00      	nop
34019a04:	20000001 	.word	0x20000001
34019a08:	56028000 	.word	0x56028000
34019a0c:	07000c0c 	.word	0x07000c0c
34019a10:	00800001 	.word	0x00800001
34019a14:	00100001 	.word	0x00100001
34019a18:	0700140c 	.word	0x0700140c
34019a1c:	0700182c 	.word	0x0700182c
34019a20:	04000001 	.word	0x04000001
34019a24:	07001418 	.word	0x07001418
34019a28:	0300001c 	.word	0x0300001c
34019a2c:	07000c20 	.word	0x07000c20
34019a30:	07001420 	.word	0x07001420
34019a34:	07000c30 	.word	0x07000c30
34019a38:	07001430 	.word	0x07001430
  switch (PeriphClk)
34019a3c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
34019a40:	bf08      	it	eq
34019a42:	4298      	cmpeq	r0, r3
34019a44:	f000 82c9 	beq.w	34019fda <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
34019a48:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
34019a4c:	bf08      	it	eq
34019a4e:	4298      	cmpeq	r0, r3
34019a50:	f47f ae96 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34019a54:	48b4      	ldr	r0, [pc, #720]	@ (34019d28 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
34019a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34019a5a:	f7fe bf8d 	b.w	34018978 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
34019a5e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
34019a62:	4291      	cmp	r1, r2
34019a64:	bf08      	it	eq
34019a66:	4298      	cmpeq	r0, r3
34019a68:	f000 82c0 	beq.w	34019fec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
34019a6c:	4283      	cmp	r3, r0
34019a6e:	418a      	sbcs	r2, r1
34019a70:	d30d      	bcc.n	34019a8e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
34019a72:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34019a76:	bf08      	it	eq
34019a78:	4298      	cmpeq	r0, r3
34019a7a:	f000 82b5 	beq.w	34019fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
34019a7e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34019a82:	bf08      	it	eq
34019a84:	4298      	cmpeq	r0, r3
34019a86:	f47f ae7b 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34019a8a:	48a8      	ldr	r0, [pc, #672]	@ (34019d2c <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
34019a8c:	e2a8      	b.n	34019fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
34019a8e:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34019a92:	bf08      	it	eq
34019a94:	4298      	cmpeq	r0, r3
34019a96:	f000 82ae 	beq.w	34019ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
34019a9a:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
34019a9e:	bf08      	it	eq
34019aa0:	4298      	cmpeq	r0, r3
34019aa2:	f47f ae6d 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34019aa6:	48a2      	ldr	r0, [pc, #648]	@ (34019d30 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
34019aa8:	e2a1      	b.n	34019fee <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34019aaa:	4da2      	ldr	r5, [pc, #648]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019aac:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34019ab0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019ab4:	2b40      	cmp	r3, #64	@ 0x40
34019ab6:	d053      	beq.n	34019b60 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34019ab8:	d814      	bhi.n	34019ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
34019aba:	2b20      	cmp	r3, #32
34019abc:	d025      	beq.n	34019b0a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
34019abe:	d805      	bhi.n	34019acc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
34019ac0:	bb03      	cbnz	r3, 34019b04 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019ac2:	f7fb fb35 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34019ac6:	f7fb fc3f 	bl	34015348 <RCCEx_GetHCLKFreq>
      break;
34019aca:	e002      	b.n	34019ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019acc:	2b30      	cmp	r3, #48	@ 0x30
34019ace:	d034      	beq.n	34019b3a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34019ad0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34019ad2:	4b98      	ldr	r3, [pc, #608]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019ad4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34019ad8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34019adc:	3301      	adds	r3, #1
34019ade:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
34019ae2:	e069      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019ae4:	2b60      	cmp	r3, #96	@ 0x60
34019ae6:	d047      	beq.n	34019b78 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
34019ae8:	2b70      	cmp	r3, #112	@ 0x70
34019aea:	d03f      	beq.n	34019b6c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
34019aec:	2b50      	cmp	r3, #80	@ 0x50
34019aee:	d1ef      	bne.n	34019ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34019af0:	f7fb fb98 	bl	34015224 <LL_RCC_HSI_IsReady>
34019af4:	2800      	cmp	r0, #0
34019af6:	d0eb      	beq.n	34019ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019af8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019afa:	488f      	ldr	r0, [pc, #572]	@ (34019d38 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
34019afc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34019b00:	40d8      	lsrs	r0, r3
      break;
34019b02:	e7e6      	b.n	34019ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019b04:	f7fe fd72 	bl	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34019b08:	e7e3      	b.n	34019ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34019b0a:	f7fb fbc3 	bl	34015294 <LL_RCC_IC7_IsEnabled>
34019b0e:	2800      	cmp	r0, #0
34019b10:	d0de      	beq.n	34019ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
34019b12:	f7fb fbc7 	bl	340152a4 <LL_RCC_IC7_GetDivider>
34019b16:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34019b18:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34019b1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34019b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019b24:	d019      	beq.n	34019b5a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
34019b26:	d812      	bhi.n	34019b4e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
34019b28:	b913      	cbnz	r3, 34019b30 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019b2a:	f7fe fc5f 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
34019b2e:	e001      	b.n	34019b34 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019b30:	f7fe fc9c 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34019b34:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019b38:	e7cb      	b.n	34019ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34019b3a:	f7fb fbbd 	bl	340152b8 <LL_RCC_IC8_IsEnabled>
34019b3e:	2800      	cmp	r0, #0
34019b40:	d0c6      	beq.n	34019ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
34019b42:	f7fb fbc1 	bl	340152c8 <LL_RCC_IC8_GetDivider>
34019b46:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34019b4a:	4604      	mov	r4, r0
34019b4c:	e7e6      	b.n	34019b1c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
34019b4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019b52:	d1bd      	bne.n	34019ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019b54:	f7fe fd0a 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34019b58:	e7ec      	b.n	34019b34 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019b5a:	f7fe fcc7 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34019b5e:	e7e9      	b.n	34019b34 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
34019b60:	f7fb fb68 	bl	34015234 <LL_RCC_MSI_IsReady>
34019b64:	2800      	cmp	r0, #0
34019b66:	d0b3      	beq.n	34019ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
34019b68:	4874      	ldr	r0, [pc, #464]	@ (34019d3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34019b6a:	e7b2      	b.n	34019ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34019b6c:	f7fb fae0 	bl	34015130 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34019b70:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34019b72:	f3c3 6301 	ubfx	r3, r3, #24, #2
34019b76:	e7c3      	b.n	34019b00 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34019b78:	4871      	ldr	r0, [pc, #452]	@ (34019d40 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
34019b7a:	e7aa      	b.n	34019ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34019b7c:	4d6d      	ldr	r5, [pc, #436]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019b7e:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34019b82:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
34019b86:	3b01      	subs	r3, #1
34019b88:	2b06      	cmp	r3, #6
34019b8a:	f200 80f5 	bhi.w	34019d78 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
34019b8e:	a201      	add	r2, pc, #4	@ (adr r2, 34019b94 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
34019b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34019b94:	34019c69 	.word	0x34019c69
34019b98:	34019edb 	.word	0x34019edb
34019b9c:	340198a9 	.word	0x340198a9
34019ba0:	34019bbb 	.word	0x34019bbb
34019ba4:	34019c29 	.word	0x34019c29
34019ba8:	34019ffb 	.word	0x34019ffb
34019bac:	34019ef1 	.word	0x34019ef1
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019bb0:	f7fe fc5c 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34019bb4:	fbb0 f0f4 	udiv	r0, r0, r4
}
34019bb8:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34019bba:	f7fb fb3b 	bl	34015234 <LL_RCC_MSI_IsReady>
34019bbe:	2800      	cmp	r0, #0
34019bc0:	f43f adde 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34019bc4:	485d      	ldr	r0, [pc, #372]	@ (34019d3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34019bc6:	e7f7      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34019bc8:	4b5a      	ldr	r3, [pc, #360]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019bca:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019bce:	0395      	lsls	r5, r2, #14
34019bd0:	f57f add6 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34019bd4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34019bd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34019bdc:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019be0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34019be2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34019be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019bea:	f000 81ae 	beq.w	34019f4a <HAL_RCCEx_GetPeriphCLKFreq+0x852>
34019bee:	f200 81a5 	bhi.w	34019f3c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34019bf2:	2b00      	cmp	r3, #0
34019bf4:	d1dc      	bne.n	34019bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019bf6:	f7fe fbf9 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
34019bfa:	e7db      	b.n	34019bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34019bfc:	4d4d      	ldr	r5, [pc, #308]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019bfe:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
34019c02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34019c06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34019c0a:	d014      	beq.n	34019c36 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34019c0c:	d808      	bhi.n	34019c20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34019c0e:	bb5b      	cbnz	r3, 34019c68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019c10:	f7fb fa8e 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34019c14:	f7fb fb98 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34019c18:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34019c1a:	f3c3 4302 	ubfx	r3, r3, #16, #3
34019c1e:	e5df      	b.n	340197e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34019c20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34019c24:	f47f adac 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34019c28:	f7fb fafc 	bl	34015224 <LL_RCC_HSI_IsReady>
34019c2c:	2800      	cmp	r0, #0
34019c2e:	f43f ada7 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019c32:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34019c34:	e136      	b.n	34019ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34019c36:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34019c3a:	03dc      	lsls	r4, r3, #15
34019c3c:	f57f ada0 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34019c40:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34019c44:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34019c48:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019c4c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34019c4e:	e7c8      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34019c50:	4a38      	ldr	r2, [pc, #224]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019c52:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34019c56:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34019c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34019c5e:	d012      	beq.n	34019c86 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
34019c60:	d806      	bhi.n	34019c70 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34019c62:	2b00      	cmp	r3, #0
34019c64:	f000 8088 	beq.w	34019d78 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
34019c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019c6c:	f7fe bcbe 	b.w	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34019c70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34019c74:	f47f ad84 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
34019c78:	f7fb facc 	bl	34015214 <LL_RCC_HSE_IsReady>
34019c7c:	2800      	cmp	r0, #0
34019c7e:	f43f ad7f 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
34019c82:	4830      	ldr	r0, [pc, #192]	@ (34019d44 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34019c84:	e798      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34019c86:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34019c8a:	0518      	lsls	r0, r3, #20
34019c8c:	f57f ad78 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34019c90:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34019c94:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34019c98:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019c9c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34019c9e:	e7a0      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34019ca0:	4a24      	ldr	r2, [pc, #144]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019ca2:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34019ca6:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34019caa:	2b02      	cmp	r3, #2
34019cac:	d010      	beq.n	34019cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
34019cae:	2b03      	cmp	r3, #3
34019cb0:	d034      	beq.n	34019d1c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
34019cb2:	2b01      	cmp	r3, #1
34019cb4:	d009      	beq.n	34019cca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019cb6:	f7fb fa3b 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34019cba:	f7fb fb45 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34019cbe:	4b1d      	ldr	r3, [pc, #116]	@ (34019d34 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34019cc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34019cc4:	f3c3 1303 	ubfx	r3, r3, #4, #4
34019cc8:	e708      	b.n	34019adc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019cca:	f7fe fc8f 	bl	340185ec <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34019cce:	e7f6      	b.n	34019cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34019cd0:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34019cd4:	04d9      	lsls	r1, r3, #19
34019cd6:	d516      	bpl.n	34019d06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34019cd8:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34019cdc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34019ce0:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34019ce4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
34019ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34019cec:	f100 0401 	add.w	r4, r0, #1
34019cf0:	d00e      	beq.n	34019d10 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
34019cf2:	d805      	bhi.n	34019d00 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34019cf4:	b94b      	cbnz	r3, 34019d0a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019cf6:	f7fe fb79 	bl	340183ec <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34019cfa:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019cfe:	e7de      	b.n	34019cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
34019d00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019d04:	d007      	beq.n	34019d16 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
34019d06:	2000      	movs	r0, #0
34019d08:	e7d9      	b.n	34019cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019d0a:	f7fe fbaf 	bl	3401846c <HAL_RCCEx_GetPLL2CLKFreq>
34019d0e:	e7f4      	b.n	34019cfa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019d10:	f7fe fbec 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34019d14:	e7f1      	b.n	34019cfa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019d16:	f7fe fc29 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34019d1a:	e7ee      	b.n	34019cfa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
34019d1c:	f7fb fa7a 	bl	34015214 <LL_RCC_HSE_IsReady>
34019d20:	2800      	cmp	r0, #0
34019d22:	d0f0      	beq.n	34019d06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34019d24:	4807      	ldr	r0, [pc, #28]	@ (34019d44 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34019d26:	e7ca      	b.n	34019cbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34019d28:	01001014 	.word	0x01001014
34019d2c:	03001414 	.word	0x03001414
34019d30:	03000814 	.word	0x03000814
34019d34:	56028000 	.word	0x56028000
34019d38:	03d09000 	.word	0x03d09000
34019d3c:	003d0900 	.word	0x003d0900
34019d40:	00bb8000 	.word	0x00bb8000
34019d44:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34019d48:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34019d4c:	035b      	lsls	r3, r3, #13
34019d4e:	f57f ad17 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34019d52:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34019d56:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34019d5a:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019d5e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34019d60:	e73f      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34019d62:	4ba7      	ldr	r3, [pc, #668]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019d64:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
34019d68:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34019d6c:	2a20      	cmp	r2, #32
34019d6e:	d019      	beq.n	34019da4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
34019d70:	d808      	bhi.n	34019d84 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
34019d72:	2a00      	cmp	r2, #0
34019d74:	f47f af78 	bne.w	34019c68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019d78:	f7fb f9da 	bl	34015130 <HAL_RCC_GetSysClockFreq>
}
34019d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019d80:	f7fb bae2 	b.w	34015348 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34019d84:	2a30      	cmp	r2, #48	@ 0x30
34019d86:	f47f acfb 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34019d8a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019d8e:	0714      	lsls	r4, r2, #28
34019d90:	f57f acf6 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019d94:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34019d98:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019d9c:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019da0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34019da2:	e71e      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34019da4:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019da8:	0755      	lsls	r5, r2, #29
34019daa:	f57f ace9 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34019dae:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34019db2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34019db6:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019dba:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34019dbc:	e711      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34019dbe:	4891      	ldr	r0, [pc, #580]	@ (3401a004 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
34019dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34019dc4:	f7ff bafa 	b.w	340193bc <RCCEx_GetI2CCLKFreq>
34019dc8:	488f      	ldr	r0, [pc, #572]	@ (3401a008 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34019dca:	e7f9      	b.n	34019dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34019dcc:	488f      	ldr	r0, [pc, #572]	@ (3401a00c <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34019dce:	e7f7      	b.n	34019dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34019dd0:	488f      	ldr	r0, [pc, #572]	@ (3401a010 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
34019dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34019dd6:	f7ff b9ff 	b.w	340191d8 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34019dda:	488e      	ldr	r0, [pc, #568]	@ (3401a014 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
34019ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34019de0:	f7ff bbaa 	b.w	34019538 <RCCEx_GetLPTIMCLKFreq>
34019de4:	488c      	ldr	r0, [pc, #560]	@ (3401a018 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34019de6:	e7f9      	b.n	34019ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34019de8:	488c      	ldr	r0, [pc, #560]	@ (3401a01c <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34019dea:	e7f7      	b.n	34019ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34019dec:	488c      	ldr	r0, [pc, #560]	@ (3401a020 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34019dee:	e7f5      	b.n	34019ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34019df0:	4a83      	ldr	r2, [pc, #524]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019df2:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34019df6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34019dfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34019dfe:	d031      	beq.n	34019e64 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
34019e00:	d812      	bhi.n	34019e28 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
34019e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34019e06:	f43f af2f 	beq.w	34019c68 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
34019e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34019e0e:	d01d      	beq.n	34019e4c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
34019e10:	2b00      	cmp	r3, #0
34019e12:	f47f acb5 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019e16:	f7fb f98b 	bl	34015130 <HAL_RCC_GetSysClockFreq>
34019e1a:	f7fb fa95 	bl	34015348 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34019e1e:	4b78      	ldr	r3, [pc, #480]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34019e22:	f3c3 3302 	ubfx	r3, r3, #12, #3
34019e26:	e4db      	b.n	340197e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34019e28:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34019e2c:	f43f aec5 	beq.w	34019bba <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34019e30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34019e34:	d02f      	beq.n	34019e96 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
34019e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34019e3a:	f47f aca1 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34019e3e:	f7fb fa01 	bl	34015244 <LL_RCC_LSE_IsReady>
34019e42:	3800      	subs	r0, #0
34019e44:	bf18      	it	ne
34019e46:	2001      	movne	r0, #1
34019e48:	03c0      	lsls	r0, r0, #15
34019e4a:	e6b5      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34019e4c:	f7fb fa46 	bl	340152dc <LL_RCC_IC9_IsEnabled>
34019e50:	2800      	cmp	r0, #0
34019e52:	f43f ac95 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34019e56:	f7fb fa49 	bl	340152ec <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34019e5a:	4b69      	ldr	r3, [pc, #420]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019e5c:	4604      	mov	r4, r0
34019e5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34019e62:	e6be      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34019e64:	f7fb fa4c 	bl	34015300 <LL_RCC_IC14_IsEnabled>
34019e68:	2800      	cmp	r0, #0
34019e6a:	f43f ac89 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34019e6e:	f7fb fa4f 	bl	34015310 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34019e72:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34019e76:	4604      	mov	r4, r0
34019e78:	e6b3      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34019e7a:	4d61      	ldr	r5, [pc, #388]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019e7c:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34019e80:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34019e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34019e88:	d010      	beq.n	34019eac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
34019e8a:	f67f aec0 	bls.w	34019c0e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
34019e8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34019e92:	f47f ac75 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34019e96:	f7fb f9c5 	bl	34015224 <LL_RCC_HSI_IsReady>
34019e9a:	2800      	cmp	r0, #0
34019e9c:	f43f ac70 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019ea0:	4b57      	ldr	r3, [pc, #348]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019ea4:	485f      	ldr	r0, [pc, #380]	@ (3401a024 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34019ea6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34019eaa:	e499      	b.n	340197e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34019eac:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34019eb0:	0418      	lsls	r0, r3, #16
34019eb2:	f57f ac65 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34019eb6:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34019eba:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34019ebe:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019ec2:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34019ec4:	e68d      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34019ec6:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34019eca:	f000 8096 	beq.w	34019ffa <HAL_RCCEx_GetPeriphCLKFreq+0x902>
34019ece:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34019ed2:	d00d      	beq.n	34019ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
34019ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34019ed8:	e6a4      	b.n	34019c24 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34019eda:	f7fb f9db 	bl	34015294 <LL_RCC_IC7_IsEnabled>
34019ede:	2800      	cmp	r0, #0
34019ee0:	f43f ac4e 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34019ee4:	f7fb f9de 	bl	340152a4 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34019ee8:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34019eec:	4604      	mov	r4, r0
34019eee:	e678      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34019ef0:	f7fb f91e 	bl	34015130 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34019ef4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34019ef6:	f3c3 6301 	ubfx	r3, r3, #24, #2
34019efa:	e471      	b.n	340197e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34019efc:	4a40      	ldr	r2, [pc, #256]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019efe:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34019f02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34019f06:	2b20      	cmp	r3, #32
34019f08:	d00b      	beq.n	34019f22 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
34019f0a:	f67f aeaa 	bls.w	34019c62 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34019f0e:	2b30      	cmp	r3, #48	@ 0x30
34019f10:	f47f ac36 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34019f14:	f7fb f986 	bl	34015224 <LL_RCC_HSI_IsReady>
34019f18:	2800      	cmp	r0, #0
34019f1a:	f43f ac31 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019f1e:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34019f20:	e7c0      	b.n	34019ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34019f22:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34019f26:	0319      	lsls	r1, r3, #12
34019f28:	f57f ac2a 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34019f2c:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34019f30:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34019f34:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019f38:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34019f3a:	e652      	b.n	34019be2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
34019f3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019f40:	f47f ac1e 	bne.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019f44:	f7fe fb12 	bl	3401856c <HAL_RCCEx_GetPLL4CLKFreq>
34019f48:	e634      	b.n	34019bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019f4a:	f7fe facf 	bl	340184ec <HAL_RCCEx_GetPLL3CLKFreq>
34019f4e:	e631      	b.n	34019bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34019f50:	4a2b      	ldr	r2, [pc, #172]	@ (3401a000 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34019f52:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34019f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34019f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34019f5e:	d005      	beq.n	34019f6c <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34019f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34019f64:	d009      	beq.n	34019f7a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34019f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34019f6a:	e766      	b.n	34019e3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34019f6c:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34019f6e:	07db      	lsls	r3, r3, #31
34019f70:	f57f ac06 	bpl.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34019f74:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34019f78:	e61e      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
34019f7a:	f7fb f94b 	bl	34015214 <LL_RCC_HSE_IsReady>
34019f7e:	2800      	cmp	r0, #0
34019f80:	f43f abfe 	beq.w	34019780 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34019f84:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34019f88:	4827      	ldr	r0, [pc, #156]	@ (3401a028 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34019f8a:	f3c3 3305 	ubfx	r3, r3, #12, #6
34019f8e:	3301      	adds	r3, #1
34019f90:	e5a5      	b.n	34019ade <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34019f92:	4826      	ldr	r0, [pc, #152]	@ (3401a02c <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34019f94:	e49e      	b.n	340198d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34019f96:	4826      	ldr	r0, [pc, #152]	@ (3401a030 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34019f98:	e4ce      	b.n	34019938 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
34019f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34019f9e:	f7fe bbab 	b.w	340186f8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34019fa2:	4824      	ldr	r0, [pc, #144]	@ (3401a034 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
34019fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34019fa8:	f7fe bf30 	b.w	34018e0c <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34019fac:	4822      	ldr	r0, [pc, #136]	@ (3401a038 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34019fae:	e7f9      	b.n	34019fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34019fb0:	4822      	ldr	r0, [pc, #136]	@ (3401a03c <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34019fb2:	e7f7      	b.n	34019fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34019fb4:	4822      	ldr	r0, [pc, #136]	@ (3401a040 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34019fb6:	e7f5      	b.n	34019fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34019fb8:	4822      	ldr	r0, [pc, #136]	@ (3401a044 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
34019fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34019fbe:	f7fe bd0d 	b.w	340189dc <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34019fc2:	4821      	ldr	r0, [pc, #132]	@ (3401a048 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
34019fc4:	e7f9      	b.n	34019fba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34019fc6:	4821      	ldr	r0, [pc, #132]	@ (3401a04c <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34019fc8:	e7f7      	b.n	34019fba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34019fca:	4821      	ldr	r0, [pc, #132]	@ (3401a050 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34019fcc:	e4ed      	b.n	340199aa <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34019fce:	4821      	ldr	r0, [pc, #132]	@ (3401a054 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34019fd0:	e4eb      	b.n	340199aa <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34019fd2:	4821      	ldr	r0, [pc, #132]	@ (3401a058 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
34019fd4:	e4e9      	b.n	340199aa <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34019fd6:	4821      	ldr	r0, [pc, #132]	@ (3401a05c <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34019fd8:	e4e7      	b.n	340199aa <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34019fda:	4821      	ldr	r0, [pc, #132]	@ (3401a060 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34019fdc:	e7ed      	b.n	34019fba <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34019fde:	4821      	ldr	r0, [pc, #132]	@ (3401a064 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
34019fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34019fe4:	f7fe bc62 	b.w	340188ac <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34019fe8:	481f      	ldr	r0, [pc, #124]	@ (3401a068 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34019fea:	e534      	b.n	34019a56 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34019fec:	481f      	ldr	r0, [pc, #124]	@ (3401a06c <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
34019fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34019ff2:	f7fe bbe1 	b.w	340187b8 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34019ff6:	481e      	ldr	r0, [pc, #120]	@ (3401a070 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34019ff8:	e7f9      	b.n	34019fee <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34019ffa:	481e      	ldr	r0, [pc, #120]	@ (3401a074 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34019ffc:	e5dc      	b.n	34019bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
34019ffe:	bf00      	nop
3401a000:	56028000 	.word	0x56028000
3401a004:	0700000c 	.word	0x0700000c
3401a008:	0700040c 	.word	0x0700040c
3401a00c:	0700080c 	.word	0x0700080c
3401a010:	0700100c 	.word	0x0700100c
3401a014:	0700082c 	.word	0x0700082c
3401a018:	07000c2c 	.word	0x07000c2c
3401a01c:	0700102c 	.word	0x0700102c
3401a020:	0700142c 	.word	0x0700142c
3401a024:	03d09000 	.word	0x03d09000
3401a028:	02dc6c00 	.word	0x02dc6c00
3401a02c:	07001818 	.word	0x07001818
3401a030:	0300041c 	.word	0x0300041c
3401a034:	07000420 	.word	0x07000420
3401a038:	07000820 	.word	0x07000820
3401a03c:	07001020 	.word	0x07001020
3401a040:	07001820 	.word	0x07001820
3401a044:	07000030 	.word	0x07000030
3401a048:	07000430 	.word	0x07000430
3401a04c:	07000830 	.word	0x07000830
3401a050:	07001030 	.word	0x07001030
3401a054:	07001830 	.word	0x07001830
3401a058:	07001c30 	.word	0x07001c30
3401a05c:	07000034 	.word	0x07000034
3401a060:	07000434 	.word	0x07000434
3401a064:	03000c14 	.word	0x03000c14
3401a068:	01001814 	.word	0x01001814
3401a06c:	03000014 	.word	0x03000014
3401a070:	03000414 	.word	0x03000414
3401a074:	00bb8000 	.word	0x00bb8000

3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3401a078:	b538      	push	{r3, r4, r5, lr}
3401a07a:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3401a07c:	460d      	mov	r5, r1
3401a07e:	b921      	cbnz	r1, 3401a08a <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
3401a080:	f240 1111 	movw	r1, #273	@ 0x111
3401a084:	4825      	ldr	r0, [pc, #148]	@ (3401a11c <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a086:	f003 fc7f 	bl	3401d988 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3401a08a:	2c0c      	cmp	r4, #12
3401a08c:	d904      	bls.n	3401a098 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
3401a08e:	f44f 7189 	mov.w	r1, #274	@ 0x112
3401a092:	4822      	ldr	r0, [pc, #136]	@ (3401a11c <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a094:	f003 fc78 	bl	3401d988 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401a098:	682b      	ldr	r3, [r5, #0]
3401a09a:	2b20      	cmp	r3, #32
3401a09c:	d838      	bhi.n	3401a110 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
3401a09e:	2b03      	cmp	r3, #3
3401a0a0:	d82a      	bhi.n	3401a0f8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
3401a0a2:	3b01      	subs	r3, #1
3401a0a4:	2b01      	cmp	r3, #1
3401a0a6:	d82d      	bhi.n	3401a104 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
3401a0a8:	682b      	ldr	r3, [r5, #0]
3401a0aa:	2b80      	cmp	r3, #128	@ 0x80
3401a0ac:	d001      	beq.n	3401a0b2 <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
3401a0ae:	2bff      	cmp	r3, #255	@ 0xff
3401a0b0:	d904      	bls.n	3401a0bc <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
3401a0b2:	f44f 718a 	mov.w	r1, #276	@ 0x114
3401a0b6:	4819      	ldr	r0, [pc, #100]	@ (3401a11c <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a0b8:	f003 fc66 	bl	3401d988 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
3401a0bc:	686b      	ldr	r3, [r5, #4]
3401a0be:	2b03      	cmp	r3, #3
3401a0c0:	d904      	bls.n	3401a0cc <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
3401a0c2:	f240 1115 	movw	r1, #277	@ 0x115
3401a0c6:	4815      	ldr	r0, [pc, #84]	@ (3401a11c <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a0c8:	f003 fc5e 	bl	3401d988 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3401a0cc:	682b      	ldr	r3, [r5, #0]
3401a0ce:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3401a0d2:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3401a0d6:	00a0      	lsls	r0, r4, #2
3401a0d8:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3401a0dc:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3401a0e0:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401a0e4:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3401a0e6:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3401a0ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401a0ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3401a0f2:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
3401a0f6:	bd38      	pop	{r3, r4, r5, pc}
3401a0f8:	4a09      	ldr	r2, [pc, #36]	@ (3401a120 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
3401a0fa:	3b04      	subs	r3, #4
3401a0fc:	fa22 f303 	lsr.w	r3, r2, r3
3401a100:	07db      	lsls	r3, r3, #31
3401a102:	d4d1      	bmi.n	3401a0a8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401a104:	f240 1113 	movw	r1, #275	@ 0x113
3401a108:	4804      	ldr	r0, [pc, #16]	@ (3401a11c <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401a10a:	f003 fc3d 	bl	3401d988 <assert_failed>
3401a10e:	e7cb      	b.n	3401a0a8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401a110:	2b40      	cmp	r3, #64	@ 0x40
3401a112:	d0c9      	beq.n	3401a0a8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401a114:	2b80      	cmp	r3, #128	@ 0x80
3401a116:	d1f5      	bne.n	3401a104 <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
3401a118:	e7c6      	b.n	3401a0a8 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401a11a:	bf00      	nop
3401a11c:	34026bbe 	.word	0x34026bbe
3401a120:	10001011 	.word	0x10001011

3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401a124:	4b38      	ldr	r3, [pc, #224]	@ (3401a208 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
3401a126:	b537      	push	{r0, r1, r2, r4, r5, lr}
3401a128:	4298      	cmp	r0, r3
3401a12a:	4604      	mov	r4, r0
3401a12c:	460d      	mov	r5, r1
3401a12e:	d85c      	bhi.n	3401a1ea <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
3401a130:	3b1e      	subs	r3, #30
3401a132:	4298      	cmp	r0, r3
3401a134:	d83b      	bhi.n	3401a1ae <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
3401a136:	4b35      	ldr	r3, [pc, #212]	@ (3401a20c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
3401a138:	4298      	cmp	r0, r3
3401a13a:	d84b      	bhi.n	3401a1d4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
3401a13c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3401a140:	d23a      	bcs.n	3401a1b8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
3401a142:	4b33      	ldr	r3, [pc, #204]	@ (3401a210 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
3401a144:	4298      	cmp	r0, r3
3401a146:	d840      	bhi.n	3401a1ca <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
3401a148:	1fc2      	subs	r2, r0, #7
3401a14a:	3b22      	subs	r3, #34	@ 0x22
3401a14c:	429a      	cmp	r2, r3
3401a14e:	d937      	bls.n	3401a1c0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3401a150:	2d03      	cmp	r5, #3
3401a152:	d904      	bls.n	3401a15e <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
3401a154:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3401a158:	482e      	ldr	r0, [pc, #184]	@ (3401a214 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3401a15a:	f003 fc15 	bl	3401d988 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a15e:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a160:	0f20      	lsrs	r0, r4, #28
3401a162:	0080      	lsls	r0, r0, #2
3401a164:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3401a168:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3401a16c:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a16e:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a172:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a174:	9b01      	ldr	r3, [sp, #4]
3401a176:	40a2      	lsls	r2, r4
3401a178:	ea23 0302 	bic.w	r3, r3, r2
3401a17c:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a17e:	9901      	ldr	r1, [sp, #4]
3401a180:	f005 0301 	and.w	r3, r5, #1
3401a184:	40a3      	lsls	r3, r4
3401a186:	430b      	orrs	r3, r1
3401a188:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401a18a:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a18c:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401a190:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a192:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a194:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401a196:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401a198:	9b01      	ldr	r3, [sp, #4]
3401a19a:	ea23 0302 	bic.w	r3, r3, r2
3401a19e:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401a1a0:	9b01      	ldr	r3, [sp, #4]
3401a1a2:	4319      	orrs	r1, r3
3401a1a4:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401a1a6:	9b01      	ldr	r3, [sp, #4]
3401a1a8:	6303      	str	r3, [r0, #48]	@ 0x30
}
3401a1aa:	b003      	add	sp, #12
3401a1ac:	bd30      	pop	{r4, r5, pc}
3401a1ae:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3401a1b2:	4b19      	ldr	r3, [pc, #100]	@ (3401a218 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3401a1b4:	3a02      	subs	r2, #2
3401a1b6:	e01d      	b.n	3401a1f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3401a1b8:	4b18      	ldr	r3, [pc, #96]	@ (3401a21c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3401a1ba:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3401a1be:	e019      	b.n	3401a1f4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3401a1c0:	f1a0 0308 	sub.w	r3, r0, #8
3401a1c4:	2b17      	cmp	r3, #23
3401a1c6:	d9c3      	bls.n	3401a150 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a1c8:	e017      	b.n	3401a1fa <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a1ca:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3401a1ce:	3b1c      	subs	r3, #28
3401a1d0:	2b02      	cmp	r3, #2
3401a1d2:	e7f8      	b.n	3401a1c6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3401a1d4:	4b12      	ldr	r3, [pc, #72]	@ (3401a220 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3401a1d6:	4298      	cmp	r0, r3
3401a1d8:	d803      	bhi.n	3401a1e2 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3401a1da:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3401a1de:	d2b7      	bcs.n	3401a150 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a1e0:	e00b      	b.n	3401a1fa <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a1e2:	4b10      	ldr	r3, [pc, #64]	@ (3401a224 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3401a1e4:	4298      	cmp	r0, r3
3401a1e6:	d0b3      	beq.n	3401a150 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a1e8:	e007      	b.n	3401a1fa <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a1ea:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3401a1ee:	2a1e      	cmp	r2, #30
3401a1f0:	d803      	bhi.n	3401a1fa <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401a1f2:	4b0d      	ldr	r3, [pc, #52]	@ (3401a228 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3401a1f4:	40d3      	lsrs	r3, r2
3401a1f6:	07db      	lsls	r3, r3, #31
3401a1f8:	d4aa      	bmi.n	3401a150 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401a1fa:	f240 1173 	movw	r1, #371	@ 0x173
3401a1fe:	4805      	ldr	r0, [pc, #20]	@ (3401a214 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3401a200:	f003 fbc2 	bl	3401d988 <assert_failed>
3401a204:	e7a4      	b.n	3401a150 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401a206:	bf00      	nop
3401a208:	4000001f 	.word	0x4000001f
3401a20c:	2000001e 	.word	0x2000001e
3401a210:	1000001a 	.word	0x1000001a
3401a214:	34026bbe 	.word	0x34026bbe
3401a218:	2e838c0b 	.word	0x2e838c0b
3401a21c:	77dff03b 	.word	0x77dff03b
3401a220:	30000008 	.word	0x30000008
3401a224:	3000000a 	.word	0x3000000a
3401a228:	49deef7f 	.word	0x49deef7f

3401a22c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
3401a22c:	4770      	bx	lr
	...

3401a230 <HAL_TIM_Base_Start>:
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a230:	6803      	ldr	r3, [r0, #0]
{
3401a232:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a234:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
{
3401a238:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a23a:	d07d      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a23c:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401a240:	d07a      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a242:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a246:	d077      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a24c:	d074      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a24e:	4a65      	ldr	r2, [pc, #404]	@ (3401a3e4 <HAL_TIM_Base_Start+0x1b4>)
3401a250:	4293      	cmp	r3, r2
3401a252:	d071      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a254:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a258:	4293      	cmp	r3, r2
3401a25a:	d06d      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a25c:	4a62      	ldr	r2, [pc, #392]	@ (3401a3e8 <HAL_TIM_Base_Start+0x1b8>)
3401a25e:	4293      	cmp	r3, r2
3401a260:	d06a      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a262:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a266:	4293      	cmp	r3, r2
3401a268:	d066      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a26a:	4a60      	ldr	r2, [pc, #384]	@ (3401a3ec <HAL_TIM_Base_Start+0x1bc>)
3401a26c:	4293      	cmp	r3, r2
3401a26e:	d063      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a270:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a274:	4293      	cmp	r3, r2
3401a276:	d05f      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a278:	4a5d      	ldr	r2, [pc, #372]	@ (3401a3f0 <HAL_TIM_Base_Start+0x1c0>)
3401a27a:	4293      	cmp	r3, r2
3401a27c:	d05c      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a27e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a282:	4293      	cmp	r3, r2
3401a284:	d058      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a286:	4a5b      	ldr	r2, [pc, #364]	@ (3401a3f4 <HAL_TIM_Base_Start+0x1c4>)
3401a288:	4293      	cmp	r3, r2
3401a28a:	d055      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a28c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a290:	4293      	cmp	r3, r2
3401a292:	d051      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a294:	4a58      	ldr	r2, [pc, #352]	@ (3401a3f8 <HAL_TIM_Base_Start+0x1c8>)
3401a296:	4293      	cmp	r3, r2
3401a298:	d04e      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a29a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a29e:	4293      	cmp	r3, r2
3401a2a0:	d04a      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2a2:	4a56      	ldr	r2, [pc, #344]	@ (3401a3fc <HAL_TIM_Base_Start+0x1cc>)
3401a2a4:	4293      	cmp	r3, r2
3401a2a6:	d047      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2a8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a2ac:	4293      	cmp	r3, r2
3401a2ae:	d043      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2b0:	4a53      	ldr	r2, [pc, #332]	@ (3401a400 <HAL_TIM_Base_Start+0x1d0>)
3401a2b2:	4293      	cmp	r3, r2
3401a2b4:	d040      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2b6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a2ba:	4293      	cmp	r3, r2
3401a2bc:	d03c      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2be:	4a51      	ldr	r2, [pc, #324]	@ (3401a404 <HAL_TIM_Base_Start+0x1d4>)
3401a2c0:	4293      	cmp	r3, r2
3401a2c2:	d039      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2c4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a2c8:	4293      	cmp	r3, r2
3401a2ca:	d035      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2cc:	4a4e      	ldr	r2, [pc, #312]	@ (3401a408 <HAL_TIM_Base_Start+0x1d8>)
3401a2ce:	4293      	cmp	r3, r2
3401a2d0:	d032      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2d2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a2d6:	4293      	cmp	r3, r2
3401a2d8:	d02e      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2da:	4a4c      	ldr	r2, [pc, #304]	@ (3401a40c <HAL_TIM_Base_Start+0x1dc>)
3401a2dc:	4293      	cmp	r3, r2
3401a2de:	d02b      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2e0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a2e4:	4293      	cmp	r3, r2
3401a2e6:	d027      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2e8:	4a49      	ldr	r2, [pc, #292]	@ (3401a410 <HAL_TIM_Base_Start+0x1e0>)
3401a2ea:	4293      	cmp	r3, r2
3401a2ec:	d024      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2ee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a2f2:	4293      	cmp	r3, r2
3401a2f4:	d020      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2f6:	4a47      	ldr	r2, [pc, #284]	@ (3401a414 <HAL_TIM_Base_Start+0x1e4>)
3401a2f8:	4293      	cmp	r3, r2
3401a2fa:	d01d      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a2fc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a300:	4293      	cmp	r3, r2
3401a302:	d019      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a304:	4a44      	ldr	r2, [pc, #272]	@ (3401a418 <HAL_TIM_Base_Start+0x1e8>)
3401a306:	4293      	cmp	r3, r2
3401a308:	d016      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a30a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a30e:	4293      	cmp	r3, r2
3401a310:	d012      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a312:	4a42      	ldr	r2, [pc, #264]	@ (3401a41c <HAL_TIM_Base_Start+0x1ec>)
3401a314:	4293      	cmp	r3, r2
3401a316:	d00f      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a318:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a31c:	4293      	cmp	r3, r2
3401a31e:	d00b      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a320:	4a3f      	ldr	r2, [pc, #252]	@ (3401a420 <HAL_TIM_Base_Start+0x1f0>)
3401a322:	4293      	cmp	r3, r2
3401a324:	d008      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a326:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a32a:	4293      	cmp	r3, r2
3401a32c:	d004      	beq.n	3401a338 <HAL_TIM_Base_Start+0x108>
3401a32e:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
3401a332:	483c      	ldr	r0, [pc, #240]	@ (3401a424 <HAL_TIM_Base_Start+0x1f4>)
3401a334:	f003 fb28 	bl	3401d988 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
3401a338:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
3401a33c:	2b01      	cmp	r3, #1
3401a33e:	d14e      	bne.n	3401a3de <HAL_TIM_Base_Start+0x1ae>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
3401a340:	2302      	movs	r3, #2
3401a342:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
3401a346:	6823      	ldr	r3, [r4, #0]
3401a348:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3401a34c:	d039      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a34e:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401a352:	d036      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a354:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a358:	d033      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a35e:	d030      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a360:	4a20      	ldr	r2, [pc, #128]	@ (3401a3e4 <HAL_TIM_Base_Start+0x1b4>)
3401a362:	4293      	cmp	r3, r2
3401a364:	d02d      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a366:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a36a:	4293      	cmp	r3, r2
3401a36c:	d029      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a36e:	4a1e      	ldr	r2, [pc, #120]	@ (3401a3e8 <HAL_TIM_Base_Start+0x1b8>)
3401a370:	4293      	cmp	r3, r2
3401a372:	d026      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a374:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a378:	4293      	cmp	r3, r2
3401a37a:	d022      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a37c:	4a1b      	ldr	r2, [pc, #108]	@ (3401a3ec <HAL_TIM_Base_Start+0x1bc>)
3401a37e:	4293      	cmp	r3, r2
3401a380:	d01f      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a382:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a386:	4293      	cmp	r3, r2
3401a388:	d01b      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a38a:	4a1b      	ldr	r2, [pc, #108]	@ (3401a3f8 <HAL_TIM_Base_Start+0x1c8>)
3401a38c:	4293      	cmp	r3, r2
3401a38e:	d018      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a390:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a394:	4293      	cmp	r3, r2
3401a396:	d014      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a398:	4a18      	ldr	r2, [pc, #96]	@ (3401a3fc <HAL_TIM_Base_Start+0x1cc>)
3401a39a:	4293      	cmp	r3, r2
3401a39c:	d011      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a39e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a3a2:	4293      	cmp	r3, r2
3401a3a4:	d00d      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a3a6:	4a18      	ldr	r2, [pc, #96]	@ (3401a408 <HAL_TIM_Base_Start+0x1d8>)
3401a3a8:	4293      	cmp	r3, r2
3401a3aa:	d00a      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a3ac:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a3b0:	4293      	cmp	r3, r2
3401a3b2:	d006      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a3b4:	4a17      	ldr	r2, [pc, #92]	@ (3401a414 <HAL_TIM_Base_Start+0x1e4>)
3401a3b6:	4293      	cmp	r3, r2
3401a3b8:	d003      	beq.n	3401a3c2 <HAL_TIM_Base_Start+0x192>
3401a3ba:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a3be:	4293      	cmp	r3, r2
3401a3c0:	d107      	bne.n	3401a3d2 <HAL_TIM_Base_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
3401a3c2:	6899      	ldr	r1, [r3, #8]
3401a3c4:	4a18      	ldr	r2, [pc, #96]	@ (3401a428 <HAL_TIM_Base_Start+0x1f8>)
3401a3c6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
3401a3c8:	2a06      	cmp	r2, #6
3401a3ca:	d006      	beq.n	3401a3da <HAL_TIM_Base_Start+0x1aa>
3401a3cc:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3401a3d0:	d003      	beq.n	3401a3da <HAL_TIM_Base_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
3401a3d2:	681a      	ldr	r2, [r3, #0]
3401a3d4:	f042 0201 	orr.w	r2, r2, #1
3401a3d8:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
3401a3da:	2000      	movs	r0, #0
}
3401a3dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401a3de:	2001      	movs	r0, #1
3401a3e0:	e7fc      	b.n	3401a3dc <HAL_TIM_Base_Start+0x1ac>
3401a3e2:	bf00      	nop
3401a3e4:	50000400 	.word	0x50000400
3401a3e8:	50000800 	.word	0x50000800
3401a3ec:	50000c00 	.word	0x50000c00
3401a3f0:	50001000 	.word	0x50001000
3401a3f4:	50001400 	.word	0x50001400
3401a3f8:	52000400 	.word	0x52000400
3401a3fc:	52004c00 	.word	0x52004c00
3401a400:	50003000 	.word	0x50003000
3401a404:	50003400 	.word	0x50003400
3401a408:	50001800 	.word	0x50001800
3401a40c:	50001c00 	.word	0x50001c00
3401a410:	50002000 	.word	0x50002000
3401a414:	52004000 	.word	0x52004000
3401a418:	52004400 	.word	0x52004400
3401a41c:	52004800 	.word	0x52004800
3401a420:	52003c00 	.word	0x52003c00
3401a424:	34026c1e 	.word	0x34026c1e
3401a428:	00010007 	.word	0x00010007

3401a42c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3401a42c:	f1b0 4fa4 	cmp.w	r0, #1375731712	@ 0x52000000
  tmpcr1 = TIMx->CR1;
3401a430:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3401a432:	d024      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a434:	f1b0 4f84 	cmp.w	r0, #1107296256	@ 0x42000000
3401a438:	d021      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a43a:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
3401a43e:	d01e      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a440:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
3401a444:	d01b      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a446:	4a3e      	ldr	r2, [pc, #248]	@ (3401a540 <TIM_Base_SetConfig+0x114>)
3401a448:	4290      	cmp	r0, r2
3401a44a:	d018      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a44c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a450:	4290      	cmp	r0, r2
3401a452:	d014      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a454:	4a3b      	ldr	r2, [pc, #236]	@ (3401a544 <TIM_Base_SetConfig+0x118>)
3401a456:	4290      	cmp	r0, r2
3401a458:	d011      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a45a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a45e:	4290      	cmp	r0, r2
3401a460:	d00d      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a462:	4a39      	ldr	r2, [pc, #228]	@ (3401a548 <TIM_Base_SetConfig+0x11c>)
3401a464:	4290      	cmp	r0, r2
3401a466:	d00a      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a468:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a46c:	4290      	cmp	r0, r2
3401a46e:	d006      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a470:	4a36      	ldr	r2, [pc, #216]	@ (3401a54c <TIM_Base_SetConfig+0x120>)
3401a472:	4290      	cmp	r0, r2
3401a474:	d003      	beq.n	3401a47e <TIM_Base_SetConfig+0x52>
3401a476:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a47a:	4290      	cmp	r0, r2
3401a47c:	d108      	bne.n	3401a490 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
3401a47e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
3401a480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
3401a484:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
3401a486:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
3401a488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
3401a48c:	4313      	orrs	r3, r2
3401a48e:	e022      	b.n	3401a4d6 <TIM_Base_SetConfig+0xaa>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
3401a490:	4a2f      	ldr	r2, [pc, #188]	@ (3401a550 <TIM_Base_SetConfig+0x124>)
3401a492:	4290      	cmp	r0, r2
3401a494:	d0f7      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a496:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a49a:	4290      	cmp	r0, r2
3401a49c:	d0f3      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a49e:	4a2d      	ldr	r2, [pc, #180]	@ (3401a554 <TIM_Base_SetConfig+0x128>)
3401a4a0:	4290      	cmp	r0, r2
3401a4a2:	d0f0      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4a4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a4a8:	4290      	cmp	r0, r2
3401a4aa:	d0ec      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4ac:	4a2a      	ldr	r2, [pc, #168]	@ (3401a558 <TIM_Base_SetConfig+0x12c>)
3401a4ae:	4290      	cmp	r0, r2
3401a4b0:	d0e9      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a4b6:	4290      	cmp	r0, r2
3401a4b8:	d0e5      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4ba:	4a28      	ldr	r2, [pc, #160]	@ (3401a55c <TIM_Base_SetConfig+0x130>)
3401a4bc:	4290      	cmp	r0, r2
3401a4be:	d0e2      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4c0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a4c4:	4290      	cmp	r0, r2
3401a4c6:	d0de      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4c8:	4a25      	ldr	r2, [pc, #148]	@ (3401a560 <TIM_Base_SetConfig+0x134>)
3401a4ca:	4290      	cmp	r0, r2
3401a4cc:	d0db      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
3401a4ce:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a4d2:	4290      	cmp	r0, r2
3401a4d4:	d0d7      	beq.n	3401a486 <TIM_Base_SetConfig+0x5a>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
3401a4d6:	694a      	ldr	r2, [r1, #20]
3401a4d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3401a4dc:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
3401a4de:	688a      	ldr	r2, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
3401a4e0:	f1b0 4fa4 	cmp.w	r0, #1375731712	@ 0x52000000
  TIMx->ARR = (uint32_t)Structure->Period ;
3401a4e4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
3401a4e6:	680a      	ldr	r2, [r1, #0]
3401a4e8:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
3401a4ea:	d01e      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a4ec:	f1b0 4f84 	cmp.w	r0, #1107296256	@ 0x42000000
3401a4f0:	d01b      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a4f2:	4a16      	ldr	r2, [pc, #88]	@ (3401a54c <TIM_Base_SetConfig+0x120>)
3401a4f4:	4290      	cmp	r0, r2
3401a4f6:	d018      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a4f8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a4fc:	4290      	cmp	r0, r2
3401a4fe:	d014      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a500:	4a15      	ldr	r2, [pc, #84]	@ (3401a558 <TIM_Base_SetConfig+0x12c>)
3401a502:	4290      	cmp	r0, r2
3401a504:	d011      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a506:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a50a:	4290      	cmp	r0, r2
3401a50c:	d00d      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a50e:	4a13      	ldr	r2, [pc, #76]	@ (3401a55c <TIM_Base_SetConfig+0x130>)
3401a510:	4290      	cmp	r0, r2
3401a512:	d00a      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a514:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a518:	4290      	cmp	r0, r2
3401a51a:	d006      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a51c:	4a10      	ldr	r2, [pc, #64]	@ (3401a560 <TIM_Base_SetConfig+0x134>)
3401a51e:	4290      	cmp	r0, r2
3401a520:	d003      	beq.n	3401a52a <TIM_Base_SetConfig+0xfe>
3401a522:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a526:	4290      	cmp	r0, r2
3401a528:	d101      	bne.n	3401a52e <TIM_Base_SetConfig+0x102>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
3401a52a:	690a      	ldr	r2, [r1, #16]
3401a52c:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
3401a52e:	6802      	ldr	r2, [r0, #0]
3401a530:	f042 0204 	orr.w	r2, r2, #4
3401a534:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
3401a536:	2201      	movs	r2, #1
3401a538:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
3401a53a:	6003      	str	r3, [r0, #0]
}
3401a53c:	4770      	bx	lr
3401a53e:	bf00      	nop
3401a540:	50000400 	.word	0x50000400
3401a544:	50000800 	.word	0x50000800
3401a548:	50000c00 	.word	0x50000c00
3401a54c:	52000400 	.word	0x52000400
3401a550:	52004c00 	.word	0x52004c00
3401a554:	50001800 	.word	0x50001800
3401a558:	52004000 	.word	0x52004000
3401a55c:	52004400 	.word	0x52004400
3401a560:	52004800 	.word	0x52004800

3401a564 <HAL_TIM_Base_Init>:
{
3401a564:	b510      	push	{r4, lr}
  if (htim == NULL)
3401a566:	4604      	mov	r4, r0
3401a568:	2800      	cmp	r0, #0
3401a56a:	f000 8100 	beq.w	3401a76e <HAL_TIM_Base_Init+0x20a>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401a56e:	6803      	ldr	r3, [r0, #0]
3401a570:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3401a574:	d07d      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a576:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401a57a:	d07a      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a57c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a580:	d077      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a586:	d074      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a588:	4a7a      	ldr	r2, [pc, #488]	@ (3401a774 <HAL_TIM_Base_Init+0x210>)
3401a58a:	4293      	cmp	r3, r2
3401a58c:	d071      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a58e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a592:	4293      	cmp	r3, r2
3401a594:	d06d      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a596:	4a78      	ldr	r2, [pc, #480]	@ (3401a778 <HAL_TIM_Base_Init+0x214>)
3401a598:	4293      	cmp	r3, r2
3401a59a:	d06a      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a59c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5a0:	4293      	cmp	r3, r2
3401a5a2:	d066      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5a4:	4a75      	ldr	r2, [pc, #468]	@ (3401a77c <HAL_TIM_Base_Init+0x218>)
3401a5a6:	4293      	cmp	r3, r2
3401a5a8:	d063      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5ae:	4293      	cmp	r3, r2
3401a5b0:	d05f      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5b2:	4a73      	ldr	r2, [pc, #460]	@ (3401a780 <HAL_TIM_Base_Init+0x21c>)
3401a5b4:	4293      	cmp	r3, r2
3401a5b6:	d05c      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5bc:	4293      	cmp	r3, r2
3401a5be:	d058      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5c0:	4a70      	ldr	r2, [pc, #448]	@ (3401a784 <HAL_TIM_Base_Init+0x220>)
3401a5c2:	4293      	cmp	r3, r2
3401a5c4:	d055      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5ca:	4293      	cmp	r3, r2
3401a5cc:	d051      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5ce:	4a6e      	ldr	r2, [pc, #440]	@ (3401a788 <HAL_TIM_Base_Init+0x224>)
3401a5d0:	4293      	cmp	r3, r2
3401a5d2:	d04e      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5d8:	4293      	cmp	r3, r2
3401a5da:	d04a      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5dc:	4a6b      	ldr	r2, [pc, #428]	@ (3401a78c <HAL_TIM_Base_Init+0x228>)
3401a5de:	4293      	cmp	r3, r2
3401a5e0:	d047      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5e2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5e6:	4293      	cmp	r3, r2
3401a5e8:	d043      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5ea:	4a69      	ldr	r2, [pc, #420]	@ (3401a790 <HAL_TIM_Base_Init+0x22c>)
3401a5ec:	4293      	cmp	r3, r2
3401a5ee:	d040      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5f0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a5f4:	4293      	cmp	r3, r2
3401a5f6:	d03c      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5f8:	4a66      	ldr	r2, [pc, #408]	@ (3401a794 <HAL_TIM_Base_Init+0x230>)
3401a5fa:	4293      	cmp	r3, r2
3401a5fc:	d039      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a5fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a602:	4293      	cmp	r3, r2
3401a604:	d035      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a606:	4a64      	ldr	r2, [pc, #400]	@ (3401a798 <HAL_TIM_Base_Init+0x234>)
3401a608:	4293      	cmp	r3, r2
3401a60a:	d032      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a60c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a610:	4293      	cmp	r3, r2
3401a612:	d02e      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a614:	4a61      	ldr	r2, [pc, #388]	@ (3401a79c <HAL_TIM_Base_Init+0x238>)
3401a616:	4293      	cmp	r3, r2
3401a618:	d02b      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a61a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a61e:	4293      	cmp	r3, r2
3401a620:	d027      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a622:	4a5f      	ldr	r2, [pc, #380]	@ (3401a7a0 <HAL_TIM_Base_Init+0x23c>)
3401a624:	4293      	cmp	r3, r2
3401a626:	d024      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a628:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a62c:	4293      	cmp	r3, r2
3401a62e:	d020      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a630:	4a5c      	ldr	r2, [pc, #368]	@ (3401a7a4 <HAL_TIM_Base_Init+0x240>)
3401a632:	4293      	cmp	r3, r2
3401a634:	d01d      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a636:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a63a:	4293      	cmp	r3, r2
3401a63c:	d019      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a63e:	4a5a      	ldr	r2, [pc, #360]	@ (3401a7a8 <HAL_TIM_Base_Init+0x244>)
3401a640:	4293      	cmp	r3, r2
3401a642:	d016      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a644:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a648:	4293      	cmp	r3, r2
3401a64a:	d012      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a64c:	4a57      	ldr	r2, [pc, #348]	@ (3401a7ac <HAL_TIM_Base_Init+0x248>)
3401a64e:	4293      	cmp	r3, r2
3401a650:	d00f      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a652:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a656:	4293      	cmp	r3, r2
3401a658:	d00b      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a65a:	4a55      	ldr	r2, [pc, #340]	@ (3401a7b0 <HAL_TIM_Base_Init+0x24c>)
3401a65c:	4293      	cmp	r3, r2
3401a65e:	d008      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a660:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a664:	4293      	cmp	r3, r2
3401a666:	d004      	beq.n	3401a672 <HAL_TIM_Base_Init+0x10e>
3401a668:	f44f 718d 	mov.w	r1, #282	@ 0x11a
3401a66c:	4851      	ldr	r0, [pc, #324]	@ (3401a7b4 <HAL_TIM_Base_Init+0x250>)
3401a66e:	f003 f98b 	bl	3401d988 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
3401a672:	68a3      	ldr	r3, [r4, #8]
3401a674:	f033 0210 	bics.w	r2, r3, #16
3401a678:	d00a      	beq.n	3401a690 <HAL_TIM_Base_Init+0x12c>
3401a67a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
3401a67e:	2a20      	cmp	r2, #32
3401a680:	d006      	beq.n	3401a690 <HAL_TIM_Base_Init+0x12c>
3401a682:	2b40      	cmp	r3, #64	@ 0x40
3401a684:	d004      	beq.n	3401a690 <HAL_TIM_Base_Init+0x12c>
3401a686:	f240 111b 	movw	r1, #283	@ 0x11b
3401a68a:	484a      	ldr	r0, [pc, #296]	@ (3401a7b4 <HAL_TIM_Base_Init+0x250>)
3401a68c:	f003 f97c 	bl	3401d988 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
3401a690:	6923      	ldr	r3, [r4, #16]
3401a692:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
3401a696:	d007      	beq.n	3401a6a8 <HAL_TIM_Base_Init+0x144>
3401a698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401a69c:	d004      	beq.n	3401a6a8 <HAL_TIM_Base_Init+0x144>
3401a69e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
3401a6a2:	4844      	ldr	r0, [pc, #272]	@ (3401a7b4 <HAL_TIM_Base_Init+0x250>)
3401a6a4:	f003 f970 	bl	3401d988 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
3401a6a8:	6823      	ldr	r3, [r4, #0]
3401a6aa:	68e2      	ldr	r2, [r4, #12]
3401a6ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401a6b0:	d026      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401a6b6:	d023      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6b8:	492e      	ldr	r1, [pc, #184]	@ (3401a774 <HAL_TIM_Base_Init+0x210>)
3401a6ba:	428b      	cmp	r3, r1
3401a6bc:	d020      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6be:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401a6c2:	428b      	cmp	r3, r1
3401a6c4:	d01c      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6c6:	492c      	ldr	r1, [pc, #176]	@ (3401a778 <HAL_TIM_Base_Init+0x214>)
3401a6c8:	428b      	cmp	r3, r1
3401a6ca:	d019      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6cc:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401a6d0:	428b      	cmp	r3, r1
3401a6d2:	d015      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6d4:	4929      	ldr	r1, [pc, #164]	@ (3401a77c <HAL_TIM_Base_Init+0x218>)
3401a6d6:	428b      	cmp	r3, r1
3401a6d8:	d012      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6da:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401a6de:	428b      	cmp	r3, r1
3401a6e0:	d00e      	beq.n	3401a700 <HAL_TIM_Base_Init+0x19c>
3401a6e2:	681b      	ldr	r3, [r3, #0]
3401a6e4:	3a01      	subs	r2, #1
3401a6e6:	04db      	lsls	r3, r3, #19
3401a6e8:	bf54      	ite	pl
3401a6ea:	f64f 73fe 	movwpl	r3, #65534	@ 0xfffe
3401a6ee:	4b32      	ldrmi	r3, [pc, #200]	@ (3401a7b8 <HAL_TIM_Base_Init+0x254>)
3401a6f0:	429a      	cmp	r2, r3
3401a6f2:	d907      	bls.n	3401a704 <HAL_TIM_Base_Init+0x1a0>
3401a6f4:	f240 111d 	movw	r1, #285	@ 0x11d
3401a6f8:	482e      	ldr	r0, [pc, #184]	@ (3401a7b4 <HAL_TIM_Base_Init+0x250>)
3401a6fa:	f003 f945 	bl	3401d988 <assert_failed>
3401a6fe:	e001      	b.n	3401a704 <HAL_TIM_Base_Init+0x1a0>
3401a700:	2a00      	cmp	r2, #0
3401a702:	d0f7      	beq.n	3401a6f4 <HAL_TIM_Base_Init+0x190>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
3401a704:	69a3      	ldr	r3, [r4, #24]
3401a706:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
3401a70a:	d004      	beq.n	3401a716 <HAL_TIM_Base_Init+0x1b2>
3401a70c:	f44f 718f 	mov.w	r1, #286	@ 0x11e
3401a710:	4828      	ldr	r0, [pc, #160]	@ (3401a7b4 <HAL_TIM_Base_Init+0x250>)
3401a712:	f003 f939 	bl	3401d988 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
3401a716:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
3401a71a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
3401a71e:	b923      	cbnz	r3, 3401a72a <HAL_TIM_Base_Init+0x1c6>
    HAL_TIM_Base_MspInit(htim);
3401a720:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
3401a722:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
3401a726:	f7ff fd81 	bl	3401a22c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
3401a72a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3401a72c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
3401a72e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3401a732:	1d21      	adds	r1, r4, #4
3401a734:	f7ff fe7a 	bl	3401a42c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3401a738:	2301      	movs	r3, #1
  return HAL_OK;
3401a73a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3401a73c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3401a740:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
3401a744:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
3401a748:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
3401a74c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
3401a750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401a754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3401a758:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
3401a75c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
3401a760:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
3401a764:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
3401a768:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
3401a76c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401a76e:	2001      	movs	r0, #1
3401a770:	e7fc      	b.n	3401a76c <HAL_TIM_Base_Init+0x208>
3401a772:	bf00      	nop
3401a774:	50000400 	.word	0x50000400
3401a778:	50000800 	.word	0x50000800
3401a77c:	50000c00 	.word	0x50000c00
3401a780:	50001000 	.word	0x50001000
3401a784:	50001400 	.word	0x50001400
3401a788:	52000400 	.word	0x52000400
3401a78c:	52004c00 	.word	0x52004c00
3401a790:	50003000 	.word	0x50003000
3401a794:	50003400 	.word	0x50003400
3401a798:	50001800 	.word	0x50001800
3401a79c:	50001c00 	.word	0x50001c00
3401a7a0:	50002000 	.word	0x50002000
3401a7a4:	52004000 	.word	0x52004000
3401a7a8:	52004400 	.word	0x52004400
3401a7ac:	52004800 	.word	0x52004800
3401a7b0:	52003c00 	.word	0x52003c00
3401a7b4:	34026c1e 	.word	0x34026c1e
3401a7b8:	000fffee 	.word	0x000fffee

3401a7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3401a7bc:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3401a7be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401a7c0:	e852 3f00 	ldrex	r3, [r2]
3401a7c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401a7c8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3401a7cc:	6802      	ldr	r2, [r0, #0]
3401a7ce:	2900      	cmp	r1, #0
3401a7d0:	d1f5      	bne.n	3401a7be <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3401a7d2:	4c0f      	ldr	r4, [pc, #60]	@ (3401a810 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401a7d4:	f102 0308 	add.w	r3, r2, #8
3401a7d8:	e853 3f00 	ldrex	r3, [r3]
3401a7dc:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401a7de:	f102 0c08 	add.w	ip, r2, #8
3401a7e2:	e84c 3100 	strex	r1, r3, [ip]
3401a7e6:	2900      	cmp	r1, #0
3401a7e8:	d1f4      	bne.n	3401a7d4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3401a7ea:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3401a7ec:	2b01      	cmp	r3, #1
3401a7ee:	d107      	bne.n	3401a800 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401a7f0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3401a7f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401a7f8:	e842 3100 	strex	r1, r3, [r2]
3401a7fc:	2900      	cmp	r1, #0
3401a7fe:	d1f7      	bne.n	3401a7f0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3401a800:	2320      	movs	r3, #32
3401a802:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401a806:	2300      	movs	r3, #0
3401a808:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3401a80a:	6743      	str	r3, [r0, #116]	@ 0x74
}
3401a80c:	bd10      	pop	{r4, pc}
3401a80e:	bf00      	nop
3401a810:	effffffe 	.word	0xeffffffe

3401a814 <HAL_UART_MspInit>:
}
3401a814:	4770      	bx	lr
	...

3401a818 <UART_SetConfig>:
{
3401a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401a81a:	6842      	ldr	r2, [r0, #4]
3401a81c:	4bb0      	ldr	r3, [pc, #704]	@ (3401aae0 <UART_SetConfig+0x2c8>)
{
3401a81e:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401a820:	429a      	cmp	r2, r3
3401a822:	d904      	bls.n	3401a82e <UART_SetConfig+0x16>
3401a824:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3401a828:	48ae      	ldr	r0, [pc, #696]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a82a:	f003 f8ad 	bl	3401d988 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3401a82e:	68a3      	ldr	r3, [r4, #8]
3401a830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401a834:	d007      	beq.n	3401a846 <UART_SetConfig+0x2e>
3401a836:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3401a83a:	d004      	beq.n	3401a846 <UART_SetConfig+0x2e>
3401a83c:	f640 4151 	movw	r1, #3153	@ 0xc51
3401a840:	48a8      	ldr	r0, [pc, #672]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a842:	f003 f8a1 	bl	3401d988 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3401a846:	6822      	ldr	r2, [r4, #0]
3401a848:	49a7      	ldr	r1, [pc, #668]	@ (3401aae8 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3401a84a:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3401a84c:	428a      	cmp	r2, r1
3401a84e:	d004      	beq.n	3401a85a <UART_SetConfig+0x42>
3401a850:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401a854:	428a      	cmp	r2, r1
3401a856:	f040 80af 	bne.w	3401a9b8 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3401a85a:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3401a85e:	d004      	beq.n	3401a86a <UART_SetConfig+0x52>
3401a860:	f640 4154 	movw	r1, #3156	@ 0xc54
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3401a864:	489f      	ldr	r0, [pc, #636]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a866:	f003 f88f 	bl	3401d988 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3401a86a:	6923      	ldr	r3, [r4, #16]
3401a86c:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3401a870:	d007      	beq.n	3401a882 <UART_SetConfig+0x6a>
3401a872:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401a876:	d004      	beq.n	3401a882 <UART_SetConfig+0x6a>
3401a878:	f640 415c 	movw	r1, #3164	@ 0xc5c
3401a87c:	4899      	ldr	r0, [pc, #612]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a87e:	f003 f883 	bl	3401d988 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3401a882:	6963      	ldr	r3, [r4, #20]
3401a884:	f033 020c 	bics.w	r2, r3, #12
3401a888:	d100      	bne.n	3401a88c <UART_SetConfig+0x74>
3401a88a:	b923      	cbnz	r3, 3401a896 <UART_SetConfig+0x7e>
3401a88c:	f640 415d 	movw	r1, #3165	@ 0xc5d
3401a890:	4894      	ldr	r0, [pc, #592]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a892:	f003 f879 	bl	3401d988 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3401a896:	69a3      	ldr	r3, [r4, #24]
3401a898:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3401a89c:	d004      	beq.n	3401a8a8 <UART_SetConfig+0x90>
3401a89e:	f640 415e 	movw	r1, #3166	@ 0xc5e
3401a8a2:	4890      	ldr	r0, [pc, #576]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a8a4:	f003 f870 	bl	3401d988 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3401a8a8:	69e3      	ldr	r3, [r4, #28]
3401a8aa:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3401a8ae:	d004      	beq.n	3401a8ba <UART_SetConfig+0xa2>
3401a8b0:	f640 415f 	movw	r1, #3167	@ 0xc5f
3401a8b4:	488b      	ldr	r0, [pc, #556]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a8b6:	f003 f867 	bl	3401d988 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3401a8ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401a8bc:	2b0b      	cmp	r3, #11
3401a8be:	d904      	bls.n	3401a8ca <UART_SetConfig+0xb2>
3401a8c0:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
3401a8c4:	4887      	ldr	r0, [pc, #540]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a8c6:	f003 f85f 	bl	3401d988 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401a8ca:	6921      	ldr	r1, [r4, #16]
3401a8cc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401a8ce:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401a8d0:	430a      	orrs	r2, r1
3401a8d2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401a8d4:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401a8d6:	69e5      	ldr	r5, [r4, #28]
3401a8d8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401a8da:	4984      	ldr	r1, [pc, #528]	@ (3401aaec <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401a8dc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401a8de:	4001      	ands	r1, r0
3401a8e0:	430a      	orrs	r2, r1
3401a8e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3401a8e4:	685a      	ldr	r2, [r3, #4]
3401a8e6:	68e1      	ldr	r1, [r4, #12]
3401a8e8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3401a8ec:	430a      	orrs	r2, r1
3401a8ee:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3401a8f0:	4a7d      	ldr	r2, [pc, #500]	@ (3401aae8 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3401a8f2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3401a8f4:	4293      	cmp	r3, r2
3401a8f6:	d005      	beq.n	3401a904 <UART_SetConfig+0xec>
3401a8f8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a8fc:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3401a8fe:	bf1c      	itt	ne
3401a900:	6a22      	ldrne	r2, [r4, #32]
3401a902:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3401a904:	689a      	ldr	r2, [r3, #8]
3401a906:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3401a90a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3401a90e:	430a      	orrs	r2, r1
3401a910:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3401a912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3401a914:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401a916:	f022 020f 	bic.w	r2, r2, #15
3401a91a:	430a      	orrs	r2, r1
3401a91c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3401a91e:	4a74      	ldr	r2, [pc, #464]	@ (3401aaf0 <UART_SetConfig+0x2d8>)
3401a920:	4293      	cmp	r3, r2
3401a922:	d07a      	beq.n	3401aa1a <UART_SetConfig+0x202>
3401a924:	4a73      	ldr	r2, [pc, #460]	@ (3401aaf4 <UART_SetConfig+0x2dc>)
3401a926:	4293      	cmp	r3, r2
3401a928:	f000 809c 	beq.w	3401aa64 <UART_SetConfig+0x24c>
3401a92c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401a930:	4293      	cmp	r3, r2
3401a932:	f000 809b 	beq.w	3401aa6c <UART_SetConfig+0x254>
3401a936:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401a93a:	4293      	cmp	r3, r2
3401a93c:	f000 809a 	beq.w	3401aa74 <UART_SetConfig+0x25c>
3401a940:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401a944:	f000 809a 	beq.w	3401aa7c <UART_SetConfig+0x264>
3401a948:	4a6b      	ldr	r2, [pc, #428]	@ (3401aaf8 <UART_SetConfig+0x2e0>)
3401a94a:	4293      	cmp	r3, r2
3401a94c:	f000 809a 	beq.w	3401aa84 <UART_SetConfig+0x26c>
3401a950:	4a6a      	ldr	r2, [pc, #424]	@ (3401aafc <UART_SetConfig+0x2e4>)
3401a952:	4293      	cmp	r3, r2
3401a954:	f000 809a 	beq.w	3401aa8c <UART_SetConfig+0x274>
3401a958:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401a95c:	4293      	cmp	r3, r2
3401a95e:	f000 8099 	beq.w	3401aa94 <UART_SetConfig+0x27c>
3401a962:	4a67      	ldr	r2, [pc, #412]	@ (3401ab00 <UART_SetConfig+0x2e8>)
3401a964:	4293      	cmp	r3, r2
3401a966:	f000 8099 	beq.w	3401aa9c <UART_SetConfig+0x284>
3401a96a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401a96e:	4293      	cmp	r3, r2
3401a970:	f000 8098 	beq.w	3401aaa4 <UART_SetConfig+0x28c>
3401a974:	4a5c      	ldr	r2, [pc, #368]	@ (3401aae8 <UART_SetConfig+0x2d0>)
3401a976:	4293      	cmp	r3, r2
3401a978:	d02e      	beq.n	3401a9d8 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3401a97a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401a97e:	4293      	cmp	r3, r2
3401a980:	f04f 0000 	mov.w	r0, #0
3401a984:	f04f 0100 	mov.w	r1, #0
3401a988:	d14a      	bne.n	3401aa20 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401a98a:	f7fe feb5 	bl	340196f8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401a98e:	2800      	cmp	r0, #0
3401a990:	d041      	beq.n	3401aa16 <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401a992:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401a994:	4a5b      	ldr	r2, [pc, #364]	@ (3401ab04 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401a996:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401a998:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401a99c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401a9a0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401a9a4:	4299      	cmp	r1, r3
3401a9a6:	d91b      	bls.n	3401a9e0 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3401a9a8:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3401a9aa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3401a9ae:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3401a9b0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3401a9b2:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3401a9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3401a9b8:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3401a9bc:	d004      	beq.n	3401a9c8 <UART_SetConfig+0x1b0>
3401a9be:	f640 4158 	movw	r1, #3160	@ 0xc58
3401a9c2:	4848      	ldr	r0, [pc, #288]	@ (3401aae4 <UART_SetConfig+0x2cc>)
3401a9c4:	f002 ffe0 	bl	3401d988 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3401a9c8:	6a23      	ldr	r3, [r4, #32]
3401a9ca:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3401a9ce:	f43f af4c 	beq.w	3401a86a <UART_SetConfig+0x52>
3401a9d2:	f640 4159 	movw	r1, #3161	@ 0xc59
3401a9d6:	e745      	b.n	3401a864 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401a9d8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3401a9dc:	2100      	movs	r1, #0
3401a9de:	e7d4      	b.n	3401a98a <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401a9e0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3401a9e4:	d8e0      	bhi.n	3401a9a8 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401a9e6:	2300      	movs	r3, #0
3401a9e8:	4619      	mov	r1, r3
3401a9ea:	f7e7 f8af 	bl	34001b4c <__aeabi_uldivmod>
3401a9ee:	4606      	mov	r6, r0
3401a9f0:	460f      	mov	r7, r1
3401a9f2:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3401a9f6:	0868      	lsrs	r0, r5, #1
3401a9f8:	1830      	adds	r0, r6, r0
3401a9fa:	462a      	mov	r2, r5
3401a9fc:	f04f 0300 	mov.w	r3, #0
3401aa00:	f147 0100 	adc.w	r1, r7, #0
3401aa04:	f7e7 f8a2 	bl	34001b4c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3401aa08:	4b3f      	ldr	r3, [pc, #252]	@ (3401ab08 <UART_SetConfig+0x2f0>)
3401aa0a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3401aa0e:	429a      	cmp	r2, r3
3401aa10:	d8ca      	bhi.n	3401a9a8 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3401aa12:	6823      	ldr	r3, [r4, #0]
3401aa14:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3401aa16:	2000      	movs	r0, #0
3401aa18:	e7c7      	b.n	3401a9aa <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401aa1a:	2000      	movs	r0, #0
3401aa1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3401aa20:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3401aa24:	d142      	bne.n	3401aaac <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401aa26:	f7fe fe67 	bl	340196f8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401aa2a:	2800      	cmp	r0, #0
3401aa2c:	d0f3      	beq.n	3401aa16 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401aa2e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401aa30:	4b34      	ldr	r3, [pc, #208]	@ (3401ab04 <UART_SetConfig+0x2ec>)
3401aa32:	6862      	ldr	r2, [r4, #4]
3401aa34:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3401aa38:	fbb0 f0f3 	udiv	r0, r0, r3
3401aa3c:	0853      	lsrs	r3, r2, #1
3401aa3e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3401aa42:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401aa46:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3401aa4a:	f1a3 0110 	sub.w	r1, r3, #16
3401aa4e:	4291      	cmp	r1, r2
3401aa50:	d8aa      	bhi.n	3401a9a8 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401aa52:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3401aa56:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401aa58:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3401aa5a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3401aa5e:	4313      	orrs	r3, r2
3401aa60:	60cb      	str	r3, [r1, #12]
3401aa62:	e7d8      	b.n	3401aa16 <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401aa64:	2000      	movs	r0, #0
3401aa66:	f44f 7100 	mov.w	r1, #512	@ 0x200
3401aa6a:	e7d9      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa6c:	2000      	movs	r0, #0
3401aa6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3401aa72:	e7d5      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa74:	2000      	movs	r0, #0
3401aa76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3401aa7a:	e7d1      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa7c:	2000      	movs	r0, #0
3401aa7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3401aa82:	e7cd      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa84:	2000      	movs	r0, #0
3401aa86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3401aa8a:	e7c9      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa8c:	2000      	movs	r0, #0
3401aa8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3401aa92:	e7c5      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa94:	2000      	movs	r0, #0
3401aa96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3401aa9a:	e7c1      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aa9c:	2000      	movs	r0, #0
3401aa9e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3401aaa2:	e7bd      	b.n	3401aa20 <UART_SetConfig+0x208>
3401aaa4:	2000      	movs	r0, #0
3401aaa6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3401aaaa:	e7b9      	b.n	3401aa20 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401aaac:	f7fe fe24 	bl	340196f8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401aab0:	2800      	cmp	r0, #0
3401aab2:	d0b0      	beq.n	3401aa16 <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401aab4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401aab6:	4b13      	ldr	r3, [pc, #76]	@ (3401ab04 <UART_SetConfig+0x2ec>)
3401aab8:	6862      	ldr	r2, [r4, #4]
3401aaba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3401aabe:	fbb0 f3f3 	udiv	r3, r0, r3
3401aac2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3401aac6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401aaca:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3401aace:	f1a3 0110 	sub.w	r1, r3, #16
3401aad2:	4291      	cmp	r1, r2
3401aad4:	f63f af68 	bhi.w	3401a9a8 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3401aad8:	6822      	ldr	r2, [r4, #0]
3401aada:	60d3      	str	r3, [r2, #12]
3401aadc:	e79b      	b.n	3401aa16 <UART_SetConfig+0x1fe>
3401aade:	bf00      	nop
3401aae0:	00bebc1f 	.word	0x00bebc1f
3401aae4:	34026c7e 	.word	0x34026c7e
3401aae8:	56000c00 	.word	0x56000c00
3401aaec:	cfff69f3 	.word	0xcfff69f3
3401aaf0:	52001000 	.word	0x52001000
3401aaf4:	50004400 	.word	0x50004400
3401aaf8:	52001400 	.word	0x52001400
3401aafc:	50007800 	.word	0x50007800
3401ab00:	52001800 	.word	0x52001800
3401ab04:	3409f7ea 	.word	0x3409f7ea
3401ab08:	000ffcff 	.word	0x000ffcff

3401ab0c <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401ab0c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3401ab0e:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401ab10:	2bff      	cmp	r3, #255	@ 0xff
{
3401ab12:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401ab14:	d904      	bls.n	3401ab20 <UART_AdvFeatureConfig+0x14>
3401ab16:	f640 41e5 	movw	r1, #3301	@ 0xce5
3401ab1a:	487e      	ldr	r0, [pc, #504]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401ab1c:	f002 ff34 	bl	3401d988 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3401ab20:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401ab22:	0718      	lsls	r0, r3, #28
3401ab24:	d50f      	bpl.n	3401ab46 <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3401ab26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401ab28:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3401ab2c:	d004      	beq.n	3401ab38 <UART_AdvFeatureConfig+0x2c>
3401ab2e:	f640 41ea 	movw	r1, #3306	@ 0xcea
3401ab32:	4878      	ldr	r0, [pc, #480]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401ab34:	f002 ff28 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3401ab38:	6822      	ldr	r2, [r4, #0]
3401ab3a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3401ab3c:	6853      	ldr	r3, [r2, #4]
3401ab3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3401ab42:	430b      	orrs	r3, r1
3401ab44:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3401ab46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401ab48:	07d9      	lsls	r1, r3, #31
3401ab4a:	d50f      	bpl.n	3401ab6c <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3401ab4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401ab4e:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3401ab52:	d004      	beq.n	3401ab5e <UART_AdvFeatureConfig+0x52>
3401ab54:	f640 41f1 	movw	r1, #3313	@ 0xcf1
3401ab58:	486e      	ldr	r0, [pc, #440]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401ab5a:	f002 ff15 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3401ab5e:	6822      	ldr	r2, [r4, #0]
3401ab60:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3401ab62:	6853      	ldr	r3, [r2, #4]
3401ab64:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3401ab68:	430b      	orrs	r3, r1
3401ab6a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3401ab6c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401ab6e:	079a      	lsls	r2, r3, #30
3401ab70:	d50f      	bpl.n	3401ab92 <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3401ab72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401ab74:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3401ab78:	d004      	beq.n	3401ab84 <UART_AdvFeatureConfig+0x78>
3401ab7a:	f640 41f8 	movw	r1, #3320	@ 0xcf8
3401ab7e:	4865      	ldr	r0, [pc, #404]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401ab80:	f002 ff02 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3401ab84:	6822      	ldr	r2, [r4, #0]
3401ab86:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3401ab88:	6853      	ldr	r3, [r2, #4]
3401ab8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401ab8e:	430b      	orrs	r3, r1
3401ab90:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3401ab92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401ab94:	075b      	lsls	r3, r3, #29
3401ab96:	d50f      	bpl.n	3401abb8 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3401ab98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401ab9a:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3401ab9e:	d004      	beq.n	3401abaa <UART_AdvFeatureConfig+0x9e>
3401aba0:	f640 41ff 	movw	r1, #3327	@ 0xcff
3401aba4:	485b      	ldr	r0, [pc, #364]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401aba6:	f002 feef 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3401abaa:	6822      	ldr	r2, [r4, #0]
3401abac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401abae:	6853      	ldr	r3, [r2, #4]
3401abb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3401abb4:	430b      	orrs	r3, r1
3401abb6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3401abb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401abba:	06d8      	lsls	r0, r3, #27
3401abbc:	d50f      	bpl.n	3401abde <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3401abbe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401abc0:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3401abc4:	d004      	beq.n	3401abd0 <UART_AdvFeatureConfig+0xc4>
3401abc6:	f640 5106 	movw	r1, #3334	@ 0xd06
3401abca:	4852      	ldr	r0, [pc, #328]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401abcc:	f002 fedc 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3401abd0:	6822      	ldr	r2, [r4, #0]
3401abd2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3401abd4:	6893      	ldr	r3, [r2, #8]
3401abd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401abda:	430b      	orrs	r3, r1
3401abdc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3401abde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401abe0:	0699      	lsls	r1, r3, #26
3401abe2:	d50f      	bpl.n	3401ac04 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3401abe4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401abe6:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3401abea:	d004      	beq.n	3401abf6 <UART_AdvFeatureConfig+0xea>
3401abec:	f640 510e 	movw	r1, #3342	@ 0xd0e
3401abf0:	4848      	ldr	r0, [pc, #288]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401abf2:	f002 fec9 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3401abf6:	6822      	ldr	r2, [r4, #0]
3401abf8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3401abfa:	6893      	ldr	r3, [r2, #8]
3401abfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3401ac00:	430b      	orrs	r3, r1
3401ac02:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3401ac04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401ac06:	065a      	lsls	r2, r3, #25
3401ac08:	d56f      	bpl.n	3401acea <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3401ac0a:	6823      	ldr	r3, [r4, #0]
3401ac0c:	4a42      	ldr	r2, [pc, #264]	@ (3401ad18 <UART_AdvFeatureConfig+0x20c>)
3401ac0e:	4293      	cmp	r3, r2
3401ac10:	d047      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac12:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac16:	4293      	cmp	r3, r2
3401ac18:	d043      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac1a:	4a40      	ldr	r2, [pc, #256]	@ (3401ad1c <UART_AdvFeatureConfig+0x210>)
3401ac1c:	4293      	cmp	r3, r2
3401ac1e:	d040      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac20:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac24:	4293      	cmp	r3, r2
3401ac26:	d03c      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac28:	4a3d      	ldr	r2, [pc, #244]	@ (3401ad20 <UART_AdvFeatureConfig+0x214>)
3401ac2a:	4293      	cmp	r3, r2
3401ac2c:	d039      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac2e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac32:	4293      	cmp	r3, r2
3401ac34:	d035      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac36:	4a3b      	ldr	r2, [pc, #236]	@ (3401ad24 <UART_AdvFeatureConfig+0x218>)
3401ac38:	4293      	cmp	r3, r2
3401ac3a:	d032      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac3c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac40:	4293      	cmp	r3, r2
3401ac42:	d02e      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac44:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401ac48:	d02b      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401ac4e:	4293      	cmp	r3, r2
3401ac50:	d027      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac52:	4a35      	ldr	r2, [pc, #212]	@ (3401ad28 <UART_AdvFeatureConfig+0x21c>)
3401ac54:	4293      	cmp	r3, r2
3401ac56:	d024      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac58:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac5c:	4293      	cmp	r3, r2
3401ac5e:	d020      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac60:	4a32      	ldr	r2, [pc, #200]	@ (3401ad2c <UART_AdvFeatureConfig+0x220>)
3401ac62:	4293      	cmp	r3, r2
3401ac64:	d01d      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac66:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac6a:	4293      	cmp	r3, r2
3401ac6c:	d019      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac6e:	4a30      	ldr	r2, [pc, #192]	@ (3401ad30 <UART_AdvFeatureConfig+0x224>)
3401ac70:	4293      	cmp	r3, r2
3401ac72:	d016      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac74:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac78:	4293      	cmp	r3, r2
3401ac7a:	d012      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac7c:	4a2d      	ldr	r2, [pc, #180]	@ (3401ad34 <UART_AdvFeatureConfig+0x228>)
3401ac7e:	4293      	cmp	r3, r2
3401ac80:	d00f      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac82:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac86:	4293      	cmp	r3, r2
3401ac88:	d00b      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac8a:	4a2b      	ldr	r2, [pc, #172]	@ (3401ad38 <UART_AdvFeatureConfig+0x22c>)
3401ac8c:	4293      	cmp	r3, r2
3401ac8e:	d008      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac90:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401ac94:	4293      	cmp	r3, r2
3401ac96:	d004      	beq.n	3401aca2 <UART_AdvFeatureConfig+0x196>
3401ac98:	f640 5116 	movw	r1, #3350	@ 0xd16
3401ac9c:	481d      	ldr	r0, [pc, #116]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401ac9e:	f002 fe73 	bl	3401d988 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3401aca2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401aca4:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3401aca8:	d004      	beq.n	3401acb4 <UART_AdvFeatureConfig+0x1a8>
3401acaa:	f640 5117 	movw	r1, #3351	@ 0xd17
3401acae:	4819      	ldr	r0, [pc, #100]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401acb0:	f002 fe6a 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401acb4:	6821      	ldr	r1, [r4, #0]
3401acb6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3401acb8:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3401acba:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401acbe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3401acc2:	ea43 0302 	orr.w	r3, r3, r2
3401acc6:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3401acc8:	d10f      	bne.n	3401acea <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3401acca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401accc:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3401acd0:	d004      	beq.n	3401acdc <UART_AdvFeatureConfig+0x1d0>
3401acd2:	f640 511c 	movw	r1, #3356	@ 0xd1c
3401acd6:	480f      	ldr	r0, [pc, #60]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401acd8:	f002 fe56 	bl	3401d988 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3401acdc:	6822      	ldr	r2, [r4, #0]
3401acde:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3401ace0:	6853      	ldr	r3, [r2, #4]
3401ace2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3401ace6:	430b      	orrs	r3, r1
3401ace8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3401acea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401acec:	061b      	lsls	r3, r3, #24
3401acee:	d50f      	bpl.n	3401ad10 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3401acf0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401acf2:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3401acf6:	d004      	beq.n	3401ad02 <UART_AdvFeatureConfig+0x1f6>
3401acf8:	f640 5124 	movw	r1, #3364	@ 0xd24
3401acfc:	4805      	ldr	r0, [pc, #20]	@ (3401ad14 <UART_AdvFeatureConfig+0x208>)
3401acfe:	f002 fe43 	bl	3401d988 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3401ad02:	6822      	ldr	r2, [r4, #0]
3401ad04:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401ad06:	6853      	ldr	r3, [r2, #4]
3401ad08:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3401ad0c:	430b      	orrs	r3, r1
3401ad0e:	6053      	str	r3, [r2, #4]
}
3401ad10:	bd10      	pop	{r4, pc}
3401ad12:	bf00      	nop
3401ad14:	34026c7e 	.word	0x34026c7e
3401ad18:	52001000 	.word	0x52001000
3401ad1c:	50004400 	.word	0x50004400
3401ad20:	50004800 	.word	0x50004800
3401ad24:	50004c00 	.word	0x50004c00
3401ad28:	52001400 	.word	0x52001400
3401ad2c:	50007800 	.word	0x50007800
3401ad30:	50007c00 	.word	0x50007c00
3401ad34:	52001800 	.word	0x52001800
3401ad38:	52001c00 	.word	0x52001c00

3401ad3c <UART_WaitOnFlagUntilTimeout>:
{
3401ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401ad40:	4604      	mov	r4, r0
3401ad42:	460d      	mov	r5, r1
3401ad44:	4617      	mov	r7, r2
3401ad46:	4698      	mov	r8, r3
3401ad48:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3401ad4c:	6822      	ldr	r2, [r4, #0]
3401ad4e:	69d3      	ldr	r3, [r2, #28]
3401ad50:	ea35 0303 	bics.w	r3, r5, r3
3401ad54:	bf0c      	ite	eq
3401ad56:	2301      	moveq	r3, #1
3401ad58:	2300      	movne	r3, #0
3401ad5a:	42bb      	cmp	r3, r7
3401ad5c:	d001      	beq.n	3401ad62 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3401ad5e:	2000      	movs	r0, #0
3401ad60:	e022      	b.n	3401ada8 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3401ad62:	f1b9 3fff 	cmp.w	r9, #4294967295
3401ad66:	d0f2      	beq.n	3401ad4e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401ad68:	f002 fade 	bl	3401d328 <HAL_GetTick>
3401ad6c:	eba0 0008 	sub.w	r0, r0, r8
3401ad70:	4548      	cmp	r0, r9
3401ad72:	d829      	bhi.n	3401adc8 <UART_WaitOnFlagUntilTimeout+0x8c>
3401ad74:	f1b9 0f00 	cmp.w	r9, #0
3401ad78:	d026      	beq.n	3401adc8 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3401ad7a:	6821      	ldr	r1, [r4, #0]
3401ad7c:	680b      	ldr	r3, [r1, #0]
3401ad7e:	075a      	lsls	r2, r3, #29
3401ad80:	d5e4      	bpl.n	3401ad4c <UART_WaitOnFlagUntilTimeout+0x10>
3401ad82:	2d80      	cmp	r5, #128	@ 0x80
3401ad84:	d0e2      	beq.n	3401ad4c <UART_WaitOnFlagUntilTimeout+0x10>
3401ad86:	2d40      	cmp	r5, #64	@ 0x40
3401ad88:	d0e0      	beq.n	3401ad4c <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3401ad8a:	69ce      	ldr	r6, [r1, #28]
3401ad8c:	f016 0608 	ands.w	r6, r6, #8
3401ad90:	d00c      	beq.n	3401adac <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401ad92:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3401ad94:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401ad96:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3401ad98:	f7ff fd10 	bl	3401a7bc <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3401ad9c:	2300      	movs	r3, #0
          return HAL_ERROR;
3401ad9e:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3401ada0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3401ada4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3401ada8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3401adac:	69cb      	ldr	r3, [r1, #28]
3401adae:	051b      	lsls	r3, r3, #20
3401adb0:	d5cc      	bpl.n	3401ad4c <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401adb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3401adb6:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401adb8:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3401adba:	f7ff fcff 	bl	3401a7bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401adbe:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3401adc0:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401adc4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3401adc8:	2003      	movs	r0, #3
3401adca:	e7ed      	b.n	3401ada8 <UART_WaitOnFlagUntilTimeout+0x6c>

3401adcc <HAL_UART_Transmit>:
{
3401adcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401add0:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3401add2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3401add6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3401add8:	2b20      	cmp	r3, #32
{
3401adda:	460d      	mov	r5, r1
3401addc:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3401adde:	d148      	bne.n	3401ae72 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3401ade0:	2900      	cmp	r1, #0
3401ade2:	d048      	beq.n	3401ae76 <HAL_UART_Transmit+0xaa>
3401ade4:	2a00      	cmp	r2, #0
3401ade6:	d046      	beq.n	3401ae76 <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401ade8:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3401adea:	f04f 0900 	mov.w	r9, #0
3401adee:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401adf2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3401adf6:	f002 fa97 	bl	3401d328 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401adfa:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3401adfc:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401ae00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3401ae04:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3401ae08:	4607      	mov	r7, r0
      pdata16bits = NULL;
3401ae0a:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401ae0c:	d103      	bne.n	3401ae16 <HAL_UART_Transmit+0x4a>
3401ae0e:	6923      	ldr	r3, [r4, #16]
3401ae10:	b90b      	cbnz	r3, 3401ae16 <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3401ae12:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3401ae14:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3401ae16:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401ae1a:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3401ae1c:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401ae1e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3401ae22:	b942      	cbnz	r2, 3401ae36 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3401ae24:	2140      	movs	r1, #64	@ 0x40
3401ae26:	4620      	mov	r0, r4
3401ae28:	f7ff ff88 	bl	3401ad3c <UART_WaitOnFlagUntilTimeout>
3401ae2c:	2320      	movs	r3, #32
3401ae2e:	b948      	cbnz	r0, 3401ae44 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3401ae30:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3401ae34:	e009      	b.n	3401ae4a <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401ae36:	2200      	movs	r2, #0
3401ae38:	2180      	movs	r1, #128	@ 0x80
3401ae3a:	4620      	mov	r0, r4
3401ae3c:	f7ff ff7e 	bl	3401ad3c <UART_WaitOnFlagUntilTimeout>
3401ae40:	b130      	cbz	r0, 3401ae50 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3401ae42:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3401ae44:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3401ae46:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3401ae4a:	b003      	add	sp, #12
3401ae4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3401ae50:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3401ae52:	b95d      	cbnz	r5, 3401ae6c <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3401ae54:	f836 3b02 	ldrh.w	r3, [r6], #2
3401ae58:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3401ae5c:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3401ae5e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3401ae62:	3a01      	subs	r2, #1
3401ae64:	b292      	uxth	r2, r2
3401ae66:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3401ae6a:	e7d4      	b.n	3401ae16 <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3401ae6c:	f815 3b01 	ldrb.w	r3, [r5], #1
3401ae70:	e7f4      	b.n	3401ae5c <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3401ae72:	2002      	movs	r0, #2
3401ae74:	e7e9      	b.n	3401ae4a <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3401ae76:	2001      	movs	r0, #1
3401ae78:	e7e7      	b.n	3401ae4a <HAL_UART_Transmit+0x7e>

3401ae7a <UART_CheckIdleState>:
{
3401ae7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401ae7c:	2600      	movs	r6, #0
{
3401ae7e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401ae80:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3401ae84:	f002 fa50 	bl	3401d328 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401ae88:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3401ae8a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401ae8c:	681b      	ldr	r3, [r3, #0]
3401ae8e:	071a      	lsls	r2, r3, #28
3401ae90:	d51c      	bpl.n	3401aecc <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401ae92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401ae96:	4632      	mov	r2, r6
3401ae98:	9300      	str	r3, [sp, #0]
3401ae9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3401ae9e:	4603      	mov	r3, r0
3401aea0:	4620      	mov	r0, r4
3401aea2:	f7ff ff4b 	bl	3401ad3c <UART_WaitOnFlagUntilTimeout>
3401aea6:	b188      	cbz	r0, 3401aecc <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3401aea8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401aeaa:	e852 3f00 	ldrex	r3, [r2]
3401aeae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401aeb2:	e842 3100 	strex	r1, r3, [r2]
3401aeb6:	2900      	cmp	r1, #0
3401aeb8:	d1f6      	bne.n	3401aea8 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3401aeba:	2320      	movs	r3, #32
3401aebc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3401aec0:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3401aec2:	2300      	movs	r3, #0
3401aec4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3401aec8:	b002      	add	sp, #8
3401aeca:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3401aecc:	6823      	ldr	r3, [r4, #0]
3401aece:	681b      	ldr	r3, [r3, #0]
3401aed0:	075b      	lsls	r3, r3, #29
3401aed2:	d524      	bpl.n	3401af1e <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401aed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401aed8:	2200      	movs	r2, #0
3401aeda:	9300      	str	r3, [sp, #0]
3401aedc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3401aee0:	462b      	mov	r3, r5
3401aee2:	4620      	mov	r0, r4
3401aee4:	f7ff ff2a 	bl	3401ad3c <UART_WaitOnFlagUntilTimeout>
3401aee8:	b1c8      	cbz	r0, 3401af1e <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3401aeea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401aeec:	e852 3f00 	ldrex	r3, [r2]
3401aef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401aef4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3401aef8:	6822      	ldr	r2, [r4, #0]
3401aefa:	2900      	cmp	r1, #0
3401aefc:	d1f5      	bne.n	3401aeea <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401aefe:	f102 0308 	add.w	r3, r2, #8
3401af02:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3401af06:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401af0a:	f102 0008 	add.w	r0, r2, #8
3401af0e:	e840 3100 	strex	r1, r3, [r0]
3401af12:	2900      	cmp	r1, #0
3401af14:	d1f3      	bne.n	3401aefe <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3401af16:	2320      	movs	r3, #32
3401af18:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3401af1c:	e7d0      	b.n	3401aec0 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3401af1e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401af20:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3401af22:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3401af26:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401af2a:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3401af2c:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3401af2e:	e7c8      	b.n	3401aec2 <UART_CheckIdleState+0x48>

3401af30 <HAL_UART_Init>:
{
3401af30:	b510      	push	{r4, lr}
  if (huart == NULL)
3401af32:	4604      	mov	r4, r0
3401af34:	2800      	cmp	r0, #0
3401af36:	f000 80d0 	beq.w	3401b0da <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401af3a:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401af3c:	6803      	ldr	r3, [r0, #0]
3401af3e:	4a68      	ldr	r2, [pc, #416]	@ (3401b0e0 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401af40:	2900      	cmp	r1, #0
3401af42:	d07c      	beq.n	3401b03e <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401af44:	4293      	cmp	r3, r2
3401af46:	d04e      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af48:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401af4c:	4293      	cmp	r3, r2
3401af4e:	d04a      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af50:	4a64      	ldr	r2, [pc, #400]	@ (3401b0e4 <HAL_UART_Init+0x1b4>)
3401af52:	4293      	cmp	r3, r2
3401af54:	d047      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af56:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401af5a:	4293      	cmp	r3, r2
3401af5c:	d043      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af5e:	4a62      	ldr	r2, [pc, #392]	@ (3401b0e8 <HAL_UART_Init+0x1b8>)
3401af60:	4293      	cmp	r3, r2
3401af62:	d040      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af64:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401af68:	4293      	cmp	r3, r2
3401af6a:	d03c      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af6c:	4a5f      	ldr	r2, [pc, #380]	@ (3401b0ec <HAL_UART_Init+0x1bc>)
3401af6e:	4293      	cmp	r3, r2
3401af70:	d039      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af72:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401af76:	4293      	cmp	r3, r2
3401af78:	d035      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af7a:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401af7e:	d032      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401af84:	4293      	cmp	r3, r2
3401af86:	d02e      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af88:	4a59      	ldr	r2, [pc, #356]	@ (3401b0f0 <HAL_UART_Init+0x1c0>)
3401af8a:	4293      	cmp	r3, r2
3401af8c:	d02b      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af8e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401af92:	4293      	cmp	r3, r2
3401af94:	d027      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af96:	4a57      	ldr	r2, [pc, #348]	@ (3401b0f4 <HAL_UART_Init+0x1c4>)
3401af98:	4293      	cmp	r3, r2
3401af9a:	d024      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401af9c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401afa0:	4293      	cmp	r3, r2
3401afa2:	d020      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afa4:	4a54      	ldr	r2, [pc, #336]	@ (3401b0f8 <HAL_UART_Init+0x1c8>)
3401afa6:	4293      	cmp	r3, r2
3401afa8:	d01d      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afaa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401afae:	4293      	cmp	r3, r2
3401afb0:	d019      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afb2:	4a52      	ldr	r2, [pc, #328]	@ (3401b0fc <HAL_UART_Init+0x1cc>)
3401afb4:	4293      	cmp	r3, r2
3401afb6:	d016      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afb8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401afbc:	4293      	cmp	r3, r2
3401afbe:	d012      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afc0:	4a4f      	ldr	r2, [pc, #316]	@ (3401b100 <HAL_UART_Init+0x1d0>)
3401afc2:	4293      	cmp	r3, r2
3401afc4:	d00f      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afc6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401afca:	4293      	cmp	r3, r2
3401afcc:	d00b      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afce:	4a4d      	ldr	r2, [pc, #308]	@ (3401b104 <HAL_UART_Init+0x1d4>)
3401afd0:	4293      	cmp	r3, r2
3401afd2:	d008      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afd4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401afd8:	4293      	cmp	r3, r2
3401afda:	d004      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401afdc:	f44f 71a0 	mov.w	r1, #320	@ 0x140
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401afe0:	4849      	ldr	r0, [pc, #292]	@ (3401b108 <HAL_UART_Init+0x1d8>)
3401afe2:	f002 fcd1 	bl	3401d988 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3401afe6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3401afea:	b923      	cbnz	r3, 3401aff6 <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3401afec:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3401afee:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3401aff2:	f7ff fc0f 	bl	3401a814 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3401aff6:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3401aff8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3401affa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3401affe:	6813      	ldr	r3, [r2, #0]
3401b000:	f023 0301 	bic.w	r3, r3, #1
3401b004:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3401b006:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401b008:	b113      	cbz	r3, 3401b010 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3401b00a:	4620      	mov	r0, r4
3401b00c:	f7ff fd7e 	bl	3401ab0c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3401b010:	4620      	mov	r0, r4
3401b012:	f7ff fc01 	bl	3401a818 <UART_SetConfig>
3401b016:	2801      	cmp	r0, #1
3401b018:	d05f      	beq.n	3401b0da <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3401b01a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3401b01c:	4620      	mov	r0, r4
}
3401b01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3401b022:	685a      	ldr	r2, [r3, #4]
3401b024:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3401b028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3401b02a:	689a      	ldr	r2, [r3, #8]
3401b02c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3401b030:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3401b032:	681a      	ldr	r2, [r3, #0]
3401b034:	f042 0201 	orr.w	r2, r2, #1
3401b038:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3401b03a:	f7ff bf1e 	b.w	3401ae7a <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401b03e:	4293      	cmp	r3, r2
3401b040:	d0d1      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b042:	4a32      	ldr	r2, [pc, #200]	@ (3401b10c <HAL_UART_Init+0x1dc>)
3401b044:	4293      	cmp	r3, r2
3401b046:	d0ce      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b048:	4a26      	ldr	r2, [pc, #152]	@ (3401b0e4 <HAL_UART_Init+0x1b4>)
3401b04a:	4293      	cmp	r3, r2
3401b04c:	d0cb      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b04e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b052:	4293      	cmp	r3, r2
3401b054:	d0c7      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b056:	4a24      	ldr	r2, [pc, #144]	@ (3401b0e8 <HAL_UART_Init+0x1b8>)
3401b058:	4293      	cmp	r3, r2
3401b05a:	d0c4      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b05c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b060:	4293      	cmp	r3, r2
3401b062:	d0c0      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b064:	4a21      	ldr	r2, [pc, #132]	@ (3401b0ec <HAL_UART_Init+0x1bc>)
3401b066:	4293      	cmp	r3, r2
3401b068:	d0bd      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b06a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b06e:	4293      	cmp	r3, r2
3401b070:	d0b9      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b072:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401b076:	d0b6      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b078:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401b07c:	4293      	cmp	r3, r2
3401b07e:	d0b2      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b080:	4a1b      	ldr	r2, [pc, #108]	@ (3401b0f0 <HAL_UART_Init+0x1c0>)
3401b082:	4293      	cmp	r3, r2
3401b084:	d0af      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b086:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b08a:	4293      	cmp	r3, r2
3401b08c:	d0ab      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b08e:	4a19      	ldr	r2, [pc, #100]	@ (3401b0f4 <HAL_UART_Init+0x1c4>)
3401b090:	4293      	cmp	r3, r2
3401b092:	d0a8      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b094:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b098:	4293      	cmp	r3, r2
3401b09a:	d0a4      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b09c:	4a16      	ldr	r2, [pc, #88]	@ (3401b0f8 <HAL_UART_Init+0x1c8>)
3401b09e:	4293      	cmp	r3, r2
3401b0a0:	d0a1      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0a2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b0a6:	4293      	cmp	r3, r2
3401b0a8:	d09d      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0aa:	4a14      	ldr	r2, [pc, #80]	@ (3401b0fc <HAL_UART_Init+0x1cc>)
3401b0ac:	4293      	cmp	r3, r2
3401b0ae:	d09a      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0b0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b0b4:	4293      	cmp	r3, r2
3401b0b6:	d096      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0b8:	4a11      	ldr	r2, [pc, #68]	@ (3401b100 <HAL_UART_Init+0x1d0>)
3401b0ba:	4293      	cmp	r3, r2
3401b0bc:	d093      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0be:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b0c2:	4293      	cmp	r3, r2
3401b0c4:	d08f      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0c6:	4a0f      	ldr	r2, [pc, #60]	@ (3401b104 <HAL_UART_Init+0x1d4>)
3401b0c8:	4293      	cmp	r3, r2
3401b0ca:	d08c      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0cc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b0d0:	4293      	cmp	r3, r2
3401b0d2:	d088      	beq.n	3401afe6 <HAL_UART_Init+0xb6>
3401b0d4:	f240 1145 	movw	r1, #325	@ 0x145
3401b0d8:	e782      	b.n	3401afe0 <HAL_UART_Init+0xb0>
}
3401b0da:	2001      	movs	r0, #1
3401b0dc:	bd10      	pop	{r4, pc}
3401b0de:	bf00      	nop
3401b0e0:	52001000 	.word	0x52001000
3401b0e4:	50004400 	.word	0x50004400
3401b0e8:	50004800 	.word	0x50004800
3401b0ec:	50004c00 	.word	0x50004c00
3401b0f0:	52001400 	.word	0x52001400
3401b0f4:	50007800 	.word	0x50007800
3401b0f8:	50007c00 	.word	0x50007c00
3401b0fc:	52001800 	.word	0x52001800
3401b100:	52001c00 	.word	0x52001c00
3401b104:	56000c00 	.word	0x56000c00
3401b108:	34026c7e 	.word	0x34026c7e
3401b10c:	42001000 	.word	0x42001000

3401b110 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401b110:	6802      	ldr	r2, [r0, #0]
{
3401b112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401b116:	6813      	ldr	r3, [r2, #0]
{
3401b118:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401b11a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401b11e:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401b120:	6883      	ldr	r3, [r0, #8]
{
3401b122:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401b124:	b97b      	cbnz	r3, 3401b146 <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401b126:	684b      	ldr	r3, [r1, #4]
3401b128:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3401b12c:	d004      	beq.n	3401b138 <XSPI_ConfigCmd+0x28>
3401b12e:	f640 41a4 	movw	r1, #3236	@ 0xca4
3401b132:	4876      	ldr	r0, [pc, #472]	@ (3401b30c <XSPI_ConfigCmd+0x1fc>)
3401b134:	f002 fc28 	bl	3401d988 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3401b138:	6832      	ldr	r2, [r6, #0]
3401b13a:	6861      	ldr	r1, [r4, #4]
3401b13c:	6813      	ldr	r3, [r2, #0]
3401b13e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3401b142:	430b      	orrs	r3, r1
3401b144:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401b146:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3401b148:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401b14a:	2b02      	cmp	r3, #2
3401b14c:	d158      	bne.n	3401b200 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3401b14e:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3401b152:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3401b156:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3401b15a:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3401b15e:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3401b160:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401b162:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3401b164:	b167      	cbz	r7, 3401b180 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3401b166:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3401b168:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3401b16a:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3401b16c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401b16e:	f8d2 c000 	ldr.w	ip, [r2]
3401b172:	433b      	orrs	r3, r7
3401b174:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3401b176:	433b      	orrs	r3, r7
3401b178:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3401b17c:	433b      	orrs	r3, r7
3401b17e:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3401b180:	6803      	ldr	r3, [r0, #0]
3401b182:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3401b184:	f023 031f 	bic.w	r3, r3, #31
3401b188:	433b      	orrs	r3, r7
3401b18a:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b18c:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3401b190:	f1be 0f00 	cmp.w	lr, #0
3401b194:	d00e      	beq.n	3401b1b4 <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b196:	6823      	ldr	r3, [r4, #0]
3401b198:	b913      	cbnz	r3, 3401b1a0 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3401b19a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401b19c:	3b01      	subs	r3, #1
3401b19e:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3401b1a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401b1a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3401b1a6:	d13f      	bne.n	3401b228 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401b1a8:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3401b1ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401b1b0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401b1b4:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b1b6:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401b1ba:	2b00      	cmp	r3, #0
3401b1bc:	f000 8083 	beq.w	3401b2c6 <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b1c0:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b1c4:	f1b9 0f00 	cmp.w	r9, #0
3401b1c8:	d053      	beq.n	3401b272 <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b1ca:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b1ce:	f1be 0f00 	cmp.w	lr, #0
3401b1d2:	d032      	beq.n	3401b23a <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b1d4:	ea4e 0303 	orr.w	r3, lr, r3
3401b1d8:	ea43 0309 	orr.w	r3, r3, r9
3401b1dc:	ea43 0308 	orr.w	r3, r3, r8
3401b1e0:	ea43 030c 	orr.w	r3, r3, ip
3401b1e4:	433b      	orrs	r3, r7
3401b1e6:	4303      	orrs	r3, r0
3401b1e8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401b1ea:	6816      	ldr	r6, [r2, #0]
3401b1ec:	4303      	orrs	r3, r0
3401b1ee:	4848      	ldr	r0, [pc, #288]	@ (3401b310 <XSPI_ConfigCmd+0x200>)
3401b1f0:	4030      	ands	r0, r6
3401b1f2:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b1f4:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3401b1f6:	68a3      	ldr	r3, [r4, #8]
3401b1f8:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3401b1fa:	69a3      	ldr	r3, [r4, #24]
3401b1fc:	648b      	str	r3, [r1, #72]	@ 0x48
3401b1fe:	e04c      	b.n	3401b29a <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3401b200:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3401b202:	bf01      	itttt	eq
3401b204:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3401b208:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3401b20c:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3401b210:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3401b214:	bf1f      	itttt	ne
3401b216:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3401b21a:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3401b21e:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3401b222:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3401b226:	e79a      	b.n	3401b15e <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3401b228:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3401b22a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401b22e:	d1c1      	bne.n	3401b1b4 <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401b230:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3401b234:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401b238:	e7ba      	b.n	3401b1b0 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b23a:	ea43 0309 	orr.w	r3, r3, r9
3401b23e:	f8d2 e000 	ldr.w	lr, [r2]
3401b242:	ea43 0308 	orr.w	r3, r3, r8
3401b246:	ea43 030c 	orr.w	r3, r3, ip
3401b24a:	433b      	orrs	r3, r7
3401b24c:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3401b250:	4303      	orrs	r3, r0
3401b252:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3401b256:	ea43 030e 	orr.w	r3, r3, lr
3401b25a:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3401b25c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3401b25e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401b262:	d1c8      	bne.n	3401b1f6 <XSPI_ConfigCmd+0xe6>
3401b264:	6963      	ldr	r3, [r4, #20]
3401b266:	2b08      	cmp	r3, #8
3401b268:	d1c5      	bne.n	3401b1f6 <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b26a:	6813      	ldr	r3, [r2, #0]
3401b26c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401b270:	e7c0      	b.n	3401b1f4 <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3401b272:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b274:	f1be 0f00 	cmp.w	lr, #0
3401b278:	d012      	beq.n	3401b2a0 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3401b27a:	ea4e 0303 	orr.w	r3, lr, r3
3401b27e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401b280:	ea43 0308 	orr.w	r3, r3, r8
3401b284:	ea43 030c 	orr.w	r3, r3, ip
3401b288:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3401b28c:	4303      	orrs	r3, r0
3401b28e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3401b292:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b294:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3401b296:	68a3      	ldr	r3, [r4, #8]
3401b298:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3401b29a:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3401b29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3401b2a0:	ea43 0308 	orr.w	r3, r3, r8
3401b2a4:	ea43 030c 	orr.w	r3, r3, ip
3401b2a8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3401b2ac:	430b      	orrs	r3, r1
3401b2ae:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3401b2b0:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3401b2b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401b2b6:	d1ee      	bne.n	3401b296 <XSPI_ConfigCmd+0x186>
3401b2b8:	6963      	ldr	r3, [r4, #20]
3401b2ba:	2b08      	cmp	r3, #8
3401b2bc:	d1eb      	bne.n	3401b296 <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401b2be:	6813      	ldr	r3, [r2, #0]
3401b2c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401b2c4:	e7e6      	b.n	3401b294 <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b2c6:	f1b9 0f00 	cmp.w	r9, #0
3401b2ca:	d01b      	beq.n	3401b304 <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401b2cc:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b2d0:	f1be 0f00 	cmp.w	lr, #0
3401b2d4:	d00d      	beq.n	3401b2f2 <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3401b2d6:	ea4e 0309 	orr.w	r3, lr, r9
3401b2da:	6815      	ldr	r5, [r2, #0]
3401b2dc:	4303      	orrs	r3, r0
3401b2de:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401b2e0:	4333      	orrs	r3, r6
3401b2e2:	4303      	orrs	r3, r0
3401b2e4:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3401b2e8:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3401b2ec:	4303      	orrs	r3, r0
3401b2ee:	6013      	str	r3, [r2, #0]
3401b2f0:	e783      	b.n	3401b1fa <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3401b2f2:	6813      	ldr	r3, [r2, #0]
3401b2f4:	ea40 0009 	orr.w	r0, r0, r9
3401b2f8:	4330      	orrs	r0, r6
3401b2fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401b2fe:	4318      	orrs	r0, r3
3401b300:	6010      	str	r0, [r2, #0]
3401b302:	e77a      	b.n	3401b1fa <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401b304:	2308      	movs	r3, #8
      status = HAL_ERROR;
3401b306:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401b308:	65f3      	str	r3, [r6, #92]	@ 0x5c
3401b30a:	e7c7      	b.n	3401b29c <XSPI_ConfigCmd+0x18c>
3401b30c:	34026cdf 	.word	0x34026cdf
3401b310:	f0ffc0c0 	.word	0xf0ffc0c0

3401b314 <XSPI_WaitFlagStateUntilTimeout>:
{
3401b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401b318:	4604      	mov	r4, r0
3401b31a:	460e      	mov	r6, r1
3401b31c:	4615      	mov	r5, r2
3401b31e:	461f      	mov	r7, r3
3401b320:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401b324:	6822      	ldr	r2, [r4, #0]
3401b326:	6a13      	ldr	r3, [r2, #32]
3401b328:	4233      	tst	r3, r6
3401b32a:	bf14      	ite	ne
3401b32c:	2301      	movne	r3, #1
3401b32e:	2300      	moveq	r3, #0
3401b330:	42ab      	cmp	r3, r5
3401b332:	d101      	bne.n	3401b338 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3401b334:	2000      	movs	r0, #0
3401b336:	e00e      	b.n	3401b356 <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3401b338:	f1b8 3fff 	cmp.w	r8, #4294967295
3401b33c:	d0f3      	beq.n	3401b326 <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401b33e:	f001 fff3 	bl	3401d328 <HAL_GetTick>
3401b342:	1bc0      	subs	r0, r0, r7
3401b344:	4540      	cmp	r0, r8
3401b346:	d908      	bls.n	3401b35a <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3401b348:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401b34a:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3401b34c:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401b34e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3401b350:	f043 0301 	orr.w	r3, r3, #1
3401b354:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3401b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401b35a:	f1b8 0f00 	cmp.w	r8, #0
3401b35e:	d1e1      	bne.n	3401b324 <XSPI_WaitFlagStateUntilTimeout+0x10>
3401b360:	e7f2      	b.n	3401b348 <XSPI_WaitFlagStateUntilTimeout+0x34>

3401b362 <HAL_XSPI_MspInit>:
}
3401b362:	4770      	bx	lr

3401b364 <HAL_XSPI_Init>:
{
3401b364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401b366:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3401b368:	f001 ffde 	bl	3401d328 <HAL_GetTick>
3401b36c:	4606      	mov	r6, r0
  if (hxspi == NULL)
3401b36e:	2c00      	cmp	r4, #0
3401b370:	f000 812a 	beq.w	3401b5c8 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3401b374:	68a3      	ldr	r3, [r4, #8]
3401b376:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3401b37a:	d004      	beq.n	3401b386 <HAL_XSPI_Init+0x22>
3401b37c:	f240 1161 	movw	r1, #353	@ 0x161
3401b380:	4892      	ldr	r0, [pc, #584]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b382:	f002 fb01 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3401b386:	68e3      	ldr	r3, [r4, #12]
3401b388:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3401b38c:	d009      	beq.n	3401b3a2 <HAL_XSPI_Init+0x3e>
3401b38e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3401b392:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401b396:	d004      	beq.n	3401b3a2 <HAL_XSPI_Init+0x3e>
3401b398:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401b39c:	488b      	ldr	r0, [pc, #556]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b39e:	f002 faf3 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3401b3a2:	6923      	ldr	r3, [r4, #16]
3401b3a4:	2b1f      	cmp	r3, #31
3401b3a6:	d904      	bls.n	3401b3b2 <HAL_XSPI_Init+0x4e>
3401b3a8:	f240 1163 	movw	r1, #355	@ 0x163
3401b3ac:	4887      	ldr	r0, [pc, #540]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b3ae:	f002 faeb 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3401b3b2:	6963      	ldr	r3, [r4, #20]
3401b3b4:	3b01      	subs	r3, #1
3401b3b6:	2b3f      	cmp	r3, #63	@ 0x3f
3401b3b8:	d904      	bls.n	3401b3c4 <HAL_XSPI_Init+0x60>
3401b3ba:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3401b3be:	4883      	ldr	r0, [pc, #524]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b3c0:	f002 fae2 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3401b3c4:	69a3      	ldr	r3, [r4, #24]
3401b3c6:	f033 0302 	bics.w	r3, r3, #2
3401b3ca:	d004      	beq.n	3401b3d6 <HAL_XSPI_Init+0x72>
3401b3cc:	f240 1165 	movw	r1, #357	@ 0x165
3401b3d0:	487e      	ldr	r0, [pc, #504]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b3d2:	f002 fad9 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3401b3d6:	69e3      	ldr	r3, [r4, #28]
3401b3d8:	2b01      	cmp	r3, #1
3401b3da:	d904      	bls.n	3401b3e6 <HAL_XSPI_Init+0x82>
3401b3dc:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3401b3e0:	487a      	ldr	r0, [pc, #488]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b3e2:	f002 fad1 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3401b3e6:	6a23      	ldr	r3, [r4, #32]
3401b3e8:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3401b3ec:	d00c      	beq.n	3401b408 <HAL_XSPI_Init+0xa4>
3401b3ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401b3f2:	d009      	beq.n	3401b408 <HAL_XSPI_Init+0xa4>
3401b3f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401b3f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401b3fc:	d004      	beq.n	3401b408 <HAL_XSPI_Init+0xa4>
3401b3fe:	f240 1167 	movw	r1, #359	@ 0x167
3401b402:	4872      	ldr	r0, [pc, #456]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b404:	f002 fac0 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3401b408:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401b40a:	2bff      	cmp	r3, #255	@ 0xff
3401b40c:	d904      	bls.n	3401b418 <HAL_XSPI_Init+0xb4>
3401b40e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3401b412:	486e      	ldr	r0, [pc, #440]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b414:	f002 fab8 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3401b418:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401b41a:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3401b41e:	d004      	beq.n	3401b42a <HAL_XSPI_Init+0xc6>
3401b420:	f240 1169 	movw	r1, #361	@ 0x169
3401b424:	4869      	ldr	r0, [pc, #420]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b426:	f002 faaf 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3401b42a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401b42c:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3401b430:	d004      	beq.n	3401b43c <HAL_XSPI_Init+0xd8>
3401b432:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3401b436:	4865      	ldr	r0, [pc, #404]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b438:	f002 faa6 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3401b43c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401b43e:	2b1f      	cmp	r3, #31
3401b440:	d904      	bls.n	3401b44c <HAL_XSPI_Init+0xe8>
3401b442:	f240 116b 	movw	r1, #363	@ 0x16b
3401b446:	4861      	ldr	r0, [pc, #388]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b448:	f002 fa9e 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3401b44c:	6863      	ldr	r3, [r4, #4]
3401b44e:	3b01      	subs	r3, #1
3401b450:	2b3f      	cmp	r3, #63	@ 0x3f
3401b452:	d904      	bls.n	3401b45e <HAL_XSPI_Init+0xfa>
3401b454:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3401b458:	485c      	ldr	r0, [pc, #368]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b45a:	f002 fa95 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3401b45e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401b460:	2bff      	cmp	r3, #255	@ 0xff
3401b462:	d904      	bls.n	3401b46e <HAL_XSPI_Init+0x10a>
3401b464:	f240 116d 	movw	r1, #365	@ 0x16d
3401b468:	4858      	ldr	r0, [pc, #352]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b46a:	f002 fa8d 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3401b46e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401b470:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3401b474:	d004      	beq.n	3401b480 <HAL_XSPI_Init+0x11c>
3401b476:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3401b47a:	4854      	ldr	r0, [pc, #336]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b47c:	f002 fa84 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3401b480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401b482:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3401b486:	d004      	beq.n	3401b492 <HAL_XSPI_Init+0x12e>
3401b488:	f240 116f 	movw	r1, #367	@ 0x16f
3401b48c:	484f      	ldr	r0, [pc, #316]	@ (3401b5cc <HAL_XSPI_Init+0x268>)
3401b48e:	f002 fa7b 	bl	3401d988 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3401b492:	2300      	movs	r3, #0
3401b494:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3401b496:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3401b498:	2f00      	cmp	r7, #0
3401b49a:	f040 8087 	bne.w	3401b5ac <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3401b49e:	4620      	mov	r0, r4
3401b4a0:	f7ff ff5f 	bl	3401b362 <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3401b4a4:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3401b4a8:	69e3      	ldr	r3, [r4, #28]
3401b4aa:	68e5      	ldr	r5, [r4, #12]
3401b4ac:	6821      	ldr	r1, [r4, #0]
3401b4ae:	431d      	orrs	r5, r3
3401b4b0:	6923      	ldr	r3, [r4, #16]
3401b4b2:	6888      	ldr	r0, [r1, #8]
3401b4b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3401b4b8:	4b45      	ldr	r3, [pc, #276]	@ (3401b5d0 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3401b4ba:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3401b4bc:	4003      	ands	r3, r0
3401b4be:	431d      	orrs	r5, r3
3401b4c0:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3401b4c2:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3401b4c4:	3b01      	subs	r3, #1
3401b4c6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3401b4ca:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3401b4cc:	68cb      	ldr	r3, [r1, #12]
3401b4ce:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3401b4d2:	4303      	orrs	r3, r0
3401b4d4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3401b4d6:	690b      	ldr	r3, [r1, #16]
3401b4d8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3401b4da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3401b4de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401b4e2:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3401b4e4:	690b      	ldr	r3, [r1, #16]
3401b4e6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3401b4e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3401b4ec:	4303      	orrs	r3, r0
3401b4ee:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3401b4f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3401b4f2:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3401b4f4:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3401b4f6:	680b      	ldr	r3, [r1, #0]
3401b4f8:	3801      	subs	r0, #1
3401b4fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401b4fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3401b502:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401b504:	4620      	mov	r0, r4
3401b506:	9200      	str	r2, [sp, #0]
3401b508:	4633      	mov	r3, r6
3401b50a:	463a      	mov	r2, r7
3401b50c:	2120      	movs	r1, #32
3401b50e:	f7ff ff01 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3401b512:	2800      	cmp	r0, #0
3401b514:	d156      	bne.n	3401b5c4 <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401b516:	6823      	ldr	r3, [r4, #0]
3401b518:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401b51a:	68da      	ldr	r2, [r3, #12]
3401b51c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3401b520:	430a      	orrs	r2, r1
3401b522:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3401b524:	4a2b      	ldr	r2, [pc, #172]	@ (3401b5d4 <HAL_XSPI_Init+0x270>)
3401b526:	4293      	cmp	r3, r2
3401b528:	d042      	beq.n	3401b5b0 <HAL_XSPI_Init+0x24c>
3401b52a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b52e:	4293      	cmp	r3, r2
3401b530:	d03e      	beq.n	3401b5b0 <HAL_XSPI_Init+0x24c>
3401b532:	4a29      	ldr	r2, [pc, #164]	@ (3401b5d8 <HAL_XSPI_Init+0x274>)
3401b534:	4293      	cmp	r3, r2
3401b536:	d03b      	beq.n	3401b5b0 <HAL_XSPI_Init+0x24c>
3401b538:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b53c:	4293      	cmp	r3, r2
3401b53e:	d037      	beq.n	3401b5b0 <HAL_XSPI_Init+0x24c>
3401b540:	4a26      	ldr	r2, [pc, #152]	@ (3401b5dc <HAL_XSPI_Init+0x278>)
3401b542:	4293      	cmp	r3, r2
3401b544:	d034      	beq.n	3401b5b0 <HAL_XSPI_Init+0x24c>
3401b546:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b54a:	4293      	cmp	r3, r2
3401b54c:	d030      	beq.n	3401b5b0 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3401b54e:	6823      	ldr	r3, [r4, #0]
3401b550:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3401b552:	6819      	ldr	r1, [r3, #0]
3401b554:	68a2      	ldr	r2, [r4, #8]
3401b556:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3401b55a:	4302      	orrs	r2, r0
3401b55c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3401b560:	430a      	orrs	r2, r1
3401b562:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3401b564:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3401b568:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3401b56c:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3401b570:	4302      	orrs	r2, r0
3401b572:	430a      	orrs	r2, r1
3401b574:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3401b578:	681a      	ldr	r2, [r3, #0]
3401b57a:	f042 0201 	orr.w	r2, r2, #1
3401b57e:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3401b580:	69a2      	ldr	r2, [r4, #24]
3401b582:	2a02      	cmp	r2, #2
3401b584:	d103      	bne.n	3401b58e <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3401b586:	689a      	ldr	r2, [r3, #8]
3401b588:	f042 0202 	orr.w	r2, r2, #2
3401b58c:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3401b58e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3401b590:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3401b594:	bf02      	ittt	eq
3401b596:	689a      	ldreq	r2, [r3, #8]
3401b598:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3401b59c:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b59e:	68e3      	ldr	r3, [r4, #12]
3401b5a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3401b5a4:	bf0c      	ite	eq
3401b5a6:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3401b5a8:	2302      	movne	r3, #2
3401b5aa:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3401b5ac:	2000      	movs	r0, #0
3401b5ae:	e009      	b.n	3401b5c4 <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401b5b0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3401b5b2:	2200      	movs	r2, #0
3401b5b4:	9300      	str	r3, [sp, #0]
3401b5b6:	2120      	movs	r1, #32
3401b5b8:	4633      	mov	r3, r6
3401b5ba:	4620      	mov	r0, r4
3401b5bc:	f7ff feaa 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3401b5c0:	2800      	cmp	r0, #0
3401b5c2:	d0c4      	beq.n	3401b54e <HAL_XSPI_Init+0x1ea>
}
3401b5c4:	b003      	add	sp, #12
3401b5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3401b5c8:	2001      	movs	r0, #1
3401b5ca:	e7fb      	b.n	3401b5c4 <HAL_XSPI_Init+0x260>
3401b5cc:	34026cdf 	.word	0x34026cdf
3401b5d0:	f8e0c0fc 	.word	0xf8e0c0fc
3401b5d4:	58025000 	.word	0x58025000
3401b5d8:	5802a000 	.word	0x5802a000
3401b5dc:	5802d000 	.word	0x5802d000

3401b5e0 <HAL_XSPI_Command>:
{
3401b5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401b5e2:	460c      	mov	r4, r1
3401b5e4:	4605      	mov	r5, r0
3401b5e6:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3401b5e8:	f001 fe9e 	bl	3401d328 <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3401b5ec:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401b5ee:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3401b5f0:	2b03      	cmp	r3, #3
3401b5f2:	d904      	bls.n	3401b5fe <HAL_XSPI_Command+0x1e>
3401b5f4:	f240 313e 	movw	r1, #830	@ 0x33e
3401b5f8:	4884      	ldr	r0, [pc, #528]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b5fa:	f002 f9c5 	bl	3401d988 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401b5fe:	68ab      	ldr	r3, [r5, #8]
3401b600:	b943      	cbnz	r3, 3401b614 <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401b602:	6863      	ldr	r3, [r4, #4]
3401b604:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3401b608:	d004      	beq.n	3401b614 <HAL_XSPI_Command+0x34>
3401b60a:	f240 3141 	movw	r1, #833	@ 0x341
3401b60e:	487f      	ldr	r0, [pc, #508]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b610:	f002 f9ba 	bl	3401d988 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3401b614:	68e3      	ldr	r3, [r4, #12]
3401b616:	2b04      	cmp	r3, #4
3401b618:	d904      	bls.n	3401b624 <HAL_XSPI_Command+0x44>
3401b61a:	f44f 7151 	mov.w	r1, #836	@ 0x344
3401b61e:	487b      	ldr	r0, [pc, #492]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b620:	f002 f9b2 	bl	3401d988 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401b624:	68e3      	ldr	r3, [r4, #12]
3401b626:	b18b      	cbz	r3, 3401b64c <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3401b628:	6923      	ldr	r3, [r4, #16]
3401b62a:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3401b62e:	d004      	beq.n	3401b63a <HAL_XSPI_Command+0x5a>
3401b630:	f240 3147 	movw	r1, #839	@ 0x347
3401b634:	4875      	ldr	r0, [pc, #468]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b636:	f002 f9a7 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3401b63a:	6963      	ldr	r3, [r4, #20]
3401b63c:	f033 0308 	bics.w	r3, r3, #8
3401b640:	d004      	beq.n	3401b64c <HAL_XSPI_Command+0x6c>
3401b642:	f44f 7152 	mov.w	r1, #840	@ 0x348
3401b646:	4871      	ldr	r0, [pc, #452]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b648:	f002 f99e 	bl	3401d988 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3401b64c:	69e3      	ldr	r3, [r4, #28]
3401b64e:	b303      	cbz	r3, 3401b692 <HAL_XSPI_Command+0xb2>
3401b650:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3401b654:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3401b658:	d10d      	bne.n	3401b676 <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401b65a:	6a23      	ldr	r3, [r4, #32]
3401b65c:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3401b660:	d12c      	bne.n	3401b6bc <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3401b662:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401b664:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3401b668:	d013      	beq.n	3401b692 <HAL_XSPI_Command+0xb2>
3401b66a:	f240 314f 	movw	r1, #847	@ 0x34f
3401b66e:	4867      	ldr	r0, [pc, #412]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b670:	f002 f98a 	bl	3401d988 <assert_failed>
3401b674:	e00d      	b.n	3401b692 <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3401b676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401b67a:	d0ee      	beq.n	3401b65a <HAL_XSPI_Command+0x7a>
3401b67c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401b680:	d0eb      	beq.n	3401b65a <HAL_XSPI_Command+0x7a>
3401b682:	f240 314b 	movw	r1, #843	@ 0x34b
3401b686:	4861      	ldr	r0, [pc, #388]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b688:	f002 f97e 	bl	3401d988 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401b68c:	69e3      	ldr	r3, [r4, #28]
3401b68e:	2b00      	cmp	r3, #0
3401b690:	d1e3      	bne.n	3401b65a <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401b692:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401b694:	b333      	cbz	r3, 3401b6e4 <HAL_XSPI_Command+0x104>
3401b696:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3401b69a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3401b69e:	d113      	bne.n	3401b6c8 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401b6a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401b6a2:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3401b6a6:	d13d      	bne.n	3401b724 <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3401b6a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401b6aa:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3401b6ae:	d019      	beq.n	3401b6e4 <HAL_XSPI_Command+0x104>
3401b6b0:	f240 3156 	movw	r1, #854	@ 0x356
3401b6b4:	4855      	ldr	r0, [pc, #340]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b6b6:	f002 f967 	bl	3401d988 <assert_failed>
3401b6ba:	e013      	b.n	3401b6e4 <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401b6bc:	f240 314e 	movw	r1, #846	@ 0x34e
3401b6c0:	4852      	ldr	r0, [pc, #328]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b6c2:	f002 f961 	bl	3401d988 <assert_failed>
3401b6c6:	e7cc      	b.n	3401b662 <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401b6c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401b6cc:	d0e8      	beq.n	3401b6a0 <HAL_XSPI_Command+0xc0>
3401b6ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401b6d2:	d0e5      	beq.n	3401b6a0 <HAL_XSPI_Command+0xc0>
3401b6d4:	f240 3152 	movw	r1, #850	@ 0x352
3401b6d8:	484c      	ldr	r0, [pc, #304]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b6da:	f002 f955 	bl	3401d988 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401b6de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401b6e0:	2b00      	cmp	r3, #0
3401b6e2:	d1dd      	bne.n	3401b6a0 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3401b6e4:	68eb      	ldr	r3, [r5, #12]
3401b6e6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3401b6e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401b6ec:	d120      	bne.n	3401b730 <HAL_XSPI_Command+0x150>
3401b6ee:	b389      	cbz	r1, 3401b754 <HAL_XSPI_Command+0x174>
3401b6f0:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3401b6f4:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3401b6f8:	d124      	bne.n	3401b744 <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b6fa:	6823      	ldr	r3, [r4, #0]
3401b6fc:	2b00      	cmp	r3, #0
3401b6fe:	d03d      	beq.n	3401b77c <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3401b700:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401b702:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3401b706:	d004      	beq.n	3401b712 <HAL_XSPI_Command+0x132>
3401b708:	f240 3161 	movw	r1, #865	@ 0x361
3401b70c:	483f      	ldr	r0, [pc, #252]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b70e:	f002 f93b 	bl	3401d988 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3401b712:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401b714:	2b1f      	cmp	r3, #31
3401b716:	d91d      	bls.n	3401b754 <HAL_XSPI_Command+0x174>
3401b718:	f240 3162 	movw	r1, #866	@ 0x362
3401b71c:	483b      	ldr	r0, [pc, #236]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b71e:	f002 f933 	bl	3401d988 <assert_failed>
3401b722:	e017      	b.n	3401b754 <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401b724:	f240 3155 	movw	r1, #853	@ 0x355
3401b728:	4838      	ldr	r0, [pc, #224]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b72a:	f002 f92d 	bl	3401d988 <assert_failed>
3401b72e:	e7bb      	b.n	3401b6a8 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3401b730:	b181      	cbz	r1, 3401b754 <HAL_XSPI_Command+0x174>
3401b732:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3401b736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401b73a:	d0de      	beq.n	3401b6fa <HAL_XSPI_Command+0x11a>
3401b73c:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3401b740:	d1d6      	bne.n	3401b6f0 <HAL_XSPI_Command+0x110>
3401b742:	e7da      	b.n	3401b6fa <HAL_XSPI_Command+0x11a>
3401b744:	f240 3159 	movw	r1, #857	@ 0x359
3401b748:	4830      	ldr	r0, [pc, #192]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b74a:	f002 f91d 	bl	3401d988 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401b74e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401b750:	2b00      	cmp	r3, #0
3401b752:	d1d2      	bne.n	3401b6fa <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3401b754:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401b756:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3401b75a:	d004      	beq.n	3401b766 <HAL_XSPI_Command+0x186>
3401b75c:	f240 3165 	movw	r1, #869	@ 0x365
3401b760:	482a      	ldr	r0, [pc, #168]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b762:	f002 f911 	bl	3401d988 <assert_failed>
  state = hxspi->State;
3401b766:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401b768:	2b02      	cmp	r3, #2
3401b76a:	d110      	bne.n	3401b78e <HAL_XSPI_Command+0x1ae>
3401b76c:	68eb      	ldr	r3, [r5, #12]
3401b76e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401b772:	d112      	bne.n	3401b79a <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401b774:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401b776:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401b778:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401b77a:	e028      	b.n	3401b7ce <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3401b77c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401b77e:	2b00      	cmp	r3, #0
3401b780:	d1be      	bne.n	3401b700 <HAL_XSPI_Command+0x120>
3401b782:	f240 315f 	movw	r1, #863	@ 0x35f
3401b786:	4821      	ldr	r0, [pc, #132]	@ (3401b80c <HAL_XSPI_Command+0x22c>)
3401b788:	f002 f8fe 	bl	3401d988 <assert_failed>
3401b78c:	e7b8      	b.n	3401b700 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401b78e:	2b14      	cmp	r3, #20
3401b790:	d11f      	bne.n	3401b7d2 <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3401b792:	6823      	ldr	r3, [r4, #0]
3401b794:	3b02      	subs	r3, #2
3401b796:	2b01      	cmp	r3, #1
3401b798:	d8ec      	bhi.n	3401b774 <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401b79a:	4633      	mov	r3, r6
3401b79c:	2200      	movs	r2, #0
3401b79e:	2120      	movs	r1, #32
3401b7a0:	4628      	mov	r0, r5
3401b7a2:	9700      	str	r7, [sp, #0]
3401b7a4:	f7ff fdb6 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401b7a8:	bb70      	cbnz	r0, 3401b808 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3401b7aa:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3401b7ac:	4621      	mov	r1, r4
3401b7ae:	4628      	mov	r0, r5
3401b7b0:	f7ff fcae 	bl	3401b110 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3401b7b4:	b958      	cbnz	r0, 3401b7ce <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3401b7b6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401b7b8:	b99b      	cbnz	r3, 3401b7e2 <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401b7ba:	4602      	mov	r2, r0
3401b7bc:	4633      	mov	r3, r6
3401b7be:	2120      	movs	r1, #32
3401b7c0:	4628      	mov	r0, r5
3401b7c2:	9700      	str	r7, [sp, #0]
3401b7c4:	f7ff fda6 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401b7c8:	2202      	movs	r2, #2
3401b7ca:	682b      	ldr	r3, [r5, #0]
3401b7cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
3401b7ce:	b003      	add	sp, #12
3401b7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3401b7d2:	2b24      	cmp	r3, #36	@ 0x24
3401b7d4:	d1ce      	bne.n	3401b774 <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3401b7d6:	6823      	ldr	r3, [r4, #0]
3401b7d8:	f023 0302 	bic.w	r3, r3, #2
3401b7dc:	2b01      	cmp	r3, #1
3401b7de:	d1c9      	bne.n	3401b774 <HAL_XSPI_Command+0x194>
3401b7e0:	e7db      	b.n	3401b79a <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401b7e2:	6823      	ldr	r3, [r4, #0]
3401b7e4:	b90b      	cbnz	r3, 3401b7ea <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401b7e6:	2304      	movs	r3, #4
3401b7e8:	e005      	b.n	3401b7f6 <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3401b7ea:	2b01      	cmp	r3, #1
3401b7ec:	d105      	bne.n	3401b7fa <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3401b7ee:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401b7f0:	2b24      	cmp	r3, #36	@ 0x24
3401b7f2:	d0f8      	beq.n	3401b7e6 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3401b7f4:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401b7f6:	65ab      	str	r3, [r5, #88]	@ 0x58
3401b7f8:	e7e9      	b.n	3401b7ce <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401b7fa:	2b02      	cmp	r3, #2
3401b7fc:	d1e7      	bne.n	3401b7ce <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3401b7fe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401b800:	2b14      	cmp	r3, #20
3401b802:	d0f0      	beq.n	3401b7e6 <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401b804:	2324      	movs	r3, #36	@ 0x24
3401b806:	e7f6      	b.n	3401b7f6 <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3401b808:	2002      	movs	r0, #2
3401b80a:	e7e0      	b.n	3401b7ce <HAL_XSPI_Command+0x1ee>
3401b80c:	34026cdf 	.word	0x34026cdf

3401b810 <HAL_XSPI_Transmit>:
{
3401b810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401b814:	4604      	mov	r4, r0
3401b816:	4688      	mov	r8, r1
3401b818:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3401b81a:	f001 fd85 	bl	3401d328 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401b81e:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401b820:	4605      	mov	r5, r0
  if (pData == NULL)
3401b822:	f1b8 0f00 	cmp.w	r8, #0
3401b826:	d103      	bne.n	3401b830 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401b828:	2308      	movs	r3, #8
    status = HAL_ERROR;
3401b82a:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401b82c:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401b82e:	e02e      	b.n	3401b88e <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401b830:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b832:	2b04      	cmp	r3, #4
3401b834:	d12e      	bne.n	3401b894 <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401b836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3401b838:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401b83c:	3301      	adds	r3, #1
3401b83e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3401b840:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b842:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3401b844:	683b      	ldr	r3, [r7, #0]
3401b846:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401b84a:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3401b84c:	462b      	mov	r3, r5
3401b84e:	2201      	movs	r2, #1
3401b850:	2104      	movs	r1, #4
3401b852:	4620      	mov	r0, r4
3401b854:	9600      	str	r6, [sp, #0]
3401b856:	f7ff fd5d 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3401b85a:	b9c0      	cbnz	r0, 3401b88e <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3401b85c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401b85e:	781b      	ldrb	r3, [r3, #0]
3401b860:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3401b864:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401b866:	3301      	adds	r3, #1
3401b868:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3401b86a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b86c:	3b01      	subs	r3, #1
3401b86e:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401b870:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b872:	2b00      	cmp	r3, #0
3401b874:	d1ea      	bne.n	3401b84c <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401b876:	462b      	mov	r3, r5
3401b878:	2201      	movs	r2, #1
3401b87a:	2102      	movs	r1, #2
3401b87c:	4620      	mov	r0, r4
3401b87e:	9600      	str	r6, [sp, #0]
3401b880:	f7ff fd48 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3401b884:	b918      	cbnz	r0, 3401b88e <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401b886:	2302      	movs	r3, #2
3401b888:	6822      	ldr	r2, [r4, #0]
3401b88a:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3401b88c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401b88e:	b002      	add	sp, #8
3401b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401b894:	2310      	movs	r3, #16
3401b896:	e7c8      	b.n	3401b82a <HAL_XSPI_Transmit+0x1a>

3401b898 <HAL_XSPI_Receive>:
{
3401b898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401b89c:	4604      	mov	r4, r0
3401b89e:	4616      	mov	r6, r2
3401b8a0:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3401b8a2:	f001 fd41 	bl	3401d328 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401b8a6:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401b8a8:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3401b8aa:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3401b8ac:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3401b8b0:	f1b8 0f00 	cmp.w	r8, #0
3401b8b4:	d103      	bne.n	3401b8be <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401b8b6:	2308      	movs	r3, #8
    status = HAL_ERROR;
3401b8b8:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401b8ba:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401b8bc:	e035      	b.n	3401b92a <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401b8be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b8c0:	2b04      	cmp	r3, #4
3401b8c2:	d13d      	bne.n	3401b940 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401b8c4:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3401b8c6:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401b8ca:	3301      	adds	r3, #1
3401b8cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3401b8ce:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b8d0:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401b8d2:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b8d4:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401b8d6:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3401b8da:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b8de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401b8e2:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b8e4:	d124      	bne.n	3401b930 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401b8e6:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3401b8e8:	463b      	mov	r3, r7
3401b8ea:	2201      	movs	r2, #1
3401b8ec:	2106      	movs	r1, #6
3401b8ee:	4620      	mov	r0, r4
3401b8f0:	9600      	str	r6, [sp, #0]
3401b8f2:	f7ff fd0f 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3401b8f6:	b9c0      	cbnz	r0, 3401b92a <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3401b8f8:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3401b8fc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401b8fe:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3401b900:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401b902:	3301      	adds	r3, #1
3401b904:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3401b906:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b908:	3b01      	subs	r3, #1
3401b90a:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401b90c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401b90e:	2b00      	cmp	r3, #0
3401b910:	d1ea      	bne.n	3401b8e8 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401b912:	463b      	mov	r3, r7
3401b914:	2201      	movs	r2, #1
3401b916:	2102      	movs	r1, #2
3401b918:	4620      	mov	r0, r4
3401b91a:	9600      	str	r6, [sp, #0]
3401b91c:	f7ff fcfa 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3401b920:	b918      	cbnz	r0, 3401b92a <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401b922:	2302      	movs	r3, #2
3401b924:	6822      	ldr	r2, [r4, #0]
3401b926:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3401b928:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401b92a:	b002      	add	sp, #8
3401b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401b930:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3401b934:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3401b938:	d1d5      	bne.n	3401b8e6 <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401b93a:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3401b93e:	e7d3      	b.n	3401b8e8 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401b940:	2310      	movs	r3, #16
3401b942:	e7b9      	b.n	3401b8b8 <HAL_XSPI_Receive+0x20>

3401b944 <HAL_XSPI_AutoPolling>:
{
3401b944:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3401b948:	4604      	mov	r4, r0
3401b94a:	460d      	mov	r5, r1
3401b94c:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3401b94e:	f001 fceb 	bl	3401d328 <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3401b952:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401b954:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3401b956:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3401b95a:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3401b95e:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3401b962:	68ab      	ldr	r3, [r5, #8]
3401b964:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3401b968:	d004      	beq.n	3401b974 <HAL_XSPI_AutoPolling+0x30>
3401b96a:	f240 7134 	movw	r1, #1844	@ 0x734
3401b96e:	4832      	ldr	r0, [pc, #200]	@ (3401ba38 <HAL_XSPI_AutoPolling+0xf4>)
3401b970:	f002 f80a 	bl	3401d988 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3401b974:	68eb      	ldr	r3, [r5, #12]
3401b976:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3401b97a:	d004      	beq.n	3401b986 <HAL_XSPI_AutoPolling+0x42>
3401b97c:	f240 7135 	movw	r1, #1845	@ 0x735
3401b980:	482d      	ldr	r0, [pc, #180]	@ (3401ba38 <HAL_XSPI_AutoPolling+0xf4>)
3401b982:	f002 f801 	bl	3401d988 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3401b986:	692b      	ldr	r3, [r5, #16]
3401b988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401b98c:	d304      	bcc.n	3401b998 <HAL_XSPI_AutoPolling+0x54>
3401b98e:	f240 7136 	movw	r1, #1846	@ 0x736
3401b992:	4829      	ldr	r0, [pc, #164]	@ (3401ba38 <HAL_XSPI_AutoPolling+0xf4>)
3401b994:	f001 fff8 	bl	3401d988 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3401b998:	f1ba 0f03 	cmp.w	sl, #3
3401b99c:	d904      	bls.n	3401b9a8 <HAL_XSPI_AutoPolling+0x64>
3401b99e:	f240 7137 	movw	r1, #1847	@ 0x737
3401b9a2:	4825      	ldr	r0, [pc, #148]	@ (3401ba38 <HAL_XSPI_AutoPolling+0xf4>)
3401b9a4:	f001 fff0 	bl	3401d988 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3401b9a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401b9aa:	2b04      	cmp	r3, #4
3401b9ac:	d13e      	bne.n	3401ba2c <HAL_XSPI_AutoPolling+0xe8>
3401b9ae:	68eb      	ldr	r3, [r5, #12]
3401b9b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401b9b4:	d13a      	bne.n	3401ba2c <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401b9b6:	4633      	mov	r3, r6
3401b9b8:	2200      	movs	r2, #0
3401b9ba:	2120      	movs	r1, #32
3401b9bc:	4620      	mov	r0, r4
3401b9be:	9700      	str	r7, [sp, #0]
3401b9c0:	f7ff fca8 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401b9c4:	2800      	cmp	r0, #0
3401b9c6:	d135      	bne.n	3401ba34 <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3401b9c8:	682b      	ldr	r3, [r5, #0]
3401b9ca:	6821      	ldr	r1, [r4, #0]
3401b9cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3401b9d0:	686b      	ldr	r3, [r5, #4]
3401b9d2:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3401b9d6:	692b      	ldr	r3, [r5, #16]
3401b9d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401b9dc:	680a      	ldr	r2, [r1, #0]
3401b9de:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3401b9e2:	431d      	orrs	r5, r3
3401b9e4:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3401b9e8:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b9ea:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401b9ec:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b9f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401b9f4:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401b9f6:	d111      	bne.n	3401ba1c <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401b9f8:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3401b9fc:	4633      	mov	r3, r6
3401b9fe:	2201      	movs	r2, #1
3401ba00:	2108      	movs	r1, #8
3401ba02:	4620      	mov	r0, r4
3401ba04:	9700      	str	r7, [sp, #0]
3401ba06:	f7ff fc85 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3401ba0a:	b920      	cbnz	r0, 3401ba16 <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3401ba0c:	2208      	movs	r2, #8
3401ba0e:	6823      	ldr	r3, [r4, #0]
3401ba10:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3401ba12:	2302      	movs	r3, #2
3401ba14:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401ba16:	b002      	add	sp, #8
3401ba18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401ba1c:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3401ba20:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3401ba24:	d1e8      	bne.n	3401b9f8 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401ba26:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3401ba2a:	e7e7      	b.n	3401b9fc <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401ba2c:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401ba2e:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401ba30:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401ba32:	e7f0      	b.n	3401ba16 <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3401ba34:	2002      	movs	r0, #2
3401ba36:	e7ee      	b.n	3401ba16 <HAL_XSPI_AutoPolling+0xd2>
3401ba38:	34026cdf 	.word	0x34026cdf

3401ba3c <HAL_XSPI_MemoryMapped>:
{
3401ba3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
3401ba3e:	460c      	mov	r4, r1
3401ba40:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3401ba42:	f001 fc71 	bl	3401d328 <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401ba46:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401ba48:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401ba4a:	f033 0308 	bics.w	r3, r3, #8
3401ba4e:	d004      	beq.n	3401ba5a <HAL_XSPI_MemoryMapped+0x1e>
3401ba50:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3401ba54:	482f      	ldr	r0, [pc, #188]	@ (3401bb14 <HAL_XSPI_MemoryMapped+0xd8>)
3401ba56:	f001 ff97 	bl	3401d988 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3401ba5a:	68a3      	ldr	r3, [r4, #8]
3401ba5c:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3401ba60:	d004      	beq.n	3401ba6c <HAL_XSPI_MemoryMapped+0x30>
3401ba62:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3401ba66:	482b      	ldr	r0, [pc, #172]	@ (3401bb14 <HAL_XSPI_MemoryMapped+0xd8>)
3401ba68:	f001 ff8e 	bl	3401d988 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401ba6c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401ba6e:	2b04      	cmp	r3, #4
3401ba70:	d14b      	bne.n	3401bb0a <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401ba72:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3401ba74:	2200      	movs	r2, #0
3401ba76:	9300      	str	r3, [sp, #0]
3401ba78:	2120      	movs	r1, #32
3401ba7a:	4633      	mov	r3, r6
3401ba7c:	4628      	mov	r0, r5
3401ba7e:	f7ff fc49 	bl	3401b314 <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401ba82:	4606      	mov	r6, r0
3401ba84:	bb58      	cbnz	r0, 3401bade <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3401ba86:	2388      	movs	r3, #136	@ 0x88
3401ba88:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3401ba8a:	68a3      	ldr	r3, [r4, #8]
3401ba8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401ba90:	d128      	bne.n	3401bae4 <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3401ba92:	682a      	ldr	r2, [r5, #0]
3401ba94:	6813      	ldr	r3, [r2, #0]
3401ba96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3401ba9a:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3401ba9c:	6823      	ldr	r3, [r4, #0]
3401ba9e:	2b08      	cmp	r3, #8
3401baa0:	d112      	bne.n	3401bac8 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3401baa2:	6863      	ldr	r3, [r4, #4]
3401baa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401baa8:	d304      	bcc.n	3401bab4 <HAL_XSPI_MemoryMapped+0x78>
3401baaa:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3401baae:	4819      	ldr	r0, [pc, #100]	@ (3401bb14 <HAL_XSPI_MemoryMapped+0xd8>)
3401bab0:	f001 ff6a 	bl	3401d988 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3401bab4:	682b      	ldr	r3, [r5, #0]
3401bab6:	6862      	ldr	r2, [r4, #4]
3401bab8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3401babc:	2210      	movs	r2, #16
3401babe:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3401bac0:	681a      	ldr	r2, [r3, #0]
3401bac2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3401bac6:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3401bac8:	682a      	ldr	r2, [r5, #0]
3401baca:	6821      	ldr	r1, [r4, #0]
3401bacc:	6813      	ldr	r3, [r2, #0]
3401bace:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401bad2:	f023 0308 	bic.w	r3, r3, #8
3401bad6:	430b      	orrs	r3, r1
3401bad8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3401badc:	6013      	str	r3, [r2, #0]
}
3401bade:	4630      	mov	r0, r6
3401bae0:	b002      	add	sp, #8
3401bae2:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3401bae4:	68e3      	ldr	r3, [r4, #12]
3401bae6:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3401baea:	d004      	beq.n	3401baf6 <HAL_XSPI_MemoryMapped+0xba>
3401baec:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3401baf0:	4808      	ldr	r0, [pc, #32]	@ (3401bb14 <HAL_XSPI_MemoryMapped+0xd8>)
3401baf2:	f001 ff49 	bl	3401d988 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3401baf6:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3401bafa:	6829      	ldr	r1, [r5, #0]
3401bafc:	4303      	orrs	r3, r0
3401bafe:	680a      	ldr	r2, [r1, #0]
3401bb00:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3401bb04:	4313      	orrs	r3, r2
3401bb06:	600b      	str	r3, [r1, #0]
3401bb08:	e7c8      	b.n	3401ba9c <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bb0a:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401bb0c:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bb0e:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401bb10:	e7e5      	b.n	3401bade <HAL_XSPI_MemoryMapped+0xa2>
3401bb12:	bf00      	nop
3401bb14:	34026cdf 	.word	0x34026cdf

3401bb18 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3401bb18:	29ff      	cmp	r1, #255	@ 0xff
{
3401bb1a:	b538      	push	{r3, r4, r5, lr}
3401bb1c:	4604      	mov	r4, r0
3401bb1e:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3401bb20:	d904      	bls.n	3401bb2c <HAL_XSPI_SetClockPrescaler+0x14>
3401bb22:	f640 2193 	movw	r1, #2707	@ 0xa93
3401bb26:	4809      	ldr	r0, [pc, #36]	@ (3401bb4c <HAL_XSPI_SetClockPrescaler+0x34>)
3401bb28:	f001 ff2e 	bl	3401d988 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3401bb2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401bb2e:	f010 0008 	ands.w	r0, r0, #8
3401bb32:	d107      	bne.n	3401bb44 <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401bb34:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3401bb36:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401bb38:	68d3      	ldr	r3, [r2, #12]
3401bb3a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3401bb3e:	432b      	orrs	r3, r5
3401bb40:	60d3      	str	r3, [r2, #12]
}
3401bb42:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bb44:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401bb46:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401bb48:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401bb4a:	e7fa      	b.n	3401bb42 <HAL_XSPI_SetClockPrescaler+0x2a>
3401bb4c:	34026cdf 	.word	0x34026cdf

3401bb50 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
3401bb50:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
3401bb52:	2600      	movs	r6, #0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
3401bb54:	4c16      	ldr	r4, [pc, #88]	@ (3401bbb0 <UTIL_LCD_SetFuncDriver+0x60>)
3401bb56:	6803      	ldr	r3, [r0, #0]
  FuncDriver.GetYSize       = pDrv->GetYSize;
3401bb58:	6a02      	ldr	r2, [r0, #32]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
3401bb5a:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
3401bb5c:	6843      	ldr	r3, [r0, #4]
  FuncDriver.GetYSize       = pDrv->GetYSize;
3401bb5e:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
3401bb60:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
3401bb62:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
3401bb64:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
3401bb66:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
3401bb68:	68c3      	ldr	r3, [r0, #12]
  DrawProp->LcdLayer = 0;
3401bb6a:	4d12      	ldr	r5, [pc, #72]	@ (3401bbb4 <UTIL_LCD_SetFuncDriver+0x64>)
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
3401bb6c:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
3401bb6e:	6903      	ldr	r3, [r0, #16]
  FuncDriver.SetLayer       = pDrv->SetLayer;
3401bb70:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.FillRect       = pDrv->FillRect;
3401bb72:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
3401bb74:	6943      	ldr	r3, [r0, #20]
  FuncDriver.GetFormat      = pDrv->GetFormat;
3401bb76:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  FuncDriver.GetPixel       = pDrv->GetPixel;
3401bb78:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
3401bb7a:	6983      	ldr	r3, [r0, #24]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bb7c:	f105 0114 	add.w	r1, r5, #20
  FuncDriver.SetPixel       = pDrv->SetPixel;
3401bb80:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
3401bb82:	69c3      	ldr	r3, [r0, #28]
  DrawProp->LcdDevice = 0;
3401bb84:	e9c5 6603 	strd	r6, r6, [r5, #12]
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bb88:	4630      	mov	r0, r6
  FuncDriver.GetXSize       = pDrv->GetXSize;
3401bb8a:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
3401bb8c:	62a2      	str	r2, [r4, #40]	@ 0x28
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bb8e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp[DrawProp->LcdLayer].LcdYsize);
3401bb90:	68e9      	ldr	r1, [r5, #12]
3401bb92:	6a23      	ldr	r3, [r4, #32]
3401bb94:	eb05 1141 	add.w	r1, r5, r1, lsl #5
3401bb98:	4630      	mov	r0, r6
3401bb9a:	3118      	adds	r1, #24
3401bb9c:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bb9e:	68eb      	ldr	r3, [r5, #12]
3401bba0:	4630      	mov	r0, r6
3401bba2:	eb05 1143 	add.w	r1, r5, r3, lsl #5
3401bba6:	311c      	adds	r1, #28
3401bba8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
}
3401bbaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bbae:	4718      	bx	r3
3401bbb0:	340dc014 	.word	0x340dc014
3401bbb4:	340dc040 	.word	0x340dc040

3401bbb8 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
3401bbb8:	b570      	push	{r4, r5, r6, lr}
  if(FuncDriver.SetLayer != NULL)
3401bbba:	4e10      	ldr	r6, [pc, #64]	@ (3401bbfc <UTIL_LCD_SetLayer+0x44>)
{
3401bbbc:	4605      	mov	r5, r0
  if(FuncDriver.SetLayer != NULL)
3401bbbe:	6a73      	ldr	r3, [r6, #36]	@ 0x24
3401bbc0:	b1db      	cbz	r3, 3401bbfa <UTIL_LCD_SetLayer+0x42>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
3401bbc2:	4c0f      	ldr	r4, [pc, #60]	@ (3401bc00 <UTIL_LCD_SetLayer+0x48>)
3401bbc4:	4601      	mov	r1, r0
3401bbc6:	6920      	ldr	r0, [r4, #16]
3401bbc8:	4798      	blx	r3
3401bbca:	b9b0      	cbnz	r0, 3401bbfa <UTIL_LCD_SetLayer+0x42>
    {
      DrawProp->LcdLayer = Layer;
      FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bbcc:	eb04 1145 	add.w	r1, r4, r5, lsl #5
3401bbd0:	69f3      	ldr	r3, [r6, #28]
3401bbd2:	6920      	ldr	r0, [r4, #16]
      DrawProp->LcdLayer = Layer;
3401bbd4:	60e5      	str	r5, [r4, #12]
      FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401bbd6:	3114      	adds	r1, #20
3401bbd8:	4798      	blx	r3
      FuncDriver.GetYSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdYsize);
3401bbda:	68e1      	ldr	r1, [r4, #12]
3401bbdc:	6a33      	ldr	r3, [r6, #32]
3401bbde:	eb04 1141 	add.w	r1, r4, r1, lsl #5
3401bbe2:	6920      	ldr	r0, [r4, #16]
3401bbe4:	3118      	adds	r1, #24
3401bbe6:	4798      	blx	r3
      FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bbe8:	68e1      	ldr	r1, [r4, #12]
3401bbea:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3401bbec:	eb04 1141 	add.w	r1, r4, r1, lsl #5
3401bbf0:	6920      	ldr	r0, [r4, #16]
3401bbf2:	311c      	adds	r1, #28
    }
  }
}
3401bbf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401bbf8:	4718      	bx	r3
}
3401bbfa:	bd70      	pop	{r4, r5, r6, pc}
3401bbfc:	340dc014 	.word	0x340dc014
3401bc00:	340dc040 	.word	0x340dc040

3401bc04 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
3401bc04:	4a02      	ldr	r2, [pc, #8]	@ (3401bc10 <UTIL_LCD_SetTextColor+0xc>)
3401bc06:	68d3      	ldr	r3, [r2, #12]
3401bc08:	015b      	lsls	r3, r3, #5
3401bc0a:	50d0      	str	r0, [r2, r3]
}
3401bc0c:	4770      	bx	lr
3401bc0e:	bf00      	nop
3401bc10:	340dc040 	.word	0x340dc040

3401bc14 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
3401bc14:	4b02      	ldr	r3, [pc, #8]	@ (3401bc20 <UTIL_LCD_SetFont+0xc>)
3401bc16:	68da      	ldr	r2, [r3, #12]
3401bc18:	eb03 1342 	add.w	r3, r3, r2, lsl #5
3401bc1c:	6098      	str	r0, [r3, #8]
}
3401bc1e:	4770      	bx	lr
3401bc20:	340dc040 	.word	0x340dc040

3401bc24 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
3401bc24:	4b02      	ldr	r3, [pc, #8]	@ (3401bc30 <UTIL_LCD_GetFont+0xc>)
3401bc26:	68da      	ldr	r2, [r3, #12]
3401bc28:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
3401bc2c:	6898      	ldr	r0, [r3, #8]
3401bc2e:	4770      	bx	lr
3401bc30:	340dc040 	.word	0x340dc040

3401bc34 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
3401bc34:	b513      	push	{r0, r1, r4, lr}
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
3401bc36:	9c04      	ldr	r4, [sp, #16]
3401bc38:	e9cd 3400 	strd	r3, r4, [sp]
3401bc3c:	4b04      	ldr	r3, [pc, #16]	@ (3401bc50 <UTIL_LCD_FillRGBRect+0x1c>)
3401bc3e:	685c      	ldr	r4, [r3, #4]
3401bc40:	4613      	mov	r3, r2
3401bc42:	460a      	mov	r2, r1
3401bc44:	4601      	mov	r1, r0
3401bc46:	4803      	ldr	r0, [pc, #12]	@ (3401bc54 <UTIL_LCD_FillRGBRect+0x20>)
3401bc48:	6900      	ldr	r0, [r0, #16]
3401bc4a:	47a0      	blx	r4
}
3401bc4c:	b002      	add	sp, #8
3401bc4e:	bd10      	pop	{r4, pc}
3401bc50:	340dc014 	.word	0x340dc014
3401bc54:	340dc040 	.word	0x340dc040

3401bc58 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3401bc58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401bc5a:	4606      	mov	r6, r0
  /* Write line */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bc5c:	4817      	ldr	r0, [pc, #92]	@ (3401bcbc <UTIL_LCD_DrawHLine+0x64>)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bc5e:	4d18      	ldr	r5, [pc, #96]	@ (3401bcc0 <UTIL_LCD_DrawHLine+0x68>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bc60:	68c4      	ldr	r4, [r0, #12]
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bc62:	68ad      	ldr	r5, [r5, #8]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bc64:	eb00 1444 	add.w	r4, r0, r4, lsl #5
3401bc68:	69e4      	ldr	r4, [r4, #28]
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bc6a:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bc6c:	2c02      	cmp	r4, #2
3401bc6e:	d110      	bne.n	3401bc92 <UTIL_LCD_DrawHLine+0x3a>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bc70:	095c      	lsrs	r4, r3, #5
3401bc72:	0a1f      	lsrs	r7, r3, #8
3401bc74:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401bc78:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
3401bc7c:	433c      	orrs	r4, r7
3401bc7e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401bc82:	431c      	orrs	r4, r3
3401bc84:	9400      	str	r4, [sp, #0]
  }
  else /*LCD_PIXEL_FORMAT_ARGB8888*/
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401bc86:	4613      	mov	r3, r2
3401bc88:	460a      	mov	r2, r1
3401bc8a:	4631      	mov	r1, r6
3401bc8c:	47a8      	blx	r5
  }
}
3401bc8e:	b003      	add	sp, #12
3401bc90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401bc92:	2c01      	cmp	r4, #1
3401bc94:	d103      	bne.n	3401bc9e <UTIL_LCD_DrawHLine+0x46>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
3401bc96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401bc9a:	9300      	str	r3, [sp, #0]
3401bc9c:	e7f3      	b.n	3401bc86 <UTIL_LCD_DrawHLine+0x2e>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401bc9e:	2c04      	cmp	r4, #4
3401bca0:	d1fb      	bne.n	3401bc9a <UTIL_LCD_DrawHLine+0x42>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401bca2:	0f1f      	lsrs	r7, r3, #28
3401bca4:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401bca8:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
3401bcac:	0a1f      	lsrs	r7, r3, #8
3401bcae:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
3401bcb2:	0b1b      	lsrs	r3, r3, #12
3401bcb4:	433c      	orrs	r4, r7
3401bcb6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401bcba:	e7e2      	b.n	3401bc82 <UTIL_LCD_DrawHLine+0x2a>
3401bcbc:	340dc040 	.word	0x340dc040
3401bcc0:	340dc014 	.word	0x340dc014

3401bcc4 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3401bcc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401bcc6:	4606      	mov	r6, r0
  /* Write line */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bcc8:	4817      	ldr	r0, [pc, #92]	@ (3401bd28 <UTIL_LCD_DrawVLine+0x64>)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bcca:	4d18      	ldr	r5, [pc, #96]	@ (3401bd2c <UTIL_LCD_DrawVLine+0x68>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bccc:	68c4      	ldr	r4, [r0, #12]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bcce:	68ed      	ldr	r5, [r5, #12]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bcd0:	eb00 1444 	add.w	r4, r0, r4, lsl #5
3401bcd4:	69e4      	ldr	r4, [r4, #28]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bcd6:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bcd8:	2c02      	cmp	r4, #2
3401bcda:	d110      	bne.n	3401bcfe <UTIL_LCD_DrawVLine+0x3a>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401bcdc:	095c      	lsrs	r4, r3, #5
3401bcde:	0a1f      	lsrs	r7, r3, #8
3401bce0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401bce4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
3401bce8:	433c      	orrs	r4, r7
3401bcea:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401bcee:	431c      	orrs	r4, r3
3401bcf0:	9400      	str	r4, [sp, #0]
  }
  else /*LCD_PIXEL_FORMAT_ARGB888*/
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401bcf2:	4613      	mov	r3, r2
3401bcf4:	460a      	mov	r2, r1
3401bcf6:	4631      	mov	r1, r6
3401bcf8:	47a8      	blx	r5
  }
}
3401bcfa:	b003      	add	sp, #12
3401bcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401bcfe:	2c01      	cmp	r4, #1
3401bd00:	d103      	bne.n	3401bd0a <UTIL_LCD_DrawVLine+0x46>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
3401bd02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401bd06:	9300      	str	r3, [sp, #0]
3401bd08:	e7f3      	b.n	3401bcf2 <UTIL_LCD_DrawVLine+0x2e>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401bd0a:	2c04      	cmp	r4, #4
3401bd0c:	d1fb      	bne.n	3401bd06 <UTIL_LCD_DrawVLine+0x42>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401bd0e:	0f1f      	lsrs	r7, r3, #28
3401bd10:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401bd14:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
3401bd18:	0a1f      	lsrs	r7, r3, #8
3401bd1a:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
3401bd1e:	0b1b      	lsrs	r3, r3, #12
3401bd20:	433c      	orrs	r4, r7
3401bd22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401bd26:	e7e2      	b.n	3401bcee <UTIL_LCD_DrawVLine+0x2a>
3401bd28:	340dc040 	.word	0x340dc040
3401bd2c:	340dc014 	.word	0x340dc014

3401bd30 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
3401bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401bd34:	f8df 81e0 	ldr.w	r8, [pc, #480]	@ 3401bf18 <UTIL_LCD_DisplayChar+0x1e8>
{
3401bd38:	b0a3      	sub	sp, #140	@ 0x8c
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401bd3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
3401bd3e:	9108      	str	r1, [sp, #32]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401bd40:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401bd44:	6899      	ldr	r1, [r3, #8]
{
3401bd46:	9005      	str	r0, [sp, #20]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
3401bd48:	88cb      	ldrh	r3, [r1, #6]
3401bd4a:	888c      	ldrh	r4, [r1, #4]
3401bd4c:	9307      	str	r3, [sp, #28]
  uint8_t rgb8[24*4];
  uint16_t* rgb16 = (uint16_t*)rgb8;
  uint32_t* argb32 = (uint32_t*)rgb8;
  uint16_t* argb4444 = (uint16_t*)rgb8;

  offset =  8 *((width + 7)/8) -  width ;
3401bd4e:	1de3      	adds	r3, r4, #7
3401bd50:	f023 0007 	bic.w	r0, r3, #7
3401bd54:	9003      	str	r0, [sp, #12]

  for(i = 0; i < height; i++)
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
3401bd56:	08d8      	lsrs	r0, r3, #3
3401bd58:	9006      	str	r0, [sp, #24]
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
    }
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
    {
      for (j = 0; j < width*3; j = j+ 3)
3401bd5a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
3401bd5e:	9009      	str	r0, [sp, #36]	@ 0x24
3401bd60:	9808      	ldr	r0, [sp, #32]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401bd62:	3a20      	subs	r2, #32
3401bd64:	3001      	adds	r0, #1
3401bd66:	9004      	str	r0, [sp, #16]
3401bd68:	9807      	ldr	r0, [sp, #28]
3401bd6a:	680d      	ldr	r5, [r1, #0]
3401bd6c:	4342      	muls	r2, r0
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
3401bd6e:	10db      	asrs	r3, r3, #3
3401bd70:	fb03 5502 	mla	r5, r3, r2, r5
3401bd74:	9b04      	ldr	r3, [sp, #16]
  for(i = 0; i < height; i++)
3401bd76:	9a08      	ldr	r2, [sp, #32]
3401bd78:	1e59      	subs	r1, r3, #1
3401bd7a:	1a9b      	subs	r3, r3, r2
3401bd7c:	9a07      	ldr	r2, [sp, #28]
3401bd7e:	3b01      	subs	r3, #1
3401bd80:	429a      	cmp	r2, r3
3401bd82:	d802      	bhi.n	3401bd8a <UTIL_LCD_DisplayChar+0x5a>
}
3401bd84:	b023      	add	sp, #140	@ 0x8c
3401bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
3401bd8a:	9806      	ldr	r0, [sp, #24]
      line =  pchar[0];
3401bd8c:	782b      	ldrb	r3, [r5, #0]
    switch(((width + 7)/8))
3401bd8e:	2801      	cmp	r0, #1
      line =  pchar[0];
3401bd90:	461a      	mov	r2, r3
    switch(((width + 7)/8))
3401bd92:	d004      	beq.n	3401bd9e <UTIL_LCD_DisplayChar+0x6e>
3401bd94:	2802      	cmp	r0, #2
3401bd96:	d127      	bne.n	3401bde8 <UTIL_LCD_DisplayChar+0xb8>
      line =  (pchar[0]<< 8) | pchar[1];
3401bd98:	882a      	ldrh	r2, [r5, #0]
3401bd9a:	ba52      	rev16	r2, r2
3401bd9c:	b292      	uxth	r2, r2
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bd9e:	f8d8 000c 	ldr.w	r0, [r8, #12]
3401bda2:	eb08 1040 	add.w	r0, r8, r0, lsl #5
3401bda6:	69c7      	ldr	r7, [r0, #28]
3401bda8:	2f02      	cmp	r7, #2
3401bdaa:	d13c      	bne.n	3401be26 <UTIL_LCD_DisplayChar+0xf6>
3401bdac:	f04f 0c01 	mov.w	ip, #1
        if(line & (1 << (width- j + offset- 1)))
3401bdb0:	9b03      	ldr	r3, [sp, #12]
      for (j = 0; j < width; j++)
3401bdb2:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
3401bdb6:	f103 3aff 	add.w	sl, r3, #4294967295
3401bdba:	4663      	mov	r3, ip
3401bdbc:	4574      	cmp	r4, lr
3401bdbe:	eb04 0603 	add.w	r6, r4, r3
3401bdc2:	bf08      	it	eq
3401bdc4:	4666      	moveq	r6, ip
3401bdc6:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401bdca:	3e01      	subs	r6, #1
3401bdcc:	d113      	bne.n	3401bdf6 <UTIL_LCD_DisplayChar+0xc6>
        else
        {
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb4444[0], width, 1);
3401bdce:	f8cd c000 	str.w	ip, [sp]
        else
        {
          argb32[j] = DrawProp[DrawProp->LcdLayer].BackColor;
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
3401bdd2:	4623      	mov	r3, r4
3401bdd4:	9805      	ldr	r0, [sp, #20]
3401bdd6:	aa0a      	add	r2, sp, #40	@ 0x28
3401bdd8:	f7ff ff2c 	bl	3401bc34 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
3401bddc:	9b04      	ldr	r3, [sp, #16]
3401bdde:	3301      	adds	r3, #1
3401bde0:	9304      	str	r3, [sp, #16]
3401bde2:	9b06      	ldr	r3, [sp, #24]
3401bde4:	441d      	add	r5, r3
3401bde6:	e7c5      	b.n	3401bd74 <UTIL_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
3401bde8:	786a      	ldrb	r2, [r5, #1]
3401bdea:	041b      	lsls	r3, r3, #16
3401bdec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
3401bdf0:	78aa      	ldrb	r2, [r5, #2]
3401bdf2:	431a      	orrs	r2, r3
      break;
3401bdf4:	e7d3      	b.n	3401bd9e <UTIL_LCD_DisplayChar+0x6e>
        if(line & (1 << (width- j + offset- 1)))
3401bdf6:	ebaa 030e 	sub.w	r3, sl, lr
3401bdfa:	fa0c f303 	lsl.w	r3, ip, r3
3401bdfe:	4213      	tst	r3, r2
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
3401be00:	bf14      	ite	ne
3401be02:	6807      	ldrne	r7, [r0, #0]
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
3401be04:	6847      	ldreq	r7, [r0, #4]
      for (j = 0; j < width; j++)
3401be06:	f10e 0e01 	add.w	lr, lr, #1
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
3401be0a:	f3c7 03c4 	ubfx	r3, r7, #3, #5
3401be0e:	ea4f 4bd7 	mov.w	fp, r7, lsr #19
3401be12:	097f      	lsrs	r7, r7, #5
3401be14:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
3401be18:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
3401be1c:	433b      	orrs	r3, r7
3401be1e:	b29b      	uxth	r3, r3
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
3401be20:	f829 3b02 	strh.w	r3, [r9], #2
      for (j = 0; j < width; j++)
3401be24:	e7d1      	b.n	3401bdca <UTIL_LCD_DisplayChar+0x9a>
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401be26:	2f01      	cmp	r7, #1
3401be28:	d126      	bne.n	3401be78 <UTIL_LCD_DisplayChar+0x148>
      for (j = 0; j < width*3; j = j+ 3)
3401be2a:	f04f 0c00 	mov.w	ip, #0
        if(line & (1 << (width- j/3 + offset- 1)))
3401be2e:	f04f 0b03 	mov.w	fp, #3
3401be32:	9b03      	ldr	r3, [sp, #12]
3401be34:	ae0a      	add	r6, sp, #40	@ 0x28
3401be36:	f103 3aff 	add.w	sl, r3, #4294967295
      for (j = 0; j < width*3; j = j+ 3)
3401be3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401be3c:	459c      	cmp	ip, r3
3401be3e:	d302      	bcc.n	3401be46 <UTIL_LCD_DisplayChar+0x116>
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
3401be40:	2301      	movs	r3, #1
3401be42:	9300      	str	r3, [sp, #0]
3401be44:	e7c5      	b.n	3401bdd2 <UTIL_LCD_DisplayChar+0xa2>
        if(line & (1 << (width- j/3 + offset- 1)))
3401be46:	fbbc f3fb 	udiv	r3, ip, fp
3401be4a:	ebaa 0303 	sub.w	r3, sl, r3
3401be4e:	fa07 f303 	lsl.w	r3, r7, r3
3401be52:	4213      	tst	r3, r2
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
3401be54:	bf14      	ite	ne
3401be56:	6803      	ldrne	r3, [r0, #0]
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
3401be58:	6843      	ldreq	r3, [r0, #4]
      for (j = 0; j < width*3; j = j+ 3)
3401be5a:	f10c 0c03 	add.w	ip, ip, #3
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
3401be5e:	fa5f f983 	uxtb.w	r9, r3
          rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 8) & 0xFFU;
3401be62:	f3c3 2e07 	ubfx	lr, r3, #8, #8
          rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 16) & 0xFFU;
3401be66:	f3c3 4307 	ubfx	r3, r3, #16, #8
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
3401be6a:	f886 9000 	strb.w	r9, [r6]
          rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 8) & 0xFFU;
3401be6e:	f886 e001 	strb.w	lr, [r6, #1]
          rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 16) & 0xFFU;
3401be72:	70b3      	strb	r3, [r6, #2]
      for (j = 0; j < width*3; j = j+ 3)
3401be74:	3603      	adds	r6, #3
3401be76:	e7e0      	b.n	3401be3a <UTIL_LCD_DisplayChar+0x10a>
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401be78:	2f04      	cmp	r7, #4
3401be7a:	d01f      	beq.n	3401bebc <UTIL_LCD_DisplayChar+0x18c>
        if(line & (1 << (width- j + offset- 1)))
3401be7c:	f04f 0a01 	mov.w	sl, #1
      for (j = 0; j < width; j++)
3401be80:	2700      	movs	r7, #0
3401be82:	4656      	mov	r6, sl
        if(line & (1 << (width- j + offset- 1)))
3401be84:	9b03      	ldr	r3, [sp, #12]
3401be86:	42bc      	cmp	r4, r7
3401be88:	f103 3bff 	add.w	fp, r3, #4294967295
3401be8c:	eb04 0306 	add.w	r3, r4, r6
3401be90:	bf14      	ite	ne
3401be92:	469c      	movne	ip, r3
3401be94:	46d4      	moveq	ip, sl
3401be96:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401be9a:	f1bc 0c01 	subs.w	ip, ip, #1
3401be9e:	d0cf      	beq.n	3401be40 <UTIL_LCD_DisplayChar+0x110>
        if(line & (1 << (width- j + offset- 1)))
3401bea0:	ebab 0e07 	sub.w	lr, fp, r7
3401bea4:	6843      	ldr	r3, [r0, #4]
3401bea6:	fa0a fe0e 	lsl.w	lr, sl, lr
3401beaa:	ea1e 0f02 	tst.w	lr, r2
          argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
3401beae:	6806      	ldr	r6, [r0, #0]
        if(line & (1 << (width- j + offset- 1)))
3401beb0:	bf08      	it	eq
3401beb2:	461e      	moveq	r6, r3
      for (j = 0; j < width; j++)
3401beb4:	3701      	adds	r7, #1
          argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
3401beb6:	f849 6b04 	str.w	r6, [r9], #4
      for (j = 0; j < width; j++)
3401beba:	e7ee      	b.n	3401be9a <UTIL_LCD_DisplayChar+0x16a>
3401bebc:	f04f 0c01 	mov.w	ip, #1
        if(line & (1 << (width- j + offset- 1)))
3401bec0:	9b03      	ldr	r3, [sp, #12]
      for (j = 0; j < width; j++)
3401bec2:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
3401bec6:	f103 3bff 	add.w	fp, r3, #4294967295
3401beca:	4663      	mov	r3, ip
3401becc:	4574      	cmp	r4, lr
3401bece:	eb04 0603 	add.w	r6, r4, r3
3401bed2:	bf08      	it	eq
3401bed4:	4666      	moveq	r6, ip
3401bed6:	f10d 0a28 	add.w	sl, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401beda:	3e01      	subs	r6, #1
3401bedc:	f43f af77 	beq.w	3401bdce <UTIL_LCD_DisplayChar+0x9e>
        if(line & (1 << (width- j + offset- 1)))
3401bee0:	ebab 030e 	sub.w	r3, fp, lr
3401bee4:	fa0c f303 	lsl.w	r3, ip, r3
3401bee8:	4213      	tst	r3, r2
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
3401beea:	bf14      	ite	ne
3401beec:	6807      	ldrne	r7, [r0, #0]
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
3401beee:	6847      	ldreq	r7, [r0, #4]
      for (j = 0; j < width; j++)
3401bef0:	f10e 0e01 	add.w	lr, lr, #1
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
3401bef4:	0f3b      	lsrs	r3, r7, #28
3401bef6:	f3c7 1903 	ubfx	r9, r7, #4, #4
3401befa:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
3401befe:	0a3b      	lsrs	r3, r7, #8
3401bf00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
3401bf04:	0b3f      	lsrs	r7, r7, #12
3401bf06:	ea49 0303 	orr.w	r3, r9, r3
3401bf0a:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
3401bf0e:	433b      	orrs	r3, r7
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
3401bf10:	f82a 3b02 	strh.w	r3, [sl], #2
      for (j = 0; j < width; j++)
3401bf14:	e7e1      	b.n	3401beda <UTIL_LCD_DisplayChar+0x1aa>
3401bf16:	bf00      	nop
3401bf18:	340dc040 	.word	0x340dc040

3401bf1c <UTIL_LCD_DisplayStringAt>:
{
3401bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401bf20:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 3401bfac <UTIL_LCD_DisplayStringAt+0x90>
{
3401bf24:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
3401bf26:	4610      	mov	r0, r2
{
3401bf28:	4699      	mov	r9, r3
3401bf2a:	4616      	mov	r6, r2
3401bf2c:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
3401bf2e:	f7e4 fc2f 	bl	34000790 <strlen>
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401bf32:	f8d8 300c 	ldr.w	r3, [r8, #12]
  switch (Mode)
3401bf36:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401bf3a:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401bf3e:	689a      	ldr	r2, [r3, #8]
3401bf40:	695c      	ldr	r4, [r3, #20]
3401bf42:	8892      	ldrh	r2, [r2, #4]
3401bf44:	fbb4 f4f2 	udiv	r4, r4, r2
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
3401bf48:	eba4 0400 	sub.w	r4, r4, r0
3401bf4c:	fb02 f404 	mul.w	r4, r2, r4
  switch (Mode)
3401bf50:	d01b      	beq.n	3401bf8a <UTIL_LCD_DisplayStringAt+0x6e>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
3401bf52:	1b64      	subs	r4, r4, r5
3401bf54:	f1b9 0f02 	cmp.w	r9, #2
3401bf58:	bf08      	it	eq
3401bf5a:	4625      	moveq	r5, r4
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
3401bf5c:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
3401bf60:	1e6a      	subs	r2, r5, #1
    refcolumn = 1;
3401bf62:	429a      	cmp	r2, r3
3401bf64:	bf88      	it	hi
3401bf66:	2501      	movhi	r5, #1
3401bf68:	2400      	movs	r4, #0
  while ((*Text != 0) & (((DrawProp[DrawProp->LcdLayer].LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
3401bf6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
3401bf6e:	5d32      	ldrb	r2, [r6, r4]
3401bf70:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401bf74:	6899      	ldr	r1, [r3, #8]
3401bf76:	695b      	ldr	r3, [r3, #20]
3401bf78:	8889      	ldrh	r1, [r1, #4]
3401bf7a:	fb04 3311 	mls	r3, r4, r1, r3
3401bf7e:	b29b      	uxth	r3, r3
3401bf80:	4299      	cmp	r1, r3
3401bf82:	d800      	bhi.n	3401bf86 <UTIL_LCD_DisplayStringAt+0x6a>
3401bf84:	b922      	cbnz	r2, 3401bf90 <UTIL_LCD_DisplayStringAt+0x74>
}
3401bf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
3401bf8a:	eb05 0554 	add.w	r5, r5, r4, lsr #1
      break;
3401bf8e:	e7e5      	b.n	3401bf5c <UTIL_LCD_DisplayStringAt+0x40>
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
3401bf90:	4628      	mov	r0, r5
3401bf92:	4639      	mov	r1, r7
3401bf94:	f7ff fecc 	bl	3401bd30 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
3401bf98:	f8d8 300c 	ldr.w	r3, [r8, #12]
    i++;
3401bf9c:	3401      	adds	r4, #1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
3401bf9e:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401bfa2:	689b      	ldr	r3, [r3, #8]
3401bfa4:	889b      	ldrh	r3, [r3, #4]
3401bfa6:	441d      	add	r5, r3
    i++;
3401bfa8:	e7df      	b.n	3401bf6a <UTIL_LCD_DisplayStringAt+0x4e>
3401bfaa:	bf00      	nop
3401bfac:	340dc040 	.word	0x340dc040

3401bfb0 <UTIL_LCD_DrawRect>:
{
3401bfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401bfb4:	461f      	mov	r7, r3
3401bfb6:	460e      	mov	r6, r1
3401bfb8:	4605      	mov	r5, r0
3401bfba:	4614      	mov	r4, r2
3401bfbc:	f8dd 8018 	ldr.w	r8, [sp, #24]
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
3401bfc0:	4643      	mov	r3, r8
3401bfc2:	f7ff fe49 	bl	3401bc58 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
3401bfc6:	1e79      	subs	r1, r7, #1
3401bfc8:	4643      	mov	r3, r8
3401bfca:	4622      	mov	r2, r4
3401bfcc:	4628      	mov	r0, r5
3401bfce:	4431      	add	r1, r6
3401bfd0:	f7ff fe42 	bl	3401bc58 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401bfd4:	3c01      	subs	r4, #1
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
3401bfd6:	4643      	mov	r3, r8
3401bfd8:	463a      	mov	r2, r7
3401bfda:	4631      	mov	r1, r6
3401bfdc:	4628      	mov	r0, r5
3401bfde:	f7ff fe71 	bl	3401bcc4 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401bfe2:	4643      	mov	r3, r8
3401bfe4:	463a      	mov	r2, r7
3401bfe6:	4631      	mov	r1, r6
3401bfe8:	1960      	adds	r0, r4, r5
}
3401bfea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401bfee:	f7ff be69 	b.w	3401bcc4 <UTIL_LCD_DrawVLine>
	...

3401bff4 <UTIL_LCD_FillRect>:
{
3401bff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401bff6:	4607      	mov	r7, r0
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bff8:	481a      	ldr	r0, [pc, #104]	@ (3401c064 <UTIL_LCD_FillRect+0x70>)
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401bffa:	4e1b      	ldr	r6, [pc, #108]	@ (3401c068 <UTIL_LCD_FillRect+0x74>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401bffc:	68c5      	ldr	r5, [r0, #12]
{
3401bffe:	9c08      	ldr	r4, [sp, #32]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c000:	eb00 1545 	add.w	r5, r0, r5, lsl #5
3401c004:	69ed      	ldr	r5, [r5, #28]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c006:	6936      	ldr	r6, [r6, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c008:	2d02      	cmp	r5, #2
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c00a:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401c00c:	d10c      	bne.n	3401c028 <UTIL_LCD_FillRect+0x34>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401c00e:	0965      	lsrs	r5, r4, #5
3401c010:	ea4f 2c14 	mov.w	ip, r4, lsr #8
3401c014:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
3401c018:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
3401c01c:	ea45 050c 	orr.w	r5, r5, ip
3401c020:	f3c4 04c4 	ubfx	r4, r4, #3, #5
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Color));
3401c024:	432c      	orrs	r4, r5
3401c026:	e003      	b.n	3401c030 <UTIL_LCD_FillRect+0x3c>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401c028:	2d01      	cmp	r5, #1
3401c02a:	d109      	bne.n	3401c040 <UTIL_LCD_FillRect+0x4c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB888(Color));
3401c02c:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
3401c030:	e9cd 3400 	strd	r3, r4, [sp]
3401c034:	4613      	mov	r3, r2
3401c036:	460a      	mov	r2, r1
3401c038:	4639      	mov	r1, r7
3401c03a:	47b0      	blx	r6
}
3401c03c:	b003      	add	sp, #12
3401c03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401c040:	2d04      	cmp	r5, #4
3401c042:	d1f5      	bne.n	3401c030 <UTIL_LCD_FillRect+0x3c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Color));
3401c044:	ea4f 7c14 	mov.w	ip, r4, lsr #28
3401c048:	f3c4 1503 	ubfx	r5, r4, #4, #4
3401c04c:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
3401c050:	ea4f 2c14 	mov.w	ip, r4, lsr #8
3401c054:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
3401c058:	0b24      	lsrs	r4, r4, #12
3401c05a:	ea45 050c 	orr.w	r5, r5, ip
3401c05e:	f404 6470 	and.w	r4, r4, #3840	@ 0xf00
3401c062:	e7df      	b.n	3401c024 <UTIL_LCD_FillRect+0x30>
3401c064:	340dc040 	.word	0x340dc040
3401c068:	340dc014 	.word	0x340dc014

3401c06c <UTIL_LCD_Clear>:
{
3401c06c:	b507      	push	{r0, r1, r2, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp[DrawProp->LcdLayer].LcdXsize, DrawProp[DrawProp->LcdLayer].LcdYsize, Color);
3401c06e:	2100      	movs	r1, #0
3401c070:	4a06      	ldr	r2, [pc, #24]	@ (3401c08c <UTIL_LCD_Clear+0x20>)
3401c072:	68d3      	ldr	r3, [r2, #12]
3401c074:	9000      	str	r0, [sp, #0]
3401c076:	eb02 1243 	add.w	r2, r2, r3, lsl #5
3401c07a:	4608      	mov	r0, r1
3401c07c:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
3401c080:	f7ff ffb8 	bl	3401bff4 <UTIL_LCD_FillRect>
}
3401c084:	b003      	add	sp, #12
3401c086:	f85d fb04 	ldr.w	pc, [sp], #4
3401c08a:	bf00      	nop
3401c08c:	340dc040 	.word	0x340dc040

3401c090 <clamp_point>:
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

static int clamp_point(int *x, int *y)
{
  int xi = *x;
3401c090:	6803      	ldr	r3, [r0, #0]
{
3401c092:	b510      	push	{r4, lr}
  int yi = *y;

  if (*x < 0)
3401c094:	2b00      	cmp	r3, #0
    *x = 0;
3401c096:	bfb8      	it	lt
3401c098:	2400      	movlt	r4, #0
  int yi = *y;
3401c09a:	680a      	ldr	r2, [r1, #0]
    *x = 0;
3401c09c:	bfb8      	it	lt
3401c09e:	6004      	strlt	r4, [r0, #0]
  if (*y < 0)
3401c0a0:	680c      	ldr	r4, [r1, #0]
3401c0a2:	2c00      	cmp	r4, #0
    *y = 0;
3401c0a4:	bfbc      	itt	lt
3401c0a6:	2400      	movlt	r4, #0
3401c0a8:	600c      	strlt	r4, [r1, #0]
  if (*x >= lcd_bg_area.XSize)
3401c0aa:	6804      	ldr	r4, [r0, #0]
3401c0ac:	f5b4 7f48 	cmp.w	r4, #800	@ 0x320
    *x = lcd_bg_area.XSize - 1;
3401c0b0:	bf24      	itt	cs
3401c0b2:	f240 341f 	movwcs	r4, #799	@ 0x31f
3401c0b6:	6004      	strcs	r4, [r0, #0]
  if (*y >= lcd_bg_area.YSize)
3401c0b8:	680c      	ldr	r4, [r1, #0]
3401c0ba:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
    *y = lcd_bg_area.YSize - 1;
3401c0be:	bf24      	itt	cs
3401c0c0:	f240 14df 	movwcs	r4, #479	@ 0x1df
3401c0c4:	600c      	strcs	r4, [r1, #0]

  return (xi != *x) || (yi != *y);
3401c0c6:	6800      	ldr	r0, [r0, #0]
3401c0c8:	4298      	cmp	r0, r3
3401c0ca:	d104      	bne.n	3401c0d6 <clamp_point+0x46>
3401c0cc:	6808      	ldr	r0, [r1, #0]
3401c0ce:	1a80      	subs	r0, r0, r2
3401c0d0:	bf18      	it	ne
3401c0d2:	2001      	movne	r0, #1
}
3401c0d4:	bd10      	pop	{r4, pc}
  return (xi != *x) || (yi != *y);
3401c0d6:	2001      	movs	r0, #1
3401c0d8:	e7fc      	b.n	3401c0d4 <clamp_point+0x44>
	...

3401c0dc <convert_length>:

// Added until here

static void convert_length(float32_t wi, float32_t hi, int *wo, int *ho)
{
  *wo = (int) (lcd_bg_area.XSize * wi);
3401c0dc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 3401c100 <convert_length+0x24>
3401c0e0:	ee20 0a27 	vmul.f32	s0, s0, s15
  *ho = (int) (lcd_bg_area.YSize * hi);
3401c0e4:	eddf 7a07 	vldr	s15, [pc, #28]	@ 3401c104 <convert_length+0x28>
3401c0e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
  *wo = (int) (lcd_bg_area.XSize * wi);
3401c0ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  *ho = (int) (lcd_bg_area.YSize * hi);
3401c0f0:	eefd 0ae0 	vcvt.s32.f32	s1, s1
  *wo = (int) (lcd_bg_area.XSize * wi);
3401c0f4:	ed80 0a00 	vstr	s0, [r0]
  *ho = (int) (lcd_bg_area.YSize * hi);
3401c0f8:	edc1 0a00 	vstr	s1, [r1]
}
3401c0fc:	4770      	bx	lr
3401c0fe:	bf00      	nop
3401c100:	44480000 	.word	0x44480000
3401c104:	43f00000 	.word	0x43f00000

3401c108 <bqueue_get_free>:
{
3401c108:	b510      	push	{r4, lr}
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401c10a:	4249      	negs	r1, r1
{
3401c10c:	4604      	mov	r4, r0
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401c10e:	6800      	ldr	r0, [r0, #0]
3401c110:	f7ed ff32 	bl	34009f78 <xQueueSemaphoreTake>
  if (ret == pdFALSE)
3401c114:	b170      	cbz	r0, 3401c134 <bqueue_get_free+0x2c>
  res = bq->buffers[bq->free_idx];
3401c116:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3401c11a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
3401c11e:	f8d2 00ac 	ldr.w	r0, [r2, #172]	@ 0xac
  bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
3401c122:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
3401c126:	3301      	adds	r3, #1
3401c128:	fb93 f1f2 	sdiv	r1, r3, r2
3401c12c:	fb02 3311 	mls	r3, r2, r1, r3
3401c130:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
}
3401c134:	bd10      	pop	{r4, pc}
	...

3401c138 <isp_thread_fct>:
    disp_ms = HAL_GetTick() - ts;
  }
}

static void isp_thread_fct(void *arg)
{
3401c138:	b510      	push	{r4, lr}
  int ret;

  while (1) {
    ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
3401c13a:	4c09      	ldr	r4, [pc, #36]	@ (3401c160 <isp_thread_fct+0x28>)
3401c13c:	f04f 31ff 	mov.w	r1, #4294967295
3401c140:	6820      	ldr	r0, [r4, #0]
3401c142:	f7ed ff19 	bl	34009f78 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401c146:	2801      	cmp	r0, #1
3401c148:	d006      	beq.n	3401c158 <isp_thread_fct+0x20>
3401c14a:	f240 619e 	movw	r1, #1694	@ 0x69e
3401c14e:	4b05      	ldr	r3, [pc, #20]	@ (3401c164 <isp_thread_fct+0x2c>)
3401c150:	4a05      	ldr	r2, [pc, #20]	@ (3401c168 <isp_thread_fct+0x30>)
3401c152:	4806      	ldr	r0, [pc, #24]	@ (3401c16c <isp_thread_fct+0x34>)
3401c154:	f001 fc4a 	bl	3401d9ec <__assert_func>

    CAM_IspUpdate();
3401c158:	f001 f8a6 	bl	3401d2a8 <CAM_IspUpdate>
    ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
3401c15c:	e7ee      	b.n	3401c13c <isp_thread_fct+0x4>
3401c15e:	bf00      	nop
3401c160:	340df568 	.word	0x340df568
3401c164:	34022c3c 	.word	0x34022c3c
3401c168:	340a0820 	.word	0x340a0820
3401c16c:	34026d40 	.word	0x34026d40

3401c170 <TRK_Init>:
{
3401c170:	b530      	push	{r4, r5, lr}
3401c172:	b08b      	sub	sp, #44	@ 0x2c
  const trk_conf_t cfg = {
3401c174:	466c      	mov	r4, sp
3401c176:	4d08      	ldr	r5, [pc, #32]	@ (3401c198 <TRK_Init+0x28>)
3401c178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3401c17a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401c17c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3401c17e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401c180:	e895 0003 	ldmia.w	r5, {r0, r1}
  return trk_init(&trk_ctx, (trk_conf_t *) &cfg, ARRAY_NB(tboxes), tboxes);
3401c184:	2214      	movs	r2, #20
  const trk_conf_t cfg = {
3401c186:	e884 0003 	stmia.w	r4, {r0, r1}
  return trk_init(&trk_ctx, (trk_conf_t *) &cfg, ARRAY_NB(tboxes), tboxes);
3401c18a:	4b04      	ldr	r3, [pc, #16]	@ (3401c19c <TRK_Init+0x2c>)
3401c18c:	4669      	mov	r1, sp
3401c18e:	4804      	ldr	r0, [pc, #16]	@ (3401c1a0 <TRK_Init+0x30>)
3401c190:	f7f0 fdad 	bl	3400ccee <trk_init>
}
3401c194:	b00b      	add	sp, #44	@ 0x2c
3401c196:	bd30      	pop	{r4, r5, pc}
3401c198:	34022bb8 	.word	0x34022bb8
3401c19c:	340dc318 	.word	0x340dc318
3401c1a0:	340dc088 	.word	0x340dc088

3401c1a4 <bqueue_get_ready>:
{
3401c1a4:	b510      	push	{r4, lr}
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401c1a6:	f04f 31ff 	mov.w	r1, #4294967295
{
3401c1aa:	4604      	mov	r4, r0
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401c1ac:	6d40      	ldr	r0, [r0, #84]	@ 0x54
3401c1ae:	f7ed fee3 	bl	34009f78 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
3401c1b2:	2801      	cmp	r0, #1
3401c1b4:	d006      	beq.n	3401c1c4 <bqueue_get_ready+0x20>
3401c1b6:	f240 2153 	movw	r1, #595	@ 0x253
3401c1ba:	4b0a      	ldr	r3, [pc, #40]	@ (3401c1e4 <bqueue_get_ready+0x40>)
3401c1bc:	4a0a      	ldr	r2, [pc, #40]	@ (3401c1e8 <bqueue_get_ready+0x44>)
3401c1be:	480b      	ldr	r0, [pc, #44]	@ (3401c1ec <bqueue_get_ready+0x48>)
3401c1c0:	f001 fc14 	bl	3401d9ec <__assert_func>
  res = bq->buffers[bq->ready_idx];
3401c1c4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3401c1c8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
3401c1cc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	@ 0xac
  bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
3401c1d0:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
3401c1d4:	3301      	adds	r3, #1
3401c1d6:	fb93 f1f2 	sdiv	r1, r3, r2
3401c1da:	fb02 3311 	mls	r3, r2, r1, r3
3401c1de:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
}
3401c1e2:	bd10      	pop	{r4, pc}
3401c1e4:	34022c3c 	.word	0x34022c3c
3401c1e8:	340a07c5 	.word	0x340a07c5
3401c1ec:	34026d40 	.word	0x34026d40

3401c1f0 <bqueue_init.constprop.0>:
static int bqueue_init(bqueue_t *bq, int buffer_nb, uint8_t **buffers)
3401c1f0:	b538      	push	{r3, r4, r5, lr}
3401c1f2:	460d      	mov	r5, r1
  bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
3401c1f4:	2102      	movs	r1, #2
static int bqueue_init(bqueue_t *bq, int buffer_nb, uint8_t **buffers)
3401c1f6:	4604      	mov	r4, r0
  bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
3401c1f8:	1d02      	adds	r2, r0, #4
3401c1fa:	4608      	mov	r0, r1
3401c1fc:	f7ed fcf8 	bl	34009bf0 <xQueueCreateCountingSemaphoreStatic>
3401c200:	6020      	str	r0, [r4, #0]
  if (!bq->free)
3401c202:	b150      	cbz	r0, 3401c21a <bqueue_init.constprop.0+0x2a>
  bq->ready = xSemaphoreCreateCountingStatic(buffer_nb, 0, &bq->ready_buffer);
3401c204:	2100      	movs	r1, #0
3401c206:	2002      	movs	r0, #2
3401c208:	f104 0258 	add.w	r2, r4, #88	@ 0x58
3401c20c:	f7ed fcf0 	bl	34009bf0 <xQueueCreateCountingSemaphoreStatic>
3401c210:	6560      	str	r0, [r4, #84]	@ 0x54
  if (!bq->ready)
3401c212:	b928      	cbnz	r0, 3401c220 <bqueue_init.constprop.0+0x30>
  vSemaphoreDelete(bq->free);
3401c214:	6820      	ldr	r0, [r4, #0]
3401c216:	f7ed ffaf 	bl	3400a178 <vQueueDelete>
    return -1;
3401c21a:	f04f 30ff 	mov.w	r0, #4294967295
3401c21e:	e00d      	b.n	3401c23c <bqueue_init.constprop.0+0x4c>
  bq->buffer_nb = buffer_nb;
3401c220:	2302      	movs	r3, #2
3401c222:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    assert(buffers[i]);
3401c226:	682b      	ldr	r3, [r5, #0]
3401c228:	b14b      	cbz	r3, 3401c23e <bqueue_init.constprop.0+0x4e>
    bq->buffers[i] = buffers[i];
3401c22a:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    assert(buffers[i]);
3401c22e:	686b      	ldr	r3, [r5, #4]
3401c230:	b12b      	cbz	r3, 3401c23e <bqueue_init.constprop.0+0x4e>
  bq->free_idx = 0;
3401c232:	2000      	movs	r0, #0
  bq->ready_idx = 0;
3401c234:	e9c4 002d 	strd	r0, r0, [r4, #180]	@ 0xb4
    bq->buffers[i] = buffers[i];
3401c238:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
}
3401c23c:	bd38      	pop	{r3, r4, r5, pc}
    assert(buffers[i]);
3401c23e:	f44f 710a 	mov.w	r1, #552	@ 0x228
3401c242:	4b02      	ldr	r3, [pc, #8]	@ (3401c24c <bqueue_init.constprop.0+0x5c>)
3401c244:	4a02      	ldr	r2, [pc, #8]	@ (3401c250 <bqueue_init.constprop.0+0x60>)
3401c246:	4803      	ldr	r0, [pc, #12]	@ (3401c254 <bqueue_init.constprop.0+0x64>)
3401c248:	f001 fbd0 	bl	3401d9ec <__assert_func>
3401c24c:	34026d65 	.word	0x34026d65
3401c250:	340a0723 	.word	0x340a0723
3401c254:	34026d40 	.word	0x34026d40

3401c258 <cpuload_update.constprop.0>:
static void cpuload_update(cpuload_info_t *cpu_load)
3401c258:	b570      	push	{r4, r5, r6, lr}
  cpu_load->history[1] = cpu_load->history[0];
3401c25a:	4c15      	ldr	r4, [pc, #84]	@ (3401c2b0 <cpuload_update.constprop.0+0x58>)
3401c25c:	f104 0538 	add.w	r5, r4, #56	@ 0x38
3401c260:	f104 0620 	add.w	r6, r4, #32
3401c264:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
3401c266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3401c268:	e896 0003 	ldmia.w	r6, {r0, r1}
3401c26c:	e885 0003 	stmia.w	r5, {r0, r1}
  cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
3401c270:	f001 f8ae 	bl	3401d3d0 <TIM4_Get_Value>
3401c274:	2300      	movs	r3, #0
3401c276:	4605      	mov	r5, r0
3401c278:	6263      	str	r3, [r4, #36]	@ 0x24
3401c27a:	6220      	str	r0, [r4, #32]
  cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
3401c27c:	f7ee fdca 	bl	3400ae14 <ulTaskGetIdleRunTimeCounter>
3401c280:	1a2d      	subs	r5, r5, r0
3401c282:	eb63 0303 	sbc.w	r3, r3, r3
3401c286:	e9c4 530a 	strd	r5, r3, [r4, #40]	@ 0x28
  cpu_load->history[0].tick = HAL_GetTick();
3401c28a:	f001 f84d 	bl	3401d328 <HAL_GetTick>
  if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
3401c28e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401c290:	6e22      	ldr	r2, [r4, #96]	@ 0x60
  cpu_load->history[0].tick = HAL_GetTick();
3401c292:	6320      	str	r0, [r4, #48]	@ 0x30
  if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
3401c294:	1a9b      	subs	r3, r3, r2
3401c296:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3401c29a:	d308      	bcc.n	3401c2ae <cpuload_update.constprop.0+0x56>
    cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i - 1];
3401c29c:	f104 0138 	add.w	r1, r4, #56	@ 0x38
3401c2a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401c2a4:	2290      	movs	r2, #144	@ 0x90
}
3401c2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i - 1];
3401c2aa:	f002 bbcf 	b.w	3401ea4c <memmove>
}
3401c2ae:	bd70      	pop	{r4, r5, r6, pc}
3401c2b0:	3418da80 	.word	0x3418da80

3401c2b4 <bqueue_put_ready>:
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401c2b4:	2300      	movs	r3, #0
{
3401c2b6:	b513      	push	{r0, r1, r4, lr}
3401c2b8:	4604      	mov	r4, r0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401c2ba:	9301      	str	r3, [sp, #4]
  if (xPortIsInsideInterrupt()) {
3401c2bc:	f7ef f896 	bl	3400b3ec <xPortIsInsideInterrupt>
3401c2c0:	4603      	mov	r3, r0
3401c2c2:	b1b0      	cbz	r0, 3401c2f2 <bqueue_put_ready+0x3e>
    ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
3401c2c4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401c2c6:	a901      	add	r1, sp, #4
3401c2c8:	f7ed fd6a 	bl	34009da0 <xQueueGiveFromISR>
    assert(ret == pdTRUE);
3401c2cc:	2801      	cmp	r0, #1
3401c2ce:	d006      	beq.n	3401c2de <bqueue_put_ready+0x2a>
3401c2d0:	f240 2162 	movw	r1, #610	@ 0x262
3401c2d4:	4b0d      	ldr	r3, [pc, #52]	@ (3401c30c <bqueue_put_ready+0x58>)
3401c2d6:	4a0e      	ldr	r2, [pc, #56]	@ (3401c310 <bqueue_put_ready+0x5c>)
    assert(ret == pdTRUE);
3401c2d8:	480e      	ldr	r0, [pc, #56]	@ (3401c314 <bqueue_put_ready+0x60>)
3401c2da:	f001 fb87 	bl	3401d9ec <__assert_func>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401c2de:	9b01      	ldr	r3, [sp, #4]
3401c2e0:	b12b      	cbz	r3, 3401c2ee <bqueue_put_ready+0x3a>
3401c2e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401c2e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401c2ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
}
3401c2ee:	b002      	add	sp, #8
3401c2f0:	bd10      	pop	{r4, pc}
    ret = xSemaphoreGive(bq->ready);
3401c2f2:	4602      	mov	r2, r0
3401c2f4:	4601      	mov	r1, r0
3401c2f6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401c2f8:	f7ed fc9a 	bl	34009c30 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401c2fc:	2801      	cmp	r0, #1
3401c2fe:	d0f6      	beq.n	3401c2ee <bqueue_put_ready+0x3a>
3401c300:	f240 2166 	movw	r1, #614	@ 0x266
3401c304:	4b01      	ldr	r3, [pc, #4]	@ (3401c30c <bqueue_put_ready+0x58>)
3401c306:	4a02      	ldr	r2, [pc, #8]	@ (3401c310 <bqueue_put_ready+0x5c>)
3401c308:	e7e6      	b.n	3401c2d8 <bqueue_put_ready+0x24>
3401c30a:	bf00      	nop
3401c30c:	34022c3c 	.word	0x34022c3c
3401c310:	340a073c 	.word	0x340a073c
3401c314:	34026d40 	.word	0x34026d40

3401c318 <bqueue_put_free.isra.0>:
static void bqueue_put_free(bqueue_t *bq)
3401c318:	b508      	push	{r3, lr}
  ret = xSemaphoreGive(bq->free);
3401c31a:	2300      	movs	r3, #0
3401c31c:	461a      	mov	r2, r3
3401c31e:	4619      	mov	r1, r3
3401c320:	f7ed fc86 	bl	34009c30 <xQueueGenericSend>
  assert(ret == pdTRUE);
3401c324:	2801      	cmp	r0, #1
3401c326:	d006      	beq.n	3401c336 <bqueue_put_free.isra.0+0x1e>
3401c328:	f240 214a 	movw	r1, #586	@ 0x24a
3401c32c:	4b02      	ldr	r3, [pc, #8]	@ (3401c338 <bqueue_put_free.isra.0+0x20>)
3401c32e:	4a03      	ldr	r2, [pc, #12]	@ (3401c33c <bqueue_put_free.isra.0+0x24>)
3401c330:	4803      	ldr	r0, [pc, #12]	@ (3401c340 <bqueue_put_free.isra.0+0x28>)
3401c332:	f001 fb5b 	bl	3401d9ec <__assert_func>
}
3401c336:	bd08      	pop	{r3, pc}
3401c338:	34022c3c 	.word	0x34022c3c
3401c33c:	340a0784 	.word	0x340a0784
3401c340:	34026d40 	.word	0x34026d40

3401c344 <pp_thread_fct>:
{
3401c344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c348:	b09b      	sub	sp, #108	@ 0x6c
  app_postprocess_init(&pp_params);
3401c34a:	a80a      	add	r0, sp, #40	@ 0x28
3401c34c:	f7ef f91a 	bl	3400b584 <app_postprocess_init>
    output_buffer = bqueue_get_ready(&nn_output_queue);
3401c350:	f8df 923c 	ldr.w	r9, [pc, #572]	@ 3401c590 <pp_thread_fct+0x24c>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401c354:	4c80      	ldr	r4, [pc, #512]	@ (3401c558 <pp_thread_fct+0x214>)
    output_buffer = bqueue_get_ready(&nn_output_queue);
3401c356:	4648      	mov	r0, r9
3401c358:	f7ff ff24 	bl	3401c1a4 <bqueue_get_ready>
    assert(output_buffer);
3401c35c:	b930      	cbnz	r0, 3401c36c <pp_thread_fct+0x28>
3401c35e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
3401c362:	4b7e      	ldr	r3, [pc, #504]	@ (3401c55c <pp_thread_fct+0x218>)
3401c364:	4a7e      	ldr	r2, [pc, #504]	@ (3401c560 <pp_thread_fct+0x21c>)
    assert(ret == 0);
3401c366:	487f      	ldr	r0, [pc, #508]	@ (3401c564 <pp_thread_fct+0x220>)
3401c368:	f001 fb40 	bl	3401d9ec <__assert_func>
      pp_input[i] = pp_input[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401c36c:	f500 537d 	add.w	r3, r0, #16192	@ 0x3f40
3401c370:	3320      	adds	r3, #32
3401c372:	9308      	str	r3, [sp, #32]
    pp_output.pOutBuff = NULL;
3401c374:	2300      	movs	r3, #0
    pp_input[0] = output_buffer;
3401c376:	9007      	str	r0, [sp, #28]
      pp_input[i] = pp_input[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401c378:	f500 2086 	add.w	r0, r0, #274432	@ 0x43000
3401c37c:	f500 7078 	add.w	r0, r0, #992	@ 0x3e0
    pp_output.pOutBuff = NULL;
3401c380:	9305      	str	r3, [sp, #20]
      pp_input[i] = pp_input[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401c382:	9009      	str	r0, [sp, #36]	@ 0x24
    nn_pp[0] = HAL_GetTick();
3401c384:	f000 ffd0 	bl	3401d328 <HAL_GetTick>
    ret = app_postprocess_run((void **)pp_input, NN_OUT_NB, &pp_output, &pp_params);
3401c388:	2103      	movs	r1, #3
    nn_pp[0] = HAL_GetTick();
3401c38a:	9001      	str	r0, [sp, #4]
    ret = app_postprocess_run((void **)pp_input, NN_OUT_NB, &pp_output, &pp_params);
3401c38c:	ab0a      	add	r3, sp, #40	@ 0x28
3401c38e:	aa05      	add	r2, sp, #20
3401c390:	a807      	add	r0, sp, #28
3401c392:	f7ef f91b 	bl	3400b5cc <app_postprocess_run>
    assert(ret == 0);
3401c396:	4607      	mov	r7, r0
3401c398:	b120      	cbz	r0, 3401c3a4 <pp_thread_fct+0x60>
3401c39a:	f44f 61c9 	mov.w	r1, #1608	@ 0x648
3401c39e:	4b72      	ldr	r3, [pc, #456]	@ (3401c568 <pp_thread_fct+0x224>)
3401c3a0:	4a6f      	ldr	r2, [pc, #444]	@ (3401c560 <pp_thread_fct+0x21c>)
3401c3a2:	e7e0      	b.n	3401c366 <pp_thread_fct+0x22>
  cur_button_state = BSP_PB_GetState(BUTTON_TOGGLE_TRACKING);
3401c3a4:	f7f1 fd14 	bl	3400ddd0 <BSP_PB_GetState>
  if (cur_button_state == GPIO_PIN_SET && prev_button_state == GPIO_PIN_RESET) {
3401c3a8:	2801      	cmp	r0, #1
  cur_button_state = BSP_PB_GetState(BUTTON_TOGGLE_TRACKING);
3401c3aa:	4605      	mov	r5, r0
  if (cur_button_state == GPIO_PIN_SET && prev_button_state == GPIO_PIN_RESET) {
3401c3ac:	4e6f      	ldr	r6, [pc, #444]	@ (3401c56c <pp_thread_fct+0x228>)
3401c3ae:	f8df 81e4 	ldr.w	r8, [pc, #484]	@ 3401c594 <pp_thread_fct+0x250>
3401c3b2:	d117      	bne.n	3401c3e4 <pp_thread_fct+0xa0>
3401c3b4:	f8d8 2000 	ldr.w	r2, [r8]
    tracking_enabled = !tracking_enabled;
3401c3b8:	6833      	ldr	r3, [r6, #0]
  if (cur_button_state == GPIO_PIN_SET && prev_button_state == GPIO_PIN_RESET) {
3401c3ba:	b99a      	cbnz	r2, 3401c3e4 <pp_thread_fct+0xa0>
    tracking_enabled = !tracking_enabled;
3401c3bc:	2b00      	cmp	r3, #0
3401c3be:	bf0c      	ite	eq
3401c3c0:	2301      	moveq	r3, #1
3401c3c2:	2300      	movne	r3, #0
3401c3c4:	6033      	str	r3, [r6, #0]
    if (tracking_enabled) {
3401c3c6:	d10a      	bne.n	3401c3de <pp_thread_fct+0x9a>
      printf("Enable tracking\n");
3401c3c8:	4869      	ldr	r0, [pc, #420]	@ (3401c570 <pp_thread_fct+0x22c>)
3401c3ca:	f002 fa23 	bl	3401e814 <puts>
      ret = TRK_Init();
3401c3ce:	f7ff fecf 	bl	3401c170 <TRK_Init>
      assert(ret == 0);
3401c3d2:	b138      	cbz	r0, 3401c3e4 <pp_thread_fct+0xa0>
3401c3d4:	f240 51f1 	movw	r1, #1521	@ 0x5f1
3401c3d8:	4b63      	ldr	r3, [pc, #396]	@ (3401c568 <pp_thread_fct+0x224>)
3401c3da:	4a66      	ldr	r2, [pc, #408]	@ (3401c574 <pp_thread_fct+0x230>)
3401c3dc:	e7c3      	b.n	3401c366 <pp_thread_fct+0x22>
      printf("Disable tracking\n");
3401c3de:	4866      	ldr	r0, [pc, #408]	@ (3401c578 <pp_thread_fct+0x234>)
3401c3e0:	f002 fa18 	bl	3401e814 <puts>
  prev_button_state = cur_button_state;
3401c3e4:	f8c8 5000 	str.w	r5, [r8]
  return tracking_enabled;
3401c3e8:	f8d6 8000 	ldr.w	r8, [r6]
  if (!tracking_enabled)
3401c3ec:	f1b8 0f00 	cmp.w	r8, #0
3401c3f0:	d038      	beq.n	3401c464 <pp_thread_fct+0x120>
3401c3f2:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
3401c3f6:	2900      	cmp	r1, #0
3401c3f8:	f101 0001 	add.w	r0, r1, #1
3401c3fc:	bfb8      	it	lt
3401c3fe:	2001      	movlt	r0, #1
3401c400:	4b5e      	ldr	r3, [pc, #376]	@ (3401c57c <pp_thread_fct+0x238>)
  for (i = 0; i < pp->nb_detect; i++)
3401c402:	3801      	subs	r0, #1
3401c404:	f102 0218 	add.w	r2, r2, #24
3401c408:	f103 0338 	add.w	r3, r3, #56	@ 0x38
3401c40c:	d109      	bne.n	3401c422 <pp_thread_fct+0xde>
  ret = trk_update(&trk_ctx, pp->nb_detect, dboxes);
3401c40e:	4a5b      	ldr	r2, [pc, #364]	@ (3401c57c <pp_thread_fct+0x238>)
3401c410:	485b      	ldr	r0, [pc, #364]	@ (3401c580 <pp_thread_fct+0x23c>)
3401c412:	f7f0 fcab 	bl	3400cd6c <trk_update>
  assert(ret == 0);
3401c416:	b318      	cbz	r0, 3401c460 <pp_thread_fct+0x11c>
3401c418:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
3401c41c:	4b52      	ldr	r3, [pc, #328]	@ (3401c568 <pp_thread_fct+0x224>)
3401c41e:	4a59      	ldr	r2, [pc, #356]	@ (3401c584 <pp_thread_fct+0x240>)
3401c420:	e7a1      	b.n	3401c366 <pp_thread_fct+0x22>
  dbox->conf = roi->conf;
3401c422:	ed12 7a02 	vldr	s14, [r2, #-8]
3401c426:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401c42a:	ed03 7b06 	vstr	d7, [r3, #-24]	@ 0xffffffe8
  dbox->cx = roi->x_center;
3401c42e:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
3401c432:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401c436:	ed03 7b0e 	vstr	d7, [r3, #-56]	@ 0xffffffc8
  dbox->cy = roi->y_center;
3401c43a:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
3401c43e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401c442:	ed03 7b0c 	vstr	d7, [r3, #-48]	@ 0xffffffd0
  dbox->w = roi->width;
3401c446:	ed12 7a04 	vldr	s14, [r2, #-16]
3401c44a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401c44e:	ed03 7b0a 	vstr	d7, [r3, #-40]	@ 0xffffffd8
  dbox->h = roi->height;
3401c452:	ed12 7a03 	vldr	s14, [r2, #-12]
3401c456:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401c45a:	ed03 7b08 	vstr	d7, [r3, #-32]	@ 0xffffffe0
  for (i = 0; i < pp->nb_detect; i++)
3401c45e:	e7d0      	b.n	3401c402 <pp_thread_fct+0xbe>
  return 1;
3401c460:	f04f 0801 	mov.w	r8, #1
    nn_pp[1] = HAL_GetTick();
3401c464:	f000 ff60 	bl	3401d328 <HAL_GetTick>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401c468:	f04f 31ff 	mov.w	r1, #4294967295
    nn_pp[1] = HAL_GetTick();
3401c46c:	9002      	str	r0, [sp, #8]
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401c46e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401c470:	f7ed fd82 	bl	34009f78 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401c474:	2801      	cmp	r0, #1
3401c476:	d004      	beq.n	3401c482 <pp_thread_fct+0x13e>
3401c478:	f240 614f 	movw	r1, #1615	@ 0x64f
3401c47c:	4b42      	ldr	r3, [pc, #264]	@ (3401c588 <pp_thread_fct+0x244>)
3401c47e:	4a38      	ldr	r2, [pc, #224]	@ (3401c560 <pp_thread_fct+0x21c>)
3401c480:	e771      	b.n	3401c366 <pp_thread_fct+0x22>
    for (i = 0; i < pp_output.nb_detect; i++)
3401c482:	f04f 0a00 	mov.w	sl, #0
    disp.info.nb_detect = pp_output.nb_detect;
3401c486:	9b06      	ldr	r3, [sp, #24]
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401c488:	f04f 0b18 	mov.w	fp, #24
3401c48c:	4553      	cmp	r3, sl
3401c48e:	f103 0c01 	add.w	ip, r3, #1
3401c492:	bfb8      	it	lt
3401c494:	4684      	movlt	ip, r0
3401c496:	9a05      	ldr	r2, [sp, #20]
3401c498:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 3401c558 <pp_thread_fct+0x214>
    disp.info.nb_detect = pp_output.nb_detect;
3401c49c:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401c4a0:	9203      	str	r2, [sp, #12]
    for (i = 0; i < pp_output.nb_detect; i++)
3401c4a2:	f1bc 0c01 	subs.w	ip, ip, #1
3401c4a6:	f10e 0e18 	add.w	lr, lr, #24
3401c4aa:	d13b      	bne.n	3401c524 <pp_thread_fct+0x1e0>
    disp.info.tboxes_valid_nb = 0;
3401c4ac:	2200      	movs	r2, #0
  tinfo->cx = tbox->cx;
3401c4ae:	2628      	movs	r6, #40	@ 0x28
      disp.info.tboxes_valid_nb++;
3401c4b0:	2514      	movs	r5, #20
3401c4b2:	4936      	ldr	r1, [pc, #216]	@ (3401c58c <pp_thread_fct+0x248>)
    disp.info.tracking_enabled = tracking_enabled;
3401c4b4:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
    disp.info.tboxes_valid_nb = 0;
3401c4b8:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
      if (!tboxes[i].is_tracking || tboxes[i].tlost_cnt)
3401c4bc:	680b      	ldr	r3, [r1, #0]
3401c4be:	b1c3      	cbz	r3, 3401c4f2 <pp_thread_fct+0x1ae>
3401c4c0:	688b      	ldr	r3, [r1, #8]
3401c4c2:	b9b3      	cbnz	r3, 3401c4f2 <pp_thread_fct+0x1ae>
  tinfo->cx = tbox->cx;
3401c4c4:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
3401c4c8:	fb06 4007 	mla	r0, r6, r7, r4
3401c4cc:	e9c0 236a 	strd	r2, r3, [r0, #424]	@ 0x1a8
  tinfo->cy = tbox->cy;
3401c4d0:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
3401c4d4:	e9c0 236c 	strd	r2, r3, [r0, #432]	@ 0x1b0
  tinfo->w = tbox->w;
3401c4d8:	e9d1 2308 	ldrd	r2, r3, [r1, #32]
3401c4dc:	e9c0 236e 	strd	r2, r3, [r0, #440]	@ 0x1b8
  tinfo->h = tbox->h;
3401c4e0:	e9d1 230a 	ldrd	r2, r3, [r1, #40]	@ 0x28
3401c4e4:	e9c0 2370 	strd	r2, r3, [r0, #448]	@ 0x1c0
      disp.info.tboxes_valid_nb++;
3401c4e8:	2201      	movs	r2, #1
  tinfo->id = tbox->id;
3401c4ea:	684b      	ldr	r3, [r1, #4]
      disp.info.tboxes_valid_nb++;
3401c4ec:	3701      	adds	r7, #1
  tinfo->id = tbox->id;
3401c4ee:	f8c0 31c8 	str.w	r3, [r0, #456]	@ 0x1c8
    for (i = 0; i < ARRAY_NB(tboxes); i++) {
3401c4f2:	3d01      	subs	r5, #1
3401c4f4:	f501 7120 	add.w	r1, r1, #640	@ 0x280
3401c4f8:	d1e0      	bne.n	3401c4bc <pp_thread_fct+0x178>
3401c4fa:	b10a      	cbz	r2, 3401c500 <pp_thread_fct+0x1bc>
3401c4fc:	f8c4 71a0 	str.w	r7, [r4, #416]	@ 0x1a0
    disp.info.pp_ms = nn_pp[1] - nn_pp[0];
3401c500:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
3401c504:	1a9b      	subs	r3, r3, r2
3401c506:	f8c4 3348 	str.w	r3, [r4, #840]	@ 0x348
    ret = xSemaphoreGive(disp.lock);
3401c50a:	2300      	movs	r3, #0
3401c50c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401c50e:	461a      	mov	r2, r3
3401c510:	4619      	mov	r1, r3
3401c512:	f7ed fb8d 	bl	34009c30 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401c516:	2801      	cmp	r0, #1
3401c518:	d012      	beq.n	3401c540 <pp_thread_fct+0x1fc>
3401c51a:	f240 615f 	movw	r1, #1631	@ 0x65f
3401c51e:	4b1a      	ldr	r3, [pc, #104]	@ (3401c588 <pp_thread_fct+0x244>)
3401c520:	4a0f      	ldr	r2, [pc, #60]	@ (3401c560 <pp_thread_fct+0x21c>)
3401c522:	e720      	b.n	3401c366 <pp_thread_fct+0x22>
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401c524:	9b03      	ldr	r3, [sp, #12]
3401c526:	f10e 0594 	add.w	r5, lr, #148	@ 0x94
3401c52a:	fb0b 360a 	mla	r6, fp, sl, r3
3401c52e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
3401c530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    for (i = 0; i < pp_output.nb_detect; i++)
3401c532:	f10a 0a01 	add.w	sl, sl, #1
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401c536:	e896 0003 	ldmia.w	r6, {r0, r1}
3401c53a:	e885 0003 	stmia.w	r5, {r0, r1}
    for (i = 0; i < pp_output.nb_detect; i++)
3401c53e:	e7b0      	b.n	3401c4a2 <pp_thread_fct+0x15e>
    bqueue_put_free(&nn_output_queue);
3401c540:	f8d9 0000 	ldr.w	r0, [r9]
3401c544:	f7ff fee8 	bl	3401c318 <bqueue_put_free.isra.0>
    xSemaphoreGive(disp.update);
3401c548:	2300      	movs	r3, #0
3401c54a:	6820      	ldr	r0, [r4, #0]
3401c54c:	461a      	mov	r2, r3
3401c54e:	4619      	mov	r1, r3
3401c550:	f7ed fb6e 	bl	34009c30 <xQueueGenericSend>
  {
3401c554:	e6ff      	b.n	3401c356 <pp_thread_fct+0x12>
3401c556:	bf00      	nop
3401c558:	3418db60 	.word	0x3418db60
3401c55c:	34026d70 	.word	0x34026d70
3401c560:	340a07d6 	.word	0x340a07d6
3401c564:	34026d40 	.word	0x34026d40
3401c568:	34023ee8 	.word	0x34023ee8
3401c56c:	340a320c 	.word	0x340a320c
3401c570:	34026d7e 	.word	0x34026d7e
3401c574:	340a0794 	.word	0x340a0794
3401c578:	34026d8e 	.word	0x34026d8e
3401c57c:	340dc0e8 	.word	0x340dc0e8
3401c580:	340dc088 	.word	0x340dc088
3401c584:	340a07b8 	.word	0x340a07b8
3401c588:	34022c3c 	.word	0x34022c3c
3401c58c:	340dc318 	.word	0x340dc318
3401c590:	340e76ec 	.word	0x340e76ec
3401c594:	340dc080 	.word	0x340dc080

3401c598 <nn_thread_fct>:
{
3401c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c59c:	ed2d 8b02 	vpush	{d8}
3401c5a0:	b087      	sub	sp, #28
  const LL_Buffer_InfoTypeDef *nn_out_info_people = LL_ATON_Output_Buffers_Info_Default();
3401c5a2:	f7f1 f817 	bl	3400d5d4 <LL_ATON_Output_Buffers_Info_Default>
  const LL_Buffer_InfoTypeDef * nn_in_info_people = LL_ATON_Input_Buffers_Info_Default();
3401c5a6:	f7f1 f811 	bl	3400d5cc <LL_ATON_Input_Buffers_Info_Default>
	const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_Default();
3401c5aa:	f7f1 f813 	bl	3400d5d4 <LL_ATON_Output_Buffers_Info_Default>
3401c5ae:	4604      	mov	r4, r0
	const LL_Buffer_InfoTypeDef * nn_in_info = LL_ATON_Input_Buffers_Info_Default();
3401c5b0:	f7f1 f80c 	bl	3400d5cc <LL_ATON_Input_Buffers_Info_Default>
  int nb = 0;
3401c5b4:	2300      	movs	r3, #0
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
3401c5b6:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
  while (nn_out_info->name) {
3401c5ba:	2138      	movs	r1, #56	@ 0x38
3401c5bc:	fb01 f203 	mul.w	r2, r1, r3
3401c5c0:	58a5      	ldr	r5, [r4, r2]
3401c5c2:	bb1d      	cbnz	r5, 3401c60c <nn_thread_fct+0x74>
	assert(NN_OUT_NB == model_get_output_nb(nn_out_info));
3401c5c4:	2b03      	cmp	r3, #3
3401c5c6:	d123      	bne.n	3401c610 <nn_thread_fct+0x78>
3401c5c8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
		assert(LL_Buffer_len(&nn_out_info[i]) == nn_out_len_user[i]);
3401c5cc:	f5a3 537d 	sub.w	r3, r3, #16192	@ 0x3f40
3401c5d0:	3b08      	subs	r3, #8
3401c5d2:	4293      	cmp	r3, r2
3401c5d4:	d123      	bne.n	3401c61e <nn_thread_fct+0x86>
3401c5d6:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
3401c5da:	f5a3 337d 	sub.w	r3, r3, #259072	@ 0x3f400
3401c5de:	3b80      	subs	r3, #128	@ 0x80
3401c5e0:	4293      	cmp	r3, r2
3401c5e2:	d11c      	bne.n	3401c61e <nn_thread_fct+0x86>
3401c5e4:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	@ 0x78
3401c5e8:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
3401c5ec:	3b20      	subs	r3, #32
3401c5ee:	4293      	cmp	r3, r2
3401c5f0:	d115      	bne.n	3401c61e <nn_thread_fct+0x86>
  nn_period[1] = HAL_GetTick();
3401c5f2:	f000 fe99 	bl	3401d328 <HAL_GetTick>
  nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
3401c5f6:	4629      	mov	r1, r5
  nn_period[1] = HAL_GetTick();
3401c5f8:	4604      	mov	r4, r0
  nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
3401c5fa:	4859      	ldr	r0, [pc, #356]	@ (3401c760 <nn_thread_fct+0x1c8>)
3401c5fc:	f7ff fd84 	bl	3401c108 <bqueue_get_free>
  assert(nn_pipe_dst);
3401c600:	b990      	cbnz	r0, 3401c628 <nn_thread_fct+0x90>
3401c602:	f240 51a4 	movw	r1, #1444	@ 0x5a4
3401c606:	4b57      	ldr	r3, [pc, #348]	@ (3401c764 <nn_thread_fct+0x1cc>)
3401c608:	4a57      	ldr	r2, [pc, #348]	@ (3401c768 <nn_thread_fct+0x1d0>)
3401c60a:	e005      	b.n	3401c618 <nn_thread_fct+0x80>
    nb++;
3401c60c:	3301      	adds	r3, #1
    nn_out_info++;
3401c60e:	e7d5      	b.n	3401c5bc <nn_thread_fct+0x24>
	assert(NN_OUT_NB == model_get_output_nb(nn_out_info));
3401c610:	f240 5177 	movw	r1, #1399	@ 0x577
3401c614:	4b55      	ldr	r3, [pc, #340]	@ (3401c76c <nn_thread_fct+0x1d4>)
3401c616:	4a56      	ldr	r2, [pc, #344]	@ (3401c770 <nn_thread_fct+0x1d8>)
		assert(LL_Buffer_len(&nn_out_info[i]) == nn_out_len_user[i]);
3401c618:	4856      	ldr	r0, [pc, #344]	@ (3401c774 <nn_thread_fct+0x1dc>)
3401c61a:	f001 f9e7 	bl	3401d9ec <__assert_func>
3401c61e:	f240 5179 	movw	r1, #1401	@ 0x579
3401c622:	4b55      	ldr	r3, [pc, #340]	@ (3401c778 <nn_thread_fct+0x1e0>)
3401c624:	4a52      	ldr	r2, [pc, #328]	@ (3401c770 <nn_thread_fct+0x1d8>)
3401c626:	e7f7      	b.n	3401c618 <nn_thread_fct+0x80>
3401c628:	1bf3      	subs	r3, r6, r7
  CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS); //nn_pipe_dst is the camera output buffer.
3401c62a:	4629      	mov	r1, r5
3401c62c:	9300      	str	r3, [sp, #0]
3401c62e:	f000 fe27 	bl	3401d280 <CAM_NNPipe_Start>
    capture_buffer = bqueue_get_ready(&nn_input_queue);
3401c632:	4f4b      	ldr	r7, [pc, #300]	@ (3401c760 <nn_thread_fct+0x1c8>)
    output_buffer = bqueue_get_free(&nn_output_queue, 1);
3401c634:	f8df 8164 	ldr.w	r8, [pc, #356]	@ 3401c79c <nn_thread_fct+0x204>
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401c638:	f8df 9164 	ldr.w	r9, [pc, #356]	@ 3401c7a0 <nn_thread_fct+0x208>
    nn_period[1] = HAL_GetTick();
3401c63c:	f000 fe74 	bl	3401d328 <HAL_GetTick>
    nn_period_ms = nn_period[1] - nn_period[0];
3401c640:	1b03      	subs	r3, r0, r4
    nn_period[1] = HAL_GetTick();
3401c642:	4605      	mov	r5, r0
    capture_buffer = bqueue_get_ready(&nn_input_queue);
3401c644:	4638      	mov	r0, r7
    nn_period_ms = nn_period[1] - nn_period[0];
3401c646:	ee08 3a10 	vmov	s16, r3
    capture_buffer = bqueue_get_ready(&nn_input_queue);
3401c64a:	f7ff fdab 	bl	3401c1a4 <bqueue_get_ready>
    assert(capture_buffer);
3401c64e:	4606      	mov	r6, r0
3401c650:	b920      	cbnz	r0, 3401c65c <nn_thread_fct+0xc4>
3401c652:	f240 51b2 	movw	r1, #1458	@ 0x5b2
3401c656:	4b49      	ldr	r3, [pc, #292]	@ (3401c77c <nn_thread_fct+0x1e4>)
3401c658:	4a43      	ldr	r2, [pc, #268]	@ (3401c768 <nn_thread_fct+0x1d0>)
3401c65a:	e7dd      	b.n	3401c618 <nn_thread_fct+0x80>
    output_buffer = bqueue_get_free(&nn_output_queue, 1);
3401c65c:	2101      	movs	r1, #1
3401c65e:	4640      	mov	r0, r8
3401c660:	f7ff fd52 	bl	3401c108 <bqueue_get_free>
    assert(output_buffer);
3401c664:	4604      	mov	r4, r0
3401c666:	b920      	cbnz	r0, 3401c672 <nn_thread_fct+0xda>
3401c668:	f240 51b4 	movw	r1, #1460	@ 0x5b4
3401c66c:	4b44      	ldr	r3, [pc, #272]	@ (3401c780 <nn_thread_fct+0x1e8>)
3401c66e:	4a3e      	ldr	r2, [pc, #248]	@ (3401c768 <nn_thread_fct+0x1d0>)
3401c670:	e7d2      	b.n	3401c618 <nn_thread_fct+0x80>
      out[i] = out[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401c672:	f500 537d 	add.w	r3, r0, #16192	@ 0x3f40
3401c676:	3320      	adds	r3, #32
3401c678:	9304      	str	r3, [sp, #16]
3401c67a:	f500 2386 	add.w	r3, r0, #274432	@ 0x43000
3401c67e:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
    out[0] = output_buffer;
3401c682:	9003      	str	r0, [sp, #12]
      out[i] = out[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401c684:	9305      	str	r3, [sp, #20]
    ts = HAL_GetTick();
3401c686:	f000 fe4f 	bl	3401d328 <HAL_GetTick>
   int ret = LL_ATON_Set_User_Input_Buffer_Default(0, buffer_in, info->nn_in_len);
3401c68a:	4631      	mov	r1, r6
    ts = HAL_GetTick();
3401c68c:	4682      	mov	sl, r0
   int ret = LL_ATON_Set_User_Input_Buffer_Default(0, buffer_in, info->nn_in_len);
3401c68e:	9a00      	ldr	r2, [sp, #0]
3401c690:	2000      	movs	r0, #0
3401c692:	f7f0 fee9 	bl	3400d468 <LL_ATON_Set_User_Input_Buffer_Default>
   assert(ret == LL_ATON_User_IO_NOERROR);
3401c696:	b120      	cbz	r0, 3401c6a2 <nn_thread_fct+0x10a>
3401c698:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
3401c69c:	4b39      	ldr	r3, [pc, #228]	@ (3401c784 <nn_thread_fct+0x1ec>)
3401c69e:	4a3a      	ldr	r2, [pc, #232]	@ (3401c788 <nn_thread_fct+0x1f0>)
3401c6a0:	e7ba      	b.n	3401c618 <nn_thread_fct+0x80>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401c6a2:	f004 0e1f 	and.w	lr, r4, #31
3401c6a6:	f50e 2ea6 	add.w	lr, lr, #339968	@ 0x53000
  __ASM volatile ("dsb 0xF":::"memory");
3401c6aa:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401c6ae:	f10e 0eff 	add.w	lr, lr, #255	@ 0xff
3401c6b2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
3401c6b6:	f10e 0e01 	add.w	lr, lr, #1
3401c6ba:	f04e e001 	dls	lr, lr
3401c6be:	f8c9 425c 	str.w	r4, [r9, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401c6c2:	3420      	adds	r4, #32
      } while ( op_size > 0 );
3401c6c4:	f00f c805 	le	lr, 3401c6be <nn_thread_fct+0x126>
3401c6c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401c6cc:	f3bf 8f6f 	isb	sy
   for (int i = 0; i < NN_OUT_NB; i++) {
3401c6d0:	f04f 0b00 	mov.w	fp, #0
3401c6d4:	4b2d      	ldr	r3, [pc, #180]	@ (3401c78c <nn_thread_fct+0x1f4>)
3401c6d6:	ac03      	add	r4, sp, #12
     ret = LL_ATON_Set_User_Output_Buffer_Default(i, buffer_out[i], nn_out_len_user[i]);
3401c6d8:	f853 2b04 	ldr.w	r2, [r3], #4
3401c6dc:	4658      	mov	r0, fp
3401c6de:	f854 1b04 	ldr.w	r1, [r4], #4
3401c6e2:	9301      	str	r3, [sp, #4]
3401c6e4:	f7f0 fedc 	bl	3400d4a0 <LL_ATON_Set_User_Output_Buffer_Default>
     assert(ret == LL_ATON_User_IO_NOERROR);
3401c6e8:	9b01      	ldr	r3, [sp, #4]
3401c6ea:	4606      	mov	r6, r0
3401c6ec:	b120      	cbz	r0, 3401c6f8 <nn_thread_fct+0x160>
3401c6ee:	f240 5185 	movw	r1, #1413	@ 0x585
3401c6f2:	4b24      	ldr	r3, [pc, #144]	@ (3401c784 <nn_thread_fct+0x1ec>)
3401c6f4:	4a24      	ldr	r2, [pc, #144]	@ (3401c788 <nn_thread_fct+0x1f0>)
3401c6f6:	e78f      	b.n	3401c618 <nn_thread_fct+0x80>
   for (int i = 0; i < NN_OUT_NB; i++) {
3401c6f8:	f10b 0b01 	add.w	fp, fp, #1
3401c6fc:	f1bb 0f03 	cmp.w	fp, #3
3401c700:	d1ea      	bne.n	3401c6d8 <nn_thread_fct+0x140>
   LL_ATON_RT_Main(&NN_Instance_Default);
3401c702:	4823      	ldr	r0, [pc, #140]	@ (3401c790 <nn_thread_fct+0x1f8>)
3401c704:	f7e7 fb7a 	bl	34003dfc <LL_ATON_RT_Main>
    inf_ms = HAL_GetTick() - ts;
3401c708:	f000 fe0e 	bl	3401d328 <HAL_GetTick>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401c70c:	4c21      	ldr	r4, [pc, #132]	@ (3401c794 <nn_thread_fct+0x1fc>)
    inf_ms = HAL_GetTick() - ts;
3401c70e:	eba0 0a0a 	sub.w	sl, r0, sl
    bqueue_put_free(&nn_input_queue);
3401c712:	6838      	ldr	r0, [r7, #0]
3401c714:	f7ff fe00 	bl	3401c318 <bqueue_put_free.isra.0>
    bqueue_put_ready(&nn_output_queue);
3401c718:	4640      	mov	r0, r8
3401c71a:	f7ff fdcb 	bl	3401c2b4 <bqueue_put_ready>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401c71e:	f04f 31ff 	mov.w	r1, #4294967295
3401c722:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401c724:	f7ed fc28 	bl	34009f78 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401c728:	2801      	cmp	r0, #1
3401c72a:	d004      	beq.n	3401c736 <nn_thread_fct+0x19e>
3401c72c:	f240 51ce 	movw	r1, #1486	@ 0x5ce
3401c730:	4b19      	ldr	r3, [pc, #100]	@ (3401c798 <nn_thread_fct+0x200>)
3401c732:	4a0d      	ldr	r2, [pc, #52]	@ (3401c768 <nn_thread_fct+0x1d0>)
3401c734:	e770      	b.n	3401c618 <nn_thread_fct+0x80>
    disp.info.nn_period_ms = nn_period_ms;
3401c736:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    ret = xSemaphoreGive(disp.lock);
3401c73a:	4633      	mov	r3, r6
3401c73c:	4632      	mov	r2, r6
3401c73e:	4631      	mov	r1, r6
3401c740:	6d60      	ldr	r0, [r4, #84]	@ 0x54
    disp.info.nn_period_ms = nn_period_ms;
3401c742:	ed84 8ace 	vstr	s16, [r4, #824]	@ 0x338
    disp.info.inf_ms = inf_ms;
3401c746:	f8c4 a33c 	str.w	sl, [r4, #828]	@ 0x33c
    ret = xSemaphoreGive(disp.lock);
3401c74a:	f7ed fa71 	bl	34009c30 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401c74e:	2801      	cmp	r0, #1
3401c750:	d004      	beq.n	3401c75c <nn_thread_fct+0x1c4>
3401c752:	f240 51d2 	movw	r1, #1490	@ 0x5d2
3401c756:	4b10      	ldr	r3, [pc, #64]	@ (3401c798 <nn_thread_fct+0x200>)
3401c758:	4a03      	ldr	r2, [pc, #12]	@ (3401c768 <nn_thread_fct+0x1d0>)
3401c75a:	e75d      	b.n	3401c618 <nn_thread_fct+0x80>
    nn_period[1] = HAL_GetTick();
3401c75c:	462c      	mov	r4, r5
  {
3401c75e:	e76d      	b.n	3401c63c <nn_thread_fct+0xa4>
3401c760:	3418d9c0 	.word	0x3418d9c0
3401c764:	34026e02 	.word	0x34026e02
3401c768:	340a0776 	.word	0x340a0776
3401c76c:	34026d9f 	.word	0x34026d9f
3401c770:	340a0761 	.word	0x340a0761
3401c774:	34026d40 	.word	0x34026d40
3401c778:	34026dcd 	.word	0x34026dcd
3401c77c:	34026e0e 	.word	0x34026e0e
3401c780:	34026d70 	.word	0x34026d70
3401c784:	34026e1d 	.word	0x34026e1d
3401c788:	340a074d 	.word	0x340a074d
3401c78c:	340a0838 	.word	0x340a0838
3401c790:	340a3210 	.word	0x340a3210
3401c794:	3418db60 	.word	0x3418db60
3401c798:	34022c3c 	.word	0x34022c3c
3401c79c:	340e76ec 	.word	0x340e76ec
3401c7a0:	e000ed00 	.word	0xe000ed00
3401c7a4:	00000000 	.word	0x00000000

3401c7a8 <dp_thread_fct>:
{
3401c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401c7ac:	ed2d 8b06 	vpush	{d8-d10}
  uint32_t disp_ms = 0;
3401c7b0:	2400      	movs	r4, #0
3401c7b2:	ed9f 9ba5 	vldr	d9, [pc, #660]	@ 3401ca48 <dp_thread_fct+0x2a0>
  ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
3401c7b6:	4fa6      	ldr	r7, [pc, #664]	@ (3401ca50 <dp_thread_fct+0x2a8>)
{
3401c7b8:	f5ad 7d71 	sub.w	sp, sp, #964	@ 0x3c4
    ret = xSemaphoreTake(disp.update, portMAX_DELAY);
3401c7bc:	4da5      	ldr	r5, [pc, #660]	@ (3401ca54 <dp_thread_fct+0x2ac>)
3401c7be:	f04f 31ff 	mov.w	r1, #4294967295
3401c7c2:	6828      	ldr	r0, [r5, #0]
3401c7c4:	f7ed fbd8 	bl	34009f78 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401c7c8:	2801      	cmp	r0, #1
3401c7ca:	d006      	beq.n	3401c7da <dp_thread_fct+0x32>
3401c7cc:	f240 6186 	movw	r1, #1670	@ 0x686
3401c7d0:	4ba1      	ldr	r3, [pc, #644]	@ (3401ca58 <dp_thread_fct+0x2b0>)
3401c7d2:	4aa2      	ldr	r2, [pc, #648]	@ (3401ca5c <dp_thread_fct+0x2b4>)
    assert(ret == pdTRUE);
3401c7d4:	48a2      	ldr	r0, [pc, #648]	@ (3401ca60 <dp_thread_fct+0x2b8>)
3401c7d6:	f001 f909 	bl	3401d9ec <__assert_func>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401c7da:	f04f 31ff 	mov.w	r1, #4294967295
3401c7de:	6d68      	ldr	r0, [r5, #84]	@ 0x54
3401c7e0:	f7ed fbca 	bl	34009f78 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401c7e4:	2801      	cmp	r0, #1
3401c7e6:	d004      	beq.n	3401c7f2 <dp_thread_fct+0x4a>
3401c7e8:	f240 6189 	movw	r1, #1673	@ 0x689
3401c7ec:	4b9a      	ldr	r3, [pc, #616]	@ (3401ca58 <dp_thread_fct+0x2b0>)
3401c7ee:	4a9b      	ldr	r2, [pc, #620]	@ (3401ca5c <dp_thread_fct+0x2b4>)
3401c7f0:	e7f0      	b.n	3401c7d4 <dp_thread_fct+0x2c>
    info = disp.info;
3401c7f2:	f105 01a8 	add.w	r1, r5, #168	@ 0xa8
3401c7f6:	f44f 7264 	mov.w	r2, #912	@ 0x390
3401c7fa:	a80c      	add	r0, sp, #48	@ 0x30
3401c7fc:	f002 fbc7 	bl	3401ef8e <memcpy>
    ret = xSemaphoreGive(disp.lock);
3401c800:	2300      	movs	r3, #0
3401c802:	6d68      	ldr	r0, [r5, #84]	@ 0x54
3401c804:	461a      	mov	r2, r3
3401c806:	4619      	mov	r1, r3
3401c808:	f7ed fa12 	bl	34009c30 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401c80c:	2801      	cmp	r0, #1
    ret = xSemaphoreGive(disp.lock);
3401c80e:	4605      	mov	r5, r0
    assert(ret == pdTRUE);
3401c810:	d004      	beq.n	3401c81c <dp_thread_fct+0x74>
3401c812:	f240 618c 	movw	r1, #1676	@ 0x68c
3401c816:	4b90      	ldr	r3, [pc, #576]	@ (3401ca58 <dp_thread_fct+0x2b0>)
3401c818:	4a90      	ldr	r2, [pc, #576]	@ (3401ca5c <dp_thread_fct+0x2b4>)
3401c81a:	e7db      	b.n	3401c7d4 <dp_thread_fct+0x2c>
    info.disp_ms = disp_ms;
3401c81c:	94b5      	str	r4, [sp, #724]	@ 0x2d4
    ts = HAL_GetTick();
3401c81e:	f000 fd83 	bl	3401d328 <HAL_GetTick>
3401c822:	9002      	str	r0, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
3401c824:	b672      	cpsid	i
  ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
3401c826:	4e8f      	ldr	r6, [pc, #572]	@ (3401ca64 <dp_thread_fct+0x2bc>)
3401c828:	683b      	ldr	r3, [r7, #0]
3401c82a:	488f      	ldr	r0, [pc, #572]	@ (3401ca68 <dp_thread_fct+0x2c0>)
3401c82c:	4629      	mov	r1, r5
3401c82e:	fb00 6003 	mla	r0, r0, r3, r6
3401c832:	f7ef fd53 	bl	3400c2dc <SCRL_SetAddress_NoReload>
  assert(ret == HAL_OK);
3401c836:	4680      	mov	r8, r0
3401c838:	b120      	cbz	r0, 3401c844 <dp_thread_fct+0x9c>
3401c83a:	f240 616d 	movw	r1, #1645	@ 0x66d
3401c83e:	4b8b      	ldr	r3, [pc, #556]	@ (3401ca6c <dp_thread_fct+0x2c4>)
3401c840:	4a8b      	ldr	r2, [pc, #556]	@ (3401ca70 <dp_thread_fct+0x2c8>)
3401c842:	e7c7      	b.n	3401c7d4 <dp_thread_fct+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
3401c844:	b662      	cpsie	i
  if (info->tracking_enabled)
3401c846:	9d49      	ldr	r5, [sp, #292]	@ 0x124
3401c848:	ed9f aa8a 	vldr	s20, [pc, #552]	@ 3401ca74 <dp_thread_fct+0x2cc>
3401c84c:	4c8a      	ldr	r4, [pc, #552]	@ (3401ca78 <dp_thread_fct+0x2d0>)
3401c84e:	2d00      	cmp	r5, #0
3401c850:	f000 812a 	beq.w	3401caa8 <dp_thread_fct+0x300>
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401c854:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
3401c858:	f44f 7248 	mov.w	r2, #800	@ 0x320
3401c85c:	4601      	mov	r1, r0
3401c85e:	9000      	str	r0, [sp, #0]
3401c860:	f7ff fbc8 	bl	3401bff4 <UTIL_LCD_FillRect>
  cpuload_update(&cpu_load);
3401c864:	f7ff fcf8 	bl	3401c258 <cpuload_update.constprop.0>
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401c868:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
3401c86c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
3401c870:	1a80      	subs	r0, r0, r2
3401c872:	eb61 0103 	sbc.w	r1, r1, r3
3401c876:	f7e5 f8e3 	bl	34001a40 <__aeabi_ul2d>
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401c87a:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401c87e:	ec41 0b18 	vmov	d8, r0, r1
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401c882:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
3401c886:	1ac0      	subs	r0, r0, r3
3401c888:	eb61 0102 	sbc.w	r1, r1, r2
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401c88c:	f7e5 f8d8 	bl	34001a40 <__aeabi_ul2d>
3401c890:	ee28 8b09 	vmul.f64	d8, d8, d9
3401c894:	ec41 0b16 	vmov	d6, r0, r1
3401c898:	ee88 7b06 	vdiv.f64	d7, d8, d6
3401c89c:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  nn_fps = 1000.0 / info->nn_period_ms;
3401c8a0:	eddd 7ab0 	vldr	s15, [sp, #704]	@ 0x2c0
3401c8a4:	eeca 8a27 	vdiv.f32	s17, s20, s15
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
3401c8a8:	f7ff f9bc 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c8ac:	2202      	movs	r2, #2
3401c8ae:	4641      	mov	r1, r8
3401c8b0:	4b72      	ldr	r3, [pc, #456]	@ (3401ca7c <dp_thread_fct+0x2d4>)
3401c8b2:	4640      	mov	r0, r8
3401c8b4:	f001 f86a 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
3401c8b8:	f7ff f9b4 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c8bc:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
3401c8c0:	88c1      	ldrh	r1, [r0, #6]
3401c8c2:	2202      	movs	r2, #2
3401c8c4:	ed8d 7b00 	vstr	d7, [sp]
3401c8c8:	4b6d      	ldr	r3, [pc, #436]	@ (3401ca80 <dp_thread_fct+0x2d8>)
3401c8ca:	4640      	mov	r0, r8
3401c8cc:	f001 f85e 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inference");
3401c8d0:	f7ff f9a8 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c8d4:	88c1      	ldrh	r1, [r0, #6]
3401c8d6:	2202      	movs	r2, #2
3401c8d8:	4b6a      	ldr	r3, [pc, #424]	@ (3401ca84 <dp_thread_fct+0x2dc>)
3401c8da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3401c8de:	4640      	mov	r0, r8
3401c8e0:	f001 f854 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   %ums", info->inf_ms);
3401c8e4:	f7ff f99e 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c8e8:	2202      	movs	r2, #2
3401c8ea:	88c1      	ldrh	r1, [r0, #6]
3401c8ec:	9bb1      	ldr	r3, [sp, #708]	@ 0x2c4
3401c8ee:	4091      	lsls	r1, r2
3401c8f0:	4640      	mov	r0, r8
3401c8f2:	9300      	str	r3, [sp, #0]
3401c8f4:	4b64      	ldr	r3, [pc, #400]	@ (3401ca88 <dp_thread_fct+0x2e0>)
3401c8f6:	f001 f849 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   FPS");
3401c8fa:	f7ff f993 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c8fe:	88c1      	ldrh	r1, [r0, #6]
3401c900:	2006      	movs	r0, #6
3401c902:	2202      	movs	r2, #2
3401c904:	4341      	muls	r1, r0
3401c906:	4b61      	ldr	r3, [pc, #388]	@ (3401ca8c <dp_thread_fct+0x2e4>)
3401c908:	4640      	mov	r0, r8
3401c90a:	f001 f83f 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.2f", nn_fps);
3401c90e:	f7ff f989 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c912:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
3401c916:	88c1      	ldrh	r1, [r0, #6]
3401c918:	2202      	movs	r2, #2
3401c91a:	ed8d 7b00 	vstr	d7, [sp]
3401c91e:	4b5c      	ldr	r3, [pc, #368]	@ (3401ca90 <dp_thread_fct+0x2e8>)
3401c920:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
3401c924:	4640      	mov	r0, r8
3401c926:	f001 f831 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " Objects %u", info->tboxes_valid_nb);
3401c92a:	f7ff f97b 	bl	3401bc24 <UTIL_LCD_GetFont>
3401c92e:	f8dd a128 	ldr.w	sl, [sp, #296]	@ 0x128
3401c932:	88c1      	ldrh	r1, [r0, #6]
3401c934:	2202      	movs	r2, #2
3401c936:	4640      	mov	r0, r8
3401c938:	4b56      	ldr	r3, [pc, #344]	@ (3401ca94 <dp_thread_fct+0x2ec>)
3401c93a:	f8cd a000 	str.w	sl, [sp]
3401c93e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
3401c942:	f001 f823 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[tbox->id % NUMBER_COLORS]);
3401c946:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 3401caa4 <dp_thread_fct+0x2fc>
3401c94a:	ac0c      	add	r4, sp, #48	@ 0x30
  for (i = 0; i < info->tboxes_valid_nb; i++)
3401c94c:	45c2      	cmp	sl, r8
3401c94e:	f104 0428 	add.w	r4, r4, #40	@ 0x28
3401c952:	dc1f      	bgt.n	3401c994 <dp_thread_fct+0x1ec>
    SCB_CleanDCache_by_Addr(lcd_fg_buffer[lcd_fg_buffer_rd_idx], LCD_FG_WIDTH * LCD_FG_HEIGHT* 2);
3401c954:	683b      	ldr	r3, [r7, #0]
3401c956:	4a44      	ldr	r2, [pc, #272]	@ (3401ca68 <dp_thread_fct+0x2c0>)
3401c958:	fb02 6603 	mla	r6, r2, r3, r6
  __ASM volatile ("dsb 0xF":::"memory");
3401c95c:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401c960:	f645 5ec0 	movw	lr, #24000	@ 0x5dc0
3401c964:	f04e e001 	dls	lr, lr
3401c968:	4b4b      	ldr	r3, [pc, #300]	@ (3401ca98 <dp_thread_fct+0x2f0>)
3401c96a:	f8c3 6268 	str.w	r6, [r3, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401c96e:	3620      	adds	r6, #32
      } while ( op_size > 0 );
3401c970:	f00f c805 	le	lr, 3401c96a <dp_thread_fct+0x1c2>
3401c974:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401c978:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
3401c97c:	b672      	cpsid	i
  ret = SCRL_ReloadLayer(SCRL_LAYER_1);
3401c97e:	2001      	movs	r0, #1
3401c980:	f7ef fcb6 	bl	3400c2f0 <SCRL_ReloadLayer>
  assert(ret == HAL_OK);
3401c984:	2800      	cmp	r0, #0
3401c986:	f000 8160 	beq.w	3401cc4a <dp_thread_fct+0x4a2>
3401c98a:	f240 6177 	movw	r1, #1655	@ 0x677
3401c98e:	4b37      	ldr	r3, [pc, #220]	@ (3401ca6c <dp_thread_fct+0x2c4>)
3401c990:	4a42      	ldr	r2, [pc, #264]	@ (3401ca9c <dp_thread_fct+0x2f4>)
3401c992:	e71f      	b.n	3401c7d4 <dp_thread_fct+0x2c>
  convert_point(tbox->cx, tbox->cy, &xc, &yc);
3401c994:	ed94 6b38 	vldr	d6, [r4, #224]	@ 0xe0
3401c998:	ed94 7b36 	vldr	d7, [r4, #216]	@ 0xd8
3401c99c:	eef7 0bc6 	vcvt.f32.f64	s1, d6
3401c9a0:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
3401c9a4:	a905      	add	r1, sp, #20
3401c9a6:	a804      	add	r0, sp, #16
3401c9a8:	f7ff fb98 	bl	3401c0dc <convert_length>
  convert_length(tbox->w, tbox->h, &w, &h);
3401c9ac:	ed94 6b3c 	vldr	d6, [r4, #240]	@ 0xf0
3401c9b0:	ed94 7b3a 	vldr	d7, [r4, #232]	@ 0xe8
3401c9b4:	eef7 0bc6 	vcvt.f32.f64	s1, d6
3401c9b8:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
3401c9bc:	a90b      	add	r1, sp, #44	@ 0x2c
3401c9be:	a80a      	add	r0, sp, #40	@ 0x28
3401c9c0:	f7ff fb8c 	bl	3401c0dc <convert_length>
  x0 = xc - (w + 1) / 2;
3401c9c4:	6802      	ldr	r2, [r0, #0]
3401c9c6:	9804      	ldr	r0, [sp, #16]
3401c9c8:	3201      	adds	r2, #1
3401c9ca:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
3401c9ce:	1052      	asrs	r2, r2, #1
3401c9d0:	4252      	negs	r2, r2
3401c9d2:	1813      	adds	r3, r2, r0
3401c9d4:	9306      	str	r3, [sp, #24]
  y0 = yc - (h + 1) / 2;
3401c9d6:	680b      	ldr	r3, [r1, #0]
3401c9d8:	9905      	ldr	r1, [sp, #20]
3401c9da:	3301      	adds	r3, #1
3401c9dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
3401c9e0:	105b      	asrs	r3, r3, #1
3401c9e2:	425b      	negs	r3, r3
3401c9e4:	185d      	adds	r5, r3, r1
  x1 = xc + (w + 1) / 2;
3401c9e6:	1a80      	subs	r0, r0, r2
  y1 = yc + (h + 1) / 2;
3401c9e8:	1ac9      	subs	r1, r1, r3
  x1 = xc + (w + 1) / 2;
3401c9ea:	9008      	str	r0, [sp, #32]
  y1 = yc + (h + 1) / 2;
3401c9ec:	9109      	str	r1, [sp, #36]	@ 0x24
  clamp_point(&x0, &y0);
3401c9ee:	a806      	add	r0, sp, #24
3401c9f0:	a907      	add	r1, sp, #28
  y0 = yc - (h + 1) / 2;
3401c9f2:	9507      	str	r5, [sp, #28]
  clamp_point(&x0, &y0);
3401c9f4:	f7ff fb4c 	bl	3401c090 <clamp_point>
  clamp_point(&x1, &y1);
3401c9f8:	a909      	add	r1, sp, #36	@ 0x24
3401c9fa:	a808      	add	r0, sp, #32
3401c9fc:	f7ff fb48 	bl	3401c090 <clamp_point>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[tbox->id % NUMBER_COLORS]);
3401ca00:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
3401ca04:	f04f 0c0a 	mov.w	ip, #10
3401ca08:	f8d4 90f8 	ldr.w	r9, [r4, #248]	@ 0xf8
3401ca0c:	680b      	ldr	r3, [r1, #0]
3401ca0e:	fbb9 f1fc 	udiv	r1, r9, ip
3401ca12:	fb0c 9111 	mls	r1, ip, r1, r9
3401ca16:	9a08      	ldr	r2, [sp, #32]
3401ca18:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
3401ca1c:	1a12      	subs	r2, r2, r0
3401ca1e:	9100      	str	r1, [sp, #0]
3401ca20:	1b5b      	subs	r3, r3, r5
3401ca22:	4629      	mov	r1, r5
3401ca24:	9003      	str	r0, [sp, #12]
3401ca26:	f7ff fac3 	bl	3401bfb0 <UTIL_LCD_DrawRect>
  UTIL_LCDEx_PrintfAt(x0 + 1, y0 + 1, LEFT_MODE, "%3d", tbox->id);
3401ca2a:	9803      	ldr	r0, [sp, #12]
3401ca2c:	2203      	movs	r2, #3
3401ca2e:	4b1c      	ldr	r3, [pc, #112]	@ (3401caa0 <dp_thread_fct+0x2f8>)
3401ca30:	f8cd 9000 	str.w	r9, [sp]
3401ca34:	1c69      	adds	r1, r5, #1
3401ca36:	3001      	adds	r0, #1
3401ca38:	f000 ffa8 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  for (i = 0; i < info->tboxes_valid_nb; i++)
3401ca3c:	f108 0801 	add.w	r8, r8, #1
3401ca40:	e784      	b.n	3401c94c <dp_thread_fct+0x1a4>
3401ca42:	bf00      	nop
3401ca44:	f3af 8000 	nop.w
3401ca48:	00000000 	.word	0x00000000
3401ca4c:	40590000 	.word	0x40590000
3401ca50:	3418df98 	.word	0x3418df98
3401ca54:	3418db60 	.word	0x3418db60
3401ca58:	34022c3c 	.word	0x34022c3c
3401ca5c:	340a0812 	.word	0x340a0812
3401ca60:	34026d40 	.word	0x34026d40
3401ca64:	9120d000 	.word	0x9120d000
3401ca68:	000bb800 	.word	0x000bb800
3401ca6c:	34026e3c 	.word	0x34026e3c
3401ca70:	340a07fb 	.word	0x340a07fb
3401ca74:	447a0000 	.word	0x447a0000
3401ca78:	3418da80 	.word	0x3418da80
3401ca7c:	34026e4a 	.word	0x34026e4a
3401ca80:	34026e53 	.word	0x34026e53
3401ca84:	34026e5d 	.word	0x34026e5d
3401ca88:	34026e67 	.word	0x34026e67
3401ca8c:	34026e6f 	.word	0x34026e6f
3401ca90:	34026e76 	.word	0x34026e76
3401ca94:	34026e7d 	.word	0x34026e7d
3401ca98:	e000ed00 	.word	0xe000ed00
3401ca9c:	340a07e4 	.word	0x340a07e4
3401caa0:	34026e89 	.word	0x34026e89
3401caa4:	340a0874 	.word	0x340a0874
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401caa8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
3401caac:	f44f 7248 	mov.w	r2, #800	@ 0x320
3401cab0:	4629      	mov	r1, r5
3401cab2:	9500      	str	r5, [sp, #0]
  uint32_t nb_rois = info->nb_detect;
3401cab4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401cab8:	f7ff fa9c 	bl	3401bff4 <UTIL_LCD_FillRect>
  cpuload_update(&cpu_load);
3401cabc:	f7ff fbcc 	bl	3401c258 <cpuload_update.constprop.0>
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401cac0:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
3401cac4:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
3401cac8:	1a80      	subs	r0, r0, r2
3401caca:	eb61 0103 	sbc.w	r1, r1, r3
3401cace:	f7e4 ffb7 	bl	34001a40 <__aeabi_ul2d>
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401cad2:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401cad6:	ec41 0b18 	vmov	d8, r0, r1
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401cada:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
3401cade:	1ac0      	subs	r0, r0, r3
3401cae0:	eb61 0102 	sbc.w	r1, r1, r2
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401cae4:	f7e4 ffac 	bl	34001a40 <__aeabi_ul2d>
3401cae8:	ee28 8b09 	vmul.f64	d8, d8, d9
3401caec:	ec41 0b16 	vmov	d6, r0, r1
3401caf0:	ee88 7b06 	vdiv.f64	d7, d8, d6
3401caf4:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  nn_fps = 1000.0 / info->nn_period_ms;
3401caf8:	eddd 7ab0 	vldr	s15, [sp, #704]	@ 0x2c0
3401cafc:	eeca 8a27 	vdiv.f32	s17, s20, s15
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
3401cb00:	f7ff f890 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb04:	2202      	movs	r2, #2
3401cb06:	4629      	mov	r1, r5
3401cb08:	4b55      	ldr	r3, [pc, #340]	@ (3401cc60 <dp_thread_fct+0x4b8>)
3401cb0a:	4628      	mov	r0, r5
3401cb0c:	f000 ff3e 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
3401cb10:	f7ff f888 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb14:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
3401cb18:	88c1      	ldrh	r1, [r0, #6]
3401cb1a:	2202      	movs	r2, #2
3401cb1c:	ed8d 7b00 	vstr	d7, [sp]
3401cb20:	4b50      	ldr	r3, [pc, #320]	@ (3401cc64 <dp_thread_fct+0x4bc>)
3401cb22:	4628      	mov	r0, r5
3401cb24:	f000 ff32 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inference");
3401cb28:	f7ff f87c 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb2c:	88c1      	ldrh	r1, [r0, #6]
3401cb2e:	2202      	movs	r2, #2
3401cb30:	4b4d      	ldr	r3, [pc, #308]	@ (3401cc68 <dp_thread_fct+0x4c0>)
3401cb32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3401cb36:	4628      	mov	r0, r5
3401cb38:	f000 ff28 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   %ums", info->inf_ms);
3401cb3c:	f7ff f872 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb40:	2202      	movs	r2, #2
3401cb42:	88c1      	ldrh	r1, [r0, #6]
3401cb44:	9bb1      	ldr	r3, [sp, #708]	@ 0x2c4
3401cb46:	4091      	lsls	r1, r2
3401cb48:	4628      	mov	r0, r5
3401cb4a:	9300      	str	r3, [sp, #0]
3401cb4c:	4b47      	ldr	r3, [pc, #284]	@ (3401cc6c <dp_thread_fct+0x4c4>)
3401cb4e:	f000 ff1d 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   FPS");
3401cb52:	f7ff f867 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb56:	88c1      	ldrh	r1, [r0, #6]
3401cb58:	2006      	movs	r0, #6
3401cb5a:	2202      	movs	r2, #2
3401cb5c:	4341      	muls	r1, r0
3401cb5e:	4b44      	ldr	r3, [pc, #272]	@ (3401cc70 <dp_thread_fct+0x4c8>)
3401cb60:	4628      	mov	r0, r5
3401cb62:	f000 ff13 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.2f", nn_fps);
3401cb66:	f7ff f85d 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb6a:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
3401cb6e:	88c1      	ldrh	r1, [r0, #6]
3401cb70:	2202      	movs	r2, #2
3401cb72:	ed8d 7b00 	vstr	d7, [sp]
3401cb76:	4b3f      	ldr	r3, [pc, #252]	@ (3401cc74 <dp_thread_fct+0x4cc>)
3401cb78:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
3401cb7c:	4628      	mov	r0, r5
3401cb7e:	f000 ff05 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " Objects %u", nb_rois);
3401cb82:	f7ff f84f 	bl	3401bc24 <UTIL_LCD_GetFont>
3401cb86:	88c1      	ldrh	r1, [r0, #6]
3401cb88:	2202      	movs	r2, #2
3401cb8a:	4628      	mov	r0, r5
3401cb8c:	4b3a      	ldr	r3, [pc, #232]	@ (3401cc78 <dp_thread_fct+0x4d0>)
3401cb8e:	f8cd a000 	str.w	sl, [sp]
3401cb92:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
3401cb96:	f000 fef9 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[detect->class_index % NUMBER_COLORS]);
3401cb9a:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 3401cc80 <dp_thread_fct+0x4d8>
3401cb9e:	ac0c      	add	r4, sp, #48	@ 0x30
  for (i = 0; i < nb_rois; i++)
3401cba0:	45aa      	cmp	sl, r5
3401cba2:	f43f aed7 	beq.w	3401c954 <dp_thread_fct+0x1ac>
  convert_point(detect->x_center, detect->y_center, &xc, &yc);
3401cba6:	edd4 0a02 	vldr	s1, [r4, #8]
3401cbaa:	ed94 0a01 	vldr	s0, [r4, #4]
3401cbae:	a905      	add	r1, sp, #20
3401cbb0:	a804      	add	r0, sp, #16
3401cbb2:	f7ff fa93 	bl	3401c0dc <convert_length>
  convert_length(detect->width, detect->height, &w, &h);
3401cbb6:	edd4 0a04 	vldr	s1, [r4, #16]
3401cbba:	ed94 0a03 	vldr	s0, [r4, #12]
3401cbbe:	a90b      	add	r1, sp, #44	@ 0x2c
3401cbc0:	a80a      	add	r0, sp, #40	@ 0x28
3401cbc2:	f7ff fa8b 	bl	3401c0dc <convert_length>
  x0 = xc - (w + 1) / 2;
3401cbc6:	6802      	ldr	r2, [r0, #0]
3401cbc8:	9804      	ldr	r0, [sp, #16]
3401cbca:	3201      	adds	r2, #1
3401cbcc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
3401cbd0:	1052      	asrs	r2, r2, #1
3401cbd2:	4252      	negs	r2, r2
3401cbd4:	1813      	adds	r3, r2, r0
3401cbd6:	9306      	str	r3, [sp, #24]
  y0 = yc - (h + 1) / 2;
3401cbd8:	680b      	ldr	r3, [r1, #0]
3401cbda:	9905      	ldr	r1, [sp, #20]
3401cbdc:	3301      	adds	r3, #1
3401cbde:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
3401cbe2:	105b      	asrs	r3, r3, #1
3401cbe4:	425b      	negs	r3, r3
3401cbe6:	eb03 0c01 	add.w	ip, r3, r1
  x1 = xc + (w + 1) / 2;
3401cbea:	1a80      	subs	r0, r0, r2
  y1 = yc + (h + 1) / 2;
3401cbec:	1ac9      	subs	r1, r1, r3
  x1 = xc + (w + 1) / 2;
3401cbee:	9008      	str	r0, [sp, #32]
  y1 = yc + (h + 1) / 2;
3401cbf0:	9109      	str	r1, [sp, #36]	@ 0x24
  clamp_point(&x0, &y0);
3401cbf2:	a806      	add	r0, sp, #24
3401cbf4:	a907      	add	r1, sp, #28
  y0 = yc - (h + 1) / 2;
3401cbf6:	f8cd c01c 	str.w	ip, [sp, #28]
  clamp_point(&x0, &y0);
3401cbfa:	f7ff fa49 	bl	3401c090 <clamp_point>
  clamp_point(&x1, &y1);
3401cbfe:	a909      	add	r1, sp, #36	@ 0x24
3401cc00:	a808      	add	r0, sp, #32
3401cc02:	f7ff fa45 	bl	3401c090 <clamp_point>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[detect->class_index % NUMBER_COLORS]);
3401cc06:	e9dd 0806 	ldrd	r0, r8, [sp, #24]
3401cc0a:	f04f 0c0a 	mov.w	ip, #10
3401cc0e:	f854 9f18 	ldr.w	r9, [r4, #24]!
3401cc12:	680b      	ldr	r3, [r1, #0]
3401cc14:	fb99 f1fc 	sdiv	r1, r9, ip
3401cc18:	fb0c 9111 	mls	r1, ip, r1, r9
3401cc1c:	9a08      	ldr	r2, [sp, #32]
3401cc1e:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
3401cc22:	1a12      	subs	r2, r2, r0
3401cc24:	9100      	str	r1, [sp, #0]
3401cc26:	eba3 0308 	sub.w	r3, r3, r8
3401cc2a:	4641      	mov	r1, r8
3401cc2c:	9003      	str	r0, [sp, #12]
3401cc2e:	f7ff f9bf 	bl	3401bfb0 <UTIL_LCD_DrawRect>
  UTIL_LCDEx_PrintfAt(x0 + 1, y0 + 1, LEFT_MODE, classes_table[detect->class_index]);
3401cc32:	9803      	ldr	r0, [sp, #12]
3401cc34:	4b11      	ldr	r3, [pc, #68]	@ (3401cc7c <dp_thread_fct+0x4d4>)
3401cc36:	2203      	movs	r2, #3
3401cc38:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
3401cc3c:	f108 0101 	add.w	r1, r8, #1
3401cc40:	3001      	adds	r0, #1
3401cc42:	f000 fea3 	bl	3401d98c <UTIL_LCDEx_PrintfAt>
  for (i = 0; i < nb_rois; i++)
3401cc46:	3501      	adds	r5, #1
3401cc48:	e7aa      	b.n	3401cba0 <dp_thread_fct+0x3f8>
  __ASM volatile ("cpsie i" : : : "memory");
3401cc4a:	b662      	cpsie	i
  lcd_fg_buffer_rd_idx = 1 - lcd_fg_buffer_rd_idx;
3401cc4c:	683b      	ldr	r3, [r7, #0]
3401cc4e:	f1c3 0301 	rsb	r3, r3, #1
3401cc52:	603b      	str	r3, [r7, #0]
    disp_ms = HAL_GetTick() - ts;
3401cc54:	f000 fb68 	bl	3401d328 <HAL_GetTick>
3401cc58:	9b02      	ldr	r3, [sp, #8]
3401cc5a:	1ac4      	subs	r4, r0, r3
    ret = xSemaphoreTake(disp.update, portMAX_DELAY);
3401cc5c:	e5ae      	b.n	3401c7bc <dp_thread_fct+0x14>
3401cc5e:	bf00      	nop
3401cc60:	34026e4a 	.word	0x34026e4a
3401cc64:	34026e53 	.word	0x34026e53
3401cc68:	34026e5d 	.word	0x34026e5d
3401cc6c:	34026e67 	.word	0x34026e67
3401cc70:	34026e6f 	.word	0x34026e6f
3401cc74:	34026e76 	.word	0x34026e76
3401cc78:	34026e7d 	.word	0x34026e7d
3401cc7c:	340a3244 	.word	0x340a3244
3401cc80:	340a0874 	.word	0x340a0874

3401cc84 <app_run>:
  UTIL_LCD_SetFont(&LCD_FONT);
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
}

void app_run()
{
3401cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t hdl;
  int ret;

  printf("Init application\n");
  /* Enable DWT so DWT_CYCCNT works when debugger not attached */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401cc86:	4d92      	ldr	r5, [pc, #584]	@ (3401ced0 <app_run+0x24c>)
{
3401cc88:	b093      	sub	sp, #76	@ 0x4c
  printf("Init application\n");
3401cc8a:	4892      	ldr	r0, [pc, #584]	@ (3401ced4 <app_run+0x250>)
3401cc8c:	f001 fdc2 	bl	3401e814 <puts>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401cc90:	f8d5 30fc 	ldr.w	r3, [r5, #252]	@ 0xfc

  /* screen init */
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401cc94:	4c90      	ldr	r4, [pc, #576]	@ (3401ced8 <app_run+0x254>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401cc96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401cc9a:	2100      	movs	r1, #0
3401cc9c:	4620      	mov	r0, r4
3401cc9e:	4a8f      	ldr	r2, [pc, #572]	@ (3401cedc <app_run+0x258>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401cca0:	f8c5 30fc 	str.w	r3, [r5, #252]	@ 0xfc
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401cca4:	f001 feec 	bl	3401ea80 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
3401cca8:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401ccac:	f8df e2d0 	ldr.w	lr, [pc, #720]	@ 3401cf80 <app_run+0x2fc>
}
3401ccb0:	2300      	movs	r3, #0
3401ccb2:	f04e e001 	dls	lr, lr
3401ccb6:	18e2      	adds	r2, r4, r3
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401ccb8:	f8c5 2270 	str.w	r2, [r5, #624]	@ 0x270
      } while ( op_size > 0 );
3401ccbc:	3320      	adds	r3, #32
3401ccbe:	f00f c007 	le	lr, 3401ccb6 <app_run+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
3401ccc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401ccc6:	f3bf 8f6f 	isb	sy
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_bg_buffer, sizeof(lcd_bg_buffer)));
  memset(lcd_fg_buffer, 0, sizeof(lcd_fg_buffer));
3401ccca:	4d85      	ldr	r5, [pc, #532]	@ (3401cee0 <app_run+0x25c>)
3401cccc:	2100      	movs	r1, #0
3401ccce:	4628      	mov	r0, r5
3401ccd0:	4a84      	ldr	r2, [pc, #528]	@ (3401cee4 <app_run+0x260>)
3401ccd2:	f001 fed5 	bl	3401ea80 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
3401ccd6:	f3bf 8f4f 	dsb	sy
3401ccda:	f64b 3e80 	movw	lr, #48000	@ 0xbb80
}
3401ccde:	2300      	movs	r3, #0
3401cce0:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401cce4:	4a7a      	ldr	r2, [pc, #488]	@ (3401ced0 <app_run+0x24c>)
3401cce6:	18e9      	adds	r1, r5, r3
3401cce8:	f8c2 1270 	str.w	r1, [r2, #624]	@ 0x270
      } while ( op_size > 0 );
3401ccec:	3320      	adds	r3, #32
3401ccee:	f00f c007 	le	lr, 3401cce6 <app_run+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
3401ccf2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401ccf6:	f3bf 8f6f 	isb	sy
  SCRL_LayerConfig layers_config[2] = {
3401ccfa:	2200      	movs	r2, #0
3401ccfc:	4b7a      	ldr	r3, [pc, #488]	@ (3401cee8 <app_run+0x264>)
3401ccfe:	2501      	movs	r5, #1
3401cd00:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
3401cd04:	930f      	str	r3, [sp, #60]	@ 0x3c
  SCRL_ScreenConfig screen_config = {
3401cd06:	9306      	str	r3, [sp, #24]
3401cd08:	2302      	movs	r3, #2
3401cd0a:	f88d 301c 	strb.w	r3, [sp, #28]
3401cd0e:	4b77      	ldr	r3, [pc, #476]	@ (3401ceec <app_run+0x268>)
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401cd10:	4977      	ldr	r1, [pc, #476]	@ (3401cef0 <app_run+0x26c>)
  SCRL_ScreenConfig screen_config = {
3401cd12:	9308      	str	r3, [sp, #32]
3401cd14:	2314      	movs	r3, #20
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401cd16:	6809      	ldr	r1, [r1, #0]
3401cd18:	4876      	ldr	r0, [pc, #472]	@ (3401cef4 <app_run+0x270>)
  SCRL_LayerConfig layers_config[2] = {
3401cd1a:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401cd1e:	fb00 4401 	mla	r4, r0, r1, r4
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401cd22:	af06      	add	r7, sp, #24
  SCRL_LayerConfig layers_config[2] = {
3401cd24:	e9cd 420d 	strd	r4, r2, [sp, #52]	@ 0x34
3401cd28:	4a73      	ldr	r2, [pc, #460]	@ (3401cef8 <app_run+0x274>)
  SCRL_ScreenConfig screen_config = {
3401cd2a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401cd2e:	4639      	mov	r1, r7
3401cd30:	ab0e      	add	r3, sp, #56	@ 0x38
3401cd32:	ac0a      	add	r4, sp, #40	@ 0x28
3401cd34:	a804      	add	r0, sp, #16
  SCRL_LayerConfig layers_config[2] = {
3401cd36:	f88d 5040 	strb.w	r5, [sp, #64]	@ 0x40
3401cd3a:	9211      	str	r2, [sp, #68]	@ 0x44
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401cd3c:	9404      	str	r4, [sp, #16]
3401cd3e:	9305      	str	r3, [sp, #20]
3401cd40:	f7ef fa70 	bl	3400c224 <SCRL_Init>
  assert(ret == 0);
3401cd44:	4606      	mov	r6, r0
3401cd46:	b130      	cbz	r0, 3401cd56 <app_run+0xd2>
3401cd48:	f240 61c1 	movw	r1, #1729	@ 0x6c1
3401cd4c:	4b6b      	ldr	r3, [pc, #428]	@ (3401cefc <app_run+0x278>)
3401cd4e:	4a6c      	ldr	r2, [pc, #432]	@ (3401cf00 <app_run+0x27c>)
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_fg_buffer, sizeof(lcd_fg_buffer)));
  Display_init();

  /* create buffer queues */
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
  assert(ret == 0);
3401cd50:	486c      	ldr	r0, [pc, #432]	@ (3401cf04 <app_run+0x280>)
3401cd52:	f000 fe4b 	bl	3401d9ec <__assert_func>
  UTIL_LCD_SetLayer(SCRL_LAYER_1);
3401cd56:	4628      	mov	r0, r5
3401cd58:	f7fe ff2e 	bl	3401bbb8 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
3401cd5c:	4630      	mov	r0, r6
3401cd5e:	f7ff f985 	bl	3401c06c <UTIL_LCD_Clear>
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
3401cd62:	4e69      	ldr	r6, [pc, #420]	@ (3401cf08 <app_run+0x284>)
  UTIL_LCD_SetFont(&LCD_FONT);
3401cd64:	4869      	ldr	r0, [pc, #420]	@ (3401cf0c <app_run+0x288>)
3401cd66:	f7fe ff55 	bl	3401bc14 <UTIL_LCD_SetFont>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
3401cd6a:	f04f 30ff 	mov.w	r0, #4294967295
3401cd6e:	f7fe ff49 	bl	3401bc04 <UTIL_LCD_SetTextColor>
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
3401cd72:	e896 0003 	ldmia.w	r6, {r0, r1}
3401cd76:	e887 0003 	stmia.w	r7, {r0, r1}
3401cd7a:	4639      	mov	r1, r7
3401cd7c:	4864      	ldr	r0, [pc, #400]	@ (3401cf10 <app_run+0x28c>)
3401cd7e:	f7ff fa37 	bl	3401c1f0 <bqueue_init.constprop.0>
  assert(ret == 0);
3401cd82:	b120      	cbz	r0, 3401cd8e <app_run+0x10a>
3401cd84:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
3401cd88:	4b5c      	ldr	r3, [pc, #368]	@ (3401cefc <app_run+0x278>)
3401cd8a:	4a62      	ldr	r2, [pc, #392]	@ (3401cf14 <app_run+0x290>)
3401cd8c:	e7e0      	b.n	3401cd50 <app_run+0xcc>
  ret = bqueue_init(&nn_output_queue, 2, (uint8_t *[2]){nn_output_buffers[0], nn_output_buffers[1]});
3401cd8e:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
3401cd92:	e884 0003 	stmia.w	r4, {r0, r1}
3401cd96:	4621      	mov	r1, r4
3401cd98:	485f      	ldr	r0, [pc, #380]	@ (3401cf18 <app_run+0x294>)
3401cd9a:	f7ff fa29 	bl	3401c1f0 <bqueue_init.constprop.0>
  assert(ret == 0);
3401cd9e:	b120      	cbz	r0, 3401cdaa <app_run+0x126>
3401cda0:	f240 61e2 	movw	r1, #1762	@ 0x6e2
3401cda4:	4b55      	ldr	r3, [pc, #340]	@ (3401cefc <app_run+0x278>)
3401cda6:	4a5b      	ldr	r2, [pc, #364]	@ (3401cf14 <app_run+0x290>)
3401cda8:	e7d2      	b.n	3401cd50 <app_run+0xcc>

#ifdef TRACKER_MODULE
  ret = TRK_Init();
3401cdaa:	f7ff f9e1 	bl	3401c170 <TRK_Init>
3401cdae:	4601      	mov	r1, r0
  assert(ret == 0);
3401cdb0:	b120      	cbz	r0, 3401cdbc <app_run+0x138>
3401cdb2:	f240 61e6 	movw	r1, #1766	@ 0x6e6
3401cdb6:	4b51      	ldr	r3, [pc, #324]	@ (3401cefc <app_run+0x278>)
3401cdb8:	4a56      	ldr	r2, [pc, #344]	@ (3401cf14 <app_run+0x290>)
3401cdba:	e7c9      	b.n	3401cd50 <app_run+0xcc>
  ret = BSP_PB_Init(BUTTON_TOGGLE_TRACKING, BUTTON_MODE_GPIO);
3401cdbc:	f7f0 ffaa 	bl	3400dd14 <BSP_PB_Init>
  assert(ret == BSP_ERROR_NONE);
3401cdc0:	4604      	mov	r4, r0
3401cdc2:	b120      	cbz	r0, 3401cdce <app_run+0x14a>
3401cdc4:	f44f 61dd 	mov.w	r1, #1768	@ 0x6e8
3401cdc8:	4b54      	ldr	r3, [pc, #336]	@ (3401cf1c <app_run+0x298>)
3401cdca:	4a52      	ldr	r2, [pc, #328]	@ (3401cf14 <app_run+0x290>)
3401cdcc:	e7c0      	b.n	3401cd50 <app_run+0xcc>
  memset(cpu_load, 0, sizeof(cpuload_info_t));
3401cdce:	4601      	mov	r1, r0
3401cdd0:	22e0      	movs	r2, #224	@ 0xe0
3401cdd2:	4853      	ldr	r0, [pc, #332]	@ (3401cf20 <app_run+0x29c>)
3401cdd4:	f001 fe54 	bl	3401ea80 <memset>
#endif

  cpuload_init(&cpu_load);

  /*** Camera Init ************************************************************/  
  CAM_Init();
3401cdd8:	f000 f9d2 	bl	3401d180 <CAM_Init>

  /* sems + mutex init */
  isp_sem = xSemaphoreCreateCountingStatic(1, 0, &isp_sem_buffer);
3401cddc:	4621      	mov	r1, r4
3401cdde:	4628      	mov	r0, r5
3401cde0:	4a50      	ldr	r2, [pc, #320]	@ (3401cf24 <app_run+0x2a0>)
3401cde2:	f7ec ff05 	bl	34009bf0 <xQueueCreateCountingSemaphoreStatic>
3401cde6:	4b50      	ldr	r3, [pc, #320]	@ (3401cf28 <app_run+0x2a4>)
3401cde8:	6018      	str	r0, [r3, #0]
  assert(isp_sem);
3401cdea:	b920      	cbnz	r0, 3401cdf6 <app_run+0x172>
3401cdec:	f240 61f2 	movw	r1, #1778	@ 0x6f2
3401cdf0:	4b4e      	ldr	r3, [pc, #312]	@ (3401cf2c <app_run+0x2a8>)
3401cdf2:	4a48      	ldr	r2, [pc, #288]	@ (3401cf14 <app_run+0x290>)
3401cdf4:	e7ac      	b.n	3401cd50 <app_run+0xcc>
  disp.update = xSemaphoreCreateCountingStatic(1, 0, &disp.update_buffer);
3401cdf6:	4e4e      	ldr	r6, [pc, #312]	@ (3401cf30 <app_run+0x2ac>)
3401cdf8:	4621      	mov	r1, r4
3401cdfa:	4632      	mov	r2, r6
3401cdfc:	4628      	mov	r0, r5
3401cdfe:	f7ec fef7 	bl	34009bf0 <xQueueCreateCountingSemaphoreStatic>
3401ce02:	1f37      	subs	r7, r6, #4
3401ce04:	f846 0c04 	str.w	r0, [r6, #-4]
  assert(disp.update);
3401ce08:	b920      	cbnz	r0, 3401ce14 <app_run+0x190>
3401ce0a:	f240 61f4 	movw	r1, #1780	@ 0x6f4
3401ce0e:	4b49      	ldr	r3, [pc, #292]	@ (3401cf34 <app_run+0x2b0>)
3401ce10:	4a40      	ldr	r2, [pc, #256]	@ (3401cf14 <app_run+0x290>)
3401ce12:	e79d      	b.n	3401cd50 <app_run+0xcc>
  disp.lock = xSemaphoreCreateMutexStatic(&disp.lock_buffer);
3401ce14:	4628      	mov	r0, r5
3401ce16:	f106 0154 	add.w	r1, r6, #84	@ 0x54
3401ce1a:	f7ec ffab 	bl	34009d74 <xQueueCreateMutexStatic>
3401ce1e:	6578      	str	r0, [r7, #84]	@ 0x54
  assert(disp.lock);
3401ce20:	b920      	cbnz	r0, 3401ce2c <app_run+0x1a8>
3401ce22:	f240 61f6 	movw	r1, #1782	@ 0x6f6
3401ce26:	4b44      	ldr	r3, [pc, #272]	@ (3401cf38 <app_run+0x2b4>)
3401ce28:	4a3a      	ldr	r2, [pc, #232]	@ (3401cf14 <app_run+0x290>)
3401ce2a:	e791      	b.n	3401cd50 <app_run+0xcc>

  /* Start LCD Display camera pipe stream */
  CAM_DisplayPipe_Start(lcd_bg_buffer[0], CMW_MODE_CONTINUOUS);
3401ce2c:	4621      	mov	r1, r4
3401ce2e:	482a      	ldr	r0, [pc, #168]	@ (3401ced8 <app_run+0x254>)
3401ce30:	f000 fa12 	bl	3401d258 <CAM_DisplayPipe_Start>

  /* threads init */
  hdl = xTaskCreateStatic(nn_thread_fct, "nn", configMINIMAL_STACK_SIZE * 2, NULL, nn_priority, nn_thread_stack,
3401ce34:	4b41      	ldr	r3, [pc, #260]	@ (3401cf3c <app_run+0x2b8>)
3401ce36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401ce3a:	9302      	str	r3, [sp, #8]
3401ce3c:	4b40      	ldr	r3, [pc, #256]	@ (3401cf40 <app_run+0x2bc>)
3401ce3e:	4941      	ldr	r1, [pc, #260]	@ (3401cf44 <app_run+0x2c0>)
3401ce40:	9301      	str	r3, [sp, #4]
3401ce42:	231d      	movs	r3, #29
3401ce44:	4840      	ldr	r0, [pc, #256]	@ (3401cf48 <app_run+0x2c4>)
3401ce46:	9300      	str	r3, [sp, #0]
3401ce48:	4623      	mov	r3, r4
3401ce4a:	f7ed fa4b 	bl	3400a2e4 <xTaskCreateStatic>
                          &nn_thread);
  assert(hdl != NULL);
3401ce4e:	b920      	cbnz	r0, 3401ce5a <app_run+0x1d6>
3401ce50:	f240 61fe 	movw	r1, #1790	@ 0x6fe
3401ce54:	4b3d      	ldr	r3, [pc, #244]	@ (3401cf4c <app_run+0x2c8>)
3401ce56:	4a2f      	ldr	r2, [pc, #188]	@ (3401cf14 <app_run+0x290>)
3401ce58:	e77a      	b.n	3401cd50 <app_run+0xcc>
  hdl = xTaskCreateStatic(pp_thread_fct, "pp", configMINIMAL_STACK_SIZE * 2, NULL, pp_priority, pp_thread_stack,
3401ce5a:	241a      	movs	r4, #26
3401ce5c:	4b3c      	ldr	r3, [pc, #240]	@ (3401cf50 <app_run+0x2cc>)
3401ce5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401ce62:	9302      	str	r3, [sp, #8]
3401ce64:	4b3b      	ldr	r3, [pc, #236]	@ (3401cf54 <app_run+0x2d0>)
3401ce66:	493c      	ldr	r1, [pc, #240]	@ (3401cf58 <app_run+0x2d4>)
3401ce68:	9301      	str	r3, [sp, #4]
3401ce6a:	483c      	ldr	r0, [pc, #240]	@ (3401cf5c <app_run+0x2d8>)
3401ce6c:	2300      	movs	r3, #0
3401ce6e:	9400      	str	r4, [sp, #0]
3401ce70:	f7ed fa38 	bl	3400a2e4 <xTaskCreateStatic>
                          &pp_thread);
  assert(hdl != NULL);
3401ce74:	b920      	cbnz	r0, 3401ce80 <app_run+0x1fc>
3401ce76:	f240 7101 	movw	r1, #1793	@ 0x701
3401ce7a:	4b34      	ldr	r3, [pc, #208]	@ (3401cf4c <app_run+0x2c8>)
3401ce7c:	4a25      	ldr	r2, [pc, #148]	@ (3401cf14 <app_run+0x290>)
3401ce7e:	e767      	b.n	3401cd50 <app_run+0xcc>
  hdl = xTaskCreateStatic(dp_thread_fct, "dp", configMINIMAL_STACK_SIZE * 2, NULL, dp_priority, dp_thread_stack,
3401ce80:	4b37      	ldr	r3, [pc, #220]	@ (3401cf60 <app_run+0x2dc>)
3401ce82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401ce86:	9302      	str	r3, [sp, #8]
3401ce88:	4b36      	ldr	r3, [pc, #216]	@ (3401cf64 <app_run+0x2e0>)
3401ce8a:	4937      	ldr	r1, [pc, #220]	@ (3401cf68 <app_run+0x2e4>)
3401ce8c:	e9cd 4300 	strd	r4, r3, [sp]
3401ce90:	4836      	ldr	r0, [pc, #216]	@ (3401cf6c <app_run+0x2e8>)
3401ce92:	2300      	movs	r3, #0
3401ce94:	f7ed fa26 	bl	3400a2e4 <xTaskCreateStatic>
                          &dp_thread);
  assert(hdl != NULL);
3401ce98:	b920      	cbnz	r0, 3401cea4 <app_run+0x220>
3401ce9a:	f240 7104 	movw	r1, #1796	@ 0x704
3401ce9e:	4b2b      	ldr	r3, [pc, #172]	@ (3401cf4c <app_run+0x2c8>)
3401cea0:	4a1c      	ldr	r2, [pc, #112]	@ (3401cf14 <app_run+0x290>)
3401cea2:	e755      	b.n	3401cd50 <app_run+0xcc>
  hdl = xTaskCreateStatic(isp_thread_fct, "isp", configMINIMAL_STACK_SIZE * 2, NULL, isp_priority, isp_thread_stack,
3401cea4:	4b32      	ldr	r3, [pc, #200]	@ (3401cf70 <app_run+0x2ec>)
3401cea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401ceaa:	9302      	str	r3, [sp, #8]
3401ceac:	4b31      	ldr	r3, [pc, #196]	@ (3401cf74 <app_run+0x2f0>)
3401ceae:	4932      	ldr	r1, [pc, #200]	@ (3401cf78 <app_run+0x2f4>)
3401ceb0:	9301      	str	r3, [sp, #4]
3401ceb2:	231e      	movs	r3, #30
3401ceb4:	4831      	ldr	r0, [pc, #196]	@ (3401cf7c <app_run+0x2f8>)
3401ceb6:	9300      	str	r3, [sp, #0]
3401ceb8:	2300      	movs	r3, #0
3401ceba:	f7ed fa13 	bl	3400a2e4 <xTaskCreateStatic>
                          &isp_thread);
  assert(hdl != NULL);
3401cebe:	b920      	cbnz	r0, 3401ceca <app_run+0x246>
3401cec0:	f240 7107 	movw	r1, #1799	@ 0x707
3401cec4:	4b21      	ldr	r3, [pc, #132]	@ (3401cf4c <app_run+0x2c8>)
3401cec6:	4a13      	ldr	r2, [pc, #76]	@ (3401cf14 <app_run+0x290>)
3401cec8:	e742      	b.n	3401cd50 <app_run+0xcc>
}
3401ceca:	b013      	add	sp, #76	@ 0x4c
3401cecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401cece:	bf00      	nop
3401ced0:	e000ed00 	.word	0xe000ed00
3401ced4:	34026e8d 	.word	0x34026e8d
3401ced8:	91384000 	.word	0x91384000
3401cedc:	00232800 	.word	0x00232800
3401cee0:	9120d000 	.word	0x9120d000
3401cee4:	00177000 	.word	0x00177000
3401cee8:	01e00320 	.word	0x01e00320
3401ceec:	91151800 	.word	0x91151800
3401cef0:	340a3240 	.word	0x340a3240
3401cef4:	000bb800 	.word	0x000bb800
3401cef8:	912c8800 	.word	0x912c8800
3401cefc:	34023ee8 	.word	0x34023ee8
3401cf00:	340a072f 	.word	0x340a072f
3401cf04:	34026d40 	.word	0x34026d40
3401cf08:	34022be0 	.word	0x34022be0
3401cf0c:	340a3204 	.word	0x340a3204
3401cf10:	3418d9c0 	.word	0x3418d9c0
3401cf14:	340a082f 	.word	0x340a082f
3401cf18:	340e76ec 	.word	0x340e76ec
3401cf1c:	34026e9e 	.word	0x34026e9e
3401cf20:	3418da80 	.word	0x3418da80
3401cf24:	340df518 	.word	0x340df518
3401cf28:	340df568 	.word	0x340df568
3401cf2c:	34026eb4 	.word	0x34026eb4
3401cf30:	3418db64 	.word	0x3418db64
3401cf34:	34026ebc 	.word	0x34026ebc
3401cf38:	34026ec8 	.word	0x34026ec8
3401cf3c:	340e768c 	.word	0x340e768c
3401cf40:	340e568c 	.word	0x340e568c
3401cf44:	34026ed2 	.word	0x34026ed2
3401cf48:	3401c599 	.word	0x3401c599
3401cf4c:	34026ed5 	.word	0x34026ed5
3401cf50:	340e562c 	.word	0x340e562c
3401cf54:	340e362c 	.word	0x340e362c
3401cf58:	34026f75 	.word	0x34026f75
3401cf5c:	3401c345 	.word	0x3401c345
3401cf60:	340e35cc 	.word	0x340e35cc
3401cf64:	340e15cc 	.word	0x340e15cc
3401cf68:	34026ee1 	.word	0x34026ee1
3401cf6c:	3401c7a9 	.word	0x3401c7a9
3401cf70:	340e156c 	.word	0x340e156c
3401cf74:	340df56c 	.word	0x340df56c
3401cf78:	34026ee4 	.word	0x34026ee4
3401cf7c:	3401c139 	.word	0x3401c139
3401cf80:	00011940 	.word	0x00011940

3401cf84 <CMW_CAMERA_PIPE_FrameEventCallback>:

int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  if (pipe == DCMIPP_PIPE1)
3401cf84:	2801      	cmp	r0, #1
{
3401cf86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401cf8a:	4606      	mov	r6, r0
  if (pipe == DCMIPP_PIPE1)
3401cf8c:	d147      	bne.n	3401d01e <CMW_CAMERA_PIPE_FrameEventCallback+0x9a>
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401cf8e:	2303      	movs	r3, #3
3401cf90:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 3401d074 <CMW_CAMERA_PIPE_FrameEventCallback+0xf0>
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401cf94:	4f2f      	ldr	r7, [pc, #188]	@ (3401d054 <CMW_CAMERA_PIPE_FrameEventCallback+0xd0>)
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401cf96:	f8d8 5000 	ldr.w	r5, [r8]
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401cf9a:	683c      	ldr	r4, [r7, #0]
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401cf9c:	3501      	adds	r5, #1
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401cf9e:	3401      	adds	r4, #1
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401cfa0:	fb95 f2f3 	sdiv	r2, r5, r3
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401cfa4:	fb94 f3f3 	sdiv	r3, r4, r3
                                         DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_capt_idx]);
3401cfa8:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 3401d078 <CMW_CAMERA_PIPE_FrameEventCallback+0xf4>
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401cfac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
                                         DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_capt_idx]);
3401cfb0:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 3401d07c <CMW_CAMERA_PIPE_FrameEventCallback+0xf8>
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401cfb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401cfb8:	1ae4      	subs	r4, r4, r3
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401cfba:	1aad      	subs	r5, r5, r2
  ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE1,
3401cfbc:	f7e9 fc44 	bl	34006848 <CMW_CAMERA_GetDCMIPPHandle>
3401cfc0:	4631      	mov	r1, r6
3401cfc2:	2200      	movs	r2, #0
3401cfc4:	fb0a 9304 	mla	r3, sl, r4, r9
3401cfc8:	f7f4 fe2a 	bl	34011c20 <HAL_DCMIPP_PIPE_SetMemoryAddress>
  assert(ret == HAL_OK);
3401cfcc:	4601      	mov	r1, r0
3401cfce:	b130      	cbz	r0, 3401cfde <CMW_CAMERA_PIPE_FrameEventCallback+0x5a>
3401cfd0:	f240 217f 	movw	r1, #639	@ 0x27f
3401cfd4:	4b20      	ldr	r3, [pc, #128]	@ (3401d058 <CMW_CAMERA_PIPE_FrameEventCallback+0xd4>)
3401cfd6:	4a21      	ldr	r2, [pc, #132]	@ (3401d05c <CMW_CAMERA_PIPE_FrameEventCallback+0xd8>)
  assert(ret == 0);
3401cfd8:	4821      	ldr	r0, [pc, #132]	@ (3401d060 <CMW_CAMERA_PIPE_FrameEventCallback+0xdc>)
3401cfda:	f000 fd07 	bl	3401d9ec <__assert_func>
  ret = SCRL_SetAddress_NoReload(lcd_bg_buffer[next_disp_idx], SCRL_LAYER_0);
3401cfde:	fb0a 9005 	mla	r0, sl, r5, r9
3401cfe2:	f7ef f97b 	bl	3400c2dc <SCRL_SetAddress_NoReload>
  assert(ret == 0);
3401cfe6:	b120      	cbz	r0, 3401cff2 <CMW_CAMERA_PIPE_FrameEventCallback+0x6e>
3401cfe8:	f240 216f 	movw	r1, #623	@ 0x26f
3401cfec:	4b1d      	ldr	r3, [pc, #116]	@ (3401d064 <CMW_CAMERA_PIPE_FrameEventCallback+0xe0>)
3401cfee:	4a1e      	ldr	r2, [pc, #120]	@ (3401d068 <CMW_CAMERA_PIPE_FrameEventCallback+0xe4>)
3401cff0:	e7f2      	b.n	3401cfd8 <CMW_CAMERA_PIPE_FrameEventCallback+0x54>
  ret = SCRL_ReloadLayer(SCRL_LAYER_0);
3401cff2:	f7ef f97d 	bl	3400c2f0 <SCRL_ReloadLayer>
  assert(ret == 0);
3401cff6:	b120      	cbz	r0, 3401d002 <CMW_CAMERA_PIPE_FrameEventCallback+0x7e>
3401cff8:	f240 2171 	movw	r1, #625	@ 0x271
3401cffc:	4b19      	ldr	r3, [pc, #100]	@ (3401d064 <CMW_CAMERA_PIPE_FrameEventCallback+0xe0>)
3401cffe:	4a1a      	ldr	r2, [pc, #104]	@ (3401d068 <CMW_CAMERA_PIPE_FrameEventCallback+0xe4>)
3401d000:	e7ea      	b.n	3401cfd8 <CMW_CAMERA_PIPE_FrameEventCallback+0x54>
  ret = SRCL_Update();
3401d002:	f7ef f97f 	bl	3400c304 <SRCL_Update>
  assert(ret == 0);
3401d006:	b120      	cbz	r0, 3401d012 <CMW_CAMERA_PIPE_FrameEventCallback+0x8e>
3401d008:	f44f 711d 	mov.w	r1, #628	@ 0x274
3401d00c:	4b15      	ldr	r3, [pc, #84]	@ (3401d064 <CMW_CAMERA_PIPE_FrameEventCallback+0xe0>)
3401d00e:	4a16      	ldr	r2, [pc, #88]	@ (3401d068 <CMW_CAMERA_PIPE_FrameEventCallback+0xe4>)
3401d010:	e7e2      	b.n	3401cfd8 <CMW_CAMERA_PIPE_FrameEventCallback+0x54>
  lcd_bg_buffer_disp_idx = next_disp_idx;
3401d012:	f8c8 5000 	str.w	r5, [r8]
  lcd_bg_buffer_capt_idx = next_capt_idx;
3401d016:	603c      	str	r4, [r7, #0]
    app_main_pipe_frame_event();
  else if (pipe == DCMIPP_PIPE2)
    app_ancillary_pipe_frame_event();

  return HAL_OK;
}
3401d018:	2000      	movs	r0, #0
3401d01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pipe == DCMIPP_PIPE2)
3401d01e:	2802      	cmp	r0, #2
3401d020:	d1fa      	bne.n	3401d018 <CMW_CAMERA_PIPE_FrameEventCallback+0x94>
  next_buffer = bqueue_get_free(&nn_input_queue, 0);
3401d022:	2100      	movs	r1, #0
3401d024:	4811      	ldr	r0, [pc, #68]	@ (3401d06c <CMW_CAMERA_PIPE_FrameEventCallback+0xe8>)
3401d026:	f7ff f86f 	bl	3401c108 <bqueue_get_free>
  if (next_buffer) {
3401d02a:	4604      	mov	r4, r0
3401d02c:	2800      	cmp	r0, #0
3401d02e:	d0f3      	beq.n	3401d018 <CMW_CAMERA_PIPE_FrameEventCallback+0x94>
    ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
3401d030:	f7e9 fc0a 	bl	34006848 <CMW_CAMERA_GetDCMIPPHandle>
3401d034:	4623      	mov	r3, r4
3401d036:	2200      	movs	r2, #0
3401d038:	4631      	mov	r1, r6
3401d03a:	f7f4 fdf1 	bl	34011c20 <HAL_DCMIPP_PIPE_SetMemoryAddress>
    assert(ret == HAL_OK);
3401d03e:	b120      	cbz	r0, 3401d04a <CMW_CAMERA_PIPE_FrameEventCallback+0xc6>
3401d040:	f240 218f 	movw	r1, #655	@ 0x28f
3401d044:	4b04      	ldr	r3, [pc, #16]	@ (3401d058 <CMW_CAMERA_PIPE_FrameEventCallback+0xd4>)
3401d046:	4a0a      	ldr	r2, [pc, #40]	@ (3401d070 <CMW_CAMERA_PIPE_FrameEventCallback+0xec>)
3401d048:	e7c6      	b.n	3401cfd8 <CMW_CAMERA_PIPE_FrameEventCallback+0x54>
    bqueue_put_ready(&nn_input_queue);
3401d04a:	4808      	ldr	r0, [pc, #32]	@ (3401d06c <CMW_CAMERA_PIPE_FrameEventCallback+0xe8>)
3401d04c:	f7ff f932 	bl	3401c2b4 <bqueue_put_ready>
3401d050:	e7e2      	b.n	3401d018 <CMW_CAMERA_PIPE_FrameEventCallback+0x94>
3401d052:	bf00      	nop
3401d054:	3418df9c 	.word	0x3418df9c
3401d058:	34026e3c 	.word	0x34026e3c
3401d05c:	340a0709 	.word	0x340a0709
3401d060:	34026d40 	.word	0x34026d40
3401d064:	34023ee8 	.word	0x34023ee8
3401d068:	340a06f9 	.word	0x340a06f9
3401d06c:	3418d9c0 	.word	0x3418d9c0
3401d070:	340a06da 	.word	0x340a06da
3401d074:	340a3240 	.word	0x340a3240
3401d078:	000bb800 	.word	0x000bb800
3401d07c:	91384000 	.word	0x91384000

3401d080 <CMW_CAMERA_PIPE_VsyncEventCallback>:

int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
  if (pipe == DCMIPP_PIPE1)
3401d080:	2801      	cmp	r0, #1
{
3401d082:	b507      	push	{r0, r1, r2, lr}
  if (pipe == DCMIPP_PIPE1)
3401d084:	d110      	bne.n	3401d0a8 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401d086:	2300      	movs	r3, #0
3401d088:	9301      	str	r3, [sp, #4]
  ret = xSemaphoreGiveFromISR(isp_sem, &xHigherPriorityTaskWoken);
3401d08a:	4b09      	ldr	r3, [pc, #36]	@ (3401d0b0 <CMW_CAMERA_PIPE_VsyncEventCallback+0x30>)
3401d08c:	a901      	add	r1, sp, #4
3401d08e:	6818      	ldr	r0, [r3, #0]
3401d090:	f7ec fe86 	bl	34009da0 <xQueueGiveFromISR>
  if (ret == pdTRUE)
3401d094:	2801      	cmp	r0, #1
3401d096:	d107      	bne.n	3401d0a8 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401d098:	9b01      	ldr	r3, [sp, #4]
3401d09a:	b12b      	cbz	r3, 3401d0a8 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
3401d09c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401d0a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401d0a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    app_main_pipe_vsync_event();

  return HAL_OK;
}
3401d0a8:	2000      	movs	r0, #0
3401d0aa:	b003      	add	sp, #12
3401d0ac:	f85d fb04 	ldr.w	pc, [sp], #4
3401d0b0:	340df568 	.word	0x340df568

3401d0b4 <CAM_InitCropConfig>:
#define DISPLAY_BPP 2

/* Keep display output aspect ratio using crop area */
static void CAM_InitCropConfig(CMW_Manual_roi_area_t *roi, int sensor_width, int sensor_height)
{
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401d0b4:	ee07 1a90 	vmov	s15, r1
3401d0b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401d0bc:	ee07 2a90 	vmov	s15, r2
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401d0c0:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 3401d164 <CAM_InitCropConfig+0xb0>
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401d0c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3401d0c8:	eddf 5a27 	vldr	s11, [pc, #156]	@ 3401d168 <CAM_InitCropConfig+0xb4>
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401d0cc:	ee86 5a86 	vdiv.f32	s10, s13, s12
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401d0d0:	eec7 7a25 	vdiv.f32	s15, s14, s11
  const float ratio = MIN(ratiox, ratioy);
3401d0d4:	eeb4 5a67 	vcmp.f32	s10, s15
3401d0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d0dc:	bf48      	it	mi
3401d0de:	eef0 7a45 	vmovmi.f32	s15, s10

  assert(ratio >= 1);
3401d0e2:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
3401d0e6:	eef4 7ac5 	vcmpe.f32	s15, s10
3401d0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
3401d0ee:	b508      	push	{r3, lr}
  assert(ratio >= 1);
3401d0f0:	da05      	bge.n	3401d0fe <CAM_InitCropConfig+0x4a>
3401d0f2:	2123      	movs	r1, #35	@ 0x23
3401d0f4:	4b1d      	ldr	r3, [pc, #116]	@ (3401d16c <CAM_InitCropConfig+0xb8>)
3401d0f6:	4a1e      	ldr	r2, [pc, #120]	@ (3401d170 <CAM_InitCropConfig+0xbc>)
  assert(ratio < 64);
3401d0f8:	481e      	ldr	r0, [pc, #120]	@ (3401d174 <CAM_InitCropConfig+0xc0>)
3401d0fa:	f000 fc77 	bl	3401d9ec <__assert_func>
3401d0fe:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 3401d178 <CAM_InitCropConfig+0xc4>
3401d102:	eef4 7ac5 	vcmpe.f32	s15, s10
3401d106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401d10a:	d403      	bmi.n	3401d114 <CAM_InitCropConfig+0x60>
3401d10c:	2124      	movs	r1, #36	@ 0x24
3401d10e:	4b1b      	ldr	r3, [pc, #108]	@ (3401d17c <CAM_InitCropConfig+0xc8>)
3401d110:	4a17      	ldr	r2, [pc, #92]	@ (3401d170 <CAM_InitCropConfig+0xbc>)
3401d112:	e7f1      	b.n	3401d0f8 <CAM_InitCropConfig+0x44>

  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401d114:	ee27 6a86 	vmul.f32	s12, s15, s12
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401d118:	ee67 7aa5 	vmul.f32	s15, s15, s11
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401d11c:	eef4 6ac6 	vcmpe.f32	s13, s12
3401d120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401d124:	eeb4 7ae7 	vcmpe.f32	s14, s15
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401d128:	bfcc      	ite	gt
3401d12a:	eefc 6ac6 	vcvtgt.u32.f32	s13, s12
3401d12e:	eefc 6ae6 	vcvtle.u32.f32	s13, s13
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401d132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401d136:	ee16 3a90 	vmov	r3, s13
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401d13a:	bfcc      	ite	gt
3401d13c:	eebc 7ae7 	vcvtgt.u32.f32	s14, s15
3401d140:	eebc 7ac7 	vcvtle.u32.f32	s14, s14
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401d144:	3101      	adds	r1, #1
3401d146:	1ac9      	subs	r1, r1, r3
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401d148:	ee17 3a10 	vmov	r3, s14
3401d14c:	3201      	adds	r2, #1
3401d14e:	1ad2      	subs	r2, r2, r3
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401d150:	0849      	lsrs	r1, r1, #1
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401d152:	0852      	lsrs	r2, r2, #1
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401d154:	edc0 6a00 	vstr	s13, [r0]
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401d158:	ed80 7a01 	vstr	s14, [r0, #4]
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401d15c:	6081      	str	r1, [r0, #8]
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401d15e:	60c2      	str	r2, [r0, #12]
}
3401d160:	bd08      	pop	{r3, pc}
3401d162:	bf00      	nop
3401d164:	44480000 	.word	0x44480000
3401d168:	43f00000 	.word	0x43f00000
3401d16c:	34023e56 	.word	0x34023e56
3401d170:	340a08e3 	.word	0x340a08e3
3401d174:	34026efb 	.word	0x34026efb
3401d178:	42800000 	.word	0x42800000
3401d17c:	34023e61 	.word	0x34023e61

3401d180 <CAM_Init>:
  assert(ret == HAL_OK);
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
}

void CAM_Init(void)
{
3401d180:	b5f0      	push	{r4, r5, r6, r7, lr}
  CMW_CameraInit_t cam_conf;
  int ret;

  /* Let sensor driver choose which width/height to use */
  cam_conf.width = 0;
3401d182:	2300      	movs	r3, #0
  cam_conf.height = 0;
  cam_conf.fps = CAMERA_FPS;
3401d184:	2214      	movs	r2, #20
  cam_conf.pixel_format = 0; /* Default; Not implemented yet */
  cam_conf.anti_flicker = 0;
  cam_conf.mirror_flip = CAMERA_FLIP;
3401d186:	2402      	movs	r4, #2
{
3401d188:	b093      	sub	sp, #76	@ 0x4c
  ret = CMW_CAMERA_Init(&cam_conf);
3401d18a:	a801      	add	r0, sp, #4
  cam_conf.height = 0;
3401d18c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  cam_conf.pixel_format = 0; /* Default; Not implemented yet */
3401d190:	e9cd 2303 	strd	r2, r3, [sp, #12]
  cam_conf.anti_flicker = 0;
3401d194:	9305      	str	r3, [sp, #20]
  cam_conf.mirror_flip = CAMERA_FLIP;
3401d196:	9406      	str	r4, [sp, #24]
  ret = CMW_CAMERA_Init(&cam_conf);
3401d198:	f7e9 fca0 	bl	34006adc <CMW_CAMERA_Init>
  assert(ret == CMW_ERROR_NONE);
3401d19c:	b128      	cbz	r0, 3401d1aa <CAM_Init+0x2a>
3401d19e:	2161      	movs	r1, #97	@ 0x61
3401d1a0:	4b26      	ldr	r3, [pc, #152]	@ (3401d23c <CAM_Init+0xbc>)
3401d1a2:	4a27      	ldr	r2, [pc, #156]	@ (3401d240 <CAM_Init+0xc0>)
  assert(ret == HAL_OK);
3401d1a4:	4827      	ldr	r0, [pc, #156]	@ (3401d244 <CAM_Init+0xc4>)
3401d1a6:	f000 fc21 	bl	3401d9ec <__assert_func>
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401d1aa:	f44f 7348 	mov.w	r3, #800	@ 0x320
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401d1ae:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  dcmipp_conf.output_format = DISPLAY_FORMAT;
3401d1b2:	2501      	movs	r5, #1
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401d1b4:	f44f 77f0 	mov.w	r7, #480	@ 0x1e0
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401d1b8:	2603      	movs	r6, #3
  dcmipp_conf.enable_gamma_conversion = 0;
3401d1ba:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401d1be:	a80e      	add	r0, sp, #56	@ 0x38
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401d1c0:	e9cd 3707 	strd	r3, r7, [sp, #28]
  dcmipp_conf.output_bpp = DISPLAY_BPP;
3401d1c4:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401d1c8:	960d      	str	r6, [sp, #52]	@ 0x34
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401d1ca:	f7ff ff73 	bl	3401d0b4 <CAM_InitCropConfig>
  ret = CMW_CAMERA_SetPipeConfig(DCMIPP_PIPE1, &dcmipp_conf, &hw_pitch);
3401d1ce:	466a      	mov	r2, sp
3401d1d0:	4628      	mov	r0, r5
3401d1d2:	a907      	add	r1, sp, #28
3401d1d4:	f7e9 fb3c 	bl	34006850 <CMW_CAMERA_SetPipeConfig>
  assert(ret == HAL_OK);
3401d1d8:	b118      	cbz	r0, 3401d1e2 <CAM_Init+0x62>
3401d1da:	213d      	movs	r1, #61	@ 0x3d
3401d1dc:	4b1a      	ldr	r3, [pc, #104]	@ (3401d248 <CAM_Init+0xc8>)
3401d1de:	4a1b      	ldr	r2, [pc, #108]	@ (3401d24c <CAM_Init+0xcc>)
3401d1e0:	e7e0      	b.n	3401d1a4 <CAM_Init+0x24>
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
3401d1e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401d1e4:	9b07      	ldr	r3, [sp, #28]
3401d1e6:	4353      	muls	r3, r2
3401d1e8:	9a00      	ldr	r2, [sp, #0]
3401d1ea:	4293      	cmp	r3, r2
3401d1ec:	d003      	beq.n	3401d1f6 <CAM_Init+0x76>
3401d1ee:	213e      	movs	r1, #62	@ 0x3e
3401d1f0:	4b17      	ldr	r3, [pc, #92]	@ (3401d250 <CAM_Init+0xd0>)
3401d1f2:	4a16      	ldr	r2, [pc, #88]	@ (3401d24c <CAM_Init+0xcc>)
3401d1f4:	e7d6      	b.n	3401d1a4 <CAM_Init+0x24>
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401d1f6:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  dcmipp_conf.output_bpp = NN_BPP;
3401d1fa:	e9cd 0609 	strd	r0, r6, [sp, #36]	@ 0x24
  dcmipp_conf.enable_gamma_conversion = 0;
3401d1fe:	e9cd 500b 	strd	r5, r0, [sp, #44]	@ 0x2c
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401d202:	a80e      	add	r0, sp, #56	@ 0x38
  dcmipp_conf.output_height = NN_HEIGHT;
3401d204:	e9cd 7707 	strd	r7, r7, [sp, #28]
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401d208:	960d      	str	r6, [sp, #52]	@ 0x34
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401d20a:	f7ff ff53 	bl	3401d0b4 <CAM_InitCropConfig>
  ret = CMW_CAMERA_SetPipeConfig(DCMIPP_PIPE2, &dcmipp_conf, &hw_pitch);
3401d20e:	466a      	mov	r2, sp
3401d210:	4620      	mov	r0, r4
3401d212:	a907      	add	r1, sp, #28
3401d214:	f7e9 fb1c 	bl	34006850 <CMW_CAMERA_SetPipeConfig>
  assert(ret == HAL_OK);
3401d218:	b118      	cbz	r0, 3401d222 <CAM_Init+0xa2>
3401d21a:	2150      	movs	r1, #80	@ 0x50
3401d21c:	4b0a      	ldr	r3, [pc, #40]	@ (3401d248 <CAM_Init+0xc8>)
3401d21e:	4a0d      	ldr	r2, [pc, #52]	@ (3401d254 <CAM_Init+0xd4>)
3401d220:	e7c0      	b.n	3401d1a4 <CAM_Init+0x24>
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
3401d222:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401d224:	9b07      	ldr	r3, [sp, #28]
3401d226:	4353      	muls	r3, r2
3401d228:	9a00      	ldr	r2, [sp, #0]
3401d22a:	4293      	cmp	r3, r2
3401d22c:	d003      	beq.n	3401d236 <CAM_Init+0xb6>
3401d22e:	2151      	movs	r1, #81	@ 0x51
3401d230:	4b07      	ldr	r3, [pc, #28]	@ (3401d250 <CAM_Init+0xd0>)
3401d232:	4a08      	ldr	r2, [pc, #32]	@ (3401d254 <CAM_Init+0xd4>)
3401d234:	e7b6      	b.n	3401d1a4 <CAM_Init+0x24>

  /* cam_conf.width / cam_conf.height now contains choose resolution */
  DCMIPP_PipeInitDisplay(cam_conf.width, cam_conf.height);
  DCMIPP_PipeInitNn(cam_conf.width, cam_conf.height);
}
3401d236:	b013      	add	sp, #76	@ 0x4c
3401d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401d23a:	bf00      	nop
3401d23c:	34026f24 	.word	0x34026f24
3401d240:	340a090d 	.word	0x340a090d
3401d244:	34026efb 	.word	0x34026efb
3401d248:	34026e3c 	.word	0x34026e3c
3401d24c:	340a08f6 	.word	0x340a08f6
3401d250:	34026f3a 	.word	0x34026f3a
3401d254:	340a08d1 	.word	0x340a08d1

3401d258 <CAM_DisplayPipe_Start>:

void CAM_DisplayPipe_Start(uint8_t *display_pipe_dst, uint32_t cam_mode)
{
3401d258:	460a      	mov	r2, r1
3401d25a:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Start(DCMIPP_PIPE1, display_pipe_dst, cam_mode);
3401d25c:	4601      	mov	r1, r0
3401d25e:	2001      	movs	r0, #1
3401d260:	f7e9 fbb8 	bl	340069d4 <CMW_CAMERA_Start>
  assert(ret == CMW_ERROR_NONE);
3401d264:	b128      	cbz	r0, 3401d272 <CAM_DisplayPipe_Start+0x1a>
3401d266:	216d      	movs	r1, #109	@ 0x6d
3401d268:	4b02      	ldr	r3, [pc, #8]	@ (3401d274 <CAM_DisplayPipe_Start+0x1c>)
3401d26a:	4a03      	ldr	r2, [pc, #12]	@ (3401d278 <CAM_DisplayPipe_Start+0x20>)
3401d26c:	4803      	ldr	r0, [pc, #12]	@ (3401d27c <CAM_DisplayPipe_Start+0x24>)
3401d26e:	f000 fbbd 	bl	3401d9ec <__assert_func>
}
3401d272:	bd08      	pop	{r3, pc}
3401d274:	34026f24 	.word	0x34026f24
3401d278:	340a08bb 	.word	0x340a08bb
3401d27c:	34026efb 	.word	0x34026efb

3401d280 <CAM_NNPipe_Start>:

void CAM_NNPipe_Start(uint8_t *nn_pipe_dst, uint32_t cam_mode)
{
3401d280:	460a      	mov	r2, r1
3401d282:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Start(DCMIPP_PIPE2, nn_pipe_dst, cam_mode);
3401d284:	4601      	mov	r1, r0
3401d286:	2002      	movs	r0, #2
3401d288:	f7e9 fba4 	bl	340069d4 <CMW_CAMERA_Start>
  assert(ret == CMW_ERROR_NONE);
3401d28c:	b128      	cbz	r0, 3401d29a <CAM_NNPipe_Start+0x1a>
3401d28e:	2175      	movs	r1, #117	@ 0x75
3401d290:	4b02      	ldr	r3, [pc, #8]	@ (3401d29c <CAM_NNPipe_Start+0x1c>)
3401d292:	4a03      	ldr	r2, [pc, #12]	@ (3401d2a0 <CAM_NNPipe_Start+0x20>)
3401d294:	4803      	ldr	r0, [pc, #12]	@ (3401d2a4 <CAM_NNPipe_Start+0x24>)
3401d296:	f000 fba9 	bl	3401d9ec <__assert_func>
}
3401d29a:	bd08      	pop	{r3, pc}
3401d29c:	34026f24 	.word	0x34026f24
3401d2a0:	340a08aa 	.word	0x340a08aa
3401d2a4:	34026efb 	.word	0x34026efb

3401d2a8 <CAM_IspUpdate>:

void CAM_IspUpdate(void)
{
3401d2a8:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Run();
3401d2aa:	f7e9 fc6d 	bl	34006b88 <CMW_CAMERA_Run>
  assert(ret == CMW_ERROR_NONE);
3401d2ae:	b128      	cbz	r0, 3401d2bc <CAM_IspUpdate+0x14>
3401d2b0:	217d      	movs	r1, #125	@ 0x7d
3401d2b2:	4b03      	ldr	r3, [pc, #12]	@ (3401d2c0 <CAM_IspUpdate+0x18>)
3401d2b4:	4a03      	ldr	r2, [pc, #12]	@ (3401d2c4 <CAM_IspUpdate+0x1c>)
3401d2b6:	4804      	ldr	r0, [pc, #16]	@ (3401d2c8 <CAM_IspUpdate+0x20>)
3401d2b8:	f000 fb98 	bl	3401d9ec <__assert_func>
}
3401d2bc:	bd08      	pop	{r3, pc}
3401d2be:	bf00      	nop
3401d2c0:	34026f24 	.word	0x34026f24
3401d2c4:	340a089c 	.word	0x340a089c
3401d2c8:	34026efb 	.word	0x34026efb

3401d2cc <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
3401d2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
3401d2ce:	4b15      	ldr	r3, [pc, #84]	@ (3401d324 <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401d2d0:	217c      	movs	r1, #124	@ 0x7c
3401d2d2:	aa01      	add	r2, sp, #4
3401d2d4:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
3401d2d6:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401d2d8:	f7f2 f920 	bl	3400f51c <HAL_BSEC_OTP_Read>
3401d2dc:	4603      	mov	r3, r0
3401d2de:	b9e0      	cbnz	r0, 3401d31a <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
3401d2e0:	9a01      	ldr	r2, [sp, #4]
3401d2e2:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
3401d2e6:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
3401d2ea:	d017      	beq.n	3401d31c <Fuse_Programming+0x50>
    {
      data |= bit_mask;
3401d2ec:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
3401d2f0:	217c      	movs	r1, #124	@ 0x7c
3401d2f2:	a802      	add	r0, sp, #8
      data |= bit_mask;
3401d2f4:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
3401d2f6:	f7f2 f92d 	bl	3400f554 <HAL_BSEC_OTP_Program>
3401d2fa:	b968      	cbnz	r0, 3401d318 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401d2fc:	217c      	movs	r1, #124	@ 0x7c
3401d2fe:	aa01      	add	r2, sp, #4
3401d300:	a802      	add	r0, sp, #8
3401d302:	f7f2 f90b 	bl	3400f51c <HAL_BSEC_OTP_Read>
3401d306:	b930      	cbnz	r0, 3401d316 <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
3401d308:	9b01      	ldr	r3, [sp, #4]
3401d30a:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
3401d30e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
3401d312:	d003      	beq.n	3401d31c <Fuse_Programming+0x50>
3401d314:	e7fe      	b.n	3401d314 <Fuse_Programming+0x48>
3401d316:	e7fe      	b.n	3401d316 <Fuse_Programming+0x4a>
3401d318:	e7fe      	b.n	3401d318 <Fuse_Programming+0x4c>
3401d31a:	e7fe      	b.n	3401d31a <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
3401d31c:	b005      	add	sp, #20
3401d31e:	f85d fb04 	ldr.w	pc, [sp], #4
3401d322:	bf00      	nop
3401d324:	56009000 	.word	0x56009000

3401d328 <HAL_GetTick>:

static TIM_HandleTypeDef tim4;

uint32_t HAL_GetTick()
{
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
3401d328:	f7ed b97e 	b.w	3400a628 <xTaskGetTickCount>

3401d32c <HAL_Delay>:
}

void HAL_Delay(uint32_t Delay)
{
3401d32c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
3401d32e:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ_MODE())
3401d332:	b12b      	cbz	r3, 3401d340 <HAL_Delay+0x14>
    assert(0);
3401d334:	2127      	movs	r1, #39	@ 0x27
3401d336:	4b04      	ldr	r3, [pc, #16]	@ (3401d348 <HAL_Delay+0x1c>)
3401d338:	4a04      	ldr	r2, [pc, #16]	@ (3401d34c <HAL_Delay+0x20>)
3401d33a:	4805      	ldr	r0, [pc, #20]	@ (3401d350 <HAL_Delay+0x24>)
3401d33c:	f000 fb56 	bl	3401d9ec <__assert_func>

  vTaskDelay(Delay / portTICK_PERIOD_MS);
}
3401d340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  vTaskDelay(Delay / portTICK_PERIOD_MS);
3401d344:	f7ed bad2 	b.w	3400a8ec <vTaskDelay>
3401d348:	340235d8 	.word	0x340235d8
3401d34c:	340a0922 	.word	0x340a0922
3401d350:	34026f78 	.word	0x34026f78

3401d354 <HAL_InitTick>:

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return HAL_OK;
}
3401d354:	2000      	movs	r0, #0
3401d356:	4770      	bx	lr

3401d358 <TIM4_Config>:
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3401d358:	2204      	movs	r2, #4

void TIM4_Config()
{
3401d35a:	b513      	push	{r0, r1, r4, lr}
3401d35c:	4b15      	ldr	r3, [pc, #84]	@ (3401d3b4 <TIM4_Config+0x5c>)
  const uint32_t tmr_clk_freq = 100000;
  int ret;

  __HAL_RCC_TIM4_CLK_ENABLE();

  tim4.Instance = TIM4;
3401d35e:	4c16      	ldr	r4, [pc, #88]	@ (3401d3b8 <TIM4_Config+0x60>)
3401d360:	f8c3 2a64 	str.w	r2, [r3, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3401d364:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
3401d368:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401d36a:	9b01      	ldr	r3, [sp, #4]
3401d36c:	4b13      	ldr	r3, [pc, #76]	@ (3401d3bc <TIM4_Config+0x64>)
3401d36e:	6023      	str	r3, [r4, #0]
  tim4.Init.Period = ~0;
3401d370:	f04f 33ff 	mov.w	r3, #4294967295
3401d374:	60e3      	str	r3, [r4, #12]
  tim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / tmr_clk_freq) - 1;
3401d376:	f7f7 ff25 	bl	340151c4 <HAL_RCC_GetPCLK1Freq>
3401d37a:	4b11      	ldr	r3, [pc, #68]	@ (3401d3c0 <TIM4_Config+0x68>)
3401d37c:	fbb0 f0f3 	udiv	r0, r0, r3
  tim4.Init.ClockDivision = 0;
3401d380:	2300      	movs	r3, #0
  tim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / tmr_clk_freq) - 1;
3401d382:	3801      	subs	r0, #1
3401d384:	6060      	str	r0, [r4, #4]
  tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  ret = HAL_TIM_Base_Init(&tim4);
3401d386:	4620      	mov	r0, r4
  tim4.Init.ClockDivision = 0;
3401d388:	6123      	str	r3, [r4, #16]
  tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
3401d38a:	60a3      	str	r3, [r4, #8]
  ret = HAL_TIM_Base_Init(&tim4);
3401d38c:	f7fd f8ea 	bl	3401a564 <HAL_TIM_Base_Init>
  assert(ret == HAL_OK);
3401d390:	b128      	cbz	r0, 3401d39e <TIM4_Config+0x46>
3401d392:	213e      	movs	r1, #62	@ 0x3e
3401d394:	4b0b      	ldr	r3, [pc, #44]	@ (3401d3c4 <TIM4_Config+0x6c>)
3401d396:	4a0c      	ldr	r2, [pc, #48]	@ (3401d3c8 <TIM4_Config+0x70>)

  ret = HAL_TIM_Base_Start(&tim4);
  assert(ret == HAL_OK);
3401d398:	480c      	ldr	r0, [pc, #48]	@ (3401d3cc <TIM4_Config+0x74>)
3401d39a:	f000 fb27 	bl	3401d9ec <__assert_func>
  ret = HAL_TIM_Base_Start(&tim4);
3401d39e:	4620      	mov	r0, r4
3401d3a0:	f7fc ff46 	bl	3401a230 <HAL_TIM_Base_Start>
  assert(ret == HAL_OK);
3401d3a4:	b118      	cbz	r0, 3401d3ae <TIM4_Config+0x56>
3401d3a6:	2141      	movs	r1, #65	@ 0x41
3401d3a8:	4b06      	ldr	r3, [pc, #24]	@ (3401d3c4 <TIM4_Config+0x6c>)
3401d3aa:	4a07      	ldr	r2, [pc, #28]	@ (3401d3c8 <TIM4_Config+0x70>)
3401d3ac:	e7f4      	b.n	3401d398 <TIM4_Config+0x40>
}
3401d3ae:	b002      	add	sp, #8
3401d3b0:	bd10      	pop	{r4, pc}
3401d3b2:	bf00      	nop
3401d3b4:	56028000 	.word	0x56028000
3401d3b8:	3418f260 	.word	0x3418f260
3401d3bc:	50000800 	.word	0x50000800
3401d3c0:	000186a0 	.word	0x000186a0
3401d3c4:	34026e3c 	.word	0x34026e3c
3401d3c8:	340a0916 	.word	0x340a0916
3401d3cc:	34026f78 	.word	0x34026f78

3401d3d0 <TIM4_Get_Value>:

uint32_t TIM4_Get_Value()
{
  return __HAL_TIM_GET_COUNTER(&tim4);
3401d3d0:	4b01      	ldr	r3, [pc, #4]	@ (3401d3d8 <TIM4_Get_Value+0x8>)
3401d3d2:	681b      	ldr	r3, [r3, #0]
3401d3d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
3401d3d6:	4770      	bx	lr
3401d3d8:	3418f260 	.word	0x3418f260

3401d3dc <vApplicationGetIdleTaskMemory>:
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
3401d3dc:	4b03      	ldr	r3, [pc, #12]	@ (3401d3ec <vApplicationGetIdleTaskMemory+0x10>)
3401d3de:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
3401d3e0:	4b03      	ldr	r3, [pc, #12]	@ (3401d3f0 <vApplicationGetIdleTaskMemory+0x14>)
3401d3e2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
3401d3e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401d3e8:	6013      	str	r3, [r2, #0]
}
3401d3ea:	4770      	bx	lr
3401d3ec:	3418f200 	.word	0x3418f200
3401d3f0:	3418e200 	.word	0x3418e200

3401d3f4 <vApplicationGetTimerTaskMemory>:
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
3401d3f4:	4b03      	ldr	r3, [pc, #12]	@ (3401d404 <vApplicationGetTimerTaskMemory+0x10>)
3401d3f6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
3401d3f8:	4b03      	ldr	r3, [pc, #12]	@ (3401d408 <vApplicationGetTimerTaskMemory+0x14>)
3401d3fa:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
3401d3fc:	2380      	movs	r3, #128	@ 0x80
3401d3fe:	6013      	str	r3, [r2, #0]
}
3401d400:	4770      	bx	lr
3401d402:	bf00      	nop
3401d404:	3418e1a0 	.word	0x3418e1a0
3401d408:	3418dfa0 	.word	0x3418dfa0

3401d40c <LL_MEM_EnableClock>:
  WRITE_REG(RCC->MEMENSR, Memories);
3401d40c:	4b04      	ldr	r3, [pc, #16]	@ (3401d420 <LL_MEM_EnableClock+0x14>)
{
3401d40e:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
3401d410:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  tmpreg = READ_REG(RCC->MEMENR);
3401d414:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
3401d418:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401d41a:	9b01      	ldr	r3, [sp, #4]
}
3401d41c:	b002      	add	sp, #8
3401d41e:	4770      	bx	lr
3401d420:	56028000 	.word	0x56028000

3401d424 <SystemClock_Config>:
  {
  }
}

static void SystemClock_Config(void)
{
3401d424:	b530      	push	{r4, r5, lr}
3401d426:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3401d42a:	2240      	movs	r2, #64	@ 0x40
3401d42c:	2100      	movs	r1, #0
3401d42e:	4668      	mov	r0, sp
3401d430:	f001 fb26 	bl	3401ea80 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3401d434:	2298      	movs	r2, #152	@ 0x98
3401d436:	2100      	movs	r1, #0
3401d438:	a810      	add	r0, sp, #64	@ 0x40
3401d43a:	f001 fb21 	bl	3401ea80 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3401d43e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3401d442:	2100      	movs	r1, #0
3401d444:	a836      	add	r0, sp, #216	@ 0xd8
3401d446:	f001 fb1b 	bl	3401ea80 <memset>

  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
3401d44a:	2001      	movs	r0, #1
3401d44c:	f7f0 fc44 	bl	3400dcd8 <BSP_SMPS_Init>
  HAL_Delay(1); /* Assuming Voltage Ramp Speed of 1mV/us --> 100mV increase takes 100us */
3401d450:	2001      	movs	r0, #1
3401d452:	f7ff ff6b 	bl	3401d32c <HAL_Delay>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
3401d456:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3401d458:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
3401d45a:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
3401d45c:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
3401d45e:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
3401d460:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
3401d464:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
3401d468:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
3401d46a:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
3401d46c:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
3401d470:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
3401d474:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
3401d478:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
3401d47c:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
3401d480:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
3401d484:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3401d488:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
3401d48a:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3401d48c:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
3401d48e:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
3401d492:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
3401d496:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
3401d49a:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
3401d49e:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
3401d4a0:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3401d4a2:	f7f7 f809 	bl	340144b8 <HAL_RCC_OscConfig>
3401d4a6:	b100      	cbz	r0, 3401d4aa <SystemClock_Config+0x86>
  {
    while(1);
3401d4a8:	e7fe      	b.n	3401d4a8 <SystemClock_Config+0x84>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
3401d4aa:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3401d4ae:	227f      	movs	r2, #127	@ 0x7f
3401d4b0:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
3401d4b4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3401d4b8:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
3401d4ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
3401d4be:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
3401d4c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
3401d4c6:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
3401d4ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
3401d4ce:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
3401d4d2:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
3401d4d6:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
3401d4da:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
3401d4de:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
3401d4e0:	4668      	mov	r0, sp
3401d4e2:	f7f7 fbe5 	bl	34014cb0 <HAL_RCC_ClockConfig>
3401d4e6:	b100      	cbz	r0, 3401d4ea <SystemClock_Config+0xc6>
  {
    while(1);
3401d4e8:	e7fe      	b.n	3401d4e8 <SystemClock_Config+0xc4>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3401d4ea:	4b08      	ldr	r3, [pc, #32]	@ (3401d50c <SystemClock_Config+0xe8>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3401d4ec:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3401d4ee:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3401d4f0:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
3401d4f4:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3401d4f8:	4b05      	ldr	r3, [pc, #20]	@ (3401d510 <SystemClock_Config+0xec>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3401d4fa:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3401d4fc:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3401d4fe:	f7f7 ff8d 	bl	3401541c <HAL_RCCEx_PeriphCLKConfig>
3401d502:	b100      	cbz	r0, 3401d506 <SystemClock_Config+0xe2>
  {
    while (1);
3401d504:	e7fe      	b.n	3401d504 <SystemClock_Config+0xe0>
  }
}
3401d506:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
3401d50a:	bd30      	pop	{r4, r5, pc}
3401d50c:	03000014 	.word	0x03000014
3401d510:	03000414 	.word	0x03000414

3401d514 <main_thread_fct>:

  return -1;
}

static void main_thread_fct(void *arg)
{
3401d514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401d518:	b09c      	sub	sp, #112	@ 0x70
  IRQn_Type i;

  /* Copy SysTick_IRQn priority set by RTOS and use it as default priorities for IRQs. We are now sure that all irqs
   * have default priority below or equal to configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY.
   */
  HAL_NVIC_GetPriority(SysTick_IRQn, HAL_NVIC_GetPriorityGrouping(), &preemptPriority, &subPriority);
3401d51a:	f7f2 f9d5 	bl	3400f8c8 <HAL_NVIC_GetPriorityGrouping>
3401d51e:	ab03      	add	r3, sp, #12
3401d520:	4601      	mov	r1, r0
3401d522:	aa02      	add	r2, sp, #8
3401d524:	f04f 30ff 	mov.w	r0, #4294967295
3401d528:	f7f2 f9d6 	bl	3400f8d8 <HAL_NVIC_GetPriority>
3401d52c:	2400      	movs	r4, #0
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
    HAL_NVIC_SetPriority(i, preemptPriority, subPriority);
3401d52e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
3401d532:	b220      	sxth	r0, r4
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
3401d534:	3401      	adds	r4, #1
    HAL_NVIC_SetPriority(i, preemptPriority, subPriority);
3401d536:	f7f2 f955 	bl	3400f7e4 <HAL_NVIC_SetPriority>
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
3401d53a:	2cc3      	cmp	r4, #195	@ 0xc3
3401d53c:	d1f7      	bne.n	3401d52e <main_thread_fct+0x1a>

  /* Call SystemClock_Config() after vTaskStartScheduler() since it call HAL_Delay() which call vTaskDelay(). Drawback
   * is that we must call vPortSetupTimerInterrupt() since SystemCoreClock value has been modified by SystemClock_Config()
   */
  SystemClock_Config();
3401d53e:	f7ff ff71 	bl	3401d424 <SystemClock_Config>
  vPortSetupTimerInterrupt();
3401d542:	f7ed fe21 	bl	3400b188 <vPortSetupTimerInterrupt>
  WRITE_REG(RCC->APB2ENSR, Periphs);
3401d546:	2310      	movs	r3, #16
3401d548:	4c97      	ldr	r4, [pc, #604]	@ (3401d7a8 <main_thread_fct+0x294>)
  gpio_init.Pull      = GPIO_PULLUP;
3401d54a:	2602      	movs	r6, #2
3401d54c:	f8c4 3a6c 	str.w	r3, [r4, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3401d550:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
3401d554:	2701      	movs	r7, #1
3401d556:	9213      	str	r2, [sp, #76]	@ 0x4c
  (void)tmpreg;
3401d558:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3401d55a:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3401d55e:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401d562:	4892      	ldr	r0, [pc, #584]	@ (3401d7ac <main_thread_fct+0x298>)
3401d564:	9312      	str	r3, [sp, #72]	@ 0x48
  (void)tmpreg;
3401d566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  gpio_init.Pin       = GPIO_PIN_5 | GPIO_PIN_6;
3401d568:	2360      	movs	r3, #96	@ 0x60
3401d56a:	9317      	str	r3, [sp, #92]	@ 0x5c
  gpio_init.Alternate = GPIO_AF7_USART1;
3401d56c:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401d56e:	a917      	add	r1, sp, #92	@ 0x5c
  gpio_init.Alternate = GPIO_AF7_USART1;
3401d570:	931b      	str	r3, [sp, #108]	@ 0x6c
  gpio_init.Pull      = GPIO_PULLUP;
3401d572:	e9cd 6718 	strd	r6, r7, [sp, #96]	@ 0x60
  gpio_init.Speed     = GPIO_SPEED_FREQ_HIGH;
3401d576:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401d578:	f7f4 ffac 	bl	340124d4 <HAL_GPIO_Init>
  huart1.Init.BaudRate     = 115200;
3401d57c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance          = USART1;
3401d580:	488b      	ldr	r0, [pc, #556]	@ (3401d7b0 <main_thread_fct+0x29c>)
  huart1.Init.BaudRate     = 115200;
3401d582:	498c      	ldr	r1, [pc, #560]	@ (3401d7b4 <main_thread_fct+0x2a0>)
  huart1.Init.Parity       = UART_PARITY_NONE;
3401d584:	250c      	movs	r5, #12
  huart1.Init.BaudRate     = 115200;
3401d586:	e9c0 1300 	strd	r1, r3, [r0]
  huart1.Init.Parity       = UART_PARITY_NONE;
3401d58a:	2300      	movs	r3, #0
3401d58c:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart1.Init.StopBits     = UART_STOPBITS_1;
3401d590:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
3401d594:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
3401d596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3401d59a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
3401d59c:	f7fd fcc8 	bl	3401af30 <HAL_UART_Init>
3401d5a0:	4605      	mov	r5, r0
3401d5a2:	b100      	cbz	r0, 3401d5a6 <main_thread_fct+0x92>
    while (1);
3401d5a4:	e7fe      	b.n	3401d5a4 <main_thread_fct+0x90>
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401d5a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
3401d5aa:	f8c4 3a60 	str.w	r3, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3401d5ae:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401d5b2:	f8df 8234 	ldr.w	r8, [pc, #564]	@ 3401d7e8 <main_thread_fct+0x2d4>
  tmpreg = READ_REG(RCC->AHB5ENR);
3401d5b6:	9215      	str	r2, [sp, #84]	@ 0x54
  (void)tmpreg;
3401d5b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
3401d5ba:	4638      	mov	r0, r7
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401d5bc:	f8c4 3a20 	str.w	r3, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401d5c0:	f8c8 3220 	str.w	r3, [r8, #544]	@ 0x220
3401d5c4:	f7ff ff22 	bl	3401d40c <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
3401d5c8:	4630      	mov	r0, r6
3401d5ca:	f7ff ff1f 	bl	3401d40c <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
3401d5ce:	2004      	movs	r0, #4
3401d5d0:	f7ff ff1c 	bl	3401d40c <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
3401d5d4:	2008      	movs	r0, #8
3401d5d6:	f7ff ff19 	bl	3401d40c <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
3401d5da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3401d5de:	f8c4 3a54 	str.w	r3, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
3401d5e2:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d5e6:	a817      	add	r0, sp, #92	@ 0x5c
3401d5e8:	9314      	str	r3, [sp, #80]	@ 0x50
  (void)tmpreg;
3401d5ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3401d5ec:	4b72      	ldr	r3, [pc, #456]	@ (3401d7b8 <main_thread_fct+0x2a4>)
  RAMCFG_HandleTypeDef hramcfg = {0};
3401d5ee:	e9cd 5518 	strd	r5, r5, [sp, #96]	@ 0x60
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3401d5f2:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d5f4:	f7f6 fd3c 	bl	34014070 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3401d5f8:	4b70      	ldr	r3, [pc, #448]	@ (3401d7bc <main_thread_fct+0x2a8>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d5fa:	a817      	add	r0, sp, #92	@ 0x5c
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3401d5fc:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d5fe:	f7f6 fd37 	bl	34014070 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3401d602:	4b6f      	ldr	r3, [pc, #444]	@ (3401d7c0 <main_thread_fct+0x2ac>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d604:	a817      	add	r0, sp, #92	@ 0x5c
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3401d606:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d608:	f7f6 fd32 	bl	34014070 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3401d60c:	4b6d      	ldr	r3, [pc, #436]	@ (3401d7c4 <main_thread_fct+0x2b0>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d60e:	a817      	add	r0, sp, #92	@ 0x5c
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3401d610:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401d612:	f7f6 fd2d 	bl	34014070 <HAL_RAMCFG_EnableAXISRAM>

  CONSOLE_Config();

  NPURam_enable();
  Fuse_Programming();
3401d616:	f7ff fe59 	bl	3401d2cc <Fuse_Programming>
  npu_cache_init();
3401d61a:	f7e4 fd81 	bl	34002120 <npu_cache_init>
  npu_cache_enable();
3401d61e:	f7e4 fd89 	bl	34002134 <npu_cache_enable>

  NPUCache_config();

#ifdef STM32N6570_DK_REV
  /*** External RAM and NOR Flash *********************************************/
  BSP_XSPI_RAM_Init(0);
3401d622:	4628      	mov	r0, r5
3401d624:	f7f1 fc26 	bl	3400ee74 <BSP_XSPI_RAM_Init>
  BSP_XSPI_RAM_EnableMemoryMappedMode(0);
3401d628:	4628      	mov	r0, r5
3401d62a:	f7f1 fd47 	bl	3400f0bc <BSP_XSPI_RAM_EnableMemoryMappedMode>
#endif

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3401d62e:	f240 1301 	movw	r3, #257	@ 0x101
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3401d632:	a901      	add	r1, sp, #4
3401d634:	4628      	mov	r0, r5
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3401d636:	f8ad 3004 	strh.w	r3, [sp, #4]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3401d63a:	f7f1 fad5 	bl	3400ebe8 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
3401d63e:	4628      	mov	r0, r5
3401d640:	f7f1 fa40 	bl	3400eac4 <BSP_XSPI_NOR_EnableMemoryMappedMode>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3401d644:	f44f 7300 	mov.w	r3, #512	@ 0x200
3401d648:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3401d64c:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  RIMC_master.MasterCID = RIF_CID_1;
3401d650:	9617      	str	r6, [sp, #92]	@ 0x5c
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3401d652:	2603      	movs	r6, #3
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3401d654:	4638      	mov	r0, r7
3401d656:	9316      	str	r3, [sp, #88]	@ 0x58
3401d658:	a917      	add	r1, sp, #92	@ 0x5c
  (void)tmpreg;
3401d65a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3401d65c:	9618      	str	r6, [sp, #96]	@ 0x60
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3401d65e:	f7fc fd0b 	bl	3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3401d662:	a917      	add	r1, sp, #92	@ 0x5c
3401d664:	2008      	movs	r0, #8
3401d666:	f7fc fd07 	bl	3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3401d66a:	a917      	add	r1, sp, #92	@ 0x5c
3401d66c:	2009      	movs	r0, #9
3401d66e:	f7fc fd03 	bl	3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
3401d672:	a917      	add	r1, sp, #92	@ 0x5c
3401d674:	200a      	movs	r0, #10
3401d676:	f7fc fcff 	bl	3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
3401d67a:	a917      	add	r1, sp, #92	@ 0x5c
3401d67c:	200b      	movs	r0, #11
3401d67e:	f7fc fcfb 	bl	3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
3401d682:	a917      	add	r1, sp, #92	@ 0x5c
3401d684:	2004      	movs	r0, #4
3401d686:	f7fc fcf7 	bl	3401a078 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d68a:	4631      	mov	r1, r6
3401d68c:	484e      	ldr	r0, [pc, #312]	@ (3401d7c8 <main_thread_fct+0x2b4>)
3401d68e:	f7fc fd49 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d692:	4631      	mov	r1, r6
3401d694:	484d      	ldr	r0, [pc, #308]	@ (3401d7cc <main_thread_fct+0x2b8>)
3401d696:	f7fc fd45 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d69a:	4631      	mov	r1, r6
3401d69c:	484c      	ldr	r0, [pc, #304]	@ (3401d7d0 <main_thread_fct+0x2bc>)
3401d69e:	f7fc fd41 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d6a2:	4631      	mov	r1, r6
3401d6a4:	484b      	ldr	r0, [pc, #300]	@ (3401d7d4 <main_thread_fct+0x2c0>)
3401d6a6:	f7fc fd3d 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d6aa:	4631      	mov	r1, r6
3401d6ac:	484a      	ldr	r0, [pc, #296]	@ (3401d7d8 <main_thread_fct+0x2c4>)
3401d6ae:	f7fc fd39 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d6b2:	4631      	mov	r1, r6
3401d6b4:	4849      	ldr	r0, [pc, #292]	@ (3401d7dc <main_thread_fct+0x2c8>)
3401d6b6:	f7fc fd35 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d6ba:	4631      	mov	r1, r6
3401d6bc:	4848      	ldr	r0, [pc, #288]	@ (3401d7e0 <main_thread_fct+0x2cc>)
3401d6be:	f7fc fd31 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d6c2:	4631      	mov	r1, r6
3401d6c4:	4847      	ldr	r0, [pc, #284]	@ (3401d7e4 <main_thread_fct+0x2d0>)
3401d6c6:	f7fc fd2d 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401d6ca:	4631      	mov	r1, r6
3401d6cc:	2004      	movs	r0, #4
3401d6ce:	f7fc fd29 	bl	3401a124 <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3401d6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401d6d6:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3401d6da:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
3401d6de:	9217      	str	r2, [sp, #92]	@ 0x5c
  (void)tmpreg;
3401d6e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
3401d6e2:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
3401d6e6:	f8c8 3218 	str.w	r3, [r8, #536]	@ 0x218
  WRITE_REG(RCC->BUSLPENSR, Bus);
3401d6ea:	f04f 33ff 	mov.w	r3, #4294967295
3401d6ee:	f8c4 3a84 	str.w	r3, [r4, #2692]	@ 0xa84
  tmpreg = READ_REG(RCC->BUSLPENR);
3401d6f2:	f8d4 2284 	ldr.w	r2, [r4, #644]	@ 0x284
3401d6f6:	9211      	str	r2, [sp, #68]	@ 0x44
  (void)tmpreg;
3401d6f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  WRITE_REG(RCC->MEMLPENSR, Memories);
3401d6fa:	f8c4 3a8c 	str.w	r3, [r4, #2700]	@ 0xa8c
  tmpreg = READ_REG(RCC->MEMLPENR);
3401d6fe:	f8d4 228c 	ldr.w	r2, [r4, #652]	@ 0x28c
3401d702:	9210      	str	r2, [sp, #64]	@ 0x40
  (void)tmpreg;
3401d704:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  WRITE_REG(RCC->AHB1LPENSR, Periphs);
3401d706:	f8c4 3a90 	str.w	r3, [r4, #2704]	@ 0xa90
  tmpreg = READ_REG(RCC->AHB1LPENR);
3401d70a:	f8d4 2290 	ldr.w	r2, [r4, #656]	@ 0x290
3401d70e:	920f      	str	r2, [sp, #60]	@ 0x3c
  (void)tmpreg;
3401d710:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  WRITE_REG(RCC->AHB2LPENSR, Periphs);
3401d712:	f8c4 3a94 	str.w	r3, [r4, #2708]	@ 0xa94
  tmpreg = READ_REG(RCC->AHB2LPENR);
3401d716:	f8d4 2294 	ldr.w	r2, [r4, #660]	@ 0x294
3401d71a:	920e      	str	r2, [sp, #56]	@ 0x38
  (void)tmpreg;
3401d71c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  WRITE_REG(RCC->AHB3LPENSR, Periphs);
3401d71e:	f8c4 3a98 	str.w	r3, [r4, #2712]	@ 0xa98
  tmpreg = READ_REG(RCC->AHB3LPENR);
3401d722:	f8d4 2298 	ldr.w	r2, [r4, #664]	@ 0x298
3401d726:	920d      	str	r2, [sp, #52]	@ 0x34
  (void)tmpreg;
3401d728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  WRITE_REG(RCC->AHB4LPENSR, Periphs);
3401d72a:	f8c4 3a9c 	str.w	r3, [r4, #2716]	@ 0xa9c
  tmpreg = READ_REG(RCC->AHB4LPENR);
3401d72e:	f8d4 229c 	ldr.w	r2, [r4, #668]	@ 0x29c
3401d732:	920c      	str	r2, [sp, #48]	@ 0x30
  (void)tmpreg;
3401d734:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
3401d736:	f8c4 3aa0 	str.w	r3, [r4, #2720]	@ 0xaa0
  tmpreg = READ_REG(RCC->AHB5LPENR);
3401d73a:	f8d4 22a0 	ldr.w	r2, [r4, #672]	@ 0x2a0
3401d73e:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void)tmpreg;
3401d740:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(RCC->APB1LPENSR1, Periphs);
3401d742:	f8c4 3aa4 	str.w	r3, [r4, #2724]	@ 0xaa4
  tmpreg = READ_REG(RCC->APB1LPENR1);
3401d746:	f8d4 22a4 	ldr.w	r2, [r4, #676]	@ 0x2a4
3401d74a:	920a      	str	r2, [sp, #40]	@ 0x28
  (void)tmpreg;
3401d74c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  WRITE_REG(RCC->APB1LPENSR2, Periphs);
3401d74e:	f8c4 3aa8 	str.w	r3, [r4, #2728]	@ 0xaa8
  tmpreg = READ_REG(RCC->APB1LPENR2);
3401d752:	f8d4 22a8 	ldr.w	r2, [r4, #680]	@ 0x2a8
3401d756:	9209      	str	r2, [sp, #36]	@ 0x24
  (void)tmpreg;
3401d758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  WRITE_REG(RCC->APB2LPENSR, Periphs);
3401d75a:	f8c4 3aac 	str.w	r3, [r4, #2732]	@ 0xaac
  tmpreg = READ_REG(RCC->APB2LPENR);
3401d75e:	f8d4 22ac 	ldr.w	r2, [r4, #684]	@ 0x2ac
3401d762:	9208      	str	r2, [sp, #32]
  (void)tmpreg;
3401d764:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(RCC->APB4LPENSR1, Periphs);
3401d766:	f8c4 3ab4 	str.w	r3, [r4, #2740]	@ 0xab4
  tmpreg = READ_REG(RCC->APB4LPENR1);
3401d76a:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
3401d76e:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
3401d770:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(RCC->APB4LPENSR2, Periphs);
3401d772:	f8c4 3ab8 	str.w	r3, [r4, #2744]	@ 0xab8
  tmpreg = READ_REG(RCC->APB4LPENR2);
3401d776:	f8d4 22b8 	ldr.w	r2, [r4, #696]	@ 0x2b8
3401d77a:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
3401d77c:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3401d77e:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
3401d782:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
3401d786:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
3401d788:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_MISC_EnableClockLowPower(uint32_t Misc)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MISCLPENSR, Misc);
3401d78a:	f8c4 3a88 	str.w	r3, [r4, #2696]	@ 0xa88
  /* Delay after an RCC miscellaneous clock enabling */
  tmpreg = READ_REG(RCC->MISCLPENR);
3401d78e:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
3401d792:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
3401d794:	9b04      	ldr	r3, [sp, #16]
  LL_APB4_GRP1_EnableClockLowPower(~0);
  LL_APB4_GRP2_EnableClockLowPower(~0);
  LL_APB5_GRP1_EnableClockLowPower(~0);
  LL_MISC_EnableClockLowPower(~0);

  app_run();
3401d796:	f7ff fa75 	bl	3401cc84 <app_run>

  vTaskDelete(NULL);
3401d79a:	4628      	mov	r0, r5
3401d79c:	f7ec fe96 	bl	3400a4cc <vTaskDelete>
}
3401d7a0:	b01c      	add	sp, #112	@ 0x70
3401d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401d7a6:	bf00      	nop
3401d7a8:	56028000 	.word	0x56028000
3401d7ac:	56021000 	.word	0x56021000
3401d7b0:	3419030c 	.word	0x3419030c
3401d7b4:	52001000 	.word	0x52001000
3401d7b8:	52023100 	.word	0x52023100
3401d7bc:	52023180 	.word	0x52023180
3401d7c0:	52023200 	.word	0x52023200
3401d7c4:	52023280 	.word	0x52023280
3401d7c8:	3000000a 	.word	0x3000000a
3401d7cc:	30000005 	.word	0x30000005
3401d7d0:	2000001c 	.word	0x2000001c
3401d7d4:	2000001d 	.word	0x2000001d
3401d7d8:	30000006 	.word	0x30000006
3401d7dc:	30000007 	.word	0x30000007
3401d7e0:	30000008 	.word	0x30000008
3401d7e4:	10000018 	.word	0x10000018
3401d7e8:	56029000 	.word	0x56029000

3401d7ec <main>:
{
3401d7ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
3401d7ee:	4a3b      	ldr	r2, [pc, #236]	@ (3401d8dc <main+0xf0>)
3401d7f0:	6813      	ldr	r3, [r2, #0]
3401d7f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3401d7f6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
3401d7f8:	4b39      	ldr	r3, [pc, #228]	@ (3401d8e0 <main+0xf4>)
3401d7fa:	6a1a      	ldr	r2, [r3, #32]
3401d7fc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
3401d800:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
3401d802:	6a1a      	ldr	r2, [r3, #32]
3401d804:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
3401d808:	621a      	str	r2, [r3, #32]
  HAL_Init();
3401d80a:	f7f1 fe34 	bl	3400f476 <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
3401d80e:	4b35      	ldr	r3, [pc, #212]	@ (3401d8e4 <main+0xf8>)
3401d810:	695a      	ldr	r2, [r3, #20]
3401d812:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
3401d816:	d111      	bne.n	3401d83c <main+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
3401d818:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d81c:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3401d820:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3401d824:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d828:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
3401d82c:	695a      	ldr	r2, [r3, #20]
3401d82e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3401d832:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3401d834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d838:	f3bf 8f6f 	isb	sy
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
3401d83c:	4a27      	ldr	r2, [pc, #156]	@ (3401d8dc <main+0xf0>)
3401d83e:	6813      	ldr	r3, [r2, #0]
3401d840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3401d844:	6013      	str	r3, [r2, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
3401d846:	f5a2 4273 	sub.w	r2, r2, #62208	@ 0xf300
3401d84a:	6953      	ldr	r3, [r2, #20]
3401d84c:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
3401d850:	d128      	bne.n	3401d8a4 <main+0xb8>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3401d852:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3401d856:	f3bf 8f4f 	dsb	sy
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3401d85a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
3401d85e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3401d862:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3401d866:	f3c3 334e 	ubfx	r3, r3, #13, #15
3401d86a:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3401d86c:	f100 0e01 	add.w	lr, r0, #1
3401d870:	4601      	mov	r1, r0
3401d872:	f04e e001 	dls	lr, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3401d876:	ea03 0604 	and.w	r6, r3, r4
3401d87a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
3401d87e:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
3401d882:	3901      	subs	r1, #1
3401d884:	f00f c807 	le	lr, 3401d87a <main+0x8e>
    } while(sets-- != 0U);
3401d888:	3b20      	subs	r3, #32
3401d88a:	f113 0f20 	cmn.w	r3, #32
3401d88e:	d1ed      	bne.n	3401d86c <main+0x80>
3401d890:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
3401d894:	6953      	ldr	r3, [r2, #20]
3401d896:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3401d89a:	6153      	str	r3, [r2, #20]
3401d89c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401d8a0:	f3bf 8f6f 	isb	sy
  hdl = xTaskCreateStatic(main_thread_fct, "main", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1,
3401d8a4:	4b10      	ldr	r3, [pc, #64]	@ (3401d8e8 <main+0xfc>)
3401d8a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3401d8aa:	9302      	str	r3, [sp, #8]
3401d8ac:	4b0f      	ldr	r3, [pc, #60]	@ (3401d8ec <main+0x100>)
3401d8ae:	4910      	ldr	r1, [pc, #64]	@ (3401d8f0 <main+0x104>)
3401d8b0:	9301      	str	r3, [sp, #4]
3401d8b2:	2301      	movs	r3, #1
3401d8b4:	480f      	ldr	r0, [pc, #60]	@ (3401d8f4 <main+0x108>)
3401d8b6:	9300      	str	r3, [sp, #0]
3401d8b8:	2300      	movs	r3, #0
3401d8ba:	f7ec fd13 	bl	3400a2e4 <xTaskCreateStatic>
  assert(hdl != NULL);
3401d8be:	b930      	cbnz	r0, 3401d8ce <main+0xe2>
3401d8c0:	f44f 7193 	mov.w	r1, #294	@ 0x126
3401d8c4:	4b0c      	ldr	r3, [pc, #48]	@ (3401d8f8 <main+0x10c>)
3401d8c6:	4a0d      	ldr	r2, [pc, #52]	@ (3401d8fc <main+0x110>)
  assert(0);
3401d8c8:	480d      	ldr	r0, [pc, #52]	@ (3401d900 <main+0x114>)
3401d8ca:	f000 f88f 	bl	3401d9ec <__assert_func>
  vTaskStartScheduler();
3401d8ce:	f7ec fe53 	bl	3400a578 <vTaskStartScheduler>
  assert(0);
3401d8d2:	f240 1129 	movw	r1, #297	@ 0x129
3401d8d6:	4b0b      	ldr	r3, [pc, #44]	@ (3401d904 <main+0x118>)
3401d8d8:	4a08      	ldr	r2, [pc, #32]	@ (3401d8fc <main+0x110>)
3401d8da:	e7f5      	b.n	3401d8c8 <main+0xdc>
3401d8dc:	e001e000 	.word	0xe001e000
3401d8e0:	56028000 	.word	0x56028000
3401d8e4:	e000ed00 	.word	0xe000ed00
3401d8e8:	341902ac 	.word	0x341902ac
3401d8ec:	3418f2ac 	.word	0x3418f2ac
3401d8f0:	34026fa6 	.word	0x34026fa6
3401d8f4:	3401d515 	.word	0x3401d515
3401d8f8:	34026ed5 	.word	0x34026ed5
3401d8fc:	340a092c 	.word	0x340a092c
3401d900:	34026fab 	.word	0x34026fab
3401d904:	340235d8 	.word	0x340235d8

3401d908 <IAC_IRQHandler>:
  while (1)
3401d908:	e7fe      	b.n	3401d908 <IAC_IRQHandler>

3401d90a <MX_DCMIPP_ClockConfig>:

HAL_StatusTypeDef MX_DCMIPP_ClockConfig(DCMIPP_HandleTypeDef *hdcmipp)
{
3401d90a:	b500      	push	{lr}
3401d90c:	b0e5      	sub	sp, #404	@ 0x194
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3401d90e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3401d912:	2100      	movs	r1, #0
3401d914:	4668      	mov	r0, sp
3401d916:	f001 f8b3 	bl	3401ea80 <memset>
  HAL_StatusTypeDef ret;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP;
3401d91a:	2300      	movs	r3, #0
3401d91c:	2210      	movs	r2, #16
3401d91e:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
3401d922:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockSelection = RCC_ICCLKSOURCE_PLL2;
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401d926:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  RCC_PeriphCLKInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
3401d92a:	9332      	str	r3, [sp, #200]	@ 0xc8
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401d92c:	2303      	movs	r3, #3
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401d92e:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401d930:	e9cd 1322 	strd	r1, r3, [sp, #136]	@ 0x88
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401d934:	f7f7 fd72 	bl	3401541c <HAL_RCCEx_PeriphCLKConfig>
  if (ret)
3401d938:	b948      	cbnz	r0, 3401d94e <MX_DCMIPP_ClockConfig+0x44>
    return ret;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CSI;
3401d93a:	2300      	movs	r3, #0
3401d93c:	2208      	movs	r2, #8
3401d93e:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockDivider = 40;
3401d942:	2328      	movs	r3, #40	@ 0x28
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3401d944:	9024      	str	r0, [sp, #144]	@ 0x90
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401d946:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockDivider = 40;
3401d948:	9325      	str	r3, [sp, #148]	@ 0x94
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401d94a:	f7f7 fd67 	bl	3401541c <HAL_RCCEx_PeriphCLKConfig>
  if (ret)
    return ret;

  return HAL_OK;
}
3401d94e:	b065      	add	sp, #404	@ 0x194
3401d950:	f85d fb04 	ldr.w	pc, [sp], #4

3401d954 <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3401d954:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401d956:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
3401d95a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
3401d95e:	f7ff fd55 	bl	3401d40c <LL_MEM_EnableClock>
3401d962:	4b08      	ldr	r3, [pc, #32]	@ (3401d984 <HAL_CACHEAXI_MspInit+0x30>)
3401d964:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3401d968:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
3401d96c:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
3401d96e:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401d970:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401d974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3401d978:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
3401d97c:	b003      	add	sp, #12
3401d97e:	f85d fb04 	ldr.w	pc, [sp], #4
3401d982:	bf00      	nop
3401d984:	56028000 	.word	0x56028000

3401d988 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
3401d988:	be00      	bkpt	0x0000
  while (1)
3401d98a:	e7fe      	b.n	3401d98a <assert_failed+0x2>

3401d98c <UTIL_LCDEx_PrintfAt>:
  UTIL_LCD_DisplayStringAtLine(line, (uint8_t *) buffer);
  va_end(args);
}

void UTIL_LCDEx_PrintfAt(uint32_t x_pos, uint32_t y_pos, Text_AlignModeTypdef mode, const char * format, ...)
{
3401d98c:	b408      	push	{r3}
3401d98e:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
3401d990:	4604      	mov	r4, r0
3401d992:	460d      	mov	r5, r1
3401d994:	4616      	mov	r6, r2
3401d996:	ab07      	add	r3, sp, #28
  static char buffer[N_PRINTABLE_CHARS + 1];
  va_list args;
  va_start(args, format);
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401d998:	4f09      	ldr	r7, [pc, #36]	@ (3401d9c0 <UTIL_LCDEx_PrintfAt+0x34>)
{
3401d99a:	f853 2b04 	ldr.w	r2, [r3], #4
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401d99e:	2130      	movs	r1, #48	@ 0x30
3401d9a0:	4638      	mov	r0, r7
  va_start(args, format);
3401d9a2:	9301      	str	r3, [sp, #4]
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401d9a4:	f000 ffb0 	bl	3401e908 <vsniprintf>
  UTIL_LCD_DisplayStringAt(x_pos, y_pos, (uint8_t *) buffer, mode);
3401d9a8:	4633      	mov	r3, r6
3401d9aa:	463a      	mov	r2, r7
3401d9ac:	4629      	mov	r1, r5
3401d9ae:	4620      	mov	r0, r4
3401d9b0:	f7fe fab4 	bl	3401bf1c <UTIL_LCD_DisplayStringAt>
  va_end(args);
}
3401d9b4:	b002      	add	sp, #8
3401d9b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3401d9ba:	b001      	add	sp, #4
3401d9bc:	4770      	bx	lr
3401d9be:	bf00      	nop
3401d9c0:	341903a0 	.word	0x341903a0

3401d9c4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
3401d9c4:	4770      	bx	lr

3401d9c6 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
3401d9c6:	e7fe      	b.n	3401d9c6 <MemManage_Handler>

3401d9c8 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3401d9c8:	e7fe      	b.n	3401d9c8 <BusFault_Handler>

3401d9ca <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
3401d9ca:	e7fe      	b.n	3401d9ca <SecureFault_Handler>

3401d9cc <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
3401d9cc:	e7fe      	b.n	3401d9cc <DebugMon_Handler>

3401d9ce <CSI_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/

void CSI_IRQHandler(void)
{
3401d9ce:	b508      	push	{r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401d9d0:	f7e8 ff3a 	bl	34006848 <CMW_CAMERA_GetDCMIPPHandle>
}
3401d9d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401d9d8:	f7f2 bca8 	b.w	3401032c <HAL_DCMIPP_CSI_IRQHandler>

3401d9dc <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
3401d9dc:	b508      	push	{r3, lr}
  HAL_DCMIPP_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401d9de:	f7e8 ff33 	bl	34006848 <CMW_CAMERA_GetDCMIPPHandle>
}
3401d9e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401d9e6:	f7f2 bb6b 	b.w	340100c0 <HAL_DCMIPP_IRQHandler>
	...

3401d9ec <__assert_func>:
3401d9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3401d9ee:	4614      	mov	r4, r2
3401d9f0:	461a      	mov	r2, r3
3401d9f2:	4b09      	ldr	r3, [pc, #36]	@ (3401da18 <__assert_func+0x2c>)
3401d9f4:	4605      	mov	r5, r0
3401d9f6:	681b      	ldr	r3, [r3, #0]
3401d9f8:	68d8      	ldr	r0, [r3, #12]
3401d9fa:	b14c      	cbz	r4, 3401da10 <__assert_func+0x24>
3401d9fc:	4b07      	ldr	r3, [pc, #28]	@ (3401da1c <__assert_func+0x30>)
3401d9fe:	9100      	str	r1, [sp, #0]
3401da00:	4907      	ldr	r1, [pc, #28]	@ (3401da20 <__assert_func+0x34>)
3401da02:	e9cd 3401 	strd	r3, r4, [sp, #4]
3401da06:	462b      	mov	r3, r5
3401da08:	f000 fe6c 	bl	3401e6e4 <fiprintf>
3401da0c:	f001 facc 	bl	3401efa8 <abort>
3401da10:	4b04      	ldr	r3, [pc, #16]	@ (3401da24 <__assert_func+0x38>)
3401da12:	461c      	mov	r4, r3
3401da14:	e7f3      	b.n	3401d9fe <__assert_func+0x12>
3401da16:	bf00      	nop
3401da18:	340a3258 	.word	0x340a3258
3401da1c:	34026fd1 	.word	0x34026fd1
3401da20:	34026fde 	.word	0x34026fde
3401da24:	34022f50 	.word	0x34022f50

3401da28 <swapfunc>:
3401da28:	2b02      	cmp	r3, #2
3401da2a:	b510      	push	{r4, lr}
3401da2c:	d00a      	beq.n	3401da44 <swapfunc+0x1c>
3401da2e:	0892      	lsrs	r2, r2, #2
3401da30:	3a01      	subs	r2, #1
3401da32:	6803      	ldr	r3, [r0, #0]
3401da34:	680c      	ldr	r4, [r1, #0]
3401da36:	2a00      	cmp	r2, #0
3401da38:	f840 4b04 	str.w	r4, [r0], #4
3401da3c:	f841 3b04 	str.w	r3, [r1], #4
3401da40:	dcf6      	bgt.n	3401da30 <swapfunc+0x8>
3401da42:	bd10      	pop	{r4, pc}
3401da44:	4402      	add	r2, r0
3401da46:	7803      	ldrb	r3, [r0, #0]
3401da48:	780c      	ldrb	r4, [r1, #0]
3401da4a:	f800 4b01 	strb.w	r4, [r0], #1
3401da4e:	f801 3b01 	strb.w	r3, [r1], #1
3401da52:	1a13      	subs	r3, r2, r0
3401da54:	2b00      	cmp	r3, #0
3401da56:	dcf6      	bgt.n	3401da46 <swapfunc+0x1e>
3401da58:	e7f3      	b.n	3401da42 <swapfunc+0x1a>

3401da5a <med3.constprop.0>:
3401da5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401da5c:	460f      	mov	r7, r1
3401da5e:	4616      	mov	r6, r2
3401da60:	4604      	mov	r4, r0
3401da62:	461d      	mov	r5, r3
3401da64:	4798      	blx	r3
3401da66:	2800      	cmp	r0, #0
3401da68:	4631      	mov	r1, r6
3401da6a:	4638      	mov	r0, r7
3401da6c:	da0c      	bge.n	3401da88 <med3.constprop.0+0x2e>
3401da6e:	47a8      	blx	r5
3401da70:	2800      	cmp	r0, #0
3401da72:	da02      	bge.n	3401da7a <med3.constprop.0+0x20>
3401da74:	463c      	mov	r4, r7
3401da76:	4620      	mov	r0, r4
3401da78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401da7a:	4631      	mov	r1, r6
3401da7c:	4620      	mov	r0, r4
3401da7e:	47a8      	blx	r5
3401da80:	2800      	cmp	r0, #0
3401da82:	daf8      	bge.n	3401da76 <med3.constprop.0+0x1c>
3401da84:	4634      	mov	r4, r6
3401da86:	e7f6      	b.n	3401da76 <med3.constprop.0+0x1c>
3401da88:	47a8      	blx	r5
3401da8a:	2800      	cmp	r0, #0
3401da8c:	dcf2      	bgt.n	3401da74 <med3.constprop.0+0x1a>
3401da8e:	4631      	mov	r1, r6
3401da90:	4620      	mov	r0, r4
3401da92:	47a8      	blx	r5
3401da94:	2800      	cmp	r0, #0
3401da96:	daf5      	bge.n	3401da84 <med3.constprop.0+0x2a>
3401da98:	e7ed      	b.n	3401da76 <med3.constprop.0+0x1c>

3401da9a <qsort>:
3401da9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401da9e:	b095      	sub	sp, #84	@ 0x54
3401daa0:	4607      	mov	r7, r0
3401daa2:	4615      	mov	r5, r2
3401daa4:	9300      	str	r3, [sp, #0]
3401daa6:	ea40 0302 	orr.w	r3, r0, r2
3401daaa:	079b      	lsls	r3, r3, #30
3401daac:	d119      	bne.n	3401dae2 <qsort+0x48>
3401daae:	f1b2 0804 	subs.w	r8, r2, #4
3401dab2:	bf18      	it	ne
3401dab4:	f04f 0801 	movne.w	r8, #1
3401dab8:	2300      	movs	r3, #0
3401daba:	9301      	str	r3, [sp, #4]
3401dabc:	fb05 f401 	mul.w	r4, r5, r1
3401dac0:	2906      	cmp	r1, #6
3401dac2:	eb07 0b05 	add.w	fp, r7, r5
3401dac6:	eb07 0304 	add.w	r3, r7, r4
3401daca:	9302      	str	r3, [sp, #8]
3401dacc:	d828      	bhi.n	3401db20 <qsort+0x86>
3401dace:	9b02      	ldr	r3, [sp, #8]
3401dad0:	459b      	cmp	fp, r3
3401dad2:	d310      	bcc.n	3401daf6 <qsort+0x5c>
3401dad4:	9b01      	ldr	r3, [sp, #4]
3401dad6:	2b00      	cmp	r3, #0
3401dad8:	f040 8117 	bne.w	3401dd0a <qsort+0x270>
3401dadc:	b015      	add	sp, #84	@ 0x54
3401dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401dae2:	f04f 0802 	mov.w	r8, #2
3401dae6:	e7e7      	b.n	3401dab8 <qsort+0x1e>
3401dae8:	4643      	mov	r3, r8
3401daea:	462a      	mov	r2, r5
3401daec:	4631      	mov	r1, r6
3401daee:	4620      	mov	r0, r4
3401daf0:	f7ff ff9a 	bl	3401da28 <swapfunc>
3401daf4:	e00f      	b.n	3401db16 <qsort+0x7c>
3401daf6:	465c      	mov	r4, fp
3401daf8:	e00e      	b.n	3401db18 <qsort+0x7e>
3401dafa:	1b66      	subs	r6, r4, r5
3401dafc:	4621      	mov	r1, r4
3401dafe:	9b00      	ldr	r3, [sp, #0]
3401db00:	4630      	mov	r0, r6
3401db02:	4798      	blx	r3
3401db04:	2800      	cmp	r0, #0
3401db06:	dd09      	ble.n	3401db1c <qsort+0x82>
3401db08:	f1b8 0f00 	cmp.w	r8, #0
3401db0c:	d1ec      	bne.n	3401dae8 <qsort+0x4e>
3401db0e:	6823      	ldr	r3, [r4, #0]
3401db10:	6832      	ldr	r2, [r6, #0]
3401db12:	6022      	str	r2, [r4, #0]
3401db14:	6033      	str	r3, [r6, #0]
3401db16:	4634      	mov	r4, r6
3401db18:	42a7      	cmp	r7, r4
3401db1a:	d3ee      	bcc.n	3401dafa <qsort+0x60>
3401db1c:	44ab      	add	fp, r5
3401db1e:	e7d6      	b.n	3401dace <qsort+0x34>
3401db20:	ea4f 0951 	mov.w	r9, r1, lsr #1
3401db24:	1b64      	subs	r4, r4, r5
3401db26:	2907      	cmp	r1, #7
3401db28:	fb05 7909 	mla	r9, r5, r9, r7
3401db2c:	443c      	add	r4, r7
3401db2e:	d021      	beq.n	3401db74 <qsort+0xda>
3401db30:	2928      	cmp	r1, #40	@ 0x28
3401db32:	d944      	bls.n	3401dbbe <qsort+0x124>
3401db34:	08ce      	lsrs	r6, r1, #3
3401db36:	9b00      	ldr	r3, [sp, #0]
3401db38:	4638      	mov	r0, r7
3401db3a:	436e      	muls	r6, r5
3401db3c:	eb07 0246 	add.w	r2, r7, r6, lsl #1
3401db40:	19b9      	adds	r1, r7, r6
3401db42:	f7ff ff8a 	bl	3401da5a <med3.constprop.0>
3401db46:	4649      	mov	r1, r9
3401db48:	eb09 0206 	add.w	r2, r9, r6
3401db4c:	9b00      	ldr	r3, [sp, #0]
3401db4e:	4682      	mov	sl, r0
3401db50:	1b88      	subs	r0, r1, r6
3401db52:	f7ff ff82 	bl	3401da5a <med3.constprop.0>
3401db56:	4622      	mov	r2, r4
3401db58:	4681      	mov	r9, r0
3401db5a:	9b00      	ldr	r3, [sp, #0]
3401db5c:	1ba1      	subs	r1, r4, r6
3401db5e:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
3401db62:	f7ff ff7a 	bl	3401da5a <med3.constprop.0>
3401db66:	4602      	mov	r2, r0
3401db68:	4649      	mov	r1, r9
3401db6a:	9b00      	ldr	r3, [sp, #0]
3401db6c:	4650      	mov	r0, sl
3401db6e:	f7ff ff74 	bl	3401da5a <med3.constprop.0>
3401db72:	4681      	mov	r9, r0
3401db74:	f1b8 0f00 	cmp.w	r8, #0
3401db78:	d124      	bne.n	3401dbc4 <qsort+0x12a>
3401db7a:	683b      	ldr	r3, [r7, #0]
3401db7c:	f8d9 2000 	ldr.w	r2, [r9]
3401db80:	603a      	str	r2, [r7, #0]
3401db82:	f8c9 3000 	str.w	r3, [r9]
3401db86:	46d9      	mov	r9, fp
3401db88:	46a2      	mov	sl, r4
3401db8a:	465e      	mov	r6, fp
3401db8c:	2300      	movs	r3, #0
3401db8e:	45a1      	cmp	r9, r4
3401db90:	d836      	bhi.n	3401dc00 <qsort+0x166>
3401db92:	9303      	str	r3, [sp, #12]
3401db94:	4639      	mov	r1, r7
3401db96:	9b00      	ldr	r3, [sp, #0]
3401db98:	4648      	mov	r0, r9
3401db9a:	4798      	blx	r3
3401db9c:	2800      	cmp	r0, #0
3401db9e:	9b03      	ldr	r3, [sp, #12]
3401dba0:	dc2c      	bgt.n	3401dbfc <qsort+0x162>
3401dba2:	d10a      	bne.n	3401dbba <qsort+0x120>
3401dba4:	f1b8 0f00 	cmp.w	r8, #0
3401dba8:	d113      	bne.n	3401dbd2 <qsort+0x138>
3401dbaa:	6833      	ldr	r3, [r6, #0]
3401dbac:	f8d9 2000 	ldr.w	r2, [r9]
3401dbb0:	6032      	str	r2, [r6, #0]
3401dbb2:	f8c9 3000 	str.w	r3, [r9]
3401dbb6:	442e      	add	r6, r5
3401dbb8:	2301      	movs	r3, #1
3401dbba:	44a9      	add	r9, r5
3401dbbc:	e7e7      	b.n	3401db8e <qsort+0xf4>
3401dbbe:	4622      	mov	r2, r4
3401dbc0:	46ba      	mov	sl, r7
3401dbc2:	e7d1      	b.n	3401db68 <qsort+0xce>
3401dbc4:	4643      	mov	r3, r8
3401dbc6:	462a      	mov	r2, r5
3401dbc8:	4649      	mov	r1, r9
3401dbca:	4638      	mov	r0, r7
3401dbcc:	f7ff ff2c 	bl	3401da28 <swapfunc>
3401dbd0:	e7d9      	b.n	3401db86 <qsort+0xec>
3401dbd2:	4643      	mov	r3, r8
3401dbd4:	462a      	mov	r2, r5
3401dbd6:	4649      	mov	r1, r9
3401dbd8:	4630      	mov	r0, r6
3401dbda:	f7ff ff25 	bl	3401da28 <swapfunc>
3401dbde:	e7ea      	b.n	3401dbb6 <qsort+0x11c>
3401dbe0:	d10b      	bne.n	3401dbfa <qsort+0x160>
3401dbe2:	f1b8 0f00 	cmp.w	r8, #0
3401dbe6:	d113      	bne.n	3401dc10 <qsort+0x176>
3401dbe8:	6823      	ldr	r3, [r4, #0]
3401dbea:	f8da 2000 	ldr.w	r2, [sl]
3401dbee:	6022      	str	r2, [r4, #0]
3401dbf0:	f8ca 3000 	str.w	r3, [sl]
3401dbf4:	ebaa 0a05 	sub.w	sl, sl, r5
3401dbf8:	2301      	movs	r3, #1
3401dbfa:	1b64      	subs	r4, r4, r5
3401dbfc:	45a1      	cmp	r9, r4
3401dbfe:	d90e      	bls.n	3401dc1e <qsort+0x184>
3401dc00:	2b00      	cmp	r3, #0
3401dc02:	d140      	bne.n	3401dc86 <qsort+0x1ec>
3401dc04:	9b02      	ldr	r3, [sp, #8]
3401dc06:	459b      	cmp	fp, r3
3401dc08:	f4bf af64 	bcs.w	3401dad4 <qsort+0x3a>
3401dc0c:	465c      	mov	r4, fp
3401dc0e:	e036      	b.n	3401dc7e <qsort+0x1e4>
3401dc10:	4643      	mov	r3, r8
3401dc12:	462a      	mov	r2, r5
3401dc14:	4651      	mov	r1, sl
3401dc16:	4620      	mov	r0, r4
3401dc18:	f7ff ff06 	bl	3401da28 <swapfunc>
3401dc1c:	e7ea      	b.n	3401dbf4 <qsort+0x15a>
3401dc1e:	9303      	str	r3, [sp, #12]
3401dc20:	4639      	mov	r1, r7
3401dc22:	9b00      	ldr	r3, [sp, #0]
3401dc24:	4620      	mov	r0, r4
3401dc26:	4798      	blx	r3
3401dc28:	2800      	cmp	r0, #0
3401dc2a:	9b03      	ldr	r3, [sp, #12]
3401dc2c:	dad8      	bge.n	3401dbe0 <qsort+0x146>
3401dc2e:	f1b8 0f00 	cmp.w	r8, #0
3401dc32:	d107      	bne.n	3401dc44 <qsort+0x1aa>
3401dc34:	f8d9 3000 	ldr.w	r3, [r9]
3401dc38:	6822      	ldr	r2, [r4, #0]
3401dc3a:	f8c9 2000 	str.w	r2, [r9]
3401dc3e:	6023      	str	r3, [r4, #0]
3401dc40:	1b64      	subs	r4, r4, r5
3401dc42:	e7b9      	b.n	3401dbb8 <qsort+0x11e>
3401dc44:	4643      	mov	r3, r8
3401dc46:	462a      	mov	r2, r5
3401dc48:	4621      	mov	r1, r4
3401dc4a:	4648      	mov	r0, r9
3401dc4c:	f7ff feec 	bl	3401da28 <swapfunc>
3401dc50:	e7f6      	b.n	3401dc40 <qsort+0x1a6>
3401dc52:	4643      	mov	r3, r8
3401dc54:	462a      	mov	r2, r5
3401dc56:	4631      	mov	r1, r6
3401dc58:	4620      	mov	r0, r4
3401dc5a:	f7ff fee5 	bl	3401da28 <swapfunc>
3401dc5e:	e00d      	b.n	3401dc7c <qsort+0x1e2>
3401dc60:	1b66      	subs	r6, r4, r5
3401dc62:	4621      	mov	r1, r4
3401dc64:	9b00      	ldr	r3, [sp, #0]
3401dc66:	4630      	mov	r0, r6
3401dc68:	4798      	blx	r3
3401dc6a:	2800      	cmp	r0, #0
3401dc6c:	dd09      	ble.n	3401dc82 <qsort+0x1e8>
3401dc6e:	f1b8 0f00 	cmp.w	r8, #0
3401dc72:	d1ee      	bne.n	3401dc52 <qsort+0x1b8>
3401dc74:	6823      	ldr	r3, [r4, #0]
3401dc76:	6832      	ldr	r2, [r6, #0]
3401dc78:	6022      	str	r2, [r4, #0]
3401dc7a:	6033      	str	r3, [r6, #0]
3401dc7c:	4634      	mov	r4, r6
3401dc7e:	42a7      	cmp	r7, r4
3401dc80:	d3ee      	bcc.n	3401dc60 <qsort+0x1c6>
3401dc82:	44ab      	add	fp, r5
3401dc84:	e7be      	b.n	3401dc04 <qsort+0x16a>
3401dc86:	eba9 0b06 	sub.w	fp, r9, r6
3401dc8a:	1bf2      	subs	r2, r6, r7
3401dc8c:	455a      	cmp	r2, fp
3401dc8e:	bfa8      	it	ge
3401dc90:	465a      	movge	r2, fp
3401dc92:	b12a      	cbz	r2, 3401dca0 <qsort+0x206>
3401dc94:	4643      	mov	r3, r8
3401dc96:	eba9 0102 	sub.w	r1, r9, r2
3401dc9a:	4638      	mov	r0, r7
3401dc9c:	f7ff fec4 	bl	3401da28 <swapfunc>
3401dca0:	9b02      	ldr	r3, [sp, #8]
3401dca2:	ebaa 0404 	sub.w	r4, sl, r4
3401dca6:	eba3 020a 	sub.w	r2, r3, sl
3401dcaa:	1b52      	subs	r2, r2, r5
3401dcac:	42a2      	cmp	r2, r4
3401dcae:	bf28      	it	cs
3401dcb0:	4622      	movcs	r2, r4
3401dcb2:	b12a      	cbz	r2, 3401dcc0 <qsort+0x226>
3401dcb4:	9902      	ldr	r1, [sp, #8]
3401dcb6:	4643      	mov	r3, r8
3401dcb8:	4648      	mov	r0, r9
3401dcba:	1a89      	subs	r1, r1, r2
3401dcbc:	f7ff feb4 	bl	3401da28 <swapfunc>
3401dcc0:	9b02      	ldr	r3, [sp, #8]
3401dcc2:	455c      	cmp	r4, fp
3401dcc4:	eba3 0604 	sub.w	r6, r3, r4
3401dcc8:	d805      	bhi.n	3401dcd6 <qsort+0x23c>
3401dcca:	4623      	mov	r3, r4
3401dccc:	465c      	mov	r4, fp
3401dcce:	469b      	mov	fp, r3
3401dcd0:	4633      	mov	r3, r6
3401dcd2:	463e      	mov	r6, r7
3401dcd4:	461f      	mov	r7, r3
3401dcd6:	45ab      	cmp	fp, r5
3401dcd8:	d920      	bls.n	3401dd1c <qsort+0x282>
3401dcda:	9b01      	ldr	r3, [sp, #4]
3401dcdc:	2b07      	cmp	r3, #7
3401dcde:	fbbb f1f5 	udiv	r1, fp, r5
3401dce2:	d80b      	bhi.n	3401dcfc <qsort+0x262>
3401dce4:	aa14      	add	r2, sp, #80	@ 0x50
3401dce6:	fbb4 f4f5 	udiv	r4, r4, r5
3401dcea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
3401dcee:	f843 6c40 	str.w	r6, [r3, #-64]
3401dcf2:	f843 4c3c 	str.w	r4, [r3, #-60]
3401dcf6:	9b01      	ldr	r3, [sp, #4]
3401dcf8:	3301      	adds	r3, #1
3401dcfa:	e6de      	b.n	3401daba <qsort+0x20>
3401dcfc:	9b00      	ldr	r3, [sp, #0]
3401dcfe:	462a      	mov	r2, r5
3401dd00:	4638      	mov	r0, r7
3401dd02:	f7ff feca 	bl	3401da9a <qsort>
3401dd06:	42ac      	cmp	r4, r5
3401dd08:	d80b      	bhi.n	3401dd22 <qsort+0x288>
3401dd0a:	9b01      	ldr	r3, [sp, #4]
3401dd0c:	aa14      	add	r2, sp, #80	@ 0x50
3401dd0e:	3b01      	subs	r3, #1
3401dd10:	9301      	str	r3, [sp, #4]
3401dd12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
3401dd16:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
3401dd1a:	e6cf      	b.n	3401dabc <qsort+0x22>
3401dd1c:	42ac      	cmp	r4, r5
3401dd1e:	f67f aed9 	bls.w	3401dad4 <qsort+0x3a>
3401dd22:	4637      	mov	r7, r6
3401dd24:	fbb4 f1f5 	udiv	r1, r4, r5
3401dd28:	e6c8      	b.n	3401dabc <qsort+0x22>

3401dd2a <__cvt>:
3401dd2a:	b5f0      	push	{r4, r5, r6, r7, lr}
3401dd2c:	ed2d 8b02 	vpush	{d8}
3401dd30:	eeb0 8b40 	vmov.f64	d8, d0
3401dd34:	b085      	sub	sp, #20
3401dd36:	4617      	mov	r7, r2
3401dd38:	460c      	mov	r4, r1
3401dd3a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3401dd3c:	ee18 2a90 	vmov	r2, s17
3401dd40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401dd42:	f025 0520 	bic.w	r5, r5, #32
3401dd46:	2a00      	cmp	r2, #0
3401dd48:	bfb6      	itet	lt
3401dd4a:	222d      	movlt	r2, #45	@ 0x2d
3401dd4c:	2200      	movge	r2, #0
3401dd4e:	eeb1 8b40 	vneglt.f64	d8, d0
3401dd52:	2d46      	cmp	r5, #70	@ 0x46
3401dd54:	701a      	strb	r2, [r3, #0]
3401dd56:	d004      	beq.n	3401dd62 <__cvt+0x38>
3401dd58:	2d45      	cmp	r5, #69	@ 0x45
3401dd5a:	d100      	bne.n	3401dd5e <__cvt+0x34>
3401dd5c:	3401      	adds	r4, #1
3401dd5e:	2102      	movs	r1, #2
3401dd60:	e000      	b.n	3401dd64 <__cvt+0x3a>
3401dd62:	2103      	movs	r1, #3
3401dd64:	ab03      	add	r3, sp, #12
3401dd66:	eeb0 0b48 	vmov.f64	d0, d8
3401dd6a:	4622      	mov	r2, r4
3401dd6c:	9301      	str	r3, [sp, #4]
3401dd6e:	ab02      	add	r3, sp, #8
3401dd70:	9300      	str	r3, [sp, #0]
3401dd72:	4633      	mov	r3, r6
3401dd74:	f001 f9ac 	bl	3401f0d0 <_dtoa_r>
3401dd78:	2d47      	cmp	r5, #71	@ 0x47
3401dd7a:	d114      	bne.n	3401dda6 <__cvt+0x7c>
3401dd7c:	07fb      	lsls	r3, r7, #31
3401dd7e:	d50a      	bpl.n	3401dd96 <__cvt+0x6c>
3401dd80:	1902      	adds	r2, r0, r4
3401dd82:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401dd86:	2130      	movs	r1, #48	@ 0x30
3401dd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dd8c:	bf08      	it	eq
3401dd8e:	9203      	streq	r2, [sp, #12]
3401dd90:	9b03      	ldr	r3, [sp, #12]
3401dd92:	4293      	cmp	r3, r2
3401dd94:	d319      	bcc.n	3401ddca <__cvt+0xa0>
3401dd96:	9b03      	ldr	r3, [sp, #12]
3401dd98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401dd9a:	1a1b      	subs	r3, r3, r0
3401dd9c:	6013      	str	r3, [r2, #0]
3401dd9e:	b005      	add	sp, #20
3401dda0:	ecbd 8b02 	vpop	{d8}
3401dda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401dda6:	2d46      	cmp	r5, #70	@ 0x46
3401dda8:	eb00 0204 	add.w	r2, r0, r4
3401ddac:	d1e9      	bne.n	3401dd82 <__cvt+0x58>
3401ddae:	7803      	ldrb	r3, [r0, #0]
3401ddb0:	2b30      	cmp	r3, #48	@ 0x30
3401ddb2:	d107      	bne.n	3401ddc4 <__cvt+0x9a>
3401ddb4:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401ddbc:	bf1c      	itt	ne
3401ddbe:	f1c4 0401 	rsbne	r4, r4, #1
3401ddc2:	6034      	strne	r4, [r6, #0]
3401ddc4:	6833      	ldr	r3, [r6, #0]
3401ddc6:	441a      	add	r2, r3
3401ddc8:	e7db      	b.n	3401dd82 <__cvt+0x58>
3401ddca:	1c5c      	adds	r4, r3, #1
3401ddcc:	9403      	str	r4, [sp, #12]
3401ddce:	7019      	strb	r1, [r3, #0]
3401ddd0:	e7de      	b.n	3401dd90 <__cvt+0x66>

3401ddd2 <__exponent>:
3401ddd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401ddd4:	2900      	cmp	r1, #0
3401ddd6:	7002      	strb	r2, [r0, #0]
3401ddd8:	bfba      	itte	lt
3401ddda:	4249      	neglt	r1, r1
3401dddc:	232d      	movlt	r3, #45	@ 0x2d
3401ddde:	232b      	movge	r3, #43	@ 0x2b
3401dde0:	2909      	cmp	r1, #9
3401dde2:	7043      	strb	r3, [r0, #1]
3401dde4:	dd28      	ble.n	3401de38 <__exponent+0x66>
3401dde6:	f10d 0307 	add.w	r3, sp, #7
3401ddea:	270a      	movs	r7, #10
3401ddec:	461d      	mov	r5, r3
3401ddee:	461a      	mov	r2, r3
3401ddf0:	3b01      	subs	r3, #1
3401ddf2:	fbb1 f6f7 	udiv	r6, r1, r7
3401ddf6:	fb07 1416 	mls	r4, r7, r6, r1
3401ddfa:	3430      	adds	r4, #48	@ 0x30
3401ddfc:	f802 4c01 	strb.w	r4, [r2, #-1]
3401de00:	460c      	mov	r4, r1
3401de02:	4631      	mov	r1, r6
3401de04:	2c63      	cmp	r4, #99	@ 0x63
3401de06:	dcf2      	bgt.n	3401ddee <__exponent+0x1c>
3401de08:	3130      	adds	r1, #48	@ 0x30
3401de0a:	1e94      	subs	r4, r2, #2
3401de0c:	f803 1c01 	strb.w	r1, [r3, #-1]
3401de10:	1c41      	adds	r1, r0, #1
3401de12:	4623      	mov	r3, r4
3401de14:	42ab      	cmp	r3, r5
3401de16:	d30a      	bcc.n	3401de2e <__exponent+0x5c>
3401de18:	f10d 0309 	add.w	r3, sp, #9
3401de1c:	1a9b      	subs	r3, r3, r2
3401de1e:	42ac      	cmp	r4, r5
3401de20:	bf88      	it	hi
3401de22:	2300      	movhi	r3, #0
3401de24:	3302      	adds	r3, #2
3401de26:	4403      	add	r3, r0
3401de28:	1a18      	subs	r0, r3, r0
3401de2a:	b003      	add	sp, #12
3401de2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401de2e:	f813 6b01 	ldrb.w	r6, [r3], #1
3401de32:	f801 6f01 	strb.w	r6, [r1, #1]!
3401de36:	e7ed      	b.n	3401de14 <__exponent+0x42>
3401de38:	2330      	movs	r3, #48	@ 0x30
3401de3a:	3130      	adds	r1, #48	@ 0x30
3401de3c:	7083      	strb	r3, [r0, #2]
3401de3e:	1d03      	adds	r3, r0, #4
3401de40:	70c1      	strb	r1, [r0, #3]
3401de42:	e7f1      	b.n	3401de28 <__exponent+0x56>
3401de44:	0000      	movs	r0, r0
	...

3401de48 <_printf_float>:
3401de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401de4c:	b08d      	sub	sp, #52	@ 0x34
3401de4e:	460c      	mov	r4, r1
3401de50:	4616      	mov	r6, r2
3401de52:	461f      	mov	r7, r3
3401de54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3401de58:	4605      	mov	r5, r0
3401de5a:	f001 f80b 	bl	3401ee74 <_localeconv_r>
3401de5e:	f8d0 b000 	ldr.w	fp, [r0]
3401de62:	4658      	mov	r0, fp
3401de64:	f7e2 fc94 	bl	34000790 <strlen>
3401de68:	2300      	movs	r3, #0
3401de6a:	f894 9018 	ldrb.w	r9, [r4, #24]
3401de6e:	930a      	str	r3, [sp, #40]	@ 0x28
3401de70:	f8d8 3000 	ldr.w	r3, [r8]
3401de74:	6822      	ldr	r2, [r4, #0]
3401de76:	3307      	adds	r3, #7
3401de78:	9005      	str	r0, [sp, #20]
3401de7a:	f023 0307 	bic.w	r3, r3, #7
3401de7e:	f103 0108 	add.w	r1, r3, #8
3401de82:	f8c8 1000 	str.w	r1, [r8]
3401de86:	ed93 0b00 	vldr	d0, [r3]
3401de8a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3401e0e8 <_printf_float+0x2a0>
3401de8e:	eeb0 7bc0 	vabs.f64	d7, d0
3401de92:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3401de96:	eeb4 7b46 	vcmp.f64	d7, d6
3401de9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401de9e:	dd24      	ble.n	3401deea <_printf_float+0xa2>
3401dea0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3401dea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401dea8:	d502      	bpl.n	3401deb0 <_printf_float+0x68>
3401deaa:	232d      	movs	r3, #45	@ 0x2d
3401deac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401deb0:	498f      	ldr	r1, [pc, #572]	@ (3401e0f0 <_printf_float+0x2a8>)
3401deb2:	4b90      	ldr	r3, [pc, #576]	@ (3401e0f4 <_printf_float+0x2ac>)
3401deb4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3401deb8:	bf8c      	ite	hi
3401deba:	4688      	movhi	r8, r1
3401debc:	4698      	movls	r8, r3
3401debe:	f022 0204 	bic.w	r2, r2, #4
3401dec2:	2303      	movs	r3, #3
3401dec4:	f04f 0a00 	mov.w	sl, #0
3401dec8:	6022      	str	r2, [r4, #0]
3401deca:	6123      	str	r3, [r4, #16]
3401decc:	4633      	mov	r3, r6
3401dece:	aa0b      	add	r2, sp, #44	@ 0x2c
3401ded0:	4621      	mov	r1, r4
3401ded2:	4628      	mov	r0, r5
3401ded4:	9700      	str	r7, [sp, #0]
3401ded6:	f000 f9d1 	bl	3401e27c <_printf_common>
3401deda:	3001      	adds	r0, #1
3401dedc:	f040 8089 	bne.w	3401dff2 <_printf_float+0x1aa>
3401dee0:	f04f 30ff 	mov.w	r0, #4294967295
3401dee4:	b00d      	add	sp, #52	@ 0x34
3401dee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401deea:	eeb4 0b40 	vcmp.f64	d0, d0
3401deee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401def2:	d709      	bvc.n	3401df08 <_printf_float+0xc0>
3401def4:	ee10 3a90 	vmov	r3, s1
3401def8:	497f      	ldr	r1, [pc, #508]	@ (3401e0f8 <_printf_float+0x2b0>)
3401defa:	2b00      	cmp	r3, #0
3401defc:	bfbc      	itt	lt
3401defe:	232d      	movlt	r3, #45	@ 0x2d
3401df00:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3401df04:	4b7d      	ldr	r3, [pc, #500]	@ (3401e0fc <_printf_float+0x2b4>)
3401df06:	e7d5      	b.n	3401deb4 <_printf_float+0x6c>
3401df08:	6863      	ldr	r3, [r4, #4]
3401df0a:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3401df0e:	1c59      	adds	r1, r3, #1
3401df10:	d139      	bne.n	3401df86 <_printf_float+0x13e>
3401df12:	2306      	movs	r3, #6
3401df14:	6063      	str	r3, [r4, #4]
3401df16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3401df1a:	2300      	movs	r3, #0
3401df1c:	4628      	mov	r0, r5
3401df1e:	6022      	str	r2, [r4, #0]
3401df20:	9303      	str	r3, [sp, #12]
3401df22:	ab0a      	add	r3, sp, #40	@ 0x28
3401df24:	e9cd 9301 	strd	r9, r3, [sp, #4]
3401df28:	ab09      	add	r3, sp, #36	@ 0x24
3401df2a:	9300      	str	r3, [sp, #0]
3401df2c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3401df30:	6861      	ldr	r1, [r4, #4]
3401df32:	f7ff fefa 	bl	3401dd2a <__cvt>
3401df36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401df3a:	4680      	mov	r8, r0
3401df3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401df3e:	d129      	bne.n	3401df94 <_printf_float+0x14c>
3401df40:	1cc8      	adds	r0, r1, #3
3401df42:	db02      	blt.n	3401df4a <_printf_float+0x102>
3401df44:	6863      	ldr	r3, [r4, #4]
3401df46:	4299      	cmp	r1, r3
3401df48:	dd41      	ble.n	3401dfce <_printf_float+0x186>
3401df4a:	f1a9 0902 	sub.w	r9, r9, #2
3401df4e:	fa5f f989 	uxtb.w	r9, r9
3401df52:	3901      	subs	r1, #1
3401df54:	464a      	mov	r2, r9
3401df56:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401df5a:	9109      	str	r1, [sp, #36]	@ 0x24
3401df5c:	f7ff ff39 	bl	3401ddd2 <__exponent>
3401df60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401df62:	4682      	mov	sl, r0
3401df64:	1813      	adds	r3, r2, r0
3401df66:	2a01      	cmp	r2, #1
3401df68:	6123      	str	r3, [r4, #16]
3401df6a:	dc02      	bgt.n	3401df72 <_printf_float+0x12a>
3401df6c:	6822      	ldr	r2, [r4, #0]
3401df6e:	07d2      	lsls	r2, r2, #31
3401df70:	d501      	bpl.n	3401df76 <_printf_float+0x12e>
3401df72:	3301      	adds	r3, #1
3401df74:	6123      	str	r3, [r4, #16]
3401df76:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3401df7a:	2b00      	cmp	r3, #0
3401df7c:	d0a6      	beq.n	3401decc <_printf_float+0x84>
3401df7e:	232d      	movs	r3, #45	@ 0x2d
3401df80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401df84:	e7a2      	b.n	3401decc <_printf_float+0x84>
3401df86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401df8a:	d1c4      	bne.n	3401df16 <_printf_float+0xce>
3401df8c:	2b00      	cmp	r3, #0
3401df8e:	d1c2      	bne.n	3401df16 <_printf_float+0xce>
3401df90:	2301      	movs	r3, #1
3401df92:	e7bf      	b.n	3401df14 <_printf_float+0xcc>
3401df94:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401df98:	d9db      	bls.n	3401df52 <_printf_float+0x10a>
3401df9a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3401df9e:	d118      	bne.n	3401dfd2 <_printf_float+0x18a>
3401dfa0:	2900      	cmp	r1, #0
3401dfa2:	6863      	ldr	r3, [r4, #4]
3401dfa4:	dd0b      	ble.n	3401dfbe <_printf_float+0x176>
3401dfa6:	6121      	str	r1, [r4, #16]
3401dfa8:	b913      	cbnz	r3, 3401dfb0 <_printf_float+0x168>
3401dfaa:	6822      	ldr	r2, [r4, #0]
3401dfac:	07d0      	lsls	r0, r2, #31
3401dfae:	d502      	bpl.n	3401dfb6 <_printf_float+0x16e>
3401dfb0:	3301      	adds	r3, #1
3401dfb2:	440b      	add	r3, r1
3401dfb4:	6123      	str	r3, [r4, #16]
3401dfb6:	f04f 0a00 	mov.w	sl, #0
3401dfba:	65a1      	str	r1, [r4, #88]	@ 0x58
3401dfbc:	e7db      	b.n	3401df76 <_printf_float+0x12e>
3401dfbe:	b913      	cbnz	r3, 3401dfc6 <_printf_float+0x17e>
3401dfc0:	6822      	ldr	r2, [r4, #0]
3401dfc2:	07d2      	lsls	r2, r2, #31
3401dfc4:	d501      	bpl.n	3401dfca <_printf_float+0x182>
3401dfc6:	3302      	adds	r3, #2
3401dfc8:	e7f4      	b.n	3401dfb4 <_printf_float+0x16c>
3401dfca:	2301      	movs	r3, #1
3401dfcc:	e7f2      	b.n	3401dfb4 <_printf_float+0x16c>
3401dfce:	f04f 0967 	mov.w	r9, #103	@ 0x67
3401dfd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401dfd4:	4299      	cmp	r1, r3
3401dfd6:	db05      	blt.n	3401dfe4 <_printf_float+0x19c>
3401dfd8:	6823      	ldr	r3, [r4, #0]
3401dfda:	6121      	str	r1, [r4, #16]
3401dfdc:	07d8      	lsls	r0, r3, #31
3401dfde:	d5ea      	bpl.n	3401dfb6 <_printf_float+0x16e>
3401dfe0:	1c4b      	adds	r3, r1, #1
3401dfe2:	e7e7      	b.n	3401dfb4 <_printf_float+0x16c>
3401dfe4:	2900      	cmp	r1, #0
3401dfe6:	bfd4      	ite	le
3401dfe8:	f1c1 0202 	rsble	r2, r1, #2
3401dfec:	2201      	movgt	r2, #1
3401dfee:	4413      	add	r3, r2
3401dff0:	e7e0      	b.n	3401dfb4 <_printf_float+0x16c>
3401dff2:	6823      	ldr	r3, [r4, #0]
3401dff4:	055a      	lsls	r2, r3, #21
3401dff6:	d407      	bmi.n	3401e008 <_printf_float+0x1c0>
3401dff8:	6923      	ldr	r3, [r4, #16]
3401dffa:	4642      	mov	r2, r8
3401dffc:	4631      	mov	r1, r6
3401dffe:	4628      	mov	r0, r5
3401e000:	47b8      	blx	r7
3401e002:	3001      	adds	r0, #1
3401e004:	d12a      	bne.n	3401e05c <_printf_float+0x214>
3401e006:	e76b      	b.n	3401dee0 <_printf_float+0x98>
3401e008:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401e00c:	f240 80e0 	bls.w	3401e1d0 <_printf_float+0x388>
3401e010:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401e014:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401e018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e01c:	d133      	bne.n	3401e086 <_printf_float+0x23e>
3401e01e:	2301      	movs	r3, #1
3401e020:	4a37      	ldr	r2, [pc, #220]	@ (3401e100 <_printf_float+0x2b8>)
3401e022:	4631      	mov	r1, r6
3401e024:	4628      	mov	r0, r5
3401e026:	47b8      	blx	r7
3401e028:	3001      	adds	r0, #1
3401e02a:	f43f af59 	beq.w	3401dee0 <_printf_float+0x98>
3401e02e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3401e032:	4543      	cmp	r3, r8
3401e034:	db02      	blt.n	3401e03c <_printf_float+0x1f4>
3401e036:	6823      	ldr	r3, [r4, #0]
3401e038:	07d8      	lsls	r0, r3, #31
3401e03a:	d50f      	bpl.n	3401e05c <_printf_float+0x214>
3401e03c:	9b05      	ldr	r3, [sp, #20]
3401e03e:	465a      	mov	r2, fp
3401e040:	4631      	mov	r1, r6
3401e042:	4628      	mov	r0, r5
3401e044:	47b8      	blx	r7
3401e046:	3001      	adds	r0, #1
3401e048:	f43f af4a 	beq.w	3401dee0 <_printf_float+0x98>
3401e04c:	f04f 0900 	mov.w	r9, #0
3401e050:	f108 38ff 	add.w	r8, r8, #4294967295
3401e054:	f104 0a1a 	add.w	sl, r4, #26
3401e058:	45c8      	cmp	r8, r9
3401e05a:	dc09      	bgt.n	3401e070 <_printf_float+0x228>
3401e05c:	6823      	ldr	r3, [r4, #0]
3401e05e:	079b      	lsls	r3, r3, #30
3401e060:	f100 8107 	bmi.w	3401e272 <_printf_float+0x42a>
3401e064:	68e0      	ldr	r0, [r4, #12]
3401e066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401e068:	4298      	cmp	r0, r3
3401e06a:	bfb8      	it	lt
3401e06c:	4618      	movlt	r0, r3
3401e06e:	e739      	b.n	3401dee4 <_printf_float+0x9c>
3401e070:	2301      	movs	r3, #1
3401e072:	4652      	mov	r2, sl
3401e074:	4631      	mov	r1, r6
3401e076:	4628      	mov	r0, r5
3401e078:	47b8      	blx	r7
3401e07a:	3001      	adds	r0, #1
3401e07c:	f43f af30 	beq.w	3401dee0 <_printf_float+0x98>
3401e080:	f109 0901 	add.w	r9, r9, #1
3401e084:	e7e8      	b.n	3401e058 <_printf_float+0x210>
3401e086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401e088:	2b00      	cmp	r3, #0
3401e08a:	dc3b      	bgt.n	3401e104 <_printf_float+0x2bc>
3401e08c:	2301      	movs	r3, #1
3401e08e:	4a1c      	ldr	r2, [pc, #112]	@ (3401e100 <_printf_float+0x2b8>)
3401e090:	4631      	mov	r1, r6
3401e092:	4628      	mov	r0, r5
3401e094:	47b8      	blx	r7
3401e096:	3001      	adds	r0, #1
3401e098:	f43f af22 	beq.w	3401dee0 <_printf_float+0x98>
3401e09c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3401e0a0:	ea59 0303 	orrs.w	r3, r9, r3
3401e0a4:	d102      	bne.n	3401e0ac <_printf_float+0x264>
3401e0a6:	6823      	ldr	r3, [r4, #0]
3401e0a8:	07d9      	lsls	r1, r3, #31
3401e0aa:	d5d7      	bpl.n	3401e05c <_printf_float+0x214>
3401e0ac:	9b05      	ldr	r3, [sp, #20]
3401e0ae:	465a      	mov	r2, fp
3401e0b0:	4631      	mov	r1, r6
3401e0b2:	4628      	mov	r0, r5
3401e0b4:	47b8      	blx	r7
3401e0b6:	3001      	adds	r0, #1
3401e0b8:	f43f af12 	beq.w	3401dee0 <_printf_float+0x98>
3401e0bc:	f04f 0a00 	mov.w	sl, #0
3401e0c0:	f104 0b1a 	add.w	fp, r4, #26
3401e0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401e0c6:	425b      	negs	r3, r3
3401e0c8:	4553      	cmp	r3, sl
3401e0ca:	dc01      	bgt.n	3401e0d0 <_printf_float+0x288>
3401e0cc:	464b      	mov	r3, r9
3401e0ce:	e794      	b.n	3401dffa <_printf_float+0x1b2>
3401e0d0:	2301      	movs	r3, #1
3401e0d2:	465a      	mov	r2, fp
3401e0d4:	4631      	mov	r1, r6
3401e0d6:	4628      	mov	r0, r5
3401e0d8:	47b8      	blx	r7
3401e0da:	3001      	adds	r0, #1
3401e0dc:	f43f af00 	beq.w	3401dee0 <_printf_float+0x98>
3401e0e0:	f10a 0a01 	add.w	sl, sl, #1
3401e0e4:	e7ee      	b.n	3401e0c4 <_printf_float+0x27c>
3401e0e6:	bf00      	nop
3401e0e8:	ffffffff 	.word	0xffffffff
3401e0ec:	7fefffff 	.word	0x7fefffff
3401e0f0:	34027011 	.word	0x34027011
3401e0f4:	3402700d 	.word	0x3402700d
3401e0f8:	34027019 	.word	0x34027019
3401e0fc:	34027015 	.word	0x34027015
3401e100:	340235d8 	.word	0x340235d8
3401e104:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401e106:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3401e10a:	4553      	cmp	r3, sl
3401e10c:	bfa8      	it	ge
3401e10e:	4653      	movge	r3, sl
3401e110:	2b00      	cmp	r3, #0
3401e112:	4699      	mov	r9, r3
3401e114:	dc37      	bgt.n	3401e186 <_printf_float+0x33e>
3401e116:	2300      	movs	r3, #0
3401e118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401e11c:	f104 021a 	add.w	r2, r4, #26
3401e120:	9307      	str	r3, [sp, #28]
3401e122:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401e124:	9907      	ldr	r1, [sp, #28]
3401e126:	9306      	str	r3, [sp, #24]
3401e128:	eba3 0309 	sub.w	r3, r3, r9
3401e12c:	428b      	cmp	r3, r1
3401e12e:	dc31      	bgt.n	3401e194 <_printf_float+0x34c>
3401e130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401e132:	459a      	cmp	sl, r3
3401e134:	dc3b      	bgt.n	3401e1ae <_printf_float+0x366>
3401e136:	6823      	ldr	r3, [r4, #0]
3401e138:	07da      	lsls	r2, r3, #31
3401e13a:	d438      	bmi.n	3401e1ae <_printf_float+0x366>
3401e13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401e13e:	ebaa 0903 	sub.w	r9, sl, r3
3401e142:	9b06      	ldr	r3, [sp, #24]
3401e144:	ebaa 0303 	sub.w	r3, sl, r3
3401e148:	4599      	cmp	r9, r3
3401e14a:	bfa8      	it	ge
3401e14c:	4699      	movge	r9, r3
3401e14e:	f1b9 0f00 	cmp.w	r9, #0
3401e152:	dc34      	bgt.n	3401e1be <_printf_float+0x376>
3401e154:	f04f 0800 	mov.w	r8, #0
3401e158:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401e15c:	f104 0b1a 	add.w	fp, r4, #26
3401e160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401e162:	ebaa 0303 	sub.w	r3, sl, r3
3401e166:	eba3 0309 	sub.w	r3, r3, r9
3401e16a:	4543      	cmp	r3, r8
3401e16c:	f77f af76 	ble.w	3401e05c <_printf_float+0x214>
3401e170:	2301      	movs	r3, #1
3401e172:	465a      	mov	r2, fp
3401e174:	4631      	mov	r1, r6
3401e176:	4628      	mov	r0, r5
3401e178:	47b8      	blx	r7
3401e17a:	3001      	adds	r0, #1
3401e17c:	f43f aeb0 	beq.w	3401dee0 <_printf_float+0x98>
3401e180:	f108 0801 	add.w	r8, r8, #1
3401e184:	e7ec      	b.n	3401e160 <_printf_float+0x318>
3401e186:	4642      	mov	r2, r8
3401e188:	4631      	mov	r1, r6
3401e18a:	4628      	mov	r0, r5
3401e18c:	47b8      	blx	r7
3401e18e:	3001      	adds	r0, #1
3401e190:	d1c1      	bne.n	3401e116 <_printf_float+0x2ce>
3401e192:	e6a5      	b.n	3401dee0 <_printf_float+0x98>
3401e194:	2301      	movs	r3, #1
3401e196:	4631      	mov	r1, r6
3401e198:	4628      	mov	r0, r5
3401e19a:	9206      	str	r2, [sp, #24]
3401e19c:	47b8      	blx	r7
3401e19e:	3001      	adds	r0, #1
3401e1a0:	f43f ae9e 	beq.w	3401dee0 <_printf_float+0x98>
3401e1a4:	9b07      	ldr	r3, [sp, #28]
3401e1a6:	9a06      	ldr	r2, [sp, #24]
3401e1a8:	3301      	adds	r3, #1
3401e1aa:	9307      	str	r3, [sp, #28]
3401e1ac:	e7b9      	b.n	3401e122 <_printf_float+0x2da>
3401e1ae:	9b05      	ldr	r3, [sp, #20]
3401e1b0:	465a      	mov	r2, fp
3401e1b2:	4631      	mov	r1, r6
3401e1b4:	4628      	mov	r0, r5
3401e1b6:	47b8      	blx	r7
3401e1b8:	3001      	adds	r0, #1
3401e1ba:	d1bf      	bne.n	3401e13c <_printf_float+0x2f4>
3401e1bc:	e690      	b.n	3401dee0 <_printf_float+0x98>
3401e1be:	9a06      	ldr	r2, [sp, #24]
3401e1c0:	464b      	mov	r3, r9
3401e1c2:	4631      	mov	r1, r6
3401e1c4:	4628      	mov	r0, r5
3401e1c6:	4442      	add	r2, r8
3401e1c8:	47b8      	blx	r7
3401e1ca:	3001      	adds	r0, #1
3401e1cc:	d1c2      	bne.n	3401e154 <_printf_float+0x30c>
3401e1ce:	e687      	b.n	3401dee0 <_printf_float+0x98>
3401e1d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3401e1d4:	f1b9 0f01 	cmp.w	r9, #1
3401e1d8:	dc01      	bgt.n	3401e1de <_printf_float+0x396>
3401e1da:	07db      	lsls	r3, r3, #31
3401e1dc:	d536      	bpl.n	3401e24c <_printf_float+0x404>
3401e1de:	2301      	movs	r3, #1
3401e1e0:	4642      	mov	r2, r8
3401e1e2:	4631      	mov	r1, r6
3401e1e4:	4628      	mov	r0, r5
3401e1e6:	47b8      	blx	r7
3401e1e8:	3001      	adds	r0, #1
3401e1ea:	f43f ae79 	beq.w	3401dee0 <_printf_float+0x98>
3401e1ee:	9b05      	ldr	r3, [sp, #20]
3401e1f0:	465a      	mov	r2, fp
3401e1f2:	4631      	mov	r1, r6
3401e1f4:	4628      	mov	r0, r5
3401e1f6:	47b8      	blx	r7
3401e1f8:	3001      	adds	r0, #1
3401e1fa:	f43f ae71 	beq.w	3401dee0 <_printf_float+0x98>
3401e1fe:	f109 39ff 	add.w	r9, r9, #4294967295
3401e202:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401e206:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401e20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e20e:	d018      	beq.n	3401e242 <_printf_float+0x3fa>
3401e210:	464b      	mov	r3, r9
3401e212:	f108 0201 	add.w	r2, r8, #1
3401e216:	4631      	mov	r1, r6
3401e218:	4628      	mov	r0, r5
3401e21a:	47b8      	blx	r7
3401e21c:	3001      	adds	r0, #1
3401e21e:	d10c      	bne.n	3401e23a <_printf_float+0x3f2>
3401e220:	e65e      	b.n	3401dee0 <_printf_float+0x98>
3401e222:	2301      	movs	r3, #1
3401e224:	465a      	mov	r2, fp
3401e226:	4631      	mov	r1, r6
3401e228:	4628      	mov	r0, r5
3401e22a:	47b8      	blx	r7
3401e22c:	3001      	adds	r0, #1
3401e22e:	f43f ae57 	beq.w	3401dee0 <_printf_float+0x98>
3401e232:	f108 0801 	add.w	r8, r8, #1
3401e236:	45c8      	cmp	r8, r9
3401e238:	dbf3      	blt.n	3401e222 <_printf_float+0x3da>
3401e23a:	4653      	mov	r3, sl
3401e23c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3401e240:	e6dc      	b.n	3401dffc <_printf_float+0x1b4>
3401e242:	f04f 0800 	mov.w	r8, #0
3401e246:	f104 0b1a 	add.w	fp, r4, #26
3401e24a:	e7f4      	b.n	3401e236 <_printf_float+0x3ee>
3401e24c:	2301      	movs	r3, #1
3401e24e:	4642      	mov	r2, r8
3401e250:	e7e1      	b.n	3401e216 <_printf_float+0x3ce>
3401e252:	2301      	movs	r3, #1
3401e254:	464a      	mov	r2, r9
3401e256:	4631      	mov	r1, r6
3401e258:	4628      	mov	r0, r5
3401e25a:	47b8      	blx	r7
3401e25c:	3001      	adds	r0, #1
3401e25e:	f43f ae3f 	beq.w	3401dee0 <_printf_float+0x98>
3401e262:	f108 0801 	add.w	r8, r8, #1
3401e266:	68e3      	ldr	r3, [r4, #12]
3401e268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3401e26a:	1a5b      	subs	r3, r3, r1
3401e26c:	4543      	cmp	r3, r8
3401e26e:	dcf0      	bgt.n	3401e252 <_printf_float+0x40a>
3401e270:	e6f8      	b.n	3401e064 <_printf_float+0x21c>
3401e272:	f04f 0800 	mov.w	r8, #0
3401e276:	f104 0919 	add.w	r9, r4, #25
3401e27a:	e7f4      	b.n	3401e266 <_printf_float+0x41e>

3401e27c <_printf_common>:
3401e27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401e280:	4616      	mov	r6, r2
3401e282:	4698      	mov	r8, r3
3401e284:	688a      	ldr	r2, [r1, #8]
3401e286:	4607      	mov	r7, r0
3401e288:	690b      	ldr	r3, [r1, #16]
3401e28a:	460c      	mov	r4, r1
3401e28c:	f8dd 9020 	ldr.w	r9, [sp, #32]
3401e290:	4293      	cmp	r3, r2
3401e292:	bfb8      	it	lt
3401e294:	4613      	movlt	r3, r2
3401e296:	6033      	str	r3, [r6, #0]
3401e298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3401e29c:	b10a      	cbz	r2, 3401e2a2 <_printf_common+0x26>
3401e29e:	3301      	adds	r3, #1
3401e2a0:	6033      	str	r3, [r6, #0]
3401e2a2:	6823      	ldr	r3, [r4, #0]
3401e2a4:	0699      	lsls	r1, r3, #26
3401e2a6:	bf42      	ittt	mi
3401e2a8:	6833      	ldrmi	r3, [r6, #0]
3401e2aa:	3302      	addmi	r3, #2
3401e2ac:	6033      	strmi	r3, [r6, #0]
3401e2ae:	6825      	ldr	r5, [r4, #0]
3401e2b0:	f015 0506 	ands.w	r5, r5, #6
3401e2b4:	d106      	bne.n	3401e2c4 <_printf_common+0x48>
3401e2b6:	f104 0a19 	add.w	sl, r4, #25
3401e2ba:	68e3      	ldr	r3, [r4, #12]
3401e2bc:	6832      	ldr	r2, [r6, #0]
3401e2be:	1a9b      	subs	r3, r3, r2
3401e2c0:	42ab      	cmp	r3, r5
3401e2c2:	dc2b      	bgt.n	3401e31c <_printf_common+0xa0>
3401e2c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3401e2c8:	6822      	ldr	r2, [r4, #0]
3401e2ca:	3b00      	subs	r3, #0
3401e2cc:	bf18      	it	ne
3401e2ce:	2301      	movne	r3, #1
3401e2d0:	0692      	lsls	r2, r2, #26
3401e2d2:	d430      	bmi.n	3401e336 <_printf_common+0xba>
3401e2d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3401e2d8:	4641      	mov	r1, r8
3401e2da:	4638      	mov	r0, r7
3401e2dc:	47c8      	blx	r9
3401e2de:	3001      	adds	r0, #1
3401e2e0:	d023      	beq.n	3401e32a <_printf_common+0xae>
3401e2e2:	6823      	ldr	r3, [r4, #0]
3401e2e4:	341a      	adds	r4, #26
3401e2e6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3401e2ea:	f003 0306 	and.w	r3, r3, #6
3401e2ee:	2b04      	cmp	r3, #4
3401e2f0:	bf0a      	itet	eq
3401e2f2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3401e2f6:	2500      	movne	r5, #0
3401e2f8:	6833      	ldreq	r3, [r6, #0]
3401e2fa:	f04f 0600 	mov.w	r6, #0
3401e2fe:	bf08      	it	eq
3401e300:	1aed      	subeq	r5, r5, r3
3401e302:	f854 3c12 	ldr.w	r3, [r4, #-18]
3401e306:	bf08      	it	eq
3401e308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3401e30c:	4293      	cmp	r3, r2
3401e30e:	bfc4      	itt	gt
3401e310:	1a9b      	subgt	r3, r3, r2
3401e312:	18ed      	addgt	r5, r5, r3
3401e314:	42b5      	cmp	r5, r6
3401e316:	d11a      	bne.n	3401e34e <_printf_common+0xd2>
3401e318:	2000      	movs	r0, #0
3401e31a:	e008      	b.n	3401e32e <_printf_common+0xb2>
3401e31c:	2301      	movs	r3, #1
3401e31e:	4652      	mov	r2, sl
3401e320:	4641      	mov	r1, r8
3401e322:	4638      	mov	r0, r7
3401e324:	47c8      	blx	r9
3401e326:	3001      	adds	r0, #1
3401e328:	d103      	bne.n	3401e332 <_printf_common+0xb6>
3401e32a:	f04f 30ff 	mov.w	r0, #4294967295
3401e32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401e332:	3501      	adds	r5, #1
3401e334:	e7c1      	b.n	3401e2ba <_printf_common+0x3e>
3401e336:	18e1      	adds	r1, r4, r3
3401e338:	1c5a      	adds	r2, r3, #1
3401e33a:	2030      	movs	r0, #48	@ 0x30
3401e33c:	3302      	adds	r3, #2
3401e33e:	4422      	add	r2, r4
3401e340:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401e344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3401e348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3401e34c:	e7c2      	b.n	3401e2d4 <_printf_common+0x58>
3401e34e:	2301      	movs	r3, #1
3401e350:	4622      	mov	r2, r4
3401e352:	4641      	mov	r1, r8
3401e354:	4638      	mov	r0, r7
3401e356:	47c8      	blx	r9
3401e358:	3001      	adds	r0, #1
3401e35a:	d0e6      	beq.n	3401e32a <_printf_common+0xae>
3401e35c:	3601      	adds	r6, #1
3401e35e:	e7d9      	b.n	3401e314 <_printf_common+0x98>

3401e360 <_printf_i>:
3401e360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401e364:	7e0f      	ldrb	r7, [r1, #24]
3401e366:	4691      	mov	r9, r2
3401e368:	4680      	mov	r8, r0
3401e36a:	460c      	mov	r4, r1
3401e36c:	2f78      	cmp	r7, #120	@ 0x78
3401e36e:	469a      	mov	sl, r3
3401e370:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401e372:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401e376:	d807      	bhi.n	3401e388 <_printf_i+0x28>
3401e378:	2f62      	cmp	r7, #98	@ 0x62
3401e37a:	d80a      	bhi.n	3401e392 <_printf_i+0x32>
3401e37c:	2f00      	cmp	r7, #0
3401e37e:	f000 80d1 	beq.w	3401e524 <_printf_i+0x1c4>
3401e382:	2f58      	cmp	r7, #88	@ 0x58
3401e384:	f000 80b8 	beq.w	3401e4f8 <_printf_i+0x198>
3401e388:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401e38c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3401e390:	e03a      	b.n	3401e408 <_printf_i+0xa8>
3401e392:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401e396:	2b15      	cmp	r3, #21
3401e398:	d8f6      	bhi.n	3401e388 <_printf_i+0x28>
3401e39a:	a101      	add	r1, pc, #4	@ (adr r1, 3401e3a0 <_printf_i+0x40>)
3401e39c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3401e3a0:	3401e3f9 	.word	0x3401e3f9
3401e3a4:	3401e40d 	.word	0x3401e40d
3401e3a8:	3401e389 	.word	0x3401e389
3401e3ac:	3401e389 	.word	0x3401e389
3401e3b0:	3401e389 	.word	0x3401e389
3401e3b4:	3401e389 	.word	0x3401e389
3401e3b8:	3401e40d 	.word	0x3401e40d
3401e3bc:	3401e389 	.word	0x3401e389
3401e3c0:	3401e389 	.word	0x3401e389
3401e3c4:	3401e389 	.word	0x3401e389
3401e3c8:	3401e389 	.word	0x3401e389
3401e3cc:	3401e50b 	.word	0x3401e50b
3401e3d0:	3401e437 	.word	0x3401e437
3401e3d4:	3401e4c5 	.word	0x3401e4c5
3401e3d8:	3401e389 	.word	0x3401e389
3401e3dc:	3401e389 	.word	0x3401e389
3401e3e0:	3401e52d 	.word	0x3401e52d
3401e3e4:	3401e389 	.word	0x3401e389
3401e3e8:	3401e437 	.word	0x3401e437
3401e3ec:	3401e389 	.word	0x3401e389
3401e3f0:	3401e389 	.word	0x3401e389
3401e3f4:	3401e4cd 	.word	0x3401e4cd
3401e3f8:	6833      	ldr	r3, [r6, #0]
3401e3fa:	1d1a      	adds	r2, r3, #4
3401e3fc:	681b      	ldr	r3, [r3, #0]
3401e3fe:	6032      	str	r2, [r6, #0]
3401e400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401e404:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401e408:	2301      	movs	r3, #1
3401e40a:	e09c      	b.n	3401e546 <_printf_i+0x1e6>
3401e40c:	6833      	ldr	r3, [r6, #0]
3401e40e:	6820      	ldr	r0, [r4, #0]
3401e410:	1d19      	adds	r1, r3, #4
3401e412:	6031      	str	r1, [r6, #0]
3401e414:	0606      	lsls	r6, r0, #24
3401e416:	d501      	bpl.n	3401e41c <_printf_i+0xbc>
3401e418:	681d      	ldr	r5, [r3, #0]
3401e41a:	e003      	b.n	3401e424 <_printf_i+0xc4>
3401e41c:	0645      	lsls	r5, r0, #25
3401e41e:	d5fb      	bpl.n	3401e418 <_printf_i+0xb8>
3401e420:	f9b3 5000 	ldrsh.w	r5, [r3]
3401e424:	2d00      	cmp	r5, #0
3401e426:	da03      	bge.n	3401e430 <_printf_i+0xd0>
3401e428:	232d      	movs	r3, #45	@ 0x2d
3401e42a:	426d      	negs	r5, r5
3401e42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401e430:	4858      	ldr	r0, [pc, #352]	@ (3401e594 <_printf_i+0x234>)
3401e432:	230a      	movs	r3, #10
3401e434:	e011      	b.n	3401e45a <_printf_i+0xfa>
3401e436:	6821      	ldr	r1, [r4, #0]
3401e438:	6833      	ldr	r3, [r6, #0]
3401e43a:	0608      	lsls	r0, r1, #24
3401e43c:	f853 5b04 	ldr.w	r5, [r3], #4
3401e440:	d402      	bmi.n	3401e448 <_printf_i+0xe8>
3401e442:	0649      	lsls	r1, r1, #25
3401e444:	bf48      	it	mi
3401e446:	b2ad      	uxthmi	r5, r5
3401e448:	2f6f      	cmp	r7, #111	@ 0x6f
3401e44a:	6033      	str	r3, [r6, #0]
3401e44c:	4851      	ldr	r0, [pc, #324]	@ (3401e594 <_printf_i+0x234>)
3401e44e:	bf14      	ite	ne
3401e450:	230a      	movne	r3, #10
3401e452:	2308      	moveq	r3, #8
3401e454:	2100      	movs	r1, #0
3401e456:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3401e45a:	6866      	ldr	r6, [r4, #4]
3401e45c:	2e00      	cmp	r6, #0
3401e45e:	60a6      	str	r6, [r4, #8]
3401e460:	db05      	blt.n	3401e46e <_printf_i+0x10e>
3401e462:	6821      	ldr	r1, [r4, #0]
3401e464:	432e      	orrs	r6, r5
3401e466:	f021 0104 	bic.w	r1, r1, #4
3401e46a:	6021      	str	r1, [r4, #0]
3401e46c:	d04b      	beq.n	3401e506 <_printf_i+0x1a6>
3401e46e:	4616      	mov	r6, r2
3401e470:	fbb5 f1f3 	udiv	r1, r5, r3
3401e474:	fb03 5711 	mls	r7, r3, r1, r5
3401e478:	5dc7      	ldrb	r7, [r0, r7]
3401e47a:	f806 7d01 	strb.w	r7, [r6, #-1]!
3401e47e:	462f      	mov	r7, r5
3401e480:	460d      	mov	r5, r1
3401e482:	42bb      	cmp	r3, r7
3401e484:	d9f4      	bls.n	3401e470 <_printf_i+0x110>
3401e486:	2b08      	cmp	r3, #8
3401e488:	d10b      	bne.n	3401e4a2 <_printf_i+0x142>
3401e48a:	6823      	ldr	r3, [r4, #0]
3401e48c:	07df      	lsls	r7, r3, #31
3401e48e:	d508      	bpl.n	3401e4a2 <_printf_i+0x142>
3401e490:	6923      	ldr	r3, [r4, #16]
3401e492:	6861      	ldr	r1, [r4, #4]
3401e494:	4299      	cmp	r1, r3
3401e496:	bfde      	ittt	le
3401e498:	2330      	movle	r3, #48	@ 0x30
3401e49a:	f806 3c01 	strble.w	r3, [r6, #-1]
3401e49e:	f106 36ff 	addle.w	r6, r6, #4294967295
3401e4a2:	1b92      	subs	r2, r2, r6
3401e4a4:	6122      	str	r2, [r4, #16]
3401e4a6:	464b      	mov	r3, r9
3401e4a8:	aa03      	add	r2, sp, #12
3401e4aa:	4621      	mov	r1, r4
3401e4ac:	4640      	mov	r0, r8
3401e4ae:	f8cd a000 	str.w	sl, [sp]
3401e4b2:	f7ff fee3 	bl	3401e27c <_printf_common>
3401e4b6:	3001      	adds	r0, #1
3401e4b8:	d14a      	bne.n	3401e550 <_printf_i+0x1f0>
3401e4ba:	f04f 30ff 	mov.w	r0, #4294967295
3401e4be:	b004      	add	sp, #16
3401e4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401e4c4:	6823      	ldr	r3, [r4, #0]
3401e4c6:	f043 0320 	orr.w	r3, r3, #32
3401e4ca:	6023      	str	r3, [r4, #0]
3401e4cc:	2778      	movs	r7, #120	@ 0x78
3401e4ce:	4832      	ldr	r0, [pc, #200]	@ (3401e598 <_printf_i+0x238>)
3401e4d0:	6823      	ldr	r3, [r4, #0]
3401e4d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3401e4d6:	061f      	lsls	r7, r3, #24
3401e4d8:	6831      	ldr	r1, [r6, #0]
3401e4da:	f851 5b04 	ldr.w	r5, [r1], #4
3401e4de:	d402      	bmi.n	3401e4e6 <_printf_i+0x186>
3401e4e0:	065f      	lsls	r7, r3, #25
3401e4e2:	bf48      	it	mi
3401e4e4:	b2ad      	uxthmi	r5, r5
3401e4e6:	6031      	str	r1, [r6, #0]
3401e4e8:	07d9      	lsls	r1, r3, #31
3401e4ea:	bf44      	itt	mi
3401e4ec:	f043 0320 	orrmi.w	r3, r3, #32
3401e4f0:	6023      	strmi	r3, [r4, #0]
3401e4f2:	b11d      	cbz	r5, 3401e4fc <_printf_i+0x19c>
3401e4f4:	2310      	movs	r3, #16
3401e4f6:	e7ad      	b.n	3401e454 <_printf_i+0xf4>
3401e4f8:	4826      	ldr	r0, [pc, #152]	@ (3401e594 <_printf_i+0x234>)
3401e4fa:	e7e9      	b.n	3401e4d0 <_printf_i+0x170>
3401e4fc:	6823      	ldr	r3, [r4, #0]
3401e4fe:	f023 0320 	bic.w	r3, r3, #32
3401e502:	6023      	str	r3, [r4, #0]
3401e504:	e7f6      	b.n	3401e4f4 <_printf_i+0x194>
3401e506:	4616      	mov	r6, r2
3401e508:	e7bd      	b.n	3401e486 <_printf_i+0x126>
3401e50a:	6833      	ldr	r3, [r6, #0]
3401e50c:	6825      	ldr	r5, [r4, #0]
3401e50e:	1d18      	adds	r0, r3, #4
3401e510:	6961      	ldr	r1, [r4, #20]
3401e512:	6030      	str	r0, [r6, #0]
3401e514:	062e      	lsls	r6, r5, #24
3401e516:	681b      	ldr	r3, [r3, #0]
3401e518:	d501      	bpl.n	3401e51e <_printf_i+0x1be>
3401e51a:	6019      	str	r1, [r3, #0]
3401e51c:	e002      	b.n	3401e524 <_printf_i+0x1c4>
3401e51e:	0668      	lsls	r0, r5, #25
3401e520:	d5fb      	bpl.n	3401e51a <_printf_i+0x1ba>
3401e522:	8019      	strh	r1, [r3, #0]
3401e524:	2300      	movs	r3, #0
3401e526:	4616      	mov	r6, r2
3401e528:	6123      	str	r3, [r4, #16]
3401e52a:	e7bc      	b.n	3401e4a6 <_printf_i+0x146>
3401e52c:	6833      	ldr	r3, [r6, #0]
3401e52e:	2100      	movs	r1, #0
3401e530:	1d1a      	adds	r2, r3, #4
3401e532:	6032      	str	r2, [r6, #0]
3401e534:	681e      	ldr	r6, [r3, #0]
3401e536:	6862      	ldr	r2, [r4, #4]
3401e538:	4630      	mov	r0, r6
3401e53a:	f000 fd1a 	bl	3401ef72 <memchr>
3401e53e:	b108      	cbz	r0, 3401e544 <_printf_i+0x1e4>
3401e540:	1b80      	subs	r0, r0, r6
3401e542:	6060      	str	r0, [r4, #4]
3401e544:	6863      	ldr	r3, [r4, #4]
3401e546:	6123      	str	r3, [r4, #16]
3401e548:	2300      	movs	r3, #0
3401e54a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401e54e:	e7aa      	b.n	3401e4a6 <_printf_i+0x146>
3401e550:	6923      	ldr	r3, [r4, #16]
3401e552:	4632      	mov	r2, r6
3401e554:	4649      	mov	r1, r9
3401e556:	4640      	mov	r0, r8
3401e558:	47d0      	blx	sl
3401e55a:	3001      	adds	r0, #1
3401e55c:	d0ad      	beq.n	3401e4ba <_printf_i+0x15a>
3401e55e:	6823      	ldr	r3, [r4, #0]
3401e560:	079b      	lsls	r3, r3, #30
3401e562:	d413      	bmi.n	3401e58c <_printf_i+0x22c>
3401e564:	68e0      	ldr	r0, [r4, #12]
3401e566:	9b03      	ldr	r3, [sp, #12]
3401e568:	4298      	cmp	r0, r3
3401e56a:	bfb8      	it	lt
3401e56c:	4618      	movlt	r0, r3
3401e56e:	e7a6      	b.n	3401e4be <_printf_i+0x15e>
3401e570:	2301      	movs	r3, #1
3401e572:	4632      	mov	r2, r6
3401e574:	4649      	mov	r1, r9
3401e576:	4640      	mov	r0, r8
3401e578:	47d0      	blx	sl
3401e57a:	3001      	adds	r0, #1
3401e57c:	d09d      	beq.n	3401e4ba <_printf_i+0x15a>
3401e57e:	3501      	adds	r5, #1
3401e580:	68e3      	ldr	r3, [r4, #12]
3401e582:	9903      	ldr	r1, [sp, #12]
3401e584:	1a5b      	subs	r3, r3, r1
3401e586:	42ab      	cmp	r3, r5
3401e588:	dcf2      	bgt.n	3401e570 <_printf_i+0x210>
3401e58a:	e7eb      	b.n	3401e564 <_printf_i+0x204>
3401e58c:	2500      	movs	r5, #0
3401e58e:	f104 0619 	add.w	r6, r4, #25
3401e592:	e7f5      	b.n	3401e580 <_printf_i+0x220>
3401e594:	3402701d 	.word	0x3402701d
3401e598:	3402702e 	.word	0x3402702e

3401e59c <std>:
3401e59c:	2300      	movs	r3, #0
3401e59e:	b510      	push	{r4, lr}
3401e5a0:	4604      	mov	r4, r0
3401e5a2:	6083      	str	r3, [r0, #8]
3401e5a4:	8181      	strh	r1, [r0, #12]
3401e5a6:	4619      	mov	r1, r3
3401e5a8:	6643      	str	r3, [r0, #100]	@ 0x64
3401e5aa:	81c2      	strh	r2, [r0, #14]
3401e5ac:	2208      	movs	r2, #8
3401e5ae:	6183      	str	r3, [r0, #24]
3401e5b0:	e9c0 3300 	strd	r3, r3, [r0]
3401e5b4:	e9c0 3304 	strd	r3, r3, [r0, #16]
3401e5b8:	305c      	adds	r0, #92	@ 0x5c
3401e5ba:	f000 fa61 	bl	3401ea80 <memset>
3401e5be:	4b0d      	ldr	r3, [pc, #52]	@ (3401e5f4 <std+0x58>)
3401e5c0:	6224      	str	r4, [r4, #32]
3401e5c2:	6263      	str	r3, [r4, #36]	@ 0x24
3401e5c4:	4b0c      	ldr	r3, [pc, #48]	@ (3401e5f8 <std+0x5c>)
3401e5c6:	62a3      	str	r3, [r4, #40]	@ 0x28
3401e5c8:	4b0c      	ldr	r3, [pc, #48]	@ (3401e5fc <std+0x60>)
3401e5ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
3401e5cc:	4b0c      	ldr	r3, [pc, #48]	@ (3401e600 <std+0x64>)
3401e5ce:	6323      	str	r3, [r4, #48]	@ 0x30
3401e5d0:	4b0c      	ldr	r3, [pc, #48]	@ (3401e604 <std+0x68>)
3401e5d2:	429c      	cmp	r4, r3
3401e5d4:	d006      	beq.n	3401e5e4 <std+0x48>
3401e5d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3401e5da:	4294      	cmp	r4, r2
3401e5dc:	d002      	beq.n	3401e5e4 <std+0x48>
3401e5de:	33d0      	adds	r3, #208	@ 0xd0
3401e5e0:	429c      	cmp	r4, r3
3401e5e2:	d105      	bne.n	3401e5f0 <std+0x54>
3401e5e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3401e5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401e5ec:	f000 bcb6 	b.w	3401ef5c <__retarget_lock_init_recursive>
3401e5f0:	bd10      	pop	{r4, pc}
3401e5f2:	bf00      	nop
3401e5f4:	3401e825 	.word	0x3401e825
3401e5f8:	3401e847 	.word	0x3401e847
3401e5fc:	3401e87f 	.word	0x3401e87f
3401e600:	3401e8a3 	.word	0x3401e8a3
3401e604:	341903d0 	.word	0x341903d0

3401e608 <stdio_exit_handler>:
3401e608:	4a02      	ldr	r2, [pc, #8]	@ (3401e614 <stdio_exit_handler+0xc>)
3401e60a:	4903      	ldr	r1, [pc, #12]	@ (3401e618 <stdio_exit_handler+0x10>)
3401e60c:	4803      	ldr	r0, [pc, #12]	@ (3401e61c <stdio_exit_handler+0x14>)
3401e60e:	f000 b87b 	b.w	3401e708 <_fwalk_sglue>
3401e612:	bf00      	nop
3401e614:	340a324c 	.word	0x340a324c
3401e618:	34020ab5 	.word	0x34020ab5
3401e61c:	340a325c 	.word	0x340a325c

3401e620 <cleanup_stdio>:
3401e620:	6841      	ldr	r1, [r0, #4]
3401e622:	4b0c      	ldr	r3, [pc, #48]	@ (3401e654 <cleanup_stdio+0x34>)
3401e624:	4299      	cmp	r1, r3
3401e626:	b510      	push	{r4, lr}
3401e628:	4604      	mov	r4, r0
3401e62a:	d001      	beq.n	3401e630 <cleanup_stdio+0x10>
3401e62c:	f002 fa42 	bl	34020ab4 <_fflush_r>
3401e630:	68a1      	ldr	r1, [r4, #8]
3401e632:	4b09      	ldr	r3, [pc, #36]	@ (3401e658 <cleanup_stdio+0x38>)
3401e634:	4299      	cmp	r1, r3
3401e636:	d002      	beq.n	3401e63e <cleanup_stdio+0x1e>
3401e638:	4620      	mov	r0, r4
3401e63a:	f002 fa3b 	bl	34020ab4 <_fflush_r>
3401e63e:	68e1      	ldr	r1, [r4, #12]
3401e640:	4b06      	ldr	r3, [pc, #24]	@ (3401e65c <cleanup_stdio+0x3c>)
3401e642:	4299      	cmp	r1, r3
3401e644:	d004      	beq.n	3401e650 <cleanup_stdio+0x30>
3401e646:	4620      	mov	r0, r4
3401e648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401e64c:	f002 ba32 	b.w	34020ab4 <_fflush_r>
3401e650:	bd10      	pop	{r4, pc}
3401e652:	bf00      	nop
3401e654:	341903d0 	.word	0x341903d0
3401e658:	34190438 	.word	0x34190438
3401e65c:	341904a0 	.word	0x341904a0

3401e660 <global_stdio_init.part.0>:
3401e660:	b510      	push	{r4, lr}
3401e662:	4b0b      	ldr	r3, [pc, #44]	@ (3401e690 <global_stdio_init.part.0+0x30>)
3401e664:	2104      	movs	r1, #4
3401e666:	4c0b      	ldr	r4, [pc, #44]	@ (3401e694 <global_stdio_init.part.0+0x34>)
3401e668:	4a0b      	ldr	r2, [pc, #44]	@ (3401e698 <global_stdio_init.part.0+0x38>)
3401e66a:	4620      	mov	r0, r4
3401e66c:	601a      	str	r2, [r3, #0]
3401e66e:	2200      	movs	r2, #0
3401e670:	f7ff ff94 	bl	3401e59c <std>
3401e674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3401e678:	2201      	movs	r2, #1
3401e67a:	2109      	movs	r1, #9
3401e67c:	f7ff ff8e 	bl	3401e59c <std>
3401e680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3401e684:	2202      	movs	r2, #2
3401e686:	2112      	movs	r1, #18
3401e688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401e68c:	f7ff bf86 	b.w	3401e59c <std>
3401e690:	34190508 	.word	0x34190508
3401e694:	341903d0 	.word	0x341903d0
3401e698:	3401e609 	.word	0x3401e609

3401e69c <__sfp_lock_acquire>:
3401e69c:	4801      	ldr	r0, [pc, #4]	@ (3401e6a4 <__sfp_lock_acquire+0x8>)
3401e69e:	f000 bc5e 	b.w	3401ef5e <__retarget_lock_acquire_recursive>
3401e6a2:	bf00      	nop
3401e6a4:	34190510 	.word	0x34190510

3401e6a8 <__sfp_lock_release>:
3401e6a8:	4801      	ldr	r0, [pc, #4]	@ (3401e6b0 <__sfp_lock_release+0x8>)
3401e6aa:	f000 bc59 	b.w	3401ef60 <__retarget_lock_release_recursive>
3401e6ae:	bf00      	nop
3401e6b0:	34190510 	.word	0x34190510

3401e6b4 <__sinit>:
3401e6b4:	b510      	push	{r4, lr}
3401e6b6:	4604      	mov	r4, r0
3401e6b8:	f7ff fff0 	bl	3401e69c <__sfp_lock_acquire>
3401e6bc:	6a23      	ldr	r3, [r4, #32]
3401e6be:	b11b      	cbz	r3, 3401e6c8 <__sinit+0x14>
3401e6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401e6c4:	f7ff bff0 	b.w	3401e6a8 <__sfp_lock_release>
3401e6c8:	4b04      	ldr	r3, [pc, #16]	@ (3401e6dc <__sinit+0x28>)
3401e6ca:	6223      	str	r3, [r4, #32]
3401e6cc:	4b04      	ldr	r3, [pc, #16]	@ (3401e6e0 <__sinit+0x2c>)
3401e6ce:	681b      	ldr	r3, [r3, #0]
3401e6d0:	2b00      	cmp	r3, #0
3401e6d2:	d1f5      	bne.n	3401e6c0 <__sinit+0xc>
3401e6d4:	f7ff ffc4 	bl	3401e660 <global_stdio_init.part.0>
3401e6d8:	e7f2      	b.n	3401e6c0 <__sinit+0xc>
3401e6da:	bf00      	nop
3401e6dc:	3401e621 	.word	0x3401e621
3401e6e0:	34190508 	.word	0x34190508

3401e6e4 <fiprintf>:
3401e6e4:	b40e      	push	{r1, r2, r3}
3401e6e6:	b503      	push	{r0, r1, lr}
3401e6e8:	ab03      	add	r3, sp, #12
3401e6ea:	4601      	mov	r1, r0
3401e6ec:	4805      	ldr	r0, [pc, #20]	@ (3401e704 <fiprintf+0x20>)
3401e6ee:	f853 2b04 	ldr.w	r2, [r3], #4
3401e6f2:	6800      	ldr	r0, [r0, #0]
3401e6f4:	9301      	str	r3, [sp, #4]
3401e6f6:	f002 f841 	bl	3402077c <_vfiprintf_r>
3401e6fa:	b002      	add	sp, #8
3401e6fc:	f85d eb04 	ldr.w	lr, [sp], #4
3401e700:	b003      	add	sp, #12
3401e702:	4770      	bx	lr
3401e704:	340a3258 	.word	0x340a3258

3401e708 <_fwalk_sglue>:
3401e708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401e70c:	4607      	mov	r7, r0
3401e70e:	4688      	mov	r8, r1
3401e710:	4614      	mov	r4, r2
3401e712:	2600      	movs	r6, #0
3401e714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3401e718:	f1b9 0901 	subs.w	r9, r9, #1
3401e71c:	d505      	bpl.n	3401e72a <_fwalk_sglue+0x22>
3401e71e:	6824      	ldr	r4, [r4, #0]
3401e720:	2c00      	cmp	r4, #0
3401e722:	d1f7      	bne.n	3401e714 <_fwalk_sglue+0xc>
3401e724:	4630      	mov	r0, r6
3401e726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401e72a:	89ab      	ldrh	r3, [r5, #12]
3401e72c:	2b01      	cmp	r3, #1
3401e72e:	d907      	bls.n	3401e740 <_fwalk_sglue+0x38>
3401e730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3401e734:	3301      	adds	r3, #1
3401e736:	d003      	beq.n	3401e740 <_fwalk_sglue+0x38>
3401e738:	4629      	mov	r1, r5
3401e73a:	4638      	mov	r0, r7
3401e73c:	47c0      	blx	r8
3401e73e:	4306      	orrs	r6, r0
3401e740:	3568      	adds	r5, #104	@ 0x68
3401e742:	e7e9      	b.n	3401e718 <_fwalk_sglue+0x10>

3401e744 <iprintf>:
3401e744:	b40f      	push	{r0, r1, r2, r3}
3401e746:	b507      	push	{r0, r1, r2, lr}
3401e748:	4906      	ldr	r1, [pc, #24]	@ (3401e764 <iprintf+0x20>)
3401e74a:	ab04      	add	r3, sp, #16
3401e74c:	6808      	ldr	r0, [r1, #0]
3401e74e:	f853 2b04 	ldr.w	r2, [r3], #4
3401e752:	6881      	ldr	r1, [r0, #8]
3401e754:	9301      	str	r3, [sp, #4]
3401e756:	f002 f811 	bl	3402077c <_vfiprintf_r>
3401e75a:	b003      	add	sp, #12
3401e75c:	f85d eb04 	ldr.w	lr, [sp], #4
3401e760:	b004      	add	sp, #16
3401e762:	4770      	bx	lr
3401e764:	340a3258 	.word	0x340a3258

3401e768 <_puts_r>:
3401e768:	6a03      	ldr	r3, [r0, #32]
3401e76a:	b570      	push	{r4, r5, r6, lr}
3401e76c:	4605      	mov	r5, r0
3401e76e:	460e      	mov	r6, r1
3401e770:	6884      	ldr	r4, [r0, #8]
3401e772:	b90b      	cbnz	r3, 3401e778 <_puts_r+0x10>
3401e774:	f7ff ff9e 	bl	3401e6b4 <__sinit>
3401e778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401e77a:	07db      	lsls	r3, r3, #31
3401e77c:	d405      	bmi.n	3401e78a <_puts_r+0x22>
3401e77e:	89a3      	ldrh	r3, [r4, #12]
3401e780:	0598      	lsls	r0, r3, #22
3401e782:	d402      	bmi.n	3401e78a <_puts_r+0x22>
3401e784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401e786:	f000 fbea 	bl	3401ef5e <__retarget_lock_acquire_recursive>
3401e78a:	89a3      	ldrh	r3, [r4, #12]
3401e78c:	0719      	lsls	r1, r3, #28
3401e78e:	d502      	bpl.n	3401e796 <_puts_r+0x2e>
3401e790:	6923      	ldr	r3, [r4, #16]
3401e792:	2b00      	cmp	r3, #0
3401e794:	d135      	bne.n	3401e802 <_puts_r+0x9a>
3401e796:	4621      	mov	r1, r4
3401e798:	4628      	mov	r0, r5
3401e79a:	f000 f901 	bl	3401e9a0 <__swsetup_r>
3401e79e:	b380      	cbz	r0, 3401e802 <_puts_r+0x9a>
3401e7a0:	f04f 35ff 	mov.w	r5, #4294967295
3401e7a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401e7a6:	07da      	lsls	r2, r3, #31
3401e7a8:	d405      	bmi.n	3401e7b6 <_puts_r+0x4e>
3401e7aa:	89a3      	ldrh	r3, [r4, #12]
3401e7ac:	059b      	lsls	r3, r3, #22
3401e7ae:	d402      	bmi.n	3401e7b6 <_puts_r+0x4e>
3401e7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401e7b2:	f000 fbd5 	bl	3401ef60 <__retarget_lock_release_recursive>
3401e7b6:	4628      	mov	r0, r5
3401e7b8:	bd70      	pop	{r4, r5, r6, pc}
3401e7ba:	2b00      	cmp	r3, #0
3401e7bc:	da04      	bge.n	3401e7c8 <_puts_r+0x60>
3401e7be:	69a2      	ldr	r2, [r4, #24]
3401e7c0:	429a      	cmp	r2, r3
3401e7c2:	dc17      	bgt.n	3401e7f4 <_puts_r+0x8c>
3401e7c4:	290a      	cmp	r1, #10
3401e7c6:	d015      	beq.n	3401e7f4 <_puts_r+0x8c>
3401e7c8:	6823      	ldr	r3, [r4, #0]
3401e7ca:	1c5a      	adds	r2, r3, #1
3401e7cc:	6022      	str	r2, [r4, #0]
3401e7ce:	7019      	strb	r1, [r3, #0]
3401e7d0:	68a3      	ldr	r3, [r4, #8]
3401e7d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3401e7d6:	3b01      	subs	r3, #1
3401e7d8:	60a3      	str	r3, [r4, #8]
3401e7da:	2900      	cmp	r1, #0
3401e7dc:	d1ed      	bne.n	3401e7ba <_puts_r+0x52>
3401e7de:	2b00      	cmp	r3, #0
3401e7e0:	da11      	bge.n	3401e806 <_puts_r+0x9e>
3401e7e2:	4622      	mov	r2, r4
3401e7e4:	210a      	movs	r1, #10
3401e7e6:	4628      	mov	r0, r5
3401e7e8:	f000 f89c 	bl	3401e924 <__swbuf_r>
3401e7ec:	3001      	adds	r0, #1
3401e7ee:	d0d7      	beq.n	3401e7a0 <_puts_r+0x38>
3401e7f0:	250a      	movs	r5, #10
3401e7f2:	e7d7      	b.n	3401e7a4 <_puts_r+0x3c>
3401e7f4:	4622      	mov	r2, r4
3401e7f6:	4628      	mov	r0, r5
3401e7f8:	f000 f894 	bl	3401e924 <__swbuf_r>
3401e7fc:	3001      	adds	r0, #1
3401e7fe:	d1e7      	bne.n	3401e7d0 <_puts_r+0x68>
3401e800:	e7ce      	b.n	3401e7a0 <_puts_r+0x38>
3401e802:	3e01      	subs	r6, #1
3401e804:	e7e4      	b.n	3401e7d0 <_puts_r+0x68>
3401e806:	6823      	ldr	r3, [r4, #0]
3401e808:	1c5a      	adds	r2, r3, #1
3401e80a:	6022      	str	r2, [r4, #0]
3401e80c:	220a      	movs	r2, #10
3401e80e:	701a      	strb	r2, [r3, #0]
3401e810:	e7ee      	b.n	3401e7f0 <_puts_r+0x88>
	...

3401e814 <puts>:
3401e814:	4b02      	ldr	r3, [pc, #8]	@ (3401e820 <puts+0xc>)
3401e816:	4601      	mov	r1, r0
3401e818:	6818      	ldr	r0, [r3, #0]
3401e81a:	f7ff bfa5 	b.w	3401e768 <_puts_r>
3401e81e:	bf00      	nop
3401e820:	340a3258 	.word	0x340a3258

3401e824 <__sread>:
3401e824:	b510      	push	{r4, lr}
3401e826:	460c      	mov	r4, r1
3401e828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401e82c:	f000 fb48 	bl	3401eec0 <_read_r>
3401e830:	2800      	cmp	r0, #0
3401e832:	bfab      	itete	ge
3401e834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3401e836:	89a3      	ldrhlt	r3, [r4, #12]
3401e838:	181b      	addge	r3, r3, r0
3401e83a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3401e83e:	bfac      	ite	ge
3401e840:	6563      	strge	r3, [r4, #84]	@ 0x54
3401e842:	81a3      	strhlt	r3, [r4, #12]
3401e844:	bd10      	pop	{r4, pc}

3401e846 <__swrite>:
3401e846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401e84a:	461f      	mov	r7, r3
3401e84c:	898b      	ldrh	r3, [r1, #12]
3401e84e:	4605      	mov	r5, r0
3401e850:	460c      	mov	r4, r1
3401e852:	05db      	lsls	r3, r3, #23
3401e854:	4616      	mov	r6, r2
3401e856:	d505      	bpl.n	3401e864 <__swrite+0x1e>
3401e858:	2302      	movs	r3, #2
3401e85a:	2200      	movs	r2, #0
3401e85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401e860:	f000 fb1c 	bl	3401ee9c <_lseek_r>
3401e864:	89a3      	ldrh	r3, [r4, #12]
3401e866:	4632      	mov	r2, r6
3401e868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3401e86c:	4628      	mov	r0, r5
3401e86e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401e872:	81a3      	strh	r3, [r4, #12]
3401e874:	463b      	mov	r3, r7
3401e876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3401e87a:	f000 bb33 	b.w	3401eee4 <_write_r>

3401e87e <__sseek>:
3401e87e:	b510      	push	{r4, lr}
3401e880:	460c      	mov	r4, r1
3401e882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401e886:	f000 fb09 	bl	3401ee9c <_lseek_r>
3401e88a:	1c43      	adds	r3, r0, #1
3401e88c:	89a3      	ldrh	r3, [r4, #12]
3401e88e:	bf15      	itete	ne
3401e890:	6560      	strne	r0, [r4, #84]	@ 0x54
3401e892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3401e896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3401e89a:	81a3      	strheq	r3, [r4, #12]
3401e89c:	bf18      	it	ne
3401e89e:	81a3      	strhne	r3, [r4, #12]
3401e8a0:	bd10      	pop	{r4, pc}

3401e8a2 <__sclose>:
3401e8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3401e8a6:	f000 bae9 	b.w	3401ee7c <_close_r>

3401e8aa <_vsniprintf_r>:
3401e8aa:	b530      	push	{r4, r5, lr}
3401e8ac:	4614      	mov	r4, r2
3401e8ae:	b09b      	sub	sp, #108	@ 0x6c
3401e8b0:	4605      	mov	r5, r0
3401e8b2:	461a      	mov	r2, r3
3401e8b4:	2c00      	cmp	r4, #0
3401e8b6:	da05      	bge.n	3401e8c4 <_vsniprintf_r+0x1a>
3401e8b8:	238b      	movs	r3, #139	@ 0x8b
3401e8ba:	6003      	str	r3, [r0, #0]
3401e8bc:	f04f 30ff 	mov.w	r0, #4294967295
3401e8c0:	b01b      	add	sp, #108	@ 0x6c
3401e8c2:	bd30      	pop	{r4, r5, pc}
3401e8c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
3401e8c8:	9100      	str	r1, [sp, #0]
3401e8ca:	9104      	str	r1, [sp, #16]
3401e8cc:	4669      	mov	r1, sp
3401e8ce:	f8ad 300c 	strh.w	r3, [sp, #12]
3401e8d2:	f04f 0300 	mov.w	r3, #0
3401e8d6:	9319      	str	r3, [sp, #100]	@ 0x64
3401e8d8:	bf14      	ite	ne
3401e8da:	f104 33ff 	addne.w	r3, r4, #4294967295
3401e8de:	4623      	moveq	r3, r4
3401e8e0:	9302      	str	r3, [sp, #8]
3401e8e2:	9305      	str	r3, [sp, #20]
3401e8e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
3401e8e8:	f8ad 300e 	strh.w	r3, [sp, #14]
3401e8ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
3401e8ee:	f001 fe1f 	bl	34020530 <_svfiprintf_r>
3401e8f2:	1c43      	adds	r3, r0, #1
3401e8f4:	bfbc      	itt	lt
3401e8f6:	238b      	movlt	r3, #139	@ 0x8b
3401e8f8:	602b      	strlt	r3, [r5, #0]
3401e8fa:	2c00      	cmp	r4, #0
3401e8fc:	d0e0      	beq.n	3401e8c0 <_vsniprintf_r+0x16>
3401e8fe:	9b00      	ldr	r3, [sp, #0]
3401e900:	2200      	movs	r2, #0
3401e902:	701a      	strb	r2, [r3, #0]
3401e904:	e7dc      	b.n	3401e8c0 <_vsniprintf_r+0x16>
	...

3401e908 <vsniprintf>:
3401e908:	b507      	push	{r0, r1, r2, lr}
3401e90a:	9300      	str	r3, [sp, #0]
3401e90c:	4613      	mov	r3, r2
3401e90e:	460a      	mov	r2, r1
3401e910:	4601      	mov	r1, r0
3401e912:	4803      	ldr	r0, [pc, #12]	@ (3401e920 <vsniprintf+0x18>)
3401e914:	6800      	ldr	r0, [r0, #0]
3401e916:	f7ff ffc8 	bl	3401e8aa <_vsniprintf_r>
3401e91a:	b003      	add	sp, #12
3401e91c:	f85d fb04 	ldr.w	pc, [sp], #4
3401e920:	340a3258 	.word	0x340a3258

3401e924 <__swbuf_r>:
3401e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401e926:	460e      	mov	r6, r1
3401e928:	4614      	mov	r4, r2
3401e92a:	4605      	mov	r5, r0
3401e92c:	b118      	cbz	r0, 3401e936 <__swbuf_r+0x12>
3401e92e:	6a03      	ldr	r3, [r0, #32]
3401e930:	b90b      	cbnz	r3, 3401e936 <__swbuf_r+0x12>
3401e932:	f7ff febf 	bl	3401e6b4 <__sinit>
3401e936:	69a3      	ldr	r3, [r4, #24]
3401e938:	60a3      	str	r3, [r4, #8]
3401e93a:	89a3      	ldrh	r3, [r4, #12]
3401e93c:	071a      	lsls	r2, r3, #28
3401e93e:	d501      	bpl.n	3401e944 <__swbuf_r+0x20>
3401e940:	6923      	ldr	r3, [r4, #16]
3401e942:	b943      	cbnz	r3, 3401e956 <__swbuf_r+0x32>
3401e944:	4621      	mov	r1, r4
3401e946:	4628      	mov	r0, r5
3401e948:	f000 f82a 	bl	3401e9a0 <__swsetup_r>
3401e94c:	b118      	cbz	r0, 3401e956 <__swbuf_r+0x32>
3401e94e:	f04f 37ff 	mov.w	r7, #4294967295
3401e952:	4638      	mov	r0, r7
3401e954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401e956:	6823      	ldr	r3, [r4, #0]
3401e958:	b2f6      	uxtb	r6, r6
3401e95a:	6922      	ldr	r2, [r4, #16]
3401e95c:	4637      	mov	r7, r6
3401e95e:	1a98      	subs	r0, r3, r2
3401e960:	6963      	ldr	r3, [r4, #20]
3401e962:	4283      	cmp	r3, r0
3401e964:	dc05      	bgt.n	3401e972 <__swbuf_r+0x4e>
3401e966:	4621      	mov	r1, r4
3401e968:	4628      	mov	r0, r5
3401e96a:	f002 f8a3 	bl	34020ab4 <_fflush_r>
3401e96e:	2800      	cmp	r0, #0
3401e970:	d1ed      	bne.n	3401e94e <__swbuf_r+0x2a>
3401e972:	68a3      	ldr	r3, [r4, #8]
3401e974:	3b01      	subs	r3, #1
3401e976:	60a3      	str	r3, [r4, #8]
3401e978:	6823      	ldr	r3, [r4, #0]
3401e97a:	1c5a      	adds	r2, r3, #1
3401e97c:	6022      	str	r2, [r4, #0]
3401e97e:	701e      	strb	r6, [r3, #0]
3401e980:	1c43      	adds	r3, r0, #1
3401e982:	6962      	ldr	r2, [r4, #20]
3401e984:	429a      	cmp	r2, r3
3401e986:	d004      	beq.n	3401e992 <__swbuf_r+0x6e>
3401e988:	89a3      	ldrh	r3, [r4, #12]
3401e98a:	07db      	lsls	r3, r3, #31
3401e98c:	d5e1      	bpl.n	3401e952 <__swbuf_r+0x2e>
3401e98e:	2e0a      	cmp	r6, #10
3401e990:	d1df      	bne.n	3401e952 <__swbuf_r+0x2e>
3401e992:	4621      	mov	r1, r4
3401e994:	4628      	mov	r0, r5
3401e996:	f002 f88d 	bl	34020ab4 <_fflush_r>
3401e99a:	2800      	cmp	r0, #0
3401e99c:	d0d9      	beq.n	3401e952 <__swbuf_r+0x2e>
3401e99e:	e7d6      	b.n	3401e94e <__swbuf_r+0x2a>

3401e9a0 <__swsetup_r>:
3401e9a0:	b538      	push	{r3, r4, r5, lr}
3401e9a2:	4b29      	ldr	r3, [pc, #164]	@ (3401ea48 <__swsetup_r+0xa8>)
3401e9a4:	4605      	mov	r5, r0
3401e9a6:	460c      	mov	r4, r1
3401e9a8:	6818      	ldr	r0, [r3, #0]
3401e9aa:	b118      	cbz	r0, 3401e9b4 <__swsetup_r+0x14>
3401e9ac:	6a03      	ldr	r3, [r0, #32]
3401e9ae:	b90b      	cbnz	r3, 3401e9b4 <__swsetup_r+0x14>
3401e9b0:	f7ff fe80 	bl	3401e6b4 <__sinit>
3401e9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401e9b8:	0719      	lsls	r1, r3, #28
3401e9ba:	d422      	bmi.n	3401ea02 <__swsetup_r+0x62>
3401e9bc:	06da      	lsls	r2, r3, #27
3401e9be:	d407      	bmi.n	3401e9d0 <__swsetup_r+0x30>
3401e9c0:	2209      	movs	r2, #9
3401e9c2:	602a      	str	r2, [r5, #0]
3401e9c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3401e9c8:	f04f 30ff 	mov.w	r0, #4294967295
3401e9cc:	81a3      	strh	r3, [r4, #12]
3401e9ce:	e033      	b.n	3401ea38 <__swsetup_r+0x98>
3401e9d0:	0758      	lsls	r0, r3, #29
3401e9d2:	d512      	bpl.n	3401e9fa <__swsetup_r+0x5a>
3401e9d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401e9d6:	b141      	cbz	r1, 3401e9ea <__swsetup_r+0x4a>
3401e9d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3401e9dc:	4299      	cmp	r1, r3
3401e9de:	d002      	beq.n	3401e9e6 <__swsetup_r+0x46>
3401e9e0:	4628      	mov	r0, r5
3401e9e2:	f001 f8d3 	bl	3401fb8c <_free_r>
3401e9e6:	2300      	movs	r3, #0
3401e9e8:	6363      	str	r3, [r4, #52]	@ 0x34
3401e9ea:	89a3      	ldrh	r3, [r4, #12]
3401e9ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3401e9f0:	81a3      	strh	r3, [r4, #12]
3401e9f2:	2300      	movs	r3, #0
3401e9f4:	6063      	str	r3, [r4, #4]
3401e9f6:	6923      	ldr	r3, [r4, #16]
3401e9f8:	6023      	str	r3, [r4, #0]
3401e9fa:	89a3      	ldrh	r3, [r4, #12]
3401e9fc:	f043 0308 	orr.w	r3, r3, #8
3401ea00:	81a3      	strh	r3, [r4, #12]
3401ea02:	6923      	ldr	r3, [r4, #16]
3401ea04:	b94b      	cbnz	r3, 3401ea1a <__swsetup_r+0x7a>
3401ea06:	89a3      	ldrh	r3, [r4, #12]
3401ea08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3401ea0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401ea10:	d003      	beq.n	3401ea1a <__swsetup_r+0x7a>
3401ea12:	4621      	mov	r1, r4
3401ea14:	4628      	mov	r0, r5
3401ea16:	f002 f89a 	bl	34020b4e <__smakebuf_r>
3401ea1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3401ea1e:	f013 0201 	ands.w	r2, r3, #1
3401ea22:	d00a      	beq.n	3401ea3a <__swsetup_r+0x9a>
3401ea24:	2200      	movs	r2, #0
3401ea26:	60a2      	str	r2, [r4, #8]
3401ea28:	6962      	ldr	r2, [r4, #20]
3401ea2a:	4252      	negs	r2, r2
3401ea2c:	61a2      	str	r2, [r4, #24]
3401ea2e:	6922      	ldr	r2, [r4, #16]
3401ea30:	b942      	cbnz	r2, 3401ea44 <__swsetup_r+0xa4>
3401ea32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3401ea36:	d1c5      	bne.n	3401e9c4 <__swsetup_r+0x24>
3401ea38:	bd38      	pop	{r3, r4, r5, pc}
3401ea3a:	0799      	lsls	r1, r3, #30
3401ea3c:	bf58      	it	pl
3401ea3e:	6962      	ldrpl	r2, [r4, #20]
3401ea40:	60a2      	str	r2, [r4, #8]
3401ea42:	e7f4      	b.n	3401ea2e <__swsetup_r+0x8e>
3401ea44:	2000      	movs	r0, #0
3401ea46:	e7f7      	b.n	3401ea38 <__swsetup_r+0x98>
3401ea48:	340a3258 	.word	0x340a3258

3401ea4c <memmove>:
3401ea4c:	4288      	cmp	r0, r1
3401ea4e:	b510      	push	{r4, lr}
3401ea50:	eb01 0402 	add.w	r4, r1, r2
3401ea54:	d902      	bls.n	3401ea5c <memmove+0x10>
3401ea56:	4284      	cmp	r4, r0
3401ea58:	4623      	mov	r3, r4
3401ea5a:	d807      	bhi.n	3401ea6c <memmove+0x20>
3401ea5c:	1e43      	subs	r3, r0, #1
3401ea5e:	42a1      	cmp	r1, r4
3401ea60:	d008      	beq.n	3401ea74 <memmove+0x28>
3401ea62:	f811 2b01 	ldrb.w	r2, [r1], #1
3401ea66:	f803 2f01 	strb.w	r2, [r3, #1]!
3401ea6a:	e7f8      	b.n	3401ea5e <memmove+0x12>
3401ea6c:	4402      	add	r2, r0
3401ea6e:	4601      	mov	r1, r0
3401ea70:	428a      	cmp	r2, r1
3401ea72:	d100      	bne.n	3401ea76 <memmove+0x2a>
3401ea74:	bd10      	pop	{r4, pc}
3401ea76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
3401ea7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
3401ea7e:	e7f7      	b.n	3401ea70 <memmove+0x24>

3401ea80 <memset>:
3401ea80:	4402      	add	r2, r0
3401ea82:	4603      	mov	r3, r0
3401ea84:	4293      	cmp	r3, r2
3401ea86:	d100      	bne.n	3401ea8a <memset+0xa>
3401ea88:	4770      	bx	lr
3401ea8a:	f803 1b01 	strb.w	r1, [r3], #1
3401ea8e:	e7f9      	b.n	3401ea84 <memset+0x4>

3401ea90 <_strerror_r>:
3401ea90:	b510      	push	{r4, lr}
3401ea92:	4604      	mov	r4, r0
3401ea94:	4608      	mov	r0, r1
3401ea96:	4611      	mov	r1, r2
3401ea98:	461a      	mov	r2, r3
3401ea9a:	288e      	cmp	r0, #142	@ 0x8e
3401ea9c:	f200 8130 	bhi.w	3401ed00 <_strerror_r+0x270>
3401eaa0:	e8df f010 	tbh	[pc, r0, lsl #1]
3401eaa4:	0138008f 	.word	0x0138008f
3401eaa8:	00940092 	.word	0x00940092
3401eaac:	00980096 	.word	0x00980096
3401eab0:	009c009a 	.word	0x009c009a
3401eab4:	00a2009e 	.word	0x00a2009e
3401eab8:	00a800a4 	.word	0x00a800a4
3401eabc:	00ac00aa 	.word	0x00ac00aa
3401eac0:	012e00ae 	.word	0x012e00ae
3401eac4:	00b200b0 	.word	0x00b200b0
3401eac8:	00b600b4 	.word	0x00b600b4
3401eacc:	00be00b8 	.word	0x00be00b8
3401ead0:	00c600c0 	.word	0x00c600c0
3401ead4:	00ca00c8 	.word	0x00ca00c8
3401ead8:	00ce00cc 	.word	0x00ce00cc
3401eadc:	00d600d2 	.word	0x00d600d2
3401eae0:	00da00d8 	.word	0x00da00d8
3401eae4:	00de00dc 	.word	0x00de00dc
3401eae8:	00e200e0 	.word	0x00e200e0
3401eaec:	012e00e4 	.word	0x012e00e4
3401eaf0:	012e012e 	.word	0x012e012e
3401eaf4:	012e012e 	.word	0x012e012e
3401eaf8:	012e012e 	.word	0x012e012e
3401eafc:	00e8012e 	.word	0x00e8012e
3401eb00:	012e00ec 	.word	0x012e00ec
3401eb04:	012e012e 	.word	0x012e012e
3401eb08:	012e012e 	.word	0x012e012e
3401eb0c:	012e012e 	.word	0x012e012e
3401eb10:	012e012e 	.word	0x012e012e
3401eb14:	012e012e 	.word	0x012e012e
3401eb18:	012e012e 	.word	0x012e012e
3401eb1c:	010800ee 	.word	0x010800ee
3401eb20:	00f200f0 	.word	0x00f200f0
3401eb24:	012e012e 	.word	0x012e012e
3401eb28:	00f4012e 	.word	0x00f4012e
3401eb2c:	012e012e 	.word	0x012e012e
3401eb30:	00f6012e 	.word	0x00f6012e
3401eb34:	012e012e 	.word	0x012e012e
3401eb38:	012e00fa 	.word	0x012e00fa
3401eb3c:	00fc012e 	.word	0x00fc012e
3401eb40:	012e012e 	.word	0x012e012e
3401eb44:	012e012e 	.word	0x012e012e
3401eb48:	012e012e 	.word	0x012e012e
3401eb4c:	012e012e 	.word	0x012e012e
3401eb50:	012e012e 	.word	0x012e012e
3401eb54:	012e00fe 	.word	0x012e00fe
3401eb58:	01020100 	.word	0x01020100
3401eb5c:	012e0104 	.word	0x012e0104
3401eb60:	0126012e 	.word	0x0126012e
3401eb64:	012e012e 	.word	0x012e012e
3401eb68:	012e012e 	.word	0x012e012e
3401eb6c:	012e012e 	.word	0x012e012e
3401eb70:	012e012e 	.word	0x012e012e
3401eb74:	01060114 	.word	0x01060114
3401eb78:	010c010a 	.word	0x010c010a
3401eb7c:	0110010e 	.word	0x0110010e
3401eb80:	0112012e 	.word	0x0112012e
3401eb84:	011a0116 	.word	0x011a0116
3401eb88:	00c200ea 	.word	0x00c200ea
3401eb8c:	00ba012c 	.word	0x00ba012c
3401eb90:	00bc00d0 	.word	0x00bc00d0
3401eb94:	00a600a0 	.word	0x00a600a0
3401eb98:	00f8012a 	.word	0x00f8012a
3401eb9c:	0118012e 	.word	0x0118012e
3401eba0:	011e00c4 	.word	0x011e00c4
3401eba4:	012e011c 	.word	0x012e011c
3401eba8:	012e012e 	.word	0x012e012e
3401ebac:	012e012e 	.word	0x012e012e
3401ebb0:	012e00d4 	.word	0x012e00d4
3401ebb4:	012e012e 	.word	0x012e012e
3401ebb8:	012800e6 	.word	0x012800e6
3401ebbc:	01220120 	.word	0x01220120
3401ebc0:	0124      	.short	0x0124
3401ebc2:	4b55      	ldr	r3, [pc, #340]	@ (3401ed18 <_strerror_r+0x288>)
3401ebc4:	4618      	mov	r0, r3
3401ebc6:	bd10      	pop	{r4, pc}
3401ebc8:	4b54      	ldr	r3, [pc, #336]	@ (3401ed1c <_strerror_r+0x28c>)
3401ebca:	e7fb      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebcc:	4b54      	ldr	r3, [pc, #336]	@ (3401ed20 <_strerror_r+0x290>)
3401ebce:	e7f9      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebd0:	4b54      	ldr	r3, [pc, #336]	@ (3401ed24 <_strerror_r+0x294>)
3401ebd2:	e7f7      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebd4:	4b54      	ldr	r3, [pc, #336]	@ (3401ed28 <_strerror_r+0x298>)
3401ebd6:	e7f5      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebd8:	4b54      	ldr	r3, [pc, #336]	@ (3401ed2c <_strerror_r+0x29c>)
3401ebda:	e7f3      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebdc:	4b54      	ldr	r3, [pc, #336]	@ (3401ed30 <_strerror_r+0x2a0>)
3401ebde:	e7f1      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebe0:	4b54      	ldr	r3, [pc, #336]	@ (3401ed34 <_strerror_r+0x2a4>)
3401ebe2:	e7ef      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebe4:	4b54      	ldr	r3, [pc, #336]	@ (3401ed38 <_strerror_r+0x2a8>)
3401ebe6:	e7ed      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebe8:	4b54      	ldr	r3, [pc, #336]	@ (3401ed3c <_strerror_r+0x2ac>)
3401ebea:	e7eb      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebec:	4b54      	ldr	r3, [pc, #336]	@ (3401ed40 <_strerror_r+0x2b0>)
3401ebee:	e7e9      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebf0:	4b54      	ldr	r3, [pc, #336]	@ (3401ed44 <_strerror_r+0x2b4>)
3401ebf2:	e7e7      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebf4:	4b54      	ldr	r3, [pc, #336]	@ (3401ed48 <_strerror_r+0x2b8>)
3401ebf6:	e7e5      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebf8:	4b54      	ldr	r3, [pc, #336]	@ (3401ed4c <_strerror_r+0x2bc>)
3401ebfa:	e7e3      	b.n	3401ebc4 <_strerror_r+0x134>
3401ebfc:	4b54      	ldr	r3, [pc, #336]	@ (3401ed50 <_strerror_r+0x2c0>)
3401ebfe:	e7e1      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec00:	4b54      	ldr	r3, [pc, #336]	@ (3401ed54 <_strerror_r+0x2c4>)
3401ec02:	e7df      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec04:	4b54      	ldr	r3, [pc, #336]	@ (3401ed58 <_strerror_r+0x2c8>)
3401ec06:	e7dd      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec08:	4b54      	ldr	r3, [pc, #336]	@ (3401ed5c <_strerror_r+0x2cc>)
3401ec0a:	e7db      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec0c:	4b54      	ldr	r3, [pc, #336]	@ (3401ed60 <_strerror_r+0x2d0>)
3401ec0e:	e7d9      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec10:	4b54      	ldr	r3, [pc, #336]	@ (3401ed64 <_strerror_r+0x2d4>)
3401ec12:	e7d7      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec14:	4b54      	ldr	r3, [pc, #336]	@ (3401ed68 <_strerror_r+0x2d8>)
3401ec16:	e7d5      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec18:	4b54      	ldr	r3, [pc, #336]	@ (3401ed6c <_strerror_r+0x2dc>)
3401ec1a:	e7d3      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec1c:	4b54      	ldr	r3, [pc, #336]	@ (3401ed70 <_strerror_r+0x2e0>)
3401ec1e:	e7d1      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec20:	4b54      	ldr	r3, [pc, #336]	@ (3401ed74 <_strerror_r+0x2e4>)
3401ec22:	e7cf      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec24:	4b54      	ldr	r3, [pc, #336]	@ (3401ed78 <_strerror_r+0x2e8>)
3401ec26:	e7cd      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec28:	4b54      	ldr	r3, [pc, #336]	@ (3401ed7c <_strerror_r+0x2ec>)
3401ec2a:	e7cb      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec2c:	4b54      	ldr	r3, [pc, #336]	@ (3401ed80 <_strerror_r+0x2f0>)
3401ec2e:	e7c9      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec30:	4b54      	ldr	r3, [pc, #336]	@ (3401ed84 <_strerror_r+0x2f4>)
3401ec32:	e7c7      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec34:	4b54      	ldr	r3, [pc, #336]	@ (3401ed88 <_strerror_r+0x2f8>)
3401ec36:	e7c5      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec38:	4b54      	ldr	r3, [pc, #336]	@ (3401ed8c <_strerror_r+0x2fc>)
3401ec3a:	e7c3      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec3c:	4b54      	ldr	r3, [pc, #336]	@ (3401ed90 <_strerror_r+0x300>)
3401ec3e:	e7c1      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec40:	4b54      	ldr	r3, [pc, #336]	@ (3401ed94 <_strerror_r+0x304>)
3401ec42:	e7bf      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec44:	4b54      	ldr	r3, [pc, #336]	@ (3401ed98 <_strerror_r+0x308>)
3401ec46:	e7bd      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec48:	4b54      	ldr	r3, [pc, #336]	@ (3401ed9c <_strerror_r+0x30c>)
3401ec4a:	e7bb      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec4c:	4b54      	ldr	r3, [pc, #336]	@ (3401eda0 <_strerror_r+0x310>)
3401ec4e:	e7b9      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec50:	4b54      	ldr	r3, [pc, #336]	@ (3401eda4 <_strerror_r+0x314>)
3401ec52:	e7b7      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec54:	4b54      	ldr	r3, [pc, #336]	@ (3401eda8 <_strerror_r+0x318>)
3401ec56:	e7b5      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec58:	4b54      	ldr	r3, [pc, #336]	@ (3401edac <_strerror_r+0x31c>)
3401ec5a:	e7b3      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec5c:	4b54      	ldr	r3, [pc, #336]	@ (3401edb0 <_strerror_r+0x320>)
3401ec5e:	e7b1      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec60:	4b54      	ldr	r3, [pc, #336]	@ (3401edb4 <_strerror_r+0x324>)
3401ec62:	e7af      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec64:	4b54      	ldr	r3, [pc, #336]	@ (3401edb8 <_strerror_r+0x328>)
3401ec66:	e7ad      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec68:	4b54      	ldr	r3, [pc, #336]	@ (3401edbc <_strerror_r+0x32c>)
3401ec6a:	e7ab      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec6c:	4b54      	ldr	r3, [pc, #336]	@ (3401edc0 <_strerror_r+0x330>)
3401ec6e:	e7a9      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec70:	4b54      	ldr	r3, [pc, #336]	@ (3401edc4 <_strerror_r+0x334>)
3401ec72:	e7a7      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec74:	4b54      	ldr	r3, [pc, #336]	@ (3401edc8 <_strerror_r+0x338>)
3401ec76:	e7a5      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec78:	4b54      	ldr	r3, [pc, #336]	@ (3401edcc <_strerror_r+0x33c>)
3401ec7a:	e7a3      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec7c:	4b54      	ldr	r3, [pc, #336]	@ (3401edd0 <_strerror_r+0x340>)
3401ec7e:	e7a1      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec80:	4b54      	ldr	r3, [pc, #336]	@ (3401edd4 <_strerror_r+0x344>)
3401ec82:	e79f      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec84:	4b54      	ldr	r3, [pc, #336]	@ (3401edd8 <_strerror_r+0x348>)
3401ec86:	e79d      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec88:	4b54      	ldr	r3, [pc, #336]	@ (3401eddc <_strerror_r+0x34c>)
3401ec8a:	e79b      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec8c:	4b54      	ldr	r3, [pc, #336]	@ (3401ede0 <_strerror_r+0x350>)
3401ec8e:	e799      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec90:	4b54      	ldr	r3, [pc, #336]	@ (3401ede4 <_strerror_r+0x354>)
3401ec92:	e797      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec94:	4b54      	ldr	r3, [pc, #336]	@ (3401ede8 <_strerror_r+0x358>)
3401ec96:	e795      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec98:	4b54      	ldr	r3, [pc, #336]	@ (3401edec <_strerror_r+0x35c>)
3401ec9a:	e793      	b.n	3401ebc4 <_strerror_r+0x134>
3401ec9c:	4b54      	ldr	r3, [pc, #336]	@ (3401edf0 <_strerror_r+0x360>)
3401ec9e:	e791      	b.n	3401ebc4 <_strerror_r+0x134>
3401eca0:	4b54      	ldr	r3, [pc, #336]	@ (3401edf4 <_strerror_r+0x364>)
3401eca2:	e78f      	b.n	3401ebc4 <_strerror_r+0x134>
3401eca4:	4b54      	ldr	r3, [pc, #336]	@ (3401edf8 <_strerror_r+0x368>)
3401eca6:	e78d      	b.n	3401ebc4 <_strerror_r+0x134>
3401eca8:	4b54      	ldr	r3, [pc, #336]	@ (3401edfc <_strerror_r+0x36c>)
3401ecaa:	e78b      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecac:	4b54      	ldr	r3, [pc, #336]	@ (3401ee00 <_strerror_r+0x370>)
3401ecae:	e789      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecb0:	4b54      	ldr	r3, [pc, #336]	@ (3401ee04 <_strerror_r+0x374>)
3401ecb2:	e787      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecb4:	4b54      	ldr	r3, [pc, #336]	@ (3401ee08 <_strerror_r+0x378>)
3401ecb6:	e785      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecb8:	4b54      	ldr	r3, [pc, #336]	@ (3401ee0c <_strerror_r+0x37c>)
3401ecba:	e783      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecbc:	4b54      	ldr	r3, [pc, #336]	@ (3401ee10 <_strerror_r+0x380>)
3401ecbe:	e781      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecc0:	4b54      	ldr	r3, [pc, #336]	@ (3401ee14 <_strerror_r+0x384>)
3401ecc2:	e77f      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecc4:	4b54      	ldr	r3, [pc, #336]	@ (3401ee18 <_strerror_r+0x388>)
3401ecc6:	e77d      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecc8:	4b54      	ldr	r3, [pc, #336]	@ (3401ee1c <_strerror_r+0x38c>)
3401ecca:	e77b      	b.n	3401ebc4 <_strerror_r+0x134>
3401eccc:	4b54      	ldr	r3, [pc, #336]	@ (3401ee20 <_strerror_r+0x390>)
3401ecce:	e779      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecd0:	4b54      	ldr	r3, [pc, #336]	@ (3401ee24 <_strerror_r+0x394>)
3401ecd2:	e777      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecd4:	4b54      	ldr	r3, [pc, #336]	@ (3401ee28 <_strerror_r+0x398>)
3401ecd6:	e775      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecd8:	4b54      	ldr	r3, [pc, #336]	@ (3401ee2c <_strerror_r+0x39c>)
3401ecda:	e773      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecdc:	4b54      	ldr	r3, [pc, #336]	@ (3401ee30 <_strerror_r+0x3a0>)
3401ecde:	e771      	b.n	3401ebc4 <_strerror_r+0x134>
3401ece0:	4b54      	ldr	r3, [pc, #336]	@ (3401ee34 <_strerror_r+0x3a4>)
3401ece2:	e76f      	b.n	3401ebc4 <_strerror_r+0x134>
3401ece4:	4b54      	ldr	r3, [pc, #336]	@ (3401ee38 <_strerror_r+0x3a8>)
3401ece6:	e76d      	b.n	3401ebc4 <_strerror_r+0x134>
3401ece8:	4b54      	ldr	r3, [pc, #336]	@ (3401ee3c <_strerror_r+0x3ac>)
3401ecea:	e76b      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecec:	4b54      	ldr	r3, [pc, #336]	@ (3401ee40 <_strerror_r+0x3b0>)
3401ecee:	e769      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecf0:	4b54      	ldr	r3, [pc, #336]	@ (3401ee44 <_strerror_r+0x3b4>)
3401ecf2:	e767      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecf4:	4b54      	ldr	r3, [pc, #336]	@ (3401ee48 <_strerror_r+0x3b8>)
3401ecf6:	e765      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecf8:	4b54      	ldr	r3, [pc, #336]	@ (3401ee4c <_strerror_r+0x3bc>)
3401ecfa:	e763      	b.n	3401ebc4 <_strerror_r+0x134>
3401ecfc:	4b54      	ldr	r3, [pc, #336]	@ (3401ee50 <_strerror_r+0x3c0>)
3401ecfe:	e761      	b.n	3401ebc4 <_strerror_r+0x134>
3401ed00:	2a00      	cmp	r2, #0
3401ed02:	bf08      	it	eq
3401ed04:	4622      	moveq	r2, r4
3401ed06:	f000 f8b3 	bl	3401ee70 <_user_strerror>
3401ed0a:	4b52      	ldr	r3, [pc, #328]	@ (3401ee54 <_strerror_r+0x3c4>)
3401ed0c:	2800      	cmp	r0, #0
3401ed0e:	bf18      	it	ne
3401ed10:	4603      	movne	r3, r0
3401ed12:	e757      	b.n	3401ebc4 <_strerror_r+0x134>
3401ed14:	4b50      	ldr	r3, [pc, #320]	@ (3401ee58 <_strerror_r+0x3c8>)
3401ed16:	e755      	b.n	3401ebc4 <_strerror_r+0x134>
3401ed18:	3402703f 	.word	0x3402703f
3401ed1c:	34027051 	.word	0x34027051
3401ed20:	3402706b 	.word	0x3402706b
3401ed24:	3402707b 	.word	0x3402707b
3401ed28:	34027093 	.word	0x34027093
3401ed2c:	3402709d 	.word	0x3402709d
3401ed30:	340270b7 	.word	0x340270b7
3401ed34:	340270c9 	.word	0x340270c9
3401ed38:	340270db 	.word	0x340270db
3401ed3c:	340270f4 	.word	0x340270f4
3401ed40:	34027104 	.word	0x34027104
3401ed44:	34027110 	.word	0x34027110
3401ed48:	3402712d 	.word	0x3402712d
3401ed4c:	3402713f 	.word	0x3402713f
3401ed50:	34027150 	.word	0x34027150
3401ed54:	34027162 	.word	0x34027162
3401ed58:	3402716e 	.word	0x3402716e
3401ed5c:	34027186 	.word	0x34027186
3401ed60:	34027192 	.word	0x34027192
3401ed64:	340271a4 	.word	0x340271a4
3401ed68:	340271b3 	.word	0x340271b3
3401ed6c:	340271c3 	.word	0x340271c3
3401ed70:	340271d0 	.word	0x340271d0
3401ed74:	340271ef 	.word	0x340271ef
3401ed78:	340271fe 	.word	0x340271fe
3401ed7c:	3402720f 	.word	0x3402720f
3401ed80:	34027233 	.word	0x34027233
3401ed84:	34027251 	.word	0x34027251
3401ed88:	3402726f 	.word	0x3402726f
3401ed8c:	3402728f 	.word	0x3402728f
3401ed90:	340272a6 	.word	0x340272a6
3401ed94:	340272b5 	.word	0x340272b5
3401ed98:	340272c4 	.word	0x340272c4
3401ed9c:	340272d8 	.word	0x340272d8
3401eda0:	340272f0 	.word	0x340272f0
3401eda4:	340272fe 	.word	0x340272fe
3401eda8:	3402730b 	.word	0x3402730b
3401edac:	34027321 	.word	0x34027321
3401edb0:	34027330 	.word	0x34027330
3401edb4:	3402733c 	.word	0x3402733c
3401edb8:	3402736b 	.word	0x3402736b
3401edbc:	3402737c 	.word	0x3402737c
3401edc0:	34027397 	.word	0x34027397
3401edc4:	340273aa 	.word	0x340273aa
3401edc8:	340273c0 	.word	0x340273c0
3401edcc:	340273c9 	.word	0x340273c9
3401edd0:	340273e0 	.word	0x340273e0
3401edd4:	340273e8 	.word	0x340273e8
3401edd8:	340273f5 	.word	0x340273f5
3401eddc:	3402740a 	.word	0x3402740a
3401ede0:	3402741e 	.word	0x3402741e
3401ede4:	34027436 	.word	0x34027436
3401ede8:	34027445 	.word	0x34027445
3401edec:	34027456 	.word	0x34027456
3401edf0:	34027469 	.word	0x34027469
3401edf4:	34027475 	.word	0x34027475
3401edf8:	3402748e 	.word	0x3402748e
3401edfc:	340274a2 	.word	0x340274a2
3401ee00:	340274bd 	.word	0x340274bd
3401ee04:	340274d5 	.word	0x340274d5
3401ee08:	340274ef 	.word	0x340274ef
3401ee0c:	340274f7 	.word	0x340274f7
3401ee10:	34027527 	.word	0x34027527
3401ee14:	34027546 	.word	0x34027546
3401ee18:	34027565 	.word	0x34027565
3401ee1c:	3402757c 	.word	0x3402757c
3401ee20:	3402758f 	.word	0x3402758f
3401ee24:	340275a8 	.word	0x340275a8
3401ee28:	340275bf 	.word	0x340275bf
3401ee2c:	340275d5 	.word	0x340275d5
3401ee30:	340275f6 	.word	0x340275f6
3401ee34:	3402760e 	.word	0x3402760e
3401ee38:	3402762a 	.word	0x3402762a
3401ee3c:	3402763d 	.word	0x3402763d
3401ee40:	34027653 	.word	0x34027653
3401ee44:	34027667 	.word	0x34027667
3401ee48:	34027689 	.word	0x34027689
3401ee4c:	340276af 	.word	0x340276af
3401ee50:	340276c0 	.word	0x340276c0
3401ee54:	34022f50 	.word	0x34022f50
3401ee58:	34027047 	.word	0x34027047

3401ee5c <strerror>:
3401ee5c:	4601      	mov	r1, r0
3401ee5e:	2300      	movs	r3, #0
3401ee60:	4802      	ldr	r0, [pc, #8]	@ (3401ee6c <strerror+0x10>)
3401ee62:	461a      	mov	r2, r3
3401ee64:	6800      	ldr	r0, [r0, #0]
3401ee66:	f7ff be13 	b.w	3401ea90 <_strerror_r>
3401ee6a:	bf00      	nop
3401ee6c:	340a3258 	.word	0x340a3258

3401ee70 <_user_strerror>:
3401ee70:	2000      	movs	r0, #0
3401ee72:	4770      	bx	lr

3401ee74 <_localeconv_r>:
3401ee74:	4800      	ldr	r0, [pc, #0]	@ (3401ee78 <_localeconv_r+0x4>)
3401ee76:	4770      	bx	lr
3401ee78:	340a3398 	.word	0x340a3398

3401ee7c <_close_r>:
3401ee7c:	b538      	push	{r3, r4, r5, lr}
3401ee7e:	2300      	movs	r3, #0
3401ee80:	4d05      	ldr	r5, [pc, #20]	@ (3401ee98 <_close_r+0x1c>)
3401ee82:	4604      	mov	r4, r0
3401ee84:	4608      	mov	r0, r1
3401ee86:	602b      	str	r3, [r5, #0]
3401ee88:	f7e3 f8c0 	bl	3400200c <_close>
3401ee8c:	1c43      	adds	r3, r0, #1
3401ee8e:	d102      	bne.n	3401ee96 <_close_r+0x1a>
3401ee90:	682b      	ldr	r3, [r5, #0]
3401ee92:	b103      	cbz	r3, 3401ee96 <_close_r+0x1a>
3401ee94:	6023      	str	r3, [r4, #0]
3401ee96:	bd38      	pop	{r3, r4, r5, pc}
3401ee98:	3419050c 	.word	0x3419050c

3401ee9c <_lseek_r>:
3401ee9c:	b538      	push	{r3, r4, r5, lr}
3401ee9e:	4604      	mov	r4, r0
3401eea0:	4d06      	ldr	r5, [pc, #24]	@ (3401eebc <_lseek_r+0x20>)
3401eea2:	4608      	mov	r0, r1
3401eea4:	4611      	mov	r1, r2
3401eea6:	2200      	movs	r2, #0
3401eea8:	602a      	str	r2, [r5, #0]
3401eeaa:	461a      	mov	r2, r3
3401eeac:	f7e3 f8b8 	bl	34002020 <_lseek>
3401eeb0:	1c43      	adds	r3, r0, #1
3401eeb2:	d102      	bne.n	3401eeba <_lseek_r+0x1e>
3401eeb4:	682b      	ldr	r3, [r5, #0]
3401eeb6:	b103      	cbz	r3, 3401eeba <_lseek_r+0x1e>
3401eeb8:	6023      	str	r3, [r4, #0]
3401eeba:	bd38      	pop	{r3, r4, r5, pc}
3401eebc:	3419050c 	.word	0x3419050c

3401eec0 <_read_r>:
3401eec0:	b538      	push	{r3, r4, r5, lr}
3401eec2:	4604      	mov	r4, r0
3401eec4:	4d06      	ldr	r5, [pc, #24]	@ (3401eee0 <_read_r+0x20>)
3401eec6:	4608      	mov	r0, r1
3401eec8:	4611      	mov	r1, r2
3401eeca:	2200      	movs	r2, #0
3401eecc:	602a      	str	r2, [r5, #0]
3401eece:	461a      	mov	r2, r3
3401eed0:	f7e3 f88e 	bl	34001ff0 <_read>
3401eed4:	1c43      	adds	r3, r0, #1
3401eed6:	d102      	bne.n	3401eede <_read_r+0x1e>
3401eed8:	682b      	ldr	r3, [r5, #0]
3401eeda:	b103      	cbz	r3, 3401eede <_read_r+0x1e>
3401eedc:	6023      	str	r3, [r4, #0]
3401eede:	bd38      	pop	{r3, r4, r5, pc}
3401eee0:	3419050c 	.word	0x3419050c

3401eee4 <_write_r>:
3401eee4:	b538      	push	{r3, r4, r5, lr}
3401eee6:	4604      	mov	r4, r0
3401eee8:	4d06      	ldr	r5, [pc, #24]	@ (3401ef04 <_write_r+0x20>)
3401eeea:	4608      	mov	r0, r1
3401eeec:	4611      	mov	r1, r2
3401eeee:	2200      	movs	r2, #0
3401eef0:	602a      	str	r2, [r5, #0]
3401eef2:	461a      	mov	r2, r3
3401eef4:	f7e2 ffe8 	bl	34001ec8 <_write>
3401eef8:	1c43      	adds	r3, r0, #1
3401eefa:	d102      	bne.n	3401ef02 <_write_r+0x1e>
3401eefc:	682b      	ldr	r3, [r5, #0]
3401eefe:	b103      	cbz	r3, 3401ef02 <_write_r+0x1e>
3401ef00:	6023      	str	r3, [r4, #0]
3401ef02:	bd38      	pop	{r3, r4, r5, pc}
3401ef04:	3419050c 	.word	0x3419050c

3401ef08 <__errno>:
3401ef08:	4b01      	ldr	r3, [pc, #4]	@ (3401ef10 <__errno+0x8>)
3401ef0a:	6818      	ldr	r0, [r3, #0]
3401ef0c:	4770      	bx	lr
3401ef0e:	bf00      	nop
3401ef10:	340a3258 	.word	0x340a3258

3401ef14 <__libc_init_array>:
3401ef14:	b570      	push	{r4, r5, r6, lr}
3401ef16:	4d0d      	ldr	r5, [pc, #52]	@ (3401ef4c <__libc_init_array+0x38>)
3401ef18:	2600      	movs	r6, #0
3401ef1a:	4c0d      	ldr	r4, [pc, #52]	@ (3401ef50 <__libc_init_array+0x3c>)
3401ef1c:	1b64      	subs	r4, r4, r5
3401ef1e:	10a4      	asrs	r4, r4, #2
3401ef20:	42a6      	cmp	r6, r4
3401ef22:	d109      	bne.n	3401ef38 <__libc_init_array+0x24>
3401ef24:	4d0b      	ldr	r5, [pc, #44]	@ (3401ef54 <__libc_init_array+0x40>)
3401ef26:	2600      	movs	r6, #0
3401ef28:	4c0b      	ldr	r4, [pc, #44]	@ (3401ef58 <__libc_init_array+0x44>)
3401ef2a:	f003 fcd5 	bl	340228d8 <_init>
3401ef2e:	1b64      	subs	r4, r4, r5
3401ef30:	10a4      	asrs	r4, r4, #2
3401ef32:	42a6      	cmp	r6, r4
3401ef34:	d105      	bne.n	3401ef42 <__libc_init_array+0x2e>
3401ef36:	bd70      	pop	{r4, r5, r6, pc}
3401ef38:	f855 3b04 	ldr.w	r3, [r5], #4
3401ef3c:	3601      	adds	r6, #1
3401ef3e:	4798      	blx	r3
3401ef40:	e7ee      	b.n	3401ef20 <__libc_init_array+0xc>
3401ef42:	f855 3b04 	ldr.w	r3, [r5], #4
3401ef46:	3601      	adds	r6, #1
3401ef48:	4798      	blx	r3
3401ef4a:	e7f2      	b.n	3401ef32 <__libc_init_array+0x1e>
3401ef4c:	340a302c 	.word	0x340a302c
3401ef50:	340a302c 	.word	0x340a302c
3401ef54:	340a302c 	.word	0x340a302c
3401ef58:	340a3030 	.word	0x340a3030

3401ef5c <__retarget_lock_init_recursive>:
3401ef5c:	4770      	bx	lr

3401ef5e <__retarget_lock_acquire_recursive>:
3401ef5e:	4770      	bx	lr

3401ef60 <__retarget_lock_release_recursive>:
3401ef60:	4770      	bx	lr

3401ef62 <strcpy>:
3401ef62:	4603      	mov	r3, r0
3401ef64:	f811 2b01 	ldrb.w	r2, [r1], #1
3401ef68:	f803 2b01 	strb.w	r2, [r3], #1
3401ef6c:	2a00      	cmp	r2, #0
3401ef6e:	d1f9      	bne.n	3401ef64 <strcpy+0x2>
3401ef70:	4770      	bx	lr

3401ef72 <memchr>:
3401ef72:	b2c9      	uxtb	r1, r1
3401ef74:	4603      	mov	r3, r0
3401ef76:	4402      	add	r2, r0
3401ef78:	b510      	push	{r4, lr}
3401ef7a:	4293      	cmp	r3, r2
3401ef7c:	4618      	mov	r0, r3
3401ef7e:	d101      	bne.n	3401ef84 <memchr+0x12>
3401ef80:	2000      	movs	r0, #0
3401ef82:	e003      	b.n	3401ef8c <memchr+0x1a>
3401ef84:	7804      	ldrb	r4, [r0, #0]
3401ef86:	3301      	adds	r3, #1
3401ef88:	428c      	cmp	r4, r1
3401ef8a:	d1f6      	bne.n	3401ef7a <memchr+0x8>
3401ef8c:	bd10      	pop	{r4, pc}

3401ef8e <memcpy>:
3401ef8e:	440a      	add	r2, r1
3401ef90:	1e43      	subs	r3, r0, #1
3401ef92:	4291      	cmp	r1, r2
3401ef94:	d100      	bne.n	3401ef98 <memcpy+0xa>
3401ef96:	4770      	bx	lr
3401ef98:	b510      	push	{r4, lr}
3401ef9a:	f811 4b01 	ldrb.w	r4, [r1], #1
3401ef9e:	4291      	cmp	r1, r2
3401efa0:	f803 4f01 	strb.w	r4, [r3, #1]!
3401efa4:	d1f9      	bne.n	3401ef9a <memcpy+0xc>
3401efa6:	bd10      	pop	{r4, pc}

3401efa8 <abort>:
3401efa8:	2006      	movs	r0, #6
3401efaa:	b508      	push	{r3, lr}
3401efac:	f001 fe34 	bl	34020c18 <raise>
3401efb0:	2001      	movs	r0, #1
3401efb2:	f7e3 f817 	bl	34001fe4 <_exit>

3401efb6 <quorem>:
3401efb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401efba:	6903      	ldr	r3, [r0, #16]
3401efbc:	4607      	mov	r7, r0
3401efbe:	690c      	ldr	r4, [r1, #16]
3401efc0:	42a3      	cmp	r3, r4
3401efc2:	f2c0 8083 	blt.w	3401f0cc <quorem+0x116>
3401efc6:	3c01      	subs	r4, #1
3401efc8:	f100 0514 	add.w	r5, r0, #20
3401efcc:	f101 0814 	add.w	r8, r1, #20
3401efd0:	00a3      	lsls	r3, r4, #2
3401efd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401efd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
3401efda:	9300      	str	r3, [sp, #0]
3401efdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401efe0:	9301      	str	r3, [sp, #4]
3401efe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
3401efe6:	3301      	adds	r3, #1
3401efe8:	429a      	cmp	r2, r3
3401efea:	fbb2 f6f3 	udiv	r6, r2, r3
3401efee:	d331      	bcc.n	3401f054 <quorem+0x9e>
3401eff0:	f04f 0a00 	mov.w	sl, #0
3401eff4:	46c4      	mov	ip, r8
3401eff6:	46ae      	mov	lr, r5
3401eff8:	46d3      	mov	fp, sl
3401effa:	f85c 3b04 	ldr.w	r3, [ip], #4
3401effe:	b298      	uxth	r0, r3
3401f000:	45e1      	cmp	r9, ip
3401f002:	ea4f 4313 	mov.w	r3, r3, lsr #16
3401f006:	fb06 a000 	mla	r0, r6, r0, sl
3401f00a:	ea4f 4210 	mov.w	r2, r0, lsr #16
3401f00e:	b280      	uxth	r0, r0
3401f010:	fb06 2303 	mla	r3, r6, r3, r2
3401f014:	f8de 2000 	ldr.w	r2, [lr]
3401f018:	b292      	uxth	r2, r2
3401f01a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3401f01e:	eba2 0200 	sub.w	r2, r2, r0
3401f022:	b29b      	uxth	r3, r3
3401f024:	f8de 0000 	ldr.w	r0, [lr]
3401f028:	445a      	add	r2, fp
3401f02a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
3401f02e:	b292      	uxth	r2, r2
3401f030:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3401f034:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
3401f038:	ea4f 4b23 	mov.w	fp, r3, asr #16
3401f03c:	f84e 2b04 	str.w	r2, [lr], #4
3401f040:	d2db      	bcs.n	3401effa <quorem+0x44>
3401f042:	9b00      	ldr	r3, [sp, #0]
3401f044:	58eb      	ldr	r3, [r5, r3]
3401f046:	b92b      	cbnz	r3, 3401f054 <quorem+0x9e>
3401f048:	9b01      	ldr	r3, [sp, #4]
3401f04a:	3b04      	subs	r3, #4
3401f04c:	429d      	cmp	r5, r3
3401f04e:	461a      	mov	r2, r3
3401f050:	d330      	bcc.n	3401f0b4 <quorem+0xfe>
3401f052:	613c      	str	r4, [r7, #16]
3401f054:	4638      	mov	r0, r7
3401f056:	f001 f903 	bl	34020260 <__mcmp>
3401f05a:	2800      	cmp	r0, #0
3401f05c:	db26      	blt.n	3401f0ac <quorem+0xf6>
3401f05e:	4629      	mov	r1, r5
3401f060:	2000      	movs	r0, #0
3401f062:	f858 2b04 	ldr.w	r2, [r8], #4
3401f066:	f8d1 c000 	ldr.w	ip, [r1]
3401f06a:	fa1f fe82 	uxth.w	lr, r2
3401f06e:	45c1      	cmp	r9, r8
3401f070:	fa1f f38c 	uxth.w	r3, ip
3401f074:	ea4f 4212 	mov.w	r2, r2, lsr #16
3401f078:	eba3 030e 	sub.w	r3, r3, lr
3401f07c:	4403      	add	r3, r0
3401f07e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3401f082:	b29b      	uxth	r3, r3
3401f084:	eb02 421c 	add.w	r2, r2, ip, lsr #16
3401f088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3401f08c:	ea4f 4022 	mov.w	r0, r2, asr #16
3401f090:	f841 3b04 	str.w	r3, [r1], #4
3401f094:	d2e5      	bcs.n	3401f062 <quorem+0xac>
3401f096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
3401f09a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3401f09e:	b922      	cbnz	r2, 3401f0aa <quorem+0xf4>
3401f0a0:	3b04      	subs	r3, #4
3401f0a2:	429d      	cmp	r5, r3
3401f0a4:	461a      	mov	r2, r3
3401f0a6:	d30b      	bcc.n	3401f0c0 <quorem+0x10a>
3401f0a8:	613c      	str	r4, [r7, #16]
3401f0aa:	3601      	adds	r6, #1
3401f0ac:	4630      	mov	r0, r6
3401f0ae:	b003      	add	sp, #12
3401f0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401f0b4:	6812      	ldr	r2, [r2, #0]
3401f0b6:	3b04      	subs	r3, #4
3401f0b8:	2a00      	cmp	r2, #0
3401f0ba:	d1ca      	bne.n	3401f052 <quorem+0x9c>
3401f0bc:	3c01      	subs	r4, #1
3401f0be:	e7c5      	b.n	3401f04c <quorem+0x96>
3401f0c0:	6812      	ldr	r2, [r2, #0]
3401f0c2:	3b04      	subs	r3, #4
3401f0c4:	2a00      	cmp	r2, #0
3401f0c6:	d1ef      	bne.n	3401f0a8 <quorem+0xf2>
3401f0c8:	3c01      	subs	r4, #1
3401f0ca:	e7ea      	b.n	3401f0a2 <quorem+0xec>
3401f0cc:	2000      	movs	r0, #0
3401f0ce:	e7ee      	b.n	3401f0ae <quorem+0xf8>

3401f0d0 <_dtoa_r>:
3401f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401f0d4:	69c7      	ldr	r7, [r0, #28]
3401f0d6:	4681      	mov	r9, r0
3401f0d8:	ed2d 8b02 	vpush	{d8}
3401f0dc:	b091      	sub	sp, #68	@ 0x44
3401f0de:	ec55 4b10 	vmov	r4, r5, d0
3401f0e2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
3401f0e4:	9107      	str	r1, [sp, #28]
3401f0e6:	9209      	str	r2, [sp, #36]	@ 0x24
3401f0e8:	930d      	str	r3, [sp, #52]	@ 0x34
3401f0ea:	ed8d 0b02 	vstr	d0, [sp, #8]
3401f0ee:	b97f      	cbnz	r7, 3401f110 <_dtoa_r+0x40>
3401f0f0:	2010      	movs	r0, #16
3401f0f2:	f000 fd95 	bl	3401fc20 <malloc>
3401f0f6:	4602      	mov	r2, r0
3401f0f8:	f8c9 001c 	str.w	r0, [r9, #28]
3401f0fc:	b920      	cbnz	r0, 3401f108 <_dtoa_r+0x38>
3401f0fe:	4ba0      	ldr	r3, [pc, #640]	@ (3401f380 <_dtoa_r+0x2b0>)
3401f100:	21ef      	movs	r1, #239	@ 0xef
3401f102:	48a0      	ldr	r0, [pc, #640]	@ (3401f384 <_dtoa_r+0x2b4>)
3401f104:	f7fe fc72 	bl	3401d9ec <__assert_func>
3401f108:	e9c0 7701 	strd	r7, r7, [r0, #4]
3401f10c:	6007      	str	r7, [r0, #0]
3401f10e:	60c7      	str	r7, [r0, #12]
3401f110:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401f114:	6819      	ldr	r1, [r3, #0]
3401f116:	b159      	cbz	r1, 3401f130 <_dtoa_r+0x60>
3401f118:	685a      	ldr	r2, [r3, #4]
3401f11a:	2301      	movs	r3, #1
3401f11c:	4648      	mov	r0, r9
3401f11e:	4093      	lsls	r3, r2
3401f120:	604a      	str	r2, [r1, #4]
3401f122:	608b      	str	r3, [r1, #8]
3401f124:	f000 fe66 	bl	3401fdf4 <_Bfree>
3401f128:	f8d9 301c 	ldr.w	r3, [r9, #28]
3401f12c:	2200      	movs	r2, #0
3401f12e:	601a      	str	r2, [r3, #0]
3401f130:	1e2b      	subs	r3, r5, #0
3401f132:	bfb7      	itett	lt
3401f134:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
3401f138:	2300      	movge	r3, #0
3401f13a:	2201      	movlt	r2, #1
3401f13c:	9303      	strlt	r3, [sp, #12]
3401f13e:	bfac      	ite	ge
3401f140:	6033      	strge	r3, [r6, #0]
3401f142:	6032      	strlt	r2, [r6, #0]
3401f144:	4b90      	ldr	r3, [pc, #576]	@ (3401f388 <_dtoa_r+0x2b8>)
3401f146:	9e03      	ldr	r6, [sp, #12]
3401f148:	43b3      	bics	r3, r6
3401f14a:	d110      	bne.n	3401f16e <_dtoa_r+0x9e>
3401f14c:	f242 730f 	movw	r3, #9999	@ 0x270f
3401f150:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401f152:	6013      	str	r3, [r2, #0]
3401f154:	f3c6 0313 	ubfx	r3, r6, #0, #20
3401f158:	4323      	orrs	r3, r4
3401f15a:	f000 84e6 	beq.w	3401fb2a <_dtoa_r+0xa5a>
3401f15e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401f160:	4f8a      	ldr	r7, [pc, #552]	@ (3401f38c <_dtoa_r+0x2bc>)
3401f162:	2b00      	cmp	r3, #0
3401f164:	f000 84e8 	beq.w	3401fb38 <_dtoa_r+0xa68>
3401f168:	1cfb      	adds	r3, r7, #3
3401f16a:	f000 bce3 	b.w	3401fb34 <_dtoa_r+0xa64>
3401f16e:	ed9d 8b02 	vldr	d8, [sp, #8]
3401f172:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401f176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f17a:	d10a      	bne.n	3401f192 <_dtoa_r+0xc2>
3401f17c:	2301      	movs	r3, #1
3401f17e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401f180:	6013      	str	r3, [r2, #0]
3401f182:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401f184:	b113      	cbz	r3, 3401f18c <_dtoa_r+0xbc>
3401f186:	4b82      	ldr	r3, [pc, #520]	@ (3401f390 <_dtoa_r+0x2c0>)
3401f188:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401f18a:	6013      	str	r3, [r2, #0]
3401f18c:	4f81      	ldr	r7, [pc, #516]	@ (3401f394 <_dtoa_r+0x2c4>)
3401f18e:	f000 bcd3 	b.w	3401fb38 <_dtoa_r+0xa68>
3401f192:	aa0e      	add	r2, sp, #56	@ 0x38
3401f194:	eeb0 0b48 	vmov.f64	d0, d8
3401f198:	a90f      	add	r1, sp, #60	@ 0x3c
3401f19a:	4648      	mov	r0, r9
3401f19c:	f001 f914 	bl	340203c8 <__d2b>
3401f1a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
3401f1a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401f1a6:	9001      	str	r0, [sp, #4]
3401f1a8:	2b00      	cmp	r3, #0
3401f1aa:	d045      	beq.n	3401f238 <_dtoa_r+0x168>
3401f1ac:	ee18 1a90 	vmov	r1, s17
3401f1b0:	eeb0 7b48 	vmov.f64	d7, d8
3401f1b4:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
3401f1b8:	2500      	movs	r5, #0
3401f1ba:	f3c1 0113 	ubfx	r1, r1, #0, #20
3401f1be:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3401f1c2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3401f1c6:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
3401f1ca:	ee07 1a90 	vmov	s15, r1
3401f1ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 3401f368 <_dtoa_r+0x298>
3401f1d2:	ee37 7b46 	vsub.f64	d7, d7, d6
3401f1d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 3401f370 <_dtoa_r+0x2a0>
3401f1da:	eea7 6b05 	vfma.f64	d6, d7, d5
3401f1de:	ee07 3a90 	vmov	s15, r3
3401f1e2:	eeb8 4be7 	vcvt.f64.s32	d4, s15
3401f1e6:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 3401f378 <_dtoa_r+0x2a8>
3401f1ea:	eeb0 7b46 	vmov.f64	d7, d6
3401f1ee:	eea4 7b05 	vfma.f64	d7, d4, d5
3401f1f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
3401f1f6:	eefd 6bc7 	vcvt.s32.f64	s13, d7
3401f1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f1fe:	ee16 8a90 	vmov	r8, s13
3401f202:	d508      	bpl.n	3401f216 <_dtoa_r+0x146>
3401f204:	eeb8 6be6 	vcvt.f64.s32	d6, s13
3401f208:	eeb4 6b47 	vcmp.f64	d6, d7
3401f20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f210:	bf18      	it	ne
3401f212:	f108 38ff 	addne.w	r8, r8, #4294967295
3401f216:	f1b8 0f16 	cmp.w	r8, #22
3401f21a:	d82d      	bhi.n	3401f278 <_dtoa_r+0x1a8>
3401f21c:	495e      	ldr	r1, [pc, #376]	@ (3401f398 <_dtoa_r+0x2c8>)
3401f21e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
3401f222:	ed91 7b00 	vldr	d7, [r1]
3401f226:	eeb4 8bc7 	vcmpe.f64	d8, d7
3401f22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f22e:	d501      	bpl.n	3401f234 <_dtoa_r+0x164>
3401f230:	f108 38ff 	add.w	r8, r8, #4294967295
3401f234:	2100      	movs	r1, #0
3401f236:	e020      	b.n	3401f27a <_dtoa_r+0x1aa>
3401f238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3401f23a:	2501      	movs	r5, #1
3401f23c:	4413      	add	r3, r2
3401f23e:	f203 4132 	addw	r1, r3, #1074	@ 0x432
3401f242:	2920      	cmp	r1, #32
3401f244:	bfc9      	itett	gt
3401f246:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
3401f24a:	f1c1 0120 	rsble	r1, r1, #32
3401f24e:	408e      	lslgt	r6, r1
3401f250:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
3401f254:	bfd8      	it	le
3401f256:	fa04 f101 	lslle.w	r1, r4, r1
3401f25a:	f103 33ff 	add.w	r3, r3, #4294967295
3401f25e:	bfc4      	itt	gt
3401f260:	fa24 f101 	lsrgt.w	r1, r4, r1
3401f264:	4331      	orrgt	r1, r6
3401f266:	ee07 1a90 	vmov	s15, r1
3401f26a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3401f26e:	ee17 1a90 	vmov	r1, s15
3401f272:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
3401f276:	e7a6      	b.n	3401f1c6 <_dtoa_r+0xf6>
3401f278:	2101      	movs	r1, #1
3401f27a:	1ad2      	subs	r2, r2, r3
3401f27c:	910c      	str	r1, [sp, #48]	@ 0x30
3401f27e:	1e53      	subs	r3, r2, #1
3401f280:	9306      	str	r3, [sp, #24]
3401f282:	bf49      	itett	mi
3401f284:	f1c2 0301 	rsbmi	r3, r2, #1
3401f288:	2300      	movpl	r3, #0
3401f28a:	9304      	strmi	r3, [sp, #16]
3401f28c:	2300      	movmi	r3, #0
3401f28e:	bf54      	ite	pl
3401f290:	9304      	strpl	r3, [sp, #16]
3401f292:	9306      	strmi	r3, [sp, #24]
3401f294:	f1b8 0f00 	cmp.w	r8, #0
3401f298:	db16      	blt.n	3401f2c8 <_dtoa_r+0x1f8>
3401f29a:	9b06      	ldr	r3, [sp, #24]
3401f29c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
3401f2a0:	4443      	add	r3, r8
3401f2a2:	9306      	str	r3, [sp, #24]
3401f2a4:	2300      	movs	r3, #0
3401f2a6:	9a07      	ldr	r2, [sp, #28]
3401f2a8:	2a09      	cmp	r2, #9
3401f2aa:	d843      	bhi.n	3401f334 <_dtoa_r+0x264>
3401f2ac:	2a05      	cmp	r2, #5
3401f2ae:	bfc5      	ittet	gt
3401f2b0:	3a04      	subgt	r2, #4
3401f2b2:	2400      	movgt	r4, #0
3401f2b4:	2401      	movle	r4, #1
3401f2b6:	9207      	strgt	r2, [sp, #28]
3401f2b8:	9a07      	ldr	r2, [sp, #28]
3401f2ba:	3a02      	subs	r2, #2
3401f2bc:	2a03      	cmp	r2, #3
3401f2be:	d844      	bhi.n	3401f34a <_dtoa_r+0x27a>
3401f2c0:	e8df f002 	tbb	[pc, r2]
3401f2c4:	0b173634 	.word	0x0b173634
3401f2c8:	9b04      	ldr	r3, [sp, #16]
3401f2ca:	2200      	movs	r2, #0
3401f2cc:	eba3 0308 	sub.w	r3, r3, r8
3401f2d0:	920a      	str	r2, [sp, #40]	@ 0x28
3401f2d2:	9304      	str	r3, [sp, #16]
3401f2d4:	f1c8 0300 	rsb	r3, r8, #0
3401f2d8:	e7e5      	b.n	3401f2a6 <_dtoa_r+0x1d6>
3401f2da:	2201      	movs	r2, #1
3401f2dc:	9208      	str	r2, [sp, #32]
3401f2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401f2e0:	eb08 0b02 	add.w	fp, r8, r2
3401f2e4:	f10b 0a01 	add.w	sl, fp, #1
3401f2e8:	4652      	mov	r2, sl
3401f2ea:	2a01      	cmp	r2, #1
3401f2ec:	bfb8      	it	lt
3401f2ee:	2201      	movlt	r2, #1
3401f2f0:	e006      	b.n	3401f300 <_dtoa_r+0x230>
3401f2f2:	2201      	movs	r2, #1
3401f2f4:	9208      	str	r2, [sp, #32]
3401f2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401f2f8:	2a00      	cmp	r2, #0
3401f2fa:	dd29      	ble.n	3401f350 <_dtoa_r+0x280>
3401f2fc:	4693      	mov	fp, r2
3401f2fe:	4692      	mov	sl, r2
3401f300:	f8d9 701c 	ldr.w	r7, [r9, #28]
3401f304:	2100      	movs	r1, #0
3401f306:	2004      	movs	r0, #4
3401f308:	f100 0614 	add.w	r6, r0, #20
3401f30c:	4296      	cmp	r6, r2
3401f30e:	d926      	bls.n	3401f35e <_dtoa_r+0x28e>
3401f310:	6079      	str	r1, [r7, #4]
3401f312:	4648      	mov	r0, r9
3401f314:	9305      	str	r3, [sp, #20]
3401f316:	f000 fd2d 	bl	3401fd74 <_Balloc>
3401f31a:	9b05      	ldr	r3, [sp, #20]
3401f31c:	4607      	mov	r7, r0
3401f31e:	2800      	cmp	r0, #0
3401f320:	d13e      	bne.n	3401f3a0 <_dtoa_r+0x2d0>
3401f322:	4b1e      	ldr	r3, [pc, #120]	@ (3401f39c <_dtoa_r+0x2cc>)
3401f324:	4602      	mov	r2, r0
3401f326:	f240 11af 	movw	r1, #431	@ 0x1af
3401f32a:	e6ea      	b.n	3401f102 <_dtoa_r+0x32>
3401f32c:	2200      	movs	r2, #0
3401f32e:	e7e1      	b.n	3401f2f4 <_dtoa_r+0x224>
3401f330:	2200      	movs	r2, #0
3401f332:	e7d3      	b.n	3401f2dc <_dtoa_r+0x20c>
3401f334:	2401      	movs	r4, #1
3401f336:	2200      	movs	r2, #0
3401f338:	e9cd 2407 	strd	r2, r4, [sp, #28]
3401f33c:	f04f 3bff 	mov.w	fp, #4294967295
3401f340:	2100      	movs	r1, #0
3401f342:	2212      	movs	r2, #18
3401f344:	46da      	mov	sl, fp
3401f346:	9109      	str	r1, [sp, #36]	@ 0x24
3401f348:	e7da      	b.n	3401f300 <_dtoa_r+0x230>
3401f34a:	2201      	movs	r2, #1
3401f34c:	9208      	str	r2, [sp, #32]
3401f34e:	e7f5      	b.n	3401f33c <_dtoa_r+0x26c>
3401f350:	f04f 0b01 	mov.w	fp, #1
3401f354:	46da      	mov	sl, fp
3401f356:	465a      	mov	r2, fp
3401f358:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
3401f35c:	e7d0      	b.n	3401f300 <_dtoa_r+0x230>
3401f35e:	3101      	adds	r1, #1
3401f360:	0040      	lsls	r0, r0, #1
3401f362:	e7d1      	b.n	3401f308 <_dtoa_r+0x238>
3401f364:	f3af 8000 	nop.w
3401f368:	636f4361 	.word	0x636f4361
3401f36c:	3fd287a7 	.word	0x3fd287a7
3401f370:	8b60c8b3 	.word	0x8b60c8b3
3401f374:	3fc68a28 	.word	0x3fc68a28
3401f378:	509f79fb 	.word	0x509f79fb
3401f37c:	3fd34413 	.word	0x3fd34413
3401f380:	340276e2 	.word	0x340276e2
3401f384:	340276f9 	.word	0x340276f9
3401f388:	7ff00000 	.word	0x7ff00000
3401f38c:	340276de 	.word	0x340276de
3401f390:	340235d9 	.word	0x340235d9
3401f394:	340235d8 	.word	0x340235d8
3401f398:	340a0970 	.word	0x340a0970
3401f39c:	34027751 	.word	0x34027751
3401f3a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
3401f3a4:	f1ba 0f0e 	cmp.w	sl, #14
3401f3a8:	6010      	str	r0, [r2, #0]
3401f3aa:	d86e      	bhi.n	3401f48a <_dtoa_r+0x3ba>
3401f3ac:	2c00      	cmp	r4, #0
3401f3ae:	d06c      	beq.n	3401f48a <_dtoa_r+0x3ba>
3401f3b0:	f1b8 0f00 	cmp.w	r8, #0
3401f3b4:	f340 80b4 	ble.w	3401f520 <_dtoa_r+0x450>
3401f3b8:	f008 010f 	and.w	r1, r8, #15
3401f3bc:	4ac7      	ldr	r2, [pc, #796]	@ (3401f6dc <_dtoa_r+0x60c>)
3401f3be:	f418 7f80 	tst.w	r8, #256	@ 0x100
3401f3c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3401f3c6:	ea4f 1128 	mov.w	r1, r8, asr #4
3401f3ca:	ed92 7b00 	vldr	d7, [r2]
3401f3ce:	f000 809b 	beq.w	3401f508 <_dtoa_r+0x438>
3401f3d2:	4ac3      	ldr	r2, [pc, #780]	@ (3401f6e0 <_dtoa_r+0x610>)
3401f3d4:	f001 010f 	and.w	r1, r1, #15
3401f3d8:	ed92 6b08 	vldr	d6, [r2, #32]
3401f3dc:	2203      	movs	r2, #3
3401f3de:	ee88 6b06 	vdiv.f64	d6, d8, d6
3401f3e2:	ed8d 6b02 	vstr	d6, [sp, #8]
3401f3e6:	48be      	ldr	r0, [pc, #760]	@ (3401f6e0 <_dtoa_r+0x610>)
3401f3e8:	2900      	cmp	r1, #0
3401f3ea:	f040 808f 	bne.w	3401f50c <_dtoa_r+0x43c>
3401f3ee:	ed9d 6b02 	vldr	d6, [sp, #8]
3401f3f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
3401f3f6:	ed8d 7b02 	vstr	d7, [sp, #8]
3401f3fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
3401f3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
3401f400:	2900      	cmp	r1, #0
3401f402:	f000 80b3 	beq.w	3401f56c <_dtoa_r+0x49c>
3401f406:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
3401f40a:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401f40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f412:	f140 80ab 	bpl.w	3401f56c <_dtoa_r+0x49c>
3401f416:	f1ba 0f00 	cmp.w	sl, #0
3401f41a:	f000 80a7 	beq.w	3401f56c <_dtoa_r+0x49c>
3401f41e:	f1bb 0f00 	cmp.w	fp, #0
3401f422:	dd30      	ble.n	3401f486 <_dtoa_r+0x3b6>
3401f424:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
3401f428:	f108 31ff 	add.w	r1, r8, #4294967295
3401f42c:	3201      	adds	r2, #1
3401f42e:	465c      	mov	r4, fp
3401f430:	9105      	str	r1, [sp, #20]
3401f432:	ee27 7b06 	vmul.f64	d7, d7, d6
3401f436:	ed8d 7b02 	vstr	d7, [sp, #8]
3401f43a:	ee07 2a90 	vmov	s15, r2
3401f43e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
3401f442:	ed9d 6b02 	vldr	d6, [sp, #8]
3401f446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
3401f44a:	eea7 5b06 	vfma.f64	d5, d7, d6
3401f44e:	ee15 2a90 	vmov	r2, s11
3401f452:	ec51 0b15 	vmov	r0, r1, d5
3401f456:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
3401f45a:	2c00      	cmp	r4, #0
3401f45c:	f040 808a 	bne.w	3401f574 <_dtoa_r+0x4a4>
3401f460:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401f464:	ee36 6b47 	vsub.f64	d6, d6, d7
3401f468:	ec41 0b17 	vmov	d7, r0, r1
3401f46c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401f470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f474:	f300 826a 	bgt.w	3401f94c <_dtoa_r+0x87c>
3401f478:	eeb1 7b47 	vneg.f64	d7, d7
3401f47c:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401f480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f484:	d423      	bmi.n	3401f4ce <_dtoa_r+0x3fe>
3401f486:	ed8d 8b02 	vstr	d8, [sp, #8]
3401f48a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
3401f48c:	2a00      	cmp	r2, #0
3401f48e:	f2c0 8129 	blt.w	3401f6e4 <_dtoa_r+0x614>
3401f492:	f1b8 0f0e 	cmp.w	r8, #14
3401f496:	f300 8125 	bgt.w	3401f6e4 <_dtoa_r+0x614>
3401f49a:	4b90      	ldr	r3, [pc, #576]	@ (3401f6dc <_dtoa_r+0x60c>)
3401f49c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
3401f4a0:	ed93 6b00 	vldr	d6, [r3]
3401f4a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f4a6:	2b00      	cmp	r3, #0
3401f4a8:	f280 80c8 	bge.w	3401f63c <_dtoa_r+0x56c>
3401f4ac:	f1ba 0f00 	cmp.w	sl, #0
3401f4b0:	f300 80c4 	bgt.w	3401f63c <_dtoa_r+0x56c>
3401f4b4:	d10b      	bne.n	3401f4ce <_dtoa_r+0x3fe>
3401f4b6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
3401f4ba:	ee26 6b07 	vmul.f64	d6, d6, d7
3401f4be:	ed9d 7b02 	vldr	d7, [sp, #8]
3401f4c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f4ca:	f2c0 823c 	blt.w	3401f946 <_dtoa_r+0x876>
3401f4ce:	2400      	movs	r4, #0
3401f4d0:	4625      	mov	r5, r4
3401f4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f4d4:	463e      	mov	r6, r7
3401f4d6:	43db      	mvns	r3, r3
3401f4d8:	9305      	str	r3, [sp, #20]
3401f4da:	f04f 0800 	mov.w	r8, #0
3401f4de:	4621      	mov	r1, r4
3401f4e0:	4648      	mov	r0, r9
3401f4e2:	f000 fc87 	bl	3401fdf4 <_Bfree>
3401f4e6:	2d00      	cmp	r5, #0
3401f4e8:	f000 80a2 	beq.w	3401f630 <_dtoa_r+0x560>
3401f4ec:	f1b8 0f00 	cmp.w	r8, #0
3401f4f0:	d005      	beq.n	3401f4fe <_dtoa_r+0x42e>
3401f4f2:	45a8      	cmp	r8, r5
3401f4f4:	d003      	beq.n	3401f4fe <_dtoa_r+0x42e>
3401f4f6:	4641      	mov	r1, r8
3401f4f8:	4648      	mov	r0, r9
3401f4fa:	f000 fc7b 	bl	3401fdf4 <_Bfree>
3401f4fe:	4629      	mov	r1, r5
3401f500:	4648      	mov	r0, r9
3401f502:	f000 fc77 	bl	3401fdf4 <_Bfree>
3401f506:	e093      	b.n	3401f630 <_dtoa_r+0x560>
3401f508:	2202      	movs	r2, #2
3401f50a:	e76c      	b.n	3401f3e6 <_dtoa_r+0x316>
3401f50c:	07cc      	lsls	r4, r1, #31
3401f50e:	d504      	bpl.n	3401f51a <_dtoa_r+0x44a>
3401f510:	3201      	adds	r2, #1
3401f512:	ed90 6b00 	vldr	d6, [r0]
3401f516:	ee27 7b06 	vmul.f64	d7, d7, d6
3401f51a:	1049      	asrs	r1, r1, #1
3401f51c:	3008      	adds	r0, #8
3401f51e:	e763      	b.n	3401f3e8 <_dtoa_r+0x318>
3401f520:	d022      	beq.n	3401f568 <_dtoa_r+0x498>
3401f522:	f1c8 0100 	rsb	r1, r8, #0
3401f526:	4a6d      	ldr	r2, [pc, #436]	@ (3401f6dc <_dtoa_r+0x60c>)
3401f528:	2400      	movs	r4, #0
3401f52a:	f001 000f 	and.w	r0, r1, #15
3401f52e:	1109      	asrs	r1, r1, #4
3401f530:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
3401f534:	486a      	ldr	r0, [pc, #424]	@ (3401f6e0 <_dtoa_r+0x610>)
3401f536:	ed92 7b00 	vldr	d7, [r2]
3401f53a:	2202      	movs	r2, #2
3401f53c:	ee28 7b07 	vmul.f64	d7, d8, d7
3401f540:	ed8d 7b02 	vstr	d7, [sp, #8]
3401f544:	b929      	cbnz	r1, 3401f552 <_dtoa_r+0x482>
3401f546:	2c00      	cmp	r4, #0
3401f548:	f43f af57 	beq.w	3401f3fa <_dtoa_r+0x32a>
3401f54c:	ed8d 7b02 	vstr	d7, [sp, #8]
3401f550:	e753      	b.n	3401f3fa <_dtoa_r+0x32a>
3401f552:	07ce      	lsls	r6, r1, #31
3401f554:	d505      	bpl.n	3401f562 <_dtoa_r+0x492>
3401f556:	3201      	adds	r2, #1
3401f558:	2401      	movs	r4, #1
3401f55a:	ed90 6b00 	vldr	d6, [r0]
3401f55e:	ee27 7b06 	vmul.f64	d7, d7, d6
3401f562:	1049      	asrs	r1, r1, #1
3401f564:	3008      	adds	r0, #8
3401f566:	e7ed      	b.n	3401f544 <_dtoa_r+0x474>
3401f568:	2202      	movs	r2, #2
3401f56a:	e746      	b.n	3401f3fa <_dtoa_r+0x32a>
3401f56c:	4654      	mov	r4, sl
3401f56e:	f8cd 8014 	str.w	r8, [sp, #20]
3401f572:	e762      	b.n	3401f43a <_dtoa_r+0x36a>
3401f574:	4a59      	ldr	r2, [pc, #356]	@ (3401f6dc <_dtoa_r+0x60c>)
3401f576:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
3401f57a:	443c      	add	r4, r7
3401f57c:	ed12 4b02 	vldr	d4, [r2, #-8]
3401f580:	9a08      	ldr	r2, [sp, #32]
3401f582:	ec41 0b17 	vmov	d7, r0, r1
3401f586:	b34a      	cbz	r2, 3401f5dc <_dtoa_r+0x50c>
3401f588:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
3401f58c:	463e      	mov	r6, r7
3401f58e:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
3401f592:	ee83 5b04 	vdiv.f64	d5, d3, d4
3401f596:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401f59a:	ee35 7b47 	vsub.f64	d7, d5, d7
3401f59e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401f5a2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401f5a6:	ee14 2a90 	vmov	r2, s9
3401f5aa:	3230      	adds	r2, #48	@ 0x30
3401f5ac:	ee36 6b45 	vsub.f64	d6, d6, d5
3401f5b0:	f806 2b01 	strb.w	r2, [r6], #1
3401f5b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
3401f5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f5bc:	d438      	bmi.n	3401f630 <_dtoa_r+0x560>
3401f5be:	ee32 5b46 	vsub.f64	d5, d2, d6
3401f5c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
3401f5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f5ca:	d46e      	bmi.n	3401f6aa <_dtoa_r+0x5da>
3401f5cc:	42a6      	cmp	r6, r4
3401f5ce:	f43f af5a 	beq.w	3401f486 <_dtoa_r+0x3b6>
3401f5d2:	ee27 7b03 	vmul.f64	d7, d7, d3
3401f5d6:	ee26 6b03 	vmul.f64	d6, d6, d3
3401f5da:	e7e0      	b.n	3401f59e <_dtoa_r+0x4ce>
3401f5dc:	ee27 7b04 	vmul.f64	d7, d7, d4
3401f5e0:	4621      	mov	r1, r4
3401f5e2:	463e      	mov	r6, r7
3401f5e4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
3401f5e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
3401f5ec:	ee14 2a90 	vmov	r2, s9
3401f5f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
3401f5f4:	3230      	adds	r2, #48	@ 0x30
3401f5f6:	ee36 6b45 	vsub.f64	d6, d6, d5
3401f5fa:	f806 2b01 	strb.w	r2, [r6], #1
3401f5fe:	42a6      	cmp	r6, r4
3401f600:	d119      	bne.n	3401f636 <_dtoa_r+0x566>
3401f602:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
3401f606:	ee37 4b05 	vadd.f64	d4, d7, d5
3401f60a:	eeb4 6bc4 	vcmpe.f64	d6, d4
3401f60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f612:	dc4a      	bgt.n	3401f6aa <_dtoa_r+0x5da>
3401f614:	ee35 5b47 	vsub.f64	d5, d5, d7
3401f618:	eeb4 6bc5 	vcmpe.f64	d6, d5
3401f61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f620:	f57f af31 	bpl.w	3401f486 <_dtoa_r+0x3b6>
3401f624:	460e      	mov	r6, r1
3401f626:	3901      	subs	r1, #1
3401f628:	f816 3c01 	ldrb.w	r3, [r6, #-1]
3401f62c:	2b30      	cmp	r3, #48	@ 0x30
3401f62e:	d0f9      	beq.n	3401f624 <_dtoa_r+0x554>
3401f630:	f8dd 8014 	ldr.w	r8, [sp, #20]
3401f634:	e027      	b.n	3401f686 <_dtoa_r+0x5b6>
3401f636:	ee26 6b03 	vmul.f64	d6, d6, d3
3401f63a:	e7d5      	b.n	3401f5e8 <_dtoa_r+0x518>
3401f63c:	ed9d 7b02 	vldr	d7, [sp, #8]
3401f640:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
3401f644:	463e      	mov	r6, r7
3401f646:	ee87 5b06 	vdiv.f64	d5, d7, d6
3401f64a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
3401f64e:	ee15 3a10 	vmov	r3, s10
3401f652:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
3401f656:	3330      	adds	r3, #48	@ 0x30
3401f658:	eea3 7b46 	vfms.f64	d7, d3, d6
3401f65c:	f806 3b01 	strb.w	r3, [r6], #1
3401f660:	1bf3      	subs	r3, r6, r7
3401f662:	459a      	cmp	sl, r3
3401f664:	d132      	bne.n	3401f6cc <_dtoa_r+0x5fc>
3401f666:	ee37 7b07 	vadd.f64	d7, d7, d7
3401f66a:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401f66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f672:	dc18      	bgt.n	3401f6a6 <_dtoa_r+0x5d6>
3401f674:	eeb4 7b46 	vcmp.f64	d7, d6
3401f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f67c:	d103      	bne.n	3401f686 <_dtoa_r+0x5b6>
3401f67e:	ee15 3a10 	vmov	r3, s10
3401f682:	07db      	lsls	r3, r3, #31
3401f684:	d40f      	bmi.n	3401f6a6 <_dtoa_r+0x5d6>
3401f686:	9901      	ldr	r1, [sp, #4]
3401f688:	4648      	mov	r0, r9
3401f68a:	f000 fbb3 	bl	3401fdf4 <_Bfree>
3401f68e:	2300      	movs	r3, #0
3401f690:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3401f692:	7033      	strb	r3, [r6, #0]
3401f694:	f108 0301 	add.w	r3, r8, #1
3401f698:	6013      	str	r3, [r2, #0]
3401f69a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401f69c:	2b00      	cmp	r3, #0
3401f69e:	f000 824b 	beq.w	3401fb38 <_dtoa_r+0xa68>
3401f6a2:	601e      	str	r6, [r3, #0]
3401f6a4:	e248      	b.n	3401fb38 <_dtoa_r+0xa68>
3401f6a6:	f8cd 8014 	str.w	r8, [sp, #20]
3401f6aa:	4633      	mov	r3, r6
3401f6ac:	461e      	mov	r6, r3
3401f6ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401f6b2:	2a39      	cmp	r2, #57	@ 0x39
3401f6b4:	d106      	bne.n	3401f6c4 <_dtoa_r+0x5f4>
3401f6b6:	429f      	cmp	r7, r3
3401f6b8:	d1f8      	bne.n	3401f6ac <_dtoa_r+0x5dc>
3401f6ba:	9a05      	ldr	r2, [sp, #20]
3401f6bc:	3201      	adds	r2, #1
3401f6be:	9205      	str	r2, [sp, #20]
3401f6c0:	2230      	movs	r2, #48	@ 0x30
3401f6c2:	703a      	strb	r2, [r7, #0]
3401f6c4:	781a      	ldrb	r2, [r3, #0]
3401f6c6:	3201      	adds	r2, #1
3401f6c8:	701a      	strb	r2, [r3, #0]
3401f6ca:	e7b1      	b.n	3401f630 <_dtoa_r+0x560>
3401f6cc:	ee27 7b04 	vmul.f64	d7, d7, d4
3401f6d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f6d8:	d1b5      	bne.n	3401f646 <_dtoa_r+0x576>
3401f6da:	e7d4      	b.n	3401f686 <_dtoa_r+0x5b6>
3401f6dc:	340a0970 	.word	0x340a0970
3401f6e0:	340a0948 	.word	0x340a0948
3401f6e4:	9908      	ldr	r1, [sp, #32]
3401f6e6:	2900      	cmp	r1, #0
3401f6e8:	f000 80e9 	beq.w	3401f8be <_dtoa_r+0x7ee>
3401f6ec:	9907      	ldr	r1, [sp, #28]
3401f6ee:	2901      	cmp	r1, #1
3401f6f0:	f300 80cb 	bgt.w	3401f88a <_dtoa_r+0x7ba>
3401f6f4:	2d00      	cmp	r5, #0
3401f6f6:	f000 80c4 	beq.w	3401f882 <_dtoa_r+0x7b2>
3401f6fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3401f6fe:	461c      	mov	r4, r3
3401f700:	9e04      	ldr	r6, [sp, #16]
3401f702:	9305      	str	r3, [sp, #20]
3401f704:	2101      	movs	r1, #1
3401f706:	9b04      	ldr	r3, [sp, #16]
3401f708:	4648      	mov	r0, r9
3401f70a:	4413      	add	r3, r2
3401f70c:	9304      	str	r3, [sp, #16]
3401f70e:	9b06      	ldr	r3, [sp, #24]
3401f710:	4413      	add	r3, r2
3401f712:	9306      	str	r3, [sp, #24]
3401f714:	f000 fc24 	bl	3401ff60 <__i2b>
3401f718:	9b05      	ldr	r3, [sp, #20]
3401f71a:	4605      	mov	r5, r0
3401f71c:	b166      	cbz	r6, 3401f738 <_dtoa_r+0x668>
3401f71e:	9a06      	ldr	r2, [sp, #24]
3401f720:	2a00      	cmp	r2, #0
3401f722:	dd09      	ble.n	3401f738 <_dtoa_r+0x668>
3401f724:	42b2      	cmp	r2, r6
3401f726:	9904      	ldr	r1, [sp, #16]
3401f728:	bfa8      	it	ge
3401f72a:	4632      	movge	r2, r6
3401f72c:	1a89      	subs	r1, r1, r2
3401f72e:	1ab6      	subs	r6, r6, r2
3401f730:	9104      	str	r1, [sp, #16]
3401f732:	9906      	ldr	r1, [sp, #24]
3401f734:	1a8a      	subs	r2, r1, r2
3401f736:	9206      	str	r2, [sp, #24]
3401f738:	b30b      	cbz	r3, 3401f77e <_dtoa_r+0x6ae>
3401f73a:	9a08      	ldr	r2, [sp, #32]
3401f73c:	2a00      	cmp	r2, #0
3401f73e:	f000 80c5 	beq.w	3401f8cc <_dtoa_r+0x7fc>
3401f742:	2c00      	cmp	r4, #0
3401f744:	f000 80bf 	beq.w	3401f8c6 <_dtoa_r+0x7f6>
3401f748:	4629      	mov	r1, r5
3401f74a:	4622      	mov	r2, r4
3401f74c:	4648      	mov	r0, r9
3401f74e:	930b      	str	r3, [sp, #44]	@ 0x2c
3401f750:	f000 fcc0 	bl	340200d4 <__pow5mult>
3401f754:	9a01      	ldr	r2, [sp, #4]
3401f756:	4601      	mov	r1, r0
3401f758:	4605      	mov	r5, r0
3401f75a:	4648      	mov	r0, r9
3401f75c:	f000 fc16 	bl	3401ff8c <__multiply>
3401f760:	9901      	ldr	r1, [sp, #4]
3401f762:	9005      	str	r0, [sp, #20]
3401f764:	4648      	mov	r0, r9
3401f766:	f000 fb45 	bl	3401fdf4 <_Bfree>
3401f76a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401f76c:	1b1b      	subs	r3, r3, r4
3401f76e:	f000 80b0 	beq.w	3401f8d2 <_dtoa_r+0x802>
3401f772:	461a      	mov	r2, r3
3401f774:	9905      	ldr	r1, [sp, #20]
3401f776:	4648      	mov	r0, r9
3401f778:	f000 fcac 	bl	340200d4 <__pow5mult>
3401f77c:	9001      	str	r0, [sp, #4]
3401f77e:	2101      	movs	r1, #1
3401f780:	4648      	mov	r0, r9
3401f782:	f000 fbed 	bl	3401ff60 <__i2b>
3401f786:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401f788:	4604      	mov	r4, r0
3401f78a:	2b00      	cmp	r3, #0
3401f78c:	f000 81da 	beq.w	3401fb44 <_dtoa_r+0xa74>
3401f790:	461a      	mov	r2, r3
3401f792:	4601      	mov	r1, r0
3401f794:	4648      	mov	r0, r9
3401f796:	f000 fc9d 	bl	340200d4 <__pow5mult>
3401f79a:	9b07      	ldr	r3, [sp, #28]
3401f79c:	4604      	mov	r4, r0
3401f79e:	2b01      	cmp	r3, #1
3401f7a0:	f300 80a0 	bgt.w	3401f8e4 <_dtoa_r+0x814>
3401f7a4:	9b02      	ldr	r3, [sp, #8]
3401f7a6:	2b00      	cmp	r3, #0
3401f7a8:	f040 8096 	bne.w	3401f8d8 <_dtoa_r+0x808>
3401f7ac:	9b03      	ldr	r3, [sp, #12]
3401f7ae:	f3c3 0213 	ubfx	r2, r3, #0, #20
3401f7b2:	2a00      	cmp	r2, #0
3401f7b4:	f040 8092 	bne.w	3401f8dc <_dtoa_r+0x80c>
3401f7b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3401f7bc:	0d12      	lsrs	r2, r2, #20
3401f7be:	0512      	lsls	r2, r2, #20
3401f7c0:	2a00      	cmp	r2, #0
3401f7c2:	f000 808d 	beq.w	3401f8e0 <_dtoa_r+0x810>
3401f7c6:	9b04      	ldr	r3, [sp, #16]
3401f7c8:	3301      	adds	r3, #1
3401f7ca:	9304      	str	r3, [sp, #16]
3401f7cc:	9b06      	ldr	r3, [sp, #24]
3401f7ce:	3301      	adds	r3, #1
3401f7d0:	9306      	str	r3, [sp, #24]
3401f7d2:	2301      	movs	r3, #1
3401f7d4:	930b      	str	r3, [sp, #44]	@ 0x2c
3401f7d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401f7d8:	2b00      	cmp	r3, #0
3401f7da:	f000 81b9 	beq.w	3401fb50 <_dtoa_r+0xa80>
3401f7de:	6922      	ldr	r2, [r4, #16]
3401f7e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3401f7e4:	6910      	ldr	r0, [r2, #16]
3401f7e6:	f000 fb6f 	bl	3401fec8 <__hi0bits>
3401f7ea:	f1c0 0020 	rsb	r0, r0, #32
3401f7ee:	9b06      	ldr	r3, [sp, #24]
3401f7f0:	4418      	add	r0, r3
3401f7f2:	f010 001f 	ands.w	r0, r0, #31
3401f7f6:	f000 8081 	beq.w	3401f8fc <_dtoa_r+0x82c>
3401f7fa:	f1c0 0220 	rsb	r2, r0, #32
3401f7fe:	2a04      	cmp	r2, #4
3401f800:	dd73      	ble.n	3401f8ea <_dtoa_r+0x81a>
3401f802:	f1c0 001c 	rsb	r0, r0, #28
3401f806:	9b04      	ldr	r3, [sp, #16]
3401f808:	4403      	add	r3, r0
3401f80a:	4406      	add	r6, r0
3401f80c:	9304      	str	r3, [sp, #16]
3401f80e:	9b06      	ldr	r3, [sp, #24]
3401f810:	4403      	add	r3, r0
3401f812:	9306      	str	r3, [sp, #24]
3401f814:	9b04      	ldr	r3, [sp, #16]
3401f816:	2b00      	cmp	r3, #0
3401f818:	dd05      	ble.n	3401f826 <_dtoa_r+0x756>
3401f81a:	461a      	mov	r2, r3
3401f81c:	9901      	ldr	r1, [sp, #4]
3401f81e:	4648      	mov	r0, r9
3401f820:	f000 fcb2 	bl	34020188 <__lshift>
3401f824:	9001      	str	r0, [sp, #4]
3401f826:	9b06      	ldr	r3, [sp, #24]
3401f828:	2b00      	cmp	r3, #0
3401f82a:	dd05      	ble.n	3401f838 <_dtoa_r+0x768>
3401f82c:	4621      	mov	r1, r4
3401f82e:	461a      	mov	r2, r3
3401f830:	4648      	mov	r0, r9
3401f832:	f000 fca9 	bl	34020188 <__lshift>
3401f836:	4604      	mov	r4, r0
3401f838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401f83a:	2b00      	cmp	r3, #0
3401f83c:	d060      	beq.n	3401f900 <_dtoa_r+0x830>
3401f83e:	4621      	mov	r1, r4
3401f840:	9801      	ldr	r0, [sp, #4]
3401f842:	f000 fd0d 	bl	34020260 <__mcmp>
3401f846:	2800      	cmp	r0, #0
3401f848:	da5a      	bge.n	3401f900 <_dtoa_r+0x830>
3401f84a:	f108 33ff 	add.w	r3, r8, #4294967295
3401f84e:	220a      	movs	r2, #10
3401f850:	9901      	ldr	r1, [sp, #4]
3401f852:	4648      	mov	r0, r9
3401f854:	9305      	str	r3, [sp, #20]
3401f856:	2300      	movs	r3, #0
3401f858:	f000 faee 	bl	3401fe38 <__multadd>
3401f85c:	9b08      	ldr	r3, [sp, #32]
3401f85e:	9001      	str	r0, [sp, #4]
3401f860:	2b00      	cmp	r3, #0
3401f862:	f000 8177 	beq.w	3401fb54 <_dtoa_r+0xa84>
3401f866:	4629      	mov	r1, r5
3401f868:	2300      	movs	r3, #0
3401f86a:	220a      	movs	r2, #10
3401f86c:	4648      	mov	r0, r9
3401f86e:	f000 fae3 	bl	3401fe38 <__multadd>
3401f872:	f1bb 0f00 	cmp.w	fp, #0
3401f876:	4605      	mov	r5, r0
3401f878:	dc6e      	bgt.n	3401f958 <_dtoa_r+0x888>
3401f87a:	9b07      	ldr	r3, [sp, #28]
3401f87c:	2b02      	cmp	r3, #2
3401f87e:	dc48      	bgt.n	3401f912 <_dtoa_r+0x842>
3401f880:	e06a      	b.n	3401f958 <_dtoa_r+0x888>
3401f882:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401f884:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3401f888:	e739      	b.n	3401f6fe <_dtoa_r+0x62e>
3401f88a:	f10a 34ff 	add.w	r4, sl, #4294967295
3401f88e:	42a3      	cmp	r3, r4
3401f890:	db07      	blt.n	3401f8a2 <_dtoa_r+0x7d2>
3401f892:	f1ba 0f00 	cmp.w	sl, #0
3401f896:	eba3 0404 	sub.w	r4, r3, r4
3401f89a:	db0b      	blt.n	3401f8b4 <_dtoa_r+0x7e4>
3401f89c:	9e04      	ldr	r6, [sp, #16]
3401f89e:	4652      	mov	r2, sl
3401f8a0:	e72f      	b.n	3401f702 <_dtoa_r+0x632>
3401f8a2:	1ae2      	subs	r2, r4, r3
3401f8a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401f8a6:	9e04      	ldr	r6, [sp, #16]
3401f8a8:	4413      	add	r3, r2
3401f8aa:	4652      	mov	r2, sl
3401f8ac:	930a      	str	r3, [sp, #40]	@ 0x28
3401f8ae:	4623      	mov	r3, r4
3401f8b0:	2400      	movs	r4, #0
3401f8b2:	e726      	b.n	3401f702 <_dtoa_r+0x632>
3401f8b4:	9a04      	ldr	r2, [sp, #16]
3401f8b6:	eba2 060a 	sub.w	r6, r2, sl
3401f8ba:	2200      	movs	r2, #0
3401f8bc:	e721      	b.n	3401f702 <_dtoa_r+0x632>
3401f8be:	461c      	mov	r4, r3
3401f8c0:	9e04      	ldr	r6, [sp, #16]
3401f8c2:	9d08      	ldr	r5, [sp, #32]
3401f8c4:	e72a      	b.n	3401f71c <_dtoa_r+0x64c>
3401f8c6:	9a01      	ldr	r2, [sp, #4]
3401f8c8:	9205      	str	r2, [sp, #20]
3401f8ca:	e752      	b.n	3401f772 <_dtoa_r+0x6a2>
3401f8cc:	461a      	mov	r2, r3
3401f8ce:	9901      	ldr	r1, [sp, #4]
3401f8d0:	e751      	b.n	3401f776 <_dtoa_r+0x6a6>
3401f8d2:	9b05      	ldr	r3, [sp, #20]
3401f8d4:	9301      	str	r3, [sp, #4]
3401f8d6:	e752      	b.n	3401f77e <_dtoa_r+0x6ae>
3401f8d8:	2300      	movs	r3, #0
3401f8da:	e77b      	b.n	3401f7d4 <_dtoa_r+0x704>
3401f8dc:	9b02      	ldr	r3, [sp, #8]
3401f8de:	e779      	b.n	3401f7d4 <_dtoa_r+0x704>
3401f8e0:	920b      	str	r2, [sp, #44]	@ 0x2c
3401f8e2:	e778      	b.n	3401f7d6 <_dtoa_r+0x706>
3401f8e4:	2300      	movs	r3, #0
3401f8e6:	930b      	str	r3, [sp, #44]	@ 0x2c
3401f8e8:	e779      	b.n	3401f7de <_dtoa_r+0x70e>
3401f8ea:	d093      	beq.n	3401f814 <_dtoa_r+0x744>
3401f8ec:	321c      	adds	r2, #28
3401f8ee:	9b04      	ldr	r3, [sp, #16]
3401f8f0:	4413      	add	r3, r2
3401f8f2:	4416      	add	r6, r2
3401f8f4:	9304      	str	r3, [sp, #16]
3401f8f6:	9b06      	ldr	r3, [sp, #24]
3401f8f8:	4413      	add	r3, r2
3401f8fa:	e78a      	b.n	3401f812 <_dtoa_r+0x742>
3401f8fc:	4602      	mov	r2, r0
3401f8fe:	e7f5      	b.n	3401f8ec <_dtoa_r+0x81c>
3401f900:	f1ba 0f00 	cmp.w	sl, #0
3401f904:	46d3      	mov	fp, sl
3401f906:	f8cd 8014 	str.w	r8, [sp, #20]
3401f90a:	dc21      	bgt.n	3401f950 <_dtoa_r+0x880>
3401f90c:	9b07      	ldr	r3, [sp, #28]
3401f90e:	2b02      	cmp	r3, #2
3401f910:	dd1e      	ble.n	3401f950 <_dtoa_r+0x880>
3401f912:	f1bb 0f00 	cmp.w	fp, #0
3401f916:	f47f addc 	bne.w	3401f4d2 <_dtoa_r+0x402>
3401f91a:	4621      	mov	r1, r4
3401f91c:	465b      	mov	r3, fp
3401f91e:	2205      	movs	r2, #5
3401f920:	4648      	mov	r0, r9
3401f922:	f000 fa89 	bl	3401fe38 <__multadd>
3401f926:	4601      	mov	r1, r0
3401f928:	4604      	mov	r4, r0
3401f92a:	9801      	ldr	r0, [sp, #4]
3401f92c:	f000 fc98 	bl	34020260 <__mcmp>
3401f930:	2800      	cmp	r0, #0
3401f932:	f77f adce 	ble.w	3401f4d2 <_dtoa_r+0x402>
3401f936:	2331      	movs	r3, #49	@ 0x31
3401f938:	463e      	mov	r6, r7
3401f93a:	f806 3b01 	strb.w	r3, [r6], #1
3401f93e:	9b05      	ldr	r3, [sp, #20]
3401f940:	3301      	adds	r3, #1
3401f942:	9305      	str	r3, [sp, #20]
3401f944:	e5c9      	b.n	3401f4da <_dtoa_r+0x40a>
3401f946:	4654      	mov	r4, sl
3401f948:	f8cd 8014 	str.w	r8, [sp, #20]
3401f94c:	4625      	mov	r5, r4
3401f94e:	e7f2      	b.n	3401f936 <_dtoa_r+0x866>
3401f950:	9b08      	ldr	r3, [sp, #32]
3401f952:	2b00      	cmp	r3, #0
3401f954:	f000 8102 	beq.w	3401fb5c <_dtoa_r+0xa8c>
3401f958:	2e00      	cmp	r6, #0
3401f95a:	dd05      	ble.n	3401f968 <_dtoa_r+0x898>
3401f95c:	4629      	mov	r1, r5
3401f95e:	4632      	mov	r2, r6
3401f960:	4648      	mov	r0, r9
3401f962:	f000 fc11 	bl	34020188 <__lshift>
3401f966:	4605      	mov	r5, r0
3401f968:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401f96a:	2b00      	cmp	r3, #0
3401f96c:	d058      	beq.n	3401fa20 <_dtoa_r+0x950>
3401f96e:	6869      	ldr	r1, [r5, #4]
3401f970:	4648      	mov	r0, r9
3401f972:	f000 f9ff 	bl	3401fd74 <_Balloc>
3401f976:	4606      	mov	r6, r0
3401f978:	b928      	cbnz	r0, 3401f986 <_dtoa_r+0x8b6>
3401f97a:	4b82      	ldr	r3, [pc, #520]	@ (3401fb84 <_dtoa_r+0xab4>)
3401f97c:	4602      	mov	r2, r0
3401f97e:	f240 21ef 	movw	r1, #751	@ 0x2ef
3401f982:	f7ff bbbe 	b.w	3401f102 <_dtoa_r+0x32>
3401f986:	692a      	ldr	r2, [r5, #16]
3401f988:	f105 010c 	add.w	r1, r5, #12
3401f98c:	300c      	adds	r0, #12
3401f98e:	3202      	adds	r2, #2
3401f990:	0092      	lsls	r2, r2, #2
3401f992:	f7ff fafc 	bl	3401ef8e <memcpy>
3401f996:	2201      	movs	r2, #1
3401f998:	4631      	mov	r1, r6
3401f99a:	4648      	mov	r0, r9
3401f99c:	f000 fbf4 	bl	34020188 <__lshift>
3401f9a0:	1c7b      	adds	r3, r7, #1
3401f9a2:	46a8      	mov	r8, r5
3401f9a4:	4605      	mov	r5, r0
3401f9a6:	9304      	str	r3, [sp, #16]
3401f9a8:	eb07 030b 	add.w	r3, r7, fp
3401f9ac:	9309      	str	r3, [sp, #36]	@ 0x24
3401f9ae:	9b02      	ldr	r3, [sp, #8]
3401f9b0:	f003 0301 	and.w	r3, r3, #1
3401f9b4:	9308      	str	r3, [sp, #32]
3401f9b6:	9b04      	ldr	r3, [sp, #16]
3401f9b8:	4621      	mov	r1, r4
3401f9ba:	9801      	ldr	r0, [sp, #4]
3401f9bc:	f103 3bff 	add.w	fp, r3, #4294967295
3401f9c0:	f7ff faf9 	bl	3401efb6 <quorem>
3401f9c4:	4641      	mov	r1, r8
3401f9c6:	9002      	str	r0, [sp, #8]
3401f9c8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401f9cc:	9801      	ldr	r0, [sp, #4]
3401f9ce:	f000 fc47 	bl	34020260 <__mcmp>
3401f9d2:	462a      	mov	r2, r5
3401f9d4:	9006      	str	r0, [sp, #24]
3401f9d6:	4621      	mov	r1, r4
3401f9d8:	4648      	mov	r0, r9
3401f9da:	f000 fc5d 	bl	34020298 <__mdiff>
3401f9de:	68c2      	ldr	r2, [r0, #12]
3401f9e0:	4606      	mov	r6, r0
3401f9e2:	b9fa      	cbnz	r2, 3401fa24 <_dtoa_r+0x954>
3401f9e4:	4601      	mov	r1, r0
3401f9e6:	9801      	ldr	r0, [sp, #4]
3401f9e8:	f000 fc3a 	bl	34020260 <__mcmp>
3401f9ec:	4602      	mov	r2, r0
3401f9ee:	4631      	mov	r1, r6
3401f9f0:	4648      	mov	r0, r9
3401f9f2:	920a      	str	r2, [sp, #40]	@ 0x28
3401f9f4:	f000 f9fe 	bl	3401fdf4 <_Bfree>
3401f9f8:	9b07      	ldr	r3, [sp, #28]
3401f9fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401f9fc:	9e04      	ldr	r6, [sp, #16]
3401f9fe:	ea42 0103 	orr.w	r1, r2, r3
3401fa02:	9b08      	ldr	r3, [sp, #32]
3401fa04:	4319      	orrs	r1, r3
3401fa06:	d10f      	bne.n	3401fa28 <_dtoa_r+0x958>
3401fa08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401fa0c:	d028      	beq.n	3401fa60 <_dtoa_r+0x990>
3401fa0e:	9b06      	ldr	r3, [sp, #24]
3401fa10:	2b00      	cmp	r3, #0
3401fa12:	dd02      	ble.n	3401fa1a <_dtoa_r+0x94a>
3401fa14:	9b02      	ldr	r3, [sp, #8]
3401fa16:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3401fa1a:	f88b a000 	strb.w	sl, [fp]
3401fa1e:	e55e      	b.n	3401f4de <_dtoa_r+0x40e>
3401fa20:	4628      	mov	r0, r5
3401fa22:	e7bd      	b.n	3401f9a0 <_dtoa_r+0x8d0>
3401fa24:	2201      	movs	r2, #1
3401fa26:	e7e2      	b.n	3401f9ee <_dtoa_r+0x91e>
3401fa28:	9b06      	ldr	r3, [sp, #24]
3401fa2a:	2b00      	cmp	r3, #0
3401fa2c:	db04      	blt.n	3401fa38 <_dtoa_r+0x968>
3401fa2e:	9907      	ldr	r1, [sp, #28]
3401fa30:	430b      	orrs	r3, r1
3401fa32:	9908      	ldr	r1, [sp, #32]
3401fa34:	430b      	orrs	r3, r1
3401fa36:	d120      	bne.n	3401fa7a <_dtoa_r+0x9aa>
3401fa38:	2a00      	cmp	r2, #0
3401fa3a:	ddee      	ble.n	3401fa1a <_dtoa_r+0x94a>
3401fa3c:	2201      	movs	r2, #1
3401fa3e:	9901      	ldr	r1, [sp, #4]
3401fa40:	4648      	mov	r0, r9
3401fa42:	f000 fba1 	bl	34020188 <__lshift>
3401fa46:	4621      	mov	r1, r4
3401fa48:	9001      	str	r0, [sp, #4]
3401fa4a:	f000 fc09 	bl	34020260 <__mcmp>
3401fa4e:	2800      	cmp	r0, #0
3401fa50:	dc03      	bgt.n	3401fa5a <_dtoa_r+0x98a>
3401fa52:	d1e2      	bne.n	3401fa1a <_dtoa_r+0x94a>
3401fa54:	f01a 0f01 	tst.w	sl, #1
3401fa58:	d0df      	beq.n	3401fa1a <_dtoa_r+0x94a>
3401fa5a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401fa5e:	d1d9      	bne.n	3401fa14 <_dtoa_r+0x944>
3401fa60:	2339      	movs	r3, #57	@ 0x39
3401fa62:	f88b 3000 	strb.w	r3, [fp]
3401fa66:	4633      	mov	r3, r6
3401fa68:	461e      	mov	r6, r3
3401fa6a:	3b01      	subs	r3, #1
3401fa6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3401fa70:	2a39      	cmp	r2, #57	@ 0x39
3401fa72:	d052      	beq.n	3401fb1a <_dtoa_r+0xa4a>
3401fa74:	3201      	adds	r2, #1
3401fa76:	701a      	strb	r2, [r3, #0]
3401fa78:	e531      	b.n	3401f4de <_dtoa_r+0x40e>
3401fa7a:	2a00      	cmp	r2, #0
3401fa7c:	dd07      	ble.n	3401fa8e <_dtoa_r+0x9be>
3401fa7e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3401fa82:	d0ed      	beq.n	3401fa60 <_dtoa_r+0x990>
3401fa84:	f10a 0301 	add.w	r3, sl, #1
3401fa88:	f88b 3000 	strb.w	r3, [fp]
3401fa8c:	e527      	b.n	3401f4de <_dtoa_r+0x40e>
3401fa8e:	9b04      	ldr	r3, [sp, #16]
3401fa90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3401fa92:	f803 ac01 	strb.w	sl, [r3, #-1]
3401fa96:	4293      	cmp	r3, r2
3401fa98:	d029      	beq.n	3401faee <_dtoa_r+0xa1e>
3401fa9a:	2300      	movs	r3, #0
3401fa9c:	220a      	movs	r2, #10
3401fa9e:	9901      	ldr	r1, [sp, #4]
3401faa0:	4648      	mov	r0, r9
3401faa2:	f000 f9c9 	bl	3401fe38 <__multadd>
3401faa6:	45a8      	cmp	r8, r5
3401faa8:	9001      	str	r0, [sp, #4]
3401faaa:	f04f 0300 	mov.w	r3, #0
3401faae:	f04f 020a 	mov.w	r2, #10
3401fab2:	4641      	mov	r1, r8
3401fab4:	4648      	mov	r0, r9
3401fab6:	d107      	bne.n	3401fac8 <_dtoa_r+0x9f8>
3401fab8:	f000 f9be 	bl	3401fe38 <__multadd>
3401fabc:	4680      	mov	r8, r0
3401fabe:	4605      	mov	r5, r0
3401fac0:	9b04      	ldr	r3, [sp, #16]
3401fac2:	3301      	adds	r3, #1
3401fac4:	9304      	str	r3, [sp, #16]
3401fac6:	e776      	b.n	3401f9b6 <_dtoa_r+0x8e6>
3401fac8:	f000 f9b6 	bl	3401fe38 <__multadd>
3401facc:	4629      	mov	r1, r5
3401face:	4680      	mov	r8, r0
3401fad0:	2300      	movs	r3, #0
3401fad2:	220a      	movs	r2, #10
3401fad4:	4648      	mov	r0, r9
3401fad6:	f000 f9af 	bl	3401fe38 <__multadd>
3401fada:	4605      	mov	r5, r0
3401fadc:	e7f0      	b.n	3401fac0 <_dtoa_r+0x9f0>
3401fade:	f1bb 0f00 	cmp.w	fp, #0
3401fae2:	f04f 0800 	mov.w	r8, #0
3401fae6:	bfcc      	ite	gt
3401fae8:	465e      	movgt	r6, fp
3401faea:	2601      	movle	r6, #1
3401faec:	443e      	add	r6, r7
3401faee:	2201      	movs	r2, #1
3401faf0:	9901      	ldr	r1, [sp, #4]
3401faf2:	4648      	mov	r0, r9
3401faf4:	f000 fb48 	bl	34020188 <__lshift>
3401faf8:	4621      	mov	r1, r4
3401fafa:	9001      	str	r0, [sp, #4]
3401fafc:	f000 fbb0 	bl	34020260 <__mcmp>
3401fb00:	2800      	cmp	r0, #0
3401fb02:	dcb0      	bgt.n	3401fa66 <_dtoa_r+0x996>
3401fb04:	d102      	bne.n	3401fb0c <_dtoa_r+0xa3c>
3401fb06:	f01a 0f01 	tst.w	sl, #1
3401fb0a:	d1ac      	bne.n	3401fa66 <_dtoa_r+0x996>
3401fb0c:	4633      	mov	r3, r6
3401fb0e:	461e      	mov	r6, r3
3401fb10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3401fb14:	2a30      	cmp	r2, #48	@ 0x30
3401fb16:	d0fa      	beq.n	3401fb0e <_dtoa_r+0xa3e>
3401fb18:	e4e1      	b.n	3401f4de <_dtoa_r+0x40e>
3401fb1a:	429f      	cmp	r7, r3
3401fb1c:	d1a4      	bne.n	3401fa68 <_dtoa_r+0x998>
3401fb1e:	9b05      	ldr	r3, [sp, #20]
3401fb20:	3301      	adds	r3, #1
3401fb22:	9305      	str	r3, [sp, #20]
3401fb24:	2331      	movs	r3, #49	@ 0x31
3401fb26:	703b      	strb	r3, [r7, #0]
3401fb28:	e4d9      	b.n	3401f4de <_dtoa_r+0x40e>
3401fb2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3401fb2c:	4f16      	ldr	r7, [pc, #88]	@ (3401fb88 <_dtoa_r+0xab8>)
3401fb2e:	b11b      	cbz	r3, 3401fb38 <_dtoa_r+0xa68>
3401fb30:	f107 0308 	add.w	r3, r7, #8
3401fb34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3401fb36:	6013      	str	r3, [r2, #0]
3401fb38:	4638      	mov	r0, r7
3401fb3a:	b011      	add	sp, #68	@ 0x44
3401fb3c:	ecbd 8b02 	vpop	{d8}
3401fb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401fb44:	9b07      	ldr	r3, [sp, #28]
3401fb46:	2b01      	cmp	r3, #1
3401fb48:	f77f ae2c 	ble.w	3401f7a4 <_dtoa_r+0x6d4>
3401fb4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401fb4e:	930b      	str	r3, [sp, #44]	@ 0x2c
3401fb50:	2001      	movs	r0, #1
3401fb52:	e64c      	b.n	3401f7ee <_dtoa_r+0x71e>
3401fb54:	f1bb 0f00 	cmp.w	fp, #0
3401fb58:	f77f aed8 	ble.w	3401f90c <_dtoa_r+0x83c>
3401fb5c:	463e      	mov	r6, r7
3401fb5e:	4621      	mov	r1, r4
3401fb60:	9801      	ldr	r0, [sp, #4]
3401fb62:	f7ff fa28 	bl	3401efb6 <quorem>
3401fb66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3401fb6a:	f806 ab01 	strb.w	sl, [r6], #1
3401fb6e:	1bf2      	subs	r2, r6, r7
3401fb70:	4593      	cmp	fp, r2
3401fb72:	ddb4      	ble.n	3401fade <_dtoa_r+0xa0e>
3401fb74:	2300      	movs	r3, #0
3401fb76:	220a      	movs	r2, #10
3401fb78:	9901      	ldr	r1, [sp, #4]
3401fb7a:	4648      	mov	r0, r9
3401fb7c:	f000 f95c 	bl	3401fe38 <__multadd>
3401fb80:	9001      	str	r0, [sp, #4]
3401fb82:	e7ec      	b.n	3401fb5e <_dtoa_r+0xa8e>
3401fb84:	34027751 	.word	0x34027751
3401fb88:	340276d5 	.word	0x340276d5

3401fb8c <_free_r>:
3401fb8c:	b538      	push	{r3, r4, r5, lr}
3401fb8e:	4605      	mov	r5, r0
3401fb90:	2900      	cmp	r1, #0
3401fb92:	d041      	beq.n	3401fc18 <_free_r+0x8c>
3401fb94:	f851 3c04 	ldr.w	r3, [r1, #-4]
3401fb98:	1f0c      	subs	r4, r1, #4
3401fb9a:	2b00      	cmp	r3, #0
3401fb9c:	bfb8      	it	lt
3401fb9e:	18e4      	addlt	r4, r4, r3
3401fba0:	f7e2 f9ca 	bl	34001f38 <__malloc_lock>
3401fba4:	4a1d      	ldr	r2, [pc, #116]	@ (3401fc1c <_free_r+0x90>)
3401fba6:	6813      	ldr	r3, [r2, #0]
3401fba8:	b933      	cbnz	r3, 3401fbb8 <_free_r+0x2c>
3401fbaa:	6063      	str	r3, [r4, #4]
3401fbac:	6014      	str	r4, [r2, #0]
3401fbae:	4628      	mov	r0, r5
3401fbb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3401fbb4:	f7e2 b9e6 	b.w	34001f84 <__malloc_unlock>
3401fbb8:	42a3      	cmp	r3, r4
3401fbba:	d908      	bls.n	3401fbce <_free_r+0x42>
3401fbbc:	6820      	ldr	r0, [r4, #0]
3401fbbe:	1821      	adds	r1, r4, r0
3401fbc0:	428b      	cmp	r3, r1
3401fbc2:	bf01      	itttt	eq
3401fbc4:	6819      	ldreq	r1, [r3, #0]
3401fbc6:	685b      	ldreq	r3, [r3, #4]
3401fbc8:	1809      	addeq	r1, r1, r0
3401fbca:	6021      	streq	r1, [r4, #0]
3401fbcc:	e7ed      	b.n	3401fbaa <_free_r+0x1e>
3401fbce:	461a      	mov	r2, r3
3401fbd0:	685b      	ldr	r3, [r3, #4]
3401fbd2:	b10b      	cbz	r3, 3401fbd8 <_free_r+0x4c>
3401fbd4:	42a3      	cmp	r3, r4
3401fbd6:	d9fa      	bls.n	3401fbce <_free_r+0x42>
3401fbd8:	6811      	ldr	r1, [r2, #0]
3401fbda:	1850      	adds	r0, r2, r1
3401fbdc:	42a0      	cmp	r0, r4
3401fbde:	d10b      	bne.n	3401fbf8 <_free_r+0x6c>
3401fbe0:	6820      	ldr	r0, [r4, #0]
3401fbe2:	4401      	add	r1, r0
3401fbe4:	1850      	adds	r0, r2, r1
3401fbe6:	6011      	str	r1, [r2, #0]
3401fbe8:	4283      	cmp	r3, r0
3401fbea:	d1e0      	bne.n	3401fbae <_free_r+0x22>
3401fbec:	6818      	ldr	r0, [r3, #0]
3401fbee:	685b      	ldr	r3, [r3, #4]
3401fbf0:	4408      	add	r0, r1
3401fbf2:	6053      	str	r3, [r2, #4]
3401fbf4:	6010      	str	r0, [r2, #0]
3401fbf6:	e7da      	b.n	3401fbae <_free_r+0x22>
3401fbf8:	d902      	bls.n	3401fc00 <_free_r+0x74>
3401fbfa:	230c      	movs	r3, #12
3401fbfc:	602b      	str	r3, [r5, #0]
3401fbfe:	e7d6      	b.n	3401fbae <_free_r+0x22>
3401fc00:	6820      	ldr	r0, [r4, #0]
3401fc02:	1821      	adds	r1, r4, r0
3401fc04:	428b      	cmp	r3, r1
3401fc06:	bf02      	ittt	eq
3401fc08:	6819      	ldreq	r1, [r3, #0]
3401fc0a:	685b      	ldreq	r3, [r3, #4]
3401fc0c:	1809      	addeq	r1, r1, r0
3401fc0e:	6063      	str	r3, [r4, #4]
3401fc10:	bf08      	it	eq
3401fc12:	6021      	streq	r1, [r4, #0]
3401fc14:	6054      	str	r4, [r2, #4]
3401fc16:	e7ca      	b.n	3401fbae <_free_r+0x22>
3401fc18:	bd38      	pop	{r3, r4, r5, pc}
3401fc1a:	bf00      	nop
3401fc1c:	34190518 	.word	0x34190518

3401fc20 <malloc>:
3401fc20:	4b02      	ldr	r3, [pc, #8]	@ (3401fc2c <malloc+0xc>)
3401fc22:	4601      	mov	r1, r0
3401fc24:	6818      	ldr	r0, [r3, #0]
3401fc26:	f000 b825 	b.w	3401fc74 <_malloc_r>
3401fc2a:	bf00      	nop
3401fc2c:	340a3258 	.word	0x340a3258

3401fc30 <sbrk_aligned>:
3401fc30:	b570      	push	{r4, r5, r6, lr}
3401fc32:	4e0f      	ldr	r6, [pc, #60]	@ (3401fc70 <sbrk_aligned+0x40>)
3401fc34:	460c      	mov	r4, r1
3401fc36:	4605      	mov	r5, r0
3401fc38:	6831      	ldr	r1, [r6, #0]
3401fc3a:	b911      	cbnz	r1, 3401fc42 <sbrk_aligned+0x12>
3401fc3c:	f001 f82a 	bl	34020c94 <_sbrk_r>
3401fc40:	6030      	str	r0, [r6, #0]
3401fc42:	4621      	mov	r1, r4
3401fc44:	4628      	mov	r0, r5
3401fc46:	f001 f825 	bl	34020c94 <_sbrk_r>
3401fc4a:	1c43      	adds	r3, r0, #1
3401fc4c:	d103      	bne.n	3401fc56 <sbrk_aligned+0x26>
3401fc4e:	f04f 34ff 	mov.w	r4, #4294967295
3401fc52:	4620      	mov	r0, r4
3401fc54:	bd70      	pop	{r4, r5, r6, pc}
3401fc56:	1cc4      	adds	r4, r0, #3
3401fc58:	f024 0403 	bic.w	r4, r4, #3
3401fc5c:	42a0      	cmp	r0, r4
3401fc5e:	d0f8      	beq.n	3401fc52 <sbrk_aligned+0x22>
3401fc60:	1a21      	subs	r1, r4, r0
3401fc62:	4628      	mov	r0, r5
3401fc64:	f001 f816 	bl	34020c94 <_sbrk_r>
3401fc68:	3001      	adds	r0, #1
3401fc6a:	d1f2      	bne.n	3401fc52 <sbrk_aligned+0x22>
3401fc6c:	e7ef      	b.n	3401fc4e <sbrk_aligned+0x1e>
3401fc6e:	bf00      	nop
3401fc70:	34190514 	.word	0x34190514

3401fc74 <_malloc_r>:
3401fc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401fc78:	1ccd      	adds	r5, r1, #3
3401fc7a:	4606      	mov	r6, r0
3401fc7c:	f025 0503 	bic.w	r5, r5, #3
3401fc80:	3508      	adds	r5, #8
3401fc82:	2d0c      	cmp	r5, #12
3401fc84:	bf38      	it	cc
3401fc86:	250c      	movcc	r5, #12
3401fc88:	2d00      	cmp	r5, #0
3401fc8a:	db01      	blt.n	3401fc90 <_malloc_r+0x1c>
3401fc8c:	42a9      	cmp	r1, r5
3401fc8e:	d904      	bls.n	3401fc9a <_malloc_r+0x26>
3401fc90:	230c      	movs	r3, #12
3401fc92:	6033      	str	r3, [r6, #0]
3401fc94:	2000      	movs	r0, #0
3401fc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401fc9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3401fd70 <_malloc_r+0xfc>
3401fc9e:	f7e2 f94b 	bl	34001f38 <__malloc_lock>
3401fca2:	f8d8 3000 	ldr.w	r3, [r8]
3401fca6:	461c      	mov	r4, r3
3401fca8:	bb44      	cbnz	r4, 3401fcfc <_malloc_r+0x88>
3401fcaa:	4629      	mov	r1, r5
3401fcac:	4630      	mov	r0, r6
3401fcae:	f7ff ffbf 	bl	3401fc30 <sbrk_aligned>
3401fcb2:	1c43      	adds	r3, r0, #1
3401fcb4:	4604      	mov	r4, r0
3401fcb6:	d158      	bne.n	3401fd6a <_malloc_r+0xf6>
3401fcb8:	f8d8 4000 	ldr.w	r4, [r8]
3401fcbc:	4627      	mov	r7, r4
3401fcbe:	2f00      	cmp	r7, #0
3401fcc0:	d143      	bne.n	3401fd4a <_malloc_r+0xd6>
3401fcc2:	2c00      	cmp	r4, #0
3401fcc4:	d04b      	beq.n	3401fd5e <_malloc_r+0xea>
3401fcc6:	6823      	ldr	r3, [r4, #0]
3401fcc8:	4639      	mov	r1, r7
3401fcca:	4630      	mov	r0, r6
3401fccc:	eb04 0903 	add.w	r9, r4, r3
3401fcd0:	f000 ffe0 	bl	34020c94 <_sbrk_r>
3401fcd4:	4581      	cmp	r9, r0
3401fcd6:	d142      	bne.n	3401fd5e <_malloc_r+0xea>
3401fcd8:	6821      	ldr	r1, [r4, #0]
3401fcda:	4630      	mov	r0, r6
3401fcdc:	1a6d      	subs	r5, r5, r1
3401fcde:	4629      	mov	r1, r5
3401fce0:	f7ff ffa6 	bl	3401fc30 <sbrk_aligned>
3401fce4:	3001      	adds	r0, #1
3401fce6:	d03a      	beq.n	3401fd5e <_malloc_r+0xea>
3401fce8:	6823      	ldr	r3, [r4, #0]
3401fcea:	442b      	add	r3, r5
3401fcec:	6023      	str	r3, [r4, #0]
3401fcee:	f8d8 3000 	ldr.w	r3, [r8]
3401fcf2:	685a      	ldr	r2, [r3, #4]
3401fcf4:	bb62      	cbnz	r2, 3401fd50 <_malloc_r+0xdc>
3401fcf6:	f8c8 7000 	str.w	r7, [r8]
3401fcfa:	e00f      	b.n	3401fd1c <_malloc_r+0xa8>
3401fcfc:	6822      	ldr	r2, [r4, #0]
3401fcfe:	1b52      	subs	r2, r2, r5
3401fd00:	d420      	bmi.n	3401fd44 <_malloc_r+0xd0>
3401fd02:	2a0b      	cmp	r2, #11
3401fd04:	d917      	bls.n	3401fd36 <_malloc_r+0xc2>
3401fd06:	1961      	adds	r1, r4, r5
3401fd08:	42a3      	cmp	r3, r4
3401fd0a:	6025      	str	r5, [r4, #0]
3401fd0c:	bf18      	it	ne
3401fd0e:	6059      	strne	r1, [r3, #4]
3401fd10:	6863      	ldr	r3, [r4, #4]
3401fd12:	bf08      	it	eq
3401fd14:	f8c8 1000 	streq.w	r1, [r8]
3401fd18:	5162      	str	r2, [r4, r5]
3401fd1a:	604b      	str	r3, [r1, #4]
3401fd1c:	4630      	mov	r0, r6
3401fd1e:	f7e2 f931 	bl	34001f84 <__malloc_unlock>
3401fd22:	f104 000b 	add.w	r0, r4, #11
3401fd26:	1d23      	adds	r3, r4, #4
3401fd28:	f020 0007 	bic.w	r0, r0, #7
3401fd2c:	1ac2      	subs	r2, r0, r3
3401fd2e:	bf1c      	itt	ne
3401fd30:	1a1b      	subne	r3, r3, r0
3401fd32:	50a3      	strne	r3, [r4, r2]
3401fd34:	e7af      	b.n	3401fc96 <_malloc_r+0x22>
3401fd36:	6862      	ldr	r2, [r4, #4]
3401fd38:	42a3      	cmp	r3, r4
3401fd3a:	bf0c      	ite	eq
3401fd3c:	f8c8 2000 	streq.w	r2, [r8]
3401fd40:	605a      	strne	r2, [r3, #4]
3401fd42:	e7eb      	b.n	3401fd1c <_malloc_r+0xa8>
3401fd44:	4623      	mov	r3, r4
3401fd46:	6864      	ldr	r4, [r4, #4]
3401fd48:	e7ae      	b.n	3401fca8 <_malloc_r+0x34>
3401fd4a:	463c      	mov	r4, r7
3401fd4c:	687f      	ldr	r7, [r7, #4]
3401fd4e:	e7b6      	b.n	3401fcbe <_malloc_r+0x4a>
3401fd50:	461a      	mov	r2, r3
3401fd52:	685b      	ldr	r3, [r3, #4]
3401fd54:	42a3      	cmp	r3, r4
3401fd56:	d1fb      	bne.n	3401fd50 <_malloc_r+0xdc>
3401fd58:	2300      	movs	r3, #0
3401fd5a:	6053      	str	r3, [r2, #4]
3401fd5c:	e7de      	b.n	3401fd1c <_malloc_r+0xa8>
3401fd5e:	230c      	movs	r3, #12
3401fd60:	4630      	mov	r0, r6
3401fd62:	6033      	str	r3, [r6, #0]
3401fd64:	f7e2 f90e 	bl	34001f84 <__malloc_unlock>
3401fd68:	e794      	b.n	3401fc94 <_malloc_r+0x20>
3401fd6a:	6005      	str	r5, [r0, #0]
3401fd6c:	e7d6      	b.n	3401fd1c <_malloc_r+0xa8>
3401fd6e:	bf00      	nop
3401fd70:	34190518 	.word	0x34190518

3401fd74 <_Balloc>:
3401fd74:	b570      	push	{r4, r5, r6, lr}
3401fd76:	69c6      	ldr	r6, [r0, #28]
3401fd78:	4604      	mov	r4, r0
3401fd7a:	460d      	mov	r5, r1
3401fd7c:	b976      	cbnz	r6, 3401fd9c <_Balloc+0x28>
3401fd7e:	2010      	movs	r0, #16
3401fd80:	f7ff ff4e 	bl	3401fc20 <malloc>
3401fd84:	4602      	mov	r2, r0
3401fd86:	61e0      	str	r0, [r4, #28]
3401fd88:	b920      	cbnz	r0, 3401fd94 <_Balloc+0x20>
3401fd8a:	4b18      	ldr	r3, [pc, #96]	@ (3401fdec <_Balloc+0x78>)
3401fd8c:	216b      	movs	r1, #107	@ 0x6b
3401fd8e:	4818      	ldr	r0, [pc, #96]	@ (3401fdf0 <_Balloc+0x7c>)
3401fd90:	f7fd fe2c 	bl	3401d9ec <__assert_func>
3401fd94:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401fd98:	6006      	str	r6, [r0, #0]
3401fd9a:	60c6      	str	r6, [r0, #12]
3401fd9c:	69e6      	ldr	r6, [r4, #28]
3401fd9e:	68f3      	ldr	r3, [r6, #12]
3401fda0:	b183      	cbz	r3, 3401fdc4 <_Balloc+0x50>
3401fda2:	69e3      	ldr	r3, [r4, #28]
3401fda4:	68db      	ldr	r3, [r3, #12]
3401fda6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3401fdaa:	b9b8      	cbnz	r0, 3401fddc <_Balloc+0x68>
3401fdac:	2101      	movs	r1, #1
3401fdae:	4620      	mov	r0, r4
3401fdb0:	fa01 f605 	lsl.w	r6, r1, r5
3401fdb4:	1d72      	adds	r2, r6, #5
3401fdb6:	0092      	lsls	r2, r2, #2
3401fdb8:	f000 ff7c 	bl	34020cb4 <_calloc_r>
3401fdbc:	b160      	cbz	r0, 3401fdd8 <_Balloc+0x64>
3401fdbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
3401fdc2:	e00e      	b.n	3401fde2 <_Balloc+0x6e>
3401fdc4:	2221      	movs	r2, #33	@ 0x21
3401fdc6:	2104      	movs	r1, #4
3401fdc8:	4620      	mov	r0, r4
3401fdca:	f000 ff73 	bl	34020cb4 <_calloc_r>
3401fdce:	69e3      	ldr	r3, [r4, #28]
3401fdd0:	60f0      	str	r0, [r6, #12]
3401fdd2:	68db      	ldr	r3, [r3, #12]
3401fdd4:	2b00      	cmp	r3, #0
3401fdd6:	d1e4      	bne.n	3401fda2 <_Balloc+0x2e>
3401fdd8:	2000      	movs	r0, #0
3401fdda:	bd70      	pop	{r4, r5, r6, pc}
3401fddc:	6802      	ldr	r2, [r0, #0]
3401fdde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3401fde2:	2300      	movs	r3, #0
3401fde4:	e9c0 3303 	strd	r3, r3, [r0, #12]
3401fde8:	e7f7      	b.n	3401fdda <_Balloc+0x66>
3401fdea:	bf00      	nop
3401fdec:	340276e2 	.word	0x340276e2
3401fdf0:	34027762 	.word	0x34027762

3401fdf4 <_Bfree>:
3401fdf4:	b570      	push	{r4, r5, r6, lr}
3401fdf6:	69c6      	ldr	r6, [r0, #28]
3401fdf8:	4605      	mov	r5, r0
3401fdfa:	460c      	mov	r4, r1
3401fdfc:	b976      	cbnz	r6, 3401fe1c <_Bfree+0x28>
3401fdfe:	2010      	movs	r0, #16
3401fe00:	f7ff ff0e 	bl	3401fc20 <malloc>
3401fe04:	4602      	mov	r2, r0
3401fe06:	61e8      	str	r0, [r5, #28]
3401fe08:	b920      	cbnz	r0, 3401fe14 <_Bfree+0x20>
3401fe0a:	4b09      	ldr	r3, [pc, #36]	@ (3401fe30 <_Bfree+0x3c>)
3401fe0c:	218f      	movs	r1, #143	@ 0x8f
3401fe0e:	4809      	ldr	r0, [pc, #36]	@ (3401fe34 <_Bfree+0x40>)
3401fe10:	f7fd fdec 	bl	3401d9ec <__assert_func>
3401fe14:	e9c0 6601 	strd	r6, r6, [r0, #4]
3401fe18:	6006      	str	r6, [r0, #0]
3401fe1a:	60c6      	str	r6, [r0, #12]
3401fe1c:	b13c      	cbz	r4, 3401fe2e <_Bfree+0x3a>
3401fe1e:	69eb      	ldr	r3, [r5, #28]
3401fe20:	6862      	ldr	r2, [r4, #4]
3401fe22:	68db      	ldr	r3, [r3, #12]
3401fe24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3401fe28:	6021      	str	r1, [r4, #0]
3401fe2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3401fe2e:	bd70      	pop	{r4, r5, r6, pc}
3401fe30:	340276e2 	.word	0x340276e2
3401fe34:	34027762 	.word	0x34027762

3401fe38 <__multadd>:
3401fe38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401fe3c:	f101 0c14 	add.w	ip, r1, #20
3401fe40:	4607      	mov	r7, r0
3401fe42:	460c      	mov	r4, r1
3401fe44:	461e      	mov	r6, r3
3401fe46:	690d      	ldr	r5, [r1, #16]
3401fe48:	2000      	movs	r0, #0
3401fe4a:	f8dc 3000 	ldr.w	r3, [ip]
3401fe4e:	3001      	adds	r0, #1
3401fe50:	b299      	uxth	r1, r3
3401fe52:	4285      	cmp	r5, r0
3401fe54:	fb02 6101 	mla	r1, r2, r1, r6
3401fe58:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401fe5c:	ea4f 4311 	mov.w	r3, r1, lsr #16
3401fe60:	b289      	uxth	r1, r1
3401fe62:	fb02 3306 	mla	r3, r2, r6, r3
3401fe66:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3401fe6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
3401fe6e:	f84c 1b04 	str.w	r1, [ip], #4
3401fe72:	dcea      	bgt.n	3401fe4a <__multadd+0x12>
3401fe74:	b30e      	cbz	r6, 3401feba <__multadd+0x82>
3401fe76:	68a3      	ldr	r3, [r4, #8]
3401fe78:	42ab      	cmp	r3, r5
3401fe7a:	dc19      	bgt.n	3401feb0 <__multadd+0x78>
3401fe7c:	6861      	ldr	r1, [r4, #4]
3401fe7e:	4638      	mov	r0, r7
3401fe80:	3101      	adds	r1, #1
3401fe82:	f7ff ff77 	bl	3401fd74 <_Balloc>
3401fe86:	4680      	mov	r8, r0
3401fe88:	b928      	cbnz	r0, 3401fe96 <__multadd+0x5e>
3401fe8a:	4602      	mov	r2, r0
3401fe8c:	4b0c      	ldr	r3, [pc, #48]	@ (3401fec0 <__multadd+0x88>)
3401fe8e:	21ba      	movs	r1, #186	@ 0xba
3401fe90:	480c      	ldr	r0, [pc, #48]	@ (3401fec4 <__multadd+0x8c>)
3401fe92:	f7fd fdab 	bl	3401d9ec <__assert_func>
3401fe96:	6922      	ldr	r2, [r4, #16]
3401fe98:	f104 010c 	add.w	r1, r4, #12
3401fe9c:	300c      	adds	r0, #12
3401fe9e:	3202      	adds	r2, #2
3401fea0:	0092      	lsls	r2, r2, #2
3401fea2:	f7ff f874 	bl	3401ef8e <memcpy>
3401fea6:	4621      	mov	r1, r4
3401fea8:	4644      	mov	r4, r8
3401feaa:	4638      	mov	r0, r7
3401feac:	f7ff ffa2 	bl	3401fdf4 <_Bfree>
3401feb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3401feb4:	3501      	adds	r5, #1
3401feb6:	615e      	str	r6, [r3, #20]
3401feb8:	6125      	str	r5, [r4, #16]
3401feba:	4620      	mov	r0, r4
3401febc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401fec0:	34027751 	.word	0x34027751
3401fec4:	34027762 	.word	0x34027762

3401fec8 <__hi0bits>:
3401fec8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3401fecc:	4603      	mov	r3, r0
3401fece:	bf36      	itet	cc
3401fed0:	0403      	lslcc	r3, r0, #16
3401fed2:	2000      	movcs	r0, #0
3401fed4:	2010      	movcc	r0, #16
3401fed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401feda:	bf3c      	itt	cc
3401fedc:	021b      	lslcc	r3, r3, #8
3401fede:	3008      	addcc	r0, #8
3401fee0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401fee4:	bf3c      	itt	cc
3401fee6:	011b      	lslcc	r3, r3, #4
3401fee8:	3004      	addcc	r0, #4
3401feea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401feee:	bf3c      	itt	cc
3401fef0:	009b      	lslcc	r3, r3, #2
3401fef2:	3002      	addcc	r0, #2
3401fef4:	2b00      	cmp	r3, #0
3401fef6:	db05      	blt.n	3401ff04 <__hi0bits+0x3c>
3401fef8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3401fefc:	f100 0001 	add.w	r0, r0, #1
3401ff00:	bf08      	it	eq
3401ff02:	2020      	moveq	r0, #32
3401ff04:	4770      	bx	lr

3401ff06 <__lo0bits>:
3401ff06:	6803      	ldr	r3, [r0, #0]
3401ff08:	4602      	mov	r2, r0
3401ff0a:	f013 0007 	ands.w	r0, r3, #7
3401ff0e:	d00b      	beq.n	3401ff28 <__lo0bits+0x22>
3401ff10:	07d9      	lsls	r1, r3, #31
3401ff12:	d421      	bmi.n	3401ff58 <__lo0bits+0x52>
3401ff14:	0798      	lsls	r0, r3, #30
3401ff16:	bf47      	ittee	mi
3401ff18:	085b      	lsrmi	r3, r3, #1
3401ff1a:	2001      	movmi	r0, #1
3401ff1c:	089b      	lsrpl	r3, r3, #2
3401ff1e:	2002      	movpl	r0, #2
3401ff20:	bf4c      	ite	mi
3401ff22:	6013      	strmi	r3, [r2, #0]
3401ff24:	6013      	strpl	r3, [r2, #0]
3401ff26:	4770      	bx	lr
3401ff28:	b299      	uxth	r1, r3
3401ff2a:	b909      	cbnz	r1, 3401ff30 <__lo0bits+0x2a>
3401ff2c:	0c1b      	lsrs	r3, r3, #16
3401ff2e:	2010      	movs	r0, #16
3401ff30:	b2d9      	uxtb	r1, r3
3401ff32:	b909      	cbnz	r1, 3401ff38 <__lo0bits+0x32>
3401ff34:	3008      	adds	r0, #8
3401ff36:	0a1b      	lsrs	r3, r3, #8
3401ff38:	0719      	lsls	r1, r3, #28
3401ff3a:	bf04      	itt	eq
3401ff3c:	091b      	lsreq	r3, r3, #4
3401ff3e:	3004      	addeq	r0, #4
3401ff40:	0799      	lsls	r1, r3, #30
3401ff42:	bf04      	itt	eq
3401ff44:	089b      	lsreq	r3, r3, #2
3401ff46:	3002      	addeq	r0, #2
3401ff48:	07d9      	lsls	r1, r3, #31
3401ff4a:	d403      	bmi.n	3401ff54 <__lo0bits+0x4e>
3401ff4c:	085b      	lsrs	r3, r3, #1
3401ff4e:	f100 0001 	add.w	r0, r0, #1
3401ff52:	d003      	beq.n	3401ff5c <__lo0bits+0x56>
3401ff54:	6013      	str	r3, [r2, #0]
3401ff56:	4770      	bx	lr
3401ff58:	2000      	movs	r0, #0
3401ff5a:	4770      	bx	lr
3401ff5c:	2020      	movs	r0, #32
3401ff5e:	4770      	bx	lr

3401ff60 <__i2b>:
3401ff60:	b510      	push	{r4, lr}
3401ff62:	460c      	mov	r4, r1
3401ff64:	2101      	movs	r1, #1
3401ff66:	f7ff ff05 	bl	3401fd74 <_Balloc>
3401ff6a:	4602      	mov	r2, r0
3401ff6c:	b928      	cbnz	r0, 3401ff7a <__i2b+0x1a>
3401ff6e:	4b05      	ldr	r3, [pc, #20]	@ (3401ff84 <__i2b+0x24>)
3401ff70:	f240 1145 	movw	r1, #325	@ 0x145
3401ff74:	4804      	ldr	r0, [pc, #16]	@ (3401ff88 <__i2b+0x28>)
3401ff76:	f7fd fd39 	bl	3401d9ec <__assert_func>
3401ff7a:	2301      	movs	r3, #1
3401ff7c:	6144      	str	r4, [r0, #20]
3401ff7e:	6103      	str	r3, [r0, #16]
3401ff80:	bd10      	pop	{r4, pc}
3401ff82:	bf00      	nop
3401ff84:	34027751 	.word	0x34027751
3401ff88:	34027762 	.word	0x34027762

3401ff8c <__multiply>:
3401ff8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401ff90:	4617      	mov	r7, r2
3401ff92:	690a      	ldr	r2, [r1, #16]
3401ff94:	4689      	mov	r9, r1
3401ff96:	b085      	sub	sp, #20
3401ff98:	693b      	ldr	r3, [r7, #16]
3401ff9a:	429a      	cmp	r2, r3
3401ff9c:	bfa2      	ittt	ge
3401ff9e:	463b      	movge	r3, r7
3401ffa0:	460f      	movge	r7, r1
3401ffa2:	4699      	movge	r9, r3
3401ffa4:	693d      	ldr	r5, [r7, #16]
3401ffa6:	68bb      	ldr	r3, [r7, #8]
3401ffa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
3401ffac:	6879      	ldr	r1, [r7, #4]
3401ffae:	eb05 060a 	add.w	r6, r5, sl
3401ffb2:	42b3      	cmp	r3, r6
3401ffb4:	bfb8      	it	lt
3401ffb6:	3101      	addlt	r1, #1
3401ffb8:	f7ff fedc 	bl	3401fd74 <_Balloc>
3401ffbc:	b930      	cbnz	r0, 3401ffcc <__multiply+0x40>
3401ffbe:	4602      	mov	r2, r0
3401ffc0:	4b42      	ldr	r3, [pc, #264]	@ (340200cc <__multiply+0x140>)
3401ffc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401ffc6:	4842      	ldr	r0, [pc, #264]	@ (340200d0 <__multiply+0x144>)
3401ffc8:	f7fd fd10 	bl	3401d9ec <__assert_func>
3401ffcc:	f100 0414 	add.w	r4, r0, #20
3401ffd0:	2200      	movs	r2, #0
3401ffd2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3401ffd6:	4623      	mov	r3, r4
3401ffd8:	4573      	cmp	r3, lr
3401ffda:	d320      	bcc.n	3402001e <__multiply+0x92>
3401ffdc:	f107 0814 	add.w	r8, r7, #20
3401ffe0:	f109 0114 	add.w	r1, r9, #20
3401ffe4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3401ffe8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3401ffec:	9302      	str	r3, [sp, #8]
3401ffee:	1beb      	subs	r3, r5, r7
3401fff0:	3715      	adds	r7, #21
3401fff2:	3b15      	subs	r3, #21
3401fff4:	f023 0303 	bic.w	r3, r3, #3
3401fff8:	3304      	adds	r3, #4
3401fffa:	42bd      	cmp	r5, r7
3401fffc:	bf38      	it	cc
3401fffe:	2304      	movcc	r3, #4
34020000:	9301      	str	r3, [sp, #4]
34020002:	9b02      	ldr	r3, [sp, #8]
34020004:	9103      	str	r1, [sp, #12]
34020006:	428b      	cmp	r3, r1
34020008:	d80c      	bhi.n	34020024 <__multiply+0x98>
3402000a:	2e00      	cmp	r6, #0
3402000c:	dd03      	ble.n	34020016 <__multiply+0x8a>
3402000e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
34020012:	2b00      	cmp	r3, #0
34020014:	d057      	beq.n	340200c6 <__multiply+0x13a>
34020016:	6106      	str	r6, [r0, #16]
34020018:	b005      	add	sp, #20
3402001a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402001e:	f843 2b04 	str.w	r2, [r3], #4
34020022:	e7d9      	b.n	3401ffd8 <__multiply+0x4c>
34020024:	f8b1 a000 	ldrh.w	sl, [r1]
34020028:	f1ba 0f00 	cmp.w	sl, #0
3402002c:	d021      	beq.n	34020072 <__multiply+0xe6>
3402002e:	46c4      	mov	ip, r8
34020030:	46a1      	mov	r9, r4
34020032:	2700      	movs	r7, #0
34020034:	f85c 2b04 	ldr.w	r2, [ip], #4
34020038:	f8d9 3000 	ldr.w	r3, [r9]
3402003c:	fa1f fb82 	uxth.w	fp, r2
34020040:	4565      	cmp	r5, ip
34020042:	b29b      	uxth	r3, r3
34020044:	ea4f 4212 	mov.w	r2, r2, lsr #16
34020048:	fb0a 330b 	mla	r3, sl, fp, r3
3402004c:	443b      	add	r3, r7
3402004e:	f8d9 7000 	ldr.w	r7, [r9]
34020052:	ea4f 4717 	mov.w	r7, r7, lsr #16
34020056:	fb0a 7202 	mla	r2, sl, r2, r7
3402005a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3402005e:	b29b      	uxth	r3, r3
34020060:	ea4f 4712 	mov.w	r7, r2, lsr #16
34020064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34020068:	f849 3b04 	str.w	r3, [r9], #4
3402006c:	d8e2      	bhi.n	34020034 <__multiply+0xa8>
3402006e:	9b01      	ldr	r3, [sp, #4]
34020070:	50e7      	str	r7, [r4, r3]
34020072:	9b03      	ldr	r3, [sp, #12]
34020074:	3104      	adds	r1, #4
34020076:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3402007a:	f1b9 0f00 	cmp.w	r9, #0
3402007e:	d020      	beq.n	340200c2 <__multiply+0x136>
34020080:	6823      	ldr	r3, [r4, #0]
34020082:	4647      	mov	r7, r8
34020084:	46a4      	mov	ip, r4
34020086:	f04f 0a00 	mov.w	sl, #0
3402008a:	f8b7 b000 	ldrh.w	fp, [r7]
3402008e:	b29b      	uxth	r3, r3
34020090:	f8bc 2002 	ldrh.w	r2, [ip, #2]
34020094:	fb09 220b 	mla	r2, r9, fp, r2
34020098:	4452      	add	r2, sl
3402009a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3402009e:	f84c 3b04 	str.w	r3, [ip], #4
340200a2:	f857 3b04 	ldr.w	r3, [r7], #4
340200a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
340200aa:	f8bc 3000 	ldrh.w	r3, [ip]
340200ae:	42bd      	cmp	r5, r7
340200b0:	fb09 330a 	mla	r3, r9, sl, r3
340200b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
340200b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
340200bc:	d8e5      	bhi.n	3402008a <__multiply+0xfe>
340200be:	9a01      	ldr	r2, [sp, #4]
340200c0:	50a3      	str	r3, [r4, r2]
340200c2:	3404      	adds	r4, #4
340200c4:	e79d      	b.n	34020002 <__multiply+0x76>
340200c6:	3e01      	subs	r6, #1
340200c8:	e79f      	b.n	3402000a <__multiply+0x7e>
340200ca:	bf00      	nop
340200cc:	34027751 	.word	0x34027751
340200d0:	34027762 	.word	0x34027762

340200d4 <__pow5mult>:
340200d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
340200d8:	4615      	mov	r5, r2
340200da:	f012 0203 	ands.w	r2, r2, #3
340200de:	4607      	mov	r7, r0
340200e0:	460e      	mov	r6, r1
340200e2:	d007      	beq.n	340200f4 <__pow5mult+0x20>
340200e4:	3a01      	subs	r2, #1
340200e6:	4c25      	ldr	r4, [pc, #148]	@ (3402017c <__pow5mult+0xa8>)
340200e8:	2300      	movs	r3, #0
340200ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
340200ee:	f7ff fea3 	bl	3401fe38 <__multadd>
340200f2:	4606      	mov	r6, r0
340200f4:	10ad      	asrs	r5, r5, #2
340200f6:	d03d      	beq.n	34020174 <__pow5mult+0xa0>
340200f8:	69fc      	ldr	r4, [r7, #28]
340200fa:	b97c      	cbnz	r4, 3402011c <__pow5mult+0x48>
340200fc:	2010      	movs	r0, #16
340200fe:	f7ff fd8f 	bl	3401fc20 <malloc>
34020102:	4602      	mov	r2, r0
34020104:	61f8      	str	r0, [r7, #28]
34020106:	b928      	cbnz	r0, 34020114 <__pow5mult+0x40>
34020108:	4b1d      	ldr	r3, [pc, #116]	@ (34020180 <__pow5mult+0xac>)
3402010a:	f240 11b3 	movw	r1, #435	@ 0x1b3
3402010e:	481d      	ldr	r0, [pc, #116]	@ (34020184 <__pow5mult+0xb0>)
34020110:	f7fd fc6c 	bl	3401d9ec <__assert_func>
34020114:	e9c0 4401 	strd	r4, r4, [r0, #4]
34020118:	6004      	str	r4, [r0, #0]
3402011a:	60c4      	str	r4, [r0, #12]
3402011c:	f8d7 801c 	ldr.w	r8, [r7, #28]
34020120:	f8d8 4008 	ldr.w	r4, [r8, #8]
34020124:	b94c      	cbnz	r4, 3402013a <__pow5mult+0x66>
34020126:	f240 2171 	movw	r1, #625	@ 0x271
3402012a:	4638      	mov	r0, r7
3402012c:	f7ff ff18 	bl	3401ff60 <__i2b>
34020130:	2300      	movs	r3, #0
34020132:	4604      	mov	r4, r0
34020134:	f8c8 0008 	str.w	r0, [r8, #8]
34020138:	6003      	str	r3, [r0, #0]
3402013a:	f04f 0900 	mov.w	r9, #0
3402013e:	07eb      	lsls	r3, r5, #31
34020140:	d50a      	bpl.n	34020158 <__pow5mult+0x84>
34020142:	4631      	mov	r1, r6
34020144:	4622      	mov	r2, r4
34020146:	4638      	mov	r0, r7
34020148:	f7ff ff20 	bl	3401ff8c <__multiply>
3402014c:	4680      	mov	r8, r0
3402014e:	4631      	mov	r1, r6
34020150:	4638      	mov	r0, r7
34020152:	4646      	mov	r6, r8
34020154:	f7ff fe4e 	bl	3401fdf4 <_Bfree>
34020158:	106d      	asrs	r5, r5, #1
3402015a:	d00b      	beq.n	34020174 <__pow5mult+0xa0>
3402015c:	6820      	ldr	r0, [r4, #0]
3402015e:	b938      	cbnz	r0, 34020170 <__pow5mult+0x9c>
34020160:	4622      	mov	r2, r4
34020162:	4621      	mov	r1, r4
34020164:	4638      	mov	r0, r7
34020166:	f7ff ff11 	bl	3401ff8c <__multiply>
3402016a:	6020      	str	r0, [r4, #0]
3402016c:	f8c0 9000 	str.w	r9, [r0]
34020170:	4604      	mov	r4, r0
34020172:	e7e4      	b.n	3402013e <__pow5mult+0x6a>
34020174:	4630      	mov	r0, r6
34020176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3402017a:	bf00      	nop
3402017c:	340a093c 	.word	0x340a093c
34020180:	340276e2 	.word	0x340276e2
34020184:	34027762 	.word	0x34027762

34020188 <__lshift>:
34020188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3402018c:	460c      	mov	r4, r1
3402018e:	4607      	mov	r7, r0
34020190:	4691      	mov	r9, r2
34020192:	ea4f 1a62 	mov.w	sl, r2, asr #5
34020196:	6923      	ldr	r3, [r4, #16]
34020198:	6849      	ldr	r1, [r1, #4]
3402019a:	eb03 1862 	add.w	r8, r3, r2, asr #5
3402019e:	68a3      	ldr	r3, [r4, #8]
340201a0:	f108 0601 	add.w	r6, r8, #1
340201a4:	42b3      	cmp	r3, r6
340201a6:	db0b      	blt.n	340201c0 <__lshift+0x38>
340201a8:	4638      	mov	r0, r7
340201aa:	f7ff fde3 	bl	3401fd74 <_Balloc>
340201ae:	4605      	mov	r5, r0
340201b0:	b948      	cbnz	r0, 340201c6 <__lshift+0x3e>
340201b2:	4602      	mov	r2, r0
340201b4:	4b28      	ldr	r3, [pc, #160]	@ (34020258 <__lshift+0xd0>)
340201b6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
340201ba:	4828      	ldr	r0, [pc, #160]	@ (3402025c <__lshift+0xd4>)
340201bc:	f7fd fc16 	bl	3401d9ec <__assert_func>
340201c0:	3101      	adds	r1, #1
340201c2:	005b      	lsls	r3, r3, #1
340201c4:	e7ee      	b.n	340201a4 <__lshift+0x1c>
340201c6:	2300      	movs	r3, #0
340201c8:	f100 0114 	add.w	r1, r0, #20
340201cc:	f100 0210 	add.w	r2, r0, #16
340201d0:	4618      	mov	r0, r3
340201d2:	4553      	cmp	r3, sl
340201d4:	db33      	blt.n	3402023e <__lshift+0xb6>
340201d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
340201da:	f104 0314 	add.w	r3, r4, #20
340201de:	6920      	ldr	r0, [r4, #16]
340201e0:	f019 091f 	ands.w	r9, r9, #31
340201e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
340201e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
340201ec:	d02b      	beq.n	34020246 <__lshift+0xbe>
340201ee:	f1c9 0e20 	rsb	lr, r9, #32
340201f2:	468a      	mov	sl, r1
340201f4:	2200      	movs	r2, #0
340201f6:	6818      	ldr	r0, [r3, #0]
340201f8:	fa00 f009 	lsl.w	r0, r0, r9
340201fc:	4310      	orrs	r0, r2
340201fe:	f84a 0b04 	str.w	r0, [sl], #4
34020202:	f853 2b04 	ldr.w	r2, [r3], #4
34020206:	459c      	cmp	ip, r3
34020208:	fa22 f20e 	lsr.w	r2, r2, lr
3402020c:	d8f3      	bhi.n	340201f6 <__lshift+0x6e>
3402020e:	ebac 0304 	sub.w	r3, ip, r4
34020212:	f104 0015 	add.w	r0, r4, #21
34020216:	3b15      	subs	r3, #21
34020218:	f023 0303 	bic.w	r3, r3, #3
3402021c:	3304      	adds	r3, #4
3402021e:	4560      	cmp	r0, ip
34020220:	bf88      	it	hi
34020222:	2304      	movhi	r3, #4
34020224:	50ca      	str	r2, [r1, r3]
34020226:	b10a      	cbz	r2, 3402022c <__lshift+0xa4>
34020228:	f108 0602 	add.w	r6, r8, #2
3402022c:	3e01      	subs	r6, #1
3402022e:	4638      	mov	r0, r7
34020230:	4621      	mov	r1, r4
34020232:	612e      	str	r6, [r5, #16]
34020234:	f7ff fdde 	bl	3401fdf4 <_Bfree>
34020238:	4628      	mov	r0, r5
3402023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3402023e:	3301      	adds	r3, #1
34020240:	f842 0f04 	str.w	r0, [r2, #4]!
34020244:	e7c5      	b.n	340201d2 <__lshift+0x4a>
34020246:	3904      	subs	r1, #4
34020248:	f853 2b04 	ldr.w	r2, [r3], #4
3402024c:	459c      	cmp	ip, r3
3402024e:	f841 2f04 	str.w	r2, [r1, #4]!
34020252:	d8f9      	bhi.n	34020248 <__lshift+0xc0>
34020254:	e7ea      	b.n	3402022c <__lshift+0xa4>
34020256:	bf00      	nop
34020258:	34027751 	.word	0x34027751
3402025c:	34027762 	.word	0x34027762

34020260 <__mcmp>:
34020260:	4603      	mov	r3, r0
34020262:	690a      	ldr	r2, [r1, #16]
34020264:	6900      	ldr	r0, [r0, #16]
34020266:	1a80      	subs	r0, r0, r2
34020268:	b530      	push	{r4, r5, lr}
3402026a:	d10e      	bne.n	3402028a <__mcmp+0x2a>
3402026c:	3314      	adds	r3, #20
3402026e:	3114      	adds	r1, #20
34020270:	eb03 0482 	add.w	r4, r3, r2, lsl #2
34020274:	eb01 0182 	add.w	r1, r1, r2, lsl #2
34020278:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3402027c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
34020280:	4295      	cmp	r5, r2
34020282:	d003      	beq.n	3402028c <__mcmp+0x2c>
34020284:	d205      	bcs.n	34020292 <__mcmp+0x32>
34020286:	f04f 30ff 	mov.w	r0, #4294967295
3402028a:	bd30      	pop	{r4, r5, pc}
3402028c:	42a3      	cmp	r3, r4
3402028e:	d3f3      	bcc.n	34020278 <__mcmp+0x18>
34020290:	e7fb      	b.n	3402028a <__mcmp+0x2a>
34020292:	2001      	movs	r0, #1
34020294:	e7f9      	b.n	3402028a <__mcmp+0x2a>
	...

34020298 <__mdiff>:
34020298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3402029c:	4689      	mov	r9, r1
3402029e:	4606      	mov	r6, r0
340202a0:	4611      	mov	r1, r2
340202a2:	4614      	mov	r4, r2
340202a4:	4648      	mov	r0, r9
340202a6:	f7ff ffdb 	bl	34020260 <__mcmp>
340202aa:	1e05      	subs	r5, r0, #0
340202ac:	d112      	bne.n	340202d4 <__mdiff+0x3c>
340202ae:	4629      	mov	r1, r5
340202b0:	4630      	mov	r0, r6
340202b2:	f7ff fd5f 	bl	3401fd74 <_Balloc>
340202b6:	4602      	mov	r2, r0
340202b8:	b928      	cbnz	r0, 340202c6 <__mdiff+0x2e>
340202ba:	4b41      	ldr	r3, [pc, #260]	@ (340203c0 <__mdiff+0x128>)
340202bc:	f240 2137 	movw	r1, #567	@ 0x237
340202c0:	4840      	ldr	r0, [pc, #256]	@ (340203c4 <__mdiff+0x12c>)
340202c2:	f7fd fb93 	bl	3401d9ec <__assert_func>
340202c6:	2301      	movs	r3, #1
340202c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
340202cc:	4610      	mov	r0, r2
340202ce:	b003      	add	sp, #12
340202d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340202d4:	bfbc      	itt	lt
340202d6:	464b      	movlt	r3, r9
340202d8:	46a1      	movlt	r9, r4
340202da:	4630      	mov	r0, r6
340202dc:	bfb8      	it	lt
340202de:	2501      	movlt	r5, #1
340202e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
340202e4:	bfb4      	ite	lt
340202e6:	461c      	movlt	r4, r3
340202e8:	2500      	movge	r5, #0
340202ea:	f7ff fd43 	bl	3401fd74 <_Balloc>
340202ee:	4602      	mov	r2, r0
340202f0:	b918      	cbnz	r0, 340202fa <__mdiff+0x62>
340202f2:	4b33      	ldr	r3, [pc, #204]	@ (340203c0 <__mdiff+0x128>)
340202f4:	f240 2145 	movw	r1, #581	@ 0x245
340202f8:	e7e2      	b.n	340202c0 <__mdiff+0x28>
340202fa:	f8d9 7010 	ldr.w	r7, [r9, #16]
340202fe:	f104 0e14 	add.w	lr, r4, #20
34020302:	6926      	ldr	r6, [r4, #16]
34020304:	f100 0b14 	add.w	fp, r0, #20
34020308:	60c5      	str	r5, [r0, #12]
3402030a:	f109 0514 	add.w	r5, r9, #20
3402030e:	f109 0310 	add.w	r3, r9, #16
34020312:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
34020316:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3402031a:	46d9      	mov	r9, fp
3402031c:	f04f 0c00 	mov.w	ip, #0
34020320:	9301      	str	r3, [sp, #4]
34020322:	9b01      	ldr	r3, [sp, #4]
34020324:	f85e 0b04 	ldr.w	r0, [lr], #4
34020328:	f853 af04 	ldr.w	sl, [r3, #4]!
3402032c:	4576      	cmp	r6, lr
3402032e:	9301      	str	r3, [sp, #4]
34020330:	fa1f f38a 	uxth.w	r3, sl
34020334:	4619      	mov	r1, r3
34020336:	b283      	uxth	r3, r0
34020338:	ea4f 4010 	mov.w	r0, r0, lsr #16
3402033c:	eba1 0303 	sub.w	r3, r1, r3
34020340:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
34020344:	4463      	add	r3, ip
34020346:	eb00 4023 	add.w	r0, r0, r3, asr #16
3402034a:	b29b      	uxth	r3, r3
3402034c:	ea4f 4c20 	mov.w	ip, r0, asr #16
34020350:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34020354:	f849 3b04 	str.w	r3, [r9], #4
34020358:	d8e3      	bhi.n	34020322 <__mdiff+0x8a>
3402035a:	1b33      	subs	r3, r6, r4
3402035c:	3415      	adds	r4, #21
3402035e:	3b15      	subs	r3, #21
34020360:	f023 0303 	bic.w	r3, r3, #3
34020364:	3304      	adds	r3, #4
34020366:	42a6      	cmp	r6, r4
34020368:	bf38      	it	cc
3402036a:	2304      	movcc	r3, #4
3402036c:	441d      	add	r5, r3
3402036e:	445b      	add	r3, fp
34020370:	462c      	mov	r4, r5
34020372:	461e      	mov	r6, r3
34020374:	4544      	cmp	r4, r8
34020376:	d30e      	bcc.n	34020396 <__mdiff+0xfe>
34020378:	f108 0103 	add.w	r1, r8, #3
3402037c:	1b49      	subs	r1, r1, r5
3402037e:	3d03      	subs	r5, #3
34020380:	f021 0103 	bic.w	r1, r1, #3
34020384:	45a8      	cmp	r8, r5
34020386:	bf38      	it	cc
34020388:	2100      	movcc	r1, #0
3402038a:	440b      	add	r3, r1
3402038c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
34020390:	b199      	cbz	r1, 340203ba <__mdiff+0x122>
34020392:	6117      	str	r7, [r2, #16]
34020394:	e79a      	b.n	340202cc <__mdiff+0x34>
34020396:	f854 1b04 	ldr.w	r1, [r4], #4
3402039a:	46e6      	mov	lr, ip
3402039c:	fa1f fc81 	uxth.w	ip, r1
340203a0:	0c08      	lsrs	r0, r1, #16
340203a2:	4471      	add	r1, lr
340203a4:	44f4      	add	ip, lr
340203a6:	b289      	uxth	r1, r1
340203a8:	eb00 402c 	add.w	r0, r0, ip, asr #16
340203ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
340203b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
340203b4:	f846 1b04 	str.w	r1, [r6], #4
340203b8:	e7dc      	b.n	34020374 <__mdiff+0xdc>
340203ba:	3f01      	subs	r7, #1
340203bc:	e7e6      	b.n	3402038c <__mdiff+0xf4>
340203be:	bf00      	nop
340203c0:	34027751 	.word	0x34027751
340203c4:	34027762 	.word	0x34027762

340203c8 <__d2b>:
340203c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340203cc:	460f      	mov	r7, r1
340203ce:	2101      	movs	r1, #1
340203d0:	4616      	mov	r6, r2
340203d2:	ec59 8b10 	vmov	r8, r9, d0
340203d6:	f7ff fccd 	bl	3401fd74 <_Balloc>
340203da:	4604      	mov	r4, r0
340203dc:	b930      	cbnz	r0, 340203ec <__d2b+0x24>
340203de:	4602      	mov	r2, r0
340203e0:	4b23      	ldr	r3, [pc, #140]	@ (34020470 <__d2b+0xa8>)
340203e2:	f240 310f 	movw	r1, #783	@ 0x30f
340203e6:	4823      	ldr	r0, [pc, #140]	@ (34020474 <__d2b+0xac>)
340203e8:	f7fd fb00 	bl	3401d9ec <__assert_func>
340203ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
340203f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
340203f4:	b10d      	cbz	r5, 340203fa <__d2b+0x32>
340203f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
340203fa:	9301      	str	r3, [sp, #4]
340203fc:	f1b8 0300 	subs.w	r3, r8, #0
34020400:	d023      	beq.n	3402044a <__d2b+0x82>
34020402:	4668      	mov	r0, sp
34020404:	9300      	str	r3, [sp, #0]
34020406:	f7ff fd7e 	bl	3401ff06 <__lo0bits>
3402040a:	e9dd 1200 	ldrd	r1, r2, [sp]
3402040e:	b1d0      	cbz	r0, 34020446 <__d2b+0x7e>
34020410:	f1c0 0320 	rsb	r3, r0, #32
34020414:	fa02 f303 	lsl.w	r3, r2, r3
34020418:	40c2      	lsrs	r2, r0
3402041a:	430b      	orrs	r3, r1
3402041c:	9201      	str	r2, [sp, #4]
3402041e:	6163      	str	r3, [r4, #20]
34020420:	9b01      	ldr	r3, [sp, #4]
34020422:	2b00      	cmp	r3, #0
34020424:	61a3      	str	r3, [r4, #24]
34020426:	bf0c      	ite	eq
34020428:	2201      	moveq	r2, #1
3402042a:	2202      	movne	r2, #2
3402042c:	6122      	str	r2, [r4, #16]
3402042e:	b1a5      	cbz	r5, 3402045a <__d2b+0x92>
34020430:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
34020434:	4405      	add	r5, r0
34020436:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3402043a:	603d      	str	r5, [r7, #0]
3402043c:	6030      	str	r0, [r6, #0]
3402043e:	4620      	mov	r0, r4
34020440:	b003      	add	sp, #12
34020442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
34020446:	6161      	str	r1, [r4, #20]
34020448:	e7ea      	b.n	34020420 <__d2b+0x58>
3402044a:	a801      	add	r0, sp, #4
3402044c:	f7ff fd5b 	bl	3401ff06 <__lo0bits>
34020450:	9b01      	ldr	r3, [sp, #4]
34020452:	3020      	adds	r0, #32
34020454:	2201      	movs	r2, #1
34020456:	6163      	str	r3, [r4, #20]
34020458:	e7e8      	b.n	3402042c <__d2b+0x64>
3402045a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3402045e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
34020462:	6038      	str	r0, [r7, #0]
34020464:	6918      	ldr	r0, [r3, #16]
34020466:	f7ff fd2f 	bl	3401fec8 <__hi0bits>
3402046a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3402046e:	e7e5      	b.n	3402043c <__d2b+0x74>
34020470:	34027751 	.word	0x34027751
34020474:	34027762 	.word	0x34027762

34020478 <__ssputs_r>:
34020478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3402047c:	461f      	mov	r7, r3
3402047e:	688e      	ldr	r6, [r1, #8]
34020480:	4682      	mov	sl, r0
34020482:	460c      	mov	r4, r1
34020484:	42be      	cmp	r6, r7
34020486:	4690      	mov	r8, r2
34020488:	680b      	ldr	r3, [r1, #0]
3402048a:	d82d      	bhi.n	340204e8 <__ssputs_r+0x70>
3402048c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34020490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
34020494:	d026      	beq.n	340204e4 <__ssputs_r+0x6c>
34020496:	6965      	ldr	r5, [r4, #20]
34020498:	6909      	ldr	r1, [r1, #16]
3402049a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3402049e:	eba3 0901 	sub.w	r9, r3, r1
340204a2:	1c7b      	adds	r3, r7, #1
340204a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
340204a8:	444b      	add	r3, r9
340204aa:	106d      	asrs	r5, r5, #1
340204ac:	429d      	cmp	r5, r3
340204ae:	bf38      	it	cc
340204b0:	461d      	movcc	r5, r3
340204b2:	0553      	lsls	r3, r2, #21
340204b4:	d527      	bpl.n	34020506 <__ssputs_r+0x8e>
340204b6:	4629      	mov	r1, r5
340204b8:	f7ff fbdc 	bl	3401fc74 <_malloc_r>
340204bc:	4606      	mov	r6, r0
340204be:	b360      	cbz	r0, 3402051a <__ssputs_r+0xa2>
340204c0:	464a      	mov	r2, r9
340204c2:	6921      	ldr	r1, [r4, #16]
340204c4:	f7fe fd63 	bl	3401ef8e <memcpy>
340204c8:	89a3      	ldrh	r3, [r4, #12]
340204ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
340204ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
340204d2:	81a3      	strh	r3, [r4, #12]
340204d4:	6126      	str	r6, [r4, #16]
340204d6:	444e      	add	r6, r9
340204d8:	6165      	str	r5, [r4, #20]
340204da:	eba5 0509 	sub.w	r5, r5, r9
340204de:	6026      	str	r6, [r4, #0]
340204e0:	463e      	mov	r6, r7
340204e2:	60a5      	str	r5, [r4, #8]
340204e4:	42be      	cmp	r6, r7
340204e6:	d900      	bls.n	340204ea <__ssputs_r+0x72>
340204e8:	463e      	mov	r6, r7
340204ea:	4632      	mov	r2, r6
340204ec:	4641      	mov	r1, r8
340204ee:	6820      	ldr	r0, [r4, #0]
340204f0:	f7fe faac 	bl	3401ea4c <memmove>
340204f4:	68a3      	ldr	r3, [r4, #8]
340204f6:	2000      	movs	r0, #0
340204f8:	1b9b      	subs	r3, r3, r6
340204fa:	60a3      	str	r3, [r4, #8]
340204fc:	6823      	ldr	r3, [r4, #0]
340204fe:	4433      	add	r3, r6
34020500:	6023      	str	r3, [r4, #0]
34020502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34020506:	462a      	mov	r2, r5
34020508:	f000 fbfa 	bl	34020d00 <_realloc_r>
3402050c:	4606      	mov	r6, r0
3402050e:	2800      	cmp	r0, #0
34020510:	d1e0      	bne.n	340204d4 <__ssputs_r+0x5c>
34020512:	6921      	ldr	r1, [r4, #16]
34020514:	4650      	mov	r0, sl
34020516:	f7ff fb39 	bl	3401fb8c <_free_r>
3402051a:	230c      	movs	r3, #12
3402051c:	f04f 30ff 	mov.w	r0, #4294967295
34020520:	f8ca 3000 	str.w	r3, [sl]
34020524:	89a3      	ldrh	r3, [r4, #12]
34020526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3402052a:	81a3      	strh	r3, [r4, #12]
3402052c:	e7e9      	b.n	34020502 <__ssputs_r+0x8a>
	...

34020530 <_svfiprintf_r>:
34020530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34020534:	4698      	mov	r8, r3
34020536:	898b      	ldrh	r3, [r1, #12]
34020538:	b09d      	sub	sp, #116	@ 0x74
3402053a:	4607      	mov	r7, r0
3402053c:	061b      	lsls	r3, r3, #24
3402053e:	460d      	mov	r5, r1
34020540:	4614      	mov	r4, r2
34020542:	d510      	bpl.n	34020566 <_svfiprintf_r+0x36>
34020544:	690b      	ldr	r3, [r1, #16]
34020546:	b973      	cbnz	r3, 34020566 <_svfiprintf_r+0x36>
34020548:	2140      	movs	r1, #64	@ 0x40
3402054a:	f7ff fb93 	bl	3401fc74 <_malloc_r>
3402054e:	6028      	str	r0, [r5, #0]
34020550:	6128      	str	r0, [r5, #16]
34020552:	b930      	cbnz	r0, 34020562 <_svfiprintf_r+0x32>
34020554:	230c      	movs	r3, #12
34020556:	603b      	str	r3, [r7, #0]
34020558:	f04f 30ff 	mov.w	r0, #4294967295
3402055c:	b01d      	add	sp, #116	@ 0x74
3402055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34020562:	2340      	movs	r3, #64	@ 0x40
34020564:	616b      	str	r3, [r5, #20]
34020566:	2300      	movs	r3, #0
34020568:	f8cd 800c 	str.w	r8, [sp, #12]
3402056c:	f04f 0901 	mov.w	r9, #1
34020570:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 34020714 <_svfiprintf_r+0x1e4>
34020574:	9309      	str	r3, [sp, #36]	@ 0x24
34020576:	2320      	movs	r3, #32
34020578:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3402057c:	2330      	movs	r3, #48	@ 0x30
3402057e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34020582:	4623      	mov	r3, r4
34020584:	469a      	mov	sl, r3
34020586:	f813 2b01 	ldrb.w	r2, [r3], #1
3402058a:	b10a      	cbz	r2, 34020590 <_svfiprintf_r+0x60>
3402058c:	2a25      	cmp	r2, #37	@ 0x25
3402058e:	d1f9      	bne.n	34020584 <_svfiprintf_r+0x54>
34020590:	ebba 0b04 	subs.w	fp, sl, r4
34020594:	d00b      	beq.n	340205ae <_svfiprintf_r+0x7e>
34020596:	465b      	mov	r3, fp
34020598:	4622      	mov	r2, r4
3402059a:	4629      	mov	r1, r5
3402059c:	4638      	mov	r0, r7
3402059e:	f7ff ff6b 	bl	34020478 <__ssputs_r>
340205a2:	3001      	adds	r0, #1
340205a4:	f000 80a7 	beq.w	340206f6 <_svfiprintf_r+0x1c6>
340205a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
340205aa:	445a      	add	r2, fp
340205ac:	9209      	str	r2, [sp, #36]	@ 0x24
340205ae:	f89a 3000 	ldrb.w	r3, [sl]
340205b2:	2b00      	cmp	r3, #0
340205b4:	f000 809f 	beq.w	340206f6 <_svfiprintf_r+0x1c6>
340205b8:	2300      	movs	r3, #0
340205ba:	f04f 32ff 	mov.w	r2, #4294967295
340205be:	f10a 0a01 	add.w	sl, sl, #1
340205c2:	9304      	str	r3, [sp, #16]
340205c4:	9307      	str	r3, [sp, #28]
340205c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
340205ca:	931a      	str	r3, [sp, #104]	@ 0x68
340205cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
340205d0:	4654      	mov	r4, sl
340205d2:	2205      	movs	r2, #5
340205d4:	484f      	ldr	r0, [pc, #316]	@ (34020714 <_svfiprintf_r+0x1e4>)
340205d6:	f814 1b01 	ldrb.w	r1, [r4], #1
340205da:	f7fe fcca 	bl	3401ef72 <memchr>
340205de:	9a04      	ldr	r2, [sp, #16]
340205e0:	b9d8      	cbnz	r0, 3402061a <_svfiprintf_r+0xea>
340205e2:	06d0      	lsls	r0, r2, #27
340205e4:	bf44      	itt	mi
340205e6:	2320      	movmi	r3, #32
340205e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
340205ec:	0711      	lsls	r1, r2, #28
340205ee:	bf44      	itt	mi
340205f0:	232b      	movmi	r3, #43	@ 0x2b
340205f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
340205f6:	f89a 3000 	ldrb.w	r3, [sl]
340205fa:	2b2a      	cmp	r3, #42	@ 0x2a
340205fc:	d015      	beq.n	3402062a <_svfiprintf_r+0xfa>
340205fe:	9a07      	ldr	r2, [sp, #28]
34020600:	4654      	mov	r4, sl
34020602:	2000      	movs	r0, #0
34020604:	f04f 0c0a 	mov.w	ip, #10
34020608:	4621      	mov	r1, r4
3402060a:	f811 3b01 	ldrb.w	r3, [r1], #1
3402060e:	3b30      	subs	r3, #48	@ 0x30
34020610:	2b09      	cmp	r3, #9
34020612:	d94b      	bls.n	340206ac <_svfiprintf_r+0x17c>
34020614:	b1b0      	cbz	r0, 34020644 <_svfiprintf_r+0x114>
34020616:	9207      	str	r2, [sp, #28]
34020618:	e014      	b.n	34020644 <_svfiprintf_r+0x114>
3402061a:	eba0 0308 	sub.w	r3, r0, r8
3402061e:	46a2      	mov	sl, r4
34020620:	fa09 f303 	lsl.w	r3, r9, r3
34020624:	4313      	orrs	r3, r2
34020626:	9304      	str	r3, [sp, #16]
34020628:	e7d2      	b.n	340205d0 <_svfiprintf_r+0xa0>
3402062a:	9b03      	ldr	r3, [sp, #12]
3402062c:	1d19      	adds	r1, r3, #4
3402062e:	681b      	ldr	r3, [r3, #0]
34020630:	2b00      	cmp	r3, #0
34020632:	9103      	str	r1, [sp, #12]
34020634:	bfbb      	ittet	lt
34020636:	425b      	neglt	r3, r3
34020638:	f042 0202 	orrlt.w	r2, r2, #2
3402063c:	9307      	strge	r3, [sp, #28]
3402063e:	9307      	strlt	r3, [sp, #28]
34020640:	bfb8      	it	lt
34020642:	9204      	strlt	r2, [sp, #16]
34020644:	7823      	ldrb	r3, [r4, #0]
34020646:	2b2e      	cmp	r3, #46	@ 0x2e
34020648:	d10a      	bne.n	34020660 <_svfiprintf_r+0x130>
3402064a:	7863      	ldrb	r3, [r4, #1]
3402064c:	2b2a      	cmp	r3, #42	@ 0x2a
3402064e:	d132      	bne.n	340206b6 <_svfiprintf_r+0x186>
34020650:	9b03      	ldr	r3, [sp, #12]
34020652:	3402      	adds	r4, #2
34020654:	1d1a      	adds	r2, r3, #4
34020656:	681b      	ldr	r3, [r3, #0]
34020658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3402065c:	9203      	str	r2, [sp, #12]
3402065e:	9305      	str	r3, [sp, #20]
34020660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 34020724 <_svfiprintf_r+0x1f4>
34020664:	2203      	movs	r2, #3
34020666:	7821      	ldrb	r1, [r4, #0]
34020668:	4650      	mov	r0, sl
3402066a:	f7fe fc82 	bl	3401ef72 <memchr>
3402066e:	b138      	cbz	r0, 34020680 <_svfiprintf_r+0x150>
34020670:	eba0 000a 	sub.w	r0, r0, sl
34020674:	2240      	movs	r2, #64	@ 0x40
34020676:	9b04      	ldr	r3, [sp, #16]
34020678:	3401      	adds	r4, #1
3402067a:	4082      	lsls	r2, r0
3402067c:	4313      	orrs	r3, r2
3402067e:	9304      	str	r3, [sp, #16]
34020680:	f814 1b01 	ldrb.w	r1, [r4], #1
34020684:	2206      	movs	r2, #6
34020686:	4824      	ldr	r0, [pc, #144]	@ (34020718 <_svfiprintf_r+0x1e8>)
34020688:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3402068c:	f7fe fc71 	bl	3401ef72 <memchr>
34020690:	2800      	cmp	r0, #0
34020692:	d036      	beq.n	34020702 <_svfiprintf_r+0x1d2>
34020694:	4b21      	ldr	r3, [pc, #132]	@ (3402071c <_svfiprintf_r+0x1ec>)
34020696:	bb1b      	cbnz	r3, 340206e0 <_svfiprintf_r+0x1b0>
34020698:	9b03      	ldr	r3, [sp, #12]
3402069a:	3307      	adds	r3, #7
3402069c:	f023 0307 	bic.w	r3, r3, #7
340206a0:	3308      	adds	r3, #8
340206a2:	9303      	str	r3, [sp, #12]
340206a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340206a6:	4433      	add	r3, r6
340206a8:	9309      	str	r3, [sp, #36]	@ 0x24
340206aa:	e76a      	b.n	34020582 <_svfiprintf_r+0x52>
340206ac:	fb0c 3202 	mla	r2, ip, r2, r3
340206b0:	460c      	mov	r4, r1
340206b2:	2001      	movs	r0, #1
340206b4:	e7a8      	b.n	34020608 <_svfiprintf_r+0xd8>
340206b6:	2300      	movs	r3, #0
340206b8:	3401      	adds	r4, #1
340206ba:	f04f 0c0a 	mov.w	ip, #10
340206be:	4619      	mov	r1, r3
340206c0:	9305      	str	r3, [sp, #20]
340206c2:	4620      	mov	r0, r4
340206c4:	f810 2b01 	ldrb.w	r2, [r0], #1
340206c8:	3a30      	subs	r2, #48	@ 0x30
340206ca:	2a09      	cmp	r2, #9
340206cc:	d903      	bls.n	340206d6 <_svfiprintf_r+0x1a6>
340206ce:	2b00      	cmp	r3, #0
340206d0:	d0c6      	beq.n	34020660 <_svfiprintf_r+0x130>
340206d2:	9105      	str	r1, [sp, #20]
340206d4:	e7c4      	b.n	34020660 <_svfiprintf_r+0x130>
340206d6:	fb0c 2101 	mla	r1, ip, r1, r2
340206da:	4604      	mov	r4, r0
340206dc:	2301      	movs	r3, #1
340206de:	e7f0      	b.n	340206c2 <_svfiprintf_r+0x192>
340206e0:	ab03      	add	r3, sp, #12
340206e2:	462a      	mov	r2, r5
340206e4:	a904      	add	r1, sp, #16
340206e6:	4638      	mov	r0, r7
340206e8:	9300      	str	r3, [sp, #0]
340206ea:	4b0d      	ldr	r3, [pc, #52]	@ (34020720 <_svfiprintf_r+0x1f0>)
340206ec:	f7fd fbac 	bl	3401de48 <_printf_float>
340206f0:	1c42      	adds	r2, r0, #1
340206f2:	4606      	mov	r6, r0
340206f4:	d1d6      	bne.n	340206a4 <_svfiprintf_r+0x174>
340206f6:	89ab      	ldrh	r3, [r5, #12]
340206f8:	065b      	lsls	r3, r3, #25
340206fa:	f53f af2d 	bmi.w	34020558 <_svfiprintf_r+0x28>
340206fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
34020700:	e72c      	b.n	3402055c <_svfiprintf_r+0x2c>
34020702:	ab03      	add	r3, sp, #12
34020704:	462a      	mov	r2, r5
34020706:	a904      	add	r1, sp, #16
34020708:	4638      	mov	r0, r7
3402070a:	9300      	str	r3, [sp, #0]
3402070c:	4b04      	ldr	r3, [pc, #16]	@ (34020720 <_svfiprintf_r+0x1f0>)
3402070e:	f7fd fe27 	bl	3401e360 <_printf_i>
34020712:	e7ed      	b.n	340206f0 <_svfiprintf_r+0x1c0>
34020714:	340277bb 	.word	0x340277bb
34020718:	340277c5 	.word	0x340277c5
3402071c:	3401de49 	.word	0x3401de49
34020720:	34020479 	.word	0x34020479
34020724:	340277c1 	.word	0x340277c1

34020728 <__sfputc_r>:
34020728:	6893      	ldr	r3, [r2, #8]
3402072a:	3b01      	subs	r3, #1
3402072c:	2b00      	cmp	r3, #0
3402072e:	b410      	push	{r4}
34020730:	6093      	str	r3, [r2, #8]
34020732:	da08      	bge.n	34020746 <__sfputc_r+0x1e>
34020734:	6994      	ldr	r4, [r2, #24]
34020736:	42a3      	cmp	r3, r4
34020738:	db01      	blt.n	3402073e <__sfputc_r+0x16>
3402073a:	290a      	cmp	r1, #10
3402073c:	d103      	bne.n	34020746 <__sfputc_r+0x1e>
3402073e:	f85d 4b04 	ldr.w	r4, [sp], #4
34020742:	f7fe b8ef 	b.w	3401e924 <__swbuf_r>
34020746:	6813      	ldr	r3, [r2, #0]
34020748:	1c58      	adds	r0, r3, #1
3402074a:	6010      	str	r0, [r2, #0]
3402074c:	4608      	mov	r0, r1
3402074e:	7019      	strb	r1, [r3, #0]
34020750:	f85d 4b04 	ldr.w	r4, [sp], #4
34020754:	4770      	bx	lr

34020756 <__sfputs_r>:
34020756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34020758:	4606      	mov	r6, r0
3402075a:	460f      	mov	r7, r1
3402075c:	4614      	mov	r4, r2
3402075e:	18d5      	adds	r5, r2, r3
34020760:	42ac      	cmp	r4, r5
34020762:	d101      	bne.n	34020768 <__sfputs_r+0x12>
34020764:	2000      	movs	r0, #0
34020766:	e007      	b.n	34020778 <__sfputs_r+0x22>
34020768:	463a      	mov	r2, r7
3402076a:	f814 1b01 	ldrb.w	r1, [r4], #1
3402076e:	4630      	mov	r0, r6
34020770:	f7ff ffda 	bl	34020728 <__sfputc_r>
34020774:	1c43      	adds	r3, r0, #1
34020776:	d1f3      	bne.n	34020760 <__sfputs_r+0xa>
34020778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3402077c <_vfiprintf_r>:
3402077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34020780:	460d      	mov	r5, r1
34020782:	b09d      	sub	sp, #116	@ 0x74
34020784:	4614      	mov	r4, r2
34020786:	4698      	mov	r8, r3
34020788:	4606      	mov	r6, r0
3402078a:	b118      	cbz	r0, 34020794 <_vfiprintf_r+0x18>
3402078c:	6a03      	ldr	r3, [r0, #32]
3402078e:	b90b      	cbnz	r3, 34020794 <_vfiprintf_r+0x18>
34020790:	f7fd ff90 	bl	3401e6b4 <__sinit>
34020794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34020796:	07d9      	lsls	r1, r3, #31
34020798:	d405      	bmi.n	340207a6 <_vfiprintf_r+0x2a>
3402079a:	89ab      	ldrh	r3, [r5, #12]
3402079c:	059a      	lsls	r2, r3, #22
3402079e:	d402      	bmi.n	340207a6 <_vfiprintf_r+0x2a>
340207a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
340207a2:	f7fe fbdc 	bl	3401ef5e <__retarget_lock_acquire_recursive>
340207a6:	89ab      	ldrh	r3, [r5, #12]
340207a8:	071b      	lsls	r3, r3, #28
340207aa:	d501      	bpl.n	340207b0 <_vfiprintf_r+0x34>
340207ac:	692b      	ldr	r3, [r5, #16]
340207ae:	b99b      	cbnz	r3, 340207d8 <_vfiprintf_r+0x5c>
340207b0:	4629      	mov	r1, r5
340207b2:	4630      	mov	r0, r6
340207b4:	f7fe f8f4 	bl	3401e9a0 <__swsetup_r>
340207b8:	b170      	cbz	r0, 340207d8 <_vfiprintf_r+0x5c>
340207ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
340207bc:	07dc      	lsls	r4, r3, #31
340207be:	d504      	bpl.n	340207ca <_vfiprintf_r+0x4e>
340207c0:	f04f 30ff 	mov.w	r0, #4294967295
340207c4:	b01d      	add	sp, #116	@ 0x74
340207c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340207ca:	89ab      	ldrh	r3, [r5, #12]
340207cc:	0598      	lsls	r0, r3, #22
340207ce:	d4f7      	bmi.n	340207c0 <_vfiprintf_r+0x44>
340207d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
340207d2:	f7fe fbc5 	bl	3401ef60 <__retarget_lock_release_recursive>
340207d6:	e7f3      	b.n	340207c0 <_vfiprintf_r+0x44>
340207d8:	2300      	movs	r3, #0
340207da:	f8cd 800c 	str.w	r8, [sp, #12]
340207de:	f04f 0901 	mov.w	r9, #1
340207e2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 34020998 <_vfiprintf_r+0x21c>
340207e6:	9309      	str	r3, [sp, #36]	@ 0x24
340207e8:	2320      	movs	r3, #32
340207ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
340207ee:	2330      	movs	r3, #48	@ 0x30
340207f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
340207f4:	4623      	mov	r3, r4
340207f6:	469a      	mov	sl, r3
340207f8:	f813 2b01 	ldrb.w	r2, [r3], #1
340207fc:	b10a      	cbz	r2, 34020802 <_vfiprintf_r+0x86>
340207fe:	2a25      	cmp	r2, #37	@ 0x25
34020800:	d1f9      	bne.n	340207f6 <_vfiprintf_r+0x7a>
34020802:	ebba 0b04 	subs.w	fp, sl, r4
34020806:	d00b      	beq.n	34020820 <_vfiprintf_r+0xa4>
34020808:	465b      	mov	r3, fp
3402080a:	4622      	mov	r2, r4
3402080c:	4629      	mov	r1, r5
3402080e:	4630      	mov	r0, r6
34020810:	f7ff ffa1 	bl	34020756 <__sfputs_r>
34020814:	3001      	adds	r0, #1
34020816:	f000 80a7 	beq.w	34020968 <_vfiprintf_r+0x1ec>
3402081a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3402081c:	445a      	add	r2, fp
3402081e:	9209      	str	r2, [sp, #36]	@ 0x24
34020820:	f89a 3000 	ldrb.w	r3, [sl]
34020824:	2b00      	cmp	r3, #0
34020826:	f000 809f 	beq.w	34020968 <_vfiprintf_r+0x1ec>
3402082a:	2300      	movs	r3, #0
3402082c:	f04f 32ff 	mov.w	r2, #4294967295
34020830:	f10a 0a01 	add.w	sl, sl, #1
34020834:	9304      	str	r3, [sp, #16]
34020836:	9307      	str	r3, [sp, #28]
34020838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3402083c:	931a      	str	r3, [sp, #104]	@ 0x68
3402083e:	e9cd 2305 	strd	r2, r3, [sp, #20]
34020842:	4654      	mov	r4, sl
34020844:	2205      	movs	r2, #5
34020846:	4854      	ldr	r0, [pc, #336]	@ (34020998 <_vfiprintf_r+0x21c>)
34020848:	f814 1b01 	ldrb.w	r1, [r4], #1
3402084c:	f7fe fb91 	bl	3401ef72 <memchr>
34020850:	9a04      	ldr	r2, [sp, #16]
34020852:	b9d8      	cbnz	r0, 3402088c <_vfiprintf_r+0x110>
34020854:	06d1      	lsls	r1, r2, #27
34020856:	bf44      	itt	mi
34020858:	2320      	movmi	r3, #32
3402085a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3402085e:	0713      	lsls	r3, r2, #28
34020860:	bf44      	itt	mi
34020862:	232b      	movmi	r3, #43	@ 0x2b
34020864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34020868:	f89a 3000 	ldrb.w	r3, [sl]
3402086c:	2b2a      	cmp	r3, #42	@ 0x2a
3402086e:	d015      	beq.n	3402089c <_vfiprintf_r+0x120>
34020870:	9a07      	ldr	r2, [sp, #28]
34020872:	4654      	mov	r4, sl
34020874:	2000      	movs	r0, #0
34020876:	f04f 0c0a 	mov.w	ip, #10
3402087a:	4621      	mov	r1, r4
3402087c:	f811 3b01 	ldrb.w	r3, [r1], #1
34020880:	3b30      	subs	r3, #48	@ 0x30
34020882:	2b09      	cmp	r3, #9
34020884:	d94b      	bls.n	3402091e <_vfiprintf_r+0x1a2>
34020886:	b1b0      	cbz	r0, 340208b6 <_vfiprintf_r+0x13a>
34020888:	9207      	str	r2, [sp, #28]
3402088a:	e014      	b.n	340208b6 <_vfiprintf_r+0x13a>
3402088c:	eba0 0308 	sub.w	r3, r0, r8
34020890:	46a2      	mov	sl, r4
34020892:	fa09 f303 	lsl.w	r3, r9, r3
34020896:	4313      	orrs	r3, r2
34020898:	9304      	str	r3, [sp, #16]
3402089a:	e7d2      	b.n	34020842 <_vfiprintf_r+0xc6>
3402089c:	9b03      	ldr	r3, [sp, #12]
3402089e:	1d19      	adds	r1, r3, #4
340208a0:	681b      	ldr	r3, [r3, #0]
340208a2:	2b00      	cmp	r3, #0
340208a4:	9103      	str	r1, [sp, #12]
340208a6:	bfbb      	ittet	lt
340208a8:	425b      	neglt	r3, r3
340208aa:	f042 0202 	orrlt.w	r2, r2, #2
340208ae:	9307      	strge	r3, [sp, #28]
340208b0:	9307      	strlt	r3, [sp, #28]
340208b2:	bfb8      	it	lt
340208b4:	9204      	strlt	r2, [sp, #16]
340208b6:	7823      	ldrb	r3, [r4, #0]
340208b8:	2b2e      	cmp	r3, #46	@ 0x2e
340208ba:	d10a      	bne.n	340208d2 <_vfiprintf_r+0x156>
340208bc:	7863      	ldrb	r3, [r4, #1]
340208be:	2b2a      	cmp	r3, #42	@ 0x2a
340208c0:	d132      	bne.n	34020928 <_vfiprintf_r+0x1ac>
340208c2:	9b03      	ldr	r3, [sp, #12]
340208c4:	3402      	adds	r4, #2
340208c6:	1d1a      	adds	r2, r3, #4
340208c8:	681b      	ldr	r3, [r3, #0]
340208ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
340208ce:	9203      	str	r2, [sp, #12]
340208d0:	9305      	str	r3, [sp, #20]
340208d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 340209a8 <_vfiprintf_r+0x22c>
340208d6:	2203      	movs	r2, #3
340208d8:	7821      	ldrb	r1, [r4, #0]
340208da:	4650      	mov	r0, sl
340208dc:	f7fe fb49 	bl	3401ef72 <memchr>
340208e0:	b138      	cbz	r0, 340208f2 <_vfiprintf_r+0x176>
340208e2:	eba0 000a 	sub.w	r0, r0, sl
340208e6:	2240      	movs	r2, #64	@ 0x40
340208e8:	9b04      	ldr	r3, [sp, #16]
340208ea:	3401      	adds	r4, #1
340208ec:	4082      	lsls	r2, r0
340208ee:	4313      	orrs	r3, r2
340208f0:	9304      	str	r3, [sp, #16]
340208f2:	f814 1b01 	ldrb.w	r1, [r4], #1
340208f6:	2206      	movs	r2, #6
340208f8:	4828      	ldr	r0, [pc, #160]	@ (3402099c <_vfiprintf_r+0x220>)
340208fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
340208fe:	f7fe fb38 	bl	3401ef72 <memchr>
34020902:	2800      	cmp	r0, #0
34020904:	d03f      	beq.n	34020986 <_vfiprintf_r+0x20a>
34020906:	4b26      	ldr	r3, [pc, #152]	@ (340209a0 <_vfiprintf_r+0x224>)
34020908:	bb1b      	cbnz	r3, 34020952 <_vfiprintf_r+0x1d6>
3402090a:	9b03      	ldr	r3, [sp, #12]
3402090c:	3307      	adds	r3, #7
3402090e:	f023 0307 	bic.w	r3, r3, #7
34020912:	3308      	adds	r3, #8
34020914:	9303      	str	r3, [sp, #12]
34020916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020918:	443b      	add	r3, r7
3402091a:	9309      	str	r3, [sp, #36]	@ 0x24
3402091c:	e76a      	b.n	340207f4 <_vfiprintf_r+0x78>
3402091e:	fb0c 3202 	mla	r2, ip, r2, r3
34020922:	460c      	mov	r4, r1
34020924:	2001      	movs	r0, #1
34020926:	e7a8      	b.n	3402087a <_vfiprintf_r+0xfe>
34020928:	2300      	movs	r3, #0
3402092a:	3401      	adds	r4, #1
3402092c:	f04f 0c0a 	mov.w	ip, #10
34020930:	4619      	mov	r1, r3
34020932:	9305      	str	r3, [sp, #20]
34020934:	4620      	mov	r0, r4
34020936:	f810 2b01 	ldrb.w	r2, [r0], #1
3402093a:	3a30      	subs	r2, #48	@ 0x30
3402093c:	2a09      	cmp	r2, #9
3402093e:	d903      	bls.n	34020948 <_vfiprintf_r+0x1cc>
34020940:	2b00      	cmp	r3, #0
34020942:	d0c6      	beq.n	340208d2 <_vfiprintf_r+0x156>
34020944:	9105      	str	r1, [sp, #20]
34020946:	e7c4      	b.n	340208d2 <_vfiprintf_r+0x156>
34020948:	fb0c 2101 	mla	r1, ip, r1, r2
3402094c:	4604      	mov	r4, r0
3402094e:	2301      	movs	r3, #1
34020950:	e7f0      	b.n	34020934 <_vfiprintf_r+0x1b8>
34020952:	ab03      	add	r3, sp, #12
34020954:	462a      	mov	r2, r5
34020956:	a904      	add	r1, sp, #16
34020958:	4630      	mov	r0, r6
3402095a:	9300      	str	r3, [sp, #0]
3402095c:	4b11      	ldr	r3, [pc, #68]	@ (340209a4 <_vfiprintf_r+0x228>)
3402095e:	f7fd fa73 	bl	3401de48 <_printf_float>
34020962:	4607      	mov	r7, r0
34020964:	1c78      	adds	r0, r7, #1
34020966:	d1d6      	bne.n	34020916 <_vfiprintf_r+0x19a>
34020968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3402096a:	07d9      	lsls	r1, r3, #31
3402096c:	d405      	bmi.n	3402097a <_vfiprintf_r+0x1fe>
3402096e:	89ab      	ldrh	r3, [r5, #12]
34020970:	059a      	lsls	r2, r3, #22
34020972:	d402      	bmi.n	3402097a <_vfiprintf_r+0x1fe>
34020974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34020976:	f7fe faf3 	bl	3401ef60 <__retarget_lock_release_recursive>
3402097a:	89ab      	ldrh	r3, [r5, #12]
3402097c:	065b      	lsls	r3, r3, #25
3402097e:	f53f af1f 	bmi.w	340207c0 <_vfiprintf_r+0x44>
34020982:	9809      	ldr	r0, [sp, #36]	@ 0x24
34020984:	e71e      	b.n	340207c4 <_vfiprintf_r+0x48>
34020986:	ab03      	add	r3, sp, #12
34020988:	462a      	mov	r2, r5
3402098a:	a904      	add	r1, sp, #16
3402098c:	4630      	mov	r0, r6
3402098e:	9300      	str	r3, [sp, #0]
34020990:	4b04      	ldr	r3, [pc, #16]	@ (340209a4 <_vfiprintf_r+0x228>)
34020992:	f7fd fce5 	bl	3401e360 <_printf_i>
34020996:	e7e4      	b.n	34020962 <_vfiprintf_r+0x1e6>
34020998:	340277bb 	.word	0x340277bb
3402099c:	340277c5 	.word	0x340277c5
340209a0:	3401de49 	.word	0x3401de49
340209a4:	34020757 	.word	0x34020757
340209a8:	340277c1 	.word	0x340277c1

340209ac <__sflush_r>:
340209ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
340209b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340209b4:	0716      	lsls	r6, r2, #28
340209b6:	4605      	mov	r5, r0
340209b8:	460c      	mov	r4, r1
340209ba:	d454      	bmi.n	34020a66 <__sflush_r+0xba>
340209bc:	684b      	ldr	r3, [r1, #4]
340209be:	2b00      	cmp	r3, #0
340209c0:	dc02      	bgt.n	340209c8 <__sflush_r+0x1c>
340209c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
340209c4:	2b00      	cmp	r3, #0
340209c6:	dd48      	ble.n	34020a5a <__sflush_r+0xae>
340209c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
340209ca:	2e00      	cmp	r6, #0
340209cc:	d045      	beq.n	34020a5a <__sflush_r+0xae>
340209ce:	2300      	movs	r3, #0
340209d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
340209d4:	682f      	ldr	r7, [r5, #0]
340209d6:	6a21      	ldr	r1, [r4, #32]
340209d8:	602b      	str	r3, [r5, #0]
340209da:	d030      	beq.n	34020a3e <__sflush_r+0x92>
340209dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
340209de:	89a3      	ldrh	r3, [r4, #12]
340209e0:	0759      	lsls	r1, r3, #29
340209e2:	d505      	bpl.n	340209f0 <__sflush_r+0x44>
340209e4:	6863      	ldr	r3, [r4, #4]
340209e6:	1ad2      	subs	r2, r2, r3
340209e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340209ea:	b10b      	cbz	r3, 340209f0 <__sflush_r+0x44>
340209ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340209ee:	1ad2      	subs	r2, r2, r3
340209f0:	2300      	movs	r3, #0
340209f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
340209f4:	6a21      	ldr	r1, [r4, #32]
340209f6:	4628      	mov	r0, r5
340209f8:	47b0      	blx	r6
340209fa:	1c43      	adds	r3, r0, #1
340209fc:	89a3      	ldrh	r3, [r4, #12]
340209fe:	d106      	bne.n	34020a0e <__sflush_r+0x62>
34020a00:	6829      	ldr	r1, [r5, #0]
34020a02:	291d      	cmp	r1, #29
34020a04:	d82b      	bhi.n	34020a5e <__sflush_r+0xb2>
34020a06:	4a2a      	ldr	r2, [pc, #168]	@ (34020ab0 <__sflush_r+0x104>)
34020a08:	40ca      	lsrs	r2, r1
34020a0a:	07d6      	lsls	r6, r2, #31
34020a0c:	d527      	bpl.n	34020a5e <__sflush_r+0xb2>
34020a0e:	2200      	movs	r2, #0
34020a10:	04d9      	lsls	r1, r3, #19
34020a12:	6062      	str	r2, [r4, #4]
34020a14:	6922      	ldr	r2, [r4, #16]
34020a16:	6022      	str	r2, [r4, #0]
34020a18:	d504      	bpl.n	34020a24 <__sflush_r+0x78>
34020a1a:	1c42      	adds	r2, r0, #1
34020a1c:	d101      	bne.n	34020a22 <__sflush_r+0x76>
34020a1e:	682b      	ldr	r3, [r5, #0]
34020a20:	b903      	cbnz	r3, 34020a24 <__sflush_r+0x78>
34020a22:	6560      	str	r0, [r4, #84]	@ 0x54
34020a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34020a26:	602f      	str	r7, [r5, #0]
34020a28:	b1b9      	cbz	r1, 34020a5a <__sflush_r+0xae>
34020a2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34020a2e:	4299      	cmp	r1, r3
34020a30:	d002      	beq.n	34020a38 <__sflush_r+0x8c>
34020a32:	4628      	mov	r0, r5
34020a34:	f7ff f8aa 	bl	3401fb8c <_free_r>
34020a38:	2300      	movs	r3, #0
34020a3a:	6363      	str	r3, [r4, #52]	@ 0x34
34020a3c:	e00d      	b.n	34020a5a <__sflush_r+0xae>
34020a3e:	2301      	movs	r3, #1
34020a40:	4628      	mov	r0, r5
34020a42:	47b0      	blx	r6
34020a44:	4602      	mov	r2, r0
34020a46:	1c50      	adds	r0, r2, #1
34020a48:	d1c9      	bne.n	340209de <__sflush_r+0x32>
34020a4a:	682b      	ldr	r3, [r5, #0]
34020a4c:	2b00      	cmp	r3, #0
34020a4e:	d0c6      	beq.n	340209de <__sflush_r+0x32>
34020a50:	2b1d      	cmp	r3, #29
34020a52:	d001      	beq.n	34020a58 <__sflush_r+0xac>
34020a54:	2b16      	cmp	r3, #22
34020a56:	d11d      	bne.n	34020a94 <__sflush_r+0xe8>
34020a58:	602f      	str	r7, [r5, #0]
34020a5a:	2000      	movs	r0, #0
34020a5c:	e021      	b.n	34020aa2 <__sflush_r+0xf6>
34020a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34020a62:	b21b      	sxth	r3, r3
34020a64:	e01a      	b.n	34020a9c <__sflush_r+0xf0>
34020a66:	690f      	ldr	r7, [r1, #16]
34020a68:	2f00      	cmp	r7, #0
34020a6a:	d0f6      	beq.n	34020a5a <__sflush_r+0xae>
34020a6c:	0793      	lsls	r3, r2, #30
34020a6e:	680e      	ldr	r6, [r1, #0]
34020a70:	600f      	str	r7, [r1, #0]
34020a72:	bf0c      	ite	eq
34020a74:	694b      	ldreq	r3, [r1, #20]
34020a76:	2300      	movne	r3, #0
34020a78:	eba6 0807 	sub.w	r8, r6, r7
34020a7c:	608b      	str	r3, [r1, #8]
34020a7e:	f1b8 0f00 	cmp.w	r8, #0
34020a82:	ddea      	ble.n	34020a5a <__sflush_r+0xae>
34020a84:	4643      	mov	r3, r8
34020a86:	463a      	mov	r2, r7
34020a88:	6a21      	ldr	r1, [r4, #32]
34020a8a:	4628      	mov	r0, r5
34020a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
34020a8e:	47b0      	blx	r6
34020a90:	2800      	cmp	r0, #0
34020a92:	dc08      	bgt.n	34020aa6 <__sflush_r+0xfa>
34020a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34020a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34020a9c:	f04f 30ff 	mov.w	r0, #4294967295
34020aa0:	81a3      	strh	r3, [r4, #12]
34020aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34020aa6:	4407      	add	r7, r0
34020aa8:	eba8 0800 	sub.w	r8, r8, r0
34020aac:	e7e7      	b.n	34020a7e <__sflush_r+0xd2>
34020aae:	bf00      	nop
34020ab0:	20400001 	.word	0x20400001

34020ab4 <_fflush_r>:
34020ab4:	b538      	push	{r3, r4, r5, lr}
34020ab6:	690b      	ldr	r3, [r1, #16]
34020ab8:	4605      	mov	r5, r0
34020aba:	460c      	mov	r4, r1
34020abc:	b913      	cbnz	r3, 34020ac4 <_fflush_r+0x10>
34020abe:	2500      	movs	r5, #0
34020ac0:	4628      	mov	r0, r5
34020ac2:	bd38      	pop	{r3, r4, r5, pc}
34020ac4:	b118      	cbz	r0, 34020ace <_fflush_r+0x1a>
34020ac6:	6a03      	ldr	r3, [r0, #32]
34020ac8:	b90b      	cbnz	r3, 34020ace <_fflush_r+0x1a>
34020aca:	f7fd fdf3 	bl	3401e6b4 <__sinit>
34020ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34020ad2:	2b00      	cmp	r3, #0
34020ad4:	d0f3      	beq.n	34020abe <_fflush_r+0xa>
34020ad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
34020ad8:	07d0      	lsls	r0, r2, #31
34020ada:	d404      	bmi.n	34020ae6 <_fflush_r+0x32>
34020adc:	0599      	lsls	r1, r3, #22
34020ade:	d402      	bmi.n	34020ae6 <_fflush_r+0x32>
34020ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34020ae2:	f7fe fa3c 	bl	3401ef5e <__retarget_lock_acquire_recursive>
34020ae6:	4628      	mov	r0, r5
34020ae8:	4621      	mov	r1, r4
34020aea:	f7ff ff5f 	bl	340209ac <__sflush_r>
34020aee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34020af0:	4605      	mov	r5, r0
34020af2:	07da      	lsls	r2, r3, #31
34020af4:	d4e4      	bmi.n	34020ac0 <_fflush_r+0xc>
34020af6:	89a3      	ldrh	r3, [r4, #12]
34020af8:	059b      	lsls	r3, r3, #22
34020afa:	d4e1      	bmi.n	34020ac0 <_fflush_r+0xc>
34020afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34020afe:	f7fe fa2f 	bl	3401ef60 <__retarget_lock_release_recursive>
34020b02:	e7dd      	b.n	34020ac0 <_fflush_r+0xc>

34020b04 <__swhatbuf_r>:
34020b04:	b570      	push	{r4, r5, r6, lr}
34020b06:	460c      	mov	r4, r1
34020b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34020b0c:	b096      	sub	sp, #88	@ 0x58
34020b0e:	4615      	mov	r5, r2
34020b10:	2900      	cmp	r1, #0
34020b12:	461e      	mov	r6, r3
34020b14:	da0c      	bge.n	34020b30 <__swhatbuf_r+0x2c>
34020b16:	89a3      	ldrh	r3, [r4, #12]
34020b18:	2100      	movs	r1, #0
34020b1a:	f013 0f80 	tst.w	r3, #128	@ 0x80
34020b1e:	bf14      	ite	ne
34020b20:	2340      	movne	r3, #64	@ 0x40
34020b22:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34020b26:	2000      	movs	r0, #0
34020b28:	6031      	str	r1, [r6, #0]
34020b2a:	602b      	str	r3, [r5, #0]
34020b2c:	b016      	add	sp, #88	@ 0x58
34020b2e:	bd70      	pop	{r4, r5, r6, pc}
34020b30:	466a      	mov	r2, sp
34020b32:	f000 f879 	bl	34020c28 <_fstat_r>
34020b36:	2800      	cmp	r0, #0
34020b38:	dbed      	blt.n	34020b16 <__swhatbuf_r+0x12>
34020b3a:	9901      	ldr	r1, [sp, #4]
34020b3c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
34020b40:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34020b44:	4259      	negs	r1, r3
34020b46:	4159      	adcs	r1, r3
34020b48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34020b4c:	e7eb      	b.n	34020b26 <__swhatbuf_r+0x22>

34020b4e <__smakebuf_r>:
34020b4e:	898b      	ldrh	r3, [r1, #12]
34020b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34020b52:	079d      	lsls	r5, r3, #30
34020b54:	4606      	mov	r6, r0
34020b56:	460c      	mov	r4, r1
34020b58:	d507      	bpl.n	34020b6a <__smakebuf_r+0x1c>
34020b5a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
34020b5e:	6023      	str	r3, [r4, #0]
34020b60:	6123      	str	r3, [r4, #16]
34020b62:	2301      	movs	r3, #1
34020b64:	6163      	str	r3, [r4, #20]
34020b66:	b003      	add	sp, #12
34020b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
34020b6a:	ab01      	add	r3, sp, #4
34020b6c:	466a      	mov	r2, sp
34020b6e:	f7ff ffc9 	bl	34020b04 <__swhatbuf_r>
34020b72:	9f00      	ldr	r7, [sp, #0]
34020b74:	4605      	mov	r5, r0
34020b76:	4630      	mov	r0, r6
34020b78:	4639      	mov	r1, r7
34020b7a:	f7ff f87b 	bl	3401fc74 <_malloc_r>
34020b7e:	b948      	cbnz	r0, 34020b94 <__smakebuf_r+0x46>
34020b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34020b84:	059a      	lsls	r2, r3, #22
34020b86:	d4ee      	bmi.n	34020b66 <__smakebuf_r+0x18>
34020b88:	f023 0303 	bic.w	r3, r3, #3
34020b8c:	f043 0302 	orr.w	r3, r3, #2
34020b90:	81a3      	strh	r3, [r4, #12]
34020b92:	e7e2      	b.n	34020b5a <__smakebuf_r+0xc>
34020b94:	89a3      	ldrh	r3, [r4, #12]
34020b96:	6020      	str	r0, [r4, #0]
34020b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34020b9c:	81a3      	strh	r3, [r4, #12]
34020b9e:	9b01      	ldr	r3, [sp, #4]
34020ba0:	e9c4 0704 	strd	r0, r7, [r4, #16]
34020ba4:	b15b      	cbz	r3, 34020bbe <__smakebuf_r+0x70>
34020ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34020baa:	4630      	mov	r0, r6
34020bac:	f000 f84e 	bl	34020c4c <_isatty_r>
34020bb0:	b128      	cbz	r0, 34020bbe <__smakebuf_r+0x70>
34020bb2:	89a3      	ldrh	r3, [r4, #12]
34020bb4:	f023 0303 	bic.w	r3, r3, #3
34020bb8:	f043 0301 	orr.w	r3, r3, #1
34020bbc:	81a3      	strh	r3, [r4, #12]
34020bbe:	89a3      	ldrh	r3, [r4, #12]
34020bc0:	431d      	orrs	r5, r3
34020bc2:	81a5      	strh	r5, [r4, #12]
34020bc4:	e7cf      	b.n	34020b66 <__smakebuf_r+0x18>

34020bc6 <_raise_r>:
34020bc6:	291f      	cmp	r1, #31
34020bc8:	b538      	push	{r3, r4, r5, lr}
34020bca:	4605      	mov	r5, r0
34020bcc:	460c      	mov	r4, r1
34020bce:	d904      	bls.n	34020bda <_raise_r+0x14>
34020bd0:	2316      	movs	r3, #22
34020bd2:	6003      	str	r3, [r0, #0]
34020bd4:	f04f 30ff 	mov.w	r0, #4294967295
34020bd8:	bd38      	pop	{r3, r4, r5, pc}
34020bda:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
34020bdc:	b112      	cbz	r2, 34020be4 <_raise_r+0x1e>
34020bde:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
34020be2:	b94b      	cbnz	r3, 34020bf8 <_raise_r+0x32>
34020be4:	4628      	mov	r0, r5
34020be6:	f000 f853 	bl	34020c90 <_getpid_r>
34020bea:	4622      	mov	r2, r4
34020bec:	4601      	mov	r1, r0
34020bee:	4628      	mov	r0, r5
34020bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
34020bf4:	f000 b83a 	b.w	34020c6c <_kill_r>
34020bf8:	2b01      	cmp	r3, #1
34020bfa:	d00a      	beq.n	34020c12 <_raise_r+0x4c>
34020bfc:	1c59      	adds	r1, r3, #1
34020bfe:	d103      	bne.n	34020c08 <_raise_r+0x42>
34020c00:	2316      	movs	r3, #22
34020c02:	6003      	str	r3, [r0, #0]
34020c04:	2001      	movs	r0, #1
34020c06:	e7e7      	b.n	34020bd8 <_raise_r+0x12>
34020c08:	2100      	movs	r1, #0
34020c0a:	4620      	mov	r0, r4
34020c0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
34020c10:	4798      	blx	r3
34020c12:	2000      	movs	r0, #0
34020c14:	e7e0      	b.n	34020bd8 <_raise_r+0x12>
	...

34020c18 <raise>:
34020c18:	4b02      	ldr	r3, [pc, #8]	@ (34020c24 <raise+0xc>)
34020c1a:	4601      	mov	r1, r0
34020c1c:	6818      	ldr	r0, [r3, #0]
34020c1e:	f7ff bfd2 	b.w	34020bc6 <_raise_r>
34020c22:	bf00      	nop
34020c24:	340a3258 	.word	0x340a3258

34020c28 <_fstat_r>:
34020c28:	b538      	push	{r3, r4, r5, lr}
34020c2a:	2300      	movs	r3, #0
34020c2c:	4d06      	ldr	r5, [pc, #24]	@ (34020c48 <_fstat_r+0x20>)
34020c2e:	4604      	mov	r4, r0
34020c30:	4608      	mov	r0, r1
34020c32:	4611      	mov	r1, r2
34020c34:	602b      	str	r3, [r5, #0]
34020c36:	f7e1 f9ec 	bl	34002012 <_fstat>
34020c3a:	1c43      	adds	r3, r0, #1
34020c3c:	d102      	bne.n	34020c44 <_fstat_r+0x1c>
34020c3e:	682b      	ldr	r3, [r5, #0]
34020c40:	b103      	cbz	r3, 34020c44 <_fstat_r+0x1c>
34020c42:	6023      	str	r3, [r4, #0]
34020c44:	bd38      	pop	{r3, r4, r5, pc}
34020c46:	bf00      	nop
34020c48:	3419050c 	.word	0x3419050c

34020c4c <_isatty_r>:
34020c4c:	b538      	push	{r3, r4, r5, lr}
34020c4e:	2300      	movs	r3, #0
34020c50:	4d05      	ldr	r5, [pc, #20]	@ (34020c68 <_isatty_r+0x1c>)
34020c52:	4604      	mov	r4, r0
34020c54:	4608      	mov	r0, r1
34020c56:	602b      	str	r3, [r5, #0]
34020c58:	f7e1 f9e0 	bl	3400201c <_isatty>
34020c5c:	1c43      	adds	r3, r0, #1
34020c5e:	d102      	bne.n	34020c66 <_isatty_r+0x1a>
34020c60:	682b      	ldr	r3, [r5, #0]
34020c62:	b103      	cbz	r3, 34020c66 <_isatty_r+0x1a>
34020c64:	6023      	str	r3, [r4, #0]
34020c66:	bd38      	pop	{r3, r4, r5, pc}
34020c68:	3419050c 	.word	0x3419050c

34020c6c <_kill_r>:
34020c6c:	b538      	push	{r3, r4, r5, lr}
34020c6e:	2300      	movs	r3, #0
34020c70:	4d06      	ldr	r5, [pc, #24]	@ (34020c8c <_kill_r+0x20>)
34020c72:	4604      	mov	r4, r0
34020c74:	4608      	mov	r0, r1
34020c76:	4611      	mov	r1, r2
34020c78:	602b      	str	r3, [r5, #0]
34020c7a:	f7e1 f9ab 	bl	34001fd4 <_kill>
34020c7e:	1c43      	adds	r3, r0, #1
34020c80:	d102      	bne.n	34020c88 <_kill_r+0x1c>
34020c82:	682b      	ldr	r3, [r5, #0]
34020c84:	b103      	cbz	r3, 34020c88 <_kill_r+0x1c>
34020c86:	6023      	str	r3, [r4, #0]
34020c88:	bd38      	pop	{r3, r4, r5, pc}
34020c8a:	bf00      	nop
34020c8c:	3419050c 	.word	0x3419050c

34020c90 <_getpid_r>:
34020c90:	f7e1 b99e 	b.w	34001fd0 <_getpid>

34020c94 <_sbrk_r>:
34020c94:	b538      	push	{r3, r4, r5, lr}
34020c96:	2300      	movs	r3, #0
34020c98:	4d05      	ldr	r5, [pc, #20]	@ (34020cb0 <_sbrk_r+0x1c>)
34020c9a:	4604      	mov	r4, r0
34020c9c:	4608      	mov	r0, r1
34020c9e:	602b      	str	r3, [r5, #0]
34020ca0:	f000 fe5e 	bl	34021960 <_sbrk>
34020ca4:	1c43      	adds	r3, r0, #1
34020ca6:	d102      	bne.n	34020cae <_sbrk_r+0x1a>
34020ca8:	682b      	ldr	r3, [r5, #0]
34020caa:	b103      	cbz	r3, 34020cae <_sbrk_r+0x1a>
34020cac:	6023      	str	r3, [r4, #0]
34020cae:	bd38      	pop	{r3, r4, r5, pc}
34020cb0:	3419050c 	.word	0x3419050c

34020cb4 <_calloc_r>:
34020cb4:	b570      	push	{r4, r5, r6, lr}
34020cb6:	fba1 5402 	umull	r5, r4, r1, r2
34020cba:	b934      	cbnz	r4, 34020cca <_calloc_r+0x16>
34020cbc:	4629      	mov	r1, r5
34020cbe:	f7fe ffd9 	bl	3401fc74 <_malloc_r>
34020cc2:	4606      	mov	r6, r0
34020cc4:	b928      	cbnz	r0, 34020cd2 <_calloc_r+0x1e>
34020cc6:	4630      	mov	r0, r6
34020cc8:	bd70      	pop	{r4, r5, r6, pc}
34020cca:	220c      	movs	r2, #12
34020ccc:	2600      	movs	r6, #0
34020cce:	6002      	str	r2, [r0, #0]
34020cd0:	e7f9      	b.n	34020cc6 <_calloc_r+0x12>
34020cd2:	462a      	mov	r2, r5
34020cd4:	4621      	mov	r1, r4
34020cd6:	f7fd fed3 	bl	3401ea80 <memset>
34020cda:	e7f4      	b.n	34020cc6 <_calloc_r+0x12>

34020cdc <__ascii_mbtowc>:
34020cdc:	b082      	sub	sp, #8
34020cde:	b901      	cbnz	r1, 34020ce2 <__ascii_mbtowc+0x6>
34020ce0:	a901      	add	r1, sp, #4
34020ce2:	b142      	cbz	r2, 34020cf6 <__ascii_mbtowc+0x1a>
34020ce4:	b14b      	cbz	r3, 34020cfa <__ascii_mbtowc+0x1e>
34020ce6:	7813      	ldrb	r3, [r2, #0]
34020ce8:	600b      	str	r3, [r1, #0]
34020cea:	7812      	ldrb	r2, [r2, #0]
34020cec:	1e10      	subs	r0, r2, #0
34020cee:	bf18      	it	ne
34020cf0:	2001      	movne	r0, #1
34020cf2:	b002      	add	sp, #8
34020cf4:	4770      	bx	lr
34020cf6:	4610      	mov	r0, r2
34020cf8:	e7fb      	b.n	34020cf2 <__ascii_mbtowc+0x16>
34020cfa:	f06f 0001 	mvn.w	r0, #1
34020cfe:	e7f8      	b.n	34020cf2 <__ascii_mbtowc+0x16>

34020d00 <_realloc_r>:
34020d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34020d04:	4607      	mov	r7, r0
34020d06:	4614      	mov	r4, r2
34020d08:	460d      	mov	r5, r1
34020d0a:	b921      	cbnz	r1, 34020d16 <_realloc_r+0x16>
34020d0c:	4611      	mov	r1, r2
34020d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34020d12:	f7fe bfaf 	b.w	3401fc74 <_malloc_r>
34020d16:	b92a      	cbnz	r2, 34020d24 <_realloc_r+0x24>
34020d18:	4625      	mov	r5, r4
34020d1a:	f7fe ff37 	bl	3401fb8c <_free_r>
34020d1e:	4628      	mov	r0, r5
34020d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34020d24:	f000 f827 	bl	34020d76 <_malloc_usable_size_r>
34020d28:	4284      	cmp	r4, r0
34020d2a:	4606      	mov	r6, r0
34020d2c:	d802      	bhi.n	34020d34 <_realloc_r+0x34>
34020d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
34020d32:	d8f4      	bhi.n	34020d1e <_realloc_r+0x1e>
34020d34:	4621      	mov	r1, r4
34020d36:	4638      	mov	r0, r7
34020d38:	f7fe ff9c 	bl	3401fc74 <_malloc_r>
34020d3c:	4680      	mov	r8, r0
34020d3e:	b908      	cbnz	r0, 34020d44 <_realloc_r+0x44>
34020d40:	4645      	mov	r5, r8
34020d42:	e7ec      	b.n	34020d1e <_realloc_r+0x1e>
34020d44:	42b4      	cmp	r4, r6
34020d46:	4622      	mov	r2, r4
34020d48:	4629      	mov	r1, r5
34020d4a:	bf28      	it	cs
34020d4c:	4632      	movcs	r2, r6
34020d4e:	f7fe f91e 	bl	3401ef8e <memcpy>
34020d52:	4629      	mov	r1, r5
34020d54:	4638      	mov	r0, r7
34020d56:	f7fe ff19 	bl	3401fb8c <_free_r>
34020d5a:	e7f1      	b.n	34020d40 <_realloc_r+0x40>

34020d5c <__ascii_wctomb>:
34020d5c:	4603      	mov	r3, r0
34020d5e:	4608      	mov	r0, r1
34020d60:	b141      	cbz	r1, 34020d74 <__ascii_wctomb+0x18>
34020d62:	2aff      	cmp	r2, #255	@ 0xff
34020d64:	d904      	bls.n	34020d70 <__ascii_wctomb+0x14>
34020d66:	228a      	movs	r2, #138	@ 0x8a
34020d68:	f04f 30ff 	mov.w	r0, #4294967295
34020d6c:	601a      	str	r2, [r3, #0]
34020d6e:	4770      	bx	lr
34020d70:	2001      	movs	r0, #1
34020d72:	700a      	strb	r2, [r1, #0]
34020d74:	4770      	bx	lr

34020d76 <_malloc_usable_size_r>:
34020d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
34020d7a:	1f18      	subs	r0, r3, #4
34020d7c:	2b00      	cmp	r3, #0
34020d7e:	bfbc      	itt	lt
34020d80:	580b      	ldrlt	r3, [r1, r0]
34020d82:	18c0      	addlt	r0, r0, r3
34020d84:	4770      	bx	lr
	...

34020d88 <log10>:
34020d88:	b508      	push	{r3, lr}
34020d8a:	ed2d 8b02 	vpush	{d8}
34020d8e:	eeb0 8b40 	vmov.f64	d8, d0
34020d92:	f000 fc7d 	bl	34021690 <__ieee754_log10>
34020d96:	eeb4 8b48 	vcmp.f64	d8, d8
34020d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020d9e:	d60f      	bvs.n	34020dc0 <log10+0x38>
34020da0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
34020da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020da8:	d80a      	bhi.n	34020dc0 <log10+0x38>
34020daa:	eeb5 8b40 	vcmp.f64	d8, #0.0
34020dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020db2:	d108      	bne.n	34020dc6 <log10+0x3e>
34020db4:	f7fe f8a8 	bl	3401ef08 <__errno>
34020db8:	2322      	movs	r3, #34	@ 0x22
34020dba:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 34020de0 <log10+0x58>
34020dbe:	6003      	str	r3, [r0, #0]
34020dc0:	ecbd 8b02 	vpop	{d8}
34020dc4:	bd08      	pop	{r3, pc}
34020dc6:	f7fe f89f 	bl	3401ef08 <__errno>
34020dca:	2321      	movs	r3, #33	@ 0x21
34020dcc:	ecbd 8b02 	vpop	{d8}
34020dd0:	6003      	str	r3, [r0, #0]
34020dd2:	4805      	ldr	r0, [pc, #20]	@ (34020de8 <log10+0x60>)
34020dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
34020dd8:	f000 b82a 	b.w	34020e30 <nan>
34020ddc:	f3af 8000 	nop.w
34020de0:	00000000 	.word	0x00000000
34020de4:	fff00000 	.word	0xfff00000
34020de8:	34022f50 	.word	0x34022f50
34020dec:	00000000 	.word	0x00000000

34020df0 <sqrt>:
34020df0:	b508      	push	{r3, lr}
34020df2:	ed2d 8b04 	vpush	{d8-d9}
34020df6:	eeb0 8b40 	vmov.f64	d8, d0
34020dfa:	f000 fc44 	bl	34021686 <__ieee754_sqrt>
34020dfe:	eeb4 8b48 	vcmp.f64	d8, d8
34020e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020e06:	d60c      	bvs.n	34020e22 <sqrt+0x32>
34020e08:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 34020e28 <sqrt+0x38>
34020e0c:	eeb4 8bc9 	vcmpe.f64	d8, d9
34020e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020e14:	d505      	bpl.n	34020e22 <sqrt+0x32>
34020e16:	f7fe f877 	bl	3401ef08 <__errno>
34020e1a:	ee89 0b09 	vdiv.f64	d0, d9, d9
34020e1e:	2321      	movs	r3, #33	@ 0x21
34020e20:	6003      	str	r3, [r0, #0]
34020e22:	ecbd 8b04 	vpop	{d8-d9}
34020e26:	bd08      	pop	{r3, pc}
	...

34020e30 <nan>:
34020e30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34020e38 <nan+0x8>
34020e34:	4770      	bx	lr
34020e36:	bf00      	nop
34020e38:	00000000 	.word	0x00000000
34020e3c:	7ff80000 	.word	0x7ff80000

34020e40 <with_errno>:
34020e40:	b510      	push	{r4, lr}
34020e42:	ed2d 8b02 	vpush	{d8}
34020e46:	eeb0 8b40 	vmov.f64	d8, d0
34020e4a:	4604      	mov	r4, r0
34020e4c:	f7fe f85c 	bl	3401ef08 <__errno>
34020e50:	6004      	str	r4, [r0, #0]
34020e52:	eeb0 0b48 	vmov.f64	d0, d8
34020e56:	ecbd 8b02 	vpop	{d8}
34020e5a:	bd10      	pop	{r4, pc}

34020e5c <xflow>:
34020e5c:	b082      	sub	sp, #8
34020e5e:	b158      	cbz	r0, 34020e78 <xflow+0x1c>
34020e60:	eeb1 7b40 	vneg.f64	d7, d0
34020e64:	2022      	movs	r0, #34	@ 0x22
34020e66:	ed8d 7b00 	vstr	d7, [sp]
34020e6a:	ed9d 7b00 	vldr	d7, [sp]
34020e6e:	ee20 0b07 	vmul.f64	d0, d0, d7
34020e72:	b002      	add	sp, #8
34020e74:	f7ff bfe4 	b.w	34020e40 <with_errno>
34020e78:	eeb0 7b40 	vmov.f64	d7, d0
34020e7c:	e7f2      	b.n	34020e64 <xflow+0x8>
	...

34020e80 <__math_uflow>:
34020e80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34020e88 <__math_uflow+0x8>
34020e84:	f7ff bfea 	b.w	34020e5c <xflow>
34020e88:	00000000 	.word	0x00000000
34020e8c:	10000000 	.word	0x10000000

34020e90 <__math_oflow>:
34020e90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34020e98 <__math_oflow+0x8>
34020e94:	f7ff bfe2 	b.w	34020e5c <xflow>
34020e98:	00000000 	.word	0x00000000
34020e9c:	70000000 	.word	0x70000000

34020ea0 <__math_divzero>:
34020ea0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34020ea4:	b082      	sub	sp, #8
34020ea6:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
34020eaa:	2800      	cmp	r0, #0
34020eac:	f04f 0022 	mov.w	r0, #34	@ 0x22
34020eb0:	fe07 7b06 	vseleq.f64	d7, d7, d6
34020eb4:	ed8d 7b00 	vstr	d7, [sp]
34020eb8:	ed9d 0b00 	vldr	d0, [sp]
34020ebc:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 34020ed0 <__math_divzero+0x30>
34020ec0:	ee80 0b07 	vdiv.f64	d0, d0, d7
34020ec4:	b002      	add	sp, #8
34020ec6:	f7ff bfbb 	b.w	34020e40 <with_errno>
34020eca:	bf00      	nop
34020ecc:	f3af 8000 	nop.w
	...

34020ed8 <__math_invalid>:
34020ed8:	eeb0 7b40 	vmov.f64	d7, d0
34020edc:	ee30 6b40 	vsub.f64	d6, d0, d0
34020ee0:	eeb4 7b47 	vcmp.f64	d7, d7
34020ee4:	ee86 0b06 	vdiv.f64	d0, d6, d6
34020ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020eec:	d602      	bvs.n	34020ef4 <__math_invalid+0x1c>
34020eee:	2021      	movs	r0, #33	@ 0x21
34020ef0:	f7ff bfa6 	b.w	34020e40 <with_errno>
34020ef4:	4770      	bx	lr

34020ef6 <__math_check_uflow>:
34020ef6:	eeb5 0b40 	vcmp.f64	d0, #0.0
34020efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020efe:	d102      	bne.n	34020f06 <__math_check_uflow+0x10>
34020f00:	2022      	movs	r0, #34	@ 0x22
34020f02:	f7ff bf9d 	b.w	34020e40 <with_errno>
34020f06:	4770      	bx	lr

34020f08 <__math_check_oflow>:
34020f08:	eeb0 7bc0 	vabs.f64	d7, d0
34020f0c:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 34020f28 <__math_check_oflow+0x20>
34020f10:	eeb4 7b46 	vcmp.f64	d7, d6
34020f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020f18:	dd02      	ble.n	34020f20 <__math_check_oflow+0x18>
34020f1a:	2022      	movs	r0, #34	@ 0x22
34020f1c:	f7ff bf90 	b.w	34020e40 <with_errno>
34020f20:	4770      	bx	lr
34020f22:	bf00      	nop
34020f24:	f3af 8000 	nop.w
34020f28:	ffffffff 	.word	0xffffffff
34020f2c:	7fefffff 	.word	0x7fefffff

34020f30 <checkint>:
34020f30:	f3c1 520a 	ubfx	r2, r1, #20, #11
34020f34:	f240 33fe 	movw	r3, #1022	@ 0x3fe
34020f38:	429a      	cmp	r2, r3
34020f3a:	b570      	push	{r4, r5, r6, lr}
34020f3c:	dd2a      	ble.n	34020f94 <checkint+0x64>
34020f3e:	f240 4333 	movw	r3, #1075	@ 0x433
34020f42:	429a      	cmp	r2, r3
34020f44:	dc24      	bgt.n	34020f90 <checkint+0x60>
34020f46:	1a9b      	subs	r3, r3, r2
34020f48:	f04f 32ff 	mov.w	r2, #4294967295
34020f4c:	f1a3 0620 	sub.w	r6, r3, #32
34020f50:	fa02 f403 	lsl.w	r4, r2, r3
34020f54:	f1c3 0520 	rsb	r5, r3, #32
34020f58:	fa02 f606 	lsl.w	r6, r2, r6
34020f5c:	fa22 f505 	lsr.w	r5, r2, r5
34020f60:	409a      	lsls	r2, r3
34020f62:	4334      	orrs	r4, r6
34020f64:	ea20 0202 	bic.w	r2, r0, r2
34020f68:	432c      	orrs	r4, r5
34020f6a:	ea21 0404 	bic.w	r4, r1, r4
34020f6e:	4322      	orrs	r2, r4
34020f70:	f1a3 0420 	sub.w	r4, r3, #32
34020f74:	f1c3 0220 	rsb	r2, r3, #32
34020f78:	d10c      	bne.n	34020f94 <checkint+0x64>
34020f7a:	40d8      	lsrs	r0, r3
34020f7c:	fa01 f302 	lsl.w	r3, r1, r2
34020f80:	40e1      	lsrs	r1, r4
34020f82:	4318      	orrs	r0, r3
34020f84:	4308      	orrs	r0, r1
34020f86:	f000 0001 	and.w	r0, r0, #1
34020f8a:	f1d0 0002 	rsbs	r0, r0, #2
34020f8e:	bd70      	pop	{r4, r5, r6, pc}
34020f90:	2002      	movs	r0, #2
34020f92:	e7fc      	b.n	34020f8e <checkint+0x5e>
34020f94:	2000      	movs	r0, #0
34020f96:	e7fa      	b.n	34020f8e <checkint+0x5e>

34020f98 <pow>:
34020f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34020f9c:	ee10 4a90 	vmov	r4, s1
34020fa0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
34020fa4:	ee11 aa90 	vmov	sl, s3
34020fa8:	ee10 5a10 	vmov	r5, s0
34020fac:	ea4f 5814 	mov.w	r8, r4, lsr #20
34020fb0:	ee11 0a10 	vmov	r0, s2
34020fb4:	ea4f 561a 	mov.w	r6, sl, lsr #20
34020fb8:	f108 32ff 	add.w	r2, r8, #4294967295
34020fbc:	46c4      	mov	ip, r8
34020fbe:	429a      	cmp	r2, r3
34020fc0:	ed2d 8b0a 	vpush	{d8-d12}
34020fc4:	b087      	sub	sp, #28
34020fc6:	d806      	bhi.n	34020fd6 <pow+0x3e>
34020fc8:	f3c6 030a 	ubfx	r3, r6, #0, #11
34020fcc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
34020fd0:	2b7f      	cmp	r3, #127	@ 0x7f
34020fd2:	f240 8157 	bls.w	34021284 <pow+0x2ec>
34020fd6:	1802      	adds	r2, r0, r0
34020fd8:	f06f 0b01 	mvn.w	fp, #1
34020fdc:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
34020fe0:	eb4a 010a 	adc.w	r1, sl, sl
34020fe4:	1e57      	subs	r7, r2, #1
34020fe6:	f141 33ff 	adc.w	r3, r1, #4294967295
34020fea:	45bb      	cmp	fp, r7
34020fec:	eb7e 0303 	sbcs.w	r3, lr, r3
34020ff0:	d242      	bcs.n	34021078 <pow+0xe0>
34020ff2:	ea52 0301 	orrs.w	r3, r2, r1
34020ff6:	f04f 0300 	mov.w	r3, #0
34020ffa:	d10c      	bne.n	34021016 <pow+0x7e>
34020ffc:	196d      	adds	r5, r5, r5
34020ffe:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
34021002:	4164      	adcs	r4, r4
34021004:	42ab      	cmp	r3, r5
34021006:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
3402100a:	41a3      	sbcs	r3, r4
3402100c:	f0c0 808f 	bcc.w	3402112e <pow+0x196>
34021010:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34021014:	e02b      	b.n	3402106e <pow+0xd6>
34021016:	4ed4      	ldr	r6, [pc, #848]	@ (34021368 <pow+0x3d0>)
34021018:	42b4      	cmp	r4, r6
3402101a:	bf08      	it	eq
3402101c:	429d      	cmpeq	r5, r3
3402101e:	d109      	bne.n	34021034 <pow+0x9c>
34021020:	1800      	adds	r0, r0, r0
34021022:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
34021026:	eb4a 0a0a 	adc.w	sl, sl, sl
3402102a:	4283      	cmp	r3, r0
3402102c:	4bcf      	ldr	r3, [pc, #828]	@ (3402136c <pow+0x3d4>)
3402102e:	eb73 030a 	sbcs.w	r3, r3, sl
34021032:	e7eb      	b.n	3402100c <pow+0x74>
34021034:	196d      	adds	r5, r5, r5
34021036:	48ce      	ldr	r0, [pc, #824]	@ (34021370 <pow+0x3d8>)
34021038:	4164      	adcs	r4, r4
3402103a:	42ab      	cmp	r3, r5
3402103c:	eb70 0604 	sbcs.w	r6, r0, r4
34021040:	d375      	bcc.n	3402112e <pow+0x196>
34021042:	4281      	cmp	r1, r0
34021044:	bf08      	it	eq
34021046:	429a      	cmpeq	r2, r3
34021048:	d171      	bne.n	3402112e <pow+0x196>
3402104a:	4aca      	ldr	r2, [pc, #808]	@ (34021374 <pow+0x3dc>)
3402104c:	4294      	cmp	r4, r2
3402104e:	bf08      	it	eq
34021050:	429d      	cmpeq	r5, r3
34021052:	d0dd      	beq.n	34021010 <pow+0x78>
34021054:	4294      	cmp	r4, r2
34021056:	ea6f 0a0a 	mvn.w	sl, sl
3402105a:	bf34      	ite	cc
3402105c:	2400      	movcc	r4, #0
3402105e:	2401      	movcs	r4, #1
34021060:	ea4f 7ada 	mov.w	sl, sl, lsr #31
34021064:	4554      	cmp	r4, sl
34021066:	f040 81dc 	bne.w	34021422 <pow+0x48a>
3402106a:	ee21 0b01 	vmul.f64	d0, d1, d1
3402106e:	b007      	add	sp, #28
34021070:	ecbd 8b0a 	vpop	{d8-d12}
34021074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34021078:	196f      	adds	r7, r5, r5
3402107a:	eb44 0904 	adc.w	r9, r4, r4
3402107e:	1e7a      	subs	r2, r7, #1
34021080:	f169 0300 	sbc.w	r3, r9, #0
34021084:	4593      	cmp	fp, r2
34021086:	eb7e 0303 	sbcs.w	r3, lr, r3
3402108a:	d225      	bcs.n	340210d8 <pow+0x140>
3402108c:	2c00      	cmp	r4, #0
3402108e:	ee20 0b00 	vmul.f64	d0, d0, d0
34021092:	da13      	bge.n	340210bc <pow+0x124>
34021094:	4651      	mov	r1, sl
34021096:	f7ff ff4b 	bl	34020f30 <checkint>
3402109a:	2801      	cmp	r0, #1
3402109c:	d10e      	bne.n	340210bc <pow+0x124>
3402109e:	eeb1 0b40 	vneg.f64	d0, d0
340210a2:	ea57 0909 	orrs.w	r9, r7, r9
340210a6:	d10b      	bne.n	340210c0 <pow+0x128>
340210a8:	f1ba 0f00 	cmp.w	sl, #0
340210ac:	dadf      	bge.n	3402106e <pow+0xd6>
340210ae:	b007      	add	sp, #28
340210b0:	ecbd 8b0a 	vpop	{d8-d12}
340210b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340210b8:	f7ff bef2 	b.w	34020ea0 <__math_divzero>
340210bc:	2000      	movs	r0, #0
340210be:	e7f0      	b.n	340210a2 <pow+0x10a>
340210c0:	f1ba 0f00 	cmp.w	sl, #0
340210c4:	dad3      	bge.n	3402106e <pow+0xd6>
340210c6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
340210ca:	ee86 7b00 	vdiv.f64	d7, d6, d0
340210ce:	ed8d 7b00 	vstr	d7, [sp]
340210d2:	ed9d 0b00 	vldr	d0, [sp]
340210d6:	e7ca      	b.n	3402106e <pow+0xd6>
340210d8:	2c00      	cmp	r4, #0
340210da:	da2b      	bge.n	34021134 <pow+0x19c>
340210dc:	4651      	mov	r1, sl
340210de:	f7ff ff27 	bl	34020f30 <checkint>
340210e2:	b930      	cbnz	r0, 340210f2 <pow+0x15a>
340210e4:	b007      	add	sp, #28
340210e6:	ecbd 8b0a 	vpop	{d8-d12}
340210ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340210ee:	f7ff bef3 	b.w	34020ed8 <__math_invalid>
340210f2:	1e41      	subs	r1, r0, #1
340210f4:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
340210f8:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
340210fc:	4248      	negs	r0, r1
340210fe:	4148      	adcs	r0, r1
34021100:	0480      	lsls	r0, r0, #18
34021102:	f3c6 020a 	ubfx	r2, r6, #0, #11
34021106:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
3402110a:	2b7f      	cmp	r3, #127	@ 0x7f
3402110c:	d92d      	bls.n	3402116a <pow+0x1d2>
3402110e:	2000      	movs	r0, #0
34021110:	4b95      	ldr	r3, [pc, #596]	@ (34021368 <pow+0x3d0>)
34021112:	429c      	cmp	r4, r3
34021114:	bf08      	it	eq
34021116:	4285      	cmpeq	r5, r0
34021118:	f43f af7a 	beq.w	34021010 <pow+0x78>
3402111c:	f240 31bd 	movw	r1, #957	@ 0x3bd
34021120:	428a      	cmp	r2, r1
34021122:	d80c      	bhi.n	3402113e <pow+0x1a6>
34021124:	42a8      	cmp	r0, r5
34021126:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
3402112a:	41a3      	sbcs	r3, r4
3402112c:	d204      	bcs.n	34021138 <pow+0x1a0>
3402112e:	ee31 0b00 	vadd.f64	d0, d1, d0
34021132:	e79c      	b.n	3402106e <pow+0xd6>
34021134:	2000      	movs	r0, #0
34021136:	e7e4      	b.n	34021102 <pow+0x16a>
34021138:	ee30 0b41 	vsub.f64	d0, d0, d1
3402113c:	e797      	b.n	3402106e <pow+0xd6>
3402113e:	2d01      	cmp	r5, #1
34021140:	f240 72ff 	movw	r2, #2047	@ 0x7ff
34021144:	eb74 0303 	sbcs.w	r3, r4, r3
34021148:	bf34      	ite	cc
3402114a:	2301      	movcc	r3, #1
3402114c:	2300      	movcs	r3, #0
3402114e:	4296      	cmp	r6, r2
34021150:	bf8c      	ite	hi
34021152:	2600      	movhi	r6, #0
34021154:	2601      	movls	r6, #1
34021156:	42b3      	cmp	r3, r6
34021158:	f000 809c 	beq.w	34021294 <pow+0x2fc>
3402115c:	b007      	add	sp, #28
3402115e:	ecbd 8b0a 	vpop	{d8-d12}
34021162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021166:	f7ff be93 	b.w	34020e90 <__math_oflow>
3402116a:	f1bc 0f00 	cmp.w	ip, #0
3402116e:	d10a      	bne.n	34021186 <pow+0x1ee>
34021170:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 34021358 <pow+0x3c0>
34021174:	ee20 7b07 	vmul.f64	d7, d0, d7
34021178:	ec53 2b17 	vmov	r2, r3, d7
3402117c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
34021180:	4615      	mov	r5, r2
34021182:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
34021186:	4a7c      	ldr	r2, [pc, #496]	@ (34021378 <pow+0x3e0>)
34021188:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
3402118c:	4422      	add	r2, r4
3402118e:	1513      	asrs	r3, r2, #20
34021190:	f3c2 3146 	ubfx	r1, r2, #13, #7
34021194:	f36f 0213 	bfc	r2, #0, #20
34021198:	ee03 3a10 	vmov	s6, r3
3402119c:	4b77      	ldr	r3, [pc, #476]	@ (3402137c <pow+0x3e4>)
3402119e:	1aa7      	subs	r7, r4, r2
340211a0:	eb03 1641 	add.w	r6, r3, r1, lsl #5
340211a4:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
340211a8:	eb03 1241 	add.w	r2, r3, r1, lsl #5
340211ac:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
340211b0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
340211b4:	1e2e      	subs	r6, r5, #0
340211b6:	ec47 6b14 	vmov	d4, r6, r7
340211ba:	eea4 6b05 	vfma.f64	d6, d4, d5
340211be:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
340211c2:	ed93 5b00 	vldr	d5, [r3]
340211c6:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
340211ca:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
340211ce:	eea3 2b05 	vfma.f64	d2, d3, d5
340211d2:	ed93 5b02 	vldr	d5, [r3, #8]
340211d6:	eea3 7b05 	vfma.f64	d7, d3, d5
340211da:	ee36 4b02 	vadd.f64	d4, d6, d2
340211de:	ed93 5b04 	vldr	d5, [r3, #16]
340211e2:	ee32 2b44 	vsub.f64	d2, d2, d4
340211e6:	ee26 5b05 	vmul.f64	d5, d6, d5
340211ea:	ee32 2b06 	vadd.f64	d2, d2, d6
340211ee:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
340211f2:	ee26 0b05 	vmul.f64	d0, d6, d5
340211f6:	ee37 7b02 	vadd.f64	d7, d7, d2
340211fa:	ee34 8b00 	vadd.f64	d8, d4, d0
340211fe:	eeb0 9b40 	vmov.f64	d9, d0
34021202:	ee26 bb00 	vmul.f64	d11, d6, d0
34021206:	ee34 4b48 	vsub.f64	d4, d4, d8
3402120a:	ee96 9b05 	vfnms.f64	d9, d6, d5
3402120e:	ee34 ab00 	vadd.f64	d10, d4, d0
34021212:	ed93 5b06 	vldr	d5, [r3, #24]
34021216:	ed93 4b08 	vldr	d4, [r3, #32]
3402121a:	eea6 5b04 	vfma.f64	d5, d6, d4
3402121e:	ee37 7b09 	vadd.f64	d7, d7, d9
34021222:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
34021226:	ee37 7b0a 	vadd.f64	d7, d7, d10
3402122a:	eea6 4b03 	vfma.f64	d4, d6, d3
3402122e:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
34021232:	eea6 3b0c 	vfma.f64	d3, d6, d12
34021236:	eea0 4b03 	vfma.f64	d4, d0, d3
3402123a:	eea0 5b04 	vfma.f64	d5, d0, d4
3402123e:	eeab 7b05 	vfma.f64	d7, d11, d5
34021242:	ee38 4b07 	vadd.f64	d4, d8, d7
34021246:	ee21 6b04 	vmul.f64	d6, d1, d4
3402124a:	ee38 8b44 	vsub.f64	d8, d8, d4
3402124e:	eeb0 5b46 	vmov.f64	d5, d6
34021252:	ee16 3a90 	vmov	r3, s13
34021256:	ee38 8b07 	vadd.f64	d8, d8, d7
3402125a:	f3c3 560a 	ubfx	r6, r3, #20, #11
3402125e:	ee91 5b04 	vfnms.f64	d5, d1, d4
34021262:	18b2      	adds	r2, r6, r2
34021264:	2a3e      	cmp	r2, #62	@ 0x3e
34021266:	eea1 5b08 	vfma.f64	d5, d1, d8
3402126a:	d91b      	bls.n	340212a4 <pow+0x30c>
3402126c:	2a00      	cmp	r2, #0
3402126e:	da0b      	bge.n	34021288 <pow+0x2f0>
34021270:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34021274:	ee36 0b00 	vadd.f64	d0, d6, d0
34021278:	2800      	cmp	r0, #0
3402127a:	f43f aef8 	beq.w	3402106e <pow+0xd6>
3402127e:	eeb1 0b40 	vneg.f64	d0, d0
34021282:	e6f4      	b.n	3402106e <pow+0xd6>
34021284:	2000      	movs	r0, #0
34021286:	e77e      	b.n	34021186 <pow+0x1ee>
34021288:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
3402128c:	d909      	bls.n	340212a2 <pow+0x30a>
3402128e:	2b00      	cmp	r3, #0
34021290:	f6bf af64 	bge.w	3402115c <pow+0x1c4>
34021294:	b007      	add	sp, #28
34021296:	ecbd 8b0a 	vpop	{d8-d12}
3402129a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3402129e:	f7ff bdef 	b.w	34020e80 <__math_uflow>
340212a2:	2600      	movs	r6, #0
340212a4:	4936      	ldr	r1, [pc, #216]	@ (34021380 <pow+0x3e8>)
340212a6:	2700      	movs	r7, #0
340212a8:	ed91 4b02 	vldr	d4, [r1, #8]
340212ac:	ed91 3b00 	vldr	d3, [r1]
340212b0:	eeb0 7b44 	vmov.f64	d7, d4
340212b4:	eea6 7b03 	vfma.f64	d7, d6, d3
340212b8:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
340212bc:	ee17 5a10 	vmov	r5, s14
340212c0:	ee37 7b44 	vsub.f64	d7, d7, d4
340212c4:	ed91 4b04 	vldr	d4, [r1, #16]
340212c8:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
340212cc:	eea7 6b04 	vfma.f64	d6, d7, d4
340212d0:	18dc      	adds	r4, r3, r3
340212d2:	1940      	adds	r0, r0, r5
340212d4:	f104 030f 	add.w	r3, r4, #15
340212d8:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
340212dc:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
340212e0:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
340212e4:	ed91 4b06 	vldr	d4, [r1, #24]
340212e8:	f8d2 e004 	ldr.w	lr, [r2, #4]
340212ec:	eb17 020c 	adds.w	r2, r7, ip
340212f0:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
340212f4:	eea7 6b04 	vfma.f64	d6, d7, d4
340212f8:	ed91 4b08 	vldr	d4, [r1, #32]
340212fc:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
34021300:	ee35 5b06 	vadd.f64	d5, d5, d6
34021304:	eea5 4b03 	vfma.f64	d4, d5, d3
34021308:	ee25 6b05 	vmul.f64	d6, d5, d5
3402130c:	ee35 7b07 	vadd.f64	d7, d5, d7
34021310:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
34021314:	eea6 7b04 	vfma.f64	d7, d6, d4
34021318:	ee26 6b06 	vmul.f64	d6, d6, d6
3402131c:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
34021320:	eea5 4b03 	vfma.f64	d4, d5, d3
34021324:	eea6 7b04 	vfma.f64	d7, d6, d4
34021328:	2e00      	cmp	r6, #0
3402132a:	d175      	bne.n	34021418 <pow+0x480>
3402132c:	42bd      	cmp	r5, r7
3402132e:	db29      	blt.n	34021384 <pow+0x3ec>
34021330:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
34021334:	4610      	mov	r0, r2
34021336:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
3402133a:	ec41 0b10 	vmov	d0, r0, r1
3402133e:	eea7 0b00 	vfma.f64	d0, d7, d0
34021342:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 34021360 <pow+0x3c8>
34021346:	ee20 0b07 	vmul.f64	d0, d0, d7
3402134a:	b007      	add	sp, #28
3402134c:	ecbd 8b0a 	vpop	{d8-d12}
34021350:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021354:	f7ff bdd8 	b.w	34020f08 <__math_check_oflow>
34021358:	00000000 	.word	0x00000000
3402135c:	43300000 	.word	0x43300000
34021360:	00000000 	.word	0x00000000
34021364:	7f000000 	.word	0x7f000000
34021368:	3ff00000 	.word	0x3ff00000
3402136c:	fff00000 	.word	0xfff00000
34021370:	ffe00000 	.word	0xffe00000
34021374:	7fe00000 	.word	0x7fe00000
34021378:	c0196aab 	.word	0xc0196aab
3402137c:	340a13b0 	.word	0x340a13b0
34021380:	340a0b40 	.word	0x340a0b40
34021384:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
34021388:	4610      	mov	r0, r2
3402138a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
3402138e:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
34021392:	ec41 0b15 	vmov	d5, r0, r1
34021396:	ee27 6b05 	vmul.f64	d6, d7, d5
3402139a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 34021428 <pow+0x490>
3402139e:	ee35 7b06 	vadd.f64	d7, d5, d6
340213a2:	eeb0 4bc7 	vabs.f64	d4, d7
340213a6:	eeb4 4bc3 	vcmpe.f64	d4, d3
340213aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340213ae:	d52a      	bpl.n	34021406 <pow+0x46e>
340213b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
340213b4:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
340213b8:	ee35 5b47 	vsub.f64	d5, d5, d7
340213bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340213c0:	ee35 5b06 	vadd.f64	d5, d5, d6
340213c4:	bf58      	it	pl
340213c6:	eeb0 4b43 	vmovpl.f64	d4, d3
340213ca:	ee37 3b04 	vadd.f64	d3, d7, d4
340213ce:	ee34 6b43 	vsub.f64	d6, d4, d3
340213d2:	ee36 6b07 	vadd.f64	d6, d6, d7
340213d6:	ee36 6b05 	vadd.f64	d6, d6, d5
340213da:	ee36 6b03 	vadd.f64	d6, d6, d3
340213de:	ee36 7b44 	vsub.f64	d7, d6, d4
340213e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
340213e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340213ea:	d104      	bne.n	340213f6 <pow+0x45e>
340213ec:	4632      	mov	r2, r6
340213ee:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
340213f2:	ec43 2b17 	vmov	d7, r2, r3
340213f6:	ed8d 0b02 	vstr	d0, [sp, #8]
340213fa:	ed9d 6b02 	vldr	d6, [sp, #8]
340213fe:	ee26 6b00 	vmul.f64	d6, d6, d0
34021402:	ed8d 6b04 	vstr	d6, [sp, #16]
34021406:	ee27 0b00 	vmul.f64	d0, d7, d0
3402140a:	b007      	add	sp, #28
3402140c:	ecbd 8b0a 	vpop	{d8-d12}
34021410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021414:	f7ff bd6f 	b.w	34020ef6 <__math_check_uflow>
34021418:	ec43 2b10 	vmov	d0, r2, r3
3402141c:	eea7 0b00 	vfma.f64	d0, d7, d0
34021420:	e625      	b.n	3402106e <pow+0xd6>
34021422:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 34021430 <pow+0x498>
34021426:	e622      	b.n	3402106e <pow+0xd6>
34021428:	00000000 	.word	0x00000000
3402142c:	00100000 	.word	0x00100000
	...

34021438 <expf>:
34021438:	ee10 2a10 	vmov	r2, s0
3402143c:	f240 412a 	movw	r1, #1066	@ 0x42a
34021440:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
34021444:	f3c2 530a 	ubfx	r3, r2, #20, #11
34021448:	428b      	cmp	r3, r1
3402144a:	b430      	push	{r4, r5}
3402144c:	d92a      	bls.n	340214a4 <expf+0x6c>
3402144e:	f512 0f00 	cmn.w	r2, #8388608	@ 0x800000
34021452:	d058      	beq.n	34021506 <expf+0xce>
34021454:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
34021458:	d303      	bcc.n	34021462 <expf+0x2a>
3402145a:	ee30 0a00 	vadd.f32	s0, s0, s0
3402145e:	bc30      	pop	{r4, r5}
34021460:	4770      	bx	lr
34021462:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 3402150c <expf+0xd4>
34021466:	eeb4 0ae7 	vcmpe.f32	s0, s15
3402146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402146e:	dd03      	ble.n	34021478 <expf+0x40>
34021470:	2000      	movs	r0, #0
34021472:	bc30      	pop	{r4, r5}
34021474:	f000 b8e0 	b.w	34021638 <__math_oflowf>
34021478:	eddf 7a25 	vldr	s15, [pc, #148]	@ 34021510 <expf+0xd8>
3402147c:	eeb4 0ae7 	vcmpe.f32	s0, s15
34021480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021484:	d503      	bpl.n	3402148e <expf+0x56>
34021486:	2000      	movs	r0, #0
34021488:	bc30      	pop	{r4, r5}
3402148a:	f000 b8c9 	b.w	34021620 <__math_uflowf>
3402148e:	eddf 7a21 	vldr	s15, [pc, #132]	@ 34021514 <expf+0xdc>
34021492:	eeb4 0ae7 	vcmpe.f32	s0, s15
34021496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402149a:	d503      	bpl.n	340214a4 <expf+0x6c>
3402149c:	2000      	movs	r0, #0
3402149e:	bc30      	pop	{r4, r5}
340214a0:	f000 b8c4 	b.w	3402162c <__math_may_uflowf>
340214a4:	4b1c      	ldr	r3, [pc, #112]	@ (34021518 <expf+0xe0>)
340214a6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
340214aa:	ed93 4b48 	vldr	d4, [r3, #288]	@ 0x120
340214ae:	ed93 5b4a 	vldr	d5, [r3, #296]	@ 0x128
340214b2:	eeb0 7b44 	vmov.f64	d7, d4
340214b6:	eea5 7b06 	vfma.f64	d7, d5, d6
340214ba:	ee17 0a10 	vmov	r0, s14
340214be:	ee37 7b44 	vsub.f64	d7, d7, d4
340214c2:	f000 021f 	and.w	r2, r0, #31
340214c6:	ee95 7b06 	vfnms.f64	d7, d5, d6
340214ca:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
340214ce:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
340214d2:	684d      	ldr	r5, [r1, #4]
340214d4:	2100      	movs	r1, #0
340214d6:	ed93 5b4c 	vldr	d5, [r3, #304]	@ 0x130
340214da:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
340214de:	190a      	adds	r2, r1, r4
340214e0:	eea5 6b07 	vfma.f64	d6, d5, d7
340214e4:	ee27 4b07 	vmul.f64	d4, d7, d7
340214e8:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
340214ec:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
340214f0:	eea5 0b07 	vfma.f64	d0, d5, d7
340214f4:	ec43 2b17 	vmov	d7, r2, r3
340214f8:	eea6 0b04 	vfma.f64	d0, d6, d4
340214fc:	ee20 0b07 	vmul.f64	d0, d0, d7
34021500:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34021504:	e7ab      	b.n	3402145e <expf+0x26>
34021506:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 3402151c <expf+0xe4>
3402150a:	e7a8      	b.n	3402145e <expf+0x26>
3402150c:	42b17217 	.word	0x42b17217
34021510:	c2cff1b4 	.word	0xc2cff1b4
34021514:	c2ce8ecf 	.word	0xc2ce8ecf
34021518:	340a23f8 	.word	0x340a23f8
3402151c:	00000000 	.word	0x00000000

34021520 <logf>:
34021520:	ee10 3a10 	vmov	r3, s0
34021524:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
34021528:	b410      	push	{r4}
3402152a:	d055      	beq.n	340215d8 <logf+0xb8>
3402152c:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
34021530:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34021534:	d31a      	bcc.n	3402156c <logf+0x4c>
34021536:	005a      	lsls	r2, r3, #1
34021538:	d104      	bne.n	34021544 <logf+0x24>
3402153a:	2001      	movs	r0, #1
3402153c:	f85d 4b04 	ldr.w	r4, [sp], #4
34021540:	f000 b880 	b.w	34021644 <__math_divzerof>
34021544:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
34021548:	d043      	beq.n	340215d2 <logf+0xb2>
3402154a:	2b00      	cmp	r3, #0
3402154c:	db02      	blt.n	34021554 <logf+0x34>
3402154e:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
34021552:	d303      	bcc.n	3402155c <logf+0x3c>
34021554:	f85d 4b04 	ldr.w	r4, [sp], #4
34021558:	f000 b886 	b.w	34021668 <__math_invalidf>
3402155c:	eddf 7a20 	vldr	s15, [pc, #128]	@ 340215e0 <logf+0xc0>
34021560:	ee20 0a27 	vmul.f32	s0, s0, s15
34021564:	ee10 3a10 	vmov	r3, s0
34021568:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
3402156c:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
34021570:	491c      	ldr	r1, [pc, #112]	@ (340215e4 <logf+0xc4>)
34021572:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
34021576:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
3402157a:	0dd4      	lsrs	r4, r2, #23
3402157c:	f3c2 40c3 	ubfx	r0, r2, #19, #4
34021580:	15d2      	asrs	r2, r2, #23
34021582:	05e4      	lsls	r4, r4, #23
34021584:	eb01 1000 	add.w	r0, r1, r0, lsl #4
34021588:	1b1b      	subs	r3, r3, r4
3402158a:	ee07 3a90 	vmov	s15, r3
3402158e:	ed90 5b00 	vldr	d5, [r0]
34021592:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
34021596:	ed90 6b02 	vldr	d6, [r0, #8]
3402159a:	eea5 0b07 	vfma.f64	d0, d5, d7
3402159e:	ee07 2a90 	vmov	s15, r2
340215a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
340215a6:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
340215aa:	eea7 6b05 	vfma.f64	d6, d7, d5
340215ae:	ee20 4b00 	vmul.f64	d4, d0, d0
340215b2:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
340215b6:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
340215ba:	eea5 7b00 	vfma.f64	d7, d5, d0
340215be:	ee30 0b06 	vadd.f64	d0, d0, d6
340215c2:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
340215c6:	eea5 7b04 	vfma.f64	d7, d5, d4
340215ca:	eea4 0b07 	vfma.f64	d0, d4, d7
340215ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
340215d2:	f85d 4b04 	ldr.w	r4, [sp], #4
340215d6:	4770      	bx	lr
340215d8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 340215e8 <logf+0xc8>
340215dc:	e7f9      	b.n	340215d2 <logf+0xb2>
340215de:	bf00      	nop
340215e0:	4b000000 	.word	0x4b000000
340215e4:	340a2540 	.word	0x340a2540
340215e8:	00000000 	.word	0x00000000

340215ec <with_errnof>:
340215ec:	b510      	push	{r4, lr}
340215ee:	ed2d 8b02 	vpush	{d8}
340215f2:	eeb0 8a40 	vmov.f32	s16, s0
340215f6:	4604      	mov	r4, r0
340215f8:	f7fd fc86 	bl	3401ef08 <__errno>
340215fc:	6004      	str	r4, [r0, #0]
340215fe:	eeb0 0a48 	vmov.f32	s0, s16
34021602:	ecbd 8b02 	vpop	{d8}
34021606:	bd10      	pop	{r4, pc}

34021608 <xflowf>:
34021608:	b130      	cbz	r0, 34021618 <xflowf+0x10>
3402160a:	eef1 7a40 	vneg.f32	s15, s0
3402160e:	ee27 0a80 	vmul.f32	s0, s15, s0
34021612:	2022      	movs	r0, #34	@ 0x22
34021614:	f7ff bfea 	b.w	340215ec <with_errnof>
34021618:	eef0 7a40 	vmov.f32	s15, s0
3402161c:	e7f7      	b.n	3402160e <xflowf+0x6>
	...

34021620 <__math_uflowf>:
34021620:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34021628 <__math_uflowf+0x8>
34021624:	f7ff bff0 	b.w	34021608 <xflowf>
34021628:	10000000 	.word	0x10000000

3402162c <__math_may_uflowf>:
3402162c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34021634 <__math_may_uflowf+0x8>
34021630:	f7ff bfea 	b.w	34021608 <xflowf>
34021634:	1a200000 	.word	0x1a200000

34021638 <__math_oflowf>:
34021638:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34021640 <__math_oflowf+0x8>
3402163c:	f7ff bfe4 	b.w	34021608 <xflowf>
34021640:	70000000 	.word	0x70000000

34021644 <__math_divzerof>:
34021644:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34021648:	2800      	cmp	r0, #0
3402164a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
3402164e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34021664 <__math_divzerof+0x20>
34021652:	f04f 0022 	mov.w	r0, #34	@ 0x22
34021656:	fe47 7a87 	vseleq.f32	s15, s15, s14
3402165a:	ee87 0a80 	vdiv.f32	s0, s15, s0
3402165e:	f7ff bfc5 	b.w	340215ec <with_errnof>
34021662:	bf00      	nop
34021664:	00000000 	.word	0x00000000

34021668 <__math_invalidf>:
34021668:	eef0 7a40 	vmov.f32	s15, s0
3402166c:	ee30 7a40 	vsub.f32	s14, s0, s0
34021670:	eef4 7a67 	vcmp.f32	s15, s15
34021674:	ee87 0a07 	vdiv.f32	s0, s14, s14
34021678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402167c:	d602      	bvs.n	34021684 <__math_invalidf+0x1c>
3402167e:	2021      	movs	r0, #33	@ 0x21
34021680:	f7ff bfb4 	b.w	340215ec <with_errnof>
34021684:	4770      	bx	lr

34021686 <__ieee754_sqrt>:
34021686:	eeb1 0bc0 	vsqrt.f64	d0, d0
3402168a:	4770      	bx	lr
3402168c:	0000      	movs	r0, r0
	...

34021690 <__ieee754_log10>:
34021690:	ee10 3a90 	vmov	r3, s1
34021694:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34021698:	b510      	push	{r4, lr}
3402169a:	ed2d 8b02 	vpush	{d8}
3402169e:	da21      	bge.n	340216e4 <__ieee754_log10+0x54>
340216a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
340216a4:	ee10 1a10 	vmov	r1, s0
340216a8:	430a      	orrs	r2, r1
340216aa:	d108      	bne.n	340216be <__ieee754_log10+0x2e>
340216ac:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 34021738 <__ieee754_log10+0xa8>
340216b0:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 34021740 <__ieee754_log10+0xb0>
340216b4:	ee86 0b07 	vdiv.f64	d0, d6, d7
340216b8:	ecbd 8b02 	vpop	{d8}
340216bc:	bd10      	pop	{r4, pc}
340216be:	2b00      	cmp	r3, #0
340216c0:	da02      	bge.n	340216c8 <__ieee754_log10+0x38>
340216c2:	ee30 6b40 	vsub.f64	d6, d0, d0
340216c6:	e7f3      	b.n	340216b0 <__ieee754_log10+0x20>
340216c8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34021748 <__ieee754_log10+0xb8>
340216cc:	f06f 0235 	mvn.w	r2, #53	@ 0x35
340216d0:	ee20 0b07 	vmul.f64	d0, d0, d7
340216d4:	ee10 3a90 	vmov	r3, s1
340216d8:	4923      	ldr	r1, [pc, #140]	@ (34021768 <__ieee754_log10+0xd8>)
340216da:	428b      	cmp	r3, r1
340216dc:	dd04      	ble.n	340216e8 <__ieee754_log10+0x58>
340216de:	ee30 0b00 	vadd.f64	d0, d0, d0
340216e2:	e7e9      	b.n	340216b8 <__ieee754_log10+0x28>
340216e4:	2200      	movs	r2, #0
340216e6:	e7f7      	b.n	340216d8 <__ieee754_log10+0x48>
340216e8:	1518      	asrs	r0, r3, #20
340216ea:	f240 34ff 	movw	r4, #1023	@ 0x3ff
340216ee:	f3c3 0113 	ubfx	r1, r3, #0, #20
340216f2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
340216f6:	4410      	add	r0, r2
340216f8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
340216fc:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
34021700:	ee08 3a10 	vmov	s16, r3
34021704:	ec53 2b10 	vmov	r2, r3, d0
34021708:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
3402170c:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
34021710:	ec43 2b10 	vmov	d0, r2, r3
34021714:	f000 f82c 	bl	34021770 <log>
34021718:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34021750 <__ieee754_log10+0xc0>
3402171c:	ee20 0b07 	vmul.f64	d0, d0, d7
34021720:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34021758 <__ieee754_log10+0xc8>
34021724:	eea8 0b07 	vfma.f64	d0, d8, d7
34021728:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34021760 <__ieee754_log10+0xd0>
3402172c:	eea8 0b07 	vfma.f64	d0, d8, d7
34021730:	e7c2      	b.n	340216b8 <__ieee754_log10+0x28>
34021732:	bf00      	nop
34021734:	f3af 8000 	nop.w
34021738:	00000000 	.word	0x00000000
3402173c:	c3500000 	.word	0xc3500000
	...
3402174c:	43500000 	.word	0x43500000
34021750:	1526e50e 	.word	0x1526e50e
34021754:	3fdbcb7b 	.word	0x3fdbcb7b
34021758:	11f12b36 	.word	0x11f12b36
3402175c:	3d59fef3 	.word	0x3d59fef3
34021760:	509f6000 	.word	0x509f6000
34021764:	3fd34413 	.word	0x3fd34413
34021768:	7fefffff 	.word	0x7fefffff
3402176c:	00000000 	.word	0x00000000

34021770 <log>:
34021770:	ee10 0a90 	vmov	r0, s1
34021774:	ee10 3a10 	vmov	r3, s0
34021778:	b4f0      	push	{r4, r5, r6, r7}
3402177a:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
3402177e:	f04f 34ff 	mov.w	r4, #4294967295
34021782:	0c02      	lsrs	r2, r0, #16
34021784:	429c      	cmp	r4, r3
34021786:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
3402178a:	4c71      	ldr	r4, [pc, #452]	@ (34021950 <log+0x1e0>)
3402178c:	418c      	sbcs	r4, r1
3402178e:	ed2d 8b02 	vpush	{d8}
34021792:	d35a      	bcc.n	3402184a <log+0xda>
34021794:	4a6f      	ldr	r2, [pc, #444]	@ (34021954 <log+0x1e4>)
34021796:	4290      	cmp	r0, r2
34021798:	bf08      	it	eq
3402179a:	2b00      	cmpeq	r3, #0
3402179c:	f000 80c7 	beq.w	3402192e <log+0x1be>
340217a0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
340217a4:	4b6c      	ldr	r3, [pc, #432]	@ (34021958 <log+0x1e8>)
340217a6:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
340217aa:	ee30 0b47 	vsub.f64	d0, d0, d7
340217ae:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
340217b2:	ee20 2b00 	vmul.f64	d2, d0, d0
340217b6:	eea6 7b00 	vfma.f64	d7, d6, d0
340217ba:	ee20 4b02 	vmul.f64	d4, d0, d2
340217be:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
340217c2:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
340217c6:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
340217ca:	eea6 7b02 	vfma.f64	d7, d6, d2
340217ce:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
340217d2:	eea5 6b00 	vfma.f64	d6, d5, d0
340217d6:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
340217da:	eea5 6b02 	vfma.f64	d6, d5, d2
340217de:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
340217e2:	eea3 5b00 	vfma.f64	d5, d3, d0
340217e6:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
340217ea:	eea3 5b02 	vfma.f64	d5, d3, d2
340217ee:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
340217f2:	eea3 5b04 	vfma.f64	d5, d3, d4
340217f6:	eeb0 3b40 	vmov.f64	d3, d0
340217fa:	eea5 6b04 	vfma.f64	d6, d5, d4
340217fe:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
34021802:	eea6 7b04 	vfma.f64	d7, d6, d4
34021806:	eeb0 6b40 	vmov.f64	d6, d0
3402180a:	eeb0 2b47 	vmov.f64	d2, d7
3402180e:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 34021938 <log+0x1c8>
34021812:	eea0 6b07 	vfma.f64	d6, d0, d7
34021816:	eea0 6b47 	vfms.f64	d6, d0, d7
3402181a:	ee26 1b06 	vmul.f64	d1, d6, d6
3402181e:	ee30 8b46 	vsub.f64	d8, d0, d6
34021822:	eea1 3b05 	vfma.f64	d3, d1, d5
34021826:	ee30 7b43 	vsub.f64	d7, d0, d3
3402182a:	ee30 0b06 	vadd.f64	d0, d0, d6
3402182e:	eea1 7b05 	vfma.f64	d7, d1, d5
34021832:	ee25 5b08 	vmul.f64	d5, d5, d8
34021836:	eea5 7b00 	vfma.f64	d7, d5, d0
3402183a:	eea2 7b04 	vfma.f64	d7, d2, d4
3402183e:	ee33 0b07 	vadd.f64	d0, d3, d7
34021842:	ecbd 8b02 	vpop	{d8}
34021846:	bcf0      	pop	{r4, r5, r6, r7}
34021848:	4770      	bx	lr
3402184a:	f1a2 0410 	sub.w	r4, r2, #16
3402184e:	f647 71df 	movw	r1, #32735	@ 0x7fdf
34021852:	428c      	cmp	r4, r1
34021854:	d923      	bls.n	3402189e <log+0x12e>
34021856:	18d9      	adds	r1, r3, r3
34021858:	eb40 0400 	adc.w	r4, r0, r0
3402185c:	4321      	orrs	r1, r4
3402185e:	d105      	bne.n	3402186c <log+0xfc>
34021860:	2001      	movs	r0, #1
34021862:	ecbd 8b02 	vpop	{d8}
34021866:	bcf0      	pop	{r4, r5, r6, r7}
34021868:	f7ff bb1a 	b.w	34020ea0 <__math_divzero>
3402186c:	493b      	ldr	r1, [pc, #236]	@ (3402195c <log+0x1ec>)
3402186e:	4288      	cmp	r0, r1
34021870:	bf08      	it	eq
34021872:	2b00      	cmpeq	r3, #0
34021874:	d0e5      	beq.n	34021842 <log+0xd2>
34021876:	0413      	lsls	r3, r2, #16
34021878:	d403      	bmi.n	34021882 <log+0x112>
3402187a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
3402187e:	4393      	bics	r3, r2
34021880:	d104      	bne.n	3402188c <log+0x11c>
34021882:	ecbd 8b02 	vpop	{d8}
34021886:	bcf0      	pop	{r4, r5, r6, r7}
34021888:	f7ff bb26 	b.w	34020ed8 <__math_invalid>
3402188c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 34021940 <log+0x1d0>
34021890:	ee20 7b07 	vmul.f64	d7, d0, d7
34021894:	ec53 2b17 	vmov	r2, r3, d7
34021898:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
3402189c:	4613      	mov	r3, r2
3402189e:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
340218a2:	492d      	ldr	r1, [pc, #180]	@ (34021958 <log+0x1e8>)
340218a4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
340218a8:	1e1e      	subs	r6, r3, #0
340218aa:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
340218ae:	f3c2 3446 	ubfx	r4, r2, #13, #7
340218b2:	ea4f 5c12 	mov.w	ip, r2, lsr #20
340218b6:	1512      	asrs	r2, r2, #20
340218b8:	eb01 1504 	add.w	r5, r1, r4, lsl #4
340218bc:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
340218c0:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
340218c4:	eba0 070c 	sub.w	r7, r0, ip
340218c8:	ec47 6b16 	vmov	d6, r6, r7
340218cc:	eea7 5b06 	vfma.f64	d5, d7, d6
340218d0:	ee07 2a90 	vmov	s15, r2
340218d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
340218d8:	ed91 4b00 	vldr	d4, [r1]
340218dc:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
340218e0:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
340218e4:	eea4 7b06 	vfma.f64	d7, d4, d6
340218e8:	ee25 2b05 	vmul.f64	d2, d5, d5
340218ec:	ee35 4b07 	vadd.f64	d4, d5, d7
340218f0:	ee25 1b02 	vmul.f64	d1, d5, d2
340218f4:	ee37 0b44 	vsub.f64	d0, d7, d4
340218f8:	ed91 7b02 	vldr	d7, [r1, #8]
340218fc:	ee30 0b05 	vadd.f64	d0, d0, d5
34021900:	eea7 0b06 	vfma.f64	d0, d7, d6
34021904:	ed91 7b04 	vldr	d7, [r1, #16]
34021908:	ed91 6b08 	vldr	d6, [r1, #32]
3402190c:	eea7 0b02 	vfma.f64	d0, d7, d2
34021910:	ed91 7b06 	vldr	d7, [r1, #24]
34021914:	eea6 7b05 	vfma.f64	d7, d6, d5
34021918:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
3402191c:	eea3 6b05 	vfma.f64	d6, d3, d5
34021920:	eea6 7b02 	vfma.f64	d7, d6, d2
34021924:	eea1 0b07 	vfma.f64	d0, d1, d7
34021928:	ee30 0b04 	vadd.f64	d0, d0, d4
3402192c:	e789      	b.n	34021842 <log+0xd2>
3402192e:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 34021948 <log+0x1d8>
34021932:	e786      	b.n	34021842 <log+0xd2>
34021934:	f3af 8000 	nop.w
34021938:	00000000 	.word	0x00000000
3402193c:	41a00000 	.word	0x41a00000
34021940:	00000000 	.word	0x00000000
34021944:	43300000 	.word	0x43300000
	...
34021950:	000308ff 	.word	0x000308ff
34021954:	3ff00000 	.word	0x3ff00000
34021958:	340a2660 	.word	0x340a2660
3402195c:	7ff00000 	.word	0x7ff00000

34021960 <_sbrk>:
34021960:	4a04      	ldr	r2, [pc, #16]	@ (34021974 <_sbrk+0x14>)
34021962:	4603      	mov	r3, r0
34021964:	6811      	ldr	r1, [r2, #0]
34021966:	b909      	cbnz	r1, 3402196c <_sbrk+0xc>
34021968:	4903      	ldr	r1, [pc, #12]	@ (34021978 <_sbrk+0x18>)
3402196a:	6011      	str	r1, [r2, #0]
3402196c:	6810      	ldr	r0, [r2, #0]
3402196e:	4403      	add	r3, r0
34021970:	6013      	str	r3, [r2, #0]
34021972:	4770      	bx	lr
34021974:	3419051c 	.word	0x3419051c
34021978:	34190520 	.word	0x34190520

3402197c <node_convert>:
3402197c:	6982      	ldr	r2, [r0, #24]
3402197e:	8813      	ldrh	r3, [r2, #0]
34021980:	b90b      	cbnz	r3, 34021986 <node_convert+0xa>
34021982:	685b      	ldr	r3, [r3, #4]
34021984:	deff      	udf	#255	@ 0xff
34021986:	6852      	ldr	r2, [r2, #4]
34021988:	6851      	ldr	r1, [r2, #4]
3402198a:	b101      	cbz	r1, 3402198e <node_convert+0x12>
3402198c:	6809      	ldr	r1, [r1, #0]
3402198e:	2b01      	cmp	r3, #1
34021990:	f000 813b 	beq.w	34021c0a <node_convert+0x28e>
34021994:	b5f0      	push	{r4, r5, r6, r7, lr}
34021996:	6915      	ldr	r5, [r2, #16]
34021998:	b083      	sub	sp, #12
3402199a:	b105      	cbz	r5, 3402199e <node_convert+0x22>
3402199c:	682d      	ldr	r5, [r5, #0]
3402199e:	688b      	ldr	r3, [r1, #8]
340219a0:	0a1a      	lsrs	r2, r3, #8
340219a2:	f000 8117 	beq.w	34021bd4 <node_convert+0x258>
340219a6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
340219aa:	f1ae 0e04 	sub.w	lr, lr, #4
340219ae:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
340219b2:	f10e 0e01 	add.w	lr, lr, #1
340219b6:	2401      	movs	r4, #1
340219b8:	f04e e001 	dls	lr, lr
340219bc:	68cb      	ldr	r3, [r1, #12]
340219be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
340219c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
340219c6:	fb02 f404 	mul.w	r4, r2, r4
340219ca:	f00f c007 	le	lr, 340219c2 <node_convert+0x46>
340219ce:	698a      	ldr	r2, [r1, #24]
340219d0:	69ae      	ldr	r6, [r5, #24]
340219d2:	6813      	ldr	r3, [r2, #0]
340219d4:	6890      	ldr	r0, [r2, #8]
340219d6:	f3c3 4243 	ubfx	r2, r3, #17, #4
340219da:	2a01      	cmp	r2, #1
340219dc:	d019      	beq.n	34021a12 <node_convert+0x96>
340219de:	6809      	ldr	r1, [r1, #0]
340219e0:	68b6      	ldr	r6, [r6, #8]
340219e2:	15da      	asrs	r2, r3, #23
340219e4:	2900      	cmp	r1, #0
340219e6:	d02d      	beq.n	34021a44 <node_convert+0xc8>
340219e8:	684d      	ldr	r5, [r1, #4]
340219ea:	f002 0201 	and.w	r2, r2, #1
340219ee:	2d00      	cmp	r5, #0
340219f0:	f000 8094 	beq.w	34021b1c <node_convert+0x1a0>
340219f4:	884b      	ldrh	r3, [r1, #2]
340219f6:	2b00      	cmp	r3, #0
340219f8:	d173      	bne.n	34021ae2 <node_convert+0x166>
340219fa:	2a00      	cmp	r2, #0
340219fc:	f000 8090 	beq.w	34021b20 <node_convert+0x1a4>
34021a00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34021a04:	4622      	mov	r2, r4
34021a06:	4631      	mov	r1, r6
34021a08:	b003      	add	sp, #12
34021a0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34021a0e:	f000 b8ff 	b.w	34021c10 <forward_lite_node_convert_integer_is8of32>
34021a12:	6833      	ldr	r3, [r6, #0]
34021a14:	682d      	ldr	r5, [r5, #0]
34021a16:	15da      	asrs	r2, r3, #23
34021a18:	2d00      	cmp	r5, #0
34021a1a:	f000 808b 	beq.w	34021b34 <node_convert+0x1b8>
34021a1e:	686b      	ldr	r3, [r5, #4]
34021a20:	68b1      	ldr	r1, [r6, #8]
34021a22:	f002 0201 	and.w	r2, r2, #1
34021a26:	2b00      	cmp	r3, #0
34021a28:	d064      	beq.n	34021af4 <node_convert+0x178>
34021a2a:	886d      	ldrh	r5, [r5, #2]
34021a2c:	2d00      	cmp	r5, #0
34021a2e:	d06a      	beq.n	34021b06 <node_convert+0x18a>
34021a30:	681d      	ldr	r5, [r3, #0]
34021a32:	685b      	ldr	r3, [r3, #4]
34021a34:	ed95 0a00 	vldr	s0, [r5]
34021a38:	2a00      	cmp	r2, #0
34021a3a:	f000 80d6 	beq.w	34021bea <node_convert+0x26e>
34021a3e:	f993 3000 	ldrsb.w	r3, [r3]
34021a42:	e05a      	b.n	34021afa <node_convert+0x17e>
34021a44:	f3c3 11c6 	ubfx	r1, r3, #7, #7
34021a48:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
34021a4c:	1b4d      	subs	r5, r1, r5
34021a4e:	f002 0201 	and.w	r2, r2, #1
34021a52:	3540      	adds	r5, #64	@ 0x40
34021a54:	2908      	cmp	r1, #8
34021a56:	eba5 0502 	sub.w	r5, r5, r2
34021a5a:	4631      	mov	r1, r6
34021a5c:	4622      	mov	r2, r4
34021a5e:	f000 80bb 	beq.w	34021bd8 <node_convert+0x25c>
34021a62:	f000 fd03 	bl	3402246c <st_int16_to_f32>
34021a66:	b3d5      	cbz	r5, 34021ade <node_convert+0x162>
34021a68:	ee07 5a90 	vmov	s15, r5
34021a6c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
34021a70:	eef8 0ae7 	vcvt.f32.s32	s1, s15
34021a74:	f000 fdd0 	bl	34022618 <powf>
34021a78:	b38c      	cbz	r4, 34021ade <node_convert+0x162>
34021a7a:	1e63      	subs	r3, r4, #1
34021a7c:	2b02      	cmp	r3, #2
34021a7e:	f240 80c0 	bls.w	34021c02 <node_convert+0x286>
34021a82:	ee10 3a10 	vmov	r3, s0
34021a86:	08a2      	lsrs	r2, r4, #2
34021a88:	eea4 3b10 	vdup.32	q2, r3
34021a8c:	f042 e001 	dls	lr, r2
34021a90:	4633      	mov	r3, r6
34021a92:	ed93 7f00 	ldc	15, cr7, [r3]
34021a96:	ff06 6d54 	vmul.f32	q3, q3, q2
34021a9a:	eca3 7f04 	stc	15, cr7, [r3], #16
34021a9e:	f00f c009 	le	lr, 34021a92 <node_convert+0x116>
34021aa2:	f024 0303 	bic.w	r3, r4, #3
34021aa6:	07a2      	lsls	r2, r4, #30
34021aa8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
34021aac:	d017      	beq.n	34021ade <node_convert+0x162>
34021aae:	edd6 7a00 	vldr	s15, [r6]
34021ab2:	ee67 7a80 	vmul.f32	s15, s15, s0
34021ab6:	1c5a      	adds	r2, r3, #1
34021ab8:	4294      	cmp	r4, r2
34021aba:	edc6 7a00 	vstr	s15, [r6]
34021abe:	d90e      	bls.n	34021ade <node_convert+0x162>
34021ac0:	edd6 7a01 	vldr	s15, [r6, #4]
34021ac4:	ee67 7a80 	vmul.f32	s15, s15, s0
34021ac8:	3302      	adds	r3, #2
34021aca:	429c      	cmp	r4, r3
34021acc:	edc6 7a01 	vstr	s15, [r6, #4]
34021ad0:	d905      	bls.n	34021ade <node_convert+0x162>
34021ad2:	edd6 7a02 	vldr	s15, [r6, #8]
34021ad6:	ee67 7a80 	vmul.f32	s15, s15, s0
34021ada:	edc6 7a02 	vstr	s15, [r6, #8]
34021ade:	b003      	add	sp, #12
34021ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
34021ae2:	682b      	ldr	r3, [r5, #0]
34021ae4:	ed93 0a00 	vldr	s0, [r3]
34021ae8:	686b      	ldr	r3, [r5, #4]
34021aea:	2a00      	cmp	r2, #0
34021aec:	d077      	beq.n	34021bde <node_convert+0x262>
34021aee:	f993 3000 	ldrsb.w	r3, [r3]
34021af2:	e787      	b.n	34021a04 <node_convert+0x88>
34021af4:	b14a      	cbz	r2, 34021b0a <node_convert+0x18e>
34021af6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34021afa:	4622      	mov	r2, r4
34021afc:	b003      	add	sp, #12
34021afe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34021b02:	f000 b889 	b.w	34021c18 <forward_lite_node_convert_integer_if32os8>
34021b06:	2a00      	cmp	r2, #0
34021b08:	d171      	bne.n	34021bee <node_convert+0x272>
34021b0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34021b0e:	4613      	mov	r3, r2
34021b10:	4622      	mov	r2, r4
34021b12:	b003      	add	sp, #12
34021b14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34021b18:	f000 b880 	b.w	34021c1c <forward_lite_node_convert_integer_if32ou8>
34021b1c:	2a00      	cmp	r2, #0
34021b1e:	d160      	bne.n	34021be2 <node_convert+0x266>
34021b20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34021b24:	4613      	mov	r3, r2
34021b26:	4622      	mov	r2, r4
34021b28:	4631      	mov	r1, r6
34021b2a:	b003      	add	sp, #12
34021b2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34021b30:	f000 b870 	b.w	34021c14 <forward_lite_node_convert_integer_iu8of32>
34021b34:	f3c3 17c6 	ubfx	r7, r3, #7, #7
34021b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
34021b3c:	1afb      	subs	r3, r7, r3
34021b3e:	f002 0201 	and.w	r2, r2, #1
34021b42:	3340      	adds	r3, #64	@ 0x40
34021b44:	1a9b      	subs	r3, r3, r2
34021b46:	d03c      	beq.n	34021bc2 <node_convert+0x246>
34021b48:	425b      	negs	r3, r3
34021b4a:	ee00 3a90 	vmov	s1, r3
34021b4e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
34021b52:	eef8 0ae0 	vcvt.f32.s32	s1, s1
34021b56:	9001      	str	r0, [sp, #4]
34021b58:	f000 fd5e 	bl	34022618 <powf>
34021b5c:	9801      	ldr	r0, [sp, #4]
34021b5e:	b384      	cbz	r4, 34021bc2 <node_convert+0x246>
34021b60:	1e63      	subs	r3, r4, #1
34021b62:	2b02      	cmp	r3, #2
34021b64:	d94f      	bls.n	34021c06 <node_convert+0x28a>
34021b66:	ee10 3a10 	vmov	r3, s0
34021b6a:	08a2      	lsrs	r2, r4, #2
34021b6c:	eea4 3b10 	vdup.32	q2, r3
34021b70:	f042 e001 	dls	lr, r2
34021b74:	4603      	mov	r3, r0
34021b76:	ed93 7f00 	ldc	15, cr7, [r3]
34021b7a:	ff06 6d54 	vmul.f32	q3, q3, q2
34021b7e:	eca3 7f04 	stc	15, cr7, [r3], #16
34021b82:	f00f c009 	le	lr, 34021b76 <node_convert+0x1fa>
34021b86:	f024 0503 	bic.w	r5, r4, #3
34021b8a:	07a1      	lsls	r1, r4, #30
34021b8c:	eb00 0385 	add.w	r3, r0, r5, lsl #2
34021b90:	d017      	beq.n	34021bc2 <node_convert+0x246>
34021b92:	edd3 7a00 	vldr	s15, [r3]
34021b96:	ee67 7a80 	vmul.f32	s15, s15, s0
34021b9a:	1c6a      	adds	r2, r5, #1
34021b9c:	42a2      	cmp	r2, r4
34021b9e:	edc3 7a00 	vstr	s15, [r3]
34021ba2:	d20e      	bcs.n	34021bc2 <node_convert+0x246>
34021ba4:	edd3 7a01 	vldr	s15, [r3, #4]
34021ba8:	ee67 7a80 	vmul.f32	s15, s15, s0
34021bac:	3502      	adds	r5, #2
34021bae:	42a5      	cmp	r5, r4
34021bb0:	edc3 7a01 	vstr	s15, [r3, #4]
34021bb4:	d205      	bcs.n	34021bc2 <node_convert+0x246>
34021bb6:	edd3 7a02 	vldr	s15, [r3, #8]
34021bba:	ee67 7a80 	vmul.f32	s15, s15, s0
34021bbe:	edc3 7a02 	vstr	s15, [r3, #8]
34021bc2:	2f08      	cmp	r7, #8
34021bc4:	68b1      	ldr	r1, [r6, #8]
34021bc6:	d016      	beq.n	34021bf6 <node_convert+0x27a>
34021bc8:	4622      	mov	r2, r4
34021bca:	b003      	add	sp, #12
34021bcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34021bd0:	f000 b9be 	b.w	34021f50 <st_f32_to_int16>
34021bd4:	2401      	movs	r4, #1
34021bd6:	e6fa      	b.n	340219ce <node_convert+0x52>
34021bd8:	f000 fc86 	bl	340224e8 <st_int8_to_f32>
34021bdc:	e743      	b.n	34021a66 <node_convert+0xea>
34021bde:	781b      	ldrb	r3, [r3, #0]
34021be0:	e7a1      	b.n	34021b26 <node_convert+0x1aa>
34021be2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34021be6:	462b      	mov	r3, r5
34021be8:	e70c      	b.n	34021a04 <node_convert+0x88>
34021bea:	781b      	ldrb	r3, [r3, #0]
34021bec:	e790      	b.n	34021b10 <node_convert+0x194>
34021bee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34021bf2:	462b      	mov	r3, r5
34021bf4:	e781      	b.n	34021afa <node_convert+0x17e>
34021bf6:	4622      	mov	r2, r4
34021bf8:	b003      	add	sp, #12
34021bfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34021bfe:	f000 ba77 	b.w	340220f0 <st_f32_to_int8>
34021c02:	2300      	movs	r3, #0
34021c04:	e753      	b.n	34021aae <node_convert+0x132>
34021c06:	4603      	mov	r3, r0
34021c08:	e7c3      	b.n	34021b92 <node_convert+0x216>
34021c0a:	2300      	movs	r3, #0
34021c0c:	685b      	ldr	r3, [r3, #4]
34021c0e:	deff      	udf	#255	@ 0xff

34021c10 <forward_lite_node_convert_integer_is8of32>:
34021c10:	f000 b806 	b.w	34021c20 <lite_convert_is8of32>

34021c14 <forward_lite_node_convert_integer_iu8of32>:
34021c14:	f000 b840 	b.w	34021c98 <lite_convert_iu8of32>

34021c18 <forward_lite_node_convert_integer_if32os8>:
34021c18:	f000 b86a 	b.w	34021cf0 <lite_convert_if32os8>

34021c1c <forward_lite_node_convert_integer_if32ou8>:
34021c1c:	f000 b908 	b.w	34021e30 <lite_convert_if32ou8>

34021c20 <lite_convert_is8of32>:
34021c20:	2a00      	cmp	r2, #0
34021c22:	dd37      	ble.n	34021c94 <lite_convert_is8of32+0x74>
34021c24:	b570      	push	{r4, r5, r6, lr}
34021c26:	1885      	adds	r5, r0, r2
34021c28:	1e50      	subs	r0, r2, #1
34021c2a:	1f16      	subs	r6, r2, #4
34021c2c:	f020 0003 	bic.w	r0, r0, #3
34021c30:	ea4f 0c92 	mov.w	ip, r2, lsr #2
34021c34:	ee10 ea10 	vmov	lr, s0
34021c38:	1a36      	subs	r6, r6, r0
34021c3a:	f10c 0c01 	add.w	ip, ip, #1
34021c3e:	e00d      	b.n	34021c5c <lite_convert_is8of32+0x3c>
34021c40:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34021c44:	ffbb 6646 	vcvt.f32.s32	q3, q3
34021c48:	ee37 6e6e 	cdp	14, 3, cr6, cr7, cr14, {3}
34021c4c:	4296      	cmp	r6, r2
34021c4e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021c52:	ed81 7f00 	stc	15, cr7, [r1]
34021c56:	f101 0110 	add.w	r1, r1, #16
34021c5a:	d01a      	beq.n	34021c92 <lite_convert_is8of32+0x72>
34021c5c:	f022 e801 	bfcsel	0, 34021c62 <lite_convert_is8of32+0x42>, 4, hi
34021c60:	eefd 0a10 	vmrs	r0, <impl def 0xd>
34021c64:	b200      	sxth	r0, r0
34021c66:	eeed 0a10 	vmsr	<impl def 0xd>, r0
34021c6a:	1aac      	subs	r4, r5, r2
34021c6c:	f1bc 0c01 	subs.w	ip, ip, #1
34021c70:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021c74:	ed94 6f00 	ldc	15, cr6, [r4]
34021c78:	f1a2 0204 	sub.w	r2, r2, #4
34021c7c:	d1e0      	bne.n	34021c40 <lite_convert_is8of32+0x20>
34021c7e:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34021c82:	ffbb 6646 	vcvt.f32.s32	q3, q3
34021c86:	ee37 6e6e 	cdp	14, 3, cr6, cr7, cr14, {3}
34021c8a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021c8e:	ed81 7f00 	stc	15, cr7, [r1]
34021c92:	bd70      	pop	{r4, r5, r6, pc}
34021c94:	4770      	bx	lr
34021c96:	bf00      	nop

34021c98 <lite_convert_iu8of32>:
34021c98:	2a00      	cmp	r2, #0
34021c9a:	dd27      	ble.n	34021cec <lite_convert_iu8of32+0x54>
34021c9c:	b530      	push	{r4, r5, lr}
34021c9e:	f102 3eff 	add.w	lr, r2, #4294967295
34021ca2:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
34021ca6:	f10e 0e01 	add.w	lr, lr, #1
34021caa:	ee10 5a10 	vmov	r5, s0
34021cae:	f04e e001 	dls	lr, lr
34021cb2:	1884      	adds	r4, r0, r2
34021cb4:	f022 e801 	bfcsel	0, 34021cba <lite_convert_iu8of32+0x22>, 4, hi
34021cb8:	eefd ca10 	vmrs	ip, <impl def 0xd>
34021cbc:	fa0f fc8c 	sxth.w	ip, ip
34021cc0:	eeed ca10 	vmsr	<impl def 0xd>, ip
34021cc4:	1aa0      	subs	r0, r4, r2
34021cc6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021cca:	fd90 6f00 	ldc2	15, cr6, [r0]
34021cce:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34021cd2:	ffbb 6646 	vcvt.f32.s32	q3, q3
34021cd6:	ee37 6e65 	cdp	14, 3, cr6, cr7, cr5, {3}
34021cda:	3a04      	subs	r2, #4
34021cdc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021ce0:	ed81 7f00 	stc	15, cr7, [r1]
34021ce4:	3110      	adds	r1, #16
34021ce6:	f00f c81b 	le	lr, 34021cb4 <lite_convert_iu8of32+0x1c>
34021cea:	bd30      	pop	{r4, r5, pc}
34021cec:	4770      	bx	lr
34021cee:	bf00      	nop

34021cf0 <lite_convert_if32os8>:
34021cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34021cf4:	2a00      	cmp	r2, #0
34021cf6:	ee87 7a00 	vdiv.f32	s14, s14, s0
34021cfa:	f340 8087 	ble.w	34021e0c <lite_convert_if32os8+0x11c>
34021cfe:	ee07 3a90 	vmov	s15, r3
34021d02:	ee17 3a10 	vmov	r3, s14
34021d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34021d0a:	b570      	push	{r4, r5, r6, lr}
34021d0c:	ed2d 8b10 	vpush	{d8-d15}
34021d10:	2640      	movs	r6, #64	@ 0x40
34021d12:	460c      	mov	r4, r1
34021d14:	eea8 3b10 	vdup.32	q4, r3
34021d18:	ee17 1a90 	vmov	r1, s15
34021d1c:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 34021e10 <lite_convert_if32os8+0x120>
34021d20:	ed9f 7b3d 	vldr	d7, [pc, #244]	@ 34021e18 <lite_convert_if32os8+0x128>
34021d24:	1e53      	subs	r3, r2, #1
34021d26:	f023 030f 	bic.w	r3, r3, #15
34021d2a:	b094      	sub	sp, #80	@ 0x50
34021d2c:	f1a2 0510 	sub.w	r5, r2, #16
34021d30:	1aed      	subs	r5, r5, r3
34021d32:	eb0d 0306 	add.w	r3, sp, r6
34021d36:	ed9f 2b3a 	vldr	d2, [pc, #232]	@ 34021e20 <lite_convert_if32os8+0x130>
34021d3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 34021e28 <lite_convert_if32os8+0x138>
34021d3e:	ef26 4156 	vorr	q2, q3, q3
34021d42:	ed83 9f00 	stc	15, cr9, [r3]
34021d46:	eea0 1b10 	vdup.32	q0, r1
34021d4a:	0911      	lsrs	r1, r2, #4
34021d4c:	4414      	add	r4, r2
34021d4e:	3101      	adds	r1, #1
34021d50:	2a10      	cmp	r2, #16
34021d52:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
34021d56:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
34021d5a:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
34021d5e:	fc90 9f61 	ldc2	15, cr9, [r0], {97}	@ 0x61
34021d62:	ea4f 0e82 	mov.w	lr, r2, lsl #2
34021d66:	bfa8      	it	ge
34021d68:	46b6      	movge	lr, r6
34021d6a:	ec8d 8b10 	vstmia	sp, {d8-d15}
34021d6e:	4470      	add	r0, lr
34021d70:	46ee      	mov	lr, sp
34021d72:	ed9e df00 	ldc	15, cr13, [lr]
34021d76:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
34021d7a:	ed9e ff00 	ldc	15, cr15, [lr]
34021d7e:	ef20 a150 	vorr	q5, q0, q0
34021d82:	ef0c ac5e 	vfma.f32	q5, q6, q7
34021d86:	ffbb a04a 	vcvta.s32.f32	q5, q5
34021d8a:	f10d 0e10 	add.w	lr, sp, #16
34021d8e:	ed9e df00 	ldc	15, cr13, [lr]
34021d92:	ee37 4e0b 	cdp	14, 3, cr4, cr7, cr11, {0}
34021d96:	ef20 a150 	vorr	q5, q0, q0
34021d9a:	ef0c ac5e 	vfma.f32	q5, q6, q7
34021d9e:	ffbb a04a 	vcvta.s32.f32	q5, q5
34021da2:	f10d 0e20 	add.w	lr, sp, #32
34021da6:	ee37 6e0b 	cdp	14, 3, cr6, cr7, cr11, {0}
34021daa:	ef20 c150 	vorr	q6, q0, q0
34021dae:	ed9e bf00 	ldc	15, cr11, [lr]
34021db2:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
34021db6:	ef0a cc5e 	vfma.f32	q6, q5, q7
34021dba:	ed9e 9f00 	ldc	15, cr9, [lr]
34021dbe:	ef20 a150 	vorr	q5, q0, q0
34021dc2:	ffbb c04c 	vcvta.s32.f32	q6, q6
34021dc6:	ef08 ac5e 	vfma.f32	q5, q4, q7
34021dca:	f002 e801 	bfcsel	0, 34021dd0 <lite_convert_if32os8+0xe0>, 4, eq
34021dce:	ffbb a04a 	vcvta.s32.f32	q5, q5
34021dd2:	ee37 5e0d 	cdp	14, 3, cr5, cr7, cr13, {0}
34021dd6:	eefd ca10 	vmrs	ip, <impl def 0xd>
34021dda:	ee37 7e0b 	cdp	14, 3, cr7, cr7, cr11, {0}
34021dde:	ee33 2e05 	cdp	14, 3, cr2, cr3, cr5, {0}
34021de2:	fa1f fc8c 	uxth.w	ip, ip
34021de6:	ee33 3e07 	cdp	14, 3, cr3, cr3, cr7, {0}
34021dea:	eeed ca10 	vmsr	<impl def 0xd>, ip
34021dee:	1aa3      	subs	r3, r4, r2
34021df0:	3901      	subs	r1, #1
34021df2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021df6:	ed83 3e00 	stc	14, cr3, [r3]
34021dfa:	f1a2 0210 	sub.w	r2, r2, #16
34021dfe:	d001      	beq.n	34021e04 <lite_convert_if32os8+0x114>
34021e00:	4295      	cmp	r5, r2
34021e02:	d1a5      	bne.n	34021d50 <lite_convert_if32os8+0x60>
34021e04:	b014      	add	sp, #80	@ 0x50
34021e06:	ecbd 8b10 	vpop	{d8-d15}
34021e0a:	bd70      	pop	{r4, r5, r6, pc}
34021e0c:	4770      	bx	lr
34021e0e:	bf00      	nop
	...

34021e30 <lite_convert_if32ou8>:
34021e30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34021e34:	2a00      	cmp	r2, #0
34021e36:	ee87 7a00 	vdiv.f32	s14, s14, s0
34021e3a:	dd76      	ble.n	34021f2a <lite_convert_if32ou8+0xfa>
34021e3c:	ee07 3a90 	vmov	s15, r3
34021e40:	ee17 3a10 	vmov	r3, s14
34021e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
34021e48:	b510      	push	{r4, lr}
34021e4a:	ed2d 8b10 	vpush	{d8-d15}
34021e4e:	ee17 ca90 	vmov	ip, s15
34021e52:	eea8 3b10 	vdup.32	q4, r3
34021e56:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 34021f30 <lite_convert_if32ou8+0x100>
34021e5a:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 34021f38 <lite_convert_if32ou8+0x108>
34021e5e:	f102 3eff 	add.w	lr, r2, #4294967295
34021e62:	b094      	sub	sp, #80	@ 0x50
34021e64:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34021e68:	f10e 0e01 	add.w	lr, lr, #1
34021e6c:	ab10      	add	r3, sp, #64	@ 0x40
34021e6e:	eea0 cb10 	vdup.32	q0, ip
34021e72:	ed9f 2b33 	vldr	d2, [pc, #204]	@ 34021f40 <lite_convert_if32ou8+0x110>
34021e76:	ed9f 3b34 	vldr	d3, [pc, #208]	@ 34021f48 <lite_convert_if32ou8+0x118>
34021e7a:	f04e e001 	dls	lr, lr
34021e7e:	ef26 4156 	vorr	q2, q3, q3
34021e82:	ed83 9f00 	stc	15, cr9, [r3]
34021e86:	4411      	add	r1, r2
34021e88:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
34021e8c:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
34021e90:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
34021e94:	fcb0 9f61 	ldc2	15, cr9, [r0], #388	@ 0x184
34021e98:	466c      	mov	r4, sp
34021e9a:	ec8d 8b10 	vstmia	sp, {d8-d15}
34021e9e:	ed94 df00 	ldc	15, cr13, [r4]
34021ea2:	ac10      	add	r4, sp, #64	@ 0x40
34021ea4:	ed94 ff00 	ldc	15, cr15, [r4]
34021ea8:	ef20 a150 	vorr	q5, q0, q0
34021eac:	ef0c ac5e 	vfma.f32	q5, q6, q7
34021eb0:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34021eb4:	ac04      	add	r4, sp, #16
34021eb6:	ed94 df00 	ldc	15, cr13, [r4]
34021eba:	fe37 4e0b 	cdp2	14, 3, cr4, cr7, cr11, {0}
34021ebe:	ef20 a150 	vorr	q5, q0, q0
34021ec2:	ef0c ac5e 	vfma.f32	q5, q6, q7
34021ec6:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34021eca:	ac08      	add	r4, sp, #32
34021ecc:	fe37 6e0b 	cdp2	14, 3, cr6, cr7, cr11, {0}
34021ed0:	ef20 c150 	vorr	q6, q0, q0
34021ed4:	ed94 bf00 	ldc	15, cr11, [r4]
34021ed8:	ac0c      	add	r4, sp, #48	@ 0x30
34021eda:	ef0a cc5e 	vfma.f32	q6, q5, q7
34021ede:	ed94 9f00 	ldc	15, cr9, [r4]
34021ee2:	ef20 a150 	vorr	q5, q0, q0
34021ee6:	ffbb c0cc 	vcvta.u32.f32	q6, q6
34021eea:	ef08 ac5e 	vfma.f32	q5, q4, q7
34021eee:	f022 e801 	bfcsel	0, 34021ef4 <lite_convert_if32ou8+0xc4>, 4, hi
34021ef2:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34021ef6:	fe37 5e0d 	cdp2	14, 3, cr5, cr7, cr13, {0}
34021efa:	eefd ca10 	vmrs	ip, <impl def 0xd>
34021efe:	fe37 7e0b 	cdp2	14, 3, cr7, cr7, cr11, {0}
34021f02:	fe33 2e05 	cdp2	14, 3, cr2, cr3, cr5, {0}
34021f06:	fa1f fc8c 	uxth.w	ip, ip
34021f0a:	fe33 3e07 	cdp2	14, 3, cr3, cr3, cr7, {0}
34021f0e:	eeed ca10 	vmsr	<impl def 0xd>, ip
34021f12:	1a8b      	subs	r3, r1, r2
34021f14:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34021f18:	ed83 3e00 	stc	14, cr3, [r3]
34021f1c:	3a10      	subs	r2, #16
34021f1e:	f00f c84d 	le	lr, 34021e88 <lite_convert_if32ou8+0x58>
34021f22:	b014      	add	sp, #80	@ 0x50
34021f24:	ecbd 8b10 	vpop	{d8-d15}
34021f28:	bd10      	pop	{r4, pc}
34021f2a:	4770      	bx	lr
34021f2c:	f3af 8000 	nop.w
	...

34021f50 <st_f32_to_int16>:
34021f50:	b530      	push	{r4, r5, lr}
34021f52:	08d5      	lsrs	r5, r2, #3
34021f54:	ed2d 8b08 	vpush	{d8-d11}
34021f58:	d020      	beq.n	34021f9c <st_f32_to_int16+0x4c>
34021f5a:	460c      	mov	r4, r1
34021f5c:	4684      	mov	ip, r0
34021f5e:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 340220d8 <st_f32_to_int16+0x188>
34021f62:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 340220e0 <st_f32_to_int16+0x190>
34021f66:	f045 e001 	dls	lr, r5
34021f6a:	4b5f      	ldr	r3, [pc, #380]	@ (340220e8 <st_f32_to_int16+0x198>)
34021f6c:	fc9c 9f00 	ldc2	15, cr9, [ip], {0}
34021f70:	fcbc 9f20 	ldc2	15, cr9, [ip], #128	@ 0x80
34021f74:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
34021f78:	ee3b 4e63 	cdp	14, 3, cr4, cr11, cr3, {3}
34021f7c:	ffbb 2042 	vcvta.s32.f32	q1, q1
34021f80:	ffbb 4044 	vcvta.s32.f32	q2, q2
34021f84:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
34021f88:	ee37 7e05 	cdp	14, 3, cr7, cr7, cr5, {0}
34021f8c:	eca4 7e88 	stc	14, cr7, [r4], #544	@ 0x220
34021f90:	f00f c015 	le	lr, 34021f6c <st_f32_to_int16+0x1c>
34021f94:	eb00 1045 	add.w	r0, r0, r5, lsl #5
34021f98:	eb01 1105 	add.w	r1, r1, r5, lsl #4
34021f9c:	f012 0207 	ands.w	r2, r2, #7
34021fa0:	f000 8097 	beq.w	340220d2 <st_f32_to_int16+0x182>
34021fa4:	edd0 5a00 	vldr	s11, [r0]
34021fa8:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 340220ec <st_f32_to_int16+0x19c>
34021fac:	ee65 5a86 	vmul.f32	s11, s11, s12
34021fb0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
34021fb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34021fb8:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
34021fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021fc0:	fe77 7a26 	vselgt.f32	s15, s14, s13
34021fc4:	ee77 7aa5 	vadd.f32	s15, s15, s11
34021fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34021fcc:	ee17 3a90 	vmov	r3, s15
34021fd0:	f303 030f 	ssat	r3, #16, r3
34021fd4:	2a01      	cmp	r2, #1
34021fd6:	800b      	strh	r3, [r1, #0]
34021fd8:	d07b      	beq.n	340220d2 <st_f32_to_int16+0x182>
34021fda:	edd0 7a01 	vldr	s15, [r0, #4]
34021fde:	ee67 7a86 	vmul.f32	s15, s15, s12
34021fe2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34021fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34021fea:	fe77 5a26 	vselgt.f32	s11, s14, s13
34021fee:	ee77 7aa5 	vadd.f32	s15, s15, s11
34021ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34021ff6:	ee17 3a90 	vmov	r3, s15
34021ffa:	f303 030f 	ssat	r3, #16, r3
34021ffe:	2a02      	cmp	r2, #2
34022000:	804b      	strh	r3, [r1, #2]
34022002:	d066      	beq.n	340220d2 <st_f32_to_int16+0x182>
34022004:	edd0 7a02 	vldr	s15, [r0, #8]
34022008:	ee67 7a86 	vmul.f32	s15, s15, s12
3402200c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34022010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022014:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022018:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402201c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022020:	ee17 3a90 	vmov	r3, s15
34022024:	f303 030f 	ssat	r3, #16, r3
34022028:	2a03      	cmp	r2, #3
3402202a:	808b      	strh	r3, [r1, #4]
3402202c:	d051      	beq.n	340220d2 <st_f32_to_int16+0x182>
3402202e:	edd0 7a03 	vldr	s15, [r0, #12]
34022032:	ee67 7a86 	vmul.f32	s15, s15, s12
34022036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402203e:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022042:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402204a:	ee17 3a90 	vmov	r3, s15
3402204e:	f303 030f 	ssat	r3, #16, r3
34022052:	2a04      	cmp	r2, #4
34022054:	80cb      	strh	r3, [r1, #6]
34022056:	d03c      	beq.n	340220d2 <st_f32_to_int16+0x182>
34022058:	edd0 7a04 	vldr	s15, [r0, #16]
3402205c:	ee67 7a86 	vmul.f32	s15, s15, s12
34022060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34022064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022068:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402206c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022074:	ee17 3a90 	vmov	r3, s15
34022078:	f303 030f 	ssat	r3, #16, r3
3402207c:	2a05      	cmp	r2, #5
3402207e:	810b      	strh	r3, [r1, #8]
34022080:	d027      	beq.n	340220d2 <st_f32_to_int16+0x182>
34022082:	edd0 7a05 	vldr	s15, [r0, #20]
34022086:	ee67 7a86 	vmul.f32	s15, s15, s12
3402208a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022092:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022096:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402209a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402209e:	ee17 3a90 	vmov	r3, s15
340220a2:	f303 030f 	ssat	r3, #16, r3
340220a6:	2a06      	cmp	r2, #6
340220a8:	814b      	strh	r3, [r1, #10]
340220aa:	d012      	beq.n	340220d2 <st_f32_to_int16+0x182>
340220ac:	edd0 7a06 	vldr	s15, [r0, #24]
340220b0:	ee67 7a86 	vmul.f32	s15, s15, s12
340220b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340220b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340220bc:	fe37 7a26 	vselgt.f32	s14, s14, s13
340220c0:	ee37 7a27 	vadd.f32	s14, s14, s15
340220c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
340220c8:	ee17 3a10 	vmov	r3, s14
340220cc:	f303 030f 	ssat	r3, #16, r3
340220d0:	818b      	strh	r3, [r1, #12]
340220d2:	ecbd 8b08 	vpop	{d8-d11}
340220d6:	bd30      	pop	{r4, r5, pc}
	...
340220e8:	46fffe00 	.word	0x46fffe00
340220ec:	47000000 	.word	0x47000000

340220f0 <st_f32_to_int8>:
340220f0:	b530      	push	{r4, r5, lr}
340220f2:	0915      	lsrs	r5, r2, #4
340220f4:	ed2d 8b10 	vpush	{d8-d15}
340220f8:	f000 81a3 	beq.w	34022442 <st_f32_to_int8+0x352>
340220fc:	ed9f 0bd2 	vldr	d0, [pc, #840]	@ 34022448 <st_f32_to_int8+0x358>
34022100:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 34022450 <st_f32_to_int8+0x360>
34022104:	ea4f 1e05 	mov.w	lr, r5, lsl #4
34022108:	f1ae 0e10 	sub.w	lr, lr, #16
3402210c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34022110:	f10e 0e01 	add.w	lr, lr, #1
34022114:	4684      	mov	ip, r0
34022116:	ed9f 4bd0 	vldr	d4, [pc, #832]	@ 34022458 <st_f32_to_int8+0x368>
3402211a:	ed9f 5bd1 	vldr	d5, [pc, #836]	@ 34022460 <st_f32_to_int8+0x370>
3402211e:	f04e e001 	dls	lr, lr
34022122:	f04f 4386 	mov.w	r3, #1124073472	@ 0x43000000
34022126:	ef20 6150 	vorr	q3, q0, q0
3402212a:	eb01 1405 	add.w	r4, r1, r5, lsl #4
3402212e:	fc9c 9f01 	ldc2	15, cr9, [ip], {1}
34022132:	fc9c 9f21 	ldc2	15, cr9, [ip], {33}	@ 0x21
34022136:	fc9c 9f41 	ldc2	15, cr9, [ip], {65}	@ 0x41
3402213a:	fcbc 9f61 	ldc2	15, cr9, [ip], #388	@ 0x184
3402213e:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
34022142:	ffbb 2042 	vcvta.s32.f32	q1, q1
34022146:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
3402214a:	ee3b 2e63 	cdp	14, 3, cr2, cr11, cr3, {3}
3402214e:	ffbb 2042 	vcvta.s32.f32	q1, q1
34022152:	ee37 0e03 	cdp	14, 3, cr0, cr7, cr3, {0}
34022156:	ee3d 2e63 	cdp	14, 3, cr2, cr13, cr3, {3}
3402215a:	ee3f 8e63 	cdp	14, 3, cr8, cr15, cr3, {3}
3402215e:	ffbb 2042 	vcvta.s32.f32	q1, q1
34022162:	ffbb 8048 	vcvta.s32.f32	q4, q4
34022166:	ee37 7e03 	cdp	14, 3, cr7, cr7, cr3, {0}
3402216a:	ee37 1e09 	cdp	14, 3, cr1, cr7, cr9, {0}
3402216e:	ee33 4e07 	cdp	14, 3, cr4, cr3, cr7, {0}
34022172:	ee33 5e01 	cdp	14, 3, cr5, cr3, cr1, {0}
34022176:	eca1 5e10 	stc	14, cr5, [r1], #64	@ 0x40
3402217a:	f00f c029 	le	lr, 3402212e <st_f32_to_int8+0x3e>
3402217e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
34022182:	f012 030f 	ands.w	r3, r2, #15
34022186:	f000 8159 	beq.w	3402243c <st_f32_to_int8+0x34c>
3402218a:	edd0 5a00 	vldr	s11, [r0]
3402218e:	ed9f 6ab6 	vldr	s12, [pc, #728]	@ 34022468 <st_f32_to_int8+0x378>
34022192:	ee65 5a86 	vmul.f32	s11, s11, s12
34022196:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3402219a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
3402219e:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
340221a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340221a6:	fe77 7a26 	vselgt.f32	s15, s14, s13
340221aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
340221ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340221b2:	ee17 2a90 	vmov	r2, s15
340221b6:	b212      	sxth	r2, r2
340221b8:	f302 0207 	ssat	r2, #8, r2
340221bc:	2b01      	cmp	r3, #1
340221be:	7022      	strb	r2, [r4, #0]
340221c0:	f000 813c 	beq.w	3402243c <st_f32_to_int8+0x34c>
340221c4:	edd0 7a01 	vldr	s15, [r0, #4]
340221c8:	ee67 7a86 	vmul.f32	s15, s15, s12
340221cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340221d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340221d4:	fe77 5a26 	vselgt.f32	s11, s14, s13
340221d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
340221dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340221e0:	ee17 2a90 	vmov	r2, s15
340221e4:	b212      	sxth	r2, r2
340221e6:	f302 0207 	ssat	r2, #8, r2
340221ea:	2b02      	cmp	r3, #2
340221ec:	7062      	strb	r2, [r4, #1]
340221ee:	f000 8125 	beq.w	3402243c <st_f32_to_int8+0x34c>
340221f2:	edd0 7a02 	vldr	s15, [r0, #8]
340221f6:	ee67 7a86 	vmul.f32	s15, s15, s12
340221fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340221fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022202:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022206:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402220e:	ee17 2a90 	vmov	r2, s15
34022212:	b212      	sxth	r2, r2
34022214:	f302 0207 	ssat	r2, #8, r2
34022218:	2b03      	cmp	r3, #3
3402221a:	70a2      	strb	r2, [r4, #2]
3402221c:	f000 810e 	beq.w	3402243c <st_f32_to_int8+0x34c>
34022220:	edd0 7a03 	vldr	s15, [r0, #12]
34022224:	ee67 7a86 	vmul.f32	s15, s15, s12
34022228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022230:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022234:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402223c:	ee17 2a90 	vmov	r2, s15
34022240:	b212      	sxth	r2, r2
34022242:	f302 0207 	ssat	r2, #8, r2
34022246:	2b04      	cmp	r3, #4
34022248:	70e2      	strb	r2, [r4, #3]
3402224a:	f000 80f7 	beq.w	3402243c <st_f32_to_int8+0x34c>
3402224e:	edd0 7a04 	vldr	s15, [r0, #16]
34022252:	ee67 7a86 	vmul.f32	s15, s15, s12
34022256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402225e:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022262:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402226a:	ee17 2a90 	vmov	r2, s15
3402226e:	b212      	sxth	r2, r2
34022270:	f302 0207 	ssat	r2, #8, r2
34022274:	2b05      	cmp	r3, #5
34022276:	7122      	strb	r2, [r4, #4]
34022278:	f000 80e0 	beq.w	3402243c <st_f32_to_int8+0x34c>
3402227c:	edd0 7a05 	vldr	s15, [r0, #20]
34022280:	ee67 7a86 	vmul.f32	s15, s15, s12
34022284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34022288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402228c:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022290:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022298:	ee17 2a90 	vmov	r2, s15
3402229c:	b212      	sxth	r2, r2
3402229e:	f302 0207 	ssat	r2, #8, r2
340222a2:	2b06      	cmp	r3, #6
340222a4:	7162      	strb	r2, [r4, #5]
340222a6:	f000 80c9 	beq.w	3402243c <st_f32_to_int8+0x34c>
340222aa:	edd0 7a06 	vldr	s15, [r0, #24]
340222ae:	ee67 7a86 	vmul.f32	s15, s15, s12
340222b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340222b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340222ba:	fe77 5a26 	vselgt.f32	s11, s14, s13
340222be:	ee77 7aa5 	vadd.f32	s15, s15, s11
340222c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340222c6:	ee17 2a90 	vmov	r2, s15
340222ca:	b212      	sxth	r2, r2
340222cc:	f302 0207 	ssat	r2, #8, r2
340222d0:	2b07      	cmp	r3, #7
340222d2:	71a2      	strb	r2, [r4, #6]
340222d4:	f000 80b2 	beq.w	3402243c <st_f32_to_int8+0x34c>
340222d8:	edd0 7a07 	vldr	s15, [r0, #28]
340222dc:	ee67 7a86 	vmul.f32	s15, s15, s12
340222e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340222e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340222e8:	fe77 5a26 	vselgt.f32	s11, s14, s13
340222ec:	ee77 7aa5 	vadd.f32	s15, s15, s11
340222f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340222f4:	ee17 2a90 	vmov	r2, s15
340222f8:	b212      	sxth	r2, r2
340222fa:	f302 0207 	ssat	r2, #8, r2
340222fe:	2b08      	cmp	r3, #8
34022300:	71e2      	strb	r2, [r4, #7]
34022302:	f000 809b 	beq.w	3402243c <st_f32_to_int8+0x34c>
34022306:	edd0 7a08 	vldr	s15, [r0, #32]
3402230a:	ee67 7a86 	vmul.f32	s15, s15, s12
3402230e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34022312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022316:	fe37 7a26 	vselgt.f32	s14, s14, s13
3402231a:	ee77 7a87 	vadd.f32	s15, s15, s14
3402231e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022322:	ee17 2a90 	vmov	r2, s15
34022326:	b212      	sxth	r2, r2
34022328:	f302 0207 	ssat	r2, #8, r2
3402232c:	2b09      	cmp	r3, #9
3402232e:	7222      	strb	r2, [r4, #8]
34022330:	f000 8084 	beq.w	3402243c <st_f32_to_int8+0x34c>
34022334:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
34022338:	ee67 7a86 	vmul.f32	s15, s15, s12
3402233c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34022340:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34022344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022348:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402234c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022354:	ee17 2a90 	vmov	r2, s15
34022358:	b212      	sxth	r2, r2
3402235a:	f302 0207 	ssat	r2, #8, r2
3402235e:	2b0a      	cmp	r3, #10
34022360:	7262      	strb	r2, [r4, #9]
34022362:	d06b      	beq.n	3402243c <st_f32_to_int8+0x34c>
34022364:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
34022368:	ee67 7a86 	vmul.f32	s15, s15, s12
3402236c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34022370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022374:	fe77 5a26 	vselgt.f32	s11, s14, s13
34022378:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402237c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022380:	ee17 2a90 	vmov	r2, s15
34022384:	b212      	sxth	r2, r2
34022386:	f302 0207 	ssat	r2, #8, r2
3402238a:	2b0b      	cmp	r3, #11
3402238c:	72a2      	strb	r2, [r4, #10]
3402238e:	d055      	beq.n	3402243c <st_f32_to_int8+0x34c>
34022390:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
34022394:	ee67 7a86 	vmul.f32	s15, s15, s12
34022398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340223a0:	fe77 5a26 	vselgt.f32	s11, s14, s13
340223a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
340223a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340223ac:	ee17 2a90 	vmov	r2, s15
340223b0:	b212      	sxth	r2, r2
340223b2:	f302 0207 	ssat	r2, #8, r2
340223b6:	2b0c      	cmp	r3, #12
340223b8:	72e2      	strb	r2, [r4, #11]
340223ba:	d03f      	beq.n	3402243c <st_f32_to_int8+0x34c>
340223bc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
340223c0:	ee67 7a86 	vmul.f32	s15, s15, s12
340223c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340223c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340223cc:	fe77 5a26 	vselgt.f32	s11, s14, s13
340223d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
340223d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340223d8:	ee17 2a90 	vmov	r2, s15
340223dc:	b212      	sxth	r2, r2
340223de:	f302 0207 	ssat	r2, #8, r2
340223e2:	2b0d      	cmp	r3, #13
340223e4:	7322      	strb	r2, [r4, #12]
340223e6:	d029      	beq.n	3402243c <st_f32_to_int8+0x34c>
340223e8:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
340223ec:	ee67 7a86 	vmul.f32	s15, s15, s12
340223f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340223f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340223f8:	fe77 5a26 	vselgt.f32	s11, s14, s13
340223fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
34022400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022404:	ee17 2a90 	vmov	r2, s15
34022408:	b212      	sxth	r2, r2
3402240a:	f302 0207 	ssat	r2, #8, r2
3402240e:	2b0e      	cmp	r3, #14
34022410:	7362      	strb	r2, [r4, #13]
34022412:	d013      	beq.n	3402243c <st_f32_to_int8+0x34c>
34022414:	edd0 7a0e 	vldr	s15, [r0, #56]	@ 0x38
34022418:	ee27 6a86 	vmul.f32	s12, s15, s12
3402241c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
34022420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022424:	fe77 7a26 	vselgt.f32	s15, s14, s13
34022428:	ee77 7a86 	vadd.f32	s15, s15, s12
3402242c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34022430:	ee17 3a90 	vmov	r3, s15
34022434:	b21b      	sxth	r3, r3
34022436:	f303 0307 	ssat	r3, #8, r3
3402243a:	73a3      	strb	r3, [r4, #14]
3402243c:	ecbd 8b10 	vpop	{d8-d15}
34022440:	bd30      	pop	{r4, r5, pc}
34022442:	460c      	mov	r4, r1
34022444:	e69d      	b.n	34022182 <st_f32_to_int8+0x92>
34022446:	bf00      	nop
	...
34022468:	43000000 	.word	0x43000000

3402246c <st_int16_to_f32>:
3402246c:	ea5f 0c92 	movs.w	ip, r2, lsr #2
34022470:	b510      	push	{r4, lr}
34022472:	d00f      	beq.n	34022494 <st_int16_to_f32+0x28>
34022474:	4604      	mov	r4, r0
34022476:	460b      	mov	r3, r1
34022478:	f04c e001 	dls	lr, ip
3402247c:	ecbc 6f04 	ldc	15, cr6, [ip], #16
34022480:	efb1 6e56 	vcvt.f32.s32	q3, q3, #15
34022484:	eca3 7f04 	stc	15, cr7, [r3], #16
34022488:	f00f c009 	le	lr, 3402247c <st_int16_to_f32+0x10>
3402248c:	eb01 110c 	add.w	r1, r1, ip, lsl #4
34022490:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
34022494:	f012 0203 	ands.w	r2, r2, #3
34022498:	d023      	beq.n	340224e2 <st_int16_to_f32+0x76>
3402249a:	f9b0 3000 	ldrsh.w	r3, [r0]
3402249e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 340224e4 <st_int16_to_f32+0x78>
340224a2:	ee07 3a90 	vmov	s15, r3
340224a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340224aa:	ee67 7a87 	vmul.f32	s15, s15, s14
340224ae:	2a01      	cmp	r2, #1
340224b0:	edc1 7a00 	vstr	s15, [r1]
340224b4:	d015      	beq.n	340224e2 <st_int16_to_f32+0x76>
340224b6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
340224ba:	2a02      	cmp	r2, #2
340224bc:	ee07 3a90 	vmov	s15, r3
340224c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340224c4:	ee67 7a87 	vmul.f32	s15, s15, s14
340224c8:	edc1 7a01 	vstr	s15, [r1, #4]
340224cc:	d009      	beq.n	340224e2 <st_int16_to_f32+0x76>
340224ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
340224d2:	ee07 3a90 	vmov	s15, r3
340224d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340224da:	ee67 7a87 	vmul.f32	s15, s15, s14
340224de:	edc1 7a02 	vstr	s15, [r1, #8]
340224e2:	bd10      	pop	{r4, pc}
340224e4:	38000000 	.word	0x38000000

340224e8 <st_int8_to_f32>:
340224e8:	ea5f 0c92 	movs.w	ip, r2, lsr #2
340224ec:	b510      	push	{r4, lr}
340224ee:	d03e      	beq.n	3402256e <st_int8_to_f32+0x86>
340224f0:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
340224f4:	f1ae 0e04 	sub.w	lr, lr, #4
340224f8:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
340224fc:	f10e 0e01 	add.w	lr, lr, #1
34022500:	460b      	mov	r3, r1
34022502:	f04e e001 	dls	lr, lr
34022506:	eb00 048c 	add.w	r4, r0, ip, lsl #2
3402250a:	ecb0 6f04 	ldc	15, cr6, [r0], #16
3402250e:	efb9 6e56 	vcvt.f32.s32	q3, q3, #7
34022512:	eca3 7f04 	stc	15, cr7, [r3], #16
34022516:	f00f c009 	le	lr, 3402250a <st_int8_to_f32+0x22>
3402251a:	eb01 110c 	add.w	r1, r1, ip, lsl #4
3402251e:	f012 0203 	ands.w	r2, r2, #3
34022522:	d023      	beq.n	3402256c <st_int8_to_f32+0x84>
34022524:	f994 3000 	ldrsb.w	r3, [r4]
34022528:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 34022574 <st_int8_to_f32+0x8c>
3402252c:	ee07 3a90 	vmov	s15, r3
34022530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34022534:	ee67 7a87 	vmul.f32	s15, s15, s14
34022538:	2a01      	cmp	r2, #1
3402253a:	edc1 7a00 	vstr	s15, [r1]
3402253e:	d015      	beq.n	3402256c <st_int8_to_f32+0x84>
34022540:	f994 3001 	ldrsb.w	r3, [r4, #1]
34022544:	2a02      	cmp	r2, #2
34022546:	ee07 3a90 	vmov	s15, r3
3402254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3402254e:	ee67 7a87 	vmul.f32	s15, s15, s14
34022552:	edc1 7a01 	vstr	s15, [r1, #4]
34022556:	d009      	beq.n	3402256c <st_int8_to_f32+0x84>
34022558:	f994 3002 	ldrsb.w	r3, [r4, #2]
3402255c:	ee07 3a90 	vmov	s15, r3
34022560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34022564:	ee67 7a87 	vmul.f32	s15, s15, s14
34022568:	edc1 7a02 	vstr	s15, [r1, #8]
3402256c:	bd10      	pop	{r4, pc}
3402256e:	4604      	mov	r4, r0
34022570:	e7d5      	b.n	3402251e <st_int8_to_f32+0x36>
34022572:	bf00      	nop
34022574:	3c000000 	.word	0x3c000000

34022578 <sniprintf>:
34022578:	b40c      	push	{r2, r3}
3402257a:	4b19      	ldr	r3, [pc, #100]	@ (340225e0 <sniprintf+0x68>)
3402257c:	b530      	push	{r4, r5, lr}
3402257e:	1e0c      	subs	r4, r1, #0
34022580:	b09d      	sub	sp, #116	@ 0x74
34022582:	681d      	ldr	r5, [r3, #0]
34022584:	da08      	bge.n	34022598 <sniprintf+0x20>
34022586:	238b      	movs	r3, #139	@ 0x8b
34022588:	f04f 30ff 	mov.w	r0, #4294967295
3402258c:	602b      	str	r3, [r5, #0]
3402258e:	b01d      	add	sp, #116	@ 0x74
34022590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34022594:	b002      	add	sp, #8
34022596:	4770      	bx	lr
34022598:	f44f 7302 	mov.w	r3, #520	@ 0x208
3402259c:	9002      	str	r0, [sp, #8]
3402259e:	9006      	str	r0, [sp, #24]
340225a0:	a902      	add	r1, sp, #8
340225a2:	f8ad 3014 	strh.w	r3, [sp, #20]
340225a6:	f04f 0300 	mov.w	r3, #0
340225aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
340225ac:	4628      	mov	r0, r5
340225ae:	931b      	str	r3, [sp, #108]	@ 0x6c
340225b0:	bf14      	ite	ne
340225b2:	f104 33ff 	addne.w	r3, r4, #4294967295
340225b6:	4623      	moveq	r3, r4
340225b8:	9304      	str	r3, [sp, #16]
340225ba:	9307      	str	r3, [sp, #28]
340225bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
340225c0:	f8ad 3016 	strh.w	r3, [sp, #22]
340225c4:	ab21      	add	r3, sp, #132	@ 0x84
340225c6:	9301      	str	r3, [sp, #4]
340225c8:	f7fd ffb2 	bl	34020530 <_svfiprintf_r>
340225cc:	1c43      	adds	r3, r0, #1
340225ce:	bfbc      	itt	lt
340225d0:	238b      	movlt	r3, #139	@ 0x8b
340225d2:	602b      	strlt	r3, [r5, #0]
340225d4:	2c00      	cmp	r4, #0
340225d6:	d0da      	beq.n	3402258e <sniprintf+0x16>
340225d8:	9b02      	ldr	r3, [sp, #8]
340225da:	2200      	movs	r2, #0
340225dc:	701a      	strb	r2, [r3, #0]
340225de:	e7d6      	b.n	3402258e <sniprintf+0x16>
340225e0:	340a3258 	.word	0x340a3258

340225e4 <checkint>:
340225e4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
340225e8:	2b7e      	cmp	r3, #126	@ 0x7e
340225ea:	d910      	bls.n	3402260e <checkint+0x2a>
340225ec:	2b96      	cmp	r3, #150	@ 0x96
340225ee:	d80c      	bhi.n	3402260a <checkint+0x26>
340225f0:	2201      	movs	r2, #1
340225f2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
340225f6:	fa02 f303 	lsl.w	r3, r2, r3
340225fa:	1e5a      	subs	r2, r3, #1
340225fc:	4202      	tst	r2, r0
340225fe:	d106      	bne.n	3402260e <checkint+0x2a>
34022600:	4203      	tst	r3, r0
34022602:	bf14      	ite	ne
34022604:	2001      	movne	r0, #1
34022606:	2002      	moveq	r0, #2
34022608:	4770      	bx	lr
3402260a:	2002      	movs	r0, #2
3402260c:	4770      	bx	lr
3402260e:	2000      	movs	r0, #0
34022610:	4770      	bx	lr
34022612:	0000      	movs	r0, r0
34022614:	0000      	movs	r0, r0
	...

34022618 <powf>:
34022618:	b537      	push	{r0, r1, r2, r4, r5, lr}
3402261a:	ee10 1a10 	vmov	r1, s0
3402261e:	ee10 4a90 	vmov	r4, s1
34022622:	eef0 7a40 	vmov.f32	s15, s0
34022626:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
3402262a:	0063      	lsls	r3, r4, #1
3402262c:	eeb0 7a60 	vmov.f32	s14, s1
34022630:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34022634:	f103 30ff 	add.w	r0, r3, #4294967295
34022638:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
3402263c:	d252      	bcs.n	340226e4 <powf+0xcc>
3402263e:	4290      	cmp	r0, r2
34022640:	d258      	bcs.n	340226f4 <powf+0xdc>
34022642:	2000      	movs	r0, #0
34022644:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
34022648:	4a9f      	ldr	r2, [pc, #636]	@ (340228c8 <powf+0x2b0>)
3402264a:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
3402264e:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
34022652:	f3c3 44c3 	ubfx	r4, r3, #19, #4
34022656:	f36f 0316 	bfc	r3, #0, #23
3402265a:	1ac9      	subs	r1, r1, r3
3402265c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
34022660:	15db      	asrs	r3, r3, #23
34022662:	ee07 1a90 	vmov	s15, r1
34022666:	ed94 4b00 	vldr	d4, [r4]
3402266a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
3402266e:	ee07 3a90 	vmov	s15, r3
34022672:	ed94 5b02 	vldr	d5, [r4, #8]
34022676:	eea4 2b06 	vfma.f64	d2, d4, d6
3402267a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
3402267e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34022682:	ee36 6b05 	vadd.f64	d6, d6, d5
34022686:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
3402268a:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
3402268e:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
34022692:	ee22 4b02 	vmul.f64	d4, d2, d2
34022696:	eea2 1b05 	vfma.f64	d1, d2, d5
3402269a:	ee24 0b04 	vmul.f64	d0, d4, d4
3402269e:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
340226a2:	eea2 5b03 	vfma.f64	d5, d2, d3
340226a6:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
340226aa:	eea2 6b03 	vfma.f64	d6, d2, d3
340226ae:	eea4 6b05 	vfma.f64	d6, d4, d5
340226b2:	eea1 6b00 	vfma.f64	d6, d1, d0
340226b6:	ee27 7b06 	vmul.f64	d7, d7, d6
340226ba:	ee17 3a90 	vmov	r3, s15
340226be:	f3c3 32cf 	ubfx	r2, r3, #15, #16
340226c2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
340226c6:	429a      	cmp	r2, r3
340226c8:	f0c0 8098 	bcc.w	340227fc <powf+0x1e4>
340226cc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 340228a8 <powf+0x290>
340226d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
340226d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340226d8:	dd79      	ble.n	340227ce <powf+0x1b6>
340226da:	b003      	add	sp, #12
340226dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
340226e0:	f7fe bfaa 	b.w	34021638 <__math_oflowf>
340226e4:	4290      	cmp	r0, r2
340226e6:	d330      	bcc.n	3402274a <powf+0x132>
340226e8:	b12b      	cbz	r3, 340226f6 <powf+0xde>
340226ea:	0049      	lsls	r1, r1, #1
340226ec:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
340226f0:	d808      	bhi.n	34022704 <powf+0xec>
340226f2:	e015      	b.n	34022720 <powf+0x108>
340226f4:	b953      	cbnz	r3, 3402270c <powf+0xf4>
340226f6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
340226fa:	0049      	lsls	r1, r1, #1
340226fc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
34022700:	f240 80ca 	bls.w	34022898 <powf+0x280>
34022704:	ee37 0a87 	vadd.f32	s0, s15, s14
34022708:	b003      	add	sp, #12
3402270a:	bd30      	pop	{r4, r5, pc}
3402270c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
34022710:	d105      	bne.n	3402271e <powf+0x106>
34022712:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
34022716:	0064      	lsls	r4, r4, #1
34022718:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
3402271c:	e7f0      	b.n	34022700 <powf+0xe8>
3402271e:	0049      	lsls	r1, r1, #1
34022720:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
34022724:	d1ee      	bne.n	34022704 <powf+0xec>
34022726:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
3402272a:	f000 80b5 	beq.w	34022898 <powf+0x280>
3402272e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34022732:	ea6f 0404 	mvn.w	r4, r4
34022736:	bf34      	ite	cc
34022738:	2100      	movcc	r1, #0
3402273a:	2101      	movcs	r1, #1
3402273c:	0fe4      	lsrs	r4, r4, #31
3402273e:	42a1      	cmp	r1, r4
34022740:	f040 80ad 	bne.w	3402289e <powf+0x286>
34022744:	ee27 0a07 	vmul.f32	s0, s14, s14
34022748:	e7de      	b.n	34022708 <powf+0xf0>
3402274a:	004d      	lsls	r5, r1, #1
3402274c:	1e6b      	subs	r3, r5, #1
3402274e:	4293      	cmp	r3, r2
34022750:	d31b      	bcc.n	3402278a <powf+0x172>
34022752:	2900      	cmp	r1, #0
34022754:	ee20 0a00 	vmul.f32	s0, s0, s0
34022758:	da0e      	bge.n	34022778 <powf+0x160>
3402275a:	4620      	mov	r0, r4
3402275c:	f7ff ff42 	bl	340225e4 <checkint>
34022760:	2801      	cmp	r0, #1
34022762:	d109      	bne.n	34022778 <powf+0x160>
34022764:	eeb1 0a40 	vneg.f32	s0, s0
34022768:	b945      	cbnz	r5, 3402277c <powf+0x164>
3402276a:	2c00      	cmp	r4, #0
3402276c:	dacc      	bge.n	34022708 <powf+0xf0>
3402276e:	b003      	add	sp, #12
34022770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34022774:	f7fe bf66 	b.w	34021644 <__math_divzerof>
34022778:	2000      	movs	r0, #0
3402277a:	e7f5      	b.n	34022768 <powf+0x150>
3402277c:	2c00      	cmp	r4, #0
3402277e:	dac3      	bge.n	34022708 <powf+0xf0>
34022780:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34022784:	ee87 0a80 	vdiv.f32	s0, s15, s0
34022788:	e7be      	b.n	34022708 <powf+0xf0>
3402278a:	2900      	cmp	r1, #0
3402278c:	da1d      	bge.n	340227ca <powf+0x1b2>
3402278e:	4620      	mov	r0, r4
34022790:	f7ff ff28 	bl	340225e4 <checkint>
34022794:	b920      	cbnz	r0, 340227a0 <powf+0x188>
34022796:	b003      	add	sp, #12
34022798:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3402279c:	f7fe bf64 	b.w	34021668 <__math_invalidf>
340227a0:	1e43      	subs	r3, r0, #1
340227a2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
340227a6:	4258      	negs	r0, r3
340227a8:	4158      	adcs	r0, r3
340227aa:	0400      	lsls	r0, r0, #16
340227ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
340227b0:	f4bf af48 	bcs.w	34022644 <powf+0x2c>
340227b4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 340228cc <powf+0x2b4>
340227b8:	ee27 0aa6 	vmul.f32	s0, s15, s13
340227bc:	ee10 3a10 	vmov	r3, s0
340227c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340227c4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
340227c8:	e73c      	b.n	34022644 <powf+0x2c>
340227ca:	2000      	movs	r0, #0
340227cc:	e7ee      	b.n	340227ac <powf+0x194>
340227ce:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 340228b0 <powf+0x298>
340227d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
340227d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340227da:	dd45      	ble.n	34022868 <powf+0x250>
340227dc:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
340227e0:	b3d0      	cbz	r0, 34022858 <powf+0x240>
340227e2:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
340227e6:	9301      	str	r3, [sp, #4]
340227e8:	eddd 6a01 	vldr	s13, [sp, #4]
340227ec:	ee76 6a66 	vsub.f32	s13, s12, s13
340227f0:	eef4 6a46 	vcmp.f32	s13, s12
340227f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340227f8:	f47f af6f 	bne.w	340226da <powf+0xc2>
340227fc:	4b34      	ldr	r3, [pc, #208]	@ (340228d0 <powf+0x2b8>)
340227fe:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34022802:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
34022806:	ee37 6b05 	vadd.f64	d6, d7, d5
3402280a:	ee16 2a10 	vmov	r2, s12
3402280e:	ee36 6b45 	vsub.f64	d6, d6, d5
34022812:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
34022816:	ee37 7b46 	vsub.f64	d7, d7, d6
3402281a:	f002 011f 	and.w	r1, r2, #31
3402281e:	1880      	adds	r0, r0, r2
34022820:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
34022824:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
34022828:	ee27 4b07 	vmul.f64	d4, d7, d7
3402282c:	2100      	movs	r1, #0
3402282e:	686d      	ldr	r5, [r5, #4]
34022830:	190a      	adds	r2, r1, r4
34022832:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
34022836:	eea7 6b05 	vfma.f64	d6, d7, d5
3402283a:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
3402283e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
34022842:	eea7 0b05 	vfma.f64	d0, d7, d5
34022846:	ec43 2b17 	vmov	d7, r2, r3
3402284a:	eea6 0b04 	vfma.f64	d0, d6, d4
3402284e:	ee20 0b07 	vmul.f64	d0, d0, d7
34022852:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34022856:	e757      	b.n	34022708 <powf+0xf0>
34022858:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
3402285c:	9300      	str	r3, [sp, #0]
3402285e:	eddd 6a00 	vldr	s13, [sp]
34022862:	ee76 6a86 	vadd.f32	s13, s13, s12
34022866:	e7c3      	b.n	340227f0 <powf+0x1d8>
34022868:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 340228b8 <powf+0x2a0>
3402286c:	eeb4 7bc6 	vcmpe.f64	d7, d6
34022870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022874:	d804      	bhi.n	34022880 <powf+0x268>
34022876:	b003      	add	sp, #12
34022878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3402287c:	f7fe bed0 	b.w	34021620 <__math_uflowf>
34022880:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 340228c0 <powf+0x2a8>
34022884:	eeb4 7bc6 	vcmpe.f64	d7, d6
34022888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402288c:	d5b6      	bpl.n	340227fc <powf+0x1e4>
3402288e:	b003      	add	sp, #12
34022890:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34022894:	f7fe beca 	b.w	3402162c <__math_may_uflowf>
34022898:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3402289c:	e734      	b.n	34022708 <powf+0xf0>
3402289e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 340228d4 <powf+0x2bc>
340228a2:	e731      	b.n	34022708 <powf+0xf0>
340228a4:	f3af 8000 	nop.w
340228a8:	ffd1d571 	.word	0xffd1d571
340228ac:	405fffff 	.word	0x405fffff
340228b0:	ffa3aae2 	.word	0xffa3aae2
340228b4:	405fffff 	.word	0x405fffff
340228b8:	00000000 	.word	0x00000000
340228bc:	c062c000 	.word	0xc062c000
340228c0:	00000000 	.word	0x00000000
340228c4:	c062a000 	.word	0xc062a000
340228c8:	340a2ef0 	.word	0x340a2ef0
340228cc:	4b000000 	.word	0x4b000000
340228d0:	340a23f8 	.word	0x340a23f8
340228d4:	00000000 	.word	0x00000000

340228d8 <_init>:
340228d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340228da:	bf00      	nop
340228dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
340228de:	bc08      	pop	{r3}
340228e0:	469e      	mov	lr, r3
340228e2:	4770      	bx	lr

340228e4 <_fini>:
340228e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340228e6:	bf00      	nop
340228e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
340228ea:	bc08      	pop	{r3}
340228ec:	469e      	mov	lr, r3
340228ee:	4770      	bx	lr

340228f0 <app_clean_invalidate_dbg>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
340228f0:	2300      	movs	r3, #0
340228f2:	4a13      	ldr	r2, [pc, #76]	@ (34022940 <app_clean_invalidate_dbg+0x50>)
}
#endif

/* Allow to debug with cache enable */
__attribute__ ((section (".keep_me"))) void app_clean_invalidate_dbg()
{
340228f4:	b570      	push	{r4, r5, r6, lr}
340228f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340228fa:	f3bf 8f4f 	dsb	sy
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
340228fe:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
34022902:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34022906:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3402290a:	f3c3 334e 	ubfx	r3, r3, #13, #15
3402290e:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
34022910:	f100 0e01 	add.w	lr, r0, #1
34022914:	4601      	mov	r1, r0
34022916:	f04e e001 	dls	lr, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3402291a:	ea03 0604 	and.w	r6, r3, r4
3402291e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
34022922:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
34022926:	3901      	subs	r1, #1
34022928:	f00f c807 	le	lr, 3402291e <app_clean_invalidate_dbg+0x2e>
    } while(sets-- != 0U);
3402292c:	3b20      	subs	r3, #32
3402292e:	f113 0f20 	cmn.w	r3, #32
34022932:	d1ed      	bne.n	34022910 <app_clean_invalidate_dbg+0x20>
34022934:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34022938:	f3bf 8f6f 	isb	sy
  SCB_CleanInvalidateDCache();
}
3402293c:	bd70      	pop	{r4, r5, r6, pc}
3402293e:	bf00      	nop
34022940:	e000ed00 	.word	0xe000ed00

Disassembly of section .gnu.sgstubs:

34022960 <SECURE_SystemCoreClockUpdate>:
34022960:	e97f e97f 	sg
34022964:	f7ec bd74 	b.w	3400f450 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
