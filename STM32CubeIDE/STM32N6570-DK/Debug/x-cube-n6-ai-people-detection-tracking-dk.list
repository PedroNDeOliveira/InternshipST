
x-cube-n6-ai-people-detection-tracking-dk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025994  34000750  34000750  00000750  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .gnu.sgstubs  00000020  34026100  34026100  00026100  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000e2b70  34026120  34026120  00026120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .version      0000000c  34108c90  34108c90  00108c90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  34108c9c  34108c9c  0010cfe8  2**0
                  CONTENTS
  6 .ARM          00000008  34108c9c  34108c9c  00108c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  34108ca4  3410cfe8  0010cfe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  34108ca4  34108ca4  00108ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  34108ca8  34108ca8  00108ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         0000433c  34108cac  34108cac  00108cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000ed758  3410d000  3410d000  0010cfe8  2**5
                  ALLOC
 12 ._user_heap_stack 00001200  341fa758  341fa758  0010cfe8  2**0
                  ALLOC
 13 .psram_section 00672000  91000000  91000000  0010d000  2**5
                  ALLOC
 14 .ARM.attributes 0000003a  00000000  00000000  0010cfe8  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b5b5a  00000000  00000000  0010d022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000103ab  00000000  00000000  001c2b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0004750a  00000000  00000000  001d2f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004488  00000000  00000000  0021a438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00006633  00000000  00000000  0021e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0009e894  00000000  00000000  00224ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000885fc  00000000  00000000  002c3787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    003ed311  00000000  00000000  0034bd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000c9  00000000  00000000  00739094  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000edd0  00000000  00000000  00739160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000b4  00000000  00000000  00747f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34000750 <__do_global_dtors_aux>:
34000750:	b510      	push	{r4, lr}
34000752:	4c05      	ldr	r4, [pc, #20]	@ (34000768 <__do_global_dtors_aux+0x18>)
34000754:	7823      	ldrb	r3, [r4, #0]
34000756:	b933      	cbnz	r3, 34000766 <__do_global_dtors_aux+0x16>
34000758:	4b04      	ldr	r3, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x1c>)
3400075a:	b113      	cbz	r3, 34000762 <__do_global_dtors_aux+0x12>
3400075c:	4804      	ldr	r0, [pc, #16]	@ (34000770 <__do_global_dtors_aux+0x20>)
3400075e:	f3af 8000 	nop.w
34000762:	2301      	movs	r3, #1
34000764:	7023      	strb	r3, [r4, #0]
34000766:	bd10      	pop	{r4, pc}
34000768:	3410d000 	.word	0x3410d000
3400076c:	00000000 	.word	0x00000000
34000770:	34026078 	.word	0x34026078

34000774 <frame_dummy>:
34000774:	b508      	push	{r3, lr}
34000776:	4b03      	ldr	r3, [pc, #12]	@ (34000784 <frame_dummy+0x10>)
34000778:	b11b      	cbz	r3, 34000782 <frame_dummy+0xe>
3400077a:	4903      	ldr	r1, [pc, #12]	@ (34000788 <frame_dummy+0x14>)
3400077c:	4803      	ldr	r0, [pc, #12]	@ (3400078c <frame_dummy+0x18>)
3400077e:	f3af 8000 	nop.w
34000782:	bd08      	pop	{r3, pc}
34000784:	00000000 	.word	0x00000000
34000788:	3410d004 	.word	0x3410d004
3400078c:	34026078 	.word	0x34026078

34000790 <strlen>:
34000790:	4603      	mov	r3, r0
34000792:	f813 2b01 	ldrb.w	r2, [r3], #1
34000796:	2a00      	cmp	r2, #0
34000798:	d1fb      	bne.n	34000792 <strlen+0x2>
3400079a:	1a18      	subs	r0, r3, r0
3400079c:	3801      	subs	r0, #1
3400079e:	4770      	bx	lr

340007a0 <aKNCUkZSff>:
340007a0:	ed90 5aad 	vldr	s10, [r0, #692]	@ 0x2b4
340007a4:	b530      	push	{r4, r5, lr}
340007a6:	ed2d 8b10 	vpush	{d8-d15}
340007aa:	ed90 7ba8 	vldr	d7, [r0, #672]	@ 0x2a0
340007ae:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
340007b2:	b089      	sub	sp, #36	@ 0x24
340007b4:	ed8d 7b00 	vstr	d7, [sp]
340007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340007bc:	ed90 7ba4 	vldr	d7, [r0, #656]	@ 0x290
340007c0:	4604      	mov	r4, r0
340007c2:	ed91 4a01 	vldr	s8, [r1, #4]
340007c6:	ed91 2a00 	vldr	s4, [r1]
340007ca:	ed91 fb02 	vldr	d15, [r1, #8]
340007ce:	ed91 eb04 	vldr	d14, [r1, #16]
340007d2:	ed90 3b12 	vldr	d3, [r0, #72]	@ 0x48
340007d6:	ed90 cbaa 	vldr	d12, [r0, #680]	@ 0x2a8
340007da:	ed90 bb16 	vldr	d11, [r0, #88]	@ 0x58
340007de:	ed8d 7b04 	vstr	d7, [sp, #16]
340007e2:	ed90 6ba6 	vldr	d6, [r0, #664]	@ 0x298
340007e6:	dc09      	bgt.n	340007fc <aKNCUkZSff+0x5c>
340007e8:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
340007ec:	48d6      	ldr	r0, [pc, #856]	@ (34000b48 <aKNCUkZSff+0x3a8>)
340007ee:	4798      	blx	r3
340007f0:	f04f 30ff 	mov.w	r0, #4294967295
340007f4:	b009      	add	sp, #36	@ 0x24
340007f6:	ecbd 8b10 	vpop	{d8-d15}
340007fa:	bd30      	pop	{r4, r5, pc}
340007fc:	eeb8 4b44 	vcvt.f64.u32	d4, s8
34000800:	ed9f 7bc3 	vldr	d7, [pc, #780]	@ 34000b10 <aKNCUkZSff+0x370>
34000804:	eeb8 2b42 	vcvt.f64.u32	d2, s4
34000808:	ee24 7b07 	vmul.f64	d7, d4, d7
3400080c:	eeb4 7bc2 	vcmpe.f64	d7, d2
34000810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000814:	dd0f      	ble.n	34000836 <aKNCUkZSff+0x96>
34000816:	ed90 7b1c 	vldr	d7, [r0, #112]	@ 0x70
3400081a:	ed9f 1bbf 	vldr	d1, [pc, #764]	@ 34000b18 <aKNCUkZSff+0x378>
3400081e:	ee37 1b01 	vadd.f64	d1, d7, d1
34000822:	ed9f 7bbf 	vldr	d7, [pc, #764]	@ 34000b20 <aKNCUkZSff+0x380>
34000826:	eeb4 1bc7 	vcmpe.f64	d1, d7
3400082a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400082e:	fe37 7b01 	vselgt.f64	d7, d7, d1
34000832:	ed80 7b1c 	vstr	d7, [r0, #112]	@ 0x70
34000836:	ed9f 7bbc 	vldr	d7, [pc, #752]	@ 34000b28 <aKNCUkZSff+0x388>
3400083a:	ee24 4b07 	vmul.f64	d4, d4, d7
3400083e:	eeb4 4bc2 	vcmpe.f64	d4, d2
34000842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000846:	d510      	bpl.n	3400086a <aKNCUkZSff+0xca>
34000848:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
3400084c:	ed9f 4bb2 	vldr	d4, [pc, #712]	@ 34000b18 <aKNCUkZSff+0x378>
34000850:	ee37 7b44 	vsub.f64	d7, d7, d4
34000854:	ed9f 4bb6 	vldr	d4, [pc, #728]	@ 34000b30 <aKNCUkZSff+0x390>
34000858:	eeb4 7bc4 	vcmpe.f64	d7, d4
3400085c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000860:	bf58      	it	pl
34000862:	eeb0 4b47 	vmovpl.f64	d4, d7
34000866:	ed84 4b1c 	vstr	d4, [r4, #112]	@ 0x70
3400086a:	f894 5050 	ldrb.w	r5, [r4, #80]	@ 0x50
3400086e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34000872:	2d01      	cmp	r5, #1
34000874:	d164      	bne.n	34000940 <aKNCUkZSff+0x1a0>
34000876:	ed9f 7bb0 	vldr	d7, [pc, #704]	@ 34000b38 <aKNCUkZSff+0x398>
3400087a:	ee3f 4b4e 	vsub.f64	d4, d15, d14
3400087e:	ee84 db07 	vdiv.f64	d13, d4, d7
34000882:	ee3f 4b0e 	vadd.f64	d4, d15, d14
34000886:	ee84 ab07 	vdiv.f64	d10, d4, d7
3400088a:	eeb0 7bcd 	vabs.f64	d7, d13
3400088e:	eeb4 5bc7 	vcmpe.f64	d5, d7
34000892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000896:	eeb0 4bca 	vabs.f64	d4, d10
3400089a:	db3c      	blt.n	34000916 <aKNCUkZSff+0x176>
3400089c:	eeb4 5bc4 	vcmpe.f64	d5, d4
340008a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340008a4:	db37      	blt.n	34000916 <aKNCUkZSff+0x176>
340008a6:	2300      	movs	r3, #0
340008a8:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
340008ac:	ee83 9b0c 	vdiv.f64	d9, d3, d12
340008b0:	eebc 9bc9 	vcvt.u32.f64	s18, d9
340008b4:	eeb8 9b49 	vcvt.f64.u32	d9, s18
340008b8:	ee29 9b0c 	vmul.f64	d9, d9, d12
340008bc:	2200      	movs	r2, #0
340008be:	eefc 5bc9 	vcvt.u32.f64	s11, d9
340008c2:	eeb0 8b49 	vmov.f64	d8, d9
340008c6:	edcd 5a03 	vstr	s11, [sp, #12]
340008ca:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
340008ce:	2b00      	cmp	r3, #0
340008d0:	f000 808c 	beq.w	340009ec <aKNCUkZSff+0x24c>
340008d4:	eef7 0bcb 	vcvt.f32.f64	s1, d11
340008d8:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
340008dc:	ed8d 6b06 	vstr	d6, [sp, #24]
340008e0:	f025 fa6a 	bl	34025db8 <powf>
340008e4:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
340008e8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340008ec:	eeb0 5bce 	vabs.f64	d5, d14
340008f0:	ee20 0b07 	vmul.f64	d0, d0, d7
340008f4:	eeb0 7bcf 	vabs.f64	d7, d15
340008f8:	eeb4 7bc5 	vcmpe.f64	d7, d5
340008fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000900:	ed9d 6b06 	vldr	d6, [sp, #24]
34000904:	dd34      	ble.n	34000970 <aKNCUkZSff+0x1d0>
34000906:	eeb5 fbc0 	vcmpe.f64	d15, #0.0
3400090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400090e:	d534      	bpl.n	3400097a <aKNCUkZSff+0x1da>
34000910:	ee39 0b40 	vsub.f64	d0, d9, d0
34000914:	e033      	b.n	3400097e <aKNCUkZSff+0x1de>
34000916:	eeb4 5bc4 	vcmpe.f64	d5, d4
3400091a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400091e:	d525      	bpl.n	3400096c <aKNCUkZSff+0x1cc>
34000920:	ee8a 4b0d 	vdiv.f64	d4, d10, d13
34000924:	ed94 5aae 	vldr	s10, [r4, #696]	@ 0x2b8
34000928:	eeb0 4bc4 	vabs.f64	d4, d4
3400092c:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34000930:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000938:	bfb4      	ite	lt
3400093a:	2301      	movlt	r3, #1
3400093c:	2300      	movge	r3, #0
3400093e:	e7b5      	b.n	340008ac <aKNCUkZSff+0x10c>
34000940:	eeb0 7bcf 	vabs.f64	d7, d15
34000944:	eeb0 4bce 	vabs.f64	d4, d14
34000948:	eeb4 4b47 	vcmp.f64	d4, d7
3400094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000950:	fe34 7b07 	vselgt.f64	d7, d4, d7
34000954:	eeb4 7bc5 	vcmpe.f64	d7, d5
34000958:	ed9f ab79 	vldr	d10, [pc, #484]	@ 34000b40 <aKNCUkZSff+0x3a0>
3400095c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000960:	eeb0 db4a 	vmov.f64	d13, d10
34000964:	bf8c      	ite	hi
34000966:	2301      	movhi	r3, #1
34000968:	2300      	movls	r3, #0
3400096a:	e79f      	b.n	340008ac <aKNCUkZSff+0x10c>
3400096c:	2301      	movs	r3, #1
3400096e:	e79d      	b.n	340008ac <aKNCUkZSff+0x10c>
34000970:	eeb5 ebc0 	vcmpe.f64	d14, #0.0
34000974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000978:	d5ca      	bpl.n	34000910 <aKNCUkZSff+0x170>
3400097a:	ee39 0b00 	vadd.f64	d0, d9, d0
3400097e:	ed94 7b3c 	vldr	d7, [r4, #240]	@ 0xf0
34000982:	eeb4 7bc0 	vcmpe.f64	d7, d0
34000986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400098a:	d503      	bpl.n	34000994 <aKNCUkZSff+0x1f4>
3400098c:	eeb0 bb46 	vmov.f64	d11, d6
34000990:	eeb0 0b47 	vmov.f64	d0, d7
34000994:	ed94 7b3a 	vldr	d7, [r4, #232]	@ 0xe8
34000998:	eeb4 7bc0 	vcmpe.f64	d7, d0
3400099c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340009a0:	dd03      	ble.n	340009aa <aKNCUkZSff+0x20a>
340009a2:	eeb0 bb46 	vmov.f64	d11, d6
340009a6:	eeb0 0b47 	vmov.f64	d0, d7
340009aa:	ee80 8b0c 	vdiv.f64	d8, d0, d12
340009ae:	eebc 8bc8 	vcvt.u32.f64	s16, d8
340009b2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
340009b6:	2d01      	cmp	r5, #1
340009b8:	ee2c 8b08 	vmul.f64	d8, d12, d8
340009bc:	d116      	bne.n	340009ec <aKNCUkZSff+0x24c>
340009be:	f8b4 30e0 	ldrh.w	r3, [r4, #224]	@ 0xe0
340009c2:	2b02      	cmp	r3, #2
340009c4:	d85f      	bhi.n	34000a86 <aKNCUkZSff+0x2e6>
340009c6:	eefc 7bc9 	vcvt.u32.f64	s15, d9
340009ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
340009ce:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
340009d2:	ed82 7b20 	vstr	d7, [r2, #128]	@ 0x80
340009d6:	ed82 8b26 	vstr	d8, [r2, #152]	@ 0x98
340009da:	eb04 1203 	add.w	r2, r4, r3, lsl #4
340009de:	3301      	adds	r3, #1
340009e0:	ed82 db2c 	vstr	d13, [r2, #176]	@ 0xb0
340009e4:	ed82 ab2e 	vstr	d10, [r2, #184]	@ 0xb8
340009e8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
340009ec:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
340009f0:	bb4b      	cbnz	r3, 34000a46 <aKNCUkZSff+0x2a6>
340009f2:	2210      	movs	r2, #16
340009f4:	f104 0188 	add.w	r1, r4, #136	@ 0x88
340009f8:	f104 0080 	add.w	r0, r4, #128	@ 0x80
340009fc:	ed8d 6b06 	vstr	d6, [sp, #24]
34000a00:	f01f fc10 	bl	34020224 <memmove>
34000a04:	2210      	movs	r2, #16
34000a06:	f104 01a0 	add.w	r1, r4, #160	@ 0xa0
34000a0a:	f104 0098 	add.w	r0, r4, #152	@ 0x98
34000a0e:	f01f fc09 	bl	34020224 <memmove>
34000a12:	e9d4 2330 	ldrd	r2, r3, [r4, #192]	@ 0xc0
34000a16:	ed84 9b24 	vstr	d9, [r4, #144]	@ 0x90
34000a1a:	e9c4 232c 	strd	r2, r3, [r4, #176]	@ 0xb0
34000a1e:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	@ 0xc8
34000a22:	ed84 8b2a 	vstr	d8, [r4, #168]	@ 0xa8
34000a26:	e9c4 232e 	strd	r2, r3, [r4, #184]	@ 0xb8
34000a2a:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	@ 0xd0
34000a2e:	ed9d 6b06 	vldr	d6, [sp, #24]
34000a32:	e9c4 2330 	strd	r2, r3, [r4, #192]	@ 0xc0
34000a36:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	@ 0xd8
34000a3a:	ed84 db34 	vstr	d13, [r4, #208]	@ 0xd0
34000a3e:	ed84 ab36 	vstr	d10, [r4, #216]	@ 0xd8
34000a42:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
34000a46:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34000a4a:	ee17 3a90 	vmov	r3, s15
34000a4e:	ed94 7b1a 	vldr	d7, [r4, #104]	@ 0x68
34000a52:	9a03      	ldr	r2, [sp, #12]
34000a54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34000a58:	4293      	cmp	r3, r2
34000a5a:	bf1c      	itt	ne
34000a5c:	2301      	movne	r3, #1
34000a5e:	f884 3060 	strbne.w	r3, [r4, #96]	@ 0x60
34000a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a66:	dd71      	ble.n	34000b4c <aKNCUkZSff+0x3ac>
34000a68:	2301      	movs	r3, #1
34000a6a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000a6e:	ed9d 7b00 	vldr	d7, [sp]
34000a72:	eeb4 bbc7 	vcmpe.f64	d11, d7
34000a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000a7a:	d579      	bpl.n	34000b70 <aKNCUkZSff+0x3d0>
34000a7c:	ed9d 7b04 	vldr	d7, [sp, #16]
34000a80:	ee3b 6b07 	vadd.f64	d6, d11, d7
34000a84:	e066      	b.n	34000b54 <aKNCUkZSff+0x3b4>
34000a86:	ed94 7b2a 	vldr	d7, [r4, #168]	@ 0xa8
34000a8a:	ed94 5aaf 	vldr	s10, [r4, #700]	@ 0x2bc
34000a8e:	ee38 7b47 	vsub.f64	d7, d8, d7
34000a92:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
34000a96:	eeb0 7bc7 	vabs.f64	d7, d7
34000a9a:	eeb4 7bc5 	vcmpe.f64	d7, d5
34000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000aa2:	db2c      	blt.n	34000afe <aKNCUkZSff+0x35e>
34000aa4:	ed94 7b28 	vldr	d7, [r4, #160]	@ 0xa0
34000aa8:	ee38 7b47 	vsub.f64	d7, d8, d7
34000aac:	eeb0 7bc7 	vabs.f64	d7, d7
34000ab0:	eeb4 5bc7 	vcmpe.f64	d5, d7
34000ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000ab8:	dd21      	ble.n	34000afe <aKNCUkZSff+0x35e>
34000aba:	ed94 0b32 	vldr	d0, [r4, #200]	@ 0xc8
34000abe:	ed94 7b30 	vldr	d7, [r4, #192]	@ 0xc0
34000ac2:	ee3a 0b40 	vsub.f64	d0, d10, d0
34000ac6:	ee3d 7b47 	vsub.f64	d7, d13, d7
34000aca:	ee20 0b00 	vmul.f64	d0, d0, d0
34000ace:	eea7 0b07 	vfma.f64	d0, d7, d7
34000ad2:	ed8d 6b06 	vstr	d6, [sp, #24]
34000ad6:	f021 fd77 	bl	340225c8 <sqrt>
34000ada:	ed94 7ab0 	vldr	s14, [r4, #704]	@ 0x2c0
34000ade:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ae2:	eeb4 0bc7 	vcmpe.f64	d0, d7
34000ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000aea:	ed9d 6b06 	vldr	d6, [sp, #24]
34000aee:	d506      	bpl.n	34000afe <aKNCUkZSff+0x35e>
34000af0:	eefc 7bc9 	vcvt.u32.f64	s15, d9
34000af4:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
34000af8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
34000afc:	e776      	b.n	340009ec <aKNCUkZSff+0x24c>
34000afe:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
34000b02:	2b01      	cmp	r3, #1
34000b04:	bf04      	itt	eq
34000b06:	2300      	moveq	r3, #0
34000b08:	f884 3078 	strbeq.w	r3, [r4, #120]	@ 0x78
34000b0c:	e76e      	b.n	340009ec <aKNCUkZSff+0x24c>
34000b0e:	bf00      	nop
34000b10:	9999999a 	.word	0x9999999a
34000b14:	3fa99999 	.word	0x3fa99999
34000b18:	47ae147b 	.word	0x47ae147b
34000b1c:	3f847ae1 	.word	0x3f847ae1
34000b20:	33333334 	.word	0x33333334
34000b24:	3fc33333 	.word	0x3fc33333
34000b28:	33333333 	.word	0x33333333
34000b2c:	3fc33333 	.word	0x3fc33333
34000b30:	11111111 	.word	0x11111111
34000b34:	3fb11111 	.word	0x3fb11111
34000b38:	667f3bcd 	.word	0x667f3bcd
34000b3c:	3ff6a09e 	.word	0x3ff6a09e
	...
34000b48:	3402cad3 	.word	0x3402cad3
34000b4c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
34000b50:	2b00      	cmp	r3, #0
34000b52:	d18c      	bne.n	34000a6e <aKNCUkZSff+0x2ce>
34000b54:	ee88 7b0c 	vdiv.f64	d7, d8, d12
34000b58:	eebc 7bc7 	vcvt.u32.f64	s14, d7
34000b5c:	eeb8 7b47 	vcvt.f64.u32	d7, s14
34000b60:	ee27 7b0c 	vmul.f64	d7, d7, d12
34000b64:	ed84 6b16 	vstr	d6, [r4, #88]	@ 0x58
34000b68:	ed84 7b12 	vstr	d7, [r4, #72]	@ 0x48
34000b6c:	2001      	movs	r0, #1
34000b6e:	e641      	b.n	340007f4 <aKNCUkZSff+0x54>
34000b70:	ed9d 6b00 	vldr	d6, [sp]
34000b74:	e7ee      	b.n	34000b54 <aKNCUkZSff+0x3b4>

34000b76 <LbAAVvVMdF>:
34000b76:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
34000b7a:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34000b7e:	ed90 4b12 	vldr	d4, [r0, #72]	@ 0x48
34000b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000b86:	ed90 5baa 	vldr	d5, [r0, #680]	@ 0x2a8
34000b8a:	eeb0 7b46 	vmov.f64	d7, d6
34000b8e:	bfdf      	itttt	le
34000b90:	ee84 7b05 	vdivle.f64	d7, d4, d5
34000b94:	eebc 7bc7 	vcvtle.u32.f64	s14, d7
34000b98:	eeb8 7b47 	vcvtle.f64.u32	d7, s14
34000b9c:	ee27 7b05 	vmulle.f64	d7, d7, d5
34000ba0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
34000ba4:	ed90 5b3c 	vldr	d5, [r0, #240]	@ 0xf0
34000ba8:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34000bac:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bb4:	bfc8      	it	gt
34000bb6:	eeb7 7bc5 	vcvtgt.f32.f64	s14, d5
34000bba:	ed90 5b3a 	vldr	d5, [r0, #232]	@ 0xe8
34000bbe:	eeb7 4ac7 	vcvt.f64.f32	d4, s14
34000bc2:	eeb4 4bc5 	vcmpe.f64	d4, d5
34000bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bca:	bf48      	it	mi
34000bcc:	eeb7 7bc5 	vcvtmi.f32.f64	s14, d5
34000bd0:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
34000bd4:	f8d0 3274 	ldr.w	r3, [r0, #628]	@ 0x274
34000bd8:	b530      	push	{r4, r5, lr}
34000bda:	ed80 5b12 	vstr	d5, [r0, #72]	@ 0x48
34000bde:	ed93 5a00 	vldr	s10, [r3]
34000be2:	edd0 7aac 	vldr	s15, [r0, #688]	@ 0x2b0
34000be6:	eeb4 5ac7 	vcmpe.f32	s10, s14
34000bea:	eef1 5a67 	vneg.f32	s11, s15
34000bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000bf2:	f04f 0100 	mov.w	r1, #0
34000bf6:	f8b0 30f8 	ldrh.w	r3, [r0, #248]	@ 0xf8
34000bfa:	fe75 7aa7 	vselgt.f32	s15, s11, s15
34000bfe:	3b01      	subs	r3, #1
34000c00:	b28a      	uxth	r2, r1
34000c02:	4293      	cmp	r3, r2
34000c04:	d805      	bhi.n	34000c12 <LbAAVvVMdF+0x9c>
34000c06:	2244      	movs	r2, #68	@ 0x44
34000c08:	fb02 0303 	mla	r3, r2, r3, r0
34000c0c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
34000c10:	e011      	b.n	34000c36 <LbAAVvVMdF+0xc0>
34000c12:	eb00 0482 	add.w	r4, r0, r2, lsl #2
34000c16:	edd4 5a44 	vldr	s11, [r4, #272]	@ 0x110
34000c1a:	ee77 5aa5 	vadd.f32	s11, s15, s11
34000c1e:	eef4 5ac7 	vcmpe.f32	s11, s14
34000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000c26:	f101 0101 	add.w	r1, r1, #1
34000c2a:	dbe9      	blt.n	34000c00 <LbAAVvVMdF+0x8a>
34000c2c:	2344      	movs	r3, #68	@ 0x44
34000c2e:	fb03 0202 	mla	r2, r3, r2, r0
34000c32:	f502 7390 	add.w	r3, r2, #288	@ 0x120
34000c36:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
34000c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000c3e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
34000c42:	dc05      	bgt.n	34000c50 <LbAAVvVMdF+0xda>
34000c44:	ed93 7a00 	vldr	s14, [r3]
34000c48:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000c4c:	ed80 7b12 	vstr	d7, [r0, #72]	@ 0x48
34000c50:	685a      	ldr	r2, [r3, #4]
34000c52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
34000c56:	6042      	str	r2, [r0, #4]
34000c58:	689a      	ldr	r2, [r3, #8]
34000c5a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
34000c5e:	6082      	str	r2, [r0, #8]
34000c60:	68da      	ldr	r2, [r3, #12]
34000c62:	60c2      	str	r2, [r0, #12]
34000c64:	691a      	ldr	r2, [r3, #16]
34000c66:	6102      	str	r2, [r0, #16]
34000c68:	f100 0238 	add.w	r2, r0, #56	@ 0x38
34000c6c:	695d      	ldr	r5, [r3, #20]
34000c6e:	330c      	adds	r3, #12
34000c70:	6145      	str	r5, [r0, #20]
34000c72:	68dd      	ldr	r5, [r3, #12]
34000c74:	300c      	adds	r0, #12
34000c76:	60c5      	str	r5, [r0, #12]
34000c78:	691d      	ldr	r5, [r3, #16]
34000c7a:	42a3      	cmp	r3, r4
34000c7c:	6105      	str	r5, [r0, #16]
34000c7e:	f851 5b04 	ldr.w	r5, [r1], #4
34000c82:	f842 5b04 	str.w	r5, [r2], #4
34000c86:	d1f1      	bne.n	34000c6c <LbAAVvVMdF+0xf6>
34000c88:	2001      	movs	r0, #1
34000c8a:	bd30      	pop	{r4, r5, pc}

34000c8c <evision_api_awb_new>:
34000c8c:	b510      	push	{r4, lr}
34000c8e:	4604      	mov	r4, r0
34000c90:	b090      	sub	sp, #64	@ 0x40
34000c92:	b170      	cbz	r0, 34000cb2 <evision_api_awb_new+0x26>
34000c94:	2300      	movs	r3, #0
34000c96:	4c08      	ldr	r4, [pc, #32]	@ (34000cb8 <evision_api_awb_new+0x2c>)
34000c98:	2140      	movs	r1, #64	@ 0x40
34000c9a:	7023      	strb	r3, [r4, #0]
34000c9c:	f8c4 02c8 	str.w	r0, [r4, #712]	@ 0x2c8
34000ca0:	4b06      	ldr	r3, [pc, #24]	@ (34000cbc <evision_api_awb_new+0x30>)
34000ca2:	4668      	mov	r0, sp
34000ca4:	4a06      	ldr	r2, [pc, #24]	@ (34000cc0 <evision_api_awb_new+0x34>)
34000ca6:	f025 f839 	bl	34025d1c <sniprintf>
34000caa:	4668      	mov	r0, sp
34000cac:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000cb0:	4798      	blx	r3
34000cb2:	4620      	mov	r0, r4
34000cb4:	b010      	add	sp, #64	@ 0x40
34000cb6:	bd10      	pop	{r4, pc}
34000cb8:	3410d020 	.word	0x3410d020
34000cbc:	34108c90 	.word	0x34108c90
34000cc0:	3402cb13 	.word	0x3402cb13

34000cc4 <evision_api_awb_delete>:
34000cc4:	2800      	cmp	r0, #0
34000cc6:	bf14      	ite	ne
34000cc8:	2001      	movne	r0, #1
34000cca:	f04f 30ff 	moveq.w	r0, #4294967295
34000cce:	4770      	bx	lr

34000cd0 <evision_api_awb_set_profile>:
34000cd0:	ed80 0a00 	vstr	s0, [r0]
34000cd4:	b530      	push	{r4, r5, lr}
34000cd6:	680c      	ldr	r4, [r1, #0]
34000cd8:	6044      	str	r4, [r0, #4]
34000cda:	684c      	ldr	r4, [r1, #4]
34000cdc:	6084      	str	r4, [r0, #8]
34000cde:	688c      	ldr	r4, [r1, #8]
34000ce0:	60c4      	str	r4, [r0, #12]
34000ce2:	68c9      	ldr	r1, [r1, #12]
34000ce4:	f102 0424 	add.w	r4, r2, #36	@ 0x24
34000ce8:	6101      	str	r1, [r0, #16]
34000cea:	f100 0138 	add.w	r1, r0, #56	@ 0x38
34000cee:	6815      	ldr	r5, [r2, #0]
34000cf0:	320c      	adds	r2, #12
34000cf2:	6145      	str	r5, [r0, #20]
34000cf4:	f852 5c08 	ldr.w	r5, [r2, #-8]
34000cf8:	300c      	adds	r0, #12
34000cfa:	60c5      	str	r5, [r0, #12]
34000cfc:	f852 5c04 	ldr.w	r5, [r2, #-4]
34000d00:	42a2      	cmp	r2, r4
34000d02:	6105      	str	r5, [r0, #16]
34000d04:	f853 5b04 	ldr.w	r5, [r3], #4
34000d08:	f841 5b04 	str.w	r5, [r1], #4
34000d0c:	d1ef      	bne.n	34000cee <evision_api_awb_set_profile+0x1e>
34000d0e:	bd30      	pop	{r4, r5, pc}

34000d10 <evision_api_awb_init_profiles>:
34000d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000d14:	ed2d 8b06 	vpush	{d8-d10}
34000d18:	460e      	mov	r6, r1
34000d1a:	eeb0 9b40 	vmov.f64	d9, d0
34000d1e:	eeb0 8b41 	vmov.f64	d8, d1
34000d22:	461d      	mov	r5, r3
34000d24:	4604      	mov	r4, r0
34000d26:	b0c7      	sub	sp, #284	@ 0x11c
34000d28:	2800      	cmp	r0, #0
34000d2a:	f000 818f 	beq.w	3400104c <evision_api_awb_init_profiles+0x33c>
34000d2e:	ed9f abcc 	vldr	d10, [pc, #816]	@ 34001060 <evision_api_awb_init_profiles+0x350>
34000d32:	ed80 ab12 	vstr	d10, [r0, #72]	@ 0x48
34000d36:	2000      	movs	r0, #0
34000d38:	49cf      	ldr	r1, [pc, #828]	@ (34001078 <evision_api_awb_init_profiles+0x368>)
34000d3a:	f04f 0800 	mov.w	r8, #0
34000d3e:	e9c4 0116 	strd	r0, r1, [r4, #88]	@ 0x58
34000d42:	e9c4 01a6 	strd	r0, r1, [r4, #664]	@ 0x298
34000d46:	e9c4 01aa 	strd	r0, r1, [r4, #680]	@ 0x2a8
34000d4a:	49cc      	ldr	r1, [pc, #816]	@ (3400107c <evision_api_awb_init_profiles+0x36c>)
34000d4c:	f8df 9360 	ldr.w	r9, [pc, #864]	@ 340010b0 <evision_api_awb_init_profiles+0x3a0>
34000d50:	f8c4 12b0 	str.w	r1, [r4, #688]	@ 0x2b0
34000d54:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
34000d58:	f8c4 12b4 	str.w	r1, [r4, #692]	@ 0x2b4
34000d5c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
34000d60:	e9c4 891a 	strd	r8, r9, [r4, #104]	@ 0x68
34000d64:	f20f 3900 	addw	r9, pc, #768	@ 0x300
34000d68:	e9d9 8900 	ldrd	r8, r9, [r9]
34000d6c:	e9c4 891c 	strd	r8, r9, [r4, #112]	@ 0x70
34000d70:	e9c4 89a4 	strd	r8, r9, [r4, #656]	@ 0x290
34000d74:	f04f 0800 	mov.w	r8, #0
34000d78:	f8c4 12b8 	str.w	r1, [r4, #696]	@ 0x2b8
34000d7c:	49c0      	ldr	r1, [pc, #768]	@ (34001080 <evision_api_awb_init_profiles+0x370>)
34000d7e:	f8df 9334 	ldr.w	r9, [pc, #820]	@ 340010b4 <evision_api_awb_init_profiles+0x3a4>
34000d82:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
34000d86:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
34000d8a:	2300      	movs	r3, #0
34000d8c:	e9c4 89a8 	strd	r8, r9, [r4, #672]	@ 0x2a0
34000d90:	2701      	movs	r7, #1
34000d92:	f04f 0800 	mov.w	r8, #0
34000d96:	f8c4 12c0 	str.w	r1, [r4, #704]	@ 0x2c0
34000d9a:	1e71      	subs	r1, r6, #1
34000d9c:	f8df 9318 	ldr.w	r9, [pc, #792]	@ 340010b8 <evision_api_awb_init_profiles+0x3a8>
34000da0:	b288      	uxth	r0, r1
34000da2:	2804      	cmp	r0, #4
34000da4:	e9c4 89a0 	strd	r8, r9, [r4, #640]	@ 0x280
34000da8:	f20f 29c4 	addw	r9, pc, #708	@ 0x2c4
34000dac:	e9d9 8900 	ldrd	r8, r9, [r9]
34000db0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
34000db4:	e9c4 89a2 	strd	r8, r9, [r4, #648]	@ 0x288
34000db8:	f8a4 30e0 	strh.w	r3, [r4, #224]	@ 0xe0
34000dbc:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
34000dc0:	f8a4 7278 	strh.w	r7, [r4, #632]	@ 0x278
34000dc4:	d914      	bls.n	34000df0 <evision_api_awb_init_profiles+0xe0>
34000dc6:	2305      	movs	r3, #5
34000dc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000dcc:	4aad      	ldr	r2, [pc, #692]	@ (34001084 <evision_api_awb_init_profiles+0x374>)
34000dce:	a806      	add	r0, sp, #24
34000dd0:	f024 ffa4 	bl	34025d1c <sniprintf>
34000dd4:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000dd8:	a806      	add	r0, sp, #24
34000dda:	4798      	blx	r3
34000ddc:	f884 7050 	strb.w	r7, [r4, #80]	@ 0x50
34000de0:	4620      	mov	r0, r4
34000de2:	b047      	add	sp, #284	@ 0x11c
34000de4:	ecbd 8b06 	vpop	{d8-d10}
34000de8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34000dec:	f7ff bec3 	b.w	34000b76 <LbAAVvVMdF>
34000df0:	ed95 7a00 	vldr	s14, [r5]
34000df4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000df8:	eeb4 0bc7 	vcmpe.f64	d0, d7
34000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e00:	dd12      	ble.n	34000e28 <evision_api_awb_init_profiles+0x118>
34000e02:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000e06:	48a0      	ldr	r0, [pc, #640]	@ (34001088 <evision_api_awb_init_profiles+0x378>)
34000e08:	4798      	blx	r3
34000e0a:	ed95 7a00 	vldr	s14, [r5]
34000e0e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e12:	ed8d 9b00 	vstr	d9, [sp]
34000e16:	ed8d 7b02 	vstr	d7, [sp, #8]
34000e1a:	4a9c      	ldr	r2, [pc, #624]	@ (3400108c <evision_api_awb_init_profiles+0x37c>)
34000e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000e20:	a806      	add	r0, sp, #24
34000e22:	f024 ff7b 	bl	34025d1c <sniprintf>
34000e26:	e7d5      	b.n	34000dd4 <evision_api_awb_init_profiles+0xc4>
34000e28:	f04f 0c44 	mov.w	ip, #68	@ 0x44
34000e2c:	fb0c 5806 	mla	r8, ip, r6, r5
34000e30:	ed18 7a11 	vldr	s14, [r8, #-68]	@ 0xffffffbc
34000e34:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e38:	eeb4 1bc7 	vcmpe.f64	d1, d7
34000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e40:	d541      	bpl.n	34000ec6 <evision_api_awb_init_profiles+0x1b6>
34000e42:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000e46:	4892      	ldr	r0, [pc, #584]	@ (34001090 <evision_api_awb_init_profiles+0x380>)
34000e48:	4798      	blx	r3
34000e4a:	ed98 7a00 	vldr	s14, [r8]
34000e4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e52:	ed8d 8b00 	vstr	d8, [sp]
34000e56:	ed8d 7b02 	vstr	d7, [sp, #8]
34000e5a:	4a8e      	ldr	r2, [pc, #568]	@ (34001094 <evision_api_awb_init_profiles+0x384>)
34000e5c:	e7de      	b.n	34000e1c <evision_api_awb_init_profiles+0x10c>
34000e5e:	fb0c f708 	mul.w	r7, ip, r8
34000e62:	eb05 0907 	add.w	r9, r5, r7
34000e66:	3744      	adds	r7, #68	@ 0x44
34000e68:	442f      	add	r7, r5
34000e6a:	ed99 7a00 	vldr	s14, [r9]
34000e6e:	edd7 7a00 	vldr	s15, [r7]
34000e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000e7a:	f108 0a01 	add.w	sl, r8, #1
34000e7e:	f100 0001 	add.w	r0, r0, #1
34000e82:	db21      	blt.n	34000ec8 <evision_api_awb_init_profiles+0x1b8>
34000e84:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000e88:	4883      	ldr	r0, [pc, #524]	@ (34001098 <evision_api_awb_init_profiles+0x388>)
34000e8a:	4798      	blx	r3
34000e8c:	ed97 7a00 	vldr	s14, [r7]
34000e90:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000e94:	ed8d 7b04 	vstr	d7, [sp, #16]
34000e98:	f8cd a008 	str.w	sl, [sp, #8]
34000e9c:	ed99 7a00 	vldr	s14, [r9]
34000ea0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ea4:	4643      	mov	r3, r8
34000ea6:	ed8d 7b00 	vstr	d7, [sp]
34000eaa:	4a7c      	ldr	r2, [pc, #496]	@ (3400109c <evision_api_awb_init_profiles+0x38c>)
34000eac:	f44f 7180 	mov.w	r1, #256	@ 0x100
34000eb0:	a806      	add	r0, sp, #24
34000eb2:	f024 ff33 	bl	34025d1c <sniprintf>
34000eb6:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000eba:	a806      	add	r0, sp, #24
34000ebc:	4798      	blx	r3
34000ebe:	2301      	movs	r3, #1
34000ec0:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34000ec4:	e78c      	b.n	34000de0 <evision_api_awb_init_profiles+0xd0>
34000ec6:	4618      	mov	r0, r3
34000ec8:	fa1f f880 	uxth.w	r8, r0
34000ecc:	4541      	cmp	r1, r8
34000ece:	d8c6      	bhi.n	34000e5e <evision_api_awb_init_profiles+0x14e>
34000ed0:	2300      	movs	r3, #0
34000ed2:	f04f 0c44 	mov.w	ip, #68	@ 0x44
34000ed6:	1eb0      	subs	r0, r6, #2
34000ed8:	b29f      	uxth	r7, r3
34000eda:	42b9      	cmp	r1, r7
34000edc:	d839      	bhi.n	34000f52 <evision_api_awb_init_profiles+0x242>
34000ede:	ed84 9b3a 	vstr	d9, [r4, #232]	@ 0xe8
34000ee2:	ed84 8b3c 	vstr	d8, [r4, #240]	@ 0xf0
34000ee6:	2000      	movs	r0, #0
34000ee8:	f8a4 60f8 	strh.w	r6, [r4, #248]	@ 0xf8
34000eec:	b283      	uxth	r3, r0
34000eee:	4299      	cmp	r1, r3
34000ef0:	f100 0001 	add.w	r0, r0, #1
34000ef4:	f200 808b 	bhi.w	3400100e <evision_api_awb_init_profiles+0x2fe>
34000ef8:	2700      	movs	r7, #0
34000efa:	46b8      	mov	r8, r7
34000efc:	f104 0afc 	add.w	sl, r4, #252	@ 0xfc
34000f00:	f504 7990 	add.w	r9, r4, #288	@ 0x120
34000f04:	eb05 0b07 	add.w	fp, r5, r7
34000f08:	eb09 0007 	add.w	r0, r9, r7
34000f0c:	2244      	movs	r2, #68	@ 0x44
34000f0e:	4659      	mov	r1, fp
34000f10:	f01f fc29 	bl	34020766 <memcpy>
34000f14:	f8db 3000 	ldr.w	r3, [fp]
34000f18:	f108 0801 	add.w	r8, r8, #1
34000f1c:	f84a 3b04 	str.w	r3, [sl], #4
34000f20:	fa1f f388 	uxth.w	r3, r8
34000f24:	429e      	cmp	r6, r3
34000f26:	f107 0744 	add.w	r7, r7, #68	@ 0x44
34000f2a:	d8eb      	bhi.n	34000f04 <evision_api_awb_init_profiles+0x1f4>
34000f2c:	1e73      	subs	r3, r6, #1
34000f2e:	b29b      	uxth	r3, r3
34000f30:	2e00      	cmp	r6, #0
34000f32:	f103 0301 	add.w	r3, r3, #1
34000f36:	bf14      	ite	ne
34000f38:	461a      	movne	r2, r3
34000f3a:	2201      	moveq	r2, #1
34000f3c:	f8c4 9274 	str.w	r9, [r4, #628]	@ 0x274
34000f40:	f504 71b2 	add.w	r1, r4, #356	@ 0x164
34000f44:	3a01      	subs	r2, #1
34000f46:	d16a      	bne.n	3400101e <evision_api_awb_init_profiles+0x30e>
34000f48:	2301      	movs	r3, #1
34000f4a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
34000f4e:	7023      	strb	r3, [r4, #0]
34000f50:	e746      	b.n	34000de0 <evision_api_awb_init_profiles+0xd0>
34000f52:	eb02 0987 	add.w	r9, r2, r7, lsl #2
34000f56:	42b8      	cmp	r0, r7
34000f58:	edd9 7a00 	vldr	s15, [r9]
34000f5c:	ea4f 0887 	mov.w	r8, r7, lsl #2
34000f60:	f107 0a01 	add.w	sl, r7, #1
34000f64:	d91e      	bls.n	34000fa4 <evision_api_awb_init_profiles+0x294>
34000f66:	f108 0804 	add.w	r8, r8, #4
34000f6a:	4490      	add	r8, r2
34000f6c:	ed98 7a00 	vldr	s14, [r8]
34000f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000f78:	d814      	bhi.n	34000fa4 <evision_api_awb_init_profiles+0x294>
34000f7a:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000f7e:	4848      	ldr	r0, [pc, #288]	@ (340010a0 <evision_api_awb_init_profiles+0x390>)
34000f80:	4798      	blx	r3
34000f82:	ed98 7a00 	vldr	s14, [r8]
34000f86:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f8a:	ed8d 7b04 	vstr	d7, [sp, #16]
34000f8e:	f8cd a008 	str.w	sl, [sp, #8]
34000f92:	ed99 7a00 	vldr	s14, [r9]
34000f96:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000f9a:	463b      	mov	r3, r7
34000f9c:	ed8d 7b00 	vstr	d7, [sp]
34000fa0:	4a40      	ldr	r2, [pc, #256]	@ (340010a4 <evision_api_awb_init_profiles+0x394>)
34000fa2:	e783      	b.n	34000eac <evision_api_awb_init_profiles+0x19c>
34000fa4:	fb0c f807 	mul.w	r8, ip, r7
34000fa8:	eb05 0a08 	add.w	sl, r5, r8
34000fac:	ed9a 7a00 	vldr	s14, [sl]
34000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000fb8:	f108 0844 	add.w	r8, r8, #68	@ 0x44
34000fbc:	44a8      	add	r8, r5
34000fbe:	da08      	bge.n	34000fd2 <evision_api_awb_init_profiles+0x2c2>
34000fc0:	ed98 7a00 	vldr	s14, [r8]
34000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
34000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34000fcc:	f103 0301 	add.w	r3, r3, #1
34000fd0:	d882      	bhi.n	34000ed8 <evision_api_awb_init_profiles+0x1c8>
34000fd2:	f8d4 32c8 	ldr.w	r3, [r4, #712]	@ 0x2c8
34000fd6:	4834      	ldr	r0, [pc, #208]	@ (340010a8 <evision_api_awb_init_profiles+0x398>)
34000fd8:	4798      	blx	r3
34000fda:	ed98 7a00 	vldr	s14, [r8]
34000fde:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fe2:	ed8d 7b04 	vstr	d7, [sp, #16]
34000fe6:	ed9a 7a00 	vldr	s14, [sl]
34000fea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000fee:	ed8d 7b02 	vstr	d7, [sp, #8]
34000ff2:	ed99 7a00 	vldr	s14, [r9]
34000ff6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34000ffa:	463b      	mov	r3, r7
34000ffc:	ed8d 7b00 	vstr	d7, [sp]
34001000:	f44f 7180 	mov.w	r1, #256	@ 0x100
34001004:	4a29      	ldr	r2, [pc, #164]	@ (340010ac <evision_api_awb_init_profiles+0x39c>)
34001006:	a806      	add	r0, sp, #24
34001008:	f024 fe88 	bl	34025d1c <sniprintf>
3400100c:	e753      	b.n	34000eb6 <evision_api_awb_init_profiles+0x1a6>
3400100e:	eb02 0783 	add.w	r7, r2, r3, lsl #2
34001012:	683f      	ldr	r7, [r7, #0]
34001014:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34001018:	f8c3 7110 	str.w	r7, [r3, #272]	@ 0x110
3400101c:	e766      	b.n	34000eec <evision_api_awb_init_profiles+0x1dc>
3400101e:	f8d4 3274 	ldr.w	r3, [r4, #628]	@ 0x274
34001022:	ed91 6a00 	vldr	s12, [r1]
34001026:	ed93 7a00 	vldr	s14, [r3]
3400102a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3400102e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34001032:	ee36 6b4a 	vsub.f64	d6, d6, d10
34001036:	ee37 7b4a 	vsub.f64	d7, d7, d10
3400103a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001042:	bf48      	it	mi
34001044:	f8c4 1274 	strmi.w	r1, [r4, #628]	@ 0x274
34001048:	3144      	adds	r1, #68	@ 0x44
3400104a:	e77b      	b.n	34000f44 <evision_api_awb_init_profiles+0x234>
3400104c:	f04f 30ff 	mov.w	r0, #4294967295
34001050:	b047      	add	sp, #284	@ 0x11c
34001052:	ecbd 8b06 	vpop	{d8-d10}
34001056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400105a:	bf00      	nop
3400105c:	f3af 8000 	nop.w
34001060:	00000000 	.word	0x00000000
34001064:	40b38800 	.word	0x40b38800
34001068:	9999999a 	.word	0x9999999a
3400106c:	3fb99999 	.word	0x3fb99999
34001070:	00000000 	.word	0x00000000
34001074:	406ea000 	.word	0x406ea000
34001078:	3ff00000 	.word	0x3ff00000
3400107c:	42480000 	.word	0x42480000
34001080:	432f0000 	.word	0x432f0000
34001084:	3402cb23 	.word	0x3402cb23
34001088:	3402cb67 	.word	0x3402cb67
3400108c:	3402cbee 	.word	0x3402cbee
34001090:	3402cc4c 	.word	0x3402cc4c
34001094:	3402ccd4 	.word	0x3402ccd4
34001098:	3402cd31 	.word	0x3402cd31
3400109c:	3402cd95 	.word	0x3402cd95
340010a0:	3402cded 	.word	0x3402cded
340010a4:	3402ce5c 	.word	0x3402ce5c
340010a8:	3402cec6 	.word	0x3402cec6
340010ac:	3402cf1d 	.word	0x3402cf1d
340010b0:	bff00000 	.word	0xbff00000
340010b4:	40080000 	.word	0x40080000
340010b8:	40240000 	.word	0x40240000

340010bc <evision_api_awb_run_average>:
340010bc:	b530      	push	{r4, r5, lr}
340010be:	4605      	mov	r5, r0
340010c0:	4614      	mov	r4, r2
340010c2:	b08d      	sub	sp, #52	@ 0x34
340010c4:	b952      	cbnz	r2, 340010dc <evision_api_awb_run_average+0x20>
340010c6:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
340010ca:	481d      	ldr	r0, [pc, #116]	@ (34001140 <evision_api_awb_run_average+0x84>)
340010cc:	4798      	blx	r3
340010ce:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
340010d2:	481c      	ldr	r0, [pc, #112]	@ (34001144 <evision_api_awb_run_average+0x88>)
340010d4:	4798      	blx	r3
340010d6:	4620      	mov	r0, r4
340010d8:	b00d      	add	sp, #52	@ 0x34
340010da:	bd30      	pop	{r4, r5, pc}
340010dc:	ed93 2b04 	vldr	d2, [r3, #16]
340010e0:	ed93 1b02 	vldr	d1, [r3, #8]
340010e4:	ed93 0b00 	vldr	d0, [r3]
340010e8:	aa0a      	add	r2, sp, #40	@ 0x28
340010ea:	a908      	add	r1, sp, #32
340010ec:	a806      	add	r0, sp, #24
340010ee:	f000 f82f 	bl	34001150 <ZWJVGGHBrD>
340010f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
340010f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
340010fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
340010fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
34001102:	2301      	movs	r3, #1
34001104:	4298      	cmp	r0, r3
34001106:	4604      	mov	r4, r0
34001108:	e9cd 3300 	strd	r3, r3, [sp]
3400110c:	d1df      	bne.n	340010ce <evision_api_awb_run_average+0x12>
3400110e:	4669      	mov	r1, sp
34001110:	4628      	mov	r0, r5
34001112:	f7ff fb45 	bl	340007a0 <aKNCUkZSff>
34001116:	2801      	cmp	r0, #1
34001118:	4604      	mov	r4, r0
3400111a:	d003      	beq.n	34001124 <evision_api_awb_run_average+0x68>
3400111c:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
34001120:	4809      	ldr	r0, [pc, #36]	@ (34001148 <evision_api_awb_run_average+0x8c>)
34001122:	e7d7      	b.n	340010d4 <evision_api_awb_run_average+0x18>
34001124:	f895 3060 	ldrb.w	r3, [r5, #96]	@ 0x60
34001128:	2b01      	cmp	r3, #1
3400112a:	d1d4      	bne.n	340010d6 <evision_api_awb_run_average+0x1a>
3400112c:	4628      	mov	r0, r5
3400112e:	f7ff fd22 	bl	34000b76 <LbAAVvVMdF>
34001132:	2801      	cmp	r0, #1
34001134:	4604      	mov	r4, r0
34001136:	d0ce      	beq.n	340010d6 <evision_api_awb_run_average+0x1a>
34001138:	f8d5 32c8 	ldr.w	r3, [r5, #712]	@ 0x2c8
3400113c:	4803      	ldr	r0, [pc, #12]	@ (3400114c <evision_api_awb_run_average+0x90>)
3400113e:	e7c9      	b.n	340010d4 <evision_api_awb_run_average+0x18>
34001140:	3402cfa3 	.word	0x3402cfa3
34001144:	3402d004 	.word	0x3402d004
34001148:	3402d02d 	.word	0x3402d02d
3400114c:	3402d061 	.word	0x3402d061

34001150 <ZWJVGGHBrD>:
34001150:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400115a:	d409      	bmi.n	34001170 <ZWJVGGHBrD+0x20>
3400115c:	eeb5 1bc0 	vcmpe.f64	d1, #0.0
34001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001164:	d404      	bmi.n	34001170 <ZWJVGGHBrD+0x20>
34001166:	eeb5 2bc0 	vcmpe.f64	d2, #0.0
3400116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400116e:	d50d      	bpl.n	3400118c <ZWJVGGHBrD+0x3c>
34001170:	ed8d 2b02 	vstr	d2, [sp, #8]
34001174:	ed8d 1b00 	vstr	d1, [sp]
34001178:	ec53 2b10 	vmov	r2, r3, d0
3400117c:	4844      	ldr	r0, [pc, #272]	@ (34001290 <ZWJVGGHBrD+0x140>)
3400117e:	f01e fecd 	bl	3401ff1c <iprintf>
34001182:	f04f 30ff 	mov.w	r0, #4294967295
34001186:	b005      	add	sp, #20
34001188:	f85d fb04 	ldr.w	pc, [sp], #4
3400118c:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 34001258 <ZWJVGGHBrD+0x108>
34001190:	eeb4 0bc7 	vcmpe.f64	d0, d7
34001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001198:	dc09      	bgt.n	340011ae <ZWJVGGHBrD+0x5e>
3400119a:	eeb4 1bc7 	vcmpe.f64	d1, d7
3400119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340011a2:	dc04      	bgt.n	340011ae <ZWJVGGHBrD+0x5e>
340011a4:	eeb4 2bc7 	vcmpe.f64	d2, d7
340011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340011ac:	dd07      	ble.n	340011be <ZWJVGGHBrD+0x6e>
340011ae:	ed8d 2b02 	vstr	d2, [sp, #8]
340011b2:	ed8d 1b00 	vstr	d1, [sp]
340011b6:	ec53 2b10 	vmov	r2, r3, d0
340011ba:	4836      	ldr	r0, [pc, #216]	@ (34001294 <ZWJVGGHBrD+0x144>)
340011bc:	e7df      	b.n	3400117e <ZWJVGGHBrD+0x2e>
340011be:	b128      	cbz	r0, 340011cc <ZWJVGGHBrD+0x7c>
340011c0:	b189      	cbz	r1, 340011e6 <ZWJVGGHBrD+0x96>
340011c2:	b9b2      	cbnz	r2, 340011f2 <ZWJVGGHBrD+0xa2>
340011c4:	4934      	ldr	r1, [pc, #208]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011c6:	4b35      	ldr	r3, [pc, #212]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011c8:	4608      	mov	r0, r1
340011ca:	e007      	b.n	340011dc <ZWJVGGHBrD+0x8c>
340011cc:	b171      	cbz	r1, 340011ec <ZWJVGGHBrD+0x9c>
340011ce:	4933      	ldr	r1, [pc, #204]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011d0:	4831      	ldr	r0, [pc, #196]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011d2:	2a00      	cmp	r2, #0
340011d4:	4a30      	ldr	r2, [pc, #192]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011d6:	4b31      	ldr	r3, [pc, #196]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011d8:	bf18      	it	ne
340011da:	4613      	movne	r3, r2
340011dc:	4602      	mov	r2, r0
340011de:	4830      	ldr	r0, [pc, #192]	@ (340012a0 <ZWJVGGHBrD+0x150>)
340011e0:	f01e fe9c 	bl	3401ff1c <iprintf>
340011e4:	e7cd      	b.n	34001182 <ZWJVGGHBrD+0x32>
340011e6:	492c      	ldr	r1, [pc, #176]	@ (34001298 <ZWJVGGHBrD+0x148>)
340011e8:	482c      	ldr	r0, [pc, #176]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011ea:	e7f2      	b.n	340011d2 <ZWJVGGHBrD+0x82>
340011ec:	492b      	ldr	r1, [pc, #172]	@ (3400129c <ZWJVGGHBrD+0x14c>)
340011ee:	4608      	mov	r0, r1
340011f0:	e7ef      	b.n	340011d2 <ZWJVGGHBrD+0x82>
340011f2:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 34001260 <ZWJVGGHBrD+0x110>
340011f6:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 34001268 <ZWJVGGHBrD+0x118>
340011fa:	ee21 7b07 	vmul.f64	d7, d1, d7
340011fe:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
34001202:	eea0 7b06 	vfma.f64	d7, d0, d6
34001206:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 34001270 <ZWJVGGHBrD+0x120>
3400120a:	eea2 7b05 	vfma.f64	d7, d2, d5
3400120e:	eea7 5b06 	vfma.f64	d5, d7, d6
34001212:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 34001278 <ZWJVGGHBrD+0x128>
34001216:	ed80 5b00 	vstr	d5, [r0]
3400121a:	ee27 7b41 	vnmul.f64	d7, d7, d1
3400121e:	eebb 5b0a 	vmov.f64	d5, #186	@ 0xc1d00000 -26.0
34001222:	eea0 7b05 	vfma.f64	d7, d0, d5
34001226:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 34001280 <ZWJVGGHBrD+0x130>
3400122a:	eea2 7b05 	vfma.f64	d7, d2, d5
3400122e:	ee27 7b06 	vmul.f64	d7, d7, d6
34001232:	ed81 7b00 	vstr	d7, [r1]
34001236:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 34001288 <ZWJVGGHBrD+0x138>
3400123a:	ee27 1b41 	vnmul.f64	d1, d7, d1
3400123e:	eeb2 7b04 	vmov.f64	d7, #36	@ 0x41200000  10.0
34001242:	eea0 1b05 	vfma.f64	d1, d0, d5
34001246:	eea2 1b47 	vfms.f64	d1, d2, d7
3400124a:	ee21 1b06 	vmul.f64	d1, d1, d6
3400124e:	2001      	movs	r0, #1
34001250:	ed82 1b00 	vstr	d1, [r2]
34001254:	e797      	b.n	34001186 <ZWJVGGHBrD+0x36>
34001256:	bf00      	nop
34001258:	00000000 	.word	0x00000000
3400125c:	406fe000 	.word	0x406fe000
34001260:	00000000 	.word	0x00000000
34001264:	4063a000 	.word	0x4063a000
34001268:	00000000 	.word	0x00000000
3400126c:	40478000 	.word	0x40478000
34001270:	00000000 	.word	0x00000000
34001274:	3f700000 	.word	0x3f700000
34001278:	00000000 	.word	0x00000000
3400127c:	40558000 	.word	0x40558000
34001280:	00000000 	.word	0x00000000
34001284:	405c0000 	.word	0x405c0000
34001288:	00000000 	.word	0x00000000
3400128c:	40598000 	.word	0x40598000
34001290:	3402d096 	.word	0x3402d096
34001294:	3402d0d4 	.word	0x3402d0d4
34001298:	34026609 	.word	0x34026609
3400129c:	34026607 	.word	0x34026607
340012a0:	3402d114 	.word	0x3402d114
340012a4:	00000000 	.word	0x00000000

340012a8 <jkCowjPIUr>:
340012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340012ac:	4698      	mov	r8, r3
340012ae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
340012b0:	460f      	mov	r7, r1
340012b2:	4606      	mov	r6, r0
340012b4:	9906      	ldr	r1, [sp, #24]
340012b6:	b923      	cbnz	r3, 340012c2 <jkCowjPIUr+0x1a>
340012b8:	f8c8 7000 	str.w	r7, [r8]
340012bc:	600a      	str	r2, [r1, #0]
340012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340012c2:	4d21      	ldr	r5, [pc, #132]	@ (34001348 <jkCowjPIUr+0xa0>)
340012c4:	005b      	lsls	r3, r3, #1
340012c6:	fbb5 f5f3 	udiv	r5, r5, r3
340012ca:	4295      	cmp	r5, r2
340012cc:	d2f4      	bcs.n	340012b8 <jkCowjPIUr+0x10>
340012ce:	fbb2 f4f5 	udiv	r4, r2, r5
340012d2:	ee07 2a90 	vmov	s15, r2
340012d6:	fb04 5405 	mla	r4, r4, r5, r5
340012da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340012de:	ee07 4a90 	vmov	s15, r4
340012e2:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 3400134c <jkCowjPIUr+0xa4>
340012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
340012ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
340012ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
340012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340012f6:	d5df      	bpl.n	340012b8 <jkCowjPIUr+0x10>
340012f8:	1b62      	subs	r2, r4, r5
340012fa:	600a      	str	r2, [r1, #0]
340012fc:	3201      	adds	r2, #1
340012fe:	ee07 2a90 	vmov	s15, r2
34001302:	eef8 7a67 	vcvt.f32.u32	s15, s15
34001306:	ee87 0a27 	vdiv.f32	s0, s14, s15
3400130a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400130e:	f021 f927 	bl	34022560 <log10>
34001312:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 34001340 <jkCowjPIUr+0x98>
34001316:	ee20 0b07 	vmul.f64	d0, d0, d7
3400131a:	eebc 0bc0 	vcvt.u32.f64	s0, d0
3400131e:	ee10 3a10 	vmov	r3, s0
34001322:	443b      	add	r3, r7
34001324:	461f      	mov	r7, r3
34001326:	f8c8 3000 	str.w	r3, [r8]
3400132a:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
3400132c:	42bb      	cmp	r3, r7
3400132e:	bf94      	ite	ls
34001330:	f8c8 3000 	strls.w	r3, [r8]
34001334:	f8c8 7000 	strhi.w	r7, [r8]
34001338:	e7c1      	b.n	340012be <jkCowjPIUr+0x16>
3400133a:	bf00      	nop
3400133c:	f3af 8000 	nop.w
34001340:	00000000 	.word	0x00000000
34001344:	40d38800 	.word	0x40d38800
34001348:	000f4240 	.word	0x000f4240
3400134c:	3f733333 	.word	0x3f733333

34001350 <EXymUSSPAy>:
34001350:	ee07 1a90 	vmov	s15, r1
34001354:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 340013f8 <EXymUSSPAy+0xa8>
34001358:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400135c:	b570      	push	{r4, r5, r6, lr}
3400135e:	ee87 1a87 	vdiv.f32	s2, s15, s14
34001362:	ed2d 8b02 	vpush	{d8}
34001366:	ee08 2a10 	vmov	s16, r2
3400136a:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
3400136e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34001372:	4605      	mov	r5, r0
34001374:	461c      	mov	r4, r3
34001376:	9e06      	ldr	r6, [sp, #24]
34001378:	f021 fa96 	bl	340228a8 <pow>
3400137c:	eeb8 8b48 	vcvt.f64.u32	d8, s16
34001380:	ee28 0b00 	vmul.f64	d0, d8, d0
34001384:	eefc 7bc0 	vcvt.u32.f64	s15, d0
34001388:	ee17 2a90 	vmov	r2, s15
3400138c:	6c69      	ldr	r1, [r5, #68]	@ 0x44
3400138e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34001392:	4291      	cmp	r1, r2
34001394:	d916      	bls.n	340013c4 <EXymUSSPAy+0x74>
34001396:	2300      	movs	r3, #0
34001398:	6023      	str	r3, [r4, #0]
3400139a:	edc6 7a00 	vstr	s15, [r6]
3400139e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
340013a0:	eddf 6a16 	vldr	s13, [pc, #88]	@ 340013fc <EXymUSSPAy+0xac>
340013a4:	ee07 3a90 	vmov	s15, r3
340013a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340013ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
340013b0:	eeb4 7a67 	vcmp.f32	s14, s15
340013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340013b8:	bfc8      	it	gt
340013ba:	461a      	movgt	r2, r3
340013bc:	6032      	str	r2, [r6, #0]
340013be:	ecbd 8b02 	vpop	{d8}
340013c2:	bd70      	pop	{r4, r5, r6, pc}
340013c4:	ee07 1a90 	vmov	s15, r1
340013c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
340013cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
340013d0:	6031      	str	r1, [r6, #0]
340013d2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340013d6:	f021 f8c3 	bl	34022560 <log10>
340013da:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 340013f0 <EXymUSSPAy+0xa0>
340013de:	ee20 0b07 	vmul.f64	d0, d0, d7
340013e2:	eebc 0bc0 	vcvt.u32.f64	s0, d0
340013e6:	ed84 0a00 	vstr	s0, [r4]
340013ea:	e7e8      	b.n	340013be <EXymUSSPAy+0x6e>
340013ec:	f3af 8000 	nop.w
340013f0:	00000000 	.word	0x00000000
340013f4:	40d38800 	.word	0x40d38800
340013f8:	469c4000 	.word	0x469c4000
340013fc:	3f7ae148 	.word	0x3f7ae148

34001400 <evision_api_st_ae_new>:
34001400:	b510      	push	{r4, lr}
34001402:	4604      	mov	r4, r0
34001404:	b090      	sub	sp, #64	@ 0x40
34001406:	b160      	cbz	r0, 34001422 <evision_api_st_ae_new+0x22>
34001408:	2300      	movs	r3, #0
3400140a:	4c07      	ldr	r4, [pc, #28]	@ (34001428 <evision_api_st_ae_new+0x28>)
3400140c:	2140      	movs	r1, #64	@ 0x40
3400140e:	7023      	strb	r3, [r4, #0]
34001410:	65a0      	str	r0, [r4, #88]	@ 0x58
34001412:	4b06      	ldr	r3, [pc, #24]	@ (3400142c <evision_api_st_ae_new+0x2c>)
34001414:	4668      	mov	r0, sp
34001416:	4a06      	ldr	r2, [pc, #24]	@ (34001430 <evision_api_st_ae_new+0x30>)
34001418:	f024 fc80 	bl	34025d1c <sniprintf>
3400141c:	4668      	mov	r0, sp
3400141e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34001420:	4798      	blx	r3
34001422:	4620      	mov	r0, r4
34001424:	b010      	add	sp, #64	@ 0x40
34001426:	bd10      	pop	{r4, pc}
34001428:	3410d2f0 	.word	0x3410d2f0
3400142c:	34108c96 	.word	0x34108c96
34001430:	3402d15e 	.word	0x3402d15e

34001434 <evision_api_st_ae_delete>:
34001434:	2800      	cmp	r0, #0
34001436:	bf14      	ite	ne
34001438:	2001      	movne	r0, #1
3400143a:	f04f 30ff 	moveq.w	r0, #4294967295
3400143e:	4770      	bx	lr

34001440 <ZmyWHAIPUT>:
34001440:	2238      	movs	r2, #56	@ 0x38
34001442:	230a      	movs	r3, #10
34001444:	e9c0 2304 	strd	r2, r3, [r0, #16]
34001448:	2264      	movs	r2, #100	@ 0x64
3400144a:	232d      	movs	r3, #45	@ 0x2d
3400144c:	2178      	movs	r1, #120	@ 0x78
3400144e:	e9c0 2306 	strd	r2, r3, [r0, #24]
34001452:	f240 53dc 	movw	r3, #1500	@ 0x5dc
34001456:	b530      	push	{r4, r5, lr}
34001458:	e9c0 1308 	strd	r1, r3, [r0, #32]
3400145c:	f241 7470 	movw	r4, #6000	@ 0x1770
34001460:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
34001464:	e9c0 430a 	strd	r4, r3, [r0, #40]	@ 0x28
34001468:	a50b      	add	r5, pc, #44	@ (adr r5, 34001498 <ZmyWHAIPUT+0x58>)
3400146a:	e9d5 4500 	ldrd	r4, r5, [r5]
3400146e:	2305      	movs	r3, #5
34001470:	f248 01e8 	movw	r1, #33000	@ 0x80e8
34001474:	6503      	str	r3, [r0, #80]	@ 0x50
34001476:	2300      	movs	r3, #0
34001478:	e9c0 3110 	strd	r3, r1, [r0, #64]	@ 0x40
3400147c:	2101      	movs	r1, #1
3400147e:	e9c0 450c 	strd	r4, r5, [r0, #48]	@ 0x30
34001482:	a507      	add	r5, pc, #28	@ (adr r5, 340014a0 <ZmyWHAIPUT+0x60>)
34001484:	e9d5 4500 	ldrd	r4, r5, [r5]
34001488:	e9c0 1212 	strd	r1, r2, [r0, #72]	@ 0x48
3400148c:	e9c0 450e 	strd	r4, r5, [r0, #56]	@ 0x38
34001490:	6543      	str	r3, [r0, #84]	@ 0x54
34001492:	bd30      	pop	{r4, r5, pc}
34001494:	f3af 8000 	nop.w
34001498:	40000000 	.word	0x40000000
3400149c:	3f947ae1 	.word	0x3f947ae1
340014a0:	e0000000 	.word	0xe0000000
340014a4:	3f70624d 	.word	0x3f70624d

340014a8 <evision_api_st_ae_init>:
340014a8:	b510      	push	{r4, lr}
340014aa:	4604      	mov	r4, r0
340014ac:	b120      	cbz	r0, 340014b8 <evision_api_st_ae_init+0x10>
340014ae:	f7ff ffc7 	bl	34001440 <ZmyWHAIPUT>
340014b2:	2001      	movs	r0, #1
340014b4:	7020      	strb	r0, [r4, #0]
340014b6:	bd10      	pop	{r4, pc}
340014b8:	f04f 30ff 	mov.w	r0, #4294967295
340014bc:	e7fb      	b.n	340014b6 <evision_api_st_ae_init+0xe>

340014be <evision_api_st_ae_process>:
340014be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340014c2:	4615      	mov	r5, r2
340014c4:	469b      	mov	fp, r3
340014c6:	4604      	mov	r4, r0
340014c8:	b087      	sub	sp, #28
340014ca:	2800      	cmp	r0, #0
340014cc:	f000 8123 	beq.w	34001716 <evision_api_st_ae_process+0x258>
340014d0:	7803      	ldrb	r3, [r0, #0]
340014d2:	2b01      	cmp	r3, #1
340014d4:	d11a      	bne.n	3400150c <evision_api_st_ae_process+0x4e>
340014d6:	2302      	movs	r3, #2
340014d8:	7003      	strb	r3, [r0, #0]
340014da:	f8d4 8054 	ldr.w	r8, [r4, #84]	@ 0x54
340014de:	f1b8 0f00 	cmp.w	r8, #0
340014e2:	d017      	beq.n	34001514 <evision_api_st_ae_process+0x56>
340014e4:	4b90      	ldr	r3, [pc, #576]	@ (34001728 <evision_api_st_ae_process+0x26a>)
340014e6:	ea4f 0248 	mov.w	r2, r8, lsl #1
340014ea:	fbb3 f3f2 	udiv	r3, r3, r2
340014ee:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
340014f0:	428e      	cmp	r6, r1
340014f2:	d211      	bcs.n	34001518 <evision_api_st_ae_process+0x5a>
340014f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
340014f6:	42aa      	cmp	r2, r5
340014f8:	d90e      	bls.n	34001518 <evision_api_st_ae_process+0x5a>
340014fa:	fbb5 f2f3 	udiv	r2, r5, r3
340014fe:	fb03 5312 	mls	r3, r3, r2, r5
34001502:	b14b      	cbz	r3, 34001518 <evision_api_st_ae_process+0x5a>
34001504:	e9c4 5601 	strd	r5, r6, [r4, #4]
34001508:	2001      	movs	r0, #1
3400150a:	e106      	b.n	3400171a <evision_api_st_ae_process+0x25c>
3400150c:	2b02      	cmp	r3, #2
3400150e:	d0e4      	beq.n	340014da <evision_api_st_ae_process+0x1c>
34001510:	2000      	movs	r0, #0
34001512:	e102      	b.n	3400171a <evision_api_st_ae_process+0x25c>
34001514:	2301      	movs	r3, #1
34001516:	e7ea      	b.n	340014ee <evision_api_st_ae_process+0x30>
34001518:	f10d 0914 	add.w	r9, sp, #20
3400151c:	462a      	mov	r2, r5
3400151e:	ab04      	add	r3, sp, #16
34001520:	4620      	mov	r0, r4
34001522:	f8cd 9000 	str.w	r9, [sp]
34001526:	9103      	str	r1, [sp, #12]
34001528:	f7ff ff12 	bl	34001350 <EXymUSSPAy>
3400152c:	e9dd 7204 	ldrd	r7, r2, [sp, #16]
34001530:	f8d4 c010 	ldr.w	ip, [r4, #16]
34001534:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
34001538:	ee07 ca90 	vmov	s15, ip
3400153c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34001540:	ee07 ba90 	vmov	s15, fp
34001544:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34001548:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3400154c:	ee37 7b05 	vadd.f64	d7, d7, d5
34001550:	ee86 0b07 	vdiv.f64	d0, d6, d7
34001554:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34001556:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
3400155a:	459b      	cmp	fp, r3
3400155c:	9903      	ldr	r1, [sp, #12]
3400155e:	d248      	bcs.n	340015f2 <evision_api_st_ae_process+0x134>
34001560:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
34001564:	eeb4 0ae7 	vcmpe.f32	s0, s15
34001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400156c:	d441      	bmi.n	340015f2 <evision_api_st_ae_process+0x134>
3400156e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34001570:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34001574:	428a      	cmp	r2, r1
34001576:	d220      	bcs.n	340015ba <evision_api_st_ae_process+0xfc>
34001578:	2a01      	cmp	r2, #1
3400157a:	4613      	mov	r3, r2
3400157c:	bf38      	it	cc
3400157e:	2301      	movcc	r3, #1
34001580:	ee07 3a90 	vmov	s15, r3
34001584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34001588:	ee67 7a80 	vmul.f32	s15, s15, s0
3400158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34001590:	ee17 3a90 	vmov	r3, s15
34001594:	428b      	cmp	r3, r1
34001596:	bfc1      	itttt	gt
34001598:	ee07 1a90 	vmovgt	s15, r1
3400159c:	eeb8 6ae7 	vcvtgt.f32.s32	s12, s15
340015a0:	ee07 2a90 	vmovgt	s15, r2
340015a4:	eef8 6a67 	vcvtgt.f32.u32	s13, s15
340015a8:	bfc3      	ittte	gt
340015aa:	eec6 7a26 	vdivgt.f32	s15, s12, s13
340015ae:	460b      	movgt	r3, r1
340015b0:	ee80 0a27 	vdivgt.f32	s0, s0, s15
340015b4:	eeb0 0a47 	vmovle.f32	s0, s14
340015b8:	6063      	str	r3, [r4, #4]
340015ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
340015be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340015c2:	dda1      	ble.n	34001508 <evision_api_st_ae_process+0x4a>
340015c4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
340015c8:	f020 ffca 	bl	34022560 <log10>
340015cc:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
340015d0:	ee20 0b07 	vmul.f64	d0, d0, d7
340015d4:	ed9f 7b52 	vldr	d7, [pc, #328]	@ 34001720 <evision_api_st_ae_process+0x262>
340015d8:	ee20 0b07 	vmul.f64	d0, d0, d7
340015dc:	eebd 0bc0 	vcvt.s32.f64	s0, d0
340015e0:	ee10 3a10 	vmov	r3, s0
340015e4:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
340015e6:	443b      	add	r3, r7
340015e8:	4293      	cmp	r3, r2
340015ea:	bfd4      	ite	le
340015ec:	60a3      	strle	r3, [r4, #8]
340015ee:	60a2      	strgt	r2, [r4, #8]
340015f0:	e78a      	b.n	34001508 <evision_api_st_ae_process+0x4a>
340015f2:	ebac 030b 	sub.w	r3, ip, fp
340015f6:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
340015fa:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
340015fe:	9303      	str	r3, [sp, #12]
34001600:	69e3      	ldr	r3, [r4, #28]
34001602:	459e      	cmp	lr, r3
34001604:	d859      	bhi.n	340016ba <evision_api_st_ae_process+0x1fc>
34001606:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
3400160a:	9803      	ldr	r0, [sp, #12]
3400160c:	69a3      	ldr	r3, [r4, #24]
3400160e:	4343      	muls	r3, r0
34001610:	6960      	ldr	r0, [r4, #20]
34001612:	eb00 0a0c 	add.w	sl, r0, ip
34001616:	45da      	cmp	sl, fp
34001618:	f8df a114 	ldr.w	sl, [pc, #276]	@ 34001730 <evision_api_st_ae_process+0x272>
3400161c:	d255      	bcs.n	340016ca <evision_api_st_ae_process+0x20c>
3400161e:	ee07 ea90 	vmov	s15, lr
34001622:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 3400172c <evision_api_st_ae_process+0x26e>
34001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400162a:	ee67 7a87 	vmul.f32	s15, s15, s14
3400162e:	ee07 3a10 	vmov	s14, r3
34001632:	eef1 6a67 	vneg.f32	s13, s15
34001636:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
3400163a:	eeb4 7ae6 	vcmpe.f32	s14, s13
3400163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34001642:	d504      	bpl.n	3400164e <evision_api_st_ae_process+0x190>
34001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34001648:	ee17 3a90 	vmov	r3, s15
3400164c:	425b      	negs	r3, r3
3400164e:	2b00      	cmp	r3, #0
34001650:	d050      	beq.n	340016f4 <evision_api_st_ae_process+0x236>
34001652:	42be      	cmp	r6, r7
34001654:	d144      	bne.n	340016e0 <evision_api_st_ae_process+0x222>
34001656:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34001658:	428a      	cmp	r2, r1
3400165a:	d301      	bcc.n	34001660 <evision_api_st_ae_process+0x1a2>
3400165c:	2b00      	cmp	r3, #0
3400165e:	da3f      	bge.n	340016e0 <evision_api_st_ae_process+0x222>
34001660:	9803      	ldr	r0, [sp, #12]
34001662:	ee07 2a90 	vmov	s15, r2
34001666:	fb02 0000 	mla	r0, r2, r0, r0
3400166a:	ee06 0a90 	vmov	s13, r0
3400166e:	2b00      	cmp	r3, #0
34001670:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34001674:	eeb8 6be6 	vcvt.f64.s32	d6, s13
34001678:	da2f      	bge.n	340016da <evision_api_st_ae_process+0x21c>
3400167a:	ed94 5b0e 	vldr	d5, [r4, #56]	@ 0x38
3400167e:	eea5 7b06 	vfma.f64	d7, d5, d6
34001682:	eebd 7bc7 	vcvt.s32.f64	s14, d7
34001686:	ee17 2a10 	vmov	r2, s14
3400168a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400168c:	60a7      	str	r7, [r4, #8]
3400168e:	429a      	cmp	r2, r3
34001690:	bfb8      	it	lt
34001692:	461a      	movlt	r2, r3
34001694:	428a      	cmp	r2, r1
34001696:	bfd4      	ite	le
34001698:	6062      	strle	r2, [r4, #4]
3400169a:	6061      	strgt	r1, [r4, #4]
3400169c:	4620      	mov	r0, r4
3400169e:	f8cd 9000 	str.w	r9, [sp]
340016a2:	ab04      	add	r3, sp, #16
340016a4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
340016a8:	f7ff fdfe 	bl	340012a8 <jkCowjPIUr>
340016ac:	9b04      	ldr	r3, [sp, #16]
340016ae:	9d05      	ldr	r5, [sp, #20]
340016b0:	60a3      	str	r3, [r4, #8]
340016b2:	6065      	str	r5, [r4, #4]
340016b4:	f8ca 8060 	str.w	r8, [sl, #96]	@ 0x60
340016b8:	e726      	b.n	34001508 <evision_api_st_ae_process+0x4a>
340016ba:	6a23      	ldr	r3, [r4, #32]
340016bc:	459e      	cmp	lr, r3
340016be:	bf2c      	ite	cs
340016c0:	f8d4 e02c 	ldrcs.w	lr, [r4, #44]	@ 0x2c
340016c4:	f8d4 e028 	ldrcc.w	lr, [r4, #40]	@ 0x28
340016c8:	e79f      	b.n	3400160a <evision_api_st_ae_process+0x14c>
340016ca:	ebac 0c00 	sub.w	ip, ip, r0
340016ce:	45dc      	cmp	ip, fp
340016d0:	dd10      	ble.n	340016f4 <evision_api_st_ae_process+0x236>
340016d2:	4573      	cmp	r3, lr
340016d4:	bfa8      	it	ge
340016d6:	4673      	movge	r3, lr
340016d8:	e7b9      	b.n	3400164e <evision_api_st_ae_process+0x190>
340016da:	ed94 5b0c 	vldr	d5, [r4, #48]	@ 0x30
340016de:	e7ce      	b.n	3400167e <evision_api_st_ae_process+0x1c0>
340016e0:	441f      	add	r7, r3
340016e2:	42be      	cmp	r6, r7
340016e4:	dc03      	bgt.n	340016ee <evision_api_st_ae_process+0x230>
340016e6:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
340016e8:	42be      	cmp	r6, r7
340016ea:	bfa8      	it	ge
340016ec:	463e      	movge	r6, r7
340016ee:	e9c4 2601 	strd	r2, r6, [r4, #4]
340016f2:	e7d3      	b.n	3400169c <evision_api_st_ae_process+0x1de>
340016f4:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
340016f8:	4598      	cmp	r8, r3
340016fa:	d00a      	beq.n	34001712 <evision_api_st_ae_process+0x254>
340016fc:	462a      	mov	r2, r5
340016fe:	4620      	mov	r0, r4
34001700:	f8cd 9000 	str.w	r9, [sp]
34001704:	ab04      	add	r3, sp, #16
34001706:	f1b8 0f00 	cmp.w	r8, #0
3400170a:	d1cd      	bne.n	340016a8 <evision_api_st_ae_process+0x1ea>
3400170c:	f7ff fe20 	bl	34001350 <EXymUSSPAy>
34001710:	e7cc      	b.n	340016ac <evision_api_st_ae_process+0x1ee>
34001712:	60a1      	str	r1, [r4, #8]
34001714:	e7cd      	b.n	340016b2 <evision_api_st_ae_process+0x1f4>
34001716:	f04f 30ff 	mov.w	r0, #4294967295
3400171a:	b007      	add	sp, #28
3400171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34001720:	00000000 	.word	0x00000000
34001724:	408f4000 	.word	0x408f4000
34001728:	000f4240 	.word	0x000f4240
3400172c:	3f59999a 	.word	0x3f59999a
34001730:	3410d2f0 	.word	0x3410d2f0

34001734 <__aeabi_drsub>:
34001734:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
34001738:	e002      	b.n	34001740 <__adddf3>
3400173a:	bf00      	nop

3400173c <__aeabi_dsub>:
3400173c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

34001740 <__adddf3>:
34001740:	b530      	push	{r4, r5, lr}
34001742:	ea4f 0441 	mov.w	r4, r1, lsl #1
34001746:	ea4f 0543 	mov.w	r5, r3, lsl #1
3400174a:	ea94 0f05 	teq	r4, r5
3400174e:	bf08      	it	eq
34001750:	ea90 0f02 	teqeq	r0, r2
34001754:	bf1f      	itttt	ne
34001756:	ea54 0c00 	orrsne.w	ip, r4, r0
3400175a:	ea55 0c02 	orrsne.w	ip, r5, r2
3400175e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
34001762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
34001766:	f000 80e2 	beq.w	3400192e <__adddf3+0x1ee>
3400176a:	ea4f 5454 	mov.w	r4, r4, lsr #21
3400176e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
34001772:	bfb8      	it	lt
34001774:	426d      	neglt	r5, r5
34001776:	dd0c      	ble.n	34001792 <__adddf3+0x52>
34001778:	442c      	add	r4, r5
3400177a:	ea80 0202 	eor.w	r2, r0, r2
3400177e:	ea81 0303 	eor.w	r3, r1, r3
34001782:	ea82 0000 	eor.w	r0, r2, r0
34001786:	ea83 0101 	eor.w	r1, r3, r1
3400178a:	ea80 0202 	eor.w	r2, r0, r2
3400178e:	ea81 0303 	eor.w	r3, r1, r3
34001792:	2d36      	cmp	r5, #54	@ 0x36
34001794:	bf88      	it	hi
34001796:	bd30      	pophi	{r4, r5, pc}
34001798:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
3400179c:	ea4f 3101 	mov.w	r1, r1, lsl #12
340017a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
340017a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
340017a8:	d002      	beq.n	340017b0 <__adddf3+0x70>
340017aa:	4240      	negs	r0, r0
340017ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
340017b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
340017b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
340017b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
340017bc:	d002      	beq.n	340017c4 <__adddf3+0x84>
340017be:	4252      	negs	r2, r2
340017c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
340017c4:	ea94 0f05 	teq	r4, r5
340017c8:	f000 80a7 	beq.w	3400191a <__adddf3+0x1da>
340017cc:	f1a4 0401 	sub.w	r4, r4, #1
340017d0:	f1d5 0e20 	rsbs	lr, r5, #32
340017d4:	db0d      	blt.n	340017f2 <__adddf3+0xb2>
340017d6:	fa02 fc0e 	lsl.w	ip, r2, lr
340017da:	fa22 f205 	lsr.w	r2, r2, r5
340017de:	1880      	adds	r0, r0, r2
340017e0:	f141 0100 	adc.w	r1, r1, #0
340017e4:	fa03 f20e 	lsl.w	r2, r3, lr
340017e8:	1880      	adds	r0, r0, r2
340017ea:	fa43 f305 	asr.w	r3, r3, r5
340017ee:	4159      	adcs	r1, r3
340017f0:	e00e      	b.n	34001810 <__adddf3+0xd0>
340017f2:	f1a5 0520 	sub.w	r5, r5, #32
340017f6:	f10e 0e20 	add.w	lr, lr, #32
340017fa:	2a01      	cmp	r2, #1
340017fc:	fa03 fc0e 	lsl.w	ip, r3, lr
34001800:	bf28      	it	cs
34001802:	f04c 0c02 	orrcs.w	ip, ip, #2
34001806:	fa43 f305 	asr.w	r3, r3, r5
3400180a:	18c0      	adds	r0, r0, r3
3400180c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
34001810:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001814:	d507      	bpl.n	34001826 <__adddf3+0xe6>
34001816:	f04f 0e00 	mov.w	lr, #0
3400181a:	f1dc 0c00 	rsbs	ip, ip, #0
3400181e:	eb7e 0000 	sbcs.w	r0, lr, r0
34001822:	eb6e 0101 	sbc.w	r1, lr, r1
34001826:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
3400182a:	d31b      	bcc.n	34001864 <__adddf3+0x124>
3400182c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
34001830:	d30c      	bcc.n	3400184c <__adddf3+0x10c>
34001832:	0849      	lsrs	r1, r1, #1
34001834:	ea5f 0030 	movs.w	r0, r0, rrx
34001838:	ea4f 0c3c 	mov.w	ip, ip, rrx
3400183c:	f104 0401 	add.w	r4, r4, #1
34001840:	ea4f 5244 	mov.w	r2, r4, lsl #21
34001844:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
34001848:	f080 809a 	bcs.w	34001980 <__adddf3+0x240>
3400184c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
34001850:	bf08      	it	eq
34001852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
34001856:	f150 0000 	adcs.w	r0, r0, #0
3400185a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
3400185e:	ea41 0105 	orr.w	r1, r1, r5
34001862:	bd30      	pop	{r4, r5, pc}
34001864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
34001868:	4140      	adcs	r0, r0
3400186a:	eb41 0101 	adc.w	r1, r1, r1
3400186e:	3c01      	subs	r4, #1
34001870:	bf28      	it	cs
34001872:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
34001876:	d2e9      	bcs.n	3400184c <__adddf3+0x10c>
34001878:	f091 0f00 	teq	r1, #0
3400187c:	bf04      	itt	eq
3400187e:	4601      	moveq	r1, r0
34001880:	2000      	moveq	r0, #0
34001882:	fab1 f381 	clz	r3, r1
34001886:	bf08      	it	eq
34001888:	3320      	addeq	r3, #32
3400188a:	f1a3 030b 	sub.w	r3, r3, #11
3400188e:	f1b3 0220 	subs.w	r2, r3, #32
34001892:	da0c      	bge.n	340018ae <__adddf3+0x16e>
34001894:	320c      	adds	r2, #12
34001896:	dd08      	ble.n	340018aa <__adddf3+0x16a>
34001898:	f102 0c14 	add.w	ip, r2, #20
3400189c:	f1c2 020c 	rsb	r2, r2, #12
340018a0:	fa01 f00c 	lsl.w	r0, r1, ip
340018a4:	fa21 f102 	lsr.w	r1, r1, r2
340018a8:	e00c      	b.n	340018c4 <__adddf3+0x184>
340018aa:	f102 0214 	add.w	r2, r2, #20
340018ae:	bfd8      	it	le
340018b0:	f1c2 0c20 	rsble	ip, r2, #32
340018b4:	fa01 f102 	lsl.w	r1, r1, r2
340018b8:	fa20 fc0c 	lsr.w	ip, r0, ip
340018bc:	bfdc      	itt	le
340018be:	ea41 010c 	orrle.w	r1, r1, ip
340018c2:	4090      	lslle	r0, r2
340018c4:	1ae4      	subs	r4, r4, r3
340018c6:	bfa2      	ittt	ge
340018c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
340018cc:	4329      	orrge	r1, r5
340018ce:	bd30      	popge	{r4, r5, pc}
340018d0:	ea6f 0404 	mvn.w	r4, r4
340018d4:	3c1f      	subs	r4, #31
340018d6:	da1c      	bge.n	34001912 <__adddf3+0x1d2>
340018d8:	340c      	adds	r4, #12
340018da:	dc0e      	bgt.n	340018fa <__adddf3+0x1ba>
340018dc:	f104 0414 	add.w	r4, r4, #20
340018e0:	f1c4 0220 	rsb	r2, r4, #32
340018e4:	fa20 f004 	lsr.w	r0, r0, r4
340018e8:	fa01 f302 	lsl.w	r3, r1, r2
340018ec:	ea40 0003 	orr.w	r0, r0, r3
340018f0:	fa21 f304 	lsr.w	r3, r1, r4
340018f4:	ea45 0103 	orr.w	r1, r5, r3
340018f8:	bd30      	pop	{r4, r5, pc}
340018fa:	f1c4 040c 	rsb	r4, r4, #12
340018fe:	f1c4 0220 	rsb	r2, r4, #32
34001902:	fa20 f002 	lsr.w	r0, r0, r2
34001906:	fa01 f304 	lsl.w	r3, r1, r4
3400190a:	ea40 0003 	orr.w	r0, r0, r3
3400190e:	4629      	mov	r1, r5
34001910:	bd30      	pop	{r4, r5, pc}
34001912:	fa21 f004 	lsr.w	r0, r1, r4
34001916:	4629      	mov	r1, r5
34001918:	bd30      	pop	{r4, r5, pc}
3400191a:	f094 0f00 	teq	r4, #0
3400191e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
34001922:	bf06      	itte	eq
34001924:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
34001928:	3401      	addeq	r4, #1
3400192a:	3d01      	subne	r5, #1
3400192c:	e74e      	b.n	340017cc <__adddf3+0x8c>
3400192e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
34001932:	bf18      	it	ne
34001934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
34001938:	d029      	beq.n	3400198e <__adddf3+0x24e>
3400193a:	ea94 0f05 	teq	r4, r5
3400193e:	bf08      	it	eq
34001940:	ea90 0f02 	teqeq	r0, r2
34001944:	d005      	beq.n	34001952 <__adddf3+0x212>
34001946:	ea54 0c00 	orrs.w	ip, r4, r0
3400194a:	bf04      	itt	eq
3400194c:	4619      	moveq	r1, r3
3400194e:	4610      	moveq	r0, r2
34001950:	bd30      	pop	{r4, r5, pc}
34001952:	ea91 0f03 	teq	r1, r3
34001956:	bf1e      	ittt	ne
34001958:	2100      	movne	r1, #0
3400195a:	2000      	movne	r0, #0
3400195c:	bd30      	popne	{r4, r5, pc}
3400195e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
34001962:	d105      	bne.n	34001970 <__adddf3+0x230>
34001964:	0040      	lsls	r0, r0, #1
34001966:	4149      	adcs	r1, r1
34001968:	bf28      	it	cs
3400196a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
3400196e:	bd30      	pop	{r4, r5, pc}
34001970:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
34001974:	bf3c      	itt	cc
34001976:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
3400197a:	bd30      	popcc	{r4, r5, pc}
3400197c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001980:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
34001984:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
34001988:	f04f 0000 	mov.w	r0, #0
3400198c:	bd30      	pop	{r4, r5, pc}
3400198e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
34001992:	bf1a      	itte	ne
34001994:	4619      	movne	r1, r3
34001996:	4610      	movne	r0, r2
34001998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
3400199c:	bf1c      	itt	ne
3400199e:	460b      	movne	r3, r1
340019a0:	4602      	movne	r2, r0
340019a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
340019a6:	bf06      	itte	eq
340019a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
340019ac:	ea91 0f03 	teqeq	r1, r3
340019b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
340019b4:	bd30      	pop	{r4, r5, pc}
340019b6:	bf00      	nop

340019b8 <__aeabi_ui2d>:
340019b8:	f090 0f00 	teq	r0, #0
340019bc:	bf04      	itt	eq
340019be:	2100      	moveq	r1, #0
340019c0:	4770      	bxeq	lr
340019c2:	b530      	push	{r4, r5, lr}
340019c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340019c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
340019cc:	f04f 0500 	mov.w	r5, #0
340019d0:	f04f 0100 	mov.w	r1, #0
340019d4:	e750      	b.n	34001878 <__adddf3+0x138>
340019d6:	bf00      	nop

340019d8 <__aeabi_i2d>:
340019d8:	f090 0f00 	teq	r0, #0
340019dc:	bf04      	itt	eq
340019de:	2100      	moveq	r1, #0
340019e0:	4770      	bxeq	lr
340019e2:	b530      	push	{r4, r5, lr}
340019e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
340019e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
340019ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
340019f0:	bf48      	it	mi
340019f2:	4240      	negmi	r0, r0
340019f4:	f04f 0100 	mov.w	r1, #0
340019f8:	e73e      	b.n	34001878 <__adddf3+0x138>
340019fa:	bf00      	nop

340019fc <__aeabi_f2d>:
340019fc:	0042      	lsls	r2, r0, #1
340019fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
34001a02:	ea4f 0131 	mov.w	r1, r1, rrx
34001a06:	ea4f 7002 	mov.w	r0, r2, lsl #28
34001a0a:	bf1f      	itttt	ne
34001a0c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
34001a10:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
34001a14:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
34001a18:	4770      	bxne	lr
34001a1a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
34001a1e:	bf08      	it	eq
34001a20:	4770      	bxeq	lr
34001a22:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
34001a26:	bf04      	itt	eq
34001a28:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
34001a2c:	4770      	bxeq	lr
34001a2e:	b530      	push	{r4, r5, lr}
34001a30:	f44f 7460 	mov.w	r4, #896	@ 0x380
34001a34:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34001a38:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34001a3c:	e71c      	b.n	34001878 <__adddf3+0x138>
34001a3e:	bf00      	nop

34001a40 <__aeabi_ul2d>:
34001a40:	ea50 0201 	orrs.w	r2, r0, r1
34001a44:	bf08      	it	eq
34001a46:	4770      	bxeq	lr
34001a48:	b530      	push	{r4, r5, lr}
34001a4a:	f04f 0500 	mov.w	r5, #0
34001a4e:	e00a      	b.n	34001a66 <__aeabi_l2d+0x16>

34001a50 <__aeabi_l2d>:
34001a50:	ea50 0201 	orrs.w	r2, r0, r1
34001a54:	bf08      	it	eq
34001a56:	4770      	bxeq	lr
34001a58:	b530      	push	{r4, r5, lr}
34001a5a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
34001a5e:	d502      	bpl.n	34001a66 <__aeabi_l2d+0x16>
34001a60:	4240      	negs	r0, r0
34001a62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001a66:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34001a6a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34001a6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
34001a72:	f43f aed8 	beq.w	34001826 <__adddf3+0xe6>
34001a76:	f04f 0203 	mov.w	r2, #3
34001a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34001a7e:	bf18      	it	ne
34001a80:	3203      	addne	r2, #3
34001a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34001a86:	bf18      	it	ne
34001a88:	3203      	addne	r2, #3
34001a8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
34001a8e:	f1c2 0320 	rsb	r3, r2, #32
34001a92:	fa00 fc03 	lsl.w	ip, r0, r3
34001a96:	fa20 f002 	lsr.w	r0, r0, r2
34001a9a:	fa01 fe03 	lsl.w	lr, r1, r3
34001a9e:	ea40 000e 	orr.w	r0, r0, lr
34001aa2:	fa21 f102 	lsr.w	r1, r1, r2
34001aa6:	4414      	add	r4, r2
34001aa8:	e6bd      	b.n	34001826 <__adddf3+0xe6>
34001aaa:	bf00      	nop

34001aac <__aeabi_ldivmod>:
34001aac:	b97b      	cbnz	r3, 34001ace <__aeabi_ldivmod+0x22>
34001aae:	b972      	cbnz	r2, 34001ace <__aeabi_ldivmod+0x22>
34001ab0:	2900      	cmp	r1, #0
34001ab2:	bfbe      	ittt	lt
34001ab4:	2000      	movlt	r0, #0
34001ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
34001aba:	e006      	blt.n	34001aca <__aeabi_ldivmod+0x1e>
34001abc:	bf08      	it	eq
34001abe:	2800      	cmpeq	r0, #0
34001ac0:	bf1c      	itt	ne
34001ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
34001ac6:	f04f 30ff 	movne.w	r0, #4294967295
34001aca:	f000 b9fb 	b.w	34001ec4 <__aeabi_idiv0>
34001ace:	f1ad 0c08 	sub.w	ip, sp, #8
34001ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34001ad6:	2900      	cmp	r1, #0
34001ad8:	db09      	blt.n	34001aee <__aeabi_ldivmod+0x42>
34001ada:	2b00      	cmp	r3, #0
34001adc:	db1a      	blt.n	34001b14 <__aeabi_ldivmod+0x68>
34001ade:	f000 f84d 	bl	34001b7c <__udivmoddi4>
34001ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
34001ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001aea:	b004      	add	sp, #16
34001aec:	4770      	bx	lr
34001aee:	4240      	negs	r0, r0
34001af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001af4:	2b00      	cmp	r3, #0
34001af6:	db1b      	blt.n	34001b30 <__aeabi_ldivmod+0x84>
34001af8:	f000 f840 	bl	34001b7c <__udivmoddi4>
34001afc:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b04:	b004      	add	sp, #16
34001b06:	4240      	negs	r0, r0
34001b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b0c:	4252      	negs	r2, r2
34001b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b12:	4770      	bx	lr
34001b14:	4252      	negs	r2, r2
34001b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b1a:	f000 f82f 	bl	34001b7c <__udivmoddi4>
34001b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b26:	b004      	add	sp, #16
34001b28:	4240      	negs	r0, r0
34001b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34001b2e:	4770      	bx	lr
34001b30:	4252      	negs	r2, r2
34001b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b36:	f000 f821 	bl	34001b7c <__udivmoddi4>
34001b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b42:	b004      	add	sp, #16
34001b44:	4252      	negs	r2, r2
34001b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34001b4a:	4770      	bx	lr

34001b4c <__aeabi_uldivmod>:
34001b4c:	b953      	cbnz	r3, 34001b64 <__aeabi_uldivmod+0x18>
34001b4e:	b94a      	cbnz	r2, 34001b64 <__aeabi_uldivmod+0x18>
34001b50:	2900      	cmp	r1, #0
34001b52:	bf08      	it	eq
34001b54:	2800      	cmpeq	r0, #0
34001b56:	bf1c      	itt	ne
34001b58:	f04f 31ff 	movne.w	r1, #4294967295
34001b5c:	f04f 30ff 	movne.w	r0, #4294967295
34001b60:	f000 b9b0 	b.w	34001ec4 <__aeabi_idiv0>
34001b64:	f1ad 0c08 	sub.w	ip, sp, #8
34001b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34001b6c:	f000 f806 	bl	34001b7c <__udivmoddi4>
34001b70:	f8dd e004 	ldr.w	lr, [sp, #4]
34001b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34001b78:	b004      	add	sp, #16
34001b7a:	4770      	bx	lr

34001b7c <__udivmoddi4>:
34001b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34001b80:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34001b82:	4688      	mov	r8, r1
34001b84:	4604      	mov	r4, r0
34001b86:	468e      	mov	lr, r1
34001b88:	2b00      	cmp	r3, #0
34001b8a:	d14a      	bne.n	34001c22 <__udivmoddi4+0xa6>
34001b8c:	428a      	cmp	r2, r1
34001b8e:	4617      	mov	r7, r2
34001b90:	d95f      	bls.n	34001c52 <__udivmoddi4+0xd6>
34001b92:	fab2 f682 	clz	r6, r2
34001b96:	b14e      	cbz	r6, 34001bac <__udivmoddi4+0x30>
34001b98:	f1c6 0320 	rsb	r3, r6, #32
34001b9c:	fa01 fe06 	lsl.w	lr, r1, r6
34001ba0:	40b7      	lsls	r7, r6
34001ba2:	40b4      	lsls	r4, r6
34001ba4:	fa20 f303 	lsr.w	r3, r0, r3
34001ba8:	ea43 0e0e 	orr.w	lr, r3, lr
34001bac:	ea4f 4817 	mov.w	r8, r7, lsr #16
34001bb0:	fa1f fc87 	uxth.w	ip, r7
34001bb4:	0c23      	lsrs	r3, r4, #16
34001bb6:	fbbe f1f8 	udiv	r1, lr, r8
34001bba:	fb08 ee11 	mls	lr, r8, r1, lr
34001bbe:	fb01 f20c 	mul.w	r2, r1, ip
34001bc2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34001bc6:	429a      	cmp	r2, r3
34001bc8:	d907      	bls.n	34001bda <__udivmoddi4+0x5e>
34001bca:	18fb      	adds	r3, r7, r3
34001bcc:	f101 30ff 	add.w	r0, r1, #4294967295
34001bd0:	d202      	bcs.n	34001bd8 <__udivmoddi4+0x5c>
34001bd2:	429a      	cmp	r2, r3
34001bd4:	f200 8154 	bhi.w	34001e80 <__udivmoddi4+0x304>
34001bd8:	4601      	mov	r1, r0
34001bda:	1a9b      	subs	r3, r3, r2
34001bdc:	b2a2      	uxth	r2, r4
34001bde:	fbb3 f0f8 	udiv	r0, r3, r8
34001be2:	fb08 3310 	mls	r3, r8, r0, r3
34001be6:	fb00 fc0c 	mul.w	ip, r0, ip
34001bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34001bee:	4594      	cmp	ip, r2
34001bf0:	d90b      	bls.n	34001c0a <__udivmoddi4+0x8e>
34001bf2:	18ba      	adds	r2, r7, r2
34001bf4:	f100 33ff 	add.w	r3, r0, #4294967295
34001bf8:	bf2c      	ite	cs
34001bfa:	2401      	movcs	r4, #1
34001bfc:	2400      	movcc	r4, #0
34001bfe:	4594      	cmp	ip, r2
34001c00:	d902      	bls.n	34001c08 <__udivmoddi4+0x8c>
34001c02:	2c00      	cmp	r4, #0
34001c04:	f000 813f 	beq.w	34001e86 <__udivmoddi4+0x30a>
34001c08:	4618      	mov	r0, r3
34001c0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34001c0e:	eba2 020c 	sub.w	r2, r2, ip
34001c12:	2100      	movs	r1, #0
34001c14:	b11d      	cbz	r5, 34001c1e <__udivmoddi4+0xa2>
34001c16:	40f2      	lsrs	r2, r6
34001c18:	2300      	movs	r3, #0
34001c1a:	e9c5 2300 	strd	r2, r3, [r5]
34001c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34001c22:	428b      	cmp	r3, r1
34001c24:	d905      	bls.n	34001c32 <__udivmoddi4+0xb6>
34001c26:	b10d      	cbz	r5, 34001c2c <__udivmoddi4+0xb0>
34001c28:	e9c5 0100 	strd	r0, r1, [r5]
34001c2c:	2100      	movs	r1, #0
34001c2e:	4608      	mov	r0, r1
34001c30:	e7f5      	b.n	34001c1e <__udivmoddi4+0xa2>
34001c32:	fab3 f183 	clz	r1, r3
34001c36:	2900      	cmp	r1, #0
34001c38:	d14e      	bne.n	34001cd8 <__udivmoddi4+0x15c>
34001c3a:	4543      	cmp	r3, r8
34001c3c:	f0c0 8112 	bcc.w	34001e64 <__udivmoddi4+0x2e8>
34001c40:	4282      	cmp	r2, r0
34001c42:	f240 810f 	bls.w	34001e64 <__udivmoddi4+0x2e8>
34001c46:	4608      	mov	r0, r1
34001c48:	2d00      	cmp	r5, #0
34001c4a:	d0e8      	beq.n	34001c1e <__udivmoddi4+0xa2>
34001c4c:	e9c5 4e00 	strd	r4, lr, [r5]
34001c50:	e7e5      	b.n	34001c1e <__udivmoddi4+0xa2>
34001c52:	2a00      	cmp	r2, #0
34001c54:	f000 80ac 	beq.w	34001db0 <__udivmoddi4+0x234>
34001c58:	fab2 f682 	clz	r6, r2
34001c5c:	2e00      	cmp	r6, #0
34001c5e:	f040 80bb 	bne.w	34001dd8 <__udivmoddi4+0x25c>
34001c62:	1a8b      	subs	r3, r1, r2
34001c64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
34001c68:	b2bc      	uxth	r4, r7
34001c6a:	2101      	movs	r1, #1
34001c6c:	0c02      	lsrs	r2, r0, #16
34001c6e:	b280      	uxth	r0, r0
34001c70:	fbb3 fcfe 	udiv	ip, r3, lr
34001c74:	fb0e 331c 	mls	r3, lr, ip, r3
34001c78:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
34001c7c:	fb04 f20c 	mul.w	r2, r4, ip
34001c80:	429a      	cmp	r2, r3
34001c82:	d90e      	bls.n	34001ca2 <__udivmoddi4+0x126>
34001c84:	18fb      	adds	r3, r7, r3
34001c86:	f10c 38ff 	add.w	r8, ip, #4294967295
34001c8a:	bf2c      	ite	cs
34001c8c:	f04f 0901 	movcs.w	r9, #1
34001c90:	f04f 0900 	movcc.w	r9, #0
34001c94:	429a      	cmp	r2, r3
34001c96:	d903      	bls.n	34001ca0 <__udivmoddi4+0x124>
34001c98:	f1b9 0f00 	cmp.w	r9, #0
34001c9c:	f000 80ec 	beq.w	34001e78 <__udivmoddi4+0x2fc>
34001ca0:	46c4      	mov	ip, r8
34001ca2:	1a9b      	subs	r3, r3, r2
34001ca4:	fbb3 f8fe 	udiv	r8, r3, lr
34001ca8:	fb0e 3318 	mls	r3, lr, r8, r3
34001cac:	fb04 f408 	mul.w	r4, r4, r8
34001cb0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34001cb4:	4294      	cmp	r4, r2
34001cb6:	d90b      	bls.n	34001cd0 <__udivmoddi4+0x154>
34001cb8:	18ba      	adds	r2, r7, r2
34001cba:	f108 33ff 	add.w	r3, r8, #4294967295
34001cbe:	bf2c      	ite	cs
34001cc0:	2001      	movcs	r0, #1
34001cc2:	2000      	movcc	r0, #0
34001cc4:	4294      	cmp	r4, r2
34001cc6:	d902      	bls.n	34001cce <__udivmoddi4+0x152>
34001cc8:	2800      	cmp	r0, #0
34001cca:	f000 80d1 	beq.w	34001e70 <__udivmoddi4+0x2f4>
34001cce:	4698      	mov	r8, r3
34001cd0:	1b12      	subs	r2, r2, r4
34001cd2:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34001cd6:	e79d      	b.n	34001c14 <__udivmoddi4+0x98>
34001cd8:	f1c1 0620 	rsb	r6, r1, #32
34001cdc:	408b      	lsls	r3, r1
34001cde:	fa08 f401 	lsl.w	r4, r8, r1
34001ce2:	fa00 f901 	lsl.w	r9, r0, r1
34001ce6:	fa22 f706 	lsr.w	r7, r2, r6
34001cea:	fa28 f806 	lsr.w	r8, r8, r6
34001cee:	408a      	lsls	r2, r1
34001cf0:	431f      	orrs	r7, r3
34001cf2:	fa20 f306 	lsr.w	r3, r0, r6
34001cf6:	0c38      	lsrs	r0, r7, #16
34001cf8:	4323      	orrs	r3, r4
34001cfa:	fa1f fc87 	uxth.w	ip, r7
34001cfe:	0c1c      	lsrs	r4, r3, #16
34001d00:	fbb8 fef0 	udiv	lr, r8, r0
34001d04:	fb00 881e 	mls	r8, r0, lr, r8
34001d08:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34001d0c:	fb0e f80c 	mul.w	r8, lr, ip
34001d10:	45a0      	cmp	r8, r4
34001d12:	d90e      	bls.n	34001d32 <__udivmoddi4+0x1b6>
34001d14:	193c      	adds	r4, r7, r4
34001d16:	f10e 3aff 	add.w	sl, lr, #4294967295
34001d1a:	bf2c      	ite	cs
34001d1c:	f04f 0b01 	movcs.w	fp, #1
34001d20:	f04f 0b00 	movcc.w	fp, #0
34001d24:	45a0      	cmp	r8, r4
34001d26:	d903      	bls.n	34001d30 <__udivmoddi4+0x1b4>
34001d28:	f1bb 0f00 	cmp.w	fp, #0
34001d2c:	f000 80b8 	beq.w	34001ea0 <__udivmoddi4+0x324>
34001d30:	46d6      	mov	lr, sl
34001d32:	eba4 0408 	sub.w	r4, r4, r8
34001d36:	fa1f f883 	uxth.w	r8, r3
34001d3a:	fbb4 f3f0 	udiv	r3, r4, r0
34001d3e:	fb00 4413 	mls	r4, r0, r3, r4
34001d42:	fb03 fc0c 	mul.w	ip, r3, ip
34001d46:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
34001d4a:	45a4      	cmp	ip, r4
34001d4c:	d90e      	bls.n	34001d6c <__udivmoddi4+0x1f0>
34001d4e:	193c      	adds	r4, r7, r4
34001d50:	f103 30ff 	add.w	r0, r3, #4294967295
34001d54:	bf2c      	ite	cs
34001d56:	f04f 0801 	movcs.w	r8, #1
34001d5a:	f04f 0800 	movcc.w	r8, #0
34001d5e:	45a4      	cmp	ip, r4
34001d60:	d903      	bls.n	34001d6a <__udivmoddi4+0x1ee>
34001d62:	f1b8 0f00 	cmp.w	r8, #0
34001d66:	f000 809f 	beq.w	34001ea8 <__udivmoddi4+0x32c>
34001d6a:	4603      	mov	r3, r0
34001d6c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
34001d70:	eba4 040c 	sub.w	r4, r4, ip
34001d74:	fba0 ec02 	umull	lr, ip, r0, r2
34001d78:	4564      	cmp	r4, ip
34001d7a:	4673      	mov	r3, lr
34001d7c:	46e0      	mov	r8, ip
34001d7e:	d302      	bcc.n	34001d86 <__udivmoddi4+0x20a>
34001d80:	d107      	bne.n	34001d92 <__udivmoddi4+0x216>
34001d82:	45f1      	cmp	r9, lr
34001d84:	d205      	bcs.n	34001d92 <__udivmoddi4+0x216>
34001d86:	ebbe 0302 	subs.w	r3, lr, r2
34001d8a:	eb6c 0c07 	sbc.w	ip, ip, r7
34001d8e:	3801      	subs	r0, #1
34001d90:	46e0      	mov	r8, ip
34001d92:	b15d      	cbz	r5, 34001dac <__udivmoddi4+0x230>
34001d94:	ebb9 0203 	subs.w	r2, r9, r3
34001d98:	eb64 0408 	sbc.w	r4, r4, r8
34001d9c:	fa04 f606 	lsl.w	r6, r4, r6
34001da0:	fa22 f301 	lsr.w	r3, r2, r1
34001da4:	40cc      	lsrs	r4, r1
34001da6:	431e      	orrs	r6, r3
34001da8:	e9c5 6400 	strd	r6, r4, [r5]
34001dac:	2100      	movs	r1, #0
34001dae:	e736      	b.n	34001c1e <__udivmoddi4+0xa2>
34001db0:	fbb1 fcf2 	udiv	ip, r1, r2
34001db4:	0c01      	lsrs	r1, r0, #16
34001db6:	4614      	mov	r4, r2
34001db8:	b280      	uxth	r0, r0
34001dba:	4696      	mov	lr, r2
34001dbc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34001dc0:	2620      	movs	r6, #32
34001dc2:	4690      	mov	r8, r2
34001dc4:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34001dc8:	4610      	mov	r0, r2
34001dca:	fbb1 f1f2 	udiv	r1, r1, r2
34001dce:	eba3 0308 	sub.w	r3, r3, r8
34001dd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34001dd6:	e74b      	b.n	34001c70 <__udivmoddi4+0xf4>
34001dd8:	40b7      	lsls	r7, r6
34001dda:	f1c6 0320 	rsb	r3, r6, #32
34001dde:	fa01 f206 	lsl.w	r2, r1, r6
34001de2:	fa21 f803 	lsr.w	r8, r1, r3
34001de6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34001dea:	fa20 f303 	lsr.w	r3, r0, r3
34001dee:	b2bc      	uxth	r4, r7
34001df0:	40b0      	lsls	r0, r6
34001df2:	4313      	orrs	r3, r2
34001df4:	0c02      	lsrs	r2, r0, #16
34001df6:	0c19      	lsrs	r1, r3, #16
34001df8:	b280      	uxth	r0, r0
34001dfa:	fbb8 f9fe 	udiv	r9, r8, lr
34001dfe:	fb0e 8819 	mls	r8, lr, r9, r8
34001e02:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34001e06:	fb09 f804 	mul.w	r8, r9, r4
34001e0a:	4588      	cmp	r8, r1
34001e0c:	d951      	bls.n	34001eb2 <__udivmoddi4+0x336>
34001e0e:	1879      	adds	r1, r7, r1
34001e10:	f109 3cff 	add.w	ip, r9, #4294967295
34001e14:	bf2c      	ite	cs
34001e16:	f04f 0a01 	movcs.w	sl, #1
34001e1a:	f04f 0a00 	movcc.w	sl, #0
34001e1e:	4588      	cmp	r8, r1
34001e20:	d902      	bls.n	34001e28 <__udivmoddi4+0x2ac>
34001e22:	f1ba 0f00 	cmp.w	sl, #0
34001e26:	d031      	beq.n	34001e8c <__udivmoddi4+0x310>
34001e28:	eba1 0108 	sub.w	r1, r1, r8
34001e2c:	fbb1 f9fe 	udiv	r9, r1, lr
34001e30:	fb09 f804 	mul.w	r8, r9, r4
34001e34:	fb0e 1119 	mls	r1, lr, r9, r1
34001e38:	b29b      	uxth	r3, r3
34001e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34001e3e:	4543      	cmp	r3, r8
34001e40:	d235      	bcs.n	34001eae <__udivmoddi4+0x332>
34001e42:	18fb      	adds	r3, r7, r3
34001e44:	f109 31ff 	add.w	r1, r9, #4294967295
34001e48:	bf2c      	ite	cs
34001e4a:	f04f 0a01 	movcs.w	sl, #1
34001e4e:	f04f 0a00 	movcc.w	sl, #0
34001e52:	4543      	cmp	r3, r8
34001e54:	d2bb      	bcs.n	34001dce <__udivmoddi4+0x252>
34001e56:	f1ba 0f00 	cmp.w	sl, #0
34001e5a:	d1b8      	bne.n	34001dce <__udivmoddi4+0x252>
34001e5c:	f1a9 0102 	sub.w	r1, r9, #2
34001e60:	443b      	add	r3, r7
34001e62:	e7b4      	b.n	34001dce <__udivmoddi4+0x252>
34001e64:	1a84      	subs	r4, r0, r2
34001e66:	eb68 0203 	sbc.w	r2, r8, r3
34001e6a:	2001      	movs	r0, #1
34001e6c:	4696      	mov	lr, r2
34001e6e:	e6eb      	b.n	34001c48 <__udivmoddi4+0xcc>
34001e70:	443a      	add	r2, r7
34001e72:	f1a8 0802 	sub.w	r8, r8, #2
34001e76:	e72b      	b.n	34001cd0 <__udivmoddi4+0x154>
34001e78:	f1ac 0c02 	sub.w	ip, ip, #2
34001e7c:	443b      	add	r3, r7
34001e7e:	e710      	b.n	34001ca2 <__udivmoddi4+0x126>
34001e80:	3902      	subs	r1, #2
34001e82:	443b      	add	r3, r7
34001e84:	e6a9      	b.n	34001bda <__udivmoddi4+0x5e>
34001e86:	443a      	add	r2, r7
34001e88:	3802      	subs	r0, #2
34001e8a:	e6be      	b.n	34001c0a <__udivmoddi4+0x8e>
34001e8c:	eba7 0808 	sub.w	r8, r7, r8
34001e90:	f1a9 0c02 	sub.w	ip, r9, #2
34001e94:	4441      	add	r1, r8
34001e96:	fbb1 f9fe 	udiv	r9, r1, lr
34001e9a:	fb09 f804 	mul.w	r8, r9, r4
34001e9e:	e7c9      	b.n	34001e34 <__udivmoddi4+0x2b8>
34001ea0:	f1ae 0e02 	sub.w	lr, lr, #2
34001ea4:	443c      	add	r4, r7
34001ea6:	e744      	b.n	34001d32 <__udivmoddi4+0x1b6>
34001ea8:	3b02      	subs	r3, #2
34001eaa:	443c      	add	r4, r7
34001eac:	e75e      	b.n	34001d6c <__udivmoddi4+0x1f0>
34001eae:	4649      	mov	r1, r9
34001eb0:	e78d      	b.n	34001dce <__udivmoddi4+0x252>
34001eb2:	eba1 0108 	sub.w	r1, r1, r8
34001eb6:	46cc      	mov	ip, r9
34001eb8:	fbb1 f9fe 	udiv	r9, r1, lr
34001ebc:	fb09 f804 	mul.w	r8, r9, r4
34001ec0:	e7b8      	b.n	34001e34 <__udivmoddi4+0x2b8>
34001ec2:	bf00      	nop

34001ec4 <__aeabi_idiv0>:
34001ec4:	4770      	bx	lr
34001ec6:	bf00      	nop

34001ec8 <_write>:

int _write(int file, char *ptr, int len)
{
  HAL_StatusTypeDef status;

  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
34001ec8:	3801      	subs	r0, #1
34001eca:	2801      	cmp	r0, #1
{
34001ecc:	b510      	push	{r4, lr}
34001ece:	4614      	mov	r4, r2
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
34001ed0:	d907      	bls.n	34001ee2 <_write+0x1a>
      errno = EBADF;
34001ed2:	f01e fc05 	bl	340206e0 <__errno>
34001ed6:	2309      	movs	r3, #9
      return -1;
34001ed8:	f04f 34ff 	mov.w	r4, #4294967295
      errno = EBADF;
34001edc:	6003      	str	r3, [r0, #0]
  }

  status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, ~0);

  return (status == HAL_OK ? len : 0);
}
34001ede:	4620      	mov	r0, r4
34001ee0:	bd10      	pop	{r4, pc}
  status = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, ~0);
34001ee2:	f04f 33ff 	mov.w	r3, #4294967295
34001ee6:	4804      	ldr	r0, [pc, #16]	@ (34001ef8 <_write+0x30>)
34001ee8:	b292      	uxth	r2, r2
34001eea:	f01a f933 	bl	3401c154 <HAL_UART_Transmit>
  return (status == HAL_OK ? len : 0);
34001eee:	2800      	cmp	r0, #0
34001ef0:	bf18      	it	ne
34001ef2:	2400      	movne	r4, #0
34001ef4:	e7f3      	b.n	34001ede <_write+0x16>
34001ef6:	bf00      	nop
34001ef8:	341fa544 	.word	0x341fa544

34001efc <freertos_libc_init>:
static int is_tx_rt_init_done;
static SemaphoreHandle_t libc_lock;
static StaticSemaphore_t libc_lock_buffer;

void freertos_libc_init()
{
34001efc:	b508      	push	{r3, lr}
  libc_lock = xSemaphoreCreateMutexStatic(&libc_lock_buffer);
34001efe:	2001      	movs	r0, #1
34001f00:	4907      	ldr	r1, [pc, #28]	@ (34001f20 <freertos_libc_init+0x24>)
34001f02:	f008 fb33 	bl	3400a56c <xQueueCreateMutexStatic>
34001f06:	4b07      	ldr	r3, [pc, #28]	@ (34001f24 <freertos_libc_init+0x28>)
34001f08:	6018      	str	r0, [r3, #0]
  assert(libc_lock);
34001f0a:	b928      	cbnz	r0, 34001f18 <freertos_libc_init+0x1c>
34001f0c:	2125      	movs	r1, #37	@ 0x25
34001f0e:	4b06      	ldr	r3, [pc, #24]	@ (34001f28 <freertos_libc_init+0x2c>)
34001f10:	4a06      	ldr	r2, [pc, #24]	@ (34001f2c <freertos_libc_init+0x30>)
34001f12:	4807      	ldr	r0, [pc, #28]	@ (34001f30 <freertos_libc_init+0x34>)
34001f14:	f01d f956 	bl	3401f1c4 <__assert_func>

  is_tx_rt_init_done = 1;
34001f18:	2201      	movs	r2, #1
34001f1a:	4b06      	ldr	r3, [pc, #24]	@ (34001f34 <freertos_libc_init+0x38>)
34001f1c:	601a      	str	r2, [r3, #0]
}
34001f1e:	bd08      	pop	{r3, pc}
34001f20:	3410d354 	.word	0x3410d354
34001f24:	3410d3a4 	.word	0x3410d3a4
34001f28:	34026390 	.word	0x34026390
34001f2c:	3402d18e 	.word	0x3402d18e
34001f30:	3402639a 	.word	0x3402639a
34001f34:	3410d3a8 	.word	0x3410d3a8

34001f38 <__malloc_lock>:

void __malloc_lock (struct _reent *reent)
{
34001f38:	b508      	push	{r3, lr}
  int ret;

  if (!is_tx_rt_init_done)
34001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (34001f6c <__malloc_lock+0x34>)
34001f3c:	681b      	ldr	r3, [r3, #0]
34001f3e:	b1a3      	cbz	r3, 34001f6a <__malloc_lock+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
34001f40:	f3ef 8305 	mrs	r3, IPSR
    return ;

  assert(is_tx_rt_init_done);
  assert(!IS_IRQ_MODE());
34001f44:	b12b      	cbz	r3, 34001f52 <__malloc_lock+0x1a>
34001f46:	2132      	movs	r1, #50	@ 0x32
34001f48:	4b09      	ldr	r3, [pc, #36]	@ (34001f70 <__malloc_lock+0x38>)
34001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (34001f74 <__malloc_lock+0x3c>)

  ret = xSemaphoreTake(libc_lock, portMAX_DELAY);
  assert(ret == pdTRUE);
34001f4c:	480a      	ldr	r0, [pc, #40]	@ (34001f78 <__malloc_lock+0x40>)
34001f4e:	f01d f939 	bl	3401f1c4 <__assert_func>
  ret = xSemaphoreTake(libc_lock, portMAX_DELAY);
34001f52:	4b0a      	ldr	r3, [pc, #40]	@ (34001f7c <__malloc_lock+0x44>)
34001f54:	f04f 31ff 	mov.w	r1, #4294967295
34001f58:	6818      	ldr	r0, [r3, #0]
34001f5a:	f008 fc09 	bl	3400a770 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
34001f5e:	2801      	cmp	r0, #1
34001f60:	d003      	beq.n	34001f6a <__malloc_lock+0x32>
34001f62:	2135      	movs	r1, #53	@ 0x35
34001f64:	4b06      	ldr	r3, [pc, #24]	@ (34001f80 <__malloc_lock+0x48>)
34001f66:	4a03      	ldr	r2, [pc, #12]	@ (34001f74 <__malloc_lock+0x3c>)
34001f68:	e7f0      	b.n	34001f4c <__malloc_lock+0x14>
}
34001f6a:	bd08      	pop	{r3, pc}
34001f6c:	3410d3a8 	.word	0x3410d3a8
34001f70:	340263cd 	.word	0x340263cd
34001f74:	3402d180 	.word	0x3402d180
34001f78:	3402639a 	.word	0x3402639a
34001f7c:	3410d3a4 	.word	0x3410d3a4
34001f80:	340263dc 	.word	0x340263dc

34001f84 <__malloc_unlock>:

void __malloc_unlock (struct _reent *reent)
{
34001f84:	b508      	push	{r3, lr}
  int ret;

  if (!is_tx_rt_init_done)
34001f86:	4b0c      	ldr	r3, [pc, #48]	@ (34001fb8 <__malloc_unlock+0x34>)
34001f88:	681b      	ldr	r3, [r3, #0]
34001f8a:	b1a3      	cbz	r3, 34001fb6 <__malloc_unlock+0x32>
34001f8c:	f3ef 8305 	mrs	r3, IPSR
    return ;

  assert(is_tx_rt_init_done);
  assert(!IS_IRQ_MODE());
34001f90:	b12b      	cbz	r3, 34001f9e <__malloc_unlock+0x1a>
34001f92:	2140      	movs	r1, #64	@ 0x40
34001f94:	4b09      	ldr	r3, [pc, #36]	@ (34001fbc <__malloc_unlock+0x38>)
34001f96:	4a0a      	ldr	r2, [pc, #40]	@ (34001fc0 <__malloc_unlock+0x3c>)

  ret = xSemaphoreGive(libc_lock);
  assert(ret == pdTRUE);
34001f98:	480a      	ldr	r0, [pc, #40]	@ (34001fc4 <__malloc_unlock+0x40>)
34001f9a:	f01d f913 	bl	3401f1c4 <__assert_func>
  ret = xSemaphoreGive(libc_lock);
34001f9e:	480a      	ldr	r0, [pc, #40]	@ (34001fc8 <__malloc_unlock+0x44>)
34001fa0:	461a      	mov	r2, r3
34001fa2:	4619      	mov	r1, r3
34001fa4:	6800      	ldr	r0, [r0, #0]
34001fa6:	f008 fa3f 	bl	3400a428 <xQueueGenericSend>
  assert(ret == pdTRUE);
34001faa:	2801      	cmp	r0, #1
34001fac:	d003      	beq.n	34001fb6 <__malloc_unlock+0x32>
34001fae:	2143      	movs	r1, #67	@ 0x43
34001fb0:	4b06      	ldr	r3, [pc, #24]	@ (34001fcc <__malloc_unlock+0x48>)
34001fb2:	4a03      	ldr	r2, [pc, #12]	@ (34001fc0 <__malloc_unlock+0x3c>)
34001fb4:	e7f0      	b.n	34001f98 <__malloc_unlock+0x14>
}
34001fb6:	bd08      	pop	{r3, pc}
34001fb8:	3410d3a8 	.word	0x3410d3a8
34001fbc:	340263cd 	.word	0x340263cd
34001fc0:	3402d170 	.word	0x3402d170
34001fc4:	3402639a 	.word	0x3402639a
34001fc8:	3410d3a4 	.word	0x3410d3a4
34001fcc:	340263dc 	.word	0x340263dc

34001fd0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
34001fd0:	2001      	movs	r0, #1
34001fd2:	4770      	bx	lr

34001fd4 <_kill>:

int _kill(int pid, int sig)
{
34001fd4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
34001fd6:	f01e fb83 	bl	340206e0 <__errno>
34001fda:	2316      	movs	r3, #22
34001fdc:	6003      	str	r3, [r0, #0]
  return -1;
}
34001fde:	f04f 30ff 	mov.w	r0, #4294967295
34001fe2:	bd08      	pop	{r3, pc}

34001fe4 <_exit>:

void _exit (int status)
{
34001fe4:	b508      	push	{r3, lr}
  errno = EINVAL;
34001fe6:	f01e fb7b 	bl	340206e0 <__errno>
34001fea:	2316      	movs	r3, #22
34001fec:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
34001fee:	e7fe      	b.n	34001fee <_exit+0xa>

34001ff0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
34001ff0:	b570      	push	{r4, r5, r6, lr}
34001ff2:	460d      	mov	r5, r1
34001ff4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001ff6:	460e      	mov	r6, r1
34001ff8:	1b73      	subs	r3, r6, r5
34001ffa:	429c      	cmp	r4, r3
34001ffc:	dc01      	bgt.n	34002002 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
34001ffe:	4620      	mov	r0, r4
34002000:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
34002002:	f3af 8000 	nop.w
34002006:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3400200a:	e7f5      	b.n	34001ff8 <_read+0x8>

3400200c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
3400200c:	f04f 30ff 	mov.w	r0, #4294967295
34002010:	4770      	bx	lr

34002012 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
34002012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
34002016:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
34002018:	604b      	str	r3, [r1, #4]
}
3400201a:	4770      	bx	lr

3400201c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
3400201c:	2001      	movs	r0, #1
3400201e:	4770      	bx	lr

34002020 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
34002020:	2000      	movs	r0, #0
34002022:	4770      	bx	lr

34002024 <mcu_cache_invalidate_range>:
  }  
  return 0;
}

int mcu_cache_invalidate_range(uint32_t start_addr, uint32_t end_addr) 
{
34002024:	b530      	push	{r4, r5, lr}

#include "stm32n6xx_hal.h"

__STATIC_FORCEINLINE int mcu_cache_enabled(void) {
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
   if (SCB->CCR & SCB_CCR_DC_Msk) return 1;  /* return `1` if DCache is enabled */
34002026:	4d13      	ldr	r5, [pc, #76]	@ (34002074 <mcu_cache_invalidate_range+0x50>)
34002028:	696b      	ldr	r3, [r5, #20]
3400202a:	03db      	lsls	r3, r3, #15
3400202c:	d51f      	bpl.n	3400206e <mcu_cache_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_InvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
3400202e:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34002030:	2a00      	cmp	r2, #0
34002032:	dd1c      	ble.n	3400206e <mcu_cache_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34002034:	f000 031f 	and.w	r3, r0, #31
34002038:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400203a:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
3400203e:	1884      	adds	r4, r0, r2
34002040:	43c2      	mvns	r2, r0
34002042:	1a1b      	subs	r3, r3, r0
34002044:	440b      	add	r3, r1
34002046:	4422      	add	r2, r4
34002048:	3b20      	subs	r3, #32
3400204a:	0952      	lsrs	r2, r2, #5
3400204c:	3320      	adds	r3, #32
3400204e:	f102 0e01 	add.w	lr, r2, #1
34002052:	bfd8      	it	le
34002054:	f04f 0e01 	movle.w	lr, #1
34002058:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3400205c:	f8c5 025c 	str.w	r0, [r5, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
34002060:	3020      	adds	r0, #32
      } while ( op_size > 0 );
34002062:	f00f c805 	le	lr, 3400205c <mcu_cache_invalidate_range+0x38>
34002066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400206a:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
3400206e:	2000      	movs	r0, #0
34002070:	bd30      	pop	{r4, r5, pc}
34002072:	bf00      	nop
34002074:	e000ed00 	.word	0xe000ed00

34002078 <mcu_cache_clean_range>:

int mcu_cache_clean_range(uint32_t start_addr, uint32_t end_addr) {
34002078:	b530      	push	{r4, r5, lr}
3400207a:	4d13      	ldr	r5, [pc, #76]	@ (340020c8 <mcu_cache_clean_range+0x50>)
3400207c:	696b      	ldr	r3, [r5, #20]
3400207e:	03db      	lsls	r3, r3, #15
34002080:	d51f      	bpl.n	340020c2 <mcu_cache_clean_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
34002082:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
34002084:	2a00      	cmp	r2, #0
34002086:	dd1c      	ble.n	340020c2 <mcu_cache_clean_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
34002088:	f000 031f 	and.w	r3, r0, #31
3400208c:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3400208e:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
34002092:	1884      	adds	r4, r0, r2
34002094:	43c2      	mvns	r2, r0
34002096:	1a1b      	subs	r3, r3, r0
34002098:	440b      	add	r3, r1
3400209a:	4422      	add	r2, r4
3400209c:	3b20      	subs	r3, #32
3400209e:	0952      	lsrs	r2, r2, #5
340020a0:	3320      	adds	r3, #32
340020a2:	f102 0e01 	add.w	lr, r2, #1
340020a6:	bfd8      	it	le
340020a8:	f04f 0e01 	movle.w	lr, #1
340020ac:	f04e e001 	dls	lr, lr
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
340020b0:	f8c5 0268 	str.w	r0, [r5, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
340020b4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
340020b6:	f00f c805 	le	lr, 340020b0 <mcu_cache_clean_range+0x38>
340020ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340020be:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
340020c2:	2000      	movs	r0, #0
340020c4:	bd30      	pop	{r4, r5, pc}
340020c6:	bf00      	nop
340020c8:	e000ed00 	.word	0xe000ed00

340020cc <mcu_cache_clean_invalidate_range>:
 int mcu_cache_clean_invalidate_range(uint32_t start_addr, uint32_t end_addr) {
340020cc:	b530      	push	{r4, r5, lr}
340020ce:	4d13      	ldr	r5, [pc, #76]	@ (3400211c <mcu_cache_clean_invalidate_range+0x50>)
340020d0:	696b      	ldr	r3, [r5, #20]
340020d2:	03db      	lsls	r3, r3, #15
340020d4:	d51f      	bpl.n	34002116 <mcu_cache_clean_invalidate_range+0x4a>
  if(mcu_cache_enabled()) {
    SCB_CleanInvalidateDCache_by_Addr((volatile void *)start_addr, (int32_t)(end_addr - start_addr));
340020d6:	1a0a      	subs	r2, r1, r0
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
340020d8:	2a00      	cmp	r2, #0
340020da:	dd1c      	ble.n	34002116 <mcu_cache_clean_invalidate_range+0x4a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
340020dc:	f000 031f 	and.w	r3, r0, #31
340020e0:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
340020e2:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
        op_size -=          __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
340020e6:	1884      	adds	r4, r0, r2
340020e8:	43c2      	mvns	r2, r0
340020ea:	1a1b      	subs	r3, r3, r0
340020ec:	440b      	add	r3, r1
340020ee:	4422      	add	r2, r4
340020f0:	3b20      	subs	r3, #32
340020f2:	0952      	lsrs	r2, r2, #5
340020f4:	3320      	adds	r3, #32
340020f6:	f102 0e01 	add.w	lr, r2, #1
340020fa:	bfd8      	it	le
340020fc:	f04f 0e01 	movle.w	lr, #1
34002100:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
34002104:	f8c5 0270 	str.w	r0, [r5, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
34002108:	3020      	adds	r0, #32
      } while ( op_size > 0 );
3400210a:	f00f c805 	le	lr, 34002104 <mcu_cache_clean_invalidate_range+0x38>
3400210e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34002112:	f3bf 8f6f 	isb	sy
  }
  return 0;
}
34002116:	2000      	movs	r0, #0
34002118:	bd30      	pop	{r4, r5, pc}
3400211a:	bf00      	nop
3400211c:	e000ed00 	.word	0xe000ed00

34002120 <npu_cache_init>:

static CACHEAXI_HandleTypeDef hcacheaxi_s;

void npu_cache_init(void)
{
  hcacheaxi_s.Instance = CACHEAXI;
34002120:	4802      	ldr	r0, [pc, #8]	@ (3400212c <npu_cache_init+0xc>)
34002122:	4b03      	ldr	r3, [pc, #12]	@ (34002130 <npu_cache_init+0x10>)
34002124:	6003      	str	r3, [r0, #0]
  HAL_CACHEAXI_Init(&hcacheaxi_s);      // Side effect: cacheaxi should be enabled (but one should call npu_enable_cache to be sure)
34002126:	f00e bcb7 	b.w	34010a98 <HAL_CACHEAXI_Init>
3400212a:	bf00      	nop
3400212c:	3410d3ac 	.word	0x3410d3ac
34002130:	580dfc00 	.word	0x580dfc00

34002134 <npu_cache_enable>:
}

void npu_cache_enable(void)
{
34002134:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;
  // Enable is wrapped in a loop because most of times, the first call returns
  //    HAL_BUSY, resulting in a cache not enabled.
  do
  {
    status = HAL_CACHEAXI_Enable(&hcacheaxi_s);
34002136:	4c03      	ldr	r4, [pc, #12]	@ (34002144 <npu_cache_enable+0x10>)
34002138:	4620      	mov	r0, r4
3400213a:	f00e fc79 	bl	34010a30 <HAL_CACHEAXI_Enable>
  } while (status == HAL_BUSY);
3400213e:	2802      	cmp	r0, #2
34002140:	d0fa      	beq.n	34002138 <npu_cache_enable+0x4>
}
34002142:	bd10      	pop	{r4, pc}
34002144:	3410d3ac 	.word	0x3410d3ac

34002148 <npu_cache_clean_invalidate_range>:
  HAL_CACHEAXI_CleanByAddr(&hcacheaxi_s, (uint32_t*)start_addr, end_addr-start_addr);
}

void npu_cache_clean_invalidate_range(uint32_t start_addr, uint32_t end_addr)
{
  HAL_CACHEAXI_CleanInvalidByAddr(&hcacheaxi_s, (uint32_t*)start_addr, end_addr-start_addr);
34002148:	1a0a      	subs	r2, r1, r0
3400214a:	4601      	mov	r1, r0
3400214c:	4801      	ldr	r0, [pc, #4]	@ (34002154 <npu_cache_clean_invalidate_range+0xc>)
3400214e:	f00e bcc7 	b.w	34010ae0 <HAL_CACHEAXI_CleanInvalidByAddr>
34002152:	bf00      	nop
34002154:	3410d3ac 	.word	0x3410d3ac

34002158 <ec_copy_program>:
 * \retval \e true  on success
 * \retval \e false otherwise
 */

bool ec_copy_program(const uint8_t *file_ptr, ECInstr *program, unsigned int *program_size)
{
34002158:	b538      	push	{r3, r4, r5, lr}
3400215a:	460c      	mov	r4, r1

  magic = *((ECFileEntry *)ptr);

  ptr += sizeof(ECFileEntry);

  if (magic != ECASM_BINARY_MAGIC)
3400215c:	4b1b      	ldr	r3, [pc, #108]	@ (340021cc <ec_copy_program+0x74>)
3400215e:	6801      	ldr	r1, [r0, #0]
34002160:	4299      	cmp	r1, r3
34002162:	d004      	beq.n	3400216e <ec_copy_program+0x16>
  {
    LL_ATON_PRINTF("Error: Epoch Controller binary is invalid\n");
34002164:	481a      	ldr	r0, [pc, #104]	@ (340021d0 <ec_copy_program+0x78>)

  ptr += sizeof(ECFileEntry);

  if (program_offset == 0)
  {
    LL_ATON_PRINTF("Error: Program section offset in binary file is invalid\n");
34002166:	f01d ff41 	bl	3401ffec <puts>
    return false;
3400216a:	2000      	movs	r0, #0
3400216c:	e010      	b.n	34002190 <ec_copy_program+0x38>
  program_offset = *((ECFileEntry *)ptr);
3400216e:	68c3      	ldr	r3, [r0, #12]
  if (program_offset == 0)
34002170:	b90b      	cbnz	r3, 34002176 <ec_copy_program+0x1e>
    LL_ATON_PRINTF("Error: Program section offset in binary file is invalid\n");
34002172:	4818      	ldr	r0, [pc, #96]	@ (340021d4 <ec_copy_program+0x7c>)
34002174:	e7f7      	b.n	34002166 <ec_copy_program+0xe>
    return false;
  }

  // read the Epoch Controller program section

  ptr = file_ptr + program_offset;
34002176:	18c5      	adds	r5, r0, r3

  program_magic = *((ECInstr *)ptr);

  ptr += sizeof(ECInstr);

  if (program_magic != ECASM_PROGRAM_MAGIC)
34002178:	58c0      	ldr	r0, [r0, r3]
3400217a:	4b17      	ldr	r3, [pc, #92]	@ (340021d8 <ec_copy_program+0x80>)
3400217c:	4298      	cmp	r0, r3
3400217e:	d001      	beq.n	34002184 <ec_copy_program+0x2c>
  {
    LL_ATON_PRINTF("Error: Invalid magic number of Epoch Controller program\n");
34002180:	4816      	ldr	r0, [pc, #88]	@ (340021dc <ec_copy_program+0x84>)
34002182:	e7f0      	b.n	34002166 <ec_copy_program+0xe>
    return false;
  }

  ECInstr size = 0;

  size = *((ECInstr *)ptr);
34002184:	686b      	ldr	r3, [r5, #4]

  ptr += sizeof(ECInstr);

  if (program == NULL)
34002186:	b924      	cbnz	r4, 34002192 <ec_copy_program+0x3a>
  {
    if (program_size != NULL)
34002188:	b10a      	cbz	r2, 3400218e <ec_copy_program+0x36>
      *program_size = size + 2;
3400218a:	3302      	adds	r3, #2
3400218c:	6013      	str	r3, [r2, #0]

    for (unsigned int i = 0; i < size; i++, ptr += sizeof(ECInstr))
      program[i + 2] = *((ECInstr *)ptr);
  }

  return true;
3400218e:	2001      	movs	r0, #1
}
34002190:	bd38      	pop	{r3, r4, r5, pc}
    if ((((intptr_t)program) % 8) != 0)
34002192:	0761      	lsls	r1, r4, #29
34002194:	d001      	beq.n	3400219a <ec_copy_program+0x42>
      LL_ATON_PRINTF("Error: Memory allocated for the Epoch Controller program must be 8-byte aligned\n");
34002196:	4812      	ldr	r0, [pc, #72]	@ (340021e0 <ec_copy_program+0x88>)
34002198:	e7e5      	b.n	34002166 <ec_copy_program+0xe>
    if (program_size == NULL)
3400219a:	b90a      	cbnz	r2, 340021a0 <ec_copy_program+0x48>
      LL_ATON_PRINTF("Error: Size of memory allocated for the Epoch Controller program has not been specified\n");
3400219c:	4811      	ldr	r0, [pc, #68]	@ (340021e4 <ec_copy_program+0x8c>)
3400219e:	e7e2      	b.n	34002166 <ec_copy_program+0xe>
    if (*program_size < (size + 2))
340021a0:	6812      	ldr	r2, [r2, #0]
340021a2:	1c99      	adds	r1, r3, #2
340021a4:	428a      	cmp	r2, r1
340021a6:	d203      	bcs.n	340021b0 <ec_copy_program+0x58>
      LL_ATON_PRINTF(
340021a8:	480f      	ldr	r0, [pc, #60]	@ (340021e8 <ec_copy_program+0x90>)
340021aa:	f01d feb7 	bl	3401ff1c <iprintf>
      return false;
340021ae:	e7dc      	b.n	3400216a <ec_copy_program+0x12>
    program[0] = program_magic;
340021b0:	6020      	str	r0, [r4, #0]
    program[1] = size;
340021b2:	f844 3f04 	str.w	r3, [r4, #4]!
    for (unsigned int i = 0; i < size; i++, ptr += sizeof(ECInstr))
340021b6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
340021ba:	3504      	adds	r5, #4
340021bc:	3301      	adds	r3, #1
340021be:	3b01      	subs	r3, #1
340021c0:	d0e5      	beq.n	3400218e <ec_copy_program+0x36>
      program[i + 2] = *((ECInstr *)ptr);
340021c2:	f855 2f04 	ldr.w	r2, [r5, #4]!
340021c6:	f844 2f04 	str.w	r2, [r4, #4]!
    for (unsigned int i = 0; i < size; i++, ptr += sizeof(ECInstr))
340021ca:	e7f8      	b.n	340021be <ec_copy_program+0x66>
340021cc:	ecbf0020 	.word	0xecbf0020
340021d0:	340263ea 	.word	0x340263ea
340021d4:	34026414 	.word	0x34026414
340021d8:	ca057a7a 	.word	0xca057a7a
340021dc:	3402644c 	.word	0x3402644c
340021e0:	34026484 	.word	0x34026484
340021e4:	340264d4 	.word	0x340264d4
340021e8:	3402652c 	.word	0x3402652c

340021ec <ec_get_reloc_table_ptr>:
 * \return the pointer to the relocation table contained in the Epoch Controller binary pointed by \e file_ptr, or \e
 * NULL if the Epoch Controller binary does not contain any relocation table or on errors
 */

const ECFileEntry *ec_get_reloc_table_ptr(const uint8_t *file_ptr)
{
340021ec:	b508      	push	{r3, lr}

  magic = *((ECFileEntry *)ptr);

  ptr += sizeof(ECFileEntry);

  if (magic != ECASM_BINARY_MAGIC)
340021ee:	6802      	ldr	r2, [r0, #0]
340021f0:	4b06      	ldr	r3, [pc, #24]	@ (3400220c <ec_get_reloc_table_ptr+0x20>)
340021f2:	429a      	cmp	r2, r3
340021f4:	d004      	beq.n	34002200 <ec_get_reloc_table_ptr+0x14>
  {
    LL_ATON_PRINTF("Error: Epoch Controller binary is invalid\n");
340021f6:	4806      	ldr	r0, [pc, #24]	@ (34002210 <ec_get_reloc_table_ptr+0x24>)
340021f8:	f01d fef8 	bl	3401ffec <puts>

    return NULL;
340021fc:	2000      	movs	r0, #0
  }

  reloc_offset = *((ECFileEntry *)ptr);

  return (reloc_offset == 0) ? NULL : (const ECFileEntry *)(file_ptr + reloc_offset);
}
340021fe:	bd08      	pop	{r3, pc}
  reloc_offset = *((ECFileEntry *)ptr);
34002200:	6843      	ldr	r3, [r0, #4]
  return (reloc_offset == 0) ? NULL : (const ECFileEntry *)(file_ptr + reloc_offset);
34002202:	2b00      	cmp	r3, #0
34002204:	d0fa      	beq.n	340021fc <ec_get_reloc_table_ptr+0x10>
34002206:	4418      	add	r0, r3
34002208:	e7f9      	b.n	340021fe <ec_get_reloc_table_ptr+0x12>
3400220a:	bf00      	nop
3400220c:	ecbf0020 	.word	0xecbf0020
34002210:	340263ea 	.word	0x340263ea

34002214 <ec_reloc>:
 * \retval \e true  on success
 * \retval \e false otherwise
 */

bool ec_reloc(const ECFileEntry *reloc_table_ptr, ECInstr *program, unsigned int idx, ECAddr base, ECAddr *prev_base)
{
34002214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34002216:	9d06      	ldr	r5, [sp, #24]
34002218:	460c      	mov	r4, r1
  if (reloc_table_ptr == NULL)
3400221a:	b920      	cbnz	r0, 34002226 <ec_reloc+0x12>
  {
    LL_ATON_PRINTF("Error: Cannot relocate because the pointer to the Epoch Controller relocation table is invalid\n");
3400221c:	4815      	ldr	r0, [pc, #84]	@ (34002274 <ec_reloc+0x60>)
3400221e:	f01d fee5 	bl	3401ffec <puts>

    return false;
34002222:	2000      	movs	r0, #0
34002224:	e007      	b.n	34002236 <ec_reloc+0x22>
  }

  if (base == *prev_base)
34002226:	6829      	ldr	r1, [r5, #0]
34002228:	4299      	cmp	r1, r3
3400222a:	d003      	beq.n	34002234 <ec_reloc+0x20>

  const ECFileEntry *ptr = reloc_table_ptr;

  ECFileEntry size = *ptr;

  if (idx < size)
3400222c:	6801      	ldr	r1, [r0, #0]
3400222e:	4291      	cmp	r1, r2
34002230:	d802      	bhi.n	34002238 <ec_reloc+0x24>
      // following the magic number of the EC program and its size)
      program[offset + 2] += base - *prev_base;
    }
  }

  *prev_base = base;
34002232:	602b      	str	r3, [r5, #0]
    return true;
34002234:	2001      	movs	r0, #1

  return true;
}
34002236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ptr = reloc_table_ptr + 3 * idx + 2;
34002238:	210c      	movs	r1, #12
3400223a:	434a      	muls	r2, r1
3400223c:	3208      	adds	r2, #8
3400223e:	1881      	adds	r1, r0, r2
    ECFileEntry offset = *ptr;
34002240:	6849      	ldr	r1, [r1, #4]
    ECFileEntry num = *ptr++;
34002242:	5882      	ldr	r2, [r0, r2]
    if ((offset % sizeof(ECFileEntry)) != 0)
34002244:	f011 0603 	ands.w	r6, r1, #3
34002248:	d003      	beq.n	34002252 <ec_reloc+0x3e>
      LL_ATON_PRINTF("Error: Offset %lu in Epoch Controller binary is invalid\n", (unsigned long)offset);
3400224a:	480b      	ldr	r0, [pc, #44]	@ (34002278 <ec_reloc+0x64>)
3400224c:	f01d fe66 	bl	3401ff1c <iprintf>
      return false;
34002250:	e7e7      	b.n	34002222 <ec_reloc+0xe>
    ptr = (const ECFileEntry *)((const uint8_t *)reloc_table_ptr + offset);
34002252:	4408      	add	r0, r1
34002254:	3201      	adds	r2, #1
    for (unsigned int i = 0; i < num; i++)
34002256:	3a01      	subs	r2, #1
34002258:	d0eb      	beq.n	34002232 <ec_reloc+0x1e>
      program[offset + 2] += base - *prev_base;
3400225a:	f850 1026 	ldr.w	r1, [r0, r6, lsl #2]
3400225e:	682f      	ldr	r7, [r5, #0]
34002260:	3102      	adds	r1, #2
34002262:	eba3 0c07 	sub.w	ip, r3, r7
34002266:	f854 7021 	ldr.w	r7, [r4, r1, lsl #2]
    for (unsigned int i = 0; i < num; i++)
3400226a:	3601      	adds	r6, #1
      program[offset + 2] += base - *prev_base;
3400226c:	4467      	add	r7, ip
3400226e:	f844 7021 	str.w	r7, [r4, r1, lsl #2]
    for (unsigned int i = 0; i < num; i++)
34002272:	e7f0      	b.n	34002256 <ec_reloc+0x42>
34002274:	340265b0 	.word	0x340265b0
34002278:	3402660f 	.word	0x3402660f

3400227c <LL_ATON_Init>:
/**
 * @brief  ATON global initialization. Initializes clocks and bus interfaces. Must be called before anything else
 * @retval Always zero
 */
int LL_ATON_Init(void)
{
3400227c:	b510      	push	{r4, lr}
  if (done != 0)
3400227e:	4ba3      	ldr	r3, [pc, #652]	@ (3400250c <LL_ATON_Init+0x290>)
{
34002280:	b088      	sub	sp, #32
  if (done != 0)
34002282:	781a      	ldrb	r2, [r3, #0]
34002284:	b90a      	cbnz	r2, 3400228a <LL_ATON_Init+0xe>
  done = 1;
34002286:	2201      	movs	r2, #1
34002288:	701a      	strb	r2, [r3, #0]
  int i;

  ll_aton_static_checks();

  /* Clear pipeline */
  t = ATON_CLKCTRL_CTRL_GET(0);
3400228a:	4ba1      	ldr	r3, [pc, #644]	@ (34002510 <LL_ATON_Init+0x294>)
3400228c:	681a      	ldr	r2, [r3, #0]
  t = ATON_CLKCTRL_CTRL_SET_CLR(t, 1);
3400228e:	f042 0202 	orr.w	r2, r2, #2
  ATON_CLKCTRL_CTRL_SET(0, t);
34002292:	601a      	str	r2, [r3, #0]

  /* Enable all ATON clocks */
  ATON_CLKCTRL_CTRL_SET(0, 1);
34002294:	2201      	movs	r2, #1
34002296:	601a      	str	r2, [r3, #0]
  ATON_CLKCTRL_AGATES0_SET(0, 0xffffffff);
34002298:	f04f 32ff 	mov.w	r2, #4294967295
3400229c:	609a      	str	r2, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0xffffffff);
3400229e:	60da      	str	r2, [r3, #12]

#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ATON_CLKCTRL_BGATES_SET(0, (1 << ATON_EPOCHCTRL_CLKB_CLK(0)));
#else
  ATON_CLKCTRL_BGATES_SET(0, 0x0);
340022a0:	2200      	movs	r2, #0
340022a2:	611a      	str	r2, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0xffffffff);
#endif

  /* Check that RTL and ATON.h match. Only check first unit */
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
340022a4:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
340022a8:	685c      	ldr	r4, [r3, #4]
340022aa:	2c00      	cmp	r4, #0
340022ac:	d0fc      	beq.n	340022a8 <LL_ATON_Init+0x2c>
340022ae:	f245 0301 	movw	r3, #20481	@ 0x5001
340022b2:	b2a2      	uxth	r2, r4
340022b4:	429a      	cmp	r2, r3
340022b6:	f040 8092 	bne.w	340023de <LL_ATON_Init+0x162>

#ifdef ATON_CONVACC_NUM
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
340022ba:	4b96      	ldr	r3, [pc, #600]	@ (34002514 <LL_ATON_Init+0x298>)
340022bc:	685c      	ldr	r4, [r3, #4]
340022be:	2c00      	cmp	r4, #0
340022c0:	d0fc      	beq.n	340022bc <LL_ATON_Init+0x40>
340022c2:	f245 1317 	movw	r3, #20759	@ 0x5117
340022c6:	b2a2      	uxth	r2, r4
340022c8:	429a      	cmp	r2, r3
340022ca:	f040 80b0 	bne.w	3400242e <LL_ATON_Init+0x1b2>
#endif

#ifdef ATON_POOL_NUM
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
340022ce:	4b92      	ldr	r3, [pc, #584]	@ (34002518 <LL_ATON_Init+0x29c>)
340022d0:	685c      	ldr	r4, [r3, #4]
340022d2:	2c00      	cmp	r4, #0
340022d4:	d0fc      	beq.n	340022d0 <LL_ATON_Init+0x54>
340022d6:	f241 131c 	movw	r3, #4380	@ 0x111c
340022da:	b2a2      	uxth	r2, r4
340022dc:	429a      	cmp	r2, r3
340022de:	f040 80cc 	bne.w	3400247a <LL_ATON_Init+0x1fe>
#endif

#ifdef ATON_ARITH_NUM
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
340022e2:	4b8e      	ldr	r3, [pc, #568]	@ (3400251c <LL_ATON_Init+0x2a0>)
340022e4:	685c      	ldr	r4, [r3, #4]
340022e6:	2c00      	cmp	r4, #0
340022e8:	d0fc      	beq.n	340022e4 <LL_ATON_Init+0x68>
340022ea:	f241 031a 	movw	r3, #4122	@ 0x101a
340022ee:	b2a2      	uxth	r2, r4
340022f0:	429a      	cmp	r2, r3
340022f2:	f040 80e6 	bne.w	340024c2 <LL_ATON_Init+0x246>
#endif

#ifdef ATON_ACTIV_NUM
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
340022f6:	4b8a      	ldr	r3, [pc, #552]	@ (34002520 <LL_ATON_Init+0x2a4>)
340022f8:	685c      	ldr	r4, [r3, #4]
340022fa:	2c00      	cmp	r4, #0
340022fc:	d0fc      	beq.n	340022f8 <LL_ATON_Init+0x7c>
340022fe:	f241 131b 	movw	r3, #4379	@ 0x111b
34002302:	b2a2      	uxth	r2, r4
34002304:	429a      	cmp	r2, r3
34002306:	f040 812d 	bne.w	34002564 <LL_ATON_Init+0x2e8>
#endif

#ifdef ATON_DECUN_NUM
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
3400230a:	4b86      	ldr	r3, [pc, #536]	@ (34002524 <LL_ATON_Init+0x2a8>)
3400230c:	685c      	ldr	r4, [r3, #4]
3400230e:	2c00      	cmp	r4, #0
34002310:	d0fc      	beq.n	3400230c <LL_ATON_Init+0x90>
34002312:	f641 2319 	movw	r3, #6681	@ 0x1a19
34002316:	b2a2      	uxth	r2, r4
34002318:	429a      	cmp	r2, r3
3400231a:	f040 8147 	bne.w	340025ac <LL_ATON_Init+0x330>
#endif

#ifdef ATON_EPOCHCTRL_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
3400231e:	4b82      	ldr	r3, [pc, #520]	@ (34002528 <LL_ATON_Init+0x2ac>)
34002320:	685c      	ldr	r4, [r3, #4]
34002322:	2c00      	cmp	r4, #0
34002324:	d0fc      	beq.n	34002320 <LL_ATON_Init+0xa4>
34002326:	f241 1321 	movw	r3, #4385	@ 0x1121
3400232a:	b2a2      	uxth	r2, r4
3400232c:	429a      	cmp	r2, r3
3400232e:	f040 8162 	bne.w	340025f6 <LL_ATON_Init+0x37a>
#endif

#ifdef ATON_RECBUF_VERSION_TYPE_DT
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
34002332:	4b7e      	ldr	r3, [pc, #504]	@ (3400252c <LL_ATON_Init+0x2b0>)
34002334:	685c      	ldr	r4, [r3, #4]
34002336:	2c00      	cmp	r4, #0
34002338:	d0fc      	beq.n	34002334 <LL_ATON_Init+0xb8>
3400233a:	f243 2320 	movw	r3, #12832	@ 0x3220
3400233e:	b2a2      	uxth	r2, r4
34002340:	429a      	cmp	r2, r3
34002342:	f040 817c 	bne.w	3400263e <LL_ATON_Init+0x3c2>

#ifdef ATON_IMC_NUM
  ASSERT_UNITS_VERS_W_MSG(IMC, t);
#endif

  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
34002346:	4b72      	ldr	r3, [pc, #456]	@ (34002510 <LL_ATON_Init+0x294>)
34002348:	685c      	ldr	r4, [r3, #4]
3400234a:	2c00      	cmp	r4, #0
3400234c:	d0fc      	beq.n	34002348 <LL_ATON_Init+0xcc>
3400234e:	f241 231f 	movw	r3, #4639	@ 0x121f
34002352:	b2a2      	uxth	r2, r4
34002354:	429a      	cmp	r2, r3
34002356:	f040 8198 	bne.w	3400268a <LL_ATON_Init+0x40e>

  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
3400235a:	4b75      	ldr	r3, [pc, #468]	@ (34002530 <LL_ATON_Init+0x2b4>)
3400235c:	685c      	ldr	r4, [r3, #4]
3400235e:	2c00      	cmp	r4, #0
34002360:	d0fc      	beq.n	3400235c <LL_ATON_Init+0xe0>
34002362:	f241 131e 	movw	r3, #4382	@ 0x111e
34002366:	b2a2      	uxth	r2, r4
34002368:	429a      	cmp	r2, r3
3400236a:	f040 81b4 	bne.w	340026d6 <LL_ATON_Init+0x45a>

  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400236e:	4b71      	ldr	r3, [pc, #452]	@ (34002534 <LL_ATON_Init+0x2b8>)
34002370:	685c      	ldr	r4, [r3, #4]
34002372:	2c00      	cmp	r4, #0
34002374:	d0fc      	beq.n	34002370 <LL_ATON_Init+0xf4>
34002376:	b2a3      	uxth	r3, r4
34002378:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
3400237c:	f040 81cf 	bne.w	3400271e <LL_ATON_Init+0x4a2>

  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34002380:	4a6d      	ldr	r2, [pc, #436]	@ (34002538 <LL_ATON_Init+0x2bc>)
34002382:	6854      	ldr	r4, [r2, #4]
34002384:	2c00      	cmp	r4, #0
34002386:	d0fc      	beq.n	34002382 <LL_ATON_Init+0x106>
34002388:	f245 031d 	movw	r3, #20509	@ 0x501d
3400238c:	b2a1      	uxth	r1, r4
3400238e:	4299      	cmp	r1, r3
34002390:	f000 81ec 	beq.w	3400276c <LL_ATON_Init+0x4f0>
34002394:	f01e f9a4 	bl	340206e0 <__errno>
34002398:	6803      	ldr	r3, [r0, #0]
3400239a:	2b00      	cmp	r3, #0
3400239c:	f000 81e4 	beq.w	34002768 <LL_ATON_Init+0x4ec>
340023a0:	f01e f99e 	bl	340206e0 <__errno>
340023a4:	6800      	ldr	r0, [r0, #0]
340023a6:	f01e f945 	bl	34020634 <strerror>
340023aa:	4603      	mov	r3, r0
340023ac:	2205      	movs	r2, #5
340023ae:	2100      	movs	r1, #0
340023b0:	e9cd 2105 	strd	r2, r1, [sp, #20]
340023b4:	221d      	movs	r2, #29
340023b6:	9204      	str	r2, [sp, #16]
340023b8:	f3c4 2203 	ubfx	r2, r4, #8, #4
340023bc:	9203      	str	r2, [sp, #12]
340023be:	f3c4 3203 	ubfx	r2, r4, #12, #4
340023c2:	9202      	str	r2, [sp, #8]
340023c4:	4a5d      	ldr	r2, [pc, #372]	@ (3400253c <LL_ATON_Init+0x2c0>)
340023c6:	b2e4      	uxtb	r4, r4
340023c8:	495d      	ldr	r1, [pc, #372]	@ (34002540 <LL_ATON_Init+0x2c4>)
340023ca:	9200      	str	r2, [sp, #0]
340023cc:	485d      	ldr	r0, [pc, #372]	@ (34002544 <LL_ATON_Init+0x2c8>)
340023ce:	22fb      	movs	r2, #251	@ 0xfb
340023d0:	9401      	str	r4, [sp, #4]
340023d2:	f01d fda3 	bl	3401ff1c <iprintf>
340023d6:	21fb      	movs	r1, #251	@ 0xfb
340023d8:	4b5b      	ldr	r3, [pc, #364]	@ (34002548 <LL_ATON_Init+0x2cc>)
340023da:	4a5c      	ldr	r2, [pc, #368]	@ (3400254c <LL_ATON_Init+0x2d0>)
340023dc:	e022      	b.n	34002424 <LL_ATON_Init+0x1a8>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
340023de:	f01e f97f 	bl	340206e0 <__errno>
340023e2:	6803      	ldr	r3, [r0, #0]
340023e4:	b30b      	cbz	r3, 3400242a <LL_ATON_Init+0x1ae>
340023e6:	f01e f97b 	bl	340206e0 <__errno>
340023ea:	6800      	ldr	r0, [r0, #0]
340023ec:	f01e f922 	bl	34020634 <strerror>
340023f0:	4603      	mov	r3, r0
340023f2:	2205      	movs	r2, #5
340023f4:	f04f 0e00 	mov.w	lr, #0
340023f8:	e9cd 2e05 	strd	r2, lr, [sp, #20]
340023fc:	2201      	movs	r2, #1
340023fe:	9204      	str	r2, [sp, #16]
34002400:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002404:	9203      	str	r2, [sp, #12]
34002406:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400240a:	9202      	str	r2, [sp, #8]
3400240c:	4a50      	ldr	r2, [pc, #320]	@ (34002550 <LL_ATON_Init+0x2d4>)
3400240e:	b2e4      	uxtb	r4, r4
34002410:	494b      	ldr	r1, [pc, #300]	@ (34002540 <LL_ATON_Init+0x2c4>)
34002412:	9200      	str	r2, [sp, #0]
34002414:	484b      	ldr	r0, [pc, #300]	@ (34002544 <LL_ATON_Init+0x2c8>)
34002416:	22c7      	movs	r2, #199	@ 0xc7
34002418:	9401      	str	r4, [sp, #4]
3400241a:	f01d fd7f 	bl	3401ff1c <iprintf>
3400241e:	21c7      	movs	r1, #199	@ 0xc7
34002420:	4b49      	ldr	r3, [pc, #292]	@ (34002548 <LL_ATON_Init+0x2cc>)
34002422:	4a4a      	ldr	r2, [pc, #296]	@ (3400254c <LL_ATON_Init+0x2d0>)
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
34002424:	4846      	ldr	r0, [pc, #280]	@ (34002540 <LL_ATON_Init+0x2c4>)
34002426:	f01c fecd 	bl	3401f1c4 <__assert_func>
  ASSERT_UNITS_VERS_W_MSG(STRENG, t);
3400242a:	4b4a      	ldr	r3, [pc, #296]	@ (34002554 <LL_ATON_Init+0x2d8>)
3400242c:	e7e1      	b.n	340023f2 <LL_ATON_Init+0x176>
  ASSERT_UNITS_VERS_W_MSG(CONVACC, t);
3400242e:	f01e f957 	bl	340206e0 <__errno>
34002432:	6803      	ldr	r3, [r0, #0]
34002434:	b1fb      	cbz	r3, 34002476 <LL_ATON_Init+0x1fa>
34002436:	f01e f953 	bl	340206e0 <__errno>
3400243a:	6800      	ldr	r0, [r0, #0]
3400243c:	f01e f8fa 	bl	34020634 <strerror>
34002440:	4603      	mov	r3, r0
34002442:	2205      	movs	r2, #5
34002444:	f04f 0c01 	mov.w	ip, #1
34002448:	e9cd 2c05 	strd	r2, ip, [sp, #20]
3400244c:	2217      	movs	r2, #23
3400244e:	9204      	str	r2, [sp, #16]
34002450:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002454:	9203      	str	r2, [sp, #12]
34002456:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400245a:	9202      	str	r2, [sp, #8]
3400245c:	4a3e      	ldr	r2, [pc, #248]	@ (34002558 <LL_ATON_Init+0x2dc>)
3400245e:	b2e4      	uxtb	r4, r4
34002460:	4937      	ldr	r1, [pc, #220]	@ (34002540 <LL_ATON_Init+0x2c4>)
34002462:	9200      	str	r2, [sp, #0]
34002464:	4837      	ldr	r0, [pc, #220]	@ (34002544 <LL_ATON_Init+0x2c8>)
34002466:	22ca      	movs	r2, #202	@ 0xca
34002468:	9401      	str	r4, [sp, #4]
3400246a:	f01d fd57 	bl	3401ff1c <iprintf>
3400246e:	21ca      	movs	r1, #202	@ 0xca
34002470:	4b35      	ldr	r3, [pc, #212]	@ (34002548 <LL_ATON_Init+0x2cc>)
34002472:	4a36      	ldr	r2, [pc, #216]	@ (3400254c <LL_ATON_Init+0x2d0>)
34002474:	e7d6      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002476:	4b37      	ldr	r3, [pc, #220]	@ (34002554 <LL_ATON_Init+0x2d8>)
34002478:	e7e3      	b.n	34002442 <LL_ATON_Init+0x1c6>
  ASSERT_UNITS_VERS_W_MSG(POOL, t);
3400247a:	f01e f931 	bl	340206e0 <__errno>
3400247e:	6803      	ldr	r3, [r0, #0]
34002480:	b1eb      	cbz	r3, 340024be <LL_ATON_Init+0x242>
34002482:	f01e f92d 	bl	340206e0 <__errno>
34002486:	6800      	ldr	r0, [r0, #0]
34002488:	f01e f8d4 	bl	34020634 <strerror>
3400248c:	4603      	mov	r3, r0
3400248e:	2201      	movs	r2, #1
34002490:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002494:	221c      	movs	r2, #28
34002496:	9204      	str	r2, [sp, #16]
34002498:	f3c4 2203 	ubfx	r2, r4, #8, #4
3400249c:	9203      	str	r2, [sp, #12]
3400249e:	f3c4 3203 	ubfx	r2, r4, #12, #4
340024a2:	9202      	str	r2, [sp, #8]
340024a4:	4a2d      	ldr	r2, [pc, #180]	@ (3400255c <LL_ATON_Init+0x2e0>)
340024a6:	b2e4      	uxtb	r4, r4
340024a8:	4925      	ldr	r1, [pc, #148]	@ (34002540 <LL_ATON_Init+0x2c4>)
340024aa:	9200      	str	r2, [sp, #0]
340024ac:	4825      	ldr	r0, [pc, #148]	@ (34002544 <LL_ATON_Init+0x2c8>)
340024ae:	22ce      	movs	r2, #206	@ 0xce
340024b0:	9401      	str	r4, [sp, #4]
340024b2:	f01d fd33 	bl	3401ff1c <iprintf>
340024b6:	21ce      	movs	r1, #206	@ 0xce
340024b8:	4b23      	ldr	r3, [pc, #140]	@ (34002548 <LL_ATON_Init+0x2cc>)
340024ba:	4a24      	ldr	r2, [pc, #144]	@ (3400254c <LL_ATON_Init+0x2d0>)
340024bc:	e7b2      	b.n	34002424 <LL_ATON_Init+0x1a8>
340024be:	4b25      	ldr	r3, [pc, #148]	@ (34002554 <LL_ATON_Init+0x2d8>)
340024c0:	e7e5      	b.n	3400248e <LL_ATON_Init+0x212>
  ASSERT_UNITS_VERS_W_MSG(ARITH, t);
340024c2:	f01e f90d 	bl	340206e0 <__errno>
340024c6:	6803      	ldr	r3, [r0, #0]
340024c8:	b1f3      	cbz	r3, 34002508 <LL_ATON_Init+0x28c>
340024ca:	f01e f909 	bl	340206e0 <__errno>
340024ce:	6800      	ldr	r0, [r0, #0]
340024d0:	f01e f8b0 	bl	34020634 <strerror>
340024d4:	4603      	mov	r3, r0
340024d6:	2201      	movs	r2, #1
340024d8:	2000      	movs	r0, #0
340024da:	e9cd 2005 	strd	r2, r0, [sp, #20]
340024de:	221a      	movs	r2, #26
340024e0:	9204      	str	r2, [sp, #16]
340024e2:	f3c4 2203 	ubfx	r2, r4, #8, #4
340024e6:	9203      	str	r2, [sp, #12]
340024e8:	f3c4 3203 	ubfx	r2, r4, #12, #4
340024ec:	9202      	str	r2, [sp, #8]
340024ee:	4a1c      	ldr	r2, [pc, #112]	@ (34002560 <LL_ATON_Init+0x2e4>)
340024f0:	b2e4      	uxtb	r4, r4
340024f2:	4913      	ldr	r1, [pc, #76]	@ (34002540 <LL_ATON_Init+0x2c4>)
340024f4:	9200      	str	r2, [sp, #0]
340024f6:	4813      	ldr	r0, [pc, #76]	@ (34002544 <LL_ATON_Init+0x2c8>)
340024f8:	22d2      	movs	r2, #210	@ 0xd2
340024fa:	9401      	str	r4, [sp, #4]
340024fc:	f01d fd0e 	bl	3401ff1c <iprintf>
34002500:	21d2      	movs	r1, #210	@ 0xd2
34002502:	4b11      	ldr	r3, [pc, #68]	@ (34002548 <LL_ATON_Init+0x2cc>)
34002504:	4a11      	ldr	r2, [pc, #68]	@ (3400254c <LL_ATON_Init+0x2d0>)
34002506:	e78d      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002508:	4b12      	ldr	r3, [pc, #72]	@ (34002554 <LL_ATON_Init+0x2d8>)
3400250a:	e7e4      	b.n	340024d6 <LL_ATON_Init+0x25a>
3400250c:	3410d3b8 	.word	0x3410d3b8
34002510:	580e0000 	.word	0x580e0000
34002514:	580ef000 	.word	0x580ef000
34002518:	580fb000 	.word	0x580fb000
3400251c:	580f7000 	.word	0x580f7000
34002520:	580f5000 	.word	0x580f5000
34002524:	580f3000 	.word	0x580f3000
34002528:	580fe000 	.word	0x580fe000
3400252c:	580fd000 	.word	0x580fd000
34002530:	580e1000 	.word	0x580e1000
34002534:	580e4000 	.word	0x580e4000
34002538:	580e2000 	.word	0x580e2000
3400253c:	34026742 	.word	0x34026742
34002540:	3402664d 	.word	0x3402664d
34002544:	3402668d 	.word	0x3402668d
34002548:	34026d17 	.word	0x34026d17
3400254c:	3402d1cb 	.word	0x3402d1cb
34002550:	340266f1 	.word	0x340266f1
34002554:	34026648 	.word	0x34026648
34002558:	340266f8 	.word	0x340266f8
3400255c:	34026700 	.word	0x34026700
34002560:	34026705 	.word	0x34026705
  ASSERT_UNITS_VERS_W_MSG(ACTIV, t);
34002564:	f01e f8bc 	bl	340206e0 <__errno>
34002568:	6803      	ldr	r3, [r0, #0]
3400256a:	b1eb      	cbz	r3, 340025a8 <LL_ATON_Init+0x32c>
3400256c:	f01e f8b8 	bl	340206e0 <__errno>
34002570:	6800      	ldr	r0, [r0, #0]
34002572:	f01e f85f 	bl	34020634 <strerror>
34002576:	4603      	mov	r3, r0
34002578:	2201      	movs	r2, #1
3400257a:	e9cd 2205 	strd	r2, r2, [sp, #20]
3400257e:	221b      	movs	r2, #27
34002580:	9204      	str	r2, [sp, #16]
34002582:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002586:	9203      	str	r2, [sp, #12]
34002588:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400258c:	9202      	str	r2, [sp, #8]
3400258e:	4a7c      	ldr	r2, [pc, #496]	@ (34002780 <LL_ATON_Init+0x504>)
34002590:	b2e4      	uxtb	r4, r4
34002592:	497c      	ldr	r1, [pc, #496]	@ (34002784 <LL_ATON_Init+0x508>)
34002594:	9200      	str	r2, [sp, #0]
34002596:	487c      	ldr	r0, [pc, #496]	@ (34002788 <LL_ATON_Init+0x50c>)
34002598:	22d6      	movs	r2, #214	@ 0xd6
3400259a:	9401      	str	r4, [sp, #4]
3400259c:	f01d fcbe 	bl	3401ff1c <iprintf>
340025a0:	21d6      	movs	r1, #214	@ 0xd6
340025a2:	4b7a      	ldr	r3, [pc, #488]	@ (3400278c <LL_ATON_Init+0x510>)
340025a4:	4a7a      	ldr	r2, [pc, #488]	@ (34002790 <LL_ATON_Init+0x514>)
340025a6:	e73d      	b.n	34002424 <LL_ATON_Init+0x1a8>
340025a8:	4b7a      	ldr	r3, [pc, #488]	@ (34002794 <LL_ATON_Init+0x518>)
340025aa:	e7e5      	b.n	34002578 <LL_ATON_Init+0x2fc>
  ASSERT_UNITS_VERS_W_MSG(DECUN, t);
340025ac:	f01e f898 	bl	340206e0 <__errno>
340025b0:	6803      	ldr	r3, [r0, #0]
340025b2:	b1f3      	cbz	r3, 340025f2 <LL_ATON_Init+0x376>
340025b4:	f01e f894 	bl	340206e0 <__errno>
340025b8:	6800      	ldr	r0, [r0, #0]
340025ba:	f01e f83b 	bl	34020634 <strerror>
340025be:	4603      	mov	r3, r0
340025c0:	2201      	movs	r2, #1
340025c2:	210a      	movs	r1, #10
340025c4:	e9cd 2105 	strd	r2, r1, [sp, #20]
340025c8:	2219      	movs	r2, #25
340025ca:	9204      	str	r2, [sp, #16]
340025cc:	f3c4 2203 	ubfx	r2, r4, #8, #4
340025d0:	9203      	str	r2, [sp, #12]
340025d2:	f3c4 3203 	ubfx	r2, r4, #12, #4
340025d6:	9202      	str	r2, [sp, #8]
340025d8:	4a6f      	ldr	r2, [pc, #444]	@ (34002798 <LL_ATON_Init+0x51c>)
340025da:	b2e4      	uxtb	r4, r4
340025dc:	4969      	ldr	r1, [pc, #420]	@ (34002784 <LL_ATON_Init+0x508>)
340025de:	9200      	str	r2, [sp, #0]
340025e0:	4869      	ldr	r0, [pc, #420]	@ (34002788 <LL_ATON_Init+0x50c>)
340025e2:	22da      	movs	r2, #218	@ 0xda
340025e4:	9401      	str	r4, [sp, #4]
340025e6:	f01d fc99 	bl	3401ff1c <iprintf>
340025ea:	21da      	movs	r1, #218	@ 0xda
340025ec:	4b67      	ldr	r3, [pc, #412]	@ (3400278c <LL_ATON_Init+0x510>)
340025ee:	4a68      	ldr	r2, [pc, #416]	@ (34002790 <LL_ATON_Init+0x514>)
340025f0:	e718      	b.n	34002424 <LL_ATON_Init+0x1a8>
340025f2:	4b68      	ldr	r3, [pc, #416]	@ (34002794 <LL_ATON_Init+0x518>)
340025f4:	e7e4      	b.n	340025c0 <LL_ATON_Init+0x344>
  ASSERT_UNITS_VERS_W_MSG(EPOCHCTRL, t);
340025f6:	f01e f873 	bl	340206e0 <__errno>
340025fa:	6803      	ldr	r3, [r0, #0]
340025fc:	b1eb      	cbz	r3, 3400263a <LL_ATON_Init+0x3be>
340025fe:	f01e f86f 	bl	340206e0 <__errno>
34002602:	6800      	ldr	r0, [r0, #0]
34002604:	f01e f816 	bl	34020634 <strerror>
34002608:	4603      	mov	r3, r0
3400260a:	2201      	movs	r2, #1
3400260c:	e9cd 2205 	strd	r2, r2, [sp, #20]
34002610:	2221      	movs	r2, #33	@ 0x21
34002612:	9204      	str	r2, [sp, #16]
34002614:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002618:	9203      	str	r2, [sp, #12]
3400261a:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400261e:	9202      	str	r2, [sp, #8]
34002620:	4a5e      	ldr	r2, [pc, #376]	@ (3400279c <LL_ATON_Init+0x520>)
34002622:	b2e4      	uxtb	r4, r4
34002624:	4957      	ldr	r1, [pc, #348]	@ (34002784 <LL_ATON_Init+0x508>)
34002626:	9200      	str	r2, [sp, #0]
34002628:	4857      	ldr	r0, [pc, #348]	@ (34002788 <LL_ATON_Init+0x50c>)
3400262a:	22de      	movs	r2, #222	@ 0xde
3400262c:	9401      	str	r4, [sp, #4]
3400262e:	f01d fc75 	bl	3401ff1c <iprintf>
34002632:	21de      	movs	r1, #222	@ 0xde
34002634:	4b55      	ldr	r3, [pc, #340]	@ (3400278c <LL_ATON_Init+0x510>)
34002636:	4a56      	ldr	r2, [pc, #344]	@ (34002790 <LL_ATON_Init+0x514>)
34002638:	e6f4      	b.n	34002424 <LL_ATON_Init+0x1a8>
3400263a:	4b56      	ldr	r3, [pc, #344]	@ (34002794 <LL_ATON_Init+0x518>)
3400263c:	e7e5      	b.n	3400260a <LL_ATON_Init+0x38e>
  ASSERT_UNITS_VERS_W_MSG(RECBUF, t);
3400263e:	f01e f84f 	bl	340206e0 <__errno>
34002642:	6803      	ldr	r3, [r0, #0]
34002644:	b1fb      	cbz	r3, 34002686 <LL_ATON_Init+0x40a>
34002646:	f01e f84b 	bl	340206e0 <__errno>
3400264a:	6800      	ldr	r0, [r0, #0]
3400264c:	f01d fff2 	bl	34020634 <strerror>
34002650:	4603      	mov	r3, r0
34002652:	2203      	movs	r2, #3
34002654:	f04f 0e02 	mov.w	lr, #2
34002658:	e9cd 2e05 	strd	r2, lr, [sp, #20]
3400265c:	2220      	movs	r2, #32
3400265e:	9204      	str	r2, [sp, #16]
34002660:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002664:	9203      	str	r2, [sp, #12]
34002666:	f3c4 3203 	ubfx	r2, r4, #12, #4
3400266a:	9202      	str	r2, [sp, #8]
3400266c:	4a4c      	ldr	r2, [pc, #304]	@ (340027a0 <LL_ATON_Init+0x524>)
3400266e:	b2e4      	uxtb	r4, r4
34002670:	4944      	ldr	r1, [pc, #272]	@ (34002784 <LL_ATON_Init+0x508>)
34002672:	9200      	str	r2, [sp, #0]
34002674:	4844      	ldr	r0, [pc, #272]	@ (34002788 <LL_ATON_Init+0x50c>)
34002676:	22e2      	movs	r2, #226	@ 0xe2
34002678:	9401      	str	r4, [sp, #4]
3400267a:	f01d fc4f 	bl	3401ff1c <iprintf>
3400267e:	21e2      	movs	r1, #226	@ 0xe2
34002680:	4b42      	ldr	r3, [pc, #264]	@ (3400278c <LL_ATON_Init+0x510>)
34002682:	4a43      	ldr	r2, [pc, #268]	@ (34002790 <LL_ATON_Init+0x514>)
34002684:	e6ce      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002686:	4b43      	ldr	r3, [pc, #268]	@ (34002794 <LL_ATON_Init+0x518>)
34002688:	e7e3      	b.n	34002652 <LL_ATON_Init+0x3d6>
  ASSERT_UNITS_VERS_W_MSG(CLKCTRL, t);
3400268a:	f01e f829 	bl	340206e0 <__errno>
3400268e:	6803      	ldr	r3, [r0, #0]
34002690:	b1fb      	cbz	r3, 340026d2 <LL_ATON_Init+0x456>
34002692:	f01e f825 	bl	340206e0 <__errno>
34002696:	6800      	ldr	r0, [r0, #0]
34002698:	f01d ffcc 	bl	34020634 <strerror>
3400269c:	4603      	mov	r3, r0
3400269e:	2201      	movs	r2, #1
340026a0:	f04f 0c02 	mov.w	ip, #2
340026a4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
340026a8:	221f      	movs	r2, #31
340026aa:	9204      	str	r2, [sp, #16]
340026ac:	f3c4 2203 	ubfx	r2, r4, #8, #4
340026b0:	9203      	str	r2, [sp, #12]
340026b2:	f3c4 3203 	ubfx	r2, r4, #12, #4
340026b6:	9202      	str	r2, [sp, #8]
340026b8:	4a3a      	ldr	r2, [pc, #232]	@ (340027a4 <LL_ATON_Init+0x528>)
340026ba:	b2e4      	uxtb	r4, r4
340026bc:	4931      	ldr	r1, [pc, #196]	@ (34002784 <LL_ATON_Init+0x508>)
340026be:	9200      	str	r2, [sp, #0]
340026c0:	4831      	ldr	r0, [pc, #196]	@ (34002788 <LL_ATON_Init+0x50c>)
340026c2:	22f5      	movs	r2, #245	@ 0xf5
340026c4:	9401      	str	r4, [sp, #4]
340026c6:	f01d fc29 	bl	3401ff1c <iprintf>
340026ca:	21f5      	movs	r1, #245	@ 0xf5
340026cc:	4b2f      	ldr	r3, [pc, #188]	@ (3400278c <LL_ATON_Init+0x510>)
340026ce:	4a30      	ldr	r2, [pc, #192]	@ (34002790 <LL_ATON_Init+0x514>)
340026d0:	e6a8      	b.n	34002424 <LL_ATON_Init+0x1a8>
340026d2:	4b30      	ldr	r3, [pc, #192]	@ (34002794 <LL_ATON_Init+0x518>)
340026d4:	e7e3      	b.n	3400269e <LL_ATON_Init+0x422>
  ASSERT_UNITS_VERS_W_MSG(INTCTRL, t);
340026d6:	f01e f803 	bl	340206e0 <__errno>
340026da:	6803      	ldr	r3, [r0, #0]
340026dc:	b1eb      	cbz	r3, 3400271a <LL_ATON_Init+0x49e>
340026de:	f01d ffff 	bl	340206e0 <__errno>
340026e2:	6800      	ldr	r0, [r0, #0]
340026e4:	f01d ffa6 	bl	34020634 <strerror>
340026e8:	4603      	mov	r3, r0
340026ea:	2201      	movs	r2, #1
340026ec:	e9cd 2205 	strd	r2, r2, [sp, #20]
340026f0:	221e      	movs	r2, #30
340026f2:	9204      	str	r2, [sp, #16]
340026f4:	f3c4 2203 	ubfx	r2, r4, #8, #4
340026f8:	9203      	str	r2, [sp, #12]
340026fa:	f3c4 3203 	ubfx	r2, r4, #12, #4
340026fe:	9202      	str	r2, [sp, #8]
34002700:	4a29      	ldr	r2, [pc, #164]	@ (340027a8 <LL_ATON_Init+0x52c>)
34002702:	b2e4      	uxtb	r4, r4
34002704:	491f      	ldr	r1, [pc, #124]	@ (34002784 <LL_ATON_Init+0x508>)
34002706:	9200      	str	r2, [sp, #0]
34002708:	481f      	ldr	r0, [pc, #124]	@ (34002788 <LL_ATON_Init+0x50c>)
3400270a:	22f7      	movs	r2, #247	@ 0xf7
3400270c:	9401      	str	r4, [sp, #4]
3400270e:	f01d fc05 	bl	3401ff1c <iprintf>
34002712:	21f7      	movs	r1, #247	@ 0xf7
34002714:	4b1d      	ldr	r3, [pc, #116]	@ (3400278c <LL_ATON_Init+0x510>)
34002716:	4a1e      	ldr	r2, [pc, #120]	@ (34002790 <LL_ATON_Init+0x514>)
34002718:	e684      	b.n	34002424 <LL_ATON_Init+0x1a8>
3400271a:	4b1e      	ldr	r3, [pc, #120]	@ (34002794 <LL_ATON_Init+0x518>)
3400271c:	e7e5      	b.n	340026ea <LL_ATON_Init+0x46e>
  ASSERT_UNITS_VERS_W_MSG(STRSWITCH, t);
3400271e:	f01d ffdf 	bl	340206e0 <__errno>
34002722:	6803      	ldr	r3, [r0, #0]
34002724:	b1f3      	cbz	r3, 34002764 <LL_ATON_Init+0x4e8>
34002726:	f01d ffdb 	bl	340206e0 <__errno>
3400272a:	6800      	ldr	r0, [r0, #0]
3400272c:	f01d ff82 	bl	34020634 <strerror>
34002730:	4603      	mov	r3, r0
34002732:	2201      	movs	r2, #1
34002734:	2006      	movs	r0, #6
34002736:	e9cd 2005 	strd	r2, r0, [sp, #20]
3400273a:	2200      	movs	r2, #0
3400273c:	9204      	str	r2, [sp, #16]
3400273e:	f3c4 2203 	ubfx	r2, r4, #8, #4
34002742:	9203      	str	r2, [sp, #12]
34002744:	f3c4 3203 	ubfx	r2, r4, #12, #4
34002748:	9202      	str	r2, [sp, #8]
3400274a:	4a18      	ldr	r2, [pc, #96]	@ (340027ac <LL_ATON_Init+0x530>)
3400274c:	b2e4      	uxtb	r4, r4
3400274e:	490d      	ldr	r1, [pc, #52]	@ (34002784 <LL_ATON_Init+0x508>)
34002750:	9200      	str	r2, [sp, #0]
34002752:	480d      	ldr	r0, [pc, #52]	@ (34002788 <LL_ATON_Init+0x50c>)
34002754:	22f9      	movs	r2, #249	@ 0xf9
34002756:	9401      	str	r4, [sp, #4]
34002758:	f01d fbe0 	bl	3401ff1c <iprintf>
3400275c:	21f9      	movs	r1, #249	@ 0xf9
3400275e:	4b0b      	ldr	r3, [pc, #44]	@ (3400278c <LL_ATON_Init+0x510>)
34002760:	4a0b      	ldr	r2, [pc, #44]	@ (34002790 <LL_ATON_Init+0x514>)
34002762:	e65f      	b.n	34002424 <LL_ATON_Init+0x1a8>
34002764:	4b0b      	ldr	r3, [pc, #44]	@ (34002794 <LL_ATON_Init+0x518>)
34002766:	e7e4      	b.n	34002732 <LL_ATON_Init+0x4b6>
  ASSERT_UNITS_VERS_W_MSG(BUSIF, t);
34002768:	4b0a      	ldr	r3, [pc, #40]	@ (34002794 <LL_ATON_Init+0x518>)
3400276a:	e61f      	b.n	340023ac <LL_ATON_Init+0x130>

  /* Enable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 1);
3400276c:	2301      	movs	r3, #1

  /* Enable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 1);

  return 0;
}
3400276e:	2000      	movs	r0, #0
    ATON_BUSIF_CTRL_SET(i, 1);
34002770:	6013      	str	r3, [r2, #0]
34002772:	4a0f      	ldr	r2, [pc, #60]	@ (340027b0 <LL_ATON_Init+0x534>)
34002774:	6013      	str	r3, [r2, #0]
  ATON_INTCTRL_CTRL_SET(0, 1);
34002776:	f5a2 5200 	sub.w	r2, r2, #8192	@ 0x2000
3400277a:	6013      	str	r3, [r2, #0]
}
3400277c:	b008      	add	sp, #32
3400277e:	bd10      	pop	{r4, pc}
34002780:	3402670b 	.word	0x3402670b
34002784:	3402664d 	.word	0x3402664d
34002788:	3402668d 	.word	0x3402668d
3400278c:	34026d17 	.word	0x34026d17
34002790:	3402d1cb 	.word	0x3402d1cb
34002794:	34026648 	.word	0x34026648
34002798:	34026711 	.word	0x34026711
3400279c:	34026717 	.word	0x34026717
340027a0:	34026721 	.word	0x34026721
340027a4:	34026728 	.word	0x34026728
340027a8:	34026730 	.word	0x34026730
340027ac:	34026738 	.word	0x34026738
340027b0:	580e3000 	.word	0x580e3000

340027b4 <LL_ATON_DeInit>:
int LL_ATON_DeInit(void)
{
  int i;

  /* Disable Interrupt Controller */
  ATON_INTCTRL_CTRL_SET(0, 0);
340027b4:	2000      	movs	r0, #0
340027b6:	4b07      	ldr	r3, [pc, #28]	@ (340027d4 <LL_ATON_DeInit+0x20>)
340027b8:	6018      	str	r0, [r3, #0]

  /* Disable Bus Interfaces */
  for (i = 0; i < ATON_BUSIF_NUM; i++)
  {
    ATON_BUSIF_CTRL_SET(i, 0);
340027ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340027be:	6018      	str	r0, [r3, #0]
340027c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
340027c4:	6018      	str	r0, [r3, #0]
  }

  /* Disable all ATON clocks */
  ATON_CLKCTRL_AGATES0_SET(0, 0);
340027c6:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
340027ca:	6098      	str	r0, [r3, #8]
  ATON_CLKCTRL_AGATES1_SET(0, 0);
340027cc:	60d8      	str	r0, [r3, #12]
  ATON_CLKCTRL_BGATES_SET(0, 0);
340027ce:	6118      	str	r0, [r3, #16]
#ifdef ATON_CLKCTRL_BGATES1_OFFSET
  ATON_CLKCTRL_BGATES1_SET(0, 0);
#endif
  ATON_CLKCTRL_CTRL_SET(0, 0);
340027d0:	6018      	str	r0, [r3, #0]

  return 0;
}
340027d2:	4770      	bx	lr
340027d4:	580e1000 	.word	0x580e1000

340027d8 <LL_ATON_EnableUnits_Init>:
 * @param  n Lenght of the initialization array
 * @retval Error code
 * @todo   Add boundary checks
 */
int LL_ATON_EnableUnits_Init(const LL_ATON_EnableUnits_InitTypeDef *LL_ATON_EnableUnits_InitStruct, int n)
{
340027d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;
  enum AccelUnitsType unitType;
  uint32_t unitId;

  for (i = 0; i < n; i++)
340027da:	2400      	movs	r4, #0
340027dc:	42a1      	cmp	r1, r4
340027de:	f101 0201 	add.w	r2, r1, #1
340027e2:	bfb8      	it	lt
340027e4:	2201      	movlt	r2, #1
#endif // !POOL_RC14
      break;
#endif
#ifdef ATON_RECBUF_NUM
    case RECBUF:
      ATON_ENABLE(RECBUF, unitId);
340027e6:	4d1e      	ldr	r5, [pc, #120]	@ (34002860 <LL_ATON_EnableUnits_Init+0x88>)
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
340027e8:	4f1e      	ldr	r7, [pc, #120]	@ (34002864 <LL_ATON_EnableUnits_Init+0x8c>)
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
340027ea:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
340027ec:	3a01      	subs	r2, #1
340027ee:	d101      	bne.n	340027f4 <LL_ATON_EnableUnits_Init+0x1c>
      break;
    }
  }

  return 0;
}
340027f0:	2000      	movs	r0, #0
340027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (unitType)
340027f4:	f810 1024 	ldrb.w	r1, [r0, r4, lsl #2]
    unitId = LL_ATON_EnableUnits_InitStruct[i].unit.unit_num;
340027f8:	f836 3024 	ldrh.w	r3, [r6, r4, lsl #2]
    switch (unitType)
340027fc:	2908      	cmp	r1, #8
340027fe:	d818      	bhi.n	34002832 <LL_ATON_EnableUnits_Init+0x5a>
34002800:	e8df f001 	tbb	[pc, r1]
34002804:	190e1705 	.word	0x190e1705
34002808:	1725211d 	.word	0x1725211d
3400280c:	29          	.byte	0x29
3400280d:	00          	.byte	0x00
      ATON_ENABLE(STRENG, unitId);
3400280e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002812:	33e5      	adds	r3, #229	@ 0xe5
      ATON_ENABLE(DECUN, unitId);
34002814:	031b      	lsls	r3, r3, #12
34002816:	6819      	ldr	r1, [r3, #0]
34002818:	f041 0101 	orr.w	r1, r1, #1
3400281c:	6019      	str	r1, [r3, #0]
      break;
3400281e:	e008      	b.n	34002832 <LL_ATON_EnableUnits_Init+0x5a>
      ATON_CONVACC_CTRL_SET(unitId, ATON_CONVACC_CTRL_SET_EN(Conv_ctrl_bits[unitId], 1));
34002820:	f503 21b0 	add.w	r1, r3, #360448	@ 0x58000
34002824:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
34002828:	31ef      	adds	r1, #239	@ 0xef
3400282a:	0309      	lsls	r1, r1, #12
3400282c:	f043 0301 	orr.w	r3, r3, #1
34002830:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
34002832:	3401      	adds	r4, #1
34002834:	e7da      	b.n	340027ec <LL_ATON_EnableUnits_Init+0x14>
      ATON_ENABLE(DECUN, unitId);
34002836:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400283a:	33f3      	adds	r3, #243	@ 0xf3
3400283c:	e7ea      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ACTIV, unitId);
3400283e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002842:	33f5      	adds	r3, #245	@ 0xf5
34002844:	e7e6      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(ARITH, unitId);
34002846:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
3400284a:	33f7      	adds	r3, #247	@ 0xf7
3400284c:	e7e2      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(POOL, unitId);
3400284e:	f503 23b0 	add.w	r3, r3, #360448	@ 0x58000
34002852:	33fb      	adds	r3, #251	@ 0xfb
34002854:	e7de      	b.n	34002814 <LL_ATON_EnableUnits_Init+0x3c>
      ATON_ENABLE(RECBUF, unitId);
34002856:	682b      	ldr	r3, [r5, #0]
34002858:	f043 0301 	orr.w	r3, r3, #1
3400285c:	602b      	str	r3, [r5, #0]
      break;
3400285e:	e7e8      	b.n	34002832 <LL_ATON_EnableUnits_Init+0x5a>
34002860:	580fd000 	.word	0x580fd000
34002864:	3410d3bc 	.word	0x3410d3bc

34002868 <__atonn_getSrcPortID>:
}
#endif

unsigned __atonn_getSrcPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
34002868:	b538      	push	{r3, r4, r5, lr}
3400286a:	4605      	mov	r5, r0
3400286c:	f89d 4010 	ldrb.w	r4, [sp, #16]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
34002870:	4608      	mov	r0, r1
34002872:	b131      	cbz	r1, 34002882 <__atonn_getSrcPortID+0x1a>
34002874:	f240 313e 	movw	r1, #830	@ 0x33e
34002878:	4b3d      	ldr	r3, [pc, #244]	@ (34002970 <__atonn_getSrcPortID+0x108>)
3400287a:	4a3e      	ldr	r2, [pc, #248]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
  case STRSWITCH:
    switch (aut)
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
3400287c:	483e      	ldr	r0, [pc, #248]	@ (34002978 <__atonn_getSrcPortID+0x110>)
3400287e:	f01c fca1 	bl	3401f1c4 <__assert_func>
  switch (sut)
34002882:	b125      	cbz	r5, 3400288e <__atonn_getSrcPortID+0x26>
34002884:	2d01      	cmp	r5, #1
34002886:	d068      	beq.n	3400295a <__atonn_getSrcPortID+0xf2>
34002888:	2d02      	cmp	r5, #2
3400288a:	d06b      	beq.n	34002964 <__atonn_getSrcPortID+0xfc>
    // TODO
    LL_ATON_ASSERT(0);
    break;
  }
  return 0;
}
3400288c:	bd38      	pop	{r3, r4, r5, pc}
    switch (aut)
3400288e:	2a06      	cmp	r2, #6
34002890:	d85e      	bhi.n	34002950 <__atonn_getSrcPortID+0xe8>
34002892:	e8df f002 	tbb	[pc, r2]
34002896:	5d04      	.short	0x5d04
34002898:	3f302112 	.word	0x3f302112
3400289c:	4e          	.byte	0x4e
3400289d:	00          	.byte	0x00
      LL_ATON_ASSERT(port == 0);
3400289e:	b124      	cbz	r4, 340028aa <__atonn_getSrcPortID+0x42>
340028a0:	f240 3146 	movw	r1, #838	@ 0x346
340028a4:	4b35      	ldr	r3, [pc, #212]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028a6:	4a33      	ldr	r2, [pc, #204]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028a8:	e7e8      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
340028aa:	2b09      	cmp	r3, #9
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, STRENG, 0, 0) + au_num;
340028ac:	4618      	mov	r0, r3
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
340028ae:	d9ed      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
340028b0:	f240 3147 	movw	r1, #839	@ 0x347
340028b4:	4b32      	ldr	r3, [pc, #200]	@ (34002980 <__atonn_getSrcPortID+0x118>)
340028b6:	4a2f      	ldr	r2, [pc, #188]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028b8:	e7e0      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340028ba:	b124      	cbz	r4, 340028c6 <__atonn_getSrcPortID+0x5e>
340028bc:	f240 314d 	movw	r1, #845	@ 0x34d
340028c0:	4b2e      	ldr	r3, [pc, #184]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028c2:	4a2c      	ldr	r2, [pc, #176]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028c4:	e7da      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
340028c6:	2b03      	cmp	r3, #3
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, CONVACC, 0, 0) + au_num;
340028c8:	f103 000a 	add.w	r0, r3, #10
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
340028cc:	d9de      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
340028ce:	f240 314e 	movw	r1, #846	@ 0x34e
340028d2:	4b2c      	ldr	r3, [pc, #176]	@ (34002984 <__atonn_getSrcPortID+0x11c>)
340028d4:	4a27      	ldr	r2, [pc, #156]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028d6:	e7d1      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340028d8:	b124      	cbz	r4, 340028e4 <__atonn_getSrcPortID+0x7c>
340028da:	f44f 7155 	mov.w	r1, #852	@ 0x354
340028de:	4b27      	ldr	r3, [pc, #156]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028e0:	4a24      	ldr	r2, [pc, #144]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028e2:	e7cb      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340028e4:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, DECUN, 0, 0) + au_num;
340028e6:	f103 000e 	add.w	r0, r3, #14
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
340028ea:	d9cf      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
340028ec:	f240 3155 	movw	r1, #853	@ 0x355
340028f0:	4b25      	ldr	r3, [pc, #148]	@ (34002988 <__atonn_getSrcPortID+0x120>)
340028f2:	4a20      	ldr	r2, [pc, #128]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
340028f4:	e7c2      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
340028f6:	b124      	cbz	r4, 34002902 <__atonn_getSrcPortID+0x9a>
340028f8:	f240 315b 	movw	r1, #859	@ 0x35b
340028fc:	4b1f      	ldr	r3, [pc, #124]	@ (3400297c <__atonn_getSrcPortID+0x114>)
340028fe:	4a1d      	ldr	r2, [pc, #116]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002900:	e7bc      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002902:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ACTIV, 0, 0) + au_num;
34002904:	f103 0010 	add.w	r0, r3, #16
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002908:	d9c0      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
3400290a:	f44f 7157 	mov.w	r1, #860	@ 0x35c
3400290e:	4b1e      	ldr	r3, [pc, #120]	@ (34002988 <__atonn_getSrcPortID+0x120>)
34002910:	4a18      	ldr	r2, [pc, #96]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002912:	e7b3      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002914:	b124      	cbz	r4, 34002920 <__atonn_getSrcPortID+0xb8>
34002916:	f240 3162 	movw	r1, #866	@ 0x362
3400291a:	4b18      	ldr	r3, [pc, #96]	@ (3400297c <__atonn_getSrcPortID+0x114>)
3400291c:	4a15      	ldr	r2, [pc, #84]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400291e:	e7ad      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002920:	2b03      	cmp	r3, #3
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, ARITH, 0, 0) + au_num;
34002922:	f103 0012 	add.w	r0, r3, #18
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002926:	d9b1      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
34002928:	f240 3163 	movw	r1, #867	@ 0x363
3400292c:	4b15      	ldr	r3, [pc, #84]	@ (34002984 <__atonn_getSrcPortID+0x11c>)
3400292e:	4a11      	ldr	r2, [pc, #68]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002930:	e7a4      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(port == 0);
34002932:	b124      	cbz	r4, 3400293e <__atonn_getSrcPortID+0xd6>
34002934:	f240 3169 	movw	r1, #873	@ 0x369
34002938:	4b10      	ldr	r3, [pc, #64]	@ (3400297c <__atonn_getSrcPortID+0x114>)
3400293a:	4a0e      	ldr	r2, [pc, #56]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400293c:	e79e      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
3400293e:	2b01      	cmp	r3, #1
      return ATONN_CONST_SRCPORT(STRSWITCH, 0, POOL, 0, 0) + au_num;
34002940:	f103 0016 	add.w	r0, r3, #22
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34002944:	d9a2      	bls.n	3400288c <__atonn_getSrcPortID+0x24>
34002946:	f240 316a 	movw	r1, #874	@ 0x36a
3400294a:	4b0f      	ldr	r3, [pc, #60]	@ (34002988 <__atonn_getSrcPortID+0x120>)
3400294c:	4a09      	ldr	r2, [pc, #36]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400294e:	e795      	b.n	3400287c <__atonn_getSrcPortID+0x14>
      LL_ATON_ASSERT(0);
34002950:	f240 316f 	movw	r1, #879	@ 0x36f
34002954:	4b0d      	ldr	r3, [pc, #52]	@ (3400298c <__atonn_getSrcPortID+0x124>)
34002956:	4a07      	ldr	r2, [pc, #28]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002958:	e790      	b.n	3400287c <__atonn_getSrcPortID+0x14>
    LL_ATON_ASSERT(0);
3400295a:	f240 3175 	movw	r1, #885	@ 0x375
3400295e:	4b0b      	ldr	r3, [pc, #44]	@ (3400298c <__atonn_getSrcPortID+0x124>)
34002960:	4a04      	ldr	r2, [pc, #16]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
34002962:	e78b      	b.n	3400287c <__atonn_getSrcPortID+0x14>
    LL_ATON_ASSERT(0);
34002964:	f240 3179 	movw	r1, #889	@ 0x379
34002968:	4b08      	ldr	r3, [pc, #32]	@ (3400298c <__atonn_getSrcPortID+0x124>)
3400296a:	4a02      	ldr	r2, [pc, #8]	@ (34002974 <__atonn_getSrcPortID+0x10c>)
3400296c:	e786      	b.n	3400287c <__atonn_getSrcPortID+0x14>
3400296e:	bf00      	nop
34002970:	34026748 	.word	0x34026748
34002974:	3402d1b6 	.word	0x3402d1b6
34002978:	3402664d 	.word	0x3402664d
3400297c:	34026754 	.word	0x34026754
34002980:	3402675e 	.word	0x3402675e
34002984:	3402676a 	.word	0x3402676a
34002988:	34026775 	.word	0x34026775
3400298c:	34026d17 	.word	0x34026d17

34002990 <__atonn_getDstPortID>:

unsigned __atonn_getDstPortID(enum SwitchUnitsType sut, unsigned char su_num, enum AccelUnitsType aut,
                              unsigned char au_num, unsigned char port)
{
34002990:	b538      	push	{r3, r4, r5, lr}
34002992:	4605      	mov	r5, r0
34002994:	f89d 4010 	ldrb.w	r4, [sp, #16]
  // FIXME
  LL_ATON_ASSERT(su_num == 0);
34002998:	4608      	mov	r0, r1
3400299a:	b131      	cbz	r1, 340029aa <__atonn_getDstPortID+0x1a>
3400299c:	f240 3183 	movw	r1, #899	@ 0x383
340029a0:	4b46      	ldr	r3, [pc, #280]	@ (34002abc <__atonn_getDstPortID+0x12c>)
340029a2:	4a47      	ldr	r2, [pc, #284]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
  case STRSWITCH:
    switch (aut)
    {
#if defined(ATON_STRENG_NUM)
    case STRENG:
      LL_ATON_ASSERT(port == 0);
340029a4:	4847      	ldr	r0, [pc, #284]	@ (34002ac4 <__atonn_getDstPortID+0x134>)
340029a6:	f01c fc0d 	bl	3401f1c4 <__assert_func>
  switch (sut)
340029aa:	b125      	cbz	r5, 340029b6 <__atonn_getDstPortID+0x26>
340029ac:	2d01      	cmp	r5, #1
340029ae:	d07a      	beq.n	34002aa6 <__atonn_getDstPortID+0x116>
340029b0:	2d02      	cmp	r5, #2
340029b2:	d07d      	beq.n	34002ab0 <__atonn_getDstPortID+0x120>
    // TODO
    LL_ATON_ASSERT(0);
    break;
  }
  return 0;
}
340029b4:	bd38      	pop	{r3, r4, r5, pc}
    switch (aut)
340029b6:	2a06      	cmp	r2, #6
340029b8:	d870      	bhi.n	34002a9c <__atonn_getDstPortID+0x10c>
340029ba:	e8df f002 	tbb	[pc, r2]
340029be:	6f04      	.short	0x6f04
340029c0:	4c3d2915 	.word	0x4c3d2915
340029c4:	60          	.byte	0x60
340029c5:	00          	.byte	0x00
      LL_ATON_ASSERT(port == 0);
340029c6:	b124      	cbz	r4, 340029d2 <__atonn_getDstPortID+0x42>
340029c8:	f240 318b 	movw	r1, #907	@ 0x38b
340029cc:	4b3e      	ldr	r3, [pc, #248]	@ (34002ac8 <__atonn_getDstPortID+0x138>)
340029ce:	4a3c      	ldr	r2, [pc, #240]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
340029d0:	e7e8      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_STRENG_NUM);
340029d2:	2b09      	cmp	r3, #9
340029d4:	d904      	bls.n	340029e0 <__atonn_getDstPortID+0x50>
340029d6:	f44f 7163 	mov.w	r1, #908	@ 0x38c
340029da:	4b3c      	ldr	r3, [pc, #240]	@ (34002acc <__atonn_getDstPortID+0x13c>)
340029dc:	4a38      	ldr	r2, [pc, #224]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
340029de:	e7e1      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, STRENG, 0, 0) + (0x4 * au_num);
340029e0:	2008      	movs	r0, #8
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
340029e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
340029e6:	e7e5      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port < 3);
340029e8:	2c02      	cmp	r4, #2
340029ea:	d904      	bls.n	340029f6 <__atonn_getDstPortID+0x66>
340029ec:	f240 3192 	movw	r1, #914	@ 0x392
340029f0:	4b37      	ldr	r3, [pc, #220]	@ (34002ad0 <__atonn_getDstPortID+0x140>)
340029f2:	4a33      	ldr	r2, [pc, #204]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
340029f4:	e7d6      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_CONVACC_NUM);
340029f6:	2b03      	cmp	r3, #3
340029f8:	d904      	bls.n	34002a04 <__atonn_getDstPortID+0x74>
340029fa:	f240 3193 	movw	r1, #915	@ 0x393
340029fe:	4b35      	ldr	r3, [pc, #212]	@ (34002ad4 <__atonn_getDstPortID+0x144>)
34002a00:	4a2f      	ldr	r2, [pc, #188]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a02:	e7cf      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, CONVACC, 0, 0) + (0x4 * (3 * au_num + port));
34002a04:	2003      	movs	r0, #3
34002a06:	fb10 4003 	smlabb	r0, r0, r3, r4
34002a0a:	0080      	lsls	r0, r0, #2
34002a0c:	3030      	adds	r0, #48	@ 0x30
34002a0e:	e7d1      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port < 2);
34002a10:	2c01      	cmp	r4, #1
34002a12:	d904      	bls.n	34002a1e <__atonn_getDstPortID+0x8e>
34002a14:	f240 3199 	movw	r1, #921	@ 0x399
34002a18:	4b2f      	ldr	r3, [pc, #188]	@ (34002ad8 <__atonn_getDstPortID+0x148>)
34002a1a:	4a29      	ldr	r2, [pc, #164]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a1c:	e7c2      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_DECUN_NUM);
34002a1e:	2b01      	cmp	r3, #1
34002a20:	d904      	bls.n	34002a2c <__atonn_getDstPortID+0x9c>
34002a22:	f240 319a 	movw	r1, #922	@ 0x39a
34002a26:	4b2d      	ldr	r3, [pc, #180]	@ (34002adc <__atonn_getDstPortID+0x14c>)
34002a28:	4a25      	ldr	r2, [pc, #148]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a2a:	e7bb      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, DECUN, 0, 0) + (0x4 * (2 * au_num + port));
34002a2c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
34002a30:	00a4      	lsls	r4, r4, #2
34002a32:	f104 0060 	add.w	r0, r4, #96	@ 0x60
34002a36:	e7bd      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port == 0);
34002a38:	b124      	cbz	r4, 34002a44 <__atonn_getDstPortID+0xb4>
34002a3a:	f44f 7168 	mov.w	r1, #928	@ 0x3a0
34002a3e:	4b22      	ldr	r3, [pc, #136]	@ (34002ac8 <__atonn_getDstPortID+0x138>)
34002a40:	4a1f      	ldr	r2, [pc, #124]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a42:	e7af      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ACTIV_NUM);
34002a44:	2b01      	cmp	r3, #1
34002a46:	d904      	bls.n	34002a52 <__atonn_getDstPortID+0xc2>
34002a48:	f240 31a1 	movw	r1, #929	@ 0x3a1
34002a4c:	4b23      	ldr	r3, [pc, #140]	@ (34002adc <__atonn_getDstPortID+0x14c>)
34002a4e:	4a1c      	ldr	r2, [pc, #112]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a50:	e7a8      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ACTIV, 0, 0) + (0x4 * au_num);
34002a52:	2070      	movs	r0, #112	@ 0x70
34002a54:	e7c5      	b.n	340029e2 <__atonn_getDstPortID+0x52>
      LL_ATON_ASSERT(port < 2);
34002a56:	2c01      	cmp	r4, #1
34002a58:	d904      	bls.n	34002a64 <__atonn_getDstPortID+0xd4>
34002a5a:	f240 31a7 	movw	r1, #935	@ 0x3a7
34002a5e:	4b1e      	ldr	r3, [pc, #120]	@ (34002ad8 <__atonn_getDstPortID+0x148>)
34002a60:	4a17      	ldr	r2, [pc, #92]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a62:	e79f      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_ARITH_NUM);
34002a64:	2b03      	cmp	r3, #3
34002a66:	d904      	bls.n	34002a72 <__atonn_getDstPortID+0xe2>
34002a68:	f44f 716a 	mov.w	r1, #936	@ 0x3a8
34002a6c:	4b19      	ldr	r3, [pc, #100]	@ (34002ad4 <__atonn_getDstPortID+0x144>)
34002a6e:	4a14      	ldr	r2, [pc, #80]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a70:	e798      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, ARITH, 0, 0) + (0x4 * (2 * au_num + port));
34002a72:	eb04 0443 	add.w	r4, r4, r3, lsl #1
34002a76:	00a4      	lsls	r4, r4, #2
34002a78:	f104 0078 	add.w	r0, r4, #120	@ 0x78
34002a7c:	e79a      	b.n	340029b4 <__atonn_getDstPortID+0x24>
      LL_ATON_ASSERT(port == 0);
34002a7e:	b124      	cbz	r4, 34002a8a <__atonn_getDstPortID+0xfa>
34002a80:	f240 31ae 	movw	r1, #942	@ 0x3ae
34002a84:	4b10      	ldr	r3, [pc, #64]	@ (34002ac8 <__atonn_getDstPortID+0x138>)
34002a86:	4a0e      	ldr	r2, [pc, #56]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a88:	e78c      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      LL_ATON_ASSERT(au_num < ATON_POOL_NUM);
34002a8a:	2b01      	cmp	r3, #1
34002a8c:	d904      	bls.n	34002a98 <__atonn_getDstPortID+0x108>
34002a8e:	f240 31af 	movw	r1, #943	@ 0x3af
34002a92:	4b12      	ldr	r3, [pc, #72]	@ (34002adc <__atonn_getDstPortID+0x14c>)
34002a94:	4a0a      	ldr	r2, [pc, #40]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002a96:	e785      	b.n	340029a4 <__atonn_getDstPortID+0x14>
      return ATONN_CONST_DSTPORT(STRSWITCH, 0, POOL, 0, 0) + (0x4 * au_num);
34002a98:	2098      	movs	r0, #152	@ 0x98
34002a9a:	e7a2      	b.n	340029e2 <__atonn_getDstPortID+0x52>
      LL_ATON_ASSERT(0);
34002a9c:	f44f 716d 	mov.w	r1, #948	@ 0x3b4
34002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (34002ae0 <__atonn_getDstPortID+0x150>)
34002aa2:	4a07      	ldr	r2, [pc, #28]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002aa4:	e77e      	b.n	340029a4 <__atonn_getDstPortID+0x14>
    LL_ATON_ASSERT(0);
34002aa6:	f240 31ba 	movw	r1, #954	@ 0x3ba
34002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (34002ae0 <__atonn_getDstPortID+0x150>)
34002aac:	4a04      	ldr	r2, [pc, #16]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002aae:	e779      	b.n	340029a4 <__atonn_getDstPortID+0x14>
    LL_ATON_ASSERT(0);
34002ab0:	f240 31be 	movw	r1, #958	@ 0x3be
34002ab4:	4b0a      	ldr	r3, [pc, #40]	@ (34002ae0 <__atonn_getDstPortID+0x150>)
34002ab6:	4a02      	ldr	r2, [pc, #8]	@ (34002ac0 <__atonn_getDstPortID+0x130>)
34002ab8:	e774      	b.n	340029a4 <__atonn_getDstPortID+0x14>
34002aba:	bf00      	nop
34002abc:	34026748 	.word	0x34026748
34002ac0:	3402d1a1 	.word	0x3402d1a1
34002ac4:	3402664d 	.word	0x3402664d
34002ac8:	34026754 	.word	0x34026754
34002acc:	3402675e 	.word	0x3402675e
34002ad0:	34026780 	.word	0x34026780
34002ad4:	3402676a 	.word	0x3402676a
34002ad8:	34026789 	.word	0x34026789
34002adc:	34026775 	.word	0x34026775
34002ae0:	34026d17 	.word	0x34026d17

34002ae4 <LL_Switch_Init_NoReset>:
  unsigned int fnr_mask[ATON_SWITCH_CONTEXT_NUM] = {ATON_STRSWITCH_DST_FNR0_MASK, ATON_STRSWITCH_DST_FNR1_MASK};

  /* Enable Switch */
  t = ATON_STRSWITCH_CTRL_DT;
  t = ATON_STRSWITCH_CTRL_SET_EN(t, 1);
  ATON_STRSWITCH_CTRL_SET(0, t);
34002ae4:	2301      	movs	r3, #1
34002ae6:	4a13      	ldr	r2, [pc, #76]	@ (34002b34 <LL_Switch_Init_NoReset+0x50>)
34002ae8:	2900      	cmp	r1, #0
{
34002aea:	b530      	push	{r4, r5, lr}
  ATON_STRSWITCH_CTRL_SET(0, t);
34002aec:	6013      	str	r3, [r2, #0]

  for (i = 0; i < n; i++)
34002aee:	eb01 0203 	add.w	r2, r1, r3
34002af2:	bfb8      	it	lt
34002af4:	461a      	movlt	r2, r3
34002af6:	3a01      	subs	r2, #1
34002af8:	d101      	bne.n	34002afe <LL_Switch_Init_NoReset+0x1a>

    ATON_REG_WRITE(reg, t);
  }

  return 0;
}
34002afa:	2000      	movs	r0, #0
34002afc:	bd30      	pop	{r4, r5, pc}
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34002afe:	7b84      	ldrb	r4, [r0, #14]
    t |= (ATONN_SRCPORT_ID(LL_Switch_InitStruct[i].source1) << link_shift[1]);
34002b00:	e9d0 5300 	ldrd	r5, r3, [r0]
34002b04:	045b      	lsls	r3, r3, #17
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b06:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    t |= ((LL_Switch_InitStruct[i].context0 != 0) << en_shift[0]);
34002b0a:	f004 0501 	and.w	r5, r4, #1
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b0e:	432b      	orrs	r3, r5
    t |= ((LL_Switch_InitStruct[i].frames0 << fnr_shift[0]) & fnr_mask[0]);
34002b10:	7b05      	ldrb	r5, [r0, #12]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b12:	6881      	ldr	r1, [r0, #8]
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b14:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
34002b18:	7b45      	ldrb	r5, [r0, #13]
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b1a:	f101 41b0 	add.w	r1, r1, #1476395008	@ 0x58000000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b1e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    t |= ((LL_Switch_InitStruct[i].context1 != 0) << en_shift[1]);
34002b22:	f3c4 0440 	ubfx	r4, r4, #1, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b26:	f501 2164 	add.w	r1, r1, #933888	@ 0xe4000
    t |= ((LL_Switch_InitStruct[i].frames1 << fnr_shift[1]) & fnr_mask[1]);
34002b2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    ATON_REG_WRITE(reg, t);
34002b2e:	600b      	str	r3, [r1, #0]
  for (i = 0; i < n; i++)
34002b30:	3010      	adds	r0, #16
34002b32:	e7e0      	b.n	34002af6 <LL_Switch_Init_NoReset+0x12>
34002b34:	580e4000 	.word	0x580e4000

34002b38 <LL_Switch_Init>:
#if (LL_ATON_PLATFORM == LL_ATON_PLAT_EC_TRACE)
  ll_aton_static_checks();
#endif

  /* Clear Configuration */
  ATON_DISABLE_CLR_CONFCLR(STRSWITCH, 0);
34002b38:	2202      	movs	r2, #2
34002b3a:	4b06      	ldr	r3, [pc, #24]	@ (34002b54 <LL_Switch_Init+0x1c>)
34002b3c:	601a      	str	r2, [r3, #0]
34002b3e:	681a      	ldr	r2, [r3, #0]
34002b40:	0792      	lsls	r2, r2, #30
34002b42:	d4fc      	bmi.n	34002b3e <LL_Switch_Init+0x6>
34002b44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002b48:	601a      	str	r2, [r3, #0]
34002b4a:	681a      	ldr	r2, [r3, #0]
34002b4c:	0052      	lsls	r2, r2, #1
34002b4e:	d4fc      	bmi.n	34002b4a <LL_Switch_Init+0x12>

  return LL_Switch_Init_NoReset(LL_Switch_InitStruct, n);
34002b50:	f7ff bfc8 	b.w	34002ae4 <LL_Switch_Init_NoReset>
34002b54:	580e4000 	.word	0x580e4000

34002b58 <LL_Switch_Deinit>:
 * @param  LL_Switch_InitStruct Pointer to structure(s) describing ports to be disconnected
 * @param  n Number of entries in configuration array
 * @retval Error code
 */
int LL_Switch_Deinit(const LL_Switch_InitTypeDef *LL_Switch_InitStruct, int n)
{
34002b58:	b530      	push	{r4, r5, lr}
  int i;
  volatile uint32_t *reg;

  for (i = 0; i < n; i++)
34002b5a:	2400      	movs	r4, #0
34002b5c:	42a1      	cmp	r1, r4
34002b5e:	f101 0301 	add.w	r3, r1, #1
  {
    /* Compute target destination configuration register */
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));

    /* Disable contexts */
    ATON_REG_WRITE(reg, 0);
34002b62:	4625      	mov	r5, r4
34002b64:	bfb8      	it	lt
34002b66:	2301      	movlt	r3, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b68:	3008      	adds	r0, #8
  for (i = 0; i < n; i++)
34002b6a:	3b01      	subs	r3, #1
34002b6c:	d101      	bne.n	34002b72 <LL_Switch_Deinit+0x1a>
  }

  return 0;
}
34002b6e:	2000      	movs	r0, #0
34002b70:	bd30      	pop	{r4, r5, pc}
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b72:	0122      	lsls	r2, r4, #4
34002b74:	5882      	ldr	r2, [r0, r2]
  for (i = 0; i < n; i++)
34002b76:	3401      	adds	r4, #1
    reg = (uint32_t *)(ATON_STRSWITCH_BASE(0) + ATONN_DSTPORT_ID(LL_Switch_InitStruct[i].dest));
34002b78:	f102 42b0 	add.w	r2, r2, #1476395008	@ 0x58000000
34002b7c:	f502 2264 	add.w	r2, r2, #933888	@ 0xe4000
    ATON_REG_WRITE(reg, 0);
34002b80:	6015      	str	r5, [r2, #0]
  for (i = 0; i < n; i++)
34002b82:	e7f2      	b.n	34002b6a <LL_Switch_Deinit+0x12>

34002b84 <LL_ATON_EnableClock>:
  return bloblines * 4;
}
#endif // ATON_EPOCHCTRL_NUM

void LL_ATON_EnableClock(unsigned int clock)
{
34002b84:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 1);
34002b86:	2401      	movs	r4, #1
34002b88:	2500      	movs	r5, #0
34002b8a:	2301      	movs	r3, #1
34002b8c:	ea54 050d 	orrs.w	r5, r4, sp
34002b90:	4a03      	ldr	r2, [pc, #12]	@ (34002ba0 <LL_ATON_EnableClock+0x1c>)
34002b92:	4083      	lsls	r3, r0
34002b94:	6911      	ldr	r1, [r2, #16]
34002b96:	404b      	eors	r3, r1
34002b98:	4023      	ands	r3, r4
34002b9a:	404b      	eors	r3, r1
34002b9c:	6113      	str	r3, [r2, #16]
#endif
}
34002b9e:	bd30      	pop	{r4, r5, pc}
34002ba0:	580e0000 	.word	0x580e0000

34002ba4 <LL_Streng_TensorInit>:
  if (id >= ATON_STRENG_NUM)
34002ba4:	2809      	cmp	r0, #9
{
34002ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34002baa:	4604      	mov	r4, r0
34002bac:	460d      	mov	r5, r1
34002bae:	4616      	mov	r6, r2
  if (id >= ATON_STRENG_NUM)
34002bb0:	dd04      	ble.n	34002bbc <LL_Streng_TensorInit+0x18>
    return LL_ATON_INVALID_ID;
34002bb2:	f04f 30ff 	mov.w	r0, #4294967295
}
34002bb6:	b003      	add	sp, #12
34002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LL_ATON_EnableClock(ATON_STRENG_CLKB_CLK(id));
34002bbc:	f7ff ffe2 	bl	34002b84 <LL_ATON_EnableClock>
  if (n != 1)
34002bc0:	2e01      	cmp	r6, #1
34002bc2:	d1f6      	bne.n	34002bb2 <LL_Streng_TensorInit+0xe>
  if (conf->nbits_in > 24 || conf->nbits_out > 24)
34002bc4:	f895 603c 	ldrb.w	r6, [r5, #60]	@ 0x3c
34002bc8:	2e18      	cmp	r6, #24
34002bca:	d8f2      	bhi.n	34002bb2 <LL_Streng_TensorInit+0xe>
34002bcc:	f895 c03d 	ldrb.w	ip, [r5, #61]	@ 0x3d
34002bd0:	f1bc 0f18 	cmp.w	ip, #24
34002bd4:	d8ed      	bhi.n	34002bb2 <LL_Streng_TensorInit+0xe>
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002bd6:	7828      	ldrb	r0, [r5, #0]
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002bd8:	f8d5 a038 	ldr.w	sl, [r5, #56]	@ 0x38
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002bdc:	01c2      	lsls	r2, r0, #7
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002bde:	00c3      	lsls	r3, r0, #3
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002be0:	f402 7180 	and.w	r1, r2, #256	@ 0x100
  t = ATON_STRENG_CTRL_SET_DIR(t, (conf->dir != 0));
34002be4:	f003 0308 	and.w	r3, r3, #8
  t = ATON_STRENG_CTRL_SET_RAW(t, (conf->raw != 0));
34002be8:	430b      	orrs	r3, r1
  t = ATON_STRENG_CTRL_SET_RAW_OUT(t, conf->raw_out);
34002bea:	f3c0 0180 	ubfx	r1, r0, #2, #1
34002bee:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  t = ATON_STRENG_CTRL_SET_NOBLK(t, (conf->noblk != 0));
34002bf2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
34002bf6:	431a      	orrs	r2, r3
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34002bf8:	0843      	lsrs	r3, r0, #1
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002bfa:	f10a 31ff 	add.w	r1, sl, #4294967295
  t = ATON_STRENG_CTRL_SET_NOINC(t, (conf->noinc == 1));
34002bfe:	f003 0310 	and.w	r3, r3, #16
34002c02:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_SINGLE(t, conf->frame_tot_cnt == 1);
34002c04:	424a      	negs	r2, r1
34002c06:	414a      	adcs	r2, r1
34002c08:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34002c0c:	0102      	lsls	r2, r0, #4
34002c0e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c12:	f8b5 8000 	ldrh.w	r8, [r5]
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34002c16:	0207      	lsls	r7, r0, #8
  t = ATON_STRENG_CTRL_SET_CONT(t, conf->continuous == 1);
34002c18:	4313      	orrs	r3, r2
  t = ATON_STRENG_CTRL_SET_LSBMODE(t, conf->align_right == 1);
34002c1a:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
34002c1e:	431f      	orrs	r7, r3
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c20:	f408 7310 	and.w	r3, r8, #576	@ 0x240
34002c24:	f1a3 0e40 	sub.w	lr, r3, #64	@ 0x40
34002c28:	f1de 0300 	rsbs	r3, lr, #0
34002c2c:	eb43 030e 	adc.w	r3, r3, lr
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002c30:	f010 0201 	ands.w	r2, r0, #1
  t = ATON_STRENG_CTRL_SET_SIGNEXT(t, conf->align_right == 1 && conf->nbits_unsigned == 0);
34002c34:	ea47 37c3 	orr.w	r7, r7, r3, lsl #15
  int nbits_in = conf->nbits_in;
34002c38:	4631      	mov	r1, r6
  int nbits_out = conf->nbits_out;
34002c3a:	4663      	mov	r3, ip
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002c3c:	9201      	str	r2, [sp, #4]
34002c3e:	f000 0940 	and.w	r9, r0, #64	@ 0x40
34002c42:	f040 80a9 	bne.w	34002d98 <LL_Streng_TensorInit+0x1f4>
34002c46:	4566      	cmp	r6, ip
34002c48:	bf8c      	ite	hi
34002c4a:	2200      	movhi	r2, #0
34002c4c:	2201      	movls	r2, #1
  switch (io_case)
34002c4e:	2a03      	cmp	r2, #3
34002c50:	f000 80b2 	beq.w	34002db8 <LL_Streng_TensorInit+0x214>
34002c54:	2a01      	cmp	r2, #1
34002c56:	f000 80aa 	beq.w	34002dae <LL_Streng_TensorInit+0x20a>
    nbits_in = nbits_out;
34002c5a:	4661      	mov	r1, ip
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002c5c:	eba6 020c 	sub.w	r2, r6, ip
    if (conf->mem_lsb)
34002c60:	0603      	lsls	r3, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002c62:	bf4b      	itete	mi
34002c64:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34002c66:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_in - nbits_out));
34002c68:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_in - nbits_out));
34002c6c:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    in_bits[0] = _LL_min(8, nbits_in);
34002c70:	2908      	cmp	r1, #8
34002c72:	468e      	mov	lr, r1
34002c74:	bfa8      	it	ge
34002c76:	f04f 0e08 	movge.w	lr, #8
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002c7a:	2908      	cmp	r1, #8
34002c7c:	f340 8099 	ble.w	34002db2 <LL_Streng_TensorInit+0x20e>
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34002c80:	2910      	cmp	r1, #16
34002c82:	bfcb      	itete	gt
34002c84:	f1a1 0310 	subgt.w	r3, r1, #16
34002c88:	2300      	movle	r3, #0
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002c8a:	2108      	movgt	r1, #8
34002c8c:	3908      	suble	r1, #8
    if (conf->align_right)
34002c8e:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
34002c92:	f1b9 0f00 	cmp.w	r9, #0
34002c96:	d10b      	bne.n	34002cb0 <LL_Streng_TensorInit+0x10c>
      if (nbits_out > 16)
34002c98:	f1bc 0f10 	cmp.w	ip, #16
34002c9c:	f300 80b2 	bgt.w	34002e04 <LL_Streng_TensorInit+0x260>
      else if (nbits_out > 8)
34002ca0:	f1bc 0f08 	cmp.w	ip, #8
      else if (nbits_in > 8)
34002ca4:	f340 80b2 	ble.w	34002e0c <LL_Streng_TensorInit+0x268>
34002ca8:	4673      	mov	r3, lr
        ch_bits[0] = out_bits[1];
34002caa:	468e      	mov	lr, r1
        ch_bits[1] = out_bits[0];
34002cac:	4619      	mov	r1, r3
  int ch_bits[3] = {0, 0, 0};
34002cae:	465b      	mov	r3, fp
  t = ATON_STRENG_CTRL_SET_SIZE0(t, ch_bits[0]);
34002cb0:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
  ATON_STRENG_CTRL_SET(id, t);
34002cb4:	f504 24b0 	add.w	r4, r4, #360448	@ 0x58000
  t = ATON_STRENG_CTRL_SET_SIZE1(t, ch_bits[1]);
34002cb8:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
  ATON_STRENG_CTRL_SET(id, t);
34002cbc:	34e5      	adds	r4, #229	@ 0xe5
  t = ATON_STRENG_CTRL_SET_SIZE2(t, ch_bits[2]);
34002cbe:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
  ATON_STRENG_CTRL_SET(id, t);
34002cc2:	0324      	lsls	r4, r4, #12
34002cc4:	6027      	str	r7, [r4, #0]
  ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_ADDR_ADDR(id)), conf->addr_base.i,
34002cc6:	e9d5 7e01 	ldrd	r7, lr, [r5, #4]
34002cca:	eb07 030e 	add.w	r3, r7, lr
34002cce:	60a3      	str	r3, [r4, #8]
  if (conf->raw)
34002cd0:	0783      	lsls	r3, r0, #30
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002cd2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
  if (conf->raw)
34002cd4:	f140 809d 	bpl.w	34002e12 <LL_Streng_TensorInit+0x26e>
    if (conf->frame_count)
34002cd8:	696b      	ldr	r3, [r5, #20]
34002cda:	b94b      	cbnz	r3, 34002cf0 <LL_Streng_TensorInit+0x14c>
      t = (LL_Streng_len(conf) * 8) / (conf->dir == 0 ? conf->nbits_in : conf->nbits_out);
34002cdc:	f010 0f01 	tst.w	r0, #1
34002ce0:	bf18      	it	ne
34002ce2:	4666      	movne	r6, ip
    return conf->addr_base.p + conf->offset_limit;
  }

  static inline uint32_t LL_Streng_len(const LL_Streng_TensorInitTypeDef *conf)
  {
    return conf->offset_end - conf->offset_start;
34002ce4:	68eb      	ldr	r3, [r5, #12]
34002ce6:	eba3 030e 	sub.w	r3, r3, lr
34002cea:	00db      	lsls	r3, r3, #3
34002cec:	fbb3 f3f6 	udiv	r3, r3, r6
  uint32_t t_streng_cid_cache = ATON_STRENG_CID_CACHE_DT;
34002cf0:	2000      	movs	r0, #0
    ATON_STRENG_FSIZE_SET(id, t);
34002cf2:	60e3      	str	r3, [r4, #12]
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
34002cf4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
34002cf6:	f36f 010f 	bfc	r1, #0, #16
  ATON_STRENG_FRPTOFF_SET(id, conf->loop_offset);
34002cfa:	6223      	str	r3, [r4, #32]
  ATON_STRENG_FRAME_RPT_SET(id, conf->frame_loop_cnt);
34002cfc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34002cfe:	61e3      	str	r3, [r4, #28]
  ATON_STRENG_FOFFSET_SET(id, conf->frame_offset);
34002d00:	6aab      	ldr	r3, [r5, #40]	@ 0x28
34002d02:	61a3      	str	r3, [r4, #24]
  t = ATON_STRENG_LIMITEN_SET_DOFF_MSB(t, conf->batch_offset >> ATON_STRENG_DEPTH_OFFSET_W);
34002d04:	f041 0306 	orr.w	r3, r1, #6
  ATON_STRENG_LIMITEN_SET(id, t);
34002d08:	6323      	str	r3, [r4, #48]	@ 0x30
  if (/*(conf->dir == 0) && */ (conf->offset_limit != 0x0))
34002d0a:	692b      	ldr	r3, [r5, #16]
34002d0c:	b12b      	cbz	r3, 34002d1a <LL_Streng_TensorInit+0x176>
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d0e:	441f      	add	r7, r3
    t = ATON_STRENG_LIMITEN_SET_STOPPREFTC(t, 1);
34002d10:	f041 0107 	orr.w	r1, r1, #7
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d14:	3f01      	subs	r7, #1
    ATON_STRENG_LIMITEN_SET(id, t);
34002d16:	6321      	str	r1, [r4, #48]	@ 0x30
    ATON_REG_WRITE_RELOC(((volatile uint32_t *)(uintptr_t)ATON_STRENG_LIMITADDR_ADDR(id)), conf->addr_base.i,
34002d18:	63a7      	str	r7, [r4, #56]	@ 0x38
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34002d1a:	7869      	ldrb	r1, [r5, #1]
  if ((conf->dir == 0) && conf->sync_with_other)
34002d1c:	f028 08fe 	bic.w	r8, r8, #254	@ 0xfe
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34002d20:	f3c1 1380 	ubfx	r3, r1, #6, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CACHEABLE(t_streng_cid_cache, conf->cacheable);
34002d24:	f3c1 1640 	ubfx	r6, r1, #5, #1
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_ALLOC(t_streng_cid_cache, conf->cache_allocate);
34002d28:	011b      	lsls	r3, r3, #4
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d2a:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_CID(t_streng_cid_cache, conf->bus_cid);
34002d2e:	f3c1 0682 	ubfx	r6, r1, #2, #3
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d32:	4333      	orrs	r3, r6
34002d34:	78ae      	ldrb	r6, [r5, #2]
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_PFETCH(t_streng_cid_cache, conf->bus_pfetch);
34002d36:	09c9      	lsrs	r1, r1, #7
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d38:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  if ((conf->dir == 0) && conf->sync_with_other)
34002d3c:	ea4f 58c8 	mov.w	r8, r8, lsl #23
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d40:	f006 0103 	and.w	r1, r6, #3
34002d44:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  if ((conf->dir == 0) && conf->sync_with_other)
34002d48:	ea4f 58d8 	mov.w	r8, r8, lsr #23
  if (conf->dir == 1)
34002d4c:	9901      	ldr	r1, [sp, #4]
  ATON_STRENG_LIMIT_SET(id, conf->frame_tot_cnt);
34002d4e:	f8c4 a034 	str.w	sl, [r4, #52]	@ 0x34
  if ((conf->dir == 0) && conf->sync_with_other)
34002d52:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
  t_streng_cid_cache = ATON_STRENG_CID_CACHE_SET_LINESIZE(t_streng_cid_cache, conf->cache_linesize);
34002d56:	ea43 0300 	orr.w	r3, r3, r0
  if (conf->dir == 1)
34002d5a:	ea4f 40c1 	mov.w	r0, r1, lsl #19
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002d5e:	bf09      	itett	eq
34002d60:	78e9      	ldrbeq	r1, [r5, #3]
  t = ATON_STRENG_EVENT_SET_EN_ILLCFG(t, 1); // Enable Illegal Configuration interrupt
34002d62:	f440 1180 	orrne.w	r1, r0, #1048576	@ 0x100000
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002d66:	0609      	lsleq	r1, r1, #24
34002d68:	f001 51f8 	andeq.w	r1, r1, #520093696	@ 0x1f000000
34002d6c:	bf08      	it	eq
34002d6e:	4301      	orreq	r1, r0
  ATON_STRENG_POS_SET(id, t);
34002d70:	f04f 0024 	mov.w	r0, #36	@ 0x24
34002d74:	6260      	str	r0, [r4, #36]	@ 0x24
  ATON_STRENG_STRD_SET(id, t_streng_strd);
34002d76:	6162      	str	r2, [r4, #20]
  ATON_STRENG_CID_CACHE_SET(id, t_streng_cid_cache);
34002d78:	64a3      	str	r3, [r4, #72]	@ 0x48
  t = ATON_STRENG_ENCR_MSB_SET_EN(t, conf->cipher_en);
34002d7a:	f3c6 0380 	ubfx	r3, r6, #2, #1
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34002d7e:	f3c6 06c0 	ubfx	r6, r6, #3, #1
34002d82:	ea4f 3686 	mov.w	r6, r6, lsl #14
    t = ATON_STRENG_EVENT_SET_FRMTRG_SRC(t, conf->sync_dma); // Enable synchronizations of frames with other dma
34002d86:	bf08      	it	eq
34002d88:	f441 0110 	orreq.w	r1, r1, #9437184	@ 0x900000
  t = ATON_STRENG_ENCR_MSB_SET_KEY_SEL(t, conf->key_sel);
34002d8c:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  ATON_STRENG_EVENT_SET(id, t_streng_event);
34002d90:	62a1      	str	r1, [r4, #40]	@ 0x28
  return 0;
34002d92:	2000      	movs	r0, #0
  ATON_STRENG_ENCR_MSB_SET(id, t);
34002d94:	6466      	str	r6, [r4, #68]	@ 0x44
  return 0;
34002d96:	e70e      	b.n	34002bb6 <LL_Streng_TensorInit+0x12>
  int io_case = ((conf->dir != 0) << 1);
34002d98:	0042      	lsls	r2, r0, #1
34002d9a:	f002 0202 	and.w	r2, r2, #2
  io_case += (conf->dir == 0 ? (conf->nbits_in <= conf->nbits_out) : (conf->nbits_in < conf->nbits_out));
34002d9e:	4566      	cmp	r6, ip
34002da0:	ea52 9222 			@ <UNDEFINED> instruction: 0xea529222
  switch (io_case)
34002da4:	2a02      	cmp	r2, #2
34002da6:	f47f af52 	bne.w	34002c4e <LL_Streng_TensorInit+0xaa>
34002daa:	2200      	movs	r2, #0
34002dac:	e00f      	b.n	34002dce <LL_Streng_TensorInit+0x22a>
34002dae:	2200      	movs	r2, #0
34002db0:	e75e      	b.n	34002c70 <LL_Streng_TensorInit+0xcc>
    in_bits[1] = nbits_in > 8 ? _LL_min(8, nbits_in - 8) : 0;
34002db2:	2100      	movs	r1, #0
    in_bits[2] = nbits_in > 16 ? _LL_min(8, nbits_in - 16) : 0;
34002db4:	460b      	mov	r3, r1
34002db6:	e76a      	b.n	34002c8e <LL_Streng_TensorInit+0xea>
    nbits_out = nbits_in;
34002db8:	4633      	mov	r3, r6
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002dba:	ebac 0206 	sub.w	r2, ip, r6
    if (conf->mem_lsb)
34002dbe:	0601      	lsls	r1, r0, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002dc0:	bf4b      	itete	mi
34002dc2:	0412      	lslmi	r2, r2, #16
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34002dc4:	0612      	lslpl	r2, r2, #24
      t_streng_strd = ATON_STRENG_STRD_SET_FGAP(t_streng_strd, (nbits_out - nbits_in));
34002dc6:	f402 127c 	andmi.w	r2, r2, #4128768	@ 0x3f0000
      t_streng_strd = ATON_STRENG_STRD_SET_BGAP(t_streng_strd, (nbits_out - nbits_in));
34002dca:	f002 527c 	andpl.w	r2, r2, #1056964608	@ 0x3f000000
    out_bits[0] = _LL_min(8, nbits_out);
34002dce:	2b08      	cmp	r3, #8
34002dd0:	469e      	mov	lr, r3
34002dd2:	bfa8      	it	ge
34002dd4:	f04f 0e08 	movge.w	lr, #8
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002dd8:	2b08      	cmp	r3, #8
34002dda:	dd10      	ble.n	34002dfe <LL_Streng_TensorInit+0x25a>
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002ddc:	2b10      	cmp	r3, #16
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002dde:	bfd5      	itete	le
34002de0:	f1a3 0108 	suble.w	r1, r3, #8
34002de4:	2108      	movgt	r1, #8
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002de6:	2300      	movle	r3, #0
34002de8:	3b10      	subgt	r3, #16
    if (conf->align_right)
34002dea:	f009 0bff 	and.w	fp, r9, #255	@ 0xff
34002dee:	f1b9 0f00 	cmp.w	r9, #0
34002df2:	f47f af5d 	bne.w	34002cb0 <LL_Streng_TensorInit+0x10c>
      if (nbits_in > 16)
34002df6:	2e10      	cmp	r6, #16
34002df8:	dc04      	bgt.n	34002e04 <LL_Streng_TensorInit+0x260>
      else if (nbits_in > 8)
34002dfa:	2e08      	cmp	r6, #8
34002dfc:	e752      	b.n	34002ca4 <LL_Streng_TensorInit+0x100>
    out_bits[1] = nbits_out > 8 ? _LL_min(8, nbits_out - 8) : 0;
34002dfe:	2100      	movs	r1, #0
    out_bits[2] = nbits_out > 16 ? _LL_min(8, nbits_out - 16) : 0;
34002e00:	460b      	mov	r3, r1
34002e02:	e7f2      	b.n	34002dea <LL_Streng_TensorInit+0x246>
34002e04:	46f1      	mov	r9, lr
        ch_bits[0] = out_bits[2];
34002e06:	469e      	mov	lr, r3
        ch_bits[2] = out_bits[0];
34002e08:	464b      	mov	r3, r9
34002e0a:	e751      	b.n	34002cb0 <LL_Streng_TensorInit+0x10c>
  int ch_bits[3] = {0, 0, 0};
34002e0c:	465b      	mov	r3, fp
34002e0e:	4659      	mov	r1, fp
34002e10:	e74e      	b.n	34002cb0 <LL_Streng_TensorInit+0x10c>
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34002e12:	e9d5 6306 	ldrd	r6, r3, [r5, #24]
    t = ATON_STRENG_FSIZE_SET_WIDTH(t, conf->fwidth);
34002e16:	b2b0      	uxth	r0, r6
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e18:	434e      	muls	r6, r1
    t = ATON_STRENG_FSIZE_SET_HEIGHT(t, conf->fheight);
34002e1a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e1e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
    ATON_STRENG_FSIZE_SET(id, t);
34002e20:	60e3      	str	r3, [r4, #12]
    uint32_t line_offset = conf->line_offset == 0 ? conf->fwidth * conf->batch_offset : conf->line_offset;
34002e22:	2800      	cmp	r0, #0
34002e24:	bf08      	it	eq
34002e26:	4630      	moveq	r0, r6
    t_streng_strd = ATON_STRENG_STRD_SET_LOFF(t_streng_strd, line_offset);
34002e28:	b283      	uxth	r3, r0
34002e2a:	431a      	orrs	r2, r3
    t = ATON_STRENG_DEPTH_SET_SIZE(t, conf->batch_depth);
34002e2c:	8c2b      	ldrh	r3, [r5, #32]
    t = ATON_STRENG_CID_CACHE_SET_LOFF_MSB(t, (line_offset >> ATON_STRENG_STRD_LOFF_W));
34002e2e:	f36f 000f 	bfc	r0, #0, #16
    t = ATON_STRENG_DEPTH_SET_OFFSET(t, conf->batch_offset);
34002e32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ATON_STRENG_DEPTH_SET(id, t);
34002e36:	6123      	str	r3, [r4, #16]
34002e38:	e75c      	b.n	34002cf4 <LL_Streng_TensorInit+0x150>
	...

34002e3c <LL_EpochCtrl_Init>:
  if (id >= ATON_EPOCHCTRL_NUM)
34002e3c:	2800      	cmp	r0, #0
{
34002e3e:	b510      	push	{r4, lr}
34002e40:	460c      	mov	r4, r1
  if (id >= ATON_EPOCHCTRL_NUM)
34002e42:	dc0e      	bgt.n	34002e62 <LL_EpochCtrl_Init+0x26>
  LL_ATON_EnableClock(ATON_EPOCHCTRL_CLKB_CLK(id));
34002e44:	3019      	adds	r0, #25
34002e46:	f7ff fe9d 	bl	34002b84 <LL_ATON_EnableClock>
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34002e4a:	7923      	ldrb	r3, [r4, #4]
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34002e4c:	4a08      	ldr	r2, [pc, #32]	@ (34002e70 <LL_EpochCtrl_Init+0x34>)
  t = ATON_EPOCHCTRL_CTRL_SET_SM(t, conf->stepmode);
34002e4e:	f003 0301 	and.w	r3, r3, #1
34002e52:	00db      	lsls	r3, r3, #3
  ATON_EPOCHCTRL_CTRL_SET(id, t);
34002e54:	6013      	str	r3, [r2, #0]
  if (conf->blobaddr & 0x7)
34002e56:	6823      	ldr	r3, [r4, #0]
34002e58:	f013 0007 	ands.w	r0, r3, #7
34002e5c:	d104      	bne.n	34002e68 <LL_EpochCtrl_Init+0x2c>
  ATON_EPOCHCTRL_ADDR_SET(id, conf->blobaddr);
34002e5e:	6093      	str	r3, [r2, #8]
}
34002e60:	bd10      	pop	{r4, pc}
    return LL_ATON_INVALID_ID;
34002e62:	f04f 30ff 	mov.w	r0, #4294967295
34002e66:	e7fb      	b.n	34002e60 <LL_EpochCtrl_Init+0x24>
    return LL_ATON_INVALID_PARAM;
34002e68:	f06f 0001 	mvn.w	r0, #1
34002e6c:	e7f8      	b.n	34002e60 <LL_EpochCtrl_Init+0x24>
34002e6e:	bf00      	nop
34002e70:	580fe000 	.word	0x580fe000

34002e74 <LL_ATON_DisableClock>:

void LL_ATON_DisableClock(unsigned int clock)
{
34002e74:	b530      	push	{r4, r5, lr}
#if (LL_ATON_ENABLE_CLOCK_GATING == 1)
  ATON_REG_WRITE_FIELD_RANGE(CLKCTRL, 0, BGATES, clock, 1, 0);
34002e76:	2401      	movs	r4, #1
34002e78:	2500      	movs	r5, #0
34002e7a:	ea54 050d 	orrs.w	r5, r4, sp
34002e7e:	4a03      	ldr	r2, [pc, #12]	@ (34002e8c <LL_ATON_DisableClock+0x18>)
34002e80:	6913      	ldr	r3, [r2, #16]
34002e82:	ea23 0304 	bic.w	r3, r3, r4
34002e86:	6113      	str	r3, [r2, #16]
#endif
}
34002e88:	bd30      	pop	{r4, r5, pc}
34002e8a:	bf00      	nop
34002e8c:	580e0000 	.word	0x580e0000

34002e90 <LL_ATON_DisableUnits_Init>:
{
34002e90:	b570      	push	{r4, r5, r6, lr}
34002e92:	4605      	mov	r5, r0
  for (i = 0; i < n; i++)
34002e94:	2400      	movs	r4, #0
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34002e96:	1c86      	adds	r6, r0, #2
  for (i = 0; i < n; i++)
34002e98:	428c      	cmp	r4, r1
34002e9a:	db01      	blt.n	34002ea0 <LL_ATON_DisableUnits_Init+0x10>
  return LL_ATON_OK;
34002e9c:	2000      	movs	r0, #0
}
34002e9e:	bd70      	pop	{r4, r5, r6, pc}
    switch (unitType)
34002ea0:	f815 3024 	ldrb.w	r3, [r5, r4, lsl #2]
    unitId = LL_ATON_DisableUnits_InitStruct[i].unit.unit_num;
34002ea4:	f836 0024 	ldrh.w	r0, [r6, r4, lsl #2]
    switch (unitType)
34002ea8:	2b08      	cmp	r3, #8
34002eaa:	d87a      	bhi.n	34002fa2 <LL_ATON_DisableUnits_Init+0x112>
34002eac:	e8df f003 	tbb	[pc, r3]
34002eb0:	29187905 	.word	0x29187905
34002eb4:	795b4a3a 	.word	0x795b4a3a
34002eb8:	6b          	.byte	0x6b
34002eb9:	00          	.byte	0x00
      ATON_DISABLE_CLR_CONFCLR(STRENG, unitId);
34002eba:	2202      	movs	r2, #2
34002ebc:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002ec0:	33e5      	adds	r3, #229	@ 0xe5
34002ec2:	031b      	lsls	r3, r3, #12
34002ec4:	601a      	str	r2, [r3, #0]
34002ec6:	681a      	ldr	r2, [r3, #0]
34002ec8:	0792      	lsls	r2, r2, #30
34002eca:	d4fc      	bmi.n	34002ec6 <LL_ATON_DisableUnits_Init+0x36>
34002ecc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002ed0:	601a      	str	r2, [r3, #0]
34002ed2:	681a      	ldr	r2, [r3, #0]
34002ed4:	0052      	lsls	r2, r2, #1
34002ed6:	d4fc      	bmi.n	34002ed2 <LL_ATON_DisableUnits_Init+0x42>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34002ed8:	f7ff ffcc 	bl	34002e74 <LL_ATON_DisableClock>
  for (i = 0; i < n; i++)
34002edc:	3401      	adds	r4, #1
34002ede:	e7db      	b.n	34002e98 <LL_ATON_DisableUnits_Init+0x8>
      ATON_DISABLE_CLR_CONFCLR(CONVACC, unitId);
34002ee0:	2202      	movs	r2, #2
34002ee2:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002ee6:	33ef      	adds	r3, #239	@ 0xef
34002ee8:	031b      	lsls	r3, r3, #12
34002eea:	601a      	str	r2, [r3, #0]
34002eec:	681a      	ldr	r2, [r3, #0]
34002eee:	0792      	lsls	r2, r2, #30
34002ef0:	d4fc      	bmi.n	34002eec <LL_ATON_DisableUnits_Init+0x5c>
34002ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002ef6:	601a      	str	r2, [r3, #0]
34002ef8:	681a      	ldr	r2, [r3, #0]
34002efa:	0052      	lsls	r2, r2, #1
34002efc:	d4fc      	bmi.n	34002ef8 <LL_ATON_DisableUnits_Init+0x68>
      LL_ATON_DisableClock(ATON_CONVACC_CLKB_CLK(unitId));
34002efe:	300a      	adds	r0, #10
34002f00:	e7ea      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(DECUN, unitId);
34002f02:	2202      	movs	r2, #2
34002f04:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f08:	33f3      	adds	r3, #243	@ 0xf3
34002f0a:	031b      	lsls	r3, r3, #12
34002f0c:	601a      	str	r2, [r3, #0]
34002f0e:	681a      	ldr	r2, [r3, #0]
34002f10:	0792      	lsls	r2, r2, #30
34002f12:	d4fc      	bmi.n	34002f0e <LL_ATON_DisableUnits_Init+0x7e>
34002f14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f18:	601a      	str	r2, [r3, #0]
34002f1a:	681a      	ldr	r2, [r3, #0]
34002f1c:	0052      	lsls	r2, r2, #1
34002f1e:	d4fc      	bmi.n	34002f1a <LL_ATON_DisableUnits_Init+0x8a>
      LL_ATON_DisableClock(ATON_DECUN_CLKB_CLK(unitId));
34002f20:	300e      	adds	r0, #14
34002f22:	e7d9      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ACTIV, unitId);
34002f24:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f28:	4a1f      	ldr	r2, [pc, #124]	@ (34002fa8 <LL_ATON_DisableUnits_Init+0x118>)
34002f2a:	33f5      	adds	r3, #245	@ 0xf5
34002f2c:	031b      	lsls	r3, r3, #12
34002f2e:	601a      	str	r2, [r3, #0]
34002f30:	681a      	ldr	r2, [r3, #0]
34002f32:	0792      	lsls	r2, r2, #30
34002f34:	d4fc      	bmi.n	34002f30 <LL_ATON_DisableUnits_Init+0xa0>
34002f36:	4a1d      	ldr	r2, [pc, #116]	@ (34002fac <LL_ATON_DisableUnits_Init+0x11c>)
34002f38:	601a      	str	r2, [r3, #0]
34002f3a:	681a      	ldr	r2, [r3, #0]
34002f3c:	0052      	lsls	r2, r2, #1
34002f3e:	d4fc      	bmi.n	34002f3a <LL_ATON_DisableUnits_Init+0xaa>
      LL_ATON_DisableClock(ATON_ACTIV_CLKB_CLK(unitId));
34002f40:	3010      	adds	r0, #16
34002f42:	e7c9      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(ARITH, unitId);
34002f44:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f48:	4a19      	ldr	r2, [pc, #100]	@ (34002fb0 <LL_ATON_DisableUnits_Init+0x120>)
34002f4a:	33f7      	adds	r3, #247	@ 0xf7
34002f4c:	031b      	lsls	r3, r3, #12
34002f4e:	601a      	str	r2, [r3, #0]
34002f50:	681a      	ldr	r2, [r3, #0]
34002f52:	0792      	lsls	r2, r2, #30
34002f54:	d4fc      	bmi.n	34002f50 <LL_ATON_DisableUnits_Init+0xc0>
34002f56:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
34002f5a:	601a      	str	r2, [r3, #0]
34002f5c:	681a      	ldr	r2, [r3, #0]
34002f5e:	0052      	lsls	r2, r2, #1
34002f60:	d4fc      	bmi.n	34002f5c <LL_ATON_DisableUnits_Init+0xcc>
      LL_ATON_DisableClock(ATON_ARITH_CLKB_CLK(unitId));
34002f62:	3012      	adds	r0, #18
34002f64:	e7b8      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(POOL, unitId);
34002f66:	f500 23b0 	add.w	r3, r0, #360448	@ 0x58000
34002f6a:	4a12      	ldr	r2, [pc, #72]	@ (34002fb4 <LL_ATON_DisableUnits_Init+0x124>)
34002f6c:	33fb      	adds	r3, #251	@ 0xfb
34002f6e:	031b      	lsls	r3, r3, #12
34002f70:	601a      	str	r2, [r3, #0]
34002f72:	681a      	ldr	r2, [r3, #0]
34002f74:	0792      	lsls	r2, r2, #30
34002f76:	d4fc      	bmi.n	34002f72 <LL_ATON_DisableUnits_Init+0xe2>
34002f78:	4a0f      	ldr	r2, [pc, #60]	@ (34002fb8 <LL_ATON_DisableUnits_Init+0x128>)
34002f7a:	601a      	str	r2, [r3, #0]
34002f7c:	681a      	ldr	r2, [r3, #0]
34002f7e:	0052      	lsls	r2, r2, #1
34002f80:	d4fc      	bmi.n	34002f7c <LL_ATON_DisableUnits_Init+0xec>
      LL_ATON_DisableClock(ATON_POOL_CLKB_CLK(unitId));
34002f82:	3016      	adds	r0, #22
34002f84:	e7a8      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
      ATON_DISABLE_CLR_CONFCLR(RECBUF, unitId);
34002f86:	2202      	movs	r2, #2
34002f88:	4b0c      	ldr	r3, [pc, #48]	@ (34002fbc <LL_ATON_DisableUnits_Init+0x12c>)
34002f8a:	601a      	str	r2, [r3, #0]
34002f8c:	681a      	ldr	r2, [r3, #0]
34002f8e:	0792      	lsls	r2, r2, #30
34002f90:	d4fc      	bmi.n	34002f8c <LL_ATON_DisableUnits_Init+0xfc>
34002f92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34002f96:	601a      	str	r2, [r3, #0]
34002f98:	681a      	ldr	r2, [r3, #0]
34002f9a:	0052      	lsls	r2, r2, #1
34002f9c:	d4fc      	bmi.n	34002f98 <LL_ATON_DisableUnits_Init+0x108>
      LL_ATON_DisableClock(ATON_RECBUF_CLKB_CLK(unitId));
34002f9e:	3018      	adds	r0, #24
34002fa0:	e79a      	b.n	34002ed8 <LL_ATON_DisableUnits_Init+0x48>
    switch (unitType)
34002fa2:	f06f 0001 	mvn.w	r0, #1
34002fa6:	e77a      	b.n	34002e9e <LL_ATON_DisableUnits_Init+0xe>
34002fa8:	00881082 	.word	0x00881082
34002fac:	40881080 	.word	0x40881080
34002fb0:	08000002 	.word	0x08000002
34002fb4:	00420002 	.word	0x00420002
34002fb8:	40420000 	.word	0x40420000
34002fbc:	580fd000 	.word	0x580fd000

34002fc0 <LL_Buffer_addr_start>:
    return eb->blob_address;
  }

  static inline unsigned char *LL_Buffer_addr_base(const LL_Buffer_InfoTypeDef *buf)
  {
    if (buf->is_user_allocated)
34002fc0:	7d02      	ldrb	r2, [r0, #20]
    {
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34002fc2:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
34002fc4:	b102      	cbz	r2, 34002fc8 <LL_Buffer_addr_start+0x8>
      return *tmp;
34002fc6:	681b      	ldr	r3, [r3, #0]
    return buf->addr_base.p;
  }

  static inline unsigned char *LL_Buffer_addr_start(const LL_Buffer_InfoTypeDef *buf)
  {
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34002fc8:	6880      	ldr	r0, [r0, #8]
  }
34002fca:	4418      	add	r0, r3
34002fcc:	4770      	bx	lr
	...

34002fd0 <__ll_lib_stop_transfer>:
  LL_Switch_Init_NoReset(switch_init, 1);
  LL_ATON_EnableUnits_Init(dma_units, 2);
}

static inline void __ll_lib_stop_transfer(void)
{
34002fd0:	b508      	push	{r3, lr}
  LL_Switch_Deinit(switch_init, 1);
34002fd2:	2101      	movs	r1, #1
34002fd4:	4804      	ldr	r0, [pc, #16]	@ (34002fe8 <__ll_lib_stop_transfer+0x18>)
34002fd6:	f7ff fdbf 	bl	34002b58 <LL_Switch_Deinit>
  LL_ATON_DisableUnits_Init(dma_units, 2);
}
34002fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DisableUnits_Init(dma_units, 2);
34002fde:	2102      	movs	r1, #2
34002fe0:	4802      	ldr	r0, [pc, #8]	@ (34002fec <__ll_lib_stop_transfer+0x1c>)
34002fe2:	f7ff bf55 	b.w	34002e90 <LL_ATON_DisableUnits_Init>
34002fe6:	bf00      	nop
34002fe8:	34108d84 	.word	0x34108d84
34002fec:	34108d74 	.word	0x34108d74

34002ff0 <__LL_LIB_DMA_Transfer_End_EpochBlock>:
  __ll_lib_start_transfer(params);
}

static void __LL_LIB_DMA_Transfer_End_EpochBlock(const void *epoch_block)
{
  __ll_lib_stop_transfer();
34002ff0:	f7ff bfee 	b.w	34002fd0 <__ll_lib_stop_transfer>

34002ff4 <__LL_ATON_RT_SetWaitMask>:
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
  }

  /* set wait mask(s) in interrupt controller */
  static inline void __LL_ATON_RT_SetWaitMask(uint32_t wait_mask)
  {
34002ff4:	b508      	push	{r3, lr}
#ifndef NDEBUG
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34002ff6:	4b07      	ldr	r3, [pc, #28]	@ (34003014 <__LL_ATON_RT_SetWaitMask+0x20>)
34002ff8:	681b      	ldr	r3, [r3, #0]
34002ffa:	b92b      	cbnz	r3, 34003008 <__LL_ATON_RT_SetWaitMask+0x14>
34002ffc:	2175      	movs	r1, #117	@ 0x75
34002ffe:	4b06      	ldr	r3, [pc, #24]	@ (34003018 <__LL_ATON_RT_SetWaitMask+0x24>)
34003000:	4a06      	ldr	r2, [pc, #24]	@ (3400301c <__LL_ATON_RT_SetWaitMask+0x28>)
34003002:	4807      	ldr	r0, [pc, #28]	@ (34003020 <__LL_ATON_RT_SetWaitMask+0x2c>)
34003004:	f01c f8de 	bl	3401f1c4 <__assert_func>

    extern uint32_t volatile __ll_current_wait_mask;
    __ll_current_wait_mask = wait_mask;
34003008:	4b06      	ldr	r3, [pc, #24]	@ (34003024 <__LL_ATON_RT_SetWaitMask+0x30>)
3400300a:	6018      	str	r0, [r3, #0]

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
    wait_mask <<= ATON_STRENG_INT(0);
#ifndef LL_ATON_RT_USE_IRQ_OR_MASK
    /* configure interrupt controller AND mask for epoch block */
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
3400300c:	43c0      	mvns	r0, r0
3400300e:	4b06      	ldr	r3, [pc, #24]	@ (34003028 <__LL_ATON_RT_SetWaitMask+0x34>)
34003010:	6258      	str	r0, [r3, #36]	@ 0x24
                                                                // (all other events & errors are enabled)
    val &= ~wait_mask;
    ATON_INTCTRL_STD_INTORMSK_SET(val);
#endif // LL_ATON_RT_USE_IRQ_OR_MASK
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  }
34003012:	bd08      	pop	{r3, pc}
34003014:	3410db5c 	.word	0x3410db5c
34003018:	34026792 	.word	0x34026792
3400301c:	3402d2fa 	.word	0x3402d2fa
34003020:	340267bc 	.word	0x340267bc
34003024:	3410db58 	.word	0x3410db58
34003028:	580e1000 	.word	0x580e1000

3400302c <__ll_lib_strswitch_set_dmas>:
{
3400302c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
34003030:	2400      	movs	r4, #0
{
34003032:	460d      	mov	r5, r1
34003034:	4606      	mov	r6, r0
34003036:	4617      	mov	r7, r2
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
34003038:	4621      	mov	r1, r4
3400303a:	4622      	mov	r2, r4
3400303c:	b2c3      	uxtb	r3, r0
3400303e:	9400      	str	r4, [sp, #0]
34003040:	4620      	mov	r0, r4
34003042:	f7ff fc11 	bl	34002868 <__atonn_getSrcPortID>
34003046:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 34003090 <__ll_lib_strswitch_set_dmas+0x64>
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
3400304a:	4622      	mov	r2, r4
  switch_init[0].source0 = __atonn_getSrcPortID(STRSWITCH, 0, STRENG, dma_in, 0);
3400304c:	f8c8 0000 	str.w	r0, [r8]
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
34003050:	b2eb      	uxtb	r3, r5
34003052:	4621      	mov	r1, r4
34003054:	4620      	mov	r0, r4
34003056:	9400      	str	r4, [sp, #0]
34003058:	f7ff fc9a 	bl	34002990 <__atonn_getDstPortID>
  dma_units[1].unit = dma_in_streng;
3400305c:	4b09      	ldr	r3, [pc, #36]	@ (34003084 <__ll_lib_strswitch_set_dmas+0x58>)
  dma_unit_id[1] = dma_in;
3400305e:	4a0a      	ldr	r2, [pc, #40]	@ (34003088 <__ll_lib_strswitch_set_dmas+0x5c>)
  dma_units[1].unit = dma_in_streng;
34003060:	711c      	strb	r4, [r3, #4]
  AccelUnits dma_in_streng = {STRENG, dma_in};
34003062:	80de      	strh	r6, [r3, #6]
  dma_units[0].unit = dma_out_streng;
34003064:	701c      	strb	r4, [r3, #0]
  AccelUnits dma_out_streng = {STRENG, dma_out};
34003066:	805d      	strh	r5, [r3, #2]
  uint32_t wait_mask = (0x1 << dma_out);
34003068:	2301      	movs	r3, #1
  dma_unit_id[1] = dma_in;
3400306a:	6056      	str	r6, [r2, #4]
  dma_unit_id[0] = dma_out;
3400306c:	6015      	str	r5, [r2, #0]
  params->g_wait_mask = wait_mask;
3400306e:	4a07      	ldr	r2, [pc, #28]	@ (3400308c <__ll_lib_strswitch_set_dmas+0x60>)
  uint32_t wait_mask = (0x1 << dma_out);
34003070:	40ab      	lsls	r3, r5
  params->g_wait_mask = wait_mask;
34003072:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  switch_init[0].dest = __atonn_getDstPortID(STRSWITCH, 0, STRENG, dma_out, 0);
34003076:	f8c8 0008 	str.w	r0, [r8, #8]
  epoch_block_array->wait_mask = wait_mask;
3400307a:	60fb      	str	r3, [r7, #12]
}
3400307c:	b002      	add	sp, #8
3400307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34003082:	bf00      	nop
34003084:	34108d74 	.word	0x34108d74
34003088:	34108d7c 	.word	0x34108d7c
3400308c:	3410d3cc 	.word	0x3410d3cc
34003090:	34108d84 	.word	0x34108d84

34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>:
  }

  /*** AtoNN API Functions ***/

  static inline void LL_ATON_RT_Insert_LibEpochBlockArray(const LL_ATON_RT_EpochBlockItem_t *new_epoch_block_array)
  {
34003094:	b508      	push	{r3, lr}
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34003096:	4b0d      	ldr	r3, [pc, #52]	@ (340030cc <LL_ATON_RT_Insert_LibEpochBlockArray+0x38>)
34003098:	681a      	ldr	r2, [r3, #0]
3400309a:	b92a      	cbnz	r2, 340030a8 <LL_ATON_RT_Insert_LibEpochBlockArray+0x14>
3400309c:	21b8      	movs	r1, #184	@ 0xb8
3400309e:	4b0c      	ldr	r3, [pc, #48]	@ (340030d0 <LL_ATON_RT_Insert_LibEpochBlockArray+0x3c>)
340030a0:	4a0c      	ldr	r2, [pc, #48]	@ (340030d4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)

    // only one saved context at a time allowed!
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.next_epoch_block == NULL);
340030a2:	480d      	ldr	r0, [pc, #52]	@ (340030d8 <LL_ATON_RT_Insert_LibEpochBlockArray+0x44>)
340030a4:	f01c f88e 	bl	3401f1c4 <__assert_func>
340030a8:	681a      	ldr	r2, [r3, #0]
340030aa:	68d2      	ldr	r2, [r2, #12]
340030ac:	b11a      	cbz	r2, 340030b6 <LL_ATON_RT_Insert_LibEpochBlockArray+0x22>
340030ae:	21bb      	movs	r1, #187	@ 0xbb
340030b0:	4b0a      	ldr	r3, [pc, #40]	@ (340030dc <LL_ATON_RT_Insert_LibEpochBlockArray+0x48>)
340030b2:	4a08      	ldr	r2, [pc, #32]	@ (340030d4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)
340030b4:	e7f5      	b.n	340030a2 <LL_ATON_RT_Insert_LibEpochBlockArray+0xe>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.saved_current_epoch_block == NULL);
340030b6:	681a      	ldr	r2, [r3, #0]
340030b8:	6912      	ldr	r2, [r2, #16]
340030ba:	b11a      	cbz	r2, 340030c4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x30>
340030bc:	21bc      	movs	r1, #188	@ 0xbc
340030be:	4b08      	ldr	r3, [pc, #32]	@ (340030e0 <LL_ATON_RT_Insert_LibEpochBlockArray+0x4c>)
340030c0:	4a04      	ldr	r2, [pc, #16]	@ (340030d4 <LL_ATON_RT_Insert_LibEpochBlockArray+0x40>)
340030c2:	e7ee      	b.n	340030a2 <LL_ATON_RT_Insert_LibEpochBlockArray+0xe>

    __ll_current_aton_ip_owner->exec_state.next_epoch_block = new_epoch_block_array;
340030c4:	681b      	ldr	r3, [r3, #0]
340030c6:	60d8      	str	r0, [r3, #12]
  }
340030c8:	bd08      	pop	{r3, pc}
340030ca:	bf00      	nop
340030cc:	3410db5c 	.word	0x3410db5c
340030d0:	34026792 	.word	0x34026792
340030d4:	3402d35b 	.word	0x3402d35b
340030d8:	340267bc 	.word	0x340267bc
340030dc:	34026804 	.word	0x34026804
340030e0:	3402684b 	.word	0x3402684b

340030e4 <__ll_lib_prepare_inputs_epoch>:
  LL_ATON_ASSERT(ninputs <= __LL_MAX_TENSORS);
340030e4:	2918      	cmp	r1, #24
{
340030e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340030e8:	460e      	mov	r6, r1
340030ea:	4615      	mov	r5, r2
340030ec:	461c      	mov	r4, r3
  LL_ATON_ASSERT(ninputs <= __LL_MAX_TENSORS);
340030ee:	d905      	bls.n	340030fc <__ll_lib_prepare_inputs_epoch+0x18>
340030f0:	21e6      	movs	r1, #230	@ 0xe6
340030f2:	4b19      	ldr	r3, [pc, #100]	@ (34003158 <__ll_lib_prepare_inputs_epoch+0x74>)
340030f4:	4a19      	ldr	r2, [pc, #100]	@ (3400315c <__ll_lib_prepare_inputs_epoch+0x78>)
340030f6:	481a      	ldr	r0, [pc, #104]	@ (34003160 <__ll_lib_prepare_inputs_epoch+0x7c>)
340030f8:	f01c f864 	bl	3401f1c4 <__assert_func>
  memcpy(inputs_copy, inputs, sizeof(LL_LIB_TensorInfo_TypeDef) * ninputs);
340030fc:	2238      	movs	r2, #56	@ 0x38
340030fe:	4b19      	ldr	r3, [pc, #100]	@ (34003164 <__ll_lib_prepare_inputs_epoch+0x80>)
34003100:	434a      	muls	r2, r1
34003102:	4601      	mov	r1, r0
34003104:	4618      	mov	r0, r3
34003106:	f01d fb2e 	bl	34020766 <memcpy>
  params->g_tensors = inputs_copy;
3400310a:	f1a0 07f8 	sub.w	r7, r0, #248	@ 0xf8
  params->g_num_tensors = ninputs;
3400310e:	e940 6019 	strd	r6, r0, [r0, #-100]	@ 0x64
  params->g_dma_in = *dma_in;
34003112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34003114:	463e      	mov	r6, r7
34003116:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34003118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400311a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400311c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400311e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34003120:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
34003124:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  params->g_dma_out = *dma_out;
34003128:	f107 0540 	add.w	r5, r7, #64	@ 0x40
3400312c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400312e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34003130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34003132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34003134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34003136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34003138:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
3400313c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  params->g_dst_o_src = out_start;
34003140:	9b06      	ldr	r3, [sp, #24]
  params->g_size = nbytes_or_line_size;
34003142:	9a07      	ldr	r2, [sp, #28]
  params->g_dst_o_src = out_start;
34003144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  params->g_not_continuous = 0; // signals that destination is not written linearly
34003148:	2300      	movs	r3, #0
  params->g_idx = 0;
3400314a:	e9c7 3220 	strd	r3, r2, [r7, #128]	@ 0x80
  params->g_not_continuous = 0; // signals that destination is not written linearly
3400314e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  params->g_offset_limit = 0;
34003152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
}
34003156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34003158:	3402689b 	.word	0x3402689b
3400315c:	3402d380 	.word	0x3402d380
34003160:	340268a9 	.word	0x340268a9
34003164:	3410d4c4 	.word	0x3410d4c4

34003168 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0>:
 * @param  inputs list of input tensor info structures
 * @param  ninputs number of inputs
 * @param  dst destination address
 * @param  nbytes number of bytes to copy (-1 means: derive from `inputs` structure)
 */
static void __LL_ATON_LIB_DMA_Inputs_Memcpy(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
34003168:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    /* prepare epoch */
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);

    /* configure stream switch */
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_memcpy_epoch_block_array);
3400316a:	4c0a      	ldr	r4, [pc, #40]	@ (34003194 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x2c>)
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);
3400316c:	e9cd 2300 	strd	r2, r3, [sp]
static void __LL_ATON_LIB_DMA_Inputs_Memcpy(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
34003170:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out, dst, nbytes);
34003174:	4b08      	ldr	r3, [pc, #32]	@ (34003198 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x30>)
34003176:	4a09      	ldr	r2, [pc, #36]	@ (3400319c <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0+0x34>)
34003178:	f7ff ffb4 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_memcpy_epoch_block_array);
3400317c:	4628      	mov	r0, r5
3400317e:	4622      	mov	r2, r4
34003180:	4631      	mov	r1, r6
34003182:	f7ff ff53 	bl	3400302c <__ll_lib_strswitch_set_dmas>

    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_memcpy_epoch_block_array);
34003186:	4620      	mov	r0, r4
  }
  else
  {
    /* proceed to next epoch block */
  }
}
34003188:	b002      	add	sp, #8
3400318a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_memcpy_epoch_block_array);
3400318e:	f7ff bf81 	b.w	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
34003192:	bf00      	nop
34003194:	34108d24 	.word	0x34108d24
34003198:	3402d3a0 	.word	0x3402d3a0
3400319c:	3402d3e0 	.word	0x3402d3e0

340031a0 <__ll_lib_start_transfer.constprop.0>:
static inline void __ll_lib_start_transfer(__ll_lib_params_t *params)
340031a0:	b538      	push	{r3, r4, r5, lr}
  LL_Streng_TensorInit(dma_unit_id[1], &params->g_dma_in, 1);
340031a2:	4d0b      	ldr	r5, [pc, #44]	@ (340031d0 <__ll_lib_start_transfer.constprop.0+0x30>)
340031a4:	4c0b      	ldr	r4, [pc, #44]	@ (340031d4 <__ll_lib_start_transfer.constprop.0+0x34>)
340031a6:	4629      	mov	r1, r5
340031a8:	2201      	movs	r2, #1
340031aa:	6860      	ldr	r0, [r4, #4]
340031ac:	f7ff fcfa 	bl	34002ba4 <LL_Streng_TensorInit>
  LL_Streng_TensorInit(dma_unit_id[0], &params->g_dma_out, 1);
340031b0:	f105 0140 	add.w	r1, r5, #64	@ 0x40
340031b4:	2201      	movs	r2, #1
340031b6:	6820      	ldr	r0, [r4, #0]
340031b8:	f7ff fcf4 	bl	34002ba4 <LL_Streng_TensorInit>
  LL_Switch_Init_NoReset(switch_init, 1);
340031bc:	2101      	movs	r1, #1
340031be:	4806      	ldr	r0, [pc, #24]	@ (340031d8 <__ll_lib_start_transfer.constprop.0+0x38>)
340031c0:	f7ff fc90 	bl	34002ae4 <LL_Switch_Init_NoReset>
}
340031c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LL_ATON_EnableUnits_Init(dma_units, 2);
340031c8:	2102      	movs	r1, #2
340031ca:	4804      	ldr	r0, [pc, #16]	@ (340031dc <__ll_lib_start_transfer.constprop.0+0x3c>)
340031cc:	f7ff bb04 	b.w	340027d8 <LL_ATON_EnableUnits_Init>
340031d0:	3410d3cc 	.word	0x3410d3cc
340031d4:	34108d7c 	.word	0x34108d7c
340031d8:	34108d84 	.word	0x34108d84
340031dc:	34108d74 	.word	0x34108d74

340031e0 <__LL_LIB_DMA_Transfer_Start_EpochBlock>:
  __ll_lib_start_transfer(params);
340031e0:	f7ff bfde 	b.w	340031a0 <__ll_lib_start_transfer.constprop.0>

340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>:
  }

  static inline void LL_ATON_RT_DecCurrEpochBlock(uint32_t dec)
  {
    extern NN_Instance_TypeDef *volatile __ll_current_aton_ip_owner;
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340031e4:	4a12      	ldr	r2, [pc, #72]	@ (34003230 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x4c>)
  static inline void LL_ATON_RT_DecCurrEpochBlock(uint32_t dec)
340031e6:	b510      	push	{r4, lr}
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340031e8:	6813      	ldr	r3, [r2, #0]
340031ea:	b92b      	cbnz	r3, 340031f8 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x14>
340031ec:	21d2      	movs	r1, #210	@ 0xd2
340031ee:	4b11      	ldr	r3, [pc, #68]	@ (34003234 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x50>)
340031f0:	4a11      	ldr	r2, [pc, #68]	@ (34003238 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x54>)
    LL_ATON_ASSERT(_first_epoch_block <= _current_epoch_block); // should never happen
340031f2:	4812      	ldr	r0, [pc, #72]	@ (3400323c <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x58>)
340031f4:	f01b ffe6 	bl	3401f1c4 <__assert_func>

    uint32_t current_index = __LL_ATON_RT_GetCurrEpochBlockIndex(__ll_current_aton_ip_owner);
340031f8:	6811      	ldr	r1, [r2, #0]
    const LL_ATON_RT_EpochBlockItem_t *_current_epoch_block = nn_instance->exec_state.current_epoch_block;
340031fa:	684b      	ldr	r3, [r1, #4]
    const LL_ATON_RT_EpochBlockItem_t *_first_epoch_block = nn_instance->exec_state.first_epoch_block;
340031fc:	6889      	ldr	r1, [r1, #8]
    LL_ATON_ASSERT(_first_epoch_block <= _current_epoch_block); // should never happen
340031fe:	428b      	cmp	r3, r1
34003200:	d203      	bcs.n	3400320a <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x26>
34003202:	2160      	movs	r1, #96	@ 0x60
34003204:	4b0e      	ldr	r3, [pc, #56]	@ (34003240 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x5c>)
34003206:	4a0f      	ldr	r2, [pc, #60]	@ (34003244 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x60>)
34003208:	e7f3      	b.n	340031f2 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0xe>
    return (_current_epoch_block - _first_epoch_block);
3400320a:	1a5b      	subs	r3, r3, r1
3400320c:	4c0e      	ldr	r4, [pc, #56]	@ (34003248 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x64>)
    LL_ATON_ASSERT((current_index + 1) >= dec); // should never happen
    int32_t new_index = current_index - dec;
    __LL_ATON_RT_SetCurrentEpochBlock(new_index, __ll_current_aton_ip_owner);
3400320e:	6811      	ldr	r1, [r2, #0]
    return (_current_epoch_block - _first_epoch_block);
34003210:	109a      	asrs	r2, r3, #2
34003212:	4362      	muls	r2, r4
    LL_ATON_ASSERT(index < (int32_t)(nn_instance->exec_state.nr_of_epoch_blocks - 1));
34003214:	6a48      	ldr	r0, [r1, #36]	@ 0x24
    int32_t new_index = current_index - dec;
34003216:	3a01      	subs	r2, #1
    LL_ATON_ASSERT(index < (int32_t)(nn_instance->exec_state.nr_of_epoch_blocks - 1));
34003218:	3801      	subs	r0, #1
3400321a:	4282      	cmp	r2, r0
3400321c:	db03      	blt.n	34003226 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x42>
3400321e:	216a      	movs	r1, #106	@ 0x6a
34003220:	4b0a      	ldr	r3, [pc, #40]	@ (3400324c <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x68>)
34003222:	4a0b      	ldr	r2, [pc, #44]	@ (34003250 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0x6c>)
34003224:	e7e5      	b.n	340031f2 <LL_ATON_RT_DecCurrEpochBlock.constprop.0+0xe>
    nn_instance->exec_state.current_epoch_block = &nn_instance->exec_state.first_epoch_block[index];
34003226:	688a      	ldr	r2, [r1, #8]
34003228:	3b14      	subs	r3, #20
3400322a:	4413      	add	r3, r2
3400322c:	604b      	str	r3, [r1, #4]
  }
3400322e:	bd10      	pop	{r4, pc}
34003230:	3410db5c 	.word	0x3410db5c
34003234:	34026792 	.word	0x34026792
34003238:	3402d2dd 	.word	0x3402d2dd
3400323c:	340267bc 	.word	0x340267bc
34003240:	340268ed 	.word	0x340268ed
34003244:	3402d2b9 	.word	0x3402d2b9
34003248:	cccccccd 	.word	0xcccccccd
3400324c:	34026918 	.word	0x34026918
34003250:	3402d297 	.word	0x3402d297

34003254 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock>:
{
34003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  previous_value = eb->wait_mask;
34003256:	68c4      	ldr	r4, [r0, #12]
{
34003258:	4603      	mov	r3, r0
  eb->wait_mask = wait_mask;
3400325a:	2000      	movs	r0, #0
3400325c:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
3400325e:	f7ff fec9 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
34003262:	b10c      	cbz	r4, 34003268 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
34003264:	f7ff feb4 	bl	34002fd0 <__ll_lib_stop_transfer>
  LL_LIB_TensorInfo_TypeDef *in = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx;
34003268:	2238      	movs	r2, #56	@ 0x38
3400326a:	4b21      	ldr	r3, [pc, #132]	@ (340032f0 <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x9c>)
3400326c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
34003270:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
34003274:	4342      	muls	r2, r0
34003276:	188e      	adds	r6, r1, r2
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003278:	f896 4027 	ldrb.w	r4, [r6, #39]	@ 0x27
  if (params->g_idx < params->g_num_tensors)
3400327c:	f8d3 7094 	ldr.w	r7, [r3, #148]	@ 0x94
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003280:	6af6      	ldr	r6, [r6, #44]	@ 0x2c
  params->g_idx++;
34003282:	3001      	adds	r0, #1
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003284:	3c01      	subs	r4, #1
  if (params->g_idx < params->g_num_tensors)
34003286:	42b8      	cmp	r0, r7
  int in_nchannels_old = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003288:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
3400328c:	ea4f 0584 	mov.w	r5, r4, lsl #2
  params->g_idx++;
34003290:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  if (params->g_idx < params->g_num_tensors)
34003294:	d22a      	bcs.n	340032ec <__LL_LIB_Inputs_Batched_Memcpy_End_EpochBlock+0x98>
    in = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx;
34003296:	3238      	adds	r2, #56	@ 0x38
34003298:	4411      	add	r1, r2
    int in_batch = in->batch;
3400329a:	6988      	ldr	r0, [r1, #24]
    int in_fheight = in->shape[(in_ndims - 4) + TDIM_FHEIGHT];
3400329c:	f8d1 c02c 	ldr.w	ip, [r1, #44]	@ 0x2c
    int in_batch = in->batch;
340032a0:	4607      	mov	r7, r0
    int nbits = in->nbits;
340032a2:	f891 2028 	ldrb.w	r2, [r1, #40]	@ 0x28
    int in_fheight = in->shape[(in_ndims - 4) + TDIM_FHEIGHT];
340032a6:	4465      	add	r5, ip
    int in_fwidth = in->shape[(in_ndims - 4) + TDIM_FWIDTH];
340032a8:	e955 1e02 	ldrd	r1, lr, [r5, #-8]
    int nbytes = (nbits + 7) >> 3;
340032ac:	3207      	adds	r2, #7
    params->g_dst_o_src += in_nchannels_old * nbytes;
340032ae:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
    int nbytes = (nbits + 7) >> 3;
340032b2:	10d2      	asrs	r2, r2, #3
    params->g_dst_o_src += in_nchannels_old * nbytes;
340032b4:	fb02 5506 	mla	r5, r2, r6, r5
    int in_nchannels = in->shape[(in_ndims - 4) + TDIM_NCHANNELS];
340032b8:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
340032bc:	2a04      	cmp	r2, #4
    params->g_dst_o_src += in_nchannels_old * nbytes;
340032be:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
340032c2:	ea4f 0540 	mov.w	r5, r0, lsl #1
340032c6:	bf08      	it	eq
340032c8:	4628      	moveq	r0, r5
    params->g_dma_out.frame_loop_cnt = in_nchannels / in_batch;                 // this must be updated on all inputs
340032ca:	fb94 f4f7 	sdiv	r4, r4, r7
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
340032ce:	fb0e f101 	mul.w	r1, lr, r1
340032d2:	4379      	muls	r1, r7
    params->g_dma_out.batch_depth = (nbytes == 4) ? (2 * in_batch) : in_batch;  // this must be updated on all inputs
340032d4:	6618      	str	r0, [r3, #96]	@ 0x60
    params->g_dma_out.frame_offset = in_batch * nbytes;                         // this must be updated on all inputs
340032d6:	fb07 f002 	mul.w	r0, r7, r2
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
340032da:	434a      	muls	r2, r1
    params->g_dma_out.frame_tot_cnt = in_nchannels / in_batch;                  // this must be updated on all inputs
340032dc:	e9c3 441d 	strd	r4, r4, [r3, #116]	@ 0x74
    params->g_dma_out.frame_offset = in_batch * nbytes;                         // this must be updated on all inputs
340032e0:	6698      	str	r0, [r3, #104]	@ 0x68
    params->g_dma_out.loop_offset = in_fheight * in_fwidth * in_batch * nbytes; // this must be updated on all inputs
340032e2:	671a      	str	r2, [r3, #112]	@ 0x70
}
340032e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LL_ATON_RT_DecCurrEpochBlock(1);
340032e8:	f7ff bf7c 	b.w	340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
}
340032ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
340032ee:	bf00      	nop
340032f0:	3410d3cc 	.word	0x3410d3cc

340032f4 <__LL_LIB_Inputs_Memcpy_End_EpochBlock>:
{
340032f4:	b510      	push	{r4, lr}
340032f6:	4603      	mov	r3, r0
  previous_value = eb->wait_mask;
340032f8:	68c4      	ldr	r4, [r0, #12]
  eb->wait_mask = wait_mask;
340032fa:	2000      	movs	r0, #0
340032fc:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340032fe:	f7ff fe79 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
34003302:	b10c      	cbz	r4, 34003308 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
34003304:	f7ff fe64 	bl	34002fd0 <__ll_lib_stop_transfer>
  if (params->g_size < 0)
34003308:	4b0e      	ldr	r3, [pc, #56]	@ (34003344 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x50>)
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
3400330a:	e9d3 2020 	ldrd	r2, r0, [r3, #128]	@ 0x80
  if (params->g_size < 0)
3400330e:	2800      	cmp	r0, #0
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003310:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
  if (params->g_size < 0)
34003314:	da07      	bge.n	34003326 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x32>
    params->g_dst_o_src += LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003316:	2438      	movs	r4, #56	@ 0x38
34003318:	f8d3 0098 	ldr.w	r0, [r3, #152]	@ 0x98
3400331c:	fb04 0002 	mla	r0, r4, r2, r0
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
34003320:	e9d0 0402 	ldrd	r0, r4, [r0, #8]
34003324:	1a20      	subs	r0, r4, r0
  params->g_idx++;
34003326:	3201      	adds	r2, #1
    params->g_dst_o_src += (params->g_size);
34003328:	4401      	add	r1, r0
3400332a:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  params->g_idx++;
3400332e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  if (params->g_idx < params->g_num_tensors)
34003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34003336:	429a      	cmp	r2, r3
34003338:	d203      	bcs.n	34003342 <__LL_LIB_Inputs_Memcpy_End_EpochBlock+0x4e>
}
3400333a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LL_ATON_RT_DecCurrEpochBlock(1);
3400333e:	f7ff bf51 	b.w	340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
}
34003342:	bd10      	pop	{r4, pc}
34003344:	3410d3cc 	.word	0x3410d3cc

34003348 <__LL_LIB_Concat_Case3_End_EpochBlock>:
{
34003348:	b510      	push	{r4, lr}
3400334a:	4603      	mov	r3, r0
  previous_value = eb->wait_mask;
3400334c:	68c4      	ldr	r4, [r0, #12]
  eb->wait_mask = wait_mask;
3400334e:	2000      	movs	r0, #0
34003350:	60d8      	str	r0, [r3, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
34003352:	f7ff fe4f 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
  if (__ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, 0))
34003356:	b10c      	cbz	r4, 3400335c <__LL_LIB_Concat_Case3_End_EpochBlock+0x14>
    __ll_lib_stop_transfer();
34003358:	f7ff fe3a 	bl	34002fd0 <__ll_lib_stop_transfer>
  params->g_idx++;
3400335c:	4923      	ldr	r1, [pc, #140]	@ (340033ec <__LL_LIB_Concat_Case3_End_EpochBlock+0xa4>)
3400335e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
  if (params->g_idx < params->special.concat_case3.in_fheight)
34003362:	f8d1 20a4 	ldr.w	r2, [r1, #164]	@ 0xa4
  params->g_idx++;
34003366:	3301      	adds	r3, #1
  if (params->g_idx < params->special.concat_case3.in_fheight)
34003368:	4293      	cmp	r3, r2
  params->g_idx++;
3400336a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
  if (params->g_idx < params->special.concat_case3.in_fheight)
3400336e:	d211      	bcs.n	34003394 <__LL_LIB_Concat_Case3_End_EpochBlock+0x4c>
    params->g_dst_o_src += params->special.concat_case3.out_line_size;
34003370:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
34003374:	f8d1 20ac 	ldr.w	r2, [r1, #172]	@ 0xac
34003378:	4413      	add	r3, r2
3400337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    params->special.concat_case3.in_curr += params->g_size;
3400337e:	f8d1 2084 	ldr.w	r2, [r1, #132]	@ 0x84
34003382:	f8d1 30b0 	ldr.w	r3, [r1, #176]	@ 0xb0
34003386:	4413      	add	r3, r2
34003388:	f8c1 30b0 	str.w	r3, [r1, #176]	@ 0xb0
}
3400338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      LL_ATON_RT_DecCurrEpochBlock(1);
34003390:	f7ff bf28 	b.w	340031e4 <LL_ATON_RT_DecCurrEpochBlock.constprop.0>
    params->special.concat_case3.outer_idx++;
34003394:	f8d1 30a0 	ldr.w	r3, [r1, #160]	@ 0xa0
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
34003398:	f8d1 2094 	ldr.w	r2, [r1, #148]	@ 0x94
    params->special.concat_case3.outer_idx++;
3400339c:	3301      	adds	r3, #1
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
3400339e:	4293      	cmp	r3, r2
    params->special.concat_case3.outer_idx++;
340033a0:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
    if (params->special.concat_case3.outer_idx < params->g_num_tensors)
340033a4:	d221      	bcs.n	340033ea <__LL_LIB_Concat_Case3_End_EpochBlock+0xa2>
      int in_ndims = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->special.concat_case3.outer_idx].ndims;
340033a6:	2238      	movs	r2, #56	@ 0x38
340033a8:	f8d1 0098 	ldr.w	r0, [r1, #152]	@ 0x98
340033ac:	fb02 0003 	mla	r0, r2, r3, r0
                                  .shape[(in_ndims - 4) + TDIM_NCHANNELS];
340033b0:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
340033b4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
340033b6:	3a01      	subs	r2, #1
                         .shape[(in_ndims - 4) + TDIM_FWIDTH];
340033b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
          pix_size * ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->special.concat_case3.outer_idx]
340033bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
340033c0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
340033c4:	4353      	muls	r3, r2
340033c6:	f8d1 20a8 	ldr.w	r2, [r1, #168]	@ 0xa8
340033ca:	4353      	muls	r3, r2
      params->g_dst_o_src += params->g_size;
340033cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      params->g_size =
340033d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      params->g_dst_o_src += params->g_size;
340033d4:	441a      	add	r2, r3
340033d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      params->special.concat_case3.in_curr = LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) +
340033da:	f7ff fdf1 	bl	34002fc0 <LL_Buffer_addr_start>
      params->g_idx = 0;
340033de:	2300      	movs	r3, #0
      params->special.concat_case3.in_curr = LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) +
340033e0:	f8c1 00b0 	str.w	r0, [r1, #176]	@ 0xb0
      params->g_idx = 0;
340033e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
340033e8:	e7d0      	b.n	3400338c <__LL_LIB_Concat_Case3_End_EpochBlock+0x44>
}
340033ea:	bd10      	pop	{r4, pc}
340033ec:	3410d3cc 	.word	0x3410d3cc

340033f0 <__ll_lib_memcpy_prolog>:
  if (n < __LL_DMA_MIN_BUFF_LEN)
340033f0:	2a27      	cmp	r2, #39	@ 0x27
{
340033f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340033f4:	4613      	mov	r3, r2
  int prolog_len = (n % 3);
340033f6:	bf81      	itttt	hi
340033f8:	2303      	movhi	r3, #3
340033fa:	fbb2 f3f3 	udivhi	r3, r2, r3
340033fe:	eb03 0343 	addhi.w	r3, r3, r3, lsl #1
34003402:	1ad3      	subhi	r3, r2, r3
34003404:	2b00      	cmp	r3, #0
34003406:	f103 0401 	add.w	r4, r3, #1
3400340a:	bfb8      	it	lt
3400340c:	2401      	movlt	r4, #1
{
3400340e:	4605      	mov	r5, r0
  uint8_t *_dst_orig = *dst;
34003410:	6800      	ldr	r0, [r0, #0]
  for (i = 0; i < prolog_len; i++)
34003412:	3c01      	subs	r4, #1
34003414:	d106      	bne.n	34003424 <__ll_lib_memcpy_prolog+0x34>
  n -= prolog_len;
34003416:	1ad4      	subs	r4, r2, r3
  if (prolog_len > 0)
34003418:	b113      	cbz	r3, 34003420 <__ll_lib_memcpy_prolog+0x30>
  void LL_ATON_Cache_MCU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_clean_invalidate_range(virtual_addr, virtual_addr + size);
3400341a:	18c1      	adds	r1, r0, r3
3400341c:	f7fe fe56 	bl	340020cc <mcu_cache_clean_invalidate_range>
}
34003420:	4620      	mov	r0, r4
34003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    **_dst = **_src;
34003424:	680f      	ldr	r7, [r1, #0]
34003426:	682e      	ldr	r6, [r5, #0]
34003428:	783f      	ldrb	r7, [r7, #0]
3400342a:	7037      	strb	r7, [r6, #0]
    (*_dst)++;
3400342c:	682e      	ldr	r6, [r5, #0]
3400342e:	3601      	adds	r6, #1
34003430:	602e      	str	r6, [r5, #0]
    (*_src)++;
34003432:	680e      	ldr	r6, [r1, #0]
34003434:	3601      	adds	r6, #1
34003436:	600e      	str	r6, [r1, #0]
  for (i = 0; i < prolog_len; i++)
34003438:	e7eb      	b.n	34003412 <__ll_lib_memcpy_prolog+0x22>
	...

3400343c <__ll_lib_inputs_memcpy_start>:
{
3400343c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
3400343e:	4c1e      	ldr	r4, [pc, #120]	@ (340034b8 <__ll_lib_inputs_memcpy_start+0x7c>)
{
34003440:	4605      	mov	r5, r0
  if (params->g_size < 0)
34003442:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
34003446:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
  if (params->g_size < 0)
3400344a:	2800      	cmp	r0, #0
{
3400344c:	9101      	str	r1, [sp, #4]
  uint8_t *_dst = (uint8_t *)params->g_dst_o_src;
3400344e:	9303      	str	r3, [sp, #12]
  if (params->g_size < 0)
34003450:	da09      	bge.n	34003466 <__ll_lib_inputs_memcpy_start+0x2a>
    n = LL_Buffer_len(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003452:	2138      	movs	r1, #56	@ 0x38
34003454:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
34003458:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3400345c:	fb01 3302 	mla	r3, r1, r2, r3
34003460:	e9d3 0202 	ldrd	r0, r2, [r3, #8]
34003464:	1a10      	subs	r0, r2, r0
  if (params->g_not_continuous == 0)
34003466:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
3400346a:	b923      	cbnz	r3, 34003476 <__ll_lib_inputs_memcpy_start+0x3a>
    n = __ll_lib_memcpy_prolog((void **)&_dst, (void **)&_src, n);
3400346c:	4602      	mov	r2, r0
3400346e:	a901      	add	r1, sp, #4
34003470:	a803      	add	r0, sp, #12
34003472:	f7ff ffbd 	bl	340033f0 <__ll_lib_memcpy_prolog>
  if (n > 0)
34003476:	b1d0      	cbz	r0, 340034ae <__ll_lib_inputs_memcpy_start+0x72>
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
34003478:	2638      	movs	r6, #56	@ 0x38
    params->g_dma_in.offset_start = 0;
3400347a:	2200      	movs	r2, #0
    params->g_dma_in.addr_base.p = _src;
3400347c:	9b01      	ldr	r3, [sp, #4]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
3400347e:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
    params->g_dma_in.addr_base.p = _src;
34003482:	6063      	str	r3, [r4, #4]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
34003484:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
    params->g_dma_in.offset_end = n; // not used for batched output version g_not_continuous == 1
34003488:	e9c4 2002 	strd	r2, r0, [r4, #8]
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
3400348c:	fb06 3301 	mla	r3, r6, r1, r3
34003490:	691b      	ldr	r3, [r3, #16]
    params->g_dma_out.offset_end = n; // not used for batched input version g_not_continuous == 1
34003492:	64e0      	str	r0, [r4, #76]	@ 0x4c
    params->g_dma_in.offset_limit = ((LL_LIB_TensorInfo_TypeDef *)params->g_tensors)[params->g_idx].offset_limit;
34003494:	6123      	str	r3, [r4, #16]
    __ll_lib_set_wait_mask((LL_ATON_RT_EpochBlockItem_t *)epoch_block, params->g_wait_mask);
34003496:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
    params->g_dma_out.addr_base.p = _dst;
3400349a:	9b03      	ldr	r3, [sp, #12]
    params->g_dma_out.offset_start = 0;
3400349c:	e9c4 3211 	strd	r3, r2, [r4, #68]	@ 0x44
  eb->wait_mask = wait_mask;
340034a0:	60e8      	str	r0, [r5, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340034a2:	f7ff fda7 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
    __ll_lib_start_transfer(params);
340034a6:	f7ff fe7b 	bl	340031a0 <__ll_lib_start_transfer.constprop.0>
}
340034aa:	b004      	add	sp, #16
340034ac:	bd70      	pop	{r4, r5, r6, pc}
  eb->wait_mask = wait_mask;
340034ae:	60e8      	str	r0, [r5, #12]
  __LL_ATON_RT_SetWaitMask(eb->wait_mask);
340034b0:	f7ff fda0 	bl	34002ff4 <__LL_ATON_RT_SetWaitMask>
}
340034b4:	e7f9      	b.n	340034aa <__ll_lib_inputs_memcpy_start+0x6e>
340034b6:	bf00      	nop
340034b8:	3410d3cc 	.word	0x3410d3cc

340034bc <__LL_LIB_Concat_Case3_Start_EpochBlock>:
{
340034bc:	b508      	push	{r3, lr}
  LL_ATON_ASSERT((params->special.concat_case3.outer_idx < params->g_num_tensors) &&
340034be:	4b0d      	ldr	r3, [pc, #52]	@ (340034f4 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x38>)
340034c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
340034c4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
340034c8:	4291      	cmp	r1, r2
340034ca:	d205      	bcs.n	340034d8 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x1c>
340034cc:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
340034d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
340034d4:	4291      	cmp	r1, r2
340034d6:	d306      	bcc.n	340034e6 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x2a>
340034d8:	f240 1193 	movw	r1, #403	@ 0x193
340034dc:	4b06      	ldr	r3, [pc, #24]	@ (340034f8 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x3c>)
340034de:	4a07      	ldr	r2, [pc, #28]	@ (340034fc <__LL_LIB_Concat_Case3_Start_EpochBlock+0x40>)
340034e0:	4807      	ldr	r0, [pc, #28]	@ (34003500 <__LL_LIB_Concat_Case3_Start_EpochBlock+0x44>)
340034e2:	f01b fe6f 	bl	3401f1c4 <__assert_func>
  __ll_lib_inputs_memcpy_start(epoch_block, (uint8_t *)params->special.concat_case3.in_curr);
340034e6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
}
340034ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, (uint8_t *)params->special.concat_case3.in_curr);
340034ee:	f7ff bfa5 	b.w	3400343c <__ll_lib_inputs_memcpy_start>
340034f2:	bf00      	nop
340034f4:	3410d3cc 	.word	0x3410d3cc
340034f8:	3402695a 	.word	0x3402695a
340034fc:	3402d270 	.word	0x3402d270
34003500:	340268a9 	.word	0x340268a9

34003504 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock>:
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003504:	4b0e      	ldr	r3, [pc, #56]	@ (34003540 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x3c>)
{
34003506:	b510      	push	{r4, lr}
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003508:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
3400350c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
{
34003510:	4604      	mov	r4, r0
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003512:	428a      	cmp	r2, r1
34003514:	d306      	bcc.n	34003524 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x20>
34003516:	f240 11cb 	movw	r1, #459	@ 0x1cb
3400351a:	4b0a      	ldr	r3, [pc, #40]	@ (34003544 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x40>)
3400351c:	4a0a      	ldr	r2, [pc, #40]	@ (34003548 <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x44>)
3400351e:	480b      	ldr	r0, [pc, #44]	@ (3400354c <__LL_LIB_Inputs_Memcpy_Start_EpochBlock+0x48>)
34003520:	f01b fe50 	bl	3401f1c4 <__assert_func>
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003524:	2038      	movs	r0, #56	@ 0x38
34003526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400352a:	fb00 3002 	mla	r0, r0, r2, r3
3400352e:	f7ff fd47 	bl	34002fc0 <LL_Buffer_addr_start>
34003532:	4601      	mov	r1, r0
  __ll_lib_inputs_memcpy_start(epoch_block, src);
34003534:	4620      	mov	r0, r4
}
34003536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, src);
3400353a:	f7ff bf7f 	b.w	3400343c <__ll_lib_inputs_memcpy_start>
3400353e:	bf00      	nop
34003540:	3410d3cc 	.word	0x3410d3cc
34003544:	340269d8 	.word	0x340269d8
34003548:	3402d248 	.word	0x3402d248
3400354c:	340268a9 	.word	0x340268a9

34003550 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock>:
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003550:	4b0f      	ldr	r3, [pc, #60]	@ (34003590 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x40>)
{
34003552:	b510      	push	{r4, lr}
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
34003554:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34003558:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
{
3400355c:	4604      	mov	r4, r0
  LL_ATON_ASSERT(params->g_idx < params->g_num_tensors); // must be checked before
3400355e:	428a      	cmp	r2, r1
34003560:	d306      	bcc.n	34003570 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x20>
34003562:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
34003566:	4b0b      	ldr	r3, [pc, #44]	@ (34003594 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x44>)
34003568:	4a0b      	ldr	r2, [pc, #44]	@ (34003598 <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x48>)
3400356a:	480c      	ldr	r0, [pc, #48]	@ (3400359c <__LL_LIB_Inputs_Batched_Memcpy_Start_EpochBlock+0x4c>)
3400356c:	f01b fe2a 	bl	3401f1c4 <__assert_func>
  params->g_not_continuous =
34003570:	2101      	movs	r1, #1
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003572:	2038      	movs	r0, #56	@ 0x38
  params->g_not_continuous =
34003574:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  uint8_t *src = (uint8_t *)LL_Buffer_addr_start(((LL_LIB_TensorInfo_TypeDef *)params->g_tensors) + params->g_idx);
34003578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
3400357c:	fb00 3002 	mla	r0, r0, r2, r3
34003580:	f7ff fd1e 	bl	34002fc0 <LL_Buffer_addr_start>
34003584:	4601      	mov	r1, r0
  __ll_lib_inputs_memcpy_start(epoch_block, src);
34003586:	4620      	mov	r0, r4
}
34003588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __ll_lib_inputs_memcpy_start(epoch_block, src);
3400358c:	f7ff bf56 	b.w	3400343c <__ll_lib_inputs_memcpy_start>
34003590:	3410d3cc 	.word	0x3410d3cc
34003594:	340269d8 	.word	0x340269d8
34003598:	3402d218 	.word	0x3402d218
3400359c:	340268a9 	.word	0x340268a9

340035a0 <__ll_lib_error>:
{
340035a0:	b410      	push	{r4}
340035a2:	460c      	mov	r4, r1
340035a4:	3801      	subs	r0, #1
340035a6:	280f      	cmp	r0, #15
340035a8:	bf98      	it	ls
340035aa:	4b06      	ldrls	r3, [pc, #24]	@ (340035c4 <__ll_lib_error+0x24>)
340035ac:	4611      	mov	r1, r2
340035ae:	bf98      	it	ls
340035b0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
340035b4:	4622      	mov	r2, r4
  switch (err_code)
340035b6:	bf88      	it	hi
340035b8:	4b03      	ldrhi	r3, [pc, #12]	@ (340035c8 <__ll_lib_error+0x28>)
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
340035ba:	4804      	ldr	r0, [pc, #16]	@ (340035cc <__ll_lib_error+0x2c>)
}
340035bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  LL_ATON_PRINTF("%s line %d LL_LIB Error: %s\n", func, line, errs);
340035c0:	f01c bcac 	b.w	3401ff1c <iprintf>
340035c4:	3402d1d8 	.word	0x3402d1d8
340035c8:	340269fe 	.word	0x340269fe
340035cc:	34026a06 	.word	0x34026a06

340035d0 <LL_ATON_LIB_DMA_RowToImage>:
 *
 */
int LL_ATON_LIB_DMA_RowToImage(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
                               const LL_LIB_TensorInfo_TypeDef *output, unsigned blocksize_h, unsigned blocksize_w,
                               unsigned stride_h, unsigned stride_w, int dma_in, int dma_out)
{
340035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340035d4:	4690      	mov	r8, r2
340035d6:	4604      	mov	r4, r0
340035d8:	469a      	mov	sl, r3
  int in_batches = inputs[0].shape[TDIM_NKERNELS];
340035da:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
340035dc:	b0a7      	sub	sp, #156	@ 0x9c
  int in_fwidth = inputs[0].shape[TDIM_FWIDTH];
  int in_fheight = inputs[0].shape[TDIM_FHEIGHT];
340035de:	e9d3 2701 	ldrd	r2, r7, [r3, #4]
340035e2:	9202      	str	r2, [sp, #8]
  int in_nchannels = inputs[0].shape[TDIM_NCHANNELS];
  int out_batches = output->shape[TDIM_NKERNELS];
340035e4:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
  int in_batches = inputs[0].shape[TDIM_NKERNELS];
340035e8:	681e      	ldr	r6, [r3, #0]
  int in_nchannels = inputs[0].shape[TDIM_NCHANNELS];
340035ea:	68d8      	ldr	r0, [r3, #12]
  int out_batches = output->shape[TDIM_NKERNELS];
340035ec:	6813      	ldr	r3, [r2, #0]
  int out_fwidth = output->shape[TDIM_FWIDTH];
  int out_fheight = output->shape[TDIM_FHEIGHT];
  int out_nchannels = output->shape[TDIM_NCHANNELS];
340035ee:	f8d2 900c 	ldr.w	r9, [r2, #12]
  int out_batches = output->shape[TDIM_NKERNELS];
340035f2:	9304      	str	r3, [sp, #16]
  int out_fwidth = output->shape[TDIM_FWIDTH];
340035f4:	6893      	ldr	r3, [r2, #8]
  int nbits = inputs[0].nbits;
340035f6:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
  int out_fwidth = output->shape[TDIM_FWIDTH];
340035fa:	9303      	str	r3, [sp, #12]
  int out_fheight = output->shape[TDIM_FHEIGHT];
340035fc:	6853      	ldr	r3, [r2, #4]
  unsigned nbits_unsigned = inputs[0].Qunsigned;
340035fe:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
  int nbytes = (nbits + 7) >> 3;
34003602:	f10c 0507 	add.w	r5, ip, #7
  unsigned nbits_unsigned = inputs[0].Qunsigned;
34003606:	9205      	str	r2, [sp, #20]
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_batches * nbytes;
34003608:	9a02      	ldr	r2, [sp, #8]
  int nbytes = (nbits + 7) >> 3;
3400360a:	10ed      	asrs	r5, r5, #3
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_batches * nbytes;
3400360c:	437a      	muls	r2, r7
3400360e:	4342      	muls	r2, r0
34003610:	4372      	muls	r2, r6
  /*
LL_ATON_PRINTF("in: b=%d w=%d g=%d c=%d\n",in_batches,in_fwidth,in_fheight,in_nchannels);
LL_ATON_PRINTF("out: b=%d w=%d g=%d c=%d ndims=%d\n",out_batches,out_fwidth,out_fheight,out_nchannels,output->ndims);
   */

  if (ninputs != 1)
34003612:	2901      	cmp	r1, #1
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_batches * nbytes;
34003614:	fb05 fb02 	mul.w	fp, r5, r2
  if (ninputs != 1)
34003618:	d00a      	beq.n	34003630 <LL_ATON_LIB_DMA_RowToImage+0x60>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
3400361a:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
3400361e:	2001      	movs	r0, #1
34003620:	4a62      	ldr	r2, [pc, #392]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)

  if (nbits != output->nbits)
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003622:	f7ff ffbd 	bl	340035a0 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
34003626:	f06f 0001 	mvn.w	r0, #1

  /* start epoch block sequence */
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_ri2ir_epoch_block_array);

  return LL_ATON_OK;
}
3400362a:	b027      	add	sp, #156	@ 0x9c
3400362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (nbits != output->nbits)
34003630:	f898 2028 	ldrb.w	r2, [r8, #40]	@ 0x28
34003634:	4562      	cmp	r2, ip
34003636:	d004      	beq.n	34003642 <LL_ATON_LIB_DMA_RowToImage+0x72>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003638:	f240 61e3 	movw	r1, #1763	@ 0x6e3
3400363c:	2006      	movs	r0, #6
3400363e:	4a5b      	ldr	r2, [pc, #364]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
34003640:	e7ef      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  if ((output->ndims < 1) || (output->ndims > 4))
34003642:	f898 2027 	ldrb.w	r2, [r8, #39]	@ 0x27
34003646:	3a01      	subs	r2, #1
34003648:	2a03      	cmp	r2, #3
3400364a:	d904      	bls.n	34003656 <LL_ATON_LIB_DMA_RowToImage+0x86>
    __LL_LIB_ERROR(_ERR_SHAPE_OUT, LL_ATON_INVALID_PARAM);
3400364c:	f240 61e6 	movw	r1, #1766	@ 0x6e6
34003650:	200b      	movs	r0, #11
34003652:	4a56      	ldr	r2, [pc, #344]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
34003654:	e7e5      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  if ((inputs[0].ndims < 1) || (inputs[0].ndims > 4))
34003656:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
3400365a:	3a01      	subs	r2, #1
3400365c:	2a03      	cmp	r2, #3
3400365e:	d904      	bls.n	3400366a <LL_ATON_LIB_DMA_RowToImage+0x9a>
    __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003660:	f240 61e9 	movw	r1, #1769	@ 0x6e9
34003664:	200a      	movs	r0, #10
34003666:	4a51      	ldr	r2, [pc, #324]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
34003668:	e7db      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  if (in_batches != out_batches || in_nchannels != out_nchannels * (blocksize_h * blocksize_w) ||
3400366a:	9a04      	ldr	r2, [sp, #16]
3400366c:	4296      	cmp	r6, r2
3400366e:	d124      	bne.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
34003670:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
34003672:	fb02 f20a 	mul.w	r2, r2, sl
34003676:	fb09 f202 	mul.w	r2, r9, r2
3400367a:	4290      	cmp	r0, r2
3400367c:	d11d      	bne.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
3400367e:	9a03      	ldr	r2, [sp, #12]
34003680:	9930      	ldr	r1, [sp, #192]	@ 0xc0
34003682:	428a      	cmp	r2, r1
34003684:	d319      	bcc.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
      (out_fwidth < blocksize_w) || (out_fheight < blocksize_h) || ((out_fwidth - blocksize_w) % stride_w) ||
34003686:	4553      	cmp	r3, sl
34003688:	d317      	bcc.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
3400368a:	1a52      	subs	r2, r2, r1
3400368c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
3400368e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
34003690:	fbb2 f1f1 	udiv	r1, r2, r1
34003694:	fb00 2211 	mls	r2, r0, r1, r2
34003698:	b97a      	cbnz	r2, 340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
      ((out_fheight - blocksize_h) % stride_h) || (in_fwidth != (((out_fwidth - blocksize_w) / stride_w) + 1)) ||
3400369a:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
3400369c:	eba3 030a 	sub.w	r3, r3, sl
340036a0:	fbb3 f2f2 	udiv	r2, r3, r2
340036a4:	9831      	ldr	r0, [sp, #196]	@ 0xc4
340036a6:	fb00 3312 	mls	r3, r0, r2, r3
      (out_fwidth < blocksize_w) || (out_fheight < blocksize_h) || ((out_fwidth - blocksize_w) % stride_w) ||
340036aa:	b933      	cbnz	r3, 340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
      ((out_fheight - blocksize_h) % stride_h) || (in_fwidth != (((out_fwidth - blocksize_w) / stride_w) + 1)) ||
340036ac:	3101      	adds	r1, #1
340036ae:	428f      	cmp	r7, r1
340036b0:	d103      	bne.n	340036ba <LL_ATON_LIB_DMA_RowToImage+0xea>
340036b2:	9b02      	ldr	r3, [sp, #8]
      (in_fheight != (((out_fheight - blocksize_h) / stride_h) + 1)))
340036b4:	3201      	adds	r2, #1
      ((out_fheight - blocksize_h) % stride_h) || (in_fwidth != (((out_fwidth - blocksize_w) / stride_w) + 1)) ||
340036b6:	4293      	cmp	r3, r2
340036b8:	d004      	beq.n	340036c4 <LL_ATON_LIB_DMA_RowToImage+0xf4>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340036ba:	f240 61ef 	movw	r1, #1775	@ 0x6ef
340036be:	2009      	movs	r0, #9
340036c0:	4a3a      	ldr	r2, [pc, #232]	@ (340037ac <LL_ATON_LIB_DMA_RowToImage+0x1dc>)
340036c2:	e7ae      	b.n	34003622 <LL_ATON_LIB_DMA_RowToImage+0x52>
  LL_Streng_TensorInitTypeDef _dma_in = {
340036c4:	2240      	movs	r2, #64	@ 0x40
340036c6:	2100      	movs	r1, #0
340036c8:	a806      	add	r0, sp, #24
340036ca:	f01c fdc5 	bl	34020258 <memset>
340036ce:	2302      	movs	r3, #2
340036d0:	f04f 0200 	mov.w	r2, #0
340036d4:	f88d 3018 	strb.w	r3, [sp, #24]
340036d8:	9b05      	ldr	r3, [sp, #20]
340036da:	2d04      	cmp	r5, #4
340036dc:	f003 0301 	and.w	r3, r3, #1
340036e0:	f363 0241 	bfi	r2, r3, #1, #1
340036e4:	f88d 2019 	strb.w	r2, [sp, #25]
340036e8:	6862      	ldr	r2, [r4, #4]
340036ea:	ea4f 06c5 	mov.w	r6, r5, lsl #3
340036ee:	9207      	str	r2, [sp, #28]
      .offset_start = inputs[0].offset_start,
340036f0:	68a2      	ldr	r2, [r4, #8]
  LL_Streng_TensorInitTypeDef _dma_in = {
340036f2:	b2f6      	uxtb	r6, r6
340036f4:	9208      	str	r2, [sp, #32]
340036f6:	bf08      	it	eq
340036f8:	2610      	moveq	r6, #16
      .offset_end = inputs[0].offset_start + in_bytes_size,
340036fa:	445a      	add	r2, fp
  LL_Streng_TensorInitTypeDef _dma_in = {
340036fc:	f04f 0b01 	mov.w	fp, #1
34003700:	9209      	str	r2, [sp, #36]	@ 0x24
34003702:	6922      	ldr	r2, [r4, #16]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003704:	2100      	movs	r1, #0
  LL_Streng_TensorInitTypeDef _dma_in = {
34003706:	920a      	str	r2, [sp, #40]	@ 0x28
  LL_Streng_TensorInitTypeDef _dma_out = {
34003708:	a816      	add	r0, sp, #88	@ 0x58
3400370a:	2240      	movs	r2, #64	@ 0x40
  LL_Streng_TensorInitTypeDef _dma_in = {
3400370c:	9305      	str	r3, [sp, #20]
3400370e:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
34003712:	f88d 6054 	strb.w	r6, [sp, #84]	@ 0x54
34003716:	f88d 6055 	strb.w	r6, [sp, #85]	@ 0x55
  LL_Streng_TensorInitTypeDef _dma_out = {
3400371a:	f01c fd9d 	bl	34020258 <memset>
3400371e:	f04f 0200 	mov.w	r2, #0
34003722:	9b05      	ldr	r3, [sp, #20]
      .batch_depth = (nbytes == 4) ? (2 * out_nchannels) : out_nchannels,
34003724:	2d04      	cmp	r5, #4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003726:	f363 0241 	bfi	r2, r3, #1, #1
3400372a:	f8d8 3004 	ldr.w	r3, [r8, #4]
3400372e:	f88d 2059 	strb.w	r2, [sp, #89]	@ 0x59
34003732:	9317      	str	r3, [sp, #92]	@ 0x5c
34003734:	f8d8 3008 	ldr.w	r3, [r8, #8]
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003738:	4659      	mov	r1, fp
  LL_Streng_TensorInitTypeDef _dma_out = {
3400373a:	9318      	str	r3, [sp, #96]	@ 0x60
3400373c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
3400373e:	4620      	mov	r0, r4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003740:	e9cd 3a1c 	strd	r3, sl, [sp, #112]	@ 0x70
      .batch_depth = (nbytes == 4) ? (2 * out_nchannels) : out_nchannels,
34003744:	fa09 f30b 	lsl.w	r3, r9, fp
34003748:	bf18      	it	ne
3400374a:	464b      	movne	r3, r9
  LL_Streng_TensorInitTypeDef _dma_out = {
3400374c:	931e      	str	r3, [sp, #120]	@ 0x78
      .batch_offset = out_nchannels * nbytes,
3400374e:	fb05 f309 	mul.w	r3, r5, r9
  LL_Streng_TensorInitTypeDef _dma_out = {
34003752:	931f      	str	r3, [sp, #124]	@ 0x7c
      .frame_offset = stride_w * out_nchannels * nbytes,
34003754:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  LL_Streng_TensorInitTypeDef _dma_out = {
34003756:	f88d b058 	strb.w	fp, [sp, #88]	@ 0x58
      .frame_offset = stride_w * out_nchannels * nbytes,
3400375a:	fb03 f309 	mul.w	r3, r3, r9
3400375e:	436b      	muls	r3, r5
  LL_Streng_TensorInitTypeDef _dma_out = {
34003760:	9320      	str	r3, [sp, #128]	@ 0x80
      .line_offset = out_fwidth * out_nchannels * nbytes,
34003762:	9b03      	ldr	r3, [sp, #12]
34003764:	f88d 6094 	strb.w	r6, [sp, #148]	@ 0x94
34003768:	fb09 f303 	mul.w	r3, r9, r3
3400376c:	fb05 f203 	mul.w	r2, r5, r3
  LL_Streng_TensorInitTypeDef _dma_out = {
34003770:	9221      	str	r2, [sp, #132]	@ 0x84
      .loop_offset = stride_h * out_fwidth * out_nchannels * nbytes,
34003772:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003774:	f88d 6095 	strb.w	r6, [sp, #149]	@ 0x95
      .loop_offset = stride_h * out_fwidth * out_nchannels * nbytes,
34003778:	4353      	muls	r3, r2
3400377a:	436b      	muls	r3, r5
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
3400377c:	2500      	movs	r5, #0
  LL_Streng_TensorInitTypeDef _dma_out = {
3400377e:	e9cd 3722 	strd	r3, r7, [sp, #136]	@ 0x88
          out_batches * (((out_fheight - blocksize_h) / stride_h) + 1) * (((out_fwidth - blocksize_w) / stride_w) + 1),
34003782:	9b02      	ldr	r3, [sp, #8]
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003784:	aa06      	add	r2, sp, #24
          out_batches * (((out_fheight - blocksize_h) / stride_h) + 1) * (((out_fwidth - blocksize_w) / stride_w) + 1),
34003786:	435f      	muls	r7, r3
34003788:	9b04      	ldr	r3, [sp, #16]
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
3400378a:	e9cd 5500 	strd	r5, r5, [sp]
          out_batches * (((out_fheight - blocksize_h) / stride_h) + 1) * (((out_fwidth - blocksize_w) / stride_w) + 1),
3400378e:	435f      	muls	r7, r3
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003790:	ab16      	add	r3, sp, #88	@ 0x58
  LL_Streng_TensorInitTypeDef _dma_out = {
34003792:	9724      	str	r7, [sp, #144]	@ 0x90
  __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out,
34003794:	f7ff fca6 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
  __ll_lib_strswitch_set_dmas(dma_in, dma_out, _dma_ri2ir_epoch_block_array);
34003798:	e9dd 0133 	ldrd	r0, r1, [sp, #204]	@ 0xcc
3400379c:	4a04      	ldr	r2, [pc, #16]	@ (340037b0 <LL_ATON_LIB_DMA_RowToImage+0x1e0>)
3400379e:	f7ff fc45 	bl	3400302c <__ll_lib_strswitch_set_dmas>
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_ri2ir_epoch_block_array);
340037a2:	4803      	ldr	r0, [pc, #12]	@ (340037b0 <LL_ATON_LIB_DMA_RowToImage+0x1e0>)
340037a4:	f7ff fc76 	bl	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
  return LL_ATON_OK;
340037a8:	4628      	mov	r0, r5
340037aa:	e73e      	b.n	3400362a <LL_ATON_LIB_DMA_RowToImage+0x5a>
340037ac:	3402d340 	.word	0x3402d340
340037b0:	34108cd4 	.word	0x34108cd4

340037b4 <LL_ATON_LIB_DMA_DepthToSpace>:
 *
 */
int LL_ATON_LIB_DMA_DepthToSpace(const LL_LIB_TensorInfo_TypeDef *inputs, unsigned int ninputs,
                                 const LL_LIB_TensorInfo_TypeDef *output, unsigned blocksize_h, unsigned blocksize_w,
                                 int dma_in, int dma_out)
{
340037b4:	b530      	push	{r4, r5, lr}
340037b6:	b087      	sub	sp, #28
  return LL_ATON_LIB_DMA_RowToImage(inputs, ninputs, output, blocksize_h, blocksize_w, blocksize_h, blocksize_w, dma_in,
340037b8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
{
340037ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  return LL_ATON_LIB_DMA_RowToImage(inputs, ninputs, output, blocksize_h, blocksize_w, blocksize_h, blocksize_w, dma_in,
340037bc:	9504      	str	r5, [sp, #16]
340037be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
340037c0:	e9cd 4300 	strd	r4, r3, [sp]
340037c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
340037c8:	f7ff ff02 	bl	340035d0 <LL_ATON_LIB_DMA_RowToImage>
                                    dma_out);
}
340037cc:	b007      	add	sp, #28
340037ce:	bd30      	pop	{r4, r5, pc}

340037d0 <LL_ATON_LIB_DMA_Transpose>:

int LL_ATON_LIB_DMA_Transpose(const LL_LIB_TensorShape_TypeDef *input, const uint32_t *input_axes_offsets,
                              const LL_LIB_TensorShape_TypeDef *output, const uint32_t *output_axes_offsets,
                              const uint8_t *target_pos, const uint8_t *perm_to_use, int dma_in, int dma_out)
{
340037d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340037d4:	b0a7      	sub	sp, #156	@ 0x9c
340037d6:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
340037d8:	4680      	mov	r8, r0
340037da:	e9dd 9530 	ldrd	r9, r5, [sp, #192]	@ 0xc0
340037de:	9404      	str	r4, [sp, #16]
340037e0:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
340037e2:	4692      	mov	sl, r2
340037e4:	9405      	str	r4, [sp, #20]
340037e6:	6894      	ldr	r4, [r2, #8]
340037e8:	461f      	mov	r7, r3
340037ea:	9401      	str	r4, [sp, #4]
340037ec:	9e01      	ldr	r6, [sp, #4]
340037ee:	68d4      	ldr	r4, [r2, #12]
340037f0:	1ba4      	subs	r4, r4, r6
  if (LL_Buffer_len(output) < __LL_DMA_MIN_BUFF_LEN)
340037f2:	2c27      	cmp	r4, #39	@ 0x27
340037f4:	d805      	bhi.n	34003802 <LL_ATON_LIB_DMA_Transpose+0x32>
  { // not worth doing it in HW
#if defined(DUMP_DEBUG_SW_OPS)
    LL_ATON_PRINTF("===> running pure SW version of `Transpose`\n");
#endif

    return LL_ATON_LIB_Transpose(input, input_axes_offsets, output, output_axes_offsets, perm_to_use);
340037f6:	9530      	str	r5, [sp, #192]	@ 0xc0

  /* schedule epoch block */
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_transpose_epoch_block_array);

  return LL_ATON_OK;
}
340037f8:	b027      	add	sp, #156	@ 0x9c
340037fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return LL_ATON_LIB_Transpose(input, input_axes_offsets, output, output_axes_offsets, perm_to_use);
340037fe:	f000 bc27 	b.w	34004050 <LL_ATON_LIB_Transpose>
  if (input->nbits != output->nbits)
34003802:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
34003806:	f892 6028 	ldrb.w	r6, [r2, #40]	@ 0x28
3400380a:	429e      	cmp	r6, r3
3400380c:	d00a      	beq.n	34003824 <LL_ATON_LIB_DMA_Transpose+0x54>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM); // TODO: this restriction might be relaxed by a more
3400380e:	f240 7151 	movw	r1, #1873	@ 0x751
34003812:	4a6b      	ldr	r2, [pc, #428]	@ (340039c0 <LL_ATON_LIB_DMA_Transpose+0x1f0>)
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003814:	2006      	movs	r0, #6
34003816:	f7ff fec3 	bl	340035a0 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM); // TODO: this restriction might be relaxed by a more
3400381a:	f06f 0001 	mvn.w	r0, #1
}
3400381e:	b027      	add	sp, #156	@ 0x9c
34003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((input->nbits < 8) || (input->nbits > 32))
34003824:	f1a6 0308 	sub.w	r3, r6, #8
34003828:	2b18      	cmp	r3, #24
3400382a:	d903      	bls.n	34003834 <LL_ATON_LIB_DMA_Transpose+0x64>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
3400382c:	f240 7157 	movw	r1, #1879	@ 0x757
34003830:	4a63      	ldr	r2, [pc, #396]	@ (340039c0 <LL_ATON_LIB_DMA_Transpose+0x1f0>)
34003832:	e7ef      	b.n	34003814 <LL_ATON_LIB_DMA_Transpose+0x44>
  if (input->ndims != output->ndims)
34003834:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
34003838:	f892 b027 	ldrb.w	fp, [r2, #39]	@ 0x27
3400383c:	459b      	cmp	fp, r3
3400383e:	d004      	beq.n	3400384a <LL_ATON_LIB_DMA_Transpose+0x7a>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003840:	f240 715c 	movw	r1, #1884	@ 0x75c
34003844:	4a5e      	ldr	r2, [pc, #376]	@ (340039c0 <LL_ATON_LIB_DMA_Transpose+0x1f0>)
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003846:	2009      	movs	r0, #9
34003848:	e7e5      	b.n	34003816 <LL_ATON_LIB_DMA_Transpose+0x46>
  if ((input->ndims != 4) && (input->ndims != 3))
3400384a:	f1ab 0303 	sub.w	r3, fp, #3
3400384e:	2b01      	cmp	r3, #1
34003850:	d903      	bls.n	3400385a <LL_ATON_LIB_DMA_Transpose+0x8a>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003852:	f240 7161 	movw	r1, #1889	@ 0x761
34003856:	4a5a      	ldr	r2, [pc, #360]	@ (340039c0 <LL_ATON_LIB_DMA_Transpose+0x1f0>)
34003858:	e7f5      	b.n	34003846 <LL_ATON_LIB_DMA_Transpose+0x76>
  params->g_dma_in = _dma_in;
3400385a:	2402      	movs	r4, #2
  LL_Streng_TensorInitTypeDef _dma_in = {
3400385c:	2240      	movs	r2, #64	@ 0x40
3400385e:	2100      	movs	r1, #0
34003860:	a806      	add	r0, sp, #24
34003862:	f01c fcf9 	bl	34020258 <memset>
      .offset_limit = input->offset_limit,
34003866:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
      .offset_start = input->offset_start,
3400386a:	e9d8 0101 	ldrd	r0, r1, [r8, #4]
  params->g_dma_in = _dma_in;
3400386e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
34003872:	2301      	movs	r3, #1
  uint8_t nbytes = LL_LIB_NBYTES(input->nbits);
34003874:	3607      	adds	r6, #7
34003876:	10f6      	asrs	r6, r6, #3
  LL_Streng_TensorInitTypeDef _dma_in = {
34003878:	2e04      	cmp	r6, #4
3400387a:	ea4f 05c6 	mov.w	r5, r6, lsl #3
3400387e:	b2ed      	uxtb	r5, r5
34003880:	bf08      	it	eq
34003882:	2510      	moveq	r5, #16
  params->g_dma_in = _dma_in;
34003884:	e9cd 0107 	strd	r0, r1, [sp, #28]
34003888:	f88d 4018 	strb.w	r4, [sp, #24]
3400388c:	4c4d      	ldr	r4, [pc, #308]	@ (340039c4 <LL_ATON_LIB_DMA_Transpose+0x1f4>)
3400388e:	f10d 0c18 	add.w	ip, sp, #24
34003892:	9314      	str	r3, [sp, #80]	@ 0x50
34003894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34003898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3400389a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
3400389e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
340038a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340038a4:	f88d 5054 	strb.w	r5, [sp, #84]	@ 0x54
340038a8:	f88d 5055 	strb.w	r5, [sp, #85]	@ 0x55
340038ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
340038ae:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
        .fwidth = input->shape[3],
340038b2:	f8d8 802c 	ldr.w	r8, [r8, #44]	@ 0x2c
  params->g_dma_in = _dma_in;
340038b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .addr_base.i = output->addr_base.i,
340038ba:	f8da 3004 	ldr.w	r3, [sl, #4]
  switch (input->ndims)
340038be:	f1bb 0f04 	cmp.w	fp, #4
        .addr_base.i = output->addr_base.i,
340038c2:	9302      	str	r3, [sp, #8]
        .fheight = input->shape[2],
340038c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    LL_Streng_TensorInitTypeDef _dma_out = {
340038c8:	f04f 0240 	mov.w	r2, #64	@ 0x40
340038cc:	f04f 0100 	mov.w	r1, #0
        .frame_loop_cnt = input->shape[1],
340038d0:	f8d8 a004 	ldr.w	sl, [r8, #4]
        .fheight = input->shape[2],
340038d4:	9303      	str	r3, [sp, #12]
    LL_Streng_TensorInitTypeDef _dma_out = {
340038d6:	a816      	add	r0, sp, #88	@ 0x58
  switch (input->ndims)
340038d8:	d14a      	bne.n	34003970 <LL_ATON_LIB_DMA_Transpose+0x1a0>
    LL_Streng_TensorInitTypeDef _dma_out = {
340038da:	f01c fcbd 	bl	34020258 <memset>
        .batch_depth = (nbytes == 4) ? 2 : 1,
340038de:	2e04      	cmp	r6, #4
340038e0:	bf14      	ite	ne
340038e2:	2601      	movne	r6, #1
340038e4:	2602      	moveq	r6, #2
        .batch_offset = output_axes_offsets[target_pos[3]],
340038e6:	f899 2003 	ldrb.w	r2, [r9, #3]
        .loop_offset = output_axes_offsets[target_pos[0]],
340038ea:	f899 e000 	ldrb.w	lr, [r9]
        .batch_offset = output_axes_offsets[target_pos[3]],
340038ee:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        .frame_offset = output_axes_offsets[target_pos[1]],
340038f2:	f899 2001 	ldrb.w	r2, [r9, #1]
        .loop_offset = output_axes_offsets[target_pos[0]],
340038f6:	f857 e02e 	ldr.w	lr, [r7, lr, lsl #2]
        .frame_offset = output_axes_offsets[target_pos[1]],
340038fa:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
        .line_offset = output_axes_offsets[target_pos[2]],
340038fe:	f899 2002 	ldrb.w	r2, [r9, #2]
    params->g_dma_out = _dma_out;
34003902:	9b02      	ldr	r3, [sp, #8]
        .line_offset = output_axes_offsets[target_pos[2]],
34003904:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
        .frame_tot_cnt = input->shape[0] * input->shape[1],
34003908:	f8d8 7000 	ldr.w	r7, [r8]
    params->g_dma_out = _dma_out;
3400390c:	9317      	str	r3, [sp, #92]	@ 0x5c
        .frame_tot_cnt = input->shape[0] * input->shape[1],
3400390e:	fb07 f70a 	mul.w	r7, r7, sl
    params->g_dma_out = _dma_out;
34003912:	9b01      	ldr	r3, [sp, #4]
        .fwidth = input->shape[3],
34003914:	f8d8 c00c 	ldr.w	ip, [r8, #12]
    params->g_dma_out = _dma_out;
34003918:	9318      	str	r3, [sp, #96]	@ 0x60
3400391a:	9b03      	ldr	r3, [sp, #12]
3400391c:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
34003920:	e9cd 361d 	strd	r3, r6, [sp, #116]	@ 0x74
34003924:	e9cd 011f 	strd	r0, r1, [sp, #124]	@ 0x7c
34003928:	e9cd 2e21 	strd	r2, lr, [sp, #132]	@ 0x84
3400392c:	e9cd a723 	strd	sl, r7, [sp, #140]	@ 0x8c
34003930:	f048 0801 	orr.w	r8, r8, #1
34003934:	f88d 8058 	strb.w	r8, [sp, #88]	@ 0x58
34003938:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
    params->g_dma_out = _dma_out;
3400393c:	f88d 5094 	strb.w	r5, [sp, #148]	@ 0x94
34003940:	f88d 5095 	strb.w	r5, [sp, #149]	@ 0x95
34003944:	3410      	adds	r4, #16
34003946:	ad16      	add	r5, sp, #88	@ 0x58
34003948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400394a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3400394c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400394e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34003950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
34003952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34003954:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
34003958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  __ll_lib_strswitch_set_dmas(dma_in, dma_out, _dma_transpose_epoch_block_array);
3400395c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
34003960:	4a19      	ldr	r2, [pc, #100]	@ (340039c8 <LL_ATON_LIB_DMA_Transpose+0x1f8>)
34003962:	f7ff fb63 	bl	3400302c <__ll_lib_strswitch_set_dmas>
  LL_ATON_RT_Insert_LibEpochBlockArray(_dma_transpose_epoch_block_array);
34003966:	4818      	ldr	r0, [pc, #96]	@ (340039c8 <LL_ATON_LIB_DMA_Transpose+0x1f8>)
34003968:	f7ff fb94 	bl	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
  return LL_ATON_OK;
3400396c:	2000      	movs	r0, #0
3400396e:	e756      	b.n	3400381e <LL_ATON_LIB_DMA_Transpose+0x4e>
    LL_Streng_TensorInitTypeDef _dma_out = {
34003970:	f01c fc72 	bl	34020258 <memset>
        .batch_depth = (nbytes == 4) ? 2 : 1,
34003974:	2e04      	cmp	r6, #4
34003976:	bf14      	ite	ne
34003978:	2601      	movne	r6, #1
3400397a:	2602      	moveq	r6, #2
        .batch_offset = output_axes_offsets[target_pos[2]],
3400397c:	f899 2002 	ldrb.w	r2, [r9, #2]
        .frame_loop_cnt = input->shape[0],
34003980:	f8d8 3000 	ldr.w	r3, [r8]
        .batch_offset = output_axes_offsets[target_pos[2]],
34003984:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
        .frame_offset = output_axes_offsets[target_pos[0]],
34003988:	f899 2000 	ldrb.w	r2, [r9]
    params->g_dma_out = _dma_out;
3400398c:	e9cd 601e 	strd	r6, r0, [sp, #120]	@ 0x78
        .frame_offset = output_axes_offsets[target_pos[0]],
34003990:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
        .line_offset = output_axes_offsets[target_pos[1]],
34003994:	f899 2001 	ldrb.w	r2, [r9, #1]
    params->g_dma_out = _dma_out;
34003998:	e9cd 3323 	strd	r3, r3, [sp, #140]	@ 0x8c
        .line_offset = output_axes_offsets[target_pos[1]],
3400399c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
    params->g_dma_out = _dma_out;
340039a0:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
340039a4:	e9cd 1720 	strd	r1, r7, [sp, #128]	@ 0x80
340039a8:	f042 0201 	orr.w	r2, r2, #1
340039ac:	f88d 2058 	strb.w	r2, [sp, #88]	@ 0x58
340039b0:	9a02      	ldr	r2, [sp, #8]
340039b2:	9217      	str	r2, [sp, #92]	@ 0x5c
340039b4:	9a01      	ldr	r2, [sp, #4]
340039b6:	9218      	str	r2, [sp, #96]	@ 0x60
340039b8:	9a03      	ldr	r2, [sp, #12]
340039ba:	e9cd 2a1c 	strd	r2, sl, [sp, #112]	@ 0x70
340039be:	e7bd      	b.n	3400393c <LL_ATON_LIB_DMA_Transpose+0x16c>
340039c0:	3402d326 	.word	0x3402d326
340039c4:	3410d3cc 	.word	0x3410d3cc
340039c8:	34108cac 	.word	0x34108cac

340039cc <LL_ATON_LIB_Concat>:
 * @param  axis for concatenation
 * @retval Error code
 */
int LL_ATON_LIB_Concat(const LL_Buffer_InfoTypeDef *inputs, unsigned int ninputs, const LL_Buffer_InfoTypeDef *output,
                       unsigned int axis, int dma_in, int dma_out)
{
340039cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340039d0:	b0b7      	sub	sp, #220	@ 0xdc
340039d2:	4605      	mov	r5, r0
340039d4:	4617      	mov	r7, r2
  int i, k;

  // LL_ATON_PRINTF("Concat ------ axis=%d\n", axis);
  if (ninputs == 0)
340039d6:	460e      	mov	r6, r1
{
340039d8:	9305      	str	r3, [sp, #20]
  if (ninputs == 0)
340039da:	b951      	cbnz	r1, 340039f2 <LL_ATON_LIB_Concat+0x26>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
340039dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
340039e0:	2001      	movs	r0, #1
340039e2:	4a98      	ldr	r2, [pc, #608]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)

  int in_ndims = inputs[0].ndims;

  if (in_ndims < 4)
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340039e4:	f7ff fddc 	bl	340035a0 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_NINPUTS, LL_ATON_INVALID_PARAM);
340039e8:	f06f 0001 	mvn.w	r0, #1
    }
    start += copy_val;
  }

  return LL_ATON_OK;
}
340039ec:	b037      	add	sp, #220	@ 0xdc
340039ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int in_ndims = inputs[0].ndims;
340039f2:	f890 4027 	ldrb.w	r4, [r0, #39]	@ 0x27
  if (in_ndims < 4)
340039f6:	2c03      	cmp	r4, #3
340039f8:	dc04      	bgt.n	34003a04 <LL_ATON_LIB_Concat+0x38>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
340039fa:	f240 71d5 	movw	r1, #2005	@ 0x7d5
340039fe:	4a91      	ldr	r2, [pc, #580]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003a00:	2009      	movs	r0, #9
34003a02:	e7ef      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
  int in_batch = inputs[0].batch;
34003a04:	6983      	ldr	r3, [r0, #24]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003a06:	f8d0 802c 	ldr.w	r8, [r0, #44]	@ 0x2c
  int in_batch = inputs[0].batch;
34003a0a:	9302      	str	r3, [sp, #8]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003a0c:	1ee3      	subs	r3, r4, #3
34003a0e:	009a      	lsls	r2, r3, #2
34003a10:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
  int out_fwidth = output->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003a14:	f8d7 b02c 	ldr.w	fp, [r7, #44]	@ 0x2c
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003a18:	9306      	str	r3, [sp, #24]
  int in_nchannels = inputs[0].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a1a:	4613      	mov	r3, r2
34003a1c:	3308      	adds	r3, #8
34003a1e:	9307      	str	r3, [sp, #28]
34003a20:	f858 3003 	ldr.w	r3, [r8, r3]
  int axis_lut[] = {TDIM_NKERNELS, TDIM_NCHANNELS, TDIM_FHEIGHT, TDIM_FWIDTH}; // 0, 3, 1, 2
34003a24:	f10d 0c48 	add.w	ip, sp, #72	@ 0x48
  int in_nchannels = inputs[0].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a28:	9303      	str	r3, [sp, #12]
  int out_batch = output->batch;
34003a2a:	69bb      	ldr	r3, [r7, #24]
  int in_fheight = inputs[0].shape[(in_ndims - 4) + TDIM_FHEIGHT];
34003a2c:	920c      	str	r2, [sp, #48]	@ 0x30
  int out_batch = output->batch;
34003a2e:	9308      	str	r3, [sp, #32]
  int out_fwidth = output->shape[(in_ndims - 4) + TDIM_FWIDTH];
34003a30:	4613      	mov	r3, r2
34003a32:	3304      	adds	r3, #4
34003a34:	930d      	str	r3, [sp, #52]	@ 0x34
34003a36:	f85b 3003 	ldr.w	r3, [fp, r3]
34003a3a:	9311      	str	r3, [sp, #68]	@ 0x44
  int out_nchannels = output->shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003a3c:	9b07      	ldr	r3, [sp, #28]
34003a3e:	f85b 3003 	ldr.w	r3, [fp, r3]
34003a42:	930f      	str	r3, [sp, #60]	@ 0x3c
  int axis_lut[] = {TDIM_NKERNELS, TDIM_NCHANNELS, TDIM_FHEIGHT, TDIM_FWIDTH}; // 0, 3, 1, 2
34003a44:	4b80      	ldr	r3, [pc, #512]	@ (34003c48 <LL_ATON_LIB_Concat+0x27c>)
34003a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
34003a48:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  if (output->ndims != in_ndims)
34003a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
34003a50:	429c      	cmp	r4, r3
34003a52:	9309      	str	r3, [sp, #36]	@ 0x24
34003a54:	d003      	beq.n	34003a5e <LL_ATON_LIB_Concat+0x92>
    __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003a56:	f240 71ee 	movw	r1, #2030	@ 0x7ee
34003a5a:	4a7a      	ldr	r2, [pc, #488]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003a5c:	e7d0      	b.n	34003a00 <LL_ATON_LIB_Concat+0x34>
  int nbits = inputs[0].nbits;
34003a5e:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
34003a62:	9304      	str	r3, [sp, #16]
  if (nbits & 0x7)
34003a64:	075b      	lsls	r3, r3, #29
34003a66:	d004      	beq.n	34003a72 <LL_ATON_LIB_Concat+0xa6>
    __LL_LIB_ERROR(_ERR_FRACTIONAL, LL_ATON_INVALID_PARAM); // for now can't handle fractional bytes
34003a68:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34003a6c:	2004      	movs	r0, #4
34003a6e:	4a75      	ldr	r2, [pc, #468]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003a70:	e7b8      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
  int atonn_axis = LUT_AXIS(axis);
34003a72:	9b05      	ldr	r3, [sp, #20]
34003a74:	1f22      	subs	r2, r4, #4
34003a76:	429a      	cmp	r2, r3
34003a78:	d807      	bhi.n	34003a8a <LL_ATON_LIB_Concat+0xbe>
34003a7a:	3304      	adds	r3, #4
34003a7c:	1b1b      	subs	r3, r3, r4
34003a7e:	a936      	add	r1, sp, #216	@ 0xd8
34003a80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
34003a84:	f853 3c90 	ldr.w	r3, [r3, #-144]
34003a88:	4413      	add	r3, r2
  int tot_axis_dim = 0;
34003a8a:	f04f 0c00 	mov.w	ip, #0
    tot_axis_dim += inputs[i].shape[atonn_axis];
34003a8e:	009a      	lsls	r2, r3, #2
34003a90:	920e      	str	r2, [sp, #56]	@ 0x38
  for (i = 0; i < ninputs; i++)
34003a92:	46e6      	mov	lr, ip
    tot_axis_dim += inputs[i].shape[atonn_axis];
34003a94:	462a      	mov	r2, r5
34003a96:	950a      	str	r5, [sp, #40]	@ 0x28
  int tot_size = 0;
34003a98:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
    tot_size += LL_Buffer_len(inputs + i);
34003a9c:	68d1      	ldr	r1, [r2, #12]
34003a9e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
34003aa0:	f8d2 902c 	ldr.w	r9, [r2, #44]	@ 0x2c
    tot_size += LL_Buffer_len(inputs + i);
34003aa4:	4408      	add	r0, r1
34003aa6:	4601      	mov	r1, r0
34003aa8:	6890      	ldr	r0, [r2, #8]
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
34003aaa:	f8d2 a018 	ldr.w	sl, [r2, #24]
    tot_size += LL_Buffer_len(inputs + i);
34003aae:	1a09      	subs	r1, r1, r0
34003ab0:	910b      	str	r1, [sp, #44]	@ 0x2c
    if (!(((inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS] == inputs[i].batch) && in_canonical) ||
34003ab2:	9907      	ldr	r1, [sp, #28]
34003ab4:	f859 1001 	ldr.w	r1, [r9, r1]
34003ab8:	4551      	cmp	r1, sl
34003aba:	d103      	bne.n	34003ac4 <LL_ATON_LIB_Concat+0xf8>
34003abc:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
34003ac0:	4281      	cmp	r1, r0
34003ac2:	d007      	beq.n	34003ad4 <LL_ATON_LIB_Concat+0x108>
34003ac4:	9902      	ldr	r1, [sp, #8]
34003ac6:	4551      	cmp	r1, sl
34003ac8:	d004      	beq.n	34003ad4 <LL_ATON_LIB_Concat+0x108>
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003aca:	f640 0108 	movw	r1, #2056	@ 0x808
34003ace:	4a5d      	ldr	r2, [pc, #372]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003ad0:	200a      	movs	r0, #10
34003ad2:	e787      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
    if (inputs[i].ndims != in_ndims)
34003ad4:	f892 1027 	ldrb.w	r1, [r2, #39]	@ 0x27
34003ad8:	42a1      	cmp	r1, r4
34003ada:	d003      	beq.n	34003ae4 <LL_ATON_LIB_Concat+0x118>
      __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003adc:	f640 010b 	movw	r1, #2059	@ 0x80b
34003ae0:	4a58      	ldr	r2, [pc, #352]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003ae2:	e7f5      	b.n	34003ad0 <LL_ATON_LIB_Concat+0x104>
    if (inputs[i].nbits != nbits)
34003ae4:	f892 1028 	ldrb.w	r1, [r2, #40]	@ 0x28
34003ae8:	9804      	ldr	r0, [sp, #16]
34003aea:	4281      	cmp	r1, r0
34003aec:	d004      	beq.n	34003af8 <LL_ATON_LIB_Concat+0x12c>
      __LL_LIB_ERROR(_ERR_NBITS_IN, LL_ATON_INVALID_PARAM);
34003aee:	f640 010d 	movw	r1, #2061	@ 0x80d
34003af2:	2007      	movs	r0, #7
34003af4:	4a53      	ldr	r2, [pc, #332]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003af6:	e775      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
    for (k = 0; k < in_ndims; k++)
34003af8:	f04f 0a00 	mov.w	sl, #0
    tot_axis_dim += inputs[i].shape[atonn_axis];
34003afc:	990e      	ldr	r1, [sp, #56]	@ 0x38
34003afe:	4554      	cmp	r4, sl
34003b00:	f859 1001 	ldr.w	r1, [r9, r1]
34003b04:	448c      	add	ip, r1
    for (k = 0; k < in_ndims; k++)
34003b06:	bf14      	ite	ne
34003b08:	4621      	movne	r1, r4
34003b0a:	2101      	moveq	r1, #1
34003b0c:	9110      	str	r1, [sp, #64]	@ 0x40
      if (k != atonn_axis && inputs[0].shape[k] != inputs[i].shape[k])
34003b0e:	4553      	cmp	r3, sl
34003b10:	d009      	beq.n	34003b26 <LL_ATON_LIB_Concat+0x15a>
34003b12:	f858 002a 	ldr.w	r0, [r8, sl, lsl #2]
34003b16:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
34003b1a:	4288      	cmp	r0, r1
34003b1c:	d003      	beq.n	34003b26 <LL_ATON_LIB_Concat+0x15a>
        __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003b1e:	f640 0114 	movw	r1, #2068	@ 0x814
34003b22:	4a48      	ldr	r2, [pc, #288]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003b24:	e7d4      	b.n	34003ad0 <LL_ATON_LIB_Concat+0x104>
    for (k = 0; k < in_ndims; k++)
34003b26:	9910      	ldr	r1, [sp, #64]	@ 0x40
34003b28:	f10a 0a01 	add.w	sl, sl, #1
34003b2c:	3901      	subs	r1, #1
34003b2e:	9110      	str	r1, [sp, #64]	@ 0x40
34003b30:	d1ed      	bne.n	34003b0e <LL_ATON_LIB_Concat+0x142>
  for (i = 0; i < ninputs; i++)
34003b32:	f10e 0e01 	add.w	lr, lr, #1
34003b36:	45b6      	cmp	lr, r6
34003b38:	f102 0238 	add.w	r2, r2, #56	@ 0x38
34003b3c:	d1ae      	bne.n	34003a9c <LL_ATON_LIB_Concat+0xd0>
  for (k = 0; k < in_ndims; k++)
34003b3e:	2000      	movs	r0, #0
34003b40:	4284      	cmp	r4, r0
34003b42:	bf14      	ite	ne
34003b44:	46a6      	movne	lr, r4
34003b46:	f04f 0e01 	moveq.w	lr, #1
    if (k != atonn_axis && output->shape[k] != inputs[0].shape[k])
34003b4a:	4283      	cmp	r3, r0
34003b4c:	d009      	beq.n	34003b62 <LL_ATON_LIB_Concat+0x196>
34003b4e:	f85b 1020 	ldr.w	r1, [fp, r0, lsl #2]
34003b52:	f858 2020 	ldr.w	r2, [r8, r0, lsl #2]
34003b56:	4291      	cmp	r1, r2
34003b58:	d003      	beq.n	34003b62 <LL_ATON_LIB_Concat+0x196>
      __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003b5a:	f640 011d 	movw	r1, #2077	@ 0x81d
34003b5e:	4a39      	ldr	r2, [pc, #228]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003b60:	e74e      	b.n	34003a00 <LL_ATON_LIB_Concat+0x34>
  for (k = 0; k < in_ndims; k++)
34003b62:	f1be 0e01 	subs.w	lr, lr, #1
34003b66:	f100 0001 	add.w	r0, r0, #1
34003b6a:	d1ee      	bne.n	34003b4a <LL_ATON_LIB_Concat+0x17e>
  if (output->shape[atonn_axis] != tot_axis_dim)
34003b6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34003b6e:	f85b 0002 	ldr.w	r0, [fp, r2]
34003b72:	4584      	cmp	ip, r0
34003b74:	d004      	beq.n	34003b80 <LL_ATON_LIB_Concat+0x1b4>
    __LL_LIB_ERROR(_ERR_AXIS, LL_ATON_INVALID_PARAM);
34003b76:	f640 0122 	movw	r1, #2082	@ 0x822
34003b7a:	2003      	movs	r0, #3
34003b7c:	4a31      	ldr	r2, [pc, #196]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003b7e:	e731      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
  if (nbits != output->nbits) // perhaps this could be relaxed later on FIXME !!!
34003b80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
34003b84:	9904      	ldr	r1, [sp, #16]
34003b86:	428a      	cmp	r2, r1
34003b88:	d004      	beq.n	34003b94 <LL_ATON_LIB_Concat+0x1c8>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34003b8a:	f640 0127 	movw	r1, #2087	@ 0x827
34003b8e:	2006      	movs	r0, #6
34003b90:	4a2c      	ldr	r2, [pc, #176]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003b92:	e727      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
34003b94:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
34003b98:	1a52      	subs	r2, r2, r1
  if (tot_size > LL_Buffer_len(output))
34003b9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
34003b9c:	4291      	cmp	r1, r2
34003b9e:	d822      	bhi.n	34003be6 <LL_ATON_LIB_Concat+0x21a>
  int axis_is_leftmost = 1;
34003ba0:	f04f 0c01 	mov.w	ip, #1
34003ba4:	4659      	mov	r1, fp
34003ba6:	9a05      	ldr	r2, [sp, #20]
34003ba8:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
34003bac:	4462      	add	r2, ip
  for (i = 0; i < axis; i++)
34003bae:	3a01      	subs	r2, #1
34003bb0:	d11e      	bne.n	34003bf0 <LL_ATON_LIB_Concat+0x224>
  int nbytes = (inputs[0].nbits + 7) >> 3;
34003bb2:	9a04      	ldr	r2, [sp, #16]
34003bb4:	1dd1      	adds	r1, r2, #7
  if (nbits > 24) // assumes that inputs & output have the same number of bits (`nbits`), see above `__LL_LIB_ERROR`s
34003bb6:	2a18      	cmp	r2, #24
  int nbytes = (inputs[0].nbits + 7) >> 3;
34003bb8:	ea4f 09e1 	mov.w	r9, r1, asr #3
  if (nbits > 24) // assumes that inputs & output have the same number of bits (`nbits`), see above `__LL_LIB_ERROR`s
34003bbc:	f300 80f5 	bgt.w	34003daa <LL_ATON_LIB_Concat+0x3de>
  if (axis_is_leftmost)
34003bc0:	f1bc 0f00 	cmp.w	ip, #0
34003bc4:	f000 80f1 	beq.w	34003daa <LL_ATON_LIB_Concat+0x3de>
    switch ((in_ndims - 1) - axis) // count from right CHW, W=0,H=1,C=2, anything else >= 3
34003bc8:	9b05      	ldr	r3, [sp, #20]
34003bca:	1ae4      	subs	r4, r4, r3
34003bcc:	3c01      	subs	r4, #1
34003bce:	f000 80b1 	beq.w	34003d34 <LL_ATON_LIB_Concat+0x368>
34003bd2:	2c02      	cmp	r4, #2
34003bd4:	d026      	beq.n	34003c24 <LL_ATON_LIB_Concat+0x258>
      if (in_batch != out_batch)
34003bd6:	9b02      	ldr	r3, [sp, #8]
34003bd8:	9a08      	ldr	r2, [sp, #32]
34003bda:	4293      	cmp	r3, r2
34003bdc:	d012      	beq.n	34003c04 <LL_ATON_LIB_Concat+0x238>
        __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003bde:	f640 0144 	movw	r1, #2116	@ 0x844
34003be2:	4a18      	ldr	r2, [pc, #96]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003be4:	e70c      	b.n	34003a00 <LL_ATON_LIB_Concat+0x34>
    __LL_LIB_ERROR(_ERR_BUFFER, LL_ATON_INVALID_PARAM);
34003be6:	f640 012c 	movw	r1, #2092	@ 0x82c
34003bea:	200c      	movs	r0, #12
34003bec:	4a15      	ldr	r2, [pc, #84]	@ (34003c44 <LL_ATON_LIB_Concat+0x278>)
34003bee:	e6f9      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
    axis_is_leftmost &= (output->shape[i] == 1);
34003bf0:	f851 eb04 	ldr.w	lr, [r1], #4
34003bf4:	f1be 0f01 	cmp.w	lr, #1
34003bf8:	bf14      	ite	ne
34003bfa:	f04f 0c00 	movne.w	ip, #0
34003bfe:	f00c 0c01 	andeq.w	ip, ip, #1
  for (i = 0; i < axis; i++)
34003c02:	e7d4      	b.n	34003bae <LL_ATON_LIB_Concat+0x1e2>
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003c04:	4638      	mov	r0, r7
34003c06:	f7ff f9db 	bl	34002fc0 <LL_Buffer_addr_start>
34003c0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
34003c0c:	4602      	mov	r2, r0
  if (ninputs > 0)
34003c0e:	9301      	str	r3, [sp, #4]
34003c10:	9b40      	ldr	r3, [sp, #256]	@ 0x100
34003c12:	9300      	str	r3, [sp, #0]
34003c14:	f04f 33ff 	mov.w	r3, #4294967295
34003c18:	4631      	mov	r1, r6
34003c1a:	4628      	mov	r0, r5
34003c1c:	f7ff faa4 	bl	34003168 <__LL_ATON_LIB_DMA_Inputs_Memcpy.part.0>
      return LL_ATON_OK;
34003c20:	2000      	movs	r0, #0
34003c22:	e6e3      	b.n	340039ec <LL_ATON_LIB_Concat+0x20>
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003c24:	4638      	mov	r0, r7
34003c26:	f7ff f9cb 	bl	34002fc0 <LL_Buffer_addr_start>
      if (in_batch == out_batch)
34003c2a:	9b02      	ldr	r3, [sp, #8]
34003c2c:	9a08      	ldr	r2, [sp, #32]
      __LL_ATON_LIB_DMA_Inputs_Memcpy(inputs, ninputs, LL_Buffer_addr_start(output), -1, dma_in, dma_out);
34003c2e:	4681      	mov	r9, r0
      if (in_batch == out_batch)
34003c30:	4293      	cmp	r3, r2
34003c32:	d10b      	bne.n	34003c4c <LL_ATON_LIB_Concat+0x280>
  if (ninputs > 0)
34003c34:	9b41      	ldr	r3, [sp, #260]	@ 0x104
34003c36:	4602      	mov	r2, r0
34003c38:	9301      	str	r3, [sp, #4]
34003c3a:	9b40      	ldr	r3, [sp, #256]	@ 0x100
34003c3c:	9300      	str	r3, [sp, #0]
34003c3e:	f04f 33ff 	mov.w	r3, #4294967295
34003c42:	e7e9      	b.n	34003c18 <LL_ATON_LIB_Concat+0x24c>
34003c44:	3402d313 	.word	0x3402d313
34003c48:	34026120 	.word	0x34026120
  uint32_t in_fwidth = inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003c4e:	46b6      	mov	lr, r6
  uint32_t in_fwidth = inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003c50:	f858 b003 	ldr.w	fp, [r8, r3]
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003c54:	9b06      	ldr	r3, [sp, #24]
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003c56:	f04f 0c38 	mov.w	ip, #56	@ 0x38
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003c5a:	fb0b fa03 	mul.w	sl, fp, r3
  uint32_t in_nkernels = inputs[0].shape[(in_ndims - 4) + TDIM_NKERNELS];
34003c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  uint32_t nbytes = (nbits + 7) >> 3;
34003c60:	08cf      	lsrs	r7, r1, #3
  uint32_t in_nkernels = inputs[0].shape[(in_ndims - 4) + TDIM_NKERNELS];
34003c62:	4443      	add	r3, r8
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003c64:	f853 4c04 	ldr.w	r4, [r3, #-4]
34003c68:	9b03      	ldr	r3, [sp, #12]
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003c6a:	f105 012c 	add.w	r1, r5, #44	@ 0x2c
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003c6e:	435c      	muls	r4, r3
  for (i = 0; i < ninputs; i++)
34003c70:	2300      	movs	r3, #0
34003c72:	429e      	cmp	r6, r3
34003c74:	bf14      	ite	ne
34003c76:	46b6      	movne	lr, r6
34003c78:	f04f 0e01 	moveq.w	lr, #1
  uint32_t out_nchannels = 0;
34003c7c:	4698      	mov	r8, r3
34003c7e:	f04e e001 	dls	lr, lr
  uint32_t in_bytes_size = in_fwidth * in_fheight * in_nchannels * in_nkernels * nbytes;
34003c82:	437c      	muls	r4, r7
34003c84:	fb0a f404 	mul.w	r4, sl, r4
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003c88:	fb0c f203 	mul.w	r2, ip, r3
34003c8c:	9807      	ldr	r0, [sp, #28]
34003c8e:	588a      	ldr	r2, [r1, r2]
  for (i = 0; i < ninputs; i++)
34003c90:	3301      	adds	r3, #1
    out_nchannels += inputs[i].shape[(in_ndims - 4) + TDIM_NCHANNELS];
34003c92:	5812      	ldr	r2, [r2, r0]
34003c94:	4490      	add	r8, r2
  for (i = 0; i < ninputs; i++)
34003c96:	f00f c809 	le	lr, 34003c88 <LL_ATON_LIB_Concat+0x2bc>
  LL_Streng_TensorInitTypeDef _dma_in = {
34003c9a:	2240      	movs	r2, #64	@ 0x40
34003c9c:	2100      	movs	r1, #0
34003c9e:	a816      	add	r0, sp, #88	@ 0x58
34003ca0:	f01c fada 	bl	34020258 <memset>
34003ca4:	2302      	movs	r3, #2
34003ca6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
34003caa:	686b      	ldr	r3, [r5, #4]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003cac:	2240      	movs	r2, #64	@ 0x40
  LL_Streng_TensorInitTypeDef _dma_in = {
34003cae:	9317      	str	r3, [sp, #92]	@ 0x5c
      .offset_start = inputs[0].offset_start,               // this must be updated on all inputs
34003cb0:	68ab      	ldr	r3, [r5, #8]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003cb2:	2100      	movs	r1, #0
      .offset_end = inputs[0].offset_start + in_bytes_size, // this must be updated on all inputs
34003cb4:	441c      	add	r4, r3
  LL_Streng_TensorInitTypeDef _dma_in = {
34003cb6:	9318      	str	r3, [sp, #96]	@ 0x60
34003cb8:	2301      	movs	r3, #1
34003cba:	9419      	str	r4, [sp, #100]	@ 0x64
34003cbc:	00fc      	lsls	r4, r7, #3
34003cbe:	b2e4      	uxtb	r4, r4
  LL_Streng_TensorInitTypeDef _dma_out = {
34003cc0:	a826      	add	r0, sp, #152	@ 0x98
  LL_Streng_TensorInitTypeDef _dma_in = {
34003cc2:	9324      	str	r3, [sp, #144]	@ 0x90
34003cc4:	f88d 4094 	strb.w	r4, [sp, #148]	@ 0x94
34003cc8:	f88d 4095 	strb.w	r4, [sp, #149]	@ 0x95
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ccc:	f01c fac4 	bl	34020258 <memset>
34003cd0:	2301      	movs	r3, #1
34003cd2:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
34003cd6:	9b06      	ldr	r3, [sp, #24]
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003cd8:	4628      	mov	r0, r5
  LL_Streng_TensorInitTypeDef _dma_out = {
34003cda:	932d      	str	r3, [sp, #180]	@ 0xb4
34003cdc:	9b02      	ldr	r3, [sp, #8]
34003cde:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
34003ce2:	932e      	str	r3, [sp, #184]	@ 0xb8
      .batch_offset = out_nchannels * nbytes,
34003ce4:	fb08 f307 	mul.w	r3, r8, r7
  LL_Streng_TensorInitTypeDef _dma_out = {
34003ce8:	932f      	str	r3, [sp, #188]	@ 0xbc
      .frame_offset = in_batch * nbytes, // this must be updated on all inputs
34003cea:	9b02      	ldr	r3, [sp, #8]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003cec:	f8cd b0b0 	str.w	fp, [sp, #176]	@ 0xb0
      .frame_offset = in_batch * nbytes, // this must be updated on all inputs
34003cf0:	fb07 f103 	mul.w	r1, r7, r3
      .frame_loop_cnt = in_nchannels / in_batch,                 // this must be updated on all inputs
34003cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34003cf8:	fbb3 f3f2 	udiv	r3, r3, r2
  LL_Streng_TensorInitTypeDef _dma_out = {
34003cfc:	e9cd 3333 	strd	r3, r3, [sp, #204]	@ 0xcc
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003d00:	f04f 33ff 	mov.w	r3, #4294967295
  LL_Streng_TensorInitTypeDef _dma_out = {
34003d04:	9130      	str	r1, [sp, #192]	@ 0xc0
      .loop_offset = in_fheight * in_fwidth * in_batch * nbytes, // this must be updated on all inputs
34003d06:	fb01 f10a 	mul.w	r1, r1, sl
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003d0a:	e9cd 9300 	strd	r9, r3, [sp]
  LL_Streng_TensorInitTypeDef _dma_out = {
34003d0e:	9132      	str	r1, [sp, #200]	@ 0xc8
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003d10:	ab26      	add	r3, sp, #152	@ 0x98
34003d12:	4631      	mov	r1, r6
34003d14:	aa16      	add	r2, sp, #88	@ 0x58
  LL_Streng_TensorInitTypeDef _dma_out = {
34003d16:	f88d 40d4 	strb.w	r4, [sp, #212]	@ 0xd4
34003d1a:	f88d 40d5 	strb.w	r4, [sp, #213]	@ 0xd5
    __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_dma_in, &_dma_out, dst, -1);
34003d1e:	f7ff f9e1 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
    __ll_lib_strswitch_set_dmas(dma_in, dma_out, _inputs_batched_memcpy_epoch_block_array);
34003d22:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	@ 0x100
34003d26:	4a48      	ldr	r2, [pc, #288]	@ (34003e48 <LL_ATON_LIB_Concat+0x47c>)
34003d28:	f7ff f980 	bl	3400302c <__ll_lib_strswitch_set_dmas>
    LL_ATON_RT_Insert_LibEpochBlockArray(_inputs_batched_memcpy_epoch_block_array);
34003d2c:	4846      	ldr	r0, [pc, #280]	@ (34003e48 <LL_ATON_LIB_Concat+0x47c>)
          LL_ATON_RT_Insert_LibEpochBlockArray(_concat_case3_epoch_block_array);
34003d2e:	f7ff f9b1 	bl	34003094 <LL_ATON_RT_Insert_LibEpochBlockArray>
34003d32:	e775      	b.n	34003c20 <LL_ATON_LIB_Concat+0x254>
      if (in_batch != out_batch)
34003d34:	9b02      	ldr	r3, [sp, #8]
34003d36:	9a08      	ldr	r2, [sp, #32]
34003d38:	4293      	cmp	r3, r2
34003d3a:	d003      	beq.n	34003d44 <LL_ATON_LIB_Concat+0x378>
        __LL_LIB_ERROR(_ERR_SHAPE, LL_ATON_INVALID_PARAM);
34003d3c:	f640 0165 	movw	r1, #2149	@ 0x865
34003d40:	4a42      	ldr	r2, [pc, #264]	@ (34003e4c <LL_ATON_LIB_Concat+0x480>)
34003d42:	e65d      	b.n	34003a00 <LL_ATON_LIB_Concat+0x34>
      unsigned int out_pix_size = nbytes * out_nchannels;
34003d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003d46:	4638      	mov	r0, r7
      unsigned int out_pix_size = nbytes * out_nchannels;
34003d48:	fb09 f103 	mul.w	r1, r9, r3
      unsigned int out_line_size = out_pix_size * out_fwidth;
34003d4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
34003d4e:	4359      	muls	r1, r3
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003d50:	f7ff f936 	bl	34002fc0 <LL_Buffer_addr_start>
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003d54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
      unsigned char *out_start = LL_Buffer_addr_start(output);
34003d56:	4607      	mov	r7, r0
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003d58:	f858 a003 	ldr.w	sl, [r8, r3]
        params->special.concat_case3.outer_idx = 0;
34003d5c:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 34003e5c <LL_ATON_LIB_Concat+0x490>
        params->special.concat_case3.in_fheight = in_fheight;
34003d60:	9b06      	ldr	r3, [sp, #24]
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003d62:	f8d8 0098 	ldr.w	r0, [r8, #152]	@ 0x98
        params->special.concat_case3.nbytes = nbytes;
34003d66:	e9c8 3929 	strd	r3, r9, [r8, #164]	@ 0xa4
        params->special.concat_case3.outer_idx = 0;
34003d6a:	f8c8 40a0 	str.w	r4, [r8, #160]	@ 0xa0
        params->special.concat_case3.out_line_size = out_line_size;
34003d6e:	f8c8 10ac 	str.w	r1, [r8, #172]	@ 0xac
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003d72:	f7ff f925 	bl	34002fc0 <LL_Buffer_addr_start>
        if ((ninputs > 0) && (in_fheight > 0))
34003d76:	9b06      	ldr	r3, [sp, #24]
        params->special.concat_case3.in_curr = LL_Buffer_addr_start((LL_LIB_TensorInfo_TypeDef *)params->g_tensors);
34003d78:	f8c8 00b0 	str.w	r0, [r8, #176]	@ 0xb0
        if ((ninputs > 0) && (in_fheight > 0))
34003d7c:	2b00      	cmp	r3, #0
34003d7e:	f77f af4f 	ble.w	34003c20 <LL_ATON_LIB_Concat+0x254>
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003d82:	9b03      	ldr	r3, [sp, #12]
          __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out,
34003d84:	4631      	mov	r1, r6
        unsigned int line_size = pix_size * inputs[0].shape[(in_ndims - 4) + TDIM_FWIDTH];
34003d86:	fb0a fa03 	mul.w	sl, sl, r3
34003d8a:	fb09 f30a 	mul.w	r3, r9, sl
          __ll_lib_prepare_inputs_epoch(inputs, ninputs, &_static_const_dma_in, &_static_const_dma_out,
34003d8e:	4628      	mov	r0, r5
34003d90:	e9cd 7300 	strd	r7, r3, [sp]
34003d94:	4a2e      	ldr	r2, [pc, #184]	@ (34003e50 <LL_ATON_LIB_Concat+0x484>)
34003d96:	4b2f      	ldr	r3, [pc, #188]	@ (34003e54 <LL_ATON_LIB_Concat+0x488>)
34003d98:	f7ff f9a4 	bl	340030e4 <__ll_lib_prepare_inputs_epoch>
          __ll_lib_strswitch_set_dmas(dma_in, dma_out, _concat_case3_epoch_block_array);
34003d9c:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	@ 0x100
34003da0:	4a2d      	ldr	r2, [pc, #180]	@ (34003e58 <LL_ATON_LIB_Concat+0x48c>)
34003da2:	f7ff f943 	bl	3400302c <__ll_lib_strswitch_set_dmas>
          LL_ATON_RT_Insert_LibEpochBlockArray(_concat_case3_epoch_block_array);
34003da6:	482c      	ldr	r0, [pc, #176]	@ (34003e58 <LL_ATON_LIB_Concat+0x48c>)
34003da8:	e7c1      	b.n	34003d2e <LL_ATON_LIB_Concat+0x362>
  if (in_canonical == 0)
34003daa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
34003dae:	428a      	cmp	r2, r1
34003db0:	d003      	beq.n	34003dba <LL_ATON_LIB_Concat+0x3ee>
    __LL_LIB_ERROR(_ERR_SHAPE_IN, LL_ATON_INVALID_PARAM);
34003db2:	f640 01bd 	movw	r1, #2237	@ 0x8bd
34003db6:	4a25      	ldr	r2, [pc, #148]	@ (34003e4c <LL_ATON_LIB_Concat+0x480>)
34003db8:	e68a      	b.n	34003ad0 <LL_ATON_LIB_Concat+0x104>
  if (out_canonical == 0)
34003dba:	9a08      	ldr	r2, [sp, #32]
34003dbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
34003dbe:	428a      	cmp	r2, r1
34003dc0:	d004      	beq.n	34003dcc <LL_ATON_LIB_Concat+0x400>
    __LL_LIB_ERROR(_ERR_SHAPE_OUT, LL_ATON_INVALID_PARAM);
34003dc2:	f640 01bf 	movw	r1, #2239	@ 0x8bf
34003dc6:	200b      	movs	r0, #11
34003dc8:	4a20      	ldr	r2, [pc, #128]	@ (34003e4c <LL_ATON_LIB_Concat+0x480>)
34003dca:	e60b      	b.n	340039e4 <LL_ATON_LIB_Concat+0x18>
  uint32_t jump_base = 1;
34003dcc:	2401      	movs	r4, #1
34003dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34003dd0:	1919      	adds	r1, r3, r4
34003dd2:	4291      	cmp	r1, r2
34003dd4:	eba2 0303 	sub.w	r3, r2, r3
34003dd8:	bfd4      	ite	le
34003dda:	461d      	movle	r5, r3
34003ddc:	4625      	movgt	r5, r4
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003dde:	3d01      	subs	r5, #1
34003de0:	d11a      	bne.n	34003e18 <LL_ATON_LIB_Concat+0x44c>
  jump_base *= nbytes;
34003de2:	fb04 f909 	mul.w	r9, r4, r9
  uint32_t start = 0;
34003de6:	2400      	movs	r4, #0
  for (i = 0; i < ninputs; i++)
34003de8:	46a2      	mov	sl, r4
  uint32_t jump = jump_base * output->shape[atonn_axis];
34003dea:	fb09 f300 	mul.w	r3, r9, r0
34003dee:	9303      	str	r3, [sp, #12]
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003df0:	46a0      	mov	r8, r4
    int src = 0;
34003df2:	2500      	movs	r5, #0
    uint32_t copy_val = inputs[i].shape[atonn_axis] * jump_base;
34003df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34003df6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34003dfa:	589a      	ldr	r2, [r3, r2]
34003dfc:	fb02 fb09 	mul.w	fp, r2, r9
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003e00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34003e02:	4543      	cmp	r3, r8
34003e04:	d80d      	bhi.n	34003e22 <LL_ATON_LIB_Concat+0x456>
  for (i = 0; i < ninputs; i++)
34003e06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34003e08:	f10a 0a01 	add.w	sl, sl, #1
34003e0c:	3338      	adds	r3, #56	@ 0x38
34003e0e:	45b2      	cmp	sl, r6
    start += copy_val;
34003e10:	445c      	add	r4, fp
  for (i = 0; i < ninputs; i++)
34003e12:	930a      	str	r3, [sp, #40]	@ 0x28
34003e14:	d3ec      	bcc.n	34003df0 <LL_ATON_LIB_Concat+0x424>
34003e16:	e703      	b.n	34003c20 <LL_ATON_LIB_Concat+0x254>
    jump_base *= output->shape[i];
34003e18:	f85b 2021 	ldr.w	r2, [fp, r1, lsl #2]
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003e1c:	3101      	adds	r1, #1
    jump_base *= output->shape[i];
34003e1e:	4354      	muls	r4, r2
  for (i = atonn_axis + 1; i < output->ndims; i++)
34003e20:	e7dd      	b.n	34003dde <LL_ATON_LIB_Concat+0x412>
      memcpy(LL_Buffer_addr_start(output) + dst, LL_Buffer_addr_start(inputs + i) + src, copy_val);
34003e22:	4638      	mov	r0, r7
34003e24:	f7ff f8cc 	bl	34002fc0 <LL_Buffer_addr_start>
34003e28:	eb00 0308 	add.w	r3, r0, r8
34003e2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
34003e2e:	9302      	str	r3, [sp, #8]
34003e30:	f7ff f8c6 	bl	34002fc0 <LL_Buffer_addr_start>
34003e34:	465a      	mov	r2, fp
34003e36:	1941      	adds	r1, r0, r5
34003e38:	9802      	ldr	r0, [sp, #8]
34003e3a:	f01c fc94 	bl	34020766 <memcpy>
    for (dst = start; dst < stop; dst += jump, src += copy_val)
34003e3e:	9b03      	ldr	r3, [sp, #12]
34003e40:	445d      	add	r5, fp
34003e42:	4498      	add	r8, r3
34003e44:	e7dc      	b.n	34003e00 <LL_ATON_LIB_Concat+0x434>
34003e46:	bf00      	nop
34003e48:	34108cfc 	.word	0x34108cfc
34003e4c:	3402d313 	.word	0x3402d313
34003e50:	3402d3e0 	.word	0x3402d3e0
34003e54:	3402d3a0 	.word	0x3402d3a0
34003e58:	34108d4c 	.word	0x34108d4c
34003e5c:	3410d3cc 	.word	0x3410d3cc

34003e60 <LL_Buffer_addr_start>:
    if (buf->is_user_allocated)
34003e60:	7d02      	ldrb	r2, [r0, #20]
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
34003e62:	6843      	ldr	r3, [r0, #4]
    if (buf->is_user_allocated)
34003e64:	b102      	cbz	r2, 34003e68 <LL_Buffer_addr_start+0x8>
      return *tmp;
34003e66:	681b      	ldr	r3, [r3, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
34003e68:	6880      	ldr	r0, [r0, #8]
  }
34003e6a:	4418      	add	r0, r3
34003e6c:	4770      	bx	lr
	...

34003e70 <__ll_transp_get_inner_out_axis>:
  return (int8_t *)target;
}

static inline uint32_t __ll_transp_get_inner_out_axis(const __ll_transp_params_t *common_params)
{
  for (unsigned int i = 0; i < common_params->rank; i++)
34003e70:	6803      	ldr	r3, [r0, #0]
{
34003e72:	4602      	mov	r2, r0
  for (unsigned int i = 0; i < common_params->rank; i++)
34003e74:	2000      	movs	r0, #0
{
34003e76:	b510      	push	{r4, lr}
  {
    if (((uint32_t)common_params->perm[i]) == (common_params->rank - 1))
34003e78:	1e59      	subs	r1, r3, #1
  for (unsigned int i = 0; i < common_params->rank; i++)
34003e7a:	3301      	adds	r3, #1
34003e7c:	3b01      	subs	r3, #1
34003e7e:	d106      	bne.n	34003e8e <__ll_transp_get_inner_out_axis+0x1e>
      return i;
  }
  LL_ATON_ASSERT(false);
34003e80:	f240 31e2 	movw	r1, #994	@ 0x3e2
34003e84:	4b05      	ldr	r3, [pc, #20]	@ (34003e9c <__ll_transp_get_inner_out_axis+0x2c>)
34003e86:	4a06      	ldr	r2, [pc, #24]	@ (34003ea0 <__ll_transp_get_inner_out_axis+0x30>)
34003e88:	4806      	ldr	r0, [pc, #24]	@ (34003ea4 <__ll_transp_get_inner_out_axis+0x34>)
34003e8a:	f01b f99b 	bl	3401f1c4 <__assert_func>
    if (((uint32_t)common_params->perm[i]) == (common_params->rank - 1))
34003e8e:	6854      	ldr	r4, [r2, #4]
34003e90:	5c24      	ldrb	r4, [r4, r0]
34003e92:	428c      	cmp	r4, r1
34003e94:	d001      	beq.n	34003e9a <__ll_transp_get_inner_out_axis+0x2a>
  for (unsigned int i = 0; i < common_params->rank; i++)
34003e96:	3001      	adds	r0, #1
34003e98:	e7f0      	b.n	34003e7c <__ll_transp_get_inner_out_axis+0xc>
  return common_params->rank; // make compiler happy
}
34003e9a:	bd10      	pop	{r4, pc}
34003e9c:	34026d17 	.word	0x34026d17
34003ea0:	3402d474 	.word	0x3402d474
34003ea4:	34026c6b 	.word	0x34026c6b

34003ea8 <__ll_aton_lib_copy_element.isra.0>:
  switch (nbytes)
34003ea8:	3801      	subs	r0, #1
static inline void __ll_aton_lib_copy_element(uint8_t nbytes, int32_t index, int8_t *out_target, int8_t *in_target)
34003eaa:	b508      	push	{r3, lr}
  switch (nbytes)
34003eac:	2803      	cmp	r0, #3
34003eae:	d832      	bhi.n	34003f16 <__ll_aton_lib_copy_element.isra.0+0x6e>
34003eb0:	e8df f000 	tbb	[pc, r0]
34003eb4:	22180602 	.word	0x22180602
    *out_target = *in_target;
34003eb8:	f992 3000 	ldrsb.w	r3, [r2]
34003ebc:	700b      	strb	r3, [r1, #0]
}
34003ebe:	bd08      	pop	{r3, pc}
    LL_ATON_ASSERT((((uintptr_t)in_target) % 2) == 0);
34003ec0:	07d0      	lsls	r0, r2, #31
34003ec2:	d505      	bpl.n	34003ed0 <__ll_aton_lib_copy_element.isra.0+0x28>
34003ec4:	2139      	movs	r1, #57	@ 0x39
34003ec6:	4b16      	ldr	r3, [pc, #88]	@ (34003f20 <__ll_aton_lib_copy_element.isra.0+0x78>)
34003ec8:	4a16      	ldr	r2, [pc, #88]	@ (34003f24 <__ll_aton_lib_copy_element.isra.0+0x7c>)
    LL_ATON_ASSERT((((uintptr_t)out_target) % 2) == 0);
34003eca:	4817      	ldr	r0, [pc, #92]	@ (34003f28 <__ll_aton_lib_copy_element.isra.0+0x80>)
34003ecc:	f01b f97a 	bl	3401f1c4 <__assert_func>
34003ed0:	07cb      	lsls	r3, r1, #31
34003ed2:	d503      	bpl.n	34003edc <__ll_aton_lib_copy_element.isra.0+0x34>
34003ed4:	213a      	movs	r1, #58	@ 0x3a
34003ed6:	4b15      	ldr	r3, [pc, #84]	@ (34003f2c <__ll_aton_lib_copy_element.isra.0+0x84>)
34003ed8:	4a12      	ldr	r2, [pc, #72]	@ (34003f24 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003eda:	e7f6      	b.n	34003eca <__ll_aton_lib_copy_element.isra.0+0x22>
    *((int16_t *)out_target) = *((int16_t *)in_target);
34003edc:	f9b2 3000 	ldrsh.w	r3, [r2]
34003ee0:	800b      	strh	r3, [r1, #0]
    return;
34003ee2:	e7ec      	b.n	34003ebe <__ll_aton_lib_copy_element.isra.0+0x16>
    *out_target++ = *in_target++;
34003ee4:	f992 3000 	ldrsb.w	r3, [r2]
34003ee8:	700b      	strb	r3, [r1, #0]
    *out_target++ = *in_target++;
34003eea:	f992 3001 	ldrsb.w	r3, [r2, #1]
34003eee:	704b      	strb	r3, [r1, #1]
    *out_target++ = *in_target++;
34003ef0:	f992 3002 	ldrsb.w	r3, [r2, #2]
34003ef4:	708b      	strb	r3, [r1, #2]
    return;
34003ef6:	e7e2      	b.n	34003ebe <__ll_aton_lib_copy_element.isra.0+0x16>
    LL_ATON_ASSERT((((uintptr_t)in_target) % 4) == 0);
34003ef8:	0790      	lsls	r0, r2, #30
34003efa:	d003      	beq.n	34003f04 <__ll_aton_lib_copy_element.isra.0+0x5c>
34003efc:	214a      	movs	r1, #74	@ 0x4a
34003efe:	4b0c      	ldr	r3, [pc, #48]	@ (34003f30 <__ll_aton_lib_copy_element.isra.0+0x88>)
34003f00:	4a08      	ldr	r2, [pc, #32]	@ (34003f24 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003f02:	e7e2      	b.n	34003eca <__ll_aton_lib_copy_element.isra.0+0x22>
    LL_ATON_ASSERT((((uintptr_t)out_target) % 4) == 0);
34003f04:	078b      	lsls	r3, r1, #30
34003f06:	d003      	beq.n	34003f10 <__ll_aton_lib_copy_element.isra.0+0x68>
34003f08:	214b      	movs	r1, #75	@ 0x4b
34003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (34003f34 <__ll_aton_lib_copy_element.isra.0+0x8c>)
34003f0c:	4a05      	ldr	r2, [pc, #20]	@ (34003f24 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003f0e:	e7dc      	b.n	34003eca <__ll_aton_lib_copy_element.isra.0+0x22>
    *((int32_t *)out_target) = *((int32_t *)in_target);
34003f10:	6813      	ldr	r3, [r2, #0]
34003f12:	600b      	str	r3, [r1, #0]
    return;
34003f14:	e7d3      	b.n	34003ebe <__ll_aton_lib_copy_element.isra.0+0x16>
    LL_ATON_ASSERT(false);
34003f16:	2151      	movs	r1, #81	@ 0x51
34003f18:	4b07      	ldr	r3, [pc, #28]	@ (34003f38 <__ll_aton_lib_copy_element.isra.0+0x90>)
34003f1a:	4a02      	ldr	r2, [pc, #8]	@ (34003f24 <__ll_aton_lib_copy_element.isra.0+0x7c>)
34003f1c:	e7d5      	b.n	34003eca <__ll_aton_lib_copy_element.isra.0+0x22>
34003f1e:	bf00      	nop
34003f20:	34026cf7 	.word	0x34026cf7
34003f24:	3402d4ce 	.word	0x3402d4ce
34003f28:	34026c6b 	.word	0x34026c6b
34003f2c:	34026d19 	.word	0x34026d19
34003f30:	34026d3c 	.word	0x34026d3c
34003f34:	34026d5e 	.word	0x34026d5e
34003f38:	34026d17 	.word	0x34026d17

34003f3c <__ll_aton_lib_transpose>:
{
34003f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __ll_stack_lnklst_t linked_stack_list = {.back_link = back_link, .axis = curr_in_axis, .index = 0};
34003f40:	2400      	movs	r4, #0
  if (curr_in_axis < (common_params->rank - 1))
34003f42:	f8d3 8000 	ldr.w	r8, [r3]
{
34003f46:	461d      	mov	r5, r3
  if (curr_in_axis < (common_params->rank - 1))
34003f48:	f108 33ff 	add.w	r3, r8, #4294967295
{
34003f4c:	b085      	sub	sp, #20
  if (curr_in_axis < (common_params->rank - 1))
34003f4e:	4283      	cmp	r3, r0
{
34003f50:	460e      	mov	r6, r1
  __ll_stack_lnklst_t linked_stack_list = {.back_link = back_link, .axis = curr_in_axis, .index = 0};
34003f52:	e9cd 2001 	strd	r2, r0, [sp, #4]
34003f56:	9403      	str	r4, [sp, #12]
  if (curr_in_axis < (common_params->rank - 1))
34003f58:	d914      	bls.n	34003f84 <__ll_aton_lib_transpose+0x48>
      __ll_aton_lib_transpose(curr_in_axis + 1, inner_out_axis, &linked_stack_list, common_params);
34003f5a:	1c44      	adds	r4, r0, #1
    for (; linked_stack_list.index < common_params->in_shape_aton[linked_stack_list.axis]; linked_stack_list.index++)
34003f5c:	9a02      	ldr	r2, [sp, #8]
34003f5e:	68ab      	ldr	r3, [r5, #8]
34003f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34003f64:	9a03      	ldr	r2, [sp, #12]
34003f66:	429a      	cmp	r2, r3
34003f68:	d302      	bcc.n	34003f70 <__ll_aton_lib_transpose+0x34>
}
34003f6a:	b005      	add	sp, #20
34003f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __ll_aton_lib_transpose(curr_in_axis + 1, inner_out_axis, &linked_stack_list, common_params);
34003f70:	462b      	mov	r3, r5
34003f72:	4631      	mov	r1, r6
34003f74:	4620      	mov	r0, r4
34003f76:	aa01      	add	r2, sp, #4
34003f78:	f7ff ffe0 	bl	34003f3c <__ll_aton_lib_transpose>
    for (; linked_stack_list.index < common_params->in_shape_aton[linked_stack_list.axis]; linked_stack_list.index++)
34003f7c:	9b03      	ldr	r3, [sp, #12]
34003f7e:	3301      	adds	r3, #1
34003f80:	9303      	str	r3, [sp, #12]
34003f82:	e7eb      	b.n	34003f5c <__ll_aton_lib_transpose+0x20>
    LL_ATON_ASSERT(curr_in_axis == (common_params->rank - 1));
34003f84:	d006      	beq.n	34003f94 <__ll_aton_lib_transpose+0x58>
34003f86:	f240 3192 	movw	r1, #914	@ 0x392
34003f8a:	4b2a      	ldr	r3, [pc, #168]	@ (34004034 <__ll_aton_lib_transpose+0xf8>)
34003f8c:	4a2a      	ldr	r2, [pc, #168]	@ (34004038 <__ll_aton_lib_transpose+0xfc>)
  LL_ATON_ASSERT(false); // should never be reached
34003f8e:	482b      	ldr	r0, [pc, #172]	@ (3400403c <__ll_aton_lib_transpose+0x100>)
34003f90:	f01b f918 	bl	3401f1c4 <__assert_func>
  int8_t *target = common_params->out_tensor;
34003f94:	69ef      	ldr	r7, [r5, #28]
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003f96:	45a0      	cmp	r8, r4
34003f98:	d115      	bne.n	34003fc6 <__ll_aton_lib_transpose+0x8a>
  const int8_t *target = common_params->in_tensor;
34003f9a:	f8d5 8018 	ldr.w	r8, [r5, #24]
  for (__ll_stack_lnklst_t *elem = linked_stack_list->back_link; elem != NULL; elem = elem->back_link)
34003f9e:	bb5a      	cbnz	r2, 34003ff8 <__ll_aton_lib_transpose+0xbc>
    uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
34003fa0:	692b      	ldr	r3, [r5, #16]
    const uint32_t end_index = common_params->in_shape_aton[(common_params->rank - 1)];
34003fa2:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
    uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
34003fa6:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
    const uint32_t end_index = common_params->in_shape_aton[(common_params->rank - 1)];
34003faa:	68ab      	ldr	r3, [r5, #8]
34003fac:	3c01      	subs	r4, #1
34003fae:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
    const uint8_t byte_size = common_params->byte_size;
34003fb2:	7d2c      	ldrb	r4, [r5, #20]
    if (byte_size != out_axes_offset)
34003fb4:	42b4      	cmp	r4, r6
34003fb6:	d139      	bne.n	3400402c <__ll_aton_lib_transpose+0xf0>
      memcpy(out_target, in_target, size_in_bytes);
34003fb8:	4641      	mov	r1, r8
34003fba:	4638      	mov	r0, r7
34003fbc:	fb09 f204 	mul.w	r2, r9, r4
34003fc0:	f01c fbd1 	bl	34020766 <memcpy>
}
34003fc4:	e7d1      	b.n	34003f6a <__ll_aton_lib_transpose+0x2e>
    if (output_axis == inner_out_axis)
34003fc6:	42a6      	cmp	r6, r4
34003fc8:	d00c      	beq.n	34003fe4 <__ll_aton_lib_transpose+0xa8>
    uint32_t axis_size = common_params->out_axis_off[output_axis];
34003fca:	692b      	ldr	r3, [r5, #16]
34003fcc:	f853 c024 	ldr.w	ip, [r3, r4, lsl #2]
  uint32_t input_axis = (uint32_t)perm[output_axis];
34003fd0:	686b      	ldr	r3, [r5, #4]
34003fd2:	f813 e004 	ldrb.w	lr, [r3, r4]
34003fd6:	ab01      	add	r3, sp, #4
    if (elem->axis == input_axis)
34003fd8:	6859      	ldr	r1, [r3, #4]
34003fda:	458e      	cmp	lr, r1
34003fdc:	d104      	bne.n	34003fe8 <__ll_aton_lib_transpose+0xac>
    target += (input_index * axis_size);
34003fde:	689b      	ldr	r3, [r3, #8]
34003fe0:	fb03 770c 	mla	r7, r3, ip, r7
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34003fe4:	3401      	adds	r4, #1
34003fe6:	e7d6      	b.n	34003f96 <__ll_aton_lib_transpose+0x5a>
  for (; elem != NULL; elem = elem->back_link)
34003fe8:	681b      	ldr	r3, [r3, #0]
34003fea:	2b00      	cmp	r3, #0
34003fec:	d1f4      	bne.n	34003fd8 <__ll_aton_lib_transpose+0x9c>
  LL_ATON_ASSERT(false); // should never be reached
34003fee:	f240 3159 	movw	r1, #857	@ 0x359
34003ff2:	4b13      	ldr	r3, [pc, #76]	@ (34004040 <__ll_aton_lib_transpose+0x104>)
34003ff4:	4a13      	ldr	r2, [pc, #76]	@ (34004044 <__ll_aton_lib_transpose+0x108>)
34003ff6:	e7ca      	b.n	34003f8e <__ll_aton_lib_transpose+0x52>
    LL_ATON_ASSERT(elem->axis < (common_params->rank - 1));
34003ff8:	6853      	ldr	r3, [r2, #4]
34003ffa:	4298      	cmp	r0, r3
34003ffc:	d804      	bhi.n	34004008 <__ll_aton_lib_transpose+0xcc>
34003ffe:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34004002:	4b11      	ldr	r3, [pc, #68]	@ (34004048 <__ll_aton_lib_transpose+0x10c>)
34004004:	4a11      	ldr	r2, [pc, #68]	@ (3400404c <__ll_aton_lib_transpose+0x110>)
34004006:	e7c2      	b.n	34003f8e <__ll_aton_lib_transpose+0x52>
    uint32_t axis_size = common_params->in_axis_off[elem->axis];
34004008:	68e9      	ldr	r1, [r5, #12]
    target += (elem->index * axis_size);
3400400a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
3400400e:	6893      	ldr	r3, [r2, #8]
  for (__ll_stack_lnklst_t *elem = linked_stack_list->back_link; elem != NULL; elem = elem->back_link)
34004010:	6812      	ldr	r2, [r2, #0]
    target += (elem->index * axis_size);
34004012:	fb03 8801 	mla	r8, r3, r1, r8
  for (__ll_stack_lnklst_t *elem = linked_stack_list->back_link; elem != NULL; elem = elem->back_link)
34004016:	e7c2      	b.n	34003f9e <__ll_aton_lib_transpose+0x62>
        __ll_aton_lib_copy_element(byte_size, linked_stack_list.index, out_target, in_target);
34004018:	fb01 8204 	mla	r2, r1, r4, r8
3400401c:	4620      	mov	r0, r4
3400401e:	fb06 7101 	mla	r1, r6, r1, r7
34004022:	f7ff ff41 	bl	34003ea8 <__ll_aton_lib_copy_element.isra.0>
      for (; linked_stack_list.index < end_index; linked_stack_list.index++)
34004026:	9b03      	ldr	r3, [sp, #12]
34004028:	3301      	adds	r3, #1
3400402a:	9303      	str	r3, [sp, #12]
3400402c:	9903      	ldr	r1, [sp, #12]
3400402e:	4549      	cmp	r1, r9
34004030:	d3f2      	bcc.n	34004018 <__ll_aton_lib_transpose+0xdc>
34004032:	e79a      	b.n	34003f6a <__ll_aton_lib_transpose+0x2e>
34004034:	34026d81 	.word	0x34026d81
34004038:	3402d45c 	.word	0x3402d45c
3400403c:	34026c6b 	.word	0x34026c6b
34004040:	34026d17 	.word	0x34026d17
34004044:	3402d43f 	.word	0x3402d43f
34004048:	34026dab 	.word	0x34026dab
3400404c:	3402d420 	.word	0x3402d420

34004050 <LL_ATON_LIB_Transpose>:
}

int LL_ATON_LIB_Transpose(const LL_LIB_TensorShape_TypeDef *input, const uint32_t *input_axes_offsets,
                          const LL_LIB_TensorShape_TypeDef *output, const uint32_t *output_axes_offsets,
                          const uint8_t *perm)
{
34004050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34004054:	461f      	mov	r7, r3
  if (input->ndims <= 2)
34004056:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
{
3400405a:	4616      	mov	r6, r2
  if (input->ndims <= 2)
3400405c:	2b02      	cmp	r3, #2
{
3400405e:	b095      	sub	sp, #84	@ 0x54
  if (input->ndims <= 2)
34004060:	d80a      	bhi.n	34004078 <LL_ATON_LIB_Transpose+0x28>
  {
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34004062:	f240 4119 	movw	r1, #1049	@ 0x419
34004066:	4a66      	ldr	r2, [pc, #408]	@ (34004200 <LL_ATON_LIB_Transpose+0x1b0>)
  }

  if (input->ndims != output->ndims)
  {
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34004068:	200f      	movs	r0, #15
3400406a:	f7ff fa99 	bl	340035a0 <__ll_lib_error>
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
3400406e:	f06f 0001 	mvn.w	r0, #1
    uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(&common_params);
    __ll_aton_lib_transpose(0, inner_out_axis, NULL, &common_params);
  }

  return LL_ATON_OK;
}
34004072:	b015      	add	sp, #84	@ 0x54
34004074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (input->ndims != output->ndims)
34004078:	f892 9027 	ldrb.w	r9, [r2, #39]	@ 0x27
3400407c:	4599      	cmp	r9, r3
3400407e:	d003      	beq.n	34004088 <LL_ATON_LIB_Transpose+0x38>
    __LL_LIB_ERROR(_ERR_RANK, LL_ATON_INVALID_PARAM);
34004080:	f240 411e 	movw	r1, #1054	@ 0x41e
34004084:	4a5e      	ldr	r2, [pc, #376]	@ (34004200 <LL_ATON_LIB_Transpose+0x1b0>)
34004086:	e7ef      	b.n	34004068 <LL_ATON_LIB_Transpose+0x18>
  if (input->nbits != output->nbits)
34004088:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
3400408c:	f892 4028 	ldrb.w	r4, [r2, #40]	@ 0x28
34004090:	429c      	cmp	r4, r3
34004092:	d004      	beq.n	3400409e <LL_ATON_LIB_Transpose+0x4e>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
34004094:	f240 4123 	movw	r1, #1059	@ 0x423
34004098:	4a59      	ldr	r2, [pc, #356]	@ (34004200 <LL_ATON_LIB_Transpose+0x1b0>)
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
3400409a:	2006      	movs	r0, #6
3400409c:	e7e5      	b.n	3400406a <LL_ATON_LIB_Transpose+0x1a>
  if ((input->nbits < 8) || (input->nbits > 32))
3400409e:	f1a4 0308 	sub.w	r3, r4, #8
340040a2:	2b18      	cmp	r3, #24
340040a4:	d903      	bls.n	340040ae <LL_ATON_LIB_Transpose+0x5e>
    __LL_LIB_ERROR(_ERR_NBITS, LL_ATON_INVALID_PARAM);
340040a6:	f44f 6185 	mov.w	r1, #1064	@ 0x428
340040aa:	4a55      	ldr	r2, [pc, #340]	@ (34004200 <LL_ATON_LIB_Transpose+0x1b0>)
340040ac:	e7f5      	b.n	3400409a <LL_ATON_LIB_Transpose+0x4a>
  const __ll_transp_params_t common_params = {.perm = perm,
340040ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
                                              .in_shape_aton = input->shape,
340040b0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
                                              .byte_size = LL_LIB_NBYTES(input->nbits),
340040b2:	3407      	adds	r4, #7
  const __ll_transp_params_t common_params = {.perm = perm,
340040b4:	930d      	str	r3, [sp, #52]	@ 0x34
340040b6:	08e3      	lsrs	r3, r4, #3
340040b8:	9301      	str	r3, [sp, #4]
340040ba:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
340040be:	e9cd 510e 	strd	r5, r1, [sp, #56]	@ 0x38
340040c2:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
340040c6:	9710      	str	r7, [sp, #64]	@ 0x40
                                              .in_tensor = (int8_t *)LL_Buffer_addr_start(input),
340040c8:	f7ff feca 	bl	34003e60 <LL_Buffer_addr_start>
  const __ll_transp_params_t common_params = {.perm = perm,
340040cc:	9012      	str	r0, [sp, #72]	@ 0x48
                                              .out_tensor = (int8_t *)LL_Buffer_addr_start(output)};
340040ce:	4630      	mov	r0, r6
340040d0:	f7ff fec6 	bl	34003e60 <LL_Buffer_addr_start>
  if (input->ndims <= 4)
340040d4:	f1b9 0f04 	cmp.w	r9, #4
  const __ll_transp_params_t common_params = {.perm = perm,
340040d8:	9013      	str	r0, [sp, #76]	@ 0x4c
                                              .byte_size = LL_LIB_NBYTES(input->nbits),
340040da:	ea4f 08e4 	mov.w	r8, r4, asr #3
  uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(common_params);
340040de:	a80c      	add	r0, sp, #48	@ 0x30
  if (input->ndims <= 4)
340040e0:	f200 8084 	bhi.w	340041ec <LL_ATON_LIB_Transpose+0x19c>
  uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(common_params);
340040e4:	f7ff fec4 	bl	34003e70 <__ll_transp_get_inner_out_axis>
  uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
340040e8:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
340040ec:	f1b9 0f04 	cmp.w	r9, #4
  uint32_t out_axes_offset = common_params->out_axis_off[inner_out_axis];
340040f0:	9303      	str	r3, [sp, #12]
340040f2:	e9d5 2300 	ldrd	r2, r3, [r5]
  uint32_t size_h = (common_params->rank == 4) ? common_params->in_shape_aton[2] : common_params->in_shape_aton[1];
340040f6:	bf1c      	itt	ne
340040f8:	e9cd 2304 	strdne	r2, r3, [sp, #16]
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
340040fc:	2301      	movne	r3, #1
  for (uint32_t index_n = 0; index_n < size_n; index_n++)
340040fe:	f04f 0600 	mov.w	r6, #0
34004102:	68ac      	ldr	r4, [r5, #8]
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
34004104:	bf12      	itee	ne
34004106:	9306      	strne	r3, [sp, #24]
  uint32_t size_h = (common_params->rank == 4) ? common_params->in_shape_aton[2] : common_params->in_shape_aton[1];
34004108:	e9cd 3404 	strdeq	r3, r4, [sp, #16]
  uint32_t size_w = (common_params->rank == 4) ? common_params->in_shape_aton[3] : common_params->in_shape_aton[2];
3400410c:	68ec      	ldreq	r4, [r5, #12]
  uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(common_params);
3400410e:	9002      	str	r0, [sp, #8]
          uint32_t size_in_bytes = size_w * byte_size; // `byte_size == out_axes_offset`
34004110:	fb04 f308 	mul.w	r3, r4, r8
  uint32_t size_n = (common_params->rank == 4) ? common_params->in_shape_aton[0] : 1;
34004114:	bf08      	it	eq
34004116:	9206      	streq	r2, [sp, #24]
          uint32_t size_in_bytes = size_w * byte_size; // `byte_size == out_axes_offset`
34004118:	9307      	str	r3, [sp, #28]
  for (uint32_t index_n = 0; index_n < size_n; index_n++)
3400411a:	9b06      	ldr	r3, [sp, #24]
3400411c:	42b3      	cmp	r3, r6
3400411e:	d163      	bne.n	340041e8 <LL_ATON_LIB_Transpose+0x198>
  return LL_ATON_OK;
34004120:	2000      	movs	r0, #0
34004122:	e7a6      	b.n	34004072 <LL_ATON_LIB_Transpose+0x22>
        uint32_t *indexes = (common_params->rank == 4) ? &indexes_array[0] : &indexes_array[1];
34004124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34004126:	a909      	add	r1, sp, #36	@ 0x24
34004128:	2b04      	cmp	r3, #4
3400412a:	aa0a      	add	r2, sp, #40	@ 0x28
3400412c:	bf0c      	ite	eq
3400412e:	468c      	moveq	ip, r1
34004130:	4694      	movne	ip, r2
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
34004132:	2100      	movs	r1, #0
        uint32_t indexes_array[] = {index_n, index_c, index_h};
34004134:	e9cd 6709 	strd	r6, r7, [sp, #36]	@ 0x24
  int8_t *target = common_params->out_tensor;
34004138:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    LL_ATON_ASSERT((uint32_t)common_params->perm[output_axis] < (common_params->rank - 1));
3400413a:	f8dd e034 	ldr.w	lr, [sp, #52]	@ 0x34
    uint32_t axis_size = common_params->out_axis_off[output_axis];
3400413e:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
        uint32_t indexes_array[] = {index_n, index_c, index_h};
34004142:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
    LL_ATON_ASSERT((uint32_t)common_params->perm[output_axis] < (common_params->rank - 1));
34004146:	1e5d      	subs	r5, r3, #1
34004148:	f103 0b01 	add.w	fp, r3, #1
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
3400414c:	f1bb 0b01 	subs.w	fp, fp, #1
34004150:	d11b      	bne.n	3400418a <LL_ATON_LIB_Transpose+0x13a>
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
34004152:	2200      	movs	r2, #0
  const int8_t *target = common_params->in_tensor;
34004154:	9912      	ldr	r1, [sp, #72]	@ 0x48
    uint32_t axis_size = common_params->in_axis_off[axis];
34004156:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
3400415a:	f105 0a01 	add.w	sl, r5, #1
3400415e:	f1ba 0a01 	subs.w	sl, sl, #1
34004162:	d128      	bne.n	340041b6 <LL_ATON_LIB_Transpose+0x166>
        if (byte_size != out_axes_offset)
34004164:	9b03      	ldr	r3, [sp, #12]
34004166:	4543      	cmp	r3, r8
34004168:	d037      	beq.n	340041da <LL_ATON_LIB_Transpose+0x18a>
3400416a:	4682      	mov	sl, r0
3400416c:	468b      	mov	fp, r1
          for (uint32_t index_w = 0; index_w < size_w; index_w++)
3400416e:	2500      	movs	r5, #0
34004170:	42a5      	cmp	r5, r4
34004172:	d128      	bne.n	340041c6 <LL_ATON_LIB_Transpose+0x176>
      for (uint32_t index_h = 0; index_h < size_h; index_h++)
34004174:	f109 0901 	add.w	r9, r9, #1
34004178:	9b05      	ldr	r3, [sp, #20]
3400417a:	454b      	cmp	r3, r9
3400417c:	d1d2      	bne.n	34004124 <LL_ATON_LIB_Transpose+0xd4>
    for (uint32_t index_c = 0; index_c < size_c; index_c++)
3400417e:	3701      	adds	r7, #1
34004180:	9b04      	ldr	r3, [sp, #16]
34004182:	42bb      	cmp	r3, r7
34004184:	d12d      	bne.n	340041e2 <LL_ATON_LIB_Transpose+0x192>
  for (uint32_t index_n = 0; index_n < size_n; index_n++)
34004186:	3601      	adds	r6, #1
34004188:	e7c7      	b.n	3400411a <LL_ATON_LIB_Transpose+0xca>
    if (output_axis == inner_out_axis)
3400418a:	9a02      	ldr	r2, [sp, #8]
3400418c:	428a      	cmp	r2, r1
3400418e:	d010      	beq.n	340041b2 <LL_ATON_LIB_Transpose+0x162>
    LL_ATON_ASSERT((uint32_t)common_params->perm[output_axis] < (common_params->rank - 1));
34004190:	f81e 2001 	ldrb.w	r2, [lr, r1]
34004194:	4295      	cmp	r5, r2
34004196:	d806      	bhi.n	340041a6 <LL_ATON_LIB_Transpose+0x156>
34004198:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
3400419c:	4b19      	ldr	r3, [pc, #100]	@ (34004204 <LL_ATON_LIB_Transpose+0x1b4>)
3400419e:	4a1a      	ldr	r2, [pc, #104]	@ (34004208 <LL_ATON_LIB_Transpose+0x1b8>)
340041a0:	481a      	ldr	r0, [pc, #104]	@ (3400420c <LL_ATON_LIB_Transpose+0x1bc>)
340041a2:	f01b f80f 	bl	3401f1c4 <__assert_func>
    target += (input_index * axis_size);
340041a6:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
340041aa:	f85a 3021 	ldr.w	r3, [sl, r1, lsl #2]
340041ae:	fb03 0002 	mla	r0, r3, r2, r0
  for (uint32_t output_axis = 0; output_axis < common_params->rank; output_axis++)
340041b2:	3101      	adds	r1, #1
340041b4:	e7ca      	b.n	3400414c <LL_ATON_LIB_Transpose+0xfc>
    target += (indexes[axis] * axis_size);
340041b6:	f85e 5022 	ldr.w	r5, [lr, r2, lsl #2]
340041ba:	f85c 3022 	ldr.w	r3, [ip, r2, lsl #2]
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
340041be:	3201      	adds	r2, #1
    target += (indexes[axis] * axis_size);
340041c0:	fb03 1105 	mla	r1, r3, r5, r1
  for (uint32_t axis = 0; axis < (common_params->rank - 1); axis++)
340041c4:	e7cb      	b.n	3400415e <LL_ATON_LIB_Transpose+0x10e>
            __ll_aton_lib_copy_element(byte_size, index_w, out_target, in_target);
340041c6:	465a      	mov	r2, fp
340041c8:	4651      	mov	r1, sl
340041ca:	9801      	ldr	r0, [sp, #4]
340041cc:	f7ff fe6c 	bl	34003ea8 <__ll_aton_lib_copy_element.isra.0>
          for (uint32_t index_w = 0; index_w < size_w; index_w++)
340041d0:	9b03      	ldr	r3, [sp, #12]
340041d2:	3501      	adds	r5, #1
340041d4:	449a      	add	sl, r3
340041d6:	44c3      	add	fp, r8
340041d8:	e7ca      	b.n	34004170 <LL_ATON_LIB_Transpose+0x120>
          memcpy(base_out_target, base_in_target, size_in_bytes);
340041da:	9a07      	ldr	r2, [sp, #28]
340041dc:	f01c fac3 	bl	34020766 <memcpy>
340041e0:	e7c8      	b.n	34004174 <LL_ATON_LIB_Transpose+0x124>
      for (uint32_t index_h = 0; index_h < size_h; index_h++)
340041e2:	f04f 0900 	mov.w	r9, #0
340041e6:	e7c7      	b.n	34004178 <LL_ATON_LIB_Transpose+0x128>
    for (uint32_t index_c = 0; index_c < size_c; index_c++)
340041e8:	2700      	movs	r7, #0
340041ea:	e7c9      	b.n	34004180 <LL_ATON_LIB_Transpose+0x130>
    uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(&common_params);
340041ec:	f7ff fe40 	bl	34003e70 <__ll_transp_get_inner_out_axis>
    __ll_aton_lib_transpose(0, inner_out_axis, NULL, &common_params);
340041f0:	2200      	movs	r2, #0
    uint32_t inner_out_axis = __ll_transp_get_inner_out_axis(&common_params);
340041f2:	4601      	mov	r1, r0
    __ll_aton_lib_transpose(0, inner_out_axis, NULL, &common_params);
340041f4:	ab0c      	add	r3, sp, #48	@ 0x30
340041f6:	4610      	mov	r0, r2
340041f8:	f7ff fea0 	bl	34003f3c <__ll_aton_lib_transpose>
340041fc:	e790      	b.n	34004120 <LL_ATON_LIB_Transpose+0xd0>
340041fe:	bf00      	nop
34004200:	3402d4b8 	.word	0x3402d4b8
34004204:	34026dd2 	.word	0x34026dd2
34004208:	3402d493 	.word	0x3402d493
3400420c:	34026c6b 	.word	0x34026c6b

34004210 <aton_osal_freertos_init>:

/**
 * @brief Initialize RTOS OSAL implementation
 */
void LL_ATON_OSAL_INIT()
{
34004210:	b513      	push	{r0, r1, r4, lr}

  /*** Helper inline functions ***/
  static inline _ReturnType_ _my_xSemaphoreCreateBinaryStatic(SemaphoreHandle_t *dao_addr,
                                                              StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateBinaryStatic(static_buffer);
34004212:	2200      	movs	r2, #0
34004214:	2403      	movs	r4, #3
34004216:	4611      	mov	r1, r2
34004218:	2001      	movs	r0, #1
3400421a:	4b1f      	ldr	r3, [pc, #124]	@ (34004298 <aton_osal_freertos_init+0x88>)
3400421c:	9400      	str	r4, [sp, #0]
3400421e:	f006 f8a7 	bl	3400a370 <xQueueGenericCreateStatic>
    if (ret != _NullHandle_)
34004222:	b928      	cbnz	r0, 34004230 <aton_osal_freertos_init+0x20>
  /* create main "deferred ATON owner" mechanism mutex */
  _ReturnType_ ret = _CreateDaoMutexNoWaiters_(
      _dao_mutex,
      _dao_mutex_buffer); // no thread will ever wait on this "conceptional" mutex
                          // (so priority inheritance - as would come with a "real" mutex - is not needed)
  assert(ret == _OsTrue_);
34004224:	213d      	movs	r1, #61	@ 0x3d
34004226:	4b1d      	ldr	r3, [pc, #116]	@ (3400429c <aton_osal_freertos_init+0x8c>)
34004228:	4a1d      	ldr	r2, [pc, #116]	@ (340042a0 <aton_osal_freertos_init+0x90>)
  _MakeDaoMutexNoWaitersAvailable_(_dao_mutex); // make it available

  /* create "deferred ATON owner" mechanism semaphore */
  ret = _CreateDaoWaitQueue_(_dao_wait_queue, _dao_wait_queue_buffer);
  assert(ret == _OsTrue_);
3400422a:	481e      	ldr	r0, [pc, #120]	@ (340042a4 <aton_osal_freertos_init+0x94>)
3400422c:	f01a ffca 	bl	3401f1c4 <__assert_func>
  _MakeDaoMutexNoWaitersAvailable_(_dao_mutex); // make it available
34004230:	2300      	movs	r3, #0
    {
      *dao_addr = ret;
34004232:	4a1d      	ldr	r2, [pc, #116]	@ (340042a8 <aton_osal_freertos_init+0x98>)
34004234:	4619      	mov	r1, r3
34004236:	6010      	str	r0, [r2, #0]
34004238:	461a      	mov	r2, r3
3400423a:	f006 f8f5 	bl	3400a428 <xQueueGenericSend>
    SemaphoreHandle_t ret = xSemaphoreCreateBinaryStatic(static_buffer);
3400423e:	2200      	movs	r2, #0
34004240:	2001      	movs	r0, #1
34004242:	4611      	mov	r1, r2
34004244:	4b19      	ldr	r3, [pc, #100]	@ (340042ac <aton_osal_freertos_init+0x9c>)
34004246:	9400      	str	r4, [sp, #0]
34004248:	f006 f892 	bl	3400a370 <xQueueGenericCreateStatic>
    if (ret != _NullHandle_)
3400424c:	b160      	cbz	r0, 34004268 <aton_osal_freertos_init+0x58>
      *dao_addr = ret;
3400424e:	4b18      	ldr	r3, [pc, #96]	@ (340042b0 <aton_osal_freertos_init+0xa0>)
  }

  static inline _ReturnType_ _my_xSemaphoreCreateCountingStatic(SemaphoreHandle_t *dao_addr,
                                                                StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateCountingStatic(0xFFFFFFFF, 0, static_buffer);
34004250:	2100      	movs	r1, #0
      *dao_addr = ret;
34004252:	6018      	str	r0, [r3, #0]
    SemaphoreHandle_t ret = xSemaphoreCreateCountingStatic(0xFFFFFFFF, 0, static_buffer);
34004254:	4a17      	ldr	r2, [pc, #92]	@ (340042b4 <aton_osal_freertos_init+0xa4>)
34004256:	f04f 30ff 	mov.w	r0, #4294967295
3400425a:	f006 f8c5 	bl	3400a3e8 <xQueueCreateCountingSemaphoreStatic>
    if (ret != _NullHandle_)
3400425e:	b938      	cbnz	r0, 34004270 <aton_osal_freertos_init+0x60>
  _MakeDaoWaitQueueUnavailable_(_dao_wait_queue); // make it un-available

  /* create WFE semaphore */
  ret = _CreateWfeSemaphore_(_wfe_sem, _wfe_sem_buffer);
  assert(ret == _OsTrue_);
34004260:	2147      	movs	r1, #71	@ 0x47
34004262:	4b0e      	ldr	r3, [pc, #56]	@ (3400429c <aton_osal_freertos_init+0x8c>)
34004264:	4a0e      	ldr	r2, [pc, #56]	@ (340042a0 <aton_osal_freertos_init+0x90>)
34004266:	e7e0      	b.n	3400422a <aton_osal_freertos_init+0x1a>
  assert(ret == _OsTrue_);
34004268:	2142      	movs	r1, #66	@ 0x42
3400426a:	4b0c      	ldr	r3, [pc, #48]	@ (3400429c <aton_osal_freertos_init+0x8c>)
3400426c:	4a0c      	ldr	r2, [pc, #48]	@ (340042a0 <aton_osal_freertos_init+0x90>)
3400426e:	e7dc      	b.n	3400422a <aton_osal_freertos_init+0x1a>
    {
      *dao_addr = ret;
34004270:	4b11      	ldr	r3, [pc, #68]	@ (340042b8 <aton_osal_freertos_init+0xa8>)
  }

  static inline _ReturnType_ _my_xSemaphoreCreateMutexStatic(SemaphoreHandle_t *dao_addr,
                                                             StaticSemaphore_t *static_buffer)
  {
    SemaphoreHandle_t ret = xSemaphoreCreateMutexStatic(static_buffer);
34004272:	4912      	ldr	r1, [pc, #72]	@ (340042bc <aton_osal_freertos_init+0xac>)
      *dao_addr = ret;
34004274:	6018      	str	r0, [r3, #0]
    SemaphoreHandle_t ret = xSemaphoreCreateMutexStatic(static_buffer);
34004276:	2001      	movs	r0, #1
34004278:	f006 f978 	bl	3400a56c <xQueueCreateMutexStatic>
    if (ret != _NullHandle_)
3400427c:	b918      	cbnz	r0, 34004286 <aton_osal_freertos_init+0x76>
  _MakeWfeSemaphoreUnavailable_(_wfe_sem); // make it un-available

  /* create cache mutex */
  ret = _CreateCacheMutex_(_cache_mutex, _cache_mutex_buffer);
  assert(ret == _OsTrue_);
3400427e:	214c      	movs	r1, #76	@ 0x4c
34004280:	4b06      	ldr	r3, [pc, #24]	@ (3400429c <aton_osal_freertos_init+0x8c>)
34004282:	4a07      	ldr	r2, [pc, #28]	@ (340042a0 <aton_osal_freertos_init+0x90>)
34004284:	e7d1      	b.n	3400422a <aton_osal_freertos_init+0x1a>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34004286:	2250      	movs	r2, #80	@ 0x50
    {
      *dao_addr = ret;
34004288:	4b0d      	ldr	r3, [pc, #52]	@ (340042c0 <aton_osal_freertos_init+0xb0>)
3400428a:	6018      	str	r0, [r3, #0]
3400428c:	4b0d      	ldr	r3, [pc, #52]	@ (340042c4 <aton_osal_freertos_init+0xb4>)
3400428e:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
  _MakeCacheMutexAvailable_(_cache_mutex); // make it available

  /* Finalize IRQ handling (e.g. priority) */
  _FinalizeIRQHandling_();
}
34004292:	b002      	add	sp, #8
34004294:	bd10      	pop	{r4, pc}
34004296:	bf00      	nop
34004298:	3410db04 	.word	0x3410db04
3400429c:	34026e19 	.word	0x34026e19
340042a0:	3402d552 	.word	0x3402d552
340042a4:	34026e29 	.word	0x34026e29
340042a8:	3410da10 	.word	0x3410da10
340042ac:	3410dab4 	.word	0x3410dab4
340042b0:	3410da0c 	.word	0x3410da0c
340042b4:	3410da64 	.word	0x3410da64
340042b8:	3410da08 	.word	0x3410da08
340042bc:	3410da14 	.word	0x3410da14
340042c0:	3410da04 	.word	0x3410da04
340042c4:	e000e100 	.word	0xe000e100

340042c8 <aton_osal_freertos_deinit>:
 * @brief De-initialize RTOS OSAL implementation
 */
void LL_ATON_OSAL_DEINIT()
{
  _DeInitNonDao_(); // de-initialize non DAO part
}
340042c8:	4770      	bx	lr
	...

340042cc <aton_osal_freertos_lock>:
#ifndef LL_HAS_NO_ATON_OSAL_LOCK_NPU_CACHE
/**
 * @brief Lock cache mutex
 */
void LL_ATON_OSAL_LOCK_NPU_CACHE()
{
340042cc:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _GetCacheMutex_(_cache_mutex);
340042ce:	4b07      	ldr	r3, [pc, #28]	@ (340042ec <aton_osal_freertos_lock+0x20>)
340042d0:	f04f 31ff 	mov.w	r1, #4294967295
340042d4:	6818      	ldr	r0, [r3, #0]
340042d6:	f006 fa4b 	bl	3400a770 <xQueueSemaphoreTake>
  assert(ret == _OsTrue_);
340042da:	2801      	cmp	r0, #1
340042dc:	d005      	beq.n	340042ea <aton_osal_freertos_lock+0x1e>
340042de:	21e2      	movs	r1, #226	@ 0xe2
340042e0:	4b03      	ldr	r3, [pc, #12]	@ (340042f0 <aton_osal_freertos_lock+0x24>)
340042e2:	4a04      	ldr	r2, [pc, #16]	@ (340042f4 <aton_osal_freertos_lock+0x28>)
340042e4:	4804      	ldr	r0, [pc, #16]	@ (340042f8 <aton_osal_freertos_lock+0x2c>)
340042e6:	f01a ff6d 	bl	3401f1c4 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
340042ea:	bd08      	pop	{r3, pc}
340042ec:	3410da04 	.word	0x3410da04
340042f0:	34026e19 	.word	0x34026e19
340042f4:	3402d53a 	.word	0x3402d53a
340042f8:	34026e29 	.word	0x34026e29

340042fc <aton_osal_freertos_unlock>:

/**
 * @brief Unlock cache mutex
 */
void LL_ATON_OSAL_UNLOCK_NPU_CACHE()
{
340042fc:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _ReleaseCacheMutex_(_cache_mutex);
340042fe:	2300      	movs	r3, #0
34004300:	4807      	ldr	r0, [pc, #28]	@ (34004320 <aton_osal_freertos_unlock+0x24>)
34004302:	461a      	mov	r2, r3
34004304:	4619      	mov	r1, r3
34004306:	6800      	ldr	r0, [r0, #0]
34004308:	f006 f88e 	bl	3400a428 <xQueueGenericSend>
  assert(ret == _OsTrue_);
3400430c:	2801      	cmp	r0, #1
3400430e:	d005      	beq.n	3400431c <aton_osal_freertos_unlock+0x20>
34004310:	21ee      	movs	r1, #238	@ 0xee
34004312:	4b04      	ldr	r3, [pc, #16]	@ (34004324 <aton_osal_freertos_unlock+0x28>)
34004314:	4a04      	ldr	r2, [pc, #16]	@ (34004328 <aton_osal_freertos_unlock+0x2c>)
34004316:	4805      	ldr	r0, [pc, #20]	@ (3400432c <aton_osal_freertos_unlock+0x30>)
34004318:	f01a ff54 	bl	3401f1c4 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
3400431c:	bd08      	pop	{r3, pc}
3400431e:	bf00      	nop
34004320:	3410da04 	.word	0x3410da04
34004324:	34026e19 	.word	0x34026e19
34004328:	3402d520 	.word	0x3402d520
3400432c:	34026e29 	.word	0x34026e29

34004330 <aton_osal_freertos_wfe>:

/**
 * @brief Wait for event
 */
void LL_ATON_OSAL_WFE()
{
34004330:	b508      	push	{r3, lr}
  _ReturnType_ ret;

  ret = _GetWfeSemaphore_(_wfe_sem);
34004332:	4b08      	ldr	r3, [pc, #32]	@ (34004354 <aton_osal_freertos_wfe+0x24>)
34004334:	f04f 31ff 	mov.w	r1, #4294967295
34004338:	6818      	ldr	r0, [r3, #0]
3400433a:	f006 fa19 	bl	3400a770 <xQueueSemaphoreTake>
  assert(ret == _OsTrue_);
3400433e:	2801      	cmp	r0, #1
34004340:	d006      	beq.n	34004350 <aton_osal_freertos_wfe+0x20>
34004342:	f240 1115 	movw	r1, #277	@ 0x115
34004346:	4b04      	ldr	r3, [pc, #16]	@ (34004358 <aton_osal_freertos_wfe+0x28>)
34004348:	4a04      	ldr	r2, [pc, #16]	@ (3400435c <aton_osal_freertos_wfe+0x2c>)
3400434a:	4805      	ldr	r0, [pc, #20]	@ (34004360 <aton_osal_freertos_wfe+0x30>)
3400434c:	f01a ff3a 	bl	3401f1c4 <__assert_func>
  LL_ATON_LIB_UNUSED(ret);
}
34004350:	bd08      	pop	{r3, pc}
34004352:	bf00      	nop
34004354:	3410da08 	.word	0x3410da08
34004358:	34026e19 	.word	0x34026e19
3400435c:	3402d509 	.word	0x3402d509
34004360:	34026e29 	.word	0x34026e29

34004364 <aton_osal_freertos_signal_event>:
 * @note  Define macro `RTOS_HAS_NO_ISR_SIGNAL` if signalling is not performed from an interrupt handler.
 *        Calling this function within the same application from both ISR and normal contexts is currently not
 *        supported!
 */
void LL_ATON_OSAL_SIGNAL_EVENT()
{
34004364:	b507      	push	{r0, r1, r2, lr}
  assert(ret == _OsTrue_);
#else  // !RTOS_HAS_NO_ISR_SIGNAL
  _ReturnType_ task_woken;

  _HeadIsrCode_();
  ret = _ReleaseWfeSemaphoreISR_(
34004366:	4b0c      	ldr	r3, [pc, #48]	@ (34004398 <aton_osal_freertos_signal_event+0x34>)
34004368:	a901      	add	r1, sp, #4
3400436a:	6818      	ldr	r0, [r3, #0]
3400436c:	f006 f914 	bl	3400a598 <xQueueGiveFromISR>
      _wfe_sem, &task_woken); // assuming that this function gets called from within an interrupt handler
  assert(ret == _OsTrue_);
34004370:	2801      	cmp	r0, #1
34004372:	d006      	beq.n	34004382 <aton_osal_freertos_signal_event+0x1e>
34004374:	f44f 7196 	mov.w	r1, #300	@ 0x12c
34004378:	4b08      	ldr	r3, [pc, #32]	@ (3400439c <aton_osal_freertos_signal_event+0x38>)
3400437a:	4a09      	ldr	r2, [pc, #36]	@ (340043a0 <aton_osal_freertos_signal_event+0x3c>)
3400437c:	4809      	ldr	r0, [pc, #36]	@ (340043a4 <aton_osal_freertos_signal_event+0x40>)
3400437e:	f01a ff21 	bl	3401f1c4 <__assert_func>
  _TailIsrCode_(task_woken);
34004382:	9b01      	ldr	r3, [sp, #4]
34004384:	b12b      	cbz	r3, 34004392 <aton_osal_freertos_signal_event+0x2e>
34004386:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400438a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400438e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

  LL_ATON_LIB_UNUSED(task_woken);
#endif // !RTOS_HAS_NO_ISR_SIGNAL

  LL_ATON_LIB_UNUSED(ret);
}
34004392:	b003      	add	sp, #12
34004394:	f85d fb04 	ldr.w	pc, [sp], #4
34004398:	3410da08 	.word	0x3410da08
3400439c:	34026e19 	.word	0x34026e19
340043a0:	3402d4e9 	.word	0x3402d4e9
340043a4:	34026e29 	.word	0x34026e29

340043a8 <LL_ATON_RT_Main>:
 *                         and the network interface, or macros
 *                         `LL_ATON_DECLARE_NAMED_NN_INTERFACE()` & `LL_ATON_DECLARE_NAMED_NN_INSTANCE()` to
 *                         create/instantiate the objects separately.
 */
void LL_ATON_RT_Main(NN_Instance_TypeDef *network_instance)
{
340043a8:	b510      	push	{r4, lr}

  /*** Start of user initialization code ***/

  /*** End of user initialization code ***/

  LL_ATON_ASSERT(network_instance != NULL);
340043aa:	4604      	mov	r4, r0
340043ac:	b928      	cbnz	r0, 340043ba <LL_ATON_RT_Main+0x12>
340043ae:	212f      	movs	r1, #47	@ 0x2f
340043b0:	4b10      	ldr	r3, [pc, #64]	@ (340043f4 <LL_ATON_RT_Main+0x4c>)
340043b2:	4a11      	ldr	r2, [pc, #68]	@ (340043f8 <LL_ATON_RT_Main+0x50>)
  LL_ATON_ASSERT(network_instance->network != NULL);
340043b4:	4811      	ldr	r0, [pc, #68]	@ (340043fc <LL_ATON_RT_Main+0x54>)
340043b6:	f01a ff05 	bl	3401f1c4 <__assert_func>
340043ba:	6803      	ldr	r3, [r0, #0]
340043bc:	b91b      	cbnz	r3, 340043c6 <LL_ATON_RT_Main+0x1e>
340043be:	2130      	movs	r1, #48	@ 0x30
340043c0:	4b0f      	ldr	r3, [pc, #60]	@ (34004400 <LL_ATON_RT_Main+0x58>)
340043c2:	4a0d      	ldr	r2, [pc, #52]	@ (340043f8 <LL_ATON_RT_Main+0x50>)
340043c4:	e7f6      	b.n	340043b4 <LL_ATON_RT_Main+0xc>
  LL_ATON_RT_RuntimeInit();                  // Initialize runtime
340043c6:	f000 fa11 	bl	340047ec <LL_ATON_RT_RuntimeInit>
  LL_ATON_RT_Init_Network(network_instance); // Initialize passed network instance object
340043ca:	4620      	mov	r0, r4
340043cc:	f000 f9cc 	bl	34004768 <LL_ATON_RT_Init_Network>

  do
  {
    /* Execute first/next step of Cube.AI/ATON runtime */
    ll_aton_rt_ret = LL_ATON_RT_RunEpochBlock(network_instance);
340043d0:	4620      	mov	r0, r4
340043d2:	f000 fa89 	bl	340048e8 <LL_ATON_RT_RunEpochBlock>
    /*** Start of user event handling code ***/

    /*** End of user event handling code ***/

    /* Wait for next event */
    if (ll_aton_rt_ret == LL_ATON_RT_WFE)
340043d6:	2801      	cmp	r0, #1
340043d8:	d102      	bne.n	340043e0 <LL_ATON_RT_Main+0x38>
    { /*** subject to change to fit also user code requirements ***/
      LL_ATON_OSAL_WFE();
340043da:	f7ff ffa9 	bl	34004330 <aton_osal_freertos_wfe>
    }
  } while (ll_aton_rt_ret != LL_ATON_RT_DONE); /*** subject to change to fit also user code requirements ***/
340043de:	e7f7      	b.n	340043d0 <LL_ATON_RT_Main+0x28>
340043e0:	2802      	cmp	r0, #2
340043e2:	d1f5      	bne.n	340043d0 <LL_ATON_RT_Main+0x28>

  LL_ATON_RT_DeInit_Network(network_instance); // De-initialize the network instance object
340043e4:	4620      	mov	r0, r4
340043e6:	f000 f9e3 	bl	340047b0 <LL_ATON_RT_DeInit_Network>
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime

  /*** Start of user de-initialization code ***/

  /*** End of user de-initialization code ***/
}
340043ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LL_ATON_RT_RuntimeDeInit();                  // De-initialize runtime
340043ee:	f000 ba49 	b.w	34004884 <LL_ATON_RT_RuntimeDeInit>
340043f2:	bf00      	nop
340043f4:	34026e7c 	.word	0x34026e7c
340043f8:	3402d56a 	.word	0x3402d56a
340043fc:	34026e9c 	.word	0x34026e9c
34004400:	34026ee4 	.word	0x34026ee4

34004404 <__LL_ATON_RT_Init_Network>:
                          // wait for
  }
}

static inline void __LL_ATON_RT_Init_Network(NN_Instance_TypeDef *nn_instance)
{
34004404:	b510      	push	{r4, lr}
  /** Exit if `nn_instance` is equal to NULL **/
  if (nn_instance == NULL)
34004406:	4604      	mov	r4, r0
34004408:	b310      	cbz	r0, 34004450 <__LL_ATON_RT_Init_Network+0x4c>
  {
    return;
  }

  /** Exit if `nn_instance->network` is equal to NULL **/
  if (nn_instance->network == NULL)
3400440a:	6803      	ldr	r3, [r0, #0]
3400440c:	b303      	cbz	r3, 34004450 <__LL_ATON_RT_Init_Network+0x4c>
  else
  {
    eb_list = nn_instance->network->epoch_block_items();
  }
#else
  const LL_ATON_RT_EpochBlockItem_t *eb_list = nn_instance->network->epoch_block_items();
3400440e:	69db      	ldr	r3, [r3, #28]
34004410:	4798      	blx	r3
#endif
  nn_instance->exec_state.current_epoch_block = eb_list;
  nn_instance->exec_state.first_epoch_block = eb_list;
  nn_instance->exec_state.next_epoch_block = NULL;
34004412:	2300      	movs	r3, #0
  nn_instance->exec_state.current_epoch_block = eb_list;
34004414:	6060      	str	r0, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
34004416:	60a0      	str	r0, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
34004418:	60e3      	str	r3, [r4, #12]

  /* set saved context */
  nn_instance->exec_state.saved_current_epoch_block = NULL;
3400441a:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
3400441c:	6163      	str	r3, [r4, #20]
#ifndef NDEBUG
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
3400441e:	6863      	ldr	r3, [r4, #4]
  if (list != NULL)
34004420:	b9a3      	cbnz	r3, 3400444c <__LL_ATON_RT_Init_Network+0x48>
  int i = 0;
34004422:	461a      	mov	r2, r3
  nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.current_epoch_block);
34004424:	6262      	str	r2, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34004426:	2200      	movs	r2, #0
  nn_instance->exec_state.triggered_events = 0x0;
  nn_instance->exec_state.current_epoch_block_started = false;
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  /** Call epoch callback with callback type `LL_ATON_RT_Callbacktype_NN_Init` and network instance **/
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004428:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
3400442a:	62a2      	str	r2, [r4, #40]	@ 0x28
  nn_instance->exec_state.inference_started = false;
3400442c:	7622      	strb	r2, [r4, #24]
  nn_instance->exec_state.triggered_events = 0x0;
3400442e:	61e2      	str	r2, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
34004430:	f884 2020 	strb.w	r2, [r4, #32]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004434:	b163      	cbz	r3, 34004450 <__LL_ATON_RT_Init_Network+0x4c>
  {
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
34004436:	4621      	mov	r1, r4
  }
}
34004438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_Init, nn_instance, NULL);
3400443c:	2004      	movs	r0, #4
3400443e:	4718      	bx	r3
      list++;
34004440:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34004442:	3201      	adds	r2, #1
34004444:	8a19      	ldrh	r1, [r3, #16]
34004446:	0709      	lsls	r1, r1, #28
34004448:	d5fa      	bpl.n	34004440 <__LL_ATON_RT_Init_Network+0x3c>
3400444a:	e7eb      	b.n	34004424 <__LL_ATON_RT_Init_Network+0x20>
3400444c:	2201      	movs	r2, #1
3400444e:	e7f9      	b.n	34004444 <__LL_ATON_RT_Init_Network+0x40>
}
34004450:	bd10      	pop	{r4, pc}
	...

34004454 <__ll_clear_aton_owner>:
  {
34004454:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(current_owner == __ll_current_aton_ip_owner);
34004456:	4b09      	ldr	r3, [pc, #36]	@ (3400447c <__ll_clear_aton_owner+0x28>)
34004458:	681a      	ldr	r2, [r3, #0]
3400445a:	4282      	cmp	r2, r0
3400445c:	d005      	beq.n	3400446a <__ll_clear_aton_owner+0x16>
3400445e:	2142      	movs	r1, #66	@ 0x42
34004460:	4b07      	ldr	r3, [pc, #28]	@ (34004480 <__ll_clear_aton_owner+0x2c>)
34004462:	4a08      	ldr	r2, [pc, #32]	@ (34004484 <__ll_clear_aton_owner+0x30>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34004464:	4808      	ldr	r0, [pc, #32]	@ (34004488 <__ll_clear_aton_owner+0x34>)
34004466:	f01a fead 	bl	3401f1c4 <__assert_func>
3400446a:	4a08      	ldr	r2, [pc, #32]	@ (3400448c <__ll_clear_aton_owner+0x38>)
3400446c:	6812      	ldr	r2, [r2, #0]
3400446e:	b11a      	cbz	r2, 34004478 <__ll_clear_aton_owner+0x24>
34004470:	2146      	movs	r1, #70	@ 0x46
34004472:	4b07      	ldr	r3, [pc, #28]	@ (34004490 <__ll_clear_aton_owner+0x3c>)
34004474:	4a03      	ldr	r2, [pc, #12]	@ (34004484 <__ll_clear_aton_owner+0x30>)
34004476:	e7f5      	b.n	34004464 <__ll_clear_aton_owner+0x10>
    __ll_current_aton_ip_owner = NULL;
34004478:	601a      	str	r2, [r3, #0]
  }
3400447a:	bd08      	pop	{r3, pc}
3400447c:	3410db5c 	.word	0x3410db5c
34004480:	34026f0d 	.word	0x34026f0d
34004484:	3402d6c8 	.word	0x3402d6c8
34004488:	340267bc 	.word	0x340267bc
3400448c:	3410db58 	.word	0x3410db58
34004490:	34026f39 	.word	0x34026f39

34004494 <__LL_ATON_RT_SetWaitMask>:
  {
34004494:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34004496:	4b07      	ldr	r3, [pc, #28]	@ (340044b4 <__LL_ATON_RT_SetWaitMask+0x20>)
34004498:	681b      	ldr	r3, [r3, #0]
3400449a:	b92b      	cbnz	r3, 340044a8 <__LL_ATON_RT_SetWaitMask+0x14>
3400449c:	2175      	movs	r1, #117	@ 0x75
3400449e:	4b06      	ldr	r3, [pc, #24]	@ (340044b8 <__LL_ATON_RT_SetWaitMask+0x24>)
340044a0:	4a06      	ldr	r2, [pc, #24]	@ (340044bc <__LL_ATON_RT_SetWaitMask+0x28>)
340044a2:	4807      	ldr	r0, [pc, #28]	@ (340044c0 <__LL_ATON_RT_SetWaitMask+0x2c>)
340044a4:	f01a fe8e 	bl	3401f1c4 <__assert_func>
    __ll_current_wait_mask = wait_mask;
340044a8:	4b06      	ldr	r3, [pc, #24]	@ (340044c4 <__LL_ATON_RT_SetWaitMask+0x30>)
340044aa:	6018      	str	r0, [r3, #0]
    ATON_INTCTRL_STD_INTANDMSK_SET(~wait_mask);
340044ac:	43c0      	mvns	r0, r0
340044ae:	4b06      	ldr	r3, [pc, #24]	@ (340044c8 <__LL_ATON_RT_SetWaitMask+0x34>)
340044b0:	6258      	str	r0, [r3, #36]	@ 0x24
  }
340044b2:	bd08      	pop	{r3, pc}
340044b4:	3410db5c 	.word	0x3410db5c
340044b8:	34026792 	.word	0x34026792
340044bc:	3402d61b 	.word	0x3402d61b
340044c0:	340267bc 	.word	0x340267bc
340044c4:	3410db58 	.word	0x3410db58
340044c8:	580e1000 	.word	0x580e1000

340044cc <EpochBlock_EpochControllerUnit>:
  {
340044cc:	b508      	push	{r3, lr}
    LL_ATON_ASSERT(EpochBlock_IsEpochBlob(eb));
340044ce:	8a03      	ldrh	r3, [r0, #16]
340044d0:	075b      	lsls	r3, r3, #29
340044d2:	d406      	bmi.n	340044e2 <EpochBlock_EpochControllerUnit+0x16>
340044d4:	f240 212f 	movw	r1, #559	@ 0x22f
340044d8:	4b03      	ldr	r3, [pc, #12]	@ (340044e8 <EpochBlock_EpochControllerUnit+0x1c>)
340044da:	4a04      	ldr	r2, [pc, #16]	@ (340044ec <EpochBlock_EpochControllerUnit+0x20>)
340044dc:	4804      	ldr	r0, [pc, #16]	@ (340044f0 <EpochBlock_EpochControllerUnit+0x24>)
340044de:	f01a fe71 	bl	3401f1c4 <__assert_func>
  }
340044e2:	68c0      	ldr	r0, [r0, #12]
340044e4:	bd08      	pop	{r3, pc}
340044e6:	bf00      	nop
340044e8:	34026f55 	.word	0x34026f55
340044ec:	3402d5fc 	.word	0x3402d5fc
340044f0:	34026f70 	.word	0x34026f70

340044f4 <__LL_ATON_RT_ExecEndEpochBlock>:
  if (nn_instance->exec_state.epoch_callback_function != NULL)
340044f4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
{
340044f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340044fa:	4605      	mov	r5, r0
340044fc:	460c      	mov	r4, r1
  if (nn_instance->exec_state.epoch_callback_function != NULL)
340044fe:	b113      	cbz	r3, 34004506 <__LL_ATON_RT_ExecEndEpochBlock+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_END, nn_instance, eb);
34004500:	4602      	mov	r2, r0
34004502:	2002      	movs	r0, #2
34004504:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
34004506:	8a2b      	ldrh	r3, [r5, #16]
34004508:	0758      	lsls	r0, r3, #29
3400450a:	d518      	bpl.n	3400453e <__LL_ATON_RT_ExecEndEpochBlock+0x4a>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
3400450c:	4628      	mov	r0, r5
3400450e:	f7ff ffdd 	bl	340044cc <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004512:	b128      	cbz	r0, 34004520 <__LL_ATON_RT_ExecEndEpochBlock+0x2c>
34004514:	21c2      	movs	r1, #194	@ 0xc2
34004516:	4b25      	ldr	r3, [pc, #148]	@ (340045ac <__LL_ATON_RT_ExecEndEpochBlock+0xb8>)
34004518:	4a25      	ldr	r2, [pc, #148]	@ (340045b0 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
3400451a:	4826      	ldr	r0, [pc, #152]	@ (340045b4 <__LL_ATON_RT_ExecEndEpochBlock+0xc0>)
3400451c:	f01a fe52 	bl	3401f1c4 <__assert_func>
    ATON_DISABLE_CLR_CONFCLR(EPOCHCTRL, ecId);
34004520:	2202      	movs	r2, #2
34004522:	4b25      	ldr	r3, [pc, #148]	@ (340045b8 <__LL_ATON_RT_ExecEndEpochBlock+0xc4>)
34004524:	601a      	str	r2, [r3, #0]
34004526:	681a      	ldr	r2, [r3, #0]
34004528:	0791      	lsls	r1, r2, #30
3400452a:	d4fc      	bmi.n	34004526 <__LL_ATON_RT_ExecEndEpochBlock+0x32>
3400452c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004530:	601a      	str	r2, [r3, #0]
34004532:	681a      	ldr	r2, [r3, #0]
34004534:	0052      	lsls	r2, r2, #1
34004536:	d4fc      	bmi.n	34004532 <__LL_ATON_RT_ExecEndEpochBlock+0x3e>
    LL_ATON_DisableClock(ATON_EPOCHCTRL_CLKB_CLK(ecId));
34004538:	2019      	movs	r0, #25
3400453a:	f7fe fc9b 	bl	34002e74 <LL_ATON_DisableClock>
  if (eb->end_epoch_block != NULL)
3400453e:	686b      	ldr	r3, [r5, #4]
34004540:	b10b      	cbz	r3, 34004546 <__LL_ATON_RT_ExecEndEpochBlock+0x52>
    eb->end_epoch_block((const void *)eb);
34004542:	4628      	mov	r0, r5
34004544:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_pure_hw) != 0);
34004546:	8a2e      	ldrh	r6, [r5, #16]
  if (EpochBlock_IsEpochPureHW(eb) ||
34004548:	f016 0f90 	tst.w	r6, #144	@ 0x90
3400454c:	f006 07c0 	and.w	r7, r6, #192	@ 0xc0
34004550:	d108      	bne.n	34004564 <__LL_ATON_RT_ExecEndEpochBlock+0x70>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
34004552:	bb0f      	cbnz	r7, 34004598 <__LL_ATON_RT_ExecEndEpochBlock+0xa4>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
34004554:	4b19      	ldr	r3, [pc, #100]	@ (340045bc <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
34004556:	681b      	ldr	r3, [r3, #0]
34004558:	42a3      	cmp	r3, r4
3400455a:	d115      	bne.n	34004588 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
3400455c:	21ed      	movs	r1, #237	@ 0xed
3400455e:	4b18      	ldr	r3, [pc, #96]	@ (340045c0 <__LL_ATON_RT_ExecEndEpochBlock+0xcc>)
34004560:	4a13      	ldr	r2, [pc, #76]	@ (340045b0 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
34004562:	e7da      	b.n	3400451a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    LL_ATON_ASSERT(nn_instance == __ll_current_aton_ip_owner);
34004564:	4b15      	ldr	r3, [pc, #84]	@ (340045bc <__LL_ATON_RT_ExecEndEpochBlock+0xc8>)
34004566:	681b      	ldr	r3, [r3, #0]
34004568:	42a3      	cmp	r3, r4
3400456a:	d003      	beq.n	34004574 <__LL_ATON_RT_ExecEndEpochBlock+0x80>
3400456c:	21e1      	movs	r1, #225	@ 0xe1
3400456e:	4b15      	ldr	r3, [pc, #84]	@ (340045c4 <__LL_ATON_RT_ExecEndEpochBlock+0xd0>)
34004570:	4a0f      	ldr	r2, [pc, #60]	@ (340045b0 <__LL_ATON_RT_ExecEndEpochBlock+0xbc>)
34004572:	e7d2      	b.n	3400451a <__LL_ATON_RT_ExecEndEpochBlock+0x26>
    __LL_ATON_RT_SetWaitMask(0);
34004574:	2000      	movs	r0, #0
34004576:	f7ff ff8d 	bl	34004494 <__LL_ATON_RT_SetWaitMask>
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400457a:	06f3      	lsls	r3, r6, #27
3400457c:	d5e9      	bpl.n	34004552 <__LL_ATON_RT_ExecEndEpochBlock+0x5e>
    __ll_clear_aton_owner(nn_instance);
3400457e:	4620      	mov	r0, r4
34004580:	f7ff ff68 	bl	34004454 <__ll_clear_aton_owner>
  LL_ATON_ASSERT(EpochBlock_IsEpochInternal(eb) || EpochBlock_IsEpochHybrid(eb) ||
34004584:	2f00      	cmp	r7, #0
34004586:	d0e5      	beq.n	34004554 <__LL_ATON_RT_ExecEndEpochBlock+0x60>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004588:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400458a:	b163      	cbz	r3, 340045a6 <__LL_ATON_RT_ExecEndEpochBlock+0xb2>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
3400458c:	462a      	mov	r2, r5
3400458e:	4621      	mov	r1, r4
}
34004590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_END, nn_instance, eb);
34004594:	2003      	movs	r0, #3
34004596:	4718      	bx	r3
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
34004598:	6923      	ldr	r3, [r4, #16]
  if (EpochBlock_IsEpochPureHW(eb) || ((EpochBlock_IsEpochHybrid(eb) || EpochBlock_IsEpochInternal(eb)) &&
3400459a:	2b00      	cmp	r3, #0
3400459c:	d1f4      	bne.n	34004588 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
                                       (nn_instance->exec_state.next_epoch_block ==
3400459e:	68e3      	ldr	r3, [r4, #12]
                                       (nn_instance->exec_state.saved_current_epoch_block == NULL) &&
340045a0:	2b00      	cmp	r3, #0
340045a2:	d1f1      	bne.n	34004588 <__LL_ATON_RT_ExecEndEpochBlock+0x94>
340045a4:	e7eb      	b.n	3400457e <__LL_ATON_RT_ExecEndEpochBlock+0x8a>
}
340045a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340045aa:	bf00      	nop
340045ac:	34026fbd 	.word	0x34026fbd
340045b0:	3402d5dd 	.word	0x3402d5dd
340045b4:	34026fc6 	.word	0x34026fc6
340045b8:	580fe000 	.word	0x580fe000
340045bc:	3410db5c 	.word	0x3410db5c
340045c0:	34027038 	.word	0x34027038
340045c4:	3402700e 	.word	0x3402700e

340045c8 <__LL_ATON_RT_DetermineNextEpochBlock>:
{
340045c8:	b508      	push	{r3, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
340045ca:	b928      	cbnz	r0, 340045d8 <__LL_ATON_RT_DetermineNextEpochBlock+0x10>
340045cc:	21f8      	movs	r1, #248	@ 0xf8
340045ce:	4b1a      	ldr	r3, [pc, #104]	@ (34004638 <__LL_ATON_RT_DetermineNextEpochBlock+0x70>)
340045d0:	4a1a      	ldr	r2, [pc, #104]	@ (3400463c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
  LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
340045d2:	481b      	ldr	r0, [pc, #108]	@ (34004640 <__LL_ATON_RT_DetermineNextEpochBlock+0x78>)
340045d4:	f01a fdf6 	bl	3401f1c4 <__assert_func>
340045d8:	69c3      	ldr	r3, [r0, #28]
340045da:	b11b      	cbz	r3, 340045e4 <__LL_ATON_RT_DetermineNextEpochBlock+0x1c>
340045dc:	21fa      	movs	r1, #250	@ 0xfa
340045de:	4b19      	ldr	r3, [pc, #100]	@ (34004644 <__LL_ATON_RT_DetermineNextEpochBlock+0x7c>)
340045e0:	4a16      	ldr	r2, [pc, #88]	@ (3400463c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
340045e2:	e7f6      	b.n	340045d2 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
  if ((nn_instance->exec_state.next_epoch_block != NULL))
340045e4:	68c3      	ldr	r3, [r0, #12]
340045e6:	b313      	cbz	r3, 3400462e <__LL_ATON_RT_DetermineNextEpochBlock+0x66>
    LL_ATON_ASSERT(nn_instance->exec_state.saved_current_epoch_block == NULL);
340045e8:	6903      	ldr	r3, [r0, #16]
340045ea:	b123      	cbz	r3, 340045f6 <__LL_ATON_RT_DetermineNextEpochBlock+0x2e>
340045ec:	f44f 7181 	mov.w	r1, #258	@ 0x102
340045f0:	4b15      	ldr	r3, [pc, #84]	@ (34004648 <__LL_ATON_RT_DetermineNextEpochBlock+0x80>)
340045f2:	4a12      	ldr	r2, [pc, #72]	@ (3400463c <__LL_ATON_RT_DetermineNextEpochBlock+0x74>)
340045f4:	e7ed      	b.n	340045d2 <__LL_ATON_RT_DetermineNextEpochBlock+0xa>
    nn_instance->exec_state.saved_current_epoch_block = nn_instance->exec_state.current_epoch_block;
340045f6:	6843      	ldr	r3, [r0, #4]
340045f8:	6103      	str	r3, [r0, #16]
    nn_instance->exec_state.saved_first_epoch_block = nn_instance->exec_state.first_epoch_block;
340045fa:	6883      	ldr	r3, [r0, #8]
340045fc:	6143      	str	r3, [r0, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = nn_instance->exec_state.nr_of_epoch_blocks;
340045fe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
34004600:	6283      	str	r3, [r0, #40]	@ 0x28
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.next_epoch_block;
34004602:	68c3      	ldr	r3, [r0, #12]
34004604:	6043      	str	r3, [r0, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.next_epoch_block;
34004606:	68c3      	ldr	r3, [r0, #12]
34004608:	6083      	str	r3, [r0, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
3400460a:	6883      	ldr	r3, [r0, #8]
  if (list != NULL)
3400460c:	b96b      	cbnz	r3, 3400462a <__LL_ATON_RT_DetermineNextEpochBlock+0x62>
  int i = 0;
3400460e:	461a      	mov	r2, r3
    nn_instance->exec_state.next_epoch_block = NULL;
34004610:	2300      	movs	r3, #0
    nn_instance->exec_state.nr_of_epoch_blocks = __LL_ATON_RT_CntEpochBlocks(nn_instance->exec_state.first_epoch_block);
34004612:	6242      	str	r2, [r0, #36]	@ 0x24
    nn_instance->exec_state.next_epoch_block = NULL;
34004614:	60c3      	str	r3, [r0, #12]
  nn_instance->exec_state.current_epoch_block_started = false;
34004616:	2300      	movs	r3, #0
34004618:	f880 3020 	strb.w	r3, [r0, #32]
}
3400461c:	bd08      	pop	{r3, pc}
      list++;
3400461e:	3314      	adds	r3, #20
    for (i = 1; !EpochBlock_IsLastEpochBlock(list); i++)
34004620:	3201      	adds	r2, #1
34004622:	8a19      	ldrh	r1, [r3, #16]
34004624:	0709      	lsls	r1, r1, #28
34004626:	d5fa      	bpl.n	3400461e <__LL_ATON_RT_DetermineNextEpochBlock+0x56>
34004628:	e7f2      	b.n	34004610 <__LL_ATON_RT_DetermineNextEpochBlock+0x48>
3400462a:	2201      	movs	r2, #1
3400462c:	e7f9      	b.n	34004622 <__LL_ATON_RT_DetermineNextEpochBlock+0x5a>
    nn_instance->exec_state.current_epoch_block++;
3400462e:	6843      	ldr	r3, [r0, #4]
34004630:	3314      	adds	r3, #20
34004632:	6043      	str	r3, [r0, #4]
34004634:	e7ef      	b.n	34004616 <__LL_ATON_RT_DetermineNextEpochBlock+0x4e>
34004636:	bf00      	nop
34004638:	340270a6 	.word	0x340270a6
3400463c:	3402d5b8 	.word	0x3402d5b8
34004640:	34026fc6 	.word	0x34026fc6
34004644:	340270c1 	.word	0x340270c1
34004648:	340270f1 	.word	0x340270f1

3400464c <dump_dma_state>:
LL_ATON_WEAK void dump_dma_state(void){};
3400464c:	4770      	bx	lr
	...

34004650 <__LL_ATON_RT_IrqErr>:
#if (ATON_INT_NR > 32)
static void __LL_ATON_RT_IrqErr(uint64_t irqs)
#else  //(ATON_INT_NR <= 32)
static void __LL_ATON_RT_IrqErr(uint32_t irqs)
#endif //(ATON_INT_NR <= 32)
{
34004650:	b538      	push	{r3, r4, r5, lr}
  extern void dump_dma_state(void);
  int32_t i;

  if (!irqs)
34004652:	4604      	mov	r4, r0
34004654:	2800      	cmp	r0, #0
34004656:	d05b      	beq.n	34004710 <__LL_ATON_RT_IrqErr+0xc0>
    return;

#ifdef ATON_STRENG_NUM
  /* Streaming Engine Error interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM))
34004658:	4b2e      	ldr	r3, [pc, #184]	@ (34004714 <__LL_ATON_RT_IrqErr+0xc4>)
3400465a:	4003      	ands	r3, r0
3400465c:	d007      	beq.n	3400466e <__LL_ATON_RT_IrqErr+0x1e>

    masked_irqs = (irqs & ATON_INT_GET_MASK(ATON_STRENG_ERR_INT_MASK, ATON_STRENG_NUM));

    // assumes that stream engine interrupts are assigned in the order of their engine number and to consecutive bits
    // within the `INTREG` register
    uint32_t streaming_engine_nr = (uint32_t)(masked_irqs & (-masked_irqs));
3400465e:	4259      	negs	r1, r3
34004660:	4019      	ands	r1, r3
    streaming_engine_nr -= ATON_STRENG_INT(0);

#ifndef NDEBUG
    uint32_t streng_err = ATON_STRENG_IRQ_GET(streaming_engine_nr);
34004662:	4b2d      	ldr	r3, [pc, #180]	@ (34004718 <__LL_ATON_RT_IrqErr+0xc8>)
34004664:	030a      	lsls	r2, r1, #12
34004666:	58d2      	ldr	r2, [r2, r3]
    LL_ATON_PRINTF("Streaming engine #%u error interrupt: 0x%" PRIx32 "\n", streaming_engine_nr, streng_err);
34004668:	482c      	ldr	r0, [pc, #176]	@ (3400471c <__LL_ATON_RT_IrqErr+0xcc>)
3400466a:	f01b fc57 	bl	3401ff1c <iprintf>
#endif // NDEBUG
  }
  /* Streaming Engine interrupts */
  if (irqs & ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0))
3400466e:	f3c4 0309 	ubfx	r3, r4, #0, #10
34004672:	b113      	cbz	r3, 3400467a <__LL_ATON_RT_IrqErr+0x2a>
  {
    LL_ATON_PRINTF("Streaming engine completion interrupt\n");
34004674:	482a      	ldr	r0, [pc, #168]	@ (34004720 <__LL_ATON_RT_IrqErr+0xd0>)
34004676:	f01b fcb9 	bl	3401ffec <puts>
  }
#endif // ATON_STRENG_NUM

#ifdef ATON_CONVACC_NUM
  /* Convolutional accelerators interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_CONVACC_INT_MASK, ATON_CONVACC_NUM))
3400467a:	f414 0f70 	tst.w	r4, #15728640	@ 0xf00000
3400467e:	d002      	beq.n	34004686 <__LL_ATON_RT_IrqErr+0x36>
  {
    LL_ATON_PRINTF("Convolutional accelerator interrupt\n");
34004680:	4828      	ldr	r0, [pc, #160]	@ (34004724 <__LL_ATON_RT_IrqErr+0xd4>)
34004682:	f01b fcb3 	bl	3401ffec <puts>
  }
#endif // ATON_CONVACC_NUM

#if defined(ATON_RECBUF_NUM)
  /* Reconfigurable buffer interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_RECBUF_INT_MASK, ATON_RECBUF_NUM))
34004686:	01e5      	lsls	r5, r4, #7
34004688:	d502      	bpl.n	34004690 <__LL_ATON_RT_IrqErr+0x40>
  {
    LL_ATON_PRINTF("Reconfigurable buffer interrupt\n");
3400468a:	4827      	ldr	r0, [pc, #156]	@ (34004728 <__LL_ATON_RT_IrqErr+0xd8>)
3400468c:	f01b fcae 	bl	3401ffec <puts>
  }
#endif // ATON_RECBUF_NUM

#ifdef ATON_BUSIF_NUM
  /* Bus interface interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_BUSIF_INT_MASK, ATON_BUSIF_NUM))
34004690:	f014 6fc0 	tst.w	r4, #100663296	@ 0x6000000
34004694:	d00e      	beq.n	340046b4 <__LL_ATON_RT_IrqErr+0x64>
  {
    LL_ATON_PRINTF("Bus interface interrupt\n");
34004696:	4825      	ldr	r0, [pc, #148]	@ (3400472c <__LL_ATON_RT_IrqErr+0xdc>)
34004698:	f01b fca8 	bl	3401ffec <puts>

    /* Report offending stream engine */
    for (i = 0; i < ATON_BUSIF_NUM; i++)
      LL_ATON_PRINTF("BUSIF%" PRId32 " ERR: 0x%" PRIx32 "\n", i, ATON_BUSIF_ERR_GET(i));
3400469c:	4b24      	ldr	r3, [pc, #144]	@ (34004730 <__LL_ATON_RT_IrqErr+0xe0>)
3400469e:	2100      	movs	r1, #0
340046a0:	691a      	ldr	r2, [r3, #16]
340046a2:	4824      	ldr	r0, [pc, #144]	@ (34004734 <__LL_ATON_RT_IrqErr+0xe4>)
340046a4:	f01b fc3a 	bl	3401ff1c <iprintf>
340046a8:	4b23      	ldr	r3, [pc, #140]	@ (34004738 <__LL_ATON_RT_IrqErr+0xe8>)
340046aa:	2101      	movs	r1, #1
340046ac:	691a      	ldr	r2, [r3, #16]
340046ae:	4821      	ldr	r0, [pc, #132]	@ (34004734 <__LL_ATON_RT_IrqErr+0xe4>)
340046b0:	f01b fc34 	bl	3401ff1c <iprintf>
  }
#endif // ATON_BUSIF_NUM

#if defined(ATON_STRSWITCH_NUM)
  /* Stream switch interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_STRSWITCH_INT_MASK, ATON_STRSWITCH_NUM))
340046b4:	0120      	lsls	r0, r4, #4
340046b6:	d502      	bpl.n	340046be <__LL_ATON_RT_IrqErr+0x6e>
  {
    LL_ATON_PRINTF("Stream switch interrupt\n");
340046b8:	4820      	ldr	r0, [pc, #128]	@ (3400473c <__LL_ATON_RT_IrqErr+0xec>)
340046ba:	f01b fc97 	bl	3401ffec <puts>
  }
#endif // ATON_STRSWITCH_NUM

#if defined(ATON_EPOCHCTRL_NUM)
  /* Epoch Controller interrupts */
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_ERR_INT_MASK, ATON_EPOCHCTRL_NUM))
340046be:	0061      	lsls	r1, r4, #1
340046c0:	d50c      	bpl.n	340046dc <__LL_ATON_RT_IrqErr+0x8c>
  {
    LL_ATON_PRINTF("Epoch Controller ERROR interrupt: EC_IRQ = 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_IRQ_GET(0));
340046c2:	4d1f      	ldr	r5, [pc, #124]	@ (34004740 <__LL_ATON_RT_IrqErr+0xf0>)
340046c4:	481f      	ldr	r0, [pc, #124]	@ (34004744 <__LL_ATON_RT_IrqErr+0xf4>)
340046c6:	68e9      	ldr	r1, [r5, #12]
340046c8:	f01b fc28 	bl	3401ff1c <iprintf>
    LL_ATON_PRINTF("Epoch Controller opcode counter: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_BC_GET(0));
340046cc:	6a29      	ldr	r1, [r5, #32]
340046ce:	481e      	ldr	r0, [pc, #120]	@ (34004748 <__LL_ATON_RT_IrqErr+0xf8>)
340046d0:	f01b fc24 	bl	3401ff1c <iprintf>
    LL_ATON_PRINTF("Epoch Controller label: 0x%08" PRIx32 "\n", ATON_EPOCHCTRL_LABEL_GET(0));
340046d4:	69e9      	ldr	r1, [r5, #28]
340046d6:	481d      	ldr	r0, [pc, #116]	@ (3400474c <__LL_ATON_RT_IrqErr+0xfc>)
340046d8:	f01b fc20 	bl	3401ff1c <iprintf>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_NOACK_INT_MASK, ATON_EPOCHCTRL_NUM))
340046dc:	00a2      	lsls	r2, r4, #2
340046de:	d502      	bpl.n	340046e6 <__LL_ATON_RT_IrqErr+0x96>
  {
    LL_ATON_PRINTF("Epoch Controller NOACK interrupt\n");
340046e0:	481b      	ldr	r0, [pc, #108]	@ (34004750 <__LL_ATON_RT_IrqErr+0x100>)
340046e2:	f01b fc83 	bl	3401ffec <puts>
  }
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ATON_EPOCHCTRL_NUM))
340046e6:	00e3      	lsls	r3, r4, #3
340046e8:	d502      	bpl.n	340046f0 <__LL_ATON_RT_IrqErr+0xa0>
  {
    LL_ATON_PRINTF("Epoch Controller interrupt\n");
340046ea:	481a      	ldr	r0, [pc, #104]	@ (34004754 <__LL_ATON_RT_IrqErr+0x104>)
340046ec:	f01b fc7e 	bl	3401ffec <puts>
  }
#endif // ATON_EPOCHCTRL_NUM

  /* default error handling */
  dump_dma_state();
340046f0:	f7ff ffac 	bl	3400464c <dump_dma_state>
  IRQ_ERR_MSG(); // just for debug
340046f4:	4622      	mov	r2, r4
340046f6:	2300      	movs	r3, #0
340046f8:	f240 314a 	movw	r1, #842	@ 0x34a
340046fc:	4816      	ldr	r0, [pc, #88]	@ (34004758 <__LL_ATON_RT_IrqErr+0x108>)
340046fe:	f01b fc0d 	bl	3401ff1c <iprintf>
#if (ATON_PLAT_HAS_FFLUSH)
  LL_ATON_FFLUSH(stdout);
#endif
  LL_ATON_ASSERT(false); // may never happen
34004702:	f240 314e 	movw	r1, #846	@ 0x34e
34004706:	4b15      	ldr	r3, [pc, #84]	@ (3400475c <__LL_ATON_RT_IrqErr+0x10c>)
34004708:	4a15      	ldr	r2, [pc, #84]	@ (34004760 <__LL_ATON_RT_IrqErr+0x110>)
3400470a:	4816      	ldr	r0, [pc, #88]	@ (34004764 <__LL_ATON_RT_IrqErr+0x114>)
3400470c:	f01a fd5a 	bl	3401f1c4 <__assert_func>
  // All of the above not handled interrupts should be changed in a way that allows both a return from
  // this IRQ handler (w/o immediate re-entry) and to return control back to the user's main loop e.g. by using an
  // internal flag/variable to signal the error, then performing a `LL_ATON_RT_RuntimeDeInit()`, and returning with a
  // respective (new) return value (of type `LL_ATON_RT_RetValues_t`), reporting about the error, from the latest
  // call to `LL_ATON_RT_RunEpochBlock()`
}
34004710:	bd38      	pop	{r3, r4, r5, pc}
34004712:	bf00      	nop
34004714:	000ffc00 	.word	0x000ffc00
34004718:	580e503c 	.word	0x580e503c
3400471c:	34027132 	.word	0x34027132
34004720:	3402715f 	.word	0x3402715f
34004724:	34027185 	.word	0x34027185
34004728:	340271a9 	.word	0x340271a9
3400472c:	340271c9 	.word	0x340271c9
34004730:	580e2000 	.word	0x580e2000
34004734:	340271e1 	.word	0x340271e1
34004738:	580e3000 	.word	0x580e3000
3400473c:	340271f6 	.word	0x340271f6
34004740:	580fe000 	.word	0x580fe000
34004744:	3402720e 	.word	0x3402720e
34004748:	34027242 	.word	0x34027242
3400474c:	3402726c 	.word	0x3402726c
34004750:	3402728d 	.word	0x3402728d
34004754:	340272ae 	.word	0x340272ae
34004758:	340272c9 	.word	0x340272c9
3400475c:	34026d17 	.word	0x34026d17
34004760:	3402d594 	.word	0x3402d594
34004764:	34026fc6 	.word	0x34026fc6

34004768 <LL_ATON_RT_Init_Network>:
{
34004768:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
3400476a:	4604      	mov	r4, r0
3400476c:	b1b0      	cbz	r0, 3400479c <LL_ATON_RT_Init_Network+0x34>
  if (nn_instance->network == NULL)
3400476e:	6803      	ldr	r3, [r0, #0]
34004770:	b1a3      	cbz	r3, 3400479c <LL_ATON_RT_Init_Network+0x34>
  LL_ATON_ASSERT(nn_instance->network->ec_network_init != NULL);
34004772:	685b      	ldr	r3, [r3, #4]
34004774:	b933      	cbnz	r3, 34004784 <LL_ATON_RT_Init_Network+0x1c>
34004776:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
3400477a:	4b09      	ldr	r3, [pc, #36]	@ (340047a0 <LL_ATON_RT_Init_Network+0x38>)
3400477c:	4a09      	ldr	r2, [pc, #36]	@ (340047a4 <LL_ATON_RT_Init_Network+0x3c>)
  LL_ATON_ASSERT(ret == true);
3400477e:	480a      	ldr	r0, [pc, #40]	@ (340047a8 <LL_ATON_RT_Init_Network+0x40>)
34004780:	f01a fd20 	bl	3401f1c4 <__assert_func>
  bool ret = nn_instance->network->ec_network_init();
34004784:	4798      	blx	r3
  LL_ATON_ASSERT(ret == true);
34004786:	b920      	cbnz	r0, 34004792 <LL_ATON_RT_Init_Network+0x2a>
34004788:	f240 11a9 	movw	r1, #425	@ 0x1a9
3400478c:	4b07      	ldr	r3, [pc, #28]	@ (340047ac <LL_ATON_RT_Init_Network+0x44>)
3400478e:	4a05      	ldr	r2, [pc, #20]	@ (340047a4 <LL_ATON_RT_Init_Network+0x3c>)
34004790:	e7f5      	b.n	3400477e <LL_ATON_RT_Init_Network+0x16>
  __LL_ATON_RT_Init_Network(nn_instance);
34004792:	4620      	mov	r0, r4
}
34004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __LL_ATON_RT_Init_Network(nn_instance);
34004798:	f7ff be34 	b.w	34004404 <__LL_ATON_RT_Init_Network>
}
3400479c:	bd10      	pop	{r4, pc}
3400479e:	bf00      	nop
340047a0:	340272f0 	.word	0x340272f0
340047a4:	3402d6de 	.word	0x3402d6de
340047a8:	34026fc6 	.word	0x34026fc6
340047ac:	34027325 	.word	0x34027325

340047b0 <LL_ATON_RT_DeInit_Network>:
{
340047b0:	b510      	push	{r4, lr}
  if (nn_instance == NULL)
340047b2:	4604      	mov	r4, r0
340047b4:	b1b8      	cbz	r0, 340047e6 <LL_ATON_RT_DeInit_Network+0x36>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
340047b6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
340047b8:	b11b      	cbz	r3, 340047c2 <LL_ATON_RT_DeInit_Network+0x12>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_NN_DeInit, nn_instance, NULL);
340047ba:	4601      	mov	r1, r0
340047bc:	2200      	movs	r2, #0
340047be:	2005      	movs	r0, #5
340047c0:	4798      	blx	r3
  if (nn_instance == __ll_current_aton_ip_owner)
340047c2:	4b09      	ldr	r3, [pc, #36]	@ (340047e8 <LL_ATON_RT_DeInit_Network+0x38>)
340047c4:	681b      	ldr	r3, [r3, #0]
340047c6:	42a3      	cmp	r3, r4
340047c8:	d102      	bne.n	340047d0 <LL_ATON_RT_DeInit_Network+0x20>
    __ll_clear_aton_owner(nn_instance);
340047ca:	4620      	mov	r0, r4
340047cc:	f7ff fe42 	bl	34004454 <__ll_clear_aton_owner>
  nn_instance->exec_state.current_epoch_block = eb_list;
340047d0:	2300      	movs	r3, #0
340047d2:	6063      	str	r3, [r4, #4]
  nn_instance->exec_state.first_epoch_block = eb_list;
340047d4:	60a3      	str	r3, [r4, #8]
  nn_instance->exec_state.next_epoch_block = NULL;
340047d6:	60e3      	str	r3, [r4, #12]
  nn_instance->exec_state.saved_current_epoch_block = NULL;
340047d8:	6123      	str	r3, [r4, #16]
  nn_instance->exec_state.saved_first_epoch_block = NULL;
340047da:	6163      	str	r3, [r4, #20]
  nn_instance->exec_state.nr_of_epoch_blocks = 0;
340047dc:	6263      	str	r3, [r4, #36]	@ 0x24
  nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
340047de:	62a3      	str	r3, [r4, #40]	@ 0x28
  nn_instance->exec_state.triggered_events = 0x0;
340047e0:	61e3      	str	r3, [r4, #28]
  nn_instance->exec_state.current_epoch_block_started = false;
340047e2:	f884 3020 	strb.w	r3, [r4, #32]
}
340047e6:	bd10      	pop	{r4, pc}
340047e8:	3410db5c 	.word	0x3410db5c

340047ec <LL_ATON_RT_RuntimeInit>:
{
340047ec:	b510      	push	{r4, lr}
  LL_ATON_Init();
340047ee:	f7fd fd45 	bl	3400227c <LL_ATON_Init>
    ATON_DISABLE_CLR_CONFCLR(INTCTRL, 0);
340047f2:	2202      	movs	r2, #2
340047f4:	4b20      	ldr	r3, [pc, #128]	@ (34004878 <LL_ATON_RT_RuntimeInit+0x8c>)
340047f6:	601a      	str	r2, [r3, #0]
340047f8:	681a      	ldr	r2, [r3, #0]
340047fa:	0791      	lsls	r1, r2, #30
340047fc:	d4fc      	bmi.n	340047f8 <LL_ATON_RT_RuntimeInit+0xc>
340047fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34004802:	601a      	str	r2, [r3, #0]
34004804:	681a      	ldr	r2, [r3, #0]
34004806:	0052      	lsls	r2, r2, #1
34004808:	d4fc      	bmi.n	34004804 <LL_ATON_RT_RuntimeInit+0x18>
    ATON_INTCTRL_STD_INTORMSK_SET(ATON_STRENG_INT_MASK(
3400480a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
3400480e:	615a      	str	r2, [r3, #20]
    ATON_INTCTRL_STD_INTANDMSK_SET(0xFFFFFFFF); // AND-mask: disable all events & errors
34004810:	f04f 32ff 	mov.w	r2, #4294967295
34004814:	625a      	str	r2, [r3, #36]	@ 0x24
    ATON_ENABLE(INTCTRL, 0);
34004816:	681a      	ldr	r2, [r3, #0]
34004818:	f042 0201 	orr.w	r2, r2, #1
3400481c:	601a      	str	r2, [r3, #0]
  LL_ATON_OSAL_INIT();
3400481e:	f7ff fcf7 	bl	34004210 <aton_osal_freertos_init>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004822:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34004826:	4b15      	ldr	r3, [pc, #84]	@ (3400487c <LL_ATON_RT_RuntimeInit+0x90>)
34004828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400482c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004830:	f3bf 8f6f 	isb	sy
34004834:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34004838:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400483c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004840:	f3bf 8f6f 	isb	sy
34004844:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
34004848:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400484c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004850:	f3bf 8f6f 	isb	sy
34004854:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
34004858:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400485c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004860:	f3bf 8f6f 	isb	sy
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004864:	605a      	str	r2, [r3, #4]
  if (ll_aton_init_deinit_trace)
34004866:	4b06      	ldr	r3, [pc, #24]	@ (34004880 <LL_ATON_RT_RuntimeInit+0x94>)
34004868:	681b      	ldr	r3, [r3, #0]
3400486a:	b11b      	cbz	r3, 34004874 <LL_ATON_RT_RuntimeInit+0x88>
}
3400486c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Init);
34004870:	2006      	movs	r0, #6
34004872:	4718      	bx	r3
}
34004874:	bd10      	pop	{r4, pc}
34004876:	bf00      	nop
34004878:	580e1000 	.word	0x580e1000
3400487c:	e000e100 	.word	0xe000e100
34004880:	3410db54 	.word	0x3410db54

34004884 <LL_ATON_RT_RuntimeDeInit>:
{
34004884:	b508      	push	{r3, lr}
  if (ll_aton_init_deinit_trace)
34004886:	4b16      	ldr	r3, [pc, #88]	@ (340048e0 <LL_ATON_RT_RuntimeDeInit+0x5c>)
34004888:	681b      	ldr	r3, [r3, #0]
3400488a:	b10b      	cbz	r3, 34004890 <LL_ATON_RT_RuntimeDeInit+0xc>
    ll_aton_init_deinit_trace(LL_ATON_RT_Callbacktype_RT_Deinit);
3400488c:	2007      	movs	r0, #7
3400488e:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004890:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
34004894:	4b13      	ldr	r3, [pc, #76]	@ (340048e4 <LL_ATON_RT_RuntimeDeInit+0x60>)
34004896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3400489a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3400489e:	f3bf 8f6f 	isb	sy
340048a2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
340048a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340048aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340048ae:	f3bf 8f6f 	isb	sy
340048b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340048b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340048ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340048be:	f3bf 8f6f 	isb	sy
340048c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340048c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
340048ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340048ce:	f3bf 8f6f 	isb	sy
  LL_ATON_OSAL_DEINIT();
340048d2:	f7ff fcf9 	bl	340042c8 <aton_osal_freertos_deinit>
}
340048d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LL_ATON_DeInit();
340048da:	f7fd bf6b 	b.w	340027b4 <LL_ATON_DeInit>
340048de:	bf00      	nop
340048e0:	3410db54 	.word	0x3410db54
340048e4:	e000e100 	.word	0xe000e100

340048e8 <LL_ATON_RT_RunEpochBlock>:
{
340048e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  LL_ATON_ASSERT(nn_instance != NULL);
340048ea:	4604      	mov	r4, r0
340048ec:	b930      	cbnz	r0, 340048fc <LL_ATON_RT_RunEpochBlock+0x14>
340048ee:	f44f 7110 	mov.w	r1, #576	@ 0x240
340048f2:	4b8c      	ldr	r3, [pc, #560]	@ (34004b24 <LL_ATON_RT_RunEpochBlock+0x23c>)
340048f4:	4a8c      	ldr	r2, [pc, #560]	@ (34004b28 <LL_ATON_RT_RunEpochBlock+0x240>)
  LL_ATON_ASSERT(nn_instance->exec_state.current_epoch_block != NULL); // should never happen
340048f6:	488d      	ldr	r0, [pc, #564]	@ (34004b2c <LL_ATON_RT_RunEpochBlock+0x244>)
340048f8:	f01a fc64 	bl	3401f1c4 <__assert_func>
340048fc:	6843      	ldr	r3, [r0, #4]
340048fe:	b923      	cbnz	r3, 3400490a <LL_ATON_RT_RunEpochBlock+0x22>
34004900:	f240 2143 	movw	r1, #579	@ 0x243
34004904:	4b8a      	ldr	r3, [pc, #552]	@ (34004b30 <LL_ATON_RT_RunEpochBlock+0x248>)
34004906:	4a88      	ldr	r2, [pc, #544]	@ (34004b28 <LL_ATON_RT_RunEpochBlock+0x240>)
34004908:	e7f5      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.inference_started == false)
3400490a:	7e03      	ldrb	r3, [r0, #24]
3400490c:	b98b      	cbnz	r3, 34004932 <LL_ATON_RT_RunEpochBlock+0x4a>
    LL_ATON_ASSERT((nn_instance->network != NULL) && (nn_instance->network->ec_inference_init != NULL));
3400490e:	6803      	ldr	r3, [r0, #0]
34004910:	b10b      	cbz	r3, 34004916 <LL_ATON_RT_RunEpochBlock+0x2e>
34004912:	689b      	ldr	r3, [r3, #8]
34004914:	b923      	cbnz	r3, 34004920 <LL_ATON_RT_RunEpochBlock+0x38>
34004916:	f240 2155 	movw	r1, #597	@ 0x255
3400491a:	4b86      	ldr	r3, [pc, #536]	@ (34004b34 <LL_ATON_RT_RunEpochBlock+0x24c>)
3400491c:	4a82      	ldr	r2, [pc, #520]	@ (34004b28 <LL_ATON_RT_RunEpochBlock+0x240>)
3400491e:	e7ea      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
    bool ret = nn_instance->network->ec_inference_init();
34004920:	4798      	blx	r3
    LL_ATON_ASSERT(ret == true);
34004922:	b920      	cbnz	r0, 3400492e <LL_ATON_RT_RunEpochBlock+0x46>
34004924:	f240 2159 	movw	r1, #601	@ 0x259
34004928:	4b83      	ldr	r3, [pc, #524]	@ (34004b38 <LL_ATON_RT_RunEpochBlock+0x250>)
3400492a:	4a7f      	ldr	r2, [pc, #508]	@ (34004b28 <LL_ATON_RT_RunEpochBlock+0x240>)
3400492c:	e7e3      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
    nn_instance->exec_state.inference_started = true;
3400492e:	2301      	movs	r3, #1
34004930:	7623      	strb	r3, [r4, #24]
    uint32_t _wait_mask = __LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block);
34004932:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
34004934:	8a03      	ldrh	r3, [r0, #16]
34004936:	075a      	lsls	r2, r3, #29
34004938:	d512      	bpl.n	34004960 <LL_ATON_RT_RunEpochBlock+0x78>
    return (1 << EpochBlock_EpochControllerUnit(eb));
3400493a:	f7ff fdc7 	bl	340044cc <EpochBlock_EpochControllerUnit>
3400493e:	2301      	movs	r3, #1
34004940:	fa03 f000 	lsl.w	r0, r3, r0
    if (nn_instance->exec_state.current_epoch_block_started && (_wait_mask != 0))
34004944:	f894 3020 	ldrb.w	r3, [r4, #32]
34004948:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
3400494c:	b343      	cbz	r3, 340049a0 <LL_ATON_RT_RunEpochBlock+0xb8>
3400494e:	2800      	cmp	r0, #0
34004950:	d036      	beq.n	340049c0 <LL_ATON_RT_RunEpochBlock+0xd8>
      if ((nn_instance->exec_state.triggered_events & _wait_mask) == _wait_mask)
34004952:	69e3      	ldr	r3, [r4, #28]
34004954:	ea30 0303 	bics.w	r3, r0, r3
34004958:	d004      	beq.n	34004964 <LL_ATON_RT_RunEpochBlock+0x7c>
        return LL_ATON_RT_WFE;
3400495a:	2001      	movs	r0, #1
}
3400495c:	b002      	add	sp, #8
3400495e:	bd70      	pop	{r4, r5, r6, pc}
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
34004960:	68c0      	ldr	r0, [r0, #12]
34004962:	e7ef      	b.n	34004944 <LL_ATON_RT_RunEpochBlock+0x5c>
        LL_ATON_ASSERT(__ll_current_aton_ip_owner ==
34004964:	4b75      	ldr	r3, [pc, #468]	@ (34004b3c <LL_ATON_RT_RunEpochBlock+0x254>)
34004966:	681b      	ldr	r3, [r3, #0]
34004968:	42a3      	cmp	r3, r4
3400496a:	d004      	beq.n	34004976 <LL_ATON_RT_RunEpochBlock+0x8e>
3400496c:	f240 2171 	movw	r1, #625	@ 0x271
34004970:	4b73      	ldr	r3, [pc, #460]	@ (34004b40 <LL_ATON_RT_RunEpochBlock+0x258>)
34004972:	4a6d      	ldr	r2, [pc, #436]	@ (34004b28 <LL_ATON_RT_RunEpochBlock+0x240>)
34004974:	e7bf      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
34004976:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400497a:	4a72      	ldr	r2, [pc, #456]	@ (34004b44 <LL_ATON_RT_RunEpochBlock+0x25c>)
3400497c:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
34004980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
34004984:	f3bf 8f6f 	isb	sy
        nn_instance->exec_state.triggered_events &= ~_wait_mask;
34004988:	69e3      	ldr	r3, [r4, #28]
3400498a:	ea23 0300 	bic.w	r3, r3, r0
3400498e:	61e3      	str	r3, [r4, #28]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34004990:	6051      	str	r1, [r2, #4]
        __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34004992:	6860      	ldr	r0, [r4, #4]
34004994:	4621      	mov	r1, r4
34004996:	f7ff fdad 	bl	340044f4 <__LL_ATON_RT_ExecEndEpochBlock>
        __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
3400499a:	4620      	mov	r0, r4
3400499c:	f7ff fe14 	bl	340045c8 <__LL_ATON_RT_DetermineNextEpochBlock>
    if (EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block))
340049a0:	6863      	ldr	r3, [r4, #4]
340049a2:	8a1b      	ldrh	r3, [r3, #16]
340049a4:	071b      	lsls	r3, r3, #28
340049a6:	d534      	bpl.n	34004a12 <LL_ATON_RT_RunEpochBlock+0x12a>
      if (nn_instance->exec_state.saved_current_epoch_block != NULL)
340049a8:	6923      	ldr	r3, [r4, #16]
340049aa:	2b00      	cmp	r3, #0
340049ac:	f000 80b7 	beq.w	34004b1e <LL_ATON_RT_RunEpochBlock+0x236>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
340049b0:	4b62      	ldr	r3, [pc, #392]	@ (34004b3c <LL_ATON_RT_RunEpochBlock+0x254>)
340049b2:	681a      	ldr	r2, [r3, #0]
340049b4:	b932      	cbnz	r2, 340049c4 <LL_ATON_RT_RunEpochBlock+0xdc>
340049b6:	2197      	movs	r1, #151	@ 0x97
340049b8:	4b63      	ldr	r3, [pc, #396]	@ (34004b48 <LL_ATON_RT_RunEpochBlock+0x260>)
340049ba:	4a64      	ldr	r2, [pc, #400]	@ (34004b4c <LL_ATON_RT_RunEpochBlock+0x264>)
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
340049bc:	4864      	ldr	r0, [pc, #400]	@ (34004b50 <LL_ATON_RT_RunEpochBlock+0x268>)
340049be:	e79b      	b.n	340048f8 <LL_ATON_RT_RunEpochBlock+0x10>
  bool this_run_executed_end_epoch = false;
340049c0:	4606      	mov	r6, r0
340049c2:	e7ed      	b.n	340049a0 <LL_ATON_RT_RunEpochBlock+0xb8>
    LL_ATON_ASSERT(unlock ? EpochBlock_IsLastEpochBlock(nn_instance->exec_state.current_epoch_block)
340049c4:	6862      	ldr	r2, [r4, #4]
340049c6:	8a12      	ldrh	r2, [r2, #16]
340049c8:	0716      	lsls	r6, r2, #28
340049ca:	d403      	bmi.n	340049d4 <LL_ATON_RT_RunEpochBlock+0xec>
340049cc:	2198      	movs	r1, #152	@ 0x98
340049ce:	4b61      	ldr	r3, [pc, #388]	@ (34004b54 <LL_ATON_RT_RunEpochBlock+0x26c>)
340049d0:	4a5e      	ldr	r2, [pc, #376]	@ (34004b4c <LL_ATON_RT_RunEpochBlock+0x264>)
340049d2:	e7f3      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(EpochBlock_IsEpochHybrid(nn_instance->exec_state.saved_current_epoch_block));
340049d4:	6922      	ldr	r2, [r4, #16]
340049d6:	8a12      	ldrh	r2, [r2, #16]
340049d8:	0655      	lsls	r5, r2, #25
340049da:	d403      	bmi.n	340049e4 <LL_ATON_RT_RunEpochBlock+0xfc>
340049dc:	219a      	movs	r1, #154	@ 0x9a
340049de:	4b5e      	ldr	r3, [pc, #376]	@ (34004b58 <LL_ATON_RT_RunEpochBlock+0x270>)
340049e0:	4a5a      	ldr	r2, [pc, #360]	@ (34004b4c <LL_ATON_RT_RunEpochBlock+0x264>)
340049e2:	e7eb      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
      __ll_clear_aton_owner(__ll_current_aton_ip_owner);
340049e4:	6818      	ldr	r0, [r3, #0]
340049e6:	f7ff fd35 	bl	34004454 <__ll_clear_aton_owner>
    LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
340049ea:	68e3      	ldr	r3, [r4, #12]
340049ec:	b11b      	cbz	r3, 340049f6 <LL_ATON_RT_RunEpochBlock+0x10e>
340049ee:	21a3      	movs	r1, #163	@ 0xa3
340049f0:	4b5a      	ldr	r3, [pc, #360]	@ (34004b5c <LL_ATON_RT_RunEpochBlock+0x274>)
340049f2:	4a56      	ldr	r2, [pc, #344]	@ (34004b4c <LL_ATON_RT_RunEpochBlock+0x264>)
340049f4:	e7e2      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
    nn_instance->exec_state.current_epoch_block = nn_instance->exec_state.saved_current_epoch_block;
340049f6:	6922      	ldr	r2, [r4, #16]
340049f8:	6062      	str	r2, [r4, #4]
    nn_instance->exec_state.first_epoch_block = nn_instance->exec_state.saved_first_epoch_block;
340049fa:	6962      	ldr	r2, [r4, #20]
340049fc:	60a2      	str	r2, [r4, #8]
    nn_instance->exec_state.nr_of_epoch_blocks = nn_instance->exec_state.saved_nr_of_epoch_blocks;
340049fe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
34004a00:	6262      	str	r2, [r4, #36]	@ 0x24
    nn_instance->exec_state.saved_current_epoch_block = NULL;
34004a02:	6123      	str	r3, [r4, #16]
    nn_instance->exec_state.saved_first_epoch_block = NULL;
34004a04:	6163      	str	r3, [r4, #20]
    nn_instance->exec_state.saved_nr_of_epoch_blocks = 0;
34004a06:	62a3      	str	r3, [r4, #40]	@ 0x28
        nn_instance->exec_state.current_epoch_block++;
34004a08:	6863      	ldr	r3, [r4, #4]
34004a0a:	3314      	adds	r3, #20
34004a0c:	6063      	str	r3, [r4, #4]
        return LL_ATON_RT_NO_WFE;
34004a0e:	2000      	movs	r0, #0
34004a10:	e7a4      	b.n	3400495c <LL_ATON_RT_RunEpochBlock+0x74>
    if (this_run_executed_end_epoch)
34004a12:	2e00      	cmp	r6, #0
34004a14:	d1fb      	bne.n	34004a0e <LL_ATON_RT_RunEpochBlock+0x126>
    if (!nn_instance->exec_state.current_epoch_block_started)
34004a16:	f894 3020 	ldrb.w	r3, [r4, #32]
34004a1a:	2b00      	cmp	r3, #0
34004a1c:	d169      	bne.n	34004af2 <LL_ATON_RT_RunEpochBlock+0x20a>
      nn_instance->exec_state.current_epoch_block_started = true;
34004a1e:	2301      	movs	r3, #1
34004a20:	f884 3020 	strb.w	r3, [r4, #32]
      __LL_ATON_RT_ExecStartEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34004a24:	6865      	ldr	r5, [r4, #4]
  LL_ATON_ASSERT(nn_instance->exec_state.next_epoch_block == NULL);
34004a26:	68e3      	ldr	r3, [r4, #12]
34004a28:	b11b      	cbz	r3, 34004a32 <LL_ATON_RT_RunEpochBlock+0x14a>
34004a2a:	2161      	movs	r1, #97	@ 0x61
34004a2c:	4b4b      	ldr	r3, [pc, #300]	@ (34004b5c <LL_ATON_RT_RunEpochBlock+0x274>)
34004a2e:	4a4c      	ldr	r2, [pc, #304]	@ (34004b60 <LL_ATON_RT_RunEpochBlock+0x278>)
34004a30:	e761      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004a32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004a34:	b11b      	cbz	r3, 34004a3e <LL_ATON_RT_RunEpochBlock+0x156>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_PRE_START, nn_instance, eb);
34004a36:	462a      	mov	r2, r5
34004a38:	4621      	mov	r1, r4
34004a3a:	4630      	mov	r0, r6
34004a3c:	4798      	blx	r3
    return ((eb->flags & EpochBlock_Flags_epoch_start) != 0);
34004a3e:	8a2b      	ldrh	r3, [r5, #16]
  if (EpochBlock_IsEpochStart(eb))
34004a40:	07d8      	lsls	r0, r3, #31
34004a42:	d505      	bpl.n	34004a50 <LL_ATON_RT_RunEpochBlock+0x168>
    LL_ATON_ASSERT(nn_instance->exec_state.triggered_events ==
34004a44:	69e2      	ldr	r2, [r4, #28]
34004a46:	b11a      	cbz	r2, 34004a50 <LL_ATON_RT_RunEpochBlock+0x168>
34004a48:	2156      	movs	r1, #86	@ 0x56
34004a4a:	4b46      	ldr	r3, [pc, #280]	@ (34004b64 <LL_ATON_RT_RunEpochBlock+0x27c>)
34004a4c:	4a46      	ldr	r2, [pc, #280]	@ (34004b68 <LL_ATON_RT_RunEpochBlock+0x280>)
34004a4e:	e7b5      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
  if (EpochBlock_IsEpochPureHW(eb) ||
34004a50:	f013 0f50 	tst.w	r3, #80	@ 0x50
34004a54:	d015      	beq.n	34004a82 <LL_ATON_RT_RunEpochBlock+0x19a>
    LL_ATON_ASSERT(new_owner != __ll_current_aton_ip_owner);
34004a56:	4a39      	ldr	r2, [pc, #228]	@ (34004b3c <LL_ATON_RT_RunEpochBlock+0x254>)
34004a58:	6811      	ldr	r1, [r2, #0]
34004a5a:	428c      	cmp	r4, r1
34004a5c:	d103      	bne.n	34004a66 <LL_ATON_RT_RunEpochBlock+0x17e>
34004a5e:	2131      	movs	r1, #49	@ 0x31
34004a60:	4b42      	ldr	r3, [pc, #264]	@ (34004b6c <LL_ATON_RT_RunEpochBlock+0x284>)
34004a62:	4a43      	ldr	r2, [pc, #268]	@ (34004b70 <LL_ATON_RT_RunEpochBlock+0x288>)
34004a64:	e7aa      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_aton_ip_owner == NULL);
34004a66:	6811      	ldr	r1, [r2, #0]
34004a68:	b119      	cbz	r1, 34004a72 <LL_ATON_RT_RunEpochBlock+0x18a>
34004a6a:	2135      	movs	r1, #53	@ 0x35
34004a6c:	4b41      	ldr	r3, [pc, #260]	@ (34004b74 <LL_ATON_RT_RunEpochBlock+0x28c>)
34004a6e:	4a40      	ldr	r2, [pc, #256]	@ (34004b70 <LL_ATON_RT_RunEpochBlock+0x288>)
34004a70:	e7a4      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
    LL_ATON_ASSERT(__ll_current_wait_mask == 0);
34004a72:	4941      	ldr	r1, [pc, #260]	@ (34004b78 <LL_ATON_RT_RunEpochBlock+0x290>)
34004a74:	6809      	ldr	r1, [r1, #0]
34004a76:	b119      	cbz	r1, 34004a80 <LL_ATON_RT_RunEpochBlock+0x198>
34004a78:	2139      	movs	r1, #57	@ 0x39
34004a7a:	4b40      	ldr	r3, [pc, #256]	@ (34004b7c <LL_ATON_RT_RunEpochBlock+0x294>)
34004a7c:	4a3c      	ldr	r2, [pc, #240]	@ (34004b70 <LL_ATON_RT_RunEpochBlock+0x288>)
34004a7e:	e79d      	b.n	340049bc <LL_ATON_RT_RunEpochBlock+0xd4>
    __ll_current_aton_ip_owner = new_owner;
34004a80:	6014      	str	r4, [r2, #0]
  if (!EpochBlock_IsEpochBlob(eb))
34004a82:	0759      	lsls	r1, r3, #29
34004a84:	d41c      	bmi.n	34004ac0 <LL_ATON_RT_RunEpochBlock+0x1d8>
    if (EpochBlock_IsEpochPureHW(eb) || EpochBlock_IsEpochInternal(eb))
34004a86:	f013 0f90 	tst.w	r3, #144	@ 0x90
34004a8a:	d00a      	beq.n	34004aa2 <LL_ATON_RT_RunEpochBlock+0x1ba>
      LL_ATON_ASSERT(__ll_current_aton_ip_owner == nn_instance);
34004a8c:	4b2b      	ldr	r3, [pc, #172]	@ (34004b3c <LL_ATON_RT_RunEpochBlock+0x254>)
34004a8e:	681b      	ldr	r3, [r3, #0]
34004a90:	429c      	cmp	r4, r3
34004a92:	d003      	beq.n	34004a9c <LL_ATON_RT_RunEpochBlock+0x1b4>
34004a94:	2178      	movs	r1, #120	@ 0x78
34004a96:	4b2a      	ldr	r3, [pc, #168]	@ (34004b40 <LL_ATON_RT_RunEpochBlock+0x258>)
34004a98:	4a31      	ldr	r2, [pc, #196]	@ (34004b60 <LL_ATON_RT_RunEpochBlock+0x278>)
34004a9a:	e72c      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
      __LL_ATON_RT_SetWaitMask(eb->wait_mask);
34004a9c:	68e8      	ldr	r0, [r5, #12]
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
34004a9e:	f7ff fcf9 	bl	34004494 <__LL_ATON_RT_SetWaitMask>
  if (eb->start_epoch_block != NULL)
34004aa2:	682b      	ldr	r3, [r5, #0]
34004aa4:	b10b      	cbz	r3, 34004aaa <LL_ATON_RT_RunEpochBlock+0x1c2>
    eb->start_epoch_block((const void *)eb);
34004aa6:	4628      	mov	r0, r5
34004aa8:	4798      	blx	r3
  if (EpochBlock_IsEpochBlob(eb))
34004aaa:	8a2b      	ldrh	r3, [r5, #16]
34004aac:	075a      	lsls	r2, r3, #29
34004aae:	d51a      	bpl.n	34004ae6 <LL_ATON_RT_RunEpochBlock+0x1fe>
    uint32_t ecId = EpochBlock_EpochControllerUnit(eb);
34004ab0:	4628      	mov	r0, r5
34004ab2:	f7ff fd0b 	bl	340044cc <EpochBlock_EpochControllerUnit>
    LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004ab6:	b130      	cbz	r0, 34004ac6 <LL_ATON_RT_RunEpochBlock+0x1de>
34004ab8:	21a4      	movs	r1, #164	@ 0xa4
34004aba:	4b31      	ldr	r3, [pc, #196]	@ (34004b80 <LL_ATON_RT_RunEpochBlock+0x298>)
34004abc:	4a28      	ldr	r2, [pc, #160]	@ (34004b60 <LL_ATON_RT_RunEpochBlock+0x278>)
34004abe:	e71a      	b.n	340048f6 <LL_ATON_RT_RunEpochBlock+0xe>
    __LL_ATON_RT_SetWaitMask(ATON_STRENG_INT_MASK(ATON_STRENG_NUM, 0, 0));
34004ac0:	f240 30ff 	movw	r0, #1023	@ 0x3ff
34004ac4:	e7eb      	b.n	34004a9e <LL_ATON_RT_RunEpochBlock+0x1b6>
    conf.stepmode = 0;
34004ac6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
34004aca:	68ab      	ldr	r3, [r5, #8]
    conf.stepmode = 0;
34004acc:	f360 0200 	bfi	r2, r0, #0, #1
    LL_EpochCtrl_Init(ecId, &conf);
34004ad0:	4669      	mov	r1, sp
    conf.stepmode = 0;
34004ad2:	f88d 2004 	strb.w	r2, [sp, #4]
    conf.blobaddr = EpochBlock_EpochBlobAddr(eb);
34004ad6:	9300      	str	r3, [sp, #0]
    LL_EpochCtrl_Init(ecId, &conf);
34004ad8:	f7fe f9b0 	bl	34002e3c <LL_EpochCtrl_Init>
    ATON_ENABLE(EPOCHCTRL, ecId);
34004adc:	4a29      	ldr	r2, [pc, #164]	@ (34004b84 <LL_ATON_RT_RunEpochBlock+0x29c>)
34004ade:	6813      	ldr	r3, [r2, #0]
34004ae0:	f043 0301 	orr.w	r3, r3, #1
34004ae4:	6013      	str	r3, [r2, #0]
  if (nn_instance->exec_state.epoch_callback_function != NULL)
34004ae6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34004ae8:	b11b      	cbz	r3, 34004af2 <LL_ATON_RT_RunEpochBlock+0x20a>
    nn_instance->exec_state.epoch_callback_function(LL_ATON_RT_Callbacktype_POST_START, nn_instance, eb);
34004aea:	462a      	mov	r2, r5
34004aec:	4621      	mov	r1, r4
34004aee:	2001      	movs	r0, #1
34004af0:	4798      	blx	r3
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34004af2:	6860      	ldr	r0, [r4, #4]
  if (EpochBlock_IsEpochBlob(eb))
34004af4:	8a03      	ldrh	r3, [r0, #16]
34004af6:	075b      	lsls	r3, r3, #29
34004af8:	d50f      	bpl.n	34004b1a <LL_ATON_RT_RunEpochBlock+0x232>
    return (1 << EpochBlock_EpochControllerUnit(eb));
34004afa:	f7ff fce7 	bl	340044cc <EpochBlock_EpochControllerUnit>
34004afe:	2301      	movs	r3, #1
34004b00:	fa03 f000 	lsl.w	r0, r3, r0
    if (__LL_ATON_RT_GetWaitMask(nn_instance->exec_state.current_epoch_block) == 0x0)
34004b04:	2800      	cmp	r0, #0
34004b06:	f47f af28 	bne.w	3400495a <LL_ATON_RT_RunEpochBlock+0x72>
      __LL_ATON_RT_ExecEndEpochBlock(nn_instance->exec_state.current_epoch_block, nn_instance);
34004b0a:	6860      	ldr	r0, [r4, #4]
34004b0c:	4621      	mov	r1, r4
34004b0e:	f7ff fcf1 	bl	340044f4 <__LL_ATON_RT_ExecEndEpochBlock>
      __LL_ATON_RT_DetermineNextEpochBlock(nn_instance);
34004b12:	4620      	mov	r0, r4
34004b14:	f7ff fd58 	bl	340045c8 <__LL_ATON_RT_DetermineNextEpochBlock>
      return LL_ATON_RT_NO_WFE;
34004b18:	e779      	b.n	34004a0e <LL_ATON_RT_RunEpochBlock+0x126>
    return eb->wait_mask; // in case of "normal" epoch block `wait_mask` contains bitmask of (output) stream engines to
34004b1a:	68c0      	ldr	r0, [r0, #12]
34004b1c:	e7f2      	b.n	34004b04 <LL_ATON_RT_RunEpochBlock+0x21c>
        return LL_ATON_RT_DONE;
34004b1e:	2002      	movs	r0, #2
34004b20:	e71c      	b.n	3400495c <LL_ATON_RT_RunEpochBlock+0x74>
34004b22:	bf00      	nop
34004b24:	340270a6 	.word	0x340270a6
34004b28:	3402d6af 	.word	0x3402d6af
34004b2c:	34026fc6 	.word	0x34026fc6
34004b30:	3402732e 	.word	0x3402732e
34004b34:	34027369 	.word	0x34027369
34004b38:	34027325 	.word	0x34027325
34004b3c:	3410db5c 	.word	0x3410db5c
34004b40:	340273cb 	.word	0x340273cb
34004b44:	e000e100 	.word	0xe000e100
34004b48:	34026792 	.word	0x34026792
34004b4c:	3402d688 	.word	0x3402d688
34004b50:	340267bc 	.word	0x340267bc
34004b54:	340273f5 	.word	0x340273f5
34004b58:	34027491 	.word	0x34027491
34004b5c:	340274dd 	.word	0x340274dd
34004b60:	3402d667 	.word	0x3402d667
34004b64:	340270c1 	.word	0x340270c1
34004b68:	3402d648 	.word	0x3402d648
34004b6c:	34027515 	.word	0x34027515
34004b70:	3402d634 	.word	0x3402d634
34004b74:	3402753d 	.word	0x3402753d
34004b78:	3410db58 	.word	0x3410db58
34004b7c:	34026f39 	.word	0x34026f39
34004b80:	34026fbd 	.word	0x34026fbd
34004b84:	580fe000 	.word	0x580fe000

34004b88 <NPU0_IRQHandler>:
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

/* ATON ISR
 * ll_aton routes all interrupts to `ATON_STD_IRQ_LINE` interrupt line */
void ATON_STD_IRQHandler(void)
{
34004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ATON_INT_NR > 32)
  uint32_t irqs_l = ATON_INTCTRL_INTREG_GET(0);
  uint32_t irqs_h = ATON_INTCTRL_INTREG_H_GET(0);
  uint64_t irqs = irqs_l | (irqs_h << 32);
#else  //(ATON_INT_NR <= 32)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
34004b8a:	4b39      	ldr	r3, [pc, #228]	@ (34004c70 <NPU0_IRQHandler+0xe8>)
#endif //(ATON_INT_NR <= 32)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  if (__ll_current_aton_ip_owner != NULL)
34004b8c:	4c39      	ldr	r4, [pc, #228]	@ (34004c74 <NPU0_IRQHandler+0xec>)
  uint32_t irqs = ATON_INTCTRL_INTREG_GET(0);
34004b8e:	689d      	ldr	r5, [r3, #8]
  if (__ll_current_aton_ip_owner != NULL)
34004b90:	6823      	ldr	r3, [r4, #0]
34004b92:	b343      	cbz	r3, 34004be6 <NPU0_IRQHandler+0x5e>
  {
    LL_ATON_ASSERT(__ll_current_aton_ip_owner->exec_state.current_epoch_block != NULL);
34004b94:	6823      	ldr	r3, [r4, #0]
34004b96:	685b      	ldr	r3, [r3, #4]
34004b98:	b933      	cbnz	r3, 34004ba8 <NPU0_IRQHandler+0x20>
34004b9a:	f240 31b1 	movw	r1, #945	@ 0x3b1
34004b9e:	4b36      	ldr	r3, [pc, #216]	@ (34004c78 <NPU0_IRQHandler+0xf0>)
34004ba0:	4a36      	ldr	r2, [pc, #216]	@ (34004c7c <NPU0_IRQHandler+0xf4>)
    }
    else // epoch blob handling based on epoch controller
    {
#if defined(ATON_EPOCHCTRL_NUM)
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004ba2:	4837      	ldr	r0, [pc, #220]	@ (34004c80 <NPU0_IRQHandler+0xf8>)
34004ba4:	f01a fb0e 	bl	3401f1c4 <__assert_func>
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
34004ba8:	6823      	ldr	r3, [r4, #0]
                                    .current_epoch_block)) // standard epoch block handling based on streaming engines
34004baa:	685b      	ldr	r3, [r3, #4]
    if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state
34004bac:	8a1b      	ldrh	r3, [r3, #16]
34004bae:	075b      	lsls	r3, r3, #29
34004bb0:	d40c      	bmi.n	34004bcc <NPU0_IRQHandler+0x44>
      __LL_ATON_RT_IrqErr(
34004bb2:	f425 707f 	bic.w	r0, r5, #1020	@ 0x3fc
34004bb6:	f020 0003 	bic.w	r0, r0, #3
#endif                                      // !ATON_EPOCHCTRL_NUM
    }
  }
  else // `__ll_current_aton_ip_owner == NULL`
  {
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
34004bba:	f7ff fd49 	bl	34004650 <__LL_ATON_RT_IrqErr>
#else  // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)
  __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
#endif // (LL_ATON_RT_MODE == LL_ATON_RT_POLLING)

#if (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)
  LL_ATON_ASSERT(__ll_current_aton_ip_owner != NULL);
34004bbe:	6823      	ldr	r3, [r4, #0]
34004bc0:	b99b      	cbnz	r3, 34004bea <NPU0_IRQHandler+0x62>
34004bc2:	f240 31d2 	movw	r1, #978	@ 0x3d2
34004bc6:	4b2f      	ldr	r3, [pc, #188]	@ (34004c84 <NPU0_IRQHandler+0xfc>)
34004bc8:	4a2c      	ldr	r2, [pc, #176]	@ (34004c7c <NPU0_IRQHandler+0xf4>)
34004bca:	e7ea      	b.n	34004ba2 <NPU0_IRQHandler+0x1a>
      uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34004bcc:	6823      	ldr	r3, [r4, #0]
34004bce:	6858      	ldr	r0, [r3, #4]
34004bd0:	f7ff fc7c 	bl	340044cc <EpochBlock_EpochControllerUnit>
      LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004bd4:	b120      	cbz	r0, 34004be0 <NPU0_IRQHandler+0x58>
34004bd6:	f240 31be 	movw	r1, #958	@ 0x3be
34004bda:	4b2b      	ldr	r3, [pc, #172]	@ (34004c88 <NPU0_IRQHandler+0x100>)
34004bdc:	4a27      	ldr	r2, [pc, #156]	@ (34004c7c <NPU0_IRQHandler+0xf4>)
34004bde:	e7e0      	b.n	34004ba2 <NPU0_IRQHandler+0x1a>
      __LL_ATON_RT_IrqErr(
34004be0:	f025 5080 	bic.w	r0, r5, #268435456	@ 0x10000000
34004be4:	e7e9      	b.n	34004bba <NPU0_IRQHandler+0x32>
    __LL_ATON_RT_IrqErr(irqs); /* treat all interrupts as errors */
34004be6:	4628      	mov	r0, r5
34004be8:	e7e7      	b.n	34004bba <NPU0_IRQHandler+0x32>

  if (!EpochBlock_IsEpochBlob(__ll_current_aton_ip_owner->exec_state.current_epoch_block))
34004bea:	6823      	ldr	r3, [r4, #0]
34004bec:	685b      	ldr	r3, [r3, #4]
34004bee:	8a1b      	ldrh	r3, [r3, #16]
34004bf0:	f013 0304 	ands.w	r3, r3, #4
34004bf4:	d126      	bne.n	34004c44 <NPU0_IRQHandler+0xbc>
      __ll_current_aton_ip_owner->exec_state.current_epoch_block
34004bf6:	6822      	ldr	r2, [r4, #0]
34004bf8:	6852      	ldr	r2, [r2, #4]
  wait_irqs =
34004bfa:	68d2      	ldr	r2, [r2, #12]
  if (wait_irqs)
34004bfc:	402a      	ands	r2, r5
34004bfe:	d017      	beq.n	34004c30 <NPU0_IRQHandler+0xa8>
        _tmp_triggered_events |= (1 << i);
34004c00:	f04f 0c01 	mov.w	ip, #1
34004c04:	200a      	movs	r0, #10
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34004c06:	6821      	ldr	r1, [r4, #0]
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
34004c08:	4e20      	ldr	r6, [pc, #128]	@ (34004c8c <NPU0_IRQHandler+0x104>)
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34004c0a:	69c9      	ldr	r1, [r1, #28]
      if ((wait_irqs >> i) & 1)
34004c0c:	fa22 f703 	lsr.w	r7, r2, r3
34004c10:	07ff      	lsls	r7, r7, #31
34004c12:	d507      	bpl.n	34004c24 <NPU0_IRQHandler+0x9c>
        uint32_t strengIrqs = ATON_STRENG_IRQ_GET(i);
34004c14:	031f      	lsls	r7, r3, #12
34004c16:	f857 e006 	ldr.w	lr, [r7, r6]
        ATON_STRENG_IRQ_SET(
34004c1a:	f847 e006 	str.w	lr, [r7, r6]
        _tmp_triggered_events |= (1 << i);
34004c1e:	fa0c f703 	lsl.w	r7, ip, r3
34004c22:	4339      	orrs	r1, r7
    for (i = 0; i < ATON_STRENG_NUM; i++)
34004c24:	3801      	subs	r0, #1
34004c26:	f103 0301 	add.w	r3, r3, #1
34004c2a:	d1ef      	bne.n	34004c0c <NPU0_IRQHandler+0x84>
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004c2c:	6823      	ldr	r3, [r4, #0]
34004c2e:	61d9      	str	r1, [r3, #28]
  __ASM volatile ("dsb 0xF":::"memory");
34004c30:	f3bf 8f4f 	dsb	sy
   */
#if (ATON_INT_NR > 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs_l);
  ATON_INTCTRL_INTCLR_H_SET(0, irqs_h);
#else  //(ATON_INT_NR <= 32)
  ATON_INTCTRL_INTCLR_SET(0, irqs);
34004c34:	4b0e      	ldr	r3, [pc, #56]	@ (34004c70 <NPU0_IRQHandler+0xe8>)
34004c36:	611d      	str	r5, [r3, #16]
34004c38:	f3bf 8f4f 	dsb	sy
  LL_ATON_OSAL_SIGNAL_EVENT();

#endif // (LL_ATON_RT_MODE == LL_ATON_RT_ASYNC)

  return;
}
34004c3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LL_ATON_OSAL_SIGNAL_EVENT();
34004c40:	f7ff bb90 	b.w	34004364 <aton_osal_freertos_signal_event>
  uint32_t ecId = EpochBlock_EpochControllerUnit(__ll_current_aton_ip_owner->exec_state.current_epoch_block);
34004c44:	6823      	ldr	r3, [r4, #0]
34004c46:	6858      	ldr	r0, [r3, #4]
34004c48:	f7ff fc40 	bl	340044cc <EpochBlock_EpochControllerUnit>
  LL_ATON_ASSERT(ecId < ATON_EPOCHCTRL_NUM); // may never happen
34004c4c:	b120      	cbz	r0, 34004c58 <NPU0_IRQHandler+0xd0>
34004c4e:	f240 3191 	movw	r1, #913	@ 0x391
34004c52:	4b0d      	ldr	r3, [pc, #52]	@ (34004c88 <NPU0_IRQHandler+0x100>)
34004c54:	4a0e      	ldr	r2, [pc, #56]	@ (34004c90 <NPU0_IRQHandler+0x108>)
34004c56:	e7a4      	b.n	34004ba2 <NPU0_IRQHandler+0x1a>
  if (irqs & ATON_INT_GET_MASK(ATON_EPOCHCTRL_INT_MASK, ecId))
34004c58:	00eb      	lsls	r3, r5, #3
34004c5a:	d5e9      	bpl.n	34004c30 <NPU0_IRQHandler+0xa8>
    uint32_t ecIrqs = ATON_EPOCHCTRL_IRQ_GET(ecId);
34004c5c:	4b0d      	ldr	r3, [pc, #52]	@ (34004c94 <NPU0_IRQHandler+0x10c>)
34004c5e:	68da      	ldr	r2, [r3, #12]
    ATON_EPOCHCTRL_IRQ_SET(ecId, ecIrqs);
34004c60:	60da      	str	r2, [r3, #12]
    uint32_t _tmp_triggered_events = __ll_current_aton_ip_owner->exec_state.triggered_events;
34004c62:	6823      	ldr	r3, [r4, #0]
34004c64:	69db      	ldr	r3, [r3, #28]
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004c66:	6822      	ldr	r2, [r4, #0]
    _tmp_triggered_events |= (1 << ecId);
34004c68:	f043 0301 	orr.w	r3, r3, #1
    __ll_current_aton_ip_owner->exec_state.triggered_events = _tmp_triggered_events;
34004c6c:	61d3      	str	r3, [r2, #28]
34004c6e:	e7df      	b.n	34004c30 <NPU0_IRQHandler+0xa8>
34004c70:	580e1000 	.word	0x580e1000
34004c74:	3410db5c 	.word	0x3410db5c
34004c78:	34027567 	.word	0x34027567
34004c7c:	3402d5a8 	.word	0x3402d5a8
34004c80:	34026fc6 	.word	0x34026fc6
34004c84:	34026792 	.word	0x34026792
34004c88:	34026fbd 	.word	0x34026fbd
34004c8c:	580e503c 	.word	0x580e503c
34004c90:	3402d57a 	.word	0x3402d57a
34004c94:	580fe000 	.word	0x580fe000

34004c98 <ll_sw_forward_dequantizelinear>:
{
  Dequantizelinear_sw_info *sw_info = (Dequantizelinear_sw_info *)sw_info_struct;

  // array init
  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004c98:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
34004c9c:	4a47      	ldr	r2, [pc, #284]	@ (34004dbc <ll_sw_forward_dequantizelinear+0x124>)
34004c9e:	2b00      	cmp	r3, #0
34004ca0:	4b47      	ldr	r3, [pc, #284]	@ (34004dc0 <ll_sw_forward_dequantizelinear+0x128>)
34004ca2:	bf18      	it	ne
34004ca4:	4613      	movne	r3, r2
{
34004ca6:	b510      	push	{r4, lr}
34004ca8:	b0c4      	sub	sp, #272	@ 0x110
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004caa:	930a      	str	r3, [sp, #40]	@ 0x28
34004cac:	6943      	ldr	r3, [r0, #20]
                                  .info = (const ai_intq_info[1]){{
                                      .scale = ((float *)sw_info->is.mem.start_offset),
                                      .zeropoint = ((void *)sw_info->izp.mem.start_offset),
                                  }}};

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004cae:	f04f 7482 	mov.w	r4, #17039360	@ 0x1040000
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
34004cb4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
34004cb6:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  AI_ARRAY_OBJ_DECLARE(dequantize_output_array, FORMAT, sw_info->general.output.mem.start_offset,
34004cba:	4b42      	ldr	r3, [pc, #264]	@ (34004dc4 <ll_sw_forward_dequantizelinear+0x12c>)
34004cbc:	930e      	str	r3, [sp, #56]	@ 0x38
34004cbe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34004cc0:	930f      	str	r3, [sp, #60]	@ 0x3c
34004cc2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
34004cc4:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  uint16_t offset_format =
34004cc8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
34004ccc:	2b00      	cmp	r3, #0
34004cce:	bf0c      	ite	eq
34004cd0:	2202      	moveq	r2, #2
34004cd2:	2204      	movne	r2, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004cd4:	f042 0201 	orr.w	r2, r2, #1
34004cd8:	f8ad 2010 	strh.w	r2, [sp, #16]
34004cdc:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
34004cde:	ab04      	add	r3, sp, #16
34004ce0:	f8ad 2012 	strh.w	r2, [sp, #18]
                                  .info = (const ai_intq_info[1]){{
34004ce4:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004ce8:	9322      	str	r3, [sp, #136]	@ 0x88
                                  .info = (const ai_intq_info[1]){{
34004cea:	9206      	str	r2, [sp, #24]
34004cec:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004cf0:	6903      	ldr	r3, [r0, #16]
                                  .info = (const ai_intq_info[1]){{
34004cf2:	9207      	str	r2, [sp, #28]
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004cf4:	aa06      	add	r2, sp, #24
34004cf6:	9205      	str	r2, [sp, #20]
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004cf8:	f240 4201 	movw	r2, #1025	@ 0x401
34004cfc:	9312      	str	r3, [sp, #72]	@ 0x48
34004cfe:	68c3      	ldr	r3, [r0, #12]
34004d00:	e9cd 4223 	strd	r4, r2, [sp, #140]	@ 0x8c
34004d04:	9313      	str	r3, [sp, #76]	@ 0x4c
34004d06:	6883      	ldr	r3, [r0, #8]
34004d08:	6a41      	ldr	r1, [r0, #36]	@ 0x24
34004d0a:	9314      	str	r3, [sp, #80]	@ 0x50
34004d0c:	9116      	str	r1, [sp, #88]	@ 0x58
34004d0e:	6a01      	ldr	r1, [r0, #32]
34004d10:	6843      	ldr	r3, [r0, #4]
34004d12:	9117      	str	r1, [sp, #92]	@ 0x5c
34004d14:	69c1      	ldr	r1, [r0, #28]
34004d16:	9315      	str	r3, [sp, #84]	@ 0x54
34004d18:	ab12      	add	r3, sp, #72	@ 0x48
34004d1a:	9325      	str	r3, [sp, #148]	@ 0x94
34004d1c:	9118      	str	r1, [sp, #96]	@ 0x60
34004d1e:	f240 4302 	movw	r3, #1026	@ 0x402
34004d22:	6981      	ldr	r1, [r0, #24]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004d24:	922b      	str	r2, [sp, #172]	@ 0xac
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004d26:	9119      	str	r1, [sp, #100]	@ 0x64
34004d28:	a916      	add	r1, sp, #88	@ 0x58
34004d2a:	9127      	str	r1, [sp, #156]	@ 0x9c
34004d2c:	a90a      	add	r1, sp, #40	@ 0x28
34004d2e:	9128      	str	r1, [sp, #160]	@ 0xa0
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004d30:	2100      	movs	r1, #0
34004d32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004d34:	9326      	str	r3, [sp, #152]	@ 0x98
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004d36:	921a      	str	r2, [sp, #104]	@ 0x68
34004d38:	6b82      	ldr	r2, [r0, #56]	@ 0x38
34004d3a:	e9cd 1429 	strd	r1, r4, [sp, #164]	@ 0xa4
34004d3e:	921b      	str	r2, [sp, #108]	@ 0x6c
34004d40:	6b42      	ldr	r2, [r0, #52]	@ 0x34
34004d42:	921c      	str	r2, [sp, #112]	@ 0x70
34004d44:	6b02      	ldr	r2, [r0, #48]	@ 0x30
34004d46:	921d      	str	r2, [sp, #116]	@ 0x74
34004d48:	aa1a      	add	r2, sp, #104	@ 0x68
34004d4a:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
34004d4e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
                        STRIDE_INIT(sw_info->general.output.stride.h, sw_info->general.output.stride.w,
                                    sw_info->general.output.stride.c, sw_info->general.output.stride.b),
                        1, &dequantize_output_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d50:	aa22      	add	r2, sp, #136	@ 0x88
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004d52:	931e      	str	r3, [sp, #120]	@ 0x78
34004d54:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
34004d56:	931f      	str	r3, [sp, #124]	@ 0x7c
34004d58:	6c83      	ldr	r3, [r0, #72]	@ 0x48
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d5a:	9200      	str	r2, [sp, #0]
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004d5c:	9320      	str	r3, [sp, #128]	@ 0x80
34004d5e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d60:	aa29      	add	r2, sp, #164	@ 0xa4
  AI_TENSOR_OBJ_DECLARE(dequantize_output, , 0x0, 4,
34004d62:	9321      	str	r3, [sp, #132]	@ 0x84
34004d64:	ab1e      	add	r3, sp, #120	@ 0x78
34004d66:	932e      	str	r3, [sp, #184]	@ 0xb8
34004d68:	ab0e      	add	r3, sp, #56	@ 0x38
34004d6a:	932f      	str	r3, [sp, #188]	@ 0xbc
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d6c:	2304      	movs	r3, #4
34004d6e:	9308      	str	r3, [sp, #32]
34004d70:	2301      	movs	r3, #1
34004d72:	e9cd 133a 	strd	r1, r3, [sp, #232]	@ 0xe8
34004d76:	9338      	str	r3, [sp, #224]	@ 0xe0
34004d78:	ab01      	add	r3, sp, #4
34004d7a:	e9cd 313c 	strd	r3, r1, [sp, #240]	@ 0xf0
34004d7e:	ab02      	add	r3, sp, #8
34004d80:	e9cd 313f 	strd	r3, r1, [sp, #252]	@ 0xfc
34004d84:	ab03      	add	r3, sp, #12
34004d86:	e9cd 3142 	strd	r3, r1, [sp, #264]	@ 0x108
34004d8a:	ab38      	add	r3, sp, #224	@ 0xe0
34004d8c:	9309      	str	r3, [sp, #36]	@ 0x24
                              AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&dequantize_output)),
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_EMPTY)

  // layer initialization
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004d8e:	4b0e      	ldr	r3, [pc, #56]	@ (34004dc8 <ll_sw_forward_dequantizelinear+0x130>)
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d90:	9201      	str	r2, [sp, #4]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004d92:	a831      	add	r0, sp, #196	@ 0xc4
34004d94:	221c      	movs	r2, #28
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004d96:	913e      	str	r1, [sp, #248]	@ 0xf8
34004d98:	9102      	str	r1, [sp, #8]
34004d9a:	9141      	str	r1, [sp, #260]	@ 0x104
34004d9c:	9103      	str	r1, [sp, #12]
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004d9e:	9330      	str	r3, [sp, #192]	@ 0xc0
  AI_TENSOR_CHAIN_OBJ_DECLARE(dequantize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004da0:	f8cd d0e4 	str.w	sp, [sp, #228]	@ 0xe4
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004da4:	f01b fa58 	bl	34020258 <memset>
34004da8:	4b08      	ldr	r3, [pc, #32]	@ (34004dcc <ll_sw_forward_dequantizelinear+0x134>)
                       NULL, )
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
34004daa:	a830      	add	r0, sp, #192	@ 0xc0
  AI_LAYER_OBJ_DECLARE(dequantize_layer, 1, NL_TYPE, 0x0, NULL, nl, node_convert /*_fixed*/, &dequantize_chain, NULL,
34004dac:	9335      	str	r3, [sp, #212]	@ 0xd4
34004dae:	ab08      	add	r3, sp, #32
34004db0:	9336      	str	r3, [sp, #216]	@ 0xd8
  dequantize_layer.forward(AI_LAYER_OBJ(&dequantize_layer));
34004db2:	f01f f8e5 	bl	34023f80 <node_convert>
}
34004db6:	b044      	add	sp, #272	@ 0x110
34004db8:	bd10      	pop	{r4, pc}
34004dba:	bf00      	nop
34004dbc:	08840440 	.word	0x08840440
34004dc0:	08040440 	.word	0x08040440
34004dc4:	00821040 	.word	0x00821040
34004dc8:	00010107 	.word	0x00010107
34004dcc:	34023f81 	.word	0x34023f81

34004dd0 <ll_sw_forward_resize_integer>:
{
  Resize_integer_sw_info *sw_info = (Resize_integer_sw_info *)sw_info_struct;
  // array init

  int32_t format = sw_info->general.input.format.is_signed ? (AI_ARRAY_FORMAT_S8 | AI_FMT_FLAG_IS_IO)
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004dd0:	f890 102c 	ldrb.w	r1, [r0, #44]	@ 0x2c
34004dd4:	4a8a      	ldr	r2, [pc, #552]	@ (34005000 <ll_sw_forward_resize_integer+0x230>)
34004dd6:	4b8b      	ldr	r3, [pc, #556]	@ (34005004 <ll_sw_forward_resize_integer+0x234>)
34004dd8:	2900      	cmp	r1, #0
{
34004dda:	b5f0      	push	{r4, r5, r6, r7, lr}
                                                           : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004ddc:	bf14      	ite	ne
34004dde:	4614      	movne	r4, r2
34004de0:	461c      	moveq	r4, r3
{
34004de2:	b0d9      	sub	sp, #356	@ 0x164

  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004de4:	9410      	str	r4, [sp, #64]	@ 0x40
34004de6:	6944      	ldr	r4, [r0, #20]
34004de8:	a910      	add	r1, sp, #64	@ 0x40
34004dea:	604c      	str	r4, [r1, #4]
34004dec:	6a84      	ldr	r4, [r0, #40]	@ 0x28
                       sw_info->general.output.mem.start_offset, sw_info->general.output.dim.num_elem, )

  uint16_t offset_format =
      sw_info->izp.format.is_signed ? (AI_BUFFER_META_FLAG_ZEROPOINT_S8) : (AI_BUFFER_META_FLAG_ZEROPOINT_U8);
  uint16_t scale_format = AI_BUFFER_META_FLAG_SCALE_FLOAT;
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004dee:	ae04      	add	r6, sp, #16
  AI_ARRAY_OBJ_DECLARE(input_output_array, format, sw_info->general.input.mem.start_offset,
34004df0:	e9c1 4402 	strd	r4, r4, [r1, #8]
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004df4:	f890 4058 	ldrb.w	r4, [r0, #88]	@ 0x58
  offset_format =
      sw_info->ozp.format.is_signed ? (AI_BUFFER_META_FLAG_ZEROPOINT_S8) : (AI_BUFFER_META_FLAG_ZEROPOINT_U8);
  scale_format = AI_BUFFER_META_FLAG_SCALE_FLOAT;
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
                                   .size = sw_info->os.dim.num_elem,
                                   .info = (const ai_intq_info[1]){{
34004df8:	f8d0 50d8 	ldr.w	r5, [r0, #216]	@ 0xd8
                                                    : (AI_ARRAY_FORMAT_U8 | AI_FMT_FLAG_IS_IO);
34004dfc:	2c00      	cmp	r4, #0
34004dfe:	bf18      	it	ne
34004e00:	4613      	movne	r3, r2
  AI_ARRAY_OBJ_DECLARE(resize_output_array, format, sw_info->general.output.mem.start_offset,
34004e02:	9314      	str	r3, [sp, #80]	@ 0x50
34004e04:	6c03      	ldr	r3, [r0, #64]	@ 0x40
34004e06:	aa14      	add	r2, sp, #80	@ 0x50
34004e08:	6053      	str	r3, [r2, #4]
34004e0a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
                                  .info = (const ai_intq_info[1]){{
34004e0c:	f8d0 4080 	ldr.w	r4, [r0, #128]	@ 0x80
  AI_ARRAY_OBJ_DECLARE(resize_output_array, format, sw_info->general.output.mem.start_offset,
34004e10:	e9c2 3302 	strd	r3, r3, [r2, #8]
  uint16_t offset_format =
34004e14:	f890 30b0 	ldrb.w	r3, [r0, #176]	@ 0xb0
                                  .info = (const ai_intq_info[1]){{
34004e18:	9406      	str	r4, [sp, #24]
  uint16_t offset_format =
34004e1a:	2b00      	cmp	r3, #0
34004e1c:	bf0c      	ite	eq
34004e1e:	2302      	moveq	r3, #2
34004e20:	2304      	movne	r3, #4
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004e22:	f043 0301 	orr.w	r3, r3, #1
34004e26:	8033      	strh	r3, [r6, #0]
34004e28:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
                                  .info = (const ai_intq_info[1]){{
34004e2a:	f8d0 40ac 	ldr.w	r4, [r0, #172]	@ 0xac
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004e2e:	8073      	strh	r3, [r6, #2]
                                  .info = (const ai_intq_info[1]){{
34004e30:	ab06      	add	r3, sp, #24
  ai_intq_info_list input_intq = {.flags = (offset_format | scale_format),
34004e32:	6073      	str	r3, [r6, #4]
  offset_format =
34004e34:	f890 3108 	ldrb.w	r3, [r0, #264]	@ 0x108
                                  .info = (const ai_intq_info[1]){{
34004e38:	9407      	str	r4, [sp, #28]
  offset_format =
34004e3a:	2b00      	cmp	r3, #0
34004e3c:	bf0c      	ite	eq
34004e3e:	2302      	moveq	r3, #2
34004e40:	2304      	movne	r3, #4
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
34004e42:	ac08      	add	r4, sp, #32
34004e44:	f043 0301 	orr.w	r3, r3, #1
34004e48:	8023      	strh	r3, [r4, #0]
34004e4a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
                                   .info = (const ai_intq_info[1]){{
34004e4e:	950a      	str	r5, [sp, #40]	@ 0x28
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
34004e50:	8063      	strh	r3, [r4, #2]
                                   .info = (const ai_intq_info[1]){{
34004e52:	ab0a      	add	r3, sp, #40	@ 0x28
34004e54:	f8d0 5104 	ldr.w	r5, [r0, #260]	@ 0x104
  ai_intq_info_list output_intq = {.flags = (offset_format | scale_format),
34004e58:	6063      	str	r3, [r4, #4]
  AI_ARRAY_OBJ_DECLARE(resize_scales_array, FORMAT, sw_info->scales.mem.start_offset, sw_info->scales.mem.start_offset,
                       sw_info->scales.dim.num_elem, )

  ai_array *resize_roi_array_ptr = NULL;
  ai_array resize_roi_array;
  if (sw_info->roi.mem.start_offset != NULL)
34004e5a:	f8d0 315c 	ldr.w	r3, [r0, #348]	@ 0x15c
                                   .info = (const ai_intq_info[1]){{
34004e5e:	950b      	str	r5, [sp, #44]	@ 0x2c
  AI_ARRAY_OBJ_DECLARE(resize_scales_array, FORMAT, sw_info->scales.mem.start_offset, sw_info->scales.mem.start_offset,
34004e60:	f8d0 5130 	ldr.w	r5, [r0, #304]	@ 0x130
  if (sw_info->roi.mem.start_offset != NULL)
34004e64:	b13b      	cbz	r3, 34004e76 <ll_sw_forward_resize_integer+0xa6>
  {
    resize_roi_array = (ai_array)AI_ARRAY_OBJ_INIT(FORMAT, sw_info->roi.mem.start_offset, sw_info->roi.mem.start_offset,
34004e66:	4f68      	ldr	r7, [pc, #416]	@ (34005008 <ll_sw_forward_resize_integer+0x238>)
34004e68:	931b      	str	r3, [sp, #108]	@ 0x6c
34004e6a:	9718      	str	r7, [sp, #96]	@ 0x60
34004e6c:	f8d0 7148 	ldr.w	r7, [r0, #328]	@ 0x148
34004e70:	e9cd 7319 	strd	r7, r3, [sp, #100]	@ 0x64
                                                   sw_info->roi.dim.num_elem);
    resize_roi_array_ptr = &resize_roi_array;
34004e74:	ab18      	add	r3, sp, #96	@ 0x60
  }

  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004e76:	f04f 7c82 	mov.w	ip, #17039360	@ 0x1040000
34004e7a:	f240 4e02 	movw	lr, #1026	@ 0x402
34004e7e:	9630      	str	r6, [sp, #192]	@ 0xc0
34004e80:	f240 4601 	movw	r6, #1025	@ 0x401
34004e84:	6907      	ldr	r7, [r0, #16]
                                   sw_info->general.input.dim.tensor_c, sw_info->general.input.dim.tensor_b),
                        STRIDE_INIT(sw_info->general.input.stride.h, sw_info->general.input.stride.w,
                                    sw_info->general.input.stride.c, sw_info->general.input.stride.b),
                        1, &input_output_array, &input_intq);

  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004e86:	e9cd 4c37 	strd	r4, ip, [sp, #220]	@ 0xdc
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004e8a:	971c      	str	r7, [sp, #112]	@ 0x70
34004e8c:	68c7      	ldr	r7, [r0, #12]
34004e8e:	e9cd c631 	strd	ip, r6, [sp, #196]	@ 0xc4
34004e92:	971d      	str	r7, [sp, #116]	@ 0x74
34004e94:	6887      	ldr	r7, [r0, #8]
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004e96:	9639      	str	r6, [sp, #228]	@ 0xe4
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004e98:	971e      	str	r7, [sp, #120]	@ 0x78
34004e9a:	6847      	ldr	r7, [r0, #4]
34004e9c:	f8cd e0d0 	str.w	lr, [sp, #208]	@ 0xd0
34004ea0:	971f      	str	r7, [sp, #124]	@ 0x7c
34004ea2:	af1c      	add	r7, sp, #112	@ 0x70
34004ea4:	9733      	str	r7, [sp, #204]	@ 0xcc
34004ea6:	6a47      	ldr	r7, [r0, #36]	@ 0x24
                        STRIDE_INIT(sw_info->scales.stride.h, sw_info->scales.stride.w, sw_info->scales.stride.c,
                                    sw_info->scales.stride.b),
                        1, &resize_scales_array, NULL);

  // tensor chain initialization
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004ea8:	ac0c      	add	r4, sp, #48	@ 0x30
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004eaa:	9720      	str	r7, [sp, #128]	@ 0x80
34004eac:	6a07      	ldr	r7, [r0, #32]
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004eae:	ae37      	add	r6, sp, #220	@ 0xdc
  AI_TENSOR_OBJ_DECLARE(input_output, , 0x0, 4,
34004eb0:	9721      	str	r7, [sp, #132]	@ 0x84
34004eb2:	69c7      	ldr	r7, [r0, #28]
34004eb4:	9722      	str	r7, [sp, #136]	@ 0x88
34004eb6:	6987      	ldr	r7, [r0, #24]
34004eb8:	9723      	str	r7, [sp, #140]	@ 0x8c
34004eba:	af20      	add	r7, sp, #128	@ 0x80
34004ebc:	e9cd 7135 	strd	r7, r1, [sp, #212]	@ 0xd4
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004ec0:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
34004ec2:	9124      	str	r1, [sp, #144]	@ 0x90
34004ec4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
34004ec6:	9125      	str	r1, [sp, #148]	@ 0x94
34004ec8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
34004eca:	9126      	str	r1, [sp, #152]	@ 0x98
34004ecc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004ece:	9601      	str	r6, [sp, #4]
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004ed0:	9127      	str	r1, [sp, #156]	@ 0x9c
34004ed2:	a924      	add	r1, sp, #144	@ 0x90
34004ed4:	e9cd 1e3a 	strd	r1, lr, [sp, #232]	@ 0xe8
34004ed8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
                              AI_TENSOR_LIST_OBJ_EMPTY, AI_TENSOR_LIST_OBJ_EMPTY)

  // extrapolating the scales values needed
  const ai_tensor *p = &resize_scales;
  const ai_float *s = AI_ARRAY_OBJ_DATA(p->data, ai_float);
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004eda:	4e4b      	ldr	r6, [pc, #300]	@ (34005008 <ll_sw_forward_resize_integer+0x238>)
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004edc:	9128      	str	r1, [sp, #160]	@ 0xa0
34004ede:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004ee0:	f8cd d0fc 	str.w	sp, [sp, #252]	@ 0xfc
  AI_TENSOR_OBJ_DECLARE(resize_output, , 0x0, 4,
34004ee4:	9129      	str	r1, [sp, #164]	@ 0xa4
34004ee6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
34004ee8:	912a      	str	r1, [sp, #168]	@ 0xa8
34004eea:	6c41      	ldr	r1, [r0, #68]	@ 0x44
34004eec:	912b      	str	r1, [sp, #172]	@ 0xac
34004eee:	a928      	add	r1, sp, #160	@ 0xa0
34004ef0:	e9cd 123c 	strd	r1, r2, [sp, #240]	@ 0xf0
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004ef4:	2204      	movs	r2, #4
34004ef6:	6022      	str	r2, [r4, #0]
34004ef8:	aa30      	add	r2, sp, #192	@ 0xc0
34004efa:	2101      	movs	r1, #1
34004efc:	9200      	str	r2, [sp, #0]
34004efe:	2200      	movs	r2, #0
34004f00:	913e      	str	r1, [sp, #248]	@ 0xf8
34004f02:	e9cd 2140 	strd	r2, r1, [sp, #256]	@ 0x100
34004f06:	a901      	add	r1, sp, #4
34004f08:	e9cd 1242 	strd	r1, r2, [sp, #264]	@ 0x108
34004f0c:	a902      	add	r1, sp, #8
34004f0e:	e9cd 1245 	strd	r1, r2, [sp, #276]	@ 0x114
34004f12:	a903      	add	r1, sp, #12
34004f14:	e9cd 1248 	strd	r1, r2, [sp, #288]	@ 0x120
34004f18:	a93e      	add	r1, sp, #248	@ 0xf8
34004f1a:	6061      	str	r1, [r4, #4]
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004f1c:	2102      	movs	r1, #2
  AI_TENSOR_CHAIN_OBJ_DECLARE(resize_chain, , 4, AI_TENSOR_LIST_OBJ_INIT(AI_FLAG_NONE, 1, TENSORS(&input_output)),
34004f1e:	9244      	str	r2, [sp, #272]	@ 0x110
34004f20:	9202      	str	r2, [sp, #8]
34004f22:	9247      	str	r2, [sp, #284]	@ 0x11c
34004f24:	9203      	str	r2, [sp, #12]
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004f26:	e9cd 612c 	strd	r6, r1, [sp, #176]	@ 0xb0
34004f2a:	a90e      	add	r1, sp, #56	@ 0x38
34004f2c:	68ae      	ldr	r6, [r5, #8]
34004f2e:	68ed      	ldr	r5, [r5, #12]
34004f30:	e9cd 122e 	strd	r1, r2, [sp, #184]	@ 0xb8

  // layer initialization
  if ((ai_resize_mode)sw_info->mode == AI_RESIZE_NEAREST)
34004f34:	f890 119c 	ldrb.w	r1, [r0, #412]	@ 0x19c
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004f38:	960e      	str	r6, [sp, #56]	@ 0x38
  if ((ai_resize_mode)sw_info->mode == AI_RESIZE_NEAREST)
34004f3a:	2901      	cmp	r1, #1
  AI_ARRAY_OBJ_DECLARE_STATIC(rs, ai_float, AI_ARRAY_FORMAT_FLOAT, AI_CONST, 2, s[2], s[3])
34004f3c:	950f      	str	r5, [sp, #60]	@ 0x3c
  if ((ai_resize_mode)sw_info->mode == AI_RESIZE_NEAREST)
34004f3e:	d124      	bne.n	34004f8a <ll_sw_forward_resize_integer+0x1ba>
  {
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_nearest_is8os8, &resize_chain,
34004f40:	4d32      	ldr	r5, [pc, #200]	@ (3400500c <ll_sw_forward_resize_integer+0x23c>)
34004f42:	e9cd 224c 	strd	r2, r2, [sp, #304]	@ 0x130
34004f46:	e9cd 524a 	strd	r5, r2, [sp, #296]	@ 0x128
34004f4a:	924e      	str	r2, [sp, #312]	@ 0x138
34004f4c:	4a30      	ldr	r2, [pc, #192]	@ (34005010 <ll_sw_forward_resize_integer+0x240>)
34004f4e:	f88d 1154 	strb.w	r1, [sp, #340]	@ 0x154
34004f52:	e9cd 244f 	strd	r2, r4, [sp, #316]	@ 0x13c
34004f56:	f890 219e 	ldrb.w	r2, [r0, #414]	@ 0x19e
34004f5a:	f88d 2144 	strb.w	r2, [sp, #324]	@ 0x144
34004f5e:	f8d0 2190 	ldr.w	r2, [r0, #400]	@ 0x190
34004f62:	9252      	str	r2, [sp, #328]	@ 0x148
34004f64:	f890 2194 	ldrb.w	r2, [r0, #404]	@ 0x194
34004f68:	f88d 214c 	strb.w	r2, [sp, #332]	@ 0x14c
34004f6c:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
34004f70:	9254      	str	r2, [sp, #336]	@ 0x150
34004f72:	f890 219d 	ldrb.w	r2, [r0, #413]	@ 0x19d
                         NULL, NULL, , .cubic_coeff_a = sw_info->cubic_coeff_a,
                         .exclude_outside = sw_info->exclude_outside, .extrapol_val = sw_info->extrapol_val,
                         .mode = (ai_resize_mode)sw_info->mode, .nearest_mode = (ai_nearest_mode)sw_info->nearest_mode,
                         .coord_transf_mode = (ai_coord_transf_mode)sw_info->coord_transf_mode,
                         .scales = AI_ARRAY_OBJ(&rs), .roi = resize_roi_array_ptr)
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004f76:	a84a      	add	r0, sp, #296	@ 0x128
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_nearest_is8os8, &resize_chain,
34004f78:	f88d 2155 	strb.w	r2, [sp, #341]	@ 0x155
34004f7c:	aa2c      	add	r2, sp, #176	@ 0xb0
34004f7e:	e9cd 2356 	strd	r2, r3, [sp, #344]	@ 0x158
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004f82:	f01f f947 	bl	34024214 <forward_resize_nearest_is8os8>
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, UPSAMPLE_TYPE, 0x0, NULL, upsample, forward_upsample_zeros, &resize_chain,
                         NULL, NULL, , .mode = AI_UPSAMPLE_ZEROS, .center = false, .scales = AI_ARRAY_OBJ(&rs),
                         .nearest_mode = AI_ROUND_PREFER_FLOOR)
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
  }
}
34004f86:	b059      	add	sp, #356	@ 0x164
34004f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((ai_resize_mode)sw_info->mode == AI_RESIZE_LINEAR)
34004f8a:	2902      	cmp	r1, #2
34004f8c:	d123      	bne.n	34004fd6 <ll_sw_forward_resize_integer+0x206>
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_bilinear_is8os8, &resize_chain,
34004f8e:	4d1f      	ldr	r5, [pc, #124]	@ (3400500c <ll_sw_forward_resize_integer+0x23c>)
34004f90:	e9cd 224c 	strd	r2, r2, [sp, #304]	@ 0x130
34004f94:	e9cd 524a 	strd	r5, r2, [sp, #296]	@ 0x128
34004f98:	924e      	str	r2, [sp, #312]	@ 0x138
34004f9a:	4a1e      	ldr	r2, [pc, #120]	@ (34005014 <ll_sw_forward_resize_integer+0x244>)
34004f9c:	f88d 1154 	strb.w	r1, [sp, #340]	@ 0x154
34004fa0:	e9cd 244f 	strd	r2, r4, [sp, #316]	@ 0x13c
34004fa4:	f890 219e 	ldrb.w	r2, [r0, #414]	@ 0x19e
34004fa8:	f88d 2144 	strb.w	r2, [sp, #324]	@ 0x144
34004fac:	f8d0 2190 	ldr.w	r2, [r0, #400]	@ 0x190
34004fb0:	9252      	str	r2, [sp, #328]	@ 0x148
34004fb2:	f890 2194 	ldrb.w	r2, [r0, #404]	@ 0x194
34004fb6:	f88d 214c 	strb.w	r2, [sp, #332]	@ 0x14c
34004fba:	f8d0 2198 	ldr.w	r2, [r0, #408]	@ 0x198
34004fbe:	9254      	str	r2, [sp, #336]	@ 0x150
34004fc0:	f890 219d 	ldrb.w	r2, [r0, #413]	@ 0x19d
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004fc4:	a84a      	add	r0, sp, #296	@ 0x128
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, RESIZE_TYPE, 0x0, NULL, resize, forward_resize_bilinear_is8os8, &resize_chain,
34004fc6:	f88d 2155 	strb.w	r2, [sp, #341]	@ 0x155
34004fca:	aa2c      	add	r2, sp, #176	@ 0xb0
34004fcc:	e9cd 2356 	strd	r2, r3, [sp, #344]	@ 0x158
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004fd0:	f01f f96a 	bl	340242a8 <forward_resize_bilinear_is8os8>
34004fd4:	e7d7      	b.n	34004f86 <ll_sw_forward_resize_integer+0x1b6>
  else if ((ai_resize_mode)sw_info->mode == AI_RESIZE_ZEROS)
34004fd6:	2900      	cmp	r1, #0
34004fd8:	d1d5      	bne.n	34004f86 <ll_sw_forward_resize_integer+0x1b6>
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, UPSAMPLE_TYPE, 0x0, NULL, upsample, forward_upsample_zeros, &resize_chain,
34004fda:	4b0f      	ldr	r3, [pc, #60]	@ (34005018 <ll_sw_forward_resize_integer+0x248>)
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004fdc:	a84a      	add	r0, sp, #296	@ 0x128
    AI_LAYER_OBJ_DECLARE(resize_layer, 1, UPSAMPLE_TYPE, 0x0, NULL, upsample, forward_upsample_zeros, &resize_chain,
34004fde:	e9cd 314a 	strd	r3, r1, [sp, #296]	@ 0x128
34004fe2:	4b0e      	ldr	r3, [pc, #56]	@ (3400501c <ll_sw_forward_resize_integer+0x24c>)
34004fe4:	e9cd 114c 	strd	r1, r1, [sp, #304]	@ 0x130
34004fe8:	e9cd 344f 	strd	r3, r4, [sp, #316]	@ 0x13c
34004fec:	ab2c      	add	r3, sp, #176	@ 0xb0
34004fee:	914e      	str	r1, [sp, #312]	@ 0x138
34004ff0:	f8ad 1144 	strh.w	r1, [sp, #324]	@ 0x144
34004ff4:	9352      	str	r3, [sp, #328]	@ 0x148
34004ff6:	f88d 114c 	strb.w	r1, [sp, #332]	@ 0x14c
    resize_layer.forward(AI_LAYER_OBJ(&resize_layer));
34004ffa:	f01f f98f 	bl	3402431c <forward_upsample_zeros>
}
34004ffe:	e7c2      	b.n	34004f86 <ll_sw_forward_resize_integer+0x1b6>
34005000:	08840440 	.word	0x08840440
34005004:	08040440 	.word	0x08040440
34005008:	00821040 	.word	0x00821040
3400500c:	0001011b 	.word	0x0001011b
34005010:	34024215 	.word	0x34024215
34005014:	340242a9 	.word	0x340242a9
34005018:	00010112 	.word	0x00010112
3400501c:	3402431d 	.word	0x3402431d

34005020 <ISP_Algo_BadPixel_Init>:
  */
ISP_StatusTypeDef ISP_Algo_BadPixel_Init(void *hIsp, void *pAlgo)
{
  (void)hIsp; /* unused */

  ((ISP_AlgoTypeDef *)pAlgo)->state = ISP_ALGO_STATE_INIT;
34005020:	2000      	movs	r0, #0
34005022:	7048      	strb	r0, [r1, #1]

  return ISP_OK;
}
34005024:	4770      	bx	lr

34005026 <ISP_Algo_BadPixel_DeInit>:
{
  (void)hIsp; /* unused */
  (void)pAlgo; /* unused */

  return ISP_OK;
}
34005026:	2000      	movs	r0, #0
34005028:	4770      	bx	lr

3400502a <ISP_Algo_AEC_StatCb>:
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AEC_StatCb(ISP_AlgoTypeDef *pAlgo)
{
  /* Update State */
  pAlgo->state = ISP_ALGO_STATE_STAT_READY;
3400502a:	2303      	movs	r3, #3
3400502c:	7043      	strb	r3, [r0, #1]

  return ISP_OK;
}
3400502e:	2000      	movs	r0, #0
34005030:	4770      	bx	lr

34005032 <ISP_Algo_AWB_StatCb>:
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_StatCb(ISP_AlgoTypeDef *pAlgo)
{
  /* Update State */
  if (pAlgo->state != ISP_ALGO_STATE_INIT)
34005032:	7843      	ldrb	r3, [r0, #1]
34005034:	b10b      	cbz	r3, 3400503a <ISP_Algo_AWB_StatCb+0x8>
  {
    pAlgo->state = ISP_ALGO_STATE_STAT_READY;
34005036:	2303      	movs	r3, #3
34005038:	7043      	strb	r3, [r0, #1]
  }

  return ISP_OK;
}
3400503a:	2000      	movs	r0, #0
3400503c:	4770      	bx	lr
	...

34005040 <ISP_Algo_BadPixel_Process>:
{
34005040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34005042:	4604      	mov	r4, r0
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005044:	f001 fb84 	bl	34006750 <ISP_SVC_IQParam_Get>
  if (IQParamConfig->badPixelAlgo.enable == false)
34005048:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3400504c:	4607      	mov	r7, r0
  if (IQParamConfig->badPixelAlgo.enable == false)
3400504e:	b913      	cbnz	r3, 34005056 <ISP_Algo_BadPixel_Process+0x16>
    return ISP_OK;
34005050:	2000      	movs	r0, #0
}
34005052:	b003      	add	sp, #12
34005054:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CurrentFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp);
34005056:	4620      	mov	r0, r4
34005058:	f001 fb2c 	bl	340066b4 <ISP_SVC_Misc_GetMainFrameId>
  if (CurrentFrameId == LastFrameId)
3400505c:	4b1e      	ldr	r3, [pc, #120]	@ (340050d8 <ISP_Algo_BadPixel_Process+0x98>)
3400505e:	681a      	ldr	r2, [r3, #0]
34005060:	4282      	cmp	r2, r0
34005062:	d0f5      	beq.n	34005050 <ISP_Algo_BadPixel_Process+0x10>
  if (Step++ >= 0)
34005064:	4d1d      	ldr	r5, [pc, #116]	@ (340050dc <ISP_Algo_BadPixel_Process+0x9c>)
  LastFrameId = CurrentFrameId;
34005066:	6018      	str	r0, [r3, #0]
  if (Step++ >= 0)
34005068:	f995 3000 	ldrsb.w	r3, [r5]
3400506c:	1c5a      	adds	r2, r3, #1
3400506e:	2b00      	cmp	r3, #0
34005070:	702a      	strb	r2, [r5, #0]
34005072:	db0a      	blt.n	3400508a <ISP_Algo_BadPixel_Process+0x4a>
    ret  = ISP_SVC_ISP_GetBadPixel(hIsp, &BadPixelConfig);
34005074:	4669      	mov	r1, sp
34005076:	4620      	mov	r0, r4
34005078:	f001 f8a7 	bl	340061ca <ISP_SVC_ISP_GetBadPixel>
    if (ret != ISP_OK)
3400507c:	2800      	cmp	r0, #0
3400507e:	d1e8      	bne.n	34005052 <ISP_Algo_BadPixel_Process+0x12>
    BadPixelCount += BadPixelConfig.count;
34005080:	4a17      	ldr	r2, [pc, #92]	@ (340050e0 <ISP_Algo_BadPixel_Process+0xa0>)
34005082:	9b01      	ldr	r3, [sp, #4]
34005084:	6811      	ldr	r1, [r2, #0]
34005086:	440b      	add	r3, r1
34005088:	6013      	str	r3, [r2, #0]
  if (Step == 10)
3400508a:	f995 2000 	ldrsb.w	r2, [r5]
3400508e:	2a0a      	cmp	r2, #10
34005090:	d1de      	bne.n	34005050 <ISP_Algo_BadPixel_Process+0x10>
    BadPixelCount /= 10;
34005092:	4e13      	ldr	r6, [pc, #76]	@ (340050e0 <ISP_Algo_BadPixel_Process+0xa0>)
34005094:	6833      	ldr	r3, [r6, #0]
34005096:	fbb3 f3f2 	udiv	r3, r3, r2
    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
3400509a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
    BadPixelCount /= 10;
3400509c:	6033      	str	r3, [r6, #0]
    if ((BadPixelCount > IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength > 0))
3400509e:	4293      	cmp	r3, r2
340050a0:	d912      	bls.n	340050c8 <ISP_Algo_BadPixel_Process+0x88>
340050a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
340050a6:	b113      	cbz	r3, 340050ae <ISP_Algo_BadPixel_Process+0x6e>
      BadPixelConfig.strength--;
340050a8:	3b01      	subs	r3, #1
      BadPixelConfig.strength++;
340050aa:	f88d 3001 	strb.w	r3, [sp, #1]
    BadPixelConfig.enable = 1;
340050ae:	2301      	movs	r3, #1
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
340050b0:	4669      	mov	r1, sp
340050b2:	4620      	mov	r0, r4
    BadPixelConfig.enable = 1;
340050b4:	f88d 3000 	strb.w	r3, [sp]
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &BadPixelConfig);
340050b8:	f001 f86c 	bl	34006194 <ISP_SVC_ISP_SetBadPixel>
    if (ret != ISP_OK)
340050bc:	2800      	cmp	r0, #0
340050be:	d1c8      	bne.n	34005052 <ISP_Algo_BadPixel_Process+0x12>
    Step = -1;
340050c0:	23ff      	movs	r3, #255	@ 0xff
    BadPixelCount = 0;
340050c2:	6030      	str	r0, [r6, #0]
    Step = -1;
340050c4:	702b      	strb	r3, [r5, #0]
    BadPixelCount = 0;
340050c6:	e7c4      	b.n	34005052 <ISP_Algo_BadPixel_Process+0x12>
    else if ((BadPixelCount < IQParamConfig->badPixelAlgo.threshold) && (BadPixelConfig.strength < ISP_BADPIXEL_STRENGTH_MAX - 1))
340050c8:	d2f1      	bcs.n	340050ae <ISP_Algo_BadPixel_Process+0x6e>
340050ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
340050ce:	2b05      	cmp	r3, #5
340050d0:	d8ed      	bhi.n	340050ae <ISP_Algo_BadPixel_Process+0x6e>
      BadPixelConfig.strength++;
340050d2:	3301      	adds	r3, #1
340050d4:	e7e9      	b.n	340050aa <ISP_Algo_BadPixel_Process+0x6a>
340050d6:	bf00      	nop
340050d8:	3410ddf0 	.word	0x3410ddf0
340050dc:	3410ddec 	.word	0x3410ddec
340050e0:	3410dde8 	.word	0x3410dde8

340050e4 <ISP_Algo_AEC_DeInit>:
{
340050e4:	b508      	push	{r3, lr}
  if (pIspAEprocess != NULL)
340050e6:	4b03      	ldr	r3, [pc, #12]	@ (340050f4 <ISP_Algo_AEC_DeInit+0x10>)
340050e8:	6818      	ldr	r0, [r3, #0]
340050ea:	b108      	cbz	r0, 340050f0 <ISP_Algo_AEC_DeInit+0xc>
    evision_api_st_ae_delete(pIspAEprocess);
340050ec:	f7fc f9a2 	bl	34001434 <evision_api_st_ae_delete>
}
340050f0:	2000      	movs	r0, #0
340050f2:	bd08      	pop	{r3, pc}
340050f4:	3410de10 	.word	0x3410de10

340050f8 <ISP_Algo_AEC_Init>:
{
340050f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340050fa:	4604      	mov	r4, r0
340050fc:	460e      	mov	r6, r1
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340050fe:	f001 fb27 	bl	34006750 <ISP_SVC_IQParam_Get>
  if (IQParamConfig->sensorDelay.delay == 0)
34005102:	f890 3256 	ldrb.w	r3, [r0, #598]	@ 0x256
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005106:	4605      	mov	r5, r0
  if (IQParamConfig->sensorDelay.delay == 0)
34005108:	b913      	cbnz	r3, 34005110 <ISP_Algo_AEC_Init+0x18>
    IQParamConfig->sensorDelay.delay = 1;
3400510a:	2301      	movs	r3, #1
3400510c:	f880 3256 	strb.w	r3, [r0, #598]	@ 0x256
  pIspAEprocess = evision_api_st_ae_new(log_cb);
34005110:	482d      	ldr	r0, [pc, #180]	@ (340051c8 <ISP_Algo_AEC_Init+0xd0>)
34005112:	f7fc f975 	bl	34001400 <evision_api_st_ae_new>
34005116:	4f2d      	ldr	r7, [pc, #180]	@ (340051cc <ISP_Algo_AEC_Init+0xd4>)
34005118:	6038      	str	r0, [r7, #0]
  if (pIspAEprocess == NULL)
3400511a:	b130      	cbz	r0, 3400512a <ISP_Algo_AEC_Init+0x32>
  e_ret = evision_api_st_ae_init(pIspAEprocess);
3400511c:	f7fc f9c4 	bl	340014a8 <evision_api_st_ae_init>
  if (e_ret != EVISION_RET_SUCCESS)
34005120:	2801      	cmp	r0, #1
34005122:	d004      	beq.n	3400512e <ISP_Algo_AEC_Init+0x36>
    evision_api_st_ae_delete(pIspAEprocess);
34005124:	6838      	ldr	r0, [r7, #0]
34005126:	f7fc f985 	bl	34001434 <evision_api_st_ae_delete>
    return ISP_ERR_ALGO;
3400512a:	20be      	movs	r0, #190	@ 0xbe
3400512c:	e033      	b.n	34005196 <ISP_Algo_AEC_Init+0x9e>
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3400512e:	683b      	ldr	r3, [r7, #0]
34005130:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
34005132:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34005134:	611a      	str	r2, [r3, #16]
  pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34005136:	f895 2070 	ldrb.w	r2, [r5, #112]	@ 0x70
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
3400513a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
  pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
3400513e:	655a      	str	r2, [r3, #84]	@ 0x54
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
34005140:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
34005144:	200a      	movs	r0, #10
  pIspAEprocess->hyper_params.exposure_max = pIsp_handle->sensorInfo.exposure_max;
34005146:	645a      	str	r2, [r3, #68]	@ 0x44
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
34005148:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
  pIspAEprocess->hyper_params.gain_max = pIsp_handle->sensorInfo.gain_max;
3400514a:	64d9      	str	r1, [r3, #76]	@ 0x4c
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
3400514c:	2164      	movs	r1, #100	@ 0x64
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
3400514e:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
  pIspAEprocess->hyper_params.gain_increment_coeff = HYPERPARAM_AEC_GAIN_INCREMENT_COEFF;
34005152:	e9c3 0105 	strd	r0, r1, [r3, #20]
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
34005156:	2178      	movs	r1, #120	@ 0x78
  pIspAEprocess->hyper_params.gain_medium_increment_max = HYPERPARAM_AEC_GAIN_MEDIUM_INC_MAX;
34005158:	f240 50dc 	movw	r0, #1500	@ 0x5dc
  pIspAEprocess->hyper_params.gain_high_delta = HYPERPARAM_AEC_GAIN_HIGH_DELTA;
3400515c:	e9c3 c107 	strd	ip, r1, [r3, #28]
  pIspAEprocess->hyper_params.gain_medium_increment_max = HYPERPARAM_AEC_GAIN_MEDIUM_INC_MAX;
34005160:	f241 7170 	movw	r1, #6000	@ 0x1770
34005164:	e9c3 0109 	strd	r0, r1, [r3, #36]	@ 0x24
  pIspAEprocess->hyper_params.gain_high_increment_max = HYPERPARAM_AEC_GAIN_HIGH_INC_MAX;
34005168:	f642 61e0 	movw	r1, #12000	@ 0x2ee0
3400516c:	62d9      	str	r1, [r3, #44]	@ 0x2c
  pIspAEprocess->hyper_params.exposure_up_ratio = HYPERPARAM_AEC_EXPOSURE_UP_RATIO;
3400516e:	a112      	add	r1, pc, #72	@ (adr r1, 340051b8 <ISP_Algo_AEC_Init+0xc0>)
34005170:	e9d1 0100 	ldrd	r0, r1, [r1]
34005174:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
  pIspAEprocess->hyper_params.exposure_down_ratio = HYPERPARAM_AEC_EXPOSURE_DOWN_RATIO;
34005178:	a111      	add	r1, pc, #68	@ (adr r1, 340051c0 <ISP_Algo_AEC_Init+0xc8>)
3400517a:	e9d1 0100 	ldrd	r0, r1, [r1]
3400517e:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
  pIspAEprocess->hyper_params.dark_zone_lum_limit = HYPERPARAM_AEC_DARKZONE_LUM_LIMIT;
34005182:	2105      	movs	r1, #5
  pIspAEprocess->hyper_params.exposure_min = pIsp_handle->sensorInfo.exposure_min;
34005184:	641f      	str	r7, [r3, #64]	@ 0x40
  pIspAEprocess->hyper_params.gain_min = pIsp_handle->sensorInfo.gain_min;
34005186:	649a      	str	r2, [r3, #72]	@ 0x48
  pIspAEprocess->hyper_params.dark_zone_lum_limit = HYPERPARAM_AEC_DARKZONE_LUM_LIMIT;
34005188:	6519      	str	r1, [r3, #80]	@ 0x50
  if (IQParamConfig->AECAlgo.enable == true)
3400518a:	f895 3068 	ldrb.w	r3, [r5, #104]	@ 0x68
3400518e:	2b01      	cmp	r3, #1
34005190:	d003      	beq.n	3400519a <ISP_Algo_AEC_Init+0xa2>
  algo->state = ISP_ALGO_STATE_INIT;
34005192:	2000      	movs	r0, #0
34005194:	7070      	strb	r0, [r6, #1]
}
34005196:	b003      	add	sp, #12
34005198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
3400519a:	4669      	mov	r1, sp
3400519c:	4620      	mov	r0, r4
    gainConfig.gain = pIsp_handle->sensorInfo.gain_min;
3400519e:	e9cd 7200 	strd	r7, r2, [sp]
    if ((ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig) != ISP_OK) || (ISP_SVC_Sensor_SetGain(hIsp, &gainConfig)!= ISP_OK))
340051a2:	f001 fa53 	bl	3400664c <ISP_SVC_Sensor_SetExposure>
340051a6:	2800      	cmp	r0, #0
340051a8:	d1bf      	bne.n	3400512a <ISP_Algo_AEC_Init+0x32>
340051aa:	4620      	mov	r0, r4
340051ac:	a901      	add	r1, sp, #4
340051ae:	f001 fa29 	bl	34006604 <ISP_SVC_Sensor_SetGain>
340051b2:	2800      	cmp	r0, #0
340051b4:	d0ed      	beq.n	34005192 <ISP_Algo_AEC_Init+0x9a>
340051b6:	e7b8      	b.n	3400512a <ISP_Algo_AEC_Init+0x32>
340051b8:	40000000 	.word	0x40000000
340051bc:	3f947ae1 	.word	0x3f947ae1
340051c0:	e0000000 	.word	0xe0000000
340051c4:	3f70624d 	.word	0x3f70624d
340051c8:	340051d1 	.word	0x340051d1
340051cc:	3410de10 	.word	0x3410de10

340051d0 <log_cb>:
{
340051d0:	b508      	push	{r3, lr}
340051d2:	4601      	mov	r1, r0
  printf("%s", msg);
340051d4:	4803      	ldr	r0, [pc, #12]	@ (340051e4 <log_cb+0x14>)
340051d6:	f01a fea1 	bl	3401ff1c <iprintf>
}
340051da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("\r\n");
340051de:	4802      	ldr	r0, [pc, #8]	@ (340051e8 <log_cb+0x18>)
340051e0:	f01a bf04 	b.w	3401ffec <puts>
340051e4:	3402cb20 	.word	0x3402cb20
340051e8:	3402bfa0 	.word	0x3402bfa0

340051ec <ISP_Algo_AEC_Process>:
{
340051ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340051f0:	b086      	sub	sp, #24
340051f2:	4605      	mov	r5, r0
340051f4:	460c      	mov	r4, r1
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340051f6:	f001 faab 	bl	34006750 <ISP_SVC_IQParam_Get>
340051fa:	4606      	mov	r6, r0
  if (IQParamConfig->AECAlgo.enable == false)
340051fc:	f890 0068 	ldrb.w	r0, [r0, #104]	@ 0x68
34005200:	b128      	cbz	r0, 3400520e <ISP_Algo_AEC_Process+0x22>
  switch(algo->state)
34005202:	7863      	ldrb	r3, [r4, #1]
34005204:	2b01      	cmp	r3, #1
34005206:	d905      	bls.n	34005214 <ISP_Algo_AEC_Process+0x28>
34005208:	2b03      	cmp	r3, #3
3400520a:	d014      	beq.n	34005236 <ISP_Algo_AEC_Process+0x4a>
    return ISP_OK;
3400520c:	2000      	movs	r0, #0
}
3400520e:	b006      	add	sp, #24
34005210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005214:	f896 3256 	ldrb.w	r3, [r6, #598]	@ 0x256
34005218:	2602      	movs	r6, #2
3400521a:	9302      	str	r3, [sp, #8]
3400521c:	2301      	movs	r3, #1
3400521e:	4622      	mov	r2, r4
34005220:	e9cd 6300 	strd	r6, r3, [sp]
34005224:	4628      	mov	r0, r5
34005226:	4b29      	ldr	r3, [pc, #164]	@ (340052cc <ISP_Algo_AEC_Process+0xe0>)
34005228:	4929      	ldr	r1, [pc, #164]	@ (340052d0 <ISP_Algo_AEC_Process+0xe4>)
3400522a:	f001 fcd5 	bl	34006bd8 <ISP_SVC_Stats_GetNext>
    if (ret != ISP_OK)
3400522e:	2800      	cmp	r0, #0
34005230:	d1ed      	bne.n	3400520e <ISP_Algo_AEC_Process+0x22>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34005232:	7066      	strb	r6, [r4, #1]
    break;
34005234:	e7eb      	b.n	3400520e <ISP_Algo_AEC_Process+0x22>
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
34005236:	4f27      	ldr	r7, [pc, #156]	@ (340052d4 <ISP_Algo_AEC_Process+0xe8>)
34005238:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
3400523a:	683b      	ldr	r3, [r7, #0]
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3400523c:	4628      	mov	r0, r5
    pIspAEprocess->hyper_params.target = IQParamConfig->AECAlgo.exposureTarget;
3400523e:	611a      	str	r2, [r3, #16]
    pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34005240:	f896 2070 	ldrb.w	r2, [r6, #112]	@ 0x70
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
34005244:	a904      	add	r1, sp, #16
    pIspAEprocess->hyper_params.compat_freq = IQParamConfig->AECAlgo.antiFlickerFreq;
34005246:	655a      	str	r2, [r3, #84]	@ 0x54
    avgL = stats.down.averageL;
34005248:	4b20      	ldr	r3, [pc, #128]	@ (340052cc <ISP_Algo_AEC_Process+0xe0>)
3400524a:	f893 8037 	ldrb.w	r8, [r3, #55]	@ 0x37
    ret = ISP_SVC_Sensor_GetGain(hIsp, &gainConfig);
3400524e:	f001 f9ef 	bl	34006630 <ISP_SVC_Sensor_GetGain>
    if (ret != ISP_OK)
34005252:	2800      	cmp	r0, #0
34005254:	d1db      	bne.n	3400520e <ISP_Algo_AEC_Process+0x22>
    ret = ISP_SVC_Sensor_GetExposure(hIsp, &exposureConfig);
34005256:	4628      	mov	r0, r5
34005258:	a905      	add	r1, sp, #20
3400525a:	f001 fa0d 	bl	34006678 <ISP_SVC_Sensor_GetExposure>
    if (ret != ISP_OK)
3400525e:	2800      	cmp	r0, #0
34005260:	d1d5      	bne.n	3400520e <ISP_Algo_AEC_Process+0x22>
    Meta.averageL = avgL;
34005262:	4b1d      	ldr	r3, [pc, #116]	@ (340052d8 <ISP_Algo_AEC_Process+0xec>)
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
34005264:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
    Meta.averageL = avgL;
34005266:	f883 8001 	strb.w	r8, [r3, #1]
    Meta.exposureTarget = IQParamConfig->AECAlgo.exposureTarget;
3400526a:	605a      	str	r2, [r3, #4]
    e_ret = evision_api_st_ae_process(pIspAEprocess, gainConfig.gain, exposureConfig.exposure, avgL);
3400526c:	6838      	ldr	r0, [r7, #0]
3400526e:	4643      	mov	r3, r8
34005270:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
34005274:	f7fc f923 	bl	340014be <evision_api_st_ae_process>
    if (e_ret == EVISION_RET_SUCCESS)
34005278:	2801      	cmp	r0, #1
3400527a:	d00d      	beq.n	34005298 <ISP_Algo_AEC_Process+0xac>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AEC_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3400527c:	f896 3256 	ldrb.w	r3, [r6, #598]	@ 0x256
34005280:	2602      	movs	r6, #2
34005282:	9302      	str	r3, [sp, #8]
34005284:	2301      	movs	r3, #1
34005286:	4622      	mov	r2, r4
34005288:	e9cd 6300 	strd	r6, r3, [sp]
3400528c:	4628      	mov	r0, r5
3400528e:	4b0f      	ldr	r3, [pc, #60]	@ (340052cc <ISP_Algo_AEC_Process+0xe0>)
34005290:	490f      	ldr	r1, [pc, #60]	@ (340052d0 <ISP_Algo_AEC_Process+0xe4>)
34005292:	f001 fca1 	bl	34006bd8 <ISP_SVC_Stats_GetNext>
34005296:	e7cc      	b.n	34005232 <ISP_Algo_AEC_Process+0x46>
      if (gainConfig.gain != pIspAEprocess->new_gain)
34005298:	683b      	ldr	r3, [r7, #0]
3400529a:	9a04      	ldr	r2, [sp, #16]
3400529c:	689b      	ldr	r3, [r3, #8]
3400529e:	429a      	cmp	r2, r3
340052a0:	d10c      	bne.n	340052bc <ISP_Algo_AEC_Process+0xd0>
      if (exposureConfig.exposure != pIspAEprocess->new_exposure)
340052a2:	683b      	ldr	r3, [r7, #0]
340052a4:	9a05      	ldr	r2, [sp, #20]
340052a6:	685b      	ldr	r3, [r3, #4]
340052a8:	429a      	cmp	r2, r3
340052aa:	d0e7      	beq.n	3400527c <ISP_Algo_AEC_Process+0x90>
        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
340052ac:	4628      	mov	r0, r5
340052ae:	a905      	add	r1, sp, #20
        exposureConfig.exposure = pIspAEprocess->new_exposure;
340052b0:	9305      	str	r3, [sp, #20]
        ret = ISP_SVC_Sensor_SetExposure(hIsp, &exposureConfig);
340052b2:	f001 f9cb 	bl	3400664c <ISP_SVC_Sensor_SetExposure>
        if (ret != ISP_OK)
340052b6:	2800      	cmp	r0, #0
340052b8:	d0e0      	beq.n	3400527c <ISP_Algo_AEC_Process+0x90>
340052ba:	e7a8      	b.n	3400520e <ISP_Algo_AEC_Process+0x22>
        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
340052bc:	4628      	mov	r0, r5
340052be:	a904      	add	r1, sp, #16
        gainConfig.gain = pIspAEprocess->new_gain;
340052c0:	9304      	str	r3, [sp, #16]
        ret = ISP_SVC_Sensor_SetGain(hIsp, &gainConfig);
340052c2:	f001 f99f 	bl	34006604 <ISP_SVC_Sensor_SetGain>
        if (ret != ISP_OK)
340052c6:	2800      	cmp	r0, #0
340052c8:	d0eb      	beq.n	340052a2 <ISP_Algo_AEC_Process+0xb6>
340052ca:	e7a0      	b.n	3400520e <ISP_Algo_AEC_Process+0x22>
340052cc:	3410dd70 	.word	0x3410dd70
340052d0:	3400502b 	.word	0x3400502b
340052d4:	3410de10 	.word	0x3410de10
340052d8:	3410ddf4 	.word	0x3410ddf4

340052dc <ISP_Algo_AWB_Init>:
{
340052dc:	b510      	push	{r4, lr}
  pIspAWBestimator = evision_api_awb_new(log_cb);
340052de:	4806      	ldr	r0, [pc, #24]	@ (340052f8 <ISP_Algo_AWB_Init+0x1c>)
{
340052e0:	460c      	mov	r4, r1
  pIspAWBestimator = evision_api_awb_new(log_cb);
340052e2:	f7fb fcd3 	bl	34000c8c <evision_api_awb_new>
340052e6:	4b05      	ldr	r3, [pc, #20]	@ (340052fc <ISP_Algo_AWB_Init+0x20>)
340052e8:	6018      	str	r0, [r3, #0]
  if (pIspAWBestimator == NULL)
340052ea:	b110      	cbz	r0, 340052f2 <ISP_Algo_AWB_Init+0x16>
  algo->state = ISP_ALGO_STATE_INIT;
340052ec:	2000      	movs	r0, #0
340052ee:	7060      	strb	r0, [r4, #1]
}
340052f0:	bd10      	pop	{r4, pc}
    return ISP_ERR_ALGO;
340052f2:	20be      	movs	r0, #190	@ 0xbe
340052f4:	e7fc      	b.n	340052f0 <ISP_Algo_AWB_Init+0x14>
340052f6:	bf00      	nop
340052f8:	340051d1 	.word	0x340051d1
340052fc:	3410de0c 	.word	0x3410de0c

34005300 <ISP_Algo_AWB_DeInit>:
{
34005300:	b508      	push	{r3, lr}
  if (pIspAWBestimator != NULL)
34005302:	4b03      	ldr	r3, [pc, #12]	@ (34005310 <ISP_Algo_AWB_DeInit+0x10>)
34005304:	6818      	ldr	r0, [r3, #0]
34005306:	b108      	cbz	r0, 3400530c <ISP_Algo_AWB_DeInit+0xc>
    evision_api_awb_delete(pIspAWBestimator);
34005308:	f7fb fcdc 	bl	34000cc4 <evision_api_awb_delete>
}
3400530c:	2000      	movs	r0, #0
3400530e:	bd08      	pop	{r3, pc}
34005310:	3410de0c 	.word	0x3410de0c
34005314:	00000000 	.word	0x00000000

34005318 <ISP_Algo_ApplyGammaInverse>:
{
34005318:	b508      	push	{r3, lr}
3400531a:	ed2d 8b02 	vpush	{d8}
3400531e:	ee08 1a10 	vmov	s16, r1
  if (ISP_SVC_Misc_IsGammaEnabled(hIsp, 1 /*main pipe*/) != 0) {
34005322:	2101      	movs	r1, #1
34005324:	f001 f9d6 	bl	340066d4 <ISP_SVC_Misc_IsGammaEnabled>
34005328:	b190      	cbz	r0, 34005350 <ISP_Algo_ApplyGammaInverse+0x38>
    out = 255 * pow((float)comp / 255, 1.0 / 2.2);
3400532a:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 34005368 <ISP_Algo_ApplyGammaInverse+0x50>
3400532e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
34005332:	ee88 0a27 	vdiv.f32	s0, s16, s15
34005336:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 34005358 <ISP_Algo_ApplyGammaInverse+0x40>
3400533a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3400533e:	f01d fab3 	bl	340228a8 <pow>
34005342:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 34005360 <ISP_Algo_ApplyGammaInverse+0x48>
34005346:	ee20 0b07 	vmul.f64	d0, d0, d7
}
3400534a:	ecbd 8b02 	vpop	{d8}
3400534e:	bd08      	pop	{r3, pc}
    out = (double) comp;
34005350:	eeb8 0b48 	vcvt.f64.u32	d0, s16
  return out;
34005354:	e7f9      	b.n	3400534a <ISP_Algo_ApplyGammaInverse+0x32>
34005356:	bf00      	nop
34005358:	d1745d17 	.word	0xd1745d17
3400535c:	3fdd1745 	.word	0x3fdd1745
34005360:	00000000 	.word	0x00000000
34005364:	406fe000 	.word	0x406fe000
34005368:	437f0000 	.word	0x437f0000

3400536c <ISP_Algo_GetUpStat>:
{
3400536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34005370:	b087      	sub	sp, #28
34005372:	460c      	mov	r4, r1
  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
34005374:	a902      	add	r1, sp, #8
{
34005376:	4680      	mov	r8, r0
  if ((ISP_SVC_ISP_GetGain(hIsp, &ISPGain) == ISP_OK) && (ISPGain.enable == 1))
34005378:	f001 f81c 	bl	340063b4 <ISP_SVC_ISP_GetGain>
3400537c:	f894 7036 	ldrb.w	r7, [r4, #54]	@ 0x36
34005380:	4606      	mov	r6, r0
34005382:	2800      	cmp	r0, #0
34005384:	d13b      	bne.n	340053fe <ISP_Algo_GetUpStat+0x92>
34005386:	f89d 3008 	ldrb.w	r3, [sp, #8]
3400538a:	2b01      	cmp	r3, #1
3400538c:	d137      	bne.n	340053fe <ISP_Algo_GetUpStat+0x92>
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
3400538e:	4d1e      	ldr	r5, [pc, #120]	@ (34005408 <ISP_Algo_GetUpStat+0x9c>)
34005390:	f894 1035 	ldrb.w	r1, [r4, #53]	@ 0x35
34005394:	4603      	mov	r3, r0
34005396:	9a04      	ldr	r2, [sp, #16]
34005398:	fba1 0105 	umull	r0, r1, r1, r5
3400539c:	f7fc fb86 	bl	34001aac <__aeabi_ldivmod>
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
340053a0:	4633      	mov	r3, r6
    upG = (int64_t) pStats->down.averageG * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainG;
340053a2:	4681      	mov	r9, r0
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
340053a4:	9a05      	ldr	r2, [sp, #20]
340053a6:	fba7 0105 	umull	r0, r1, r7, r5
340053aa:	f7fc fb7f 	bl	34001aac <__aeabi_ldivmod>
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
340053ae:	f894 1034 	ldrb.w	r1, [r4, #52]	@ 0x34
    upB = (int64_t) pStats->down.averageB * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainB;
340053b2:	4607      	mov	r7, r0
    upR = (int64_t) pStats->down.averageR * ISP_GAIN_PRECISION_FACTOR / ISPGain.ispGainR;
340053b4:	4633      	mov	r3, r6
340053b6:	fba1 0105 	umull	r0, r1, r1, r5
340053ba:	9a03      	ldr	r2, [sp, #12]
340053bc:	f7fc fb76 	bl	34001aac <__aeabi_ldivmod>
    pStats->up.averageG = (uint32_t) upG;
340053c0:	f884 9001 	strb.w	r9, [r4, #1]
    pStats->up.averageR = (uint32_t) upR;
340053c4:	7020      	strb	r0, [r4, #0]
    pStats->up.averageB = (uint32_t) upB;
340053c6:	70a7      	strb	r7, [r4, #2]
    if ((ISP_SVC_ISP_GetBlackLevel(hIsp, &BlackLevel) == ISP_OK) && (BlackLevel.enable == 1))
340053c8:	4640      	mov	r0, r8
340053ca:	a901      	add	r1, sp, #4
340053cc:	f000 ff3b 	bl	34006246 <ISP_SVC_ISP_GetBlackLevel>
340053d0:	b990      	cbnz	r0, 340053f8 <ISP_Algo_GetUpStat+0x8c>
340053d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
340053d6:	2b01      	cmp	r3, #1
340053d8:	d10e      	bne.n	340053f8 <ISP_Algo_GetUpStat+0x8c>
    pStats->up.averageR += BlackLevel.BLCR;
340053da:	7823      	ldrb	r3, [r4, #0]
340053dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
340053e0:	4413      	add	r3, r2
340053e2:	7023      	strb	r3, [r4, #0]
    pStats->up.averageG += BlackLevel.BLCG;
340053e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
340053e8:	7863      	ldrb	r3, [r4, #1]
340053ea:	4413      	add	r3, r2
340053ec:	7063      	strb	r3, [r4, #1]
    pStats->up.averageB += BlackLevel.BLCB;
340053ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
340053f2:	78a3      	ldrb	r3, [r4, #2]
340053f4:	4413      	add	r3, r2
340053f6:	70a3      	strb	r3, [r4, #2]
}
340053f8:	b007      	add	sp, #28
340053fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    pStats->up.averageR = pStats->down.averageR;
340053fe:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
    pStats->up.averageB = pStats->down.averageB;
34005400:	70a7      	strb	r7, [r4, #2]
    pStats->up.averageR = pStats->down.averageR;
34005402:	8023      	strh	r3, [r4, #0]
}
34005404:	e7f8      	b.n	340053f8 <ISP_Algo_GetUpStat+0x8c>
34005406:	bf00      	nop
34005408:	05f5e100 	.word	0x05f5e100
3400540c:	00000000 	.word	0x00000000

34005410 <ISP_Algo_ApplyCConv>:
{
34005410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34005414:	b08b      	sub	sp, #44	@ 0x2c
34005416:	460e      	mov	r6, r1
  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
34005418:	4669      	mov	r1, sp
{
3400541a:	4615      	mov	r5, r2
3400541c:	461c      	mov	r4, r3
  if ((ISP_SVC_ISP_GetColorConv(hIsp, &colorConv) == ISP_OK) && (colorConv.enable == 1))
3400541e:	f001 f89b 	bl	34006558 <ISP_SVC_ISP_GetColorConv>
34005422:	4602      	mov	r2, r0
34005424:	2800      	cmp	r0, #0
34005426:	f040 8096 	bne.w	34005556 <ISP_Algo_ApplyCConv+0x146>
3400542a:	f89d 3000 	ldrb.w	r3, [sp]
3400542e:	2b01      	cmp	r3, #1
34005430:	f040 8091 	bne.w	34005556 <ISP_Algo_ApplyCConv+0x146>
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
34005434:	9b01      	ldr	r3, [sp, #4]
34005436:	17d9      	asrs	r1, r3, #31
34005438:	fba3 3706 	umull	r3, r7, r3, r6
3400543c:	fb06 7701 	mla	r7, r6, r1, r7
34005440:	9902      	ldr	r1, [sp, #8]
34005442:	ea4f 7ce1 	mov.w	ip, r1, asr #31
34005446:	fba1 1005 	umull	r1, r0, r1, r5
3400544a:	fb05 000c 	mla	r0, r5, ip, r0
3400544e:	185b      	adds	r3, r3, r1
34005450:	eb47 0700 	adc.w	r7, r7, r0
34005454:	9803      	ldr	r0, [sp, #12]
34005456:	ea4f 7ce0 	mov.w	ip, r0, asr #31
3400545a:	fba0 0104 	umull	r0, r1, r0, r4
3400545e:	fb04 110c 	mla	r1, r4, ip, r1
34005462:	1818      	adds	r0, r3, r0
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
34005464:	9b04      	ldr	r3, [sp, #16]
    ccR = (int64_t) inR * colorConv.coeff[0][0] + (int64_t) inG * colorConv.coeff[0][1] + (int64_t) inB * colorConv.coeff[0][2];
34005466:	eb41 0107 	adc.w	r1, r1, r7
    ccG = (int64_t) inR * colorConv.coeff[1][0] + (int64_t) inG * colorConv.coeff[1][1] + (int64_t) inB * colorConv.coeff[1][2];
3400546a:	17df      	asrs	r7, r3, #31
3400546c:	fba3 8306 	umull	r8, r3, r3, r6
34005470:	fb06 3307 	mla	r3, r6, r7, r3
34005474:	9f05      	ldr	r7, [sp, #20]
34005476:	fba7 ce05 	umull	ip, lr, r7, r5
3400547a:	ea4f 79e7 	mov.w	r9, r7, asr #31
3400547e:	fb05 ee09 	mla	lr, r5, r9, lr
34005482:	eb18 070c 	adds.w	r7, r8, ip
34005486:	f8dd c018 	ldr.w	ip, [sp, #24]
3400548a:	eb43 030e 	adc.w	r3, r3, lr
3400548e:	ea4f 7eec 	mov.w	lr, ip, asr #31
34005492:	fbac c804 	umull	ip, r8, ip, r4
34005496:	fb04 880e 	mla	r8, r4, lr, r8
3400549a:	eb17 070c 	adds.w	r7, r7, ip
3400549e:	eb48 0803 	adc.w	r8, r8, r3
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
340054a2:	9b07      	ldr	r3, [sp, #28]
340054a4:	ea4f 7ce3 	mov.w	ip, r3, asr #31
340054a8:	fba3 e306 	umull	lr, r3, r3, r6
340054ac:	fb06 3c0c 	mla	ip, r6, ip, r3
340054b0:	9b08      	ldr	r3, [sp, #32]
340054b2:	ea4f 79e3 	mov.w	r9, r3, asr #31
340054b6:	fba3 3605 	umull	r3, r6, r3, r5
340054ba:	fb05 6509 	mla	r5, r5, r9, r6
340054be:	eb1e 0303 	adds.w	r3, lr, r3
340054c2:	eb4c 0c05 	adc.w	ip, ip, r5
340054c6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340054c8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
340054cc:	fba5 5604 	umull	r5, r6, r5, r4
340054d0:	fb04 660e 	mla	r6, r4, lr, r6
340054d4:	195c      	adds	r4, r3, r5
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
340054d6:	f04f 33ff 	mov.w	r3, #4294967295
340054da:	4d29      	ldr	r5, [pc, #164]	@ (34005580 <ISP_Algo_ApplyCConv+0x170>)
    ccB = (int64_t) inR * colorConv.coeff[2][0] + (int64_t) inG * colorConv.coeff[2][1] + (int64_t) inB * colorConv.coeff[2][2];
340054dc:	eb46 060c 	adc.w	r6, r6, ip
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
340054e0:	42a8      	cmp	r0, r5
340054e2:	eb71 0303 	sbcs.w	r3, r1, r3
340054e6:	db3f      	blt.n	34005568 <ISP_Algo_ApplyCConv+0x158>
    ccR /= ISP_CCM_PRECISION_FACTOR;
340054e8:	a323      	add	r3, pc, #140	@ (adr r3, 34005578 <ISP_Algo_ApplyCConv+0x168>)
340054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
340054ee:	f7fc fadd 	bl	34001aac <__aeabi_ldivmod>
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
340054f2:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
340054f6:	f171 0100 	sbcs.w	r1, r1, #0
340054fa:	4681      	mov	r9, r0
340054fc:	db01      	blt.n	34005502 <ISP_Algo_ApplyCConv+0xf2>
340054fe:	f04f 09ff 	mov.w	r9, #255	@ 0xff
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
34005502:	f04f 33ff 	mov.w	r3, #4294967295
34005506:	42af      	cmp	r7, r5
34005508:	eb78 0303 	sbcs.w	r3, r8, r3
3400550c:	db2e      	blt.n	3400556c <ISP_Algo_ApplyCConv+0x15c>
    ccG /= ISP_CCM_PRECISION_FACTOR;
3400550e:	a31a      	add	r3, pc, #104	@ (adr r3, 34005578 <ISP_Algo_ApplyCConv+0x168>)
34005510:	e9d3 2300 	ldrd	r2, r3, [r3]
34005514:	4638      	mov	r0, r7
34005516:	4641      	mov	r1, r8
34005518:	f7fc fac8 	bl	34001aac <__aeabi_ldivmod>
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
3400551c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34005520:	f171 0100 	sbcs.w	r1, r1, #0
34005524:	4607      	mov	r7, r0
34005526:	db00      	blt.n	3400552a <ISP_Algo_ApplyCConv+0x11a>
34005528:	27ff      	movs	r7, #255	@ 0xff
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
3400552a:	f04f 33ff 	mov.w	r3, #4294967295
3400552e:	42ac      	cmp	r4, r5
34005530:	eb76 0303 	sbcs.w	r3, r6, r3
34005534:	db1c      	blt.n	34005570 <ISP_Algo_ApplyCConv+0x160>
    ccB /= ISP_CCM_PRECISION_FACTOR;
34005536:	a310      	add	r3, pc, #64	@ (adr r3, 34005578 <ISP_Algo_ApplyCConv+0x168>)
34005538:	e9d3 2300 	ldrd	r2, r3, [r3]
3400553c:	4620      	mov	r0, r4
3400553e:	4631      	mov	r1, r6
34005540:	f7fc fab4 	bl	34001aac <__aeabi_ldivmod>
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
34005544:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
34005548:	f171 0100 	sbcs.w	r1, r1, #0
3400554c:	4604      	mov	r4, r0
3400554e:	db00      	blt.n	34005552 <ISP_Algo_ApplyCConv+0x142>
34005550:	24ff      	movs	r4, #255	@ 0xff
    *outR = (uint32_t) ccR;
34005552:	464e      	mov	r6, r9
    *outG = (uint32_t) ccG;
34005554:	463d      	mov	r5, r7
    *outR = (uint32_t) ccR;
34005556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34005558:	601e      	str	r6, [r3, #0]
    *outG = (uint32_t) ccG;
3400555a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
3400555c:	601d      	str	r5, [r3, #0]
    *outB = (uint32_t) ccB;
3400555e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
34005560:	601c      	str	r4, [r3, #0]
}
34005562:	b00b      	add	sp, #44	@ 0x2c
34005564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ccR = (ccR < 0) ? 0 : (ccR > 255) ? 255 : ccR;
34005568:	4691      	mov	r9, r2
3400556a:	e7ca      	b.n	34005502 <ISP_Algo_ApplyCConv+0xf2>
    ccG = (ccG < 0) ? 0 : (ccG > 255) ? 255 : ccG;
3400556c:	2700      	movs	r7, #0
3400556e:	e7dc      	b.n	3400552a <ISP_Algo_ApplyCConv+0x11a>
    ccB = (ccB < 0) ? 0 : (ccB > 255) ? 255 : ccB;
34005570:	2400      	movs	r4, #0
34005572:	e7ee      	b.n	34005552 <ISP_Algo_ApplyCConv+0x142>
34005574:	f3af 8000 	nop.w
34005578:	05f5e100 	.word	0x05f5e100
3400557c:	00000000 	.word	0x00000000
34005580:	fa0a1f01 	.word	0xfa0a1f01
34005584:	00000000 	.word	0x00000000

34005588 <ISP_Algo_AWB_Process>:
  * @param  hIsp:  ISP device handle. To cast in (ISP_HandleTypeDef *).
  * @param  pAlgo: ISP algorithm handle. To cast in (ISP_AlgoTypeDef *).
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_AWB_Process(void *hIsp, void *pAlgo)
{
34005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400558c:	ed2d 8b02 	vpush	{d8}
  ISP_ISPGainTypeDef ISPGainConfig;
  ISP_AlgoTypeDef *algo = (ISP_AlgoTypeDef *)pAlgo;
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
  evision_return_t e_ret;
  uint32_t ccAvgR, ccAvgG, ccAvgB, colorTemp, i, j, profId, profNb;
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
34005590:	2400      	movs	r4, #0
{
34005592:	b0a1      	sub	sp, #132	@ 0x84
34005594:	4606      	mov	r6, r0
34005596:	4688      	mov	r8, r1
  float cfaGains[4], ccmCoeffs[3][3], ccmOffsets[3] = { 0 };
34005598:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
3400559c:	940b      	str	r4, [sp, #44]	@ 0x2c
  static uint32_t statsHistory[3][3] = { 0 };
  static uint32_t colorTempHistory[2] = { 0 };
  static uint8_t skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_INIT;
  uint8_t stat_has_changed = false;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
3400559e:	f001 f8d7 	bl	34006750 <ISP_SVC_IQParam_Get>

  if (IQParamConfig->AWBAlgo.enable == false)
340055a2:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
340055a6:	4605      	mov	r5, r0
  if (IQParamConfig->AWBAlgo.enable == false)
340055a8:	4b71      	ldr	r3, [pc, #452]	@ (34005770 <ISP_Algo_AWB_Process+0x1e8>)
340055aa:	b932      	cbnz	r2, 340055ba <ISP_Algo_AWB_Process+0x32>
  {
    enableCurrent = false;
340055ac:	701a      	strb	r2, [r3, #0]
    return ISP_OK;
340055ae:	2000      	movs	r0, #0
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
    break;
  }

  return ret;
}
340055b0:	b021      	add	sp, #132	@ 0x84
340055b2:	ecbd 8b02 	vpop	{d8}
340055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if ((enableCurrent == false) || (IQParamConfig->AWBAlgo.enable == ISP_AWB_ENABLE_RECONFIGURE))
340055ba:	7819      	ldrb	r1, [r3, #0]
340055bc:	b111      	cbz	r1, 340055c4 <ISP_Algo_AWB_Process+0x3c>
340055be:	2aff      	cmp	r2, #255	@ 0xff
340055c0:	f040 80b6 	bne.w	34005730 <ISP_Algo_AWB_Process+0x1a8>
    algo->state = ISP_ALGO_STATE_INIT;
340055c4:	2200      	movs	r2, #0
340055c6:	f888 2001 	strb.w	r2, [r8, #1]
    IQParamConfig->AWBAlgo.enable = true;
340055ca:	2201      	movs	r2, #1
    reconfigureRequest = true;
340055cc:	4969      	ldr	r1, [pc, #420]	@ (34005774 <ISP_Algo_AWB_Process+0x1ec>)
    enableCurrent = true;
340055ce:	701a      	strb	r2, [r3, #0]
    IQParamConfig->AWBAlgo.enable = true;
340055d0:	f885 2074 	strb.w	r2, [r5, #116]	@ 0x74
    reconfigureRequest = true;
340055d4:	700a      	strb	r2, [r1, #0]
    skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
340055d6:	2204      	movs	r2, #4
340055d8:	4b67      	ldr	r3, [pc, #412]	@ (34005778 <ISP_Algo_AWB_Process+0x1f0>)
340055da:	701a      	strb	r2, [r3, #0]
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
340055dc:	2400      	movs	r4, #0
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
340055de:	ed9f 8a67 	vldr	s16, [pc, #412]	@ 3400577c <ISP_Algo_AWB_Process+0x1f4>
340055e2:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 34005788 <ISP_Algo_AWB_Process+0x200>
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
340055e6:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 34005784 <ISP_Algo_AWB_Process+0x1fc>
340055ea:	f505 778a 	add.w	r7, r5, #276	@ 0x114
      colorTemp = IQParamConfig->AWBAlgo.referenceColorTemp[profId];
340055ee:	6878      	ldr	r0, [r7, #4]
      if (colorTemp == 0)
340055f0:	2800      	cmp	r0, #0
340055f2:	f000 80ad 	beq.w	34005750 <ISP_Algo_AWB_Process+0x1c8>
      if (profNb > 0)
340055f6:	b154      	cbz	r4, 3400560e <ISP_Algo_AWB_Process+0x86>
        colorTempThresholds[profNb - 1] = (float) ((colorTemp + 3 * IQParamConfig->AWBAlgo.referenceColorTemp[profId - 1]) /4 );
340055f8:	683b      	ldr	r3, [r7, #0]
340055fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
340055fe:	4403      	add	r3, r0
34005600:	089b      	lsrs	r3, r3, #2
34005602:	ee07 3a90 	vmov	s15, r3
34005606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400560a:	ed49 7a01 	vstr	s15, [r9, #-4]
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
3400560e:	edd7 7a06 	vldr	s15, [r7, #24]
34005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
34005616:	ee87 7a88 	vdiv.f32	s14, s15, s16
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
3400561a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
3400561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
      cfaGains[0] = (float) IQParamConfig->AWBAlgo.ispGainR[profId] / ISP_GAIN_PRECISION_FACTOR;
34005622:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34005626:	ee87 7a88 	vdiv.f32	s14, s15, s16
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
3400562a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
3400562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
      cfaGains[1] = (float) IQParamConfig->AWBAlgo.ispGainG[profId] / ISP_GAIN_PRECISION_FACTOR;
34005632:	ed8d 7a11 	vstr	s14, [sp, #68]	@ 0x44
      cfaGains[2] = cfaGains[1];
34005636:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
      cfaGains[3] = (float) IQParamConfig->AWBAlgo.ispGainB[profId] / ISP_GAIN_PRECISION_FACTOR;
3400563a:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400563e:	2324      	movs	r3, #36	@ 0x24
34005640:	a916      	add	r1, sp, #88	@ 0x58
34005642:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
      for (i = 0; i < 3; i++)
34005646:	f04f 0c00 	mov.w	ip, #0
3400564a:	460a      	mov	r2, r1
3400564c:	fb03 5304 	mla	r3, r3, r4, r5
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
34005650:	edd3 7a5a 	vldr	s15, [r3, #360]	@ 0x168
34005654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34005658:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400565c:	edd3 7a5b 	vldr	s15, [r3, #364]	@ 0x16c
34005660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34005664:	ed81 7a00 	vstr	s14, [r1]
34005668:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400566c:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
34005670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34005674:	ed81 7a01 	vstr	s14, [r1, #4]
34005678:	ee87 7a88 	vdiv.f32	s14, s15, s16
      for (i = 0; i < 3; i++)
3400567c:	f10c 0c01 	add.w	ip, ip, #1
34005680:	f1bc 0f03 	cmp.w	ip, #3
          ccmCoeffs[i][j] = (float) IQParamConfig->AWBAlgo.coeff[profId][i][j] / ISP_CCM_PRECISION_FACTOR;
34005684:	ed81 7a02 	vstr	s14, [r1, #8]
      for (i = 0; i < 3; i++)
34005688:	f103 030c 	add.w	r3, r3, #12
3400568c:	f101 010c 	add.w	r1, r1, #12
34005690:	d1de      	bne.n	34005650 <ISP_Algo_AWB_Process+0xc8>
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
34005692:	ee07 0a90 	vmov	s15, r0
34005696:	2044      	movs	r0, #68	@ 0x44
34005698:	eeb8 0a67 	vcvt.f32.u32	s0, s15
3400569c:	fb00 a004 	mla	r0, r0, r4, sl
340056a0:	ab09      	add	r3, sp, #36	@ 0x24
340056a2:	a910      	add	r1, sp, #64	@ 0x40
      profNb++;
340056a4:	3401      	adds	r4, #1
      evision_api_awb_set_profile(&awbProfiles[profId], (float) colorTemp, cfaGains, ccmCoeffs, ccmOffsets);
340056a6:	f7fb fb13 	bl	34000cd0 <evision_api_awb_set_profile>
    for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
340056aa:	2c05      	cmp	r4, #5
340056ac:	f107 0704 	add.w	r7, r7, #4
340056b0:	f109 0904 	add.w	r9, r9, #4
340056b4:	d19b      	bne.n	340055ee <ISP_Algo_AWB_Process+0x66>
                                          (double) IQParamConfig->AWBAlgo.referenceColorTemp[profNb - 1], profNb,
340056b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    e_ret = evision_api_awb_init_profiles(pIspAWBestimator, (double) IQParamConfig->AWBAlgo.referenceColorTemp[0],
340056ba:	ed93 1a45 	vldr	s2, [r3, #276]	@ 0x114
340056be:	ed95 0a46 	vldr	s0, [r5, #280]	@ 0x118
340056c2:	4d2f      	ldr	r5, [pc, #188]	@ (34005780 <ISP_Algo_AWB_Process+0x1f8>)
340056c4:	eeb8 1b41 	vcvt.f64.u32	d1, s2
340056c8:	eeb8 0b40 	vcvt.f64.u32	d0, s0
340056cc:	4b2d      	ldr	r3, [pc, #180]	@ (34005784 <ISP_Algo_AWB_Process+0x1fc>)
340056ce:	4a2e      	ldr	r2, [pc, #184]	@ (34005788 <ISP_Algo_AWB_Process+0x200>)
340056d0:	6828      	ldr	r0, [r5, #0]
340056d2:	b2a1      	uxth	r1, r4
340056d4:	f7fb fb1c 	bl	34000d10 <evision_api_awb_init_profiles>
    if (e_ret != EVISION_RET_SUCCESS)
340056d8:	2801      	cmp	r0, #1
340056da:	f040 8144 	bne.w	34005966 <ISP_Algo_AWB_Process+0x3de>
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
340056de:	f20f 0b80 	addw	fp, pc, #128	@ 0x80
340056e2:	e9db ab00 	ldrd	sl, fp, [fp]
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
340056e6:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
340056ea:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 34005768 <ISP_Algo_AWB_Process+0x1e0>
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
340056ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
340056f2:	2c03      	cmp	r4, #3
340056f4:	bf98      	it	ls
340056f6:	eeb0 7b46 	vmovls.f64	d7, d6
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
340056fa:	682b      	ldr	r3, [r5, #0]
    pIspAWBestimator->hyper_params.gm_tolerance = 1;
340056fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
    pIspAWBestimator->hyper_params.conv_criterion = 3;
34005700:	4a22      	ldr	r2, [pc, #136]	@ (3400578c <ISP_Algo_AWB_Process+0x204>)
    pIspAWBestimator->hyper_params.speed_p_max = (profNb < 4)? 1.8 : 2.0;
34005702:	ed83 7ba8 	vstr	d7, [r3, #672]	@ 0x2a0
    pIspAWBestimator->hyper_params.speed_p_min = 1.35;
34005706:	e9c3 aba6 	strd	sl, fp, [r3, #664]	@ 0x298
    pIspAWBestimator->hyper_params.conv_criterion = 3;
3400570a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
3400570e:	2305      	movs	r3, #5
34005710:	e9cd 0301 	strd	r0, r3, [sp, #4]
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005714:	2402      	movs	r4, #2
34005716:	4642      	mov	r2, r8
34005718:	4630      	mov	r0, r6
3400571a:	4b1d      	ldr	r3, [pc, #116]	@ (34005790 <ISP_Algo_AWB_Process+0x208>)
3400571c:	491d      	ldr	r1, [pc, #116]	@ (34005794 <ISP_Algo_AWB_Process+0x20c>)
3400571e:	9400      	str	r4, [sp, #0]
34005720:	f001 fa5a 	bl	34006bd8 <ISP_SVC_Stats_GetNext>
    if (ret != ISP_OK)
34005724:	2800      	cmp	r0, #0
34005726:	f47f af43 	bne.w	340055b0 <ISP_Algo_AWB_Process+0x28>
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
3400572a:	f888 4001 	strb.w	r4, [r8, #1]
    break;
3400572e:	e73f      	b.n	340055b0 <ISP_Algo_AWB_Process+0x28>
  switch(algo->state)
34005730:	f898 3001 	ldrb.w	r3, [r8, #1]
34005734:	2b03      	cmp	r3, #3
34005736:	d02f      	beq.n	34005798 <ISP_Algo_AWB_Process+0x210>
34005738:	f63f af39 	bhi.w	340055ae <ISP_Algo_AWB_Process+0x26>
3400573c:	2b00      	cmp	r3, #0
3400573e:	f43f af4d 	beq.w	340055dc <ISP_Algo_AWB_Process+0x54>
34005742:	2b01      	cmp	r3, #1
34005744:	f47f af33 	bne.w	340055ae <ISP_Algo_AWB_Process+0x26>
    ret = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
34005748:	2205      	movs	r2, #5
3400574a:	e9cd 3201 	strd	r3, r2, [sp, #4]
3400574e:	e7e1      	b.n	34005714 <ISP_Algo_AWB_Process+0x18c>
      return ISP_ERR_WB_COLORTEMP;
34005750:	2096      	movs	r0, #150	@ 0x96
    if (profNb == 0)
34005752:	2c00      	cmp	r4, #0
34005754:	f43f af2c 	beq.w	340055b0 <ISP_Algo_AWB_Process+0x28>
34005758:	e7ad      	b.n	340056b6 <ISP_Algo_AWB_Process+0x12e>
3400575a:	bf00      	nop
3400575c:	f3af 8000 	nop.w
34005760:	9999999a 	.word	0x9999999a
34005764:	3ff59999 	.word	0x3ff59999
34005768:	cccccccd 	.word	0xcccccccd
3400576c:	3ffccccc 	.word	0x3ffccccc
34005770:	3410dd6d 	.word	0x3410dd6d
34005774:	3410dd6c 	.word	0x3410dd6c
34005778:	34108d94 	.word	0x34108d94
3400577c:	4cbebc20 	.word	0x4cbebc20
34005780:	3410de0c 	.word	0x3410de0c
34005784:	3410dc08 	.word	0x3410dc08
34005788:	3410dd5c 	.word	0x3410dd5c
3400578c:	40400000 	.word	0x40400000
34005790:	3410db90 	.word	0x3410db90
34005794:	34005033 	.word	0x34005033
    ISP_Algo_GetUpStat(hIsp, &stats);
34005798:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 34005a08 <ISP_Algo_AWB_Process+0x480>
3400579c:	4630      	mov	r0, r6
3400579e:	4649      	mov	r1, r9
340057a0:	f7ff fde4 	bl	3400536c <ISP_Algo_GetUpStat>
    for (i = 0; i < 3; i++)
340057a4:	f8df c26c 	ldr.w	ip, [pc, #620]	@ 34005a14 <ISP_Algo_AWB_Process+0x48c>
340057a8:	46a6      	mov	lr, r4
340057aa:	4667      	mov	r7, ip
      if ((abs(stats.up.averageR - statsHistory[i][0]) > 2) || (abs(stats.up.averageG - statsHistory[i][1]) > 2) || (abs(stats.up.averageB - statsHistory[i][2]) > 2))
340057ac:	f899 0000 	ldrb.w	r0, [r9]
340057b0:	f899 1001 	ldrb.w	r1, [r9, #1]
340057b4:	f899 2002 	ldrb.w	r2, [r9, #2]
340057b8:	f8dc 3000 	ldr.w	r3, [ip]
340057bc:	1ac3      	subs	r3, r0, r3
340057be:	2b00      	cmp	r3, #0
340057c0:	bfb8      	it	lt
340057c2:	425b      	neglt	r3, r3
340057c4:	2b02      	cmp	r3, #2
340057c6:	f300 80a8 	bgt.w	3400591a <ISP_Algo_AWB_Process+0x392>
340057ca:	f8dc 3004 	ldr.w	r3, [ip, #4]
340057ce:	1acb      	subs	r3, r1, r3
340057d0:	2b00      	cmp	r3, #0
340057d2:	bfb8      	it	lt
340057d4:	425b      	neglt	r3, r3
340057d6:	2b02      	cmp	r3, #2
340057d8:	f300 809f 	bgt.w	3400591a <ISP_Algo_AWB_Process+0x392>
340057dc:	f8dc 3008 	ldr.w	r3, [ip, #8]
340057e0:	1ad3      	subs	r3, r2, r3
340057e2:	2b00      	cmp	r3, #0
340057e4:	bfb8      	it	lt
340057e6:	425b      	neglt	r3, r3
        stat_has_changed = true;
340057e8:	2b03      	cmp	r3, #3
340057ea:	bfa8      	it	ge
340057ec:	2401      	movge	r4, #1
    for (i = 0; i < 3; i++)
340057ee:	f10e 0e01 	add.w	lr, lr, #1
340057f2:	f1be 0f03 	cmp.w	lr, #3
340057f6:	f10c 0c0c 	add.w	ip, ip, #12
340057fa:	d1dd      	bne.n	340057b8 <ISP_Algo_AWB_Process+0x230>
    if (skip_stat_check_count || stat_has_changed || reconfigureRequest)
340057fc:	4b7e      	ldr	r3, [pc, #504]	@ (340059f8 <ISP_Algo_AWB_Process+0x470>)
340057fe:	f8df a218 	ldr.w	sl, [pc, #536]	@ 34005a18 <ISP_Algo_AWB_Process+0x490>
34005802:	f893 c000 	ldrb.w	ip, [r3]
34005806:	f89a e000 	ldrb.w	lr, [sl]
3400580a:	f8df b210 	ldr.w	fp, [pc, #528]	@ 34005a1c <ISP_Algo_AWB_Process+0x494>
3400580e:	ea4e 030c 	orr.w	r3, lr, ip
34005812:	431c      	orrs	r4, r3
34005814:	b2e4      	uxtb	r4, r4
34005816:	2c00      	cmp	r4, #0
34005818:	d04c      	beq.n	340058b4 <ISP_Algo_AWB_Process+0x32c>
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
3400581a:	ab08      	add	r3, sp, #32
        statsHistory[2][1] = stats.up.averageG;
3400581c:	e9c7 0106 	strd	r0, r1, [r7, #24]
        statsHistory[2][2] = stats.up.averageB;
34005820:	623a      	str	r2, [r7, #32]
        ISP_Algo_ApplyCConv(hIsp, stats.down.averageR, stats.down.averageG, stats.down.averageB, &ccAvgR, &ccAvgG, &ccAvgB);
34005822:	9302      	str	r3, [sp, #8]
34005824:	ab07      	add	r3, sp, #28
34005826:	9301      	str	r3, [sp, #4]
34005828:	ab06      	add	r3, sp, #24
3400582a:	9300      	str	r3, [sp, #0]
3400582c:	f899 3036 	ldrb.w	r3, [r9, #54]	@ 0x36
34005830:	f899 2035 	ldrb.w	r2, [r9, #53]	@ 0x35
34005834:	4630      	mov	r0, r6
34005836:	f899 1034 	ldrb.w	r1, [r9, #52]	@ 0x34
3400583a:	f7ff fde9 	bl	34005410 <ISP_Algo_ApplyCConv>
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
3400583e:	4630      	mov	r0, r6
34005840:	9906      	ldr	r1, [sp, #24]
34005842:	f7ff fd69 	bl	34005318 <ISP_Algo_ApplyGammaInverse>
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
34005846:	4630      	mov	r0, r6
34005848:	9907      	ldr	r1, [sp, #28]
        meas[0] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgR);
3400584a:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
3400584e:	f7ff fd63 	bl	34005318 <ISP_Algo_ApplyGammaInverse>
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
34005852:	4630      	mov	r0, r6
34005854:	9908      	ldr	r1, [sp, #32]
        meas[1] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgG);
34005856:	ed8d 0b12 	vstr	d0, [sp, #72]	@ 0x48
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
3400585a:	f7ff fd5d 	bl	34005318 <ISP_Algo_ApplyGammaInverse>
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
3400585e:	4867      	ldr	r0, [pc, #412]	@ (340059fc <ISP_Algo_AWB_Process+0x474>)
34005860:	2201      	movs	r2, #1
34005862:	2100      	movs	r1, #0
34005864:	6800      	ldr	r0, [r0, #0]
34005866:	ab10      	add	r3, sp, #64	@ 0x40
        meas[2] = ISP_Algo_ApplyGammaInverse(hIsp, ccAvgB);
34005868:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
        e_ret = evision_api_awb_run_average(pIspAWBestimator, NULL, 1, meas);
3400586c:	f7fb fc26 	bl	340010bc <evision_api_awb_run_average>
        if (e_ret == EVISION_RET_SUCCESS)
34005870:	2801      	cmp	r0, #1
34005872:	d176      	bne.n	34005962 <ISP_Algo_AWB_Process+0x3da>
          if (pIspAWBestimator->out_temp != currentColorTemp || reconfigureRequest == true)
34005874:	4b61      	ldr	r3, [pc, #388]	@ (340059fc <ISP_Algo_AWB_Process+0x474>)
34005876:	681b      	ldr	r3, [r3, #0]
34005878:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
3400587c:	4b60      	ldr	r3, [pc, #384]	@ (34005a00 <ISP_Algo_AWB_Process+0x478>)
3400587e:	681b      	ldr	r3, [r3, #0]
34005880:	ee06 3a90 	vmov	s13, r3
34005884:	eeb8 6b66 	vcvt.f64.u32	d6, s13
34005888:	eeb4 7b46 	vcmp.f64	d7, d6
3400588c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34005890:	9305      	str	r3, [sp, #20]
34005892:	d103      	bne.n	3400589c <ISP_Algo_AWB_Process+0x314>
34005894:	4b58      	ldr	r3, [pc, #352]	@ (340059f8 <ISP_Algo_AWB_Process+0x470>)
34005896:	781b      	ldrb	r3, [r3, #0]
34005898:	2b01      	cmp	r3, #1
3400589a:	d10b      	bne.n	340058b4 <ISP_Algo_AWB_Process+0x32c>
            if (pIspAWBestimator->out_temp == colorTempHistory[1])
3400589c:	eddb 6a01 	vldr	s13, [fp, #4]
340058a0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
340058a4:	eeb4 7b46 	vcmp.f64	d7, d6
340058a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340058ac:	d137      	bne.n	3400591e <ISP_Algo_AWB_Process+0x396>
              skip_stat_check_count = 0; //oscillation detected
340058ae:	2300      	movs	r3, #0
340058b0:	f88a 3000 	strb.w	r3, [sl]
  ISP_StatusTypeDef ret_stat, ret = ISP_OK;
340058b4:	2400      	movs	r4, #0
    reconfigureRequest = false;
340058b6:	2300      	movs	r3, #0
340058b8:	4a4f      	ldr	r2, [pc, #316]	@ (340059f8 <ISP_Algo_AWB_Process+0x470>)
340058ba:	7013      	strb	r3, [r2, #0]
    if (skip_stat_check_count > 0) skip_stat_check_count--;
340058bc:	f89a 3000 	ldrb.w	r3, [sl]
340058c0:	b113      	cbz	r3, 340058c8 <ISP_Algo_AWB_Process+0x340>
340058c2:	3b01      	subs	r3, #1
340058c4:	f88a 3000 	strb.w	r3, [sl]
    statsHistory[1][0] = statsHistory[0][0];
340058c8:	683b      	ldr	r3, [r7, #0]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340058ca:	2205      	movs	r2, #5
    statsHistory[1][0] = statsHistory[0][0];
340058cc:	60fb      	str	r3, [r7, #12]
    statsHistory[1][1] = statsHistory[0][1];
340058ce:	687b      	ldr	r3, [r7, #4]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340058d0:	2502      	movs	r5, #2
    statsHistory[1][1] = statsHistory[0][1];
340058d2:	613b      	str	r3, [r7, #16]
    statsHistory[1][2] = statsHistory[0][2];
340058d4:	68bb      	ldr	r3, [r7, #8]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340058d6:	4630      	mov	r0, r6
    statsHistory[1][2] = statsHistory[0][2];
340058d8:	617b      	str	r3, [r7, #20]
    statsHistory[0][0] = stats.up.averageR;
340058da:	f899 3000 	ldrb.w	r3, [r9]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340058de:	4949      	ldr	r1, [pc, #292]	@ (34005a04 <ISP_Algo_AWB_Process+0x47c>)
    statsHistory[0][0] = stats.up.averageR;
340058e0:	603b      	str	r3, [r7, #0]
    statsHistory[0][1] = stats.up.averageG;
340058e2:	f899 3001 	ldrb.w	r3, [r9, #1]
340058e6:	607b      	str	r3, [r7, #4]
    statsHistory[0][2] = stats.up.averageB;
340058e8:	f899 3002 	ldrb.w	r3, [r9, #2]
340058ec:	60bb      	str	r3, [r7, #8]
    colorTempHistory[1] = colorTempHistory[0];
340058ee:	f8db 3000 	ldr.w	r3, [fp]
340058f2:	f8cb 3004 	str.w	r3, [fp, #4]
    colorTempHistory[0] = currentColorTemp;
340058f6:	4b42      	ldr	r3, [pc, #264]	@ (34005a00 <ISP_Algo_AWB_Process+0x478>)
340058f8:	681b      	ldr	r3, [r3, #0]
340058fa:	f8cb 3000 	str.w	r3, [fp]
    ret_stat = ISP_SVC_Stats_GetNext(hIsp, &ISP_Algo_AWB_StatCb, pAlgo, &stats, ISP_STAT_LOC_DOWN,
340058fe:	2301      	movs	r3, #1
34005900:	9500      	str	r5, [sp, #0]
34005902:	e9cd 3201 	strd	r3, r2, [sp, #4]
34005906:	4642      	mov	r2, r8
34005908:	4b3f      	ldr	r3, [pc, #252]	@ (34005a08 <ISP_Algo_AWB_Process+0x480>)
3400590a:	f001 f965 	bl	34006bd8 <ISP_SVC_Stats_GetNext>
    ret = (ret != ISP_OK) ? ret : ret_stat;
3400590e:	2c00      	cmp	r4, #0
34005910:	bf18      	it	ne
34005912:	4620      	movne	r0, r4
    algo->state = ISP_ALGO_STATE_WAITING_STAT;
34005914:	f888 5001 	strb.w	r5, [r8, #1]
    break;
34005918:	e64a      	b.n	340055b0 <ISP_Algo_AWB_Process+0x28>
        stat_has_changed = true;
3400591a:	2401      	movs	r4, #1
3400591c:	e767      	b.n	340057ee <ISP_Algo_AWB_Process+0x266>
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3400591e:	f89a 3000 	ldrb.w	r3, [sl]
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
34005922:	eefc 6bc7 	vcvt.u32.f64	s13, d7
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
34005926:	2b04      	cmp	r3, #4
34005928:	bf98      	it	ls
3400592a:	2304      	movls	r3, #4
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
3400592c:	4a37      	ldr	r2, [pc, #220]	@ (34005a0c <ISP_Algo_AWB_Process+0x484>)
              if (skip_stat_check_count <= ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION) skip_stat_check_count = ALGO_AWB_STAT_CHECK_SKIP_AFTER_CT_ESTIMATION;
3400592e:	bf98      	it	ls
34005930:	f88a 3000 	strbls.w	r3, [sl]
              Meta.colorTemp = (uint32_t) pIspAWBestimator->out_temp;
34005934:	edc2 6a04 	vstr	s13, [r2, #16]
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34005938:	2305      	movs	r3, #5
3400593a:	2200      	movs	r2, #0
3400593c:	f505 718a 	add.w	r1, r5, #276	@ 0x114
                if (pIspAWBestimator->out_temp == IQParamConfig->AWBAlgo.referenceColorTemp[profId])
34005940:	ed91 6a01 	vldr	s12, [r1, #4]
34005944:	eeb8 6b46 	vcvt.f64.u32	d6, s12
34005948:	eeb4 7b46 	vcmp.f64	d7, d6
3400594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34005950:	f101 0104 	add.w	r1, r1, #4
34005954:	d009      	beq.n	3400596a <ISP_Algo_AWB_Process+0x3e2>
              for (profId = 0; profId < ISP_AWB_COLORTEMP_REF; profId++)
34005956:	3b01      	subs	r3, #1
34005958:	f102 0201 	add.w	r2, r2, #1
3400595c:	d1f0      	bne.n	34005940 <ISP_Algo_AWB_Process+0x3b8>
                ret  = ISP_ERR_WB_COLORTEMP;
3400595e:	2496      	movs	r4, #150	@ 0x96
34005960:	e7a9      	b.n	340058b6 <ISP_Algo_AWB_Process+0x32e>
          ret = ISP_ERR_ALGO;
34005962:	24be      	movs	r4, #190	@ 0xbe
34005964:	e7a7      	b.n	340058b6 <ISP_Algo_AWB_Process+0x32e>
      return ISP_ERR_ALGO;
34005966:	20be      	movs	r0, #190	@ 0xbe
34005968:	e622      	b.n	340055b0 <ISP_Algo_AWB_Process+0x28>
                ColorConvConfig.enable = 1;
3400596a:	2301      	movs	r3, #1
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
3400596c:	f04f 0e04 	mov.w	lr, #4
                ColorConvConfig.enable = 1;
34005970:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
34005974:	2324      	movs	r3, #36	@ 0x24
34005976:	f04e e001 	dls	lr, lr
3400597a:	fb03 5302 	mla	r3, r3, r2, r5
3400597e:	ac17      	add	r4, sp, #92	@ 0x5c
34005980:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
34005984:	46a4      	mov	ip, r4
34005986:	6818      	ldr	r0, [r3, #0]
34005988:	6859      	ldr	r1, [r3, #4]
3400598a:	3308      	adds	r3, #8
3400598c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
34005990:	4664      	mov	r4, ip
34005992:	f00f c809 	le	lr, 34005984 <ISP_Algo_AWB_Process+0x3fc>
34005996:	9205      	str	r2, [sp, #20]
34005998:	6818      	ldr	r0, [r3, #0]
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
3400599a:	a916      	add	r1, sp, #88	@ 0x58
                memcpy(ColorConvConfig.coeff, IQParamConfig->AWBAlgo.coeff[profId], sizeof(ColorConvConfig.coeff));
3400599c:	f8cc 0000 	str.w	r0, [ip]
                ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConvConfig);
340059a0:	4630      	mov	r0, r6
340059a2:	f000 fd51 	bl	34006448 <ISP_SVC_ISP_SetColorConv>
                if (ret == ISP_OK)
340059a6:	9a05      	ldr	r2, [sp, #20]
340059a8:	4604      	mov	r4, r0
340059aa:	2800      	cmp	r0, #0
340059ac:	d183      	bne.n	340058b6 <ISP_Algo_AWB_Process+0x32e>
                  ISPGainConfig.enable = 1;
340059ae:	2301      	movs	r3, #1
340059b0:	eb05 0582 	add.w	r5, r5, r2, lsl #2
340059b4:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
340059b8:	f8d5 312c 	ldr.w	r3, [r5, #300]	@ 0x12c
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
340059bc:	4630      	mov	r0, r6
                  ISPGainConfig.ispGainR = IQParamConfig->AWBAlgo.ispGainR[profId];
340059be:	930d      	str	r3, [sp, #52]	@ 0x34
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
340059c0:	f8d5 3140 	ldr.w	r3, [r5, #320]	@ 0x140
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
340059c4:	a90c      	add	r1, sp, #48	@ 0x30
                  ISPGainConfig.ispGainG = IQParamConfig->AWBAlgo.ispGainG[profId];
340059c6:	930e      	str	r3, [sp, #56]	@ 0x38
                  ISPGainConfig.ispGainB = IQParamConfig->AWBAlgo.ispGainB[profId];
340059c8:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
340059cc:	9205      	str	r2, [sp, #20]
340059ce:	930f      	str	r3, [sp, #60]	@ 0x3c
                  ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGainConfig);
340059d0:	f000 fc56 	bl	34006280 <ISP_SVC_ISP_SetGain>
                  if (ret == ISP_OK)
340059d4:	4604      	mov	r4, r0
340059d6:	2800      	cmp	r0, #0
340059d8:	f47f af6d 	bne.w	340058b6 <ISP_Algo_AWB_Process+0x32e>
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
340059dc:	4b07      	ldr	r3, [pc, #28]	@ (340059fc <ISP_Algo_AWB_Process+0x474>)
                    current_awb_profId = profId;
340059de:	9a05      	ldr	r2, [sp, #20]
                    currentColorTemp = (uint32_t) pIspAWBestimator->out_temp ;
340059e0:	681b      	ldr	r3, [r3, #0]
340059e2:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
340059e6:	eebc 7bc7 	vcvt.u32.f64	s14, d7
340059ea:	4b05      	ldr	r3, [pc, #20]	@ (34005a00 <ISP_Algo_AWB_Process+0x478>)
340059ec:	ed83 7a00 	vstr	s14, [r3]
                    current_awb_profId = profId;
340059f0:	4b07      	ldr	r3, [pc, #28]	@ (34005a10 <ISP_Algo_AWB_Process+0x488>)
340059f2:	601a      	str	r2, [r3, #0]
340059f4:	e75f      	b.n	340058b6 <ISP_Algo_AWB_Process+0x32e>
340059f6:	bf00      	nop
340059f8:	3410dd6c 	.word	0x3410dd6c
340059fc:	3410de0c 	.word	0x3410de0c
34005a00:	3410db68 	.word	0x3410db68
34005a04:	34005033 	.word	0x34005033
34005a08:	3410db90 	.word	0x3410db90
34005a0c:	3410ddf4 	.word	0x3410ddf4
34005a10:	3410de08 	.word	0x3410de08
34005a14:	3410db6c 	.word	0x3410db6c
34005a18:	34108d94 	.word	0x34108d94
34005a1c:	3410db60 	.word	0x3410db60

34005a20 <ISP_Algo_Init>:
  *         Register and initialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Init(ISP_HandleTypeDef *hIsp)
{
34005a20:	b538      	push	{r3, r4, r5, lr}
34005a22:	4604      	mov	r4, r0
  ISP_AlgoTypeDef *algo;
  ISP_StatusTypeDef ret;
  uint8_t i;

  hIsp->algorithm = ISP_Algo_List;
34005a24:	2500      	movs	r5, #0
34005a26:	4b09      	ldr	r3, [pc, #36]	@ (34005a4c <ISP_Algo_Init+0x2c>)
34005a28:	6183      	str	r3, [r0, #24]

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
34005a2a:	69a3      	ldr	r3, [r4, #24]
34005a2c:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->Init != NULL))
34005a2e:	b921      	cbnz	r1, 34005a3a <ISP_Algo_Init+0x1a>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
34005a30:	3504      	adds	r5, #4
34005a32:	2d0c      	cmp	r5, #12
34005a34:	d1f9      	bne.n	34005a2a <ISP_Algo_Init+0xa>
        return ret;
      }
    }
  }

  return ISP_OK;
34005a36:	2000      	movs	r0, #0
}
34005a38:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->Init != NULL))
34005a3a:	684b      	ldr	r3, [r1, #4]
34005a3c:	2b00      	cmp	r3, #0
34005a3e:	d0f7      	beq.n	34005a30 <ISP_Algo_Init+0x10>
      ret = algo->Init((void*)hIsp, (void*)algo);
34005a40:	4620      	mov	r0, r4
34005a42:	4798      	blx	r3
      if (ret != ISP_OK)
34005a44:	2800      	cmp	r0, #0
34005a46:	d0f3      	beq.n	34005a30 <ISP_Algo_Init+0x10>
34005a48:	e7f6      	b.n	34005a38 <ISP_Algo_Init+0x18>
34005a4a:	bf00      	nop
34005a4c:	34108d98 	.word	0x34108d98

34005a50 <ISP_Algo_DeInit>:
  *         Deinitialize all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_DeInit(ISP_HandleTypeDef *hIsp)
{
34005a50:	b538      	push	{r3, r4, r5, lr}
34005a52:	4604      	mov	r4, r0
34005a54:	2500      	movs	r5, #0
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
34005a56:	69a3      	ldr	r3, [r4, #24]
34005a58:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->DeInit != NULL))
34005a5a:	b921      	cbnz	r1, 34005a66 <ISP_Algo_DeInit+0x16>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
34005a5c:	3504      	adds	r5, #4
34005a5e:	2d0c      	cmp	r5, #12
34005a60:	d1f9      	bne.n	34005a56 <ISP_Algo_DeInit+0x6>
        return ret;
      }
    }
  }

  return ISP_OK;
34005a62:	2000      	movs	r0, #0
}
34005a64:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->DeInit != NULL))
34005a66:	688b      	ldr	r3, [r1, #8]
34005a68:	2b00      	cmp	r3, #0
34005a6a:	d0f7      	beq.n	34005a5c <ISP_Algo_DeInit+0xc>
      ret = algo->DeInit((void*)hIsp, (void*)algo);
34005a6c:	4620      	mov	r0, r4
34005a6e:	4798      	blx	r3
      if (ret != ISP_OK)
34005a70:	2800      	cmp	r0, #0
34005a72:	d0f3      	beq.n	34005a5c <ISP_Algo_DeInit+0xc>
34005a74:	e7f6      	b.n	34005a64 <ISP_Algo_DeInit+0x14>

34005a76 <ISP_Algo_Process>:
  *         Process all the algorithms
  * @param  hIsp: ISP device handle
  * @retval operation result
  */
ISP_StatusTypeDef ISP_Algo_Process(ISP_HandleTypeDef *hIsp)
{
34005a76:	b538      	push	{r3, r4, r5, lr}
34005a78:	4604      	mov	r4, r0
34005a7a:	2500      	movs	r5, #0
  ISP_StatusTypeDef ret;
  uint8_t i;

  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
  {
    algo = hIsp->algorithm[i];
34005a7c:	69a3      	ldr	r3, [r4, #24]
34005a7e:	5959      	ldr	r1, [r3, r5]
    if ((algo != NULL) && (algo->Process != NULL))
34005a80:	b921      	cbnz	r1, 34005a8c <ISP_Algo_Process+0x16>
  for (i = 0; i < sizeof(ISP_Algo_List) / sizeof(*ISP_Algo_List); i++)
34005a82:	3504      	adds	r5, #4
34005a84:	2d0c      	cmp	r5, #12
34005a86:	d1f9      	bne.n	34005a7c <ISP_Algo_Process+0x6>
      }
#endif
    }
  }

  return ISP_OK;
34005a88:	2000      	movs	r0, #0
}
34005a8a:	bd38      	pop	{r3, r4, r5, pc}
    if ((algo != NULL) && (algo->Process != NULL))
34005a8c:	68cb      	ldr	r3, [r1, #12]
34005a8e:	2b00      	cmp	r3, #0
34005a90:	d0f7      	beq.n	34005a82 <ISP_Algo_Process+0xc>
      ret = algo->Process((void*)hIsp, (void*)algo);
34005a92:	4620      	mov	r0, r4
34005a94:	4798      	blx	r3
      if (ret != ISP_OK)
34005a96:	2800      	cmp	r0, #0
34005a98:	d0f3      	beq.n	34005a82 <ISP_Algo_Process+0xc>
34005a9a:	e7f6      	b.n	34005a8a <ISP_Algo_Process+0x14>

34005a9c <ISP_Init>:
ISP_StatusTypeDef ISP_Init(ISP_HandleTypeDef *hIsp,
                           void *hDcmipp,
                           uint32_t CameraInstance,
                           ISP_AppliHelpersTypeDef *pAppliHelpers,
                           const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
34005a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34005a9e:	460e      	mov	r6, r1
34005aa0:	4617      	mov	r7, r2
34005aa2:	461c      	mov	r4, r3
  ISP_StatusTypeDef ret;

  if ((hIsp == NULL) || (hDcmipp == NULL) || (pAppliHelpers == NULL))
34005aa4:	4605      	mov	r5, r0
34005aa6:	2800      	cmp	r0, #0
34005aa8:	d066      	beq.n	34005b78 <ISP_Init+0xdc>
34005aaa:	2900      	cmp	r1, #0
34005aac:	d064      	beq.n	34005b78 <ISP_Init+0xdc>
34005aae:	2b00      	cmp	r3, #0
34005ab0:	d062      	beq.n	34005b78 <ISP_Init+0xdc>
  {
    return ISP_ERR_EINVAL;
  }

  memset(hIsp, 0, sizeof(*hIsp));
34005ab2:	2280      	movs	r2, #128	@ 0x80
34005ab4:	2100      	movs	r1, #0
34005ab6:	3008      	adds	r0, #8
34005ab8:	f01a fbce 	bl	34020258 <memset>
  hIsp->cameraInstance = CameraInstance;
  hIsp->MainPipe_FrameCount = 0;
  hIsp->AncillaryPipe_FrameCount = 0;
  hIsp->DumpPipe_FrameCount = 0;

  hIsp->appliHelpers = *pAppliHelpers;
34005abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  hIsp->cameraInstance = CameraInstance;
34005abe:	e9c5 6700 	strd	r6, r7, [r5]
  hIsp->appliHelpers = *pAppliHelpers;
34005ac2:	f105 061c 	add.w	r6, r5, #28
34005ac6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34005ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34005aca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34005acc:	6823      	ldr	r3, [r4, #0]
34005ace:	6033      	str	r3, [r6, #0]
  /* Appli CB is mandatory for the sensor get/set exp/gain function */
  if (hIsp->appliHelpers.GetSensorInfo == NULL)
34005ad0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
34005ad2:	b933      	cbnz	r3, 34005ae2 <ISP_Init+0x46>
  {
     printf("INFO: GetSensorInfo helper function is not implemented\r\n");
34005ad4:	4829      	ldr	r0, [pc, #164]	@ (34005b7c <ISP_Init+0xe0>)
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
      return ISP_ERR_APP_HELPER_UNDEFINED;
  }
  if (hIsp->appliHelpers.GetSensorGain == NULL)
  {
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
34005ad6:	f01a fa89 	bl	3401ffec <puts>
     return ISP_ERR_APP_HELPER_UNDEFINED;
34005ada:	24b4      	movs	r4, #180	@ 0xb4

  /* Initialize the statistic engine */
  ISP_SVC_Stats_Init(hIsp);

  return ISP_OK;
}
34005adc:	4620      	mov	r0, r4
34005ade:	b003      	add	sp, #12
34005ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hIsp->appliHelpers.SetSensorGain == NULL)
34005ae2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
34005ae4:	b90b      	cbnz	r3, 34005aea <ISP_Init+0x4e>
      printf("INFO: SetSensorGain helper function is not implemented\r\n");
34005ae6:	4826      	ldr	r0, [pc, #152]	@ (34005b80 <ISP_Init+0xe4>)
34005ae8:	e7f5      	b.n	34005ad6 <ISP_Init+0x3a>
  if (hIsp->appliHelpers.GetSensorGain == NULL)
34005aea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
34005aec:	b90b      	cbnz	r3, 34005af2 <ISP_Init+0x56>
     printf("INFO: GetSensorGain helper function is not implemented\r\n");
34005aee:	4825      	ldr	r0, [pc, #148]	@ (34005b84 <ISP_Init+0xe8>)
34005af0:	e7f1      	b.n	34005ad6 <ISP_Init+0x3a>
  if (hIsp->appliHelpers.SetSensorExposure == NULL)
34005af2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
34005af4:	b90b      	cbnz	r3, 34005afa <ISP_Init+0x5e>
      printf("INFO: SetSensorExposure helper function is not implemented\r\n");
34005af6:	4824      	ldr	r0, [pc, #144]	@ (34005b88 <ISP_Init+0xec>)
34005af8:	e7ed      	b.n	34005ad6 <ISP_Init+0x3a>
  if (hIsp->appliHelpers.GetSensorExposure == NULL)
34005afa:	6bab      	ldr	r3, [r5, #56]	@ 0x38
34005afc:	b90b      	cbnz	r3, 34005b02 <ISP_Init+0x66>
     printf("INFO: GetSensorExposure helper function is not implemented\r\n");
34005afe:	4823      	ldr	r0, [pc, #140]	@ (34005b8c <ISP_Init+0xf0>)
34005b00:	e7e9      	b.n	34005ad6 <ISP_Init+0x3a>
  ret = ISP_SVC_IQParam_Init(hIsp, ISP_IQParamCacheInit);
34005b02:	4628      	mov	r0, r5
34005b04:	9908      	ldr	r1, [sp, #32]
34005b06:	f000 fe19 	bl	3400673c <ISP_SVC_IQParam_Init>
  if (ret != ISP_OK)
34005b0a:	4604      	mov	r4, r0
34005b0c:	2800      	cmp	r0, #0
34005b0e:	d1e5      	bne.n	34005adc <ISP_Init+0x40>
  ret = ISP_SVC_Sensor_GetInfo(hIsp, &hIsp->sensorInfo);
34005b10:	4628      	mov	r0, r5
34005b12:	f105 014c 	add.w	r1, r5, #76	@ 0x4c
34005b16:	f000 fd67 	bl	340065e8 <ISP_SVC_Sensor_GetInfo>
  if (ret != ISP_OK)
34005b1a:	4604      	mov	r4, r0
34005b1c:	2800      	cmp	r0, #0
34005b1e:	d1dd      	bne.n	34005adc <ISP_Init+0x40>
  if ((hIsp->sensorInfo.width / ISP_DECIM_FACTOR_1) < ISP_RAW_MAX_WIDTH)
34005b20:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
34005b22:	f5b2 6f28 	cmp.w	r2, #2688	@ 0xa80
34005b26:	d30f      	bcc.n	34005b48 <ISP_Init+0xac>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_2) < ISP_RAW_MAX_WIDTH)
34005b28:	f5b2 5fa8 	cmp.w	r2, #5376	@ 0x1500
34005b2c:	d320      	bcc.n	34005b70 <ISP_Init+0xd4>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_4) < ISP_RAW_MAX_WIDTH)
34005b2e:	f5b2 5f28 	cmp.w	r2, #10752	@ 0x2a00
34005b32:	d31f      	bcc.n	34005b74 <ISP_Init+0xd8>
  else if ((hIsp->sensorInfo.width  / ISP_DECIM_FACTOR_8) < ISP_RAW_MAX_WIDTH)
34005b34:	f5b2 4fa8 	cmp.w	r2, #21504	@ 0x5400
34005b38:	f04f 0308 	mov.w	r3, #8
34005b3c:	d305      	bcc.n	34005b4a <ISP_Init+0xae>
    printf("ERROR: No possible decimation factor to target ISP RAW width constraint\r\n");
34005b3e:	4814      	ldr	r0, [pc, #80]	@ (34005b90 <ISP_Init+0xf4>)
34005b40:	f01a fa54 	bl	3401ffec <puts>
    return ISP_ERR_DECIMATION_EINVAL;
34005b44:	241e      	movs	r4, #30
34005b46:	e7c9      	b.n	34005adc <ISP_Init+0x40>
34005b48:	2301      	movs	r3, #1
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
34005b4a:	4628      	mov	r0, r5
34005b4c:	a901      	add	r1, sp, #4
    decimation.factor = ISP_DECIM_FACTOR_1;
34005b4e:	f88d 3004 	strb.w	r3, [sp, #4]
  ret = ISP_SVC_ISP_SetDecimation(hIsp, &decimation);
34005b52:	f000 fa25 	bl	34005fa0 <ISP_SVC_ISP_SetDecimation>
  if (ret != ISP_OK)
34005b56:	4604      	mov	r4, r0
34005b58:	2800      	cmp	r0, #0
34005b5a:	d1bf      	bne.n	34005adc <ISP_Init+0x40>
  ret = ISP_Algo_Init(hIsp);
34005b5c:	4628      	mov	r0, r5
34005b5e:	f7ff ff5f 	bl	34005a20 <ISP_Algo_Init>
  if (ret != ISP_OK)
34005b62:	4604      	mov	r4, r0
34005b64:	2800      	cmp	r0, #0
34005b66:	d1b9      	bne.n	34005adc <ISP_Init+0x40>
  ISP_SVC_Stats_Init(hIsp);
34005b68:	4628      	mov	r0, r5
34005b6a:	f000 fdf5 	bl	34006758 <ISP_SVC_Stats_Init>
  return ISP_OK;
34005b6e:	e7b5      	b.n	34005adc <ISP_Init+0x40>
34005b70:	2302      	movs	r3, #2
34005b72:	e7ea      	b.n	34005b4a <ISP_Init+0xae>
34005b74:	2304      	movs	r3, #4
34005b76:	e7e8      	b.n	34005b4a <ISP_Init+0xae>
    return ISP_ERR_EINVAL;
34005b78:	2401      	movs	r4, #1
34005b7a:	e7af      	b.n	34005adc <ISP_Init+0x40>
34005b7c:	340275b1 	.word	0x340275b1
34005b80:	340275e9 	.word	0x340275e9
34005b84:	34027621 	.word	0x34027621
34005b88:	34027659 	.word	0x34027659
34005b8c:	34027695 	.word	0x34027695
34005b90:	340276d1 	.word	0x340276d1

34005b94 <ISP_DeInit>:
  *         Deinitializes the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_DeInit(ISP_HandleTypeDef *hIsp)
{
34005b94:	b538      	push	{r3, r4, r5, lr}
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
34005b96:	4605      	mov	r5, r0
34005b98:	b150      	cbz	r0, 34005bb0 <ISP_DeInit+0x1c>
  {
    return ISP_ERR_EINVAL;
  }

  /* DeInitialize algorithms */
  ret = ISP_Algo_DeInit(hIsp);
34005b9a:	f7ff ff59 	bl	34005a50 <ISP_Algo_DeInit>
  if (ret != ISP_OK)
34005b9e:	4604      	mov	r4, r0
34005ba0:	b920      	cbnz	r0, 34005bac <ISP_DeInit+0x18>
  {
    return ret;
  }

  /* Re-initialized the hIsp structure */
  memset(hIsp, 0, sizeof(*hIsp));
34005ba2:	4601      	mov	r1, r0
34005ba4:	2288      	movs	r2, #136	@ 0x88
34005ba6:	4628      	mov	r0, r5
34005ba8:	f01a fb56 	bl	34020258 <memset>

  return ISP_OK;
}
34005bac:	4620      	mov	r0, r4
34005bae:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_EINVAL;
34005bb0:	2401      	movs	r4, #1
34005bb2:	e7fb      	b.n	34005bac <ISP_DeInit+0x18>
34005bb4:	0000      	movs	r0, r0
	...

34005bb8 <ISP_Start>:
  *         Configures the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_Start(ISP_HandleTypeDef *hIsp)
{
34005bb8:	b567      	push	{r0, r1, r2, r5, r6, lr}
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;

  if (hIsp == NULL)
34005bba:	4605      	mov	r5, r0
34005bbc:	2800      	cmp	r0, #0
34005bbe:	f000 8095 	beq.w	34005cec <ISP_Start+0x134>
  {
    return ISP_ERR_EINVAL;
  }

  ret = ISP_SVC_Misc_IsDCMIPPReady(hIsp);
34005bc2:	f000 fd67 	bl	34006694 <ISP_SVC_Misc_IsDCMIPPReady>
  if (ret != ISP_OK)
34005bc6:	2800      	cmp	r0, #0
34005bc8:	d149      	bne.n	34005c5e <ISP_Start+0xa6>
  {
    return ret;
  }

  /* Get IQ Param config */
  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005bca:	4628      	mov	r0, r5
34005bcc:	f000 fdc0 	bl	34006750 <ISP_SVC_IQParam_Get>
34005bd0:	4606      	mov	r6, r0

  /* Set static configurations */
  ret = ISP_SVC_ISP_SetDemosaicing(hIsp, &IQParamConfig->demosaicing);
34005bd2:	f100 010c 	add.w	r1, r0, #12
34005bd6:	4628      	mov	r0, r5
34005bd8:	f000 f982 	bl	34005ee0 <ISP_SVC_ISP_SetDemosaicing>
  if (ret != ISP_OK)
34005bdc:	2800      	cmp	r0, #0
34005bde:	d13e      	bne.n	34005c5e <ISP_Start+0xa6>
  {
    return ret;
  }

  ret = ISP_SVC_ISP_SetStatRemoval(hIsp, &IQParamConfig->statRemoval);
34005be0:	4631      	mov	r1, r6
34005be2:	4628      	mov	r0, r5
34005be4:	f000 f9bb 	bl	34005f5e <ISP_SVC_ISP_SetStatRemoval>
  if (ret != ISP_OK)
34005be8:	2800      	cmp	r0, #0
34005bea:	d138      	bne.n	34005c5e <ISP_Start+0xa6>
  {
    return ret;
  }

  ret = ISP_SVC_ISP_SetContrast(hIsp, &IQParamConfig->contrast);
34005bec:	4628      	mov	r0, r5
34005bee:	f106 0114 	add.w	r1, r6, #20
34005bf2:	f000 fa09 	bl	34006008 <ISP_SVC_ISP_SetContrast>
  if (ret != ISP_OK)
34005bf6:	bb90      	cbnz	r0, 34005c5e <ISP_Start+0xa6>
  {
    return ret;
  }

  /* Set optional static configurations */
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34005bf8:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
34005bfa:	bb2b      	cbnz	r3, 34005c48 <ISP_Start+0x90>
    {
      return ret;
    }
  }

  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
34005bfc:	6d33      	ldr	r3, [r6, #80]	@ 0x50
34005bfe:	bb83      	cbnz	r3, 34005c62 <ISP_Start+0xaa>
    {
      return ret;
    }
  }

  if (IQParamConfig->badPixelStatic.enable != 0)
34005c00:	f896 305c 	ldrb.w	r3, [r6, #92]	@ 0x5c
34005c04:	b12b      	cbz	r3, 34005c12 <ISP_Start+0x5a>
  {
    ret = ISP_SVC_ISP_SetBadPixel(hIsp, &IQParamConfig->badPixelStatic);
34005c06:	4628      	mov	r0, r5
34005c08:	f106 015c 	add.w	r1, r6, #92	@ 0x5c
34005c0c:	f000 fac2 	bl	34006194 <ISP_SVC_ISP_SetBadPixel>
    if (ret != ISP_OK)
34005c10:	bb28      	cbnz	r0, 34005c5e <ISP_Start+0xa6>
    {
      return ret;
    }
  }

  if (IQParamConfig->blackLevelStatic.enable != 0)
34005c12:	f896 3064 	ldrb.w	r3, [r6, #100]	@ 0x64
34005c16:	b12b      	cbz	r3, 34005c24 <ISP_Start+0x6c>
  {
    ret = ISP_SVC_ISP_SetBlackLevel(hIsp, &IQParamConfig->blackLevelStatic);
34005c18:	4628      	mov	r0, r5
34005c1a:	f106 0164 	add.w	r1, r6, #100	@ 0x64
34005c1e:	f000 faee 	bl	340061fe <ISP_SVC_ISP_SetBlackLevel>
    if (ret != ISP_OK)
34005c22:	b9e0      	cbnz	r0, 34005c5e <ISP_Start+0xa6>
    {
      return ret;
    }
  }

  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005c24:	f896 321c 	ldrb.w	r3, [r6, #540]	@ 0x21c
34005c28:	bb3b      	cbnz	r3, 34005c7a <ISP_Start+0xc2>
    {
      return ret;
    }
  }

  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005c2a:	f896 322c 	ldrb.w	r3, [r6, #556]	@ 0x22c
34005c2e:	2b00      	cmp	r3, #0
34005c30:	d12f      	bne.n	34005c92 <ISP_Start+0xda>
      return ret;
    }
  }

  /* Configure statistic area if not already configured by ISP_SetStatArea() */
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
34005c32:	692b      	ldr	r3, [r5, #16]
34005c34:	2b00      	cmp	r3, #0
34005c36:	d138      	bne.n	34005caa <ISP_Start+0xf2>
  {
    /* Configure statistic area from IQ params */
    ret = ISP_SVC_ISP_SetStatArea(hIsp, &IQParamConfig->statAreaStatic);
34005c38:	4628      	mov	r0, r5
34005c3a:	f106 013c 	add.w	r1, r6, #60	@ 0x3c
34005c3e:	f000 fa5d 	bl	340060fc <ISP_SVC_ISP_SetStatArea>
    if (ret != ISP_OK)
34005c42:	2800      	cmp	r0, #0
34005c44:	d034      	beq.n	34005cb0 <ISP_Start+0xf8>
34005c46:	e00a      	b.n	34005c5e <ISP_Start+0xa6>
  if ((IQParamConfig->sensorGainStatic.gain != 0) && (!IQParamConfig->AECAlgo.enable))
34005c48:	f896 3068 	ldrb.w	r3, [r6, #104]	@ 0x68
34005c4c:	2b00      	cmp	r3, #0
34005c4e:	d1d5      	bne.n	34005bfc <ISP_Start+0x44>
    ret = ISP_SVC_Sensor_SetGain(hIsp, &IQParamConfig->sensorGainStatic);
34005c50:	4628      	mov	r0, r5
34005c52:	f106 014c 	add.w	r1, r6, #76	@ 0x4c
34005c56:	f000 fcd5 	bl	34006604 <ISP_SVC_Sensor_SetGain>
    if (ret != ISP_OK)
34005c5a:	2800      	cmp	r0, #0
34005c5c:	d0ce      	beq.n	34005bfc <ISP_Start+0x44>

  /* Initialize the exposure target based on the selected exposure compensation */
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));

  return ISP_OK;
}
34005c5e:	b003      	add	sp, #12
34005c60:	bd60      	pop	{r5, r6, pc}
  if ((IQParamConfig->sensorExposureStatic.exposure != 0) && (!IQParamConfig->AECAlgo.enable))
34005c62:	f896 3068 	ldrb.w	r3, [r6, #104]	@ 0x68
34005c66:	2b00      	cmp	r3, #0
34005c68:	d1ca      	bne.n	34005c00 <ISP_Start+0x48>
    ret = ISP_SVC_Sensor_SetExposure(hIsp, &IQParamConfig->sensorExposureStatic);
34005c6a:	4628      	mov	r0, r5
34005c6c:	f106 0150 	add.w	r1, r6, #80	@ 0x50
34005c70:	f000 fcec 	bl	3400664c <ISP_SVC_Sensor_SetExposure>
    if (ret != ISP_OK)
34005c74:	2800      	cmp	r0, #0
34005c76:	d0c3      	beq.n	34005c00 <ISP_Start+0x48>
34005c78:	e7f1      	b.n	34005c5e <ISP_Start+0xa6>
  if ((IQParamConfig->ispGainStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005c7a:	f896 3074 	ldrb.w	r3, [r6, #116]	@ 0x74
34005c7e:	2b00      	cmp	r3, #0
34005c80:	d1d3      	bne.n	34005c2a <ISP_Start+0x72>
    ret = ISP_SVC_ISP_SetGain(hIsp, &IQParamConfig->ispGainStatic);
34005c82:	4628      	mov	r0, r5
34005c84:	f506 7107 	add.w	r1, r6, #540	@ 0x21c
34005c88:	f000 fafa 	bl	34006280 <ISP_SVC_ISP_SetGain>
    if (ret != ISP_OK)
34005c8c:	2800      	cmp	r0, #0
34005c8e:	d0cc      	beq.n	34005c2a <ISP_Start+0x72>
34005c90:	e7e5      	b.n	34005c5e <ISP_Start+0xa6>
  if ((IQParamConfig->colorConvStatic.enable != 0) && (!IQParamConfig->AWBAlgo.enable))
34005c92:	f896 3074 	ldrb.w	r3, [r6, #116]	@ 0x74
34005c96:	2b00      	cmp	r3, #0
34005c98:	d1cb      	bne.n	34005c32 <ISP_Start+0x7a>
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &IQParamConfig->colorConvStatic);
34005c9a:	4628      	mov	r0, r5
34005c9c:	f506 710b 	add.w	r1, r6, #556	@ 0x22c
34005ca0:	f000 fbd2 	bl	34006448 <ISP_SVC_ISP_SetColorConv>
    if (ret != ISP_OK)
34005ca4:	2800      	cmp	r0, #0
34005ca6:	d0c4      	beq.n	34005c32 <ISP_Start+0x7a>
34005ca8:	e7d9      	b.n	34005c5e <ISP_Start+0xa6>
  if ((hIsp->statArea.XSize == 0) || (hIsp->statArea.YSize == 0))
34005caa:	696b      	ldr	r3, [r5, #20]
34005cac:	2b00      	cmp	r3, #0
34005cae:	d0c3      	beq.n	34005c38 <ISP_Start+0x80>
  ret = ISP_SVC_ISP_SetGamma(hIsp, &IQParamConfig->gamma);
34005cb0:	4628      	mov	r0, r5
34005cb2:	f506 7115 	add.w	r1, r6, #596	@ 0x254
34005cb6:	f000 fd1f 	bl	340066f8 <ISP_SVC_ISP_SetGamma>
  if (ret != ISP_OK)
34005cba:	2800      	cmp	r0, #0
34005cbc:	d1cf      	bne.n	34005c5e <ISP_Start+0xa6>
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
34005cbe:	f996 3069 	ldrsb.w	r3, [r6, #105]	@ 0x69
34005cc2:	eeb0 0b00 	vmov.f64	d0, #0	@ 0x40000000  2.0
34005cc6:	ee01 3a10 	vmov	s2, r3
34005cca:	eeba 1aef 	vcvt.f32.s32	s2, s2, #1
34005cce:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
34005cd2:	9001      	str	r0, [sp, #4]
34005cd4:	f01c fde8 	bl	340228a8 <pow>
34005cd8:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 34005cf0 <ISP_Start+0x138>
34005cdc:	ee20 0b07 	vmul.f64	d0, d0, d7
34005ce0:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  return ISP_OK;
34005ce4:	9801      	ldr	r0, [sp, #4]
  IQParamConfig->AECAlgo.exposureTarget = (uint32_t) (ISP_IDEAL_TARGET_EXPOSURE * pow(2, (float)IQParamConfig->AECAlgo.exposureCompensation / 2));
34005ce6:	ed86 0a1b 	vstr	s0, [r6, #108]	@ 0x6c
  return ISP_OK;
34005cea:	e7b8      	b.n	34005c5e <ISP_Start+0xa6>
    return ISP_ERR_EINVAL;
34005cec:	2001      	movs	r0, #1
34005cee:	e7b6      	b.n	34005c5e <ISP_Start+0xa6>
34005cf0:	00000000 	.word	0x00000000
34005cf4:	404c0000 	.word	0x404c0000

34005cf8 <ISP_BackgroundProcess>:
  *         Run the background process of the ISP device
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_BackgroundProcess(ISP_HandleTypeDef *hIsp)
{
34005cf8:	b538      	push	{r3, r4, r5, lr}
#ifdef ISP_MW_TUNING_TOOL_SUPPORT
  ISP_StatusTypeDef retCmdParser = ISP_OK;
  uint8_t *cmd;
#endif

  if (hIsp == NULL)
34005cfa:	4605      	mov	r5, r0
34005cfc:	b150      	cbz	r0, 34005d14 <ISP_BackgroundProcess+0x1c>
    retCmdParser = ISP_CmdParser_ProcessCommand(hIsp, cmd);
  }
#endif

  /* Check if a statistics gathering cycle has been completed to call the statistic callbacks */
  retStats = ISP_SVC_Stats_ProcessCallbacks(hIsp);
34005cfe:	f000 ff2d 	bl	34006b5c <ISP_SVC_Stats_ProcessCallbacks>
34005d02:	4604      	mov	r4, r0

  /* Process the algorithms */
  retAlgo = ISP_Algo_Process(hIsp);
34005d04:	4628      	mov	r0, r5
34005d06:	f7ff feb6 	bl	34005a76 <ISP_Algo_Process>
  else if (retAlgo != ISP_OK)
  {
    return retAlgo;
  }

  return ISP_OK;
34005d0a:	2c00      	cmp	r4, #0
34005d0c:	bf08      	it	eq
34005d0e:	4604      	moveq	r4, r0
}
34005d10:	4620      	mov	r0, r4
34005d12:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_EINVAL;
34005d14:	2401      	movs	r4, #1
34005d16:	e7fb      	b.n	34005d10 <ISP_BackgroundProcess+0x18>

34005d18 <ISP_ListWBRefModes>:
  * @param  hIsp: ISP device handle
  * @param  RefColorTemp: Array of reference color temperatures
  * @retval Operation status
  */
ISP_StatusTypeDef ISP_ListWBRefModes(ISP_HandleTypeDef *hIsp, uint32_t RefColorTemp[])
{
34005d18:	b510      	push	{r4, lr}
34005d1a:	460c      	mov	r4, r1
  ISP_IQParamTypeDef *IQParamConfig;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005d1c:	f000 fd18 	bl	34006750 <ISP_SVC_IQParam_Get>

  memcpy(RefColorTemp, IQParamConfig->AWBAlgo.referenceColorTemp, sizeof(IQParamConfig->AWBAlgo.referenceColorTemp));
34005d20:	f04f 0e05 	mov.w	lr, #5
34005d24:	4621      	mov	r1, r4
34005d26:	f04e e001 	dls	lr, lr
34005d2a:	f500 708c 	add.w	r0, r0, #280	@ 0x118
34005d2e:	f850 3b04 	ldr.w	r3, [r0], #4
34005d32:	f841 3b04 	str.w	r3, [r1], #4
34005d36:	f00f c007 	le	lr, 34005d2e <ISP_ListWBRefModes+0x16>

  return ISP_OK;
}
34005d3a:	2000      	movs	r0, #0
34005d3c:	bd10      	pop	{r4, pc}

34005d3e <ISP_SetWBRefMode>:
  * @param  Automatic: 'true' if the AWB automatic mode is requested
  * @param  RefColorTemp: Reference color temperature (manual mode). Not significant if Automatic is set to 'true'
  * @retval Operation status
  */
ISP_StatusTypeDef ISP_SetWBRefMode(ISP_HandleTypeDef *hIsp, uint8_t Automatic, uint32_t RefColorTemp)
{
34005d3e:	b570      	push	{r4, r5, r6, lr}
34005d40:	460e      	mov	r6, r1
34005d42:	b08e      	sub	sp, #56	@ 0x38
34005d44:	4604      	mov	r4, r0
34005d46:	4615      	mov	r5, r2
  ISP_ColorConvTypeDef ColorConv;
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_StatusTypeDef ret;
  uint32_t index;

  IQParamConfig = ISP_SVC_IQParam_Get(hIsp);
34005d48:	f000 fd02 	bl	34006750 <ISP_SVC_IQParam_Get>

  if (Automatic)
34005d4c:	b12e      	cbz	r6, 34005d5a <ISP_SetWBRefMode+0x1c>
  {
    /* Start the AWB algorithm */
    IQParamConfig->AWBAlgo.enable = 1;
34005d4e:	2301      	movs	r3, #1
34005d50:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    {
      return ret;
    }
  }

  return ISP_OK;
34005d54:	2000      	movs	r0, #0
}
34005d56:	b00e      	add	sp, #56	@ 0x38
34005d58:	bd70      	pop	{r4, r5, r6, pc}
    for (index = 0; index < ISP_AWB_COLORTEMP_REF; index++)
34005d5a:	4631      	mov	r1, r6
34005d5c:	2305      	movs	r3, #5
34005d5e:	f500 728a 	add.w	r2, r0, #276	@ 0x114
      if (IQParamConfig->AWBAlgo.referenceColorTemp[index] == RefColorTemp)
34005d62:	f852 6f04 	ldr.w	r6, [r2, #4]!
34005d66:	42ae      	cmp	r6, r5
34005d68:	d005      	beq.n	34005d76 <ISP_SetWBRefMode+0x38>
    for (index = 0; index < ISP_AWB_COLORTEMP_REF; index++)
34005d6a:	3b01      	subs	r3, #1
34005d6c:	f101 0101 	add.w	r1, r1, #1
34005d70:	d1f7      	bne.n	34005d62 <ISP_SetWBRefMode+0x24>
      return ISP_ERR_WB_COLORTEMP;
34005d72:	2096      	movs	r0, #150	@ 0x96
34005d74:	e7ef      	b.n	34005d56 <ISP_SetWBRefMode+0x18>
    IQParamConfig->AWBAlgo.enable = 0;
34005d76:	2300      	movs	r3, #0
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005d78:	f04f 0e04 	mov.w	lr, #4
    IQParamConfig->AWBAlgo.enable = 0;
34005d7c:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    ISPGain.enable = 1;
34005d80:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    ISPGain.ispGainR = IQParamConfig->AWBAlgo.ispGainR[index];
34005d84:	f8d3 612c 	ldr.w	r6, [r3, #300]	@ 0x12c
    ISPGain.enable = 1;
34005d88:	2201      	movs	r2, #1
    ISPGain.ispGainR = IQParamConfig->AWBAlgo.ispGainR[index];
34005d8a:	9601      	str	r6, [sp, #4]
    ISPGain.ispGainG = IQParamConfig->AWBAlgo.ispGainG[index];
34005d8c:	f8d3 6140 	ldr.w	r6, [r3, #320]	@ 0x140
    ISPGain.ispGainB = IQParamConfig->AWBAlgo.ispGainB[index];
34005d90:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005d94:	f04e e001 	dls	lr, lr
    ISPGain.ispGainB = IQParamConfig->AWBAlgo.ispGainB[index];
34005d98:	9303      	str	r3, [sp, #12]
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005d9a:	2324      	movs	r3, #36	@ 0x24
34005d9c:	fb03 0301 	mla	r3, r3, r1, r0
    ISPGain.enable = 1;
34005da0:	f88d 2000 	strb.w	r2, [sp]
    ColorConv.enable = 1;
34005da4:	f88d 2010 	strb.w	r2, [sp, #16]
    ISPGain.ispGainG = IQParamConfig->AWBAlgo.ispGainG[index];
34005da8:	9602      	str	r6, [sp, #8]
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005daa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
34005dae:	aa05      	add	r2, sp, #20
34005db0:	4616      	mov	r6, r2
34005db2:	6818      	ldr	r0, [r3, #0]
34005db4:	6859      	ldr	r1, [r3, #4]
34005db6:	3308      	adds	r3, #8
34005db8:	c603      	stmia	r6!, {r0, r1}
34005dba:	4632      	mov	r2, r6
34005dbc:	f00f c009 	le	lr, 34005db0 <ISP_SetWBRefMode+0x72>
34005dc0:	6818      	ldr	r0, [r3, #0]
    ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGain);
34005dc2:	4669      	mov	r1, sp
    memcpy(ColorConv.coeff, IQParamConfig->AWBAlgo.coeff[index], sizeof(ColorConv.coeff));
34005dc4:	6030      	str	r0, [r6, #0]
    ret = ISP_SVC_ISP_SetGain(hIsp, &ISPGain);
34005dc6:	4620      	mov	r0, r4
34005dc8:	f000 fa5a 	bl	34006280 <ISP_SVC_ISP_SetGain>
    if (ret != ISP_OK)
34005dcc:	2800      	cmp	r0, #0
34005dce:	d1c2      	bne.n	34005d56 <ISP_SetWBRefMode+0x18>
    ret = ISP_SVC_ISP_SetColorConv(hIsp, &ColorConv);
34005dd0:	4620      	mov	r0, r4
34005dd2:	a904      	add	r1, sp, #16
34005dd4:	f000 fb38 	bl	34006448 <ISP_SVC_ISP_SetColorConv>
    if (ret != ISP_OK)
34005dd8:	2800      	cmp	r0, #0
34005dda:	d1bc      	bne.n	34005d56 <ISP_SetWBRefMode+0x18>
    ret = ISP_SVC_Misc_SetWBRefMode(hIsp, RefColorTemp);
34005ddc:	4629      	mov	r1, r5
34005dde:	4620      	mov	r0, r4
34005de0:	f000 fc72 	bl	340066c8 <ISP_SVC_Misc_SetWBRefMode>
    if (ret != ISP_OK)
34005de4:	e7b7      	b.n	34005d56 <ISP_SetWBRefMode+0x18>

34005de6 <ISP_GatherStatistics>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_GatherStatistics(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Stats_Gather(hIsp);
34005de6:	f000 bcbf 	b.w	34006768 <ISP_SVC_Stats_Gather>

34005dea <ISP_IncMainFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Misc_IncMainFrameId(hIsp);
34005dea:	f000 bc5f 	b.w	340066ac <ISP_SVC_Misc_IncMainFrameId>

34005dee <ISP_IncAncillaryFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
	ISP_SVC_Misc_IncAncillaryFrameId(hIsp);
34005dee:	f000 bc63 	b.w	340066b8 <ISP_SVC_Misc_IncAncillaryFrameId>

34005df2 <ISP_IncDumpFrameId>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
  ISP_SVC_Misc_IncDumpFrameId(hIsp);
34005df2:	f000 bc65 	b.w	340066c0 <ISP_SVC_Misc_IncDumpFrameId>
	...

34005df8 <GetAvgStats>:

  return (int32_t) Val;
}

static uint8_t GetAvgStats(ISP_HandleTypeDef *hIsp, ISP_SVC_StatLocation location, ISP_SVC_Component component, uint32_t accu)
{
34005df8:	b510      	push	{r4, lr}
  uint32_t nb_comp_pix, comp_divider;

  /* Number of pixels computed from Stat Area and considering decimation */
  nb_comp_pix = hIsp->statArea.XSize * hIsp->statArea.YSize;
34005dfa:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
34005dfe:	4360      	muls	r0, r4
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
34005e00:	4c0d      	ldr	r4, [pc, #52]	@ (34005e38 <GetAvgStats+0x40>)

  if (location == ISP_STAT_LOC_DOWN)
34005e02:	2902      	cmp	r1, #2
  nb_comp_pix /= ISP_DecimationValue.factor * ISP_DecimationValue.factor;
34005e04:	7824      	ldrb	r4, [r4, #0]
34005e06:	fb04 f404 	mul.w	r4, r4, r4
34005e0a:	fbb0 f0f4 	udiv	r0, r0, r4
  if (location == ISP_STAT_LOC_DOWN)
34005e0e:	d010      	beq.n	34005e32 <GetAvgStats+0x3a>
  }
  else
  {
    /* Only raw bayer sensor expected */
    /* raw bayer: RGB component not present for all pixels */
    comp_divider = (component == ISP_GREEN) ? 2 : 4;
34005e10:	2a01      	cmp	r2, #1
34005e12:	bf14      	ite	ne
34005e14:	2204      	movne	r2, #4
34005e16:	2202      	moveq	r2, #2

  /* Number of pixels per component */
  nb_comp_pix /= comp_divider;

  /* Compute average (rounding to closest integer) */
  if (nb_comp_pix == 0)
34005e18:	4282      	cmp	r2, r0
  nb_comp_pix /= comp_divider;
34005e1a:	bf9f      	itttt	ls
34005e1c:	fbb0 f0f2 	udivls	r0, r0, r2
  {
    return 0;
  }

  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
34005e20:	0842      	lsrls	r2, r0, #1
34005e22:	eb02 2303 	addls.w	r3, r2, r3, lsl #8
34005e26:	fbb3 f0f0 	udivls	r0, r3, r0
    return 0;
34005e2a:	bf8c      	ite	hi
34005e2c:	2000      	movhi	r0, #0
  return ((accu * 256) + (nb_comp_pix / 2)) / nb_comp_pix;
34005e2e:	b2c0      	uxtbls	r0, r0
}
34005e30:	bd10      	pop	{r4, pc}
    comp_divider = 1;
34005e32:	2201      	movs	r2, #1
34005e34:	e7f0      	b.n	34005e18 <GetAvgStats+0x20>
34005e36:	bf00      	nop
34005e38:	34108e5a 	.word	0x34108e5a

34005e3c <SetStatConfig>:
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
  }
}

static void SetStatConfig(DCMIPP_StatisticExtractionConfTypeDef *statConf, const DCMIPP_StatisticExtractionConfTypeDef *refConfig)
{
34005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
34005e3e:	460b      	mov	r3, r1
34005e40:	4606      	mov	r6, r0
  for (int i = 0; i < 3; i++)
34005e42:	2400      	movs	r4, #0
  {
    statConf[i] = *refConfig;
34005e44:	270c      	movs	r7, #12
34005e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
34005e4a:	fb07 6504 	mla	r5, r7, r4, r6
  for (int i = 0; i < 3; i++)
34005e4e:	3401      	adds	r4, #1
34005e50:	2c03      	cmp	r4, #3
    statConf[i] = *refConfig;
34005e52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  for (int i = 0; i < 3; i++)
34005e56:	d1f6      	bne.n	34005e46 <SetStatConfig+0xa>
  }
}
34005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}

34005e5a <ReadStatHistogram>:
{
34005e5a:	b570      	push	{r4, r5, r6, lr}
34005e5c:	4606      	mov	r6, r0
34005e5e:	460c      	mov	r4, r1
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005e60:	2501      	movs	r5, #1
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34005e62:	4623      	mov	r3, r4
34005e64:	b2ea      	uxtb	r2, r5
34005e66:	2101      	movs	r1, #1
34005e68:	6830      	ldr	r0, [r6, #0]
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005e6a:	3501      	adds	r5, #1
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, i, &(histogram[i - DCMIPP_STATEXT_MODULE1]));
34005e6c:	f00d f94c 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
  for (uint32_t i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34005e70:	2d04      	cmp	r5, #4
34005e72:	f104 0404 	add.w	r4, r4, #4
34005e76:	d1f4      	bne.n	34005e62 <ReadStatHistogram+0x8>
}
34005e78:	bd70      	pop	{r4, r5, r6, pc}
34005e7a:	0000      	movs	r0, r0
34005e7c:	0000      	movs	r0, r0
	...

34005e80 <LuminanceFromRGB>:
  }
  return stage;
}

uint8_t LuminanceFromRGB(uint8_t r, uint8_t g, uint8_t b)
{
34005e80:	ee07 1a10 	vmov	s14, r1
34005e84:	ee05 0a10 	vmov	s10, r0
  /* Compute luminance from RGB components (BT.601) */
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005e88:	ed9f 4b0f 	vldr	d4, [pc, #60]	@ 34005ec8 <LuminanceFromRGB+0x48>
34005e8c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
{
34005e90:	ee06 2a10 	vmov	s12, r2
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005e94:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
34005e98:	ee27 7b04 	vmul.f64	d7, d7, d4
34005e9c:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 34005ed0 <LuminanceFromRGB+0x50>
34005ea0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
34005ea4:	eea5 7b04 	vfma.f64	d7, d5, d4
34005ea8:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 34005ed8 <LuminanceFromRGB+0x58>
34005eac:	eea6 7b05 	vfma.f64	d7, d6, d5
34005eb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
{
34005eb4:	b082      	sub	sp, #8
  return (uint8_t) (r * 0.299 + g * 0.587 + b * 0.114);
34005eb6:	edcd 7a01 	vstr	s15, [sp, #4]
}
34005eba:	f89d 0004 	ldrb.w	r0, [sp, #4]
34005ebe:	b002      	add	sp, #8
34005ec0:	4770      	bx	lr
34005ec2:	bf00      	nop
34005ec4:	f3af 8000 	nop.w
34005ec8:	39581062 	.word	0x39581062
34005ecc:	3fe2c8b4 	.word	0x3fe2c8b4
34005ed0:	e5604189 	.word	0xe5604189
34005ed4:	3fd322d0 	.word	0x3fd322d0
34005ed8:	9fbe76c9 	.word	0x9fbe76c9
34005edc:	3fbd2f1a 	.word	0x3fbd2f1a

34005ee0 <ISP_SVC_ISP_SetDemosaicing>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the demosaicing configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDemosaicing(ISP_HandleTypeDef *hIsp, ISP_DemosaicingTypeDef *pConfig)
{
34005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_RawBayer2RGBConfTypeDef rawBayerCfg;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005ee2:	4604      	mov	r4, r0
{
34005ee4:	b087      	sub	sp, #28
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005ee6:	2800      	cmp	r0, #0
34005ee8:	d037      	beq.n	34005f5a <ISP_SVC_ISP_SetDemosaicing+0x7a>
34005eea:	2900      	cmp	r1, #0
34005eec:	d035      	beq.n	34005f5a <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005eee:	788f      	ldrb	r7, [r1, #2]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005ef0:	2f07      	cmp	r7, #7
34005ef2:	d832      	bhi.n	34005f5a <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005ef4:	78ce      	ldrb	r6, [r1, #3]
34005ef6:	2e07      	cmp	r6, #7
34005ef8:	d82f      	bhi.n	34005f5a <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34005efa:	790d      	ldrb	r5, [r1, #4]
      (pConfig->peak > ISP_DEMOS_STRENGTH_MAX) || (pConfig->lineV > ISP_DEMOS_STRENGTH_MAX) ||
34005efc:	2d07      	cmp	r5, #7
34005efe:	d82c      	bhi.n	34005f5a <ISP_SVC_ISP_SetDemosaicing+0x7a>
      (pConfig->lineH > ISP_DEMOS_STRENGTH_MAX) || (pConfig->edge > ISP_DEMOS_STRENGTH_MAX))
34005f00:	7948      	ldrb	r0, [r1, #5]
34005f02:	2807      	cmp	r0, #7
34005f04:	d829      	bhi.n	34005f5a <ISP_SVC_ISP_SetDemosaicing+0x7a>
  {
    return ISP_ERR_DEMOSAICING_EINVAL;
  }

  /* Do not enable demosaicing if the camera sensor is a monochrome sensor */
  if ((pConfig->enable == 0) || (pConfig->type == ISP_DEMOS_TYPE_MONO))
34005f06:	780b      	ldrb	r3, [r1, #0]
34005f08:	b113      	cbz	r3, 34005f10 <ISP_SVC_ISP_SetDemosaicing+0x30>
34005f0a:	784a      	ldrb	r2, [r1, #1]
34005f0c:	2a04      	cmp	r2, #4
34005f0e:	d107      	bne.n	34005f20 <ISP_SVC_ISP_SetDemosaicing+0x40>
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34005f10:	2101      	movs	r1, #1
34005f12:	6820      	ldr	r0, [r4, #0]
34005f14:	f00c faa4 	bl	34012460 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005f18:	b100      	cbz	r0, 34005f1c <ISP_SVC_ISP_SetDemosaicing+0x3c>
  {
    return ISP_ERR_DEMOSAICING_HAL;
34005f1a:	200b      	movs	r0, #11
  }

  return ISP_OK;
}
34005f1c:	b007      	add	sp, #28
34005f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(pConfig->type)
34005f20:	2a02      	cmp	r2, #2
34005f22:	d018      	beq.n	34005f56 <ISP_SVC_ISP_SetDemosaicing+0x76>
34005f24:	1e51      	subs	r1, r2, #1
34005f26:	424b      	negs	r3, r1
34005f28:	414b      	adcs	r3, r1
34005f2a:	2a03      	cmp	r2, #3
34005f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
34005f30:	bf08      	it	eq
34005f32:	2306      	moveq	r3, #6
    rawBayerCfg.EdgeStrength = (uint32_t) pConfig->edge;
34005f34:	9005      	str	r0, [sp, #20]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
34005f36:	2101      	movs	r1, #1
34005f38:	6820      	ldr	r0, [r4, #0]
34005f3a:	aa01      	add	r2, sp, #4
    rawBayerCfg.PeakStrength = (uint32_t) pConfig->peak;
34005f3c:	e9cd 3703 	strd	r3, r7, [sp, #12]
    rawBayerCfg.HLineStrength = (uint32_t) pConfig->lineH;
34005f40:	e9cd 6501 	strd	r6, r5, [sp, #4]
    halStatus = HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &rawBayerCfg);
34005f44:	f00c fa1a 	bl	3401237c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>
    if (halStatus == HAL_OK)
34005f48:	2800      	cmp	r0, #0
34005f4a:	d1e6      	bne.n	34005f1a <ISP_SVC_ISP_SetDemosaicing+0x3a>
      halStatus = HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB(hIsp->hDcmipp, DCMIPP_PIPE1);
34005f4c:	2101      	movs	r1, #1
34005f4e:	6820      	ldr	r0, [r4, #0]
34005f50:	f00c fa6e 	bl	34012430 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>
34005f54:	e7e0      	b.n	34005f18 <ISP_SVC_ISP_SetDemosaicing+0x38>
    switch(pConfig->type)
34005f56:	2304      	movs	r3, #4
34005f58:	e7ec      	b.n	34005f34 <ISP_SVC_ISP_SetDemosaicing+0x54>
    return ISP_ERR_DEMOSAICING_EINVAL;
34005f5a:	200a      	movs	r0, #10
34005f5c:	e7de      	b.n	34005f1c <ISP_SVC_ISP_SetDemosaicing+0x3c>

34005f5e <ISP_SVC_ISP_SetStatRemoval>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Stat Removal configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatRemoval(ISP_HandleTypeDef *hIsp, ISP_StatRemovalTypeDef *pConfig)
{
34005f5e:	b510      	push	{r4, lr}
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34005f60:	4604      	mov	r4, r0
34005f62:	b1d8      	cbz	r0, 34005f9c <ISP_SVC_ISP_SetStatRemoval+0x3e>
34005f64:	b1d1      	cbz	r1, 34005f9c <ISP_SVC_ISP_SetStatRemoval+0x3e>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34005f66:	684a      	ldr	r2, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34005f68:	2a07      	cmp	r2, #7
34005f6a:	d817      	bhi.n	34005f9c <ISP_SVC_ISP_SetStatRemoval+0x3e>
      (pConfig->nbHeadLines > ISP_STATREMOVAL_HEADLINES_MAX) || (pConfig->nbValidLines > ISP_STATREMOVAL_VALIDLINES_MAX))
34005f6c:	f640 70fe 	movw	r0, #4094	@ 0xffe
34005f70:	688b      	ldr	r3, [r1, #8]
34005f72:	4283      	cmp	r3, r0
34005f74:	d812      	bhi.n	34005f9c <ISP_SVC_ISP_SetStatRemoval+0x3e>
  {
    return ISP_ERR_STATREMOVAL_EINVAL;
  }

  if (pConfig->enable == 0)
34005f76:	7809      	ldrb	r1, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005f78:	6820      	ldr	r0, [r4, #0]
  if (pConfig->enable == 0)
34005f7a:	b921      	cbnz	r1, 34005f86 <ISP_SVC_ISP_SetStatRemoval+0x28>
    halStatus = HAL_DCMIPP_PIPE_DisableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005f7c:	2101      	movs	r1, #1
34005f7e:	f00c fac3 	bl	34012508 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34005f82:	b128      	cbz	r0, 34005f90 <ISP_SVC_ISP_SetStatRemoval+0x32>
34005f84:	e003      	b.n	34005f8e <ISP_SVC_ISP_SetStatRemoval+0x30>
    halStatus = HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->nbHeadLines, pConfig->nbValidLines);
34005f86:	2101      	movs	r1, #1
34005f88:	f00c fa82 	bl	34012490 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>
    if (halStatus == HAL_OK)
34005f8c:	b108      	cbz	r0, 34005f92 <ISP_SVC_ISP_SetStatRemoval+0x34>
  {
    return ISP_ERR_STATREMOVAL_HAL;
34005f8e:	2015      	movs	r0, #21
  }

  return ISP_OK;
}
34005f90:	bd10      	pop	{r4, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPRemovalStatistic(hIsp->hDcmipp, DCMIPP_PIPE1);
34005f92:	2101      	movs	r1, #1
34005f94:	6820      	ldr	r0, [r4, #0]
34005f96:	f00c faa9 	bl	340124ec <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>
34005f9a:	e7f2      	b.n	34005f82 <ISP_SVC_ISP_SetStatRemoval+0x24>
    return ISP_ERR_STATREMOVAL_EINVAL;
34005f9c:	2014      	movs	r0, #20
34005f9e:	e7f7      	b.n	34005f90 <ISP_SVC_ISP_SetStatRemoval+0x32>

34005fa0 <ISP_SVC_ISP_SetDecimation>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the decimation configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetDecimation(ISP_HandleTypeDef *hIsp, ISP_DecimationTypeDef *pConfig)
{
34005fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
34005fa2:	460c      	mov	r4, r1
  DCMIPP_DecimationConfTypeDef decimationCfg;
  ISP_StatusTypeDef ret = ISP_OK;

  /* Check handles validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34005fa4:	4605      	mov	r5, r0
34005fa6:	b350      	cbz	r0, 34005ffe <ISP_SVC_ISP_SetDecimation+0x5e>
34005fa8:	b349      	cbz	r1, 34005ffe <ISP_SVC_ISP_SetDecimation+0x5e>
  {
    return ISP_ERR_DECIMATION_EINVAL;
  }

  switch (pConfig->factor)
34005faa:	780b      	ldrb	r3, [r1, #0]
34005fac:	3b01      	subs	r3, #1
34005fae:	2b07      	cmp	r3, #7
34005fb0:	d825      	bhi.n	34005ffe <ISP_SVC_ISP_SetDecimation+0x5e>
34005fb2:	e8df f003 	tbb	[pc, r3]
34005fb6:	0417      	.short	0x0417
34005fb8:	24241124 	.word	0x24241124
34005fbc:	1424      	.short	0x1424
34005fbe:	2308      	movs	r3, #8
34005fc0:	2202      	movs	r2, #2
  {
  case ISP_DECIM_FACTOR_1:
    decimationCfg.VRatio = DCMIPP_VDEC_ALL;
    decimationCfg.HRatio = DCMIPP_HDEC_ALL;
34005fc2:	e9cd 3200 	strd	r3, r2, [sp]

  default:
    return ISP_ERR_DECIMATION_EINVAL;
  }

  if (HAL_DCMIPP_PIPE_SetISPDecimationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &decimationCfg) != HAL_OK)
34005fc6:	2101      	movs	r1, #1
34005fc8:	466a      	mov	r2, sp
34005fca:	6828      	ldr	r0, [r5, #0]
34005fcc:	f00b ffce 	bl	34011f6c <HAL_DCMIPP_PIPE_SetISPDecimationConfig>
34005fd0:	b158      	cbz	r0, 34005fea <ISP_SVC_ISP_SetDecimation+0x4a>
  {
    return ISP_ERR_DECIMATION_HAL;
34005fd2:	201f      	movs	r0, #31

  /* Save decimation value */
  ISP_DecimationValue.factor = pConfig->factor;

  return ret;
}
34005fd4:	b003      	add	sp, #12
34005fd6:	bd30      	pop	{r4, r5, pc}
    break;
34005fd8:	2310      	movs	r3, #16
34005fda:	2204      	movs	r2, #4
34005fdc:	e7f1      	b.n	34005fc2 <ISP_SVC_ISP_SetDecimation+0x22>
    break;
34005fde:	2318      	movs	r3, #24
34005fe0:	2206      	movs	r2, #6
34005fe2:	e7ee      	b.n	34005fc2 <ISP_SVC_ISP_SetDecimation+0x22>
  switch (pConfig->factor)
34005fe4:	2300      	movs	r3, #0
34005fe6:	461a      	mov	r2, r3
34005fe8:	e7eb      	b.n	34005fc2 <ISP_SVC_ISP_SetDecimation+0x22>
  if (HAL_DCMIPP_PIPE_EnableISPDecimation(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34005fea:	2101      	movs	r1, #1
34005fec:	6828      	ldr	r0, [r5, #0]
34005fee:	f00b fffb 	bl	34011fe8 <HAL_DCMIPP_PIPE_EnableISPDecimation>
34005ff2:	2800      	cmp	r0, #0
34005ff4:	d1ed      	bne.n	34005fd2 <ISP_SVC_ISP_SetDecimation+0x32>
  ISP_DecimationValue.factor = pConfig->factor;
34005ff6:	7822      	ldrb	r2, [r4, #0]
34005ff8:	4b02      	ldr	r3, [pc, #8]	@ (34006004 <ISP_SVC_ISP_SetDecimation+0x64>)
34005ffa:	701a      	strb	r2, [r3, #0]
  return ret;
34005ffc:	e7ea      	b.n	34005fd4 <ISP_SVC_ISP_SetDecimation+0x34>
  switch (pConfig->factor)
34005ffe:	201e      	movs	r0, #30
34006000:	e7e8      	b.n	34005fd4 <ISP_SVC_ISP_SetDecimation+0x34>
34006002:	bf00      	nop
34006004:	34108e5a 	.word	0x34108e5a

34006008 <ISP_SVC_ISP_SetContrast>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the contrast configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetContrast(ISP_HandleTypeDef *hIsp, ISP_ContrastTypeDef *pConfig)
{
34006008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_ContrastConfTypeDef contrast;

  if ((hIsp == NULL) || (pConfig == NULL) ||
3400600c:	4605      	mov	r5, r0
{
3400600e:	b085      	sub	sp, #20
  if ((hIsp == NULL) || (pConfig == NULL) ||
34006010:	2800      	cmp	r0, #0
34006012:	d071      	beq.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
34006014:	2900      	cmp	r1, #0
34006016:	d06f      	beq.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006018:	684b      	ldr	r3, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
3400601a:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
3400601e:	d86b      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006020:	f8d1 9008 	ldr.w	r9, [r1, #8]
34006024:	f5b9 7fc5 	cmp.w	r9, #394	@ 0x18a
34006028:	d866      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400602a:	f8d1 800c 	ldr.w	r8, [r1, #12]
      (pConfig->coeff.LUM_0 > ISP_CONTAST_LUMCOEFF_MAX) ||  (pConfig->coeff.LUM_32 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400602e:	f5b8 7fc5 	cmp.w	r8, #394	@ 0x18a
34006032:	d861      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006034:	f8d1 e010 	ldr.w	lr, [r1, #16]
34006038:	f5be 7fc5 	cmp.w	lr, #394	@ 0x18a
3400603c:	d85c      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
3400603e:	f8d1 c014 	ldr.w	ip, [r1, #20]
      (pConfig->coeff.LUM_64 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_96 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006042:	f5bc 7fc5 	cmp.w	ip, #394	@ 0x18a
34006046:	d857      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006048:	698f      	ldr	r7, [r1, #24]
3400604a:	f5b7 7fc5 	cmp.w	r7, #394	@ 0x18a
3400604e:	d853      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006050:	69ce      	ldr	r6, [r1, #28]
      (pConfig->coeff.LUM_128 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_160 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006052:	f5b6 7fc5 	cmp.w	r6, #394	@ 0x18a
34006056:	d84f      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006058:	6a0c      	ldr	r4, [r1, #32]
3400605a:	f5b4 7fc5 	cmp.w	r4, #394	@ 0x18a
3400605e:	d84b      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
      (pConfig->coeff.LUM_256 > ISP_CONTAST_LUMCOEFF_MAX))
34006060:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
      (pConfig->coeff.LUM_192 > ISP_CONTAST_LUMCOEFF_MAX) || (pConfig->coeff.LUM_224 > ISP_CONTAST_LUMCOEFF_MAX) ||
34006062:	f5b2 7fc5 	cmp.w	r2, #394	@ 0x18a
34006066:	d847      	bhi.n	340060f8 <ISP_SVC_ISP_SetContrast+0xf0>
  {
    return ISP_ERR_CONTRAST_EINVAL;
  }

  if (pConfig->enable == 0)
34006068:	7809      	ldrb	r1, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
3400606a:	6800      	ldr	r0, [r0, #0]
  if (pConfig->enable == 0)
3400606c:	b921      	cbnz	r1, 34006078 <ISP_SVC_ISP_SetContrast+0x70>
    halStatus = HAL_DCMIPP_PIPE_DisableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
3400606e:	2101      	movs	r1, #1
34006070:	f00c ff1e 	bl	34012eb0 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34006074:	b3c0      	cbz	r0, 340060e8 <ISP_SVC_ISP_SetContrast+0xe0>
34006076:	e036      	b.n	340060e6 <ISP_SVC_ISP_SetContrast+0xde>
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
34006078:	0119      	lsls	r1, r3, #4
3400607a:	2364      	movs	r3, #100	@ 0x64
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
3400607c:	0112      	lsls	r2, r2, #4
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
3400607e:	fbb1 f1f3 	udiv	r1, r1, r3
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
34006082:	fbb2 f2f3 	udiv	r2, r2, r3
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
34006086:	ea4f 1909 	mov.w	r9, r9, lsl #4
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
3400608a:	ea4f 1808 	mov.w	r8, r8, lsl #4
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
3400608e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
34006092:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
34006096:	013f      	lsls	r7, r7, #4
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
34006098:	0136      	lsls	r6, r6, #4
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
3400609a:	0124      	lsls	r4, r4, #4
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
3400609c:	fbb9 f9f3 	udiv	r9, r9, r3
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
340060a0:	fbb8 f8f3 	udiv	r8, r8, r3
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
340060a4:	fbbe fef3 	udiv	lr, lr, r3
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
340060a8:	fbbc fcf3 	udiv	ip, ip, r3
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
340060ac:	fbb7 f7f3 	udiv	r7, r7, r3
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
340060b0:	fbb6 f6f3 	udiv	r6, r6, r3
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
340060b4:	fbb4 f4f3 	udiv	r4, r4, r3
    contrast.LUM_0 = (pConfig->coeff.LUM_0 * 16) / 100;
340060b8:	f88d 1004 	strb.w	r1, [sp, #4]
    contrast.LUM_256 = (pConfig->coeff.LUM_256 * 16) / 100;
340060bc:	f88d 200c 	strb.w	r2, [sp, #12]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
340060c0:	2101      	movs	r1, #1
340060c2:	aa01      	add	r2, sp, #4
    contrast.LUM_32 = (pConfig->coeff.LUM_32 * 16) / 100;
340060c4:	f88d 9005 	strb.w	r9, [sp, #5]
    contrast.LUM_64 = (pConfig->coeff.LUM_64 * 16) / 100;
340060c8:	f88d 8006 	strb.w	r8, [sp, #6]
    contrast.LUM_96 = (pConfig->coeff.LUM_96 * 16) / 100;
340060cc:	f88d e007 	strb.w	lr, [sp, #7]
    contrast.LUM_128 = (pConfig->coeff.LUM_128 * 16) / 100;
340060d0:	f88d c008 	strb.w	ip, [sp, #8]
    contrast.LUM_160 = (pConfig->coeff.LUM_160 * 16) / 100;
340060d4:	f88d 7009 	strb.w	r7, [sp, #9]
    contrast.LUM_192 = (pConfig->coeff.LUM_192 * 16) / 100;
340060d8:	f88d 600a 	strb.w	r6, [sp, #10]
    contrast.LUM_224 = (pConfig->coeff.LUM_224 * 16) / 100;
340060dc:	f88d 400b 	strb.w	r4, [sp, #11]
    halStatus = HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &contrast);
340060e0:	f00c fe4c 	bl	34012d7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>
    if (halStatus == HAL_OK)
340060e4:	b118      	cbz	r0, 340060ee <ISP_SVC_ISP_SetContrast+0xe6>
  {
    return ISP_ERR_CONTRAST_HAL;
340060e6:	2029      	movs	r0, #41	@ 0x29
  }

  return ISP_OK;
}
340060e8:	b005      	add	sp, #20
340060ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPCtrlContrast(hIsp->hDcmipp, DCMIPP_PIPE1);
340060ee:	2101      	movs	r1, #1
340060f0:	6828      	ldr	r0, [r5, #0]
340060f2:	f00c fec5 	bl	34012e80 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>
340060f6:	e7bd      	b.n	34006074 <ISP_SVC_ISP_SetContrast+0x6c>
    return ISP_ERR_CONTRAST_EINVAL;
340060f8:	2028      	movs	r0, #40	@ 0x28
340060fa:	e7f5      	b.n	340060e8 <ISP_SVC_ISP_SetContrast+0xe0>

340060fc <ISP_SVC_ISP_SetStatArea>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to statistic area used by the IQ algorithms
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetStatArea(ISP_HandleTypeDef *hIsp, ISP_StatAreaTypeDef *pConfig)
{
340060fc:	b5f0      	push	{r4, r5, r6, r7, lr}
340060fe:	460e      	mov	r6, r1
  HAL_StatusTypeDef halStatus;
  DCMIPP_StatisticExtractionAreaConfTypeDef currentStatAreaCfg;
  ISP_StatusTypeDef ret = ISP_OK;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34006100:	4605      	mov	r5, r0
{
34006102:	b085      	sub	sp, #20
  if ((hIsp == NULL) || (pConfig == NULL) ||
34006104:	2800      	cmp	r0, #0
34006106:	d041      	beq.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
34006108:	2900      	cmp	r1, #0
3400610a:	d03f      	beq.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
3400610c:	f640 72fe 	movw	r2, #4094	@ 0xffe
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34006110:	6808      	ldr	r0, [r1, #0]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34006112:	4290      	cmp	r0, r2
34006114:	d83a      	bhi.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
34006116:	6849      	ldr	r1, [r1, #4]
      (pConfig->X0 > ISP_STATWINDOW_MAX) ||
34006118:	4291      	cmp	r1, r2
3400611a:	d837      	bhi.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
3400611c:	68b3      	ldr	r3, [r6, #8]
      (pConfig->Y0 > ISP_STATWINDOW_MAX) ||
3400611e:	4293      	cmp	r3, r2
34006120:	d834      	bhi.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34006122:	f640 74fa 	movw	r4, #4090	@ 0xffa
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
34006126:	68f2      	ldr	r2, [r6, #12]
      (pConfig->XSize > ISP_STATWINDOW_MAX) ||
34006128:	1f17      	subs	r7, r2, #4
3400612a:	42a7      	cmp	r7, r4
3400612c:	d82e      	bhi.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->YSize > ISP_STATWINDOW_MAX) ||
3400612e:	2b03      	cmp	r3, #3
34006130:	d92c      	bls.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->XSize < ISP_STATWINDOW_MIN) ||
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
34006132:	6f2f      	ldr	r7, [r5, #112]	@ 0x70
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
34006134:	18c4      	adds	r4, r0, r3
      (pConfig->YSize < ISP_STATWINDOW_MIN) ||
34006136:	42bc      	cmp	r4, r7
34006138:	d828      	bhi.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3400613a:	6f6f      	ldr	r7, [r5, #116]	@ 0x74
      (pConfig->Y0 + pConfig->YSize > hIsp->sensorInfo.height))
3400613c:	188c      	adds	r4, r1, r2
      (pConfig->X0 + pConfig->XSize > hIsp->sensorInfo.width) ||
3400613e:	42bc      	cmp	r4, r7
34006140:	d824      	bhi.n	3400618c <ISP_SVC_ISP_SetStatArea+0x90>
  {
    return ISP_ERR_STATAREA_EINVAL;
  }

  /* Set coordinates in the 'decimated' referential */
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
34006142:	4c13      	ldr	r4, [pc, #76]	@ (34006190 <ISP_SVC_ISP_SetStatArea+0x94>)
34006144:	7824      	ldrb	r4, [r4, #0]
34006146:	fbb0 f0f4 	udiv	r0, r0, r4
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
3400614a:	fbb1 f1f4 	udiv	r1, r1, r4
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
3400614e:	fbb2 f2f4 	udiv	r2, r2, r4
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
34006152:	fbb3 f3f4 	udiv	r3, r3, r4
  currentStatAreaCfg.HStart = pConfig->X0 / ISP_DecimationValue.factor;
34006156:	9001      	str	r0, [sp, #4]
  currentStatAreaCfg.VStart = pConfig->Y0 / ISP_DecimationValue.factor;
34006158:	9100      	str	r1, [sp, #0]
  currentStatAreaCfg.VSize = pConfig->YSize / ISP_DecimationValue.factor;
3400615a:	9202      	str	r2, [sp, #8]

  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
3400615c:	2101      	movs	r1, #1
3400615e:	466a      	mov	r2, sp
34006160:	6828      	ldr	r0, [r5, #0]
  currentStatAreaCfg.HSize = pConfig->XSize / ISP_DecimationValue.factor;
34006162:	9303      	str	r3, [sp, #12]
  if (HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1,
34006164:	f00c fcf0 	bl	34012b48 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>
34006168:	b118      	cbz	r0, 34006172 <ISP_SVC_ISP_SetStatArea+0x76>
                                                          &currentStatAreaCfg) != HAL_OK)
  {
    return ISP_ERR_STATAREA_HAL;
3400616a:	2433      	movs	r4, #51	@ 0x33

  /* Update internal state */
  hIsp->statArea = *pConfig;

  return ret;
}
3400616c:	4620      	mov	r0, r4
3400616e:	b005      	add	sp, #20
34006170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    halStatus = HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1);
34006172:	2101      	movs	r1, #1
34006174:	6828      	ldr	r0, [r5, #0]
34006176:	f00c fd71 	bl	34012c5c <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>
  if (halStatus != HAL_OK)
3400617a:	4604      	mov	r4, r0
3400617c:	2800      	cmp	r0, #0
3400617e:	d1f4      	bne.n	3400616a <ISP_SVC_ISP_SetStatArea+0x6e>
  hIsp->statArea = *pConfig;
34006180:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
34006184:	3508      	adds	r5, #8
34006186:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  return ret;
3400618a:	e7ef      	b.n	3400616c <ISP_SVC_ISP_SetStatArea+0x70>
    return ISP_ERR_STATAREA_EINVAL;
3400618c:	2432      	movs	r4, #50	@ 0x32
3400618e:	e7ed      	b.n	3400616c <ISP_SVC_ISP_SetStatArea+0x70>
34006190:	34108e5a 	.word	0x34108e5a

34006194 <ISP_SVC_ISP_SetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
34006194:	b510      	push	{r4, lr}
  HAL_StatusTypeDef halStatus;

  if ((hIsp == NULL) || (pConfig == NULL) || (pConfig->strength > ISP_BADPIXEL_STRENGTH_MAX))
34006196:	4604      	mov	r4, r0
34006198:	b1a8      	cbz	r0, 340061c6 <ISP_SVC_ISP_SetBadPixel+0x32>
3400619a:	b1a1      	cbz	r1, 340061c6 <ISP_SVC_ISP_SetBadPixel+0x32>
3400619c:	784a      	ldrb	r2, [r1, #1]
3400619e:	2a07      	cmp	r2, #7
340061a0:	d811      	bhi.n	340061c6 <ISP_SVC_ISP_SetBadPixel+0x32>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
  }

  if (pConfig->enable == 0)
340061a2:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340061a4:	6800      	ldr	r0, [r0, #0]
340061a6:	2101      	movs	r1, #1
  if (pConfig->enable == 0)
340061a8:	b91b      	cbnz	r3, 340061b2 <ISP_SVC_ISP_SetBadPixel+0x1e>
    halStatus = HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340061aa:	f00c f9fb 	bl	340125a4 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>
    }

    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
  }

  if (halStatus != HAL_OK)
340061ae:	b120      	cbz	r0, 340061ba <ISP_SVC_ISP_SetBadPixel+0x26>
340061b0:	e002      	b.n	340061b8 <ISP_SVC_ISP_SetBadPixel+0x24>
    halStatus = HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1, pConfig->strength);
340061b2:	f00c f9b7 	bl	34012524 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>
    if (halStatus != HAL_OK)
340061b6:	b108      	cbz	r0, 340061bc <ISP_SVC_ISP_SetBadPixel+0x28>
      return ISP_ERR_BADPIXEL_HAL;
340061b8:	203d      	movs	r0, #61	@ 0x3d
  {
    return ISP_ERR_BADPIXEL_HAL;
  }

  return ISP_OK;
}
340061ba:	bd10      	pop	{r4, pc}
    halStatus = HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340061bc:	2101      	movs	r1, #1
340061be:	6820      	ldr	r0, [r4, #0]
340061c0:	f00c f9d8 	bl	34012574 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>
340061c4:	e7f3      	b.n	340061ae <ISP_SVC_ISP_SetBadPixel+0x1a>
    return ISP_ERR_BADPIXEL_EINVAL;
340061c6:	203c      	movs	r0, #60	@ 0x3c
340061c8:	e7f7      	b.n	340061ba <ISP_SVC_ISP_SetBadPixel+0x26>

340061ca <ISP_SVC_ISP_GetBadPixel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the bad pixel configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBadPixel(ISP_HandleTypeDef *hIsp, ISP_BadPixelTypeDef *pConfig)
{
340061ca:	b538      	push	{r3, r4, r5, lr}
340061cc:	460d      	mov	r5, r1
  HAL_StatusTypeDef halStatus;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340061ce:	4604      	mov	r4, r0
340061d0:	b198      	cbz	r0, 340061fa <ISP_SVC_ISP_GetBadPixel+0x30>
340061d2:	b191      	cbz	r1, 340061fa <ISP_SVC_ISP_GetBadPixel+0x30>
  {
    return ISP_ERR_BADPIXEL_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval(hIsp->hDcmipp, DCMIPP_PIPE1);
340061d4:	2101      	movs	r1, #1
340061d6:	6800      	ldr	r0, [r0, #0]
340061d8:	f00c fa0e 	bl	340125f8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>
340061dc:	7028      	strb	r0, [r5, #0]
  pConfig->strength = (uint8_t) HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig(hIsp->hDcmipp, DCMIPP_PIPE1);
340061de:	2101      	movs	r1, #1
340061e0:	6820      	ldr	r0, [r4, #0]
340061e2:	f00c f9f7 	bl	340125d4 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>
340061e6:	7068      	strb	r0, [r5, #1]

  halStatus = HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter(hIsp->hDcmipp, DCMIPP_PIPE1, &pConfig->count);
340061e8:	2101      	movs	r1, #1
340061ea:	6820      	ldr	r0, [r4, #0]
340061ec:	1d2a      	adds	r2, r5, #4
340061ee:	f00c fa29 	bl	34012644 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>

  if (halStatus != HAL_OK)
  {
    return ISP_ERR_BADPIXEL_HAL;
340061f2:	2800      	cmp	r0, #0
340061f4:	bf18      	it	ne
340061f6:	203d      	movne	r0, #61	@ 0x3d
  }

  return ISP_OK;
}
340061f8:	bd38      	pop	{r3, r4, r5, pc}
    return ISP_ERR_BADPIXEL_EINVAL;
340061fa:	203c      	movs	r0, #60	@ 0x3c
340061fc:	e7fc      	b.n	340061f8 <ISP_SVC_ISP_GetBadPixel+0x2e>

340061fe <ISP_SVC_ISP_SetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
340061fe:	b513      	push	{r0, r1, r4, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006200:	4604      	mov	r4, r0
34006202:	b1f0      	cbz	r0, 34006242 <ISP_SVC_ISP_SetBlackLevel+0x44>
34006204:	b1e9      	cbz	r1, 34006242 <ISP_SVC_ISP_SetBlackLevel+0x44>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
  }

  if (pConfig->enable == 0)
34006206:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34006208:	6800      	ldr	r0, [r0, #0]
  if (pConfig->enable == 0)
3400620a:	b923      	cbnz	r3, 34006216 <ISP_SVC_ISP_SetBlackLevel+0x18>
    halStatus = HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
3400620c:	2101      	movs	r1, #1
3400620e:	f00c fbe1 	bl	340129d4 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34006212:	b178      	cbz	r0, 34006234 <ISP_SVC_ISP_SetBlackLevel+0x36>
34006214:	e00d      	b.n	34006232 <ISP_SVC_ISP_SetBlackLevel+0x34>
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
34006216:	784b      	ldrb	r3, [r1, #1]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34006218:	aa01      	add	r2, sp, #4
    blackLevelConfig.RedCompBlackLevel = pConfig->BLCR;
3400621a:	f88d 3004 	strb.w	r3, [sp, #4]
    blackLevelConfig.GreenCompBlackLevel = pConfig->BLCG;
3400621e:	788b      	ldrb	r3, [r1, #2]
34006220:	f88d 3005 	strb.w	r3, [sp, #5]
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34006224:	78cb      	ldrb	r3, [r1, #3]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
34006226:	2101      	movs	r1, #1
    blackLevelConfig.BlueCompBlackLevel = pConfig->BLCB;
34006228:	f88d 3006 	strb.w	r3, [sp, #6]
    halStatus = HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3400622c:	f00c fb98 	bl	34012960 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>
    if (halStatus == HAL_OK)
34006230:	b110      	cbz	r0, 34006238 <ISP_SVC_ISP_SetBlackLevel+0x3a>
  {
    return ISP_ERR_BLACKLEVEL_HAL;
34006232:	2047      	movs	r0, #71	@ 0x47
  }

  return ISP_OK;
}
34006234:	b002      	add	sp, #8
34006236:	bd10      	pop	{r4, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34006238:	2101      	movs	r1, #1
3400623a:	6820      	ldr	r0, [r4, #0]
3400623c:	f00c fbb2 	bl	340129a4 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>
34006240:	e7e7      	b.n	34006212 <ISP_SVC_ISP_SetBlackLevel+0x14>
    return ISP_ERR_BLACKLEVEL_EINVAL;
34006242:	2046      	movs	r0, #70	@ 0x46
34006244:	e7f6      	b.n	34006234 <ISP_SVC_ISP_SetBlackLevel+0x36>

34006246 <ISP_SVC_ISP_GetBlackLevel>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the black level configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetBlackLevel(ISP_HandleTypeDef *hIsp, ISP_BlackLevelTypeDef *pConfig)
{
34006246:	b537      	push	{r0, r1, r2, r4, r5, lr}
34006248:	460c      	mov	r4, r1
  DCMIPP_BlackLevelConfTypeDef blackLevelConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3400624a:	4605      	mov	r5, r0
3400624c:	b1b0      	cbz	r0, 3400627c <ISP_SVC_ISP_GetBlackLevel+0x36>
3400624e:	b1a9      	cbz	r1, 3400627c <ISP_SVC_ISP_GetBlackLevel+0x36>
  {
    return ISP_ERR_BLACKLEVEL_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration(hIsp->hDcmipp, DCMIPP_PIPE1);
34006250:	2101      	movs	r1, #1
34006252:	6800      	ldr	r0, [r0, #0]
34006254:	f00c fbec 	bl	34012a30 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>
34006258:	7020      	strb	r0, [r4, #0]

  HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &blackLevelConfig);
3400625a:	6828      	ldr	r0, [r5, #0]
3400625c:	2101      	movs	r1, #1
3400625e:	aa01      	add	r2, sp, #4
34006260:	f00c fbd0 	bl	34012a04 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>

  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;

  return ISP_OK;
34006264:	2000      	movs	r0, #0
  pConfig->BLCR = blackLevelConfig.RedCompBlackLevel;
34006266:	f89d 3004 	ldrb.w	r3, [sp, #4]
3400626a:	7063      	strb	r3, [r4, #1]
  pConfig->BLCG = blackLevelConfig.GreenCompBlackLevel;
3400626c:	f89d 3005 	ldrb.w	r3, [sp, #5]
34006270:	70a3      	strb	r3, [r4, #2]
  pConfig->BLCB = blackLevelConfig.BlueCompBlackLevel;
34006272:	f89d 3006 	ldrb.w	r3, [sp, #6]
34006276:	70e3      	strb	r3, [r4, #3]
}
34006278:	b003      	add	sp, #12
3400627a:	bd30      	pop	{r4, r5, pc}
    return ISP_ERR_BLACKLEVEL_EINVAL;
3400627c:	2046      	movs	r0, #70	@ 0x46
3400627e:	e7fb      	b.n	34006278 <ISP_SVC_ISP_GetBlackLevel+0x32>

34006280 <ISP_SVC_ISP_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
34006280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef halStatus;
  DCMIPP_ExposureConfTypeDef exposureConfig;

  if ((hIsp == NULL) || (pConfig == NULL) ||
34006284:	4605      	mov	r5, r0
34006286:	2800      	cmp	r0, #0
34006288:	f000 808b 	beq.w	340063a2 <ISP_SVC_ISP_SetGain+0x122>
3400628c:	2900      	cmp	r1, #0
3400628e:	f000 8088 	beq.w	340063a2 <ISP_SVC_ISP_SetGain+0x122>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
34006292:	684a      	ldr	r2, [r1, #4]
  if ((hIsp == NULL) || (pConfig == NULL) ||
34006294:	4b46      	ldr	r3, [pc, #280]	@ (340063b0 <ISP_SVC_ISP_SetGain+0x130>)
34006296:	429a      	cmp	r2, r3
34006298:	f200 8083 	bhi.w	340063a2 <ISP_SVC_ISP_SetGain+0x122>
      (pConfig->ispGainR > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainG > ISP_EXPOSURE_GAIN_MAX) || (pConfig->ispGainB > ISP_EXPOSURE_GAIN_MAX))
3400629c:	f8d1 8008 	ldr.w	r8, [r1, #8]
340062a0:	4598      	cmp	r8, r3
340062a2:	d87e      	bhi.n	340063a2 <ISP_SVC_ISP_SetGain+0x122>
340062a4:	68cf      	ldr	r7, [r1, #12]
340062a6:	429f      	cmp	r7, r3
340062a8:	d87b      	bhi.n	340063a2 <ISP_SVC_ISP_SetGain+0x122>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
  }

  if (pConfig->enable == 0)
340062aa:	780b      	ldrb	r3, [r1, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
340062ac:	6806      	ldr	r6, [r0, #0]
  if (pConfig->enable == 0)
340062ae:	b933      	cbnz	r3, 340062be <ISP_SVC_ISP_SetGain+0x3e>
    halStatus = HAL_DCMIPP_PIPE_DisableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
340062b0:	2101      	movs	r1, #1
340062b2:	4630      	mov	r0, r6
340062b4:	f00c fd4a 	bl	34012d4c <HAL_DCMIPP_PIPE_DisableISPExposure>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
340062b8:	2800      	cmp	r0, #0
340062ba:	d05b      	beq.n	34006374 <ISP_SVC_ISP_SetGain+0xf4>
340062bc:	e059      	b.n	34006372 <ISP_SVC_ISP_SetGain+0xf2>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340062be:	2400      	movs	r4, #0
340062c0:	4610      	mov	r0, r2
340062c2:	a339      	add	r3, pc, #228	@ (adr r3, 340063a8 <ISP_SVC_ISP_SetGain+0x128>)
340062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
340062c8:	4621      	mov	r1, r4
340062ca:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
340062ce:	f7fb fc3d 	bl	34001b4c <__aeabi_uldivmod>
  while (Val >= 256)
340062d2:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340062d4:	4682      	mov	sl, r0
340062d6:	468b      	mov	fp, r1
  while (Val >= 256)
340062d8:	4622      	mov	r2, r4
340062da:	f5ba 7f80 	cmp.w	sl, #256	@ 0x100
340062de:	f17b 0000 	sbcs.w	r0, fp, #0
340062e2:	f103 0101 	add.w	r1, r3, #1
340062e6:	d248      	bcs.n	3400637a <ISP_SVC_ISP_SetGain+0xfa>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340062e8:	2400      	movs	r4, #0
  *pShift = 0;
340062ea:	2a00      	cmp	r2, #0
340062ec:	bf08      	it	eq
340062ee:	4613      	moveq	r3, r2
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340062f0:	4640      	mov	r0, r8
340062f2:	4621      	mov	r1, r4
  *pShift = 0;
340062f4:	f88d 3000 	strb.w	r3, [sp]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
340062f8:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
340062fc:	a32a      	add	r3, pc, #168	@ (adr r3, 340063a8 <ISP_SVC_ISP_SetGain+0x128>)
340062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  *pMultiplier = Val;
34006302:	f88d a001 	strb.w	sl, [sp, #1]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006306:	f7fb fc21 	bl	34001b4c <__aeabi_uldivmod>
  while (Val >= 256)
3400630a:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
3400630c:	4680      	mov	r8, r0
3400630e:	4689      	mov	r9, r1
  while (Val >= 256)
34006310:	4622      	mov	r2, r4
34006312:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
34006316:	f179 0000 	sbcs.w	r0, r9, #0
3400631a:	f103 0101 	add.w	r1, r3, #1
3400631e:	d231      	bcs.n	34006384 <ISP_SVC_ISP_SetGain+0x104>
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006320:	2400      	movs	r4, #0
  *pShift = 0;
34006322:	2a00      	cmp	r2, #0
34006324:	bf08      	it	eq
34006326:	4613      	moveq	r3, r2
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006328:	4638      	mov	r0, r7
3400632a:	4621      	mov	r1, r4
  *pShift = 0;
3400632c:	f88d 3002 	strb.w	r3, [sp, #2]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006330:	ea50 11cf 	orrs.w	r1, r0, pc, lsl #7
34006334:	a31c      	add	r3, pc, #112	@ (adr r3, 340063a8 <ISP_SVC_ISP_SetGain+0x128>)
34006336:	e9d3 2300 	ldrd	r2, r3, [r3]
  *pMultiplier = Val;
3400633a:	f88d 8003 	strb.w	r8, [sp, #3]
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
3400633e:	f7fb fc05 	bl	34001b4c <__aeabi_uldivmod>
  while (Val >= 256)
34006342:	4623      	mov	r3, r4
  Val = (Val * 128) / ISP_GAIN_PRECISION_FACTOR;
34006344:	4680      	mov	r8, r0
34006346:	4689      	mov	r9, r1
  while (Val >= 256)
34006348:	4622      	mov	r2, r4
3400634a:	f5b8 7f80 	cmp.w	r8, #256	@ 0x100
3400634e:	f179 0000 	sbcs.w	r0, r9, #0
34006352:	f103 0101 	add.w	r1, r3, #1
34006356:	d21a      	bcs.n	3400638e <ISP_SVC_ISP_SetGain+0x10e>
  *pShift = 0;
34006358:	2a00      	cmp	r2, #0
3400635a:	bf08      	it	eq
3400635c:	4613      	moveq	r3, r2
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3400635e:	2101      	movs	r1, #1
34006360:	466a      	mov	r2, sp
34006362:	4630      	mov	r0, r6
  *pShift = 0;
34006364:	f88d 3004 	strb.w	r3, [sp, #4]
  *pMultiplier = Val;
34006368:	f88d 8005 	strb.w	r8, [sp, #5]
    halStatus = HAL_DCMIPP_PIPE_SetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
3400636c:	f00c fc8e 	bl	34012c8c <HAL_DCMIPP_PIPE_SetISPExposureConfig>
    if (halStatus == HAL_OK)
34006370:	b190      	cbz	r0, 34006398 <ISP_SVC_ISP_SetGain+0x118>
  {
    return ISP_ERR_ISPGAIN_HAL;
34006372:	2051      	movs	r0, #81	@ 0x51
  }

  return ISP_OK;
}
34006374:	b003      	add	sp, #12
34006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Val /= 2;
3400637a:	ea5a 0b5f 	orrs.w	fp, sl, pc, lsr #1
3400637e:	460b      	mov	r3, r1
34006380:	2201      	movs	r2, #1
34006382:	e7aa      	b.n	340062da <ISP_SVC_ISP_SetGain+0x5a>
34006384:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
34006388:	460b      	mov	r3, r1
3400638a:	2201      	movs	r2, #1
3400638c:	e7c1      	b.n	34006312 <ISP_SVC_ISP_SetGain+0x92>
3400638e:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
34006392:	460b      	mov	r3, r1
34006394:	2201      	movs	r2, #1
34006396:	e7d8      	b.n	3400634a <ISP_SVC_ISP_SetGain+0xca>
      halStatus = HAL_DCMIPP_PIPE_EnableISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
34006398:	2101      	movs	r1, #1
3400639a:	6828      	ldr	r0, [r5, #0]
3400639c:	f00c fcbe 	bl	34012d1c <HAL_DCMIPP_PIPE_EnableISPExposure>
340063a0:	e78a      	b.n	340062b8 <ISP_SVC_ISP_SetGain+0x38>
    return ISP_ERR_ISPGAIN_EINVAL;
340063a2:	2050      	movs	r0, #80	@ 0x50
340063a4:	e7e6      	b.n	34006374 <ISP_SVC_ISP_SetGain+0xf4>
340063a6:	bf00      	nop
340063a8:	05f5e100 	.word	0x05f5e100
340063ac:	00000000 	.word	0x00000000
340063b0:	5f5e1000 	.word	0x5f5e1000

340063b4 <ISP_SVC_ISP_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetGain(ISP_HandleTypeDef *hIsp, ISP_ISPGainTypeDef *pConfig)
{
340063b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340063b6:	460c      	mov	r4, r1
  DCMIPP_ExposureConfTypeDef exposureConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340063b8:	4605      	mov	r5, r0
340063ba:	2800      	cmp	r0, #0
340063bc:	d03f      	beq.n	3400643e <ISP_SVC_ISP_GetGain+0x8a>
340063be:	2900      	cmp	r1, #0
340063c0:	d03d      	beq.n	3400643e <ISP_SVC_ISP_GetGain+0x8a>
  {
    return ISP_ERR_ISPGAIN_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPExposure(hIsp->hDcmipp, DCMIPP_PIPE1);
340063c2:	2101      	movs	r1, #1
340063c4:	6800      	ldr	r0, [r0, #0]
340063c6:	f00c ff93 	bl	340132f0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>
340063ca:	7020      	strb	r0, [r4, #0]
  HAL_DCMIPP_PIPE_GetISPExposureConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &exposureConfig);
340063cc:	6828      	ldr	r0, [r5, #0]
340063ce:	466a      	mov	r2, sp
340063d0:	2101      	movs	r1, #1
340063d2:	f00c fecb 	bl	3401316c <HAL_DCMIPP_PIPE_GetISPExposureConfig>
  uint64_t Val = (1 << Shift);
340063d6:	2301      	movs	r3, #1
340063d8:	f89d 1000 	ldrb.w	r1, [sp]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
340063dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
  uint64_t Val = (1 << Shift);
340063e0:	fa03 f101 	lsl.w	r1, r3, r1
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
340063e4:	fb81 1002 	smull	r1, r0, r1, r2
340063e8:	4a16      	ldr	r2, [pc, #88]	@ (34006444 <ISP_SVC_ISP_GetGain+0x90>)
340063ea:	fba1 1502 	umull	r1, r5, r1, r2
340063ee:	460e      	mov	r6, r1
340063f0:	fb02 5700 	mla	r7, r2, r0, r5
340063f4:	ea56 17df 	orrs.w	r7, r6, pc, lsr #7
  uint64_t Val = (1 << Shift);
340063f8:	f89d 0002 	ldrb.w	r0, [sp, #2]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
340063fc:	f89d 1003 	ldrb.w	r1, [sp, #3]
  uint64_t Val = (1 << Shift);
34006400:	fa03 f000 	lsl.w	r0, r3, r0
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34006404:	fb80 0101 	smull	r0, r1, r0, r1
34006408:	fba0 0502 	umull	r0, r5, r0, r2
  return (uint32_t) Val;
3400640c:	6066      	str	r6, [r4, #4]
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
3400640e:	4606      	mov	r6, r0
34006410:	fb02 5701 	mla	r7, r2, r1, r5
34006414:	ea56 17df 	orrs.w	r7, r6, pc, lsr #7
  uint64_t Val = (1 << Shift);
34006418:	f89d 1004 	ldrb.w	r1, [sp, #4]
  return (uint32_t) Val;
3400641c:	60a6      	str	r6, [r4, #8]
  uint64_t Val = (1 << Shift);
3400641e:	408b      	lsls	r3, r1
  Val = (Val * Multiplier * ISP_GAIN_PRECISION_FACTOR) / 128;
34006420:	f89d 1005 	ldrb.w	r1, [sp, #5]
34006424:	fb83 3501 	smull	r3, r5, r3, r1
34006428:	fba3 3602 	umull	r3, r6, r3, r2
3400642c:	4618      	mov	r0, r3
3400642e:	fb02 6105 	mla	r1, r2, r5, r6
34006432:	ea50 11df 	orrs.w	r1, r0, pc, lsr #7
  return (uint32_t) Val;
34006436:	60e0      	str	r0, [r4, #12]

  pConfig->ispGainR = From_Shift_Multiplier(exposureConfig.ShiftRed, exposureConfig.MultiplierRed);
  pConfig->ispGainG = From_Shift_Multiplier(exposureConfig.ShiftGreen, exposureConfig.MultiplierGreen);
  pConfig->ispGainB = From_Shift_Multiplier(exposureConfig.ShiftBlue, exposureConfig.MultiplierBlue);

  return ISP_OK;
34006438:	2000      	movs	r0, #0
}
3400643a:	b003      	add	sp, #12
3400643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ISP_ERR_ISPGAIN_EINVAL;
3400643e:	2050      	movs	r0, #80	@ 0x50
34006440:	e7fb      	b.n	3400643a <ISP_SVC_ISP_GetGain+0x86>
34006442:	bf00      	nop
34006444:	05f5e100 	.word	0x05f5e100

34006448 <ISP_SVC_ISP_SetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
34006448:	b570      	push	{r4, r5, r6, lr}
3400644a:	4605      	mov	r5, r0
3400644c:	b088      	sub	sp, #32
3400644e:	460c      	mov	r4, r1
  HAL_StatusTypeDef halStatus;
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;
  uint32_t i, j;

  memset(&colorConvConfig, 0, sizeof(colorConvConfig));
34006450:	221a      	movs	r2, #26
34006452:	2100      	movs	r1, #0
34006454:	a801      	add	r0, sp, #4
34006456:	f019 feff 	bl	34020258 <memset>

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3400645a:	b16d      	cbz	r5, 34006478 <ISP_SVC_ISP_SetColorConv+0x30>
3400645c:	b164      	cbz	r4, 34006478 <ISP_SVC_ISP_SetColorConv+0x30>
3400645e:	4623      	mov	r3, r4

  for (i = 0; i < 3; i++)
  {
    for (j = 0; j < 3; j++)
    {
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
34006460:	483a      	ldr	r0, [pc, #232]	@ (3400654c <ISP_SVC_ISP_SetColorConv+0x104>)
34006462:	4a3b      	ldr	r2, [pc, #236]	@ (34006550 <ISP_SVC_ISP_SetColorConv+0x108>)
34006464:	f104 0624 	add.w	r6, r4, #36	@ 0x24
34006468:	6859      	ldr	r1, [r3, #4]
3400646a:	4401      	add	r1, r0
3400646c:	4291      	cmp	r1, r2
3400646e:	d803      	bhi.n	34006478 <ISP_SVC_ISP_SetColorConv+0x30>
34006470:	6899      	ldr	r1, [r3, #8]
34006472:	4401      	add	r1, r0
34006474:	4291      	cmp	r1, r2
34006476:	d901      	bls.n	3400647c <ISP_SVC_ISP_SetColorConv+0x34>
    return ISP_ERR_COLORCONV_EINVAL;
34006478:	205a      	movs	r0, #90	@ 0x5a
3400647a:	e05f      	b.n	3400653c <ISP_SVC_ISP_SetColorConv+0xf4>
      if ((pConfig->coeff[i][j] > ISP_COLORCONV_MAX) || (pConfig->coeff[i][j] < -ISP_COLORCONV_MAX))
3400647c:	68d9      	ldr	r1, [r3, #12]
3400647e:	4401      	add	r1, r0
34006480:	4291      	cmp	r1, r2
34006482:	d8f9      	bhi.n	34006478 <ISP_SVC_ISP_SetColorConv+0x30>
  for (i = 0; i < 3; i++)
34006484:	330c      	adds	r3, #12
34006486:	42b3      	cmp	r3, r6
34006488:	d1ee      	bne.n	34006468 <ISP_SVC_ISP_SetColorConv+0x20>
        return ISP_ERR_COLORCONV_EINVAL;
      }
    }
  }

  if (pConfig->enable == 0)
3400648a:	7823      	ldrb	r3, [r4, #0]
  {
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
3400648c:	682e      	ldr	r6, [r5, #0]
  if (pConfig->enable == 0)
3400648e:	b933      	cbnz	r3, 3400649e <ISP_SVC_ISP_SetColorConv+0x56>
    halStatus = HAL_DCMIPP_PIPE_DisableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34006490:	2101      	movs	r1, #1
34006492:	4630      	mov	r0, r6
34006494:	f00c fa4c 	bl	34012930 <HAL_DCMIPP_PIPE_DisableISPColorConversion>
    {
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
    }
  }

  if (halStatus != HAL_OK)
34006498:	2800      	cmp	r0, #0
3400649a:	d04f      	beq.n	3400653c <ISP_SVC_ISP_SetColorConv+0xf4>
3400649c:	e04d      	b.n	3400653a <ISP_SVC_ISP_SetColorConv+0xf2>
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400649e:	6860      	ldr	r0, [r4, #4]
340064a0:	2300      	movs	r3, #0
340064a2:	4a2c      	ldr	r2, [pc, #176]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
340064a4:	17c1      	asrs	r1, r0, #31
340064a6:	f7fb fb01 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
340064aa:	f8ad 0006 	strh.w	r0, [sp, #6]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
340064ae:	68a0      	ldr	r0, [r4, #8]
340064b0:	2300      	movs	r3, #0
340064b2:	4a28      	ldr	r2, [pc, #160]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
340064b4:	17c1      	asrs	r1, r0, #31
340064b6:	f7fb faf9 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
340064ba:	f8ad 0008 	strh.w	r0, [sp, #8]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
340064be:	68e0      	ldr	r0, [r4, #12]
340064c0:	2300      	movs	r3, #0
340064c2:	4a24      	ldr	r2, [pc, #144]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
340064c4:	17c1      	asrs	r1, r0, #31
340064c6:	f7fb faf1 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
340064ca:	f8ad 000a 	strh.w	r0, [sp, #10]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
340064ce:	6920      	ldr	r0, [r4, #16]
340064d0:	2300      	movs	r3, #0
340064d2:	4a20      	ldr	r2, [pc, #128]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
340064d4:	17c1      	asrs	r1, r0, #31
340064d6:	f7fb fae9 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
340064da:	f8ad 000e 	strh.w	r0, [sp, #14]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
340064de:	6960      	ldr	r0, [r4, #20]
340064e0:	2300      	movs	r3, #0
340064e2:	4a1c      	ldr	r2, [pc, #112]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
340064e4:	17c1      	asrs	r1, r0, #31
340064e6:	f7fb fae1 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
340064ea:	f8ad 0010 	strh.w	r0, [sp, #16]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
340064ee:	69a0      	ldr	r0, [r4, #24]
340064f0:	2300      	movs	r3, #0
340064f2:	4a18      	ldr	r2, [pc, #96]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
340064f4:	17c1      	asrs	r1, r0, #31
340064f6:	f7fb fad9 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
340064fa:	f8ad 0012 	strh.w	r0, [sp, #18]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
340064fe:	69e0      	ldr	r0, [r4, #28]
34006500:	2300      	movs	r3, #0
34006502:	4a14      	ldr	r2, [pc, #80]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006504:	17c1      	asrs	r1, r0, #31
34006506:	f7fb fad1 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
3400650a:	f8ad 0016 	strh.w	r0, [sp, #22]
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
3400650e:	6a20      	ldr	r0, [r4, #32]
34006510:	2300      	movs	r3, #0
34006512:	4a10      	ldr	r2, [pc, #64]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006514:	17c1      	asrs	r1, r0, #31
34006516:	f7fb fac9 	bl	34001aac <__aeabi_ldivmod>
  return (int16_t) Val;
3400651a:	f8ad 0018 	strh.w	r0, [sp, #24]
  int64_t Val = Coeff;
3400651e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  Val = (Val * 256) / ISP_CCM_PRECISION_FACTOR;
34006520:	4a0c      	ldr	r2, [pc, #48]	@ (34006554 <ISP_SVC_ISP_SetColorConv+0x10c>)
34006522:	2300      	movs	r3, #0
34006524:	17c1      	asrs	r1, r0, #31
34006526:	f7fb fac1 	bl	34001aac <__aeabi_ldivmod>
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
3400652a:	2101      	movs	r1, #1
  return (int16_t) Val;
3400652c:	f8ad 001a 	strh.w	r0, [sp, #26]
    halStatus = HAL_DCMIPP_PIPE_SetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
34006530:	aa01      	add	r2, sp, #4
34006532:	4630      	mov	r0, r6
34006534:	f00c f8a2 	bl	3401267c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>
    if (halStatus == HAL_OK)
34006538:	b110      	cbz	r0, 34006540 <ISP_SVC_ISP_SetColorConv+0xf8>
  {
    return ISP_ERR_COLORCONV_HAL;
3400653a:	205b      	movs	r0, #91	@ 0x5b
  }

  return ISP_OK;
}
3400653c:	b008      	add	sp, #32
3400653e:	bd70      	pop	{r4, r5, r6, pc}
      halStatus = HAL_DCMIPP_PIPE_EnableISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34006540:	2101      	movs	r1, #1
34006542:	6828      	ldr	r0, [r5, #0]
34006544:	f00c f9dc 	bl	34012900 <HAL_DCMIPP_PIPE_EnableISPColorConversion>
34006548:	e7a6      	b.n	34006498 <ISP_SVC_ISP_SetColorConv+0x50>
3400654a:	bf00      	nop
3400654c:	17c841c0 	.word	0x17c841c0
34006550:	2f908380 	.word	0x2f908380
34006554:	0005f5e1 	.word	0x0005f5e1

34006558 <ISP_SVC_ISP_GetColorConv>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the Color Conversion configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_GetColorConv(ISP_HandleTypeDef *hIsp, ISP_ColorConvTypeDef *pConfig)
{
34006558:	b530      	push	{r4, r5, lr}
3400655a:	460c      	mov	r4, r1
  DCMIPP_ColorConversionConfTypeDef colorConvConfig;

  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3400655c:	4605      	mov	r5, r0
{
3400655e:	b089      	sub	sp, #36	@ 0x24
  if ((hIsp == NULL) || (pConfig == NULL))
34006560:	2800      	cmp	r0, #0
34006562:	d03c      	beq.n	340065de <ISP_SVC_ISP_GetColorConv+0x86>
34006564:	2900      	cmp	r1, #0
34006566:	d03a      	beq.n	340065de <ISP_SVC_ISP_GetColorConv+0x86>
  {
    return ISP_ERR_COLORCONV_EINVAL;
  }

  pConfig->enable = HAL_DCMIPP_PIPE_IsEnabledISPColorConversion(hIsp->hDcmipp, DCMIPP_PIPE1);
34006568:	2101      	movs	r1, #1
3400656a:	6800      	ldr	r0, [r0, #0]
3400656c:	f00c fee6 	bl	3401333c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>
34006570:	7020      	strb	r0, [r4, #0]

  HAL_DCMIPP_PIPE_GetISPColorConversionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, &colorConvConfig);
34006572:	2101      	movs	r1, #1
34006574:	6828      	ldr	r0, [r5, #0]
34006576:	aa01      	add	r2, sp, #4
34006578:	f00c fe18 	bl	340131ac <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
3400657c:	4b19      	ldr	r3, [pc, #100]	@ (340065e4 <ISP_SVC_ISP_GetColorConv+0x8c>)
  int64_t Val = Reg;
3400657e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  pConfig->coeff[1][2] = From_CConv_Reg(colorConvConfig.GB);
  pConfig->coeff[2][0] = From_CConv_Reg(colorConvConfig.BR);
  pConfig->coeff[2][1] = From_CConv_Reg(colorConvConfig.BG);
  pConfig->coeff[2][2] = From_CConv_Reg(colorConvConfig.BB);

  return ISP_OK;
34006582:	2000      	movs	r0, #0
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006584:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34006588:	6062      	str	r2, [r4, #4]
  int64_t Val = Reg;
3400658a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
3400658e:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
34006592:	60a2      	str	r2, [r4, #8]
  int64_t Val = Reg;
34006594:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
34006598:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
3400659c:	60e2      	str	r2, [r4, #12]
  int64_t Val = Reg;
3400659e:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340065a2:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
340065a6:	6122      	str	r2, [r4, #16]
  int64_t Val = Reg;
340065a8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340065ac:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
340065b0:	6162      	str	r2, [r4, #20]
  int64_t Val = Reg;
340065b2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340065b6:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
340065ba:	61a2      	str	r2, [r4, #24]
  int64_t Val = Reg;
340065bc:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340065c0:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
340065c4:	61e2      	str	r2, [r4, #28]
  int64_t Val = Reg;
340065c6:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340065ca:	fba2 2103 	umull	r2, r1, r2, r3
  return (int32_t) Val;
340065ce:	6222      	str	r2, [r4, #32]
  int64_t Val = Reg;
340065d0:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
  Val = (Val * ISP_CCM_PRECISION_FACTOR) / 256;
340065d4:	fba2 2303 	umull	r2, r3, r2, r3
  return (int32_t) Val;
340065d8:	6262      	str	r2, [r4, #36]	@ 0x24
}
340065da:	b009      	add	sp, #36	@ 0x24
340065dc:	bd30      	pop	{r4, r5, pc}
    return ISP_ERR_COLORCONV_EINVAL;
340065de:	205a      	movs	r0, #90	@ 0x5a
340065e0:	e7fb      	b.n	340065da <ISP_SVC_ISP_GetColorConv+0x82>
340065e2:	bf00      	nop
340065e4:	0005f5e1 	.word	0x0005f5e1

340065e8 <ISP_SVC_Sensor_GetInfo>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor info
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetInfo(ISP_HandleTypeDef *hIsp, ISP_SensorInfoTypeDef *pConfig)
{
340065e8:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
340065ea:	b138      	cbz	r0, 340065fc <ISP_SVC_Sensor_GetInfo+0x14>
340065ec:	b131      	cbz	r1, 340065fc <ISP_SVC_Sensor_GetInfo+0x14>
  {
    return ISP_ERR_SENSORINFO_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorInfo != NULL)
340065ee:	6a83      	ldr	r3, [r0, #40]	@ 0x28
340065f0:	b113      	cbz	r3, 340065f8 <ISP_SVC_Sensor_GetInfo+0x10>
  {
    if (hIsp->appliHelpers.GetSensorInfo(hIsp->cameraInstance, pConfig) != 0)
340065f2:	6840      	ldr	r0, [r0, #4]
340065f4:	4798      	blx	r3
340065f6:	b918      	cbnz	r0, 34006600 <ISP_SVC_Sensor_GetInfo+0x18>
    {
      return ISP_ERR_SENSORINFO;
    }
  }

  return ISP_OK;
340065f8:	2000      	movs	r0, #0
}
340065fa:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSORINFO_EINVAL;
340065fc:	206e      	movs	r0, #110	@ 0x6e
340065fe:	e7fc      	b.n	340065fa <ISP_SVC_Sensor_GetInfo+0x12>
      return ISP_ERR_SENSORINFO;
34006600:	206f      	movs	r0, #111	@ 0x6f
34006602:	e7fa      	b.n	340065fa <ISP_SVC_Sensor_GetInfo+0x12>

34006604 <ISP_SVC_Sensor_SetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
34006604:	b510      	push	{r4, lr}
34006606:	460c      	mov	r4, r1
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006608:	b170      	cbz	r0, 34006628 <ISP_SVC_Sensor_SetGain+0x24>
3400660a:	b169      	cbz	r1, 34006628 <ISP_SVC_Sensor_SetGain+0x24>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
  }

  if (hIsp->appliHelpers.SetSensorGain != NULL)
3400660c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
3400660e:	6809      	ldr	r1, [r1, #0]
  if (hIsp->appliHelpers.SetSensorGain != NULL)
34006610:	b923      	cbnz	r3, 3400661c <ISP_SVC_Sensor_SetGain+0x18>
    }
  }

  Meta.gain = pConfig->gain;

  return ISP_OK;
34006612:	2000      	movs	r0, #0
  Meta.gain = pConfig->gain;
34006614:	6822      	ldr	r2, [r4, #0]
34006616:	4b05      	ldr	r3, [pc, #20]	@ (3400662c <ISP_SVC_Sensor_SetGain+0x28>)
34006618:	609a      	str	r2, [r3, #8]
}
3400661a:	bd10      	pop	{r4, pc}
    if (hIsp->appliHelpers.SetSensorGain(hIsp->cameraInstance, pConfig->gain) != 0)
3400661c:	6840      	ldr	r0, [r0, #4]
3400661e:	4798      	blx	r3
34006620:	2800      	cmp	r0, #0
34006622:	d0f6      	beq.n	34006612 <ISP_SVC_Sensor_SetGain+0xe>
      return ISP_ERR_SENSORGAIN;
34006624:	2079      	movs	r0, #121	@ 0x79
34006626:	e7f8      	b.n	3400661a <ISP_SVC_Sensor_SetGain+0x16>
    return ISP_ERR_SENSORGAIN_EINVAL;
34006628:	2078      	movs	r0, #120	@ 0x78
3400662a:	e7f6      	b.n	3400661a <ISP_SVC_Sensor_SetGain+0x16>
3400662c:	3410ddf4 	.word	0x3410ddf4

34006630 <ISP_SVC_Sensor_GetGain>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor gain configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetGain(ISP_HandleTypeDef *hIsp, ISP_SensorGainTypeDef *pConfig)
{
34006630:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006632:	b138      	cbz	r0, 34006644 <ISP_SVC_Sensor_GetGain+0x14>
34006634:	b131      	cbz	r1, 34006644 <ISP_SVC_Sensor_GetGain+0x14>
  {
    return ISP_ERR_SENSORGAIN_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorGain != NULL)
34006636:	6b03      	ldr	r3, [r0, #48]	@ 0x30
34006638:	b113      	cbz	r3, 34006640 <ISP_SVC_Sensor_GetGain+0x10>
  {
    if (hIsp->appliHelpers.GetSensorGain(hIsp->cameraInstance, (int32_t *)&pConfig->gain) != 0)
3400663a:	6840      	ldr	r0, [r0, #4]
3400663c:	4798      	blx	r3
3400663e:	b918      	cbnz	r0, 34006648 <ISP_SVC_Sensor_GetGain+0x18>
    {
      return ISP_ERR_SENSORGAIN;
    }
  }

  return ISP_OK;
34006640:	2000      	movs	r0, #0
}
34006642:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSORGAIN_EINVAL;
34006644:	2078      	movs	r0, #120	@ 0x78
34006646:	e7fc      	b.n	34006642 <ISP_SVC_Sensor_GetGain+0x12>
      return ISP_ERR_SENSORGAIN;
34006648:	2079      	movs	r0, #121	@ 0x79
3400664a:	e7fa      	b.n	34006642 <ISP_SVC_Sensor_GetGain+0x12>

3400664c <ISP_SVC_Sensor_SetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_SetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
3400664c:	b510      	push	{r4, lr}
3400664e:	460c      	mov	r4, r1
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
34006650:	b170      	cbz	r0, 34006670 <ISP_SVC_Sensor_SetExposure+0x24>
34006652:	b169      	cbz	r1, 34006670 <ISP_SVC_Sensor_SetExposure+0x24>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
  }

  if (hIsp->appliHelpers.SetSensorExposure != NULL)
34006654:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  {
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
34006656:	6809      	ldr	r1, [r1, #0]
  if (hIsp->appliHelpers.SetSensorExposure != NULL)
34006658:	b923      	cbnz	r3, 34006664 <ISP_SVC_Sensor_SetExposure+0x18>
    }
  }

  Meta.exposure = pConfig->exposure;

  return ISP_OK;
3400665a:	2000      	movs	r0, #0
  Meta.exposure = pConfig->exposure;
3400665c:	6822      	ldr	r2, [r4, #0]
3400665e:	4b05      	ldr	r3, [pc, #20]	@ (34006674 <ISP_SVC_Sensor_SetExposure+0x28>)
34006660:	60da      	str	r2, [r3, #12]
}
34006662:	bd10      	pop	{r4, pc}
    if (hIsp->appliHelpers.SetSensorExposure(hIsp->cameraInstance, pConfig->exposure) != 0)
34006664:	6840      	ldr	r0, [r0, #4]
34006666:	4798      	blx	r3
34006668:	2800      	cmp	r0, #0
3400666a:	d0f6      	beq.n	3400665a <ISP_SVC_Sensor_SetExposure+0xe>
      return ISP_ERR_SENSOREXPOSURE;
3400666c:	2083      	movs	r0, #131	@ 0x83
3400666e:	e7f8      	b.n	34006662 <ISP_SVC_Sensor_SetExposure+0x16>
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
34006670:	2082      	movs	r0, #130	@ 0x82
34006672:	e7f6      	b.n	34006662 <ISP_SVC_Sensor_SetExposure+0x16>
34006674:	3410ddf4 	.word	0x3410ddf4

34006678 <ISP_SVC_Sensor_GetExposure>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the sensor exposure configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_Sensor_GetExposure(ISP_HandleTypeDef *hIsp, ISP_SensorExposureTypeDef *pConfig)
{
34006678:	b508      	push	{r3, lr}
  /* Check handle validity */
  if ((hIsp == NULL) || (pConfig == NULL))
3400667a:	b138      	cbz	r0, 3400668c <ISP_SVC_Sensor_GetExposure+0x14>
3400667c:	b131      	cbz	r1, 3400668c <ISP_SVC_Sensor_GetExposure+0x14>
  {
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
  }

  if (hIsp->appliHelpers.GetSensorExposure != NULL)
3400667e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
34006680:	b113      	cbz	r3, 34006688 <ISP_SVC_Sensor_GetExposure+0x10>
  {
    if (hIsp->appliHelpers.GetSensorExposure(hIsp->cameraInstance, (int32_t *)&pConfig->exposure) != 0)
34006682:	6840      	ldr	r0, [r0, #4]
34006684:	4798      	blx	r3
34006686:	b918      	cbnz	r0, 34006690 <ISP_SVC_Sensor_GetExposure+0x18>
    {
      return ISP_ERR_SENSOREXPOSURE;
    }
  }

  return ISP_OK;
34006688:	2000      	movs	r0, #0
}
3400668a:	bd08      	pop	{r3, pc}
    return ISP_ERR_SENSOREXPOSURE_EINVAL;
3400668c:	2082      	movs	r0, #130	@ 0x82
3400668e:	e7fc      	b.n	3400668a <ISP_SVC_Sensor_GetExposure+0x12>
      return ISP_ERR_SENSOREXPOSURE;
34006690:	2083      	movs	r0, #131	@ 0x83
34006692:	e7fa      	b.n	3400668a <ISP_SVC_Sensor_GetExposure+0x12>

34006694 <ISP_SVC_Misc_IsDCMIPPReady>:
  *         Check that the DCMIPP device is ready
  * @param  hIsp: ISP device handle
  * @retval ISP_OK if DCMIPP is running, ISP_FAIL otherwise
  */
ISP_StatusTypeDef ISP_SVC_Misc_IsDCMIPPReady(ISP_HandleTypeDef *hIsp)
{
34006694:	b508      	push	{r3, lr}
  /* Check handle validity */
  if (hIsp == NULL)
34006696:	b138      	cbz	r0, 340066a8 <ISP_SVC_Misc_IsDCMIPPReady+0x14>
  {
    return ISP_ERR_EINVAL;
  }

  if (HAL_DCMIPP_GetState(hIsp->hDcmipp) != HAL_DCMIPP_STATE_READY)
34006698:	6800      	ldr	r0, [r0, #0]
3400669a:	f00c fe75 	bl	34013388 <HAL_DCMIPP_GetState>
  {
    return ISP_ERR_DCMIPP_STATE;
  }

  return ISP_OK;
3400669e:	2802      	cmp	r0, #2
340066a0:	bf14      	ite	ne
340066a2:	208c      	movne	r0, #140	@ 0x8c
340066a4:	2000      	moveq	r0, #0
}
340066a6:	bd08      	pop	{r3, pc}
    return ISP_ERR_EINVAL;
340066a8:	2001      	movs	r0, #1
340066aa:	e7fc      	b.n	340066a6 <ISP_SVC_Misc_IsDCMIPPReady+0x12>

340066ac <ISP_SVC_Misc_IncMainFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncMainFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->MainPipe_FrameCount++;
340066ac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
340066ae:	3301      	adds	r3, #1
340066b0:	6403      	str	r3, [r0, #64]	@ 0x40
}
340066b2:	4770      	bx	lr

340066b4 <ISP_SVC_Misc_GetMainFrameId>:
  * @retval Id of the last frame output on the main pipe
  */
uint32_t ISP_SVC_Misc_GetMainFrameId(ISP_HandleTypeDef *hIsp)
{
  return hIsp->MainPipe_FrameCount;
}
340066b4:	6c00      	ldr	r0, [r0, #64]	@ 0x40
340066b6:	4770      	bx	lr

340066b8 <ISP_SVC_Misc_IncAncillaryFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncAncillaryFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->AncillaryPipe_FrameCount++;
340066b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
340066ba:	3301      	adds	r3, #1
340066bc:	6443      	str	r3, [r0, #68]	@ 0x44
}
340066be:	4770      	bx	lr

340066c0 <ISP_SVC_Misc_IncDumpFrameId>:
  * @param  hIsp: ISP device handle
  * @retval none
  */
void ISP_SVC_Misc_IncDumpFrameId(ISP_HandleTypeDef *hIsp)
{
  hIsp->DumpPipe_FrameCount++;
340066c0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
340066c2:	3301      	adds	r3, #1
340066c4:	6483      	str	r3, [r0, #72]	@ 0x48
}
340066c6:	4770      	bx	lr

340066c8 <ISP_SVC_Misc_SetWBRefMode>:
  */
ISP_StatusTypeDef ISP_SVC_Misc_SetWBRefMode(ISP_HandleTypeDef *hIsp, uint32_t RefColorTemp)
{
  (void)hIsp; /* unused */

  ISP_ManualWBRefColorTemp = RefColorTemp;
340066c8:	4b01      	ldr	r3, [pc, #4]	@ (340066d0 <ISP_SVC_Misc_SetWBRefMode+0x8>)

  return ISP_OK;
}
340066ca:	2000      	movs	r0, #0
  ISP_ManualWBRefColorTemp = RefColorTemp;
340066cc:	6019      	str	r1, [r3, #0]
}
340066ce:	4770      	bx	lr
340066d0:	3410e1cc 	.word	0x3410e1cc

340066d4 <ISP_SVC_Misc_IsGammaEnabled>:
  * @param  hIsp: ISP device handle
  * @param  Pipe: DCMIPP pipe line
  * @retval 1 if enabled 0 otherwise
  */
bool ISP_SVC_Misc_IsGammaEnabled(ISP_HandleTypeDef *hIsp, uint32_t Pipe)
{
340066d4:	b508      	push	{r3, lr}
  uint8_t ret;

  /* Check handle validity */
  if (hIsp == NULL)
340066d6:	b168      	cbz	r0, 340066f4 <ISP_SVC_Misc_IsGammaEnabled+0x20>
  {
    return ISP_ERR_EINVAL;
  }

  switch(Pipe)
340066d8:	2901      	cmp	r1, #1
340066da:	d006      	beq.n	340066ea <ISP_SVC_Misc_IsGammaEnabled+0x16>
340066dc:	2902      	cmp	r1, #2
340066de:	d004      	beq.n	340066ea <ISP_SVC_Misc_IsGammaEnabled+0x16>
340066e0:	2000      	movs	r0, #0
    break;
  default:
    ret = 0; /*  No gamma on pipe 0 */
  }

  return ret;
340066e2:	3800      	subs	r0, #0
340066e4:	bf18      	it	ne
340066e6:	2001      	movne	r0, #1
}
340066e8:	bd08      	pop	{r3, pc}
    ret = HAL_DCMIPP_PIPE_IsEnabledGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2);
340066ea:	6800      	ldr	r0, [r0, #0]
340066ec:	f00b fe1a 	bl	34012324 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>
340066f0:	b2c0      	uxtb	r0, r0
    break;
340066f2:	e7f6      	b.n	340066e2 <ISP_SVC_Misc_IsGammaEnabled+0xe>
    return ISP_ERR_EINVAL;
340066f4:	2001      	movs	r0, #1
340066f6:	e7f7      	b.n	340066e8 <ISP_SVC_Misc_IsGammaEnabled+0x14>

340066f8 <ISP_SVC_ISP_SetGamma>:
  * @param  hIsp: ISP device handle
  * @param  pConfig: Pointer to the ISP gamma configuration
  * @retval operation result
  */
ISP_StatusTypeDef ISP_SVC_ISP_SetGamma(ISP_HandleTypeDef *hIsp, ISP_GammaTypeDef *pConfig)
{
340066f8:	b538      	push	{r3, r4, r5, lr}
340066fa:	460d      	mov	r5, r1
  if ((hIsp == NULL) || (pConfig == NULL))
340066fc:	4604      	mov	r4, r0
340066fe:	b908      	cbnz	r0, 34006704 <ISP_SVC_ISP_SetGamma+0xc>
  {
    return ISP_ERR_DCMIPP_GAMMA;
34006700:	2095      	movs	r0, #149	@ 0x95
      return ISP_ERR_DCMIPP_GAMMA;
    }
  }

  return ISP_OK;
}
34006702:	bd38      	pop	{r3, r4, r5, pc}
  if ((hIsp == NULL) || (pConfig == NULL))
34006704:	2900      	cmp	r1, #0
34006706:	d0fb      	beq.n	34006700 <ISP_SVC_ISP_SetGamma+0x8>
  if (pConfig->enablePipe1 == 0)
34006708:	780b      	ldrb	r3, [r1, #0]
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
3400670a:	6800      	ldr	r0, [r0, #0]
3400670c:	2101      	movs	r1, #1
  if (pConfig->enablePipe1 == 0)
3400670e:	b953      	cbnz	r3, 34006726 <ISP_SVC_ISP_SetGamma+0x2e>
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34006710:	f00b fde6 	bl	340122e0 <HAL_DCMIPP_PIPE_DisableGammaConversion>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34006714:	2800      	cmp	r0, #0
34006716:	d1f3      	bne.n	34006700 <ISP_SVC_ISP_SetGamma+0x8>
  if (pConfig->enablePipe2 == 0)
34006718:	786b      	ldrb	r3, [r5, #1]
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3400671a:	6820      	ldr	r0, [r4, #0]
  if (pConfig->enablePipe2 == 0)
3400671c:	b133      	cbz	r3, 3400672c <ISP_SVC_ISP_SetGamma+0x34>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3400671e:	2102      	movs	r1, #2
34006720:	f00b fdbc 	bl	3401229c <HAL_DCMIPP_PIPE_EnableGammaConversion>
34006724:	e005      	b.n	34006732 <ISP_SVC_ISP_SetGamma+0x3a>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE1) != HAL_OK)
34006726:	f00b fdb9 	bl	3401229c <HAL_DCMIPP_PIPE_EnableGammaConversion>
3400672a:	e7f3      	b.n	34006714 <ISP_SVC_ISP_SetGamma+0x1c>
    if (HAL_DCMIPP_PIPE_DisableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
3400672c:	2102      	movs	r1, #2
3400672e:	f00b fdd7 	bl	340122e0 <HAL_DCMIPP_PIPE_DisableGammaConversion>
    if (HAL_DCMIPP_PIPE_EnableGammaConversion(hIsp->hDcmipp, DCMIPP_PIPE2) != HAL_OK)
34006732:	2800      	cmp	r0, #0
34006734:	d1e4      	bne.n	34006700 <ISP_SVC_ISP_SetGamma+0x8>
  return ISP_OK;
34006736:	2000      	movs	r0, #0
34006738:	e7e3      	b.n	34006702 <ISP_SVC_ISP_SetGamma+0xa>
	...

3400673c <ISP_SVC_IQParam_Init>:
  *         Initialize the IQ parameters cache with values from non volatile memory
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_IQParam_Init(ISP_HandleTypeDef *hIsp, const ISP_IQParamTypeDef *ISP_IQParamCacheInit)
{
3400673c:	b508      	push	{r3, lr}
  (void)hIsp; /* unused */

  ISP_IQParamCache = *ISP_IQParamCacheInit;
3400673e:	f44f 7216 	mov.w	r2, #600	@ 0x258
34006742:	4802      	ldr	r0, [pc, #8]	@ (3400674c <ISP_SVC_IQParam_Init+0x10>)
34006744:	f01a f80f 	bl	34020766 <memcpy>
  return ISP_OK;
}
34006748:	2000      	movs	r0, #0
3400674a:	bd08      	pop	{r3, pc}
3400674c:	3410df74 	.word	0x3410df74

34006750 <ISP_SVC_IQParam_Get>:
ISP_IQParamTypeDef *ISP_SVC_IQParam_Get(ISP_HandleTypeDef *hIsp)
{
  (void)hIsp; /* unused */

  return &ISP_IQParamCache;
}
34006750:	4800      	ldr	r0, [pc, #0]	@ (34006754 <ISP_SVC_IQParam_Get+0x4>)
34006752:	4770      	bx	lr
34006754:	3410df74 	.word	0x3410df74

34006758 <ISP_SVC_Stats_Init>:
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Init(ISP_HandleTypeDef *hIsp)
{
  memset(&ISP_SVC_StatEngine, 0, sizeof(ISP_SVC_StatEngineTypeDef));
34006758:	f44f 72b0 	mov.w	r2, #352	@ 0x160
3400675c:	2100      	movs	r1, #0
3400675e:	4801      	ldr	r0, [pc, #4]	@ (34006764 <ISP_SVC_Stats_Init+0xc>)
34006760:	f019 bd7a 	b.w	34020258 <memset>
34006764:	3410de14 	.word	0x3410de14

34006768 <ISP_SVC_Stats_Gather>:
  *         Gather statistics
  * @param  hIsp: ISP device handle
  * @retval None
  */
void ISP_SVC_Stats_Gather(ISP_HandleTypeDef *hIsp)
{
34006768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ISP_IQParamTypeDef *IQParamConfig;
  ISP_SVC_StatStateTypeDef *ongoing;
  uint32_t i, avgR, avgG, avgB, frameId;

  /* Check handle validity */
  if (hIsp == NULL)
3400676c:	4605      	mov	r5, r0
{
3400676e:	b08d      	sub	sp, #52	@ 0x34
  if (hIsp == NULL)
34006770:	b928      	cbnz	r0, 3400677e <ISP_SVC_Stats_Gather+0x16>
  {
    printf("ERROR: ISP handle is NULL\r\n");
34006772:	48aa      	ldr	r0, [pc, #680]	@ (34006a1c <ISP_SVC_Stats_Gather+0x2b4>)

  /* Save the two last processed stages and go to next stage */
  stagePrevious2 = stagePrevious1;
  stagePrevious1 = ISP_SVC_StatEngine.stage;
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
}
34006774:	b00d      	add	sp, #52	@ 0x34
34006776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printf("ERROR: ISP handle is NULL\r\n");
3400677a:	f019 bc37 	b.w	3401ffec <puts>
  if (hIsp->hDcmipp == NULL)
3400677e:	6800      	ldr	r0, [r0, #0]
34006780:	2800      	cmp	r0, #0
34006782:	f000 80b4 	beq.w	340068ee <ISP_SVC_Stats_Gather+0x186>
  switch(stagePrevious2)
34006786:	f8df 92f0 	ldr.w	r9, [pc, #752]	@ 34006a78 <ISP_SVC_Stats_Gather+0x310>
3400678a:	4ca5      	ldr	r4, [pc, #660]	@ (34006a20 <ISP_SVC_Stats_Gather+0x2b8>)
3400678c:	f899 3000 	ldrb.w	r3, [r9]
34006790:	2b09      	cmp	r3, #9
34006792:	d836      	bhi.n	34006802 <ISP_SVC_Stats_Gather+0x9a>
34006794:	e8df f003 	tbb	[pc, r3]
34006798:	46443f05 	.word	0x46443f05
3400679c:	89874a48 	.word	0x89874a48
340067a0:	8d8b      	.short	0x8d8b
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
340067a2:	2201      	movs	r2, #1
340067a4:	466b      	mov	r3, sp
340067a6:	4611      	mov	r1, r2
340067a8:	f00c fcae 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
340067ac:	2202      	movs	r2, #2
340067ae:	2101      	movs	r1, #1
340067b0:	ab01      	add	r3, sp, #4
340067b2:	6828      	ldr	r0, [r5, #0]
340067b4:	f00c fca8 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
340067b8:	2203      	movs	r2, #3
340067ba:	2101      	movs	r1, #1
340067bc:	ab02      	add	r3, sp, #8
340067be:	6828      	ldr	r0, [r5, #0]
340067c0:	f00c fca2 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
340067c4:	2101      	movs	r1, #1
340067c6:	2200      	movs	r2, #0
340067c8:	9b00      	ldr	r3, [sp, #0]
340067ca:	4628      	mov	r0, r5
340067cc:	f7ff fb14 	bl	34005df8 <GetAvgStats>
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
340067d0:	460a      	mov	r2, r1
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
340067d2:	4606      	mov	r6, r0
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
340067d4:	9b01      	ldr	r3, [sp, #4]
    ongoing->up.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_RED, avgR);
340067d6:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
340067da:	4628      	mov	r0, r5
340067dc:	f7ff fb0c 	bl	34005df8 <GetAvgStats>
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
340067e0:	2202      	movs	r2, #2
    ongoing->up.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_GREEN, avgG);
340067e2:	4607      	mov	r7, r0
340067e4:	f884 007d 	strb.w	r0, [r4, #125]	@ 0x7d
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
340067e8:	9b02      	ldr	r3, [sp, #8]
340067ea:	4628      	mov	r0, r5
340067ec:	f7ff fb04 	bl	34005df8 <GetAvgStats>
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
340067f0:	4639      	mov	r1, r7
    ongoing->up.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_UP, ISP_BLUE, avgB);
340067f2:	4602      	mov	r2, r0
340067f4:	f884 007e 	strb.w	r0, [r4, #126]	@ 0x7e
    ongoing->up.averageL = LuminanceFromRGB(ongoing->up.averageR, ongoing->up.averageG, ongoing->up.averageB);
340067f8:	4630      	mov	r0, r6
340067fa:	f7ff fb41 	bl	34005e80 <LuminanceFromRGB>
340067fe:	f884 007f 	strb.w	r0, [r4, #127]	@ 0x7f
  switch(ISP_SVC_StatEngine.stage)
34006802:	7823      	ldrb	r3, [r4, #0]
34006804:	2b09      	cmp	r3, #9
34006806:	d863      	bhi.n	340068d0 <ISP_SVC_Stats_Gather+0x168>
34006808:	e8df f003 	tbb	[pc, r3]
3400680c:	86847f74 	.word	0x86847f74
34006810:	8c8a5588 	.word	0x8c8a5588
34006814:	908e      	.short	0x908e
    ReadStatHistogram(hIsp, &ongoing->up.histogram[0]);
34006816:	4983      	ldr	r1, [pc, #524]	@ (34006a24 <ISP_SVC_Stats_Gather+0x2bc>)
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
34006818:	4628      	mov	r0, r5
3400681a:	f7ff fb1e 	bl	34005e5a <ReadStatHistogram>
    break;
3400681e:	e7f0      	b.n	34006802 <ISP_SVC_Stats_Gather+0x9a>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[3]);
34006820:	4981      	ldr	r1, [pc, #516]	@ (34006a28 <ISP_SVC_Stats_Gather+0x2c0>)
34006822:	e7f9      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[6]);
34006824:	4981      	ldr	r1, [pc, #516]	@ (34006a2c <ISP_SVC_Stats_Gather+0x2c4>)
34006826:	e7f7      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->up.histogram[9]);
34006828:	4981      	ldr	r1, [pc, #516]	@ (34006a30 <ISP_SVC_Stats_Gather+0x2c8>)
3400682a:	e7f5      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE1, &avgR);
3400682c:	2201      	movs	r2, #1
3400682e:	466b      	mov	r3, sp
34006830:	4611      	mov	r1, r2
34006832:	f00c fc69 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE2, &avgG);
34006836:	2202      	movs	r2, #2
34006838:	2101      	movs	r1, #1
3400683a:	ab01      	add	r3, sp, #4
3400683c:	6828      	ldr	r0, [r5, #0]
3400683e:	f00c fc63 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter(hIsp->hDcmipp, DCMIPP_PIPE1, DCMIPP_STATEXT_MODULE3, &avgB);
34006842:	2203      	movs	r2, #3
34006844:	2101      	movs	r1, #1
34006846:	ab02      	add	r3, sp, #8
34006848:	6828      	ldr	r0, [r5, #0]
3400684a:	f00c fc5d 	bl	34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>
    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
3400684e:	2102      	movs	r1, #2
34006850:	2200      	movs	r2, #0
34006852:	9b00      	ldr	r3, [sp, #0]
34006854:	4628      	mov	r0, r5
34006856:	f7ff facf 	bl	34005df8 <GetAvgStats>
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
3400685a:	2201      	movs	r2, #1
3400685c:	9b01      	ldr	r3, [sp, #4]
    ongoing->down.averageR = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_RED, avgR);
3400685e:	f884 00b0 	strb.w	r0, [r4, #176]	@ 0xb0
34006862:	4607      	mov	r7, r0
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
34006864:	4628      	mov	r0, r5
34006866:	f7ff fac7 	bl	34005df8 <GetAvgStats>
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
3400686a:	460a      	mov	r2, r1
3400686c:	9b02      	ldr	r3, [sp, #8]
    ongoing->down.averageG = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_GREEN, avgG);
3400686e:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1
34006872:	4606      	mov	r6, r0
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
34006874:	4628      	mov	r0, r5
34006876:	f7ff fabf 	bl	34005df8 <GetAvgStats>
3400687a:	f884 00b2 	strb.w	r0, [r4, #178]	@ 0xb2
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
3400687e:	f895 306c 	ldrb.w	r3, [r5, #108]	@ 0x6c
    ongoing->down.averageB = GetAvgStats(hIsp, ISP_STAT_LOC_DOWN, ISP_BLUE, avgB);
34006882:	4602      	mov	r2, r0
    if ((hIsp->sensorInfo.bayer_pattern == ISP_DEMOS_TYPE_MONO) || (!IQParamConfig->demosaicing.enable))
34006884:	2b04      	cmp	r3, #4
34006886:	d002      	beq.n	3400688e <ISP_SVC_Stats_Gather+0x126>
34006888:	4b6a      	ldr	r3, [pc, #424]	@ (34006a34 <ISP_SVC_Stats_Gather+0x2cc>)
3400688a:	7b1b      	ldrb	r3, [r3, #12]
3400688c:	b923      	cbnz	r3, 34006898 <ISP_SVC_Stats_Gather+0x130>
  return r + g + b;
3400688e:	443e      	add	r6, r7
34006890:	4432      	add	r2, r6
      ongoing->down.averageL = LuminanceFromRGBMono(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
34006892:	f884 20b3 	strb.w	r2, [r4, #179]	@ 0xb3
34006896:	e7b4      	b.n	34006802 <ISP_SVC_Stats_Gather+0x9a>
      ongoing->down.averageL = LuminanceFromRGB(ongoing->down.averageR, ongoing->down.averageG, ongoing->down.averageB);
34006898:	4631      	mov	r1, r6
3400689a:	4638      	mov	r0, r7
3400689c:	f7ff faf0 	bl	34005e80 <LuminanceFromRGB>
340068a0:	f884 00b3 	strb.w	r0, [r4, #179]	@ 0xb3
340068a4:	e7ad      	b.n	34006802 <ISP_SVC_Stats_Gather+0x9a>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[0]);
340068a6:	4964      	ldr	r1, [pc, #400]	@ (34006a38 <ISP_SVC_Stats_Gather+0x2d0>)
340068a8:	e7b6      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[3]);
340068aa:	4964      	ldr	r1, [pc, #400]	@ (34006a3c <ISP_SVC_Stats_Gather+0x2d4>)
340068ac:	e7b4      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[6]);
340068ae:	4964      	ldr	r1, [pc, #400]	@ (34006a40 <ISP_SVC_Stats_Gather+0x2d8>)
340068b0:	e7b2      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
    ReadStatHistogram(hIsp, &ongoing->down.histogram[9]);
340068b2:	4964      	ldr	r1, [pc, #400]	@ (34006a44 <ISP_SVC_Stats_Gather+0x2dc>)
340068b4:	e7b0      	b.n	34006818 <ISP_SVC_Stats_Gather+0xb0>
      statConf[i].Source = avgRGBDown[i];
340068b6:	2300      	movs	r3, #0
340068b8:	2240      	movs	r2, #64	@ 0x40
340068ba:	e9cd 3203 	strd	r3, r2, [sp, #12]
340068be:	2250      	movs	r2, #80	@ 0x50
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
340068c0:	e9cd 2307 	strd	r2, r3, [sp, #28]
      statConf[i].Source = avgRGBDown[i];
340068c4:	2260      	movs	r2, #96	@ 0x60
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
340068c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
340068ca:	9309      	str	r3, [sp, #36]	@ 0x24
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
340068cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
{
340068d0:	f04f 0801 	mov.w	r8, #1
340068d4:	af03      	add	r7, sp, #12
    if (HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig(hIsp->hDcmipp, DCMIPP_PIPE1, i, &statConf[i - DCMIPP_STATEXT_MODULE1]) != HAL_OK)
340068d6:	fa5f f688 	uxtb.w	r6, r8
340068da:	463b      	mov	r3, r7
340068dc:	4632      	mov	r2, r6
340068de:	2101      	movs	r1, #1
340068e0:	6828      	ldr	r0, [r5, #0]
340068e2:	f00c f8cb 	bl	34012a7c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>
340068e6:	b318      	cbz	r0, 34006930 <ISP_SVC_Stats_Gather+0x1c8>
      printf("ERROR: can't set Statistic Extraction config\r\n");
340068e8:	4857      	ldr	r0, [pc, #348]	@ (34006a48 <ISP_SVC_Stats_Gather+0x2e0>)
      printf("ERROR: can't enable Statistic Extraction config\r\n");
340068ea:	f019 fb7f 	bl	3401ffec <puts>
}
340068ee:	b00d      	add	sp, #52	@ 0x34
340068f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
340068f4:	2300      	movs	r3, #0
      statConf[i].Source = avgRGBUp[i];
340068f6:	2210      	movs	r2, #16
340068f8:	e9cd 3303 	strd	r3, r3, [sp, #12]
      statConf[i].Bins = DCMIPP_STAT_EXT_AVER_MODE_ALL_PIXELS;
340068fc:	e9cd 2307 	strd	r2, r3, [sp, #28]
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34006900:	e9cd 3305 	strd	r3, r3, [sp, #20]
      statConf[i].Source = avgRGBUp[i];
34006904:	2220      	movs	r2, #32
      statConf[i].Mode = DCMIPP_STAT_EXT_MODE_AVERAGE;
34006906:	9309      	str	r3, [sp, #36]	@ 0x24
      statConf[i].Source = avgRGBUp[i];
34006908:	e7e0      	b.n	340068cc <ISP_SVC_Stats_Gather+0x164>
    SetStatConfig(statConf, &statConfUpBins_0_2);
3400690a:	4950      	ldr	r1, [pc, #320]	@ (34006a4c <ISP_SVC_Stats_Gather+0x2e4>)
    SetStatConfig(statConf, &statConfDownBins_9_11);
3400690c:	a803      	add	r0, sp, #12
3400690e:	f7ff fa95 	bl	34005e3c <SetStatConfig>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34006912:	e7dd      	b.n	340068d0 <ISP_SVC_Stats_Gather+0x168>
    SetStatConfig(statConf, &statConfUpBins_3_5);
34006914:	494e      	ldr	r1, [pc, #312]	@ (34006a50 <ISP_SVC_Stats_Gather+0x2e8>)
34006916:	e7f9      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfUpBins_6_8);
34006918:	494e      	ldr	r1, [pc, #312]	@ (34006a54 <ISP_SVC_Stats_Gather+0x2ec>)
3400691a:	e7f7      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfUpBins_9_11);
3400691c:	494e      	ldr	r1, [pc, #312]	@ (34006a58 <ISP_SVC_Stats_Gather+0x2f0>)
3400691e:	e7f5      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_0_2);
34006920:	494e      	ldr	r1, [pc, #312]	@ (34006a5c <ISP_SVC_Stats_Gather+0x2f4>)
34006922:	e7f3      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_3_5);
34006924:	494e      	ldr	r1, [pc, #312]	@ (34006a60 <ISP_SVC_Stats_Gather+0x2f8>)
34006926:	e7f1      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_6_8);
34006928:	494e      	ldr	r1, [pc, #312]	@ (34006a64 <ISP_SVC_Stats_Gather+0x2fc>)
3400692a:	e7ef      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    SetStatConfig(statConf, &statConfDownBins_9_11);
3400692c:	494e      	ldr	r1, [pc, #312]	@ (34006a68 <ISP_SVC_Stats_Gather+0x300>)
3400692e:	e7ed      	b.n	3400690c <ISP_SVC_Stats_Gather+0x1a4>
    if (HAL_DCMIPP_PIPE_EnableISPStatisticExtraction(hIsp->hDcmipp, DCMIPP_PIPE1, i) != HAL_OK)
34006930:	4632      	mov	r2, r6
34006932:	2101      	movs	r1, #1
34006934:	6828      	ldr	r0, [r5, #0]
34006936:	f00c f959 	bl	34012bec <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>
3400693a:	4606      	mov	r6, r0
3400693c:	b108      	cbz	r0, 34006942 <ISP_SVC_Stats_Gather+0x1da>
      printf("ERROR: can't enable Statistic Extraction config\r\n");
3400693e:	484b      	ldr	r0, [pc, #300]	@ (34006a6c <ISP_SVC_Stats_Gather+0x304>)
34006940:	e7d3      	b.n	340068ea <ISP_SVC_Stats_Gather+0x182>
  for (i = DCMIPP_STATEXT_MODULE1; i <= DCMIPP_STATEXT_MODULE3; i++)
34006942:	f108 0801 	add.w	r8, r8, #1
34006946:	f1b8 0f04 	cmp.w	r8, #4
3400694a:	f107 070c 	add.w	r7, r7, #12
3400694e:	d1c2      	bne.n	340068d6 <ISP_SVC_Stats_Gather+0x16e>
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
34006950:	f894 8158 	ldrb.w	r8, [r4, #344]	@ 0x158
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
34006954:	f899 b000 	ldrb.w	fp, [r9]
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG) ||
34006958:	f018 0f05 	tst.w	r8, #5
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
3400695c:	bf0c      	ite	eq
3400695e:	2301      	moveq	r3, #1
34006960:	2300      	movne	r3, #0
  return hIsp->MainPipe_FrameCount;
34006962:	f8d5 a040 	ldr.w	sl, [r5, #64]	@ 0x40
    if ((ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG) ||
34006966:	f894 7159 	ldrb.w	r7, [r4, #345]	@ 0x159
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_UP))
3400696a:	455b      	cmp	r3, fp
    ongoing->upFrameIdStart = frameId;
3400696c:	bf08      	it	eq
3400696e:	f8c4 a0e4 	streq.w	sl, [r4, #228]	@ 0xe4
      stage = ISP_STAT_CFG_DOWN_AVG;
34006972:	f017 0f05 	tst.w	r7, #5
34006976:	bf0c      	ite	eq
34006978:	2306      	moveq	r3, #6
3400697a:	2305      	movne	r3, #5
  if (stagePrevious2 == GetStatCycleStart(ISP_STAT_LOC_DOWN))
3400697c:	459b      	cmp	fp, r3
3400697e:	d17d      	bne.n	34006a7c <ISP_SVC_Stats_Gather+0x314>
    ongoing->downFrameIdStart = frameId;
34006980:	f8c4 a0ec 	str.w	sl, [r4, #236]	@ 0xec
      stage = ISP_STAT_CFG_DOWN_BINS_9_11;
34006984:	f017 0f06 	tst.w	r7, #6
34006988:	bf0c      	ite	eq
3400698a:	2305      	moveq	r3, #5
3400698c:	2309      	movne	r3, #9
  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_DOWN)) && (ongoing->downFrameIdStart != 0))
3400698e:	459b      	cmp	fp, r3
34006990:	d11e      	bne.n	340069d0 <ISP_SVC_Stats_Gather+0x268>
34006992:	f8d4 e0ec 	ldr.w	lr, [r4, #236]	@ 0xec
34006996:	f1be 0f00 	cmp.w	lr, #0
3400699a:	d019      	beq.n	340069d0 <ISP_SVC_Stats_Gather+0x268>
    ISP_SVC_StatEngine.last.down = ongoing->down;
3400699c:	4d34      	ldr	r5, [pc, #208]	@ (34006a70 <ISP_SVC_Stats_Gather+0x308>)
    ISP_SVC_StatEngine.last.downFrameIdStart = ongoing->downFrameIdStart;
3400699e:	e9c4 ea1d 	strd	lr, sl, [r4, #116]	@ 0x74
    ISP_SVC_StatEngine.last.down = ongoing->down;
340069a2:	f105 0c78 	add.w	ip, r5, #120	@ 0x78
340069a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340069aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340069ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340069b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340069b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
340069b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340069b8:	4628      	mov	r0, r5
340069ba:	f8dc 3000 	ldr.w	r3, [ip]
    memset(&ongoing->down, 0, sizeof(ongoing->down));
340069be:	2234      	movs	r2, #52	@ 0x34
    ISP_SVC_StatEngine.last.down = ongoing->down;
340069c0:	f840 3b48 	str.w	r3, [r0], #72
    memset(&ongoing->down, 0, sizeof(ongoing->down));
340069c4:	2100      	movs	r1, #0
340069c6:	f019 fc47 	bl	34020258 <memset>
    ongoing->downFrameIdStart = 0;
340069ca:	2300      	movs	r3, #0
    ongoing->downFrameIdEnd = 0;
340069cc:	e9c4 333b 	strd	r3, r3, [r4, #236]	@ 0xec
  if (((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
340069d0:	ea48 0307 	orr.w	r3, r8, r7
340069d4:	075a      	lsls	r2, r3, #29
340069d6:	d50b      	bpl.n	340069f0 <ISP_SVC_Stats_Gather+0x288>
       (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP)) &&
340069d8:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340069dc:	4553      	cmp	r3, sl
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340069de:	bf3f      	itttt	cc
340069e0:	f028 0804 	biccc.w	r8, r8, #4
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340069e4:	f027 0704 	biccc.w	r7, r7, #4
    ISP_SVC_StatEngine.upRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340069e8:	f884 8158 	strbcc.w	r8, [r4, #344]	@ 0x158
    ISP_SVC_StatEngine.downRequest &= ~ISP_STAT_TYPE_ALL_TMP;
340069ec:	f884 7159 	strbcc.w	r7, [r4, #345]	@ 0x159
  stagePrevious2 = stagePrevious1;
340069f0:	4b20      	ldr	r3, [pc, #128]	@ (34006a74 <ISP_SVC_Stats_Gather+0x30c>)
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
340069f2:	f894 1158 	ldrb.w	r1, [r4, #344]	@ 0x158
  stagePrevious2 = stagePrevious1;
340069f6:	781a      	ldrb	r2, [r3, #0]
340069f8:	f889 2000 	strb.w	r2, [r9]
  stagePrevious1 = ISP_SVC_StatEngine.stage;
340069fc:	7822      	ldrb	r2, [r4, #0]
340069fe:	701a      	strb	r2, [r3, #0]
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006a00:	074b      	lsls	r3, r1, #29
34006a02:	d403      	bmi.n	34006a0c <ISP_SVC_Stats_Gather+0x2a4>
      (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_ALL_TMP))
34006a04:	f894 3159 	ldrb.w	r3, [r4, #345]	@ 0x159
  if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_ALL_TMP) ||
34006a08:	075f      	lsls	r7, r3, #29
34006a0a:	d561      	bpl.n	34006ad0 <ISP_SVC_Stats_Gather+0x368>
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
34006a0c:	1c53      	adds	r3, r2, #1
34006a0e:	b2db      	uxtb	r3, r3
34006a10:	2a09      	cmp	r2, #9
34006a12:	bf38      	it	cc
34006a14:	461e      	movcc	r6, r3
  ISP_SVC_StatEngine.stage = GetNextStatStage(ISP_SVC_StatEngine.stage);
34006a16:	7026      	strb	r6, [r4, #0]
34006a18:	e769      	b.n	340068ee <ISP_SVC_Stats_Gather+0x186>
34006a1a:	bf00      	nop
34006a1c:	3402771a 	.word	0x3402771a
34006a20:	3410de14 	.word	0x3410de14
34006a24:	3410de94 	.word	0x3410de94
34006a28:	3410dea0 	.word	0x3410dea0
34006a2c:	3410deac 	.word	0x3410deac
34006a30:	3410deb8 	.word	0x3410deb8
34006a34:	3410df74 	.word	0x3410df74
34006a38:	3410dec8 	.word	0x3410dec8
34006a3c:	3410ded4 	.word	0x3410ded4
34006a40:	3410dee0 	.word	0x3410dee0
34006a44:	3410deec 	.word	0x3410deec
34006a48:	34027735 	.word	0x34027735
34006a4c:	3402d74c 	.word	0x3402d74c
34006a50:	3402d740 	.word	0x3402d740
34006a54:	3402d734 	.word	0x3402d734
34006a58:	3402d728 	.word	0x3402d728
34006a5c:	3402d71c 	.word	0x3402d71c
34006a60:	3402d710 	.word	0x3402d710
34006a64:	3402d704 	.word	0x3402d704
34006a68:	3402d6f8 	.word	0x3402d6f8
34006a6c:	34027763 	.word	0x34027763
34006a70:	3410de4c 	.word	0x3410de4c
34006a74:	34108e58 	.word	0x34108e58
34006a78:	34108e59 	.word	0x34108e59
    if ((ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS) ||
34006a7c:	f018 0f06 	tst.w	r8, #6
34006a80:	bf14      	ite	ne
34006a82:	2301      	movne	r3, #1
34006a84:	2300      	moveq	r3, #0
  if ((stagePrevious2 == GetStatCycleEnd(ISP_STAT_LOC_UP)) && (ongoing->upFrameIdStart != 0))
34006a86:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
34006a8a:	f47f af7b 	bne.w	34006984 <ISP_SVC_Stats_Gather+0x21c>
34006a8e:	f8d4 e0e4 	ldr.w	lr, [r4, #228]	@ 0xe4
34006a92:	f1be 0f00 	cmp.w	lr, #0
34006a96:	f43f af75 	beq.w	34006984 <ISP_SVC_Stats_Gather+0x21c>
    ISP_SVC_StatEngine.last.up = ongoing->up;
34006a9a:	4d2f      	ldr	r5, [pc, #188]	@ (34006b58 <ISP_SVC_Stats_Gather+0x3f0>)
    ISP_SVC_StatEngine.last.upFrameIdStart = ongoing->upFrameIdStart;
34006a9c:	e9c4 ea1b 	strd	lr, sl, [r4, #108]	@ 0x6c
    ISP_SVC_StatEngine.last.up = ongoing->up;
34006aa0:	f105 0c78 	add.w	ip, r5, #120	@ 0x78
34006aa4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34006aaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34006ab0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
34006ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34006ab6:	4628      	mov	r0, r5
34006ab8:	f8dc 3000 	ldr.w	r3, [ip]
    memset(&ongoing->up, 0, sizeof(ongoing->up));
34006abc:	2234      	movs	r2, #52	@ 0x34
    ISP_SVC_StatEngine.last.up = ongoing->up;
34006abe:	f840 3b48 	str.w	r3, [r0], #72
    memset(&ongoing->up, 0, sizeof(ongoing->up));
34006ac2:	2100      	movs	r1, #0
34006ac4:	f019 fbc8 	bl	34020258 <memset>
    ongoing->upFrameIdStart = 0;
34006ac8:	2300      	movs	r3, #0
    ongoing->upFrameIdEnd = 0;
34006aca:	e9c4 3339 	strd	r3, r3, [r4, #228]	@ 0xe4
34006ace:	e759      	b.n	34006984 <ISP_SVC_Stats_Gather+0x21c>
  switch (current)
34006ad0:	2a09      	cmp	r2, #9
34006ad2:	d836      	bhi.n	34006b42 <ISP_SVC_Stats_Gather+0x3da>
34006ad4:	e8df f002 	tbb	[pc, r2]
34006ad8:	35353505 	.word	0x35353505
34006adc:	35351d11 	.word	0x35351d11
34006ae0:	2a35      	.short	0x2a35
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34006ae2:	078d      	lsls	r5, r1, #30
34006ae4:	d434      	bmi.n	34006b50 <ISP_SVC_Stats_Gather+0x3e8>
    else if (ISP_SVC_StatEngine.downRequest &  ISP_STAT_TYPE_AVG)
34006ae6:	07d8      	lsls	r0, r3, #31
34006ae8:	d434      	bmi.n	34006b54 <ISP_SVC_Stats_Gather+0x3ec>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34006aea:	f013 0602 	ands.w	r6, r3, #2
34006aee:	d12b      	bne.n	34006b48 <ISP_SVC_Stats_Gather+0x3e0>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006af0:	f011 0f01 	tst.w	r1, #1
34006af4:	bf08      	it	eq
34006af6:	2609      	moveq	r6, #9
34006af8:	e78d      	b.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
34006afa:	07da      	lsls	r2, r3, #31
34006afc:	d42a      	bmi.n	34006b54 <ISP_SVC_Stats_Gather+0x3ec>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34006afe:	f013 0602 	ands.w	r6, r3, #2
34006b02:	d121      	bne.n	34006b48 <ISP_SVC_Stats_Gather+0x3e0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006b04:	07cb      	lsls	r3, r1, #31
34006b06:	d486      	bmi.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006b08:	f011 0f02 	tst.w	r1, #2
34006b0c:	bf18      	it	ne
34006b0e:	2601      	movne	r6, #1
34006b10:	e7f0      	b.n	34006af4 <ISP_SVC_Stats_Gather+0x38c>
    if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_BINS)
34006b12:	f013 0602 	ands.w	r6, r3, #2
34006b16:	d117      	bne.n	34006b48 <ISP_SVC_Stats_Gather+0x3e0>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006b18:	07cf      	lsls	r7, r1, #31
34006b1a:	f53f af7c 	bmi.w	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34006b1e:	078d      	lsls	r5, r1, #30
34006b20:	d416      	bmi.n	34006b50 <ISP_SVC_Stats_Gather+0x3e8>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006b22:	f013 0f01 	tst.w	r3, #1
34006b26:	bf18      	it	ne
34006b28:	4616      	movne	r6, r2
34006b2a:	e7e3      	b.n	34006af4 <ISP_SVC_Stats_Gather+0x38c>
    if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_AVG)
34006b2c:	07c8      	lsls	r0, r1, #31
34006b2e:	d40d      	bmi.n	34006b4c <ISP_SVC_Stats_Gather+0x3e4>
    else if (ISP_SVC_StatEngine.upRequest & ISP_STAT_TYPE_BINS)
34006b30:	0789      	lsls	r1, r1, #30
34006b32:	d40d      	bmi.n	34006b50 <ISP_SVC_Stats_Gather+0x3e8>
    else if (ISP_SVC_StatEngine.downRequest & ISP_STAT_TYPE_AVG)
34006b34:	07da      	lsls	r2, r3, #31
34006b36:	d40d      	bmi.n	34006b54 <ISP_SVC_Stats_Gather+0x3ec>
  ISP_SVC_StatEngineStage next = ISP_STAT_CFG_LAST;
34006b38:	f013 0f02 	tst.w	r3, #2
34006b3c:	bf18      	it	ne
34006b3e:	2606      	movne	r6, #6
34006b40:	e7d8      	b.n	34006af4 <ISP_SVC_Stats_Gather+0x38c>
    next = (ISP_SVC_StatEngineStage) (current + 1);
34006b42:	3201      	adds	r2, #1
34006b44:	b2d6      	uxtb	r6, r2
    break;
34006b46:	e766      	b.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
      next = ISP_STAT_CFG_DOWN_BINS_0_2;
34006b48:	2606      	movs	r6, #6
34006b4a:	e764      	b.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
    next = (ISP_SVC_StatEngineStage) ((current < ISP_STAT_CFG_LAST) ? current + 1 : ISP_STAT_CFG_UP_AVG);
34006b4c:	2600      	movs	r6, #0
34006b4e:	e762      	b.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
      next = ISP_STAT_CFG_UP_BINS_0_2;
34006b50:	2601      	movs	r6, #1
34006b52:	e760      	b.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
      next = ISP_STAT_CFG_DOWN_AVG;
34006b54:	2605      	movs	r6, #5
34006b56:	e75e      	b.n	34006a16 <ISP_SVC_Stats_Gather+0x2ae>
34006b58:	3410de18 	.word	0x3410de18

34006b5c <ISP_SVC_Stats_ProcessCallbacks>:
  *         If the conditions are met, call the client registered callbacks
  * @param  hIsp: ISP device handle
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_ProcessCallbacks(ISP_HandleTypeDef *hIsp)
{
34006b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  (void)hIsp; /* unused */
  ISP_SVC_StatStateTypeDef *pLastStat;
  ISP_SVC_StatRegisteredClient *client;
  ISP_StatusTypeDef retcb, ret = ISP_OK;
34006b60:	2500      	movs	r5, #0
34006b62:	4c1c      	ldr	r4, [pc, #112]	@ (34006bd4 <ISP_SVC_Stats_ProcessCallbacks+0x78>)
{
34006b64:	2705      	movs	r7, #5
34006b66:	4626      	mov	r6, r4
      {
        ret = retcb;
      }

      /* Remove the client from the registered list */
      client->callback = NULL;
34006b68:	46a9      	mov	r9, r5
      *(client->pStats) = *pLastStat;
34006b6a:	f104 0804 	add.w	r8, r4, #4
    if (client->callback == NULL)
34006b6e:	f8d4 a0f4 	ldr.w	sl, [r4, #244]	@ 0xf4
34006b72:	f1ba 0f00 	cmp.w	sl, #0
34006b76:	d016      	beq.n	34006ba6 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
34006b78:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
34006b7c:	2b02      	cmp	r3, #2
34006b7e:	d119      	bne.n	34006bb4 <ISP_SVC_Stats_ProcessCallbacks+0x58>
34006b80:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
34006b84:	6f73      	ldr	r3, [r6, #116]	@ 0x74
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
34006b86:	429a      	cmp	r2, r3
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
34006b88:	d80d      	bhi.n	34006ba6 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
      *(client->pStats) = *pLastStat;
34006b8a:	2278      	movs	r2, #120	@ 0x78
34006b8c:	4641      	mov	r1, r8
34006b8e:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34006b92:	f019 fde8 	bl	34020766 <memcpy>
      retcb = client->callback(client->pAlgo);
34006b96:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34006b9a:	47d0      	blx	sl
      if (retcb != ISP_OK)
34006b9c:	2800      	cmp	r0, #0
      client->callback = NULL;
34006b9e:	bf18      	it	ne
34006ba0:	4605      	movne	r5, r0
34006ba2:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
  for (uint32_t i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34006ba6:	3f01      	subs	r7, #1
34006ba8:	f104 0414 	add.w	r4, r4, #20
34006bac:	d1df      	bne.n	34006b6e <ISP_SVC_Stats_ProcessCallbacks+0x12>
    }
  }

  return ret;
}
34006bae:	4628      	mov	r0, r5
34006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (((client->location == ISP_STAT_LOC_DOWN) && (client->refFrameId <= pLastStat->downFrameIdStart)) ||
34006bb4:	2b01      	cmp	r3, #1
34006bb6:	d103      	bne.n	34006bc0 <ISP_SVC_Stats_ProcessCallbacks+0x64>
        ((client->location == ISP_STAT_LOC_UP) && (client->refFrameId <= pLastStat->upFrameIdStart)) ||
34006bb8:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
34006bbc:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
34006bbe:	e7e2      	b.n	34006b86 <ISP_SVC_Stats_ProcessCallbacks+0x2a>
34006bc0:	2b03      	cmp	r3, #3
34006bc2:	d1f0      	bne.n	34006ba6 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
        ((client->location == ISP_STAT_LOC_UP_AND_DOWN) && (client->refFrameId <= pLastStat->upFrameIdStart) && (client->refFrameId <= pLastStat->downFrameIdStart)))
34006bc4:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34006bc8:	6ef2      	ldr	r2, [r6, #108]	@ 0x6c
34006bca:	4293      	cmp	r3, r2
34006bcc:	d8eb      	bhi.n	34006ba6 <ISP_SVC_Stats_ProcessCallbacks+0x4a>
34006bce:	6f72      	ldr	r2, [r6, #116]	@ 0x74
34006bd0:	4293      	cmp	r3, r2
34006bd2:	e7d9      	b.n	34006b88 <ISP_SVC_Stats_ProcessCallbacks+0x2c>
34006bd4:	3410de14 	.word	0x3410de14

34006bd8 <ISP_SVC_Stats_GetNext>:
  * @param  frameDelay: number of frames to wait before considering the stats as valid
  * @retval ISP status
  */
ISP_StatusTypeDef ISP_SVC_Stats_GetNext(ISP_HandleTypeDef *hIsp, ISP_stat_ready_cb callback, ISP_AlgoTypeDef *pAlgo, ISP_SVC_StatStateTypeDef *pStats,
                                        ISP_SVC_StatLocation location, ISP_SVC_StatType type, uint32_t frameDelay)
{
34006bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34006bdc:	4691      	mov	r9, r2
34006bde:	f89d c01c 	ldrb.w	ip, [sp, #28]
34006be2:	f89d 5020 	ldrb.w	r5, [sp, #32]
  uint32_t i, refFrameId;

  /* Check handle validity */
  if ((hIsp == NULL) || (pStats == NULL))
34006be6:	b1b0      	cbz	r0, 34006c16 <ISP_SVC_Stats_GetNext+0x3e>
34006be8:	b1ab      	cbz	r3, 34006c16 <ISP_SVC_Stats_GetNext+0x3e>
  return hIsp->MainPipe_FrameCount;
34006bea:	4e1e      	ldr	r6, [pc, #120]	@ (34006c64 <ISP_SVC_Stats_GetNext+0x8c>)
  }

  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;

  /* Register the callback */
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34006bec:	f04f 0e00 	mov.w	lr, #0
34006bf0:	4634      	mov	r4, r6
34006bf2:	f04f 0805 	mov.w	r8, #5
  return hIsp->MainPipe_FrameCount;
34006bf6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  refFrameId = ISP_SVC_Misc_GetMainFrameId(hIsp) + frameDelay;
34006bf8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
34006bfa:	4407      	add	r7, r0
  {
    if (ISP_SVC_StatEngine.client[i].callback == NULL)
34006bfc:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
34006c00:	b15a      	cbz	r2, 34006c1a <ISP_SVC_Stats_GetNext+0x42>
  for (i = 0; i < ISP_SVC_STAT_MAX_CB; i++)
34006c02:	f1b8 0801 	subs.w	r8, r8, #1
34006c06:	f10e 0e01 	add.w	lr, lr, #1
34006c0a:	f106 0614 	add.w	r6, r6, #20
34006c0e:	d1f5      	bne.n	34006bfc <ISP_SVC_Stats_GetNext+0x24>
  }

  if (i == ISP_SVC_STAT_MAX_CB)
  {
    /* Too much callback registered */
    return ISP_ERR_STAT_MAXCLIENTS;
34006c10:	20ac      	movs	r0, #172	@ 0xac
  ISP_SVC_StatEngine.client[i].location = location;
  ISP_SVC_StatEngine.client[i].type = type;
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;

  return ISP_OK;
}
34006c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return ISP_ERR_EINVAL;
34006c16:	2001      	movs	r0, #1
34006c18:	e7fb      	b.n	34006c12 <ISP_SVC_Stats_GetNext+0x3a>
  if (location & ISP_STAT_LOC_UP)
34006c1a:	f01c 0f01 	tst.w	ip, #1
34006c1e:	d004      	beq.n	34006c2a <ISP_SVC_Stats_GetNext+0x52>
    ISP_SVC_StatEngine.upRequest |= type;
34006c20:	f894 6158 	ldrb.w	r6, [r4, #344]	@ 0x158
34006c24:	432e      	orrs	r6, r5
34006c26:	f884 6158 	strb.w	r6, [r4, #344]	@ 0x158
  if (location & ISP_STAT_LOC_DOWN)
34006c2a:	f01c 0f02 	tst.w	ip, #2
    ISP_SVC_StatEngine.downRequest |= type;
34006c2e:	bf1e      	ittt	ne
34006c30:	f894 6159 	ldrbne.w	r6, [r4, #345]	@ 0x159
34006c34:	432e      	orrne	r6, r5
34006c36:	f884 6159 	strbne.w	r6, [r4, #345]	@ 0x159
  if (type == ISP_STAT_TYPE_ALL_TMP)
34006c3a:	2d04      	cmp	r5, #4
    ISP_SVC_StatEngine.requestAllCounter = ISP_SVC_Misc_GetMainFrameId(hIsp) + 3 * ISP_STAT_CFG_CYCLE_SIZE;
34006c3c:	bf04      	itt	eq
34006c3e:	301e      	addeq	r0, #30
34006c40:	f8c4 015c 	streq.w	r0, [r4, #348]	@ 0x15c
  ISP_SVC_StatEngine.client[i].callback = callback;
34006c44:	2014      	movs	r0, #20
34006c46:	fb00 400e 	mla	r0, r0, lr, r4
  ISP_SVC_StatEngine.client[i].pAlgo = pAlgo;
34006c4a:	e9c0 193d 	strd	r1, r9, [r0, #244]	@ 0xf4
  ISP_SVC_StatEngine.client[i].pStats = pStats;
34006c4e:	f8c0 30fc 	str.w	r3, [r0, #252]	@ 0xfc
  ISP_SVC_StatEngine.client[i].location = location;
34006c52:	f880 c104 	strb.w	ip, [r0, #260]	@ 0x104
  ISP_SVC_StatEngine.client[i].type = type;
34006c56:	f880 5105 	strb.w	r5, [r0, #261]	@ 0x105
  ISP_SVC_StatEngine.client[i].refFrameId = refFrameId;
34006c5a:	f8c0 7100 	str.w	r7, [r0, #256]	@ 0x100
  return ISP_OK;
34006c5e:	2000      	movs	r0, #0
34006c60:	e7d7      	b.n	34006c12 <ISP_SVC_Stats_GetNext+0x3a>
34006c62:	bf00      	nop
34006c64:	3410de14 	.word	0x3410de14

34006c68 <CB_ISP_GetSensorGain>:
  * @param  Gain     Gain in mdB
  * @retval CMW status
  */
int CMW_CAMERA_GetGain(int32_t *Gain)
{
  *Gain = Camera_Ctx.Gain;
34006c68:	4b02      	ldr	r3, [pc, #8]	@ (34006c74 <CB_ISP_GetSensorGain+0xc>)
{
  if (CMW_CAMERA_GetGain(gain) != CMW_ERROR_NONE)
    return ISP_ERR_SENSORGAIN;

  return ISP_OK;
}
34006c6a:	2000      	movs	r0, #0
  *Gain = Camera_Ctx.Gain;
34006c6c:	6a1b      	ldr	r3, [r3, #32]
34006c6e:	600b      	str	r3, [r1, #0]
}
34006c70:	4770      	bx	lr
34006c72:	bf00      	nop
34006c74:	3410e394 	.word	0x3410e394

34006c78 <CB_ISP_GetSensorExposure>:
  *exposure = Camera_Ctx.Exposure;
34006c78:	4b02      	ldr	r3, [pc, #8]	@ (34006c84 <CB_ISP_GetSensorExposure+0xc>)
{
  if (CMW_CAMERA_GetExposure(exposure) != CMW_ERROR_NONE)
    return ISP_ERR_SENSOREXPOSURE;

  return ISP_OK;
}
34006c7a:	2000      	movs	r0, #0
  *exposure = Camera_Ctx.Exposure;
34006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34006c7e:	600b      	str	r3, [r1, #0]
}
34006c80:	4770      	bx	lr
34006c82:	bf00      	nop
34006c84:	3410e394 	.word	0x3410e394

34006c88 <CB_ISP_GetSensorInfo>:

static ISP_StatusTypeDef CB_ISP_GetSensorInfo(uint32_t camera_instance, ISP_SensorInfoTypeDef *Info)
{
34006c88:	b508      	push	{r3, lr}
  if(Camera_Drv.GetSensorInfo != NULL)
34006c8a:	4b05      	ldr	r3, [pc, #20]	@ (34006ca0 <CB_ISP_GetSensorInfo+0x18>)
34006c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006c8e:	b113      	cbz	r3, 34006c96 <CB_ISP_GetSensorInfo+0xe>
  {
    if (Camera_Drv.GetSensorInfo(&camera_bsp, Info) != CMW_ERROR_NONE)
34006c90:	4804      	ldr	r0, [pc, #16]	@ (34006ca4 <CB_ISP_GetSensorInfo+0x1c>)
34006c92:	4798      	blx	r3
34006c94:	b908      	cbnz	r0, 34006c9a <CB_ISP_GetSensorInfo+0x12>
      return ISP_ERR_SENSOREXPOSURE;
  }
  return ISP_OK;
34006c96:	2000      	movs	r0, #0
}
34006c98:	bd08      	pop	{r3, pc}
      return ISP_ERR_SENSOREXPOSURE;
34006c9a:	2083      	movs	r0, #131	@ 0x83
34006c9c:	e7fc      	b.n	34006c98 <CB_ISP_GetSensorInfo+0x10>
34006c9e:	bf00      	nop
34006ca0:	3410e320 	.word	0x3410e320
34006ca4:	3410e1dc 	.word	0x3410e1dc

34006ca8 <CMW_CAMERA_EnablePin>:
  HAL_GPIO_WritePin(EN_CAM_PORT, EN_CAM_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
34006ca8:	1e02      	subs	r2, r0, #0
34006caa:	bf18      	it	ne
34006cac:	2201      	movne	r2, #1
34006cae:	2104      	movs	r1, #4
34006cb0:	4801      	ldr	r0, [pc, #4]	@ (34006cb8 <CMW_CAMERA_EnablePin+0x10>)
34006cb2:	f00d b92b 	b.w	34013f0c <HAL_GPIO_WritePin>
34006cb6:	bf00      	nop
34006cb8:	56020c00 	.word	0x56020c00

34006cbc <CMW_CAMERA_ShutdownPin>:
  HAL_GPIO_WritePin(NRST_CAM_PORT, NRST_CAM_PIN, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
34006cbc:	1e02      	subs	r2, r0, #0
34006cbe:	bf18      	it	ne
34006cc0:	2201      	movne	r2, #1
34006cc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
34006cc6:	4801      	ldr	r0, [pc, #4]	@ (34006ccc <CMW_CAMERA_ShutdownPin+0x10>)
34006cc8:	f00d b920 	b.w	34013f0c <HAL_GPIO_WritePin>
34006ccc:	56020800 	.word	0x56020800

34006cd0 <CMW_CAMERA_Probe_Sensor.constprop.0>:

#if defined(USE_VD55G1_SENSOR)
static int32_t CMW_CAMERA_VD55G1_Init( CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006cd0:	2100      	movs	r1, #0
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName)
34006cd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006cd6:	4c6a      	ldr	r4, [pc, #424]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
static int CMW_CAMERA_Probe_Sensor(CMW_Sensor_Init_t *initValues, CMW_Sensor_Name_t *sensorName)
34006cd8:	b099      	sub	sp, #100	@ 0x64
34006cda:	4605      	mov	r5, r0
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006cdc:	f44f 72a2 	mov.w	r2, #324	@ 0x144
34006ce0:	4620      	mov	r0, r4
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006ce2:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
34006ce6:	e9cd 1105 	strd	r1, r1, [sp, #20]
34006cea:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006cee:	f019 fab3 	bl	34020258 <memset>
  camera_bsp.vd55g1_bsp.Address     = CAMERA_VD55G1_ADDRESS;
34006cf2:	2320      	movs	r3, #32
34006cf4:	8023      	strh	r3, [r4, #0]
  camera_bsp.vd55g1_bsp.ClockInHz   = CAMERA_VD55G1_FREQ_IN_HZ;
34006cf6:	4b63      	ldr	r3, [pc, #396]	@ (34006e84 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b4>)
  camera_bsp.vd55g1_bsp.Init        = CMW_I2C_INIT;
34006cf8:	f8df b1b8 	ldr.w	fp, [pc, #440]	@ 34006eb4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e4>
  camera_bsp.vd55g1_bsp.DeInit      = CMW_I2C_DEINIT;
34006cfc:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 34006eb8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e8>
  camera_bsp.vd55g1_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006d00:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 34006ebc <CMW_CAMERA_Probe_Sensor.constprop.0+0x1ec>
  camera_bsp.vd55g1_bsp.ReadReg     = CMW_I2C_READREG16;
34006d04:	f8df 91b8 	ldr.w	r9, [pc, #440]	@ 34006ec0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f0>
  camera_bsp.vd55g1_bsp.Delay       = HAL_Delay;
34006d08:	4f5f      	ldr	r7, [pc, #380]	@ (34006e88 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b8>)
  camera_bsp.vd55g1_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006d0a:	4e60      	ldr	r6, [pc, #384]	@ (34006e8c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1bc>)
  camera_bsp.vd55g1_bsp.ClockInHz   = CAMERA_VD55G1_FREQ_IN_HZ;
34006d0c:	6063      	str	r3, [r4, #4]
  camera_bsp.vd55g1_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006d0e:	4b60      	ldr	r3, [pc, #384]	@ (34006e90 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c0>)

  ret = CMW_VD55G1_Probe(&camera_bsp.vd55g1_bsp, &Camera_Drv);
34006d10:	4620      	mov	r0, r4
34006d12:	4960      	ldr	r1, [pc, #384]	@ (34006e94 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
  camera_bsp.vd55g1_bsp.Init        = CMW_I2C_INIT;
34006d14:	f8c4 b074 	str.w	fp, [r4, #116]	@ 0x74
  camera_bsp.vd55g1_bsp.DeInit      = CMW_I2C_DEINIT;
34006d18:	f8c4 a078 	str.w	sl, [r4, #120]	@ 0x78
  camera_bsp.vd55g1_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006d1c:	f8c4 807c 	str.w	r8, [r4, #124]	@ 0x7c
  camera_bsp.vd55g1_bsp.ReadReg     = CMW_I2C_READREG16;
34006d20:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
  camera_bsp.vd55g1_bsp.Delay       = HAL_Delay;
34006d24:	f8c4 7088 	str.w	r7, [r4, #136]	@ 0x88
  camera_bsp.vd55g1_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006d28:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  camera_bsp.vd55g1_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006d2c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  ret = CMW_VD55G1_Probe(&camera_bsp.vd55g1_bsp, &Camera_Drv);
34006d30:	f000 ff30 	bl	34007b94 <CMW_VD55G1_Probe>
  if (ret != CMW_ERROR_NONE)
34006d34:	2800      	cmp	r0, #0
34006d36:	d135      	bne.n	34006da4 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006d38:	682b      	ldr	r3, [r5, #0]
34006d3a:	4a56      	ldr	r2, [pc, #344]	@ (34006e94 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
34006d3c:	b10b      	cbz	r3, 34006d42 <CMW_CAMERA_Probe_Sensor.constprop.0+0x72>
34006d3e:	686b      	ldr	r3, [r5, #4]
34006d40:	b943      	cbnz	r3, 34006d54 <CMW_CAMERA_Probe_Sensor.constprop.0+0x84>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006d42:	6e13      	ldr	r3, [r2, #96]	@ 0x60
34006d44:	484e      	ldr	r0, [pc, #312]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
34006d46:	a909      	add	r1, sp, #36	@ 0x24
34006d48:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006d4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    initSensors_params->height = sensor_info.height;
34006d4c:	4a51      	ldr	r2, [pc, #324]	@ (34006e94 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
    initSensors_params->width = sensor_info.width;
34006d4e:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006d50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006d52:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006d54:	4629      	mov	r1, r5
34006d56:	6813      	ldr	r3, [r2, #0]
34006d58:	4849      	ldr	r0, [pc, #292]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
34006d5a:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006d5c:	bb10      	cbnz	r0, 34006da4 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_ONE_DATA_LANE;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006d5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
34006d62:	2301      	movs	r3, #1
34006d64:	e9cd 0303 	strd	r0, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006d68:	231c      	movs	r3, #28
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006d6a:	a903      	add	r1, sp, #12
34006d6c:	484a      	ldr	r0, [pc, #296]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006d6e:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006d70:	f00a f8dc 	bl	34010f2c <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
34006d74:	4601      	mov	r1, r0
34006d76:	b9a8      	cbnz	r0, 34006da4 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP8);
34006d78:	2202      	movs	r2, #2
34006d7a:	4847      	ldr	r0, [pc, #284]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006d7c:	f00a fa46 	bl	3401120c <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006d80:	4601      	mov	r1, r0
34006d82:	b978      	cbnz	r0, 34006da4 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW8;
34006d84:	232a      	movs	r3, #42	@ 0x2a
  csi_pipe_conf.DataTypeIDB = 0;
34006d86:	e9cd 3007 	strd	r3, r0, [sp, #28]
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006d8a:	9006      	str	r0, [sp, #24]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006d8c:	4842      	ldr	r0, [pc, #264]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006d8e:	aa06      	add	r2, sp, #24
34006d90:	9101      	str	r1, [sp, #4]
34006d92:	f00a f987 	bl	340110a4 <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006d96:	b928      	cbnz	r0, 34006da4 <CMW_CAMERA_Probe_Sensor.constprop.0+0xd4>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006d98:	9901      	ldr	r1, [sp, #4]
34006d9a:	3101      	adds	r1, #1
34006d9c:	2903      	cmp	r1, #3
34006d9e:	d1f5      	bne.n	34006d8c <CMW_CAMERA_Probe_Sensor.constprop.0+0xbc>
    return ret;
34006da0:	2002      	movs	r0, #2
34006da2:	e067      	b.n	34006e74 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1a4>

#if defined(USE_VD66GY_SENSOR)
static int32_t CMW_CAMERA_VD66GY_Init( CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006da4:	2100      	movs	r1, #0
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006da6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
34006daa:	4835      	ldr	r0, [pc, #212]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006dac:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
34006db0:	e9cd 1105 	strd	r1, r1, [sp, #20]
34006db4:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006db8:	f019 fa4e 	bl	34020258 <memset>
  camera_bsp.vd66gy_bsp.Address     = CAMERA_VD66GY_ADDRESS;
34006dbc:	2320      	movs	r3, #32
34006dbe:	8023      	strh	r3, [r4, #0]
  camera_bsp.vd66gy_bsp.ClockInHz   = CAMERA_VD66GY_FREQ_IN_HZ;
34006dc0:	4b30      	ldr	r3, [pc, #192]	@ (34006e84 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b4>)
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;

  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006dc2:	4934      	ldr	r1, [pc, #208]	@ (34006e94 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
  camera_bsp.vd66gy_bsp.ClockInHz   = CAMERA_VD66GY_FREQ_IN_HZ;
34006dc4:	6063      	str	r3, [r4, #4]
  camera_bsp.vd66gy_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006dc6:	4b32      	ldr	r3, [pc, #200]	@ (34006e90 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c0>)
  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006dc8:	482d      	ldr	r0, [pc, #180]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
  camera_bsp.vd66gy_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006dca:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
  camera_bsp.vd66gy_bsp.hdcmipp     = &hcamera_dcmipp;
34006dce:	4b32      	ldr	r3, [pc, #200]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  camera_bsp.vd66gy_bsp.DeInit      = CMW_I2C_DEINIT;
34006dd0:	e9c4 ba49 	strd	fp, sl, [r4, #292]	@ 0x124
  camera_bsp.vd66gy_bsp.hdcmipp     = &hcamera_dcmipp;
34006dd4:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006dd8:	4b30      	ldr	r3, [pc, #192]	@ (34006e9c <CMW_CAMERA_Probe_Sensor.constprop.0+0x1cc>)
  camera_bsp.vd66gy_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006dda:	e9c4 894b 	strd	r8, r9, [r4, #300]	@ 0x12c
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006dde:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006de2:	4b2f      	ldr	r3, [pc, #188]	@ (34006ea0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d0>)
  camera_bsp.vd66gy_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006de4:	e9c4 764e 	strd	r7, r6, [r4, #312]	@ 0x138
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006de8:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
  camera_bsp.vd66gy_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
34006dec:	4b2d      	ldr	r3, [pc, #180]	@ (34006ea4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d4>)
34006dee:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
34006df2:	4b2d      	ldr	r3, [pc, #180]	@ (34006ea8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1d8>)
34006df4:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  camera_bsp.vd66gy_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;
34006df8:	4b2c      	ldr	r3, [pc, #176]	@ (34006eac <CMW_CAMERA_Probe_Sensor.constprop.0+0x1dc>)
34006dfa:	f8c4 3104 	str.w	r3, [r4, #260]	@ 0x104
  ret = CMW_VD66GY_Probe(&camera_bsp.vd66gy_bsp, &Camera_Drv);
34006dfe:	f001 fa61 	bl	340082c4 <CMW_VD66GY_Probe>
  if (ret != CMW_ERROR_NONE)
34006e02:	2800      	cmp	r0, #0
34006e04:	d15e      	bne.n	34006ec4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006e06:	682b      	ldr	r3, [r5, #0]
34006e08:	b10b      	cbz	r3, 34006e0e <CMW_CAMERA_Probe_Sensor.constprop.0+0x13e>
34006e0a:	686b      	ldr	r3, [r5, #4]
34006e0c:	b943      	cbnz	r3, 34006e20 <CMW_CAMERA_Probe_Sensor.constprop.0+0x150>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006e0e:	4b21      	ldr	r3, [pc, #132]	@ (34006e94 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
34006e10:	481b      	ldr	r0, [pc, #108]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
34006e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34006e14:	a909      	add	r1, sp, #36	@ 0x24
34006e16:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006e18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34006e1a:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006e1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006e1e:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006e20:	4b1c      	ldr	r3, [pc, #112]	@ (34006e94 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c4>)
34006e22:	4629      	mov	r1, r5
34006e24:	681b      	ldr	r3, [r3, #0]
34006e26:	4816      	ldr	r0, [pc, #88]	@ (34006e80 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1b0>)
34006e28:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006e2a:	2800      	cmp	r0, #0
34006e2c:	d14a      	bne.n	34006ec4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006e2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
34006e32:	2301      	movs	r3, #1
34006e34:	e9cd 1303 	strd	r1, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006e38:	231c      	movs	r3, #28
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006e3a:	a903      	add	r1, sp, #12
34006e3c:	4816      	ldr	r0, [pc, #88]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_800;
34006e3e:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006e40:	f00a f874 	bl	34010f2c <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
34006e44:	4601      	mov	r1, r0
34006e46:	2800      	cmp	r0, #0
34006e48:	d13c      	bne.n	34006ec4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP8);
34006e4a:	2202      	movs	r2, #2
34006e4c:	4812      	ldr	r0, [pc, #72]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006e4e:	f00a f9dd 	bl	3401120c <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006e52:	4601      	mov	r1, r0
34006e54:	2800      	cmp	r0, #0
34006e56:	d135      	bne.n	34006ec4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW8;
34006e58:	232a      	movs	r3, #42	@ 0x2a
  csi_pipe_conf.DataTypeIDB = 0;
34006e5a:	e9cd 3007 	strd	r3, r0, [sp, #28]
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006e5e:	9006      	str	r0, [sp, #24]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006e60:	480d      	ldr	r0, [pc, #52]	@ (34006e98 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1c8>)
34006e62:	aa06      	add	r2, sp, #24
34006e64:	9101      	str	r1, [sp, #4]
34006e66:	f00a f91d 	bl	340110a4 <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006e6a:	bb58      	cbnz	r0, 34006ec4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1f4>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006e6c:	9901      	ldr	r1, [sp, #4]
34006e6e:	3101      	adds	r1, #1
34006e70:	2903      	cmp	r1, #3
34006e72:	d1f5      	bne.n	34006e60 <CMW_CAMERA_Probe_Sensor.constprop.0+0x190>
    *sensorName = CMW_VD66GY_Sensor;
34006e74:	4b0e      	ldr	r3, [pc, #56]	@ (34006eb0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1e0>)
34006e76:	7018      	strb	r0, [r3, #0]
    return ret;
34006e78:	2000      	movs	r0, #0
}
34006e7a:	b019      	add	sp, #100	@ 0x64
34006e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34006e80:	3410e1dc 	.word	0x3410e1dc
34006e84:	00b71b00 	.word	0x00b71b00
34006e88:	3401eb05 	.word	0x3401eb05
34006e8c:	34006cbd 	.word	0x34006cbd
34006e90:	34006ca9 	.word	0x34006ca9
34006e94:	3410e320 	.word	0x3410e320
34006e98:	3410e388 	.word	0x3410e388
34006e9c:	34007255 	.word	0x34007255
34006ea0:	34006c69 	.word	0x34006c69
34006ea4:	34007299 	.word	0x34007299
34006ea8:	34006c79 	.word	0x34006c79
34006eac:	34006c89 	.word	0x34006c89
34006eb0:	3410e3d4 	.word	0x3410e3d4
34006eb4:	3400f411 	.word	0x3400f411
34006eb8:	3400f381 	.word	0x3400f381
34006ebc:	3400f4d1 	.word	0x3400f4d1
34006ec0:	3400f509 	.word	0x3400f509

#if defined(USE_IMX335_SENSOR)
static int32_t CMW_CAMERA_IMX335_Init(CMW_Sensor_Init_t *initSensors_params)
{
  int32_t ret = CMW_ERROR_NONE;
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006ec4:	2100      	movs	r1, #0
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };

  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006ec6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
34006eca:	4838      	ldr	r0, [pc, #224]	@ (34006fac <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
  DCMIPP_CSI_ConfTypeDef csi_conf = { 0 };
34006ecc:	e9cd 1103 	strd	r1, r1, [sp, #12]
  DCMIPP_CSI_PIPE_ConfTypeDef csi_pipe_conf = { 0 };
34006ed0:	e9cd 1105 	strd	r1, r1, [sp, #20]
34006ed4:	e9cd 1107 	strd	r1, r1, [sp, #28]
  memset(&camera_bsp, 0, sizeof(camera_bsp));
34006ed8:	f019 f9be 	bl	34020258 <memset>
  camera_bsp.imx335_bsp.Address     = CAMERA_IMX335_ADDRESS;
34006edc:	2334      	movs	r3, #52	@ 0x34
34006ede:	8023      	strh	r3, [r4, #0]
  camera_bsp.imx335_bsp.Init        = CMW_I2C_INIT;
  camera_bsp.imx335_bsp.DeInit      = CMW_I2C_DEINIT;
  camera_bsp.imx335_bsp.ReadReg     = CMW_I2C_READREG16;
  camera_bsp.imx335_bsp.WriteReg    = CMW_I2C_WRITEREG16;
  camera_bsp.imx335_bsp.GetTick     = BSP_GetTick;
34006ee0:	4b33      	ldr	r3, [pc, #204]	@ (34006fb0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e0>)
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
  camera_bsp.imx335_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
  camera_bsp.imx335_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
  camera_bsp.imx335_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;

  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006ee2:	4934      	ldr	r1, [pc, #208]	@ (34006fb4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>)
  camera_bsp.imx335_bsp.Delay       = HAL_Delay;
34006ee4:	e9c4 373d 	strd	r3, r7, [r4, #244]	@ 0xf4
  camera_bsp.imx335_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006ee8:	4b33      	ldr	r3, [pc, #204]	@ (34006fb8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e8>)
  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006eea:	4830      	ldr	r0, [pc, #192]	@ (34006fac <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
  camera_bsp.imx335_bsp.EnablePin   = CMW_CAMERA_EnablePin;
34006eec:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  camera_bsp.imx335_bsp.hdcmipp     = &hcamera_dcmipp;
34006ef0:	4b32      	ldr	r3, [pc, #200]	@ (34006fbc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  camera_bsp.imx335_bsp.DeInit      = CMW_I2C_DEINIT;
34006ef2:	e9c4 ba39 	strd	fp, sl, [r4, #228]	@ 0xe4
  camera_bsp.imx335_bsp.hdcmipp     = &hcamera_dcmipp;
34006ef6:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
  camera_bsp.imx335_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006efa:	4b31      	ldr	r3, [pc, #196]	@ (34006fc0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f0>)
  camera_bsp.imx335_bsp.WriteReg    = CMW_I2C_WRITEREG16;
34006efc:	e9c4 893b 	strd	r8, r9, [r4, #236]	@ 0xec
  camera_bsp.imx335_bsp.appliHelpers.SetSensorGain = CB_ISP_SetSensorGain;
34006f00:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006f04:	4b2f      	ldr	r3, [pc, #188]	@ (34006fc4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f4>)
  camera_bsp.imx335_bsp.ShutdownPin = CMW_CAMERA_ShutdownPin;
34006f06:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
  camera_bsp.imx335_bsp.appliHelpers.GetSensorGain = CB_ISP_GetSensorGain;
34006f0a:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
  camera_bsp.imx335_bsp.appliHelpers.SetSensorExposure = CB_ISP_SetSensorExposure;
34006f0e:	4b2e      	ldr	r3, [pc, #184]	@ (34006fc8 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2f8>)
34006f10:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
  camera_bsp.imx335_bsp.appliHelpers.GetSensorExposure = CB_ISP_GetSensorExposure;
34006f14:	4b2d      	ldr	r3, [pc, #180]	@ (34006fcc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2fc>)
34006f16:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
  camera_bsp.imx335_bsp.appliHelpers.GetSensorInfo = CB_ISP_GetSensorInfo;
34006f1a:	4b2d      	ldr	r3, [pc, #180]	@ (34006fd0 <CMW_CAMERA_Probe_Sensor.constprop.0+0x300>)
34006f1c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
  ret = CMW_IMX335_Probe(&camera_bsp.imx335_bsp, &Camera_Drv);
34006f20:	f000 fc90 	bl	34007844 <CMW_IMX335_Probe>
  if (ret != CMW_ERROR_NONE)
34006f24:	2800      	cmp	r0, #0
34006f26:	d13e      	bne.n	34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  /* Special case: when resolution is not specified take the full sensor resolution */
  if ((initSensors_params->width == 0) || (initSensors_params->height == 0))
34006f28:	682b      	ldr	r3, [r5, #0]
34006f2a:	4c22      	ldr	r4, [pc, #136]	@ (34006fb4 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2e4>)
34006f2c:	b10b      	cbz	r3, 34006f32 <CMW_CAMERA_Probe_Sensor.constprop.0+0x262>
34006f2e:	686b      	ldr	r3, [r5, #4]
34006f30:	b93b      	cbnz	r3, 34006f42 <CMW_CAMERA_Probe_Sensor.constprop.0+0x272>
  {
    ISP_SensorInfoTypeDef sensor_info;
    Camera_Drv.GetSensorInfo(&camera_bsp, &sensor_info);
34006f32:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34006f34:	481d      	ldr	r0, [pc, #116]	@ (34006fac <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
34006f36:	a909      	add	r1, sp, #36	@ 0x24
34006f38:	4798      	blx	r3
    initSensors_params->width = sensor_info.width;
34006f3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
34006f3c:	602b      	str	r3, [r5, #0]
    initSensors_params->height = sensor_info.height;
34006f3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
34006f40:	606b      	str	r3, [r5, #4]
  }

  ret = Camera_Drv.Init(&camera_bsp, initSensors_params);
34006f42:	4629      	mov	r1, r5
34006f44:	6823      	ldr	r3, [r4, #0]
34006f46:	4819      	ldr	r0, [pc, #100]	@ (34006fac <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
34006f48:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006f4a:	bb60      	cbnz	r0, 34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = Camera_Drv.SetFrequency(&camera_bsp, IMX335_INCK_24MHZ);
34006f4c:	2102      	movs	r1, #2
34006f4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34006f50:	4816      	ldr	r0, [pc, #88]	@ (34006fac <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
34006f52:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006f54:	bb38      	cbnz	r0, 34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = Camera_Drv.SetFramerate(&camera_bsp, initSensors_params->fps);
34006f56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34006f58:	68a9      	ldr	r1, [r5, #8]
34006f5a:	4814      	ldr	r0, [pc, #80]	@ (34006fac <CMW_CAMERA_Probe_Sensor.constprop.0+0x2dc>)
34006f5c:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34006f5e:	bb10      	cbnz	r0, 34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  csi_conf.NumberOfLanes = DCMIPP_CSI_TWO_DATA_LANES;
  csi_conf.DataLaneMapping = DCMIPP_CSI_PHYSICAL_DATA_LANES;
34006f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
34006f64:	2301      	movs	r3, #1
34006f66:	e9cd 2303 	strd	r2, r3, [sp, #12]
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34006f6a:	232c      	movs	r3, #44	@ 0x2c
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006f6c:	a903      	add	r1, sp, #12
34006f6e:	4813      	ldr	r0, [pc, #76]	@ (34006fbc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  csi_conf.PHYBitrate = DCMIPP_CSI_PHY_BT_1600;
34006f70:	9305      	str	r3, [sp, #20]
  ret = HAL_DCMIPP_CSI_SetConfig(&hcamera_dcmipp, &csi_conf);
34006f72:	f009 ffdb 	bl	34010f2c <HAL_DCMIPP_CSI_SetConfig>
  if (ret != HAL_OK)
34006f76:	4601      	mov	r1, r0
34006f78:	b9a8      	cbnz	r0, 34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  ret = HAL_DCMIPP_CSI_SetVCConfig(&hcamera_dcmipp, DCMIPP_VIRTUAL_CHANNEL0, DCMIPP_CSI_DT_BPP10);
34006f7a:	2203      	movs	r2, #3
34006f7c:	480f      	ldr	r0, [pc, #60]	@ (34006fbc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
34006f7e:	f00a f945 	bl	3401120c <HAL_DCMIPP_CSI_SetVCConfig>
  if (ret != HAL_OK)
34006f82:	4604      	mov	r4, r0
34006f84:	b978      	cbnz	r0, 34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  {
    return CMW_ERROR_PERIPH_FAILURE;
  }

  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
  csi_pipe_conf.DataTypeIDA = DCMIPP_DT_RAW10;
34006f86:	232b      	movs	r3, #43	@ 0x2b
  csi_pipe_conf.DataTypeIDB = 0;
34006f88:	e9cd 3007 	strd	r3, r0, [sp, #28]
  /* Pre-initialize CSI config for all the pipes */
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
  {
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006f8c:	4d0b      	ldr	r5, [pc, #44]	@ (34006fbc <CMW_CAMERA_Probe_Sensor.constprop.0+0x2ec>)
  csi_pipe_conf.DataTypeMode = DCMIPP_DTMODE_DTIDA;
34006f8e:	9006      	str	r0, [sp, #24]
    ret = HAL_DCMIPP_CSI_PIPE_SetConfig(&hcamera_dcmipp, i, &csi_pipe_conf);
34006f90:	4621      	mov	r1, r4
34006f92:	4628      	mov	r0, r5
34006f94:	aa06      	add	r2, sp, #24
34006f96:	f00a f885 	bl	340110a4 <HAL_DCMIPP_CSI_PIPE_SetConfig>
    if (ret != HAL_OK)
34006f9a:	b920      	cbnz	r0, 34006fa6 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2d6>
  for (uint32_t i = DCMIPP_PIPE0; i <= DCMIPP_PIPE2; i++)
34006f9c:	3401      	adds	r4, #1
34006f9e:	2c03      	cmp	r4, #3
34006fa0:	d1f6      	bne.n	34006f90 <CMW_CAMERA_Probe_Sensor.constprop.0+0x2c0>
    return ret;
34006fa2:	2001      	movs	r0, #1
34006fa4:	e766      	b.n	34006e74 <CMW_CAMERA_Probe_Sensor.constprop.0+0x1a4>
    return CMW_ERROR_UNKNOWN_COMPONENT;
34006fa6:	f06f 0006 	mvn.w	r0, #6
34006faa:	e766      	b.n	34006e7a <CMW_CAMERA_Probe_Sensor.constprop.0+0x1aa>
34006fac:	3410e1dc 	.word	0x3410e1dc
34006fb0:	3400f541 	.word	0x3400f541
34006fb4:	3410e320 	.word	0x3410e320
34006fb8:	34006ca9 	.word	0x34006ca9
34006fbc:	3410e388 	.word	0x3410e388
34006fc0:	34007255 	.word	0x34007255
34006fc4:	34006c69 	.word	0x34006c69
34006fc8:	34007299 	.word	0x34007299
34006fcc:	34006c79 	.word	0x34006c79
34006fd0:	34006c89 	.word	0x34006c89

34006fd4 <CMW_CAMERA_EnableGPIOs>:
{
34006fd4:	b570      	push	{r4, r5, r6, lr}
34006fd6:	b088      	sub	sp, #32
  GPIO_InitTypeDef gpio_init_structure = {0};
34006fd8:	2214      	movs	r2, #20
34006fda:	2100      	movs	r1, #0
34006fdc:	a803      	add	r0, sp, #12
34006fde:	f019 f93b 	bl	34020258 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34006fe2:	2308      	movs	r3, #8
34006fe4:	4c13      	ldr	r4, [pc, #76]	@ (34007034 <CMW_CAMERA_EnableGPIOs+0x60>)
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34006fe6:	2501      	movs	r5, #1
34006fe8:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34006fec:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
34006ff0:	2600      	movs	r6, #0
34006ff2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
34006ff4:	9b02      	ldr	r3, [sp, #8]
  NRST_CAM_GPIO_ENABLE_VDDIO();
34006ff6:	f00e f9f7 	bl	340153e8 <HAL_PWREx_EnableVddIO4>
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34006ffa:	2304      	movs	r3, #4
34006ffc:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34007000:	f8d4 225c 	ldr.w	r2, [r4, #604]	@ 0x25c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34007004:	2403      	movs	r4, #3
34007006:	9201      	str	r2, [sp, #4]
  HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
34007008:	a903      	add	r1, sp, #12
3400700a:	480b      	ldr	r0, [pc, #44]	@ (34007038 <CMW_CAMERA_EnableGPIOs+0x64>)
  (void)tmpreg;
3400700c:	9a01      	ldr	r2, [sp, #4]
  gpio_init_structure.Pin       = EN_CAM_PIN;
3400700e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34007010:	e9cd 5604 	strd	r5, r6, [sp, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34007014:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(EN_CAM_PORT, &gpio_init_structure);
34007016:	f00c fc21 	bl	3401385c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = NRST_CAM_PIN;
3400701a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
3400701e:	4807      	ldr	r0, [pc, #28]	@ (3400703c <CMW_CAMERA_EnableGPIOs+0x68>)
34007020:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
34007022:	e9cd 5604 	strd	r5, r6, [sp, #16]
  gpio_init_structure.Pin       = NRST_CAM_PIN;
34007026:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34007028:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(NRST_CAM_PORT, &gpio_init_structure);
3400702a:	f00c fc17 	bl	3401385c <HAL_GPIO_Init>
}
3400702e:	b008      	add	sp, #32
34007030:	bd70      	pop	{r4, r5, r6, pc}
34007032:	bf00      	nop
34007034:	56028000 	.word	0x56028000
34007038:	56020c00 	.word	0x56020c00
3400703c:	56020800 	.word	0x56020800

34007040 <CMW_CAMERA_GetDCMIPPHandle>:
}
34007040:	4800      	ldr	r0, [pc, #0]	@ (34007044 <CMW_CAMERA_GetDCMIPPHandle+0x4>)
34007042:	4770      	bx	lr
34007044:	3410e388 	.word	0x3410e388

34007048 <CMW_CAMERA_SetPipeConfig>:
{
34007048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}
#endif

static int32_t CMW_CAMERA_SetPipe(DCMIPP_HandleTypeDef *hdcmipp, uint32_t pipe, CMW_DCMIPP_Conf_t *p_conf, uint32_t *pitch)
{
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
3400704c:	2600      	movs	r6, #0
{
3400704e:	4604      	mov	r4, r0
34007050:	b093      	sub	sp, #76	@ 0x4c
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
34007052:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
{
34007056:	460d      	mov	r5, r1
34007058:	4617      	mov	r7, r2
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
3400705a:	4631      	mov	r1, r6
3400705c:	2218      	movs	r2, #24
3400705e:	4640      	mov	r0, r8
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
34007060:	e9cd 6604 	strd	r6, r6, [sp, #16]
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34007064:	9602      	str	r6, [sp, #8]
  DCMIPP_PipeConfTypeDef pipe_conf = { 0 };
34007066:	9606      	str	r6, [sp, #24]
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34007068:	9603      	str	r6, [sp, #12]
  DCMIPP_DownsizeTypeDef down_conf = { 0 };
3400706a:	f019 f8f5 	bl	34020258 <memset>
  DCMIPP_CropConfTypeDef crop_conf = { 0 };
3400706e:	2214      	movs	r2, #20
34007070:	4631      	mov	r1, r6
34007072:	a807      	add	r0, sp, #28
  DCMIPP_DecimationConfTypeDef dec_conf = { 0 };
34007074:	f10d 0908 	add.w	r9, sp, #8
  DCMIPP_CropConfTypeDef crop_conf = { 0 };
34007078:	f019 f8ee 	bl	34020258 <memset>
  int ret;

  /* specific case for pipe0 which is only a dump pipe */
  if (pipe == DCMIPP_PIPE0)
3400707c:	b95c      	cbnz	r4, 34007096 <CMW_CAMERA_SetPipeConfig+0x4e>
  {
    /*  TODO: properly configure the dump pipe with decimation and crop */
    pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
    ret = HAL_DCMIPP_PIPE_SetConfig(hdcmipp, pipe, &pipe_conf);
3400707e:	4621      	mov	r1, r4
34007080:	484f      	ldr	r0, [pc, #316]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
34007082:	aa04      	add	r2, sp, #16
34007084:	f00a f8fa 	bl	3401127c <HAL_DCMIPP_PIPE_SetConfig>
    if (ret != HAL_OK)
34007088:	2800      	cmp	r0, #0
3400708a:	d07c      	beq.n	34007186 <CMW_CAMERA_SetPipeConfig+0x13e>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
3400708c:	f06f 0004 	mvn.w	r0, #4
}
34007090:	b013      	add	sp, #76	@ 0x4c
34007092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

    return HAL_OK;
  }

  CMW_UTILS_GetPipeConfig(camera_conf.width, camera_conf.height, p_conf, &crop_conf, &dec_conf, &down_conf);
34007096:	e9cd 9800 	strd	r9, r8, [sp]
3400709a:	484a      	ldr	r0, [pc, #296]	@ (340071c4 <CMW_CAMERA_SetPipeConfig+0x17c>)
3400709c:	462a      	mov	r2, r5
3400709e:	e9d0 0100 	ldrd	r0, r1, [r0]
340070a2:	ab07      	add	r3, sp, #28
340070a4:	f000 fa0e 	bl	340074c4 <CMW_UTILS_GetPipeConfig>

  if (crop_conf.VSize != 0 || crop_conf.HSize != 0)
340070a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
340070ac:	4313      	orrs	r3, r2
340070ae:	d015      	beq.n	340070dc <CMW_CAMERA_SetPipeConfig+0x94>
  {
    ret = HAL_DCMIPP_PIPE_SetCropConfig(hdcmipp, pipe, &crop_conf);
340070b0:	4621      	mov	r1, r4
340070b2:	4843      	ldr	r0, [pc, #268]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340070b4:	aa07      	add	r2, sp, #28
340070b6:	f00a fe4b 	bl	34011d50 <HAL_DCMIPP_PIPE_SetCropConfig>
    if (ret != HAL_OK)
340070ba:	2800      	cmp	r0, #0
340070bc:	d1e6      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }

    ret = HAL_DCMIPP_PIPE_EnableCrop(hdcmipp, pipe);
340070be:	4621      	mov	r1, r4
340070c0:	483f      	ldr	r0, [pc, #252]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340070c2:	f00a feeb 	bl	34011e9c <HAL_DCMIPP_PIPE_EnableCrop>
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableCrop(hdcmipp, pipe);
    if (ret != HAL_OK)
340070c6:	2800      	cmp	r0, #0
340070c8:	d1e0      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }

  if (dec_conf.VRatio != 0 || dec_conf.HRatio != 0)
340070ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
340070ce:	4313      	orrs	r3, r2
340070d0:	d109      	bne.n	340070e6 <CMW_CAMERA_SetPipeConfig+0x9e>
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableDecimation(hdcmipp, pipe);
340070d2:	4621      	mov	r1, r4
340070d4:	483a      	ldr	r0, [pc, #232]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340070d6:	f00b f80f 	bl	340120f8 <HAL_DCMIPP_PIPE_DisableDecimation>
340070da:	e00f      	b.n	340070fc <CMW_CAMERA_SetPipeConfig+0xb4>
    ret = HAL_DCMIPP_PIPE_DisableCrop(hdcmipp, pipe);
340070dc:	4621      	mov	r1, r4
340070de:	4838      	ldr	r0, [pc, #224]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340070e0:	f00a ff1c 	bl	34011f1c <HAL_DCMIPP_PIPE_DisableCrop>
340070e4:	e7ef      	b.n	340070c6 <CMW_CAMERA_SetPipeConfig+0x7e>
    ret = HAL_DCMIPP_PIPE_SetDecimationConfig(hdcmipp, pipe, &dec_conf);
340070e6:	464a      	mov	r2, r9
340070e8:	4621      	mov	r1, r4
340070ea:	4835      	ldr	r0, [pc, #212]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340070ec:	f00a ff96 	bl	3401201c <HAL_DCMIPP_PIPE_SetDecimationConfig>
    if (ret != HAL_OK)
340070f0:	2800      	cmp	r0, #0
340070f2:	d1cb      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
    ret = HAL_DCMIPP_PIPE_EnableDecimation(hdcmipp, pipe);
340070f4:	4621      	mov	r1, r4
340070f6:	4832      	ldr	r0, [pc, #200]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340070f8:	f00a ffdc 	bl	340120b4 <HAL_DCMIPP_PIPE_EnableDecimation>
    if (ret != HAL_OK)
340070fc:	2800      	cmp	r0, #0
340070fe:	d1c5      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }
  }

  ret = HAL_DCMIPP_PIPE_SetDownsizeConfig(hdcmipp, pipe, &down_conf);
34007100:	4642      	mov	r2, r8
34007102:	4621      	mov	r1, r4
34007104:	482e      	ldr	r0, [pc, #184]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
34007106:	f00b f819 	bl	3401213c <HAL_DCMIPP_PIPE_SetDownsizeConfig>
  if (ret != HAL_OK)
3400710a:	4e2d      	ldr	r6, [pc, #180]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
3400710c:	2800      	cmp	r0, #0
3400710e:	d1bd      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  ret = HAL_DCMIPP_PIPE_EnableDownsize(hdcmipp, pipe);
34007110:	4621      	mov	r1, r4
34007112:	4630      	mov	r0, r6
34007114:	f00b f8a0 	bl	34012258 <HAL_DCMIPP_PIPE_EnableDownsize>
  if (ret != HAL_OK)
34007118:	2800      	cmp	r0, #0
3400711a:	d1b7      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
  }

  if (p_conf->enable_swap)
3400711c:	692b      	ldr	r3, [r5, #16]
  {
    /* Config pipe */
    ret = HAL_DCMIPP_PIPE_EnableRedBlueSwap(hdcmipp, pipe);
3400711e:	4621      	mov	r1, r4
34007120:	4630      	mov	r0, r6
  if (p_conf->enable_swap)
34007122:	2b00      	cmp	r3, #0
34007124:	d031      	beq.n	3400718a <CMW_CAMERA_SetPipeConfig+0x142>
    ret = HAL_DCMIPP_PIPE_EnableRedBlueSwap(hdcmipp, pipe);
34007126:	f00b ff83 	bl	34013030 <HAL_DCMIPP_PIPE_EnableRedBlueSwap>
    }
  }
  else
  {
    ret = HAL_DCMIPP_PIPE_DisableRedBlueSwap(hdcmipp, pipe);
    if (ret != HAL_OK)
3400712a:	2800      	cmp	r0, #0
3400712c:	d1ae      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
  }

  /* Ignore the configuration of gamma if -1
   * Activation is then done by the ISP Library
   */
  if (p_conf->enable_gamma_conversion > -1)
3400712e:	696b      	ldr	r3, [r5, #20]
34007130:	2b00      	cmp	r3, #0
34007132:	da2d      	bge.n	34007190 <CMW_CAMERA_SetPipeConfig+0x148>
        return CMW_ERROR_COMPONENT_FAILURE;
      }
    }
  }

  if (pipe == DCMIPP_PIPE2)
34007134:	2c02      	cmp	r4, #2
34007136:	d10f      	bne.n	34007158 <CMW_CAMERA_SetPipeConfig+0x110>
  {
    if (!is_pipe1_2_shared)
34007138:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 340071c8 <CMW_CAMERA_SetPipeConfig+0x180>
3400713c:	f8d8 3000 	ldr.w	r3, [r8]
34007140:	b953      	cbnz	r3, 34007158 <CMW_CAMERA_SetPipeConfig+0x110>
    {
      ret = HAL_DCMIPP_PIPE_CSI_EnableShare(hdcmipp, pipe);
34007142:	4621      	mov	r1, r4
34007144:	481e      	ldr	r0, [pc, #120]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
34007146:	f00b ffc3 	bl	340130d0 <HAL_DCMIPP_PIPE_CSI_EnableShare>
      if (ret != HAL_OK)
3400714a:	2800      	cmp	r0, #0
3400714c:	d19e      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
      {
        return CMW_ERROR_COMPONENT_FAILURE;
      }
      is_pipe1_2_shared++;
3400714e:	f8d8 3000 	ldr.w	r3, [r8]
34007152:	3301      	adds	r3, #1
34007154:	f8c8 3000 	str.w	r3, [r8]
    }
  }

  pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
34007158:	2300      	movs	r3, #0
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
3400715a:	68ea      	ldr	r2, [r5, #12]
  pipe_conf.FrameRate = DCMIPP_FRAME_RATE_ALL;
3400715c:	9304      	str	r3, [sp, #16]
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
3400715e:	682b      	ldr	r3, [r5, #0]
  /* Hardware constraint, pitch must be multiple of 16 */
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
  pipe_conf.PixelPackerFormat = p_conf->output_format;
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34007160:	4426      	add	r6, r4
  pipe_conf.PixelPipePitch = p_conf->output_width * p_conf->output_bpp;
34007162:	4353      	muls	r3, r2
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
34007164:	330f      	adds	r3, #15
34007166:	f023 030f 	bic.w	r3, r3, #15
  pipe_conf.PixelPackerFormat = p_conf->output_format;
3400716a:	68aa      	ldr	r2, [r5, #8]
  pipe_conf.PixelPipePitch = (pipe_conf.PixelPipePitch + 15) & (uint32_t) ~15;
3400716c:	9305      	str	r3, [sp, #20]
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
3400716e:	7973      	ldrb	r3, [r6, #5]
  pipe_conf.PixelPackerFormat = p_conf->output_format;
34007170:	9206      	str	r2, [sp, #24]
  if (hcamera_dcmipp.PipeState[pipe] == HAL_DCMIPP_PIPE_STATE_RESET)
34007172:	b9c3      	cbnz	r3, 340071a6 <CMW_CAMERA_SetPipeConfig+0x15e>
  {
    ret = HAL_DCMIPP_PIPE_SetConfig(hdcmipp, pipe, &pipe_conf);
34007174:	4621      	mov	r1, r4
34007176:	4812      	ldr	r0, [pc, #72]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
34007178:	aa04      	add	r2, sp, #16
3400717a:	f00a f87f 	bl	3401127c <HAL_DCMIPP_PIPE_SetConfig>
    if (HAL_DCMIPP_PIPE_SetPixelPackerFormat(hdcmipp, pipe, pipe_conf.PixelPackerFormat) != HAL_OK)
    {
      return CMW_ERROR_COMPONENT_FAILURE;
    }

    if (HAL_DCMIPP_PIPE_SetPitch(hdcmipp, pipe, pipe_conf.PixelPipePitch) != HAL_OK)
3400717e:	2800      	cmp	r0, #0
34007180:	d184      	bne.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
    }
  }

  /* Update the pitch field so that application can use this information for
   * buffer alignement */
  *pitch = pipe_conf.PixelPipePitch;
34007182:	9b05      	ldr	r3, [sp, #20]
34007184:	603b      	str	r3, [r7, #0]
    return HAL_OK;
34007186:	2000      	movs	r0, #0
  return CMW_CAMERA_SetPipe(&hcamera_dcmipp, pipe, p_conf, pitch);
34007188:	e782      	b.n	34007090 <CMW_CAMERA_SetPipeConfig+0x48>
    ret = HAL_DCMIPP_PIPE_DisableRedBlueSwap(hdcmipp, pipe);
3400718a:	f00b ff79 	bl	34013080 <HAL_DCMIPP_PIPE_DisableRedBlueSwap>
3400718e:	e7cc      	b.n	3400712a <CMW_CAMERA_SetPipeConfig+0xe2>
      ret = HAL_DCMIPP_PIPE_EnableGammaConversion(hdcmipp, pipe);
34007190:	4621      	mov	r1, r4
34007192:	480b      	ldr	r0, [pc, #44]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
    if (p_conf->enable_gamma_conversion)
34007194:	d004      	beq.n	340071a0 <CMW_CAMERA_SetPipeConfig+0x158>
      ret = HAL_DCMIPP_PIPE_EnableGammaConversion(hdcmipp, pipe);
34007196:	f00b f881 	bl	3401229c <HAL_DCMIPP_PIPE_EnableGammaConversion>
      if (ret != HAL_OK)
3400719a:	2800      	cmp	r0, #0
3400719c:	d0ca      	beq.n	34007134 <CMW_CAMERA_SetPipeConfig+0xec>
3400719e:	e775      	b.n	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
      ret = HAL_DCMIPP_PIPE_DisableGammaConversion(hdcmipp, pipe);
340071a0:	f00b f89e 	bl	340122e0 <HAL_DCMIPP_PIPE_DisableGammaConversion>
340071a4:	e7f9      	b.n	3400719a <CMW_CAMERA_SetPipeConfig+0x152>
    if (HAL_DCMIPP_PIPE_SetPixelPackerFormat(hdcmipp, pipe, pipe_conf.PixelPackerFormat) != HAL_OK)
340071a6:	4621      	mov	r1, r4
340071a8:	4805      	ldr	r0, [pc, #20]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340071aa:	f00b fecb 	bl	34012f44 <HAL_DCMIPP_PIPE_SetPixelPackerFormat>
340071ae:	2800      	cmp	r0, #0
340071b0:	f47f af6c 	bne.w	3400708c <CMW_CAMERA_SetPipeConfig+0x44>
    if (HAL_DCMIPP_PIPE_SetPitch(hdcmipp, pipe, pipe_conf.PixelPipePitch) != HAL_OK)
340071b4:	4621      	mov	r1, r4
340071b6:	9a05      	ldr	r2, [sp, #20]
340071b8:	4801      	ldr	r0, [pc, #4]	@ (340071c0 <CMW_CAMERA_SetPipeConfig+0x178>)
340071ba:	f00b fe91 	bl	34012ee0 <HAL_DCMIPP_PIPE_SetPitch>
340071be:	e7de      	b.n	3400717e <CMW_CAMERA_SetPipeConfig+0x136>
340071c0:	3410e388 	.word	0x3410e388
340071c4:	3410e3d8 	.word	0x3410e3d8
340071c8:	3410e1d0 	.word	0x3410e1d0

340071cc <CMW_CAMERA_Start>:
  if (pipe >= DCMIPP_NUM_OF_PIPES)
340071cc:	2802      	cmp	r0, #2
{
340071ce:	460b      	mov	r3, r1
340071d0:	b513      	push	{r0, r1, r4, lr}
  if (pipe >= DCMIPP_NUM_OF_PIPES)
340071d2:	d815      	bhi.n	34007200 <CMW_CAMERA_Start+0x34>
  ret = HAL_DCMIPP_CSI_PIPE_Start(&hcamera_dcmipp, pipe, DCMIPP_VIRTUAL_CHANNEL0, (uint32_t)pbuff, mode);
340071d4:	4601      	mov	r1, r0
340071d6:	9200      	str	r2, [sp, #0]
340071d8:	480e      	ldr	r0, [pc, #56]	@ (34007214 <CMW_CAMERA_Start+0x48>)
340071da:	2200      	movs	r2, #0
340071dc:	f00a f8ec 	bl	340113b8 <HAL_DCMIPP_CSI_PIPE_Start>
  if (ret != HAL_OK)
340071e0:	b988      	cbnz	r0, 34007206 <CMW_CAMERA_Start+0x3a>
  if (!is_camera_started)
340071e2:	4c0d      	ldr	r4, [pc, #52]	@ (34007218 <CMW_CAMERA_Start+0x4c>)
340071e4:	6823      	ldr	r3, [r4, #0]
340071e6:	b113      	cbz	r3, 340071ee <CMW_CAMERA_Start+0x22>
  return ret;
340071e8:	2000      	movs	r0, #0
}
340071ea:	b002      	add	sp, #8
340071ec:	bd10      	pop	{r4, pc}
    ret = Camera_Drv.Start(&camera_bsp);
340071ee:	4b0b      	ldr	r3, [pc, #44]	@ (3400721c <CMW_CAMERA_Start+0x50>)
340071f0:	480b      	ldr	r0, [pc, #44]	@ (34007220 <CMW_CAMERA_Start+0x54>)
340071f2:	689b      	ldr	r3, [r3, #8]
340071f4:	4798      	blx	r3
    if (ret != CMW_ERROR_NONE)
340071f6:	b948      	cbnz	r0, 3400720c <CMW_CAMERA_Start+0x40>
    is_camera_started++;
340071f8:	6823      	ldr	r3, [r4, #0]
340071fa:	3301      	adds	r3, #1
340071fc:	6023      	str	r3, [r4, #0]
340071fe:	e7f3      	b.n	340071e8 <CMW_CAMERA_Start+0x1c>
    return CMW_ERROR_WRONG_PARAM;
34007200:	f06f 0001 	mvn.w	r0, #1
34007204:	e7f1      	b.n	340071ea <CMW_CAMERA_Start+0x1e>
    return CMW_ERROR_PERIPH_FAILURE;
34007206:	f06f 0003 	mvn.w	r0, #3
3400720a:	e7ee      	b.n	340071ea <CMW_CAMERA_Start+0x1e>
      return CMW_ERROR_COMPONENT_FAILURE;
3400720c:	f06f 0004 	mvn.w	r0, #4
34007210:	e7eb      	b.n	340071ea <CMW_CAMERA_Start+0x1e>
34007212:	bf00      	nop
34007214:	3410e388 	.word	0x3410e388
34007218:	3410e1d4 	.word	0x3410e1d4
3400721c:	3410e320 	.word	0x3410e320
34007220:	3410e1dc 	.word	0x3410e1dc

34007224 <CMW_CAMERA_SetGain>:
  if(Camera_Drv.SetGain == NULL)
34007224:	4b08      	ldr	r3, [pc, #32]	@ (34007248 <CMW_CAMERA_SetGain+0x24>)
{
34007226:	b510      	push	{r4, lr}
  if(Camera_Drv.SetGain == NULL)
34007228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
3400722a:	4604      	mov	r4, r0
  if(Camera_Drv.SetGain == NULL)
3400722c:	b133      	cbz	r3, 3400723c <CMW_CAMERA_SetGain+0x18>
  ret = Camera_Drv.SetGain(&camera_bsp, Gain);
3400722e:	4601      	mov	r1, r0
34007230:	4806      	ldr	r0, [pc, #24]	@ (3400724c <CMW_CAMERA_SetGain+0x28>)
34007232:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34007234:	b928      	cbnz	r0, 34007242 <CMW_CAMERA_SetGain+0x1e>
  Camera_Ctx.Gain = Gain;
34007236:	4b06      	ldr	r3, [pc, #24]	@ (34007250 <CMW_CAMERA_SetGain+0x2c>)
34007238:	621c      	str	r4, [r3, #32]
}
3400723a:	bd10      	pop	{r4, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
3400723c:	f06f 000a 	mvn.w	r0, #10
34007240:	e7fb      	b.n	3400723a <CMW_CAMERA_SetGain+0x16>
    return CMW_ERROR_COMPONENT_FAILURE;
34007242:	f06f 0004 	mvn.w	r0, #4
34007246:	e7f8      	b.n	3400723a <CMW_CAMERA_SetGain+0x16>
34007248:	3410e320 	.word	0x3410e320
3400724c:	3410e1dc 	.word	0x3410e1dc
34007250:	3410e394 	.word	0x3410e394

34007254 <CB_ISP_SetSensorGain>:
  if (CMW_CAMERA_SetGain(gain) != CMW_ERROR_NONE)
34007254:	4608      	mov	r0, r1
{
34007256:	b508      	push	{r3, lr}
  if (CMW_CAMERA_SetGain(gain) != CMW_ERROR_NONE)
34007258:	f7ff ffe4 	bl	34007224 <CMW_CAMERA_SetGain>
  return ISP_OK;
3400725c:	2800      	cmp	r0, #0
}
3400725e:	bf14      	ite	ne
34007260:	2079      	movne	r0, #121	@ 0x79
34007262:	2000      	moveq	r0, #0
34007264:	bd08      	pop	{r3, pc}
	...

34007268 <CMW_CAMERA_SetExposure>:
  if(Camera_Drv.SetExposure == NULL)
34007268:	4b08      	ldr	r3, [pc, #32]	@ (3400728c <CMW_CAMERA_SetExposure+0x24>)
{
3400726a:	b510      	push	{r4, lr}
  if(Camera_Drv.SetExposure == NULL)
3400726c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
{
3400726e:	4604      	mov	r4, r0
  if(Camera_Drv.SetExposure == NULL)
34007270:	b133      	cbz	r3, 34007280 <CMW_CAMERA_SetExposure+0x18>
  ret = Camera_Drv.SetExposure(&camera_bsp, exposure);
34007272:	4601      	mov	r1, r0
34007274:	4806      	ldr	r0, [pc, #24]	@ (34007290 <CMW_CAMERA_SetExposure+0x28>)
34007276:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34007278:	b928      	cbnz	r0, 34007286 <CMW_CAMERA_SetExposure+0x1e>
  Camera_Ctx.Exposure = exposure;
3400727a:	4b06      	ldr	r3, [pc, #24]	@ (34007294 <CMW_CAMERA_SetExposure+0x2c>)
3400727c:	625c      	str	r4, [r3, #36]	@ 0x24
}
3400727e:	bd10      	pop	{r4, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
34007280:	f06f 000a 	mvn.w	r0, #10
34007284:	e7fb      	b.n	3400727e <CMW_CAMERA_SetExposure+0x16>
    return CMW_ERROR_COMPONENT_FAILURE;
34007286:	f06f 0004 	mvn.w	r0, #4
3400728a:	e7f8      	b.n	3400727e <CMW_CAMERA_SetExposure+0x16>
3400728c:	3410e320 	.word	0x3410e320
34007290:	3410e1dc 	.word	0x3410e1dc
34007294:	3410e394 	.word	0x3410e394

34007298 <CB_ISP_SetSensorExposure>:
  if (CMW_CAMERA_SetExposure(exposure) != CMW_ERROR_NONE)
34007298:	4608      	mov	r0, r1
{
3400729a:	b508      	push	{r3, lr}
  if (CMW_CAMERA_SetExposure(exposure) != CMW_ERROR_NONE)
3400729c:	f7ff ffe4 	bl	34007268 <CMW_CAMERA_SetExposure>
  return ISP_OK;
340072a0:	2800      	cmp	r0, #0
}
340072a2:	bf14      	ite	ne
340072a4:	2083      	movne	r0, #131	@ 0x83
340072a6:	2000      	moveq	r0, #0
340072a8:	bd08      	pop	{r3, pc}
	...

340072ac <CMW_CAMERA_GetSensorInfo>:
{
340072ac:	b508      	push	{r3, lr}
  if(Camera_Drv.GetSensorInfo == NULL)
340072ae:	4b07      	ldr	r3, [pc, #28]	@ (340072cc <CMW_CAMERA_GetSensorInfo+0x20>)
{
340072b0:	4601      	mov	r1, r0
  if(Camera_Drv.GetSensorInfo == NULL)
340072b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
340072b4:	b133      	cbz	r3, 340072c4 <CMW_CAMERA_GetSensorInfo+0x18>
  ret = Camera_Drv.GetSensorInfo(&camera_bsp, info);
340072b6:	4806      	ldr	r0, [pc, #24]	@ (340072d0 <CMW_CAMERA_GetSensorInfo+0x24>)
340072b8:	4798      	blx	r3
    return CMW_ERROR_COMPONENT_FAILURE;
340072ba:	2800      	cmp	r0, #0
340072bc:	bf18      	it	ne
340072be:	f06f 0004 	mvnne.w	r0, #4
}
340072c2:	bd08      	pop	{r3, pc}
    return CMW_ERROR_FEATURE_NOT_SUPPORTED;
340072c4:	f06f 000a 	mvn.w	r0, #10
340072c8:	e7fb      	b.n	340072c2 <CMW_CAMERA_GetSensorInfo+0x16>
340072ca:	bf00      	nop
340072cc:	3410e320 	.word	0x3410e320
340072d0:	3410e1dc 	.word	0x3410e1dc

340072d4 <CMW_CAMERA_Init>:
{
340072d4:	b570      	push	{r4, r5, r6, lr}
340072d6:	4604      	mov	r4, r0
340072d8:	b094      	sub	sp, #80	@ 0x50
  ISP_SensorInfoTypeDef info = {0};
340072da:	223c      	movs	r2, #60	@ 0x3c
340072dc:	2100      	movs	r1, #0
340072de:	a805      	add	r0, sp, #20
340072e0:	f018 ffba 	bl	34020258 <memset>
  initValues.width = initConf->width;
340072e4:	6823      	ldr	r3, [r4, #0]
  if (is_camera_init != 0)
340072e6:	4e22      	ldr	r6, [pc, #136]	@ (34007370 <CMW_CAMERA_Init+0x9c>)
  initValues.width = initConf->width;
340072e8:	9300      	str	r3, [sp, #0]
  initValues.height = initConf->height;
340072ea:	6863      	ldr	r3, [r4, #4]
340072ec:	9301      	str	r3, [sp, #4]
  initValues.fps = initConf->fps;
340072ee:	68a3      	ldr	r3, [r4, #8]
340072f0:	9302      	str	r3, [sp, #8]
  initValues.pixel_format = initConf->pixel_format;
340072f2:	68e3      	ldr	r3, [r4, #12]
340072f4:	9303      	str	r3, [sp, #12]
  initValues.mirrorFlip = initConf->mirror_flip;
340072f6:	6963      	ldr	r3, [r4, #20]
340072f8:	9304      	str	r3, [sp, #16]
  if (is_camera_init != 0)
340072fa:	6833      	ldr	r3, [r6, #0]
340072fc:	2b00      	cmp	r3, #0
340072fe:	d135      	bne.n	3400736c <CMW_CAMERA_Init+0x98>
  hcamera_dcmipp.Instance = DCMIPP;
34007300:	4d1c      	ldr	r5, [pc, #112]	@ (34007374 <CMW_CAMERA_Init+0xa0>)
34007302:	4b1d      	ldr	r3, [pc, #116]	@ (34007378 <CMW_CAMERA_Init+0xa4>)
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
34007304:	4628      	mov	r0, r5
  hcamera_dcmipp.Instance = DCMIPP;
34007306:	602b      	str	r3, [r5, #0]
  ret = MX_DCMIPP_ClockConfig(&hcamera_dcmipp);
34007308:	f017 feeb 	bl	3401f0e2 <MX_DCMIPP_ClockConfig>
  if (ret != HAL_OK)
3400730c:	b118      	cbz	r0, 34007316 <CMW_CAMERA_Init+0x42>
    return CMW_ERROR_PERIPH_FAILURE;
3400730e:	f06f 0003 	mvn.w	r0, #3
}
34007312:	b014      	add	sp, #80	@ 0x50
34007314:	bd70      	pop	{r4, r5, r6, pc}
  ret = HAL_DCMIPP_Init(&hcamera_dcmipp);
34007316:	4628      	mov	r0, r5
34007318:	f009 fde2 	bl	34010ee0 <HAL_DCMIPP_Init>
  if (ret != HAL_OK)
3400731c:	2800      	cmp	r0, #0
3400731e:	d1f6      	bne.n	3400730e <CMW_CAMERA_Init+0x3a>
  CMW_CAMERA_EnableGPIOs();
34007320:	f7ff fe58 	bl	34006fd4 <CMW_CAMERA_EnableGPIOs>
  ret = CMW_CAMERA_Probe_Sensor(&initValues, &detected_sensor);
34007324:	4668      	mov	r0, sp
34007326:	f7ff fcd3 	bl	34006cd0 <CMW_CAMERA_Probe_Sensor.constprop.0>
  if (ret != CMW_ERROR_NONE)
3400732a:	b110      	cbz	r0, 34007332 <CMW_CAMERA_Init+0x5e>
    return CMW_ERROR_UNKNOWN_COMPONENT;
3400732c:	f06f 0006 	mvn.w	r0, #6
34007330:	e7ef      	b.n	34007312 <CMW_CAMERA_Init+0x3e>
  ret = CMW_CAMERA_GetSensorInfo(&info);
34007332:	a805      	add	r0, sp, #20
34007334:	f7ff ffba 	bl	340072ac <CMW_CAMERA_GetSensorInfo>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34007338:	3005      	adds	r0, #5
3400733a:	d0f7      	beq.n	3400732c <CMW_CAMERA_Init+0x58>
  ret = CMW_CAMERA_SetExposure(info.exposure_min);
3400733c:	9812      	ldr	r0, [sp, #72]	@ 0x48
3400733e:	f7ff ff93 	bl	34007268 <CMW_CAMERA_SetExposure>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
34007342:	3005      	adds	r0, #5
34007344:	d0f2      	beq.n	3400732c <CMW_CAMERA_Init+0x58>
  ret = CMW_CAMERA_SetGain(info.gain_min);
34007346:	9810      	ldr	r0, [sp, #64]	@ 0x40
34007348:	f7ff ff6c 	bl	34007224 <CMW_CAMERA_SetGain>
  if (ret == CMW_ERROR_COMPONENT_FAILURE)
3400734c:	3005      	adds	r0, #5
3400734e:	d0ed      	beq.n	3400732c <CMW_CAMERA_Init+0x58>
  initConf->width = initValues.width;
34007350:	9b00      	ldr	r3, [sp, #0]
  camera_conf = *initConf;
34007352:	4d0a      	ldr	r5, [pc, #40]	@ (3400737c <CMW_CAMERA_Init+0xa8>)
  initConf->width = initValues.width;
34007354:	6023      	str	r3, [r4, #0]
  initConf->height = initValues.height ;
34007356:	9b01      	ldr	r3, [sp, #4]
34007358:	6063      	str	r3, [r4, #4]
  camera_conf = *initConf;
3400735a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400735c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  is_camera_init++;
3400735e:	6833      	ldr	r3, [r6, #0]
  camera_conf = *initConf;
34007360:	e894 0003 	ldmia.w	r4, {r0, r1}
34007364:	e885 0003 	stmia.w	r5, {r0, r1}
  is_camera_init++;
34007368:	3301      	adds	r3, #1
3400736a:	6033      	str	r3, [r6, #0]
    return CMW_ERROR_NONE;
3400736c:	2000      	movs	r0, #0
3400736e:	e7d0      	b.n	34007312 <CMW_CAMERA_Init+0x3e>
34007370:	3410e1d8 	.word	0x3410e1d8
34007374:	3410e388 	.word	0x3410e388
34007378:	58002000 	.word	0x58002000
3400737c:	3410e3d8 	.word	0x3410e3d8

34007380 <CMW_CAMERA_Run>:
  if(Camera_Drv.Run != NULL)
34007380:	4b03      	ldr	r3, [pc, #12]	@ (34007390 <CMW_CAMERA_Run+0x10>)
34007382:	68db      	ldr	r3, [r3, #12]
34007384:	b10b      	cbz	r3, 3400738a <CMW_CAMERA_Run+0xa>
      return Camera_Drv.Run(&camera_bsp);
34007386:	4803      	ldr	r0, [pc, #12]	@ (34007394 <CMW_CAMERA_Run+0x14>)
34007388:	4718      	bx	r3
}
3400738a:	4618      	mov	r0, r3
3400738c:	4770      	bx	lr
3400738e:	bf00      	nop
34007390:	3410e320 	.word	0x3410e320
34007394:	3410e1dc 	.word	0x3410e1dc

34007398 <HAL_DCMIPP_PIPE_VsyncEventCallback>:
  if(Camera_Drv.VsyncEventCallback != NULL)
34007398:	4b05      	ldr	r3, [pc, #20]	@ (340073b0 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x18>)
{
3400739a:	b510      	push	{r4, lr}
  if(Camera_Drv.VsyncEventCallback != NULL)
3400739c:	691b      	ldr	r3, [r3, #16]
{
3400739e:	460c      	mov	r4, r1
  if(Camera_Drv.VsyncEventCallback != NULL)
340073a0:	b10b      	cbz	r3, 340073a6 <HAL_DCMIPP_PIPE_VsyncEventCallback+0xe>
      Camera_Drv.VsyncEventCallback(&camera_bsp, Pipe);
340073a2:	4804      	ldr	r0, [pc, #16]	@ (340073b4 <HAL_DCMIPP_PIPE_VsyncEventCallback+0x1c>)
340073a4:	4798      	blx	r3
  CMW_CAMERA_PIPE_VsyncEventCallback(Pipe);
340073a6:	4620      	mov	r0, r4
340073a8:	f017 fa56 	bl	3401e858 <CMW_CAMERA_PIPE_VsyncEventCallback>
}
340073ac:	bd10      	pop	{r4, pc}
340073ae:	bf00      	nop
340073b0:	3410e320 	.word	0x3410e320
340073b4:	3410e1dc 	.word	0x3410e1dc

340073b8 <HAL_DCMIPP_PIPE_FrameEventCallback>:
  if(Camera_Drv.FrameEventCallback != NULL)
340073b8:	4b05      	ldr	r3, [pc, #20]	@ (340073d0 <HAL_DCMIPP_PIPE_FrameEventCallback+0x18>)
{
340073ba:	b510      	push	{r4, lr}
  if(Camera_Drv.FrameEventCallback != NULL)
340073bc:	695b      	ldr	r3, [r3, #20]
{
340073be:	460c      	mov	r4, r1
  if(Camera_Drv.FrameEventCallback != NULL)
340073c0:	b10b      	cbz	r3, 340073c6 <HAL_DCMIPP_PIPE_FrameEventCallback+0xe>
      Camera_Drv.FrameEventCallback(&camera_bsp, Pipe);
340073c2:	4804      	ldr	r0, [pc, #16]	@ (340073d4 <HAL_DCMIPP_PIPE_FrameEventCallback+0x1c>)
340073c4:	4798      	blx	r3
  CMW_CAMERA_PIPE_FrameEventCallback(Pipe);
340073c6:	4620      	mov	r0, r4
340073c8:	f017 f9b8 	bl	3401e73c <CMW_CAMERA_PIPE_FrameEventCallback>
}
340073cc:	bd10      	pop	{r4, pc}
340073ce:	bf00      	nop
340073d0:	3410e320 	.word	0x3410e320
340073d4:	3410e1dc 	.word	0x3410e1dc

340073d8 <HAL_DCMIPP_MspInit>:
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5ENSR, Periphs);
340073d8:	2304      	movs	r3, #4
{
340073da:	b530      	push	{r4, r5, lr}
340073dc:	4c1b      	ldr	r4, [pc, #108]	@ (3400744c <HAL_DCMIPP_MspInit+0x74>)
340073de:	b085      	sub	sp, #20
340073e0:	f8c4 3a7c 	str.w	r3, [r4, #2684]	@ 0xa7c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5ENR);
340073e4:	f8d4 227c 	ldr.w	r2, [r4, #636]	@ 0x27c
  *         @arg @ref LL_APB5_GRP1_PERIPH_VENC
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_ReleaseReset(uint32_t Periphs)
{
  WRITE_REG(RCC->APB5RSTCR, Periphs);
340073e8:	f504 5580 	add.w	r5, r4, #4096	@ 0x1000
  tmpreg = READ_REG(RCC->APB5ENR);
340073ec:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
340073ee:	9a03      	ldr	r2, [sp, #12]
  * @retval None
  */
__STATIC_INLINE void LL_APB5_GRP1_EnableClockLowPower(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB5LPENSR, Periphs);
340073f0:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB5LPENR);
340073f4:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
  HAL_NVIC_SetPriority(DCMIPP_IRQn, 0x07, 0);
340073f8:	2107      	movs	r1, #7
340073fa:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
340073fc:	9a02      	ldr	r2, [sp, #8]
340073fe:	2030      	movs	r0, #48	@ 0x30
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34007400:	f8c4 3a3c 	str.w	r3, [r4, #2620]	@ 0xa3c
34007404:	2200      	movs	r2, #0
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34007406:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
3400740a:	f009 fbaf 	bl	34010b6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMIPP_IRQn);
3400740e:	2030      	movs	r0, #48	@ 0x30
34007410:	f009 fc0a 	bl	34010c28 <HAL_NVIC_EnableIRQ>
  WRITE_REG(RCC->APB5ENSR, Periphs);
34007414:	2340      	movs	r3, #64	@ 0x40
34007416:	f8c4 3a7c 	str.w	r3, [r4, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
3400741a:	f8d4 227c 	ldr.w	r2, [r4, #636]	@ 0x27c
  HAL_NVIC_SetPriority(CSI_IRQn, 0x07, 0);
3400741e:	2107      	movs	r1, #7
34007420:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
34007422:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
34007424:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
34007428:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
3400742c:	202f      	movs	r0, #47	@ 0x2f
3400742e:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
34007430:	9a00      	ldr	r2, [sp, #0]
  WRITE_REG(RCC->APB5RSTSR, Periphs);
34007432:	f8c4 3a3c 	str.w	r3, [r4, #2620]	@ 0xa3c
34007436:	2200      	movs	r2, #0
  WRITE_REG(RCC->APB5RSTCR, Periphs);
34007438:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
3400743c:	f009 fb96 	bl	34010b6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34007440:	202f      	movs	r0, #47	@ 0x2f
}
34007442:	b005      	add	sp, #20
34007444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_NVIC_EnableIRQ(CSI_IRQn);
34007448:	f009 bbee 	b.w	34010c28 <HAL_NVIC_EnableIRQ>
3400744c:	56028000 	.word	0x56028000

34007450 <CMW_UTILS_get_dec_ratio_and_update>:

  return is_vertical ? DCMIPP_VDEC_ALL : DCMIPP_HDEC_ALL;
}

static uint32_t CMW_UTILS_get_dec_ratio_and_update(float *ratio, int is_vertical)
{
34007450:	b508      	push	{r3, lr}
  int dec_ratio = 1;

  while (*ratio >= 8) {
34007452:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
  int dec_ratio = 1;
34007456:	2301      	movs	r3, #1
    dec_ratio *= 2;
    *ratio /= 2;
34007458:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
  while (*ratio >= 8) {
3400745c:	edd0 7a00 	vldr	s15, [r0]
34007460:	eef4 7ac7 	vcmpe.f32	s15, s14
34007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007468:	da08      	bge.n	3400747c <CMW_UTILS_get_dec_ratio_and_update+0x2c>
  switch (dec_ratio) {
3400746a:	3b01      	subs	r3, #1
3400746c:	2b07      	cmp	r3, #7
3400746e:	d81a      	bhi.n	340074a6 <CMW_UTILS_get_dec_ratio_and_update+0x56>
34007470:	e8df f003 	tbb	[pc, r3]
34007474:	0f190a1f 	.word	0x0f190a1f
34007478:	14191919 	.word	0x14191919
    *ratio /= 2;
3400747c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dec_ratio *= 2;
34007480:	005b      	lsls	r3, r3, #1
    *ratio /= 2;
34007482:	edc0 7a00 	vstr	s15, [r0]
34007486:	e7e9      	b.n	3400745c <CMW_UTILS_get_dec_ratio_and_update+0xc>
    return is_vertical ? DCMIPP_VDEC_1_OUT_2 : DCMIPP_HDEC_1_OUT_2;
34007488:	2900      	cmp	r1, #0
3400748a:	bf0c      	ite	eq
3400748c:	2002      	moveq	r0, #2
3400748e:	2008      	movne	r0, #8
  }

  return CMW_UTILS_get_dec_ratio_from_decimal_ratio(dec_ratio, is_vertical);
}
34007490:	bd08      	pop	{r3, pc}
    return is_vertical ? DCMIPP_VDEC_1_OUT_4 : DCMIPP_HDEC_1_OUT_4;
34007492:	2900      	cmp	r1, #0
34007494:	bf0c      	ite	eq
34007496:	2004      	moveq	r0, #4
34007498:	2010      	movne	r0, #16
3400749a:	e7f9      	b.n	34007490 <CMW_UTILS_get_dec_ratio_and_update+0x40>
    return is_vertical ? DCMIPP_VDEC_1_OUT_8 : DCMIPP_HDEC_1_OUT_8;
3400749c:	2900      	cmp	r1, #0
3400749e:	bf0c      	ite	eq
340074a0:	2006      	moveq	r0, #6
340074a2:	2018      	movne	r0, #24
340074a4:	e7f4      	b.n	34007490 <CMW_UTILS_get_dec_ratio_and_update+0x40>
    assert(0);
340074a6:	2177      	movs	r1, #119	@ 0x77
340074a8:	4b03      	ldr	r3, [pc, #12]	@ (340074b8 <CMW_UTILS_get_dec_ratio_and_update+0x68>)
340074aa:	4a04      	ldr	r2, [pc, #16]	@ (340074bc <CMW_UTILS_get_dec_ratio_and_update+0x6c>)
340074ac:	4804      	ldr	r0, [pc, #16]	@ (340074c0 <CMW_UTILS_get_dec_ratio_and_update+0x70>)
340074ae:	f017 fe89 	bl	3401f1c4 <__assert_func>
  switch (dec_ratio) {
340074b2:	2000      	movs	r0, #0
340074b4:	e7ec      	b.n	34007490 <CMW_UTILS_get_dec_ratio_and_update+0x40>
340074b6:	bf00      	nop
340074b8:	34026d17 	.word	0x34026d17
340074bc:	3402d758 	.word	0x3402d758
340074c0:	34027794 	.word	0x34027794

340074c4 <CMW_UTILS_GetPipeConfig>:
{
340074c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
340074c6:	4614      	mov	r4, r2
340074c8:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
    CMW_UTILS_get_crop_config(cam_width, cam_height, p_conf->output_width, p_conf->output_height, crop);
340074cc:	6867      	ldr	r7, [r4, #4]
  if (p_conf->mode == CMW_Aspect_ratio_crop)
340074ce:	6992      	ldr	r2, [r2, #24]
  const float ratio_height = (float)cam_height / pipe_height;
340074d0:	ee06 7a90 	vmov	s13, r7
{
340074d4:	ee07 0a10 	vmov	s14, r0
340074d8:	ee07 1a90 	vmov	s15, r1
  const float ratio_height = (float)cam_height / pipe_height;
340074dc:	eeb8 5a66 	vcvt.f32.u32	s10, s13
  if (p_conf->mode == CMW_Aspect_ratio_crop)
340074e0:	2a00      	cmp	r2, #0
340074e2:	f040 808e 	bne.w	34007602 <CMW_UTILS_GetPipeConfig+0x13e>
  const float ratio_width = (float)cam_width / pipe_width ;
340074e6:	edd4 6a00 	vldr	s13, [r4]
340074ea:	eeb8 6a47 	vcvt.f32.u32	s12, s14
340074ee:	eef8 4a66 	vcvt.f32.u32	s9, s13
  const float ratio_height = (float)cam_height / pipe_height;
340074f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
  const float ratio_width = (float)cam_width / pipe_width ;
340074f6:	ee86 4a24 	vdiv.f32	s8, s12, s9
  const float ratio_height = (float)cam_height / pipe_height;
340074fa:	eec6 5a85 	vdiv.f32	s11, s13, s10
  const float ratio = MIN(ratio_width, ratio_height);
340074fe:	eeb4 4a65 	vcmp.f32	s8, s11
34007502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007506:	bf48      	it	mi
34007508:	eef0 5a44 	vmovmi.f32	s11, s8
  assert(ratio >= 1);
3400750c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
34007510:	eef4 5ac4 	vcmpe.f32	s11, s8
34007514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007518:	da05      	bge.n	34007526 <CMW_UTILS_GetPipeConfig+0x62>
3400751a:	214f      	movs	r1, #79	@ 0x4f
3400751c:	4b4f      	ldr	r3, [pc, #316]	@ (3400765c <CMW_UTILS_GetPipeConfig+0x198>)
3400751e:	4a50      	ldr	r2, [pc, #320]	@ (34007660 <CMW_UTILS_GetPipeConfig+0x19c>)
  assert(ratio < 64);
34007520:	4850      	ldr	r0, [pc, #320]	@ (34007664 <CMW_UTILS_GetPipeConfig+0x1a0>)
34007522:	f017 fe4f 	bl	3401f1c4 <__assert_func>
34007526:	ed9f 4a50 	vldr	s8, [pc, #320]	@ 34007668 <CMW_UTILS_GetPipeConfig+0x1a4>
3400752a:	eef4 5ac4 	vcmpe.f32	s11, s8
3400752e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34007532:	d403      	bmi.n	3400753c <CMW_UTILS_GetPipeConfig+0x78>
34007534:	2150      	movs	r1, #80	@ 0x50
34007536:	4b4d      	ldr	r3, [pc, #308]	@ (3400766c <CMW_UTILS_GetPipeConfig+0x1a8>)
34007538:	4a49      	ldr	r2, [pc, #292]	@ (34007660 <CMW_UTILS_GetPipeConfig+0x19c>)
3400753a:	e7f1      	b.n	34007520 <CMW_UTILS_GetPipeConfig+0x5c>
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
3400753c:	ee24 4aa5 	vmul.f32	s8, s9, s11
34007540:	eeb4 6ac4 	vcmpe.f32	s12, s8
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34007544:	ee65 5a25 	vmul.f32	s11, s10, s11
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
3400754c:	eef4 6ae5 	vcmpe.f32	s13, s11
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
34007550:	bfcc      	ite	gt
34007552:	eebc 6ac4 	vcvtgt.u32.f32	s12, s8
34007556:	eebc 6ac6 	vcvtle.u32.f32	s12, s12
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
3400755a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  crop->HStart = (cam_width - crop->HSize + 1) / 2;
3400755e:	4601      	mov	r1, r0
34007560:	ee16 2a10 	vmov	r2, s12
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34007564:	bfcc      	ite	gt
34007566:	eefc 6ae5 	vcvtgt.u32.f32	s13, s11
3400756a:	eefc 6ae6 	vcvtle.u32.f32	s13, s13
  crop->HStart = (cam_width - crop->HSize + 1) / 2;
3400756e:	3101      	adds	r1, #1
34007570:	1a89      	subs	r1, r1, r2
34007572:	0849      	lsrs	r1, r1, #1
34007574:	6059      	str	r1, [r3, #4]
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
34007576:	ee17 1a90 	vmov	r1, s15
3400757a:	ee16 2a90 	vmov	r2, s13
  crop->HSize = (uint32_t) MIN(pipe_width * ratio, cam_width);
3400757e:	ed83 6a03 	vstr	s12, [r3, #12]
  crop->VSize = (uint32_t) MIN(pipe_height * ratio, cam_height);
34007582:	edc3 6a02 	vstr	s13, [r3, #8]
    ratio_width = (float)crop->HSize / p_conf->output_width;
34007586:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    ratio_height = (float)crop->VSize / p_conf->output_height;
3400758a:	eef8 6a66 	vcvt.f32.u32	s13, s13
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
3400758e:	3101      	adds	r1, #1
34007590:	1a89      	subs	r1, r1, r2
  crop->PipeArea = DCMIPP_POSITIVE_AREA;
34007592:	2200      	movs	r2, #0
    ratio_width = (float)crop->HSize / p_conf->output_width;
34007594:	eec6 5a24 	vdiv.f32	s11, s12, s9
    ratio_height = (float)crop->VSize / p_conf->output_height;
34007598:	ee86 7a85 	vdiv.f32	s14, s13, s10
  crop->VStart = (cam_height - crop->VSize + 1) / 2;
3400759c:	0849      	lsrs	r1, r1, #1
3400759e:	6019      	str	r1, [r3, #0]
  crop->PipeArea = DCMIPP_POSITIVE_AREA;
340075a0:	611a      	str	r2, [r3, #16]

static void CMW_UTILS_get_scale_configs(CMW_DCMIPP_Conf_t *p_conf, float ratio_width, float ratio_height,
                                       DCMIPP_DecimationConfTypeDef *dec, DCMIPP_DownsizeTypeDef *down)
{
  dec->HRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_width, 0);
340075a2:	2100      	movs	r1, #0
340075a4:	4668      	mov	r0, sp
340075a6:	ed8d 7a01 	vstr	s14, [sp, #4]
340075aa:	edcd 5a00 	vstr	s11, [sp]
340075ae:	f7ff ff4f 	bl	34007450 <CMW_UTILS_get_dec_ratio_and_update>
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
340075b2:	2101      	movs	r1, #1
  dec->HRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_width, 0);
340075b4:	6068      	str	r0, [r5, #4]
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
340075b6:	a801      	add	r0, sp, #4
340075b8:	f7ff ff4a 	bl	34007450 <CMW_UTILS_get_dec_ratio_and_update>
  down->HRatio = (uint32_t) (8192 * ratio_width);
340075bc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 34007670 <CMW_UTILS_GetPipeConfig+0x1ac>
340075c0:	eddd 7a00 	vldr	s15, [sp]
340075c4:	ee67 7a87 	vmul.f32	s15, s15, s14
340075c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  dec->VRatio = CMW_UTILS_get_dec_ratio_and_update(&ratio_height, 1);
340075cc:	6028      	str	r0, [r5, #0]
  down->HRatio = (uint32_t) (8192 * ratio_width);
340075ce:	ee17 3a90 	vmov	r3, s15
  CMW_UTILS_get_down_config(ratio_width, ratio_height, p_conf->output_width, p_conf->output_height, down);
340075d2:	6820      	ldr	r0, [r4, #0]
  down->HRatio = (uint32_t) (8192 * ratio_width);
340075d4:	edc6 7a03 	vstr	s15, [r6, #12]
  down->VRatio = (uint32_t) (8192 * ratio_height);
340075d8:	eddd 7a01 	vldr	s15, [sp, #4]
340075dc:	ee67 7a87 	vmul.f32	s15, s15, s14
340075e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340075e4:	ee17 2a90 	vmov	r2, s15
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
340075e8:	4922      	ldr	r1, [pc, #136]	@ (34007674 <CMW_UTILS_GetPipeConfig+0x1b0>)
  down->VRatio = (uint32_t) (8192 * ratio_height);
340075ea:	edc6 7a02 	vstr	s15, [r6, #8]
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
340075ee:	fbb1 f3f3 	udiv	r3, r1, r3
  down->VDivFactor = (1024 * 8192 - 1) / down->VRatio;
340075f2:	fbb1 f1f2 	udiv	r1, r1, r2
  down->VSize = height;
340075f6:	e9c6 7000 	strd	r7, r0, [r6]
  down->HDivFactor = (1024 * 8192 - 1) / down->HRatio;
340075fa:	6173      	str	r3, [r6, #20]
  down->VDivFactor = (1024 * 8192 - 1) / down->VRatio;
340075fc:	6131      	str	r1, [r6, #16]
}
340075fe:	b003      	add	sp, #12
34007600:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (p_conf->mode == CMW_Aspect_ratio_fit)
34007602:	2a01      	cmp	r2, #1
34007604:	d10c      	bne.n	34007620 <CMW_UTILS_GetPipeConfig+0x15c>
    ratio_width = (float)cam_width / p_conf->output_width;
34007606:	edd4 6a00 	vldr	s13, [r4]
3400760a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
3400760e:	eef8 6a66 	vcvt.f32.u32	s13, s13
34007612:	eec7 5a26 	vdiv.f32	s11, s14, s13
    ratio_height = (float)crop->VSize / p_conf->output_height;
34007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400761a:	ee87 7a85 	vdiv.f32	s14, s15, s10
3400761e:	e7c0      	b.n	340075a2 <CMW_UTILS_GetPipeConfig+0xde>
  else if (p_conf->mode == CMW_Aspect_ratio_fullscreen)
34007620:	2a02      	cmp	r2, #2
34007622:	d106      	bne.n	34007632 <CMW_UTILS_GetPipeConfig+0x16e>
    ratio_height = (float) cam_height / p_conf->output_height;
34007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
34007628:	ee87 7a85 	vdiv.f32	s14, s15, s10
    ratio_width = (float) ratio_height;
3400762c:	eef0 5a47 	vmov.f32	s11, s14
34007630:	e7b7      	b.n	340075a2 <CMW_UTILS_GetPipeConfig+0xde>
  crop->HSize = roi->width;
34007632:	69e1      	ldr	r1, [r4, #28]
    ratio_width = (float)crop->HSize / p_conf->output_width;
34007634:	ed94 7a00 	vldr	s14, [r4]
34007638:	ee07 1a90 	vmov	s15, r1
3400763c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34007640:	eef8 7a67 	vcvt.f32.u32	s15, s15
  crop->HStart = roi->offset_x;
34007644:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  crop->VSize = roi->height;
34007646:	6a22      	ldr	r2, [r4, #32]
  crop->HStart = roi->offset_x;
34007648:	6058      	str	r0, [r3, #4]
  crop->VStart = roi->offset_y;
3400764a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    ratio_width = (float)crop->HSize / p_conf->output_width;
3400764c:	eec7 5a87 	vdiv.f32	s11, s15, s14
  crop->HSize = roi->width;
34007650:	60d9      	str	r1, [r3, #12]
    ratio_height = (float)crop->VSize / p_conf->output_height;
34007652:	ee07 2a90 	vmov	s15, r2
  crop->VSize = roi->height;
34007656:	609a      	str	r2, [r3, #8]
  crop->VStart = roi->offset_y;
34007658:	6018      	str	r0, [r3, #0]
    ratio_height = (float)crop->VSize / p_conf->output_height;
3400765a:	e7dc      	b.n	34007616 <CMW_UTILS_GetPipeConfig+0x152>
3400765c:	340277d1 	.word	0x340277d1
34007660:	3402d783 	.word	0x3402d783
34007664:	34027794 	.word	0x34027794
34007668:	42800000 	.word	0x42800000
3400766c:	340277dc 	.word	0x340277dc
34007670:	46000000 	.word	0x46000000
34007674:	007fffff 	.word	0x007fffff

34007678 <CMW_IMX335_FrameEventCallback>:
#endif
}

static void CMW_IMX335_FrameEventCallback(void *io_ctx, uint32_t pipe)
{
}
34007678:	4770      	bx	lr

3400767a <CMW_IMX335_SetWBRefMode>:
{
3400767a:	b508      	push	{r3, lr}
  ret = ISP_SetWBRefMode(&((CMW_IMX335_t *)io_ctx)->hIsp, Automatic, RefColorTemp);
3400767c:	3030      	adds	r0, #48	@ 0x30
3400767e:	f7fe fb5e 	bl	34005d3e <ISP_SetWBRefMode>
  return CMW_ERROR_NONE;
34007682:	2800      	cmp	r0, #0
}
34007684:	bf14      	ite	ne
34007686:	f06f 0003 	mvnne.w	r0, #3
3400768a:	2000      	moveq	r0, #0
3400768c:	bd08      	pop	{r3, pc}

3400768e <CMW_IMX335_ListWBRefModes>:
{
3400768e:	b508      	push	{r3, lr}
  ret = ISP_ListWBRefModes(&((CMW_IMX335_t *)io_ctx)->hIsp, RefColorTemp);
34007690:	3030      	adds	r0, #48	@ 0x30
34007692:	f7fe fb41 	bl	34005d18 <ISP_ListWBRefModes>
  return CMW_ERROR_NONE;
34007696:	2800      	cmp	r0, #0
}
34007698:	bf14      	ite	ne
3400769a:	f06f 0003 	mvnne.w	r0, #3
3400769e:	2000      	moveq	r0, #0
340076a0:	bd08      	pop	{r3, pc}

340076a2 <CMW_IMX335_ReadID>:
  return IMX335_ReadID(&((CMW_IMX335_t *)io_ctx)->ctx_driver, Id);
340076a2:	3008      	adds	r0, #8
340076a4:	f000 bf26 	b.w	340084f4 <IMX335_ReadID>

340076a8 <CMW_IMX335_SetTestPattern>:
  return IMX335_SetTestPattern(&((CMW_IMX335_t *)io_ctx)->ctx_driver, mode);
340076a8:	3008      	adds	r0, #8
340076aa:	f001 b82f 	b.w	3400870c <IMX335_SetTestPattern>
	...

340076b0 <CMW_IMX335_GetSensorInfo>:
{
340076b0:	b508      	push	{r3, lr}
340076b2:	460b      	mov	r3, r1
  if ((io_ctx ==  NULL) || (info == NULL))
340076b4:	b1b8      	cbz	r0, 340076e6 <CMW_IMX335_GetSensorInfo+0x36>
340076b6:	b1b1      	cbz	r1, 340076e6 <CMW_IMX335_GetSensorInfo+0x36>
    strcpy(info->name, IMX335_NAME);
340076b8:	4618      	mov	r0, r3
340076ba:	490c      	ldr	r1, [pc, #48]	@ (340076ec <CMW_IMX335_GetSensorInfo+0x3c>)
340076bc:	f019 f83d 	bl	3402073a <strcpy>
  info->bayer_pattern = IMX335_BAYER_PATTERN;
340076c0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
  info->height = IMX335_HEIGHT;
340076c4:	f44f 6122 	mov.w	r1, #2592	@ 0xa20
  info->bayer_pattern = IMX335_BAYER_PATTERN;
340076c8:	8402      	strh	r2, [r0, #32]
  info->height = IMX335_HEIGHT;
340076ca:	f44f 62f3 	mov.w	r2, #1944	@ 0x798
    strcpy(info->name, IMX335_NAME);
340076ce:	4603      	mov	r3, r0
  info->height = IMX335_HEIGHT;
340076d0:	e9c0 1209 	strd	r1, r2, [r0, #36]	@ 0x24
  info->gain_max = IMX335_GAIN_MAX;
340076d4:	2000      	movs	r0, #0
340076d6:	4a06      	ldr	r2, [pc, #24]	@ (340076f0 <CMW_IMX335_GetSensorInfo+0x40>)
  info->exposure_min = IMX335_EXPOSURE_MIN;
340076d8:	6358      	str	r0, [r3, #52]	@ 0x34
  info->gain_max = IMX335_GAIN_MAX;
340076da:	e9c3 020b 	strd	r0, r2, [r3, #44]	@ 0x2c
  info->exposure_max = IMX335_EXPOSURE_MAX;
340076de:	f248 12f2 	movw	r2, #33266	@ 0x81f2
340076e2:	639a      	str	r2, [r3, #56]	@ 0x38
}
340076e4:	bd08      	pop	{r3, pc}
    return CMW_ERROR_WRONG_PARAM;
340076e6:	f06f 0001 	mvn.w	r0, #1
340076ea:	e7fb      	b.n	340076e4 <CMW_IMX335_GetSensorInfo+0x34>
340076ec:	340277e7 	.word	0x340277e7
340076f0:	00011940 	.word	0x00011940

340076f4 <CMW_IMX335_SetMirrorFlip>:
  return IMX335_MirrorFlipConfig(&((CMW_IMX335_t *)io_ctx)->ctx_driver, mirrorFlip);
340076f4:	2903      	cmp	r1, #3
340076f6:	bf28      	it	cs
340076f8:	2103      	movcs	r1, #3
340076fa:	3008      	adds	r0, #8
340076fc:	f000 bfec 	b.w	340086d8 <IMX335_MirrorFlipConfig>

34007700 <CMW_IMX335_SetFramerate>:
{
34007700:	b4f0      	push	{r4, r5, r6, r7}
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34007702:	4d0e      	ldr	r5, [pc, #56]	@ (3400773c <CMW_IMX335_SetFramerate+0x3c>)
{
34007704:	b086      	sub	sp, #24
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
34007706:	ac01      	add	r4, sp, #4
{
34007708:	4607      	mov	r7, r0
3400770a:	460e      	mov	r6, r1
  const int32_t available_imx335_fps[] = {10, 15, 20, 25, 30};
3400770c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400770e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
34007710:	682b      	ldr	r3, [r5, #0]
34007712:	aa01      	add	r2, sp, #4
34007714:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < ARRAY_SIZE(available_imx335_fps); i++)
34007716:	2305      	movs	r3, #5
    if (framerate == available_imx335_fps[i])
34007718:	f852 1b04 	ldr.w	r1, [r2], #4
3400771c:	42b1      	cmp	r1, r6
3400771e:	d106      	bne.n	3400772e <CMW_IMX335_SetFramerate+0x2e>
      return IMX335_SetFramerate(&((CMW_IMX335_t *)io_ctx)->ctx_driver, framerate);
34007720:	4631      	mov	r1, r6
34007722:	f107 0008 	add.w	r0, r7, #8
}
34007726:	b006      	add	sp, #24
34007728:	bcf0      	pop	{r4, r5, r6, r7}
      return IMX335_SetFramerate(&((CMW_IMX335_t *)io_ctx)->ctx_driver, framerate);
3400772a:	f000 bfa9 	b.w	34008680 <IMX335_SetFramerate>
  for (int i = 0; i < ARRAY_SIZE(available_imx335_fps); i++)
3400772e:	3b01      	subs	r3, #1
34007730:	d1f2      	bne.n	34007718 <CMW_IMX335_SetFramerate+0x18>
}
34007732:	f06f 0001 	mvn.w	r0, #1
34007736:	b006      	add	sp, #24
34007738:	bcf0      	pop	{r4, r5, r6, r7}
3400773a:	4770      	bx	lr
3400773c:	3402613c 	.word	0x3402613c

34007740 <CMW_IMX335_SetFrequency>:
  return IMX335_SetFrequency(&((CMW_IMX335_t *)io_ctx)->ctx_driver, frequency);
34007740:	3008      	adds	r0, #8
34007742:	f000 bf79 	b.w	34008638 <IMX335_SetFrequency>

34007746 <CMW_IMX335_SetExposure>:
  return IMX335_SetExposure(&((CMW_IMX335_t *)io_ctx)->ctx_driver, exposure);
34007746:	3008      	adds	r0, #8
34007748:	f000 bf24 	b.w	34008594 <IMX335_SetExposure>

3400774c <CMW_IMX335_SetGain>:
  return IMX335_SetGain(&((CMW_IMX335_t *)io_ctx)->ctx_driver, gain);
3400774c:	3008      	adds	r0, #8
3400774e:	f000 bee9 	b.w	34008524 <IMX335_SetGain>

34007752 <CMW_IMX335_Run>:
{
34007752:	b508      	push	{r3, lr}
  ret = ISP_BackgroundProcess(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007754:	3030      	adds	r0, #48	@ 0x30
34007756:	f7fe facf 	bl	34005cf8 <ISP_BackgroundProcess>
  return CMW_ERROR_NONE;
3400775a:	2800      	cmp	r0, #0
}
3400775c:	bf14      	ite	ne
3400775e:	f06f 0003 	mvnne.w	r0, #3
34007762:	2000      	moveq	r0, #0
34007764:	bd08      	pop	{r3, pc}

34007766 <CMW_IMX335_DeInit>:
{
34007766:	b510      	push	{r4, lr}
34007768:	4604      	mov	r4, r0
  ret = ISP_DeInit(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400776a:	3030      	adds	r0, #48	@ 0x30
3400776c:	f7fe fa12 	bl	34005b94 <ISP_DeInit>
  if (ret)
34007770:	b110      	cbz	r0, 34007778 <CMW_IMX335_DeInit+0x12>
    return CMW_ERROR_COMPONENT_FAILURE;
34007772:	f06f 0004 	mvn.w	r0, #4
}
34007776:	bd10      	pop	{r4, pc}
  ret = IMX335_DeInit(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
34007778:	f104 0008 	add.w	r0, r4, #8
3400777c:	f000 feb1 	bl	340084e2 <IMX335_DeInit>
  if (ret)
34007780:	2800      	cmp	r0, #0
34007782:	d0f8      	beq.n	34007776 <CMW_IMX335_DeInit+0x10>
34007784:	e7f5      	b.n	34007772 <CMW_IMX335_DeInit+0xc>
	...

34007788 <CMW_IMX335_Start>:
{
34007788:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ISP_Init(&((CMW_IMX335_t *)io_ctx)->hIsp, ((CMW_IMX335_t *)io_ctx)->hdcmipp, 0, &((CMW_IMX335_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_IMX335);
3400778a:	4b10      	ldr	r3, [pc, #64]	@ (340077cc <CMW_IMX335_Start+0x44>)
3400778c:	f100 0530 	add.w	r5, r0, #48	@ 0x30
34007790:	9300      	str	r3, [sp, #0]
{
34007792:	4604      	mov	r4, r0
  ret = ISP_Init(&((CMW_IMX335_t *)io_ctx)->hIsp, ((CMW_IMX335_t *)io_ctx)->hdcmipp, 0, &((CMW_IMX335_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_IMX335);
34007794:	f8d0 10dc 	ldr.w	r1, [r0, #220]	@ 0xdc
34007798:	f100 03b8 	add.w	r3, r0, #184	@ 0xb8
3400779c:	2200      	movs	r2, #0
3400779e:	4628      	mov	r0, r5
340077a0:	f7fe f97c 	bl	34005a9c <ISP_Init>
  if (ret != ISP_OK)
340077a4:	b950      	cbnz	r0, 340077bc <CMW_IMX335_Start+0x34>
  ret = ISP_Start(&((CMW_IMX335_t *)io_ctx)->hIsp);
340077a6:	4628      	mov	r0, r5
340077a8:	f7fe fa06 	bl	34005bb8 <ISP_Start>
  if (ret != ISP_OK)
340077ac:	b950      	cbnz	r0, 340077c4 <CMW_IMX335_Start+0x3c>
  return IMX335_Start(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
340077ae:	f104 0008 	add.w	r0, r4, #8
}
340077b2:	b003      	add	sp, #12
340077b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return IMX335_Start(&((CMW_IMX335_t *)io_ctx)->ctx_driver);
340077b8:	f000 be76 	b.w	340084a8 <IMX335_Start>
    return CMW_ERROR_COMPONENT_FAILURE;
340077bc:	f06f 0004 	mvn.w	r0, #4
}
340077c0:	b003      	add	sp, #12
340077c2:	bd30      	pop	{r4, r5, pc}
      return CMW_ERROR_PERIPH_FAILURE;
340077c4:	f06f 0003 	mvn.w	r0, #3
340077c8:	e7fa      	b.n	340077c0 <CMW_IMX335_Start+0x38>
340077ca:	bf00      	nop
340077cc:	3402d7a0 	.word	0x3402d7a0

340077d0 <CMW_IMX335_Init>:
{
340077d0:	b538      	push	{r3, r4, r5, lr}
  if (width == 2592 && height == 1944)
340077d2:	e9d1 2300 	ldrd	r2, r3, [r1]
340077d6:	f5b2 6f22 	cmp.w	r2, #2592	@ 0xa20
{
340077da:	4605      	mov	r5, r0
340077dc:	460c      	mov	r4, r1
  if (width == 2592 && height == 1944)
340077de:	d002      	beq.n	340077e6 <CMW_IMX335_Init+0x16>
    return CMW_ERROR_WRONG_PARAM;
340077e0:	f06f 0001 	mvn.w	r0, #1
}
340077e4:	bd38      	pop	{r3, r4, r5, pc}
  if (width == 2592 && height == 1944)
340077e6:	f5b3 6ff3 	cmp.w	r3, #1944	@ 0x798
340077ea:	d1f9      	bne.n	340077e0 <CMW_IMX335_Init+0x10>
  ret = CMW_IMX335_SetMirrorFlip(io_ctx, initSensor->mirrorFlip);
340077ec:	6909      	ldr	r1, [r1, #16]
340077ee:	f7ff ff81 	bl	340076f4 <CMW_IMX335_SetMirrorFlip>
  if (ret)
340077f2:	2800      	cmp	r0, #0
340077f4:	d1f4      	bne.n	340077e0 <CMW_IMX335_Init+0x10>
  ret = IMX335_Init(&((CMW_IMX335_t *)io_ctx)->ctx_driver, resolution, initSensor->pixel_format);
340077f6:	2106      	movs	r1, #6
340077f8:	68e2      	ldr	r2, [r4, #12]
340077fa:	f105 0008 	add.w	r0, r5, #8
340077fe:	f000 fe33 	bl	34008468 <IMX335_Init>
    return CMW_ERROR_COMPONENT_FAILURE;
34007802:	2800      	cmp	r0, #0
34007804:	bf18      	it	ne
34007806:	f06f 0004 	mvnne.w	r0, #4
3400780a:	e7eb      	b.n	340077e4 <CMW_IMX335_Init+0x14>

3400780c <CMW_IMX335_VsyncEventCallback>:
  switch (pipe)
3400780c:	2901      	cmp	r1, #1
{
3400780e:	b510      	push	{r4, lr}
  switch (pipe)
34007810:	d007      	beq.n	34007822 <CMW_IMX335_VsyncEventCallback+0x16>
34007812:	2902      	cmp	r1, #2
34007814:	d00f      	beq.n	34007836 <CMW_IMX335_VsyncEventCallback+0x2a>
34007816:	b999      	cbnz	r1, 34007840 <CMW_IMX335_VsyncEventCallback+0x34>
}
34007818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncDumpFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400781c:	3030      	adds	r0, #48	@ 0x30
3400781e:	f7fe bae8 	b.w	34005df2 <ISP_IncDumpFrameId>
      ISP_IncMainFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007822:	f100 0430 	add.w	r4, r0, #48	@ 0x30
34007826:	4620      	mov	r0, r4
34007828:	f7fe fadf 	bl	34005dea <ISP_IncMainFrameId>
      ISP_GatherStatistics(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400782c:	4620      	mov	r0, r4
}
3400782e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_GatherStatistics(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007832:	f7fe bad8 	b.w	34005de6 <ISP_GatherStatistics>
      ISP_IncAncillaryFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
34007836:	3030      	adds	r0, #48	@ 0x30
}
34007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncAncillaryFrameId(&((CMW_IMX335_t *)io_ctx)->hIsp);
3400783c:	f7fe bad7 	b.w	34005dee <ISP_IncAncillaryFrameId>
}
34007840:	bd10      	pop	{r4, pc}
	...

34007844 <CMW_IMX335_Probe>:

int CMW_IMX335_Probe(CMW_IMX335_t *io_ctx, CMW_Sensor_if_t *imx335_if)
{
34007844:	b573      	push	{r0, r1, r4, r5, r6, lr}
34007846:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;
  io_ctx->ctx_driver.IO.Address = io_ctx->Address;
34007848:	8803      	ldrh	r3, [r0, #0]
{
3400784a:	460d      	mov	r5, r1
  io_ctx->ctx_driver.IO.Address = io_ctx->Address;
3400784c:	8203      	strh	r3, [r0, #16]
  io_ctx->ctx_driver.IO.Init = io_ctx->Init;
3400784e:	f8d0 30e4 	ldr.w	r3, [r0, #228]	@ 0xe4
  io_ctx->ctx_driver.IO.ReadReg = io_ctx->ReadReg;
  io_ctx->ctx_driver.IO.WriteReg = io_ctx->WriteReg;

  CMW_IMX335_PowerOn(io_ctx);

  ret = IMX335_RegisterBusIO(&io_ctx->ctx_driver, &io_ctx->ctx_driver.IO);
34007852:	3408      	adds	r4, #8
  io_ctx->ctx_driver.IO.Init = io_ctx->Init;
34007854:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.IO.DeInit = io_ctx->DeInit;
34007856:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
3400785a:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.IO.GetTick = io_ctx->GetTick;
3400785c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	@ 0xf4
34007860:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.IO.ReadReg = io_ctx->ReadReg;
34007862:	f8d0 30f0 	ldr.w	r3, [r0, #240]	@ 0xf0
34007866:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.IO.WriteReg = io_ctx->WriteReg;
34007868:	f8d0 30ec 	ldr.w	r3, [r0, #236]	@ 0xec
3400786c:	6143      	str	r3, [r0, #20]
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
3400786e:	f8d0 30fc 	ldr.w	r3, [r0, #252]	@ 0xfc
34007872:	2000      	movs	r0, #0
34007874:	4798      	blx	r3
  io_ctx->Delay(100);
34007876:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
3400787a:	2064      	movs	r0, #100	@ 0x64
3400787c:	4798      	blx	r3
  io_ctx->EnablePin(0);  /* RESET low (reset active low) */
3400787e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34007882:	2000      	movs	r0, #0
34007884:	4798      	blx	r3
  io_ctx->Delay(100);
34007886:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
3400788a:	2064      	movs	r0, #100	@ 0x64
3400788c:	4798      	blx	r3
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
3400788e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34007892:	2001      	movs	r0, #1
34007894:	4798      	blx	r3
  io_ctx->Delay(100);
34007896:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
3400789a:	2064      	movs	r0, #100	@ 0x64
3400789c:	4798      	blx	r3
  io_ctx->EnablePin(1);  /* RESET low (reset active low) */
3400789e:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
340078a2:	2001      	movs	r0, #1
340078a4:	4798      	blx	r3
  io_ctx->Delay(100);
340078a6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
340078aa:	2064      	movs	r0, #100	@ 0x64
340078ac:	4798      	blx	r3
  ret = IMX335_RegisterBusIO(&io_ctx->ctx_driver, &io_ctx->ctx_driver.IO);
340078ae:	4621      	mov	r1, r4
340078b0:	4620      	mov	r0, r4
340078b2:	f000 fdbd 	bl	34008430 <IMX335_RegisterBusIO>
  if (ret != IMX335_OK)
340078b6:	4606      	mov	r6, r0
340078b8:	b120      	cbz	r0, 340078c4 <CMW_IMX335_Probe+0x80>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
340078ba:	f06f 0404 	mvn.w	r4, #4
  imx335_if->SetFramerate = CMW_IMX335_SetFramerate;
  imx335_if->SetMirrorFlip = CMW_IMX335_SetMirrorFlip;
  imx335_if->GetSensorInfo = CMW_IMX335_GetSensorInfo;
  imx335_if->SetTestPattern = CMW_IMX335_SetTestPattern;
  return ret;
}
340078be:	4620      	mov	r0, r4
340078c0:	b002      	add	sp, #8
340078c2:	bd70      	pop	{r4, r5, r6, pc}
  ret = IMX335_ReadID(&io_ctx->ctx_driver, &id);
340078c4:	4620      	mov	r0, r4
340078c6:	a901      	add	r1, sp, #4
340078c8:	f000 fe14 	bl	340084f4 <IMX335_ReadID>
  if (ret != IMX335_OK)
340078cc:	4604      	mov	r4, r0
340078ce:	2800      	cmp	r0, #0
340078d0:	d1f3      	bne.n	340078ba <CMW_IMX335_Probe+0x76>
  if (id != IMX335_CHIP_ID)
340078d2:	9b01      	ldr	r3, [sp, #4]
  memset(imx335_if, 0, sizeof(*imx335_if));
340078d4:	2250      	movs	r2, #80	@ 0x50
      ret = CMW_ERROR_UNKNOWN_COMPONENT;
340078d6:	2b00      	cmp	r3, #0
340078d8:	bf08      	it	eq
340078da:	4604      	moveq	r4, r0
  memset(imx335_if, 0, sizeof(*imx335_if));
340078dc:	4631      	mov	r1, r6
340078de:	f105 0018 	add.w	r0, r5, #24
      ret = CMW_ERROR_UNKNOWN_COMPONENT;
340078e2:	bf18      	it	ne
340078e4:	f06f 0406 	mvnne.w	r4, #6
  memset(imx335_if, 0, sizeof(*imx335_if));
340078e8:	f018 fcb6 	bl	34020258 <memset>
  imx335_if->Init = CMW_IMX335_Init;
340078ec:	4b10      	ldr	r3, [pc, #64]	@ (34007930 <CMW_IMX335_Probe+0xec>)
340078ee:	602b      	str	r3, [r5, #0]
  imx335_if->Start = CMW_IMX335_Start;
340078f0:	4b10      	ldr	r3, [pc, #64]	@ (34007934 <CMW_IMX335_Probe+0xf0>)
340078f2:	60ab      	str	r3, [r5, #8]
  imx335_if->DeInit = CMW_IMX335_DeInit;
340078f4:	4b10      	ldr	r3, [pc, #64]	@ (34007938 <CMW_IMX335_Probe+0xf4>)
340078f6:	606b      	str	r3, [r5, #4]
  imx335_if->Run = CMW_IMX335_Run;
340078f8:	4b10      	ldr	r3, [pc, #64]	@ (3400793c <CMW_IMX335_Probe+0xf8>)
340078fa:	60eb      	str	r3, [r5, #12]
  imx335_if->VsyncEventCallback = CMW_IMX335_VsyncEventCallback;
340078fc:	4b10      	ldr	r3, [pc, #64]	@ (34007940 <CMW_IMX335_Probe+0xfc>)
340078fe:	612b      	str	r3, [r5, #16]
  imx335_if->FrameEventCallback = CMW_IMX335_FrameEventCallback;
34007900:	4b10      	ldr	r3, [pc, #64]	@ (34007944 <CMW_IMX335_Probe+0x100>)
34007902:	616b      	str	r3, [r5, #20]
  imx335_if->ReadID = CMW_IMX335_ReadID;
34007904:	4b10      	ldr	r3, [pc, #64]	@ (34007948 <CMW_IMX335_Probe+0x104>)
34007906:	61eb      	str	r3, [r5, #28]
  imx335_if->SetGain = CMW_IMX335_SetGain;
34007908:	4b10      	ldr	r3, [pc, #64]	@ (3400794c <CMW_IMX335_Probe+0x108>)
3400790a:	64ab      	str	r3, [r5, #72]	@ 0x48
  imx335_if->SetExposure = CMW_IMX335_SetExposure;
3400790c:	4b10      	ldr	r3, [pc, #64]	@ (34007950 <CMW_IMX335_Probe+0x10c>)
3400790e:	64eb      	str	r3, [r5, #76]	@ 0x4c
  imx335_if->SetWBRefMode = CMW_IMX335_SetWBRefMode;
34007910:	4b10      	ldr	r3, [pc, #64]	@ (34007954 <CMW_IMX335_Probe+0x110>)
34007912:	656b      	str	r3, [r5, #84]	@ 0x54
  imx335_if->ListWBRefModes = CMW_IMX335_ListWBRefModes;
34007914:	4b10      	ldr	r3, [pc, #64]	@ (34007958 <CMW_IMX335_Probe+0x114>)
34007916:	65ab      	str	r3, [r5, #88]	@ 0x58
  imx335_if->SetFrequency = CMW_IMX335_SetFrequency;
34007918:	4b10      	ldr	r3, [pc, #64]	@ (3400795c <CMW_IMX335_Probe+0x118>)
3400791a:	642b      	str	r3, [r5, #64]	@ 0x40
  imx335_if->SetFramerate = CMW_IMX335_SetFramerate;
3400791c:	4b10      	ldr	r3, [pc, #64]	@ (34007960 <CMW_IMX335_Probe+0x11c>)
3400791e:	646b      	str	r3, [r5, #68]	@ 0x44
  imx335_if->SetMirrorFlip = CMW_IMX335_SetMirrorFlip;
34007920:	4b10      	ldr	r3, [pc, #64]	@ (34007964 <CMW_IMX335_Probe+0x120>)
34007922:	62eb      	str	r3, [r5, #44]	@ 0x2c
  imx335_if->GetSensorInfo = CMW_IMX335_GetSensorInfo;
34007924:	4b10      	ldr	r3, [pc, #64]	@ (34007968 <CMW_IMX335_Probe+0x124>)
34007926:	662b      	str	r3, [r5, #96]	@ 0x60
  imx335_if->SetTestPattern = CMW_IMX335_SetTestPattern;
34007928:	4b10      	ldr	r3, [pc, #64]	@ (3400796c <CMW_IMX335_Probe+0x128>)
3400792a:	666b      	str	r3, [r5, #100]	@ 0x64
  return ret;
3400792c:	e7c7      	b.n	340078be <CMW_IMX335_Probe+0x7a>
3400792e:	bf00      	nop
34007930:	340077d1 	.word	0x340077d1
34007934:	34007789 	.word	0x34007789
34007938:	34007767 	.word	0x34007767
3400793c:	34007753 	.word	0x34007753
34007940:	3400780d 	.word	0x3400780d
34007944:	34007679 	.word	0x34007679
34007948:	340076a3 	.word	0x340076a3
3400794c:	3400774d 	.word	0x3400774d
34007950:	34007747 	.word	0x34007747
34007954:	3400767b 	.word	0x3400767b
34007958:	3400768f 	.word	0x3400768f
3400795c:	34007741 	.word	0x34007741
34007960:	34007701 	.word	0x34007701
34007964:	340076f5 	.word	0x340076f5
34007968:	340076b1 	.word	0x340076b1
3400796c:	340076a9 	.word	0x340076a9

34007970 <CMW_VD55G1_Read32>:
static int CMW_VD55G1_Read32(CMW_VD55G1_t *pObj, uint16_t addr, uint32_t *value)
{
  uint8_t data[4];
  int ret;

  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007970:	2304      	movs	r3, #4
{
34007972:	b537      	push	{r0, r1, r2, r4, r5, lr}
34007974:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007976:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
3400797a:	eb0d 0203 	add.w	r2, sp, r3
3400797e:	8800      	ldrh	r0, [r0, #0]
34007980:	47a8      	blx	r5
  if (ret)
34007982:	b908      	cbnz	r0, 34007988 <CMW_VD55G1_Read32+0x18>
    return ret;

  *value = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
34007984:	9b01      	ldr	r3, [sp, #4]
34007986:	6023      	str	r3, [r4, #0]

  return 0;
}
34007988:	b003      	add	sp, #12
3400798a:	bd30      	pop	{r4, r5, pc}

3400798c <VD55G1_ShutdownPin>:

static void VD55G1_ShutdownPin(struct VD55G1_Ctx *ctx, int value)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  p_ctx->ShutdownPin(value);
3400798c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
34007990:	4608      	mov	r0, r1
34007992:	4718      	bx	r3

34007994 <VD55G1_Read8>:
}

static int VD55G1_Read8(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t *value)
{
34007994:	b410      	push	{r4}
  return pObj->ReadReg(pObj->Address, addr, value, 1);
34007996:	6f84      	ldr	r4, [r0, #120]	@ 0x78
34007998:	2301      	movs	r3, #1
3400799a:	46a4      	mov	ip, r4
3400799c:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read8(p_ctx, addr, value);
}
340079a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->ReadReg(pObj->Address, addr, value, 1);
340079a4:	4760      	bx	ip

340079a6 <VD55G1_Read16>:

static int VD55G1_Read16(struct VD55G1_Ctx *ctx, uint16_t addr, uint16_t *value)
{
340079a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
340079a8:	2302      	movs	r3, #2
{
340079aa:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
340079ac:	6f85      	ldr	r5, [r0, #120]	@ 0x78
340079ae:	aa01      	add	r2, sp, #4
340079b0:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340079b4:	47a8      	blx	r5
  if (ret)
340079b6:	b910      	cbnz	r0, 340079be <VD55G1_Read16+0x18>
  *value = (data[1] << 8) | data[0];
340079b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
340079bc:	8023      	strh	r3, [r4, #0]
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read16(p_ctx, addr, value);
}
340079be:	b003      	add	sp, #12
340079c0:	bd30      	pop	{r4, r5, pc}

340079c2 <VD55G1_Read32>:

static int VD55G1_Read32(struct VD55G1_Ctx *ctx, uint16_t addr, uint32_t *value)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Read32(p_ctx, addr, value);
340079c2:	3808      	subs	r0, #8
340079c4:	f7ff bfd4 	b.w	34007970 <CMW_VD55G1_Read32>

340079c8 <VD55G1_Write8>:
}

static int VD55G1_Write8(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t value)
{
340079c8:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, &value, 1);
340079ca:	2301      	movs	r3, #1
340079cc:	6f44      	ldr	r4, [r0, #116]	@ 0x74
340079ce:	f88d 2007 	strb.w	r2, [sp, #7]
340079d2:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340079d6:	f10d 0207 	add.w	r2, sp, #7
340079da:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write8(p_ctx, addr, value);
}
340079dc:	b002      	add	sp, #8
340079de:	bd10      	pop	{r4, pc}

340079e0 <VD55G1_Write16>:

static int VD55G1_Write16(struct VD55G1_Ctx *ctx, uint16_t addr, uint16_t value)
{
340079e0:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 2);
340079e2:	2302      	movs	r3, #2
340079e4:	6f44      	ldr	r4, [r0, #116]	@ 0x74
340079e6:	f8ad 2006 	strh.w	r2, [sp, #6]
340079ea:	f830 0c08 	ldrh.w	r0, [r0, #-8]
340079ee:	f10d 0206 	add.w	r2, sp, #6
340079f2:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write16(p_ctx, addr, value);
}
340079f4:	b002      	add	sp, #8
340079f6:	bd10      	pop	{r4, pc}

340079f8 <VD55G1_Write32>:
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
340079f8:	2304      	movs	r3, #4

static int VD55G1_Write32(struct VD55G1_Ctx *ctx, uint16_t addr, uint32_t value)
{
340079fa:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
340079fc:	6f44      	ldr	r4, [r0, #116]	@ 0x74
340079fe:	9201      	str	r2, [sp, #4]
34007a00:	f830 0c08 	ldrh.w	r0, [r0, #-8]
34007a04:	eb0d 0203 	add.w	r2, sp, r3
34007a08:	47a0      	blx	r4
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  return CMW_VD55G1_Write32(p_ctx, addr, value);
}
34007a0a:	b002      	add	sp, #8
34007a0c:	bd10      	pop	{r4, pc}

34007a0e <VD55G1_WriteArray>:

static int VD55G1_WriteArray(struct VD55G1_Ctx *ctx, uint16_t addr, uint8_t *data, int data_len)
{
34007a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34007a12:	4680      	mov	r8, r0
34007a14:	460d      	mov	r5, r1
34007a16:	4616      	mov	r6, r2
34007a18:	461c      	mov	r4, r3
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);
  const unsigned int chunk_size = 128;
  uint16_t sz;
  int ret;

  while (data_len) {
34007a1a:	b914      	cbnz	r4, 34007a22 <VD55G1_WriteArray+0x14>
    data_len -= sz;
    addr += sz;
    data += sz;
  }

  return 0;
34007a1c:	4620      	mov	r0, r4
}
34007a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sz = MIN(data_len, chunk_size);
34007a22:	2c80      	cmp	r4, #128	@ 0x80
34007a24:	46a1      	mov	r9, r4
34007a26:	bf28      	it	cs
34007a28:	f04f 0980 	movcs.w	r9, #128	@ 0x80
34007a2c:	fa1f fa89 	uxth.w	sl, r9
    ret = p_ctx->WriteReg(p_ctx->Address, addr, data, sz);
34007a30:	4653      	mov	r3, sl
34007a32:	4632      	mov	r2, r6
34007a34:	4629      	mov	r1, r5
34007a36:	f8d8 7074 	ldr.w	r7, [r8, #116]	@ 0x74
34007a3a:	f838 0c08 	ldrh.w	r0, [r8, #-8]
34007a3e:	47b8      	blx	r7
    if (ret)
34007a40:	2800      	cmp	r0, #0
34007a42:	d1ec      	bne.n	34007a1e <VD55G1_WriteArray+0x10>
    addr += sz;
34007a44:	44aa      	add	sl, r5
    data_len -= sz;
34007a46:	eba4 0409 	sub.w	r4, r4, r9
    addr += sz;
34007a4a:	fa1f f58a 	uxth.w	r5, sl
    data += sz;
34007a4e:	444e      	add	r6, r9
34007a50:	e7e3      	b.n	34007a1a <VD55G1_WriteArray+0xc>

34007a52 <VD55G1_Delay>:

static void VD55G1_Delay(struct VD55G1_Ctx *ctx, uint32_t delay_in_ms)
{
  CMW_VD55G1_t *p_ctx = container_of(ctx, CMW_VD55G1_t, ctx_driver);

  p_ctx->Delay(delay_in_ms);
34007a52:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
34007a56:	4608      	mov	r0, r1
34007a58:	4718      	bx	r3

34007a5a <VD55G1_Log>:
  if (lvl > current_lvl)
    return ;

  vprintf(format, ap);
#endif
}
34007a5a:	4770      	bx	lr

34007a5c <CMW_VD55G1_GetSensorInfo>:
  * @param  pInfo pointer to sensor info structure
  * @retval Component status
  */
static int32_t CMW_VD55G1_GetSensorInfo(void *io_ctx, ISP_SensorInfoTypeDef *info)
{
  if ((io_ctx ==  NULL) || (info == NULL))
34007a5c:	b140      	cbz	r0, 34007a70 <CMW_VD55G1_GetSensorInfo+0x14>
34007a5e:	b139      	cbz	r1, 34007a70 <CMW_VD55G1_GetSensorInfo+0x14>
    return CMW_ERROR_WRONG_PARAM;
  }

  /* Return the default full resolution */
  info->width = VD55G1_MAX_WIDTH;
  info->height = VD55G1_MAX_HEIGHT;
34007a60:	f44f 7249 	mov.w	r2, #804	@ 0x324
34007a64:	f44f 7330 	mov.w	r3, #704	@ 0x2c0

  return CMW_ERROR_NONE;
34007a68:	2000      	movs	r0, #0
  info->height = VD55G1_MAX_HEIGHT;
34007a6a:	e9c1 2309 	strd	r2, r3, [r1, #36]	@ 0x24
  return CMW_ERROR_NONE;
34007a6e:	4770      	bx	lr
    return CMW_ERROR_WRONG_PARAM;
34007a70:	f06f 0001 	mvn.w	r0, #1
}
34007a74:	4770      	bx	lr

34007a76 <CMW_VD55G1_MirrorFlipConfig>:

static int32_t CMW_VD55G1_MirrorFlipConfig(void *io_ctx, uint32_t Config)
{
  int32_t ret = CMW_ERROR_NONE;

  switch (Config) {
34007a76:	2903      	cmp	r1, #3
34007a78:	d80d      	bhi.n	34007a96 <CMW_VD55G1_MirrorFlipConfig+0x20>
34007a7a:	e8df f001 	tbb	[pc, r1]
34007a7e:	0602      	.short	0x0602
34007a80:	0a08      	.short	0x0a08
    case CMW_MIRRORFLIP_NONE:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP_NONE);
34007a82:	2100      	movs	r1, #0
      break;
    case CMW_MIRRORFLIP_MIRROR:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR);
      break;
    case CMW_MIRRORFLIP_FLIP_MIRROR:
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP);
34007a84:	3008      	adds	r0, #8
34007a86:	f001 bbe6 	b.w	34009256 <VD55G1_SetFlipMirrorMode>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_FLIP);
34007a8a:	2101      	movs	r1, #1
34007a8c:	e7fa      	b.n	34007a84 <CMW_VD55G1_MirrorFlipConfig+0xe>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR);
34007a8e:	2102      	movs	r1, #2
34007a90:	e7f8      	b.n	34007a84 <CMW_VD55G1_MirrorFlipConfig+0xe>
      ret = VD55G1_SetFlipMirrorMode(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, VD55G1_MIRROR_FLIP);
34007a92:	2103      	movs	r1, #3
34007a94:	e7f6      	b.n	34007a84 <CMW_VD55G1_MirrorFlipConfig+0xe>
    default:
      ret = CMW_ERROR_PERIPH_FAILURE;
  }

  return ret;
}
34007a96:	f06f 0003 	mvn.w	r0, #3
34007a9a:	4770      	bx	lr

34007a9c <CMW_VD55G1_Stop>:
{
34007a9c:	b508      	push	{r3, lr}
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007a9e:	3008      	adds	r0, #8
34007aa0:	f001 fbd2 	bl	34009248 <VD55G1_Stop>
    return CMW_ERROR_PERIPH_FAILURE;
34007aa4:	2800      	cmp	r0, #0
}
34007aa6:	bf18      	it	ne
34007aa8:	f06f 0003 	mvnne.w	r0, #3
34007aac:	bd08      	pop	{r3, pc}

34007aae <CMW_VD55G1_Start>:
{
34007aae:	b510      	push	{r4, lr}
  ret = VD55G1_Start(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007ab0:	f100 0408 	add.w	r4, r0, #8
34007ab4:	4620      	mov	r0, r4
34007ab6:	f001 f93b 	bl	34008d30 <VD55G1_Start>
  if (ret) {
34007aba:	b120      	cbz	r0, 34007ac6 <CMW_VD55G1_Start+0x18>
    VD55G1_DeInit(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007abc:	4620      	mov	r0, r4
34007abe:	f001 f923 	bl	34008d08 <VD55G1_DeInit>
    return CMW_ERROR_PERIPH_FAILURE;
34007ac2:	f06f 0003 	mvn.w	r0, #3
}
34007ac6:	bd10      	pop	{r4, pc}

34007ac8 <CMW_VD55G1_DeInit>:
{
34007ac8:	b538      	push	{r3, r4, r5, lr}
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007aca:	f100 0508 	add.w	r5, r0, #8
{
34007ace:	4604      	mov	r4, r0
  ret = VD55G1_Stop(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007ad0:	4628      	mov	r0, r5
34007ad2:	f001 fbb9 	bl	34009248 <VD55G1_Stop>
  if (ret)
34007ad6:	b110      	cbz	r0, 34007ade <CMW_VD55G1_DeInit+0x16>
    return CMW_ERROR_PERIPH_FAILURE;
34007ad8:	f06f 0003 	mvn.w	r0, #3
}
34007adc:	bd38      	pop	{r3, r4, r5, pc}
  ret = VD55G1_DeInit(&((CMW_VD55G1_t *)io_ctx)->ctx_driver);
34007ade:	4628      	mov	r0, r5
34007ae0:	f001 f912 	bl	34008d08 <VD55G1_DeInit>
  if (ret)
34007ae4:	2800      	cmp	r0, #0
34007ae6:	d1f7      	bne.n	34007ad8 <CMW_VD55G1_DeInit+0x10>
  ((CMW_VD55G1_t *)io_ctx)->IsInitialized = 0;
34007ae8:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
  return CMW_ERROR_NONE;
34007aec:	e7f6      	b.n	34007adc <CMW_VD55G1_DeInit+0x14>
	...

34007af0 <CMW_VD55G1_Init>:
{
34007af0:	b530      	push	{r4, r5, lr}
34007af2:	4604      	mov	r4, r0
34007af4:	b08f      	sub	sp, #60	@ 0x3c
34007af6:	460d      	mov	r5, r1
  VD55G1_Config_t config = { 0 };
34007af8:	2234      	movs	r2, #52	@ 0x34
34007afa:	2100      	movs	r1, #0
34007afc:	a801      	add	r0, sp, #4
34007afe:	f018 fbab 	bl	34020258 <memset>
  if (((CMW_VD55G1_t *)io_ctx)->IsInitialized)
34007b02:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
34007b06:	bb63      	cbnz	r3, 34007b62 <CMW_VD55G1_Init+0x72>
  config.frame_rate = initSensor->fps;
34007b08:	68ab      	ldr	r3, [r5, #8]
34007b0a:	9303      	str	r3, [sp, #12]
  ret = CMW_VD55G1_GetResType(initSensor->width, initSensor->height, &config.resolution);
34007b0c:	e9d5 2300 	ldrd	r2, r3, [r5]
  if (width == 320 && height == 240)
34007b10:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
34007b14:	d104      	bne.n	34007b20 <CMW_VD55G1_Init+0x30>
34007b16:	2bf0      	cmp	r3, #240	@ 0xf0
34007b18:	d00b      	beq.n	34007b32 <CMW_VD55G1_Init+0x42>
    return CMW_ERROR_WRONG_PARAM;
34007b1a:	f06f 0001 	mvn.w	r0, #1
34007b1e:	e021      	b.n	34007b64 <CMW_VD55G1_Init+0x74>
  else if (width == 640 && height == 480)
34007b20:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
34007b24:	d120      	bne.n	34007b68 <CMW_VD55G1_Init+0x78>
34007b26:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
34007b2a:	d1f6      	bne.n	34007b1a <CMW_VD55G1_Init+0x2a>
    *res = VD55G1_RES_VGA_640_480;
34007b2c:	2301      	movs	r3, #1
      *res = VD55G1_RES_FULL_804_704;
34007b2e:	f88d 3008 	strb.w	r3, [sp, #8]
  config.ext_clock_freq_in_hz = ((CMW_VD55G1_t *)io_ctx)->ClockInHz;
34007b32:	6863      	ldr	r3, [r4, #4]
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007b34:	a901      	add	r1, sp, #4
  config.ext_clock_freq_in_hz = ((CMW_VD55G1_t *)io_ctx)->ClockInHz;
34007b36:	9301      	str	r3, [sp, #4]
  config.flip_mirror_mode = CMW_VD55G1_getMirrorFlipConfig(initSensor->mirrorFlip);
34007b38:	692b      	ldr	r3, [r5, #16]
  config.out_itf.clock_lane_swap_enable = 1;
34007b3a:	2501      	movs	r5, #1
  config.flip_mirror_mode = CMW_VD55G1_getMirrorFlipConfig(initSensor->mirrorFlip);
34007b3c:	2b03      	cmp	r3, #3
34007b3e:	bf28      	it	cs
34007b40:	2303      	movcs	r3, #3
34007b42:	f88d 3010 	strb.w	r3, [sp, #16]
  config.out_itf.clock_lane_swap_enable = 1;
34007b46:	4b12      	ldr	r3, [pc, #72]	@ (34007b90 <CMW_VD55G1_Init+0xa0>)
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007b48:	f104 0008 	add.w	r0, r4, #8
  config.out_itf.clock_lane_swap_enable = 1;
34007b4c:	e9cd 3505 	strd	r3, r5, [sp, #20]
    config.gpio_ctrl[i] = VD55G1_GPIO_GPIO_IN;
34007b50:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
  config.out_itf.data_lane_swap_enable = 1;
34007b54:	9507      	str	r5, [sp, #28]
    config.gpio_ctrl[i] = VD55G1_GPIO_GPIO_IN;
34007b56:	930d      	str	r3, [sp, #52]	@ 0x34
  ret = VD55G1_Init(&((CMW_VD55G1_t *)io_ctx)->ctx_driver, &config);
34007b58:	f000 ffd2 	bl	34008b00 <VD55G1_Init>
  if (ret)
34007b5c:	b9a0      	cbnz	r0, 34007b88 <CMW_VD55G1_Init+0x98>
  ((CMW_VD55G1_t *)io_ctx)->IsInitialized = 1;
34007b5e:	f884 5070 	strb.w	r5, [r4, #112]	@ 0x70
    return CMW_ERROR_NONE;
34007b62:	2000      	movs	r0, #0
}
34007b64:	b00f      	add	sp, #60	@ 0x3c
34007b66:	bd30      	pop	{r4, r5, pc}
  else if (width == 800 && height == 600)
34007b68:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
34007b6c:	d104      	bne.n	34007b78 <CMW_VD55G1_Init+0x88>
34007b6e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
34007b72:	d1d2      	bne.n	34007b1a <CMW_VD55G1_Init+0x2a>
    *res = VD55G1_RES_SXGA_800_600;
34007b74:	2302      	movs	r3, #2
34007b76:	e7da      	b.n	34007b2e <CMW_VD55G1_Init+0x3e>
  else if (width == 804 && height == 704)
34007b78:	f5b2 7f49 	cmp.w	r2, #804	@ 0x324
34007b7c:	d1cd      	bne.n	34007b1a <CMW_VD55G1_Init+0x2a>
34007b7e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
34007b82:	d1ca      	bne.n	34007b1a <CMW_VD55G1_Init+0x2a>
      *res = VD55G1_RES_FULL_804_704;
34007b84:	2303      	movs	r3, #3
34007b86:	e7d2      	b.n	34007b2e <CMW_VD55G1_Init+0x3e>
    return CMW_ERROR_PERIPH_FAILURE;
34007b88:	f06f 0003 	mvn.w	r0, #3
34007b8c:	e7ea      	b.n	34007b64 <CMW_VD55G1_Init+0x74>
34007b8e:	bf00      	nop
34007b90:	2fec1100 	.word	0x2fec1100

34007b94 <CMW_VD55G1_Probe>:
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
  io_ctx->Delay(20); /* NRST de-asserted during 20ms */
}

int CMW_VD55G1_Probe(CMW_VD55G1_t *io_ctx, CMW_Sensor_if_t *vd55g1_if)
{
34007b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
34007b96:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;

  io_ctx->ctx_driver.shutdown_pin = VD55G1_ShutdownPin;
34007b98:	4b26      	ldr	r3, [pc, #152]	@ (34007c34 <CMW_VD55G1_Probe+0xa0>)
{
34007b9a:	460d      	mov	r5, r1
  io_ctx->ctx_driver.shutdown_pin = VD55G1_ShutdownPin;
34007b9c:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.read8 = VD55G1_Read8;
34007b9e:	4b26      	ldr	r3, [pc, #152]	@ (34007c38 <CMW_VD55G1_Probe+0xa4>)
34007ba0:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.read16 = VD55G1_Read16;
34007ba2:	4b26      	ldr	r3, [pc, #152]	@ (34007c3c <CMW_VD55G1_Probe+0xa8>)
34007ba4:	6103      	str	r3, [r0, #16]
  io_ctx->ctx_driver.read32 = VD55G1_Read32;
34007ba6:	4b26      	ldr	r3, [pc, #152]	@ (34007c40 <CMW_VD55G1_Probe+0xac>)
34007ba8:	6143      	str	r3, [r0, #20]
  io_ctx->ctx_driver.write8 = VD55G1_Write8;
34007baa:	4b26      	ldr	r3, [pc, #152]	@ (34007c44 <CMW_VD55G1_Probe+0xb0>)
34007bac:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.write16 = VD55G1_Write16;
34007bae:	4b26      	ldr	r3, [pc, #152]	@ (34007c48 <CMW_VD55G1_Probe+0xb4>)
34007bb0:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.write32 = VD55G1_Write32;
34007bb2:	4b26      	ldr	r3, [pc, #152]	@ (34007c4c <CMW_VD55G1_Probe+0xb8>)
34007bb4:	6203      	str	r3, [r0, #32]
  io_ctx->ctx_driver.write_array = VD55G1_WriteArray;
34007bb6:	4b26      	ldr	r3, [pc, #152]	@ (34007c50 <CMW_VD55G1_Probe+0xbc>)
34007bb8:	6243      	str	r3, [r0, #36]	@ 0x24
  io_ctx->ctx_driver.delay = VD55G1_Delay;
34007bba:	4b26      	ldr	r3, [pc, #152]	@ (34007c54 <CMW_VD55G1_Probe+0xc0>)
34007bbc:	6283      	str	r3, [r0, #40]	@ 0x28
  io_ctx->ctx_driver.log = VD55G1_Log;
34007bbe:	4b26      	ldr	r3, [pc, #152]	@ (34007c58 <CMW_VD55G1_Probe+0xc4>)
34007bc0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
34007bc2:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
34007bc6:	2000      	movs	r0, #0
34007bc8:	4798      	blx	r3
  io_ctx->Delay(200); /* NRST signals asserted during 200ms */
34007bca:	20c8      	movs	r0, #200	@ 0xc8
34007bcc:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34007bd0:	4798      	blx	r3
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
34007bd2:	2001      	movs	r0, #1
34007bd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34007bd8:	4798      	blx	r3
  io_ctx->Delay(20); /* NRST de-asserted during 20ms */
34007bda:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34007bde:	2014      	movs	r0, #20
34007be0:	4798      	blx	r3
  if (!io_ctx->Init)
34007be2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34007be4:	b923      	cbnz	r3, 34007bf0 <CMW_VD55G1_Probe+0x5c>
  CMW_VD55G1_PowerOn(io_ctx);

  ret = VD55G1_RegisterBusIO(io_ctx);
  if (ret != CMW_ERROR_NONE)
  {
    return CMW_ERROR_COMPONENT_FAILURE;
34007be6:	f06f 0404 	mvn.w	r4, #4
  vd55g1_if->Start = CMW_VD55G1_Start;
  vd55g1_if->Stop = CMW_VD55G1_Stop;
  vd55g1_if->SetMirrorFlip = CMW_VD55G1_MirrorFlipConfig;
  vd55g1_if->GetSensorInfo = CMW_VD55G1_GetSensorInfo;
  return ret;
}
34007bea:	4620      	mov	r0, r4
34007bec:	b003      	add	sp, #12
34007bee:	bd30      	pop	{r4, r5, pc}
  ret = io_ctx->Init();
34007bf0:	4798      	blx	r3
  if (ret != CMW_ERROR_NONE)
34007bf2:	4601      	mov	r1, r0
34007bf4:	2800      	cmp	r0, #0
34007bf6:	d1f6      	bne.n	34007be6 <CMW_VD55G1_Probe+0x52>
  ret = CMW_VD55G1_Read32(io_ctx, VD55G1_REG_MODEL_ID, &reg32);
34007bf8:	4620      	mov	r0, r4
34007bfa:	aa01      	add	r2, sp, #4
34007bfc:	f7ff feb8 	bl	34007970 <CMW_VD55G1_Read32>
  if (ret)
34007c00:	4604      	mov	r4, r0
34007c02:	2800      	cmp	r0, #0
34007c04:	d1ef      	bne.n	34007be6 <CMW_VD55G1_Probe+0x52>
  if (id != VD55G1_CHIP_ID)
34007c06:	9a01      	ldr	r2, [sp, #4]
34007c08:	4b14      	ldr	r3, [pc, #80]	@ (34007c5c <CMW_VD55G1_Probe+0xc8>)
34007c0a:	429a      	cmp	r2, r3
34007c0c:	d1eb      	bne.n	34007be6 <CMW_VD55G1_Probe+0x52>
  memset(vd55g1_if, 0, sizeof(*vd55g1_if));
34007c0e:	4601      	mov	r1, r0
34007c10:	225c      	movs	r2, #92	@ 0x5c
34007c12:	f105 000c 	add.w	r0, r5, #12
34007c16:	f018 fb1f 	bl	34020258 <memset>
  vd55g1_if->Init = CMW_VD55G1_Init;
34007c1a:	4b11      	ldr	r3, [pc, #68]	@ (34007c60 <CMW_VD55G1_Probe+0xcc>)
34007c1c:	602b      	str	r3, [r5, #0]
  vd55g1_if->DeInit = CMW_VD55G1_DeInit;
34007c1e:	4b11      	ldr	r3, [pc, #68]	@ (34007c64 <CMW_VD55G1_Probe+0xd0>)
34007c20:	606b      	str	r3, [r5, #4]
  vd55g1_if->Start = CMW_VD55G1_Start;
34007c22:	4b11      	ldr	r3, [pc, #68]	@ (34007c68 <CMW_VD55G1_Probe+0xd4>)
34007c24:	60ab      	str	r3, [r5, #8]
  vd55g1_if->Stop = CMW_VD55G1_Stop;
34007c26:	4b11      	ldr	r3, [pc, #68]	@ (34007c6c <CMW_VD55G1_Probe+0xd8>)
34007c28:	61ab      	str	r3, [r5, #24]
  vd55g1_if->SetMirrorFlip = CMW_VD55G1_MirrorFlipConfig;
34007c2a:	4b11      	ldr	r3, [pc, #68]	@ (34007c70 <CMW_VD55G1_Probe+0xdc>)
34007c2c:	62eb      	str	r3, [r5, #44]	@ 0x2c
  vd55g1_if->GetSensorInfo = CMW_VD55G1_GetSensorInfo;
34007c2e:	4b11      	ldr	r3, [pc, #68]	@ (34007c74 <CMW_VD55G1_Probe+0xe0>)
34007c30:	662b      	str	r3, [r5, #96]	@ 0x60
  return ret;
34007c32:	e7da      	b.n	34007bea <CMW_VD55G1_Probe+0x56>
34007c34:	3400798d 	.word	0x3400798d
34007c38:	34007995 	.word	0x34007995
34007c3c:	340079a7 	.word	0x340079a7
34007c40:	340079c3 	.word	0x340079c3
34007c44:	340079c9 	.word	0x340079c9
34007c48:	340079e1 	.word	0x340079e1
34007c4c:	340079f9 	.word	0x340079f9
34007c50:	34007a0f 	.word	0x34007a0f
34007c54:	34007a53 	.word	0x34007a53
34007c58:	34007a5b 	.word	0x34007a5b
34007c5c:	53354731 	.word	0x53354731
34007c60:	34007af1 	.word	0x34007af1
34007c64:	34007ac9 	.word	0x34007ac9
34007c68:	34007aaf 	.word	0x34007aaf
34007c6c:	34007a9d 	.word	0x34007a9d
34007c70:	34007a77 	.word	0x34007a77
34007c74:	34007a5d 	.word	0x34007a5d

34007c78 <CMW_VD66GY_Read16>:
{
  return pObj->ReadReg(pObj->Address, addr, value, 1);
}

static int CMW_VD66GY_Read16(CMW_VD66GY_t *pObj, uint16_t addr, uint16_t *value)
{
34007c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t data[2];
  int ret;

  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
34007c7a:	2302      	movs	r3, #2
{
34007c7c:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 2);
34007c7e:	f8d0 5130 	ldr.w	r5, [r0, #304]	@ 0x130
34007c82:	aa01      	add	r2, sp, #4
34007c84:	8800      	ldrh	r0, [r0, #0]
34007c86:	47a8      	blx	r5
  if (ret)
34007c88:	b910      	cbnz	r0, 34007c90 <CMW_VD66GY_Read16+0x18>
    return ret;

  *value = (data[1] << 8) | data[0];
34007c8a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
34007c8e:	8023      	strh	r3, [r4, #0]

  return CMW_ERROR_NONE;
}
34007c90:	b003      	add	sp, #12
34007c92:	bd30      	pop	{r4, r5, pc}

34007c94 <VD6G_ShutdownPin>:

static void VD6G_ShutdownPin(struct VD6G_Ctx *ctx, int value)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  p_ctx->ShutdownPin(value);
34007c94:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
34007c98:	4608      	mov	r0, r1
34007c9a:	4718      	bx	r3

34007c9c <VD6G_Read8>:
}

static int VD6G_Read8(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t *value)
{
34007c9c:	b410      	push	{r4}
  return pObj->ReadReg(pObj->Address, addr, value, 1);
34007c9e:	f8d0 4128 	ldr.w	r4, [r0, #296]	@ 0x128
34007ca2:	2301      	movs	r3, #1
34007ca4:	46a4      	mov	ip, r4
34007ca6:	f830 0c08 	ldrh.w	r0, [r0, #-8]
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read8(p_ctx, addr, value);
}
34007caa:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->ReadReg(pObj->Address, addr, value, 1);
34007cae:	4760      	bx	ip

34007cb0 <VD6G_Read16>:

static int VD6G_Read16(struct VD6G_Ctx *ctx, uint16_t addr, uint16_t *value)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read16(p_ctx, addr, value);
34007cb0:	3808      	subs	r0, #8
34007cb2:	f7ff bfe1 	b.w	34007c78 <CMW_VD66GY_Read16>

34007cb6 <VD6G_Read32>:
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007cb6:	2304      	movs	r3, #4
}

static int VD6G_Read32(struct VD6G_Ctx *ctx, uint16_t addr, uint32_t *value)
{
34007cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
34007cba:	4614      	mov	r4, r2
  ret = pObj->ReadReg(pObj->Address, addr, data, 4);
34007cbc:	f8d0 5128 	ldr.w	r5, [r0, #296]	@ 0x128
34007cc0:	eb0d 0203 	add.w	r2, sp, r3
34007cc4:	f830 0c08 	ldrh.w	r0, [r0, #-8]
34007cc8:	47a8      	blx	r5
  if (ret)
34007cca:	b908      	cbnz	r0, 34007cd0 <VD6G_Read32+0x1a>
  *value = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];
34007ccc:	9b01      	ldr	r3, [sp, #4]
34007cce:	6023      	str	r3, [r4, #0]
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Read32(p_ctx, addr, value);
}
34007cd0:	b003      	add	sp, #12
34007cd2:	bd30      	pop	{r4, r5, pc}

34007cd4 <VD6G_Write8>:

static int VD6G_Write8(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t value)
{
34007cd4:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, &value, 1);
34007cd6:	2301      	movs	r3, #1
34007cd8:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007cdc:	f88d 2007 	strb.w	r2, [sp, #7]
34007ce0:	f830 0c08 	ldrh.w	r0, [r0, #-8]
34007ce4:	f10d 0207 	add.w	r2, sp, #7
34007ce8:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write8(p_ctx, addr, value);
}
34007cea:	b002      	add	sp, #8
34007cec:	bd10      	pop	{r4, pc}

34007cee <VD6G_Write16>:

static int VD6G_Write16(struct VD6G_Ctx *ctx, uint16_t addr, uint16_t value)
{
34007cee:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 2);
34007cf0:	2302      	movs	r3, #2
34007cf2:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007cf6:	f8ad 2006 	strh.w	r2, [sp, #6]
34007cfa:	f830 0c08 	ldrh.w	r0, [r0, #-8]
34007cfe:	f10d 0206 	add.w	r2, sp, #6
34007d02:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write16(p_ctx, addr, value);
}
34007d04:	b002      	add	sp, #8
34007d06:	bd10      	pop	{r4, pc}

34007d08 <VD6G_Write32>:
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007d08:	2304      	movs	r3, #4

static int VD6G_Write32(struct VD6G_Ctx *ctx, uint16_t addr, uint32_t value)
{
34007d0a:	b513      	push	{r0, r1, r4, lr}
  return pObj->WriteReg(pObj->Address, addr, (uint8_t *) &value, 4);
34007d0c:	f8d0 4124 	ldr.w	r4, [r0, #292]	@ 0x124
34007d10:	9201      	str	r2, [sp, #4]
34007d12:	f830 0c08 	ldrh.w	r0, [r0, #-8]
34007d16:	eb0d 0203 	add.w	r2, sp, r3
34007d1a:	47a0      	blx	r4
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  return CMW_VD66GY_Write32(p_ctx, addr, value);
}
34007d1c:	b002      	add	sp, #8
34007d1e:	bd10      	pop	{r4, pc}

34007d20 <VD6G_WriteArray>:

static int VD6G_WriteArray(struct VD6G_Ctx *ctx, uint16_t addr, uint8_t *data, int data_len)
{
34007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34007d24:	4680      	mov	r8, r0
34007d26:	460d      	mov	r5, r1
34007d28:	4616      	mov	r6, r2
34007d2a:	461c      	mov	r4, r3
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);
  const unsigned int chunk_size = 128;
  uint16_t sz;
  int ret;

  while (data_len) {
34007d2c:	b914      	cbnz	r4, 34007d34 <VD6G_WriteArray+0x14>
    data_len -= sz;
    addr += sz;
    data += sz;
  }

  return 0;
34007d2e:	4620      	mov	r0, r4
}
34007d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sz = MIN(data_len, chunk_size);
34007d34:	2c80      	cmp	r4, #128	@ 0x80
34007d36:	46a1      	mov	r9, r4
34007d38:	bf28      	it	cs
34007d3a:	f04f 0980 	movcs.w	r9, #128	@ 0x80
34007d3e:	fa1f fa89 	uxth.w	sl, r9
    ret = p_ctx->WriteReg(p_ctx->Address, addr, data, sz);
34007d42:	4653      	mov	r3, sl
34007d44:	4632      	mov	r2, r6
34007d46:	4629      	mov	r1, r5
34007d48:	f8d8 7124 	ldr.w	r7, [r8, #292]	@ 0x124
34007d4c:	f838 0c08 	ldrh.w	r0, [r8, #-8]
34007d50:	47b8      	blx	r7
    if (ret)
34007d52:	2800      	cmp	r0, #0
34007d54:	d1ec      	bne.n	34007d30 <VD6G_WriteArray+0x10>
    addr += sz;
34007d56:	44aa      	add	sl, r5
    data_len -= sz;
34007d58:	eba4 0409 	sub.w	r4, r4, r9
    addr += sz;
34007d5c:	fa1f f58a 	uxth.w	r5, sl
    data += sz;
34007d60:	444e      	add	r6, r9
34007d62:	e7e3      	b.n	34007d2c <VD6G_WriteArray+0xc>

34007d64 <VD6G_Delay>:

static void VD6G_Delay(struct VD6G_Ctx *ctx, uint32_t delay_in_ms)
{
  CMW_VD66GY_t *p_ctx = container_of(ctx, CMW_VD66GY_t, ctx_driver);

  p_ctx->Delay(delay_in_ms);
34007d64:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
34007d68:	4608      	mov	r0, r1
34007d6a:	4718      	bx	r3

34007d6c <VD6G_Log>:
  if (lvl > current_lvl)
    return ;

  vprintf(format, ap);
#endif
}
34007d6c:	4770      	bx	lr

34007d6e <CMW_VD66GY_FrameEventCallback>:
#endif
}

static void CMW_VD66GY_FrameEventCallback(void *io_ctx, uint32_t pipe)
{
}
34007d6e:	4770      	bx	lr

34007d70 <CMW_VD66GY_SetGain>:
{
34007d70:	b5f0      	push	{r4, r5, r6, r7, lr}
34007d72:	ed2d 8b08 	vpush	{d8-d11}
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007d76:	f100 0608 	add.w	r6, r0, #8
{
34007d7a:	b085      	sub	sp, #20
34007d7c:	460d      	mov	r5, r1
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007d7e:	4630      	mov	r0, r6
34007d80:	f10d 020b 	add.w	r2, sp, #11
34007d84:	f10d 010a 	add.w	r1, sp, #10
34007d88:	f002 f86c 	bl	34009e64 <VD6G_GetAnalogGainRegRange>
  if (ret)
34007d8c:	2800      	cmp	r0, #0
34007d8e:	f040 80bc 	bne.w	34007f0a <CMW_VD66GY_SetGain+0x19a>
  ret = VD6G_GetDigitalGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &dgain_regmin, &dgain_regmax);
34007d92:	4630      	mov	r0, r6
34007d94:	f10d 020e 	add.w	r2, sp, #14
34007d98:	a903      	add	r1, sp, #12
34007d9a:	f002 f8cf 	bl	34009f3c <VD6G_GetDigitalGainRegRange>
  if (ret)
34007d9e:	2800      	cmp	r0, #0
34007da0:	f040 80b3 	bne.w	34007f0a <CMW_VD66GY_SetGain+0x19a>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007da4:	2420      	movs	r4, #32
34007da6:	f89d 300a 	ldrb.w	r3, [sp, #10]
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007daa:	eeb3 ab04 	vmov.f64	d10, #52	@ 0x41a00000  20.0
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007dae:	f1c3 0320 	rsb	r3, r3, #32
34007db2:	fb94 f3f3 	sdiv	r3, r4, r3
34007db6:	ee00 3a10 	vmov	s0, r3
34007dba:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007dbe:	f01a fbcf 	bl	34022560 <log10>
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007dc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007dc6:	eeb0 8b40 	vmov.f64	d8, d0
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007dca:	1ae3      	subs	r3, r4, r3
34007dcc:	fb94 f3f3 	sdiv	r3, r4, r3
34007dd0:	ee00 3a10 	vmov	s0, r3
34007dd4:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34007dd8:	f01a fbc2 	bl	34022560 <log10>
34007ddc:	ed9f bb58 	vldr	d11, [pc, #352]	@ 34007f40 <CMW_VD66GY_SetGain+0x1d0>
34007de0:	ee20 0b0a 	vmul.f64	d0, d0, d10
34007de4:	ee20 0b0b 	vmul.f64	d0, d0, d11
34007de8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007dec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34007df0:	f89d 200c 	ldrb.w	r2, [sp, #12]
34007df4:	0a1b      	lsrs	r3, r3, #8
34007df6:	ee00 3a10 	vmov	s0, r3
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34007dfa:	ee17 7a90 	vmov	r7, s15
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007dfe:	ee07 2a90 	vmov	s15, r2
34007e02:	ed9f 9a55 	vldr	s18, [pc, #340]	@ 34007f58 <CMW_VD66GY_SetGain+0x1e8>
34007e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007e0a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007e0e:	eea7 0a89 	vfma.f32	s0, s15, s18
34007e12:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34007e16:	f01a fba3 	bl	34022560 <log10>
34007e1a:	ee20 0b0a 	vmul.f64	d0, d0, d10
34007e1e:	ee20 0b0b 	vmul.f64	d0, d0, d11
34007e22:	eefc 7bc0 	vcvt.u32.f64	s15, d0
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34007e2a:	f89d 200e 	ldrb.w	r2, [sp, #14]
34007e2e:	0a1b      	lsrs	r3, r3, #8
34007e30:	ee00 3a10 	vmov	s0, r3
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34007e34:	ee17 4a90 	vmov	r4, s15
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e38:	ee07 2a90 	vmov	s15, r2
34007e3c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34007e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34007e44:	eea7 0a89 	vfma.f32	s0, s15, s18
34007e48:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34007e4c:	f01a fb88 	bl	34022560 <log10>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34007e50:	ee28 8b0a 	vmul.f64	d8, d8, d10
34007e54:	ee28 8b0b 	vmul.f64	d8, d8, d11
34007e58:	eebc 8bc8 	vcvt.u32.f64	s16, d8
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e5c:	ee20 0b0a 	vmul.f64	d0, d0, d10
  if ((gain < dgain_min_mdB + again_min_mdB)
34007e60:	ee18 3a10 	vmov	r3, s16
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e64:	ee20 0b0b 	vmul.f64	d0, d0, d11
  if ((gain < dgain_min_mdB + again_min_mdB)
34007e68:	4423      	add	r3, r4
34007e6a:	42ab      	cmp	r3, r5
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34007e6c:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  if ((gain < dgain_min_mdB + again_min_mdB)
34007e70:	d861      	bhi.n	34007f36 <CMW_VD66GY_SetGain+0x1c6>
      || (gain > dgain_max_mdB + again_max_mdB))
34007e72:	ee10 3a10 	vmov	r3, s0
34007e76:	443b      	add	r3, r7
34007e78:	429d      	cmp	r5, r3
34007e7a:	d85c      	bhi.n	34007f36 <CMW_VD66GY_SetGain+0x1c6>
  if (gain <= again_max_mdB)
34007e7c:	42bd      	cmp	r5, r7
34007e7e:	d848      	bhi.n	34007f12 <CMW_VD66GY_SetGain+0x1a2>
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - dgain_min_mdB));
34007e80:	1b2d      	subs	r5, r5, r4
34007e82:	ee07 5a90 	vmov	s15, r5
34007e86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007e8a:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007e8e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34007e92:	ee81 1b0a 	vdiv.f64	d1, d1, d10
34007e96:	f01a fd07 	bl	340228a8 <pow>
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)dgain_min_mdB);
34007e9a:	ee07 4a90 	vmov	s15, r4
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - dgain_min_mdB));
34007e9e:	eeb0 9b40 	vmov.f64	d9, d0
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007ea2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007ea6:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007eaa:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34007eae:	ee81 1b0a 	vdiv.f64	d1, d1, d10
34007eb2:	f01a fcf9 	bl	340228a8 <pow>
  ret = VD6G_SetAnalogGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, (int) (32 - (32 / analog_linear_gain)));
34007eb6:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 34007f48 <CMW_VD66GY_SetGain+0x1d8>
34007eba:	ee87 6b09 	vdiv.f64	d6, d7, d9
34007ebe:	ee37 7b46 	vsub.f64	d7, d7, d6
34007ec2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
34007ec6:	4630      	mov	r0, r6
34007ec8:	ee17 1a90 	vmov	r1, s15
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007ecc:	eeb0 8b40 	vmov.f64	d8, d0
  ret = VD6G_SetAnalogGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, (int) (32 - (32 / analog_linear_gain)));
34007ed0:	f002 f804 	bl	34009edc <VD6G_SetAnalogGain>
  if (ret)
34007ed4:	b9c8      	cbnz	r0, 34007f0a <CMW_VD66GY_SetGain+0x19a>
  ret = VD6G_SetDigitalGain(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, FLOAT_TO_FP58(digital_linear_gain));
34007ed6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34007eda:	ee17 3a90 	vmov	r3, s15
34007ede:	b299      	uxth	r1, r3
34007ee0:	ee07 1a90 	vmov	s15, r1
34007ee4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34007ee8:	ee38 8b47 	vsub.f64	d8, d8, d7
34007eec:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 34007f50 <CMW_VD66GY_SetGain+0x1e0>
34007ef0:	ee28 8b07 	vmul.f64	d8, d8, d7
34007ef4:	eefc 7bc8 	vcvt.u32.f64	s15, d8
34007ef8:	edcd 7a01 	vstr	s15, [sp, #4]
34007efc:	f89d 3004 	ldrb.w	r3, [sp, #4]
34007f00:	4630      	mov	r0, r6
34007f02:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
34007f06:	f002 f847 	bl	34009f98 <VD6G_SetDigitalGain>
}
34007f0a:	b005      	add	sp, #20
34007f0c:	ecbd 8b08 	vpop	{d8-d11}
34007f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)again_max_mdB);
34007f12:	ee07 7a90 	vmov	s15, r7
34007f16:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34007f1a:	ee87 1b0b 	vdiv.f64	d1, d7, d11
34007f1e:	eeb2 0b04 	vmov.f64	d0, #36	@ 0x41200000  10.0
34007f22:	ee81 1b0a 	vdiv.f64	d1, d1, d10
34007f26:	f01a fcbf 	bl	340228a8 <pow>
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007f2a:	1bed      	subs	r5, r5, r7
    analog_linear_gain = MDECIBEL_TO_LINEAR((double)again_max_mdB);
34007f2c:	eeb0 9b40 	vmov.f64	d9, d0
    digital_linear_gain = MDECIBEL_TO_LINEAR((double)(gain - again_max_mdB));
34007f30:	ee07 5a90 	vmov	s15, r5
34007f34:	e7b5      	b.n	34007ea2 <CMW_VD66GY_SetGain+0x132>
    return -1;
34007f36:	f04f 30ff 	mov.w	r0, #4294967295
34007f3a:	e7e6      	b.n	34007f0a <CMW_VD66GY_SetGain+0x19a>
34007f3c:	f3af 8000 	nop.w
34007f40:	00000000 	.word	0x00000000
34007f44:	408f4000 	.word	0x408f4000
34007f48:	00000000 	.word	0x00000000
34007f4c:	40400000 	.word	0x40400000
34007f50:	00000000 	.word	0x00000000
34007f54:	40700000 	.word	0x40700000
34007f58:	3b800000 	.word	0x3b800000

34007f5c <CMW_VD66GY_SetExposure>:
  return VD6G_SetExposureTime(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, exposure);
34007f5c:	3008      	adds	r0, #8
34007f5e:	f002 b8bd 	b.w	3400a0dc <VD6G_SetExposureTime>

34007f62 <CMW_VD66GY_SetExposureMode>:
  switch (mode)
34007f62:	2901      	cmp	r1, #1
{
34007f64:	b508      	push	{r3, lr}
34007f66:	f100 0008 	add.w	r0, r0, #8
  switch (mode)
34007f6a:	d002      	beq.n	34007f72 <CMW_VD66GY_SetExposureMode+0x10>
34007f6c:	2902      	cmp	r1, #2
      ret = VD6G_SetExposureMode(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, VD6G_EXPOSURE_AUTO);
34007f6e:	bf18      	it	ne
34007f70:	2100      	movne	r1, #0
34007f72:	f001 ff6d 	bl	34009e50 <VD6G_SetExposureMode>
  return (ret == 0) ? CMW_ERROR_NONE : CMW_ERROR_UNKNOWN_FAILURE;
34007f76:	2800      	cmp	r0, #0
}
34007f78:	bf18      	it	ne
34007f7a:	f06f 0005 	mvnne.w	r0, #5
34007f7e:	bd08      	pop	{r3, pc}

34007f80 <CMW_VD66GY_SetWBRefMode>:
{
34007f80:	b508      	push	{r3, lr}
  ret = ISP_SetWBRefMode(&((CMW_VD66GY_t *)io_ctx)->hIsp, Automatic, RefColorTemp);
34007f82:	3070      	adds	r0, #112	@ 0x70
34007f84:	f7fd fedb 	bl	34005d3e <ISP_SetWBRefMode>
  return CMW_ERROR_NONE;
34007f88:	2800      	cmp	r0, #0
}
34007f8a:	bf14      	ite	ne
34007f8c:	f06f 0003 	mvnne.w	r0, #3
34007f90:	2000      	moveq	r0, #0
34007f92:	bd08      	pop	{r3, pc}

34007f94 <CMW_VD66GY_ListWBRefModes>:
{
34007f94:	b508      	push	{r3, lr}
  ret = ISP_ListWBRefModes(&((CMW_VD66GY_t *)io_ctx)->hIsp, RefColorTemp);
34007f96:	3070      	adds	r0, #112	@ 0x70
34007f98:	f7fd febe 	bl	34005d18 <ISP_ListWBRefModes>
  return CMW_ERROR_NONE;
34007f9c:	2800      	cmp	r0, #0
}
34007f9e:	bf14      	ite	ne
34007fa0:	f06f 0003 	mvnne.w	r0, #3
34007fa4:	2000      	moveq	r0, #0
34007fa6:	bd08      	pop	{r3, pc}

34007fa8 <CMW_VD66GY_GetSensorInfo>:
{
34007fa8:	b570      	push	{r4, r5, r6, lr}
34007faa:	ed2d 8b08 	vpush	{d8-d11}
34007fae:	460c      	mov	r4, r1
  if ((!io_ctx) || (info == NULL))
34007fb0:	4605      	mov	r5, r0
{
34007fb2:	b082      	sub	sp, #8
  if ((!io_ctx) || (info == NULL))
34007fb4:	2800      	cmp	r0, #0
34007fb6:	f000 80a0 	beq.w	340080fa <CMW_VD66GY_GetSensorInfo+0x152>
34007fba:	2900      	cmp	r1, #0
34007fbc:	f000 809d 	beq.w	340080fa <CMW_VD66GY_GetSensorInfo+0x152>
    strcpy(info->name, VD66GY_NAME);
34007fc0:	4951      	ldr	r1, [pc, #324]	@ (34008108 <CMW_VD66GY_GetSensorInfo+0x160>)
34007fc2:	4620      	mov	r0, r4
34007fc4:	f018 fbb9 	bl	3402073a <strcpy>
  info->bayer_pattern = ((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer - 1;
34007fc8:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
  info->height = VD6G_MAX_HEIGHT;
34007fcc:	f44f 628c 	mov.w	r2, #1120	@ 0x460
  info->bayer_pattern = ((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer - 1;
34007fd0:	3b01      	subs	r3, #1
34007fd2:	f884 3020 	strb.w	r3, [r4, #32]
  info->color_depth = VD6G_COLOR_DEPTH_RAW8;
34007fd6:	2308      	movs	r3, #8
34007fd8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  info->height = VD6G_MAX_HEIGHT;
34007fdc:	f240 5354 	movw	r3, #1364	@ 0x554
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007fe0:	3508      	adds	r5, #8
  info->height = VD6G_MAX_HEIGHT;
34007fe2:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ret = VD6G_GetAnalogGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &again_regmin, &again_regmax);
34007fe6:	4628      	mov	r0, r5
34007fe8:	f10d 0203 	add.w	r2, sp, #3
34007fec:	f10d 0102 	add.w	r1, sp, #2
34007ff0:	f001 ff38 	bl	34009e64 <VD6G_GetAnalogGainRegRange>
  if (ret)
34007ff4:	2800      	cmp	r0, #0
34007ff6:	d17c      	bne.n	340080f2 <CMW_VD66GY_GetSensorInfo+0x14a>
  ret = VD6G_GetDigitalGainRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &dgain_regmin, &dgain_regmax);
34007ff8:	4628      	mov	r0, r5
34007ffa:	f10d 0206 	add.w	r2, sp, #6
34007ffe:	a901      	add	r1, sp, #4
34008000:	f001 ff9c 	bl	34009f3c <VD6G_GetDigitalGainRegRange>
  if (ret)
34008004:	2800      	cmp	r0, #0
34008006:	d174      	bne.n	340080f2 <CMW_VD66GY_GetSensorInfo+0x14a>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34008008:	2620      	movs	r6, #32
3400800a:	f89d 3002 	ldrb.w	r3, [sp, #2]
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
3400800e:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 3400810c <CMW_VD66GY_GetSensorInfo+0x164>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34008012:	f1c3 0320 	rsb	r3, r3, #32
34008016:	fb96 f3f3 	sdiv	r3, r6, r3
3400801a:	ee00 3a10 	vmov	s0, r3
3400801e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
34008022:	f01a fa9d 	bl	34022560 <log10>
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
34008026:	f89d 3003 	ldrb.w	r3, [sp, #3]
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
3400802a:	eeb0 9b40 	vmov.f64	d9, d0
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
3400802e:	1af3      	subs	r3, r6, r3
34008030:	fb96 f3f3 	sdiv	r3, r6, r3
34008034:	ee00 3a10 	vmov	s0, r3
34008038:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
3400803c:	f01a fa90 	bl	34022560 <log10>
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34008040:	f8bd 3004 	ldrh.w	r3, [sp, #4]
34008044:	f89d 2004 	ldrb.w	r2, [sp, #4]
34008048:	0a1b      	lsrs	r3, r3, #8
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
3400804a:	eeb0 8b40 	vmov.f64	d8, d0
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
3400804e:	ee07 2a90 	vmov	s15, r2
34008052:	ee00 3a10 	vmov	s0, r3
34008056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400805a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
3400805e:	eea7 0a8b 	vfma.f32	s0, s15, s22
34008062:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34008066:	f01a fa7b 	bl	34022560 <log10>
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
3400806a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
3400806e:	f89d 2006 	ldrb.w	r2, [sp, #6]
34008072:	0a1b      	lsrs	r3, r3, #8
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
34008074:	eeb0 ab40 	vmov.f64	d10, d0
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
34008078:	ee07 2a90 	vmov	s15, r2
3400807c:	ee00 3a10 	vmov	s0, r3
34008080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34008084:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
34008088:	eea7 0a8b 	vfma.f32	s0, s15, s22
3400808c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
34008090:	f01a fa66 	bl	34022560 <log10>
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
34008094:	eeb3 7b04 	vmov.f64	d7, #52	@ 0x41a00000  20.0
34008098:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 34008100 <CMW_VD66GY_GetSensorInfo+0x158>
3400809c:	ee29 9b07 	vmul.f64	d9, d9, d7
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340080a0:	ee2a ab07 	vmul.f64	d10, d10, d7
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340080a4:	ee29 9b06 	vmul.f64	d9, d9, d6
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340080a8:	ee2a ab06 	vmul.f64	d10, d10, d6
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340080ac:	ee28 8b07 	vmul.f64	d8, d8, d7
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
340080b0:	ee20 0b07 	vmul.f64	d0, d0, d7
  again_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmin));
340080b4:	eebc 9bc9 	vcvt.u32.f64	s18, d9
  dgain_min_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmin));
340080b8:	eebc abca 	vcvt.u32.f64	s20, d10
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340080bc:	ee28 8b06 	vmul.f64	d8, d8, d6
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
340080c0:	ee20 0b06 	vmul.f64	d0, d0, d6
  info->gain_min = again_min_mdB + dgain_min_mdB;
340080c4:	ee1a 2a10 	vmov	r2, s20
340080c8:	ee19 3a10 	vmov	r3, s18
  again_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(32 / (32 - again_regmax));
340080cc:	eebc 8bc8 	vcvt.u32.f64	s16, d8
  dgain_max_mdB = (uint32_t) LINEAR_TO_MDECIBEL(FP58_TO_FLOAT(dgain_regmax));
340080d0:	eebc 0bc0 	vcvt.u32.f64	s0, d0
  info->gain_min = again_min_mdB + dgain_min_mdB;
340080d4:	4413      	add	r3, r2
340080d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  info->gain_max = again_max_mdB + dgain_max_mdB;
340080d8:	ee10 2a10 	vmov	r2, s0
340080dc:	ee18 3a10 	vmov	r3, s16
340080e0:	4413      	add	r3, r2
  ret = VD6G_GetExposureRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &info->exposure_min, &info->exposure_max);
340080e2:	4628      	mov	r0, r5
  info->gain_max = again_max_mdB + dgain_max_mdB;
340080e4:	6323      	str	r3, [r4, #48]	@ 0x30
  ret = VD6G_GetExposureRegRange(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &info->exposure_min, &info->exposure_max);
340080e6:	f104 0238 	add.w	r2, r4, #56	@ 0x38
340080ea:	f104 0134 	add.w	r1, r4, #52	@ 0x34
340080ee:	f001 ffa9 	bl	3400a044 <VD6G_GetExposureRegRange>
}
340080f2:	b002      	add	sp, #8
340080f4:	ecbd 8b08 	vpop	{d8-d11}
340080f8:	bd70      	pop	{r4, r5, r6, pc}
    return CMW_ERROR_WRONG_PARAM;
340080fa:	f06f 0001 	mvn.w	r0, #1
340080fe:	e7f8      	b.n	340080f2 <CMW_VD66GY_GetSensorInfo+0x14a>
34008100:	00000000 	.word	0x00000000
34008104:	408f4000 	.word	0x408f4000
34008108:	340277ee 	.word	0x340277ee
3400810c:	3b800000 	.word	0x3b800000

34008110 <CMW_VD66GY_Stop>:
{
34008110:	b508      	push	{r3, lr}
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008112:	3008      	adds	r0, #8
34008114:	f001 fe6a 	bl	34009dec <VD6G_Stop>
    return CMW_ERROR_PERIPH_FAILURE;
34008118:	2800      	cmp	r0, #0
}
3400811a:	bf18      	it	ne
3400811c:	f06f 0003 	mvnne.w	r0, #3
34008120:	bd08      	pop	{r3, pc}
	...

34008124 <CMW_VD66GY_Start>:
{
34008124:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ISP_Init(&((CMW_VD66GY_t *)io_ctx)->hIsp, ((CMW_VD66GY_t *)io_ctx)->hdcmipp, 0, &((CMW_VD66GY_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_VD66GY);
34008126:	4b10      	ldr	r3, [pc, #64]	@ (34008168 <CMW_VD66GY_Start+0x44>)
34008128:	f100 0570 	add.w	r5, r0, #112	@ 0x70
3400812c:	9300      	str	r3, [sp, #0]
{
3400812e:	4604      	mov	r4, r0
  ret = ISP_Init(&((CMW_VD66GY_t *)io_ctx)->hIsp, ((CMW_VD66GY_t *)io_ctx)->hdcmipp, 0, &((CMW_VD66GY_t *)io_ctx)->appliHelpers, &ISP_IQParamCacheInit_VD66GY);
34008130:	f8d0 111c 	ldr.w	r1, [r0, #284]	@ 0x11c
34008134:	f100 03f8 	add.w	r3, r0, #248	@ 0xf8
34008138:	2200      	movs	r2, #0
3400813a:	4628      	mov	r0, r5
3400813c:	f7fd fcae 	bl	34005a9c <ISP_Init>
  if (ret != ISP_OK)
34008140:	b978      	cbnz	r0, 34008162 <CMW_VD66GY_Start+0x3e>
  ret = ISP_Start(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008142:	4628      	mov	r0, r5
34008144:	f7fd fd38 	bl	34005bb8 <ISP_Start>
  if (ret != ISP_OK)
34008148:	b938      	cbnz	r0, 3400815a <CMW_VD66GY_Start+0x36>
  ret = VD6G_Start(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400814a:	3408      	adds	r4, #8
3400814c:	4620      	mov	r0, r4
3400814e:	f001 fd09 	bl	34009b64 <VD6G_Start>
  if (ret) {
34008152:	b120      	cbz	r0, 3400815e <CMW_VD66GY_Start+0x3a>
    VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008154:	4620      	mov	r0, r4
34008156:	f001 fcf5 	bl	34009b44 <VD6G_DeInit>
      return CMW_ERROR_PERIPH_FAILURE;
3400815a:	f06f 0003 	mvn.w	r0, #3
}
3400815e:	b003      	add	sp, #12
34008160:	bd30      	pop	{r4, r5, pc}
    return CMW_ERROR_COMPONENT_FAILURE;
34008162:	f06f 0004 	mvn.w	r0, #4
34008166:	e7fa      	b.n	3400815e <CMW_VD66GY_Start+0x3a>
34008168:	3402d9f8 	.word	0x3402d9f8

3400816c <CMW_VD66GY_DeInit>:
{
3400816c:	b538      	push	{r3, r4, r5, lr}
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
3400816e:	f100 0508 	add.w	r5, r0, #8
{
34008172:	4604      	mov	r4, r0
  ret = VD6G_Stop(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008174:	4628      	mov	r0, r5
34008176:	f001 fe39 	bl	34009dec <VD6G_Stop>
  if (ret)
3400817a:	b110      	cbz	r0, 34008182 <CMW_VD66GY_DeInit+0x16>
    return CMW_ERROR_PERIPH_FAILURE;
3400817c:	f06f 0003 	mvn.w	r0, #3
}
34008180:	bd38      	pop	{r3, r4, r5, pc}
  ret = VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008182:	4628      	mov	r0, r5
34008184:	f001 fcde 	bl	34009b44 <VD6G_DeInit>
  if (ret)
34008188:	2800      	cmp	r0, #0
3400818a:	d1f7      	bne.n	3400817c <CMW_VD66GY_DeInit+0x10>
  ((CMW_VD66GY_t *)io_ctx)->IsInitialized = 0;
3400818c:	f884 0120 	strb.w	r0, [r4, #288]	@ 0x120
  return CMW_ERROR_NONE;
34008190:	e7f6      	b.n	34008180 <CMW_VD66GY_DeInit+0x14>

34008192 <CMW_VD66GY_Run>:
{
34008192:	b508      	push	{r3, lr}
  ret = ISP_BackgroundProcess(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008194:	3070      	adds	r0, #112	@ 0x70
34008196:	f7fd fdaf 	bl	34005cf8 <ISP_BackgroundProcess>
  return CMW_ERROR_NONE;
3400819a:	2800      	cmp	r0, #0
}
3400819c:	bf14      	ite	ne
3400819e:	f06f 0003 	mvnne.w	r0, #3
340081a2:	2000      	moveq	r0, #0
340081a4:	bd08      	pop	{r3, pc}

340081a6 <CMW_VD66GY_Init>:
{
340081a6:	b570      	push	{r4, r5, r6, lr}
340081a8:	4604      	mov	r4, r0
340081aa:	b08e      	sub	sp, #56	@ 0x38
340081ac:	460d      	mov	r5, r1
  VD6G_Config_t config = { 0 };
340081ae:	2238      	movs	r2, #56	@ 0x38
340081b0:	2100      	movs	r1, #0
340081b2:	4668      	mov	r0, sp
340081b4:	f018 f850 	bl	34020258 <memset>
  if (((CMW_VD66GY_t *)io_ctx)->IsInitialized)
340081b8:	f894 3120 	ldrb.w	r3, [r4, #288]	@ 0x120
340081bc:	2b00      	cmp	r3, #0
340081be:	d14f      	bne.n	34008260 <CMW_VD66GY_Init+0xba>
  config.frame_rate = initSensor->fps;
340081c0:	68ab      	ldr	r3, [r5, #8]
340081c2:	9302      	str	r3, [sp, #8]
  ret = CMW_VD66GY_GetResType(initSensor->width, initSensor->height, &config.resolution);
340081c4:	e9d5 2300 	ldrd	r2, r3, [r5]
  if (width == 320 && height == 240)
340081c8:	f5b2 7fa0 	cmp.w	r2, #320	@ 0x140
340081cc:	d104      	bne.n	340081d8 <CMW_VD66GY_Init+0x32>
340081ce:	2bf0      	cmp	r3, #240	@ 0xf0
340081d0:	d00b      	beq.n	340081ea <CMW_VD66GY_Init+0x44>
    return CMW_ERROR_WRONG_PARAM;
340081d2:	f06f 0001 	mvn.w	r0, #1
340081d6:	e029      	b.n	3400822c <CMW_VD66GY_Init+0x86>
  else if (width == 640 && height == 480)
340081d8:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
340081dc:	d128      	bne.n	34008230 <CMW_VD66GY_Init+0x8a>
340081de:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
340081e2:	d1f6      	bne.n	340081d2 <CMW_VD66GY_Init+0x2c>
    *res = VD6G_RES_VGA_640_480;
340081e4:	2301      	movs	r3, #1
    *res = VD6G_RES_FULL_1120_1364;
340081e6:	f88d 3004 	strb.w	r3, [sp, #4]
  config.ext_clock_freq_in_hz = ((CMW_VD66GY_t *)io_ctx)->ClockInHz;
340081ea:	6863      	ldr	r3, [r4, #4]
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
340081ec:	f104 0608 	add.w	r6, r4, #8
  config.ext_clock_freq_in_hz = ((CMW_VD66GY_t *)io_ctx)->ClockInHz;
340081f0:	9300      	str	r3, [sp, #0]
  config.flip_mirror_mode = CMW_VD66GY_getMirrorFlipConfig(initSensor->mirrorFlip);
340081f2:	692b      	ldr	r3, [r5, #16]
  config.out_itf.clock_lane_swap_enable = 1;
340081f4:	2501      	movs	r5, #1
  config.flip_mirror_mode = CMW_VD66GY_getMirrorFlipConfig(initSensor->mirrorFlip);
340081f6:	2b03      	cmp	r3, #3
340081f8:	bf28      	it	cs
340081fa:	2303      	movcs	r3, #3
340081fc:	f88d 300c 	strb.w	r3, [sp, #12]
  config.out_itf.clock_lane_swap_enable = 1;
34008200:	2302      	movs	r3, #2
34008202:	e9cd 3506 	strd	r3, r5, [sp, #24]
    config.gpio_ctrl[i] = VD6G_GPIO_GPIO_IN;
34008206:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
3400820a:	4669      	mov	r1, sp
3400820c:	4630      	mov	r0, r6
  config.out_itf.data_lane1_swap_enable = 1;
3400820e:	e9cd 5508 	strd	r5, r5, [sp, #32]
    config.gpio_ctrl[i] = VD6G_GPIO_GPIO_IN;
34008212:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  ret = VD6G_Init(&((CMW_VD66GY_t *)io_ctx)->ctx_driver, &config);
34008216:	f001 f985 	bl	34009524 <VD6G_Init>
  if (ret)
3400821a:	b928      	cbnz	r0, 34008228 <CMW_VD66GY_Init+0x82>
  if (((CMW_VD66GY_t *)io_ctx)->ctx_driver.bayer == VD6G_BAYER_NONE)
3400821c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
34008220:	b9e3      	cbnz	r3, 3400825c <CMW_VD66GY_Init+0xb6>
    VD6G_DeInit(&((CMW_VD66GY_t *)io_ctx)->ctx_driver);
34008222:	4630      	mov	r0, r6
34008224:	f001 fc8e 	bl	34009b44 <VD6G_DeInit>
    return CMW_ERROR_PERIPH_FAILURE;
34008228:	f06f 0003 	mvn.w	r0, #3
}
3400822c:	b00e      	add	sp, #56	@ 0x38
3400822e:	bd70      	pop	{r4, r5, r6, pc}
  else if (width == 1024 && height == 768)
34008230:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34008234:	d104      	bne.n	34008240 <CMW_VD66GY_Init+0x9a>
34008236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400823a:	d1ca      	bne.n	340081d2 <CMW_VD66GY_Init+0x2c>
    *res = VD6G_RES_XGA_1024_768;
3400823c:	2303      	movs	r3, #3
3400823e:	e7d2      	b.n	340081e6 <CMW_VD66GY_Init+0x40>
  else if (width == 1120 && height == 720)
34008240:	f5b2 6f8c 	cmp.w	r2, #1120	@ 0x460
34008244:	d1c5      	bne.n	340081d2 <CMW_VD66GY_Init+0x2c>
34008246:	f5b3 7f34 	cmp.w	r3, #720	@ 0x2d0
3400824a:	d101      	bne.n	34008250 <CMW_VD66GY_Init+0xaa>
    *res = VD6G_RES_PORTRAIT_1120_720;
3400824c:	2307      	movs	r3, #7
3400824e:	e7ca      	b.n	340081e6 <CMW_VD66GY_Init+0x40>
  else if (width == 1120 && height == 1364)
34008250:	f240 5254 	movw	r2, #1364	@ 0x554
34008254:	4293      	cmp	r3, r2
34008256:	d1bc      	bne.n	340081d2 <CMW_VD66GY_Init+0x2c>
    *res = VD6G_RES_FULL_1120_1364;
34008258:	2308      	movs	r3, #8
3400825a:	e7c4      	b.n	340081e6 <CMW_VD66GY_Init+0x40>
  ((CMW_VD66GY_t *)io_ctx)->IsInitialized = 1;
3400825c:	f884 5120 	strb.w	r5, [r4, #288]	@ 0x120
    return CMW_ERROR_NONE;
34008260:	2000      	movs	r0, #0
34008262:	e7e3      	b.n	3400822c <CMW_VD66GY_Init+0x86>

34008264 <CMW_VD66GY_VsyncEventCallback>:
  switch (pipe)
34008264:	2901      	cmp	r1, #1
{
34008266:	b510      	push	{r4, lr}
  switch (pipe)
34008268:	d007      	beq.n	3400827a <CMW_VD66GY_VsyncEventCallback+0x16>
3400826a:	2902      	cmp	r1, #2
3400826c:	d00f      	beq.n	3400828e <CMW_VD66GY_VsyncEventCallback+0x2a>
3400826e:	b999      	cbnz	r1, 34008298 <CMW_VD66GY_VsyncEventCallback+0x34>
}
34008270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncDumpFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008274:	3070      	adds	r0, #112	@ 0x70
34008276:	f7fd bdbc 	b.w	34005df2 <ISP_IncDumpFrameId>
      ISP_IncMainFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400827a:	f100 0470 	add.w	r4, r0, #112	@ 0x70
3400827e:	4620      	mov	r0, r4
34008280:	f7fd fdb3 	bl	34005dea <ISP_IncMainFrameId>
      ISP_GatherStatistics(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008284:	4620      	mov	r0, r4
}
34008286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_GatherStatistics(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400828a:	f7fd bdac 	b.w	34005de6 <ISP_GatherStatistics>
      ISP_IncAncillaryFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
3400828e:	3070      	adds	r0, #112	@ 0x70
}
34008290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ISP_IncAncillaryFrameId(&((CMW_VD66GY_t *)io_ctx)->hIsp);
34008294:	f7fd bdab 	b.w	34005dee <ISP_IncAncillaryFrameId>
}
34008298:	bd10      	pop	{r4, pc}

3400829a <VD66GY_RegisterBusIO>:

int32_t VD66GY_RegisterBusIO(CMW_VD66GY_t *io_ctx)
{
  int ret;

  if (!io_ctx)
3400829a:	b118      	cbz	r0, 340082a4 <VD66GY_RegisterBusIO+0xa>
    return CMW_ERROR_COMPONENT_FAILURE;

  if (!io_ctx->Init)
3400829c:	f8d0 3124 	ldr.w	r3, [r0, #292]	@ 0x124
340082a0:	b103      	cbz	r3, 340082a4 <VD66GY_RegisterBusIO+0xa>
    return CMW_ERROR_COMPONENT_FAILURE;

  ret = io_ctx->Init();
340082a2:	4718      	bx	r3

  return ret;
}
340082a4:	f06f 0004 	mvn.w	r0, #4
340082a8:	4770      	bx	lr

340082aa <VD66GY_ReadID>:

int32_t VD66GY_ReadID(CMW_VD66GY_t *io_ctx, uint32_t *Id)
{
340082aa:	b513      	push	{r0, r1, r4, lr}
340082ac:	460c      	mov	r4, r1
  uint16_t reg16;
  int32_t ret;

  ret = CMW_VD66GY_Read16(io_ctx, VD66GY_REG_MODEL_ID, &reg16);
340082ae:	f10d 0206 	add.w	r2, sp, #6
340082b2:	2100      	movs	r1, #0
340082b4:	f7ff fce0 	bl	34007c78 <CMW_VD66GY_Read16>
  if (ret)
340082b8:	b910      	cbnz	r0, 340082c0 <VD66GY_ReadID+0x16>
    return ret;

  *Id = reg16;
340082ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
340082be:	6023      	str	r3, [r4, #0]

  return CMW_ERROR_NONE;
}
340082c0:	b002      	add	sp, #8
340082c2:	bd10      	pop	{r4, pc}

340082c4 <CMW_VD66GY_Probe>:
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
  HAL_Delay(20);     /* NRST de-asserted during 20ms */
}

int CMW_VD66GY_Probe(CMW_VD66GY_t *io_ctx, CMW_Sensor_if_t *vd6g_if)
{
340082c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
340082c6:	4604      	mov	r4, r0
  int ret = CMW_ERROR_NONE;
  uint32_t id;

  io_ctx->ctx_driver.shutdown_pin = VD6G_ShutdownPin;
340082c8:	4b2e      	ldr	r3, [pc, #184]	@ (34008384 <CMW_VD66GY_Probe+0xc0>)
{
340082ca:	460d      	mov	r5, r1
  io_ctx->ctx_driver.shutdown_pin = VD6G_ShutdownPin;
340082cc:	6083      	str	r3, [r0, #8]
  io_ctx->ctx_driver.read8 = VD6G_Read8;
340082ce:	4b2e      	ldr	r3, [pc, #184]	@ (34008388 <CMW_VD66GY_Probe+0xc4>)
340082d0:	60c3      	str	r3, [r0, #12]
  io_ctx->ctx_driver.read16 = VD6G_Read16;
340082d2:	4b2e      	ldr	r3, [pc, #184]	@ (3400838c <CMW_VD66GY_Probe+0xc8>)
340082d4:	6103      	str	r3, [r0, #16]
  io_ctx->ctx_driver.read32 = VD6G_Read32;
340082d6:	4b2e      	ldr	r3, [pc, #184]	@ (34008390 <CMW_VD66GY_Probe+0xcc>)
340082d8:	6143      	str	r3, [r0, #20]
  io_ctx->ctx_driver.write8 = VD6G_Write8;
340082da:	4b2e      	ldr	r3, [pc, #184]	@ (34008394 <CMW_VD66GY_Probe+0xd0>)
340082dc:	6183      	str	r3, [r0, #24]
  io_ctx->ctx_driver.write16 = VD6G_Write16;
340082de:	4b2e      	ldr	r3, [pc, #184]	@ (34008398 <CMW_VD66GY_Probe+0xd4>)
340082e0:	61c3      	str	r3, [r0, #28]
  io_ctx->ctx_driver.write32 = VD6G_Write32;
340082e2:	4b2e      	ldr	r3, [pc, #184]	@ (3400839c <CMW_VD66GY_Probe+0xd8>)
340082e4:	6203      	str	r3, [r0, #32]
  io_ctx->ctx_driver.write_array = VD6G_WriteArray;
340082e6:	4b2e      	ldr	r3, [pc, #184]	@ (340083a0 <CMW_VD66GY_Probe+0xdc>)
340082e8:	6243      	str	r3, [r0, #36]	@ 0x24
  io_ctx->ctx_driver.delay = VD6G_Delay;
340082ea:	4b2e      	ldr	r3, [pc, #184]	@ (340083a4 <CMW_VD66GY_Probe+0xe0>)
340082ec:	6283      	str	r3, [r0, #40]	@ 0x28
  io_ctx->ctx_driver.log = VD6G_Log;
340082ee:	4b2e      	ldr	r3, [pc, #184]	@ (340083a8 <CMW_VD66GY_Probe+0xe4>)
340082f0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  io_ctx->EnablePin(1);
340082f2:	f8d0 3140 	ldr.w	r3, [r0, #320]	@ 0x140
340082f6:	2001      	movs	r0, #1
340082f8:	4798      	blx	r3
  io_ctx->ShutdownPin(0);  /* Disable MB1723 2V8 signal  */
340082fa:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
340082fe:	2000      	movs	r0, #0
34008300:	4798      	blx	r3
  HAL_Delay(200);   /* NRST signals asserted during 200ms */
34008302:	20c8      	movs	r0, #200	@ 0xc8
34008304:	f016 fbfe 	bl	3401eb04 <HAL_Delay>
  io_ctx->ShutdownPin(1);  /* Disable MB1723 2V8 signal  */
34008308:	2001      	movs	r0, #1
3400830a:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
3400830e:	4798      	blx	r3
  HAL_Delay(20);     /* NRST de-asserted during 20ms */
34008310:	2014      	movs	r0, #20
34008312:	f016 fbf7 	bl	3401eb04 <HAL_Delay>

  CMW_VD66GY_PowerOn(io_ctx);

  ret = VD66GY_RegisterBusIO(io_ctx);
34008316:	4620      	mov	r0, r4
34008318:	f7ff ffbf 	bl	3400829a <VD66GY_RegisterBusIO>
  if (ret != CMW_ERROR_NONE)
3400831c:	b120      	cbz	r0, 34008328 <CMW_VD66GY_Probe+0x64>
  {
    return CMW_ERROR_COMPONENT_FAILURE;
3400831e:	f06f 0404 	mvn.w	r4, #4
  vd6g_if->SetExposureMode = CMW_VD66GY_SetExposureMode;
  vd6g_if->SetWBRefMode = CMW_VD66GY_SetWBRefMode;
  vd6g_if->ListWBRefModes = CMW_VD66GY_ListWBRefModes;
  vd6g_if->GetSensorInfo = CMW_VD66GY_GetSensorInfo;
  return ret;
}
34008322:	4620      	mov	r0, r4
34008324:	b003      	add	sp, #12
34008326:	bd30      	pop	{r4, r5, pc}
  ret = VD66GY_ReadID(io_ctx, &id);
34008328:	4620      	mov	r0, r4
3400832a:	a901      	add	r1, sp, #4
3400832c:	f7ff ffbd 	bl	340082aa <VD66GY_ReadID>
  if (ret != CMW_ERROR_NONE)
34008330:	4604      	mov	r4, r0
34008332:	2800      	cmp	r0, #0
34008334:	d1f3      	bne.n	3400831e <CMW_VD66GY_Probe+0x5a>
  if (id != VD66GY_CHIP_ID)
34008336:	f245 6303 	movw	r3, #22019	@ 0x5603
3400833a:	9a01      	ldr	r2, [sp, #4]
3400833c:	429a      	cmp	r2, r3
3400833e:	d1ee      	bne.n	3400831e <CMW_VD66GY_Probe+0x5a>
  memset(vd6g_if, 0, sizeof(*vd6g_if));
34008340:	4601      	mov	r1, r0
34008342:	224c      	movs	r2, #76	@ 0x4c
34008344:	f105 001c 	add.w	r0, r5, #28
34008348:	f017 ff86 	bl	34020258 <memset>
  vd6g_if->Init = CMW_VD66GY_Init;
3400834c:	4b17      	ldr	r3, [pc, #92]	@ (340083ac <CMW_VD66GY_Probe+0xe8>)
3400834e:	602b      	str	r3, [r5, #0]
  vd6g_if->DeInit = CMW_VD66GY_DeInit;
34008350:	4b17      	ldr	r3, [pc, #92]	@ (340083b0 <CMW_VD66GY_Probe+0xec>)
34008352:	606b      	str	r3, [r5, #4]
  vd6g_if->Run = CMW_VD66GY_Run;
34008354:	4b17      	ldr	r3, [pc, #92]	@ (340083b4 <CMW_VD66GY_Probe+0xf0>)
34008356:	60eb      	str	r3, [r5, #12]
  vd6g_if->VsyncEventCallback = CMW_VD66GY_VsyncEventCallback;
34008358:	4b17      	ldr	r3, [pc, #92]	@ (340083b8 <CMW_VD66GY_Probe+0xf4>)
3400835a:	612b      	str	r3, [r5, #16]
  vd6g_if->FrameEventCallback = CMW_VD66GY_FrameEventCallback;
3400835c:	4b17      	ldr	r3, [pc, #92]	@ (340083bc <CMW_VD66GY_Probe+0xf8>)
3400835e:	616b      	str	r3, [r5, #20]
  vd6g_if->Start = CMW_VD66GY_Start;
34008360:	4b17      	ldr	r3, [pc, #92]	@ (340083c0 <CMW_VD66GY_Probe+0xfc>)
34008362:	60ab      	str	r3, [r5, #8]
  vd6g_if->Stop = CMW_VD66GY_Stop;
34008364:	4b17      	ldr	r3, [pc, #92]	@ (340083c4 <CMW_VD66GY_Probe+0x100>)
34008366:	61ab      	str	r3, [r5, #24]
  vd6g_if->SetGain = CMW_VD66GY_SetGain;
34008368:	4b17      	ldr	r3, [pc, #92]	@ (340083c8 <CMW_VD66GY_Probe+0x104>)
3400836a:	64ab      	str	r3, [r5, #72]	@ 0x48
  vd6g_if->SetExposure = CMW_VD66GY_SetExposure;
3400836c:	4b17      	ldr	r3, [pc, #92]	@ (340083cc <CMW_VD66GY_Probe+0x108>)
3400836e:	64eb      	str	r3, [r5, #76]	@ 0x4c
  vd6g_if->SetExposureMode = CMW_VD66GY_SetExposureMode;
34008370:	4b17      	ldr	r3, [pc, #92]	@ (340083d0 <CMW_VD66GY_Probe+0x10c>)
34008372:	652b      	str	r3, [r5, #80]	@ 0x50
  vd6g_if->SetWBRefMode = CMW_VD66GY_SetWBRefMode;
34008374:	4b17      	ldr	r3, [pc, #92]	@ (340083d4 <CMW_VD66GY_Probe+0x110>)
34008376:	656b      	str	r3, [r5, #84]	@ 0x54
  vd6g_if->ListWBRefModes = CMW_VD66GY_ListWBRefModes;
34008378:	4b17      	ldr	r3, [pc, #92]	@ (340083d8 <CMW_VD66GY_Probe+0x114>)
3400837a:	65ab      	str	r3, [r5, #88]	@ 0x58
  vd6g_if->GetSensorInfo = CMW_VD66GY_GetSensorInfo;
3400837c:	4b17      	ldr	r3, [pc, #92]	@ (340083dc <CMW_VD66GY_Probe+0x118>)
3400837e:	662b      	str	r3, [r5, #96]	@ 0x60
  return ret;
34008380:	e7cf      	b.n	34008322 <CMW_VD66GY_Probe+0x5e>
34008382:	bf00      	nop
34008384:	34007c95 	.word	0x34007c95
34008388:	34007c9d 	.word	0x34007c9d
3400838c:	34007cb1 	.word	0x34007cb1
34008390:	34007cb7 	.word	0x34007cb7
34008394:	34007cd5 	.word	0x34007cd5
34008398:	34007cef 	.word	0x34007cef
3400839c:	34007d09 	.word	0x34007d09
340083a0:	34007d21 	.word	0x34007d21
340083a4:	34007d65 	.word	0x34007d65
340083a8:	34007d6d 	.word	0x34007d6d
340083ac:	340081a7 	.word	0x340081a7
340083b0:	3400816d 	.word	0x3400816d
340083b4:	34008193 	.word	0x34008193
340083b8:	34008265 	.word	0x34008265
340083bc:	34007d6f 	.word	0x34007d6f
340083c0:	34008125 	.word	0x34008125
340083c4:	34008111 	.word	0x34008111
340083c8:	34007d71 	.word	0x34007d71
340083cc:	34007f5d 	.word	0x34007f5d
340083d0:	34007f63 	.word	0x34007f63
340083d4:	34007f81 	.word	0x34007f81
340083d8:	34007f95 	.word	0x34007f95
340083dc:	34007fa9 	.word	0x34007fa9

340083e0 <IMX335_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
340083e0:	b410      	push	{r4}
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
340083e2:	6904      	ldr	r4, [r0, #16]
340083e4:	8900      	ldrh	r0, [r0, #8]
340083e6:	46a4      	mov	ip, r4
}
340083e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
340083ec:	4760      	bx	ip

340083ee <IMX335_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t IMX335_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
340083ee:	b410      	push	{r4}
  IMX335_Object_t *pObj = (IMX335_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
340083f0:	68c4      	ldr	r4, [r0, #12]
340083f2:	8900      	ldrh	r0, [r0, #8]
340083f4:	46a4      	mov	ip, r4
}
340083f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
340083fa:	4760      	bx	ip

340083fc <IMX335_WriteTable>:
{
340083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = IMX335_OK;
340083fe:	2500      	movs	r5, #0
34008400:	1c8c      	adds	r4, r1, #2
34008402:	eb04 0682 	add.w	r6, r4, r2, lsl #2
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
34008406:	f100 0718 	add.w	r7, r0, #24
    if(ret != IMX335_ERROR)
3400840a:	b135      	cbz	r5, 3400841a <IMX335_WriteTable+0x1e>
  int32_t ret = IMX335_OK;
3400840c:	f04f 35ff 	mov.w	r5, #4294967295
  for(index=0; index<size ; index++)
34008410:	3404      	adds	r4, #4
34008412:	42b4      	cmp	r4, r6
34008414:	d1f9      	bne.n	3400840a <IMX335_WriteTable+0xe>
}
34008416:	4628      	mov	r0, r5
34008418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(imx335_write_reg(&pObj->Ctx, regs[index].addr, (uint8_t *)&(regs[index].val), 1) != IMX335_OK)
3400841a:	2301      	movs	r3, #1
3400841c:	4622      	mov	r2, r4
3400841e:	4638      	mov	r0, r7
34008420:	f834 1c02 	ldrh.w	r1, [r4, #-2]
34008424:	f000 f99d 	bl	34008762 <imx335_write_reg>
34008428:	2800      	cmp	r0, #0
3400842a:	d1ef      	bne.n	3400840c <IMX335_WriteTable+0x10>
3400842c:	e7f0      	b.n	34008410 <IMX335_WriteTable+0x14>
	...

34008430 <IMX335_RegisterBusIO>:
  */
int32_t IMX335_RegisterBusIO(IMX335_Object_t *pObj, IMX335_IO_t *pIO)
{
  int32_t ret;

  if (pObj == NULL)
34008430:	b190      	cbz	r0, 34008458 <IMX335_RegisterBusIO+0x28>
    ret = IMX335_ERROR;
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
    pObj->IO.DeInit    = pIO->DeInit;
34008432:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
34008434:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
34008436:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
34008438:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
3400843a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
3400843c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
3400843e:	68ca      	ldr	r2, [r1, #12]
34008440:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
34008442:	690a      	ldr	r2, [r1, #16]
34008444:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
34008446:	694a      	ldr	r2, [r1, #20]

    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
    pObj->Ctx.handle   = pObj;
34008448:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
3400844a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = IMX335_ReadRegWrap;
3400844c:	4a04      	ldr	r2, [pc, #16]	@ (34008460 <IMX335_RegisterBusIO+0x30>)
3400844e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = IMX335_WriteRegWrap;
34008450:	4a04      	ldr	r2, [pc, #16]	@ (34008464 <IMX335_RegisterBusIO+0x34>)
34008452:	6182      	str	r2, [r0, #24]

    if(pObj->IO.Init != NULL)
34008454:	b103      	cbz	r3, 34008458 <IMX335_RegisterBusIO+0x28>
    {
      ret = pObj->IO.Init();
34008456:	4718      	bx	r3
      ret = IMX335_ERROR;
    }
  }

  return ret;
}
34008458:	f04f 30ff 	mov.w	r0, #4294967295
3400845c:	4770      	bx	lr
3400845e:	bf00      	nop
34008460:	340083e1 	.word	0x340083e1
34008464:	340083ef 	.word	0x340083ef

34008468 <IMX335_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t IMX335_Init(IMX335_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
34008468:	b510      	push	{r4, lr}
  int32_t ret = IMX335_OK;

  if(pObj->IsInitialized == 0U)
3400846a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
3400846e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
34008470:	b9a3      	cbnz	r3, 3400849c <IMX335_Init+0x34>
  {
    switch (Resolution)
34008472:	2906      	cmp	r1, #6
34008474:	d002      	beq.n	3400847c <IMX335_Init+0x14>
        }
        break;
      /* Add new resolution here */
      default:
        /* Resolution not supported */
        ret = IMX335_ERROR;
34008476:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
3400847a:	bd10      	pop	{r4, pc}
        if(IMX335_WriteTable(pObj, res_2592_1944_regs, ARRAY_SIZE(res_2592_1944_regs)) != IMX335_OK)
3400847c:	2254      	movs	r2, #84	@ 0x54
3400847e:	4908      	ldr	r1, [pc, #32]	@ (340084a0 <IMX335_Init+0x38>)
34008480:	f7ff ffbc 	bl	340083fc <IMX335_WriteTable>
34008484:	2800      	cmp	r0, #0
34008486:	d1f6      	bne.n	34008476 <IMX335_Init+0xe>
      if(IMX335_WriteTable(pObj, mode_2l_10b_regs, ARRAY_SIZE(mode_2l_10b_regs)) != IMX335_OK)
34008488:	2205      	movs	r2, #5
3400848a:	4620      	mov	r0, r4
3400848c:	4905      	ldr	r1, [pc, #20]	@ (340084a4 <IMX335_Init+0x3c>)
3400848e:	f7ff ffb5 	bl	340083fc <IMX335_WriteTable>
34008492:	2800      	cmp	r0, #0
34008494:	d1ef      	bne.n	34008476 <IMX335_Init+0xe>
        pObj->IsInitialized = 1U;
34008496:	2301      	movs	r3, #1
34008498:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  int32_t ret = IMX335_OK;
3400849c:	2000      	movs	r0, #0
  return ret;
3400849e:	e7ec      	b.n	3400847a <IMX335_Init+0x12>
340084a0:	3402ddf0 	.word	0x3402ddf0
340084a4:	3402dddc 	.word	0x3402dddc

340084a8 <IMX335_Start>:
int32_t IMX335_Start(IMX335_Object_t *pObj)
{
  uint8_t tmp;
  int32_t ret = IMX335_OK;
  /* Start streaming */
  tmp = IMX335_MODE_STREAMING;
340084a8:	2300      	movs	r3, #0
{
340084aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
340084ac:	4605      	mov	r5, r0
  tmp = IMX335_MODE_STREAMING;
340084ae:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = imx335_write_reg(&pObj->Ctx, IMX335_REG_MODE_SELECT, &tmp, 1);
340084b2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
340084b6:	2301      	movs	r3, #1
340084b8:	f10d 0207 	add.w	r2, sp, #7
340084bc:	3018      	adds	r0, #24
340084be:	f000 f950 	bl	34008762 <imx335_write_reg>
  if (ret != IMX335_OK)
340084c2:	4604      	mov	r4, r0
340084c4:	b950      	cbnz	r0, 340084dc <IMX335_Start+0x34>
  tickstart = pObj->IO.GetTick();
340084c6:	696b      	ldr	r3, [r5, #20]
340084c8:	4798      	blx	r3
340084ca:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
340084cc:	696b      	ldr	r3, [r5, #20]
340084ce:	4798      	blx	r3
340084d0:	1b83      	subs	r3, r0, r6
340084d2:	2b13      	cmp	r3, #19
340084d4:	d9fa      	bls.n	340084cc <IMX335_Start+0x24>
  {
    return IMX335_ERROR;
  }
  IMX335_Delay(pObj, 20);
  return ret;
}
340084d6:	4620      	mov	r0, r4
340084d8:	b002      	add	sp, #8
340084da:	bd70      	pop	{r4, r5, r6, pc}
    return IMX335_ERROR;
340084dc:	f04f 34ff 	mov.w	r4, #4294967295
340084e0:	e7f9      	b.n	340084d6 <IMX335_Start+0x2e>

340084e2 <IMX335_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t IMX335_DeInit(IMX335_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
340084e2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
340084e6:	2b01      	cmp	r3, #1
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
340084e8:	bf04      	itt	eq
340084ea:	2300      	moveq	r3, #0
340084ec:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }

  return IMX335_OK;
}
340084f0:	2000      	movs	r0, #0
340084f2:	4770      	bx	lr

340084f4 <IMX335_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t IMX335_ReadID(IMX335_Object_t *pObj, uint32_t *Id)
{
340084f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
340084f6:	4604      	mov	r4, r0
340084f8:	f854 3b18 	ldr.w	r3, [r4], #24
{
340084fc:	460d      	mov	r5, r1
  pObj->IO.Init();
340084fe:	4798      	blx	r3

  if(imx335_read_reg(&pObj->Ctx, IMX335_REG_ID, &tmp, 1)!= IMX335_OK)
34008500:	2301      	movs	r3, #1
34008502:	f643 1112 	movw	r1, #14610	@ 0x3912
34008506:	4620      	mov	r0, r4
34008508:	f10d 0207 	add.w	r2, sp, #7
3400850c:	f000 f922 	bl	34008754 <imx335_read_reg>
34008510:	b920      	cbnz	r0, 3400851c <IMX335_ReadID+0x28>
  {
    ret = IMX335_ERROR;
  }
  else
  {
    *Id = tmp;
34008512:	f89d 3007 	ldrb.w	r3, [sp, #7]
34008516:	602b      	str	r3, [r5, #0]
    ret = IMX335_OK;
  }

  /* Component status */
  return ret;
}
34008518:	b003      	add	sp, #12
3400851a:	bd30      	pop	{r4, r5, pc}
    ret = IMX335_ERROR;
3400851c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
34008520:	e7fa      	b.n	34008518 <IMX335_ReadID+0x24>
	...

34008524 <IMX335_SetGain>:
  * @param  pObj  pointer to component object
  * @param  Gain Gain in mdB
  * @retval Component status
  */
int32_t IMX335_SetGain(IMX335_Object_t *pObj, int32_t gain)
{
34008524:	b530      	push	{r4, r5, lr}
  int32_t ret = IMX335_OK;
  uint8_t hold;

  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
34008526:	4b1a      	ldr	r3, [pc, #104]	@ (34008590 <IMX335_SetGain+0x6c>)
{
34008528:	b085      	sub	sp, #20
  if ((gain > IMX335_GAIN_MAX) || (gain < IMX335_GAIN_MIN))
3400852a:	4299      	cmp	r1, r3
3400852c:	d903      	bls.n	34008536 <IMX335_SetGain+0x12>
  {
    ret = IMX335_ERROR;
3400852e:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

return ret;
}
34008532:	b005      	add	sp, #20
34008534:	bd30      	pop	{r4, r5, pc}
    gain /= IMX335_GAIN_UNIT_MDB;
34008536:	f44f 7396 	mov.w	r3, #300	@ 0x12c
    hold = 1;
3400853a:	2501      	movs	r5, #1
    gain /= IMX335_GAIN_UNIT_MDB;
3400853c:	fb91 f1f3 	sdiv	r1, r1, r3
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008540:	f100 0418 	add.w	r4, r0, #24
    gain /= IMX335_GAIN_UNIT_MDB;
34008544:	9101      	str	r1, [sp, #4]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008546:	462b      	mov	r3, r5
34008548:	f243 0101 	movw	r1, #12289	@ 0x3001
3400854c:	4620      	mov	r0, r4
3400854e:	f10d 020f 	add.w	r2, sp, #15
    hold = 1;
34008552:	f88d 500f 	strb.w	r5, [sp, #15]
    if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008556:	f000 f904 	bl	34008762 <imx335_write_reg>
3400855a:	2800      	cmp	r0, #0
3400855c:	d1e7      	bne.n	3400852e <IMX335_SetGain+0xa>
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_GAIN, (uint8_t *)&gain, 2) != IMX335_OK)
3400855e:	2302      	movs	r3, #2
34008560:	f243 01e8 	movw	r1, #12520	@ 0x30e8
34008564:	4620      	mov	r0, r4
34008566:	aa01      	add	r2, sp, #4
34008568:	f000 f8fb 	bl	34008762 <imx335_write_reg>
3400856c:	2800      	cmp	r0, #0
3400856e:	d1de      	bne.n	3400852e <IMX335_SetGain+0xa>
        hold = 0;
34008570:	f88d 000f 	strb.w	r0, [sp, #15]
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008574:	462b      	mov	r3, r5
34008576:	f243 0101 	movw	r1, #12289	@ 0x3001
3400857a:	4620      	mov	r0, r4
3400857c:	f10d 020f 	add.w	r2, sp, #15
34008580:	f000 f8ef 	bl	34008762 <imx335_write_reg>
34008584:	3800      	subs	r0, #0
34008586:	bf18      	it	ne
34008588:	2001      	movne	r0, #1
3400858a:	4240      	negs	r0, r0
return ret;
3400858c:	e7d1      	b.n	34008532 <IMX335_SetGain+0xe>
3400858e:	bf00      	nop
34008590:	00011940 	.word	0x00011940

34008594 <IMX335_SetExposure>:
  * @param  pObj  pointer to component object
  * @param  Exposure Exposure in micro seconds
  * @retval Component status
  */
int32_t IMX335_SetExposure(IMX335_Object_t *pObj, int32_t exposure)
{
34008594:	b530      	push	{r4, r5, lr}
34008596:	ed2d 8b02 	vpush	{d8}
  int32_t ret = IMX335_OK;
  uint32_t vmax, shutter;
  uint8_t hold;


  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
3400859a:	f100 0418 	add.w	r4, r0, #24
{
3400859e:	b085      	sub	sp, #20
340085a0:	ee08 1a10 	vmov	s16, r1
  if (imx335_read_reg(&pObj->Ctx, IMX335_REG_VMAX, (uint8_t *)&vmax, 4) != IMX335_OK)
340085a4:	2304      	movs	r3, #4
340085a6:	f243 0130 	movw	r1, #12336	@ 0x3030
340085aa:	4620      	mov	r0, r4
340085ac:	aa02      	add	r2, sp, #8
340085ae:	f000 f8d1 	bl	34008754 <imx335_read_reg>
340085b2:	b128      	cbz	r0, 340085c0 <IMX335_SetExposure+0x2c>
  {
    ret = IMX335_ERROR;
340085b4:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  }

  return ret;
}
340085b8:	b005      	add	sp, #20
340085ba:	ecbd 8b02 	vpop	{d8}
340085be:	bd30      	pop	{r4, r5, pc}
    shutter = (uint32_t) (vmax - (exposure / IMX335_1H_PERIOD_USEC));
340085c0:	eddd 7a02 	vldr	s15, [sp, #8]
340085c4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
340085c8:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 34008634 <IMX335_SetExposure+0xa0>
340085cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
340085d0:	ee88 7a26 	vdiv.f32	s14, s16, s13
340085d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
340085d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340085dc:	ee17 3a90 	vmov	r3, s15
    if (shutter < IMX335_SHUTTER_MIN)
340085e0:	2b08      	cmp	r3, #8
    shutter = (uint32_t) (vmax - (exposure / IMX335_1H_PERIOD_USEC));
340085e2:	edcd 7a03 	vstr	s15, [sp, #12]
    if (shutter < IMX335_SHUTTER_MIN)
340085e6:	d9e5      	bls.n	340085b4 <IMX335_SetExposure+0x20>
      hold = 1;
340085e8:	2501      	movs	r5, #1
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
340085ea:	f243 0101 	movw	r1, #12289	@ 0x3001
340085ee:	462b      	mov	r3, r5
340085f0:	4620      	mov	r0, r4
340085f2:	f10d 0207 	add.w	r2, sp, #7
      hold = 1;
340085f6:	f88d 5007 	strb.w	r5, [sp, #7]
      if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
340085fa:	f000 f8b2 	bl	34008762 <imx335_write_reg>
340085fe:	2800      	cmp	r0, #0
34008600:	d1d8      	bne.n	340085b4 <IMX335_SetExposure+0x20>
        if(imx335_write_reg(&pObj->Ctx, IMX335_REG_SHUTTER, (uint8_t *)&shutter, 3) != IMX335_OK)
34008602:	2303      	movs	r3, #3
34008604:	f243 0158 	movw	r1, #12376	@ 0x3058
34008608:	4620      	mov	r0, r4
3400860a:	aa03      	add	r2, sp, #12
3400860c:	f000 f8a9 	bl	34008762 <imx335_write_reg>
34008610:	2800      	cmp	r0, #0
34008612:	d1cf      	bne.n	340085b4 <IMX335_SetExposure+0x20>
          hold = 0;
34008614:	f88d 0007 	strb.w	r0, [sp, #7]
          if(imx335_write_reg(&pObj->Ctx, IMX335_REG_HOLD, &hold, 1) != IMX335_OK)
34008618:	462b      	mov	r3, r5
3400861a:	f243 0101 	movw	r1, #12289	@ 0x3001
3400861e:	4620      	mov	r0, r4
34008620:	f10d 0207 	add.w	r2, sp, #7
34008624:	f000 f89d 	bl	34008762 <imx335_write_reg>
34008628:	3800      	subs	r0, #0
3400862a:	bf18      	it	ne
3400862c:	2001      	movne	r0, #1
3400862e:	4240      	negs	r0, r0
  return ret;
34008630:	e7c2      	b.n	340085b8 <IMX335_SetExposure+0x24>
34008632:	bf00      	nop
34008634:	40ed097c 	.word	0x40ed097c

34008638 <IMX335_SetFrequency>:
  */
int32_t IMX335_SetFrequency(IMX335_Object_t *pObj, int32_t frequency)
{
  uint32_t ret = IMX335_OK;

  switch (frequency)
34008638:	3901      	subs	r1, #1
        ret = IMX335_ERROR;
      }
      break;
    default:
      /* IMX335_INCK_6MHZ */
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
3400863a:	2207      	movs	r2, #7
{
3400863c:	b508      	push	{r3, lr}
  switch (frequency)
3400863e:	2903      	cmp	r1, #3
34008640:	d811      	bhi.n	34008666 <IMX335_SetFrequency+0x2e>
34008642:	e8df f001 	tbb	[pc, r1]
34008646:	0c0e      	.short	0x0c0e
34008648:	020a      	.short	0x020a
      if(IMX335_WriteTable(pObj, inck_74Mhz_regs, ARRAY_SIZE(inck_74Mhz_regs)) != IMX335_OK)
3400864a:	4908      	ldr	r1, [pc, #32]	@ (3400866c <IMX335_SetFrequency+0x34>)
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
3400864c:	f7ff fed6 	bl	340083fc <IMX335_WriteTable>
34008650:	3800      	subs	r0, #0
34008652:	bf18      	it	ne
34008654:	2001      	movne	r0, #1
34008656:	4240      	negs	r0, r0
      }
      break;
  };

  return ret;
}
34008658:	bd08      	pop	{r3, pc}
      if(IMX335_WriteTable(pObj, inck_27Mhz_regs, ARRAY_SIZE(inck_27Mhz_regs)) != IMX335_OK)
3400865a:	4905      	ldr	r1, [pc, #20]	@ (34008670 <IMX335_SetFrequency+0x38>)
3400865c:	e7f6      	b.n	3400864c <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_24Mhz_regs, ARRAY_SIZE(inck_24Mhz_regs)) != IMX335_OK)
3400865e:	4905      	ldr	r1, [pc, #20]	@ (34008674 <IMX335_SetFrequency+0x3c>)
34008660:	e7f4      	b.n	3400864c <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_18Mhz_regs, ARRAY_SIZE(inck_18Mhz_regs)) != IMX335_OK)
34008662:	4905      	ldr	r1, [pc, #20]	@ (34008678 <IMX335_SetFrequency+0x40>)
34008664:	e7f2      	b.n	3400864c <IMX335_SetFrequency+0x14>
      if(IMX335_WriteTable(pObj, inck_6Mhz_regs, ARRAY_SIZE(inck_6Mhz_regs)) != IMX335_OK)
34008666:	4905      	ldr	r1, [pc, #20]	@ (3400867c <IMX335_SetFrequency+0x44>)
34008668:	e7f0      	b.n	3400864c <IMX335_SetFrequency+0x14>
3400866a:	bf00      	nop
3400866c:	3402ddc0 	.word	0x3402ddc0
34008670:	3402dda4 	.word	0x3402dda4
34008674:	3402dd88 	.word	0x3402dd88
34008678:	3402dd6c 	.word	0x3402dd6c
3400867c:	3402dd50 	.word	0x3402dd50

34008680 <IMX335_SetFramerate>:
  * @retval Component status
  */
int32_t IMX335_SetFramerate(IMX335_Object_t *pObj, int32_t framerate)
{
  uint32_t ret = IMX335_OK;
  switch (framerate)
34008680:	2914      	cmp	r1, #20
{
34008682:	b508      	push	{r3, lr}
34008684:	4603      	mov	r3, r0
  switch (framerate)
34008686:	d019      	beq.n	340086bc <IMX335_SetFramerate+0x3c>
34008688:	dc07      	bgt.n	3400869a <IMX335_SetFramerate+0x1a>
3400868a:	290a      	cmp	r1, #10
3400868c:	d00a      	beq.n	340086a4 <IMX335_SetFramerate+0x24>
3400868e:	290f      	cmp	r1, #15
34008690:	d011      	beq.n	340086b6 <IMX335_SetFramerate+0x36>
        ret = IMX335_ERROR;
      }
      break;
    default:
      /* 30fps */
      if(IMX335_WriteTable(pObj, framerate_30fps_regs, ARRAY_SIZE(framerate_30fps_regs)) != IMX335_OK)
34008692:	2202      	movs	r2, #2
34008694:	4618      	mov	r0, r3
34008696:	490b      	ldr	r1, [pc, #44]	@ (340086c4 <IMX335_SetFramerate+0x44>)
34008698:	e006      	b.n	340086a8 <IMX335_SetFramerate+0x28>
  switch (framerate)
3400869a:	2919      	cmp	r1, #25
3400869c:	d1f9      	bne.n	34008692 <IMX335_SetFramerate+0x12>
      if(IMX335_WriteTable(pObj, framerate_25fps_regs, ARRAY_SIZE(framerate_25fps_regs)) != IMX335_OK)
3400869e:	2202      	movs	r2, #2
340086a0:	4909      	ldr	r1, [pc, #36]	@ (340086c8 <IMX335_SetFramerate+0x48>)
340086a2:	e001      	b.n	340086a8 <IMX335_SetFramerate+0x28>
      if(IMX335_WriteTable(pObj, framerate_10fps_regs, ARRAY_SIZE(framerate_10fps_regs)) != IMX335_OK)
340086a4:	2202      	movs	r2, #2
340086a6:	4909      	ldr	r1, [pc, #36]	@ (340086cc <IMX335_SetFramerate+0x4c>)
      if(IMX335_WriteTable(pObj, framerate_30fps_regs, ARRAY_SIZE(framerate_30fps_regs)) != IMX335_OK)
340086a8:	f7ff fea8 	bl	340083fc <IMX335_WriteTable>
340086ac:	3800      	subs	r0, #0
340086ae:	bf18      	it	ne
340086b0:	2001      	movne	r0, #1
340086b2:	4240      	negs	r0, r0
      }
      break;
  };

  return ret;
}
340086b4:	bd08      	pop	{r3, pc}
      if(IMX335_WriteTable(pObj, framerate_15fps_regs, ARRAY_SIZE(framerate_15fps_regs)) != IMX335_OK)
340086b6:	2202      	movs	r2, #2
340086b8:	4905      	ldr	r1, [pc, #20]	@ (340086d0 <IMX335_SetFramerate+0x50>)
340086ba:	e7f5      	b.n	340086a8 <IMX335_SetFramerate+0x28>
      if(IMX335_WriteTable(pObj, framerate_20fps_regs, ARRAY_SIZE(framerate_20fps_regs)) != IMX335_OK)
340086bc:	2202      	movs	r2, #2
340086be:	4905      	ldr	r1, [pc, #20]	@ (340086d4 <IMX335_SetFramerate+0x54>)
340086c0:	e7f2      	b.n	340086a8 <IMX335_SetFramerate+0x28>
340086c2:	bf00      	nop
340086c4:	3402dd28 	.word	0x3402dd28
340086c8:	3402dd30 	.word	0x3402dd30
340086cc:	3402dd48 	.word	0x3402dd48
340086d0:	3402dd40 	.word	0x3402dd40
340086d4:	3402dd38 	.word	0x3402dd38

340086d8 <IMX335_MirrorFlipConfig>:
  */
int32_t IMX335_MirrorFlipConfig(IMX335_Object_t *pObj, uint32_t Config)
{
  int32_t ret = IMX335_OK;

  switch (Config)
340086d8:	2902      	cmp	r1, #2
    case IMX335_MIRROR_FLIP:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
      break;
    case IMX335_MIRROR_FLIP_NONE:
    default:
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
340086da:	f04f 020a 	mov.w	r2, #10
  switch (Config)
340086de:	d006      	beq.n	340086ee <IMX335_MirrorFlipConfig+0x16>
340086e0:	2903      	cmp	r1, #3
340086e2:	d006      	beq.n	340086f2 <IMX335_MirrorFlipConfig+0x1a>
340086e4:	2901      	cmp	r1, #1
340086e6:	d106      	bne.n	340086f6 <IMX335_MirrorFlipConfig+0x1e>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[1], ARRAY_SIZE(mirrorflip_mode_regs[1]));
340086e8:	4904      	ldr	r1, [pc, #16]	@ (340086fc <IMX335_MirrorFlipConfig+0x24>)
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
340086ea:	f7ff be87 	b.w	340083fc <IMX335_WriteTable>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[2], ARRAY_SIZE(mirrorflip_mode_regs[2]));
340086ee:	4904      	ldr	r1, [pc, #16]	@ (34008700 <IMX335_MirrorFlipConfig+0x28>)
340086f0:	e7fb      	b.n	340086ea <IMX335_MirrorFlipConfig+0x12>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[3], ARRAY_SIZE(mirrorflip_mode_regs[3]));
340086f2:	4904      	ldr	r1, [pc, #16]	@ (34008704 <IMX335_MirrorFlipConfig+0x2c>)
340086f4:	e7f9      	b.n	340086ea <IMX335_MirrorFlipConfig+0x12>
      ret = IMX335_WriteTable(pObj, mirrorflip_mode_regs[0], ARRAY_SIZE(mirrorflip_mode_regs[0]));
340086f6:	4904      	ldr	r1, [pc, #16]	@ (34008708 <IMX335_MirrorFlipConfig+0x30>)
340086f8:	e7f7      	b.n	340086ea <IMX335_MirrorFlipConfig+0x12>
340086fa:	bf00      	nop
340086fc:	3402dcb0 	.word	0x3402dcb0
34008700:	3402dcd8 	.word	0x3402dcd8
34008704:	3402dd00 	.word	0x3402dd00
34008708:	3402dc88 	.word	0x3402dc88

3400870c <IMX335_SetTestPattern>:
  *               10: Horizontal color bars
  *               11: Vertical color bars
  * @retval Component status
  */
int32_t IMX335_SetTestPattern(IMX335_Object_t *pObj, int32_t mode)
{
3400870c:	b513      	push	{r0, r1, r4, lr}
  int32_t ret = IMX335_OK;
  uint8_t val;

  if (mode >= 0)
3400870e:	2900      	cmp	r1, #0
{
34008710:	4604      	mov	r4, r0
  if (mode >= 0)
34008712:	db15      	blt.n	34008740 <IMX335_SetTestPattern+0x34>
  {
    /* Enable Test Pattern #mode */
    val = mode;
34008714:	f88d 1007 	strb.w	r1, [sp, #7]
    if (imx335_write_reg(&pObj->Ctx, IMX335_REG_TPG, &val, 1) != IMX335_OK)
34008718:	2301      	movs	r3, #1
3400871a:	f243 219e 	movw	r1, #12958	@ 0x329e
3400871e:	f10d 0207 	add.w	r2, sp, #7
34008722:	3018      	adds	r0, #24
34008724:	f000 f81d 	bl	34008762 <imx335_write_reg>
34008728:	b968      	cbnz	r0, 34008746 <IMX335_SetTestPattern+0x3a>
    {
      return IMX335_ERROR;
    }
    if (IMX335_WriteTable(pObj, test_pattern_enable_regs, ARRAY_SIZE(test_pattern_enable_regs)) != IMX335_OK)
3400872a:	2207      	movs	r2, #7
3400872c:	4620      	mov	r0, r4
3400872e:	4907      	ldr	r1, [pc, #28]	@ (3400874c <IMX335_SetTestPattern+0x40>)
    }
  }
  else
  {
    /* Disable Test Pattern */
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
34008730:	f7ff fe64 	bl	340083fc <IMX335_WriteTable>
34008734:	3800      	subs	r0, #0
34008736:	bf18      	it	ne
34008738:	2001      	movne	r0, #1
3400873a:	4240      	negs	r0, r0
      return IMX335_ERROR;
    }
  }

  return ret;
}
3400873c:	b002      	add	sp, #8
3400873e:	bd10      	pop	{r4, pc}
    if (IMX335_WriteTable(pObj, test_pattern_disable_regs, ARRAY_SIZE(test_pattern_disable_regs)) != IMX335_OK)
34008740:	2207      	movs	r2, #7
34008742:	4903      	ldr	r1, [pc, #12]	@ (34008750 <IMX335_SetTestPattern+0x44>)
34008744:	e7f4      	b.n	34008730 <IMX335_SetTestPattern+0x24>
      return IMX335_ERROR;
34008746:	f04f 30ff 	mov.w	r0, #4294967295
3400874a:	e7f7      	b.n	3400873c <IMX335_SetTestPattern+0x30>
3400874c:	3402dc6c 	.word	0x3402dc6c
34008750:	3402dc50 	.word	0x3402dc50

34008754 <imx335_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t imx335_read_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
34008754:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34008756:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
3400875a:	46a4      	mov	ip, r4
}
3400875c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
34008760:	4760      	bx	ip

34008762 <imx335_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t imx335_write_reg(imx335_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
34008762:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
34008764:	6804      	ldr	r4, [r0, #0]
34008766:	6880      	ldr	r0, [r0, #8]
34008768:	46a4      	mov	ip, r4
}
3400876a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
3400876e:	4760      	bx	ip

34008770 <VD55G1_log_impl>:
    return NULL;
  }
}

static void VD55G1_log_impl(VD55G1_Ctx_t *ctx, int lvl, const char *format, ...)
{
34008770:	b40c      	push	{r2, r3}
34008772:	b513      	push	{r0, r1, r4, lr}
  va_list ap;

  if (!ctx->log)
34008774:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34008776:	b11c      	cbz	r4, 34008780 <VD55G1_log_impl+0x10>
    return ;

  va_start(ap, format);
34008778:	ab05      	add	r3, sp, #20
  ctx->log(ctx, lvl, format, ap);
3400877a:	9a04      	ldr	r2, [sp, #16]
  va_start(ap, format);
3400877c:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, lvl, format, ap);
3400877e:	47a0      	blx	r4
  va_end(ap);
}
34008780:	b002      	add	sp, #8
34008782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34008786:	b002      	add	sp, #8
34008788:	4770      	bx	lr
	...

3400878c <VD55G1_PollReg8>:

  return 0;
}

static int VD55G1_PollReg8(VD55G1_Ctx_t *ctx, uint16_t addr, uint8_t poll_val)
{
3400878c:	b5f0      	push	{r4, r5, r6, r7, lr}
3400878e:	4604      	mov	r4, r0
34008790:	460e      	mov	r6, r1
34008792:	4617      	mov	r7, r2
34008794:	2531      	movs	r5, #49	@ 0x31
34008796:	b085      	sub	sp, #20
  int loop_nb = timeout_ms / loop_delay_ms;
  uint8_t val;
  int ret;

  while (--loop_nb) {
    ret = ctx->read8(ctx, addr, &val);
34008798:	4631      	mov	r1, r6
3400879a:	4620      	mov	r0, r4
3400879c:	6863      	ldr	r3, [r4, #4]
3400879e:	f10d 020f 	add.w	r2, sp, #15
340087a2:	4798      	blx	r3
    if (ret < 0)
340087a4:	2800      	cmp	r0, #0
340087a6:	db17      	blt.n	340087d8 <VD55G1_PollReg8+0x4c>
      return ret;
    if (val == poll_val)
340087a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
340087ac:	42bb      	cmp	r3, r7
340087ae:	d015      	beq.n	340087dc <VD55G1_PollReg8+0x50>
      return 0;
    ctx->delay(ctx, loop_delay_ms);
340087b0:	210a      	movs	r1, #10
340087b2:	4620      	mov	r0, r4
340087b4:	6a23      	ldr	r3, [r4, #32]
340087b6:	4798      	blx	r3
  while (--loop_nb) {
340087b8:	3d01      	subs	r5, #1
340087ba:	d1ed      	bne.n	34008798 <VD55G1_PollReg8+0xc>
  }

  VD55G1_dbg(ctx, 0, "current state %d\n", val);
340087bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
340087c0:	4620      	mov	r0, r4
340087c2:	9301      	str	r3, [sp, #4]
340087c4:	f240 132b 	movw	r3, #299	@ 0x12b
340087c8:	2103      	movs	r1, #3
340087ca:	9300      	str	r3, [sp, #0]
340087cc:	4a04      	ldr	r2, [pc, #16]	@ (340087e0 <VD55G1_PollReg8+0x54>)
340087ce:	462b      	mov	r3, r5
340087d0:	f7ff ffce 	bl	34008770 <VD55G1_log_impl>

  return -1;
340087d4:	f04f 30ff 	mov.w	r0, #4294967295
}
340087d8:	b005      	add	sp, #20
340087da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return 0;
340087dc:	2000      	movs	r0, #0
340087de:	e7fb      	b.n	340087d8 <VD55G1_PollReg8+0x4c>
340087e0:	340277f5 	.word	0x340277f5

340087e4 <VD55G1_WaitState>:

  return state == VD55G1_SYSTEM_FSM_STREAMING;
}

static int VD55G1_WaitState(VD55G1_Ctx_t *ctx, int state)
{
340087e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
340087e6:	b2ca      	uxtb	r2, r1
{
340087e8:	460d      	mov	r5, r1
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
340087ea:	211c      	movs	r1, #28
{
340087ec:	4606      	mov	r6, r0
  int ret = VD55G1_PollReg8(ctx, VD55G1_REG_SYSTEM_FSM, state);
340087ee:	f7ff ffcd 	bl	3400878c <VD55G1_PollReg8>

  if (ret)
340087f2:	4604      	mov	r4, r0
340087f4:	b150      	cbz	r0, 3400880c <VD55G1_WaitState+0x28>
    VD55G1_warn(ctx, "Unable to reach state %d\n", state);
340087f6:	f240 1341 	movw	r3, #321	@ 0x141
340087fa:	2101      	movs	r1, #1
340087fc:	4630      	mov	r0, r6
340087fe:	4a09      	ldr	r2, [pc, #36]	@ (34008824 <VD55G1_WaitState+0x40>)
34008800:	9500      	str	r5, [sp, #0]
34008802:	f7ff ffb5 	bl	34008770 <VD55G1_log_impl>
  else
    VD55G1_dbg(ctx, 0, "reach state %d\n", state);

  return ret;
}
34008806:	4620      	mov	r0, r4
34008808:	b002      	add	sp, #8
3400880a:	bd70      	pop	{r4, r5, r6, pc}
    VD55G1_dbg(ctx, 0, "reach state %d\n", state);
3400880c:	f240 1343 	movw	r3, #323	@ 0x143
34008810:	2103      	movs	r1, #3
34008812:	9300      	str	r3, [sp, #0]
34008814:	4a04      	ldr	r2, [pc, #16]	@ (34008828 <VD55G1_WaitState+0x44>)
34008816:	4603      	mov	r3, r0
34008818:	9501      	str	r5, [sp, #4]
3400881a:	4630      	mov	r0, r6
3400881c:	f7ff ffa8 	bl	34008770 <VD55G1_log_impl>
  return ret;
34008820:	e7f1      	b.n	34008806 <VD55G1_WaitState+0x22>
34008822:	bf00      	nop
34008824:	34027818 	.word	0x34027818
34008828:	34027842 	.word	0x34027842

3400882c <display_error>:
{
3400882c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ret = ctx->read16(ctx, VD55G1_ERROR_CODE, &reg16);
3400882e:	2110      	movs	r1, #16
34008830:	6883      	ldr	r3, [r0, #8]
34008832:	f10d 020e 	add.w	r2, sp, #14
{
34008836:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD55G1_ERROR_CODE, &reg16);
34008838:	4798      	blx	r3
  assert(ret == 0);
3400883a:	4601      	mov	r1, r0
3400883c:	b128      	cbz	r0, 3400884a <display_error+0x1e>
3400883e:	21fc      	movs	r1, #252	@ 0xfc
34008840:	4b07      	ldr	r3, [pc, #28]	@ (34008860 <display_error+0x34>)
34008842:	4a08      	ldr	r2, [pc, #32]	@ (34008864 <display_error+0x38>)
34008844:	4808      	ldr	r0, [pc, #32]	@ (34008868 <display_error+0x3c>)
34008846:	f016 fcbd 	bl	3401f1c4 <__assert_func>
  VD55G1_error(ctx, "ERROR_CODE : 0x%04x\n", reg16);
3400884a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
3400884e:	4620      	mov	r0, r4
34008850:	9300      	str	r3, [sp, #0]
34008852:	4a06      	ldr	r2, [pc, #24]	@ (3400886c <display_error+0x40>)
34008854:	23fd      	movs	r3, #253	@ 0xfd
34008856:	f7ff ff8b 	bl	34008770 <VD55G1_log_impl>
}
3400885a:	b004      	add	sp, #16
3400885c:	bd10      	pop	{r4, pc}
3400885e:	bf00      	nop
34008860:	34027863 	.word	0x34027863
34008864:	3402e09b 	.word	0x3402e09b
34008868:	3402786c 	.word	0x3402786c
3400886c:	340278b5 	.word	0x340278b5

34008870 <VD55G1_ApplyPatchCommon>:
  return 0;
}

static int VD55G1_ApplyPatchCommon(VD55G1_Ctx_t *ctx, uint8_t *patch_array, int patch_len, uint8_t patch_major,
                                   uint8_t patch_minor)
{
34008870:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t reg16;
  int ret;

  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
34008872:	69c4      	ldr	r4, [r0, #28]
{
34008874:	b087      	sub	sp, #28
34008876:	461e      	mov	r6, r3
  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
34008878:	4613      	mov	r3, r2
3400887a:	460a      	mov	r2, r1
3400887c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
{
34008880:	4605      	mov	r5, r0
34008882:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
  ret = ctx->write_array(ctx, VD55G1_REG_FWPATCH_START_ADDR, patch_array, patch_len);
34008886:	47a0      	blx	r4
  VD55G1_TraceError(ctx, ret);
34008888:	4604      	mov	r4, r0
3400888a:	b958      	cbnz	r0, 340088a4 <VD55G1_ApplyPatchCommon+0x34>

  ret = ctx->write8(ctx, VD55G1_REG_BOOT, VD55G1_BOOT_PATCH_AND_BOOT);
3400888c:	2202      	movs	r2, #2
3400888e:	f44f 7100 	mov.w	r1, #512	@ 0x200
34008892:	4628      	mov	r0, r5
34008894:	692b      	ldr	r3, [r5, #16]
34008896:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008898:	4604      	mov	r4, r0
3400889a:	b190      	cbz	r0, 340088c2 <VD55G1_ApplyPatchCommon+0x52>
3400889c:	f240 1377 	movw	r3, #375	@ 0x177
340088a0:	9002      	str	r0, [sp, #8]
340088a2:	e002      	b.n	340088aa <VD55G1_ApplyPatchCommon+0x3a>
  VD55G1_TraceError(ctx, ret);
340088a4:	f44f 73ba 	mov.w	r3, #372	@ 0x174
340088a8:	9002      	str	r0, [sp, #8]
    return -1;
  }
  VD55G1_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);

  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
  VD55G1_TraceError(ctx, ret);
340088aa:	4a32      	ldr	r2, [pc, #200]	@ (34008974 <VD55G1_ApplyPatchCommon+0x104>)
340088ac:	4628      	mov	r0, r5
340088ae:	9200      	str	r2, [sp, #0]
340088b0:	2100      	movs	r1, #0
340088b2:	4a31      	ldr	r2, [pc, #196]	@ (34008978 <VD55G1_ApplyPatchCommon+0x108>)
340088b4:	9301      	str	r3, [sp, #4]
340088b6:	f7ff ff5b 	bl	34008770 <VD55G1_log_impl>
340088ba:	4628      	mov	r0, r5
340088bc:	f7ff ffb6 	bl	3400882c <display_error>
340088c0:	e039      	b.n	34008936 <VD55G1_ApplyPatchCommon+0xc6>
  ret = VD55G1_PollReg8(ctx, VD55G1_REG_BOOT, VD55G1_CMD_ACK);
340088c2:	4602      	mov	r2, r0
340088c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
340088c8:	4628      	mov	r0, r5
340088ca:	f7ff ff5f 	bl	3400878c <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340088ce:	4604      	mov	r4, r0
340088d0:	b118      	cbz	r0, 340088da <VD55G1_ApplyPatchCommon+0x6a>
340088d2:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
340088d6:	9002      	str	r0, [sp, #8]
340088d8:	e7e7      	b.n	340088aa <VD55G1_ApplyPatchCommon+0x3a>
  ret = ctx->read16(ctx, VD55G1_REG_FWPATCH_REVISION, &reg16);
340088da:	2112      	movs	r1, #18
340088dc:	4628      	mov	r0, r5
340088de:	68ab      	ldr	r3, [r5, #8]
340088e0:	f10d 0216 	add.w	r2, sp, #22
340088e4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340088e6:	4604      	mov	r4, r0
340088e8:	b118      	cbz	r0, 340088f2 <VD55G1_ApplyPatchCommon+0x82>
340088ea:	f240 137d 	movw	r3, #381	@ 0x17d
340088ee:	9002      	str	r0, [sp, #8]
340088f0:	e7db      	b.n	340088aa <VD55G1_ApplyPatchCommon+0x3a>
  VD55G1_dbg(ctx, 0, "patch = 0x%04x\n", reg16);
340088f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
340088f6:	4a21      	ldr	r2, [pc, #132]	@ (3400897c <VD55G1_ApplyPatchCommon+0x10c>)
340088f8:	9301      	str	r3, [sp, #4]
340088fa:	f44f 73bf 	mov.w	r3, #382	@ 0x17e
340088fe:	2103      	movs	r1, #3
34008900:	9300      	str	r3, [sp, #0]
34008902:	4603      	mov	r3, r0
34008904:	4628      	mov	r0, r5
34008906:	f7ff ff33 	bl	34008770 <VD55G1_log_impl>
  if (reg16 != (patch_major << 8) + patch_minor) {
3400890a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
3400890e:	eb07 2306 	add.w	r3, r7, r6, lsl #8
34008912:	429a      	cmp	r2, r3
34008914:	b2d3      	uxtb	r3, r2
34008916:	ea4f 2212 	mov.w	r2, r2, lsr #8
3400891a:	d00f      	beq.n	3400893c <VD55G1_ApplyPatchCommon+0xcc>
    VD55G1_error(ctx, "bad patch version expected %d.%d got %d.%d\n", patch_major, patch_minor, reg16 >> 8, reg16 & 0xff);
3400891c:	e9cd 2302 	strd	r2, r3, [sp, #8]
34008920:	4621      	mov	r1, r4
34008922:	f240 1381 	movw	r3, #385	@ 0x181
34008926:	4628      	mov	r0, r5
34008928:	e9cd 6700 	strd	r6, r7, [sp]
3400892c:	4a14      	ldr	r2, [pc, #80]	@ (34008980 <VD55G1_ApplyPatchCommon+0x110>)
3400892e:	f7ff ff1f 	bl	34008770 <VD55G1_log_impl>
    return -1;
34008932:	f04f 34ff 	mov.w	r4, #4294967295

  VD55G1_notice(ctx, "sensor boot successfully\n");

  return 0;
}
34008936:	4620      	mov	r0, r4
34008938:	b007      	add	sp, #28
3400893a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  VD55G1_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);
3400893c:	e9cd 2300 	strd	r2, r3, [sp]
34008940:	2102      	movs	r1, #2
34008942:	f44f 73c2 	mov.w	r3, #388	@ 0x184
34008946:	4628      	mov	r0, r5
34008948:	4a0e      	ldr	r2, [pc, #56]	@ (34008984 <VD55G1_ApplyPatchCommon+0x114>)
3400894a:	f7ff ff11 	bl	34008770 <VD55G1_log_impl>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
3400894e:	2102      	movs	r1, #2
34008950:	4628      	mov	r0, r5
34008952:	f7ff ff47 	bl	340087e4 <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
34008956:	4604      	mov	r4, r0
34008958:	b938      	cbnz	r0, 3400896a <VD55G1_ApplyPatchCommon+0xfa>
  VD55G1_notice(ctx, "sensor boot successfully\n");
3400895a:	f240 1389 	movw	r3, #393	@ 0x189
3400895e:	2102      	movs	r1, #2
34008960:	4628      	mov	r0, r5
34008962:	4a09      	ldr	r2, [pc, #36]	@ (34008988 <VD55G1_ApplyPatchCommon+0x118>)
34008964:	f7ff ff04 	bl	34008770 <VD55G1_log_impl>
  return 0;
34008968:	e7e5      	b.n	34008936 <VD55G1_ApplyPatchCommon+0xc6>
  VD55G1_TraceError(ctx, ret);
3400896a:	f240 1387 	movw	r3, #391	@ 0x187
3400896e:	9002      	str	r0, [sp, #8]
34008970:	e79b      	b.n	340088aa <VD55G1_ApplyPatchCommon+0x3a>
34008972:	bf00      	nop
34008974:	3402e071 	.word	0x3402e071
34008978:	340278da 	.word	0x340278da
3400897c:	340278ff 	.word	0x340278ff
34008980:	34027920 	.word	0x34027920
34008984:	3402795c 	.word	0x3402795c
34008988:	34027981 	.word	0x34027981

3400898c <VD55G1_ComputeFrameLength>:

  return 0;
}

static int VD55G1_ComputeFrameLength(VD55G1_Ctx_t *ctx, int fps, uint16_t *frame_length)
{
3400898c:	b5f0      	push	{r4, r5, r6, r7, lr}
3400898e:	b089      	sub	sp, #36	@ 0x24
34008990:	460e      	mov	r6, r1
34008992:	4617      	mov	r7, r2
  int req_frame_length;
  uint16_t line_length;
  uint16_t height;
  int ret;

  ret = ctx->read16(ctx, VD55G1_REG_LINE_LENGTH, &line_length);
34008994:	f44f 7140 	mov.w	r1, #768	@ 0x300
34008998:	6883      	ldr	r3, [r0, #8]
3400899a:	aa07      	add	r2, sp, #28
{
3400899c:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD55G1_REG_LINE_LENGTH, &line_length);
3400899e:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340089a0:	4605      	mov	r5, r0
340089a2:	b960      	cbnz	r0, 340089be <VD55G1_ComputeFrameLength+0x32>

  ret = ctx->read16(ctx, VD55G1_REG_Y_HEIGHT, &height);
340089a4:	f240 5112 	movw	r1, #1298	@ 0x512
340089a8:	4620      	mov	r0, r4
340089aa:	68a3      	ldr	r3, [r4, #8]
340089ac:	f10d 021e 	add.w	r2, sp, #30
340089b0:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340089b2:	4605      	mov	r5, r0
340089b4:	b190      	cbz	r0, 340089dc <VD55G1_ComputeFrameLength+0x50>
340089b6:	f44f 7316 	mov.w	r3, #600	@ 0x258
340089ba:	9002      	str	r0, [sp, #8]
340089bc:	e002      	b.n	340089c4 <VD55G1_ComputeFrameLength+0x38>
  VD55G1_TraceError(ctx, ret);
340089be:	f240 2355 	movw	r3, #597	@ 0x255
340089c2:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340089c4:	4a17      	ldr	r2, [pc, #92]	@ (34008a24 <VD55G1_ComputeFrameLength+0x98>)
340089c6:	4620      	mov	r0, r4
340089c8:	9200      	str	r2, [sp, #0]
340089ca:	2100      	movs	r1, #0
340089cc:	4a16      	ldr	r2, [pc, #88]	@ (34008a28 <VD55G1_ComputeFrameLength+0x9c>)
340089ce:	9301      	str	r3, [sp, #4]
340089d0:	f7ff fece 	bl	34008770 <VD55G1_log_impl>
340089d4:	4620      	mov	r0, r4
340089d6:	f7ff ff29 	bl	3400882c <display_error>
340089da:	e01f      	b.n	34008a1c <VD55G1_ComputeFrameLength+0x90>

  min_frame_length = height + VD55G1_MIN_VBLANK;
  req_frame_length = drv_ctx->pclk / (line_length * fps);
340089dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
340089e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
340089e2:	4372      	muls	r2, r6
340089e4:	fbb0 f0f2 	udiv	r0, r0, r2
  min_frame_length = height + VD55G1_MIN_VBLANK;
340089e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  *frame_length = MIN(MAX(min_frame_length, req_frame_length), 65535);
340089ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
  min_frame_length = height + VD55G1_MIN_VBLANK;
340089f0:	3356      	adds	r3, #86	@ 0x56
  *frame_length = MIN(MAX(min_frame_length, req_frame_length), 65535);
340089f2:	4283      	cmp	r3, r0
340089f4:	461a      	mov	r2, r3
340089f6:	bfb8      	it	lt
340089f8:	4602      	movlt	r2, r0
340089fa:	428a      	cmp	r2, r1
340089fc:	bfa8      	it	ge
340089fe:	460a      	movge	r2, r1
34008a00:	803a      	strh	r2, [r7, #0]

  VD55G1_dbg(ctx, 1, "frame_length to MAX(%d, %d) = %d to reach %d fps\n", min_frame_length, req_frame_length,
34008a02:	e9cd 3001 	strd	r3, r0, [sp, #4]
34008a06:	f240 235e 	movw	r3, #606	@ 0x25e
34008a0a:	e9cd 2603 	strd	r2, r6, [sp, #12]
34008a0e:	9300      	str	r3, [sp, #0]
34008a10:	2104      	movs	r1, #4
34008a12:	2301      	movs	r3, #1
34008a14:	4620      	mov	r0, r4
34008a16:	4a05      	ldr	r2, [pc, #20]	@ (34008a2c <VD55G1_ComputeFrameLength+0xa0>)
34008a18:	f7ff feaa 	bl	34008770 <VD55G1_log_impl>
             *frame_length, fps);

  return 0;
}
34008a1c:	4628      	mov	r0, r5
34008a1e:	b009      	add	sp, #36	@ 0x24
34008a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
34008a22:	bf00      	nop
34008a24:	3402dfdc 	.word	0x3402dfdc
34008a28:	340278da 	.word	0x340278da
34008a2c:	340279ab 	.word	0x340279ab

34008a30 <VD55G1_SetFlicker>:

  return 0;
}

static int VD55G1_SetFlicker(VD55G1_Ctx_t *ctx, VD55G1_Flicker_t flicker)
{
34008a30:	b530      	push	{r4, r5, lr}
34008a32:	2902      	cmp	r1, #2
34008a34:	4605      	mov	r5, r0
34008a36:	b085      	sub	sp, #20
34008a38:	d818      	bhi.n	34008a6c <VD55G1_SetFlicker+0x3c>
    break;
  default:
    return -1;
  }

  ret = ctx->write16(ctx, VD55G1_REG_EXPOSURE_COMPILER_CONTROL_A, mode);
34008a3a:	4a0e      	ldr	r2, [pc, #56]	@ (34008a74 <VD55G1_SetFlicker+0x44>)
34008a3c:	6943      	ldr	r3, [r0, #20]
34008a3e:	5c52      	ldrb	r2, [r2, r1]
34008a40:	f240 4182 	movw	r1, #1154	@ 0x482
34008a44:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008a46:	4604      	mov	r4, r0
34008a48:	b168      	cbz	r0, 34008a66 <VD55G1_SetFlicker+0x36>
34008a4a:	f240 23ed 	movw	r3, #749	@ 0x2ed
34008a4e:	4a0a      	ldr	r2, [pc, #40]	@ (34008a78 <VD55G1_SetFlicker+0x48>)
34008a50:	9002      	str	r0, [sp, #8]
34008a52:	9200      	str	r2, [sp, #0]
34008a54:	4628      	mov	r0, r5
34008a56:	2100      	movs	r1, #0
34008a58:	4a08      	ldr	r2, [pc, #32]	@ (34008a7c <VD55G1_SetFlicker+0x4c>)
34008a5a:	9301      	str	r3, [sp, #4]
34008a5c:	f7ff fe88 	bl	34008770 <VD55G1_log_impl>
34008a60:	4628      	mov	r0, r5
34008a62:	f7ff fee3 	bl	3400882c <display_error>

  return 0;
}
34008a66:	4620      	mov	r0, r4
34008a68:	b005      	add	sp, #20
34008a6a:	bd30      	pop	{r4, r5, pc}
    return -1;
34008a6c:	f04f 34ff 	mov.w	r4, #4294967295
34008a70:	e7f9      	b.n	34008a66 <VD55G1_SetFlicker+0x36>
34008a72:	bf00      	nop
34008a74:	3402df40 	.word	0x3402df40
34008a78:	3402df8b 	.word	0x3402df8b
34008a7c:	340278da 	.word	0x340278da

34008a80 <VD55G1_StopStreaming>:

  return 0;
}

static int VD55G1_StopStreaming(VD55G1_Ctx_t *ctx)
{
34008a80:	b530      	push	{r4, r5, lr}
  int ret;

  ret = ctx->write8(ctx, VD55G1_REG_STREAMING, VD55G1_STREAMING_STOP_STREAM);
34008a82:	2201      	movs	r2, #1
34008a84:	f240 2102 	movw	r1, #514	@ 0x202
34008a88:	6903      	ldr	r3, [r0, #16]
{
34008a8a:	b085      	sub	sp, #20
34008a8c:	4605      	mov	r5, r0
  ret = ctx->write8(ctx, VD55G1_REG_STREAMING, VD55G1_STREAMING_STOP_STREAM);
34008a8e:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008a90:	4604      	mov	r4, r0
34008a92:	b958      	cbnz	r0, 34008aac <VD55G1_StopStreaming+0x2c>

  ret = VD55G1_PollReg8(ctx, VD55G1_REG_STREAMING, VD55G1_CMD_ACK);
34008a94:	4602      	mov	r2, r0
34008a96:	f240 2102 	movw	r1, #514	@ 0x202
34008a9a:	4628      	mov	r0, r5
34008a9c:	f7ff fe76 	bl	3400878c <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
34008aa0:	4604      	mov	r4, r0
34008aa2:	b190      	cbz	r0, 34008aca <VD55G1_StopStreaming+0x4a>
34008aa4:	f240 3332 	movw	r3, #818	@ 0x332
34008aa8:	9002      	str	r0, [sp, #8]
34008aaa:	e002      	b.n	34008ab2 <VD55G1_StopStreaming+0x32>
  VD55G1_TraceError(ctx, ret);
34008aac:	f240 332f 	movw	r3, #815	@ 0x32f
34008ab0:	9002      	str	r0, [sp, #8]

  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
  VD55G1_TraceError(ctx, ret);
34008ab2:	4a10      	ldr	r2, [pc, #64]	@ (34008af4 <VD55G1_StopStreaming+0x74>)
34008ab4:	4628      	mov	r0, r5
34008ab6:	9200      	str	r2, [sp, #0]
34008ab8:	2100      	movs	r1, #0
34008aba:	4a0f      	ldr	r2, [pc, #60]	@ (34008af8 <VD55G1_StopStreaming+0x78>)
34008abc:	9301      	str	r3, [sp, #4]
34008abe:	f7ff fe57 	bl	34008770 <VD55G1_log_impl>
34008ac2:	4628      	mov	r0, r5
34008ac4:	f7ff feb2 	bl	3400882c <display_error>
34008ac8:	e010      	b.n	34008aec <VD55G1_StopStreaming+0x6c>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_SW_STBY);
34008aca:	2102      	movs	r1, #2
34008acc:	4628      	mov	r0, r5
34008ace:	f7ff fe89 	bl	340087e4 <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
34008ad2:	4604      	mov	r4, r0
34008ad4:	b118      	cbz	r0, 34008ade <VD55G1_StopStreaming+0x5e>
34008ad6:	f240 3335 	movw	r3, #821	@ 0x335
34008ada:	9002      	str	r0, [sp, #8]
34008adc:	e7e9      	b.n	34008ab2 <VD55G1_StopStreaming+0x32>

  VD55G1_notice(ctx, "Streaming is off\n");
34008ade:	f240 3337 	movw	r3, #823	@ 0x337
34008ae2:	2102      	movs	r1, #2
34008ae4:	4628      	mov	r0, r5
34008ae6:	4a05      	ldr	r2, [pc, #20]	@ (34008afc <VD55G1_StopStreaming+0x7c>)
34008ae8:	f7ff fe42 	bl	34008770 <VD55G1_log_impl>

  return 0;
}
34008aec:	4620      	mov	r0, r4
34008aee:	b005      	add	sp, #20
34008af0:	bd30      	pop	{r4, r5, pc}
34008af2:	bf00      	nop
34008af4:	3402df60 	.word	0x3402df60
34008af8:	340278da 	.word	0x340278da
34008afc:	340279ee 	.word	0x340279ee

34008b00 <VD55G1_Init>:

  return VD55G1_StartAWU(ctx);
}

int VD55G1_Init(VD55G1_Ctx_t *ctx, VD55G1_Config_t *config)
{
34008b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  VD55G1_AWUConfig_t *awu = &config->awu;
  struct drv_ctx *drv_ctx = &ctx->ctx;
  int ret;

  if (config->frame_rate < VD55G1_MIN_FPS)
34008b04:	688b      	ldr	r3, [r1, #8]
{
34008b06:	4605      	mov	r5, r0
  if (config->frame_rate < VD55G1_MIN_FPS)
34008b08:	3b02      	subs	r3, #2
34008b0a:	2ba6      	cmp	r3, #166	@ 0xa6
{
34008b0c:	460c      	mov	r4, r1
34008b0e:	b086      	sub	sp, #24
  if (config->frame_rate < VD55G1_MIN_FPS)
34008b10:	d802      	bhi.n	34008b18 <VD55G1_Init+0x18>
    return -1;
  if (config->frame_rate > VD55G1_MAX_FPS)
    return -1;

  if ((config->resolution != VD55G1_RES_QVGA_320_240) &&
34008b12:	790b      	ldrb	r3, [r1, #4]
34008b14:	2b03      	cmp	r3, #3
34008b16:	d905      	bls.n	34008b24 <VD55G1_Init+0x24>
    return -1;
34008b18:	f04f 34ff 	mov.w	r4, #4294967295
    return ret;

  drv_ctx->state = VD55G1_ST_IDLE;

  return 0;
}
34008b1c:	4620      	mov	r0, r4
34008b1e:	b006      	add	sp, #24
34008b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (awu->is_enable && awu->threshold != VD55G1_AWU_THRESHOLD_DEFAULT) {
34008b24:	69cb      	ldr	r3, [r1, #28]
34008b26:	b123      	cbz	r3, 34008b32 <VD55G1_Init+0x32>
34008b28:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
34008b2a:	b113      	cbz	r3, 34008b32 <VD55G1_Init+0x32>
    if (awu->threshold < VD55G1_AWU_THRESHOLD_MIN)
34008b2c:	3b02      	subs	r3, #2
34008b2e:	2b7e      	cmp	r3, #126	@ 0x7e
34008b30:	d8f2      	bhi.n	34008b18 <VD55G1_Init+0x18>
  drv_ctx->config_save = *config;
34008b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008b34:	f105 0634 	add.w	r6, r5, #52	@ 0x34
34008b38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008b3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34008b40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34008b42:	6823      	ldr	r3, [r4, #0]
  ctx->shutdown_pin(ctx, 0);
34008b44:	2100      	movs	r1, #0
34008b46:	4628      	mov	r0, r5
  drv_ctx->config_save = *config;
34008b48:	6033      	str	r3, [r6, #0]
  ctx->shutdown_pin(ctx, 0);
34008b4a:	682b      	ldr	r3, [r5, #0]
34008b4c:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008b4e:	210a      	movs	r1, #10
34008b50:	4628      	mov	r0, r5
34008b52:	6a2b      	ldr	r3, [r5, #32]
34008b54:	4798      	blx	r3
  ctx->shutdown_pin(ctx, 1);
34008b56:	2101      	movs	r1, #1
34008b58:	4628      	mov	r0, r5
34008b5a:	682b      	ldr	r3, [r5, #0]
34008b5c:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008b5e:	210a      	movs	r1, #10
34008b60:	4628      	mov	r0, r5
34008b62:	6a2b      	ldr	r3, [r5, #32]
34008b64:	4798      	blx	r3
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_READY_TO_BOOT);
34008b66:	2101      	movs	r1, #1
34008b68:	4628      	mov	r0, r5
34008b6a:	f7ff fe3b 	bl	340087e4 <VD55G1_WaitState>
  if (ret)
34008b6e:	4604      	mov	r4, r0
34008b70:	2800      	cmp	r0, #0
34008b72:	d1d3      	bne.n	34008b1c <VD55G1_Init+0x1c>
  ret = ctx->read32(ctx, VD55G1_REG_MODEL_ID, &reg32);
34008b74:	4601      	mov	r1, r0
34008b76:	68eb      	ldr	r3, [r5, #12]
34008b78:	4628      	mov	r0, r5
34008b7a:	aa05      	add	r2, sp, #20
34008b7c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008b7e:	4604      	mov	r4, r0
34008b80:	b9c0      	cbnz	r0, 34008bb4 <VD55G1_Init+0xb4>
  VD55G1_dbg(ctx, 0, "model_id = 0x%04x\n", reg32);
34008b82:	9b05      	ldr	r3, [sp, #20]
34008b84:	4a52      	ldr	r2, [pc, #328]	@ (34008cd0 <VD55G1_Init+0x1d0>)
34008b86:	9301      	str	r3, [sp, #4]
34008b88:	f240 1351 	movw	r3, #337	@ 0x151
34008b8c:	2103      	movs	r1, #3
34008b8e:	9300      	str	r3, [sp, #0]
34008b90:	4603      	mov	r3, r0
34008b92:	4628      	mov	r0, r5
34008b94:	f7ff fdec 	bl	34008770 <VD55G1_log_impl>
  if (reg32 != VD55G1_MODEL_ID) {
34008b98:	9a05      	ldr	r2, [sp, #20]
34008b9a:	4b4e      	ldr	r3, [pc, #312]	@ (34008cd4 <VD55G1_Init+0x1d4>)
34008b9c:	429a      	cmp	r2, r3
34008b9e:	d018      	beq.n	34008bd2 <VD55G1_Init+0xd2>
    VD55G1_error(ctx, "Bad model id expected 0x%04x / got 0x%04x\n", VD55G1_MODEL_ID, reg32);
34008ba0:	e9cd 3200 	strd	r3, r2, [sp]
34008ba4:	4621      	mov	r1, r4
34008ba6:	f240 1353 	movw	r3, #339	@ 0x153
34008baa:	4628      	mov	r0, r5
34008bac:	4a4a      	ldr	r2, [pc, #296]	@ (34008cd8 <VD55G1_Init+0x1d8>)
34008bae:	f7ff fddf 	bl	34008770 <VD55G1_log_impl>
  if (ret)
34008bb2:	e7b1      	b.n	34008b18 <VD55G1_Init+0x18>
  VD55G1_TraceError(ctx, ret);
34008bb4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
34008bb8:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008bba:	4a48      	ldr	r2, [pc, #288]	@ (34008cdc <VD55G1_Init+0x1dc>)
34008bbc:	9301      	str	r3, [sp, #4]
    VD55G1_TraceError(ctx, ret);
34008bbe:	4628      	mov	r0, r5
34008bc0:	9200      	str	r2, [sp, #0]
34008bc2:	2100      	movs	r1, #0
34008bc4:	4a46      	ldr	r2, [pc, #280]	@ (34008ce0 <VD55G1_Init+0x1e0>)
34008bc6:	f7ff fdd3 	bl	34008770 <VD55G1_log_impl>
34008bca:	4628      	mov	r0, r5
34008bcc:	f7ff fe2e 	bl	3400882c <display_error>
  if (ret)
34008bd0:	e7a4      	b.n	34008b1c <VD55G1_Init+0x1c>
  ret = ctx->read16(ctx, VD55G1_REG_REVISION, &reg16);
34008bd2:	2104      	movs	r1, #4
34008bd4:	4628      	mov	r0, r5
34008bd6:	68ab      	ldr	r3, [r5, #8]
34008bd8:	f10d 0212 	add.w	r2, sp, #18
34008bdc:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008bde:	4604      	mov	r4, r0
34008be0:	b9f0      	cbnz	r0, 34008c20 <VD55G1_Init+0x120>
  VD55G1_dbg(ctx, 0, "revision = 0x%04x\n", reg16);
34008be2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
34008be6:	4a3f      	ldr	r2, [pc, #252]	@ (34008ce4 <VD55G1_Init+0x1e4>)
34008be8:	9301      	str	r3, [sp, #4]
34008bea:	f240 1359 	movw	r3, #345	@ 0x159
34008bee:	2103      	movs	r1, #3
34008bf0:	9300      	str	r3, [sp, #0]
34008bf2:	4603      	mov	r3, r0
34008bf4:	4628      	mov	r0, r5
34008bf6:	f7ff fdbb 	bl	34008770 <VD55G1_log_impl>
  switch (reg16) {
34008bfa:	f241 0210 	movw	r2, #4112	@ 0x1010
34008bfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
34008c02:	4293      	cmp	r3, r2
34008c04:	d010      	beq.n	34008c28 <VD55G1_Init+0x128>
34008c06:	f242 0220 	movw	r2, #8224	@ 0x2020
34008c0a:	4293      	cmp	r3, r2
34008c0c:	d00c      	beq.n	34008c28 <VD55G1_Init+0x128>
    VD55G1_error(ctx, "Unsupported revision0x%04x\n", reg16);
34008c0e:	9300      	str	r3, [sp, #0]
34008c10:	4621      	mov	r1, r4
34008c12:	f44f 73b1 	mov.w	r3, #354	@ 0x162
34008c16:	4628      	mov	r0, r5
34008c18:	4a33      	ldr	r2, [pc, #204]	@ (34008ce8 <VD55G1_Init+0x1e8>)
34008c1a:	f7ff fda9 	bl	34008770 <VD55G1_log_impl>
  if (ret)
34008c1e:	e77b      	b.n	34008b18 <VD55G1_Init+0x18>
  VD55G1_TraceError(ctx, ret);
34008c20:	f44f 73ac 	mov.w	r3, #344	@ 0x158
34008c24:	9002      	str	r0, [sp, #8]
34008c26:	e7c8      	b.n	34008bba <VD55G1_Init+0xba>
    drv_ctx->cut_version = VD55G1_REVISION_CUT_1;
34008c28:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ret = ctx->read32(ctx, VD55G1_REG_ROM_REVISION, &reg32);
34008c2a:	2108      	movs	r1, #8
34008c2c:	4628      	mov	r0, r5
34008c2e:	68eb      	ldr	r3, [r5, #12]
34008c30:	aa05      	add	r2, sp, #20
34008c32:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008c34:	4604      	mov	r4, r0
34008c36:	b9d0      	cbnz	r0, 34008c6e <VD55G1_Init+0x16e>
  VD55G1_dbg(ctx, 0, "rom = 0x%04x\n", reg32);
34008c38:	9b05      	ldr	r3, [sp, #20]
34008c3a:	4a2c      	ldr	r2, [pc, #176]	@ (34008cec <VD55G1_Init+0x1ec>)
34008c3c:	9301      	str	r3, [sp, #4]
34008c3e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
34008c42:	2103      	movs	r1, #3
34008c44:	9300      	str	r3, [sp, #0]
34008c46:	4603      	mov	r3, r0
34008c48:	4628      	mov	r0, r5
34008c4a:	f7ff fd91 	bl	34008770 <VD55G1_log_impl>
  switch (drv_ctx->cut_version) {
34008c4e:	f241 0210 	movw	r2, #4112	@ 0x1010
34008c52:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
34008c54:	4293      	cmp	r3, r2
34008c56:	d00e      	beq.n	34008c76 <VD55G1_Init+0x176>
34008c58:	f242 0220 	movw	r2, #8224	@ 0x2020
34008c5c:	4293      	cmp	r3, r2
34008c5e:	d02b      	beq.n	34008cb8 <VD55G1_Init+0x1b8>
    assert(0);
34008c60:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
34008c64:	4b22      	ldr	r3, [pc, #136]	@ (34008cf0 <VD55G1_Init+0x1f0>)
34008c66:	4a23      	ldr	r2, [pc, #140]	@ (34008cf4 <VD55G1_Init+0x1f4>)
34008c68:	4823      	ldr	r0, [pc, #140]	@ (34008cf8 <VD55G1_Init+0x1f8>)
34008c6a:	f016 faab 	bl	3401f1c4 <__assert_func>
  VD55G1_TraceError(ctx, ret);
34008c6e:	f240 1367 	movw	r3, #359	@ 0x167
34008c72:	9002      	str	r0, [sp, #8]
34008c74:	e7a1      	b.n	34008bba <VD55G1_Init+0xba>
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_1, sizeof(patch_array_cut_1),
34008c76:	2316      	movs	r3, #22
34008c78:	f241 22e4 	movw	r2, #4836	@ 0x12e4
34008c7c:	9300      	str	r3, [sp, #0]
34008c7e:	2301      	movs	r3, #1
34008c80:	491e      	ldr	r1, [pc, #120]	@ (34008cfc <VD55G1_Init+0x1fc>)
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_2, sizeof(patch_array_cut_2),
34008c82:	4628      	mov	r0, r5
34008c84:	f7ff fdf4 	bl	34008870 <VD55G1_ApplyPatchCommon>
34008c88:	4604      	mov	r4, r0
  if (ret)
34008c8a:	2800      	cmp	r0, #0
34008c8c:	f47f af46 	bne.w	34008b1c <VD55G1_Init+0x1c>
34008c90:	f240 561d 	movw	r6, #1309	@ 0x51d
  for (i = 0 ; i < VD55G1_GPIO_NB; i++)
34008c94:	f240 5821 	movw	r8, #1313	@ 0x521
34008c98:	f105 0763 	add.w	r7, r5, #99	@ 0x63
    ret = ctx->write8(ctx, VD55G1_REG_GPIO_x(i), drv_ctx->config_save.gpio_ctrl[i]);
34008c9c:	4631      	mov	r1, r6
34008c9e:	4628      	mov	r0, r5
34008ca0:	692b      	ldr	r3, [r5, #16]
34008ca2:	f817 2f01 	ldrb.w	r2, [r7, #1]!
34008ca6:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34008ca8:	4604      	mov	r4, r0
34008caa:	b158      	cbz	r0, 34008cc4 <VD55G1_Init+0x1c4>
34008cac:	f240 13a9 	movw	r3, #425	@ 0x1a9
34008cb0:	4a13      	ldr	r2, [pc, #76]	@ (34008d00 <VD55G1_Init+0x200>)
34008cb2:	9002      	str	r0, [sp, #8]
34008cb4:	9301      	str	r3, [sp, #4]
34008cb6:	e782      	b.n	34008bbe <VD55G1_Init+0xbe>
    return VD55G1_ApplyPatchCommon(ctx, (uint8_t *) patch_array_cut_2, sizeof(patch_array_cut_2),
34008cb8:	2302      	movs	r3, #2
34008cba:	f44f 7272 	mov.w	r2, #968	@ 0x3c8
34008cbe:	4911      	ldr	r1, [pc, #68]	@ (34008d04 <VD55G1_Init+0x204>)
34008cc0:	9300      	str	r3, [sp, #0]
34008cc2:	e7de      	b.n	34008c82 <VD55G1_Init+0x182>
  for (i = 0 ; i < VD55G1_GPIO_NB; i++)
34008cc4:	3601      	adds	r6, #1
34008cc6:	b2b6      	uxth	r6, r6
34008cc8:	4546      	cmp	r6, r8
34008cca:	d1e7      	bne.n	34008c9c <VD55G1_Init+0x19c>
  drv_ctx->state = VD55G1_ST_IDLE;
34008ccc:	62a8      	str	r0, [r5, #40]	@ 0x28
  return 0;
34008cce:	e725      	b.n	34008b1c <VD55G1_Init+0x1c>
34008cd0:	34027a10 	.word	0x34027a10
34008cd4:	53354731 	.word	0x53354731
34008cd8:	34027a34 	.word	0x34027a34
34008cdc:	3402e0a9 	.word	0x3402e0a9
34008ce0:	340278da 	.word	0x340278da
34008ce4:	34027a6f 	.word	0x34027a6f
34008ce8:	34027a93 	.word	0x34027a93
34008cec:	34027abf 	.word	0x34027abf
34008cf0:	34026d17 	.word	0x34026d17
34008cf4:	3402e089 	.word	0x3402e089
34008cf8:	3402786c 	.word	0x3402786c
34008cfc:	3402e4f8 	.word	0x3402e4f8
34008d00:	3402e064 	.word	0x3402e064
34008d04:	3402e130 	.word	0x3402e130

34008d08 <VD55G1_DeInit>:

int VD55G1_DeInit(VD55G1_Ctx_t *ctx)
{
  struct drv_ctx *drv_ctx = &ctx->ctx;

  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008d08:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
34008d0a:	b510      	push	{r4, lr}
  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008d0c:	2b01      	cmp	r3, #1
{
34008d0e:	4604      	mov	r4, r0
  if (drv_ctx->state == VD55G1_ST_STREAMING)
34008d10:	d008      	beq.n	34008d24 <VD55G1_DeInit+0x1c>
    return -1;

  ctx->shutdown_pin(ctx, 0);
34008d12:	6803      	ldr	r3, [r0, #0]
34008d14:	2100      	movs	r1, #0
34008d16:	4798      	blx	r3
  ctx->delay(ctx, 10);
34008d18:	4620      	mov	r0, r4
34008d1a:	210a      	movs	r1, #10
34008d1c:	6a23      	ldr	r3, [r4, #32]
34008d1e:	4798      	blx	r3

  return 0;
34008d20:	2000      	movs	r0, #0
}
34008d22:	bd10      	pop	{r4, pc}
    return -1;
34008d24:	f04f 30ff 	mov.w	r0, #4294967295
34008d28:	e7fb      	b.n	34008d22 <VD55G1_DeInit+0x1a>
34008d2a:	0000      	movs	r0, r0
34008d2c:	0000      	movs	r0, r0
	...

34008d30 <VD55G1_Start>:

int VD55G1_Start(VD55G1_Ctx_t *ctx)
{
34008d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (drv_ctx->config_save.out_itf.data_rate_in_mps < VD55G1_MIN_DATARATE ||
34008d32:	6c43      	ldr	r3, [r0, #68]	@ 0x44
34008d34:	4e8a      	ldr	r6, [pc, #552]	@ (34008f60 <VD55G1_Start+0x230>)
34008d36:	4a8b      	ldr	r2, [pc, #556]	@ (34008f64 <VD55G1_Start+0x234>)
34008d38:	4433      	add	r3, r6
34008d3a:	4293      	cmp	r3, r2
{
34008d3c:	4605      	mov	r5, r0
34008d3e:	b087      	sub	sp, #28
  if (drv_ctx->config_save.out_itf.data_rate_in_mps < VD55G1_MIN_DATARATE ||
34008d40:	d87e      	bhi.n	34008e40 <VD55G1_Start+0x110>
  ret = ctx->write32(ctx, VD55G1_REG_EXT_CLOCK, drv_ctx->config_save.ext_clock_freq_in_hz);
34008d42:	f44f 7108 	mov.w	r1, #544	@ 0x220
34008d46:	6983      	ldr	r3, [r0, #24]
34008d48:	6b42      	ldr	r2, [r0, #52]	@ 0x34
34008d4a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008d4c:	4604      	mov	r4, r0
34008d4e:	b958      	cbnz	r0, 34008d68 <VD55G1_Start+0x38>
  ret = ctx->write32(ctx, VD55G1_REG_MIPI_DATA_RATE, drv_ctx->config_save.out_itf.data_rate_in_mps);
34008d50:	f44f 7109 	mov.w	r1, #548	@ 0x224
34008d54:	4628      	mov	r0, r5
34008d56:	69ab      	ldr	r3, [r5, #24]
34008d58:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
34008d5a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008d5c:	4604      	mov	r4, r0
34008d5e:	b300      	cbz	r0, 34008da2 <VD55G1_Start+0x72>
34008d60:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
34008d64:	9002      	str	r0, [sp, #8]
34008d66:	e002      	b.n	34008d6e <VD55G1_Start+0x3e>
  VD55G1_TraceError(ctx, ret);
34008d68:	f240 13f5 	movw	r3, #501	@ 0x1f5
34008d6c:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008d6e:	4a7e      	ldr	r2, [pc, #504]	@ (34008f68 <VD55G1_Start+0x238>)
34008d70:	4628      	mov	r0, r5
34008d72:	9200      	str	r2, [sp, #0]
34008d74:	2100      	movs	r1, #0
34008d76:	4a7d      	ldr	r2, [pc, #500]	@ (34008f6c <VD55G1_Start+0x23c>)
34008d78:	9301      	str	r3, [sp, #4]
34008d7a:	f7ff fcf9 	bl	34008770 <VD55G1_log_impl>
34008d7e:	4628      	mov	r0, r5
34008d80:	f7ff fd54 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34008d84:	f240 23fe 	movw	r3, #766	@ 0x2fe
34008d88:	9402      	str	r4, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008d8a:	4a79      	ldr	r2, [pc, #484]	@ (34008f70 <VD55G1_Start+0x240>)
34008d8c:	9301      	str	r3, [sp, #4]
  VD55G1_TraceError(ctx, ret);
34008d8e:	4628      	mov	r0, r5
34008d90:	9200      	str	r2, [sp, #0]
34008d92:	2100      	movs	r1, #0
34008d94:	4a75      	ldr	r2, [pc, #468]	@ (34008f6c <VD55G1_Start+0x23c>)
34008d96:	f7ff fceb 	bl	34008770 <VD55G1_log_impl>
34008d9a:	4628      	mov	r0, r5
34008d9c:	f7ff fd46 	bl	3400882c <display_error>
  ret = VD55G1_Setup(ctx);
  if (ret)
    return ret;

  ret = VD55G1_StartStreaming(ctx);
  if (ret)
34008da0:	e233      	b.n	3400920a <VD55G1_Start+0x4da>
  ret = ctx->read32(ctx, VD55G1_REG_MIPI_DATA_RATE, &mipi_data_rate);
34008da2:	f44f 7109 	mov.w	r1, #548	@ 0x224
34008da6:	4628      	mov	r0, r5
34008da8:	68eb      	ldr	r3, [r5, #12]
34008daa:	aa05      	add	r2, sp, #20
34008dac:	4798      	blx	r3
  if (ret)
34008dae:	2800      	cmp	r0, #0
34008db0:	d144      	bne.n	34008e3c <VD55G1_Start+0x10c>
  if (mipi_data_rate <= 1200000000 && mipi_data_rate > 600000000)
34008db2:	9b05      	ldr	r3, [sp, #20]
34008db4:	4a6f      	ldr	r2, [pc, #444]	@ (34008f74 <VD55G1_Start+0x244>)
34008db6:	4970      	ldr	r1, [pc, #448]	@ (34008f78 <VD55G1_Start+0x248>)
34008db8:	441a      	add	r2, r3
34008dba:	428a      	cmp	r2, r1
34008dbc:	496f      	ldr	r1, [pc, #444]	@ (34008f7c <VD55G1_Start+0x24c>)
34008dbe:	d904      	bls.n	34008dca <VD55G1_Start+0x9a>
  else if (mipi_data_rate <= 600000000 && mipi_data_rate > 300000000)
34008dc0:	4a6f      	ldr	r2, [pc, #444]	@ (34008f80 <VD55G1_Start+0x250>)
34008dc2:	441a      	add	r2, r3
34008dc4:	428a      	cmp	r2, r1
34008dc6:	d80e      	bhi.n	34008de6 <VD55G1_Start+0xb6>
    return mipi_data_rate * 2;
34008dc8:	005b      	lsls	r3, r3, #1
  if (system_clk <= 1200000000 && system_clk > 900000000)
34008dca:	4a6e      	ldr	r2, [pc, #440]	@ (34008f84 <VD55G1_Start+0x254>)
34008dcc:	441a      	add	r2, r3
34008dce:	428a      	cmp	r2, r1
34008dd0:	d90e      	bls.n	34008df0 <VD55G1_Start+0xc0>
  else if (system_clk <= 900000000 && system_clk > 780000000)
34008dd2:	4a6d      	ldr	r2, [pc, #436]	@ (34008f88 <VD55G1_Start+0x258>)
34008dd4:	496d      	ldr	r1, [pc, #436]	@ (34008f8c <VD55G1_Start+0x25c>)
34008dd6:	441a      	add	r2, r3
34008dd8:	428a      	cmp	r2, r1
    return system_clk / 6;
34008dda:	bf94      	ite	ls
34008ddc:	2206      	movls	r2, #6
    return system_clk / 5;
34008dde:	2205      	movhi	r2, #5
34008de0:	fbb3 f3f2 	udiv	r3, r3, r2
  if (!drv_ctx->pclk)
34008de4:	e005      	b.n	34008df2 <VD55G1_Start+0xc2>
  else if (mipi_data_rate <= 300000000 && mipi_data_rate >= 250000000)
34008de6:	4a6a      	ldr	r2, [pc, #424]	@ (34008f90 <VD55G1_Start+0x260>)
34008de8:	441e      	add	r6, r3
34008dea:	4296      	cmp	r6, r2
34008dec:	d826      	bhi.n	34008e3c <VD55G1_Start+0x10c>
    return mipi_data_rate * 4;
34008dee:	009b      	lsls	r3, r3, #2
    return system_clk / 8;
34008df0:	08db      	lsrs	r3, r3, #3
  drv_ctx->pclk = VD55G1_GetPixelClock(ctx);
34008df2:	632b      	str	r3, [r5, #48]	@ 0x30
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34008df4:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008df6:	2208      	movs	r2, #8
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34008df8:	3b00      	subs	r3, #0
34008dfa:	bf18      	it	ne
34008dfc:	2301      	movne	r3, #1
34008dfe:	64ab      	str	r3, [r5, #72]	@ 0x48
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008e00:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e02:	f240 310a 	movw	r1, #778	@ 0x30a
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008e06:	3b00      	subs	r3, #0
34008e08:	bf18      	it	ne
34008e0a:	2301      	movne	r3, #1
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e0c:	4628      	mov	r0, r5
  out_itf->data_lane_swap_enable = !!out_itf->data_lane_swap_enable;
34008e0e:	64eb      	str	r3, [r5, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD55G1_REG_FORMAT_CTRL, 8);
34008e10:	692b      	ldr	r3, [r5, #16]
34008e12:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008e14:	4604      	mov	r4, r0
34008e16:	b1b0      	cbz	r0, 34008e46 <VD55G1_Start+0x116>
34008e18:	f240 230d 	movw	r3, #525	@ 0x20d
34008e1c:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008e1e:	4a5d      	ldr	r2, [pc, #372]	@ (34008f94 <VD55G1_Start+0x264>)
34008e20:	9301      	str	r3, [sp, #4]
34008e22:	2100      	movs	r1, #0
34008e24:	4628      	mov	r0, r5
34008e26:	9200      	str	r2, [sp, #0]
34008e28:	4a50      	ldr	r2, [pc, #320]	@ (34008f6c <VD55G1_Start+0x23c>)
34008e2a:	f7ff fca1 	bl	34008770 <VD55G1_log_impl>
34008e2e:	4628      	mov	r0, r5
34008e30:	f7ff fcfc 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34008e34:	f240 3301 	movw	r3, #769	@ 0x301
34008e38:	9402      	str	r4, [sp, #8]
34008e3a:	e7a6      	b.n	34008d8a <VD55G1_Start+0x5a>
  drv_ctx->pclk = VD55G1_GetPixelClock(ctx);
34008e3c:	2300      	movs	r3, #0
34008e3e:	632b      	str	r3, [r5, #48]	@ 0x30
    return -1;
34008e40:	f04f 34ff 	mov.w	r4, #4294967295
34008e44:	e79e      	b.n	34008d84 <VD55G1_Start+0x54>
  oif_ctrl = out_itf->data_lane_swap_enable << 6 |
34008e46:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	@ 0x48
34008e4a:	00d2      	lsls	r2, r2, #3
34008e4c:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
  ret = ctx->write16(ctx, VD55G1_REG_OIF_CTRL, oif_ctrl);
34008e50:	f44f 7143 	mov.w	r1, #780	@ 0x30c
34008e54:	4628      	mov	r0, r5
34008e56:	696b      	ldr	r3, [r5, #20]
34008e58:	b292      	uxth	r2, r2
34008e5a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008e5c:	4604      	mov	r4, r0
34008e5e:	b958      	cbnz	r0, 34008e78 <VD55G1_Start+0x148>
  ret = ctx->write8(ctx, VD55G1_REG_OIF_IMG_CTRL, 0x2a);
34008e60:	222a      	movs	r2, #42	@ 0x2a
34008e62:	f240 310f 	movw	r1, #783	@ 0x30f
34008e66:	4628      	mov	r0, r5
34008e68:	692b      	ldr	r3, [r5, #16]
34008e6a:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008e6c:	4604      	mov	r4, r0
34008e6e:	b138      	cbz	r0, 34008e80 <VD55G1_Start+0x150>
34008e70:	f240 2317 	movw	r3, #535	@ 0x217
34008e74:	9002      	str	r0, [sp, #8]
34008e76:	e7d2      	b.n	34008e1e <VD55G1_Start+0xee>
  VD55G1_TraceError(ctx, ret);
34008e78:	f240 2313 	movw	r3, #531	@ 0x213
34008e7c:	9002      	str	r0, [sp, #8]
34008e7e:	e7ce      	b.n	34008e1e <VD55G1_Start+0xee>
  mode = VD55G1_Resolution2Mode(drv_ctx->config_save.resolution);
34008e80:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
  switch (resolution) {
34008e84:	2b03      	cmp	r3, #3
34008e86:	f200 8102 	bhi.w	3400908e <VD55G1_Start+0x35e>
34008e8a:	4a43      	ldr	r2, [pc, #268]	@ (34008f98 <VD55G1_Start+0x268>)
34008e8c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (!mode)
34008e90:	2e00      	cmp	r6, #0
34008e92:	f000 80fc 	beq.w	3400908e <VD55G1_Start+0x35e>
  ret = ctx->write8(ctx, VD55G1_REG_READOUT_CTRL, mode->bin_mode);
34008e96:	f240 512e 	movw	r1, #1326	@ 0x52e
34008e9a:	4628      	mov	r0, r5
34008e9c:	692b      	ldr	r3, [r5, #16]
34008e9e:	7a32      	ldrb	r2, [r6, #8]
34008ea0:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008ea2:	4604      	mov	r4, r0
34008ea4:	b188      	cbz	r0, 34008eca <VD55G1_Start+0x19a>
34008ea6:	f240 2327 	movw	r3, #551	@ 0x227
34008eaa:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34008eac:	4a3b      	ldr	r2, [pc, #236]	@ (34008f9c <VD55G1_Start+0x26c>)
34008eae:	4628      	mov	r0, r5
34008eb0:	9200      	str	r2, [sp, #0]
34008eb2:	2100      	movs	r1, #0
34008eb4:	4a2d      	ldr	r2, [pc, #180]	@ (34008f6c <VD55G1_Start+0x23c>)
34008eb6:	9301      	str	r3, [sp, #4]
34008eb8:	f7ff fc5a 	bl	34008770 <VD55G1_log_impl>
34008ebc:	4628      	mov	r0, r5
34008ebe:	f7ff fcb5 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34008ec2:	f44f 7341 	mov.w	r3, #772	@ 0x304
34008ec6:	9402      	str	r4, [sp, #8]
34008ec8:	e75f      	b.n	34008d8a <VD55G1_Start+0x5a>
  ret = ctx->write16(ctx, VD55G1_REG_X_START, mode->crop.left);
34008eca:	f240 5114 	movw	r1, #1300	@ 0x514
34008ece:	4628      	mov	r0, r5
34008ed0:	696b      	ldr	r3, [r5, #20]
34008ed2:	89b2      	ldrh	r2, [r6, #12]
34008ed4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008ed6:	4604      	mov	r4, r0
34008ed8:	b958      	cbnz	r0, 34008ef2 <VD55G1_Start+0x1c2>
  ret = ctx->write16(ctx, VD55G1_REG_X_WIDTH, mode->crop.width);
34008eda:	f240 5116 	movw	r1, #1302	@ 0x516
34008ede:	4628      	mov	r0, r5
34008ee0:	696b      	ldr	r3, [r5, #20]
34008ee2:	8ab2      	ldrh	r2, [r6, #20]
34008ee4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008ee6:	4604      	mov	r4, r0
34008ee8:	b138      	cbz	r0, 34008efa <VD55G1_Start+0x1ca>
34008eea:	f44f 730b 	mov.w	r3, #556	@ 0x22c
34008eee:	9002      	str	r0, [sp, #8]
34008ef0:	e7dc      	b.n	34008eac <VD55G1_Start+0x17c>
  VD55G1_TraceError(ctx, ret);
34008ef2:	f240 232a 	movw	r3, #554	@ 0x22a
34008ef6:	9002      	str	r0, [sp, #8]
34008ef8:	e7d8      	b.n	34008eac <VD55G1_Start+0x17c>
  ret = ctx->write16(ctx, VD55G1_REG_Y_START, mode->crop.top);
34008efa:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
34008efe:	4628      	mov	r0, r5
34008f00:	696b      	ldr	r3, [r5, #20]
34008f02:	8a32      	ldrh	r2, [r6, #16]
34008f04:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008f06:	4604      	mov	r4, r0
34008f08:	b118      	cbz	r0, 34008f12 <VD55G1_Start+0x1e2>
34008f0a:	f240 232e 	movw	r3, #558	@ 0x22e
34008f0e:	9002      	str	r0, [sp, #8]
34008f10:	e7cc      	b.n	34008eac <VD55G1_Start+0x17c>
  ret = ctx->write16(ctx, VD55G1_REG_Y_HEIGHT, mode->crop.height);
34008f12:	f240 5112 	movw	r1, #1298	@ 0x512
34008f16:	4628      	mov	r0, r5
34008f18:	696b      	ldr	r3, [r5, #20]
34008f1a:	8b32      	ldrh	r2, [r6, #24]
34008f1c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008f1e:	4604      	mov	r4, r0
34008f20:	b118      	cbz	r0, 34008f2a <VD55G1_Start+0x1fa>
34008f22:	f44f 730c 	mov.w	r3, #560	@ 0x230
34008f26:	9002      	str	r0, [sp, #8]
34008f28:	e7c0      	b.n	34008eac <VD55G1_Start+0x17c>
  ret = ctx->read16(ctx, VD55G1_REG_X_WIDTH, &width);
34008f2a:	f240 5116 	movw	r1, #1302	@ 0x516
34008f2e:	4628      	mov	r0, r5
34008f30:	68ab      	ldr	r3, [r5, #8]
34008f32:	aa05      	add	r2, sp, #20
34008f34:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008f36:	4604      	mov	r4, r0
34008f38:	b3a0      	cbz	r0, 34008fa4 <VD55G1_Start+0x274>
34008f3a:	f240 233e 	movw	r3, #574	@ 0x23e
34008f3e:	9002      	str	r0, [sp, #8]
34008f40:	4a17      	ldr	r2, [pc, #92]	@ (34008fa0 <VD55G1_Start+0x270>)
34008f42:	9301      	str	r3, [sp, #4]
34008f44:	4628      	mov	r0, r5
34008f46:	9200      	str	r2, [sp, #0]
34008f48:	2100      	movs	r1, #0
34008f4a:	4a08      	ldr	r2, [pc, #32]	@ (34008f6c <VD55G1_Start+0x23c>)
34008f4c:	f7ff fc10 	bl	34008770 <VD55G1_log_impl>
34008f50:	4628      	mov	r0, r5
34008f52:	f7ff fc6b 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34008f56:	f240 3307 	movw	r3, #775	@ 0x307
34008f5a:	9402      	str	r4, [sp, #8]
34008f5c:	e715      	b.n	34008d8a <VD55G1_Start+0x5a>
34008f5e:	bf00      	nop
34008f60:	f1194d80 	.word	0xf1194d80
34008f64:	389fd980 	.word	0x389fd980
34008f68:	3402e044 	.word	0x3402e044
34008f6c:	340278da 	.word	0x340278da
34008f70:	3402e057 	.word	0x3402e057
34008f74:	dc3cb9ff 	.word	0xdc3cb9ff
34008f78:	23c345ff 	.word	0x23c345ff
34008f7c:	11e1a2ff 	.word	0x11e1a2ff
34008f80:	ee1e5cff 	.word	0xee1e5cff
34008f84:	ca5b16ff 	.word	0xca5b16ff
34008f88:	d18224ff 	.word	0xd18224ff
34008f8c:	07270dff 	.word	0x07270dff
34008f90:	02faf080 	.word	0x02faf080
34008f94:	3402e031 	.word	0x3402e031
34008f98:	3402df50 	.word	0x3402df50
34008f9c:	3402e020 	.word	0x3402e020
34008fa0:	3402dff6 	.word	0x3402dff6
  min_line_len_mipi = ((width * VD55G1_MIPI_BPP + VD55G1_MIPI_MARGIN) * (uint64_t)drv_ctx->pclk)
34008fa4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
34008fa8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
34008faa:	00c9      	lsls	r1, r1, #3
34008fac:	f501 7161 	add.w	r1, r1, #900	@ 0x384
                      / VD55G1_MIPI_DATA_RATE_HZ;
34008fb0:	a3a3      	add	r3, pc, #652	@ (adr r3, 34009240 <VD55G1_Start+0x510>)
34008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
34008fb6:	fba1 0100 	umull	r0, r1, r1, r0
34008fba:	f7f8 fdc7 	bl	34001b4c <__aeabi_uldivmod>
  line_len = MAX(VD55G1_MIN_LINE_LEN_ADC_10, min_line_len_mipi);
34008fbe:	f5b0 6f8d 	cmp.w	r0, #1128	@ 0x468
34008fc2:	bfb8      	it	lt
34008fc4:	f44f 608d 	movlt.w	r0, #1128	@ 0x468
  ret = ctx->write16(ctx, VD55G1_REG_LINE_LENGTH, line_len);
34008fc8:	f44f 7140 	mov.w	r1, #768	@ 0x300
34008fcc:	b282      	uxth	r2, r0
  line_len = MAX(VD55G1_MIN_LINE_LEN_ADC_10, min_line_len_mipi);
34008fce:	4606      	mov	r6, r0
  ret = ctx->write16(ctx, VD55G1_REG_LINE_LENGTH, line_len);
34008fd0:	696b      	ldr	r3, [r5, #20]
34008fd2:	4628      	mov	r0, r5
34008fd4:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34008fd6:	4604      	mov	r4, r0
34008fd8:	2800      	cmp	r0, #0
34008fda:	d14e      	bne.n	3400907a <VD55G1_Start+0x34a>
  VD55G1_dbg(ctx, 1, "line_length = %d\n", line_len);
34008fdc:	f240 2346 	movw	r3, #582	@ 0x246
34008fe0:	b2b6      	uxth	r6, r6
34008fe2:	2104      	movs	r1, #4
34008fe4:	4628      	mov	r0, r5
34008fe6:	4a8a      	ldr	r2, [pc, #552]	@ (34009210 <VD55G1_Start+0x4e0>)
34008fe8:	9300      	str	r3, [sp, #0]
34008fea:	9601      	str	r6, [sp, #4]
34008fec:	2301      	movs	r3, #1
34008fee:	f7ff fbbf 	bl	34008770 <VD55G1_log_impl>
  ret = VD55G1_ComputeFrameLength(ctx, drv_ctx->config_save.frame_rate, &frame_length);
34008ff2:	4628      	mov	r0, r5
34008ff4:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
34008ff6:	aa05      	add	r2, sp, #20
34008ff8:	f7ff fcc8 	bl	3400898c <VD55G1_ComputeFrameLength>
  if (ret)
34008ffc:	4604      	mov	r4, r0
34008ffe:	2800      	cmp	r0, #0
34009000:	d1a9      	bne.n	34008f56 <VD55G1_Start+0x226>
  VD55G1_dbg(ctx, 1, "Set frame_length to %d to reach %d fps\n", frame_length, drv_ctx->config_save.frame_rate);
34009002:	f8bd 4014 	ldrh.w	r4, [sp, #20]
34009006:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
34009008:	2104      	movs	r1, #4
3400900a:	e9cd 4301 	strd	r4, r3, [sp, #4]
3400900e:	f240 2372 	movw	r3, #626	@ 0x272
34009012:	4628      	mov	r0, r5
34009014:	4a7f      	ldr	r2, [pc, #508]	@ (34009214 <VD55G1_Start+0x4e4>)
34009016:	9300      	str	r3, [sp, #0]
34009018:	2301      	movs	r3, #1
3400901a:	f7ff fba9 	bl	34008770 <VD55G1_log_impl>
  ret = ctx->write16(ctx, VD55G1_REG_FRAME_LENGTH, frame_length);
3400901e:	4622      	mov	r2, r4
34009020:	f240 510c 	movw	r1, #1292	@ 0x50c
34009024:	4628      	mov	r0, r5
34009026:	696b      	ldr	r3, [r5, #20]
34009028:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400902a:	4604      	mov	r4, r0
3400902c:	bb48      	cbnz	r0, 34009082 <VD55G1_Start+0x352>
  if (awu->is_enable)
3400902e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
  max_fps = drv_ctx->config_save.frame_rate;
34009030:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
  if (awu->is_enable)
34009032:	bb7b      	cbnz	r3, 34009094 <VD55G1_Start+0x364>
  ret = VD55G1_ComputeFrameLength(ctx, max_fps, &frame_length);
34009034:	4628      	mov	r0, r5
34009036:	aa05      	add	r2, sp, #20
34009038:	f7ff fca8 	bl	3400898c <VD55G1_ComputeFrameLength>
  if (ret)
3400903c:	4604      	mov	r4, r0
3400903e:	b9c0      	cbnz	r0, 34009072 <VD55G1_Start+0x342>
  ret = ctx->write16(ctx, VD55G1_REG_MAX_COARSE_INTEGRATION_LINES, frame_length - 10);
34009040:	f8bd 6014 	ldrh.w	r6, [sp, #20]
34009044:	f240 3172 	movw	r1, #882	@ 0x372
34009048:	3e0a      	subs	r6, #10
3400904a:	4628      	mov	r0, r5
3400904c:	696b      	ldr	r3, [r5, #20]
3400904e:	b2b2      	uxth	r2, r6
34009050:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
34009052:	4604      	mov	r4, r0
34009054:	b338      	cbz	r0, 340090a6 <VD55G1_Start+0x376>
34009056:	f240 238f 	movw	r3, #655	@ 0x28f
3400905a:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
3400905c:	4a6e      	ldr	r2, [pc, #440]	@ (34009218 <VD55G1_Start+0x4e8>)
3400905e:	4628      	mov	r0, r5
34009060:	9200      	str	r2, [sp, #0]
34009062:	2100      	movs	r1, #0
34009064:	4a6d      	ldr	r2, [pc, #436]	@ (3400921c <VD55G1_Start+0x4ec>)
34009066:	9301      	str	r3, [sp, #4]
34009068:	f7ff fb82 	bl	34008770 <VD55G1_log_impl>
3400906c:	4628      	mov	r0, r5
3400906e:	f7ff fbdd 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34009072:	f240 330a 	movw	r3, #778	@ 0x30a
34009076:	9402      	str	r4, [sp, #8]
34009078:	e687      	b.n	34008d8a <VD55G1_Start+0x5a>
  VD55G1_TraceError(ctx, ret);
3400907a:	f240 2345 	movw	r3, #581	@ 0x245
3400907e:	9002      	str	r0, [sp, #8]
34009080:	e75e      	b.n	34008f40 <VD55G1_Start+0x210>
  VD55G1_TraceError(ctx, ret);
34009082:	f44f 731d 	mov.w	r3, #628	@ 0x274
34009086:	4a66      	ldr	r2, [pc, #408]	@ (34009220 <VD55G1_Start+0x4f0>)
34009088:	9002      	str	r0, [sp, #8]
3400908a:	9301      	str	r3, [sp, #4]
3400908c:	e75a      	b.n	34008f44 <VD55G1_Start+0x214>
3400908e:	f04f 34ff 	mov.w	r4, #4294967295
34009092:	e716      	b.n	34008ec2 <VD55G1_Start+0x192>
    max_fps = MAX(max_fps, awu->convergence_frame_rate);
34009094:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
34009096:	4299      	cmp	r1, r3
34009098:	bfb8      	it	lt
3400909a:	4619      	movlt	r1, r3
    max_fps = MAX(max_fps, awu->awu_frame_rate);
3400909c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3400909e:	4299      	cmp	r1, r3
340090a0:	bfb8      	it	lt
340090a2:	4619      	movlt	r1, r3
340090a4:	e7c6      	b.n	34009034 <VD55G1_Start+0x304>
  VD55G1_dbg(ctx, 1, "Max coarse lines = %d\n", frame_length - 10);
340090a6:	f44f 7324 	mov.w	r3, #656	@ 0x290
340090aa:	2104      	movs	r1, #4
340090ac:	4628      	mov	r0, r5
340090ae:	4a5d      	ldr	r2, [pc, #372]	@ (34009224 <VD55G1_Start+0x4f4>)
340090b0:	9300      	str	r3, [sp, #0]
340090b2:	9601      	str	r6, [sp, #4]
340090b4:	2301      	movs	r3, #1
340090b6:	f7ff fb5b 	bl	34008770 <VD55G1_log_impl>
  reg = drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE ? VD55G1_EXP_MODE_MANUAL : VD55G1_EXP_MODE_AUTO;
340090ba:	f895 2041 	ldrb.w	r2, [r5, #65]	@ 0x41
  ret = ctx->write8(ctx, VD55G1_REG_EXP_MODE, reg);
340090be:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
  reg = drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE ? VD55G1_EXP_MODE_MANUAL : VD55G1_EXP_MODE_AUTO;
340090c2:	3a00      	subs	r2, #0
340090c4:	bf18      	it	ne
340090c6:	2201      	movne	r2, #1
  ret = ctx->write8(ctx, VD55G1_REG_EXP_MODE, reg);
340090c8:	4628      	mov	r0, r5
340090ca:	692b      	ldr	r3, [r5, #16]
340090cc:	0052      	lsls	r2, r2, #1
340090ce:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340090d0:	4604      	mov	r4, r0
340090d2:	b118      	cbz	r0, 340090dc <VD55G1_Start+0x3ac>
340090d4:	f240 2395 	movw	r3, #661	@ 0x295
340090d8:	9002      	str	r0, [sp, #8]
340090da:	e7bf      	b.n	3400905c <VD55G1_Start+0x32c>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340090dc:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
340090e0:	2b03      	cmp	r3, #3
340090e2:	d905      	bls.n	340090f0 <VD55G1_Start+0x3c0>
    return -1;
340090e4:	f04f 34ff 	mov.w	r4, #4294967295
  VD55G1_TraceError(ctx, ret);
340090e8:	f240 330d 	movw	r3, #781	@ 0x30d
340090ec:	9402      	str	r4, [sp, #8]
340090ee:	e64c      	b.n	34008d8a <VD55G1_Start+0x5a>
  ret = ctx->write8(ctx, VD55G1_REG_ORIENTATION, mode);
340090f0:	4a4d      	ldr	r2, [pc, #308]	@ (34009228 <VD55G1_Start+0x4f8>)
340090f2:	692c      	ldr	r4, [r5, #16]
340090f4:	f240 3102 	movw	r1, #770	@ 0x302
340090f8:	4628      	mov	r0, r5
340090fa:	5cd2      	ldrb	r2, [r2, r3]
340090fc:	47a0      	blx	r4
  VD55G1_TraceError(ctx, ret);
340090fe:	4604      	mov	r4, r0
34009100:	b948      	cbnz	r0, 34009116 <VD55G1_Start+0x3e6>
  switch (drv_ctx->config_save.patgen) {
34009102:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
34009106:	2b02      	cmp	r3, #2
34009108:	d914      	bls.n	34009134 <VD55G1_Start+0x404>
    return -1;
3400910a:	f04f 34ff 	mov.w	r4, #4294967295
  VD55G1_TraceError(ctx, ret);
3400910e:	f44f 7344 	mov.w	r3, #784	@ 0x310
34009112:	9402      	str	r4, [sp, #8]
34009114:	e639      	b.n	34008d8a <VD55G1_Start+0x5a>
  VD55G1_TraceError(ctx, ret);
34009116:	f240 23b2 	movw	r3, #690	@ 0x2b2
3400911a:	4a44      	ldr	r2, [pc, #272]	@ (3400922c <VD55G1_Start+0x4fc>)
3400911c:	9002      	str	r0, [sp, #8]
3400911e:	9200      	str	r2, [sp, #0]
34009120:	4628      	mov	r0, r5
34009122:	2100      	movs	r1, #0
34009124:	4a3d      	ldr	r2, [pc, #244]	@ (3400921c <VD55G1_Start+0x4ec>)
34009126:	9301      	str	r3, [sp, #4]
34009128:	f7ff fb22 	bl	34008770 <VD55G1_log_impl>
3400912c:	4628      	mov	r0, r5
3400912e:	f7ff fb7d 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34009132:	e7d9      	b.n	340090e8 <VD55G1_Start+0x3b8>
34009134:	4a3e      	ldr	r2, [pc, #248]	@ (34009230 <VD55G1_Start+0x500>)
34009136:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
  if (drv_ctx->config_save.patgen != VD55G1_PATGEN_CTRL_DISABLE)
3400913a:	b313      	cbz	r3, 34009182 <VD55G1_Start+0x452>
    ret = ctx->write8(ctx, VD55G1_REG_DUSTER_CTRL, VD55G1_DUSTER_DISABLE);
3400913c:	4602      	mov	r2, r0
3400913e:	f240 31ae 	movw	r1, #942	@ 0x3ae
34009142:	4628      	mov	r0, r5
34009144:	692b      	ldr	r3, [r5, #16]
34009146:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34009148:	4604      	mov	r4, r0
3400914a:	b170      	cbz	r0, 3400916a <VD55G1_Start+0x43a>
3400914c:	f240 23ce 	movw	r3, #718	@ 0x2ce
34009150:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
34009152:	4a38      	ldr	r2, [pc, #224]	@ (34009234 <VD55G1_Start+0x504>)
34009154:	4628      	mov	r0, r5
34009156:	9200      	str	r2, [sp, #0]
34009158:	2100      	movs	r1, #0
3400915a:	4a30      	ldr	r2, [pc, #192]	@ (3400921c <VD55G1_Start+0x4ec>)
3400915c:	9301      	str	r3, [sp, #4]
3400915e:	f7ff fb07 	bl	34008770 <VD55G1_log_impl>
34009162:	4628      	mov	r0, r5
34009164:	f7ff fb62 	bl	3400882c <display_error>
  VD55G1_TraceError(ctx, ret);
34009168:	e7d1      	b.n	3400910e <VD55G1_Start+0x3de>
    ret = ctx->write8(ctx, VD55G1_REG_DARKCAL_CTRL, VD55G1_DARKCAL_BYPASS_DARKAVG);
3400916a:	2202      	movs	r2, #2
3400916c:	f240 312a 	movw	r1, #810	@ 0x32a
34009170:	4628      	mov	r0, r5
34009172:	692b      	ldr	r3, [r5, #16]
34009174:	4798      	blx	r3
    VD55G1_TraceError(ctx, ret);
34009176:	4604      	mov	r4, r0
34009178:	b118      	cbz	r0, 34009182 <VD55G1_Start+0x452>
3400917a:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
3400917e:	9002      	str	r0, [sp, #8]
34009180:	e7e7      	b.n	34009152 <VD55G1_Start+0x422>
  ret = ctx->write16(ctx, VD55G1_REG_PATGEN_CTRL, value);
34009182:	4632      	mov	r2, r6
34009184:	f44f 7141 	mov.w	r1, #772	@ 0x304
34009188:	4628      	mov	r0, r5
3400918a:	696b      	ldr	r3, [r5, #20]
3400918c:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
3400918e:	4604      	mov	r4, r0
34009190:	b118      	cbz	r0, 3400919a <VD55G1_Start+0x46a>
34009192:	f44f 7335 	mov.w	r3, #724	@ 0x2d4
34009196:	9002      	str	r0, [sp, #8]
34009198:	e7db      	b.n	34009152 <VD55G1_Start+0x422>
  return VD55G1_SetFlicker(ctx, drv_ctx->config_save.flicker);
3400919a:	4628      	mov	r0, r5
3400919c:	f895 1042 	ldrb.w	r1, [r5, #66]	@ 0x42
340091a0:	f7ff fc46 	bl	34008a30 <VD55G1_SetFlicker>
  VD55G1_TraceError(ctx, ret);
340091a4:	4604      	mov	r4, r0
340091a6:	b118      	cbz	r0, 340091b0 <VD55G1_Start+0x480>
340091a8:	f240 3313 	movw	r3, #787	@ 0x313
340091ac:	9002      	str	r0, [sp, #8]
340091ae:	e5ec      	b.n	34008d8a <VD55G1_Start+0x5a>
  ret = ctx->write8(ctx, VD55G1_REG_STBY, VD55G1_STBY_START_STREAM);
340091b0:	2201      	movs	r2, #1
340091b2:	f240 2101 	movw	r1, #513	@ 0x201
340091b6:	4628      	mov	r0, r5
340091b8:	692b      	ldr	r3, [r5, #16]
340091ba:	4798      	blx	r3
  VD55G1_TraceError(ctx, ret);
340091bc:	4604      	mov	r4, r0
340091be:	b128      	cbz	r0, 340091cc <VD55G1_Start+0x49c>
340091c0:	f240 331d 	movw	r3, #797	@ 0x31d
340091c4:	9002      	str	r0, [sp, #8]
  VD55G1_TraceError(ctx, ret);
340091c6:	4a1c      	ldr	r2, [pc, #112]	@ (34009238 <VD55G1_Start+0x508>)
340091c8:	9301      	str	r3, [sp, #4]
340091ca:	e5e0      	b.n	34008d8e <VD55G1_Start+0x5e>
  ret = VD55G1_PollReg8(ctx, VD55G1_REG_STBY, VD55G1_CMD_ACK);
340091cc:	4602      	mov	r2, r0
340091ce:	f240 2101 	movw	r1, #513	@ 0x201
340091d2:	4628      	mov	r0, r5
340091d4:	f7ff fada 	bl	3400878c <VD55G1_PollReg8>
  VD55G1_TraceError(ctx, ret);
340091d8:	4604      	mov	r4, r0
340091da:	b948      	cbnz	r0, 340091f0 <VD55G1_Start+0x4c0>
  ret = VD55G1_WaitState(ctx, VD55G1_SYSTEM_FSM_STREAMING);
340091dc:	2103      	movs	r1, #3
340091de:	4628      	mov	r0, r5
340091e0:	f7ff fb00 	bl	340087e4 <VD55G1_WaitState>
  VD55G1_TraceError(ctx, ret);
340091e4:	4604      	mov	r4, r0
340091e6:	b138      	cbz	r0, 340091f8 <VD55G1_Start+0x4c8>
340091e8:	f240 3323 	movw	r3, #803	@ 0x323
340091ec:	9002      	str	r0, [sp, #8]
340091ee:	e7ea      	b.n	340091c6 <VD55G1_Start+0x496>
  VD55G1_TraceError(ctx, ret);
340091f0:	f44f 7348 	mov.w	r3, #800	@ 0x320
340091f4:	9002      	str	r0, [sp, #8]
340091f6:	e7e6      	b.n	340091c6 <VD55G1_Start+0x496>
  VD55G1_notice(ctx, "Streaming is on\n");
340091f8:	f240 3325 	movw	r3, #805	@ 0x325
340091fc:	2102      	movs	r1, #2
340091fe:	4628      	mov	r0, r5
34009200:	4a0e      	ldr	r2, [pc, #56]	@ (3400923c <VD55G1_Start+0x50c>)
34009202:	f7ff fab5 	bl	34008770 <VD55G1_log_impl>
    return ret;
  drv_ctx->state = VD55G1_ST_STREAMING;
34009206:	2301      	movs	r3, #1
34009208:	62ab      	str	r3, [r5, #40]	@ 0x28

  return 0;
}
3400920a:	4620      	mov	r0, r4
3400920c:	b007      	add	sp, #28
3400920e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34009210:	34027ade 	.word	0x34027ade
34009214:	34027b01 	.word	0x34027b01
34009218:	3402dfc7 	.word	0x3402dfc7
3400921c:	340278da 	.word	0x340278da
34009220:	3402e00a 	.word	0x3402e00a
34009224:	34027b3a 	.word	0x34027b3a
34009228:	3402df4a 	.word	0x3402df4a
3400922c:	3402dfb0 	.word	0x3402dfb0
34009230:	3402df44 	.word	0x3402df44
34009234:	3402df9d 	.word	0x3402df9d
34009238:	3402df75 	.word	0x3402df75
3400923c:	34027b62 	.word	0x34027b62
34009240:	2fec1100 	.word	0x2fec1100
34009244:	00000000 	.word	0x00000000

34009248 <VD55G1_Stop>:

int VD55G1_Stop(VD55G1_Ctx_t *ctx)
{
34009248:	b510      	push	{r4, lr}
3400924a:	4604      	mov	r4, r0
  struct drv_ctx *drv_ctx = &ctx->ctx;
  int ret;

  ret = VD55G1_StopStreaming(ctx);
3400924c:	f7ff fc18 	bl	34008a80 <VD55G1_StopStreaming>
  if (ret)
34009250:	b900      	cbnz	r0, 34009254 <VD55G1_Stop+0xc>
    return ret;
  drv_ctx->state = VD55G1_ST_IDLE;
34009252:	62a0      	str	r0, [r4, #40]	@ 0x28

  return 0;
}
34009254:	bd10      	pop	{r4, pc}

34009256 <VD55G1_SetFlipMirrorMode>:

  return 0;
}

int VD55G1_SetFlipMirrorMode(VD55G1_Ctx_t *ctx, VD55G1_MirrorFlip_t mode)
{
34009256:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34009258:	6843      	ldr	r3, [r0, #4]
{
3400925a:	460d      	mov	r5, r1
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
3400925c:	f10d 0207 	add.w	r2, sp, #7
34009260:	211c      	movs	r1, #28
{
34009262:	4604      	mov	r4, r0
  ret = ctx->read8(ctx, VD55G1_REG_SYSTEM_FSM, &state);
34009264:	4798      	blx	r3
  if (ret)
34009266:	2800      	cmp	r0, #0
34009268:	d10f      	bne.n	3400928a <VD55G1_SetFlipMirrorMode+0x34>
  return state == VD55G1_SYSTEM_FSM_STREAMING;
3400926a:	f89d 3007 	ldrb.w	r3, [sp, #7]

  is_streaming = VD55G1_IsStreaming(ctx);
  if (is_streaming < 0)
    return is_streaming;

  if (is_streaming) {
3400926e:	2b03      	cmp	r3, #3
34009270:	d10e      	bne.n	34009290 <VD55G1_SetFlipMirrorMode+0x3a>
    ret = VD55G1_Stop(ctx);
34009272:	4620      	mov	r0, r4
34009274:	f7ff ffe8 	bl	34009248 <VD55G1_Stop>
    if (ret)
34009278:	b940      	cbnz	r0, 3400928c <VD55G1_SetFlipMirrorMode+0x36>
  }

  drv_ctx->config_save.flip_mirror_mode = mode;

  if (is_streaming) {
    ret = VD55G1_Start(ctx);
3400927a:	4620      	mov	r0, r4
  drv_ctx->config_save.flip_mirror_mode = mode;
3400927c:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    if (ret)
      return ret;
  }

  return 0;
}
34009280:	b003      	add	sp, #12
34009282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ret = VD55G1_Start(ctx);
34009286:	f7ff bd53 	b.w	34008d30 <VD55G1_Start>
  if (is_streaming < 0)
3400928a:	daf2      	bge.n	34009272 <VD55G1_SetFlipMirrorMode+0x1c>
}
3400928c:	b003      	add	sp, #12
3400928e:	bd30      	pop	{r4, r5, pc}
  drv_ctx->config_save.flip_mirror_mode = mode;
34009290:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  if (is_streaming) {
34009294:	e7fa      	b.n	3400928c <VD55G1_SetFlipMirrorMode+0x36>

34009296 <VD6G_error>:
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
  va_end(ap);
}

static void VD6G_error(VD6G_Ctx_t *ctx, const char *format, ...)
{
34009296:	b40e      	push	{r1, r2, r3}
34009298:	b517      	push	{r0, r1, r2, r4, lr}
  va_list ap;

  if (!ctx->log)
3400929a:	6a44      	ldr	r4, [r0, #36]	@ 0x24
3400929c:	b124      	cbz	r4, 340092a8 <VD6G_error+0x12>
    return ;

  va_start(ap, format);
3400929e:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_ERROR, format, ap);
340092a0:	2100      	movs	r1, #0
340092a2:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, format);
340092a4:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_ERROR, format, ap);
340092a6:	47a0      	blx	r4
  va_end(ap);
}
340092a8:	b003      	add	sp, #12
340092aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340092ae:	b003      	add	sp, #12
340092b0:	4770      	bx	lr

340092b2 <VD6G_notice>:
{
340092b2:	b40e      	push	{r1, r2, r3}
340092b4:	b517      	push	{r0, r1, r2, r4, lr}
  if (!ctx->log)
340092b6:	6a44      	ldr	r4, [r0, #36]	@ 0x24
340092b8:	b124      	cbz	r4, 340092c4 <VD6G_notice+0x12>
  va_start(ap, format);
340092ba:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_NOTICE, format, ap);
340092bc:	2102      	movs	r1, #2
340092be:	9a05      	ldr	r2, [sp, #20]
  va_start(ap, format);
340092c0:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_NOTICE, format, ap);
340092c2:	47a0      	blx	r4
}
340092c4:	b003      	add	sp, #12
340092c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340092ca:	b003      	add	sp, #12
340092cc:	4770      	bx	lr
	...

340092d0 <display_error>:

static void display_error(VD6G_Ctx_t *ctx)
{
340092d0:	b513      	push	{r0, r1, r4, lr}
  uint16_t reg16;
  int ret;

  ret = ctx->read16(ctx, VD6G_ERROR_CODE, &reg16);
340092d2:	6883      	ldr	r3, [r0, #8]
340092d4:	211c      	movs	r1, #28
340092d6:	f10d 0206 	add.w	r2, sp, #6
{
340092da:	4604      	mov	r4, r0
  ret = ctx->read16(ctx, VD6G_ERROR_CODE, &reg16);
340092dc:	4798      	blx	r3
  assert(ret == 0);
340092de:	b130      	cbz	r0, 340092ee <display_error+0x1e>
340092e0:	f240 1131 	movw	r1, #305	@ 0x131
340092e4:	4b06      	ldr	r3, [pc, #24]	@ (34009300 <display_error+0x30>)
340092e6:	4a07      	ldr	r2, [pc, #28]	@ (34009304 <display_error+0x34>)
340092e8:	4807      	ldr	r0, [pc, #28]	@ (34009308 <display_error+0x38>)
340092ea:	f015 ff6b 	bl	3401f1c4 <__assert_func>
  VD6G_error(ctx, "ERROR_CODE : 0x%04x\n", reg16);
340092ee:	4620      	mov	r0, r4
340092f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
340092f4:	4905      	ldr	r1, [pc, #20]	@ (3400930c <display_error+0x3c>)
340092f6:	f7ff ffce 	bl	34009296 <VD6G_error>
}
340092fa:	b002      	add	sp, #8
340092fc:	bd10      	pop	{r4, pc}
340092fe:	bf00      	nop
34009300:	34027863 	.word	0x34027863
34009304:	3402fa17 	.word	0x3402fa17
34009308:	34027b83 	.word	0x34027b83
3400930c:	340278c5 	.word	0x340278c5

34009310 <VD6G_PollReg8>:

static int VD6G_PollReg8(VD6G_Ctx_t *ctx, uint16_t addr, uint8_t poll_val)
{
34009310:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
34009314:	4604      	mov	r4, r0
34009316:	460f      	mov	r7, r1
34009318:	4690      	mov	r8, r2
3400931a:	2631      	movs	r6, #49	@ 0x31
  int loop_nb = timeout_ms / loop_delay_ms;
  uint8_t val;
  int ret;

  while (--loop_nb) {
    ret = ctx->read8(ctx, addr, &val);
3400931c:	4639      	mov	r1, r7
3400931e:	4620      	mov	r0, r4
34009320:	6863      	ldr	r3, [r4, #4]
34009322:	f10d 020f 	add.w	r2, sp, #15
34009326:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009328:	4605      	mov	r5, r0
3400932a:	b938      	cbnz	r0, 3400933c <VD6G_PollReg8+0x2c>
    if (val == poll_val)
3400932c:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009330:	4543      	cmp	r3, r8
34009332:	d10f      	bne.n	34009354 <VD6G_PollReg8+0x44>
      return 0;
    ctx->delay(ctx, loop_delay_ms);
  }

  return -1;
}
34009334:	4628      	mov	r0, r5
34009336:	b004      	add	sp, #16
34009338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    VD6G_TraceError(ctx, ret);
3400933c:	9000      	str	r0, [sp, #0]
3400933e:	f240 133f 	movw	r3, #319	@ 0x13f
34009342:	4620      	mov	r0, r4
34009344:	4a08      	ldr	r2, [pc, #32]	@ (34009368 <VD6G_PollReg8+0x58>)
34009346:	4909      	ldr	r1, [pc, #36]	@ (3400936c <VD6G_PollReg8+0x5c>)
34009348:	f7ff ffa5 	bl	34009296 <VD6G_error>
3400934c:	4620      	mov	r0, r4
3400934e:	f7ff ffbf 	bl	340092d0 <display_error>
34009352:	e7ef      	b.n	34009334 <VD6G_PollReg8+0x24>
    ctx->delay(ctx, loop_delay_ms);
34009354:	210a      	movs	r1, #10
34009356:	4620      	mov	r0, r4
34009358:	6a23      	ldr	r3, [r4, #32]
3400935a:	4798      	blx	r3
  while (--loop_nb) {
3400935c:	3e01      	subs	r6, #1
3400935e:	d1dd      	bne.n	3400931c <VD6G_PollReg8+0xc>
  return -1;
34009360:	f04f 35ff 	mov.w	r5, #4294967295
34009364:	e7e6      	b.n	34009334 <VD6G_PollReg8+0x24>
34009366:	bf00      	nop
34009368:	3402fa25 	.word	0x3402fa25
3400936c:	340278ea 	.word	0x340278ea

34009370 <VD6G_SetExposureModeInternal>:

static int VD6G_SetExposureModeInternal(VD6G_Ctx_t *ctx, VD6G_ExposureMode_t mode)
{
  int ret;

  if ((mode != VD6G_EXPOSURE_AUTO) &&
34009370:	2902      	cmp	r1, #2
{
34009372:	b537      	push	{r0, r1, r2, r4, r5, lr}
34009374:	4605      	mov	r5, r0
34009376:	460a      	mov	r2, r1
  if ((mode != VD6G_EXPOSURE_AUTO) &&
34009378:	d813      	bhi.n	340093a2 <VD6G_SetExposureModeInternal+0x32>
      (mode != VD6G_EXPOSURE_FREEZE_AEALGO) &&
      (mode != VD6G_EXPOSURE_MANUAL)) {
    return -1;
  }

  ret = ctx->write8(ctx, VD6G_REG_EXP_MODE, mode);
3400937a:	f240 414c 	movw	r1, #1100	@ 0x44c
3400937e:	6903      	ldr	r3, [r0, #16]
34009380:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009382:	4604      	mov	r4, r0
34009384:	b150      	cbz	r0, 3400939c <VD6G_SetExposureModeInternal+0x2c>
34009386:	9000      	str	r0, [sp, #0]
34009388:	f240 2367 	movw	r3, #615	@ 0x267
3400938c:	4628      	mov	r0, r5
3400938e:	4a06      	ldr	r2, [pc, #24]	@ (340093a8 <VD6G_SetExposureModeInternal+0x38>)
34009390:	4906      	ldr	r1, [pc, #24]	@ (340093ac <VD6G_SetExposureModeInternal+0x3c>)
34009392:	f7ff ff80 	bl	34009296 <VD6G_error>
34009396:	4628      	mov	r0, r5
34009398:	f7ff ff9a 	bl	340092d0 <display_error>

  return 0;
}
3400939c:	4620      	mov	r0, r4
3400939e:	b003      	add	sp, #12
340093a0:	bd30      	pop	{r4, r5, pc}
    return -1;
340093a2:	f04f 34ff 	mov.w	r4, #4294967295
340093a6:	e7f9      	b.n	3400939c <VD6G_SetExposureModeInternal+0x2c>
340093a8:	3402f916 	.word	0x3402f916
340093ac:	340278ea 	.word	0x340278ea

340093b0 <VD6G_SetFlicker>:
static int VD6G_SetFlicker(VD6G_Ctx_t *ctx, VD6G_Flicker_t flicker)
{
  uint16_t mode;
  int ret;

  switch (flicker) {
340093b0:	2902      	cmp	r1, #2
{
340093b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
340093b4:	4605      	mov	r5, r0
340093b6:	d815      	bhi.n	340093e4 <VD6G_SetFlicker+0x34>
    break;
  default:
    return -1;
  }

  ret = ctx->write16(ctx, VD6G_REG_AE_COMPILER_CONTROL, mode);
340093b8:	4a0c      	ldr	r2, [pc, #48]	@ (340093ec <VD6G_SetFlicker+0x3c>)
340093ba:	6943      	ldr	r3, [r0, #20]
340093bc:	5c52      	ldrb	r2, [r2, r1]
340093be:	f44f 6186 	mov.w	r1, #1072	@ 0x430
340093c2:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340093c4:	4604      	mov	r4, r0
340093c6:	b150      	cbz	r0, 340093de <VD6G_SetFlicker+0x2e>
340093c8:	9000      	str	r0, [sp, #0]
340093ca:	f240 33b1 	movw	r3, #945	@ 0x3b1
340093ce:	4628      	mov	r0, r5
340093d0:	4a07      	ldr	r2, [pc, #28]	@ (340093f0 <VD6G_SetFlicker+0x40>)
340093d2:	4908      	ldr	r1, [pc, #32]	@ (340093f4 <VD6G_SetFlicker+0x44>)
340093d4:	f7ff ff5f 	bl	34009296 <VD6G_error>
340093d8:	4628      	mov	r0, r5
340093da:	f7ff ff79 	bl	340092d0 <display_error>

  return 0;
}
340093de:	4620      	mov	r0, r4
340093e0:	b003      	add	sp, #12
340093e2:	bd30      	pop	{r4, r5, pc}
    return -1;
340093e4:	f04f 34ff 	mov.w	r4, #4294967295
340093e8:	e7f9      	b.n	340093de <VD6G_SetFlicker+0x2e>
340093ea:	bf00      	nop
340093ec:	3402f7dc 	.word	0x3402f7dc
340093f0:	3402f8e0 	.word	0x3402f8e0
340093f4:	340278ea 	.word	0x340278ea

340093f8 <VD6G_GetLineTimeInUs>:
{
340093f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
340093fa:	460e      	mov	r6, r1
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_len);
340093fc:	6883      	ldr	r3, [r0, #8]
340093fe:	f44f 7140 	mov.w	r1, #768	@ 0x300
34009402:	f10d 020e 	add.w	r2, sp, #14
{
34009406:	4605      	mov	r5, r0
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_len);
34009408:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400940a:	4604      	mov	r4, r0
3400940c:	b968      	cbnz	r0, 3400942a <VD6G_GetLineTimeInUs+0x32>
  *line_time_in_us = ((uint64_t)line_len * 1000000) / VD6G_PIXEL_CLOCK;
3400940e:	a311      	add	r3, pc, #68	@ (adr r3, 34009454 <VD6G_GetLineTimeInUs+0x5c>)
34009410:	e9d3 2300 	ldrd	r2, r3, [r3]
34009414:	f8bd 000e 	ldrh.w	r0, [sp, #14]
34009418:	490b      	ldr	r1, [pc, #44]	@ (34009448 <VD6G_GetLineTimeInUs+0x50>)
3400941a:	fba0 0101 	umull	r0, r1, r0, r1
3400941e:	f7f8 fb95 	bl	34001b4c <__aeabi_uldivmod>
34009422:	6030      	str	r0, [r6, #0]
}
34009424:	4620      	mov	r0, r4
34009426:	b004      	add	sp, #16
34009428:	bd70      	pop	{r4, r5, r6, pc}
  VD6G_TraceError(ctx, ret);
3400942a:	9000      	str	r0, [sp, #0]
3400942c:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
34009430:	4628      	mov	r0, r5
34009432:	4a06      	ldr	r2, [pc, #24]	@ (3400944c <VD6G_GetLineTimeInUs+0x54>)
34009434:	4906      	ldr	r1, [pc, #24]	@ (34009450 <VD6G_GetLineTimeInUs+0x58>)
34009436:	f7ff ff2e 	bl	34009296 <VD6G_error>
3400943a:	4628      	mov	r0, r5
3400943c:	f7ff ff48 	bl	340092d0 <display_error>
34009440:	e7f0      	b.n	34009424 <VD6G_GetLineTimeInUs+0x2c>
34009442:	bf00      	nop
34009444:	f3af 8000 	nop.w
34009448:	000f4240 	.word	0x000f4240
3400944c:	3402f82d 	.word	0x3402f82d
34009450:	340278ea 	.word	0x340278ea
34009454:	09959d00 	.word	0x09959d00
34009458:	00000000 	.word	0x00000000

3400945c <VD6G_warn.constprop.0>:
static void VD6G_warn(VD6G_Ctx_t *ctx, const char *format, ...)
3400945c:	b40e      	push	{r1, r2, r3}
3400945e:	b517      	push	{r0, r1, r2, r4, lr}
  if (!ctx->log)
34009460:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34009462:	b124      	cbz	r4, 3400946e <VD6G_warn.constprop.0+0x12>
  va_start(ap, format);
34009464:	ab06      	add	r3, sp, #24
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
34009466:	2101      	movs	r1, #1
34009468:	4a03      	ldr	r2, [pc, #12]	@ (34009478 <VD6G_warn.constprop.0+0x1c>)
  va_start(ap, format);
3400946a:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_WARNING, format, ap);
3400946c:	47a0      	blx	r4
}
3400946e:	b003      	add	sp, #12
34009470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34009474:	b003      	add	sp, #12
34009476:	4770      	bx	lr
34009478:	34027828 	.word	0x34027828

3400947c <VD6G_dbg.constprop.0>:
static void VD6G_dbg(VD6G_Ctx_t *ctx, int lvl, const char *format, ...)
3400947c:	b40c      	push	{r2, r3}
3400947e:	b513      	push	{r0, r1, r4, lr}
  if (!ctx->log)
34009480:	6a44      	ldr	r4, [r0, #36]	@ 0x24
34009482:	b124      	cbz	r4, 3400948e <VD6G_dbg.constprop.0+0x12>
  va_start(ap, format);
34009484:	ab05      	add	r3, sp, #20
  ctx->log(ctx, VD6G_LVL_DBG(lvl), format, ap);
34009486:	2103      	movs	r1, #3
34009488:	9a04      	ldr	r2, [sp, #16]
  va_start(ap, format);
3400948a:	9301      	str	r3, [sp, #4]
  ctx->log(ctx, VD6G_LVL_DBG(lvl), format, ap);
3400948c:	47a0      	blx	r4
}
3400948e:	b002      	add	sp, #8
34009490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34009494:	b002      	add	sp, #8
34009496:	4770      	bx	lr

34009498 <VD6G_GetTopDie>:
{
34009498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
3400949a:	460e      	mov	r6, r1
  ret = ctx->read16(ctx, VD6G_REG_REVISION, &reg16);
3400949c:	6883      	ldr	r3, [r0, #8]
3400949e:	2102      	movs	r1, #2
340094a0:	f10d 020e 	add.w	r2, sp, #14
{
340094a4:	4605      	mov	r5, r0
  ret = ctx->read16(ctx, VD6G_REG_REVISION, &reg16);
340094a6:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340094a8:	4604      	mov	r4, r0
340094aa:	b968      	cbnz	r0, 340094c8 <VD6G_GetTopDie+0x30>
  VD6G_dbg(ctx, 0, "revision = 0x%04x\n", reg16);
340094ac:	4601      	mov	r1, r0
340094ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
340094b2:	4628      	mov	r0, r5
340094b4:	4a0a      	ldr	r2, [pc, #40]	@ (340094e0 <VD6G_GetTopDie+0x48>)
340094b6:	f7ff ffe1 	bl	3400947c <VD6G_dbg.constprop.0>
  *top_die = reg16 >> 8;
340094ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
340094be:	0a1b      	lsrs	r3, r3, #8
340094c0:	7033      	strb	r3, [r6, #0]
}
340094c2:	4620      	mov	r0, r4
340094c4:	b004      	add	sp, #16
340094c6:	bd70      	pop	{r4, r5, r6, pc}
  VD6G_TraceError(ctx, ret);
340094c8:	9000      	str	r0, [sp, #0]
340094ca:	f240 1373 	movw	r3, #371	@ 0x173
340094ce:	4628      	mov	r0, r5
340094d0:	4a04      	ldr	r2, [pc, #16]	@ (340094e4 <VD6G_GetTopDie+0x4c>)
340094d2:	4905      	ldr	r1, [pc, #20]	@ (340094e8 <VD6G_GetTopDie+0x50>)
340094d4:	f7ff fedf 	bl	34009296 <VD6G_error>
340094d8:	4628      	mov	r0, r5
340094da:	f7ff fef9 	bl	340092d0 <display_error>
340094de:	e7f0      	b.n	340094c2 <VD6G_GetTopDie+0x2a>
340094e0:	34027a80 	.word	0x34027a80
340094e4:	3402f9f6 	.word	0x3402f9f6
340094e8:	340278ea 	.word	0x340278ea

340094ec <VD6G_WaitState>:
{
340094ec:	b570      	push	{r4, r5, r6, lr}
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
340094ee:	b2ca      	uxtb	r2, r1
{
340094f0:	460d      	mov	r5, r1
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
340094f2:	2128      	movs	r1, #40	@ 0x28
{
340094f4:	4606      	mov	r6, r0
  int ret = VD6G_PollReg8(ctx, VD6G_REG_SYSTEM_FSM, state);
340094f6:	f7ff ff0b 	bl	34009310 <VD6G_PollReg8>
  if (ret)
340094fa:	4604      	mov	r4, r0
340094fc:	b130      	cbz	r0, 3400950c <VD6G_WaitState+0x20>
    VD6G_warn(ctx, "Unable to reach state %d\n", state);
340094fe:	462a      	mov	r2, r5
34009500:	4630      	mov	r0, r6
34009502:	4906      	ldr	r1, [pc, #24]	@ (3400951c <VD6G_WaitState+0x30>)
34009504:	f7ff ffaa 	bl	3400945c <VD6G_warn.constprop.0>
}
34009508:	4620      	mov	r0, r4
3400950a:	bd70      	pop	{r4, r5, r6, pc}
    VD6G_dbg(ctx, 0, "reach state %d\n", state);
3400950c:	4601      	mov	r1, r0
3400950e:	462b      	mov	r3, r5
34009510:	4630      	mov	r0, r6
34009512:	4a03      	ldr	r2, [pc, #12]	@ (34009520 <VD6G_WaitState+0x34>)
34009514:	f7ff ffb2 	bl	3400947c <VD6G_dbg.constprop.0>
  return ret;
34009518:	e7f6      	b.n	34009508 <VD6G_WaitState+0x1c>
3400951a:	bf00      	nop
3400951c:	34027828 	.word	0x34027828
34009520:	34027853 	.word	0x34027853

34009524 <VD6G_Init>:

  return 0;
}

int VD6G_Init(VD6G_Ctx_t *ctx, VD6G_Config_t *config)
{
34009524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;
  int ret;

  if (config->frame_rate < VD6G_MIN_FPS)
34009528:	688b      	ldr	r3, [r1, #8]
{
3400952a:	4605      	mov	r5, r0
  if (config->frame_rate < VD6G_MIN_FPS)
3400952c:	3b01      	subs	r3, #1
3400952e:	2b57      	cmp	r3, #87	@ 0x57
{
34009530:	460c      	mov	r4, r1
34009532:	b087      	sub	sp, #28
  if (config->frame_rate < VD6G_MIN_FPS)
34009534:	d802      	bhi.n	3400953c <VD6G_Init+0x18>
    return -1;
  if (config->frame_rate > VD6G_MAX_FPS)
    return -1;

  if ((config->resolution != VD6G_RES_QVGA_320_240) &&
34009536:	790b      	ldrb	r3, [r1, #4]
34009538:	2b08      	cmp	r3, #8
3400953a:	d905      	bls.n	34009548 <VD6G_Init+0x24>
    return -1;
3400953c:	f04f 34ff 	mov.w	r4, #4294967295
  ret = VD6G_SetupEarly(ctx);
  if (ret)
    return ret;

  return 0;
}
34009540:	4620      	mov	r0, r4
34009542:	b007      	add	sp, #28
34009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((config->flip_mirror_mode != VD6G_MIRROR_FLIP_NONE) &&
34009548:	7b0b      	ldrb	r3, [r1, #12]
3400954a:	2b03      	cmp	r3, #3
3400954c:	d8f6      	bhi.n	3400953c <VD6G_Init+0x18>
  ctx->shutdown_pin(ctx, 0);
3400954e:	6803      	ldr	r3, [r0, #0]
34009550:	2100      	movs	r1, #0
34009552:	4798      	blx	r3
  ctx->delay(ctx, 10);
34009554:	210a      	movs	r1, #10
34009556:	4628      	mov	r0, r5
34009558:	6a2b      	ldr	r3, [r5, #32]
3400955a:	4798      	blx	r3
  ctx->shutdown_pin(ctx, 1);
3400955c:	2101      	movs	r1, #1
3400955e:	4628      	mov	r0, r5
34009560:	682b      	ldr	r3, [r5, #0]
34009562:	4798      	blx	r3
  drv_ctx->config_save = *config;
34009564:	f105 0630 	add.w	r6, r5, #48	@ 0x30
  ctx->delay(ctx, 10);
34009568:	210a      	movs	r1, #10
3400956a:	4628      	mov	r0, r5
3400956c:	6a2b      	ldr	r3, [r5, #32]
3400956e:	4798      	blx	r3
  drv_ctx->config_save = *config;
34009570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34009572:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34009574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34009576:	c60f      	stmia	r6!, {r0, r1, r2, r3}
34009578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
3400957a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  drv_ctx->is_streaming = 0;
3400957c:	2300      	movs	r3, #0
  drv_ctx->config_save = *config;
3400957e:	e894 0003 	ldmia.w	r4, {r0, r1}
34009582:	e886 0003 	stmia.w	r6, {r0, r1}
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_READY_TO_BOOT);
34009586:	2101      	movs	r1, #1
34009588:	4628      	mov	r0, r5
  drv_ctx->is_streaming = 0;
3400958a:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_READY_TO_BOOT);
3400958c:	f7ff ffae 	bl	340094ec <VD6G_WaitState>
  if (ret)
34009590:	4604      	mov	r4, r0
34009592:	2800      	cmp	r0, #0
34009594:	d1d4      	bne.n	34009540 <VD6G_Init+0x1c>
  ret = ctx->read16(ctx, VD6G_REG_MODEL_ID, &reg16);
34009596:	ae03      	add	r6, sp, #12
34009598:	4601      	mov	r1, r0
3400959a:	4632      	mov	r2, r6
3400959c:	4628      	mov	r0, r5
3400959e:	68ab      	ldr	r3, [r5, #8]
340095a0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340095a2:	4604      	mov	r4, r0
340095a4:	b988      	cbnz	r0, 340095ca <VD6G_Init+0xa6>
  VD6G_dbg(ctx, 0, "model_id = 0x%04x\n", reg16);
340095a6:	4601      	mov	r1, r0
340095a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340095ac:	4aaf      	ldr	r2, [pc, #700]	@ (3400986c <VD6G_Init+0x348>)
340095ae:	4628      	mov	r0, r5
340095b0:	f7ff ff64 	bl	3400947c <VD6G_dbg.constprop.0>
  if (reg16 != VD6G_MODEL_ID) {
340095b4:	f245 6203 	movw	r2, #22019	@ 0x5603
340095b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340095bc:	4293      	cmp	r3, r2
340095be:	d010      	beq.n	340095e2 <VD6G_Init+0xbe>
    VD6G_error(ctx, "Bad model id expected 0x%04x / got 0x%04x\n", VD6G_MODEL_ID, reg16);
340095c0:	4628      	mov	r0, r5
340095c2:	49ab      	ldr	r1, [pc, #684]	@ (34009870 <VD6G_Init+0x34c>)
340095c4:	f7ff fe67 	bl	34009296 <VD6G_error>
  if (ret)
340095c8:	e7b8      	b.n	3400953c <VD6G_Init+0x18>
  VD6G_TraceError(ctx, ret);
340095ca:	f240 1381 	movw	r3, #385	@ 0x181
340095ce:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
340095d0:	4aa8      	ldr	r2, [pc, #672]	@ (34009874 <VD6G_Init+0x350>)
  VD6G_TraceError(ctx, ret);
340095d2:	4628      	mov	r0, r5
340095d4:	49a8      	ldr	r1, [pc, #672]	@ (34009878 <VD6G_Init+0x354>)
340095d6:	f7ff fe5e 	bl	34009296 <VD6G_error>
340095da:	4628      	mov	r0, r5
340095dc:	f7ff fe78 	bl	340092d0 <display_error>
340095e0:	e7ae      	b.n	34009540 <VD6G_Init+0x1c>
  ret = VD6G_GetTopDie(ctx, &top_die);
340095e2:	4628      	mov	r0, r5
340095e4:	f10d 010b 	add.w	r1, sp, #11
340095e8:	f7ff ff56 	bl	34009498 <VD6G_GetTopDie>
  if (ret)
340095ec:	4604      	mov	r4, r0
340095ee:	2800      	cmp	r0, #0
340095f0:	d1a6      	bne.n	34009540 <VD6G_Init+0x1c>
  if (top_die != VD6G_TOP_DIE_SLOW_BOOT && top_die != VD6G_TOP_DIE_FAST_BOOT) {
340095f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
340095f6:	2b20      	cmp	r3, #32
340095f8:	d006      	beq.n	34009608 <VD6G_Init+0xe4>
340095fa:	2b31      	cmp	r3, #49	@ 0x31
340095fc:	d004      	beq.n	34009608 <VD6G_Init+0xe4>
    VD6G_error(ctx, "Unsupported revision\n");
340095fe:	499f      	ldr	r1, [pc, #636]	@ (3400987c <VD6G_Init+0x358>)
    VD6G_error(ctx, "External clock out of rangen\n");
34009600:	4628      	mov	r0, r5
34009602:	f7ff fe48 	bl	34009296 <VD6G_error>
  if (ret)
34009606:	e799      	b.n	3400953c <VD6G_Init+0x18>
  ret = ctx->read16(ctx, VD6G_REG_ROM_REVISION, &reg16);
34009608:	4632      	mov	r2, r6
3400960a:	2114      	movs	r1, #20
3400960c:	4628      	mov	r0, r5
3400960e:	68ab      	ldr	r3, [r5, #8]
34009610:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009612:	4604      	mov	r4, r0
34009614:	b9d8      	cbnz	r0, 3400964e <VD6G_Init+0x12a>
  VD6G_dbg(ctx, 0, "rom = 0x%04x\n", reg16);
34009616:	4601      	mov	r1, r0
34009618:	f8bd 300c 	ldrh.w	r3, [sp, #12]
3400961c:	4628      	mov	r0, r5
3400961e:	4a98      	ldr	r2, [pc, #608]	@ (34009880 <VD6G_Init+0x35c>)
34009620:	f7ff ff2c 	bl	3400947c <VD6G_dbg.constprop.0>
  ret = VD6G_GetTopDie(ctx, &top_die);
34009624:	4628      	mov	r0, r5
34009626:	f10d 010b 	add.w	r1, sp, #11
3400962a:	f7ff ff35 	bl	34009498 <VD6G_GetTopDie>
  if (ret)
3400962e:	4604      	mov	r4, r0
34009630:	2800      	cmp	r0, #0
34009632:	d185      	bne.n	34009540 <VD6G_Init+0x1c>
  switch (top_die) {
34009634:	f89d 300b 	ldrb.w	r3, [sp, #11]
34009638:	2b20      	cmp	r3, #32
3400963a:	d00c      	beq.n	34009656 <VD6G_Init+0x132>
3400963c:	2b31      	cmp	r3, #49	@ 0x31
3400963e:	d057      	beq.n	340096f0 <VD6G_Init+0x1cc>
    assert(0);
34009640:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
34009644:	4b8f      	ldr	r3, [pc, #572]	@ (34009884 <VD6G_Init+0x360>)
34009646:	4a90      	ldr	r2, [pc, #576]	@ (34009888 <VD6G_Init+0x364>)
    assert(0);
34009648:	4890      	ldr	r0, [pc, #576]	@ (3400988c <VD6G_Init+0x368>)
3400964a:	f015 fdbb 	bl	3401f1c4 <__assert_func>
  VD6G_TraceError(ctx, ret);
3400964e:	f240 1391 	movw	r3, #401	@ 0x191
34009652:	9000      	str	r0, [sp, #0]
34009654:	e7bc      	b.n	340095d0 <VD6G_Init+0xac>
  ret = ctx->write_array(ctx, 0x2000, (uint8_t *) patch_cut2, sizeof(patch_cut2));
34009656:	69ec      	ldr	r4, [r5, #28]
34009658:	f642 23f8 	movw	r3, #11000	@ 0x2af8
3400965c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
34009660:	4628      	mov	r0, r5
34009662:	4a8b      	ldr	r2, [pc, #556]	@ (34009890 <VD6G_Init+0x36c>)
34009664:	47a0      	blx	r4
  VD6G_TraceError(ctx, ret);
34009666:	4604      	mov	r4, r0
34009668:	b120      	cbz	r0, 34009674 <VD6G_Init+0x150>
3400966a:	f44f 73d1 	mov.w	r3, #418	@ 0x1a2
3400966e:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009670:	4a88      	ldr	r2, [pc, #544]	@ (34009894 <VD6G_Init+0x370>)
34009672:	e7ae      	b.n	340095d2 <VD6G_Init+0xae>
  ret = ctx->write8(ctx, VD6G_REG_BOOT, VD6G_CMD_PATCH_SETUP);
34009674:	2202      	movs	r2, #2
34009676:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400967a:	4628      	mov	r0, r5
3400967c:	692b      	ldr	r3, [r5, #16]
3400967e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009680:	4604      	mov	r4, r0
34009682:	bb38      	cbnz	r0, 340096d4 <VD6G_Init+0x1b0>
  ret = VD6G_PollReg8(ctx, VD6G_REG_BOOT, VD6G_CMD_ACK);
34009684:	4602      	mov	r2, r0
34009686:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400968a:	4628      	mov	r0, r5
3400968c:	f7ff fe40 	bl	34009310 <VD6G_PollReg8>
  if (ret)
34009690:	4604      	mov	r4, r0
34009692:	2800      	cmp	r0, #0
34009694:	f47f af54 	bne.w	34009540 <VD6G_Init+0x1c>
  ret = ctx->read16(ctx, VD6G_REG_FWPATCH_REVISION, &reg16);
34009698:	4632      	mov	r2, r6
3400969a:	211e      	movs	r1, #30
3400969c:	4628      	mov	r0, r5
3400969e:	68ab      	ldr	r3, [r5, #8]
340096a0:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340096a2:	4604      	mov	r4, r0
340096a4:	b9d0      	cbnz	r0, 340096dc <VD6G_Init+0x1b8>
  VD6G_dbg(ctx, 0, "patch = 0x%04x\n", reg16);
340096a6:	4601      	mov	r1, r0
340096a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340096ac:	4628      	mov	r0, r5
340096ae:	4a7a      	ldr	r2, [pc, #488]	@ (34009898 <VD6G_Init+0x374>)
340096b0:	f7ff fee4 	bl	3400947c <VD6G_dbg.constprop.0>
  if (reg16 != (patch_major << 8) + patch_minor) {
340096b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
340096b8:	f5b3 7f07 	cmp.w	r3, #540	@ 0x21c
340096bc:	d012      	beq.n	340096e4 <VD6G_Init+0x1c0>
    VD6G_error(ctx, "bad patch version expected %d.%d got %d.%d\n", patch_major, patch_minor,
340096be:	b2da      	uxtb	r2, r3
340096c0:	0a1b      	lsrs	r3, r3, #8
340096c2:	9201      	str	r2, [sp, #4]
340096c4:	9300      	str	r3, [sp, #0]
340096c6:	2202      	movs	r2, #2
340096c8:	231c      	movs	r3, #28
340096ca:	4974      	ldr	r1, [pc, #464]	@ (3400989c <VD6G_Init+0x378>)
    VD6G_error(ctx, "bad vtpatch version, expected %d got rd:%d, gr:%d gt:%d\n", VT_REVISION, cur_vtpatch_rd_rev,
340096cc:	4628      	mov	r0, r5
340096ce:	f7ff fde2 	bl	34009296 <VD6G_error>
  if (ret)
340096d2:	e733      	b.n	3400953c <VD6G_Init+0x18>
  VD6G_TraceError(ctx, ret);
340096d4:	f240 13a5 	movw	r3, #421	@ 0x1a5
340096d8:	9000      	str	r0, [sp, #0]
340096da:	e7c9      	b.n	34009670 <VD6G_Init+0x14c>
  VD6G_TraceError(ctx, ret);
340096dc:	f44f 73d6 	mov.w	r3, #428	@ 0x1ac
340096e0:	9000      	str	r0, [sp, #0]
340096e2:	e7c5      	b.n	34009670 <VD6G_Init+0x14c>
  VD6G_notice(ctx, "patch %d.%d applied\n", reg16 >> 8, reg16 & 0xff);
340096e4:	231c      	movs	r3, #28
340096e6:	2202      	movs	r2, #2
340096e8:	4628      	mov	r0, r5
340096ea:	496d      	ldr	r1, [pc, #436]	@ (340098a0 <VD6G_Init+0x37c>)
340096ec:	f7ff fde1 	bl	340092b2 <VD6G_notice>
  ret = ctx->write8(ctx, VD6G_REG_BOOT, VD6G_CMD_BOOT);
340096f0:	2201      	movs	r2, #1
340096f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
340096f6:	4628      	mov	r0, r5
340096f8:	692b      	ldr	r3, [r5, #16]
340096fa:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340096fc:	4604      	mov	r4, r0
340096fe:	b120      	cbz	r0, 3400970a <VD6G_Init+0x1e6>
34009700:	f240 13d5 	movw	r3, #469	@ 0x1d5
34009704:	4a67      	ldr	r2, [pc, #412]	@ (340098a4 <VD6G_Init+0x380>)
34009706:	9000      	str	r0, [sp, #0]
34009708:	e763      	b.n	340095d2 <VD6G_Init+0xae>
  ret = VD6G_PollReg8(ctx, VD6G_REG_BOOT, VD6G_CMD_ACK);
3400970a:	4602      	mov	r2, r0
3400970c:	f44f 7100 	mov.w	r1, #512	@ 0x200
34009710:	4628      	mov	r0, r5
34009712:	f7ff fdfd 	bl	34009310 <VD6G_PollReg8>
  if (ret)
34009716:	4604      	mov	r4, r0
34009718:	2800      	cmp	r0, #0
3400971a:	f47f af11 	bne.w	34009540 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
3400971e:	2102      	movs	r1, #2
34009720:	4628      	mov	r0, r5
34009722:	f7ff fee3 	bl	340094ec <VD6G_WaitState>
  if (ret)
34009726:	4604      	mov	r4, r0
34009728:	2800      	cmp	r0, #0
3400972a:	f47f af09 	bne.w	34009540 <VD6G_Init+0x1c>
  VD6G_notice(ctx, "sensor boot successfully\n");
3400972e:	4628      	mov	r0, r5
34009730:	495d      	ldr	r1, [pc, #372]	@ (340098a8 <VD6G_Init+0x384>)
34009732:	f7ff fdbe 	bl	340092b2 <VD6G_notice>
  ret = VD6G_GetTopDie(ctx, &top_die);
34009736:	4628      	mov	r0, r5
34009738:	f10d 0109 	add.w	r1, sp, #9
3400973c:	f7ff feac 	bl	34009498 <VD6G_GetTopDie>
  if (ret)
34009740:	4604      	mov	r4, r0
34009742:	2800      	cmp	r0, #0
34009744:	f47f aefc 	bne.w	34009540 <VD6G_Init+0x1c>
  switch (top_die) {
34009748:	f89d 3009 	ldrb.w	r3, [sp, #9]
3400974c:	2b20      	cmp	r3, #32
3400974e:	d007      	beq.n	34009760 <VD6G_Init+0x23c>
34009750:	2b31      	cmp	r3, #49	@ 0x31
34009752:	f000 80ff 	beq.w	34009954 <VD6G_Init+0x430>
    assert(0);
34009756:	f44f 710d 	mov.w	r1, #564	@ 0x234
3400975a:	4b4a      	ldr	r3, [pc, #296]	@ (34009884 <VD6G_Init+0x360>)
3400975c:	4a53      	ldr	r2, [pc, #332]	@ (340098ac <VD6G_Init+0x388>)
3400975e:	e773      	b.n	34009648 <VD6G_Init+0x124>
  ret = ctx->write8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_START_VTRAM_UPDATE);
34009760:	2201      	movs	r2, #1
34009762:	f240 2103 	movw	r1, #515	@ 0x203
34009766:	4628      	mov	r0, r5
34009768:	692b      	ldr	r3, [r5, #16]
3400976a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400976c:	4604      	mov	r4, r0
3400976e:	b120      	cbz	r0, 3400977a <VD6G_Init+0x256>
34009770:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
34009774:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009776:	4a4e      	ldr	r2, [pc, #312]	@ (340098b0 <VD6G_Init+0x38c>)
34009778:	e72b      	b.n	340095d2 <VD6G_Init+0xae>
  ret = VD6G_PollReg8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_ACK);
3400977a:	4602      	mov	r2, r0
3400977c:	f240 2103 	movw	r1, #515	@ 0x203
34009780:	4628      	mov	r0, r5
34009782:	f7ff fdc5 	bl	34009310 <VD6G_PollReg8>
  if (ret)
34009786:	4604      	mov	r4, r0
34009788:	2800      	cmp	r0, #0
3400978a:	f47f aed9 	bne.w	34009540 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
3400978e:	2102      	movs	r1, #2
34009790:	4628      	mov	r0, r5
34009792:	f7ff feab 	bl	340094ec <VD6G_WaitState>
  if (ret)
34009796:	4604      	mov	r4, r0
34009798:	2800      	cmp	r0, #0
3400979a:	f47f aed1 	bne.w	34009540 <VD6G_Init+0x1c>
  for (i = 0; i < vtpatch_area_nb; i++) {
3400979e:	4681      	mov	r9, r0
340097a0:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 340098b4 <VD6G_Init+0x390>
340097a4:	f8df a110 	ldr.w	sl, [pc, #272]	@ 340098b8 <VD6G_Init+0x394>
    ret = ctx->write_array(ctx, vtpatch_desc[i].offset, (uint8_t *) (vtpatch + vtpatch_offset),
340097a8:	f8df b110 	ldr.w	fp, [pc, #272]	@ 340098bc <VD6G_Init+0x398>
  for (i = 0; i < vtpatch_area_nb; i++) {
340097ac:	f8da 3000 	ldr.w	r3, [sl]
340097b0:	4599      	cmp	r9, r3
340097b2:	db13      	blt.n	340097dc <VD6G_Init+0x2b8>
  ret = ctx->write8(ctx, 0xd9f8, VT_REVISION);
340097b4:	2211      	movs	r2, #17
340097b6:	f64d 11f8 	movw	r1, #55800	@ 0xd9f8
340097ba:	4628      	mov	r0, r5
340097bc:	692b      	ldr	r3, [r5, #16]
340097be:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340097c0:	4604      	mov	r4, r0
340097c2:	bb58      	cbnz	r0, 3400981c <VD6G_Init+0x2f8>
  ret = ctx->write8(ctx, 0xaffc, VT_REVISION);
340097c4:	2211      	movs	r2, #17
340097c6:	f64a 71fc 	movw	r1, #45052	@ 0xaffc
340097ca:	4628      	mov	r0, r5
340097cc:	692b      	ldr	r3, [r5, #16]
340097ce:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340097d0:	4604      	mov	r4, r0
340097d2:	b338      	cbz	r0, 34009824 <VD6G_Init+0x300>
340097d4:	f240 13ff 	movw	r3, #511	@ 0x1ff
340097d8:	9000      	str	r0, [sp, #0]
340097da:	e7cc      	b.n	34009776 <VD6G_Init+0x252>
    ret = ctx->write_array(ctx, vtpatch_desc[i].offset, (uint8_t *) (vtpatch + vtpatch_offset),
340097dc:	69ef      	ldr	r7, [r5, #28]
340097de:	f8d8 3004 	ldr.w	r3, [r8, #4]
340097e2:	f8b8 1000 	ldrh.w	r1, [r8]
340097e6:	4628      	mov	r0, r5
340097e8:	eb0b 0204 	add.w	r2, fp, r4
340097ec:	47b8      	blx	r7
    VD6G_TraceError(ctx, ret);
340097ee:	f108 0808 	add.w	r8, r8, #8
340097f2:	4607      	mov	r7, r0
340097f4:	b928      	cbnz	r0, 34009802 <VD6G_Init+0x2de>
    vtpatch_offset += vtpatch_desc[i].size;
340097f6:	f858 3c04 	ldr.w	r3, [r8, #-4]
  for (i = 0; i < vtpatch_area_nb; i++) {
340097fa:	f109 0901 	add.w	r9, r9, #1
    vtpatch_offset += vtpatch_desc[i].size;
340097fe:	441c      	add	r4, r3
  for (i = 0; i < vtpatch_area_nb; i++) {
34009800:	e7d4      	b.n	340097ac <VD6G_Init+0x288>
    VD6G_TraceError(ctx, ret);
34009802:	f240 13f9 	movw	r3, #505	@ 0x1f9
34009806:	4a2a      	ldr	r2, [pc, #168]	@ (340098b0 <VD6G_Init+0x38c>)
34009808:	491b      	ldr	r1, [pc, #108]	@ (34009878 <VD6G_Init+0x354>)
3400980a:	9000      	str	r0, [sp, #0]
3400980c:	4628      	mov	r0, r5
3400980e:	f7ff fd42 	bl	34009296 <VD6G_error>
34009812:	4628      	mov	r0, r5
34009814:	f7ff fd5c 	bl	340092d0 <display_error>
    return ret;
34009818:	463c      	mov	r4, r7
3400981a:	e691      	b.n	34009540 <VD6G_Init+0x1c>
  VD6G_TraceError(ctx, ret);
3400981c:	f240 13fd 	movw	r3, #509	@ 0x1fd
34009820:	9000      	str	r0, [sp, #0]
34009822:	e7a8      	b.n	34009776 <VD6G_Init+0x252>
  ret = ctx->write8(ctx, 0xbbb4, VT_REVISION);
34009824:	2211      	movs	r2, #17
34009826:	f64b 31b4 	movw	r1, #48052	@ 0xbbb4
3400982a:	4628      	mov	r0, r5
3400982c:	692b      	ldr	r3, [r5, #16]
3400982e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009830:	4604      	mov	r4, r0
34009832:	b118      	cbz	r0, 3400983c <VD6G_Init+0x318>
34009834:	f240 2301 	movw	r3, #513	@ 0x201
34009838:	9000      	str	r0, [sp, #0]
3400983a:	e79c      	b.n	34009776 <VD6G_Init+0x252>
  ret = ctx->write8(ctx, 0xb898, VT_REVISION);
3400983c:	2211      	movs	r2, #17
3400983e:	f64b 0198 	movw	r1, #47256	@ 0xb898
34009842:	4628      	mov	r0, r5
34009844:	692b      	ldr	r3, [r5, #16]
34009846:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009848:	4604      	mov	r4, r0
3400984a:	b118      	cbz	r0, 34009854 <VD6G_Init+0x330>
3400984c:	f240 2303 	movw	r3, #515	@ 0x203
34009850:	9000      	str	r0, [sp, #0]
34009852:	e790      	b.n	34009776 <VD6G_Init+0x252>
  ret = ctx->write8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_END_VTRAM_UPDATE);
34009854:	2202      	movs	r2, #2
34009856:	f240 2103 	movw	r1, #515	@ 0x203
3400985a:	4628      	mov	r0, r5
3400985c:	692b      	ldr	r3, [r5, #16]
3400985e:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009860:	4604      	mov	r4, r0
34009862:	b368      	cbz	r0, 340098c0 <VD6G_Init+0x39c>
34009864:	f240 2306 	movw	r3, #518	@ 0x206
34009868:	9000      	str	r0, [sp, #0]
3400986a:	e784      	b.n	34009776 <VD6G_Init+0x252>
3400986c:	34027a21 	.word	0x34027a21
34009870:	34027a44 	.word	0x34027a44
34009874:	3402fa05 	.word	0x3402fa05
34009878:	340278ea 	.word	0x340278ea
3400987c:	34027bc8 	.word	0x34027bc8
34009880:	34027ad0 	.word	0x34027ad0
34009884:	34026d17 	.word	0x34026d17
34009888:	3402f9e6 	.word	0x3402f9e6
3400988c:	34027b83 	.word	0x34027b83
34009890:	340312f8 	.word	0x340312f8
34009894:	3402f9ce 	.word	0x3402f9ce
34009898:	34027910 	.word	0x34027910
3400989c:	34027930 	.word	0x34027930
340098a0:	3402796c 	.word	0x3402796c
340098a4:	3402f9c1 	.word	0x3402f9c1
340098a8:	34027991 	.word	0x34027991
340098ac:	3402f9af 	.word	0x3402f9af
340098b0:	3402f995 	.word	0x3402f995
340098b4:	34108e60 	.word	0x34108e60
340098b8:	34108e5c 	.word	0x34108e5c
340098bc:	3402fb30 	.word	0x3402fb30
  ret = VD6G_PollReg8(ctx, VD6G_REG_VTPATCHING, VD6G_CMD_ACK);
340098c0:	4602      	mov	r2, r0
340098c2:	f240 2103 	movw	r1, #515	@ 0x203
340098c6:	4628      	mov	r0, r5
340098c8:	f7ff fd22 	bl	34009310 <VD6G_PollReg8>
  if (ret)
340098cc:	4604      	mov	r4, r0
340098ce:	2800      	cmp	r0, #0
340098d0:	f47f ae36 	bne.w	34009540 <VD6G_Init+0x1c>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
340098d4:	2102      	movs	r1, #2
340098d6:	4628      	mov	r0, r5
340098d8:	f7ff fe08 	bl	340094ec <VD6G_WaitState>
  if (ret)
340098dc:	4604      	mov	r4, r0
340098de:	2800      	cmp	r0, #0
340098e0:	f47f ae2e 	bne.w	34009540 <VD6G_Init+0x1c>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_RD_REVISION, &cur_vtpatch_rd_rev);
340098e4:	2120      	movs	r1, #32
340098e6:	4628      	mov	r0, r5
340098e8:	686b      	ldr	r3, [r5, #4]
340098ea:	f10d 020a 	add.w	r2, sp, #10
340098ee:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
340098f0:	4604      	mov	r4, r0
340098f2:	b958      	cbnz	r0, 3400990c <VD6G_Init+0x3e8>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_GR_REVISION, &cur_vtpatch_gr_rev);
340098f4:	2124      	movs	r1, #36	@ 0x24
340098f6:	4628      	mov	r0, r5
340098f8:	686b      	ldr	r3, [r5, #4]
340098fa:	f10d 020b 	add.w	r2, sp, #11
340098fe:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009900:	4604      	mov	r4, r0
34009902:	b138      	cbz	r0, 34009914 <VD6G_Init+0x3f0>
34009904:	f240 2313 	movw	r3, #531	@ 0x213
34009908:	9000      	str	r0, [sp, #0]
3400990a:	e734      	b.n	34009776 <VD6G_Init+0x252>
  VD6G_TraceError(ctx, ret);
3400990c:	f240 2311 	movw	r3, #529	@ 0x211
34009910:	9000      	str	r0, [sp, #0]
34009912:	e730      	b.n	34009776 <VD6G_Init+0x252>
  ret = ctx->read8(ctx, VD6G_REG_VTIMING_GT_REVISION, &cur_vtpatch_gt_rev);
34009914:	4632      	mov	r2, r6
34009916:	2126      	movs	r1, #38	@ 0x26
34009918:	4628      	mov	r0, r5
3400991a:	686b      	ldr	r3, [r5, #4]
3400991c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400991e:	4604      	mov	r4, r0
34009920:	b118      	cbz	r0, 3400992a <VD6G_Init+0x406>
34009922:	f240 2315 	movw	r3, #533	@ 0x215
34009926:	9000      	str	r0, [sp, #0]
34009928:	e725      	b.n	34009776 <VD6G_Init+0x252>
  if (cur_vtpatch_rd_rev != VT_REVISION ||
3400992a:	f89d 300a 	ldrb.w	r3, [sp, #10]
      cur_vtpatch_gr_rev != VT_REVISION ||
3400992e:	f89d 100b 	ldrb.w	r1, [sp, #11]
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009932:	2b11      	cmp	r3, #17
      cur_vtpatch_gt_rev != VT_REVISION) {
34009934:	f89d 200c 	ldrb.w	r2, [sp, #12]
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009938:	d004      	beq.n	34009944 <VD6G_Init+0x420>
    VD6G_error(ctx, "bad vtpatch version, expected %d got rd:%d, gr:%d gt:%d\n", VT_REVISION, cur_vtpatch_rd_rev,
3400993a:	e9cd 1200 	strd	r1, r2, [sp]
3400993e:	2211      	movs	r2, #17
34009940:	496e      	ldr	r1, [pc, #440]	@ (34009afc <VD6G_Init+0x5d8>)
34009942:	e6c3      	b.n	340096cc <VD6G_Init+0x1a8>
  if (cur_vtpatch_rd_rev != VT_REVISION ||
34009944:	2911      	cmp	r1, #17
34009946:	d1f8      	bne.n	3400993a <VD6G_Init+0x416>
      cur_vtpatch_gr_rev != VT_REVISION ||
34009948:	2a11      	cmp	r2, #17
3400994a:	d1f6      	bne.n	3400993a <VD6G_Init+0x416>
  VD6G_notice(ctx, "VT patch %d applied\n", VT_REVISION);
3400994c:	4628      	mov	r0, r5
3400994e:	496c      	ldr	r1, [pc, #432]	@ (34009b00 <VD6G_Init+0x5dc>)
34009950:	f7ff fcaf 	bl	340092b2 <VD6G_notice>
  ret = ctx->read8(ctx, VD6G_REG_OPTICAL_REVISION, &reg8);
34009954:	4632      	mov	r2, r6
34009956:	211a      	movs	r1, #26
34009958:	4628      	mov	r0, r5
3400995a:	686b      	ldr	r3, [r5, #4]
3400995c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400995e:	4604      	mov	r4, r0
34009960:	b120      	cbz	r0, 3400996c <VD6G_Init+0x448>
34009962:	f240 2341 	movw	r3, #577	@ 0x241
34009966:	4a67      	ldr	r2, [pc, #412]	@ (34009b04 <VD6G_Init+0x5e0>)
34009968:	9000      	str	r0, [sp, #0]
3400996a:	e632      	b.n	340095d2 <VD6G_Init+0xae>
  if (!(reg8 & 1)) {
3400996c:	f89d 300c 	ldrb.w	r3, [sp, #12]
34009970:	f013 0301 	ands.w	r3, r3, #1
34009974:	d008      	beq.n	34009988 <VD6G_Init+0x464>
  switch (drv_ctx->config_save.flip_mirror_mode) {
34009976:	f895 203c 	ldrb.w	r2, [r5, #60]	@ 0x3c
3400997a:	2a03      	cmp	r2, #3
3400997c:	d81b      	bhi.n	340099b6 <VD6G_Init+0x492>
3400997e:	e8df f002 	tbb	[pc, r2]
34009982:	021f      	.short	0x021f
34009984:	1803      	.short	0x1803
34009986:	2304      	movs	r3, #4
34009988:	f240 4767 	movw	r7, #1127	@ 0x467
  for (i = 0; i < VD6G_GPIO_NB; i++) {
3400998c:	f240 496f 	movw	r9, #1135	@ 0x46f
    ctx->bayer = VD6G_BAYER_RGGB;
34009990:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
34009994:	f105 085b 	add.w	r8, r5, #91	@ 0x5b
    ret = ctx->write8(ctx, VD6G_REG_GPIO_x_CTRL(i), drv_ctx->config_save.gpio_ctrl[i]);
34009998:	4639      	mov	r1, r7
3400999a:	4628      	mov	r0, r5
3400999c:	692b      	ldr	r3, [r5, #16]
3400999e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
340099a2:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
340099a4:	4604      	mov	r4, r0
340099a6:	b168      	cbz	r0, 340099c4 <VD6G_Init+0x4a0>
340099a8:	f44f 731d 	mov.w	r3, #628	@ 0x274
340099ac:	4a56      	ldr	r2, [pc, #344]	@ (34009b08 <VD6G_Init+0x5e4>)
340099ae:	9000      	str	r0, [sp, #0]
340099b0:	e60f      	b.n	340095d2 <VD6G_Init+0xae>
  case VD6G_MIRROR_FLIP:
340099b2:	4613      	mov	r3, r2
340099b4:	e7e8      	b.n	34009988 <VD6G_Init+0x464>
    assert(0);
340099b6:	f240 2156 	movw	r1, #598	@ 0x256
340099ba:	4b54      	ldr	r3, [pc, #336]	@ (34009b0c <VD6G_Init+0x5e8>)
340099bc:	4a51      	ldr	r2, [pc, #324]	@ (34009b04 <VD6G_Init+0x5e0>)
340099be:	e643      	b.n	34009648 <VD6G_Init+0x124>
  switch (drv_ctx->config_save.flip_mirror_mode) {
340099c0:	2302      	movs	r3, #2
340099c2:	e7e1      	b.n	34009988 <VD6G_Init+0x464>
  for (i = 0; i < VD6G_GPIO_NB; i++) {
340099c4:	3701      	adds	r7, #1
340099c6:	b2bf      	uxth	r7, r7
340099c8:	454f      	cmp	r7, r9
340099ca:	d1e5      	bne.n	34009998 <VD6G_Init+0x474>
  ret = VD6G_ComputeClocks(ctx, drv_ctx->config_save.ext_clock_freq_in_hz, &pll_prediv, &pll_mult);
340099cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  const unsigned int predivs[] = { 1, 2, 4 };
340099ce:	4a50      	ldr	r2, [pc, #320]	@ (34009b10 <VD6G_Init+0x5ec>)
340099d0:	ca07      	ldmia	r2, {r0, r1, r2}
340099d2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  if (ext_clock < 6 * M_HZ ||
340099d6:	484f      	ldr	r0, [pc, #316]	@ (34009b14 <VD6G_Init+0x5f0>)
340099d8:	f5a3 02b7 	sub.w	r2, r3, #5996544	@ 0x5b8000
340099dc:	f5a2 6258 	sub.w	r2, r2, #3456	@ 0xd80
340099e0:	4282      	cmp	r2, r0
340099e2:	4631      	mov	r1, r6
340099e4:	d830      	bhi.n	34009a48 <VD6G_Init+0x524>
    if (ext_clock / *pll_prediv < 12 * M_HZ)
340099e6:	4a4c      	ldr	r2, [pc, #304]	@ (34009b18 <VD6G_Init+0x5f4>)
    *pll_prediv = predivs[i];
340099e8:	f851 0b04 	ldr.w	r0, [r1], #4
    if (ext_clock / *pll_prediv < 12 * M_HZ)
340099ec:	fa5f f880 	uxtb.w	r8, r0
340099f0:	fbb3 f0f8 	udiv	r0, r3, r8
340099f4:	4290      	cmp	r0, r2
340099f6:	d302      	bcc.n	340099fe <VD6G_Init+0x4da>
  for (i = 0; i < ARRAY_SIZE(predivs); i++) {
340099f8:	3401      	adds	r4, #1
340099fa:	2c03      	cmp	r4, #3
340099fc:	d1f4      	bne.n	340099e8 <VD6G_Init+0x4c4>
  *pll_mult = (VD6G_TARGET_PLL * *pll_prediv + ext_clock / 2) / ext_clock;
340099fe:	4a47      	ldr	r2, [pc, #284]	@ (34009b1c <VD6G_Init+0x5f8>)
34009a00:	085f      	lsrs	r7, r3, #1
34009a02:	fb02 7708 	mla	r7, r2, r8, r7
34009a06:	fbb7 f7f3 	udiv	r7, r7, r3
  VD6G_dbg(ctx, 0, "Ext Clock = %d Hz\n", ext_clock);
34009a0a:	2100      	movs	r1, #0
34009a0c:	4628      	mov	r0, r5
34009a0e:	4a44      	ldr	r2, [pc, #272]	@ (34009b20 <VD6G_Init+0x5fc>)
34009a10:	f7ff fd34 	bl	3400947c <VD6G_dbg.constprop.0>
  VD6G_dbg(ctx, 0, "PLL mult = %d\n", *pll_mult);
34009a14:	b2ff      	uxtb	r7, r7
  VD6G_dbg(ctx, 0, "PLL prediv = %d\n", *pll_prediv);
34009a16:	4643      	mov	r3, r8
34009a18:	2100      	movs	r1, #0
34009a1a:	4628      	mov	r0, r5
34009a1c:	4a41      	ldr	r2, [pc, #260]	@ (34009b24 <VD6G_Init+0x600>)
34009a1e:	f7ff fd2d 	bl	3400947c <VD6G_dbg.constprop.0>
  VD6G_dbg(ctx, 0, "PLL mult = %d\n", *pll_mult);
34009a22:	463b      	mov	r3, r7
34009a24:	2100      	movs	r1, #0
34009a26:	4628      	mov	r0, r5
34009a28:	4a3f      	ldr	r2, [pc, #252]	@ (34009b28 <VD6G_Init+0x604>)
34009a2a:	f7ff fd27 	bl	3400947c <VD6G_dbg.constprop.0>
  ret = ctx->write32(ctx, VD6G_REG_EXT_CLOCK, drv_ctx->config_save.ext_clock_freq_in_hz);
34009a2e:	f44f 7108 	mov.w	r1, #544	@ 0x220
34009a32:	4628      	mov	r0, r5
34009a34:	69ab      	ldr	r3, [r5, #24]
34009a36:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
34009a38:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a3a:	4604      	mov	r4, r0
34009a3c:	b130      	cbz	r0, 34009a4c <VD6G_Init+0x528>
34009a3e:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
34009a42:	9000      	str	r0, [sp, #0]
    VD6G_TraceError(ctx, ret);
34009a44:	4a39      	ldr	r2, [pc, #228]	@ (34009b2c <VD6G_Init+0x608>)
34009a46:	e5c4      	b.n	340095d2 <VD6G_Init+0xae>
    VD6G_error(ctx, "External clock out of rangen\n");
34009a48:	4939      	ldr	r1, [pc, #228]	@ (34009b30 <VD6G_Init+0x60c>)
34009a4a:	e5d9      	b.n	34009600 <VD6G_Init+0xdc>
  ret = ctx->write8(ctx, VD6G_REG_CLK_PLL_PREDIV, pll_prediv);
34009a4c:	4642      	mov	r2, r8
34009a4e:	f44f 7109 	mov.w	r1, #548	@ 0x224
34009a52:	4628      	mov	r0, r5
34009a54:	692b      	ldr	r3, [r5, #16]
34009a56:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a58:	4604      	mov	r4, r0
34009a5a:	b958      	cbnz	r0, 34009a74 <VD6G_Init+0x550>
  ret = ctx->write8(ctx, VD6G_REG_CLK_SYS_PLL_MULT, pll_mult);
34009a5c:	463a      	mov	r2, r7
34009a5e:	f240 2126 	movw	r1, #550	@ 0x226
34009a62:	4628      	mov	r0, r5
34009a64:	692b      	ldr	r3, [r5, #16]
34009a66:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a68:	4604      	mov	r4, r0
34009a6a:	b138      	cbz	r0, 34009a7c <VD6G_Init+0x558>
34009a6c:	f240 23ca 	movw	r3, #714	@ 0x2ca
34009a70:	9000      	str	r0, [sp, #0]
34009a72:	e7e7      	b.n	34009a44 <VD6G_Init+0x520>
  VD6G_TraceError(ctx, ret);
34009a74:	f240 23c7 	movw	r3, #711	@ 0x2c7
34009a78:	9000      	str	r0, [sp, #0]
34009a7a:	e7e3      	b.n	34009a44 <VD6G_Init+0x520>
  if (drv_ctx->config_save.line_len) {
34009a7c:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
34009a7e:	b962      	cbnz	r2, 34009a9a <VD6G_Init+0x576>
  ret = ctx->read16(ctx, VD6G_LINE_LENGTH, &line_length);
34009a80:	4632      	mov	r2, r6
34009a82:	f44f 7140 	mov.w	r1, #768	@ 0x300
34009a86:	4628      	mov	r0, r5
34009a88:	68ab      	ldr	r3, [r5, #8]
34009a8a:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009a8c:	4604      	mov	r4, r0
34009a8e:	b188      	cbz	r0, 34009ab4 <VD6G_Init+0x590>
34009a90:	f44f 7350 	mov.w	r3, #832	@ 0x340
34009a94:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009a96:	4a27      	ldr	r2, [pc, #156]	@ (34009b34 <VD6G_Init+0x610>)
34009a98:	e59b      	b.n	340095d2 <VD6G_Init+0xae>
    ret = ctx->write16(ctx, VD6G_LINE_LENGTH, drv_ctx->config_save.line_len);
34009a9a:	f44f 7140 	mov.w	r1, #768	@ 0x300
34009a9e:	4628      	mov	r0, r5
34009aa0:	696b      	ldr	r3, [r5, #20]
34009aa2:	b292      	uxth	r2, r2
34009aa4:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009aa6:	4604      	mov	r4, r0
34009aa8:	2800      	cmp	r0, #0
34009aaa:	d0e9      	beq.n	34009a80 <VD6G_Init+0x55c>
34009aac:	f240 23ce 	movw	r3, #718	@ 0x2ce
34009ab0:	9000      	str	r0, [sp, #0]
34009ab2:	e7c7      	b.n	34009a44 <VD6G_Init+0x520>
  VD6G_dbg(ctx, 0, "Line len = %d\n", line_length);
34009ab4:	4601      	mov	r1, r0
34009ab6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34009aba:	4628      	mov	r0, r5
34009abc:	4a1e      	ldr	r2, [pc, #120]	@ (34009b38 <VD6G_Init+0x614>)
34009abe:	f7ff fcdd 	bl	3400947c <VD6G_dbg.constprop.0>
  frame_length = VD6G_PIXEL_CLOCK / (line_length * drv_ctx->config_save.frame_rate);
34009ac2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
34009ac4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34009ac8:	4e1c      	ldr	r6, [pc, #112]	@ (34009b3c <VD6G_Init+0x618>)
34009aca:	4353      	muls	r3, r2
34009acc:	fb96 f6f3 	sdiv	r6, r6, r3
  VD6G_dbg(ctx, 0, "Set frame_length to %d to reach %d fps\n", frame_length, drv_ctx->config_save.frame_rate);
34009ad0:	4621      	mov	r1, r4
34009ad2:	4628      	mov	r0, r5
34009ad4:	9200      	str	r2, [sp, #0]
34009ad6:	b2b3      	uxth	r3, r6
34009ad8:	4a19      	ldr	r2, [pc, #100]	@ (34009b40 <VD6G_Init+0x61c>)
34009ada:	f7ff fccf 	bl	3400947c <VD6G_dbg.constprop.0>
  ret = ctx->write16(ctx, VD6G_FRAME_LENGTH, frame_length);
34009ade:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34009ae2:	4628      	mov	r0, r5
34009ae4:	696b      	ldr	r3, [r5, #20]
34009ae6:	b2b2      	uxth	r2, r6
34009ae8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009aea:	4604      	mov	r4, r0
34009aec:	2800      	cmp	r0, #0
34009aee:	f43f ad27 	beq.w	34009540 <VD6G_Init+0x1c>
34009af2:	f240 3346 	movw	r3, #838	@ 0x346
34009af6:	9000      	str	r0, [sp, #0]
34009af8:	e7cd      	b.n	34009a96 <VD6G_Init+0x572>
34009afa:	bf00      	nop
34009afc:	34027bde 	.word	0x34027bde
34009b00:	34027c17 	.word	0x34027c17
34009b04:	3402f983 	.word	0x3402f983
34009b08:	3402f978 	.word	0x3402f978
34009b0c:	34026d17 	.word	0x34026d17
34009b10:	34026150 	.word	0x34026150
34009b14:	01406f40 	.word	0x01406f40
34009b18:	00b71b00 	.word	0x00b71b00
34009b1c:	2fec1100 	.word	0x2fec1100
34009b20:	34027c4a 	.word	0x34027c4a
34009b24:	34027c5d 	.word	0x34027c5d
34009b28:	34027c6e 	.word	0x34027c6e
34009b2c:	3402f967 	.word	0x3402f967
34009b30:	34027c2c 	.word	0x34027c2c
34009b34:	3402f953 	.word	0x3402f953
34009b38:	34027c7d 	.word	0x34027c7d
34009b3c:	09959d00 	.word	0x09959d00
34009b40:	34027b12 	.word	0x34027b12

34009b44 <VD6G_DeInit>:

int VD6G_DeInit(VD6G_Ctx_t *ctx)
{
34009b44:	b538      	push	{r3, r4, r5, lr}
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;

  if (drv_ctx->is_streaming)
34009b46:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
{
34009b48:	4604      	mov	r4, r0
  if (drv_ctx->is_streaming)
34009b4a:	b945      	cbnz	r5, 34009b5e <VD6G_DeInit+0x1a>
    return -1;

  ctx->shutdown_pin(ctx, 0);
34009b4c:	6803      	ldr	r3, [r0, #0]
34009b4e:	4629      	mov	r1, r5
34009b50:	4798      	blx	r3
  ctx->delay(ctx, 10);
34009b52:	210a      	movs	r1, #10
34009b54:	4620      	mov	r0, r4
34009b56:	6a23      	ldr	r3, [r4, #32]
34009b58:	4798      	blx	r3

  return 0;
}
34009b5a:	4628      	mov	r0, r5
34009b5c:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
34009b5e:	f04f 35ff 	mov.w	r5, #4294967295
34009b62:	e7fa      	b.n	34009b5a <VD6G_DeInit+0x16>

34009b64 <VD6G_Start>:
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009b64:	6c83      	ldr	r3, [r0, #72]	@ 0x48

int VD6G_Start(VD6G_Ctx_t *ctx)
{
34009b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009b68:	3b01      	subs	r3, #1
34009b6a:	2b01      	cmp	r3, #1
{
34009b6c:	4605      	mov	r5, r0
  if (out_itf->datalane_nb != 1 && out_itf->datalane_nb != 2)
34009b6e:	d904      	bls.n	34009b7a <VD6G_Start+0x16>
    return ret;
34009b70:	f04f 34ff 	mov.w	r4, #4294967295
  if (ret)
    return ret;
  drv_ctx->is_streaming = 1;

  return 0;
}
34009b74:	4620      	mov	r0, r4
34009b76:	b002      	add	sp, #8
34009b78:	bd70      	pop	{r4, r5, r6, pc}
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34009b7a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009b7c:	2208      	movs	r2, #8
  out_itf->clock_lane_swap_enable = !!out_itf->clock_lane_swap_enable;
34009b7e:	3b00      	subs	r3, #0
34009b80:	bf18      	it	ne
34009b82:	2301      	movne	r3, #1
34009b84:	64c3      	str	r3, [r0, #76]	@ 0x4c
  out_itf->data_lane0_swap_enable = !!out_itf->data_lane0_swap_enable;
34009b86:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009b88:	f240 310a 	movw	r1, #778	@ 0x30a
  out_itf->data_lane0_swap_enable = !!out_itf->data_lane0_swap_enable;
34009b8c:	3b00      	subs	r3, #0
34009b8e:	bf18      	it	ne
34009b90:	2301      	movne	r3, #1
34009b92:	6503      	str	r3, [r0, #80]	@ 0x50
  out_itf->data_lane1_swap_enable = !!out_itf->data_lane1_swap_enable;
34009b94:	6d43      	ldr	r3, [r0, #84]	@ 0x54
34009b96:	3b00      	subs	r3, #0
34009b98:	bf18      	it	ne
34009b9a:	2301      	movne	r3, #1
34009b9c:	6543      	str	r3, [r0, #84]	@ 0x54
  out_itf->data_lanes_mapping_swap_enable = !!out_itf->data_lanes_mapping_swap_enable;
34009b9e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
34009ba0:	3b00      	subs	r3, #0
34009ba2:	bf18      	it	ne
34009ba4:	2301      	movne	r3, #1
34009ba6:	6583      	str	r3, [r0, #88]	@ 0x58
  ret = ctx->write8(ctx, VD6G_REG_FORMAT_CTRL, VD6G_COLOR_DEPTH_RAW8);
34009ba8:	6903      	ldr	r3, [r0, #16]
34009baa:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009bac:	4604      	mov	r4, r0
34009bae:	b9e8      	cbnz	r0, 34009bec <VD6G_Start+0x88>
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
34009bb0:	e9d5 0315 	ldrd	r0, r3, [r5, #84]	@ 0x54
             !out_itf->data_lanes_mapping_swap_enable << 7 |
34009bb4:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
             out_itf->clock_lane_swap_enable << 3 |
34009bb6:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
             !out_itf->data_lanes_mapping_swap_enable << 7 |
34009bb8:	0192      	lsls	r2, r2, #6
             out_itf->clock_lane_swap_enable << 3 |
34009bba:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
34009bbe:	430a      	orrs	r2, r1
34009bc0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
34009bc4:	fab3 f383 	clz	r3, r3
             out_itf->data_lanes_mapping_swap_enable << 4 |
34009bc8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
  oif_ctrl = out_itf->data_lane1_swap_enable << 9 |
34009bca:	095b      	lsrs	r3, r3, #5
             out_itf->clock_lane_swap_enable << 3 |
34009bcc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
34009bd0:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
  ret = ctx->write16(ctx, VD6G_REG_OIF_CTRL, oif_ctrl);
34009bd4:	f44f 7143 	mov.w	r1, #780	@ 0x30c
34009bd8:	4628      	mov	r0, r5
34009bda:	696b      	ldr	r3, [r5, #20]
34009bdc:	b292      	uxth	r2, r2
34009bde:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009be0:	4604      	mov	r4, r0
34009be2:	b178      	cbz	r0, 34009c04 <VD6G_Start+0xa0>
34009be4:	f240 23ee 	movw	r3, #750	@ 0x2ee
34009be8:	9000      	str	r0, [sp, #0]
34009bea:	e002      	b.n	34009bf2 <VD6G_Start+0x8e>
  VD6G_TraceError(ctx, ret);
34009bec:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
34009bf0:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009bf2:	4a74      	ldr	r2, [pc, #464]	@ (34009dc4 <VD6G_Start+0x260>)
34009bf4:	4628      	mov	r0, r5
34009bf6:	4974      	ldr	r1, [pc, #464]	@ (34009dc8 <VD6G_Start+0x264>)
34009bf8:	f7ff fb4d 	bl	34009296 <VD6G_error>
34009bfc:	4628      	mov	r0, r5
34009bfe:	f7ff fb67 	bl	340092d0 <display_error>
  if (ret)
34009c02:	e7b7      	b.n	34009b74 <VD6G_Start+0x10>
  ret = ctx->write16(ctx, VD6G_REG_OIF_CSI_BITRATE, 804);
34009c04:	f44f 7249 	mov.w	r2, #804	@ 0x324
34009c08:	f240 3112 	movw	r1, #786	@ 0x312
34009c0c:	4628      	mov	r0, r5
34009c0e:	696b      	ldr	r3, [r5, #20]
34009c10:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c12:	4604      	mov	r4, r0
34009c14:	b118      	cbz	r0, 34009c1e <VD6G_Start+0xba>
34009c16:	f240 23f2 	movw	r3, #754	@ 0x2f2
34009c1a:	9000      	str	r0, [sp, #0]
34009c1c:	e7e9      	b.n	34009bf2 <VD6G_Start+0x8e>
  ret = ctx->write8(ctx, VD6G_REG_OIF_IMG_CTRL, 0x2a);
34009c1e:	222a      	movs	r2, #42	@ 0x2a
34009c20:	f240 310f 	movw	r1, #783	@ 0x30f
34009c24:	4628      	mov	r0, r5
34009c26:	692b      	ldr	r3, [r5, #16]
34009c28:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c2a:	4604      	mov	r4, r0
34009c2c:	b118      	cbz	r0, 34009c36 <VD6G_Start+0xd2>
34009c2e:	f240 23f6 	movw	r3, #758	@ 0x2f6
34009c32:	9000      	str	r0, [sp, #0]
34009c34:	e7dd      	b.n	34009bf2 <VD6G_Start+0x8e>
  mode = VD6G_Resolution2Mode(drv_ctx->config_save.resolution);
34009c36:	f895 3034 	ldrb.w	r3, [r5, #52]	@ 0x34
  switch (resolution) {
34009c3a:	2b08      	cmp	r3, #8
34009c3c:	d898      	bhi.n	34009b70 <VD6G_Start+0xc>
34009c3e:	4a63      	ldr	r2, [pc, #396]	@ (34009dcc <VD6G_Start+0x268>)
34009c40:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
  if (!mode)
34009c44:	2e00      	cmp	r6, #0
34009c46:	d093      	beq.n	34009b70 <VD6G_Start+0xc>
  ret = ctx->write8(ctx, VD6G_REG_READOUT_CTRL, mode->bin_mode);
34009c48:	f240 417e 	movw	r1, #1150	@ 0x47e
34009c4c:	4628      	mov	r0, r5
34009c4e:	692b      	ldr	r3, [r5, #16]
34009c50:	7a32      	ldrb	r2, [r6, #8]
34009c52:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c54:	4604      	mov	r4, r0
34009c56:	b120      	cbz	r0, 34009c62 <VD6G_Start+0xfe>
34009c58:	f240 3329 	movw	r3, #809	@ 0x329
34009c5c:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009c5e:	4a5c      	ldr	r2, [pc, #368]	@ (34009dd0 <VD6G_Start+0x26c>)
34009c60:	e7c8      	b.n	34009bf4 <VD6G_Start+0x90>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_X_START, mode->crop.left);
34009c62:	f240 415e 	movw	r1, #1118	@ 0x45e
34009c66:	4628      	mov	r0, r5
34009c68:	696b      	ldr	r3, [r5, #20]
34009c6a:	89b2      	ldrh	r2, [r6, #12]
34009c6c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c6e:	4604      	mov	r4, r0
34009c70:	b978      	cbnz	r0, 34009c92 <VD6G_Start+0x12e>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_X_END, mode->crop.left + mode->crop.width - 1);
34009c72:	6973      	ldr	r3, [r6, #20]
34009c74:	68f2      	ldr	r2, [r6, #12]
34009c76:	f44f 618c 	mov.w	r1, #1120	@ 0x460
34009c7a:	441a      	add	r2, r3
34009c7c:	3a01      	subs	r2, #1
34009c7e:	4628      	mov	r0, r5
34009c80:	696b      	ldr	r3, [r5, #20]
34009c82:	b292      	uxth	r2, r2
34009c84:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009c86:	4604      	mov	r4, r0
34009c88:	b138      	cbz	r0, 34009c9a <VD6G_Start+0x136>
34009c8a:	f240 332e 	movw	r3, #814	@ 0x32e
34009c8e:	9000      	str	r0, [sp, #0]
34009c90:	e7e5      	b.n	34009c5e <VD6G_Start+0xfa>
  VD6G_TraceError(ctx, ret);
34009c92:	f44f 734b 	mov.w	r3, #812	@ 0x32c
34009c96:	9000      	str	r0, [sp, #0]
34009c98:	e7e1      	b.n	34009c5e <VD6G_Start+0xfa>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_Y_START, mode->crop.top);
34009c9a:	f240 4162 	movw	r1, #1122	@ 0x462
34009c9e:	4628      	mov	r0, r5
34009ca0:	696b      	ldr	r3, [r5, #20]
34009ca2:	8a32      	ldrh	r2, [r6, #16]
34009ca4:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009ca6:	4604      	mov	r4, r0
34009ca8:	b118      	cbz	r0, 34009cb2 <VD6G_Start+0x14e>
34009caa:	f240 3331 	movw	r3, #817	@ 0x331
34009cae:	9000      	str	r0, [sp, #0]
34009cb0:	e7d5      	b.n	34009c5e <VD6G_Start+0xfa>
  ret = ctx->write16(ctx, VD6G_REG_OUT_ROI_Y_END, mode->crop.top + mode->crop.height - 1);
34009cb2:	69b3      	ldr	r3, [r6, #24]
34009cb4:	6932      	ldr	r2, [r6, #16]
34009cb6:	f240 4164 	movw	r1, #1124	@ 0x464
34009cba:	441a      	add	r2, r3
34009cbc:	3a01      	subs	r2, #1
34009cbe:	4628      	mov	r0, r5
34009cc0:	696b      	ldr	r3, [r5, #20]
34009cc2:	b292      	uxth	r2, r2
34009cc4:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009cc6:	4604      	mov	r4, r0
34009cc8:	b118      	cbz	r0, 34009cd2 <VD6G_Start+0x16e>
34009cca:	f240 3333 	movw	r3, #819	@ 0x333
34009cce:	9000      	str	r0, [sp, #0]
34009cd0:	e7c5      	b.n	34009c5e <VD6G_Start+0xfa>
  return VD6G_SetExposureModeInternal(ctx, drv_ctx->config_save.exposure_mode);
34009cd2:	4628      	mov	r0, r5
34009cd4:	f895 1064 	ldrb.w	r1, [r5, #100]	@ 0x64
34009cd8:	f7ff fb4a 	bl	34009370 <VD6G_SetExposureModeInternal>
  if (ret)
34009cdc:	4604      	mov	r4, r0
34009cde:	2800      	cmp	r0, #0
34009ce0:	f47f af48 	bne.w	34009b74 <VD6G_Start+0x10>
  switch (drv_ctx->config_save.flip_mirror_mode) {
34009ce4:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
34009ce8:	2b03      	cmp	r3, #3
34009cea:	f63f af41 	bhi.w	34009b70 <VD6G_Start+0xc>
  ret = ctx->write8(ctx, VD6G_REG_ORIENTATION, mode);
34009cee:	4a39      	ldr	r2, [pc, #228]	@ (34009dd4 <VD6G_Start+0x270>)
34009cf0:	692c      	ldr	r4, [r5, #16]
34009cf2:	f240 3102 	movw	r1, #770	@ 0x302
34009cf6:	4628      	mov	r0, r5
34009cf8:	5cd2      	ldrb	r2, [r2, r3]
34009cfa:	47a0      	blx	r4
  VD6G_TraceError(ctx, ret);
34009cfc:	4604      	mov	r4, r0
34009cfe:	b9a8      	cbnz	r0, 34009d2c <VD6G_Start+0x1c8>
  switch (drv_ctx->config_save.patgen) {
34009d00:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
34009d04:	2b06      	cmp	r3, #6
34009d06:	f63f af33 	bhi.w	34009b70 <VD6G_Start+0xc>
34009d0a:	4a33      	ldr	r2, [pc, #204]	@ (34009dd8 <VD6G_Start+0x274>)
34009d0c:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
  if (drv_ctx->config_save.patgen != VD6G_PATGEN_DISABLE)
34009d10:	b1eb      	cbz	r3, 34009d4e <VD6G_Start+0x1ea>
    ret = ctx->write8(ctx, VD6G_REG_DUSTER_CTRL, VD6G_DUSTER_CTRL_DISABLE);
34009d12:	4602      	mov	r2, r0
34009d14:	f44f 7146 	mov.w	r1, #792	@ 0x318
34009d18:	4628      	mov	r0, r5
34009d1a:	692b      	ldr	r3, [r5, #16]
34009d1c:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009d1e:	4604      	mov	r4, r0
34009d20:	b148      	cbz	r0, 34009d36 <VD6G_Start+0x1d2>
34009d22:	f240 3392 	movw	r3, #914	@ 0x392
34009d26:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009d28:	4a2c      	ldr	r2, [pc, #176]	@ (34009ddc <VD6G_Start+0x278>)
34009d2a:	e763      	b.n	34009bf4 <VD6G_Start+0x90>
  VD6G_TraceError(ctx, ret);
34009d2c:	f240 336a 	movw	r3, #874	@ 0x36a
34009d30:	4a2b      	ldr	r2, [pc, #172]	@ (34009de0 <VD6G_Start+0x27c>)
34009d32:	9000      	str	r0, [sp, #0]
34009d34:	e75e      	b.n	34009bf4 <VD6G_Start+0x90>
    ret = ctx->write8(ctx, VD6G_REG_DARKCAL_CTRL, VD6G_DARKCAL_CTRL_DISABLE_DARKAVG);
34009d36:	2202      	movs	r2, #2
34009d38:	f44f 7150 	mov.w	r1, #832	@ 0x340
34009d3c:	4628      	mov	r0, r5
34009d3e:	692b      	ldr	r3, [r5, #16]
34009d40:	4798      	blx	r3
    VD6G_TraceError(ctx, ret);
34009d42:	4604      	mov	r4, r0
34009d44:	b118      	cbz	r0, 34009d4e <VD6G_Start+0x1ea>
34009d46:	f44f 7365 	mov.w	r3, #916	@ 0x394
34009d4a:	9000      	str	r0, [sp, #0]
34009d4c:	e7ec      	b.n	34009d28 <VD6G_Start+0x1c4>
  ret = ctx->write16(ctx, VD6G_REG_PATGEN_CTRL, value);
34009d4e:	4632      	mov	r2, r6
34009d50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34009d54:	4628      	mov	r0, r5
34009d56:	696b      	ldr	r3, [r5, #20]
34009d58:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009d5a:	4604      	mov	r4, r0
34009d5c:	b118      	cbz	r0, 34009d66 <VD6G_Start+0x202>
34009d5e:	f44f 7366 	mov.w	r3, #920	@ 0x398
34009d62:	9000      	str	r0, [sp, #0]
34009d64:	e7e0      	b.n	34009d28 <VD6G_Start+0x1c4>
  return VD6G_SetFlicker(ctx, drv_ctx->config_save.flicker);
34009d66:	4628      	mov	r0, r5
34009d68:	f895 1045 	ldrb.w	r1, [r5, #69]	@ 0x45
34009d6c:	f7ff fb20 	bl	340093b0 <VD6G_SetFlicker>
  if (ret)
34009d70:	4604      	mov	r4, r0
34009d72:	2800      	cmp	r0, #0
34009d74:	f47f aefe 	bne.w	34009b74 <VD6G_Start+0x10>
  ret = ctx->write8(ctx, VD6G_REG_STBY, VD6G_CMD_START_STREAM);
34009d78:	2201      	movs	r2, #1
34009d7a:	f240 2101 	movw	r1, #513	@ 0x201
34009d7e:	4628      	mov	r0, r5
34009d80:	692b      	ldr	r3, [r5, #16]
34009d82:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009d84:	4604      	mov	r4, r0
34009d86:	b120      	cbz	r0, 34009d92 <VD6G_Start+0x22e>
34009d88:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
34009d8c:	4a15      	ldr	r2, [pc, #84]	@ (34009de4 <VD6G_Start+0x280>)
34009d8e:	9000      	str	r0, [sp, #0]
34009d90:	e730      	b.n	34009bf4 <VD6G_Start+0x90>
  ret = VD6G_PollReg8(ctx, VD6G_REG_STBY, VD6G_CMD_ACK);
34009d92:	4602      	mov	r2, r0
34009d94:	f240 2101 	movw	r1, #513	@ 0x201
34009d98:	4628      	mov	r0, r5
34009d9a:	f7ff fab9 	bl	34009310 <VD6G_PollReg8>
  if (ret)
34009d9e:	4604      	mov	r4, r0
34009da0:	2800      	cmp	r0, #0
34009da2:	f47f aee7 	bne.w	34009b74 <VD6G_Start+0x10>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_STREAMING);
34009da6:	2103      	movs	r1, #3
34009da8:	4628      	mov	r0, r5
34009daa:	f7ff fb9f 	bl	340094ec <VD6G_WaitState>
  if (ret)
34009dae:	4604      	mov	r4, r0
34009db0:	2800      	cmp	r0, #0
34009db2:	f47f aedf 	bne.w	34009b74 <VD6G_Start+0x10>
  VD6G_notice(ctx, "Streaming is on\n");
34009db6:	4628      	mov	r0, r5
34009db8:	490b      	ldr	r1, [pc, #44]	@ (34009de8 <VD6G_Start+0x284>)
34009dba:	f7ff fa7a 	bl	340092b2 <VD6G_notice>
  drv_ctx->is_streaming = 1;
34009dbe:	2301      	movs	r3, #1
34009dc0:	62eb      	str	r3, [r5, #44]	@ 0x2c
  return 0;
34009dc2:	e6d7      	b.n	34009b74 <VD6G_Start+0x10>
34009dc4:	3402f942 	.word	0x3402f942
34009dc8:	340278ea 	.word	0x340278ea
34009dcc:	3402f7f4 	.word	0x3402f7f4
34009dd0:	3402f933 	.word	0x3402f933
34009dd4:	3402f7ee 	.word	0x3402f7ee
34009dd8:	3402f7e0 	.word	0x3402f7e0
34009ddc:	3402f8f0 	.word	0x3402f8f0
34009de0:	3402f901 	.word	0x3402f901
34009de4:	3402f8cc 	.word	0x3402f8cc
34009de8:	34027b72 	.word	0x34027b72

34009dec <VD6G_Stop>:

int VD6G_Stop(VD6G_Ctx_t *ctx)
{
34009dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ret = ctx->write8(ctx, VD6G_REG_STREAMING, VD6G_CMD_STOP_STREAM);
34009dee:	6903      	ldr	r3, [r0, #16]
34009df0:	2201      	movs	r2, #1
34009df2:	f240 2102 	movw	r1, #514	@ 0x202
{
34009df6:	4605      	mov	r5, r0
  ret = ctx->write8(ctx, VD6G_REG_STREAMING, VD6G_CMD_STOP_STREAM);
34009df8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009dfa:	4604      	mov	r4, r0
34009dfc:	b998      	cbnz	r0, 34009e26 <VD6G_Stop+0x3a>
  ret = VD6G_PollReg8(ctx, VD6G_REG_STREAMING, VD6G_CMD_ACK);
34009dfe:	4602      	mov	r2, r0
34009e00:	f240 2102 	movw	r1, #514	@ 0x202
34009e04:	4628      	mov	r0, r5
34009e06:	f7ff fa83 	bl	34009310 <VD6G_PollReg8>
  if (ret)
34009e0a:	4604      	mov	r4, r0
34009e0c:	b9b0      	cbnz	r0, 34009e3c <VD6G_Stop+0x50>
  ret = VD6G_WaitState(ctx, VD6G_SYSTEM_FSM_SW_STBY);
34009e0e:	2102      	movs	r1, #2
34009e10:	4628      	mov	r0, r5
34009e12:	f7ff fb6b 	bl	340094ec <VD6G_WaitState>
  if (ret)
34009e16:	4604      	mov	r4, r0
34009e18:	b980      	cbnz	r0, 34009e3c <VD6G_Stop+0x50>
  VD6G_notice(ctx, "Streaming is off\n");
34009e1a:	4628      	mov	r0, r5
34009e1c:	4909      	ldr	r1, [pc, #36]	@ (34009e44 <VD6G_Stop+0x58>)
34009e1e:	f7ff fa48 	bl	340092b2 <VD6G_notice>
  int ret;

  ret = VD6G_StopStreaming(ctx);
  if (ret)
    return ret;
  drv_ctx->is_streaming = 0;
34009e22:	62ec      	str	r4, [r5, #44]	@ 0x2c

  return 0;
34009e24:	e00a      	b.n	34009e3c <VD6G_Stop+0x50>
  VD6G_TraceError(ctx, ret);
34009e26:	9000      	str	r0, [sp, #0]
34009e28:	f240 4304 	movw	r3, #1028	@ 0x404
34009e2c:	4628      	mov	r0, r5
34009e2e:	4a06      	ldr	r2, [pc, #24]	@ (34009e48 <VD6G_Stop+0x5c>)
34009e30:	4906      	ldr	r1, [pc, #24]	@ (34009e4c <VD6G_Stop+0x60>)
34009e32:	f7ff fa30 	bl	34009296 <VD6G_error>
34009e36:	4628      	mov	r0, r5
34009e38:	f7ff fa4a 	bl	340092d0 <display_error>
}
34009e3c:	4620      	mov	r0, r4
34009e3e:	b003      	add	sp, #12
34009e40:	bd30      	pop	{r4, r5, pc}
34009e42:	bf00      	nop
34009e44:	340279fe 	.word	0x340279fe
34009e48:	3402f8b9 	.word	0x3402f8b9
34009e4c:	340278ea 	.word	0x340278ea

34009e50 <VD6G_SetExposureMode>:

  return 0;
}

int VD6G_SetExposureMode(VD6G_Ctx_t *ctx, VD6G_ExposureMode_t mode)
{
34009e50:	b538      	push	{r3, r4, r5, lr}
34009e52:	4604      	mov	r4, r0
34009e54:	460d      	mov	r5, r1
  struct drv_vd6g_ctx *drv_ctx = &ctx->ctx;
  int ret;

  ret = VD6G_SetExposureModeInternal(ctx, mode);
34009e56:	f7ff fa8b 	bl	34009370 <VD6G_SetExposureModeInternal>
  if (ret)
34009e5a:	b908      	cbnz	r0, 34009e60 <VD6G_SetExposureMode+0x10>
    return ret;

  drv_ctx->config_save.exposure_mode = mode;
34009e5c:	f884 5064 	strb.w	r5, [r4, #100]	@ 0x64

  return 0;
}
34009e60:	bd38      	pop	{r3, r4, r5, pc}
	...

34009e64 <VD6G_GetAnalogGainRegRange>:

int VD6G_GetAnalogGainRegRange(VD6G_Ctx_t *ctx, uint8_t *AGmin, uint8_t *AGmax)
{
34009e64:	b5f0      	push	{r4, r5, r6, r7, lr}
34009e66:	4605      	mov	r5, r0
34009e68:	4616      	mov	r6, r2
  int ret;
  uint8_t value;

  if ((AGmin == NULL) || (AGmax == NULL))
34009e6a:	460f      	mov	r7, r1
{
34009e6c:	b085      	sub	sp, #20
  if ((AGmin == NULL) || (AGmax == NULL))
34009e6e:	b371      	cbz	r1, 34009ece <VD6G_GetAnalogGainRegRange+0x6a>
34009e70:	b36a      	cbz	r2, 34009ece <VD6G_GetAnalogGainRegRange+0x6a>
    return -1;

  ret = ctx->read8(ctx, VD6G_REG_MIN_AG_CODED, &value);
34009e72:	f640 117e 	movw	r1, #2430	@ 0x97e
34009e76:	6843      	ldr	r3, [r0, #4]
34009e78:	f10d 020f 	add.w	r2, sp, #15
34009e7c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009e7e:	4604      	mov	r4, r0
34009e80:	b988      	cbnz	r0, 34009ea6 <VD6G_GetAnalogGainRegRange+0x42>
  *AGmin = value & VD6G_REG_MIN_AG_CODED_MASK;
34009e82:	f89d 300f 	ldrb.w	r3, [sp, #15]

  ret = ctx->read8(ctx, VD6G_REG_MAX_AG_CODED, &value);
34009e86:	f44f 6116 	mov.w	r1, #2400	@ 0x960
  *AGmin = value & VD6G_REG_MIN_AG_CODED_MASK;
34009e8a:	f003 031f 	and.w	r3, r3, #31
34009e8e:	703b      	strb	r3, [r7, #0]
  ret = ctx->read8(ctx, VD6G_REG_MAX_AG_CODED, &value);
34009e90:	4628      	mov	r0, r5
34009e92:	686b      	ldr	r3, [r5, #4]
34009e94:	f10d 020f 	add.w	r2, sp, #15
34009e98:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009e9a:	4604      	mov	r4, r0
34009e9c:	b178      	cbz	r0, 34009ebe <VD6G_GetAnalogGainRegRange+0x5a>
34009e9e:	f240 43cc 	movw	r3, #1228	@ 0x4cc
34009ea2:	9000      	str	r0, [sp, #0]
34009ea4:	e002      	b.n	34009eac <VD6G_GetAnalogGainRegRange+0x48>
  VD6G_TraceError(ctx, ret);
34009ea6:	f44f 6399 	mov.w	r3, #1224	@ 0x4c8
34009eaa:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009eac:	4628      	mov	r0, r5
34009eae:	4a09      	ldr	r2, [pc, #36]	@ (34009ed4 <VD6G_GetAnalogGainRegRange+0x70>)
34009eb0:	4909      	ldr	r1, [pc, #36]	@ (34009ed8 <VD6G_GetAnalogGainRegRange+0x74>)
34009eb2:	f7ff f9f0 	bl	34009296 <VD6G_error>
34009eb6:	4628      	mov	r0, r5
34009eb8:	f7ff fa0a 	bl	340092d0 <display_error>
34009ebc:	e004      	b.n	34009ec8 <VD6G_GetAnalogGainRegRange+0x64>
  *AGmax = value & VD6G_REG_MAX_AG_CODED_MASK;
34009ebe:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009ec2:	f003 031f 	and.w	r3, r3, #31
34009ec6:	7033      	strb	r3, [r6, #0]

  return 0;
}
34009ec8:	4620      	mov	r0, r4
34009eca:	b005      	add	sp, #20
34009ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return -1;
34009ece:	f04f 34ff 	mov.w	r4, #4294967295
34009ed2:	e7f9      	b.n	34009ec8 <VD6G_GetAnalogGainRegRange+0x64>
34009ed4:	3402f89e 	.word	0x3402f89e
34009ed8:	340278ea 	.word	0x340278ea

34009edc <VD6G_SetAnalogGain>:

int VD6G_SetAnalogGain(VD6G_Ctx_t *ctx, int gain)
{
34009edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
34009ede:	460e      	mov	r6, r1
  int ret;
  uint8_t again_regmin, again_regmax;

  ret = VD6G_GetAnalogGainRegRange(ctx, &again_regmin, &again_regmax);
34009ee0:	f10d 020f 	add.w	r2, sp, #15
34009ee4:	f10d 010e 	add.w	r1, sp, #14
{
34009ee8:	4605      	mov	r5, r0
  ret = VD6G_GetAnalogGainRegRange(ctx, &again_regmin, &again_regmax);
34009eea:	f7ff ffbb 	bl	34009e64 <VD6G_GetAnalogGainRegRange>
  if (ret)
34009eee:	4604      	mov	r4, r0
34009ef0:	b9d0      	cbnz	r0, 34009f28 <VD6G_SetAnalogGain+0x4c>
    return ret;

  ret = CHECK_RANGE(gain, again_regmin, again_regmax);
34009ef2:	f89d 300e 	ldrb.w	r3, [sp, #14]
34009ef6:	42b3      	cmp	r3, r6
34009ef8:	dc19      	bgt.n	34009f2e <VD6G_SetAnalogGain+0x52>
34009efa:	f89d 300f 	ldrb.w	r3, [sp, #15]
34009efe:	42b3      	cmp	r3, r6
34009f00:	db15      	blt.n	34009f2e <VD6G_SetAnalogGain+0x52>
  if (ret)
    return ret;

  ret = ctx->write8(ctx, VD6G_REG_MANUAL_ANALOG_GAIN, gain);
34009f02:	f240 414d 	movw	r1, #1101	@ 0x44d
34009f06:	4628      	mov	r0, r5
34009f08:	692b      	ldr	r3, [r5, #16]
34009f0a:	b2f2      	uxtb	r2, r6
34009f0c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009f0e:	4604      	mov	r4, r0
34009f10:	b150      	cbz	r0, 34009f28 <VD6G_SetAnalogGain+0x4c>
34009f12:	9000      	str	r0, [sp, #0]
34009f14:	f44f 639c 	mov.w	r3, #1248	@ 0x4e0
34009f18:	4628      	mov	r0, r5
34009f1a:	4a06      	ldr	r2, [pc, #24]	@ (34009f34 <VD6G_SetAnalogGain+0x58>)
34009f1c:	4906      	ldr	r1, [pc, #24]	@ (34009f38 <VD6G_SetAnalogGain+0x5c>)
34009f1e:	f7ff f9ba 	bl	34009296 <VD6G_error>
34009f22:	4628      	mov	r0, r5
34009f24:	f7ff f9d4 	bl	340092d0 <display_error>

  return 0;
}
34009f28:	4620      	mov	r0, r4
34009f2a:	b004      	add	sp, #16
34009f2c:	bd70      	pop	{r4, r5, r6, pc}
    return ret;
34009f2e:	f04f 34ff 	mov.w	r4, #4294967295
34009f32:	e7f9      	b.n	34009f28 <VD6G_SetAnalogGain+0x4c>
34009f34:	3402f88b 	.word	0x3402f88b
34009f38:	340278ea 	.word	0x340278ea

34009f3c <VD6G_GetDigitalGainRegRange>:

int VD6G_GetDigitalGainRegRange(VD6G_Ctx_t *ctx, uint16_t *DGmin, uint16_t *DGmax)
{
34009f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
34009f3e:	4616      	mov	r6, r2
34009f40:	4605      	mov	r5, r0
  int ret;

  if ((DGmin == NULL) && (DGmax == NULL))
34009f42:	460a      	mov	r2, r1
34009f44:	b901      	cbnz	r1, 34009f48 <VD6G_GetDigitalGainRegRange+0xc>
34009f46:	b306      	cbz	r6, 34009f8a <VD6G_GetDigitalGainRegRange+0x4e>
    return -1;

  ret = ctx->read16(ctx, VD6G_REG_MIN_DG, DGmin);
34009f48:	f640 117c 	movw	r1, #2428	@ 0x97c
34009f4c:	4628      	mov	r0, r5
34009f4e:	68ab      	ldr	r3, [r5, #8]
34009f50:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009f52:	4604      	mov	r4, r0
34009f54:	b958      	cbnz	r0, 34009f6e <VD6G_GetDigitalGainRegRange+0x32>

  ret = ctx->read16(ctx, VD6G_REG_MAX_DG, DGmax);
34009f56:	4632      	mov	r2, r6
34009f58:	f640 115e 	movw	r1, #2398	@ 0x95e
34009f5c:	4628      	mov	r0, r5
34009f5e:	68ab      	ldr	r3, [r5, #8]
34009f60:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009f62:	4604      	mov	r4, r0
34009f64:	b170      	cbz	r0, 34009f84 <VD6G_GetDigitalGainRegRange+0x48>
34009f66:	f44f 639e 	mov.w	r3, #1264	@ 0x4f0
34009f6a:	9000      	str	r0, [sp, #0]
34009f6c:	e002      	b.n	34009f74 <VD6G_GetDigitalGainRegRange+0x38>
  VD6G_TraceError(ctx, ret);
34009f6e:	f240 43ed 	movw	r3, #1261	@ 0x4ed
34009f72:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
34009f74:	4628      	mov	r0, r5
34009f76:	4a06      	ldr	r2, [pc, #24]	@ (34009f90 <VD6G_GetDigitalGainRegRange+0x54>)
34009f78:	4906      	ldr	r1, [pc, #24]	@ (34009f94 <VD6G_GetDigitalGainRegRange+0x58>)
34009f7a:	f7ff f98c 	bl	34009296 <VD6G_error>
34009f7e:	4628      	mov	r0, r5
34009f80:	f7ff f9a6 	bl	340092d0 <display_error>

  return 0;
}
34009f84:	4620      	mov	r0, r4
34009f86:	b002      	add	sp, #8
34009f88:	bd70      	pop	{r4, r5, r6, pc}
    return -1;
34009f8a:	f04f 34ff 	mov.w	r4, #4294967295
34009f8e:	e7f9      	b.n	34009f84 <VD6G_GetDigitalGainRegRange+0x48>
34009f90:	3402f86f 	.word	0x3402f86f
34009f94:	340278ea 	.word	0x340278ea

34009f98 <VD6G_SetDigitalGain>:

int VD6G_SetDigitalGain(VD6G_Ctx_t *ctx, int gain)
{
34009f98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
34009f9a:	460e      	mov	r6, r1
  int ret;
  uint16_t dgain_regmin, dgain_regmax;

  ret = VD6G_GetDigitalGainRegRange(ctx, &dgain_regmin, &dgain_regmax);
34009f9c:	f10d 020e 	add.w	r2, sp, #14
34009fa0:	a903      	add	r1, sp, #12
{
34009fa2:	4605      	mov	r5, r0
  ret = VD6G_GetDigitalGainRegRange(ctx, &dgain_regmin, &dgain_regmax);
34009fa4:	f7ff ffca 	bl	34009f3c <VD6G_GetDigitalGainRegRange>
  if (ret)
34009fa8:	4604      	mov	r4, r0
34009faa:	bb38      	cbnz	r0, 34009ffc <VD6G_SetDigitalGain+0x64>
    return ret;

  ret = CHECK_RANGE(gain, dgain_regmin, dgain_regmax);
34009fac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
34009fb0:	42b3      	cmp	r3, r6
34009fb2:	dc3f      	bgt.n	3400a034 <VD6G_SetDigitalGain+0x9c>
34009fb4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
34009fb8:	42b3      	cmp	r3, r6
34009fba:	db3b      	blt.n	3400a034 <VD6G_SetDigitalGain+0x9c>
  if (ret)
    return ret;

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH0_DIGITAL_GAIN, gain);
34009fbc:	b2b6      	uxth	r6, r6
34009fbe:	4632      	mov	r2, r6
34009fc0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34009fc4:	4628      	mov	r0, r5
34009fc6:	696b      	ldr	r3, [r5, #20]
34009fc8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009fca:	4604      	mov	r4, r0
34009fcc:	b958      	cbnz	r0, 34009fe6 <VD6G_SetDigitalGain+0x4e>

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH1_DIGITAL_GAIN, gain);
34009fce:	4632      	mov	r2, r6
34009fd0:	f240 4152 	movw	r1, #1106	@ 0x452
34009fd4:	4628      	mov	r0, r5
34009fd6:	696b      	ldr	r3, [r5, #20]
34009fd8:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
34009fda:	4604      	mov	r4, r0
34009fdc:	b188      	cbz	r0, 3400a002 <VD6G_SetDigitalGain+0x6a>
34009fde:	f240 5306 	movw	r3, #1286	@ 0x506
34009fe2:	9000      	str	r0, [sp, #0]
34009fe4:	e002      	b.n	34009fec <VD6G_SetDigitalGain+0x54>
  VD6G_TraceError(ctx, ret);
34009fe6:	f240 5303 	movw	r3, #1283	@ 0x503
34009fea:	9000      	str	r0, [sp, #0]

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH2_DIGITAL_GAIN, gain);
  VD6G_TraceError(ctx, ret);

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH3_DIGITAL_GAIN, gain);
  VD6G_TraceError(ctx, ret);
34009fec:	4628      	mov	r0, r5
34009fee:	4a13      	ldr	r2, [pc, #76]	@ (3400a03c <VD6G_SetDigitalGain+0xa4>)
34009ff0:	4913      	ldr	r1, [pc, #76]	@ (3400a040 <VD6G_SetDigitalGain+0xa8>)
34009ff2:	f7ff f950 	bl	34009296 <VD6G_error>
34009ff6:	4628      	mov	r0, r5
34009ff8:	f7ff f96a 	bl	340092d0 <display_error>

  return 0;
}
34009ffc:	4620      	mov	r0, r4
34009ffe:	b004      	add	sp, #16
3400a000:	bd70      	pop	{r4, r5, r6, pc}
  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH2_DIGITAL_GAIN, gain);
3400a002:	4632      	mov	r2, r6
3400a004:	f240 4154 	movw	r1, #1108	@ 0x454
3400a008:	4628      	mov	r0, r5
3400a00a:	696b      	ldr	r3, [r5, #20]
3400a00c:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a00e:	4604      	mov	r4, r0
3400a010:	b118      	cbz	r0, 3400a01a <VD6G_SetDigitalGain+0x82>
3400a012:	f240 5309 	movw	r3, #1289	@ 0x509
3400a016:	9000      	str	r0, [sp, #0]
3400a018:	e7e8      	b.n	34009fec <VD6G_SetDigitalGain+0x54>
  ret = ctx->write16(ctx, VD6G_REG_MANUAL_CH3_DIGITAL_GAIN, gain);
3400a01a:	4632      	mov	r2, r6
3400a01c:	f240 4156 	movw	r1, #1110	@ 0x456
3400a020:	4628      	mov	r0, r5
3400a022:	696b      	ldr	r3, [r5, #20]
3400a024:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a026:	4604      	mov	r4, r0
3400a028:	2800      	cmp	r0, #0
3400a02a:	d0e7      	beq.n	34009ffc <VD6G_SetDigitalGain+0x64>
3400a02c:	f240 530c 	movw	r3, #1292	@ 0x50c
3400a030:	9000      	str	r0, [sp, #0]
3400a032:	e7db      	b.n	34009fec <VD6G_SetDigitalGain+0x54>
    return ret;
3400a034:	f04f 34ff 	mov.w	r4, #4294967295
3400a038:	e7e0      	b.n	34009ffc <VD6G_SetDigitalGain+0x64>
3400a03a:	bf00      	nop
3400a03c:	3402f85b 	.word	0x3402f85b
3400a040:	340278ea 	.word	0x340278ea

3400a044 <VD6G_GetExposureRegRange>:

int VD6G_GetExposureRegRange(VD6G_Ctx_t *ctx, uint32_t *min_us, uint32_t *max_us)
{
3400a044:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400a048:	4605      	mov	r5, r0
3400a04a:	4616      	mov	r6, r2
  uint16_t exp_coarse_intg_margin;
  uint32_t line_time_in_us;
  uint16_t frame_length;
  int ret;

  if ((min_us == NULL) || (max_us == NULL))
3400a04c:	460f      	mov	r7, r1
3400a04e:	b929      	cbnz	r1, 3400a05c <VD6G_GetExposureRegRange+0x18>
    return -1;
3400a050:	f04f 34ff 	mov.w	r4, #4294967295
    *max_us = (frame_length - exp_coarse_intg_margin - VD6G_MAX_MANUAL_EXP_COARSE_OFFSET) * line_time_in_us;
  else
    return -1;

  return 0;
}
3400a054:	4620      	mov	r0, r4
3400a056:	b004      	add	sp, #16
3400a058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((min_us == NULL) || (max_us == NULL))
3400a05c:	2a00      	cmp	r2, #0
3400a05e:	d0f7      	beq.n	3400a050 <VD6G_GetExposureRegRange+0xc>
  ret = VD6G_GetLineTimeInUs(ctx, &line_time_in_us);
3400a060:	a903      	add	r1, sp, #12
3400a062:	f7ff f9c9 	bl	340093f8 <VD6G_GetLineTimeInUs>
  if (ret)
3400a066:	4604      	mov	r4, r0
3400a068:	2800      	cmp	r0, #0
3400a06a:	d1f3      	bne.n	3400a054 <VD6G_GetExposureRegRange+0x10>
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400a06c:	2315      	movs	r3, #21
3400a06e:	f8dd 800c 	ldr.w	r8, [sp, #12]
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400a072:	f44f 618b 	mov.w	r1, #1112	@ 0x458
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400a076:	fb03 f308 	mul.w	r3, r3, r8
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400a07a:	4628      	mov	r0, r5
  *min_us = VD6G_MIN_MANUAL_EXP_COARSE * line_time_in_us;
3400a07c:	603b      	str	r3, [r7, #0]
  ret = ctx->read16(ctx, VD6G_FRAME_LENGTH, &frame_length);
3400a07e:	f10d 020a 	add.w	r2, sp, #10
3400a082:	68ab      	ldr	r3, [r5, #8]
3400a084:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a086:	4604      	mov	r4, r0
3400a088:	b958      	cbnz	r0, 3400a0a2 <VD6G_GetExposureRegRange+0x5e>
  ret = ctx->read16(ctx, VD6G_REG_EXP_COARSE_INTG_MARGIN, &exp_coarse_intg_margin);
3400a08a:	f640 1146 	movw	r1, #2374	@ 0x946
3400a08e:	4628      	mov	r0, r5
3400a090:	68ab      	ldr	r3, [r5, #8]
3400a092:	aa02      	add	r2, sp, #8
3400a094:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a096:	4604      	mov	r4, r0
3400a098:	b178      	cbz	r0, 3400a0ba <VD6G_GetExposureRegRange+0x76>
3400a09a:	f240 5325 	movw	r3, #1317	@ 0x525
3400a09e:	9000      	str	r0, [sp, #0]
3400a0a0:	e002      	b.n	3400a0a8 <VD6G_GetExposureRegRange+0x64>
  VD6G_TraceError(ctx, ret);
3400a0a2:	f240 5322 	movw	r3, #1314	@ 0x522
3400a0a6:	9000      	str	r0, [sp, #0]
  VD6G_TraceError(ctx, ret);
3400a0a8:	4628      	mov	r0, r5
3400a0aa:	4a0a      	ldr	r2, [pc, #40]	@ (3400a0d4 <VD6G_GetExposureRegRange+0x90>)
3400a0ac:	490a      	ldr	r1, [pc, #40]	@ (3400a0d8 <VD6G_GetExposureRegRange+0x94>)
3400a0ae:	f7ff f8f2 	bl	34009296 <VD6G_error>
3400a0b2:	4628      	mov	r0, r5
3400a0b4:	f7ff f90c 	bl	340092d0 <display_error>
3400a0b8:	e7cc      	b.n	3400a054 <VD6G_GetExposureRegRange+0x10>
  if (exp_coarse_intg_margin >= VD6G_MIN_EXP_COARSE_INTG_MARGIN)
3400a0ba:	f8bd 2008 	ldrh.w	r2, [sp, #8]
3400a0be:	2a43      	cmp	r2, #67	@ 0x43
3400a0c0:	d9c6      	bls.n	3400a050 <VD6G_GetExposureRegRange+0xc>
    *max_us = (frame_length - exp_coarse_intg_margin - VD6G_MAX_MANUAL_EXP_COARSE_OFFSET) * line_time_in_us;
3400a0c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
3400a0c6:	1a9b      	subs	r3, r3, r2
3400a0c8:	3b07      	subs	r3, #7
3400a0ca:	fb08 f303 	mul.w	r3, r8, r3
3400a0ce:	6033      	str	r3, [r6, #0]
  return 0;
3400a0d0:	e7c0      	b.n	3400a054 <VD6G_GetExposureRegRange+0x10>
3400a0d2:	bf00      	nop
3400a0d4:	3402f842 	.word	0x3402f842
3400a0d8:	340278ea 	.word	0x340278ea

3400a0dc <VD6G_SetExposureTime>:

int VD6G_SetExposureTime(VD6G_Ctx_t *ctx, int exposure_us)
{
3400a0dc:	b570      	push	{r4, r5, r6, lr}
3400a0de:	b086      	sub	sp, #24
3400a0e0:	460e      	mov	r6, r1
  int32_t ret;
  uint32_t exp_min, exp_max;
  uint32_t line_time_in_us;

  ret = VD6G_GetExposureRegRange(ctx, &exp_min, &exp_max);
3400a0e2:	aa04      	add	r2, sp, #16
3400a0e4:	a903      	add	r1, sp, #12
{
3400a0e6:	4605      	mov	r5, r0
  ret = VD6G_GetExposureRegRange(ctx, &exp_min, &exp_max);
3400a0e8:	f7ff ffac 	bl	3400a044 <VD6G_GetExposureRegRange>
  if (ret)
3400a0ec:	4604      	mov	r4, r0
3400a0ee:	bb08      	cbnz	r0, 3400a134 <VD6G_SetExposureTime+0x58>
    return ret;

  ret = CHECK_RANGE(exposure_us, exp_min, exp_max);
3400a0f0:	9b03      	ldr	r3, [sp, #12]
3400a0f2:	429e      	cmp	r6, r3
3400a0f4:	d321      	bcc.n	3400a13a <VD6G_SetExposureTime+0x5e>
3400a0f6:	9b04      	ldr	r3, [sp, #16]
3400a0f8:	429e      	cmp	r6, r3
3400a0fa:	d81e      	bhi.n	3400a13a <VD6G_SetExposureTime+0x5e>
  if (ret)
    return ret;

  ret = VD6G_GetLineTimeInUs(ctx, &line_time_in_us);
3400a0fc:	4628      	mov	r0, r5
3400a0fe:	a905      	add	r1, sp, #20
3400a100:	f7ff f97a 	bl	340093f8 <VD6G_GetLineTimeInUs>
  if (ret)
3400a104:	4604      	mov	r4, r0
3400a106:	b9a8      	cbnz	r0, 3400a134 <VD6G_SetExposureTime+0x58>
    return ret;

  ret = ctx->write16(ctx, VD6G_REG_MANUAL_COARSE_EXP, CEIL(exposure_us / line_time_in_us));
3400a108:	9b05      	ldr	r3, [sp, #20]
3400a10a:	f240 414e 	movw	r1, #1102	@ 0x44e
3400a10e:	fbb6 f2f3 	udiv	r2, r6, r3
3400a112:	4628      	mov	r0, r5
3400a114:	696b      	ldr	r3, [r5, #20]
3400a116:	b292      	uxth	r2, r2
3400a118:	4798      	blx	r3
  VD6G_TraceError(ctx, ret);
3400a11a:	4604      	mov	r4, r0
3400a11c:	b150      	cbz	r0, 3400a134 <VD6G_SetExposureTime+0x58>
3400a11e:	9000      	str	r0, [sp, #0]
3400a120:	f240 5342 	movw	r3, #1346	@ 0x542
3400a124:	4628      	mov	r0, r5
3400a126:	4a06      	ldr	r2, [pc, #24]	@ (3400a140 <VD6G_SetExposureTime+0x64>)
3400a128:	4906      	ldr	r1, [pc, #24]	@ (3400a144 <VD6G_SetExposureTime+0x68>)
3400a12a:	f7ff f8b4 	bl	34009296 <VD6G_error>
3400a12e:	4628      	mov	r0, r5
3400a130:	f7ff f8ce 	bl	340092d0 <display_error>

  return 0;
}
3400a134:	4620      	mov	r0, r4
3400a136:	b006      	add	sp, #24
3400a138:	bd70      	pop	{r4, r5, r6, pc}
    return ret;
3400a13a:	f04f 34ff 	mov.w	r4, #4294967295
3400a13e:	e7f9      	b.n	3400a134 <VD6G_SetExposureTime+0x58>
3400a140:	3402f818 	.word	0x3402f818
3400a144:	340278ea 	.word	0x340278ea

3400a148 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
3400a148:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a14c:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a150:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a154:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
3400a156:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
3400a158:	2300      	movs	r3, #0
3400a15a:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
3400a15c:	4770      	bx	lr

3400a15e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
3400a15e:	2300      	movs	r3, #0
3400a160:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
3400a162:	4770      	bx	lr

3400a164 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
3400a164:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
3400a166:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
3400a168:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
3400a16a:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
3400a16c:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
3400a16e:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
3400a170:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
3400a172:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
3400a174:	3301      	adds	r3, #1
3400a176:	6003      	str	r3, [r0, #0]
}
3400a178:	4770      	bx	lr

3400a17a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
3400a17a:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
3400a17c:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
3400a17e:	1c63      	adds	r3, r4, #1
3400a180:	d10a      	bne.n	3400a198 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
3400a182:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
3400a184:	685a      	ldr	r2, [r3, #4]
3400a186:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
3400a188:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
3400a18a:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
3400a18c:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
3400a18e:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
3400a190:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
3400a192:	3301      	adds	r3, #1
3400a194:	6003      	str	r3, [r0, #0]
}
3400a196:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
3400a198:	f100 0208 	add.w	r2, r0, #8
3400a19c:	4613      	mov	r3, r2
3400a19e:	6852      	ldr	r2, [r2, #4]
3400a1a0:	6815      	ldr	r5, [r2, #0]
3400a1a2:	42a5      	cmp	r5, r4
3400a1a4:	d9fa      	bls.n	3400a19c <vListInsert+0x22>
3400a1a6:	e7ed      	b.n	3400a184 <vListInsert+0xa>

3400a1a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
3400a1a8:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
3400a1aa:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
3400a1ae:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
3400a1b0:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
3400a1b2:	6859      	ldr	r1, [r3, #4]
3400a1b4:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
3400a1b6:	bf08      	it	eq
3400a1b8:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
3400a1ba:	2200      	movs	r2, #0
3400a1bc:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
3400a1be:	681a      	ldr	r2, [r3, #0]
3400a1c0:	3a01      	subs	r2, #1
3400a1c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
3400a1c4:	6818      	ldr	r0, [r3, #0]
}
3400a1c6:	4770      	bx	lr

3400a1c8 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
3400a1c8:	b510      	push	{r4, lr}
3400a1ca:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
3400a1cc:	f001 fbf6 	bl	3400b9bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
3400a1d0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
3400a1d2:	f001 fc01 	bl	3400b9d8 <vPortExitCritical>

    return xReturn;
}
3400a1d6:	fab4 f084 	clz	r0, r4
3400a1da:	0940      	lsrs	r0, r0, #5
3400a1dc:	bd10      	pop	{r4, pc}

3400a1de <prvCopyDataToQueue>:
{
3400a1de:	b570      	push	{r4, r5, r6, lr}
3400a1e0:	4616      	mov	r6, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
3400a1e2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
3400a1e4:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
3400a1e6:	6b85      	ldr	r5, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
3400a1e8:	b942      	cbnz	r2, 3400a1fc <prvCopyDataToQueue+0x1e>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a1ea:	6806      	ldr	r6, [r0, #0]
3400a1ec:	b99e      	cbnz	r6, 3400a216 <prvCopyDataToQueue+0x38>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
3400a1ee:	6880      	ldr	r0, [r0, #8]
3400a1f0:	f001 f95c 	bl	3400b4ac <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
3400a1f4:	60a6      	str	r6, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
3400a1f6:	3501      	adds	r5, #1
3400a1f8:	63a5      	str	r5, [r4, #56]	@ 0x38
}
3400a1fa:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
3400a1fc:	b96e      	cbnz	r6, 3400a21a <prvCopyDataToQueue+0x3c>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
3400a1fe:	6840      	ldr	r0, [r0, #4]
3400a200:	f016 fab1 	bl	34020766 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a204:	6863      	ldr	r3, [r4, #4]
3400a206:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400a208:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a20a:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a20c:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a20e:	4293      	cmp	r3, r2
            pxQueue->pcWriteTo = pxQueue->pcHead;
3400a210:	bf24      	itt	cs
3400a212:	6823      	ldrcs	r3, [r4, #0]
3400a214:	6063      	strcs	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
3400a216:	2000      	movs	r0, #0
3400a218:	e7ed      	b.n	3400a1f6 <prvCopyDataToQueue+0x18>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
3400a21a:	68c0      	ldr	r0, [r0, #12]
3400a21c:	f016 faa3 	bl	34020766 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
3400a220:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3400a222:	68e3      	ldr	r3, [r4, #12]
3400a224:	4251      	negs	r1, r2
3400a226:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a228:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
3400a22a:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
3400a22c:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
3400a22e:	bf3e      	ittt	cc
3400a230:	68a3      	ldrcc	r3, [r4, #8]
3400a232:	185b      	addcc	r3, r3, r1
3400a234:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
3400a236:	2e02      	cmp	r6, #2
3400a238:	d1ed      	bne.n	3400a216 <prvCopyDataToQueue+0x38>
    BaseType_t xReturn = pdFALSE;
3400a23a:	4628      	mov	r0, r5
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
3400a23c:	2d00      	cmp	r5, #0
3400a23e:	d0da      	beq.n	3400a1f6 <prvCopyDataToQueue+0x18>
                --uxMessagesWaiting;
3400a240:	3d01      	subs	r5, #1
3400a242:	e7e8      	b.n	3400a216 <prvCopyDataToQueue+0x38>

3400a244 <prvCopyDataFromQueue>:
{
3400a244:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
3400a246:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
3400a248:	4608      	mov	r0, r1
3400a24a:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
3400a24c:	b16a      	cbz	r2, 3400a26a <prvCopyDataFromQueue+0x26>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a24e:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
3400a250:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a252:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
3400a254:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
3400a256:	bf28      	it	cs
3400a258:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
3400a25a:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
3400a25c:	bf28      	it	cs
3400a25e:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
3400a260:	68d9      	ldr	r1, [r3, #12]
}
3400a262:	f85d 4b04 	ldr.w	r4, [sp], #4
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
3400a266:	f016 ba7e 	b.w	34020766 <memcpy>
}
3400a26a:	f85d 4b04 	ldr.w	r4, [sp], #4
3400a26e:	4770      	bx	lr

3400a270 <prvUnlockQueue>:
{
3400a270:	b570      	push	{r4, r5, r6, lr}
3400a272:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
3400a274:	f001 fba2 	bl	3400b9bc <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
3400a278:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a27c:	f104 0624 	add.w	r6, r4, #36	@ 0x24
        int8_t cTxLock = pxQueue->cTxLock;
3400a280:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
3400a282:	2d00      	cmp	r5, #0
3400a284:	dd01      	ble.n	3400a28a <prvUnlockQueue+0x1a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
3400a286:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a288:	b9b3      	cbnz	r3, 3400a2b8 <prvUnlockQueue+0x48>
        pxQueue->cTxLock = queueUNLOCKED;
3400a28a:	23ff      	movs	r3, #255	@ 0xff
3400a28c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    taskEXIT_CRITICAL();
3400a290:	f001 fba2 	bl	3400b9d8 <vPortExitCritical>
    taskENTER_CRITICAL();
3400a294:	f001 fb92 	bl	3400b9bc <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
3400a298:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a29c:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
3400a2a0:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
3400a2a2:	2d00      	cmp	r5, #0
3400a2a4:	dd01      	ble.n	3400a2aa <prvUnlockQueue+0x3a>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a2a6:	6923      	ldr	r3, [r4, #16]
3400a2a8:	b97b      	cbnz	r3, 3400a2ca <prvUnlockQueue+0x5a>
        pxQueue->cRxLock = queueUNLOCKED;
3400a2aa:	23ff      	movs	r3, #255	@ 0xff
3400a2ac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
3400a2b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
3400a2b4:	f001 bb90 	b.w	3400b9d8 <vPortExitCritical>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a2b8:	4630      	mov	r0, r6
3400a2ba:	f000 ffe5 	bl	3400b288 <xTaskRemoveFromEventList>
3400a2be:	b108      	cbz	r0, 3400a2c4 <prvUnlockQueue+0x54>
                        vTaskMissedYield();
3400a2c0:	f001 f898 	bl	3400b3f4 <vTaskMissedYield>
            --cTxLock;
3400a2c4:	3d01      	subs	r5, #1
3400a2c6:	b26d      	sxtb	r5, r5
3400a2c8:	e7db      	b.n	3400a282 <prvUnlockQueue+0x12>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a2ca:	4630      	mov	r0, r6
3400a2cc:	f000 ffdc 	bl	3400b288 <xTaskRemoveFromEventList>
3400a2d0:	b108      	cbz	r0, 3400a2d6 <prvUnlockQueue+0x66>
                    vTaskMissedYield();
3400a2d2:	f001 f88f 	bl	3400b3f4 <vTaskMissedYield>
                --cRxLock;
3400a2d6:	3d01      	subs	r5, #1
3400a2d8:	b26d      	sxtb	r5, r5
3400a2da:	e7e2      	b.n	3400a2a2 <prvUnlockQueue+0x32>

3400a2dc <xQueueGenericReset>:
{
3400a2dc:	b570      	push	{r4, r5, r6, lr}
3400a2de:	460e      	mov	r6, r1
    configASSERT( pxQueue );
3400a2e0:	4604      	mov	r4, r0
3400a2e2:	b940      	cbnz	r0, 3400a2f6 <xQueueGenericReset+0x1a>
3400a2e4:	f001 fcee 	bl	3400bcc4 <ulSetInterruptMask>
3400a2e8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
3400a2ec:	4b1d      	ldr	r3, [pc, #116]	@ (3400a364 <xQueueGenericReset+0x88>)
3400a2ee:	4a1e      	ldr	r2, [pc, #120]	@ (3400a368 <xQueueGenericReset+0x8c>)
    configASSERT( xReturn != pdFAIL );
3400a2f0:	481e      	ldr	r0, [pc, #120]	@ (3400a36c <xQueueGenericReset+0x90>)
3400a2f2:	f014 ff67 	bl	3401f1c4 <__assert_func>
        ( pxQueue->uxLength >= 1U ) &&
3400a2f6:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
3400a2f8:	b365      	cbz	r5, 3400a354 <xQueueGenericReset+0x78>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
3400a2fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a2fc:	fba3 3505 	umull	r3, r5, r3, r5
3400a300:	bb45      	cbnz	r5, 3400a354 <xQueueGenericReset+0x78>
        taskENTER_CRITICAL();
3400a302:	f001 fb5b 	bl	3400b9bc <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a306:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
3400a30a:	434b      	muls	r3, r1
3400a30c:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
3400a30e:	63a5      	str	r5, [r4, #56]	@ 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a310:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a312:	1a5b      	subs	r3, r3, r1
            pxQueue->pcWriteTo = pxQueue->pcHead;
3400a314:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a316:	441a      	add	r2, r3
            pxQueue->cRxLock = queueUNLOCKED;
3400a318:	23ff      	movs	r3, #255	@ 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a31a:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
3400a31c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
3400a320:	60e2      	str	r2, [r4, #12]
            pxQueue->cTxLock = queueUNLOCKED;
3400a322:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
3400a326:	b966      	cbnz	r6, 3400a342 <xQueueGenericReset+0x66>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a328:	6923      	ldr	r3, [r4, #16]
3400a32a:	b133      	cbz	r3, 3400a33a <xQueueGenericReset+0x5e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a32c:	f104 0010 	add.w	r0, r4, #16
3400a330:	f000 ffaa 	bl	3400b288 <xTaskRemoveFromEventList>
3400a334:	b108      	cbz	r0, 3400a33a <xQueueGenericReset+0x5e>
                        queueYIELD_IF_USING_PREEMPTION();
3400a336:	f001 fb35 	bl	3400b9a4 <vPortYield>
        taskEXIT_CRITICAL();
3400a33a:	f001 fb4d 	bl	3400b9d8 <vPortExitCritical>
}
3400a33e:	2001      	movs	r0, #1
3400a340:	bd70      	pop	{r4, r5, r6, pc}
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
3400a342:	f104 0010 	add.w	r0, r4, #16
3400a346:	f7ff feff 	bl	3400a148 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
3400a34a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a34e:	f7ff fefb 	bl	3400a148 <vListInitialise>
3400a352:	e7f2      	b.n	3400a33a <xQueueGenericReset+0x5e>
    configASSERT( xReturn != pdFAIL );
3400a354:	f001 fcb6 	bl	3400bcc4 <ulSetInterruptMask>
3400a358:	f240 1163 	movw	r1, #355	@ 0x163
3400a35c:	4b01      	ldr	r3, [pc, #4]	@ (3400a364 <xQueueGenericReset+0x88>)
3400a35e:	4a02      	ldr	r2, [pc, #8]	@ (3400a368 <xQueueGenericReset+0x8c>)
3400a360:	e7c6      	b.n	3400a2f0 <xQueueGenericReset+0x14>
3400a362:	bf00      	nop
3400a364:	34026d17 	.word	0x34026d17
3400a368:	34033eab 	.word	0x34033eab
3400a36c:	34027c8c 	.word	0x34027c8c

3400a370 <xQueueGenericCreateStatic>:
    {
3400a370:	b513      	push	{r0, r1, r4, lr}
        configASSERT( pxStaticQueue );
3400a372:	461c      	mov	r4, r3
3400a374:	b943      	cbnz	r3, 3400a388 <xQueueGenericCreateStatic+0x18>
3400a376:	f001 fca5 	bl	3400bcc4 <ulSetInterruptMask>
3400a37a:	f240 1177 	movw	r1, #375	@ 0x177
3400a37e:	4b17      	ldr	r3, [pc, #92]	@ (3400a3dc <xQueueGenericCreateStatic+0x6c>)
3400a380:	4a17      	ldr	r2, [pc, #92]	@ (3400a3e0 <xQueueGenericCreateStatic+0x70>)
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
3400a382:	4818      	ldr	r0, [pc, #96]	@ (3400a3e4 <xQueueGenericCreateStatic+0x74>)
3400a384:	f014 ff1e 	bl	3401f1c4 <__assert_func>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
3400a388:	b108      	cbz	r0, 3400a38e <xQueueGenericCreateStatic+0x1e>
            ( pxStaticQueue != NULL ) &&
3400a38a:	b13a      	cbz	r2, 3400a39c <xQueueGenericCreateStatic+0x2c>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
3400a38c:	b941      	cbnz	r1, 3400a3a0 <xQueueGenericCreateStatic+0x30>
            configASSERT( pxNewQueue );
3400a38e:	f001 fc99 	bl	3400bcc4 <ulSetInterruptMask>
3400a392:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
3400a396:	4b11      	ldr	r3, [pc, #68]	@ (3400a3dc <xQueueGenericCreateStatic+0x6c>)
3400a398:	4a11      	ldr	r2, [pc, #68]	@ (3400a3e0 <xQueueGenericCreateStatic+0x70>)
3400a39a:	e7f2      	b.n	3400a382 <xQueueGenericCreateStatic+0x12>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
3400a39c:	2900      	cmp	r1, #0
3400a39e:	d1f6      	bne.n	3400a38e <xQueueGenericCreateStatic+0x1e>
                volatile size_t xSize = sizeof( StaticQueue_t );
3400a3a0:	2350      	movs	r3, #80	@ 0x50
3400a3a2:	9301      	str	r3, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
3400a3a4:	9b01      	ldr	r3, [sp, #4]
3400a3a6:	2b50      	cmp	r3, #80	@ 0x50
3400a3a8:	d006      	beq.n	3400a3b8 <xQueueGenericCreateStatic+0x48>
3400a3aa:	f001 fc8b 	bl	3400bcc4 <ulSetInterruptMask>
3400a3ae:	f240 1189 	movw	r1, #393	@ 0x189
3400a3b2:	4b0a      	ldr	r3, [pc, #40]	@ (3400a3dc <xQueueGenericCreateStatic+0x6c>)
3400a3b4:	4a0a      	ldr	r2, [pc, #40]	@ (3400a3e0 <xQueueGenericCreateStatic+0x70>)
3400a3b6:	e7e4      	b.n	3400a382 <xQueueGenericCreateStatic+0x12>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
3400a3b8:	2900      	cmp	r1, #0
3400a3ba:	bf08      	it	eq
3400a3bc:	4622      	moveq	r2, r4
    pxNewQueue->uxItemSize = uxItemSize;
3400a3be:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
3400a3c2:	6022      	str	r2, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
3400a3c4:	2101      	movs	r1, #1
3400a3c6:	4620      	mov	r0, r4
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
3400a3c8:	9b01      	ldr	r3, [sp, #4]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
3400a3ca:	f7ff ff87 	bl	3400a2dc <xQueueGenericReset>
    }
3400a3ce:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
3400a3d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
3400a3d4:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    }
3400a3d8:	b002      	add	sp, #8
3400a3da:	bd10      	pop	{r4, pc}
3400a3dc:	34026d17 	.word	0x34026d17
3400a3e0:	34033e91 	.word	0x34033e91
3400a3e4:	34027c8c 	.word	0x34027c8c

3400a3e8 <xQueueCreateCountingSemaphoreStatic>:
    {
3400a3e8:	b513      	push	{r0, r1, r4, lr}
3400a3ea:	4613      	mov	r3, r2
3400a3ec:	460c      	mov	r4, r1
        if( ( uxMaxCount != 0 ) &&
3400a3ee:	b158      	cbz	r0, 3400a408 <xQueueCreateCountingSemaphoreStatic+0x20>
3400a3f0:	4288      	cmp	r0, r1
3400a3f2:	d309      	bcc.n	3400a408 <xQueueCreateCountingSemaphoreStatic+0x20>
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
3400a3f4:	2202      	movs	r2, #2
3400a3f6:	9200      	str	r2, [sp, #0]
3400a3f8:	2200      	movs	r2, #0
3400a3fa:	4611      	mov	r1, r2
3400a3fc:	f7ff ffb8 	bl	3400a370 <xQueueGenericCreateStatic>
            if( xHandle != NULL )
3400a400:	b100      	cbz	r0, 3400a404 <xQueueCreateCountingSemaphoreStatic+0x1c>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
3400a402:	6384      	str	r4, [r0, #56]	@ 0x38
    }
3400a404:	b002      	add	sp, #8
3400a406:	bd10      	pop	{r4, pc}
            configASSERT( xHandle );
3400a408:	f001 fc5c 	bl	3400bcc4 <ulSetInterruptMask>
3400a40c:	f240 3147 	movw	r1, #839	@ 0x347
3400a410:	4b02      	ldr	r3, [pc, #8]	@ (3400a41c <xQueueCreateCountingSemaphoreStatic+0x34>)
3400a412:	4a03      	ldr	r2, [pc, #12]	@ (3400a420 <xQueueCreateCountingSemaphoreStatic+0x38>)
3400a414:	4803      	ldr	r0, [pc, #12]	@ (3400a424 <xQueueCreateCountingSemaphoreStatic+0x3c>)
3400a416:	f014 fed5 	bl	3401f1c4 <__assert_func>
3400a41a:	bf00      	nop
3400a41c:	34026d17 	.word	0x34026d17
3400a420:	34033e6d 	.word	0x34033e6d
3400a424:	34027c8c 	.word	0x34027c8c

3400a428 <xQueueGenericSend>:
{
3400a428:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400a42c:	460f      	mov	r7, r1
3400a42e:	461e      	mov	r6, r3
    configASSERT( pxQueue );
3400a430:	4604      	mov	r4, r0
{
3400a432:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
3400a434:	b940      	cbnz	r0, 3400a448 <xQueueGenericSend+0x20>
3400a436:	f001 fc45 	bl	3400bcc4 <ulSetInterruptMask>
3400a43a:	f240 317d 	movw	r1, #893	@ 0x37d
3400a43e:	4b48      	ldr	r3, [pc, #288]	@ (3400a560 <xQueueGenericSend+0x138>)
3400a440:	4a48      	ldr	r2, [pc, #288]	@ (3400a564 <xQueueGenericSend+0x13c>)
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
3400a442:	4849      	ldr	r0, [pc, #292]	@ (3400a568 <xQueueGenericSend+0x140>)
3400a444:	f014 febe 	bl	3401f1c4 <__assert_func>
3400a448:	b941      	cbnz	r1, 3400a45c <xQueueGenericSend+0x34>
3400a44a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a44c:	b133      	cbz	r3, 3400a45c <xQueueGenericSend+0x34>
3400a44e:	f001 fc39 	bl	3400bcc4 <ulSetInterruptMask>
3400a452:	f240 317e 	movw	r1, #894	@ 0x37e
3400a456:	4b42      	ldr	r3, [pc, #264]	@ (3400a560 <xQueueGenericSend+0x138>)
3400a458:	4a42      	ldr	r2, [pc, #264]	@ (3400a564 <xQueueGenericSend+0x13c>)
3400a45a:	e7f2      	b.n	3400a442 <xQueueGenericSend+0x1a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
3400a45c:	2e02      	cmp	r6, #2
3400a45e:	d109      	bne.n	3400a474 <xQueueGenericSend+0x4c>
3400a460:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a462:	2b01      	cmp	r3, #1
3400a464:	d006      	beq.n	3400a474 <xQueueGenericSend+0x4c>
3400a466:	f001 fc2d 	bl	3400bcc4 <ulSetInterruptMask>
3400a46a:	f240 317f 	movw	r1, #895	@ 0x37f
3400a46e:	4b3c      	ldr	r3, [pc, #240]	@ (3400a560 <xQueueGenericSend+0x138>)
3400a470:	4a3c      	ldr	r2, [pc, #240]	@ (3400a564 <xQueueGenericSend+0x13c>)
3400a472:	e7e6      	b.n	3400a442 <xQueueGenericSend+0x1a>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a474:	f000 ffc4 	bl	3400b400 <xTaskGetSchedulerState>
3400a478:	4605      	mov	r5, r0
3400a47a:	b1e0      	cbz	r0, 3400a4b6 <xQueueGenericSend+0x8e>
3400a47c:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
3400a47e:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
3400a482:	f001 fa9b 	bl	3400b9bc <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
3400a486:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3400a488:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a48a:	429a      	cmp	r2, r3
3400a48c:	d21d      	bcs.n	3400a4ca <xQueueGenericSend+0xa2>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
3400a48e:	4632      	mov	r2, r6
3400a490:	4639      	mov	r1, r7
3400a492:	4620      	mov	r0, r4
3400a494:	f7ff fea3 	bl	3400a1de <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
3400a498:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a49a:	b11b      	cbz	r3, 3400a4a4 <xQueueGenericSend+0x7c>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a49c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a4a0:	f000 fef2 	bl	3400b288 <xTaskRemoveFromEventList>
3400a4a4:	b108      	cbz	r0, 3400a4aa <xQueueGenericSend+0x82>
                            queueYIELD_IF_USING_PREEMPTION();
3400a4a6:	f001 fa7d 	bl	3400b9a4 <vPortYield>
                taskEXIT_CRITICAL();
3400a4aa:	f001 fa95 	bl	3400b9d8 <vPortExitCritical>
                return pdPASS;
3400a4ae:	2001      	movs	r0, #1
}
3400a4b0:	b004      	add	sp, #16
3400a4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a4b6:	9b01      	ldr	r3, [sp, #4]
3400a4b8:	2b00      	cmp	r3, #0
3400a4ba:	d0e0      	beq.n	3400a47e <xQueueGenericSend+0x56>
3400a4bc:	f001 fc02 	bl	3400bcc4 <ulSetInterruptMask>
3400a4c0:	f240 3182 	movw	r1, #898	@ 0x382
3400a4c4:	4b26      	ldr	r3, [pc, #152]	@ (3400a560 <xQueueGenericSend+0x138>)
3400a4c6:	4a27      	ldr	r2, [pc, #156]	@ (3400a564 <xQueueGenericSend+0x13c>)
3400a4c8:	e7bb      	b.n	3400a442 <xQueueGenericSend+0x1a>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
3400a4ca:	2e02      	cmp	r6, #2
3400a4cc:	d0df      	beq.n	3400a48e <xQueueGenericSend+0x66>
                if( xTicksToWait == ( TickType_t ) 0 )
3400a4ce:	9b01      	ldr	r3, [sp, #4]
3400a4d0:	b91b      	cbnz	r3, 3400a4da <xQueueGenericSend+0xb2>
                    taskEXIT_CRITICAL();
3400a4d2:	f001 fa81 	bl	3400b9d8 <vPortExitCritical>
                    return errQUEUE_FULL;
3400a4d6:	2000      	movs	r0, #0
3400a4d8:	e7ea      	b.n	3400a4b0 <xQueueGenericSend+0x88>
                else if( xEntryTimeSet == pdFALSE )
3400a4da:	b915      	cbnz	r5, 3400a4e2 <xQueueGenericSend+0xba>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a4dc:	a802      	add	r0, sp, #8
3400a4de:	f000 ff3d 	bl	3400b35c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a4e2:	f001 fa79 	bl	3400b9d8 <vPortExitCritical>
        vTaskSuspendAll();
3400a4e6:	f000 fc93 	bl	3400ae10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a4ea:	f001 fa67 	bl	3400b9bc <vPortEnterCritical>
3400a4ee:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a4f2:	2bff      	cmp	r3, #255	@ 0xff
3400a4f4:	bf08      	it	eq
3400a4f6:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
3400a4fa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a4fe:	2bff      	cmp	r3, #255	@ 0xff
3400a500:	bf08      	it	eq
3400a502:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
3400a506:	f001 fa67 	bl	3400b9d8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a50a:	a901      	add	r1, sp, #4
3400a50c:	a802      	add	r0, sp, #8
3400a50e:	f000 ff31 	bl	3400b374 <xTaskCheckForTimeOut>
3400a512:	b9f0      	cbnz	r0, 3400a552 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
3400a514:	f001 fa52 	bl	3400b9bc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
3400a518:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3400a51a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3400a51c:	429a      	cmp	r2, r3
3400a51e:	d10f      	bne.n	3400a540 <xQueueGenericSend+0x118>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
3400a520:	f001 fa5a 	bl	3400b9d8 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
3400a524:	9901      	ldr	r1, [sp, #4]
3400a526:	f104 0010 	add.w	r0, r4, #16
3400a52a:	f000 fe59 	bl	3400b1e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a52e:	4620      	mov	r0, r4
3400a530:	f7ff fe9e 	bl	3400a270 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a534:	f000 fd3c 	bl	3400afb0 <xTaskResumeAll>
3400a538:	b948      	cbnz	r0, 3400a54e <xQueueGenericSend+0x126>
                    portYIELD_WITHIN_API();
3400a53a:	f001 fa33 	bl	3400b9a4 <vPortYield>
3400a53e:	e006      	b.n	3400a54e <xQueueGenericSend+0x126>
    taskEXIT_CRITICAL();
3400a540:	f001 fa4a 	bl	3400b9d8 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
3400a544:	4620      	mov	r0, r4
3400a546:	f7ff fe93 	bl	3400a270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a54a:	f000 fd31 	bl	3400afb0 <xTaskResumeAll>
3400a54e:	2501      	movs	r5, #1
3400a550:	e797      	b.n	3400a482 <xQueueGenericSend+0x5a>
            prvUnlockQueue( pxQueue );
3400a552:	4620      	mov	r0, r4
3400a554:	f7ff fe8c 	bl	3400a270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a558:	f000 fd2a 	bl	3400afb0 <xTaskResumeAll>
            return errQUEUE_FULL;
3400a55c:	e7bb      	b.n	3400a4d6 <xQueueGenericSend+0xae>
3400a55e:	bf00      	nop
3400a560:	34026d17 	.word	0x34026d17
3400a564:	34033e5b 	.word	0x34033e5b
3400a568:	34027c8c 	.word	0x34027c8c

3400a56c <xQueueCreateMutexStatic>:
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
3400a56c:	2200      	movs	r2, #0
    {
3400a56e:	b513      	push	{r0, r1, r4, lr}
3400a570:	460b      	mov	r3, r1
        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
3400a572:	9000      	str	r0, [sp, #0]
3400a574:	4611      	mov	r1, r2
3400a576:	2001      	movs	r0, #1
3400a578:	f7ff fefa 	bl	3400a370 <xQueueGenericCreateStatic>
        if( pxNewQueue != NULL )
3400a57c:	4604      	mov	r4, r0
3400a57e:	b138      	cbz	r0, 3400a590 <xQueueCreateMutexStatic+0x24>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
3400a580:	2300      	movs	r3, #0
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
3400a582:	461a      	mov	r2, r3
3400a584:	4619      	mov	r1, r3
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
3400a586:	6083      	str	r3, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
3400a588:	6003      	str	r3, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
3400a58a:	60c3      	str	r3, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
3400a58c:	f7ff ff4c 	bl	3400a428 <xQueueGenericSend>
    }
3400a590:	4620      	mov	r0, r4
3400a592:	b002      	add	sp, #8
3400a594:	bd10      	pop	{r4, pc}
	...

3400a598 <xQueueGiveFromISR>:
{
3400a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400a59a:	460e      	mov	r6, r1
    configASSERT( pxQueue );
3400a59c:	4604      	mov	r4, r0
3400a59e:	b940      	cbnz	r0, 3400a5b2 <xQueueGiveFromISR+0x1a>
3400a5a0:	f001 fb90 	bl	3400bcc4 <ulSetInterruptMask>
3400a5a4:	f240 41fa 	movw	r1, #1274	@ 0x4fa
3400a5a8:	4b26      	ldr	r3, [pc, #152]	@ (3400a644 <xQueueGiveFromISR+0xac>)
3400a5aa:	4a27      	ldr	r2, [pc, #156]	@ (3400a648 <xQueueGiveFromISR+0xb0>)
    configASSERT( pxQueue->uxItemSize == 0 );
3400a5ac:	4827      	ldr	r0, [pc, #156]	@ (3400a64c <xQueueGiveFromISR+0xb4>)
3400a5ae:	f014 fe09 	bl	3401f1c4 <__assert_func>
3400a5b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a5b4:	b133      	cbz	r3, 3400a5c4 <xQueueGiveFromISR+0x2c>
3400a5b6:	f001 fb85 	bl	3400bcc4 <ulSetInterruptMask>
3400a5ba:	f240 41fe 	movw	r1, #1278	@ 0x4fe
3400a5be:	4b21      	ldr	r3, [pc, #132]	@ (3400a644 <xQueueGiveFromISR+0xac>)
3400a5c0:	4a21      	ldr	r2, [pc, #132]	@ (3400a648 <xQueueGiveFromISR+0xb0>)
3400a5c2:	e7f3      	b.n	3400a5ac <xQueueGiveFromISR+0x14>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
3400a5c4:	6803      	ldr	r3, [r0, #0]
3400a5c6:	b943      	cbnz	r3, 3400a5da <xQueueGiveFromISR+0x42>
3400a5c8:	6883      	ldr	r3, [r0, #8]
3400a5ca:	b133      	cbz	r3, 3400a5da <xQueueGiveFromISR+0x42>
3400a5cc:	f001 fb7a 	bl	3400bcc4 <ulSetInterruptMask>
3400a5d0:	f240 5103 	movw	r1, #1283	@ 0x503
3400a5d4:	4b1b      	ldr	r3, [pc, #108]	@ (3400a644 <xQueueGiveFromISR+0xac>)
3400a5d6:	4a1c      	ldr	r2, [pc, #112]	@ (3400a648 <xQueueGiveFromISR+0xb0>)
3400a5d8:	e7e8      	b.n	3400a5ac <xQueueGiveFromISR+0x14>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
3400a5da:	f001 fb09 	bl	3400bbf0 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
3400a5de:	f001 fb71 	bl	3400bcc4 <ulSetInterruptMask>
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
3400a5e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
3400a5e4:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
3400a5e6:	4607      	mov	r7, r0
        if( uxMessagesWaiting < pxQueue->uxLength )
3400a5e8:	429a      	cmp	r2, r3
3400a5ea:	d928      	bls.n	3400a63e <xQueueGiveFromISR+0xa6>
            const int8_t cTxLock = pxQueue->cTxLock;
3400a5ec:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
3400a5f0:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
3400a5f2:	2aff      	cmp	r2, #255	@ 0xff
            const int8_t cTxLock = pxQueue->cTxLock;
3400a5f4:	b255      	sxtb	r5, r2
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
3400a5f6:	63a3      	str	r3, [r4, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
3400a5f8:	d10f      	bne.n	3400a61a <xQueueGiveFromISR+0x82>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
3400a5fa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3400a5fc:	b13b      	cbz	r3, 3400a60e <xQueueGiveFromISR+0x76>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
3400a5fe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a602:	f000 fe41 	bl	3400b288 <xTaskRemoveFromEventList>
3400a606:	b110      	cbz	r0, 3400a60e <xQueueGiveFromISR+0x76>
                            if( pxHigherPriorityTaskWoken != NULL )
3400a608:	b10e      	cbz	r6, 3400a60e <xQueueGiveFromISR+0x76>
                                *pxHigherPriorityTaskWoken = pdTRUE;
3400a60a:	2301      	movs	r3, #1
3400a60c:	6033      	str	r3, [r6, #0]
            xReturn = pdPASS;
3400a60e:	2401      	movs	r4, #1
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
3400a610:	4638      	mov	r0, r7
3400a612:	f001 fb62 	bl	3400bcda <vClearInterruptMask>
}
3400a616:	4620      	mov	r0, r4
3400a618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                prvIncrementQueueTxLock( pxQueue, cTxLock );
3400a61a:	f000 fc07 	bl	3400ae2c <uxTaskGetNumberOfTasks>
3400a61e:	4285      	cmp	r5, r0
3400a620:	d2f5      	bcs.n	3400a60e <xQueueGiveFromISR+0x76>
3400a622:	2d7f      	cmp	r5, #127	@ 0x7f
3400a624:	d106      	bne.n	3400a634 <xQueueGiveFromISR+0x9c>
3400a626:	f001 fb4d 	bl	3400bcc4 <ulSetInterruptMask>
3400a62a:	f240 5182 	movw	r1, #1410	@ 0x582
3400a62e:	4b05      	ldr	r3, [pc, #20]	@ (3400a644 <xQueueGiveFromISR+0xac>)
3400a630:	4a05      	ldr	r2, [pc, #20]	@ (3400a648 <xQueueGiveFromISR+0xb0>)
3400a632:	e7bb      	b.n	3400a5ac <xQueueGiveFromISR+0x14>
3400a634:	3501      	adds	r5, #1
3400a636:	b26d      	sxtb	r5, r5
3400a638:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
3400a63c:	e7e7      	b.n	3400a60e <xQueueGiveFromISR+0x76>
            xReturn = errQUEUE_FULL;
3400a63e:	2400      	movs	r4, #0
3400a640:	e7e6      	b.n	3400a610 <xQueueGiveFromISR+0x78>
3400a642:	bf00      	nop
3400a644:	34026d17 	.word	0x34026d17
3400a648:	34033e49 	.word	0x34033e49
3400a64c:	34027c8c 	.word	0x34027c8c

3400a650 <xQueueReceive>:
{
3400a650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400a654:	460e      	mov	r6, r1
    configASSERT( ( pxQueue ) );
3400a656:	4604      	mov	r4, r0
{
3400a658:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
3400a65a:	b940      	cbnz	r0, 3400a66e <xQueueReceive+0x1e>
3400a65c:	f001 fb32 	bl	3400bcc4 <ulSetInterruptMask>
3400a660:	f240 519c 	movw	r1, #1436	@ 0x59c
3400a664:	4b3f      	ldr	r3, [pc, #252]	@ (3400a764 <xQueueReceive+0x114>)
3400a666:	4a40      	ldr	r2, [pc, #256]	@ (3400a768 <xQueueReceive+0x118>)
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
3400a668:	4840      	ldr	r0, [pc, #256]	@ (3400a76c <xQueueReceive+0x11c>)
3400a66a:	f014 fdab 	bl	3401f1c4 <__assert_func>
3400a66e:	b941      	cbnz	r1, 3400a682 <xQueueReceive+0x32>
3400a670:	6c03      	ldr	r3, [r0, #64]	@ 0x40
3400a672:	b133      	cbz	r3, 3400a682 <xQueueReceive+0x32>
3400a674:	f001 fb26 	bl	3400bcc4 <ulSetInterruptMask>
3400a678:	f44f 61b4 	mov.w	r1, #1440	@ 0x5a0
3400a67c:	4b39      	ldr	r3, [pc, #228]	@ (3400a764 <xQueueReceive+0x114>)
3400a67e:	4a3a      	ldr	r2, [pc, #232]	@ (3400a768 <xQueueReceive+0x118>)
3400a680:	e7f2      	b.n	3400a668 <xQueueReceive+0x18>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a682:	f000 febd 	bl	3400b400 <xTaskGetSchedulerState>
3400a686:	4605      	mov	r5, r0
3400a688:	b1d8      	cbz	r0, 3400a6c2 <xQueueReceive+0x72>
3400a68a:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
3400a68c:	f04f 0800 	mov.w	r8, #0
        taskENTER_CRITICAL();
3400a690:	f001 f994 	bl	3400b9bc <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
3400a694:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
3400a696:	b1f7      	cbz	r7, 3400a6d6 <xQueueReceive+0x86>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
3400a698:	4631      	mov	r1, r6
3400a69a:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
3400a69c:	3f01      	subs	r7, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
3400a69e:	f7ff fdd1 	bl	3400a244 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
3400a6a2:	63a7      	str	r7, [r4, #56]	@ 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a6a4:	6923      	ldr	r3, [r4, #16]
3400a6a6:	b133      	cbz	r3, 3400a6b6 <xQueueReceive+0x66>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a6a8:	f104 0010 	add.w	r0, r4, #16
3400a6ac:	f000 fdec 	bl	3400b288 <xTaskRemoveFromEventList>
3400a6b0:	b108      	cbz	r0, 3400a6b6 <xQueueReceive+0x66>
                        queueYIELD_IF_USING_PREEMPTION();
3400a6b2:	f001 f977 	bl	3400b9a4 <vPortYield>
                taskEXIT_CRITICAL();
3400a6b6:	f001 f98f 	bl	3400b9d8 <vPortExitCritical>
                return pdPASS;
3400a6ba:	2001      	movs	r0, #1
}
3400a6bc:	b004      	add	sp, #16
3400a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a6c2:	9b01      	ldr	r3, [sp, #4]
3400a6c4:	2b00      	cmp	r3, #0
3400a6c6:	d0e1      	beq.n	3400a68c <xQueueReceive+0x3c>
3400a6c8:	f001 fafc 	bl	3400bcc4 <ulSetInterruptMask>
3400a6cc:	f240 51a5 	movw	r1, #1445	@ 0x5a5
3400a6d0:	4b24      	ldr	r3, [pc, #144]	@ (3400a764 <xQueueReceive+0x114>)
3400a6d2:	4a25      	ldr	r2, [pc, #148]	@ (3400a768 <xQueueReceive+0x118>)
3400a6d4:	e7c8      	b.n	3400a668 <xQueueReceive+0x18>
                if( xTicksToWait == ( TickType_t ) 0 )
3400a6d6:	9b01      	ldr	r3, [sp, #4]
3400a6d8:	b91b      	cbnz	r3, 3400a6e2 <xQueueReceive+0x92>
                    taskEXIT_CRITICAL();
3400a6da:	f001 f97d 	bl	3400b9d8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
3400a6de:	2000      	movs	r0, #0
3400a6e0:	e7ec      	b.n	3400a6bc <xQueueReceive+0x6c>
                else if( xEntryTimeSet == pdFALSE )
3400a6e2:	b915      	cbnz	r5, 3400a6ea <xQueueReceive+0x9a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a6e4:	a802      	add	r0, sp, #8
3400a6e6:	f000 fe39 	bl	3400b35c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a6ea:	f001 f975 	bl	3400b9d8 <vPortExitCritical>
        vTaskSuspendAll();
3400a6ee:	f000 fb8f 	bl	3400ae10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a6f2:	f001 f963 	bl	3400b9bc <vPortEnterCritical>
3400a6f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a6fa:	2bff      	cmp	r3, #255	@ 0xff
3400a6fc:	bf08      	it	eq
3400a6fe:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
3400a702:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a706:	2bff      	cmp	r3, #255	@ 0xff
3400a708:	bf08      	it	eq
3400a70a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
3400a70e:	f001 f963 	bl	3400b9d8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a712:	a901      	add	r1, sp, #4
3400a714:	a802      	add	r0, sp, #8
3400a716:	f000 fe2d 	bl	3400b374 <xTaskCheckForTimeOut>
3400a71a:	b9c0      	cbnz	r0, 3400a74e <xQueueReceive+0xfe>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a71c:	4620      	mov	r0, r4
3400a71e:	f7ff fd53 	bl	3400a1c8 <prvIsQueueEmpty>
3400a722:	b170      	cbz	r0, 3400a742 <xQueueReceive+0xf2>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
3400a724:	9901      	ldr	r1, [sp, #4]
3400a726:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a72a:	f000 fd59 	bl	3400b1e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a72e:	4620      	mov	r0, r4
3400a730:	f7ff fd9e 	bl	3400a270 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a734:	f000 fc3c 	bl	3400afb0 <xTaskResumeAll>
3400a738:	b908      	cbnz	r0, 3400a73e <xQueueReceive+0xee>
                    portYIELD_WITHIN_API();
3400a73a:	f001 f933 	bl	3400b9a4 <vPortYield>
3400a73e:	2501      	movs	r5, #1
3400a740:	e7a6      	b.n	3400a690 <xQueueReceive+0x40>
                prvUnlockQueue( pxQueue );
3400a742:	4620      	mov	r0, r4
3400a744:	f7ff fd94 	bl	3400a270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a748:	f000 fc32 	bl	3400afb0 <xTaskResumeAll>
3400a74c:	e7f7      	b.n	3400a73e <xQueueReceive+0xee>
            prvUnlockQueue( pxQueue );
3400a74e:	4620      	mov	r0, r4
3400a750:	f7ff fd8e 	bl	3400a270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a754:	f000 fc2c 	bl	3400afb0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a758:	4620      	mov	r0, r4
3400a75a:	f7ff fd35 	bl	3400a1c8 <prvIsQueueEmpty>
3400a75e:	2800      	cmp	r0, #0
3400a760:	d0ed      	beq.n	3400a73e <xQueueReceive+0xee>
3400a762:	e7bc      	b.n	3400a6de <xQueueReceive+0x8e>
3400a764:	34026d17 	.word	0x34026d17
3400a768:	34033e3b 	.word	0x34033e3b
3400a76c:	34027c8c 	.word	0x34027c8c

3400a770 <xQueueSemaphoreTake>:
{
3400a770:	b5f0      	push	{r4, r5, r6, r7, lr}
3400a772:	b085      	sub	sp, #20
    configASSERT( ( pxQueue ) );
3400a774:	4604      	mov	r4, r0
{
3400a776:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
3400a778:	b940      	cbnz	r0, 3400a78c <xQueueSemaphoreTake+0x1c>
3400a77a:	f001 faa3 	bl	3400bcc4 <ulSetInterruptMask>
3400a77e:	f240 612e 	movw	r1, #1582	@ 0x62e
3400a782:	4b4b      	ldr	r3, [pc, #300]	@ (3400a8b0 <xQueueSemaphoreTake+0x140>)
3400a784:	4a4b      	ldr	r2, [pc, #300]	@ (3400a8b4 <xQueueSemaphoreTake+0x144>)
    configASSERT( pxQueue->uxItemSize == 0 );
3400a786:	484c      	ldr	r0, [pc, #304]	@ (3400a8b8 <xQueueSemaphoreTake+0x148>)
3400a788:	f014 fd1c 	bl	3401f1c4 <__assert_func>
3400a78c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
3400a78e:	b135      	cbz	r5, 3400a79e <xQueueSemaphoreTake+0x2e>
3400a790:	f001 fa98 	bl	3400bcc4 <ulSetInterruptMask>
3400a794:	f240 6132 	movw	r1, #1586	@ 0x632
3400a798:	4b45      	ldr	r3, [pc, #276]	@ (3400a8b0 <xQueueSemaphoreTake+0x140>)
3400a79a:	4a46      	ldr	r2, [pc, #280]	@ (3400a8b4 <xQueueSemaphoreTake+0x144>)
3400a79c:	e7f3      	b.n	3400a786 <xQueueSemaphoreTake+0x16>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a79e:	f000 fe2f 	bl	3400b400 <xTaskGetSchedulerState>
3400a7a2:	4606      	mov	r6, r0
3400a7a4:	b1d0      	cbz	r0, 3400a7dc <xQueueSemaphoreTake+0x6c>
3400a7a6:	462e      	mov	r6, r5
        prvLockQueue( pxQueue );
3400a7a8:	2700      	movs	r7, #0
        taskENTER_CRITICAL();
3400a7aa:	f001 f907 	bl	3400b9bc <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
3400a7ae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
3400a7b0:	b1fb      	cbz	r3, 3400a7f2 <xQueueSemaphoreTake+0x82>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
3400a7b2:	3b01      	subs	r3, #1
3400a7b4:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a7b6:	6823      	ldr	r3, [r4, #0]
3400a7b8:	b913      	cbnz	r3, 3400a7c0 <xQueueSemaphoreTake+0x50>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
3400a7ba:	f000 ff1b 	bl	3400b5f4 <pvTaskIncrementMutexHeldCount>
3400a7be:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
3400a7c0:	6923      	ldr	r3, [r4, #16]
3400a7c2:	b133      	cbz	r3, 3400a7d2 <xQueueSemaphoreTake+0x62>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
3400a7c4:	f104 0010 	add.w	r0, r4, #16
3400a7c8:	f000 fd5e 	bl	3400b288 <xTaskRemoveFromEventList>
3400a7cc:	b108      	cbz	r0, 3400a7d2 <xQueueSemaphoreTake+0x62>
                        queueYIELD_IF_USING_PREEMPTION();
3400a7ce:	f001 f8e9 	bl	3400b9a4 <vPortYield>
                taskEXIT_CRITICAL();
3400a7d2:	f001 f901 	bl	3400b9d8 <vPortExitCritical>
                return pdPASS;
3400a7d6:	2001      	movs	r0, #1
}
3400a7d8:	b005      	add	sp, #20
3400a7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
3400a7dc:	9b01      	ldr	r3, [sp, #4]
3400a7de:	4605      	mov	r5, r0
3400a7e0:	2b00      	cmp	r3, #0
3400a7e2:	d0e1      	beq.n	3400a7a8 <xQueueSemaphoreTake+0x38>
3400a7e4:	f001 fa6e 	bl	3400bcc4 <ulSetInterruptMask>
3400a7e8:	f240 6137 	movw	r1, #1591	@ 0x637
3400a7ec:	4b30      	ldr	r3, [pc, #192]	@ (3400a8b0 <xQueueSemaphoreTake+0x140>)
3400a7ee:	4a31      	ldr	r2, [pc, #196]	@ (3400a8b4 <xQueueSemaphoreTake+0x144>)
3400a7f0:	e7c9      	b.n	3400a786 <xQueueSemaphoreTake+0x16>
                if( xTicksToWait == ( TickType_t ) 0 )
3400a7f2:	9b01      	ldr	r3, [sp, #4]
3400a7f4:	b91b      	cbnz	r3, 3400a7fe <xQueueSemaphoreTake+0x8e>
                        taskEXIT_CRITICAL();
3400a7f6:	f001 f8ef 	bl	3400b9d8 <vPortExitCritical>
                    return errQUEUE_EMPTY;
3400a7fa:	2000      	movs	r0, #0
3400a7fc:	e7ec      	b.n	3400a7d8 <xQueueSemaphoreTake+0x68>
                else if( xEntryTimeSet == pdFALSE )
3400a7fe:	b916      	cbnz	r6, 3400a806 <xQueueSemaphoreTake+0x96>
                    vTaskInternalSetTimeOutState( &xTimeOut );
3400a800:	a802      	add	r0, sp, #8
3400a802:	f000 fdab 	bl	3400b35c <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
3400a806:	f001 f8e7 	bl	3400b9d8 <vPortExitCritical>
        vTaskSuspendAll();
3400a80a:	f000 fb01 	bl	3400ae10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
3400a80e:	f001 f8d5 	bl	3400b9bc <vPortEnterCritical>
3400a812:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a816:	2bff      	cmp	r3, #255	@ 0xff
3400a818:	bf08      	it	eq
3400a81a:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
3400a81e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a822:	2bff      	cmp	r3, #255	@ 0xff
3400a824:	bf08      	it	eq
3400a826:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
3400a82a:	f001 f8d5 	bl	3400b9d8 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
3400a82e:	a901      	add	r1, sp, #4
3400a830:	a802      	add	r0, sp, #8
3400a832:	f000 fd9f 	bl	3400b374 <xTaskCheckForTimeOut>
3400a836:	bb10      	cbnz	r0, 3400a87e <xQueueSemaphoreTake+0x10e>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a838:	4620      	mov	r0, r4
3400a83a:	f7ff fcc5 	bl	3400a1c8 <prvIsQueueEmpty>
3400a83e:	b1c0      	cbz	r0, 3400a872 <xQueueSemaphoreTake+0x102>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
3400a840:	6823      	ldr	r3, [r4, #0]
3400a842:	b93b      	cbnz	r3, 3400a854 <xQueueSemaphoreTake+0xe4>
                        taskENTER_CRITICAL();
3400a844:	f001 f8ba 	bl	3400b9bc <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
3400a848:	68a0      	ldr	r0, [r4, #8]
3400a84a:	f000 fde9 	bl	3400b420 <xTaskPriorityInherit>
3400a84e:	4605      	mov	r5, r0
                        taskEXIT_CRITICAL();
3400a850:	f001 f8c2 	bl	3400b9d8 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
3400a854:	9901      	ldr	r1, [sp, #4]
3400a856:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a85a:	f000 fcc1 	bl	3400b1e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
3400a85e:	4620      	mov	r0, r4
3400a860:	f7ff fd06 	bl	3400a270 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
3400a864:	f000 fba4 	bl	3400afb0 <xTaskResumeAll>
3400a868:	b908      	cbnz	r0, 3400a86e <xQueueSemaphoreTake+0xfe>
                    portYIELD_WITHIN_API();
3400a86a:	f001 f89b 	bl	3400b9a4 <vPortYield>
3400a86e:	2601      	movs	r6, #1
3400a870:	e79b      	b.n	3400a7aa <xQueueSemaphoreTake+0x3a>
                prvUnlockQueue( pxQueue );
3400a872:	4620      	mov	r0, r4
3400a874:	f7ff fcfc 	bl	3400a270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
3400a878:	f000 fb9a 	bl	3400afb0 <xTaskResumeAll>
3400a87c:	e7f7      	b.n	3400a86e <xQueueSemaphoreTake+0xfe>
            prvUnlockQueue( pxQueue );
3400a87e:	4620      	mov	r0, r4
3400a880:	f7ff fcf6 	bl	3400a270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
3400a884:	f000 fb94 	bl	3400afb0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
3400a888:	4620      	mov	r0, r4
3400a88a:	f7ff fc9d 	bl	3400a1c8 <prvIsQueueEmpty>
3400a88e:	2800      	cmp	r0, #0
3400a890:	d0ed      	beq.n	3400a86e <xQueueSemaphoreTake+0xfe>
                    if( xInheritanceOccurred != pdFALSE )
3400a892:	2d00      	cmp	r5, #0
3400a894:	d0b1      	beq.n	3400a7fa <xQueueSemaphoreTake+0x8a>
                        taskENTER_CRITICAL();
3400a896:	f001 f891 	bl	3400b9bc <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
3400a89a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3400a89c:	b119      	cbz	r1, 3400a8a6 <xQueueSemaphoreTake+0x136>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
3400a89e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400a8a0:	6819      	ldr	r1, [r3, #0]
3400a8a2:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
3400a8a6:	68a0      	ldr	r0, [r4, #8]
3400a8a8:	f000 fe4e 	bl	3400b548 <vTaskPriorityDisinheritAfterTimeout>
3400a8ac:	e7a3      	b.n	3400a7f6 <xQueueSemaphoreTake+0x86>
3400a8ae:	bf00      	nop
3400a8b0:	34026d17 	.word	0x34026d17
3400a8b4:	34033e27 	.word	0x34033e27
3400a8b8:	34027c8c 	.word	0x34027c8c

3400a8bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
3400a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;

        configASSERT( xQueue );
3400a8be:	b940      	cbnz	r0, 3400a8d2 <vQueueAddToRegistry+0x16>
3400a8c0:	f001 fa00 	bl	3400bcc4 <ulSetInterruptMask>
3400a8c4:	f640 3115 	movw	r1, #2837	@ 0xb15
3400a8c8:	4b10      	ldr	r3, [pc, #64]	@ (3400a90c <vQueueAddToRegistry+0x50>)
3400a8ca:	4a11      	ldr	r2, [pc, #68]	@ (3400a910 <vQueueAddToRegistry+0x54>)
3400a8cc:	4811      	ldr	r0, [pc, #68]	@ (3400a914 <vQueueAddToRegistry+0x58>)
3400a8ce:	f014 fc79 	bl	3401f1c4 <__assert_func>

        if( pcQueueName != NULL )
3400a8d2:	b1c9      	cbz	r1, 3400a908 <vQueueAddToRegistry+0x4c>
        QueueRegistryItem_t * pxEntryToWrite = NULL;
3400a8d4:	2300      	movs	r3, #0
3400a8d6:	4a10      	ldr	r2, [pc, #64]	@ (3400a918 <vQueueAddToRegistry+0x5c>)
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a8d8:	461d      	mov	r5, r3
3400a8da:	4616      	mov	r6, r2
3400a8dc:	2408      	movs	r4, #8
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
3400a8de:	6857      	ldr	r7, [r2, #4]
3400a8e0:	4287      	cmp	r7, r0
3400a8e2:	d104      	bne.n	3400a8ee <vQueueAddToRegistry+0x32>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
3400a8e4:	eb06 03c5 	add.w	r3, r6, r5, lsl #3

        if( pxEntryToWrite != NULL )
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
            pxEntryToWrite->xHandle = xQueue;
3400a8e8:	e9c3 1000 	strd	r1, r0, [r3]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
3400a8ec:	e00c      	b.n	3400a908 <vQueueAddToRegistry+0x4c>
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
3400a8ee:	b91b      	cbnz	r3, 3400a8f8 <vQueueAddToRegistry+0x3c>
3400a8f0:	6817      	ldr	r7, [r2, #0]
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
3400a8f2:	2f00      	cmp	r7, #0
3400a8f4:	bf08      	it	eq
3400a8f6:	4613      	moveq	r3, r2
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a8f8:	3c01      	subs	r4, #1
3400a8fa:	f105 0501 	add.w	r5, r5, #1
3400a8fe:	f102 0208 	add.w	r2, r2, #8
3400a902:	d1ec      	bne.n	3400a8de <vQueueAddToRegistry+0x22>
        if( pxEntryToWrite != NULL )
3400a904:	2b00      	cmp	r3, #0
3400a906:	d1ef      	bne.n	3400a8e8 <vQueueAddToRegistry+0x2c>
    }
3400a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400a90a:	bf00      	nop
3400a90c:	34026d17 	.word	0x34026d17
3400a910:	34033e06 	.word	0x34033e06
3400a914:	34027c8c 	.word	0x34027c8c
3400a918:	3410e3f0 	.word	0x3410e3f0

3400a91c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
3400a91c:	b538      	push	{r3, r4, r5, lr}

        configASSERT( xQueue );

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a91e:	2300      	movs	r3, #0
        configASSERT( xQueue );
3400a920:	b168      	cbz	r0, 3400a93e <vQueueUnregisterQueue+0x22>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
3400a922:	2208      	movs	r2, #8
3400a924:	490d      	ldr	r1, [pc, #52]	@ (3400a95c <vQueueUnregisterQueue+0x40>)
3400a926:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
3400a92a:	00dc      	lsls	r4, r3, #3
3400a92c:	4285      	cmp	r5, r0
3400a92e:	d10f      	bne.n	3400a950 <vQueueUnregisterQueue+0x34>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
3400a930:	2100      	movs	r1, #0
3400a932:	4a0b      	ldr	r2, [pc, #44]	@ (3400a960 <vQueueUnregisterQueue+0x44>)
3400a934:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
3400a938:	4422      	add	r2, r4
3400a93a:	6051      	str	r1, [r2, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
3400a93c:	bd38      	pop	{r3, r4, r5, pc}
        configASSERT( xQueue );
3400a93e:	f001 f9c1 	bl	3400bcc4 <ulSetInterruptMask>
3400a942:	f640 3161 	movw	r1, #2913	@ 0xb61
3400a946:	4b07      	ldr	r3, [pc, #28]	@ (3400a964 <vQueueUnregisterQueue+0x48>)
3400a948:	4a07      	ldr	r2, [pc, #28]	@ (3400a968 <vQueueUnregisterQueue+0x4c>)
3400a94a:	4808      	ldr	r0, [pc, #32]	@ (3400a96c <vQueueUnregisterQueue+0x50>)
3400a94c:	f014 fc3a 	bl	3401f1c4 <__assert_func>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
3400a950:	3a01      	subs	r2, #1
3400a952:	f103 0301 	add.w	r3, r3, #1
3400a956:	d1e6      	bne.n	3400a926 <vQueueUnregisterQueue+0xa>
3400a958:	e7f0      	b.n	3400a93c <vQueueUnregisterQueue+0x20>
3400a95a:	bf00      	nop
3400a95c:	3410e3f4 	.word	0x3410e3f4
3400a960:	3410e3f0 	.word	0x3410e3f0
3400a964:	34026d17 	.word	0x34026d17
3400a968:	34033df0 	.word	0x34033df0
3400a96c:	34027c8c 	.word	0x34027c8c

3400a970 <vQueueDelete>:
{
3400a970:	b508      	push	{r3, lr}
    configASSERT( pxQueue );
3400a972:	b940      	cbnz	r0, 3400a986 <vQueueDelete+0x16>
3400a974:	f001 f9a6 	bl	3400bcc4 <ulSetInterruptMask>
3400a978:	f44f 6105 	mov.w	r1, #2128	@ 0x850
3400a97c:	4b04      	ldr	r3, [pc, #16]	@ (3400a990 <vQueueDelete+0x20>)
3400a97e:	4a05      	ldr	r2, [pc, #20]	@ (3400a994 <vQueueDelete+0x24>)
3400a980:	4805      	ldr	r0, [pc, #20]	@ (3400a998 <vQueueDelete+0x28>)
3400a982:	f014 fc1f 	bl	3401f1c4 <__assert_func>
}
3400a986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        vQueueUnregisterQueue( pxQueue );
3400a98a:	f7ff bfc7 	b.w	3400a91c <vQueueUnregisterQueue>
3400a98e:	bf00      	nop
3400a990:	34026d17 	.word	0x34026d17
3400a994:	34033e1a 	.word	0x34033e1a
3400a998:	34027c8c 	.word	0x34027c8c

3400a99c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
3400a99c:	b570      	push	{r4, r5, r6, lr}
3400a99e:	4604      	mov	r4, r0
3400a9a0:	460d      	mov	r5, r1
3400a9a2:	4616      	mov	r6, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
3400a9a4:	f001 f80a 	bl	3400b9bc <vPortEnterCritical>
3400a9a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
3400a9ac:	2bff      	cmp	r3, #255	@ 0xff
3400a9ae:	bf04      	itt	eq
3400a9b0:	2300      	moveq	r3, #0
3400a9b2:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
3400a9b6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
3400a9ba:	2bff      	cmp	r3, #255	@ 0xff
3400a9bc:	bf04      	itt	eq
3400a9be:	2300      	moveq	r3, #0
3400a9c0:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
3400a9c4:	f001 f808 	bl	3400b9d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
3400a9c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3400a9ca:	b92b      	cbnz	r3, 3400a9d8 <vQueueWaitForMessageRestricted+0x3c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
3400a9cc:	4632      	mov	r2, r6
3400a9ce:	4629      	mov	r1, r5
3400a9d0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
3400a9d4:	f000 fc24 	bl	3400b220 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
3400a9d8:	4620      	mov	r0, r4
    }
3400a9da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
3400a9de:	f7ff bc47 	b.w	3400a270 <prvUnlockQueue>
	...

3400a9e4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
3400a9e4:	b508      	push	{r3, lr}
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3400a9e6:	4c0e      	ldr	r4, [pc, #56]	@ (3400aa20 <prvIdleTask+0x3c>)
        {
            taskENTER_CRITICAL();
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400a9e8:	4e0e      	ldr	r6, [pc, #56]	@ (3400aa24 <prvIdleTask+0x40>)
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
                --uxCurrentNumberOfTasks;
3400a9ea:	4d0f      	ldr	r5, [pc, #60]	@ (3400aa28 <prvIdleTask+0x44>)
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3400a9ec:	6823      	ldr	r3, [r4, #0]
3400a9ee:	b933      	cbnz	r3, 3400a9fe <prvIdleTask+0x1a>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3400a9f0:	4b0e      	ldr	r3, [pc, #56]	@ (3400aa2c <prvIdleTask+0x48>)
3400a9f2:	681b      	ldr	r3, [r3, #0]
3400a9f4:	2b01      	cmp	r3, #1
3400a9f6:	d9f8      	bls.n	3400a9ea <prvIdleTask+0x6>
                taskYIELD();
3400a9f8:	f000 ffd4 	bl	3400b9a4 <vPortYield>
3400a9fc:	e7f5      	b.n	3400a9ea <prvIdleTask+0x6>
            taskENTER_CRITICAL();
3400a9fe:	f000 ffdd 	bl	3400b9bc <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400aa02:	68f3      	ldr	r3, [r6, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3400aa04:	68d8      	ldr	r0, [r3, #12]
3400aa06:	3004      	adds	r0, #4
3400aa08:	f7ff fbce 	bl	3400a1a8 <uxListRemove>
                --uxCurrentNumberOfTasks;
3400aa0c:	682b      	ldr	r3, [r5, #0]
3400aa0e:	3b01      	subs	r3, #1
3400aa10:	602b      	str	r3, [r5, #0]
                --uxDeletedTasksWaitingCleanUp;
3400aa12:	6823      	ldr	r3, [r4, #0]
3400aa14:	3b01      	subs	r3, #1
3400aa16:	6023      	str	r3, [r4, #0]
            }
            taskEXIT_CRITICAL();
3400aa18:	f000 ffde 	bl	3400b9d8 <vPortExitCritical>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
3400aa1c:	e7e6      	b.n	3400a9ec <prvIdleTask+0x8>
3400aa1e:	bf00      	nop
3400aa20:	3410e478 	.word	0x3410e478
3400aa24:	3410e47c 	.word	0x3410e47c
3400aa28:	3410e460 	.word	0x3410e460
3400aa2c:	3410e4d4 	.word	0x3410e4d4

3400aa30 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
3400aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400aa32:	4606      	mov	r6, r0
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
3400aa34:	4b1a      	ldr	r3, [pc, #104]	@ (3400aaa0 <prvAddCurrentTaskToDelayedList+0x70>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400aa36:	4c1b      	ldr	r4, [pc, #108]	@ (3400aaa4 <prvAddCurrentTaskToDelayedList+0x74>)
    const TickType_t xConstTickCount = xTickCount;
3400aa38:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400aa3a:	6820      	ldr	r0, [r4, #0]
{
3400aa3c:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400aa3e:	3004      	adds	r0, #4
3400aa40:	f7ff fbb2 	bl	3400a1a8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
3400aa44:	1c73      	adds	r3, r6, #1
3400aa46:	d113      	bne.n	3400aa70 <prvAddCurrentTaskToDelayedList+0x40>
3400aa48:	b197      	cbz	r7, 3400aa70 <prvAddCurrentTaskToDelayedList+0x40>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa4a:	4b17      	ldr	r3, [pc, #92]	@ (3400aaa8 <prvAddCurrentTaskToDelayedList+0x78>)
3400aa4c:	6821      	ldr	r1, [r4, #0]
3400aa4e:	685a      	ldr	r2, [r3, #4]
3400aa50:	608a      	str	r2, [r1, #8]
3400aa52:	6890      	ldr	r0, [r2, #8]
3400aa54:	6821      	ldr	r1, [r4, #0]
3400aa56:	60c8      	str	r0, [r1, #12]
3400aa58:	6821      	ldr	r1, [r4, #0]
3400aa5a:	3104      	adds	r1, #4
3400aa5c:	6041      	str	r1, [r0, #4]
3400aa5e:	6821      	ldr	r1, [r4, #0]
3400aa60:	3104      	adds	r1, #4
3400aa62:	6091      	str	r1, [r2, #8]
3400aa64:	6822      	ldr	r2, [r4, #0]
3400aa66:	6153      	str	r3, [r2, #20]
3400aa68:	681a      	ldr	r2, [r3, #0]
3400aa6a:	3201      	adds	r2, #1
3400aa6c:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
3400aa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
3400aa70:	6823      	ldr	r3, [r4, #0]
3400aa72:	19ad      	adds	r5, r5, r6
3400aa74:	605d      	str	r5, [r3, #4]
            if( xTimeToWake < xConstTickCount )
3400aa76:	d307      	bcc.n	3400aa88 <prvAddCurrentTaskToDelayedList+0x58>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa78:	4b0c      	ldr	r3, [pc, #48]	@ (3400aaac <prvAddCurrentTaskToDelayedList+0x7c>)
3400aa7a:	6818      	ldr	r0, [r3, #0]
3400aa7c:	6821      	ldr	r1, [r4, #0]
}
3400aa7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa82:	3104      	adds	r1, #4
3400aa84:	f7ff bb79 	b.w	3400a17a <vListInsert>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
3400aa88:	4b09      	ldr	r3, [pc, #36]	@ (3400aab0 <prvAddCurrentTaskToDelayedList+0x80>)
3400aa8a:	6818      	ldr	r0, [r3, #0]
3400aa8c:	6821      	ldr	r1, [r4, #0]
3400aa8e:	3104      	adds	r1, #4
3400aa90:	f7ff fb73 	bl	3400a17a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
3400aa94:	4b07      	ldr	r3, [pc, #28]	@ (3400aab4 <prvAddCurrentTaskToDelayedList+0x84>)
3400aa96:	681a      	ldr	r2, [r3, #0]
3400aa98:	42aa      	cmp	r2, r5
                    xNextTaskUnblockTime = xTimeToWake;
3400aa9a:	bf88      	it	hi
3400aa9c:	601d      	strhi	r5, [r3, #0]
}
3400aa9e:	e7e6      	b.n	3400aa6e <prvAddCurrentTaskToDelayedList+0x3e>
3400aaa0:	3410e45c 	.word	0x3410e45c
3400aaa4:	3410e934 	.word	0x3410e934
3400aaa8:	3410e464 	.word	0x3410e464
3400aaac:	3410e4a4 	.word	0x3410e4a4
3400aab0:	3410e4a8 	.word	0x3410e4a8
3400aab4:	3410e440 	.word	0x3410e440

3400aab8 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400aab8:	4a06      	ldr	r2, [pc, #24]	@ (3400aad4 <prvResetNextTaskUnblockTime+0x1c>)
3400aaba:	6813      	ldr	r3, [r2, #0]
3400aabc:	6819      	ldr	r1, [r3, #0]
3400aabe:	4b06      	ldr	r3, [pc, #24]	@ (3400aad8 <prvResetNextTaskUnblockTime+0x20>)
3400aac0:	b919      	cbnz	r1, 3400aaca <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
3400aac2:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
3400aac6:	601a      	str	r2, [r3, #0]
}
3400aac8:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
3400aaca:	6812      	ldr	r2, [r2, #0]
3400aacc:	68d2      	ldr	r2, [r2, #12]
3400aace:	6812      	ldr	r2, [r2, #0]
3400aad0:	e7f9      	b.n	3400aac6 <prvResetNextTaskUnblockTime+0xe>
3400aad2:	bf00      	nop
3400aad4:	3410e4a8 	.word	0x3410e4a8
3400aad8:	3410e440 	.word	0x3410e440

3400aadc <xTaskCreateStatic>:
    {
3400aadc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3400aae0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
3400aae2:	4607      	mov	r7, r0
3400aae4:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	@ 0x28
3400aae8:	460e      	mov	r6, r1
3400aaea:	4615      	mov	r5, r2
3400aaec:	4698      	mov	r8, r3
        configASSERT( puxStackBuffer != NULL );
3400aaee:	f1ba 0f00 	cmp.w	sl, #0
3400aaf2:	d108      	bne.n	3400ab06 <xTaskCreateStatic+0x2a>
3400aaf4:	f001 f8e6 	bl	3400bcc4 <ulSetInterruptMask>
3400aaf8:	f240 2143 	movw	r1, #579	@ 0x243
3400aafc:	4b60      	ldr	r3, [pc, #384]	@ (3400ac80 <xTaskCreateStatic+0x1a4>)
3400aafe:	4a61      	ldr	r2, [pc, #388]	@ (3400ac84 <xTaskCreateStatic+0x1a8>)
        configASSERT( pxTaskBuffer != NULL );
3400ab00:	4861      	ldr	r0, [pc, #388]	@ (3400ac88 <xTaskCreateStatic+0x1ac>)
3400ab02:	f014 fb5f 	bl	3401f1c4 <__assert_func>
3400ab06:	b934      	cbnz	r4, 3400ab16 <xTaskCreateStatic+0x3a>
3400ab08:	f001 f8dc 	bl	3400bcc4 <ulSetInterruptMask>
3400ab0c:	f44f 7111 	mov.w	r1, #580	@ 0x244
3400ab10:	4b5b      	ldr	r3, [pc, #364]	@ (3400ac80 <xTaskCreateStatic+0x1a4>)
3400ab12:	4a5c      	ldr	r2, [pc, #368]	@ (3400ac84 <xTaskCreateStatic+0x1a8>)
3400ab14:	e7f4      	b.n	3400ab00 <xTaskCreateStatic+0x24>
            volatile size_t xSize = sizeof( StaticTask_t );
3400ab16:	2360      	movs	r3, #96	@ 0x60
3400ab18:	9301      	str	r3, [sp, #4]
            configASSERT( xSize == sizeof( TCB_t ) );
3400ab1a:	9a01      	ldr	r2, [sp, #4]
3400ab1c:	429a      	cmp	r2, r3
3400ab1e:	d006      	beq.n	3400ab2e <xTaskCreateStatic+0x52>
3400ab20:	f001 f8d0 	bl	3400bcc4 <ulSetInterruptMask>
3400ab24:	f44f 7113 	mov.w	r1, #588	@ 0x24c
3400ab28:	4b55      	ldr	r3, [pc, #340]	@ (3400ac80 <xTaskCreateStatic+0x1a4>)
3400ab2a:	4a56      	ldr	r2, [pc, #344]	@ (3400ac84 <xTaskCreateStatic+0x1a8>)
3400ab2c:	e7e8      	b.n	3400ab00 <xTaskCreateStatic+0x24>
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400ab2e:	2100      	movs	r1, #0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400ab30:	00ad      	lsls	r5, r5, #2
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400ab32:	4620      	mov	r0, r4
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
3400ab34:	9b01      	ldr	r3, [sp, #4]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
3400ab36:	f015 fb8f 	bl	34020258 <memset>
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400ab3a:	462a      	mov	r2, r5
3400ab3c:	21a5      	movs	r1, #165	@ 0xa5
3400ab3e:	4650      	mov	r0, sl
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
3400ab40:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
3400ab44:	f015 fb88 	bl	34020258 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
3400ab48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3400ab4a:	3d04      	subs	r5, #4
3400ab4c:	441d      	add	r5, r3
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
3400ab4e:	f025 0507 	bic.w	r5, r5, #7
    if( pcName != NULL )
3400ab52:	b16e      	cbz	r6, 3400ab70 <xTaskCreateStatic+0x94>
3400ab54:	2310      	movs	r3, #16
3400ab56:	3e01      	subs	r6, #1
3400ab58:	f104 0233 	add.w	r2, r4, #51	@ 0x33
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
3400ab5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400ab60:	f802 1f01 	strb.w	r1, [r2, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
3400ab64:	b109      	cbz	r1, 3400ab6a <xTaskCreateStatic+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
3400ab66:	3b01      	subs	r3, #1
3400ab68:	d1f8      	bne.n	3400ab5c <xTaskCreateStatic+0x80>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
3400ab6a:	2300      	movs	r3, #0
3400ab6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
3400ab70:	f1b9 0f37 	cmp.w	r9, #55	@ 0x37
3400ab74:	d906      	bls.n	3400ab84 <xTaskCreateStatic+0xa8>
3400ab76:	f001 f8a5 	bl	3400bcc4 <ulSetInterruptMask>
3400ab7a:	f240 3196 	movw	r1, #918	@ 0x396
3400ab7e:	4b40      	ldr	r3, [pc, #256]	@ (3400ac80 <xTaskCreateStatic+0x1a4>)
3400ab80:	4a42      	ldr	r2, [pc, #264]	@ (3400ac8c <xTaskCreateStatic+0x1b0>)
3400ab82:	e7bd      	b.n	3400ab00 <xTaskCreateStatic+0x24>
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
3400ab84:	1d26      	adds	r6, r4, #4
3400ab86:	4630      	mov	r0, r6
    pxNewTCB->uxPriority = uxPriority;
3400ab88:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
3400ab8c:	f8c4 904c 	str.w	r9, [r4, #76]	@ 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
3400ab90:	f7ff fae5 	bl	3400a15e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
3400ab94:	f104 0018 	add.w	r0, r4, #24
3400ab98:	f7ff fae1 	bl	3400a15e <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400ab9c:	f1c9 0138 	rsb	r1, r9, #56	@ 0x38
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400aba0:	4643      	mov	r3, r8
3400aba2:	463a      	mov	r2, r7
3400aba4:	4628      	mov	r0, r5
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400aba6:	61a1      	str	r1, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
3400aba8:	6124      	str	r4, [r4, #16]
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400abaa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
3400abac:	6264      	str	r4, [r4, #36]	@ 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
3400abae:	f000 ff6d 	bl	3400ba8c <pxPortInitialiseStack>
3400abb2:	6020      	str	r0, [r4, #0]
    taskENTER_CRITICAL();
3400abb4:	f000 ff02 	bl	3400b9bc <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
3400abb8:	4b35      	ldr	r3, [pc, #212]	@ (3400ac90 <xTaskCreateStatic+0x1b4>)
        if( pxCurrentTCB == NULL )
3400abba:	4f36      	ldr	r7, [pc, #216]	@ (3400ac94 <xTaskCreateStatic+0x1b8>)
        uxCurrentNumberOfTasks++;
3400abbc:	681a      	ldr	r2, [r3, #0]
3400abbe:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 3400acbc <xTaskCreateStatic+0x1e0>
3400abc2:	3201      	adds	r2, #1
3400abc4:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
3400abc6:	683d      	ldr	r5, [r7, #0]
3400abc8:	2d00      	cmp	r5, #0
3400abca:	d14e      	bne.n	3400ac6a <xTaskCreateStatic+0x18e>
            pxCurrentTCB = pxNewTCB;
3400abcc:	603c      	str	r4, [r7, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
3400abce:	681b      	ldr	r3, [r3, #0]
3400abd0:	2b01      	cmp	r3, #1
3400abd2:	d11f      	bne.n	3400ac14 <xTaskCreateStatic+0x138>
3400abd4:	46c1      	mov	r9, r8
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3400abd6:	4648      	mov	r0, r9
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
3400abd8:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3400abda:	f7ff fab5 	bl	3400a148 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
3400abde:	2d38      	cmp	r5, #56	@ 0x38
3400abe0:	f109 0914 	add.w	r9, r9, #20
3400abe4:	d1f7      	bne.n	3400abd6 <xTaskCreateStatic+0xfa>
    vListInitialise( &xDelayedTaskList1 );
3400abe6:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 3400acc0 <xTaskCreateStatic+0x1e4>
    vListInitialise( &xDelayedTaskList2 );
3400abea:	4d2b      	ldr	r5, [pc, #172]	@ (3400ac98 <xTaskCreateStatic+0x1bc>)
    vListInitialise( &xDelayedTaskList1 );
3400abec:	4648      	mov	r0, r9
3400abee:	f7ff faab 	bl	3400a148 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
3400abf2:	4628      	mov	r0, r5
3400abf4:	f7ff faa8 	bl	3400a148 <vListInitialise>
    vListInitialise( &xPendingReadyList );
3400abf8:	4828      	ldr	r0, [pc, #160]	@ (3400ac9c <xTaskCreateStatic+0x1c0>)
3400abfa:	f7ff faa5 	bl	3400a148 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
3400abfe:	4828      	ldr	r0, [pc, #160]	@ (3400aca0 <xTaskCreateStatic+0x1c4>)
3400ac00:	f7ff faa2 	bl	3400a148 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
3400ac04:	4827      	ldr	r0, [pc, #156]	@ (3400aca4 <xTaskCreateStatic+0x1c8>)
3400ac06:	f7ff fa9f 	bl	3400a148 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
3400ac0a:	4b27      	ldr	r3, [pc, #156]	@ (3400aca8 <xTaskCreateStatic+0x1cc>)
3400ac0c:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
3400ac10:	4b26      	ldr	r3, [pc, #152]	@ (3400acac <xTaskCreateStatic+0x1d0>)
3400ac12:	601d      	str	r5, [r3, #0]
        uxTaskNumber++;
3400ac14:	4a26      	ldr	r2, [pc, #152]	@ (3400acb0 <xTaskCreateStatic+0x1d4>)
3400ac16:	6813      	ldr	r3, [r2, #0]
3400ac18:	3301      	adds	r3, #1
3400ac1a:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
3400ac1c:	4a25      	ldr	r2, [pc, #148]	@ (3400acb4 <xTaskCreateStatic+0x1d8>)
            pxNewTCB->uxTCBNumber = uxTaskNumber;
3400ac1e:	6463      	str	r3, [r4, #68]	@ 0x44
        prvAddTaskToReadyList( pxNewTCB );
3400ac20:	6811      	ldr	r1, [r2, #0]
3400ac22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ac24:	428b      	cmp	r3, r1
3400ac26:	bf88      	it	hi
3400ac28:	6013      	strhi	r3, [r2, #0]
3400ac2a:	2214      	movs	r2, #20
3400ac2c:	4353      	muls	r3, r2
3400ac2e:	eb08 0103 	add.w	r1, r8, r3
3400ac32:	684a      	ldr	r2, [r1, #4]
3400ac34:	6890      	ldr	r0, [r2, #8]
3400ac36:	60a2      	str	r2, [r4, #8]
3400ac38:	60e0      	str	r0, [r4, #12]
3400ac3a:	6046      	str	r6, [r0, #4]
3400ac3c:	6096      	str	r6, [r2, #8]
3400ac3e:	f858 2003 	ldr.w	r2, [r8, r3]
3400ac42:	6161      	str	r1, [r4, #20]
3400ac44:	3201      	adds	r2, #1
3400ac46:	f848 2003 	str.w	r2, [r8, r3]
    taskEXIT_CRITICAL();
3400ac4a:	f000 fec5 	bl	3400b9d8 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
3400ac4e:	4b1a      	ldr	r3, [pc, #104]	@ (3400acb8 <xTaskCreateStatic+0x1dc>)
3400ac50:	681b      	ldr	r3, [r3, #0]
3400ac52:	b133      	cbz	r3, 3400ac62 <xTaskCreateStatic+0x186>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
3400ac54:	683b      	ldr	r3, [r7, #0]
3400ac56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400ac58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400ac5a:	429a      	cmp	r2, r3
3400ac5c:	d201      	bcs.n	3400ac62 <xTaskCreateStatic+0x186>
            taskYIELD_IF_USING_PREEMPTION();
3400ac5e:	f000 fea1 	bl	3400b9a4 <vPortYield>
    }
3400ac62:	4620      	mov	r0, r4
3400ac64:	b002      	add	sp, #8
3400ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if( xSchedulerRunning == pdFALSE )
3400ac6a:	4b13      	ldr	r3, [pc, #76]	@ (3400acb8 <xTaskCreateStatic+0x1dc>)
3400ac6c:	681a      	ldr	r2, [r3, #0]
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
3400ac6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if( xSchedulerRunning == pdFALSE )
3400ac70:	2a00      	cmp	r2, #0
3400ac72:	d1cf      	bne.n	3400ac14 <xTaskCreateStatic+0x138>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
3400ac74:	683a      	ldr	r2, [r7, #0]
3400ac76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400ac78:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
3400ac7a:	bf98      	it	ls
3400ac7c:	603c      	strls	r4, [r7, #0]
3400ac7e:	e7c9      	b.n	3400ac14 <xTaskCreateStatic+0x138>
3400ac80:	34026d17 	.word	0x34026d17
3400ac84:	34033fd3 	.word	0x34033fd3
3400ac88:	34027cc3 	.word	0x34027cc3
3400ac8c:	34033fbe 	.word	0x34033fbe
3400ac90:	3410e460 	.word	0x3410e460
3400ac94:	3410e934 	.word	0x3410e934
3400ac98:	3410e4ac 	.word	0x3410e4ac
3400ac9c:	3410e490 	.word	0x3410e490
3400aca0:	3410e47c 	.word	0x3410e47c
3400aca4:	3410e464 	.word	0x3410e464
3400aca8:	3410e4a8 	.word	0x3410e4a8
3400acac:	3410e4a4 	.word	0x3410e4a4
3400acb0:	3410e444 	.word	0x3410e444
3400acb4:	3410e458 	.word	0x3410e458
3400acb8:	3410e454 	.word	0x3410e454
3400acbc:	3410e4d4 	.word	0x3410e4d4
3400acc0:	3410e4c0 	.word	0x3410e4c0

3400acc4 <vTaskDelete>:
    {
3400acc4:	b570      	push	{r4, r5, r6, lr}
3400acc6:	4604      	mov	r4, r0
3400acc8:	4d1f      	ldr	r5, [pc, #124]	@ (3400ad48 <vTaskDelete+0x84>)
        taskENTER_CRITICAL();
3400acca:	f000 fe77 	bl	3400b9bc <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
3400acce:	b904      	cbnz	r4, 3400acd2 <vTaskDelete+0xe>
3400acd0:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400acd2:	1d26      	adds	r6, r4, #4
3400acd4:	4630      	mov	r0, r6
3400acd6:	f7ff fa67 	bl	3400a1a8 <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3400acda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3400acdc:	b11b      	cbz	r3, 3400ace6 <vTaskDelete+0x22>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
3400acde:	f104 0018 	add.w	r0, r4, #24
3400ace2:	f7ff fa61 	bl	3400a1a8 <uxListRemove>
            uxTaskNumber++;
3400ace6:	4a19      	ldr	r2, [pc, #100]	@ (3400ad4c <vTaskDelete+0x88>)
3400ace8:	6813      	ldr	r3, [r2, #0]
3400acea:	3301      	adds	r3, #1
3400acec:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
3400acee:	682b      	ldr	r3, [r5, #0]
3400acf0:	42a3      	cmp	r3, r4
3400acf2:	d11c      	bne.n	3400ad2e <vTaskDelete+0x6a>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
3400acf4:	4631      	mov	r1, r6
3400acf6:	4816      	ldr	r0, [pc, #88]	@ (3400ad50 <vTaskDelete+0x8c>)
3400acf8:	f7ff fa34 	bl	3400a164 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
3400acfc:	4a15      	ldr	r2, [pc, #84]	@ (3400ad54 <vTaskDelete+0x90>)
3400acfe:	6813      	ldr	r3, [r2, #0]
3400ad00:	3301      	adds	r3, #1
3400ad02:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
3400ad04:	f000 fe68 	bl	3400b9d8 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
3400ad08:	682b      	ldr	r3, [r5, #0]
        if( xSchedulerRunning != pdFALSE )
3400ad0a:	4b13      	ldr	r3, [pc, #76]	@ (3400ad58 <vTaskDelete+0x94>)
3400ad0c:	681b      	ldr	r3, [r3, #0]
3400ad0e:	b1cb      	cbz	r3, 3400ad44 <vTaskDelete+0x80>
            if( pxTCB == pxCurrentTCB )
3400ad10:	682b      	ldr	r3, [r5, #0]
3400ad12:	42a3      	cmp	r3, r4
3400ad14:	d116      	bne.n	3400ad44 <vTaskDelete+0x80>
                configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400ad16:	4b11      	ldr	r3, [pc, #68]	@ (3400ad5c <vTaskDelete+0x98>)
3400ad18:	681b      	ldr	r3, [r3, #0]
3400ad1a:	b17b      	cbz	r3, 3400ad3c <vTaskDelete+0x78>
3400ad1c:	f000 ffd2 	bl	3400bcc4 <ulSetInterruptMask>
3400ad20:	f240 41b3 	movw	r1, #1203	@ 0x4b3
3400ad24:	4b0e      	ldr	r3, [pc, #56]	@ (3400ad60 <vTaskDelete+0x9c>)
3400ad26:	4a0f      	ldr	r2, [pc, #60]	@ (3400ad64 <vTaskDelete+0xa0>)
3400ad28:	480f      	ldr	r0, [pc, #60]	@ (3400ad68 <vTaskDelete+0xa4>)
3400ad2a:	f014 fa4b 	bl	3401f1c4 <__assert_func>
                --uxCurrentNumberOfTasks;
3400ad2e:	4a0f      	ldr	r2, [pc, #60]	@ (3400ad6c <vTaskDelete+0xa8>)
3400ad30:	6813      	ldr	r3, [r2, #0]
3400ad32:	3b01      	subs	r3, #1
3400ad34:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
3400ad36:	f7ff febf 	bl	3400aab8 <prvResetNextTaskUnblockTime>
3400ad3a:	e7e3      	b.n	3400ad04 <vTaskDelete+0x40>
    }
3400ad3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                portYIELD_WITHIN_API();
3400ad40:	f000 be30 	b.w	3400b9a4 <vPortYield>
    }
3400ad44:	bd70      	pop	{r4, r5, r6, pc}
3400ad46:	bf00      	nop
3400ad48:	3410e934 	.word	0x3410e934
3400ad4c:	3410e444 	.word	0x3410e444
3400ad50:	3410e47c 	.word	0x3410e47c
3400ad54:	3410e478 	.word	0x3410e478
3400ad58:	3410e454 	.word	0x3410e454
3400ad5c:	3410e438 	.word	0x3410e438
3400ad60:	34026d17 	.word	0x34026d17
3400ad64:	34033fb2 	.word	0x34033fb2
3400ad68:	34027cc3 	.word	0x34027cc3
3400ad6c:	3410e460 	.word	0x3410e460

3400ad70 <vTaskStartScheduler>:
{
3400ad70:	b530      	push	{r4, r5, lr}
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
3400ad72:	2500      	movs	r5, #0
{
3400ad74:	b089      	sub	sp, #36	@ 0x24
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
3400ad76:	aa07      	add	r2, sp, #28
3400ad78:	a906      	add	r1, sp, #24
3400ad7a:	a805      	add	r0, sp, #20
        StackType_t * pxIdleTaskStackBuffer = NULL;
3400ad7c:	e9cd 5505 	strd	r5, r5, [sp, #20]
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
3400ad80:	f013 ff18 	bl	3401ebb4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
3400ad84:	9b05      	ldr	r3, [sp, #20]
3400ad86:	9a07      	ldr	r2, [sp, #28]
3400ad88:	9302      	str	r3, [sp, #8]
3400ad8a:	9b06      	ldr	r3, [sp, #24]
3400ad8c:	4916      	ldr	r1, [pc, #88]	@ (3400ade8 <vTaskStartScheduler+0x78>)
3400ad8e:	e9cd 5300 	strd	r5, r3, [sp]
3400ad92:	4816      	ldr	r0, [pc, #88]	@ (3400adec <vTaskStartScheduler+0x7c>)
3400ad94:	462b      	mov	r3, r5
3400ad96:	f7ff fea1 	bl	3400aadc <xTaskCreateStatic>
3400ad9a:	4b15      	ldr	r3, [pc, #84]	@ (3400adf0 <vTaskStartScheduler+0x80>)
3400ad9c:	6018      	str	r0, [r3, #0]
        if( xIdleTaskHandle != NULL )
3400ad9e:	b1a0      	cbz	r0, 3400adca <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
3400ada0:	f000 fd96 	bl	3400b8d0 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
3400ada4:	2801      	cmp	r0, #1
            xReturn = xTimerCreateTimerTask();
3400ada6:	4604      	mov	r4, r0
    if( xReturn == pdPASS )
3400ada8:	d113      	bne.n	3400add2 <vTaskStartScheduler+0x62>
    #include "freertos_tasks_c_additions.h"

    #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
        static void freertos_tasks_c_additions_init( void )
        {
            FREERTOS_TASKS_C_ADDITIONS_INIT();
3400adaa:	f7f7 f8a7 	bl	34001efc <freertos_libc_init>
        portDISABLE_INTERRUPTS();
3400adae:	f000 ff89 	bl	3400bcc4 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
3400adb2:	f04f 32ff 	mov.w	r2, #4294967295
3400adb6:	4b0f      	ldr	r3, [pc, #60]	@ (3400adf4 <vTaskStartScheduler+0x84>)
3400adb8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
3400adba:	4b0f      	ldr	r3, [pc, #60]	@ (3400adf8 <vTaskStartScheduler+0x88>)
3400adbc:	601c      	str	r4, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
3400adbe:	4b0f      	ldr	r3, [pc, #60]	@ (3400adfc <vTaskStartScheduler+0x8c>)
3400adc0:	601d      	str	r5, [r3, #0]
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
3400adc2:	f013 feb5 	bl	3401eb30 <TIM4_Config>
        xPortStartScheduler();
3400adc6:	f000 fe99 	bl	3400bafc <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
3400adca:	4b0d      	ldr	r3, [pc, #52]	@ (3400ae00 <vTaskStartScheduler+0x90>)
3400adcc:	681b      	ldr	r3, [r3, #0]
}
3400adce:	b009      	add	sp, #36	@ 0x24
3400add0:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
3400add2:	3401      	adds	r4, #1
3400add4:	d1f9      	bne.n	3400adca <vTaskStartScheduler+0x5a>
3400add6:	f000 ff75 	bl	3400bcc4 <ulSetInterruptMask>
3400adda:	f44f 6102 	mov.w	r1, #2080	@ 0x820
3400adde:	4b09      	ldr	r3, [pc, #36]	@ (3400ae04 <vTaskStartScheduler+0x94>)
3400ade0:	4a09      	ldr	r2, [pc, #36]	@ (3400ae08 <vTaskStartScheduler+0x98>)
3400ade2:	480a      	ldr	r0, [pc, #40]	@ (3400ae0c <vTaskStartScheduler+0x9c>)
3400ade4:	f014 f9ee 	bl	3401f1c4 <__assert_func>
3400ade8:	34027cfa 	.word	0x34027cfa
3400adec:	3400a9e5 	.word	0x3400a9e5
3400adf0:	3410e43c 	.word	0x3410e43c
3400adf4:	3410e440 	.word	0x3410e440
3400adf8:	3410e454 	.word	0x3410e454
3400adfc:	3410e45c 	.word	0x3410e45c
3400ae00:	34033fe8 	.word	0x34033fe8
3400ae04:	34026d17 	.word	0x34026d17
3400ae08:	34033f93 	.word	0x34033f93
3400ae0c:	34027cc3 	.word	0x34027cc3

3400ae10 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
3400ae10:	4a02      	ldr	r2, [pc, #8]	@ (3400ae1c <vTaskSuspendAll+0xc>)
3400ae12:	6813      	ldr	r3, [r2, #0]
3400ae14:	3301      	adds	r3, #1
3400ae16:	6013      	str	r3, [r2, #0]
}
3400ae18:	4770      	bx	lr
3400ae1a:	bf00      	nop
3400ae1c:	3410e438 	.word	0x3410e438

3400ae20 <xTaskGetTickCount>:
        xTicks = xTickCount;
3400ae20:	4b01      	ldr	r3, [pc, #4]	@ (3400ae28 <xTaskGetTickCount+0x8>)
3400ae22:	6818      	ldr	r0, [r3, #0]
}
3400ae24:	4770      	bx	lr
3400ae26:	bf00      	nop
3400ae28:	3410e45c 	.word	0x3410e45c

3400ae2c <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
3400ae2c:	4b01      	ldr	r3, [pc, #4]	@ (3400ae34 <uxTaskGetNumberOfTasks+0x8>)
3400ae2e:	6818      	ldr	r0, [r3, #0]
}
3400ae30:	4770      	bx	lr
3400ae32:	bf00      	nop
3400ae34:	3410e460 	.word	0x3410e460

3400ae38 <xTaskIncrementTick>:
{
3400ae38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400ae3c:	4b4e      	ldr	r3, [pc, #312]	@ (3400af78 <xTaskIncrementTick+0x140>)
3400ae3e:	681b      	ldr	r3, [r3, #0]
3400ae40:	2b00      	cmp	r3, #0
3400ae42:	f040 8093 	bne.w	3400af6c <xTaskIncrementTick+0x134>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
3400ae46:	4b4d      	ldr	r3, [pc, #308]	@ (3400af7c <xTaskIncrementTick+0x144>)
3400ae48:	681c      	ldr	r4, [r3, #0]
3400ae4a:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
3400ae4c:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
3400ae4e:	b9bc      	cbnz	r4, 3400ae80 <xTaskIncrementTick+0x48>
            taskSWITCH_DELAYED_LISTS();
3400ae50:	4b4b      	ldr	r3, [pc, #300]	@ (3400af80 <xTaskIncrementTick+0x148>)
3400ae52:	681a      	ldr	r2, [r3, #0]
3400ae54:	6812      	ldr	r2, [r2, #0]
3400ae56:	b142      	cbz	r2, 3400ae6a <xTaskIncrementTick+0x32>
3400ae58:	f000 ff34 	bl	3400bcc4 <ulSetInterruptMask>
3400ae5c:	f640 21f4 	movw	r1, #2804	@ 0xaf4
3400ae60:	4b48      	ldr	r3, [pc, #288]	@ (3400af84 <xTaskIncrementTick+0x14c>)
3400ae62:	4a49      	ldr	r2, [pc, #292]	@ (3400af88 <xTaskIncrementTick+0x150>)
3400ae64:	4849      	ldr	r0, [pc, #292]	@ (3400af8c <xTaskIncrementTick+0x154>)
3400ae66:	f014 f9ad 	bl	3401f1c4 <__assert_func>
3400ae6a:	4a49      	ldr	r2, [pc, #292]	@ (3400af90 <xTaskIncrementTick+0x158>)
3400ae6c:	6819      	ldr	r1, [r3, #0]
3400ae6e:	6810      	ldr	r0, [r2, #0]
3400ae70:	6018      	str	r0, [r3, #0]
3400ae72:	6011      	str	r1, [r2, #0]
3400ae74:	4a47      	ldr	r2, [pc, #284]	@ (3400af94 <xTaskIncrementTick+0x15c>)
3400ae76:	6813      	ldr	r3, [r2, #0]
3400ae78:	3301      	adds	r3, #1
3400ae7a:	6013      	str	r3, [r2, #0]
3400ae7c:	f7ff fe1c 	bl	3400aab8 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
3400ae80:	f8df c120 	ldr.w	ip, [pc, #288]	@ 3400afa4 <xTaskIncrementTick+0x16c>
    BaseType_t xSwitchRequired = pdFALSE;
3400ae84:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
3400ae86:	f8dc 3000 	ldr.w	r3, [ip]
3400ae8a:	4a43      	ldr	r2, [pc, #268]	@ (3400af98 <xTaskIncrementTick+0x160>)
3400ae8c:	429c      	cmp	r4, r3
3400ae8e:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 3400afa8 <xTaskIncrementTick+0x170>
3400ae92:	d20f      	bcs.n	3400aeb4 <xTaskIncrementTick+0x7c>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
3400ae94:	2114      	movs	r1, #20
3400ae96:	f8d8 3000 	ldr.w	r3, [r8]
3400ae9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400ae9c:	434b      	muls	r3, r1
3400ae9e:	58d3      	ldr	r3, [r2, r3]
                xSwitchRequired = pdTRUE;
3400aea0:	2b02      	cmp	r3, #2
            if( xYieldPending != pdFALSE )
3400aea2:	4b3e      	ldr	r3, [pc, #248]	@ (3400af9c <xTaskIncrementTick+0x164>)
                xSwitchRequired = pdTRUE;
3400aea4:	bf28      	it	cs
3400aea6:	2001      	movcs	r0, #1
            if( xYieldPending != pdFALSE )
3400aea8:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
3400aeaa:	2b00      	cmp	r3, #0
3400aeac:	bf18      	it	ne
3400aeae:	2001      	movne	r0, #1
}
3400aeb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400aeb4:	f8df e0c8 	ldr.w	lr, [pc, #200]	@ 3400af80 <xTaskIncrementTick+0x148>
                    prvAddTaskToReadyList( pxTCB );
3400aeb8:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 3400afac <xTaskIncrementTick+0x174>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3400aebc:	f8de 3000 	ldr.w	r3, [lr]
3400aec0:	681b      	ldr	r3, [r3, #0]
3400aec2:	b923      	cbnz	r3, 3400aece <xTaskIncrementTick+0x96>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400aec4:	f04f 33ff 	mov.w	r3, #4294967295
3400aec8:	f8cc 3000 	str.w	r3, [ip]
                    break;
3400aecc:	e7e2      	b.n	3400ae94 <xTaskIncrementTick+0x5c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400aece:	f8de 3000 	ldr.w	r3, [lr]
3400aed2:	68db      	ldr	r3, [r3, #12]
3400aed4:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
3400aed6:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
3400aed8:	428c      	cmp	r4, r1
3400aeda:	d202      	bcs.n	3400aee2 <xTaskIncrementTick+0xaa>
                        xNextTaskUnblockTime = xItemValue;
3400aedc:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
3400aee0:	e7d8      	b.n	3400ae94 <xTaskIncrementTick+0x5c>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3400aee2:	695d      	ldr	r5, [r3, #20]
3400aee4:	e9d3 1602 	ldrd	r1, r6, [r3, #8]
3400aee8:	608e      	str	r6, [r1, #8]
3400aeea:	6071      	str	r1, [r6, #4]
3400aeec:	6869      	ldr	r1, [r5, #4]
3400aeee:	1d1f      	adds	r7, r3, #4
3400aef0:	42b9      	cmp	r1, r7
3400aef2:	f04f 0100 	mov.w	r1, #0
3400aef6:	bf08      	it	eq
3400aef8:	606e      	streq	r6, [r5, #4]
3400aefa:	6159      	str	r1, [r3, #20]
3400aefc:	6829      	ldr	r1, [r5, #0]
3400aefe:	3901      	subs	r1, #1
3400af00:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3400af02:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
3400af04:	b17d      	cbz	r5, 3400af26 <xTaskIncrementTick+0xee>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3400af06:	e9d3 1607 	ldrd	r1, r6, [r3, #28]
3400af0a:	608e      	str	r6, [r1, #8]
3400af0c:	6071      	str	r1, [r6, #4]
3400af0e:	6869      	ldr	r1, [r5, #4]
3400af10:	f103 0a18 	add.w	sl, r3, #24
3400af14:	4551      	cmp	r1, sl
3400af16:	f04f 0100 	mov.w	r1, #0
3400af1a:	bf08      	it	eq
3400af1c:	606e      	streq	r6, [r5, #4]
3400af1e:	6299      	str	r1, [r3, #40]	@ 0x28
3400af20:	6829      	ldr	r1, [r5, #0]
3400af22:	3901      	subs	r1, #1
3400af24:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
3400af26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3400af28:	f8d9 5000 	ldr.w	r5, [r9]
3400af2c:	42a9      	cmp	r1, r5
3400af2e:	f04f 0514 	mov.w	r5, #20
3400af32:	fb05 f501 	mul.w	r5, r5, r1
3400af36:	eb02 0a05 	add.w	sl, r2, r5
3400af3a:	f8da 6004 	ldr.w	r6, [sl, #4]
3400af3e:	bf88      	it	hi
3400af40:	f8c9 1000 	strhi.w	r1, [r9]
3400af44:	f8d6 b008 	ldr.w	fp, [r6, #8]
3400af48:	609e      	str	r6, [r3, #8]
3400af4a:	f8c3 b00c 	str.w	fp, [r3, #12]
3400af4e:	f8cb 7004 	str.w	r7, [fp, #4]
3400af52:	60b7      	str	r7, [r6, #8]
3400af54:	f8c3 a014 	str.w	sl, [r3, #20]
3400af58:	5953      	ldr	r3, [r2, r5]
3400af5a:	3301      	adds	r3, #1
3400af5c:	5153      	str	r3, [r2, r5]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400af5e:	f8d8 3000 	ldr.w	r3, [r8]
3400af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            xSwitchRequired = pdTRUE;
3400af64:	4299      	cmp	r1, r3
3400af66:	bf88      	it	hi
3400af68:	2001      	movhi	r0, #1
3400af6a:	e7a7      	b.n	3400aebc <xTaskIncrementTick+0x84>
        ++xPendedTicks;
3400af6c:	4a0c      	ldr	r2, [pc, #48]	@ (3400afa0 <xTaskIncrementTick+0x168>)
    BaseType_t xSwitchRequired = pdFALSE;
3400af6e:	2000      	movs	r0, #0
        ++xPendedTicks;
3400af70:	6813      	ldr	r3, [r2, #0]
3400af72:	3301      	adds	r3, #1
3400af74:	6013      	str	r3, [r2, #0]
3400af76:	e79b      	b.n	3400aeb0 <xTaskIncrementTick+0x78>
3400af78:	3410e438 	.word	0x3410e438
3400af7c:	3410e45c 	.word	0x3410e45c
3400af80:	3410e4a8 	.word	0x3410e4a8
3400af84:	34026d17 	.word	0x34026d17
3400af88:	34033f71 	.word	0x34033f71
3400af8c:	34027cc3 	.word	0x34027cc3
3400af90:	3410e4a4 	.word	0x3410e4a4
3400af94:	3410e448 	.word	0x3410e448
3400af98:	3410e4d4 	.word	0x3410e4d4
3400af9c:	3410e44c 	.word	0x3410e44c
3400afa0:	3410e450 	.word	0x3410e450
3400afa4:	3410e440 	.word	0x3410e440
3400afa8:	3410e934 	.word	0x3410e934
3400afac:	3410e458 	.word	0x3410e458

3400afb0 <xTaskResumeAll>:
{
3400afb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3400afb4:	4c40      	ldr	r4, [pc, #256]	@ (3400b0b8 <xTaskResumeAll+0x108>)
3400afb6:	6823      	ldr	r3, [r4, #0]
3400afb8:	b943      	cbnz	r3, 3400afcc <xTaskResumeAll+0x1c>
3400afba:	f000 fe83 	bl	3400bcc4 <ulSetInterruptMask>
3400afbe:	f640 0193 	movw	r1, #2195	@ 0x893
3400afc2:	4b3e      	ldr	r3, [pc, #248]	@ (3400b0bc <xTaskResumeAll+0x10c>)
3400afc4:	4a3e      	ldr	r2, [pc, #248]	@ (3400b0c0 <xTaskResumeAll+0x110>)
3400afc6:	483f      	ldr	r0, [pc, #252]	@ (3400b0c4 <xTaskResumeAll+0x114>)
3400afc8:	f014 f8fc 	bl	3401f1c4 <__assert_func>
    taskENTER_CRITICAL();
3400afcc:	f000 fcf6 	bl	3400b9bc <vPortEnterCritical>
        --uxSchedulerSuspended;
3400afd0:	6823      	ldr	r3, [r4, #0]
3400afd2:	3b01      	subs	r3, #1
3400afd4:	6023      	str	r3, [r4, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400afd6:	6823      	ldr	r3, [r4, #0]
3400afd8:	b12b      	cbz	r3, 3400afe6 <xTaskResumeAll+0x36>
    BaseType_t xAlreadyYielded = pdFALSE;
3400afda:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
3400afdc:	f000 fcfc 	bl	3400b9d8 <vPortExitCritical>
}
3400afe0:	4620      	mov	r0, r4
3400afe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
3400afe6:	4a38      	ldr	r2, [pc, #224]	@ (3400b0c8 <xTaskResumeAll+0x118>)
3400afe8:	6812      	ldr	r2, [r2, #0]
3400afea:	2a00      	cmp	r2, #0
3400afec:	d0f5      	beq.n	3400afda <xTaskResumeAll+0x2a>
                    prvAddTaskToReadyList( pxTCB );
3400afee:	f04f 0c14 	mov.w	ip, #20
                        xYieldPending = pdTRUE;
3400aff2:	f04f 0901 	mov.w	r9, #1
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3400aff6:	4e35      	ldr	r6, [pc, #212]	@ (3400b0cc <xTaskResumeAll+0x11c>)
                    prvAddTaskToReadyList( pxTCB );
3400aff8:	4f35      	ldr	r7, [pc, #212]	@ (3400b0d0 <xTaskResumeAll+0x120>)
3400affa:	4936      	ldr	r1, [pc, #216]	@ (3400b0d4 <xTaskResumeAll+0x124>)
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400affc:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 3400b0e0 <xTaskResumeAll+0x130>
                        xYieldPending = pdTRUE;
3400b000:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 3400b0dc <xTaskResumeAll+0x12c>
3400b004:	e03e      	b.n	3400b084 <xTaskResumeAll+0xd4>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b006:	68f3      	ldr	r3, [r6, #12]
3400b008:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
3400b00a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
3400b00c:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
3400b010:	6094      	str	r4, [r2, #8]
3400b012:	6062      	str	r2, [r4, #4]
3400b014:	6842      	ldr	r2, [r0, #4]
3400b016:	f103 0518 	add.w	r5, r3, #24
3400b01a:	42aa      	cmp	r2, r5
3400b01c:	f04f 0200 	mov.w	r2, #0
3400b020:	bf08      	it	eq
3400b022:	6044      	streq	r4, [r0, #4]
3400b024:	629a      	str	r2, [r3, #40]	@ 0x28
3400b026:	6802      	ldr	r2, [r0, #0]
3400b028:	3a01      	subs	r2, #1
3400b02a:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
3400b02c:	6958      	ldr	r0, [r3, #20]
3400b02e:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
3400b032:	6094      	str	r4, [r2, #8]
3400b034:	6062      	str	r2, [r4, #4]
3400b036:	6842      	ldr	r2, [r0, #4]
3400b038:	1d1d      	adds	r5, r3, #4
3400b03a:	42aa      	cmp	r2, r5
3400b03c:	6802      	ldr	r2, [r0, #0]
3400b03e:	bf08      	it	eq
3400b040:	6044      	streq	r4, [r0, #4]
3400b042:	3a01      	subs	r2, #1
3400b044:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
3400b046:	6838      	ldr	r0, [r7, #0]
3400b048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400b04a:	4282      	cmp	r2, r0
3400b04c:	fb0c f002 	mul.w	r0, ip, r2
3400b050:	eb01 0a00 	add.w	sl, r1, r0
3400b054:	f8da 4004 	ldr.w	r4, [sl, #4]
3400b058:	bf88      	it	hi
3400b05a:	603a      	strhi	r2, [r7, #0]
3400b05c:	f8d4 b008 	ldr.w	fp, [r4, #8]
3400b060:	609c      	str	r4, [r3, #8]
3400b062:	f8c3 b00c 	str.w	fp, [r3, #12]
3400b066:	f8cb 5004 	str.w	r5, [fp, #4]
3400b06a:	60a5      	str	r5, [r4, #8]
3400b06c:	580c      	ldr	r4, [r1, r0]
3400b06e:	f8c3 a014 	str.w	sl, [r3, #20]
3400b072:	3401      	adds	r4, #1
3400b074:	500c      	str	r4, [r1, r0]
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
3400b076:	f8de 0000 	ldr.w	r0, [lr]
3400b07a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
3400b07c:	4282      	cmp	r2, r0
3400b07e:	d901      	bls.n	3400b084 <xTaskResumeAll+0xd4>
                        xYieldPending = pdTRUE;
3400b080:	f8c8 9000 	str.w	r9, [r8]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
3400b084:	6832      	ldr	r2, [r6, #0]
3400b086:	2a00      	cmp	r2, #0
3400b088:	d1bd      	bne.n	3400b006 <xTaskResumeAll+0x56>
                if( pxTCB != NULL )
3400b08a:	b10b      	cbz	r3, 3400b090 <xTaskResumeAll+0xe0>
                    prvResetNextTaskUnblockTime();
3400b08c:	f7ff fd14 	bl	3400aab8 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
3400b090:	4d11      	ldr	r5, [pc, #68]	@ (3400b0d8 <xTaskResumeAll+0x128>)
3400b092:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
3400b094:	b144      	cbz	r4, 3400b0a8 <xTaskResumeAll+0xf8>
                                xYieldPending = pdTRUE;
3400b096:	2701      	movs	r7, #1
3400b098:	4e10      	ldr	r6, [pc, #64]	@ (3400b0dc <xTaskResumeAll+0x12c>)
                            if( xTaskIncrementTick() != pdFALSE )
3400b09a:	f7ff fecd 	bl	3400ae38 <xTaskIncrementTick>
3400b09e:	b100      	cbz	r0, 3400b0a2 <xTaskResumeAll+0xf2>
                                xYieldPending = pdTRUE;
3400b0a0:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
3400b0a2:	3c01      	subs	r4, #1
3400b0a4:	d1f9      	bne.n	3400b09a <xTaskResumeAll+0xea>
                        xPendedTicks = 0;
3400b0a6:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
3400b0a8:	4b0c      	ldr	r3, [pc, #48]	@ (3400b0dc <xTaskResumeAll+0x12c>)
3400b0aa:	681b      	ldr	r3, [r3, #0]
3400b0ac:	2b00      	cmp	r3, #0
3400b0ae:	d094      	beq.n	3400afda <xTaskResumeAll+0x2a>
                    taskYIELD_IF_USING_PREEMPTION();
3400b0b0:	f000 fc78 	bl	3400b9a4 <vPortYield>
                        xAlreadyYielded = pdTRUE;
3400b0b4:	2401      	movs	r4, #1
3400b0b6:	e791      	b.n	3400afdc <xTaskResumeAll+0x2c>
3400b0b8:	3410e438 	.word	0x3410e438
3400b0bc:	34026d17 	.word	0x34026d17
3400b0c0:	34033f84 	.word	0x34033f84
3400b0c4:	34027cc3 	.word	0x34027cc3
3400b0c8:	3410e460 	.word	0x3410e460
3400b0cc:	3410e490 	.word	0x3410e490
3400b0d0:	3410e458 	.word	0x3410e458
3400b0d4:	3410e4d4 	.word	0x3410e4d4
3400b0d8:	3410e450 	.word	0x3410e450
3400b0dc:	3410e44c 	.word	0x3410e44c
3400b0e0:	3410e934 	.word	0x3410e934

3400b0e4 <vTaskDelay>:
    {
3400b0e4:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
3400b0e6:	b918      	cbnz	r0, 3400b0f0 <vTaskDelay+0xc>
    }
3400b0e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            portYIELD_WITHIN_API();
3400b0ec:	f000 bc5a 	b.w	3400b9a4 <vPortYield>
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
3400b0f0:	4b0a      	ldr	r3, [pc, #40]	@ (3400b11c <vTaskDelay+0x38>)
3400b0f2:	6819      	ldr	r1, [r3, #0]
3400b0f4:	b141      	cbz	r1, 3400b108 <vTaskDelay+0x24>
3400b0f6:	f000 fde5 	bl	3400bcc4 <ulSetInterruptMask>
3400b0fa:	f44f 61a4 	mov.w	r1, #1312	@ 0x520
3400b0fe:	4b08      	ldr	r3, [pc, #32]	@ (3400b120 <vTaskDelay+0x3c>)
3400b100:	4a08      	ldr	r2, [pc, #32]	@ (3400b124 <vTaskDelay+0x40>)
3400b102:	4809      	ldr	r0, [pc, #36]	@ (3400b128 <vTaskDelay+0x44>)
3400b104:	f014 f85e 	bl	3401f1c4 <__assert_func>
            vTaskSuspendAll();
3400b108:	f7ff fe82 	bl	3400ae10 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
3400b10c:	f7ff fc90 	bl	3400aa30 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
3400b110:	f7ff ff4e 	bl	3400afb0 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
3400b114:	2800      	cmp	r0, #0
3400b116:	d0e7      	beq.n	3400b0e8 <vTaskDelay+0x4>
    }
3400b118:	bd08      	pop	{r3, pc}
3400b11a:	bf00      	nop
3400b11c:	3410e438 	.word	0x3410e438
3400b120:	34026d17 	.word	0x34026d17
3400b124:	34033fa7 	.word	0x34033fa7
3400b128:	34027cc3 	.word	0x34027cc3

3400b12c <vTaskSwitchContext>:
{
3400b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
3400b12e:	4b22      	ldr	r3, [pc, #136]	@ (3400b1b8 <vTaskSwitchContext+0x8c>)
3400b130:	681a      	ldr	r2, [r3, #0]
3400b132:	4b22      	ldr	r3, [pc, #136]	@ (3400b1bc <vTaskSwitchContext+0x90>)
3400b134:	b112      	cbz	r2, 3400b13c <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
3400b136:	2201      	movs	r2, #1
3400b138:	601a      	str	r2, [r3, #0]
}
3400b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        xYieldPending = pdFALSE;
3400b13c:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3400b13e:	f013 fd33 	bl	3401eba8 <TIM4_Get_Value>
3400b142:	4a1f      	ldr	r2, [pc, #124]	@ (3400b1c0 <vTaskSwitchContext+0x94>)
            if( ulTotalRunTime > ulTaskSwitchedInTime )
3400b144:	491f      	ldr	r1, [pc, #124]	@ (3400b1c4 <vTaskSwitchContext+0x98>)
                ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3400b146:	6010      	str	r0, [r2, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
3400b148:	6813      	ldr	r3, [r2, #0]
3400b14a:	680c      	ldr	r4, [r1, #0]
3400b14c:	42a3      	cmp	r3, r4
3400b14e:	d906      	bls.n	3400b15e <vTaskSwitchContext+0x32>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3400b150:	4b1d      	ldr	r3, [pc, #116]	@ (3400b1c8 <vTaskSwitchContext+0x9c>)
3400b152:	6815      	ldr	r5, [r2, #0]
3400b154:	6818      	ldr	r0, [r3, #0]
3400b156:	6d43      	ldr	r3, [r0, #84]	@ 0x54
3400b158:	1b1b      	subs	r3, r3, r4
3400b15a:	442b      	add	r3, r5
3400b15c:	6543      	str	r3, [r0, #84]	@ 0x54
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b15e:	2714      	movs	r7, #20
3400b160:	4d1a      	ldr	r5, [pc, #104]	@ (3400b1cc <vTaskSwitchContext+0xa0>)
            ulTaskSwitchedInTime = ulTotalRunTime;
3400b162:	6813      	ldr	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b164:	682a      	ldr	r2, [r5, #0]
            ulTaskSwitchedInTime = ulTotalRunTime;
3400b166:	600b      	str	r3, [r1, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b168:	4919      	ldr	r1, [pc, #100]	@ (3400b1d0 <vTaskSwitchContext+0xa4>)
3400b16a:	1c54      	adds	r4, r2, #1
3400b16c:	fb07 f302 	mul.w	r3, r7, r2
3400b170:	58ce      	ldr	r6, [r1, r3]
3400b172:	18c8      	adds	r0, r1, r3
3400b174:	b196      	cbz	r6, 3400b19c <vTaskSwitchContext+0x70>
3400b176:	6844      	ldr	r4, [r0, #4]
3400b178:	3308      	adds	r3, #8
3400b17a:	6864      	ldr	r4, [r4, #4]
3400b17c:	440b      	add	r3, r1
3400b17e:	429c      	cmp	r4, r3
3400b180:	bf08      	it	eq
3400b182:	68c3      	ldreq	r3, [r0, #12]
3400b184:	6044      	str	r4, [r0, #4]
3400b186:	bf08      	it	eq
3400b188:	6043      	streq	r3, [r0, #4]
3400b18a:	2314      	movs	r3, #20
3400b18c:	fb03 1102 	mla	r1, r3, r2, r1
3400b190:	684b      	ldr	r3, [r1, #4]
3400b192:	68d9      	ldr	r1, [r3, #12]
3400b194:	4b0c      	ldr	r3, [pc, #48]	@ (3400b1c8 <vTaskSwitchContext+0x9c>)
3400b196:	6019      	str	r1, [r3, #0]
3400b198:	602a      	str	r2, [r5, #0]
}
3400b19a:	e7ce      	b.n	3400b13a <vTaskSwitchContext+0xe>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b19c:	3c01      	subs	r4, #1
3400b19e:	d108      	bne.n	3400b1b2 <vTaskSwitchContext+0x86>
3400b1a0:	f000 fd90 	bl	3400bcc4 <ulSetInterruptMask>
3400b1a4:	f640 4133 	movw	r1, #3123	@ 0xc33
3400b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (3400b1d4 <vTaskSwitchContext+0xa8>)
3400b1aa:	4a0b      	ldr	r2, [pc, #44]	@ (3400b1d8 <vTaskSwitchContext+0xac>)
3400b1ac:	480b      	ldr	r0, [pc, #44]	@ (3400b1dc <vTaskSwitchContext+0xb0>)
3400b1ae:	f014 f809 	bl	3401f1c4 <__assert_func>
3400b1b2:	3a01      	subs	r2, #1
3400b1b4:	e7da      	b.n	3400b16c <vTaskSwitchContext+0x40>
3400b1b6:	bf00      	nop
3400b1b8:	3410e438 	.word	0x3410e438
3400b1bc:	3410e44c 	.word	0x3410e44c
3400b1c0:	3410e430 	.word	0x3410e430
3400b1c4:	3410e434 	.word	0x3410e434
3400b1c8:	3410e934 	.word	0x3410e934
3400b1cc:	3410e458 	.word	0x3410e458
3400b1d0:	3410e4d4 	.word	0x3410e4d4
3400b1d4:	34026d17 	.word	0x34026d17
3400b1d8:	34033f5e 	.word	0x34033f5e
3400b1dc:	34027cc3 	.word	0x34027cc3

3400b1e0 <vTaskPlaceOnEventList>:
{
3400b1e0:	b510      	push	{r4, lr}
3400b1e2:	460c      	mov	r4, r1
    configASSERT( pxEventList );
3400b1e4:	b940      	cbnz	r0, 3400b1f8 <vTaskPlaceOnEventList+0x18>
3400b1e6:	f000 fd6d 	bl	3400bcc4 <ulSetInterruptMask>
3400b1ea:	f640 414b 	movw	r1, #3147	@ 0xc4b
3400b1ee:	4b08      	ldr	r3, [pc, #32]	@ (3400b210 <vTaskPlaceOnEventList+0x30>)
3400b1f0:	4a08      	ldr	r2, [pc, #32]	@ (3400b214 <vTaskPlaceOnEventList+0x34>)
3400b1f2:	4809      	ldr	r0, [pc, #36]	@ (3400b218 <vTaskPlaceOnEventList+0x38>)
3400b1f4:	f013 ffe6 	bl	3401f1c4 <__assert_func>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400b1f8:	4b08      	ldr	r3, [pc, #32]	@ (3400b21c <vTaskPlaceOnEventList+0x3c>)
3400b1fa:	6819      	ldr	r1, [r3, #0]
3400b1fc:	3118      	adds	r1, #24
3400b1fe:	f7fe ffbc 	bl	3400a17a <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3400b202:	4620      	mov	r0, r4
}
3400b204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3400b208:	2101      	movs	r1, #1
3400b20a:	f7ff bc11 	b.w	3400aa30 <prvAddCurrentTaskToDelayedList>
3400b20e:	bf00      	nop
3400b210:	34026d17 	.word	0x34026d17
3400b214:	34033f48 	.word	0x34033f48
3400b218:	34027cc3 	.word	0x34027cc3
3400b21c:	3410e934 	.word	0x3410e934

3400b220 <vTaskPlaceOnEventListRestricted>:
    {
3400b220:	b570      	push	{r4, r5, r6, lr}
3400b222:	460c      	mov	r4, r1
3400b224:	4611      	mov	r1, r2
        configASSERT( pxEventList );
3400b226:	b940      	cbnz	r0, 3400b23a <vTaskPlaceOnEventListRestricted+0x1a>
3400b228:	f000 fd4c 	bl	3400bcc4 <ulSetInterruptMask>
3400b22c:	f640 4181 	movw	r1, #3201	@ 0xc81
3400b230:	4b11      	ldr	r3, [pc, #68]	@ (3400b278 <vTaskPlaceOnEventListRestricted+0x58>)
3400b232:	4a12      	ldr	r2, [pc, #72]	@ (3400b27c <vTaskPlaceOnEventListRestricted+0x5c>)
3400b234:	4812      	ldr	r0, [pc, #72]	@ (3400b280 <vTaskPlaceOnEventListRestricted+0x60>)
3400b236:	f013 ffc5 	bl	3401f1c4 <__assert_func>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400b23a:	4b12      	ldr	r3, [pc, #72]	@ (3400b284 <vTaskPlaceOnEventListRestricted+0x64>)
3400b23c:	6842      	ldr	r2, [r0, #4]
3400b23e:	681d      	ldr	r5, [r3, #0]
3400b240:	6896      	ldr	r6, [r2, #8]
3400b242:	61ea      	str	r2, [r5, #28]
3400b244:	681d      	ldr	r5, [r3, #0]
            xTicksToWait = portMAX_DELAY;
3400b246:	2900      	cmp	r1, #0
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3400b248:	622e      	str	r6, [r5, #32]
3400b24a:	681d      	ldr	r5, [r3, #0]
3400b24c:	f105 0518 	add.w	r5, r5, #24
3400b250:	6075      	str	r5, [r6, #4]
3400b252:	681d      	ldr	r5, [r3, #0]
3400b254:	681b      	ldr	r3, [r3, #0]
3400b256:	f105 0518 	add.w	r5, r5, #24
3400b25a:	6095      	str	r5, [r2, #8]
3400b25c:	6298      	str	r0, [r3, #40]	@ 0x28
3400b25e:	6803      	ldr	r3, [r0, #0]
3400b260:	f103 0301 	add.w	r3, r3, #1
3400b264:	6003      	str	r3, [r0, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3400b266:	bf08      	it	eq
3400b268:	4620      	moveq	r0, r4
    }
3400b26a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3400b26e:	bf18      	it	ne
3400b270:	f04f 30ff 	movne.w	r0, #4294967295
3400b274:	f7ff bbdc 	b.w	3400aa30 <prvAddCurrentTaskToDelayedList>
3400b278:	34026d17 	.word	0x34026d17
3400b27c:	34033f28 	.word	0x34033f28
3400b280:	34027cc3 	.word	0x34027cc3
3400b284:	3410e934 	.word	0x3410e934

3400b288 <xTaskRemoveFromEventList>:
{
3400b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b28a:	68c3      	ldr	r3, [r0, #12]
3400b28c:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
3400b28e:	b943      	cbnz	r3, 3400b2a2 <xTaskRemoveFromEventList+0x1a>
3400b290:	f000 fd18 	bl	3400bcc4 <ulSetInterruptMask>
3400b294:	f640 41b1 	movw	r1, #3249	@ 0xcb1
3400b298:	4b27      	ldr	r3, [pc, #156]	@ (3400b338 <xTaskRemoveFromEventList+0xb0>)
3400b29a:	4a28      	ldr	r2, [pc, #160]	@ (3400b33c <xTaskRemoveFromEventList+0xb4>)
3400b29c:	4828      	ldr	r0, [pc, #160]	@ (3400b340 <xTaskRemoveFromEventList+0xb8>)
3400b29e:	f013 ff91 	bl	3401f1c4 <__assert_func>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3400b2a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3400b2a4:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
3400b2a8:	6081      	str	r1, [r0, #8]
3400b2aa:	6048      	str	r0, [r1, #4]
3400b2ac:	6850      	ldr	r0, [r2, #4]
3400b2ae:	f103 0418 	add.w	r4, r3, #24
3400b2b2:	42a0      	cmp	r0, r4
3400b2b4:	bf08      	it	eq
3400b2b6:	6051      	streq	r1, [r2, #4]
3400b2b8:	2100      	movs	r1, #0
3400b2ba:	6299      	str	r1, [r3, #40]	@ 0x28
3400b2bc:	6811      	ldr	r1, [r2, #0]
3400b2be:	3901      	subs	r1, #1
3400b2c0:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400b2c2:	4a20      	ldr	r2, [pc, #128]	@ (3400b344 <xTaskRemoveFromEventList+0xbc>)
3400b2c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3400b2c6:	6812      	ldr	r2, [r2, #0]
3400b2c8:	2a00      	cmp	r2, #0
3400b2ca:	d129      	bne.n	3400b320 <xTaskRemoveFromEventList+0x98>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3400b2cc:	e9d3 4002 	ldrd	r4, r0, [r3, #8]
3400b2d0:	695a      	ldr	r2, [r3, #20]
3400b2d2:	60a0      	str	r0, [r4, #8]
3400b2d4:	6044      	str	r4, [r0, #4]
3400b2d6:	6854      	ldr	r4, [r2, #4]
3400b2d8:	1d1d      	adds	r5, r3, #4
3400b2da:	42ac      	cmp	r4, r5
3400b2dc:	bf08      	it	eq
3400b2de:	6050      	streq	r0, [r2, #4]
3400b2e0:	6810      	ldr	r0, [r2, #0]
3400b2e2:	3801      	subs	r0, #1
3400b2e4:	6010      	str	r0, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
3400b2e6:	4a18      	ldr	r2, [pc, #96]	@ (3400b348 <xTaskRemoveFromEventList+0xc0>)
3400b2e8:	6810      	ldr	r0, [r2, #0]
3400b2ea:	4281      	cmp	r1, r0
3400b2ec:	bf88      	it	hi
3400b2ee:	6011      	strhi	r1, [r2, #0]
3400b2f0:	2214      	movs	r2, #20
3400b2f2:	434a      	muls	r2, r1
3400b2f4:	4815      	ldr	r0, [pc, #84]	@ (3400b34c <xTaskRemoveFromEventList+0xc4>)
3400b2f6:	1886      	adds	r6, r0, r2
3400b2f8:	6874      	ldr	r4, [r6, #4]
3400b2fa:	68a7      	ldr	r7, [r4, #8]
3400b2fc:	609c      	str	r4, [r3, #8]
3400b2fe:	60df      	str	r7, [r3, #12]
3400b300:	607d      	str	r5, [r7, #4]
3400b302:	60a5      	str	r5, [r4, #8]
3400b304:	615e      	str	r6, [r3, #20]
3400b306:	5883      	ldr	r3, [r0, r2]
3400b308:	3301      	adds	r3, #1
3400b30a:	5083      	str	r3, [r0, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3400b30c:	4b10      	ldr	r3, [pc, #64]	@ (3400b350 <xTaskRemoveFromEventList+0xc8>)
3400b30e:	681b      	ldr	r3, [r3, #0]
3400b310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b312:	4299      	cmp	r1, r3
        xYieldPending = pdTRUE;
3400b314:	bf85      	ittet	hi
3400b316:	2001      	movhi	r0, #1
3400b318:	4b0e      	ldrhi	r3, [pc, #56]	@ (3400b354 <xTaskRemoveFromEventList+0xcc>)
        xReturn = pdFALSE;
3400b31a:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
3400b31c:	6018      	strhi	r0, [r3, #0]
}
3400b31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3400b320:	4a0d      	ldr	r2, [pc, #52]	@ (3400b358 <xTaskRemoveFromEventList+0xd0>)
3400b322:	6850      	ldr	r0, [r2, #4]
3400b324:	6885      	ldr	r5, [r0, #8]
3400b326:	61d8      	str	r0, [r3, #28]
3400b328:	621d      	str	r5, [r3, #32]
3400b32a:	606c      	str	r4, [r5, #4]
3400b32c:	6084      	str	r4, [r0, #8]
3400b32e:	629a      	str	r2, [r3, #40]	@ 0x28
3400b330:	6813      	ldr	r3, [r2, #0]
3400b332:	3301      	adds	r3, #1
3400b334:	6013      	str	r3, [r2, #0]
3400b336:	e7e9      	b.n	3400b30c <xTaskRemoveFromEventList+0x84>
3400b338:	34026d17 	.word	0x34026d17
3400b33c:	34033f0f 	.word	0x34033f0f
3400b340:	34027cc3 	.word	0x34027cc3
3400b344:	3410e438 	.word	0x3410e438
3400b348:	3410e458 	.word	0x3410e458
3400b34c:	3410e4d4 	.word	0x3410e4d4
3400b350:	3410e934 	.word	0x3410e934
3400b354:	3410e44c 	.word	0x3410e44c
3400b358:	3410e490 	.word	0x3410e490

3400b35c <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
3400b35c:	4b03      	ldr	r3, [pc, #12]	@ (3400b36c <vTaskInternalSetTimeOutState+0x10>)
3400b35e:	681b      	ldr	r3, [r3, #0]
3400b360:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
3400b362:	4b03      	ldr	r3, [pc, #12]	@ (3400b370 <vTaskInternalSetTimeOutState+0x14>)
3400b364:	681b      	ldr	r3, [r3, #0]
3400b366:	6043      	str	r3, [r0, #4]
}
3400b368:	4770      	bx	lr
3400b36a:	bf00      	nop
3400b36c:	3410e448 	.word	0x3410e448
3400b370:	3410e45c 	.word	0x3410e45c

3400b374 <xTaskCheckForTimeOut>:
{
3400b374:	b570      	push	{r4, r5, r6, lr}
3400b376:	460d      	mov	r5, r1
    configASSERT( pxTimeOut );
3400b378:	4604      	mov	r4, r0
3400b37a:	b940      	cbnz	r0, 3400b38e <xTaskCheckForTimeOut+0x1a>
3400b37c:	f000 fca2 	bl	3400bcc4 <ulSetInterruptMask>
3400b380:	f640 512c 	movw	r1, #3372	@ 0xd2c
3400b384:	4b16      	ldr	r3, [pc, #88]	@ (3400b3e0 <xTaskCheckForTimeOut+0x6c>)
3400b386:	4a17      	ldr	r2, [pc, #92]	@ (3400b3e4 <xTaskCheckForTimeOut+0x70>)
    configASSERT( pxTicksToWait );
3400b388:	4817      	ldr	r0, [pc, #92]	@ (3400b3e8 <xTaskCheckForTimeOut+0x74>)
3400b38a:	f013 ff1b 	bl	3401f1c4 <__assert_func>
3400b38e:	b931      	cbnz	r1, 3400b39e <xTaskCheckForTimeOut+0x2a>
3400b390:	f000 fc98 	bl	3400bcc4 <ulSetInterruptMask>
3400b394:	f640 512d 	movw	r1, #3373	@ 0xd2d
3400b398:	4b11      	ldr	r3, [pc, #68]	@ (3400b3e0 <xTaskCheckForTimeOut+0x6c>)
3400b39a:	4a12      	ldr	r2, [pc, #72]	@ (3400b3e4 <xTaskCheckForTimeOut+0x70>)
3400b39c:	e7f4      	b.n	3400b388 <xTaskCheckForTimeOut+0x14>
    taskENTER_CRITICAL();
3400b39e:	f000 fb0d 	bl	3400b9bc <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
3400b3a2:	4b12      	ldr	r3, [pc, #72]	@ (3400b3ec <xTaskCheckForTimeOut+0x78>)
3400b3a4:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
3400b3a6:	682b      	ldr	r3, [r5, #0]
3400b3a8:	1c5a      	adds	r2, r3, #1
3400b3aa:	d017      	beq.n	3400b3dc <xTaskCheckForTimeOut+0x68>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
3400b3ac:	4810      	ldr	r0, [pc, #64]	@ (3400b3f0 <xTaskCheckForTimeOut+0x7c>)
3400b3ae:	6826      	ldr	r6, [r4, #0]
3400b3b0:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3400b3b2:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
3400b3b4:	4286      	cmp	r6, r0
3400b3b6:	d008      	beq.n	3400b3ca <xTaskCheckForTimeOut+0x56>
3400b3b8:	428a      	cmp	r2, r1
3400b3ba:	d806      	bhi.n	3400b3ca <xTaskCheckForTimeOut+0x56>
            *pxTicksToWait = ( TickType_t ) 0;
3400b3bc:	2300      	movs	r3, #0
            xReturn = pdTRUE;
3400b3be:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
3400b3c0:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
3400b3c2:	f000 fb09 	bl	3400b9d8 <vPortExitCritical>
}
3400b3c6:	4620      	mov	r0, r4
3400b3c8:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3400b3ca:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
3400b3cc:	4283      	cmp	r3, r0
3400b3ce:	d9f5      	bls.n	3400b3bc <xTaskCheckForTimeOut+0x48>
            *pxTicksToWait -= xElapsedTime;
3400b3d0:	1a5b      	subs	r3, r3, r1
3400b3d2:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
3400b3d4:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
3400b3d6:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
3400b3d8:	f7ff ffc0 	bl	3400b35c <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
3400b3dc:	2400      	movs	r4, #0
3400b3de:	e7f0      	b.n	3400b3c2 <xTaskCheckForTimeOut+0x4e>
3400b3e0:	34026d17 	.word	0x34026d17
3400b3e4:	34033efa 	.word	0x34033efa
3400b3e8:	34027cc3 	.word	0x34027cc3
3400b3ec:	3410e45c 	.word	0x3410e45c
3400b3f0:	3410e448 	.word	0x3410e448

3400b3f4 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
3400b3f4:	2201      	movs	r2, #1
3400b3f6:	4b01      	ldr	r3, [pc, #4]	@ (3400b3fc <vTaskMissedYield+0x8>)
3400b3f8:	601a      	str	r2, [r3, #0]
}
3400b3fa:	4770      	bx	lr
3400b3fc:	3410e44c 	.word	0x3410e44c

3400b400 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
3400b400:	4b05      	ldr	r3, [pc, #20]	@ (3400b418 <xTaskGetSchedulerState+0x18>)
3400b402:	681b      	ldr	r3, [r3, #0]
3400b404:	b133      	cbz	r3, 3400b414 <xTaskGetSchedulerState+0x14>
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3400b406:	4b05      	ldr	r3, [pc, #20]	@ (3400b41c <xTaskGetSchedulerState+0x1c>)
3400b408:	6818      	ldr	r0, [r3, #0]
3400b40a:	fab0 f080 	clz	r0, r0
3400b40e:	0940      	lsrs	r0, r0, #5
3400b410:	0040      	lsls	r0, r0, #1
3400b412:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
3400b414:	2001      	movs	r0, #1
    }
3400b416:	4770      	bx	lr
3400b418:	3410e454 	.word	0x3410e454
3400b41c:	3410e438 	.word	0x3410e438

3400b420 <xTaskPriorityInherit>:
    {
3400b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
3400b422:	4604      	mov	r4, r0
3400b424:	2800      	cmp	r0, #0
3400b426:	d02e      	beq.n	3400b486 <xTaskPriorityInherit+0x66>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3400b428:	4d1d      	ldr	r5, [pc, #116]	@ (3400b4a0 <xTaskPriorityInherit+0x80>)
3400b42a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400b42c:	682a      	ldr	r2, [r5, #0]
3400b42e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
3400b430:	4293      	cmp	r3, r2
3400b432:	d22d      	bcs.n	3400b490 <xTaskPriorityInherit+0x70>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b434:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
3400b436:	4e1b      	ldr	r6, [pc, #108]	@ (3400b4a4 <xTaskPriorityInherit+0x84>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b438:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b43a:	bfa1      	itttt	ge
3400b43c:	682a      	ldrge	r2, [r5, #0]
3400b43e:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
3400b440:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
3400b444:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
3400b446:	2214      	movs	r2, #20
3400b448:	fb02 6303 	mla	r3, r2, r3, r6
3400b44c:	6942      	ldr	r2, [r0, #20]
3400b44e:	429a      	cmp	r2, r3
3400b450:	d11a      	bne.n	3400b488 <xTaskPriorityInherit+0x68>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400b452:	1d07      	adds	r7, r0, #4
3400b454:	4638      	mov	r0, r7
3400b456:	f7fe fea7 	bl	3400a1a8 <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b45a:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400b45c:	4a12      	ldr	r2, [pc, #72]	@ (3400b4a8 <xTaskPriorityInherit+0x88>)
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400b460:	6811      	ldr	r1, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b462:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
3400b464:	428b      	cmp	r3, r1
3400b466:	bf88      	it	hi
3400b468:	6013      	strhi	r3, [r2, #0]
3400b46a:	2214      	movs	r2, #20
3400b46c:	4353      	muls	r3, r2
3400b46e:	18f1      	adds	r1, r6, r3
3400b470:	684a      	ldr	r2, [r1, #4]
3400b472:	6890      	ldr	r0, [r2, #8]
3400b474:	60a2      	str	r2, [r4, #8]
3400b476:	60e0      	str	r0, [r4, #12]
3400b478:	6047      	str	r7, [r0, #4]
3400b47a:	6097      	str	r7, [r2, #8]
3400b47c:	58f2      	ldr	r2, [r6, r3]
3400b47e:	6161      	str	r1, [r4, #20]
3400b480:	3201      	adds	r2, #1
3400b482:	50f2      	str	r2, [r6, r3]
                xReturn = pdTRUE;
3400b484:	2001      	movs	r0, #1
    }
3400b486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3400b488:	682b      	ldr	r3, [r5, #0]
3400b48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b48c:	62c3      	str	r3, [r0, #44]	@ 0x2c
3400b48e:	e7f9      	b.n	3400b484 <xTaskPriorityInherit+0x64>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3400b490:	682b      	ldr	r3, [r5, #0]
3400b492:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
3400b494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400b496:	4298      	cmp	r0, r3
3400b498:	bf2c      	ite	cs
3400b49a:	2000      	movcs	r0, #0
3400b49c:	2001      	movcc	r0, #1
3400b49e:	e7f2      	b.n	3400b486 <xTaskPriorityInherit+0x66>
3400b4a0:	3410e934 	.word	0x3410e934
3400b4a4:	3410e4d4 	.word	0x3410e4d4
3400b4a8:	3410e458 	.word	0x3410e458

3400b4ac <xTaskPriorityDisinherit>:
    {
3400b4ac:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
3400b4ae:	4604      	mov	r4, r0
3400b4b0:	b908      	cbnz	r0, 3400b4b6 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
3400b4b2:	2000      	movs	r0, #0
    }
3400b4b4:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxTCB == pxCurrentTCB );
3400b4b6:	4b1e      	ldr	r3, [pc, #120]	@ (3400b530 <xTaskPriorityDisinherit+0x84>)
3400b4b8:	681b      	ldr	r3, [r3, #0]
3400b4ba:	4283      	cmp	r3, r0
3400b4bc:	d008      	beq.n	3400b4d0 <xTaskPriorityDisinherit+0x24>
3400b4be:	f000 fc01 	bl	3400bcc4 <ulSetInterruptMask>
3400b4c2:	f241 018c 	movw	r1, #4236	@ 0x108c
3400b4c6:	4b1b      	ldr	r3, [pc, #108]	@ (3400b534 <xTaskPriorityDisinherit+0x88>)
3400b4c8:	4a1b      	ldr	r2, [pc, #108]	@ (3400b538 <xTaskPriorityDisinherit+0x8c>)
            configASSERT( pxTCB->uxMutexesHeld );
3400b4ca:	481c      	ldr	r0, [pc, #112]	@ (3400b53c <xTaskPriorityDisinherit+0x90>)
3400b4cc:	f013 fe7a 	bl	3401f1c4 <__assert_func>
3400b4d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3400b4d2:	b933      	cbnz	r3, 3400b4e2 <xTaskPriorityDisinherit+0x36>
3400b4d4:	f000 fbf6 	bl	3400bcc4 <ulSetInterruptMask>
3400b4d8:	f241 018d 	movw	r1, #4237	@ 0x108d
3400b4dc:	4b15      	ldr	r3, [pc, #84]	@ (3400b534 <xTaskPriorityDisinherit+0x88>)
3400b4de:	4a16      	ldr	r2, [pc, #88]	@ (3400b538 <xTaskPriorityDisinherit+0x8c>)
3400b4e0:	e7f3      	b.n	3400b4ca <xTaskPriorityDisinherit+0x1e>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400b4e2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
3400b4e4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
            ( pxTCB->uxMutexesHeld )--;
3400b4e6:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400b4e8:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
3400b4ea:	6503      	str	r3, [r0, #80]	@ 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3400b4ec:	d0e1      	beq.n	3400b4b2 <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3400b4ee:	2b00      	cmp	r3, #0
3400b4f0:	d1df      	bne.n	3400b4b2 <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400b4f2:	1d05      	adds	r5, r0, #4
3400b4f4:	4628      	mov	r0, r5
3400b4f6:	f7fe fe57 	bl	3400a1a8 <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
3400b4fa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b4fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
3400b500:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
3400b502:	4a0f      	ldr	r2, [pc, #60]	@ (3400b540 <xTaskPriorityDisinherit+0x94>)
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
3400b504:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxTCB );
3400b506:	6811      	ldr	r1, [r2, #0]
3400b508:	428b      	cmp	r3, r1
3400b50a:	f04f 0114 	mov.w	r1, #20
3400b50e:	bf88      	it	hi
3400b510:	6013      	strhi	r3, [r2, #0]
3400b512:	434b      	muls	r3, r1
3400b514:	4a0b      	ldr	r2, [pc, #44]	@ (3400b544 <xTaskPriorityDisinherit+0x98>)
3400b516:	18d0      	adds	r0, r2, r3
3400b518:	6841      	ldr	r1, [r0, #4]
3400b51a:	688e      	ldr	r6, [r1, #8]
3400b51c:	60a1      	str	r1, [r4, #8]
3400b51e:	60e6      	str	r6, [r4, #12]
3400b520:	6075      	str	r5, [r6, #4]
3400b522:	608d      	str	r5, [r1, #8]
3400b524:	58d1      	ldr	r1, [r2, r3]
3400b526:	6160      	str	r0, [r4, #20]
3400b528:	3101      	adds	r1, #1
                    xReturn = pdTRUE;
3400b52a:	2001      	movs	r0, #1
                    prvAddTaskToReadyList( pxTCB );
3400b52c:	50d1      	str	r1, [r2, r3]
        return xReturn;
3400b52e:	e7c1      	b.n	3400b4b4 <xTaskPriorityDisinherit+0x8>
3400b530:	3410e934 	.word	0x3410e934
3400b534:	34026d17 	.word	0x34026d17
3400b538:	34033ee2 	.word	0x34033ee2
3400b53c:	34027cc3 	.word	0x34027cc3
3400b540:	3410e458 	.word	0x3410e458
3400b544:	3410e4d4 	.word	0x3410e4d4

3400b548 <vTaskPriorityDisinheritAfterTimeout>:
    {
3400b548:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
3400b54a:	4604      	mov	r4, r0
3400b54c:	2800      	cmp	r0, #0
3400b54e:	d044      	beq.n	3400b5da <vTaskPriorityDisinheritAfterTimeout+0x92>
            configASSERT( pxTCB->uxMutexesHeld );
3400b550:	6d02      	ldr	r2, [r0, #80]	@ 0x50
3400b552:	b942      	cbnz	r2, 3400b566 <vTaskPriorityDisinheritAfterTimeout+0x1e>
3400b554:	f000 fbb6 	bl	3400bcc4 <ulSetInterruptMask>
3400b558:	f241 01dc 	movw	r1, #4316	@ 0x10dc
3400b55c:	4b1f      	ldr	r3, [pc, #124]	@ (3400b5dc <vTaskPriorityDisinheritAfterTimeout+0x94>)
3400b55e:	4a20      	ldr	r2, [pc, #128]	@ (3400b5e0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
                    configASSERT( pxTCB != pxCurrentTCB );
3400b560:	4820      	ldr	r0, [pc, #128]	@ (3400b5e4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
3400b562:	f013 fe2f 	bl	3401f1c4 <__assert_func>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3400b566:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
3400b568:	4299      	cmp	r1, r3
3400b56a:	bf38      	it	cc
3400b56c:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
3400b56e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
3400b570:	428b      	cmp	r3, r1
3400b572:	d032      	beq.n	3400b5da <vTaskPriorityDisinheritAfterTimeout+0x92>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3400b574:	2a01      	cmp	r2, #1
3400b576:	d130      	bne.n	3400b5da <vTaskPriorityDisinheritAfterTimeout+0x92>
                    configASSERT( pxTCB != pxCurrentTCB );
3400b578:	4a1b      	ldr	r2, [pc, #108]	@ (3400b5e8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
3400b57a:	6812      	ldr	r2, [r2, #0]
3400b57c:	4282      	cmp	r2, r0
3400b57e:	d106      	bne.n	3400b58e <vTaskPriorityDisinheritAfterTimeout+0x46>
3400b580:	f000 fba0 	bl	3400bcc4 <ulSetInterruptMask>
3400b584:	f241 01f7 	movw	r1, #4343	@ 0x10f7
3400b588:	4b14      	ldr	r3, [pc, #80]	@ (3400b5dc <vTaskPriorityDisinheritAfterTimeout+0x94>)
3400b58a:	4a15      	ldr	r2, [pc, #84]	@ (3400b5e0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
3400b58c:	e7e8      	b.n	3400b560 <vTaskPriorityDisinheritAfterTimeout+0x18>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b58e:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400b590:	4d16      	ldr	r5, [pc, #88]	@ (3400b5ec <vTaskPriorityDisinheritAfterTimeout+0xa4>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
3400b592:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400b594:	f04f 0214 	mov.w	r2, #20
3400b598:	fb02 5303 	mla	r3, r2, r3, r5
3400b59c:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
3400b59e:	62c1      	str	r1, [r0, #44]	@ 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b5a0:	bfa4      	itt	ge
3400b5a2:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
3400b5a6:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
3400b5a8:	429a      	cmp	r2, r3
3400b5aa:	d116      	bne.n	3400b5da <vTaskPriorityDisinheritAfterTimeout+0x92>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3400b5ac:	1d06      	adds	r6, r0, #4
3400b5ae:	4630      	mov	r0, r6
3400b5b0:	f7fe fdfa 	bl	3400a1a8 <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
3400b5b4:	4a0e      	ldr	r2, [pc, #56]	@ (3400b5f0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
3400b5b6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3400b5b8:	6811      	ldr	r1, [r2, #0]
3400b5ba:	428b      	cmp	r3, r1
3400b5bc:	bf88      	it	hi
3400b5be:	6013      	strhi	r3, [r2, #0]
3400b5c0:	2214      	movs	r2, #20
3400b5c2:	4353      	muls	r3, r2
3400b5c4:	18e9      	adds	r1, r5, r3
3400b5c6:	684a      	ldr	r2, [r1, #4]
3400b5c8:	6890      	ldr	r0, [r2, #8]
3400b5ca:	60a2      	str	r2, [r4, #8]
3400b5cc:	60e0      	str	r0, [r4, #12]
3400b5ce:	6046      	str	r6, [r0, #4]
3400b5d0:	6096      	str	r6, [r2, #8]
3400b5d2:	58ea      	ldr	r2, [r5, r3]
3400b5d4:	6161      	str	r1, [r4, #20]
3400b5d6:	3201      	adds	r2, #1
3400b5d8:	50ea      	str	r2, [r5, r3]
    }
3400b5da:	bd70      	pop	{r4, r5, r6, pc}
3400b5dc:	34026d17 	.word	0x34026d17
3400b5e0:	34033ebe 	.word	0x34033ebe
3400b5e4:	34027cc3 	.word	0x34027cc3
3400b5e8:	3410e934 	.word	0x3410e934
3400b5ec:	3410e4d4 	.word	0x3410e4d4
3400b5f0:	3410e458 	.word	0x3410e458

3400b5f4 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
3400b5f4:	4b04      	ldr	r3, [pc, #16]	@ (3400b608 <pvTaskIncrementMutexHeldCount+0x14>)
3400b5f6:	681a      	ldr	r2, [r3, #0]
3400b5f8:	b11a      	cbz	r2, 3400b602 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
3400b5fa:	6819      	ldr	r1, [r3, #0]
3400b5fc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
3400b5fe:	3201      	adds	r2, #1
3400b600:	650a      	str	r2, [r1, #80]	@ 0x50
        return pxCurrentTCB;
3400b602:	6818      	ldr	r0, [r3, #0]
    }
3400b604:	4770      	bx	lr
3400b606:	bf00      	nop
3400b608:	3410e934 	.word	0x3410e934

3400b60c <ulTaskGetIdleRunTimeCounter>:
        return xTask->ulRunTimeCounter;
3400b60c:	4b01      	ldr	r3, [pc, #4]	@ (3400b614 <ulTaskGetIdleRunTimeCounter+0x8>)
3400b60e:	681b      	ldr	r3, [r3, #0]
    }
3400b610:	6d58      	ldr	r0, [r3, #84]	@ 0x54
3400b612:	4770      	bx	lr
3400b614:	3410e43c 	.word	0x3410e43c

3400b618 <prvInsertTimerInActiveList>:
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

        if( xNextExpiryTime <= xTimeNow )
3400b618:	4291      	cmp	r1, r2
    {
3400b61a:	b508      	push	{r3, lr}
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
3400b61c:	6041      	str	r1, [r0, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
3400b61e:	6100      	str	r0, [r0, #16]
        if( xNextExpiryTime <= xTimeNow )
3400b620:	d80a      	bhi.n	3400b638 <prvInsertTimerInActiveList+0x20>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
3400b622:	1ad2      	subs	r2, r2, r3
3400b624:	6983      	ldr	r3, [r0, #24]
3400b626:	429a      	cmp	r2, r3
3400b628:	d20d      	bcs.n	3400b646 <prvInsertTimerInActiveList+0x2e>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
3400b62a:	4b08      	ldr	r3, [pc, #32]	@ (3400b64c <prvInsertTimerInActiveList+0x34>)
3400b62c:	1d01      	adds	r1, r0, #4
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
3400b62e:	6818      	ldr	r0, [r3, #0]
3400b630:	f7fe fda3 	bl	3400a17a <vListInsert>
        BaseType_t xProcessTimerNow = pdFALSE;
3400b634:	2000      	movs	r0, #0
            }
        }

        return xProcessTimerNow;
    }
3400b636:	bd08      	pop	{r3, pc}
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
3400b638:	429a      	cmp	r2, r3
3400b63a:	d201      	bcs.n	3400b640 <prvInsertTimerInActiveList+0x28>
3400b63c:	4299      	cmp	r1, r3
3400b63e:	d202      	bcs.n	3400b646 <prvInsertTimerInActiveList+0x2e>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
3400b640:	4b03      	ldr	r3, [pc, #12]	@ (3400b650 <prvInsertTimerInActiveList+0x38>)
3400b642:	1d01      	adds	r1, r0, #4
3400b644:	e7f3      	b.n	3400b62e <prvInsertTimerInActiveList+0x16>
                xProcessTimerNow = pdTRUE;
3400b646:	2001      	movs	r0, #1
        return xProcessTimerNow;
3400b648:	e7f5      	b.n	3400b636 <prvInsertTimerInActiveList+0x1e>
3400b64a:	bf00      	nop
3400b64c:	3410ea34 	.word	0x3410ea34
3400b650:	3410ea38 	.word	0x3410ea38

3400b654 <prvReloadTimer>:
    {
3400b654:	b570      	push	{r4, r5, r6, lr}
3400b656:	4604      	mov	r4, r0
3400b658:	460d      	mov	r5, r1
3400b65a:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
3400b65c:	69a1      	ldr	r1, [r4, #24]
3400b65e:	462b      	mov	r3, r5
3400b660:	4632      	mov	r2, r6
3400b662:	4620      	mov	r0, r4
3400b664:	4429      	add	r1, r5
3400b666:	f7ff ffd7 	bl	3400b618 <prvInsertTimerInActiveList>
3400b66a:	b900      	cbnz	r0, 3400b66e <prvReloadTimer+0x1a>
    }
3400b66c:	bd70      	pop	{r4, r5, r6, pc}
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
3400b66e:	69a3      	ldr	r3, [r4, #24]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b670:	4620      	mov	r0, r4
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
3400b672:	441d      	add	r5, r3
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b674:	6a23      	ldr	r3, [r4, #32]
3400b676:	4798      	blx	r3
3400b678:	e7f0      	b.n	3400b65c <prvReloadTimer+0x8>
	...

3400b67c <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b67c:	4b0e      	ldr	r3, [pc, #56]	@ (3400b6b8 <prvProcessExpiredTimer+0x3c>)
    {
3400b67e:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b680:	681b      	ldr	r3, [r3, #0]
    {
3400b682:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b684:	68db      	ldr	r3, [r3, #12]
    {
3400b686:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
3400b688:	68dc      	ldr	r4, [r3, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
3400b68a:	1d20      	adds	r0, r4, #4
3400b68c:	f7fe fd8c 	bl	3400a1a8 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
3400b690:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b694:	075a      	lsls	r2, r3, #29
3400b696:	d509      	bpl.n	3400b6ac <prvProcessExpiredTimer+0x30>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
3400b698:	4632      	mov	r2, r6
3400b69a:	4629      	mov	r1, r5
3400b69c:	4620      	mov	r0, r4
3400b69e:	f7ff ffd9 	bl	3400b654 <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b6a2:	4620      	mov	r0, r4
3400b6a4:	6a23      	ldr	r3, [r4, #32]
    }
3400b6a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b6aa:	4718      	bx	r3
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b6ac:	f023 0301 	bic.w	r3, r3, #1
3400b6b0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
3400b6b4:	e7f5      	b.n	3400b6a2 <prvProcessExpiredTimer+0x26>
3400b6b6:	bf00      	nop
3400b6b8:	3410ea38 	.word	0x3410ea38

3400b6bc <prvSampleTimeNow>:
    {
3400b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400b6be:	4605      	mov	r5, r0
        xTimeNow = xTaskGetTickCount();
3400b6c0:	f7ff fbae 	bl	3400ae20 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
3400b6c4:	4e0d      	ldr	r6, [pc, #52]	@ (3400b6fc <prvSampleTimeNow+0x40>)
        xTimeNow = xTaskGetTickCount();
3400b6c6:	4604      	mov	r4, r0
        if( xTimeNow < xLastTime )
3400b6c8:	6833      	ldr	r3, [r6, #0]
3400b6ca:	4283      	cmp	r3, r0
3400b6cc:	d909      	bls.n	3400b6e2 <prvSampleTimeNow+0x26>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
3400b6ce:	4f0c      	ldr	r7, [pc, #48]	@ (3400b700 <prvSampleTimeNow+0x44>)
3400b6d0:	683b      	ldr	r3, [r7, #0]
3400b6d2:	681a      	ldr	r2, [r3, #0]
3400b6d4:	b952      	cbnz	r2, 3400b6ec <prvSampleTimeNow+0x30>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
3400b6d6:	4a0b      	ldr	r2, [pc, #44]	@ (3400b704 <prvSampleTimeNow+0x48>)
3400b6d8:	6811      	ldr	r1, [r2, #0]
        pxOverflowTimerList = pxTemp;
3400b6da:	6013      	str	r3, [r2, #0]
        pxCurrentTimerList = pxOverflowTimerList;
3400b6dc:	6039      	str	r1, [r7, #0]
            *pxTimerListsWereSwitched = pdTRUE;
3400b6de:	2301      	movs	r3, #1
3400b6e0:	e000      	b.n	3400b6e4 <prvSampleTimeNow+0x28>
3400b6e2:	2300      	movs	r3, #0
    }
3400b6e4:	4620      	mov	r0, r4
            *pxTimerListsWereSwitched = pdTRUE;
3400b6e6:	602b      	str	r3, [r5, #0]
        xLastTime = xTimeNow;
3400b6e8:	6034      	str	r4, [r6, #0]
    }
3400b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
3400b6ec:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
3400b6ee:	f04f 31ff 	mov.w	r1, #4294967295
3400b6f2:	6818      	ldr	r0, [r3, #0]
3400b6f4:	f7ff ffc2 	bl	3400b67c <prvProcessExpiredTimer>
3400b6f8:	e7ea      	b.n	3400b6d0 <prvSampleTimeNow+0x14>
3400b6fa:	bf00      	nop
3400b6fc:	3410ea28 	.word	0x3410ea28
3400b700:	3410ea38 	.word	0x3410ea38
3400b704:	3410ea34 	.word	0x3410ea34

3400b708 <prvTimerTask>:
    {
3400b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400b70c:	4f50      	ldr	r7, [pc, #320]	@ (3400b850 <prvTimerTask+0x148>)
3400b70e:	4e51      	ldr	r6, [pc, #324]	@ (3400b854 <prvTimerTask+0x14c>)
    {
3400b710:	b086      	sub	sp, #24
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400b712:	683b      	ldr	r3, [r7, #0]
3400b714:	f8d3 8000 	ldr.w	r8, [r3]
3400b718:	f1b8 0f00 	cmp.w	r8, #0
3400b71c:	d032      	beq.n	3400b784 <prvTimerTask+0x7c>
3400b71e:	2400      	movs	r4, #0
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
3400b720:	68db      	ldr	r3, [r3, #12]
3400b722:	f8d3 8000 	ldr.w	r8, [r3]
        vTaskSuspendAll();
3400b726:	f7ff fb73 	bl	3400ae10 <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b72a:	a802      	add	r0, sp, #8
3400b72c:	f7ff ffc6 	bl	3400b6bc <prvSampleTimeNow>
            if( xTimerListsWereSwitched == pdFALSE )
3400b730:	9b02      	ldr	r3, [sp, #8]
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b732:	4605      	mov	r5, r0
            if( xTimerListsWereSwitched == pdFALSE )
3400b734:	2b00      	cmp	r3, #0
3400b736:	d13a      	bne.n	3400b7ae <prvTimerTask+0xa6>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
3400b738:	bb34      	cbnz	r4, 3400b788 <prvTimerTask+0x80>
3400b73a:	4540      	cmp	r0, r8
3400b73c:	d32a      	bcc.n	3400b794 <prvTimerTask+0x8c>
                    ( void ) xTaskResumeAll();
3400b73e:	f7ff fc37 	bl	3400afb0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
3400b742:	4629      	mov	r1, r5
3400b744:	4640      	mov	r0, r8
3400b746:	f7ff ff99 	bl	3400b67c <prvProcessExpiredTimer>
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
3400b74a:	2200      	movs	r2, #0
3400b74c:	6830      	ldr	r0, [r6, #0]
3400b74e:	a902      	add	r1, sp, #8
3400b750:	f7fe ff7e 	bl	3400a650 <xQueueReceive>
3400b754:	2800      	cmp	r0, #0
3400b756:	d0dc      	beq.n	3400b712 <prvTimerTask+0xa>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
3400b758:	9b02      	ldr	r3, [sp, #8]
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
3400b75a:	9804      	ldr	r0, [sp, #16]
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
3400b75c:	2b00      	cmp	r3, #0
3400b75e:	db29      	blt.n	3400b7b4 <prvTimerTask+0xac>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
3400b760:	9c04      	ldr	r4, [sp, #16]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
3400b762:	6963      	ldr	r3, [r4, #20]
3400b764:	bb6b      	cbnz	r3, 3400b7c2 <prvTimerTask+0xba>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b766:	a801      	add	r0, sp, #4
3400b768:	f7ff ffa8 	bl	3400b6bc <prvSampleTimeNow>
                switch( xMessage.xMessageID )
3400b76c:	9b02      	ldr	r3, [sp, #8]
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
3400b76e:	4605      	mov	r5, r0
                switch( xMessage.xMessageID )
3400b770:	3b01      	subs	r3, #1
3400b772:	2b08      	cmp	r3, #8
3400b774:	d8e9      	bhi.n	3400b74a <prvTimerTask+0x42>
3400b776:	e8df f003 	tbb	[pc, r3]
3400b77a:	2828      	.short	0x2828
3400b77c:	28644b64 	.word	0x28644b64
3400b780:	6428      	.short	0x6428
3400b782:	4b          	.byte	0x4b
3400b783:	00          	.byte	0x00
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
3400b784:	2401      	movs	r4, #1
3400b786:	e7ce      	b.n	3400b726 <prvTimerTask+0x1e>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
3400b788:	4b33      	ldr	r3, [pc, #204]	@ (3400b858 <prvTimerTask+0x150>)
3400b78a:	681b      	ldr	r3, [r3, #0]
3400b78c:	681c      	ldr	r4, [r3, #0]
3400b78e:	fab4 f484 	clz	r4, r4
3400b792:	0964      	lsrs	r4, r4, #5
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
3400b794:	4622      	mov	r2, r4
3400b796:	6830      	ldr	r0, [r6, #0]
3400b798:	eba8 0105 	sub.w	r1, r8, r5
3400b79c:	f7ff f8fe 	bl	3400a99c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
3400b7a0:	f7ff fc06 	bl	3400afb0 <xTaskResumeAll>
3400b7a4:	2800      	cmp	r0, #0
3400b7a6:	d1d0      	bne.n	3400b74a <prvTimerTask+0x42>
                        portYIELD_WITHIN_API();
3400b7a8:	f000 f8fc 	bl	3400b9a4 <vPortYield>
3400b7ac:	e7cd      	b.n	3400b74a <prvTimerTask+0x42>
                ( void ) xTaskResumeAll();
3400b7ae:	f7ff fbff 	bl	3400afb0 <xTaskResumeAll>
    }
3400b7b2:	e7ca      	b.n	3400b74a <prvTimerTask+0x42>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
3400b7b4:	9b03      	ldr	r3, [sp, #12]
3400b7b6:	9905      	ldr	r1, [sp, #20]
3400b7b8:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
3400b7ba:	9b02      	ldr	r3, [sp, #8]
3400b7bc:	2b00      	cmp	r3, #0
3400b7be:	dbc4      	blt.n	3400b74a <prvTimerTask+0x42>
3400b7c0:	e7ce      	b.n	3400b760 <prvTimerTask+0x58>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
3400b7c2:	1d20      	adds	r0, r4, #4
3400b7c4:	f7fe fcf0 	bl	3400a1a8 <uxListRemove>
3400b7c8:	e7cd      	b.n	3400b766 <prvTimerTask+0x5e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b7ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
3400b7ce:	69a1      	ldr	r1, [r4, #24]
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b7d0:	f043 0301 	orr.w	r3, r3, #1
3400b7d4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
3400b7d8:	9b03      	ldr	r3, [sp, #12]
3400b7da:	4602      	mov	r2, r0
3400b7dc:	4419      	add	r1, r3
3400b7de:	4620      	mov	r0, r4
3400b7e0:	f7ff ff1a 	bl	3400b618 <prvInsertTimerInActiveList>
3400b7e4:	2800      	cmp	r0, #0
3400b7e6:	d0b0      	beq.n	3400b74a <prvTimerTask+0x42>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
3400b7e8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b7ec:	075a      	lsls	r2, r3, #29
3400b7ee:	d50a      	bpl.n	3400b806 <prvTimerTask+0xfe>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
3400b7f0:	69a3      	ldr	r3, [r4, #24]
3400b7f2:	9903      	ldr	r1, [sp, #12]
3400b7f4:	462a      	mov	r2, r5
3400b7f6:	4620      	mov	r0, r4
3400b7f8:	4419      	add	r1, r3
3400b7fa:	f7ff ff2b 	bl	3400b654 <prvReloadTimer>
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
3400b7fe:	4620      	mov	r0, r4
3400b800:	6a23      	ldr	r3, [r4, #32]
3400b802:	4798      	blx	r3
3400b804:	e7a1      	b.n	3400b74a <prvTimerTask+0x42>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b806:	f023 0301 	bic.w	r3, r3, #1
3400b80a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
3400b80e:	e7f6      	b.n	3400b7fe <prvTimerTask+0xf6>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
3400b810:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b814:	f043 0301 	orr.w	r3, r3, #1
3400b818:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
3400b81c:	9903      	ldr	r1, [sp, #12]
3400b81e:	61a1      	str	r1, [r4, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
3400b820:	b941      	cbnz	r1, 3400b834 <prvTimerTask+0x12c>
3400b822:	f000 fa4f 	bl	3400bcc4 <ulSetInterruptMask>
3400b826:	f44f 715d 	mov.w	r1, #884	@ 0x374
3400b82a:	4b0c      	ldr	r3, [pc, #48]	@ (3400b85c <prvTimerTask+0x154>)
3400b82c:	4a0c      	ldr	r2, [pc, #48]	@ (3400b860 <prvTimerTask+0x158>)
3400b82e:	480d      	ldr	r0, [pc, #52]	@ (3400b864 <prvTimerTask+0x15c>)
3400b830:	f013 fcc8 	bl	3401f1c4 <__assert_func>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
3400b834:	4603      	mov	r3, r0
3400b836:	4602      	mov	r2, r0
3400b838:	4401      	add	r1, r0
3400b83a:	4620      	mov	r0, r4
3400b83c:	f7ff feec 	bl	3400b618 <prvInsertTimerInActiveList>
                        break;
3400b840:	e783      	b.n	3400b74a <prvTimerTask+0x42>
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
3400b842:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
3400b846:	f023 0301 	bic.w	r3, r3, #1
3400b84a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                        break;
3400b84e:	e77c      	b.n	3400b74a <prvTimerTask+0x42>
3400b850:	3410ea38 	.word	0x3410ea38
3400b854:	3410ea30 	.word	0x3410ea30
3400b858:	3410ea34 	.word	0x3410ea34
3400b85c:	34026d17 	.word	0x34026d17
3400b860:	34033fec 	.word	0x34033fec
3400b864:	34027cff 	.word	0x34027cff

3400b868 <prvCheckForValidListAndQueue>:
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
3400b868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
3400b86a:	4c11      	ldr	r4, [pc, #68]	@ (3400b8b0 <prvCheckForValidListAndQueue+0x48>)
        taskENTER_CRITICAL();
3400b86c:	f000 f8a6 	bl	3400b9bc <vPortEnterCritical>
            if( xTimerQueue == NULL )
3400b870:	6825      	ldr	r5, [r4, #0]
3400b872:	b9bd      	cbnz	r5, 3400b8a4 <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
3400b874:	4f0f      	ldr	r7, [pc, #60]	@ (3400b8b4 <prvCheckForValidListAndQueue+0x4c>)
                vListInitialise( &xActiveTimerList2 );
3400b876:	4e10      	ldr	r6, [pc, #64]	@ (3400b8b8 <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList1 );
3400b878:	4638      	mov	r0, r7
3400b87a:	f7fe fc65 	bl	3400a148 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
3400b87e:	4630      	mov	r0, r6
3400b880:	f7fe fc62 	bl	3400a148 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
3400b884:	4b0d      	ldr	r3, [pc, #52]	@ (3400b8bc <prvCheckForValidListAndQueue+0x54>)
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b886:	2110      	movs	r1, #16
                pxCurrentTimerList = &xActiveTimerList1;
3400b888:	601f      	str	r7, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
3400b88a:	4b0d      	ldr	r3, [pc, #52]	@ (3400b8c0 <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b88c:	200a      	movs	r0, #10
                pxOverflowTimerList = &xActiveTimerList2;
3400b88e:	601e      	str	r6, [r3, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
3400b890:	4a0c      	ldr	r2, [pc, #48]	@ (3400b8c4 <prvCheckForValidListAndQueue+0x5c>)
3400b892:	4b0d      	ldr	r3, [pc, #52]	@ (3400b8c8 <prvCheckForValidListAndQueue+0x60>)
3400b894:	9500      	str	r5, [sp, #0]
3400b896:	f7fe fd6b 	bl	3400a370 <xQueueGenericCreateStatic>
3400b89a:	6020      	str	r0, [r4, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
3400b89c:	b110      	cbz	r0, 3400b8a4 <prvCheckForValidListAndQueue+0x3c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
3400b89e:	490b      	ldr	r1, [pc, #44]	@ (3400b8cc <prvCheckForValidListAndQueue+0x64>)
3400b8a0:	f7ff f80c 	bl	3400a8bc <vQueueAddToRegistry>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
3400b8a4:	b003      	add	sp, #12
3400b8a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
3400b8aa:	f000 b895 	b.w	3400b9d8 <vPortExitCritical>
3400b8ae:	bf00      	nop
3400b8b0:	3410ea30 	.word	0x3410ea30
3400b8b4:	3410ea50 	.word	0x3410ea50
3400b8b8:	3410ea3c 	.word	0x3410ea3c
3400b8bc:	3410ea38 	.word	0x3410ea38
3400b8c0:	3410ea34 	.word	0x3410ea34
3400b8c4:	3410e988 	.word	0x3410e988
3400b8c8:	3410e938 	.word	0x3410e938
3400b8cc:	34027d37 	.word	0x34027d37

3400b8d0 <xTimerCreateTimerTask>:
    {
3400b8d0:	b510      	push	{r4, lr}
3400b8d2:	b088      	sub	sp, #32
        prvCheckForValidListAndQueue();
3400b8d4:	f7ff ffc8 	bl	3400b868 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
3400b8d8:	4b12      	ldr	r3, [pc, #72]	@ (3400b924 <xTimerCreateTimerTask+0x54>)
3400b8da:	681b      	ldr	r3, [r3, #0]
3400b8dc:	b1b3      	cbz	r3, 3400b90c <xTimerCreateTimerTask+0x3c>
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
3400b8de:	2400      	movs	r4, #0
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
3400b8e0:	aa07      	add	r2, sp, #28
3400b8e2:	a906      	add	r1, sp, #24
3400b8e4:	a805      	add	r0, sp, #20
                StackType_t * pxTimerTaskStackBuffer = NULL;
3400b8e6:	e9cd 4405 	strd	r4, r4, [sp, #20]
                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
3400b8ea:	f013 f96f 	bl	3401ebcc <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
3400b8ee:	9b05      	ldr	r3, [sp, #20]
3400b8f0:	9a07      	ldr	r2, [sp, #28]
3400b8f2:	9302      	str	r3, [sp, #8]
3400b8f4:	9b06      	ldr	r3, [sp, #24]
3400b8f6:	490c      	ldr	r1, [pc, #48]	@ (3400b928 <xTimerCreateTimerTask+0x58>)
3400b8f8:	9301      	str	r3, [sp, #4]
3400b8fa:	2302      	movs	r3, #2
3400b8fc:	480b      	ldr	r0, [pc, #44]	@ (3400b92c <xTimerCreateTimerTask+0x5c>)
3400b8fe:	9300      	str	r3, [sp, #0]
3400b900:	4623      	mov	r3, r4
3400b902:	f7ff f8eb 	bl	3400aadc <xTaskCreateStatic>
3400b906:	4b0a      	ldr	r3, [pc, #40]	@ (3400b930 <xTimerCreateTimerTask+0x60>)
3400b908:	6018      	str	r0, [r3, #0]
                if( xTimerTaskHandle != NULL )
3400b90a:	b940      	cbnz	r0, 3400b91e <xTimerCreateTimerTask+0x4e>
        configASSERT( xReturn );
3400b90c:	f000 f9da 	bl	3400bcc4 <ulSetInterruptMask>
3400b910:	f240 1119 	movw	r1, #281	@ 0x119
3400b914:	4b07      	ldr	r3, [pc, #28]	@ (3400b934 <xTimerCreateTimerTask+0x64>)
3400b916:	4a08      	ldr	r2, [pc, #32]	@ (3400b938 <xTimerCreateTimerTask+0x68>)
3400b918:	4808      	ldr	r0, [pc, #32]	@ (3400b93c <xTimerCreateTimerTask+0x6c>)
3400b91a:	f013 fc53 	bl	3401f1c4 <__assert_func>
    }
3400b91e:	2001      	movs	r0, #1
3400b920:	b008      	add	sp, #32
3400b922:	bd10      	pop	{r4, pc}
3400b924:	3410ea30 	.word	0x3410ea30
3400b928:	34027d3c 	.word	0x34027d3c
3400b92c:	3400b709 	.word	0x3400b709
3400b930:	3410ea2c 	.word	0x3410ea2c
3400b934:	34026d17 	.word	0x34026d17
3400b938:	34034007 	.word	0x34034007
3400b93c:	34027cff 	.word	0x34027cff

3400b940 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
3400b940:	2300      	movs	r3, #0
{
3400b942:	b507      	push	{r0, r1, r2, lr}
    volatile uint32_t ulDummy = 0UL;
3400b944:	9301      	str	r3, [sp, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
3400b946:	4b0a      	ldr	r3, [pc, #40]	@ (3400b970 <prvTaskExitError+0x30>)
3400b948:	681b      	ldr	r3, [r3, #0]
3400b94a:	3301      	adds	r3, #1
3400b94c:	d008      	beq.n	3400b960 <prvTaskExitError+0x20>
3400b94e:	f000 f9b9 	bl	3400bcc4 <ulSetInterruptMask>
3400b952:	f240 310e 	movw	r1, #782	@ 0x30e
3400b956:	4b07      	ldr	r3, [pc, #28]	@ (3400b974 <prvTaskExitError+0x34>)
3400b958:	4a07      	ldr	r2, [pc, #28]	@ (3400b978 <prvTaskExitError+0x38>)
3400b95a:	4808      	ldr	r0, [pc, #32]	@ (3400b97c <prvTaskExitError+0x3c>)
3400b95c:	f013 fc32 	bl	3401f1c4 <__assert_func>
    portDISABLE_INTERRUPTS();
3400b960:	f000 f9b0 	bl	3400bcc4 <ulSetInterruptMask>

    while( ulDummy == 0 )
3400b964:	9b01      	ldr	r3, [sp, #4]
3400b966:	2b00      	cmp	r3, #0
3400b968:	d0fc      	beq.n	3400b964 <prvTaskExitError+0x24>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
3400b96a:	b003      	add	sp, #12
3400b96c:	f85d fb04 	ldr.w	pc, [sp], #4
3400b970:	34108e98 	.word	0x34108e98
3400b974:	34026d17 	.word	0x34026d17
3400b978:	34034050 	.word	0x34034050
3400b97c:	34027d44 	.word	0x34027d44

3400b980 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
3400b980:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
3400b984:	2300      	movs	r3, #0
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
3400b986:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
3400b98a:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
3400b98c:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
3400b98e:	4b04      	ldr	r3, [pc, #16]	@ (3400b9a0 <vPortSetupTimerInterrupt+0x20>)
3400b990:	681b      	ldr	r3, [r3, #0]
3400b992:	fbb3 f3f1 	udiv	r3, r3, r1
3400b996:	3b01      	subs	r3, #1
3400b998:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
3400b99a:	2307      	movs	r3, #7
3400b99c:	6113      	str	r3, [r2, #16]
}
3400b99e:	4770      	bx	lr
3400b9a0:	3410cd9c 	.word	0x3410cd9c

3400b9a4 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
3400b9a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400b9a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400b9ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
3400b9b0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
3400b9b4:	f3bf 8f6f 	isb	sy
}
3400b9b8:	4770      	bx	lr
	...

3400b9bc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
3400b9bc:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
3400b9be:	f000 f981 	bl	3400bcc4 <ulSetInterruptMask>
    ulCriticalNesting++;
3400b9c2:	4a04      	ldr	r2, [pc, #16]	@ (3400b9d4 <vPortEnterCritical+0x18>)
3400b9c4:	6813      	ldr	r3, [r2, #0]
3400b9c6:	3301      	adds	r3, #1
3400b9c8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
3400b9ca:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
3400b9ce:	f3bf 8f6f 	isb	sy
}
3400b9d2:	bd08      	pop	{r3, pc}
3400b9d4:	34108e98 	.word	0x34108e98

3400b9d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
3400b9d8:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
3400b9da:	4b0b      	ldr	r3, [pc, #44]	@ (3400ba08 <vPortExitCritical+0x30>)
3400b9dc:	681a      	ldr	r2, [r3, #0]
3400b9de:	b942      	cbnz	r2, 3400b9f2 <vPortExitCritical+0x1a>
3400b9e0:	f000 f970 	bl	3400bcc4 <ulSetInterruptMask>
3400b9e4:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
3400b9e8:	4b08      	ldr	r3, [pc, #32]	@ (3400ba0c <vPortExitCritical+0x34>)
3400b9ea:	4a09      	ldr	r2, [pc, #36]	@ (3400ba10 <vPortExitCritical+0x38>)
3400b9ec:	4809      	ldr	r0, [pc, #36]	@ (3400ba14 <vPortExitCritical+0x3c>)
3400b9ee:	f013 fbe9 	bl	3401f1c4 <__assert_func>
    ulCriticalNesting--;
3400b9f2:	681a      	ldr	r2, [r3, #0]
3400b9f4:	3a01      	subs	r2, #1
3400b9f6:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
3400b9f8:	6818      	ldr	r0, [r3, #0]
3400b9fa:	b918      	cbnz	r0, 3400ba04 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
    }
}
3400b9fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
3400ba00:	f000 b96b 	b.w	3400bcda <vClearInterruptMask>
}
3400ba04:	bd08      	pop	{r3, pc}
3400ba06:	bf00      	nop
3400ba08:	34108e98 	.word	0x34108e98
3400ba0c:	34026d17 	.word	0x34026d17
3400ba10:	34034073 	.word	0x34034073
3400ba14:	34027d44 	.word	0x34027d44

3400ba18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
3400ba18:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
3400ba1a:	f000 f953 	bl	3400bcc4 <ulSetInterruptMask>
3400ba1e:	4604      	mov	r4, r0
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
3400ba20:	f7ff fa0a 	bl	3400ae38 <xTaskIncrementTick>
3400ba24:	b128      	cbz	r0, 3400ba32 <SysTick_Handler+0x1a>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
3400ba26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400ba2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3400ba2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
3400ba32:	4620      	mov	r0, r4
}
3400ba34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
3400ba38:	f000 b94f 	b.w	3400bcda <vClearInterruptMask>

3400ba3c <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
3400ba3c:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
3400ba3e:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
3400ba40:	f813 3c02 	ldrb.w	r3, [r3, #-2]
3400ba44:	2b66      	cmp	r3, #102	@ 0x66
3400ba46:	d111      	bne.n	3400ba6c <vPortSVCHandler_C+0x30>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
3400ba48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400ba4c:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
3400ba50:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
3400ba54:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
3400ba58:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
3400ba5c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
3400ba60:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
    }
}
3400ba64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
3400ba68:	f000 b8fa 	b.w	3400bc60 <vRestoreContextOfFirstTask>
            configASSERT( pdFALSE );
3400ba6c:	f000 f92a 	bl	3400bcc4 <ulSetInterruptMask>
3400ba70:	f240 414d 	movw	r1, #1101	@ 0x44d
3400ba74:	4b02      	ldr	r3, [pc, #8]	@ (3400ba80 <vPortSVCHandler_C+0x44>)
3400ba76:	4a03      	ldr	r2, [pc, #12]	@ (3400ba84 <vPortSVCHandler_C+0x48>)
3400ba78:	4803      	ldr	r0, [pc, #12]	@ (3400ba88 <vPortSVCHandler_C+0x4c>)
3400ba7a:	f013 fba3 	bl	3401f1c4 <__assert_func>
3400ba7e:	bf00      	nop
3400ba80:	34026d17 	.word	0x34026d17
3400ba84:	34034061 	.word	0x34034061
3400ba88:	34027d44 	.word	0x34027d44

3400ba8c <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
3400ba8c:	b510      	push	{r4, lr}
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
3400ba8e:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
3400ba92:	e940 2402 	strd	r2, r4, [r0, #-8]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
3400ba96:	4a18      	ldr	r2, [pc, #96]	@ (3400baf8 <pxPortInitialiseStack+0x6c>)
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400ba98:	f04f 3412 	mov.w	r4, #303174162	@ 0x12121212
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
3400ba9c:	f840 2c0c 	str.w	r2, [r0, #-12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400baa0:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400baa4:	f04f 3c02 	mov.w	ip, #33686018	@ 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
3400baa8:	e940 2405 	strd	r2, r4, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400baac:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
3400bab0:	f840 3c20 	str.w	r3, [r0, #-32]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
3400bab4:	e940 2c07 	strd	r2, ip, [r0, #-28]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
3400bab8:	f04f 3310 	mov.w	r3, #269488144	@ 0x10101010
3400babc:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400bac0:	f04f 3409 	mov.w	r4, #151587081	@ 0x9090909
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
3400bac4:	e940 320a 	strd	r3, r2, [r0, #-40]	@ 0x28
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400bac8:	f04f 3308 	mov.w	r3, #134744072	@ 0x8080808
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400bacc:	f04f 3c07 	mov.w	ip, #117901063	@ 0x7070707
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
3400bad0:	e940 340c 	strd	r3, r4, [r0, #-48]	@ 0x30
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400bad4:	f04f 3306 	mov.w	r3, #101058054	@ 0x6060606
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
3400bad8:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
3400badc:	e940 3c0e 	strd	r3, ip, [r0, #-56]	@ 0x38
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
3400bae0:	f04f 3304 	mov.w	r3, #67372036	@ 0x4040404
3400bae4:	e940 3210 	strd	r3, r2, [r0, #-64]	@ 0x40
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
3400bae8:	f06f 0302 	mvn.w	r3, #2
3400baec:	f840 3c44 	str.w	r3, [r0, #-68]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
3400baf0:	f840 1d48 	str.w	r1, [r0, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
3400baf4:	bd10      	pop	{r4, pc}
3400baf6:	bf00      	nop
3400baf8:	3400b941 	.word	0x3400b941

3400bafc <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
3400bafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
3400bafe:	2300      	movs	r3, #0
3400bb00:	9303      	str	r3, [sp, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
3400bb02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400bb06:	f8d3 2d1c 	ldr.w	r2, [r3, #3356]	@ 0xd1c
3400bb0a:	9202      	str	r2, [sp, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
3400bb0c:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
3400bb10:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
3400bb14:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
3400bb18:	4a2c      	ldr	r2, [pc, #176]	@ (3400bbcc <xPortStartScheduler+0xd0>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
3400bb1a:	0e1b      	lsrs	r3, r3, #24
3400bb1c:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
3400bb20:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bb24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
3400bb28:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
3400bb2a:	b943      	cbnz	r3, 3400bb3e <xPortStartScheduler+0x42>
3400bb2c:	f000 f8ca 	bl	3400bcc4 <ulSetInterruptMask>
3400bb30:	f44f 61c7 	mov.w	r1, #1592	@ 0x638
3400bb34:	4b26      	ldr	r3, [pc, #152]	@ (3400bbd0 <xPortStartScheduler+0xd4>)
3400bb36:	4a27      	ldr	r2, [pc, #156]	@ (3400bbd4 <xPortStartScheduler+0xd8>)

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
3400bb38:	4827      	ldr	r0, [pc, #156]	@ (3400bbd8 <xPortStartScheduler+0xdc>)
3400bb3a:	f013 fb43 	bl	3401f1c4 <__assert_func>
3400bb3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bb42:	43db      	mvns	r3, r3
3400bb44:	f013 0f50 	tst.w	r3, #80	@ 0x50
3400bb48:	d00e      	beq.n	3400bb68 <xPortStartScheduler+0x6c>
3400bb4a:	f000 f8bb 	bl	3400bcc4 <ulSetInterruptMask>
3400bb4e:	f240 613c 	movw	r1, #1596	@ 0x63c
3400bb52:	4b1f      	ldr	r3, [pc, #124]	@ (3400bbd0 <xPortStartScheduler+0xd4>)
3400bb54:	4a1f      	ldr	r2, [pc, #124]	@ (3400bbd4 <xPortStartScheduler+0xd8>)
3400bb56:	e7ef      	b.n	3400bb38 <xPortStartScheduler+0x3c>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
3400bb58:	3301      	adds	r3, #1
3400bb5a:	9303      	str	r3, [sp, #12]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
3400bb5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bb60:	005b      	lsls	r3, r3, #1
3400bb62:	b2db      	uxtb	r3, r3
3400bb64:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
3400bb68:	f89d 3007 	ldrb.w	r3, [sp, #7]
3400bb6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
            ulImplementedPrioBits++;
3400bb70:	9b03      	ldr	r3, [sp, #12]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
3400bb72:	d1f1      	bne.n	3400bb58 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
3400bb74:	2b08      	cmp	r3, #8
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
3400bb76:	bf0c      	ite	eq
3400bb78:	2300      	moveq	r3, #0
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
3400bb7a:	9b03      	ldrne	r3, [sp, #12]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
3400bb7c:	4a17      	ldr	r2, [pc, #92]	@ (3400bbdc <xPortStartScheduler+0xe0>)
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
3400bb7e:	bf18      	it	ne
3400bb80:	f1c3 0307 	rsbne	r3, r3, #7
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
3400bb84:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
3400bb86:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3400bb8a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
3400bb8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
3400bb90:	2400      	movs	r4, #0
        portNVIC_SHPR2_REG = ulOriginalPriority;
3400bb92:	9a02      	ldr	r2, [sp, #8]
3400bb94:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
3400bb98:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
3400bb9c:	f442 027f 	orr.w	r2, r2, #16711680	@ 0xff0000
3400bba0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
3400bba4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
3400bba8:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
3400bbac:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
3400bbb0:	f7ff fee6 	bl	3400b980 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
3400bbb4:	4b0a      	ldr	r3, [pc, #40]	@ (3400bbe0 <xPortStartScheduler+0xe4>)
3400bbb6:	601c      	str	r4, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
3400bbb8:	f000 f872 	bl	3400bca0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
3400bbbc:	f7ff fab6 	bl	3400b12c <vTaskSwitchContext>
    prvTaskExitError();
3400bbc0:	f7ff febe 	bl	3400b940 <prvTaskExitError>

    /* Should not get here. */
    return 0;
}
3400bbc4:	4620      	mov	r0, r4
3400bbc6:	b004      	add	sp, #16
3400bbc8:	bd10      	pop	{r4, pc}
3400bbca:	bf00      	nop
3400bbcc:	3410ea68 	.word	0x3410ea68
3400bbd0:	34026d17 	.word	0x34026d17
3400bbd4:	3403403c 	.word	0x3403403c
3400bbd8:	34027d44 	.word	0x34027d44
3400bbdc:	3410ea64 	.word	0x3410ea64
3400bbe0:	34108e98 	.word	0x34108e98

3400bbe4 <xPortIsInsideInterrupt>:
    BaseType_t xReturn;

    /* Obtain the number of the currently executing interrupt. Interrupt Program
     * Status Register (IPSR) holds the exception number of the currently-executing
     * exception or zero for Thread mode.*/
    __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
3400bbe4:	f3ef 8005 	mrs	r0, IPSR
    {
        xReturn = pdTRUE;
    }

    return xReturn;
}
3400bbe8:	3800      	subs	r0, #0
3400bbea:	bf18      	it	ne
3400bbec:	2001      	movne	r0, #1
3400bbee:	4770      	bx	lr

3400bbf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
3400bbf0:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
3400bbf2:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
3400bbf6:	2b0f      	cmp	r3, #15
3400bbf8:	d90e      	bls.n	3400bc18 <vPortValidateInterruptPriority+0x28>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
3400bbfa:	4a10      	ldr	r2, [pc, #64]	@ (3400bc3c <vPortValidateInterruptPriority+0x4c>)
3400bbfc:	5c9b      	ldrb	r3, [r3, r2]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
3400bbfe:	4a10      	ldr	r2, [pc, #64]	@ (3400bc40 <vPortValidateInterruptPriority+0x50>)
3400bc00:	7812      	ldrb	r2, [r2, #0]
3400bc02:	429a      	cmp	r2, r3
3400bc04:	d908      	bls.n	3400bc18 <vPortValidateInterruptPriority+0x28>
3400bc06:	f000 f85d 	bl	3400bcc4 <ulSetInterruptMask>
3400bc0a:	f44f 61f1 	mov.w	r1, #1928	@ 0x788
3400bc0e:	4b0d      	ldr	r3, [pc, #52]	@ (3400bc44 <vPortValidateInterruptPriority+0x54>)
3400bc10:	4a0d      	ldr	r2, [pc, #52]	@ (3400bc48 <vPortValidateInterruptPriority+0x58>)
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
3400bc12:	480e      	ldr	r0, [pc, #56]	@ (3400bc4c <vPortValidateInterruptPriority+0x5c>)
3400bc14:	f013 fad6 	bl	3401f1c4 <__assert_func>
3400bc18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3400bc1c:	4a0c      	ldr	r2, [pc, #48]	@ (3400bc50 <vPortValidateInterruptPriority+0x60>)
3400bc1e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
3400bc22:	6812      	ldr	r2, [r2, #0]
3400bc24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3400bc28:	4293      	cmp	r3, r2
3400bc2a:	d906      	bls.n	3400bc3a <vPortValidateInterruptPriority+0x4a>
3400bc2c:	f000 f84a 	bl	3400bcc4 <ulSetInterruptMask>
3400bc30:	f44f 61f3 	mov.w	r1, #1944	@ 0x798
3400bc34:	4b03      	ldr	r3, [pc, #12]	@ (3400bc44 <vPortValidateInterruptPriority+0x54>)
3400bc36:	4a04      	ldr	r2, [pc, #16]	@ (3400bc48 <vPortValidateInterruptPriority+0x58>)
3400bc38:	e7eb      	b.n	3400bc12 <vPortValidateInterruptPriority+0x22>
    }
3400bc3a:	bd08      	pop	{r3, pc}
3400bc3c:	e000e3f0 	.word	0xe000e3f0
3400bc40:	3410ea68 	.word	0x3410ea68
3400bc44:	34026d17 	.word	0x34026d17
3400bc48:	3403401d 	.word	0x3403401d
3400bc4c:	34027d44 	.word	0x34027d44
3400bc50:	3410ea64 	.word	0x3410ea64
	...

3400bc60 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400bc60:	4a0b      	ldr	r2, [pc, #44]	@ (3400bc90 <pxCurrentTCBConst2>)
3400bc62:	6811      	ldr	r1, [r2, #0]
3400bc64:	6808      	ldr	r0, [r1, #0]
3400bc66:	c806      	ldmia	r0!, {r1, r2}
3400bc68:	f381 880b 	msr	PSPLIM, r1
3400bc6c:	2102      	movs	r1, #2
3400bc6e:	f381 8814 	msr	CONTROL, r1
3400bc72:	3020      	adds	r0, #32
3400bc74:	f380 8809 	msr	PSP, r0
3400bc78:	f3bf 8f6f 	isb	sy
3400bc7c:	f04f 0000 	mov.w	r0, #0
3400bc80:	f380 8811 	msr	BASEPRI, r0
3400bc84:	4710      	bx	r2
3400bc86:	bf00      	nop
3400bc88:	f3af 8000 	nop.w
3400bc8c:	f3af 8000 	nop.w

3400bc90 <pxCurrentTCBConst2>:
3400bc90:	3410e934 	.word	0x3410e934
	...

3400bca0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400bca0:	4807      	ldr	r0, [pc, #28]	@ (3400bcc0 <xVTORConst>)
3400bca2:	6800      	ldr	r0, [r0, #0]
3400bca4:	6800      	ldr	r0, [r0, #0]
3400bca6:	f380 8808 	msr	MSP, r0
3400bcaa:	b662      	cpsie	i
3400bcac:	b661      	cpsie	f
3400bcae:	f3bf 8f4f 	dsb	sy
3400bcb2:	f3bf 8f6f 	isb	sy
3400bcb6:	df66      	svc	102	@ 0x66
3400bcb8:	bf00      	nop
3400bcba:	bf00      	nop
3400bcbc:	f3af 8000 	nop.w

3400bcc0 <xVTORConst>:
3400bcc0:	e000ed08 	.word	0xe000ed08

3400bcc4 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400bcc4:	f3ef 8011 	mrs	r0, BASEPRI
3400bcc8:	f04f 0150 	mov.w	r1, #80	@ 0x50
3400bccc:	f381 8811 	msr	BASEPRI, r1
3400bcd0:	f3bf 8f4f 	dsb	sy
3400bcd4:	f3bf 8f6f 	isb	sy
3400bcd8:	4770      	bx	lr

3400bcda <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
3400bcda:	f380 8811 	msr	BASEPRI, r0
3400bcde:	f3bf 8f4f 	dsb	sy
3400bce2:	f3bf 8f6f 	isb	sy
3400bce6:	4770      	bx	lr
	...

3400bcf0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400bcf0:	f3ef 8009 	mrs	r0, PSP
3400bcf4:	f01e 0f10 	tst.w	lr, #16
3400bcf8:	bf08      	it	eq
3400bcfa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
3400bcfe:	f3ef 820b 	mrs	r2, PSPLIM
3400bd02:	4673      	mov	r3, lr
3400bd04:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
3400bd08:	4a11      	ldr	r2, [pc, #68]	@ (3400bd50 <pxCurrentTCBConst>)
3400bd0a:	6811      	ldr	r1, [r2, #0]
3400bd0c:	6008      	str	r0, [r1, #0]
3400bd0e:	f04f 0050 	mov.w	r0, #80	@ 0x50
3400bd12:	f380 8811 	msr	BASEPRI, r0
3400bd16:	f3bf 8f4f 	dsb	sy
3400bd1a:	f3bf 8f6f 	isb	sy
3400bd1e:	f7ff fa05 	bl	3400b12c <vTaskSwitchContext>
3400bd22:	f04f 0000 	mov.w	r0, #0
3400bd26:	f380 8811 	msr	BASEPRI, r0
3400bd2a:	4a09      	ldr	r2, [pc, #36]	@ (3400bd50 <pxCurrentTCBConst>)
3400bd2c:	6811      	ldr	r1, [r2, #0]
3400bd2e:	6808      	ldr	r0, [r1, #0]
3400bd30:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
3400bd34:	f013 0f10 	tst.w	r3, #16
3400bd38:	bf08      	it	eq
3400bd3a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
3400bd3e:	f382 880b 	msr	PSPLIM, r2
3400bd42:	f380 8809 	msr	PSP, r0
3400bd46:	4718      	bx	r3
3400bd48:	f3af 8000 	nop.w
3400bd4c:	f3af 8000 	nop.w

3400bd50 <pxCurrentTCBConst>:
3400bd50:	3410e934 	.word	0x3410e934
	...

3400bd60 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
3400bd60:	f01e 0f04 	tst.w	lr, #4
3400bd64:	bf0c      	ite	eq
3400bd66:	f3ef 8008 	mrseq	r0, MSP
3400bd6a:	f3ef 8009 	mrsne	r0, PSP
3400bd6e:	4904      	ldr	r1, [pc, #16]	@ (3400bd80 <svchandler_address_const>)
3400bd70:	4708      	bx	r1
3400bd72:	bf00      	nop
3400bd74:	f3af 8000 	nop.w
3400bd78:	f3af 8000 	nop.w
3400bd7c:	f3af 8000 	nop.w

3400bd80 <svchandler_address_const>:
3400bd80:	3400ba3d 	.word	0x3400ba3d

3400bd84 <app_postprocess_init_pd>:

int32_t app_postprocess_init_pd(void *params_postprocess)
{
  int32_t error;
  pd_model_pp_static_param_t *params = (pd_model_pp_static_param_t *) params_postprocess;
  params->width = AI_PD_MODEL_PP_WIDTH;
3400bd84:	23c0      	movs	r3, #192	@ 0xc0
{
3400bd86:	b500      	push	{lr}
  params->height = AI_PD_MODEL_PP_HEIGHT;
3400bd88:	e9c0 3300 	strd	r3, r3, [r0]
  params->nb_keypoints = AI_PD_MODEL_PP_NB_KEYPOINTS;
3400bd8c:	2307      	movs	r3, #7
3400bd8e:	6083      	str	r3, [r0, #8]
  params->conf_threshold = AI_PD_MODEL_PP_CONF_THRESHOLD;
3400bd90:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
  params->iou_threshold = AI_PD_MODEL_PP_IOU_THRESHOLD;
  params->nb_total_boxes = AI_PD_MODEL_PP_TOTAL_DETECTIONS;
  params->max_boxes_limit = AI_PD_MODEL_PP_MAX_BOXES_LIMIT;
3400bd94:	2114      	movs	r1, #20
  params->conf_threshold = AI_PD_MODEL_PP_CONF_THRESHOLD;
3400bd96:	60c3      	str	r3, [r0, #12]
  params->iou_threshold = AI_PD_MODEL_PP_IOU_THRESHOLD;
3400bd98:	4b0a      	ldr	r3, [pc, #40]	@ (3400bdc4 <app_postprocess_init_pd+0x40>)
  params->pAnchors = g_Anchors;
  for (int i = 0; i < AI_PD_MODEL_PP_MAX_BOXES_LIMIT; i++) {
3400bd9a:	f041 e001 	dls	lr, r1
  params->iou_threshold = AI_PD_MODEL_PP_IOU_THRESHOLD;
3400bd9e:	6103      	str	r3, [r0, #16]
  params->max_boxes_limit = AI_PD_MODEL_PP_MAX_BOXES_LIMIT;
3400bda0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
3400bda4:	e9c0 3105 	strd	r3, r1, [r0, #20]
  params->pAnchors = g_Anchors;
3400bda8:	4b07      	ldr	r3, [pc, #28]	@ (3400bdc8 <app_postprocess_init_pd+0x44>)
3400bdaa:	4a08      	ldr	r2, [pc, #32]	@ (3400bdcc <app_postprocess_init_pd+0x48>)
3400bdac:	61c3      	str	r3, [r0, #28]
  for (int i = 0; i < AI_PD_MODEL_PP_MAX_BOXES_LIMIT; i++) {
3400bdae:	4b08      	ldr	r3, [pc, #32]	@ (3400bdd0 <app_postprocess_init_pd+0x4c>)
    out_detections[i].pKps = &out_keyPoints[i][0];
3400bdb0:	615a      	str	r2, [r3, #20]
  for (int i = 0; i < AI_PD_MODEL_PP_MAX_BOXES_LIMIT; i++) {
3400bdb2:	3238      	adds	r2, #56	@ 0x38
3400bdb4:	3318      	adds	r3, #24
3400bdb6:	f00f c805 	le	lr, 3400bdb0 <app_postprocess_init_pd+0x2c>
  }
  error = pd_model_pp_reset(params);
  return error;
}
3400bdba:	f85d eb04 	ldr.w	lr, [sp], #4
  error = pd_model_pp_reset(params);
3400bdbe:	f000 bc79 	b.w	3400c6b4 <pd_model_pp_reset>
3400bdc2:	bf00      	nop
3400bdc4:	3ecccccd 	.word	0x3ecccccd
3400bdc8:	34108e9c 	.word	0x34108e9c
3400bdcc:	3410ea6c 	.word	0x3410ea6c
3400bdd0:	3410eecc 	.word	0x3410eecc

3400bdd4 <app_postprocess_run_pd>:

int32_t app_postprocess_run_pd(void *pInput[], int nb_input, void *pOutput, void *pInput_param)
{
3400bdd4:	b513      	push	{r0, r1, r4, lr}
3400bdd6:	460c      	mov	r4, r1
  assert(nb_input == 2);
3400bdd8:	2c02      	cmp	r4, #2
{
3400bdda:	4611      	mov	r1, r2
3400bddc:	461a      	mov	r2, r3
  assert(nb_input == 2);
3400bdde:	d005      	beq.n	3400bdec <app_postprocess_run_pd+0x18>
3400bde0:	2160      	movs	r1, #96	@ 0x60
3400bde2:	4b08      	ldr	r3, [pc, #32]	@ (3400be04 <app_postprocess_run_pd+0x30>)
3400bde4:	4a08      	ldr	r2, [pc, #32]	@ (3400be08 <app_postprocess_run_pd+0x34>)
3400bde6:	4809      	ldr	r0, [pc, #36]	@ (3400be0c <app_postprocess_run_pd+0x38>)
3400bde8:	f013 f9ec 	bl	3401f1c4 <__assert_func>
  pd_postprocess_out_t *pPdOutput = (pd_postprocess_out_t *) pOutput;
  pd_model_pp_in_t pp_input = {
3400bdec:	6803      	ldr	r3, [r0, #0]
3400bdee:	9300      	str	r3, [sp, #0]
3400bdf0:	6843      	ldr	r3, [r0, #4]
    .pProbs = (float32_t *) pInput[0],
    .pBoxes = (float32_t *) pInput[1],
  };
  int32_t error;
  pPdOutput->pOutData = out_detections;
  error = pd_model_pp_process(&pp_input, pPdOutput,
3400bdf2:	4668      	mov	r0, sp
  pd_model_pp_in_t pp_input = {
3400bdf4:	9301      	str	r3, [sp, #4]
  pPdOutput->pOutData = out_detections;
3400bdf6:	4b06      	ldr	r3, [pc, #24]	@ (3400be10 <app_postprocess_run_pd+0x3c>)
3400bdf8:	600b      	str	r3, [r1, #0]
  error = pd_model_pp_process(&pp_input, pPdOutput,
3400bdfa:	f000 fc5d 	bl	3400c6b8 <pd_model_pp_process>
                              (pd_model_pp_static_param_t *) pInput_param);

  return error;
}
3400bdfe:	b002      	add	sp, #8
3400be00:	bd10      	pop	{r4, pc}
3400be02:	bf00      	nop
3400be04:	34027d9f 	.word	0x34027d9f
3400be08:	34034085 	.word	0x34034085
3400be0c:	34027dad 	.word	0x34027dad
3400be10:	3410eecc 	.word	0x3410eecc

3400be14 <app_postprocess_init>:
int32_t app_postprocess_init(void *params_postprocess)
{
  int32_t error = AI_OD_POSTPROCESS_ERROR_NO;
  st_yolox_pp_static_param_t *params = (st_yolox_pp_static_param_t *) params_postprocess;
  params->nb_classes = AI_OD_ST_YOLOX_PP_NB_CLASSES;
  params->nb_anchors = AI_OD_ST_YOLOX_PP_NB_ANCHORS;
3400be14:	2203      	movs	r2, #3
3400be16:	2101      	movs	r1, #1
3400be18:	e9c0 1200 	strd	r1, r2, [r0]
  params->grid_width_L = AI_OD_ST_YOLOX_PP_L_GRID_WIDTH;
3400be1c:	223c      	movs	r2, #60	@ 0x3c
  params->grid_height_L = AI_OD_ST_YOLOX_PP_L_GRID_HEIGHT;
3400be1e:	e9c0 2202 	strd	r2, r2, [r0, #8]
  params->grid_width_M = AI_OD_ST_YOLOX_PP_M_GRID_WIDTH;
3400be22:	221e      	movs	r2, #30
  params->grid_height_M = AI_OD_ST_YOLOX_PP_M_GRID_HEIGHT;
3400be24:	e9c0 2204 	strd	r2, r2, [r0, #16]
  params->grid_width_S = AI_OD_ST_YOLOX_PP_S_GRID_WIDTH;
3400be28:	220f      	movs	r2, #15
  params->grid_height_S = AI_OD_ST_YOLOX_PP_S_GRID_HEIGHT;
3400be2a:	e9c0 2206 	strd	r2, r2, [r0, #24]
  params->pAnchors_L = AI_OD_ST_YOLOX_PP_L_ANCHORS;
3400be2e:	4a07      	ldr	r2, [pc, #28]	@ (3400be4c <app_postprocess_init+0x38>)
3400be30:	6302      	str	r2, [r0, #48]	@ 0x30
  params->pAnchors_M = AI_OD_ST_YOLOX_PP_M_ANCHORS;
3400be32:	4a07      	ldr	r2, [pc, #28]	@ (3400be50 <app_postprocess_init+0x3c>)
3400be34:	6342      	str	r2, [r0, #52]	@ 0x34
  params->pAnchors_S = AI_OD_ST_YOLOX_PP_S_ANCHORS;
3400be36:	4a07      	ldr	r2, [pc, #28]	@ (3400be54 <app_postprocess_init+0x40>)
3400be38:	6382      	str	r2, [r0, #56]	@ 0x38
  params->max_boxes_limit = AI_OD_ST_YOLOX_PP_MAX_BOXES_LIMIT;
3400be3a:	220a      	movs	r2, #10
3400be3c:	6242      	str	r2, [r0, #36]	@ 0x24
  params->conf_threshold = AI_OD_ST_YOLOX_PP_CONF_THRESHOLD;
3400be3e:	4a06      	ldr	r2, [pc, #24]	@ (3400be58 <app_postprocess_init+0x44>)
3400be40:	6282      	str	r2, [r0, #40]	@ 0x28
  params->iou_threshold = AI_OD_ST_YOLOX_PP_IOU_THRESHOLD;
3400be42:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
3400be46:	62c2      	str	r2, [r0, #44]	@ 0x2c
  error = od_st_yolox_pp_reset(params);
3400be48:	f000 bc0b 	b.w	3400c662 <od_st_yolox_pp_reset>
3400be4c:	340340e0 	.word	0x340340e0
3400be50:	340340c8 	.word	0x340340c8
3400be54:	340340b0 	.word	0x340340b0
3400be58:	3f19999a 	.word	0x3f19999a

3400be5c <app_postprocess_run>:
  return error;
}

int32_t app_postprocess_run(void *pInput[], int nb_input, void *pOutput, void *pInput_param)
{
3400be5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3400be5e:	460c      	mov	r4, r1
  assert(nb_input == 3);
3400be60:	2c03      	cmp	r4, #3
{
3400be62:	4611      	mov	r1, r2
3400be64:	461a      	mov	r2, r3
  assert(nb_input == 3);
3400be66:	d005      	beq.n	3400be74 <app_postprocess_run+0x18>
3400be68:	2131      	movs	r1, #49	@ 0x31
3400be6a:	4b08      	ldr	r3, [pc, #32]	@ (3400be8c <app_postprocess_run+0x30>)
3400be6c:	4a08      	ldr	r2, [pc, #32]	@ (3400be90 <app_postprocess_run+0x34>)
3400be6e:	4809      	ldr	r0, [pc, #36]	@ (3400be94 <app_postprocess_run+0x38>)
3400be70:	f013 f9a8 	bl	3401f1c4 <__assert_func>
  int32_t error = AI_OD_POSTPROCESS_ERROR_NO;
  od_pp_out_t *pObjDetOutput = (od_pp_out_t *) pOutput;
  st_yolox_pp_in_t pp_input = {
3400be74:	6843      	ldr	r3, [r0, #4]
3400be76:	9301      	str	r3, [sp, #4]
3400be78:	6883      	ldr	r3, [r0, #8]
3400be7a:	9302      	str	r3, [sp, #8]
3400be7c:	6803      	ldr	r3, [r0, #0]
      .pRaw_detections_S = (float32_t *) pInput[0],
      .pRaw_detections_L = (float32_t *) pInput[1],
      .pRaw_detections_M = (float32_t *) pInput[2],
  };
  error = od_st_yolox_pp_process(&pp_input, pObjDetOutput,
3400be7e:	a801      	add	r0, sp, #4
  st_yolox_pp_in_t pp_input = {
3400be80:	9303      	str	r3, [sp, #12]
  error = od_st_yolox_pp_process(&pp_input, pObjDetOutput,
3400be82:	f000 fbf2 	bl	3400c66a <od_st_yolox_pp_process>
                                 (st_yolox_pp_static_param_t *) pInput_param);
  return error;
}
3400be86:	b004      	add	sp, #16
3400be88:	bd10      	pop	{r4, pc}
3400be8a:	bf00      	nop
3400be8c:	34027e02 	.word	0x34027e02
3400be90:	3403409c 	.word	0x3403409c
3400be94:	34027e10 	.word	0x34027e10

3400be98 <IPL_resize_bilinear_iu8ou8_with_strides_RGB>:
                                             const size_t stride_out,
                                             const size_t width_in,
                                             const size_t height_in,
                                             const size_t width_out,
                                             const size_t height_out)
{ 
3400be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400be9c:	ed2d 8b08 	vpush	{d8-d11}
3400bea0:	b083      	sub	sp, #12
    float32_t inv_width_scale, inv_height_scale;
    inv_width_scale = ((float32_t)width_in) / ((float32_t) width_out);
3400bea2:	eddd 7a14 	vldr	s15, [sp, #80]	@ 0x50
3400bea6:	eef8 4a67 	vcvt.f32.u32	s9, s15
3400beaa:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
3400beae:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400beb2:	ee84 2aa7 	vdiv.f32	s4, s9, s15
    inv_height_scale = ((float32_t)height_in) / ((float32_t)height_out);
3400beb6:	eddd 7a15 	vldr	s15, [sp, #84]	@ 0x54

__extension__ extern __inline mve_pred16_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vctp32q (uint32_t __a)
{
  return __builtin_mve_vctp32qv4bi (__a);
3400beba:	2403      	movs	r4, #3
3400bebc:	eeb8 4a67 	vcvt.f32.u32	s8, s15
3400bec0:	eddd 7a17 	vldr	s15, [sp, #92]	@ 0x5c

__extension__ extern __inline void
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vstrbq_p_u32 (uint8_t * __addr, uint32x4_t __value, mve_pred16_t __p)
{
  __builtin_mve_vstrbq_p_uv4si ((__builtin_neon_qi *) __addr, __value, __p);
3400bec4:	f024 e801 	bfcsel	0, 3400beca <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0x32>, 2, ls
3400bec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
  return __builtin_mve_vdupq_n_uv4si (__a);
3400becc:	25ff      	movs	r5, #255	@ 0xff
  __builtin_mve_vstrbq_p_uv4si ((__builtin_neon_qi *) __addr, __value, __p);
3400bece:	eefd 4a10 	vmrs	r4, <impl def 0xd>
3400bed2:	eec4 1a27 	vdiv.f32	s3, s8, s15

    uint8_t * out_data_current_ptr = out_data;
    uint8_t * out_data_ptr;

    for (size_t h = 0; h < height_out; h++)
3400bed6:	2600      	movs	r6, #0
    {
        float32_t Y = MIN(MAX(-0.5f + inv_height_scale*(h + 0.5f),0.0f),(float32_t)height_in-1);
3400bed8:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
  return __builtin_mve_vdupq_n_uv4si (__a);
3400bedc:	eea8 5b10 	vdup.32	q4, r5
  __builtin_mve_vstrbq_p_uv4si ((__builtin_neon_qi *) __addr, __value, __p);
3400bee0:	b2a4      	uxth	r4, r4
{ 
3400bee2:	9300      	str	r3, [sp, #0]
3400bee4:	9401      	str	r4, [sp, #4]
    for (size_t h = 0; h < height_out; h++)
3400bee6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
3400bee8:	429e      	cmp	r6, r3
3400beea:	d104      	bne.n	3400bef6 <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0x5e>
            IPL_bilinear_iu8ou8_kernel_RGB(in_data_ptr, out_data_ptr, inc, weights);
            out_data_ptr +=3;
        }
        out_data_current_ptr += stride_out;
    }  
}
3400beec:	b003      	add	sp, #12
3400beee:	ecbd 8b08 	vpop	{d8-d11}
3400bef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        float32_t Y = MIN(MAX(-0.5f + inv_height_scale*(h + 0.5f),0.0f),(float32_t)height_in-1);
3400bef6:	ee07 6a90 	vmov	s15, r6
3400befa:	eefe 2a00 	vmov.f32	s5, #224	@ 0xbf000000 -0.5
3400befe:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400bf02:	eef0 5a62 	vmov.f32	s11, s5
3400bf06:	ee77 7aa3 	vadd.f32	s15, s15, s7
3400bf0a:	eee7 5aa1 	vfma.f32	s11, s15, s3
3400bf0e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3400bf12:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
3400bf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bf1a:	ee74 7a45 	vsub.f32	s15, s8, s10
3400bf1e:	bfd8      	it	le
3400bf20:	eddf 5a4a 	vldrle	s11, [pc, #296]	@ 3400c04c <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0x1b4>
3400bf24:	eef4 7ae5 	vcmpe.f32	s15, s11
3400bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bf2c:	fe75 5aa7 	vselgt.f32	s11, s11, s15
        uint32_t Yi = (uint32_t)Y;
3400bf30:	eefc 7ae5 	vcvt.u32.f32	s15, s11
        const uintptr_t y_step = (Yi == (height_in - 1)) ? 0 : stride_in;
3400bf34:	ee17 3a90 	vmov	r3, s15
        _BILINEAR_COMPUTE_WEIGHTS_Y( Y, weights_Y);
3400bf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400bf3c:	ee75 5ae7 	vsub.f32	s11, s11, s15
        const uintptr_t y_step = (Yi == (height_in - 1)) ? 0 : stride_in;
3400bf40:	9c15      	ldr	r4, [sp, #84]	@ 0x54
        _BILINEAR_COMPUTE_WEIGHTS_Y( Y, weights_Y);
3400bf42:	ee35 3a65 	vsub.f32	s6, s10, s11
        const uintptr_t y_step = (Yi == (height_in - 1)) ? 0 : stride_in;
3400bf46:	1e65      	subs	r5, r4, #1
3400bf48:	429d      	cmp	r5, r3
3400bf4a:	bf14      	ite	ne
3400bf4c:	4690      	movne	r8, r2
3400bf4e:	f04f 0800 	moveq.w	r8, #0
        for (size_t w = 0; w < width_out; w++)
3400bf52:	2500      	movs	r5, #0
            const uintptr_t x_step = (Xi == (width_in - 1)) ? 0 : 3;
3400bf54:	9c14      	ldr	r4, [sp, #80]	@ 0x50
        uint32_t offset_y = Yi * stride_in;
3400bf56:	fb02 f903 	mul.w	r9, r2, r3
            const uintptr_t x_step = (Xi == (width_in - 1)) ? 0 : 3;
3400bf5a:	f104 3aff 	add.w	sl, r4, #4294967295
3400bf5e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
3400bf60:	f104 0c01 	add.w	ip, r4, #1
3400bf64:	eb05 0745 	add.w	r7, r5, r5, lsl #1
        for (size_t w = 0; w < width_out; w++)
3400bf68:	f1bc 0c01 	subs.w	ip, ip, #1
3400bf6c:	440f      	add	r7, r1
3400bf6e:	d103      	bne.n	3400bf78 <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0xe0>
        out_data_current_ptr += stride_out;
3400bf70:	9b00      	ldr	r3, [sp, #0]
    for (size_t h = 0; h < height_out; h++)
3400bf72:	3601      	adds	r6, #1
        out_data_current_ptr += stride_out;
3400bf74:	4419      	add	r1, r3
    for (size_t h = 0; h < height_out; h++)
3400bf76:	e7b6      	b.n	3400bee6 <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0x4e>
            float32_t X = MIN(MAX(-0.5f + inv_width_scale*(w + 0.5f),0.0f),(float32_t)width_in-1);
3400bf78:	ee07 5a90 	vmov	s15, r5
3400bf7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400bf80:	eeb0 1a62 	vmov.f32	s2, s5
3400bf84:	ee77 7aa3 	vadd.f32	s15, s15, s7
3400bf88:	eea7 1a82 	vfma.f32	s2, s15, s4
3400bf8c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
3400bf90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bf94:	ee74 7ac5 	vsub.f32	s15, s9, s10
3400bf98:	bfd8      	it	le
3400bf9a:	ed9f 1a2c 	vldrle	s2, [pc, #176]	@ 3400c04c <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0x1b4>
3400bf9e:	eef4 7ac1 	vcmpe.f32	s15, s2
3400bfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400bfa6:	fe31 1a27 	vselgt.f32	s2, s2, s15
            uint32_t Xi = (uint32_t)X;
3400bfaa:	eefc 7ac1 	vcvt.u32.f32	s15, s2
3400bfae:	ee17 ba90 	vmov	fp, s15
            _BILINEAR_COMPUTE_WEIGHTS_X( X, weights_Y, weights);
3400bfb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
3400bfb6:	ee31 1a67 	vsub.f32	s2, s2, s15
3400bfba:	ee75 0a41 	vsub.f32	s1, s10, s2
            uint32_t offset = offset_y + Xi * 3;
3400bfbe:	eb0b 044b 	add.w	r4, fp, fp, lsl #1
3400bfc2:	444c      	add	r4, r9
            const uint8_t * in_data_ptr = in_data + offset;
3400bfc4:	4404      	add	r4, r0
  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);
3400bfc6:	fd94 6f00 	ldc2	15, cr6, [r4]
            _BILINEAR_COMPUTE_WEIGHTS_X( X, weights_Y, weights);
3400bfca:	ee23 0a20 	vmul.f32	s0, s6, s1
            const uintptr_t x_step = (Xi == (width_in - 1)) ? 0 : 3;
3400bfce:	45da      	cmp	sl, fp
3400bfd0:	bf18      	it	ne
3400bfd2:	f04f 0e03 	movne.w	lr, #3
            _BILINEAR_COMPUTE_WEIGHTS_X( X, weights_Y, weights);
3400bfd6:	ee10 ba10 	vmov	fp, s0
            const uintptr_t x_step = (Xi == (width_in - 1)) ? 0 : 3;
3400bfda:	bf08      	it	eq
3400bfdc:	f04f 0e00 	moveq.w	lr, #0

__extension__ extern __inline float32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vcvtq_f32_u32 (uint32x4_t __a)
{
  return __builtin_mve_vcvtq_to_f_uv4sf (__a);
3400bfe0:	ffbb 66c6 	vcvt.f32.u32	q3, q3

__extension__ extern __inline float32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vmulq_n_f32 (float32x4_t __a, float32_t __b)
{
  return __builtin_mve_vmulq_n_fv4sf (__a, __b);
3400bfe4:	ee37 6e6b 	cdp	14, 3, cr6, cr7, cr11, {3}
  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);
3400bfe8:	eb04 0b0e 	add.w	fp, r4, lr
3400bfec:	465b      	mov	r3, fp
            _BILINEAR_COMPUTE_WEIGHTS_X( X, weights_Y, weights);
3400bfee:	ee23 0a01 	vmul.f32	s0, s6, s2
3400bff2:	fd93 af00 	ldc2	15, cr10, [r3]
3400bff6:	ee10 ba10 	vmov	fp, s0
  return __builtin_mve_vcvtq_to_f_uv4sf (__a);
3400bffa:	ffbb a6ca 	vcvt.f32.u32	q5, q5
  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);
3400bffe:	4444      	add	r4, r8

__extension__ extern __inline float32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vfmaq_n_f32 (float32x4_t __a, float32x4_t __b, float32_t __c)
{
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400c000:	ee3b 6e4b 	cdp	14, 3, cr6, cr11, cr11, {2}
3400c004:	ee60 0aa5 	vmul.f32	s1, s1, s11
  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);
3400c008:	fd94 af00 	ldc2	15, cr10, [r4]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400c00c:	ee10 3a90 	vmov	r3, s1
  return __builtin_mve_vcvtq_to_f_uv4sf (__a);
3400c010:	ffbb a6ca 	vcvt.f32.u32	q5, q5
  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);
3400c014:	4474      	add	r4, lr
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400c016:	ee3b 6e43 	cdp	14, 3, cr6, cr11, cr3, {2}
3400c01a:	ee25 1a81 	vmul.f32	s2, s11, s2
  return __builtin_mve_vldrbq_uv4si ((__builtin_neon_qi *) __base);
3400c01e:	fd94 af00 	ldc2	15, cr10, [r4]
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400c022:	ee11 3a10 	vmov	r3, s2
  return __builtin_mve_vcvtq_to_f_uv4sf (__a);
3400c026:	ffbb a6ca 	vcvt.f32.u32	q5, q5
  return __builtin_mve_vfmaq_n_fv4sf (__a, __b, __c);
3400c02a:	ee3b 6e43 	cdp	14, 3, cr6, cr11, cr3, {2}
  return __builtin_mve_vcvtaq_uv4si (__a);
3400c02e:	ffbb 60c6 	vcvta.u32.f32	q3, q3
  __builtin_mve_vstrbq_p_uv4si ((__builtin_neon_qi *) __addr, __value, __p);
3400c032:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  return __builtin_mve_vminq_uv4si (__a, __b);
3400c036:	ff26 6658 	vmin.u32	q3, q3, q4
  __builtin_mve_vstrbq_p_uv4si ((__builtin_neon_qi *) __addr, __value, __p);
3400c03a:	eeed 3a10 	vmsr	<impl def 0xd>, r3
        for (size_t w = 0; w < width_out; w++)
3400c03e:	3501      	adds	r5, #1
3400c040:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3400c044:	ed87 6f00 	stc	15, cr6, [r7]
3400c048:	e78c      	b.n	3400bf64 <IPL_resize_bilinear_iu8ou8_with_strides_RGB+0xcc>
3400c04a:	bf00      	nop
3400c04c:	00000000 	.word	0x00000000

3400c050 <st_yolox_nms_comparator>:

    float32_t diff = 0.0;
    float32_t a_weighted_conf = 0.0;
    float32_t b_weighted_conf = 0.0;

    if (a.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400c050:	4b0f      	ldr	r3, [pc, #60]	@ (3400c090 <st_yolox_nms_comparator+0x40>)
{
3400c052:	b510      	push	{r4, lr}
    if (a.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400c054:	681b      	ldr	r3, [r3, #0]
3400c056:	6944      	ldr	r4, [r0, #20]
    od_pp_outBuffer_t b = *(od_pp_outBuffer_t *)pb;
3400c058:	694a      	ldr	r2, [r1, #20]
    if (a.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400c05a:	42a3      	cmp	r3, r4
    od_pp_outBuffer_t a = *(od_pp_outBuffer_t *)pa;
3400c05c:	bf0c      	ite	eq
3400c05e:	edd0 7a04 	vldreq	s15, [r0, #16]
    {
        a_weighted_conf = a.conf;
    }
    else
    {
         a_weighted_conf = 0.0;
3400c062:	eddf 7a0c 	vldrne	s15, [pc, #48]	@ 3400c094 <st_yolox_nms_comparator+0x44>
    }

    if (b.class_index == AI_ST_YOLOX_PP_SORT_CLASS)
3400c066:	4293      	cmp	r3, r2
    od_pp_outBuffer_t b = *(od_pp_outBuffer_t *)pb;
3400c068:	bf0c      	ite	eq
3400c06a:	ed91 7a04 	vldreq	s14, [r1, #16]
    {
        b_weighted_conf = b.conf;
    }
    else
    {
         b_weighted_conf = 0.0;
3400c06e:	ed9f 7a09 	vldrne	s14, [pc, #36]	@ 3400c094 <st_yolox_nms_comparator+0x44>
    }

    diff = a_weighted_conf - b_weighted_conf;
3400c072:	ee77 7ac7 	vsub.f32	s15, s15, s14

    if (diff < 0) return 1;
3400c076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400c07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c07e:	d404      	bmi.n	3400c08a <st_yolox_nms_comparator+0x3a>
    else if (diff > 0) return -1;
3400c080:	bfcc      	ite	gt
3400c082:	f04f 30ff 	movgt.w	r0, #4294967295
3400c086:	2000      	movle	r0, #0
    return 0;
}
3400c088:	bd10      	pop	{r4, pc}
    if (diff < 0) return 1;
3400c08a:	2001      	movs	r0, #1
3400c08c:	e7fc      	b.n	3400c088 <st_yolox_nms_comparator+0x38>
3400c08e:	bf00      	nop
3400c090:	3410f0ac 	.word	0x3410f0ac
3400c094:	00000000 	.word	0x00000000

3400c098 <st_yolox_pp_nmsFiltering_centroid>:

int32_t st_yolox_pp_nmsFiltering_centroid(od_pp_out_t *pOutput,
                                          st_yolox_pp_static_param_t *pInput_static_param)
{
3400c098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c09c:	4605      	mov	r5, r0
3400c09e:	460e      	mov	r6, r1
    int32_t j, k, limit_counter, detections_per_class;
    for (k = 0; k < pInput_static_param->nb_classes; ++k)
3400c0a0:	2700      	movs	r7, #0
                for (j = i + 1; j < detections_per_class; j ++)
                {
                    float32_t *b = &(pOutput->pOutBuff[j].x_center);
                    if (vision_models_box_iou(a, b) > pInput_static_param->iou_threshold)
                    {
                        pOutput->pOutBuff[j].conf = 0;
3400c0a2:	f04f 0800 	mov.w	r8, #0
    for (k = 0; k < pInput_static_param->nb_classes; ++k)
3400c0a6:	6833      	ldr	r3, [r6, #0]
3400c0a8:	42bb      	cmp	r3, r7
3400c0aa:	dc03      	bgt.n	3400c0b4 <st_yolox_pp_nmsFiltering_centroid+0x1c>
                }
            }
        }
    }
    return (AI_OD_POSTPROCESS_ERROR_NO);
}
3400c0ac:	2000      	movs	r0, #0
3400c0ae:	b003      	add	sp, #12
3400c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400c0b4:	2200      	movs	r2, #0
3400c0b6:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
        AI_ST_YOLOX_PP_SORT_CLASS = k;
3400c0b8:	4b33      	ldr	r3, [pc, #204]	@ (3400c188 <st_yolox_pp_nmsFiltering_centroid+0xf0>)
3400c0ba:	4291      	cmp	r1, r2
3400c0bc:	601f      	str	r7, [r3, #0]
        detections_per_class = 0;
3400c0be:	4614      	mov	r4, r2
3400c0c0:	f101 0301 	add.w	r3, r1, #1
            if(pOutput->pOutBuff[i].class_index == k)
3400c0c4:	f04f 0c18 	mov.w	ip, #24
3400c0c8:	bfb8      	it	lt
3400c0ca:	2301      	movlt	r3, #1
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400c0cc:	3b01      	subs	r3, #1
3400c0ce:	d103      	bne.n	3400c0d8 <st_yolox_pp_nmsFiltering_centroid+0x40>
        if (detections_per_class > 0)
3400c0d0:	2c00      	cmp	r4, #0
3400c0d2:	dc0a      	bgt.n	3400c0ea <st_yolox_pp_nmsFiltering_centroid+0x52>
    for (k = 0; k < pInput_static_param->nb_classes; ++k)
3400c0d4:	3701      	adds	r7, #1
3400c0d6:	e7e6      	b.n	3400c0a6 <st_yolox_pp_nmsFiltering_centroid+0xe>
            if(pOutput->pOutBuff[i].class_index == k)
3400c0d8:	6828      	ldr	r0, [r5, #0]
3400c0da:	fb0c 0002 	mla	r0, ip, r2, r0
3400c0de:	6940      	ldr	r0, [r0, #20]
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400c0e0:	3201      	adds	r2, #1
                detections_per_class++;
3400c0e2:	42b8      	cmp	r0, r7
3400c0e4:	ea54 9414 			@ <UNDEFINED> instruction: 0xea549414
        for (int32_t i = 0; i < pInput_static_param->nb_detect ; i ++)
3400c0e8:	e7f0      	b.n	3400c0cc <st_yolox_pp_nmsFiltering_centroid+0x34>
            qsort(pOutput->pOutBuff,
3400c0ea:	4b28      	ldr	r3, [pc, #160]	@ (3400c18c <st_yolox_pp_nmsFiltering_centroid+0xf4>)
3400c0ec:	2218      	movs	r2, #24
3400c0ee:	6828      	ldr	r0, [r5, #0]
3400c0f0:	f013 f8bf 	bl	3401f272 <qsort>
            for (int32_t i = 0; i < detections_per_class ; i ++)
3400c0f4:	f04f 0900 	mov.w	r9, #0
                if (pOutput->pOutBuff[i].conf == 0) continue;
3400c0f8:	2318      	movs	r3, #24
3400c0fa:	682a      	ldr	r2, [r5, #0]
3400c0fc:	fb03 2b09 	mla	fp, r3, r9, r2
3400c100:	eddb 7a04 	vldr	s15, [fp, #16]
3400c104:	eef5 7a40 	vcmp.f32	s15, #0.0
3400c108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                for (j = i + 1; j < detections_per_class; j ++)
3400c10c:	f109 0901 	add.w	r9, r9, #1
                if (pOutput->pOutBuff[i].conf == 0) continue;
3400c110:	d119      	bne.n	3400c146 <st_yolox_pp_nmsFiltering_centroid+0xae>
            for (int32_t i = 0; i < detections_per_class ; i ++)
3400c112:	454c      	cmp	r4, r9
3400c114:	d1f1      	bne.n	3400c0fa <st_yolox_pp_nmsFiltering_centroid+0x62>
            for (int32_t i = 0; i < detections_per_class; i++)
3400c116:	2300      	movs	r3, #0
                    (pOutput->pOutBuff[i].conf != 0))
3400c118:	f04f 0e18 	mov.w	lr, #24
        limit_counter = 0;
3400c11c:	461a      	mov	r2, r3
                if ((limit_counter < pInput_static_param->max_boxes_limit) &&
3400c11e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
                    (pOutput->pOutBuff[i].conf != 0))
3400c120:	f8d5 c000 	ldr.w	ip, [r5]
                if ((limit_counter < pInput_static_param->max_boxes_limit) &&
3400c124:	4290      	cmp	r0, r2
                    (pOutput->pOutBuff[i].conf != 0))
3400c126:	fb0e c103 	mla	r1, lr, r3, ip
                if ((limit_counter < pInput_static_param->max_boxes_limit) &&
3400c12a:	dd29      	ble.n	3400c180 <st_yolox_pp_nmsFiltering_centroid+0xe8>
3400c12c:	edd1 7a04 	vldr	s15, [r1, #16]
3400c130:	eef5 7a40 	vcmp.f32	s15, #0.0
3400c134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c138:	d022      	beq.n	3400c180 <st_yolox_pp_nmsFiltering_centroid+0xe8>
                    limit_counter++;
3400c13a:	3201      	adds	r2, #1
            for (int32_t i = 0; i < detections_per_class; i++)
3400c13c:	3c01      	subs	r4, #1
3400c13e:	f103 0301 	add.w	r3, r3, #1
3400c142:	d1ef      	bne.n	3400c124 <st_yolox_pp_nmsFiltering_centroid+0x8c>
3400c144:	e7c6      	b.n	3400c0d4 <st_yolox_pp_nmsFiltering_centroid+0x3c>
                for (j = i + 1; j < detections_per_class; j ++)
3400c146:	46ca      	mov	sl, r9
3400c148:	45a2      	cmp	sl, r4
                    float32_t *b = &(pOutput->pOutBuff[j].x_center);
3400c14a:	6829      	ldr	r1, [r5, #0]
                for (j = i + 1; j < detections_per_class; j ++)
3400c14c:	dae1      	bge.n	3400c112 <st_yolox_pp_nmsFiltering_centroid+0x7a>
                    float32_t *b = &(pOutput->pOutBuff[j].x_center);
3400c14e:	fb03 f20a 	mul.w	r2, r3, sl
                    if (vision_models_box_iou(a, b) > pInput_static_param->iou_threshold)
3400c152:	4658      	mov	r0, fp
3400c154:	4411      	add	r1, r2
3400c156:	9201      	str	r2, [sp, #4]
3400c158:	f000 fce4 	bl	3400cb24 <vision_models_box_iou>
3400c15c:	edd6 7a0b 	vldr	s15, [r6, #44]	@ 0x2c
3400c160:	eeb4 0ae7 	vcmpe.f32	s0, s15
3400c164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        pOutput->pOutBuff[j].conf = 0;
3400c168:	bfc4      	itt	gt
3400c16a:	6829      	ldrgt	r1, [r5, #0]
3400c16c:	9a01      	ldrgt	r2, [sp, #4]
                    if (vision_models_box_iou(a, b) > pInput_static_param->iou_threshold)
3400c16e:	f04f 0318 	mov.w	r3, #24
                        pOutput->pOutBuff[j].conf = 0;
3400c172:	bfc4      	itt	gt
3400c174:	1889      	addgt	r1, r1, r2
3400c176:	f8c1 8010 	strgt.w	r8, [r1, #16]
                for (j = i + 1; j < detections_per_class; j ++)
3400c17a:	f10a 0a01 	add.w	sl, sl, #1
3400c17e:	e7e3      	b.n	3400c148 <st_yolox_pp_nmsFiltering_centroid+0xb0>
                    pOutput->pOutBuff[i].conf = 0;
3400c180:	f8c1 8010 	str.w	r8, [r1, #16]
3400c184:	e7da      	b.n	3400c13c <st_yolox_pp_nmsFiltering_centroid+0xa4>
3400c186:	bf00      	nop
3400c188:	3410f0ac 	.word	0x3410f0ac
3400c18c:	3400c051 	.word	0x3400c051

3400c190 <st_yolox_pp_scoreFiltering_centroid>:


int32_t st_yolox_pp_scoreFiltering_centroid(od_pp_out_t *pOutput,
                                            st_yolox_pp_static_param_t *pInput_static_param)
{
3400c190:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t det_count = 0;

    for (int32_t i = 0; i < pInput_static_param->nb_detect; i++)
3400c192:	2600      	movs	r6, #0
3400c194:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
    int32_t det_count = 0;
3400c196:	4635      	mov	r5, r6
3400c198:	42b3      	cmp	r3, r6
3400c19a:	f103 0201 	add.w	r2, r3, #1
    {
        if (pOutput->pOutBuff[i].conf >= pInput_static_param->conf_threshold)
3400c19e:	f04f 0718 	mov.w	r7, #24
3400c1a2:	bfb8      	it	lt
3400c1a4:	2201      	movlt	r2, #1
    for (int32_t i = 0; i < pInput_static_param->nb_detect; i++)
3400c1a6:	3a01      	subs	r2, #1
3400c1a8:	d102      	bne.n	3400c1b0 <st_yolox_pp_scoreFiltering_centroid+0x20>
            pOutput->pOutBuff[det_count].conf = pOutput->pOutBuff[i].conf;
            pOutput->pOutBuff[det_count].class_index = pOutput->pOutBuff[i].class_index;
            det_count++;
        }
    }
    pOutput->nb_detect = det_count;
3400c1aa:	6045      	str	r5, [r0, #4]

    return (AI_OD_POSTPROCESS_ERROR_NO);
}
3400c1ac:	2000      	movs	r0, #0
3400c1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pOutput->pOutBuff[i].conf >= pInput_static_param->conf_threshold)
3400c1b0:	6803      	ldr	r3, [r0, #0]
3400c1b2:	ed91 7a0a 	vldr	s14, [r1, #40]	@ 0x28
3400c1b6:	fb07 3406 	mla	r4, r7, r6, r3
3400c1ba:	edd4 7a04 	vldr	s15, [r4, #16]
3400c1be:	eef4 7ac7 	vcmpe.f32	s15, s14
3400c1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c1c6:	db16      	blt.n	3400c1f6 <st_yolox_pp_scoreFiltering_centroid+0x66>
            pOutput->pOutBuff[det_count].x_center = pOutput->pOutBuff[i].x_center;
3400c1c8:	fb07 3305 	mla	r3, r7, r5, r3
3400c1cc:	f8d4 c000 	ldr.w	ip, [r4]
            det_count++;
3400c1d0:	3501      	adds	r5, #1
            pOutput->pOutBuff[det_count].x_center = pOutput->pOutBuff[i].x_center;
3400c1d2:	f8c3 c000 	str.w	ip, [r3]
            pOutput->pOutBuff[det_count].y_center = pOutput->pOutBuff[i].y_center;
3400c1d6:	f8d4 c004 	ldr.w	ip, [r4, #4]
3400c1da:	f8c3 c004 	str.w	ip, [r3, #4]
            pOutput->pOutBuff[det_count].width = pOutput->pOutBuff[i].width;
3400c1de:	f8d4 c008 	ldr.w	ip, [r4, #8]
3400c1e2:	f8c3 c008 	str.w	ip, [r3, #8]
            pOutput->pOutBuff[det_count].height = pOutput->pOutBuff[i].height;
3400c1e6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
            pOutput->pOutBuff[det_count].conf = pOutput->pOutBuff[i].conf;
3400c1ea:	edc3 7a04 	vstr	s15, [r3, #16]
            pOutput->pOutBuff[det_count].class_index = pOutput->pOutBuff[i].class_index;
3400c1ee:	6964      	ldr	r4, [r4, #20]
            pOutput->pOutBuff[det_count].height = pOutput->pOutBuff[i].height;
3400c1f0:	f8c3 c00c 	str.w	ip, [r3, #12]
            pOutput->pOutBuff[det_count].class_index = pOutput->pOutBuff[i].class_index;
3400c1f4:	615c      	str	r4, [r3, #20]
    for (int32_t i = 0; i < pInput_static_param->nb_detect; i++)
3400c1f6:	3601      	adds	r6, #1
3400c1f8:	e7d5      	b.n	3400c1a6 <st_yolox_pp_scoreFiltering_centroid+0x16>

3400c1fa <st_yolox_pp_level_decode>:
                                 int32_t grid_width,
                                 int32_t grid_height,
                                 float32_t *tmp_a,
                                 st_yolox_pp_static_param_t *pInput_static_param)

{
3400c1fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c1fe:	ed2d 8b04 	vpush	{d8-d9}
3400c202:	b08d      	sub	sp, #52	@ 0x34
3400c204:	9306      	str	r3, [sp, #24]
    int32_t count        = 0;
    int32_t count_detect = 0;
    float32_t best_score = 0;
    uint32_t class_index;
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
    float32_t grid_width_inv = 1.0f / grid_width;
3400c206:	eddd 7a06 	vldr	s15, [sp, #24]
3400c20a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3400c20e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400c212:	eec7 8a87 	vdiv.f32	s17, s15, s14
    float32_t grid_height_inv = 1.0f / grid_height;
3400c216:	ed9d 7a1a 	vldr	s14, [sp, #104]	@ 0x68
    float32_t best_score = 0;
3400c21a:	2300      	movs	r3, #0
    float32_t grid_height_inv = 1.0f / grid_height;
3400c21c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
{
3400c220:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
    float32_t best_score = 0;
3400c222:	930a      	str	r3, [sp, #40]	@ 0x28
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400c224:	6833      	ldr	r3, [r6, #0]
{
3400c226:	9209      	str	r2, [sp, #36]	@ 0x24


    if ( 1 == pInput_static_param->nb_classes) {
3400c228:	2b01      	cmp	r3, #1
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400c22a:	f103 0205 	add.w	r2, r3, #5
    float32_t grid_height_inv = 1.0f / grid_height;
3400c22e:	ee87 9a87 	vdiv.f32	s18, s15, s14
{
3400c232:	9008      	str	r0, [sp, #32]
3400c234:	9102      	str	r1, [sp, #8]
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400c236:	9205      	str	r2, [sp, #20]
    if ( 1 == pInput_static_param->nb_classes) {
3400c238:	d00c      	beq.n	3400c254 <st_yolox_pp_level_decode+0x5a>
        } // for col
      } // for row
    } // if nb_classes == 1
    else
    {
      for (int32_t row = 0; row < grid_width; ++row)
3400c23a:	f04f 0800 	mov.w	r8, #0
    int32_t count_detect = 0;
3400c23e:	46c1      	mov	r9, r8
    int32_t el_offset    = 0;
3400c240:	4645      	mov	r5, r8
3400c242:	0093      	lsls	r3, r2, #2
3400c244:	9307      	str	r3, [sp, #28]
    int32_t count        = 0;
3400c246:	f8cd 800c 	str.w	r8, [sp, #12]
      for (int32_t row = 0; row < grid_width; ++row)
3400c24a:	9b06      	ldr	r3, [sp, #24]
3400c24c:	4598      	cmp	r8, r3
3400c24e:	da13      	bge.n	3400c278 <st_yolox_pp_level_decode+0x7e>
      {
          for (int32_t col = 0; col < grid_height; ++col)
3400c250:	2300      	movs	r3, #0
3400c252:	e104      	b.n	3400c45e <st_yolox_pp_level_decode+0x264>
      float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c254:	ed96 7a0a 	vldr	s14, [r6, #40]	@ 0x28
3400c258:	ee87 0a87 	vdiv.f32	s0, s15, s14
3400c25c:	ee30 0a67 	vsub.f32	s0, s0, s15
3400c260:	f016 fde6 	bl	34022e30 <logf>
      for (int32_t row = 0; row < grid_width; ++row)
3400c264:	2500      	movs	r5, #0
      float32_t computedThreshold = -logf( 1 / pInput_static_param->conf_threshold - 1);
3400c266:	eef1 9a40 	vneg.f32	s19, s0
    int32_t count_detect = 0;
3400c26a:	46a9      	mov	r9, r5
    int32_t count        = 0;
3400c26c:	4629      	mov	r1, r5
    int32_t el_offset    = 0;
3400c26e:	462b      	mov	r3, r5
3400c270:	2006      	movs	r0, #6
      for (int32_t row = 0; row < grid_width; ++row)
3400c272:	9a06      	ldr	r2, [sp, #24]
3400c274:	4295      	cmp	r5, r2
3400c276:	db69      	blt.n	3400c34c <st_yolox_pp_level_decode+0x152>
      } // for row
    } //  else (nb_classes != 1)

    return count_detect;

}
3400c278:	4648      	mov	r0, r9
3400c27a:	b00d      	add	sp, #52	@ 0x34
3400c27c:	ecbd 8b04 	vpop	{d8-d9}
3400c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ( pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] >= computedThreshold) {
3400c284:	ed97 0a04 	vldr	s0, [r7, #16]
3400c288:	eeb4 0ae9 	vcmpe.f32	s0, s19
3400c28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c290:	db45      	blt.n	3400c31e <st_yolox_pp_level_decode+0x124>
3400c292:	9303      	str	r3, [sp, #12]
              pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS] = vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS]);
3400c294:	9b02      	ldr	r3, [sp, #8]
3400c296:	1d0c      	adds	r4, r1, #4
3400c298:	eb03 0484 	add.w	r4, r3, r4, lsl #2
3400c29c:	9101      	str	r1, [sp, #4]
3400c29e:	f000 fba3 	bl	3400c9e8 <vision_models_sigmoid_f>
3400c2a2:	ed84 0a00 	vstr	s0, [r4]
              pOutBuff[count + AI_YOLOV2_PP_CLASSPROB] = pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS];
3400c2a6:	ed84 0a01 	vstr	s0, [r4, #4]
              pOutBuff[count + AI_YOLOV2_PP_XCENTER]   = (col + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_XCENTER])) * grid_width_inv;
3400c2aa:	ed97 0a00 	vldr	s0, [r7]
3400c2ae:	f000 fb9b 	bl	3400c9e8 <vision_models_sigmoid_f>
3400c2b2:	ee07 ba90 	vmov	s15, fp
3400c2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400c2ba:	ee77 7a80 	vadd.f32	s15, s15, s0
3400c2be:	ee67 7aa8 	vmul.f32	s15, s15, s17
3400c2c2:	ed44 7a04 	vstr	s15, [r4, #-16]
              pOutBuff[count + AI_YOLOV2_PP_YCENTER]   = (row + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_YCENTER])) * grid_height_inv;
3400c2c6:	ed97 0a01 	vldr	s0, [r7, #4]
3400c2ca:	f000 fb8d 	bl	3400c9e8 <vision_models_sigmoid_f>
3400c2ce:	ee07 5a90 	vmov	s15, r5
3400c2d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400c2d6:	ee77 7a80 	vadd.f32	s15, s15, s0
3400c2da:	ee67 7a89 	vmul.f32	s15, s15, s18
3400c2de:	ed44 7a03 	vstr	s15, [r4, #-12]
              pOutBuff[count + AI_YOLOV2_PP_WIDTHREL]  = (pAnchors[2 * anch + 0] * expf(pInbuff[el_offset + AI_YOLOV2_PP_WIDTHREL])) * grid_width_inv;
3400c2e2:	ed97 0a02 	vldr	s0, [r7, #8]
3400c2e6:	ed9a 8a00 	vldr	s16, [sl]
3400c2ea:	f016 fd2d 	bl	34022d48 <expf>
3400c2ee:	ee28 8a00 	vmul.f32	s16, s16, s0
3400c2f2:	ee28 8a28 	vmul.f32	s16, s16, s17
3400c2f6:	ed04 8a02 	vstr	s16, [r4, #-8]
              pOutBuff[count + AI_YOLOV2_PP_HEIGHTREL] = (pAnchors[2 * anch + 1] * expf(pInbuff[el_offset + AI_YOLOV2_PP_HEIGHTREL])) * grid_height_inv;
3400c2fa:	ed97 0a03 	vldr	s0, [r7, #12]
3400c2fe:	ed9a 8a01 	vldr	s16, [sl, #4]
3400c302:	f016 fd21 	bl	34022d48 <expf>
3400c306:	ee28 8a00 	vmul.f32	s16, s16, s0
3400c30a:	ee28 8a09 	vmul.f32	s16, s16, s18
              count_detect++;
3400c30e:	2006      	movs	r0, #6
              pOutBuff[count + AI_YOLOV2_PP_HEIGHTREL] = (pAnchors[2 * anch + 1] * expf(pInbuff[el_offset + AI_YOLOV2_PP_HEIGHTREL])) * grid_height_inv;
3400c310:	ed04 8a01 	vstr	s16, [r4, #-4]
              count += anch_stride;
3400c314:	9901      	ldr	r1, [sp, #4]
              count_detect++;
3400c316:	9b03      	ldr	r3, [sp, #12]
              count += anch_stride;
3400c318:	3106      	adds	r1, #6
              count_detect++;
3400c31a:	f109 0901 	add.w	r9, r9, #1
          for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400c31e:	f108 0801 	add.w	r8, r8, #1
3400c322:	3718      	adds	r7, #24
3400c324:	f10a 0a08 	add.w	sl, sl, #8
3400c328:	6872      	ldr	r2, [r6, #4]
3400c32a:	4542      	cmp	r2, r8
3400c32c:	dcaa      	bgt.n	3400c284 <st_yolox_pp_level_decode+0x8a>
3400c32e:	fb00 3308 	mla	r3, r0, r8, r3
        for (int32_t col = 0; col < grid_height; ++col)
3400c332:	f10b 0b01 	add.w	fp, fp, #1
3400c336:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
3400c338:	4593      	cmp	fp, r2
3400c33a:	da0a      	bge.n	3400c352 <st_yolox_pp_level_decode+0x158>
3400c33c:	9a08      	ldr	r2, [sp, #32]
          for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400c33e:	f04f 0800 	mov.w	r8, #0
3400c342:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
3400c346:	eb02 0783 	add.w	r7, r2, r3, lsl #2
3400c34a:	e7ed      	b.n	3400c328 <st_yolox_pp_level_decode+0x12e>
        for (int32_t col = 0; col < grid_height; ++col)
3400c34c:	f04f 0b00 	mov.w	fp, #0
3400c350:	e7f1      	b.n	3400c336 <st_yolox_pp_level_decode+0x13c>
      for (int32_t row = 0; row < grid_width; ++row)
3400c352:	3501      	adds	r5, #1
3400c354:	e78d      	b.n	3400c272 <st_yolox_pp_level_decode+0x78>
                  pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] = vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS]);
3400c356:	ed17 0a01 	vldr	s0, [r7, #-4]
3400c35a:	f000 fb45 	bl	3400c9e8 <vision_models_sigmoid_f>
                  vision_models_softmax_f(&pInbuff[el_offset + AI_YOLOV2_PP_CLASSPROB],
3400c35e:	4621      	mov	r1, r4
3400c360:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
3400c362:	6832      	ldr	r2, [r6, #0]
                  pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] = vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_OBJECTNESS]);
3400c364:	ed04 0a01 	vstr	s0, [r4, #-4]
                  vision_models_softmax_f(&pInbuff[el_offset + AI_YOLOV2_PP_CLASSPROB],
3400c368:	4638      	mov	r0, r7
3400c36a:	f000 fb49 	bl	3400ca00 <vision_models_softmax_f>
                  for (int32_t k = 0; k < pInput_static_param->nb_classes; k++)
3400c36e:	6831      	ldr	r1, [r6, #0]
3400c370:	4622      	mov	r2, r4
3400c372:	2900      	cmp	r1, #0
3400c374:	f101 0301 	add.w	r3, r1, #1
3400c378:	bfb8      	it	lt
3400c37a:	2301      	movlt	r3, #1
3400c37c:	3b01      	subs	r3, #1
3400c37e:	d17f      	bne.n	3400c480 <st_yolox_pp_level_decode+0x286>
                  vision_models_maxi_if32ou32(&pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB],
3400c380:	4620      	mov	r0, r4
3400c382:	ab0b      	add	r3, sp, #44	@ 0x2c
3400c384:	aa0a      	add	r2, sp, #40	@ 0x28
3400c386:	f000 fc1a 	bl	3400cbbe <vision_models_maxi_if32ou32>
                  if (best_score >= pInput_static_param->conf_threshold)
3400c38a:	ed96 7a0a 	vldr	s14, [r6, #40]	@ 0x28
3400c38e:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
3400c392:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400c396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c39a:	d84d      	bhi.n	3400c438 <st_yolox_pp_level_decode+0x23e>
                      pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS] = pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS];
3400c39c:	9b03      	ldr	r3, [sp, #12]
3400c39e:	9902      	ldr	r1, [sp, #8]
3400c3a0:	3304      	adds	r3, #4
3400c3a2:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
                      for (int32_t k = 0; k < pInput_static_param->nb_classes; ++k)
3400c3a6:	6831      	ldr	r1, [r6, #0]
                      pOutBuff[count + AI_YOLOV2_PP_OBJECTNESS] = pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS];
3400c3a8:	f854 2c04 	ldr.w	r2, [r4, #-4]
3400c3ac:	4653      	mov	r3, sl
3400c3ae:	2900      	cmp	r1, #0
3400c3b0:	f8ca 2000 	str.w	r2, [sl]
                      for (int32_t k = 0; k < pInput_static_param->nb_classes; ++k)
3400c3b4:	4620      	mov	r0, r4
3400c3b6:	f101 0201 	add.w	r2, r1, #1
3400c3ba:	bfb8      	it	lt
3400c3bc:	2201      	movlt	r2, #1
3400c3be:	3304      	adds	r3, #4
3400c3c0:	3a01      	subs	r2, #1
3400c3c2:	d166      	bne.n	3400c492 <st_yolox_pp_level_decode+0x298>
                      pOutBuff[count + AI_YOLOV2_PP_XCENTER]   = (col + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_XCENTER])) * grid_width_inv;
3400c3c4:	ed17 0a05 	vldr	s0, [r7, #-20]	@ 0xffffffec
3400c3c8:	f000 fb0e 	bl	3400c9e8 <vision_models_sigmoid_f>
3400c3cc:	eddd 7a01 	vldr	s15, [sp, #4]
3400c3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400c3d4:	ee77 7a80 	vadd.f32	s15, s15, s0
3400c3d8:	ee67 7aa8 	vmul.f32	s15, s15, s17
3400c3dc:	ed4a 7a04 	vstr	s15, [sl, #-16]
                      pOutBuff[count + AI_YOLOV2_PP_YCENTER]   = (row + vision_models_sigmoid_f(pInbuff[el_offset + AI_YOLOV2_PP_YCENTER])) * grid_height_inv;
3400c3e0:	ed17 0a04 	vldr	s0, [r7, #-16]
3400c3e4:	f000 fb00 	bl	3400c9e8 <vision_models_sigmoid_f>
3400c3e8:	ee07 8a90 	vmov	s15, r8
3400c3ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3400c3f0:	ee77 7a80 	vadd.f32	s15, s15, s0
3400c3f4:	ee67 7a89 	vmul.f32	s15, s15, s18
3400c3f8:	ed4a 7a03 	vstr	s15, [sl, #-12]
                      pOutBuff[count + AI_YOLOV2_PP_WIDTHREL]  = (pAnchors[2 * anch + 0] * expf(pInbuff[el_offset + AI_YOLOV2_PP_WIDTHREL])) * grid_width_inv;
3400c3fc:	ed17 0a03 	vldr	s0, [r7, #-12]
3400c400:	ed9b 8a00 	vldr	s16, [fp]
3400c404:	f016 fca0 	bl	34022d48 <expf>
3400c408:	ee28 8a00 	vmul.f32	s16, s16, s0
3400c40c:	ee28 8a28 	vmul.f32	s16, s16, s17
3400c410:	ed0a 8a02 	vstr	s16, [sl, #-8]
                      pOutBuff[count + AI_YOLOV2_PP_HEIGHTREL] = (pAnchors[2 * anch + 1] * expf(pInbuff[el_offset + AI_YOLOV2_PP_HEIGHTREL])) * grid_height_inv;
3400c414:	ed17 0a02 	vldr	s0, [r7, #-8]
3400c418:	ed9b 8a01 	vldr	s16, [fp, #4]
3400c41c:	f016 fc94 	bl	34022d48 <expf>
3400c420:	ee28 8a00 	vmul.f32	s16, s16, s0
3400c424:	ee28 8a09 	vmul.f32	s16, s16, s18
3400c428:	ed0a 8a01 	vstr	s16, [sl, #-4]
                      count += anch_stride;
3400c42c:	9b03      	ldr	r3, [sp, #12]
3400c42e:	9a05      	ldr	r2, [sp, #20]
                      count_detect++;
3400c430:	f109 0901 	add.w	r9, r9, #1
                      count += anch_stride;
3400c434:	4413      	add	r3, r2
3400c436:	9303      	str	r3, [sp, #12]
              for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400c438:	9b04      	ldr	r3, [sp, #16]
3400c43a:	f10b 0b08 	add.w	fp, fp, #8
3400c43e:	3301      	adds	r3, #1
3400c440:	9304      	str	r3, [sp, #16]
3400c442:	9b07      	ldr	r3, [sp, #28]
3400c444:	441c      	add	r4, r3
3400c446:	9b05      	ldr	r3, [sp, #20]
3400c448:	441d      	add	r5, r3
3400c44a:	9b07      	ldr	r3, [sp, #28]
3400c44c:	441f      	add	r7, r3
3400c44e:	6873      	ldr	r3, [r6, #4]
3400c450:	9a04      	ldr	r2, [sp, #16]
3400c452:	4293      	cmp	r3, r2
3400c454:	f73f af7f 	bgt.w	3400c356 <st_yolox_pp_level_decode+0x15c>
          for (int32_t col = 0; col < grid_height; ++col)
3400c458:	9b01      	ldr	r3, [sp, #4]
3400c45a:	3d05      	subs	r5, #5
3400c45c:	3301      	adds	r3, #1
3400c45e:	9301      	str	r3, [sp, #4]
3400c460:	9b01      	ldr	r3, [sp, #4]
3400c462:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
3400c464:	4293      	cmp	r3, r2
3400c466:	da19      	bge.n	3400c49c <st_yolox_pp_level_decode+0x2a2>
3400c468:	9b02      	ldr	r3, [sp, #8]
3400c46a:	3505      	adds	r5, #5
3400c46c:	eb03 0485 	add.w	r4, r3, r5, lsl #2
3400c470:	9b08      	ldr	r3, [sp, #32]
3400c472:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
3400c476:	eb03 0785 	add.w	r7, r3, r5, lsl #2
              for (int32_t anch = 0; anch < pInput_static_param->nb_anchors; ++anch)
3400c47a:	2300      	movs	r3, #0
3400c47c:	9304      	str	r3, [sp, #16]
3400c47e:	e7e6      	b.n	3400c44e <st_yolox_pp_level_decode+0x254>
                                                                       pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB + k];
3400c480:	ed92 7a00 	vldr	s14, [r2]
                    pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB + k] = pOutBuff[el_offset + AI_YOLOV2_PP_OBJECTNESS] *
3400c484:	ed54 7a01 	vldr	s15, [r4, #-4]
3400c488:	ee67 7a87 	vmul.f32	s15, s15, s14
3400c48c:	ece2 7a01 	vstmia	r2!, {s15}
                  for (int32_t k = 0; k < pInput_static_param->nb_classes; k++)
3400c490:	e774      	b.n	3400c37c <st_yolox_pp_level_decode+0x182>
                          pOutBuff[count + AI_YOLOV2_PP_CLASSPROB + k] = pOutBuff[el_offset + AI_YOLOV2_PP_CLASSPROB + k];
3400c492:	f850 1b04 	ldr.w	r1, [r0], #4
3400c496:	f843 1b04 	str.w	r1, [r3], #4
                      for (int32_t k = 0; k < pInput_static_param->nb_classes; ++k)
3400c49a:	e791      	b.n	3400c3c0 <st_yolox_pp_level_decode+0x1c6>
      for (int32_t row = 0; row < grid_width; ++row)
3400c49c:	f108 0801 	add.w	r8, r8, #1
3400c4a0:	e6d3      	b.n	3400c24a <st_yolox_pp_level_decode+0x50>

3400c4a2 <st_yolox_pp_store_detections>:
int32_t st_yolox_pp_store_detections(float32_t *pInbuff,
                                     od_pp_out_t *pOutput,
                                     int32_t level_count_detect,
                                     int32_t det_count,
                                     st_yolox_pp_static_param_t *pInput_static_param)
{
3400c4a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400c4a6:	b08b      	sub	sp, #44	@ 0x2c
3400c4a8:	461e      	mov	r6, r3
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400c4aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
{
3400c4ac:	4604      	mov	r4, r0
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400c4ae:	681b      	ldr	r3, [r3, #0]
{
3400c4b0:	468b      	mov	fp, r1


    if (1 == pInput_static_param->nb_classes) {
3400c4b2:	2b01      	cmp	r3, #1
{
3400c4b4:	4617      	mov	r7, r2
    if (1 == pInput_static_param->nb_classes) {
3400c4b6:	d030      	beq.n	3400c51a <st_yolox_pp_store_detections+0x78>
      }
    } // if nb_classes == 1
    else
    {
      int32_t remaining_boxes = level_count_detect;
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400c4b8:	f04f 0900 	mov.w	r9, #0
    int32_t anch_stride = (pInput_static_param->nb_classes + AI_YOLOV2_PP_CLASSPROB);
3400c4bc:	f103 0805 	add.w	r8, r3, #5
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400c4c0:	fb02 f308 	mul.w	r3, r2, r8
3400c4c4:	9303      	str	r3, [sp, #12]
3400c4c6:	ea4f 0388 	mov.w	r3, r8, lsl #2
3400c4ca:	9302      	str	r3, [sp, #8]
3400c4cc:	9b03      	ldr	r3, [sp, #12]
3400c4ce:	454b      	cmp	r3, r9
3400c4d0:	dd2c      	ble.n	3400c52c <st_yolox_pp_store_detections+0x8a>
          vision_models_maxi_p_if32ou16(&pInbuff[i + AI_YOLOV2_PP_CLASSPROB],
              pInput_static_param->nb_classes,
              anch_stride,
              best_score_array,
              class_index_array,
              MIN(remaining_boxes,4));
3400c4d2:	2f04      	cmp	r7, #4
3400c4d4:	46ba      	mov	sl, r7
3400c4d6:	bfa8      	it	ge
3400c4d8:	f04f 0a04 	movge.w	sl, #4
          vision_models_maxi_p_if32ou16(&pInbuff[i + AI_YOLOV2_PP_CLASSPROB],
3400c4dc:	9914      	ldr	r1, [sp, #80]	@ 0x50
3400c4de:	ab04      	add	r3, sp, #16
3400c4e0:	9300      	str	r3, [sp, #0]
3400c4e2:	f8cd a004 	str.w	sl, [sp, #4]
3400c4e6:	f104 0014 	add.w	r0, r4, #20
3400c4ea:	6809      	ldr	r1, [r1, #0]
3400c4ec:	ab06      	add	r3, sp, #24
3400c4ee:	eb00 0089 	add.w	r0, r0, r9, lsl #2
3400c4f2:	fa1f f288 	uxth.w	r2, r8
3400c4f6:	f000 fb31 	bl	3400cb5c <vision_models_maxi_p_if32ou16>

          for (int _i = 0; _i < MIN(remaining_boxes,4); _i++)
3400c4fa:	2100      	movs	r1, #0
3400c4fc:	458a      	cmp	sl, r1
3400c4fe:	f10a 0301 	add.w	r3, sl, #1
3400c502:	bfb8      	it	lt
3400c504:	2301      	movlt	r3, #1
3400c506:	ea4f 0589 	mov.w	r5, r9, lsl #2
3400c50a:	4425      	add	r5, r4
3400c50c:	a806      	add	r0, sp, #24
3400c50e:	3b01      	subs	r3, #1
3400c510:	d127      	bne.n	3400c562 <st_yolox_pp_store_detections+0xc0>
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400c512:	9b02      	ldr	r3, [sp, #8]
                  pOutput->pOutBuff[det_count].conf        = best_score_array[_i];
                  pOutput->pOutBuff[det_count].class_index = class_index_array[_i];
                  det_count++;
              }
          } // for _i
          remaining_boxes-=4;
3400c514:	3f04      	subs	r7, #4
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += 4*anch_stride)
3400c516:	4499      	add	r9, r3
3400c518:	e7d8      	b.n	3400c4cc <st_yolox_pp_store_detections+0x2a>
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400c51a:	2106      	movs	r1, #6
3400c51c:	4351      	muls	r1, r2
3400c51e:	2200      	movs	r2, #0
          pOutput->pOutBuff[det_count].x_center    = pInbuff[i + AI_YOLOV2_PP_XCENTER];
3400c520:	2018      	movs	r0, #24
          pOutput->pOutBuff[det_count].class_index = 0;
3400c522:	4615      	mov	r5, r2
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400c524:	4291      	cmp	r1, r2
3400c526:	f104 0418 	add.w	r4, r4, #24
3400c52a:	dc03      	bgt.n	3400c534 <st_yolox_pp_store_detections+0x92>
      } // for i
    } // else (nb_classes != 1=

    return det_count;

}
3400c52c:	4630      	mov	r0, r6
3400c52e:	b00b      	add	sp, #44	@ 0x2c
3400c530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          pOutput->pOutBuff[det_count].x_center    = pInbuff[i + AI_YOLOV2_PP_XCENTER];
3400c534:	f8db 3000 	ldr.w	r3, [fp]
3400c538:	f854 7c18 	ldr.w	r7, [r4, #-24]
3400c53c:	fb00 3306 	mla	r3, r0, r6, r3
3400c540:	601f      	str	r7, [r3, #0]
          pOutput->pOutBuff[det_count].y_center    = pInbuff[i + AI_YOLOV2_PP_YCENTER];
3400c542:	f854 7c14 	ldr.w	r7, [r4, #-20]
          det_count++;
3400c546:	3601      	adds	r6, #1
          pOutput->pOutBuff[det_count].y_center    = pInbuff[i + AI_YOLOV2_PP_YCENTER];
3400c548:	605f      	str	r7, [r3, #4]
          pOutput->pOutBuff[det_count].width       = pInbuff[i + AI_YOLOV2_PP_WIDTHREL];
3400c54a:	f854 7c10 	ldr.w	r7, [r4, #-16]
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400c54e:	3206      	adds	r2, #6
          pOutput->pOutBuff[det_count].width       = pInbuff[i + AI_YOLOV2_PP_WIDTHREL];
3400c550:	609f      	str	r7, [r3, #8]
          pOutput->pOutBuff[det_count].height      = pInbuff[i + AI_YOLOV2_PP_HEIGHTREL];
3400c552:	f854 7c0c 	ldr.w	r7, [r4, #-12]
          pOutput->pOutBuff[det_count].class_index = 0;
3400c556:	615d      	str	r5, [r3, #20]
          pOutput->pOutBuff[det_count].height      = pInbuff[i + AI_YOLOV2_PP_HEIGHTREL];
3400c558:	60df      	str	r7, [r3, #12]
          pOutput->pOutBuff[det_count].conf        = pInbuff[i + AI_YOLOV2_PP_CLASSPROB];
3400c55a:	f854 7c04 	ldr.w	r7, [r4, #-4]
3400c55e:	611f      	str	r7, [r3, #16]
      for (int32_t i = 0; i < (level_count_detect * anch_stride); i += anch_stride)
3400c560:	e7e0      	b.n	3400c524 <st_yolox_pp_store_detections+0x82>
              if (best_score_array[_i] >= pInput_static_param->conf_threshold)
3400c562:	9a14      	ldr	r2, [sp, #80]	@ 0x50
3400c564:	ecf0 7a01 	vldmia	r0!, {s15}
3400c568:	ed92 7a0a 	vldr	s14, [r2, #40]	@ 0x28
3400c56c:	eef4 7ac7 	vcmpe.f32	s15, s14
3400c570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c574:	db1e      	blt.n	3400c5b4 <st_yolox_pp_store_detections+0x112>
                  pOutput->pOutBuff[det_count].x_center    = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_XCENTER ];
3400c576:	f04f 0c18 	mov.w	ip, #24
3400c57a:	f8db 2000 	ldr.w	r2, [fp]
3400c57e:	fb0c 2206 	mla	r2, ip, r6, r2
3400c582:	f8d5 c000 	ldr.w	ip, [r5]
                  det_count++;
3400c586:	3601      	adds	r6, #1
                  pOutput->pOutBuff[det_count].x_center    = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_XCENTER ];
3400c588:	f8c2 c000 	str.w	ip, [r2]
                  pOutput->pOutBuff[det_count].y_center    = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_YCENTER];
3400c58c:	f8d5 c004 	ldr.w	ip, [r5, #4]
3400c590:	f8c2 c004 	str.w	ip, [r2, #4]
                  pOutput->pOutBuff[det_count].width       = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_WIDTHREL];
3400c594:	f8d5 c008 	ldr.w	ip, [r5, #8]
3400c598:	f8c2 c008 	str.w	ip, [r2, #8]
                  pOutput->pOutBuff[det_count].height      = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_HEIGHTREL];
3400c59c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
                  pOutput->pOutBuff[det_count].conf        = best_score_array[_i];
3400c5a0:	edc2 7a04 	vstr	s15, [r2, #16]
                  pOutput->pOutBuff[det_count].height      = pInbuff[i + _i * anch_stride + AI_YOLOV2_PP_HEIGHTREL];
3400c5a4:	f8c2 c00c 	str.w	ip, [r2, #12]
                  pOutput->pOutBuff[det_count].class_index = class_index_array[_i];
3400c5a8:	f10d 0c10 	add.w	ip, sp, #16
3400c5ac:	f83c c011 	ldrh.w	ip, [ip, r1, lsl #1]
3400c5b0:	f8c2 c014 	str.w	ip, [r2, #20]
          for (int _i = 0; _i < MIN(remaining_boxes,4); _i++)
3400c5b4:	9a02      	ldr	r2, [sp, #8]
3400c5b6:	3101      	adds	r1, #1
3400c5b8:	4415      	add	r5, r2
3400c5ba:	e7a8      	b.n	3400c50e <st_yolox_pp_store_detections+0x6c>

3400c5bc <st_yolox_pp_getNNBoxes_centroid>:

int32_t st_yolox_pp_getNNBoxes_centroid(st_yolox_pp_in_t *pInput,
                                        od_pp_out_t *pOut,
                                        st_yolox_pp_static_param_t *pInput_static_param)
{
3400c5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400c5c0:	b084      	sub	sp, #16

    int32_t count_detect_L = 0;
    int32_t count_detect_M = 0;
    int32_t count_detect_S = 0;

    float32_t tmp_a[pInput_static_param->nb_classes];
3400c5c2:	6813      	ldr	r3, [r2, #0]
{
3400c5c4:	af04      	add	r7, sp, #16
    float32_t tmp_a[pInput_static_param->nb_classes];
3400c5c6:	009b      	lsls	r3, r3, #2
3400c5c8:	3307      	adds	r3, #7
3400c5ca:	f023 0307 	bic.w	r3, r3, #7
3400c5ce:	ebad 0d03 	sub.w	sp, sp, r3
3400c5d2:	f10d 0910 	add.w	r9, sp, #16
    float32_t *pInbuff, *pAnchors;

    //level L
    grid_width = pInput_static_param->grid_width_L;
    grid_height = pInput_static_param->grid_height_L;
    pInbuff = (float32_t *)pInput->pRaw_detections_L;
3400c5d6:	f8d0 8000 	ldr.w	r8, [r0]
    pAnchors = (float32_t *)pInput_static_param->pAnchors_L;
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c5da:	e9cd 9201 	strd	r9, r2, [sp, #4]
3400c5de:	68d3      	ldr	r3, [r2, #12]
{
3400c5e0:	460d      	mov	r5, r1
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c5e2:	9300      	str	r3, [sp, #0]
3400c5e4:	6893      	ldr	r3, [r2, #8]
{
3400c5e6:	4606      	mov	r6, r0
3400c5e8:	4614      	mov	r4, r2
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c5ea:	4641      	mov	r1, r8
3400c5ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
3400c5ee:	4640      	mov	r0, r8
3400c5f0:	f7ff fe03 	bl	3400c1fa <st_yolox_pp_level_decode>
    int32_t init_det_count = 0;
    int32_t det_count_L = 0;
    int32_t det_count_M = 0;
    int32_t det_count_S = 0;

    if (pOut->pOutBuff == NULL)
3400c5f4:	682b      	ldr	r3, [r5, #0]
    count_detect_L = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c5f6:	4602      	mov	r2, r0
    if (pOut->pOutBuff == NULL)
3400c5f8:	b90b      	cbnz	r3, 3400c5fe <st_yolox_pp_getNNBoxes_centroid+0x42>
    {
      pOut->pOutBuff = (od_pp_outBuffer_t *)pInput->pRaw_detections_L;
3400c5fa:	6833      	ldr	r3, [r6, #0]
3400c5fc:	602b      	str	r3, [r5, #0]
    }

    det_count_L = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_L,init_det_count,pInput_static_param);
3400c5fe:	4629      	mov	r1, r5
3400c600:	2300      	movs	r3, #0
3400c602:	4640      	mov	r0, r8
3400c604:	9400      	str	r4, [sp, #0]
3400c606:	f7ff ff4c 	bl	3400c4a2 <st_yolox_pp_store_detections>
    //==============================================================================================================================================================

    //level M
    grid_width = pInput_static_param->grid_width_M;
    grid_height = pInput_static_param->grid_height_M;
    pInbuff = (float32_t *)pInput->pRaw_detections_M;
3400c60a:	f8d6 8004 	ldr.w	r8, [r6, #4]
    pAnchors = (float32_t *)pInput_static_param->pAnchors_M;
    count_detect_M = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c60e:	e9cd 9401 	strd	r9, r4, [sp, #4]
3400c612:	6963      	ldr	r3, [r4, #20]
    det_count_L = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_L,init_det_count,pInput_static_param);
3400c614:	4682      	mov	sl, r0
    count_detect_M = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c616:	9300      	str	r3, [sp, #0]
3400c618:	4641      	mov	r1, r8
3400c61a:	6923      	ldr	r3, [r4, #16]
3400c61c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
3400c61e:	4640      	mov	r0, r8
3400c620:	f7ff fdeb 	bl	3400c1fa <st_yolox_pp_level_decode>

    det_count_M = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_M,det_count_L,pInput_static_param);
3400c624:	4653      	mov	r3, sl
    count_detect_M = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c626:	4602      	mov	r2, r0
    det_count_M = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_M,det_count_L,pInput_static_param);
3400c628:	4629      	mov	r1, r5
3400c62a:	4640      	mov	r0, r8
3400c62c:	9400      	str	r4, [sp, #0]
3400c62e:	f7ff ff38 	bl	3400c4a2 <st_yolox_pp_store_detections>


    //level S
    grid_width = pInput_static_param->grid_width_S;
    grid_height = pInput_static_param->grid_height_S;
    pInbuff = (float32_t *)pInput->pRaw_detections_S;
3400c632:	68b6      	ldr	r6, [r6, #8]
    pAnchors = (float32_t *)pInput_static_param->pAnchors_S;
    count_detect_S = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c634:	e9cd 9401 	strd	r9, r4, [sp, #4]
3400c638:	69e3      	ldr	r3, [r4, #28]
    det_count_M = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_M,det_count_L,pInput_static_param);
3400c63a:	4680      	mov	r8, r0
    count_detect_S = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c63c:	9300      	str	r3, [sp, #0]
3400c63e:	4631      	mov	r1, r6
3400c640:	69a3      	ldr	r3, [r4, #24]
3400c642:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
3400c644:	4630      	mov	r0, r6
3400c646:	f7ff fdd8 	bl	3400c1fa <st_yolox_pp_level_decode>

    det_count_S = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_S,det_count_M,pInput_static_param);
3400c64a:	4643      	mov	r3, r8
    count_detect_S = st_yolox_pp_level_decode(pInbuff, pInbuff, pAnchors, grid_width, grid_height,tmp_a,pInput_static_param);
3400c64c:	4602      	mov	r2, r0
    det_count_S = st_yolox_pp_store_detections(pInbuff,pOut,count_detect_S,det_count_M,pInput_static_param);
3400c64e:	4629      	mov	r1, r5
3400c650:	4630      	mov	r0, r6
3400c652:	9400      	str	r4, [sp, #0]
3400c654:	f7ff ff25 	bl	3400c4a2 <st_yolox_pp_store_detections>

    pInput_static_param->nb_detect = det_count_S;
3400c658:	63e0      	str	r0, [r4, #60]	@ 0x3c

    return (error);
}
3400c65a:	2000      	movs	r0, #0
3400c65c:	46bd      	mov	sp, r7
3400c65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

3400c662 <od_st_yolox_pp_reset>:


/* ----------------------       Exported routines      ---------------------- */

int32_t od_st_yolox_pp_reset(st_yolox_pp_static_param_t *pInput_static_param)
{
3400c662:	4603      	mov	r3, r0
    /* Initializations */
    pInput_static_param->nb_detect = 0;
3400c664:	2000      	movs	r0, #0
3400c666:	63d8      	str	r0, [r3, #60]	@ 0x3c

	return (AI_OD_POSTPROCESS_ERROR_NO);
}
3400c668:	4770      	bx	lr

3400c66a <od_st_yolox_pp_process>:


int32_t od_st_yolox_pp_process(st_yolox_pp_in_t *pInput,
                               od_pp_out_t *pOutput,
                               st_yolox_pp_static_param_t *pInput_static_param)
{
3400c66a:	b538      	push	{r3, r4, r5, lr}
3400c66c:	460c      	mov	r4, r1
3400c66e:	4615      	mov	r5, r2
    int32_t error   = AI_OD_POSTPROCESS_ERROR_NO;

    /* Call Get NN boxes first */
    error = st_yolox_pp_getNNBoxes_centroid(pInput,
3400c670:	f7ff ffa4 	bl	3400c5bc <st_yolox_pp_getNNBoxes_centroid>
                                            pOutput,
                                            pInput_static_param);
    if (error != AI_OD_POSTPROCESS_ERROR_NO) return (error);
3400c674:	b950      	cbnz	r0, 3400c68c <od_st_yolox_pp_process+0x22>

    /* Then NMS */
    error = st_yolox_pp_nmsFiltering_centroid(pOutput,
3400c676:	4629      	mov	r1, r5
3400c678:	4620      	mov	r0, r4
3400c67a:	f7ff fd0d 	bl	3400c098 <st_yolox_pp_nmsFiltering_centroid>
                                              pInput_static_param);
    if (error != AI_OD_POSTPROCESS_ERROR_NO) return (error);
3400c67e:	b928      	cbnz	r0, 3400c68c <od_st_yolox_pp_process+0x22>

    /* And score re-filtering */
    error = st_yolox_pp_scoreFiltering_centroid(pOutput,
3400c680:	4629      	mov	r1, r5
3400c682:	4620      	mov	r0, r4
                                                pInput_static_param);

    return (error);
}
3400c684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    error = st_yolox_pp_scoreFiltering_centroid(pOutput,
3400c688:	f7ff bd82 	b.w	3400c190 <st_yolox_pp_scoreFiltering_centroid>
}
3400c68c:	bd38      	pop	{r3, r4, r5, pc}

3400c68e <pd_pp_nms_comparator>:
static int32_t pd_pp_nms_comparator(const void *arg1, const void *arg2)
{
  const pd_pp_box_t *box1 = arg1;
  const pd_pp_box_t *box2 = arg2;

  if (box1->prob < box2->prob)
3400c68e:	ed90 7a00 	vldr	s14, [r0]
3400c692:	edd1 7a00 	vldr	s15, [r1]
3400c696:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return 1;

  if (box1->prob > box2->prob)
3400c69e:	eeb4 7a67 	vcmp.f32	s14, s15
3400c6a2:	bfcc      	ite	gt
3400c6a4:	f04f 30ff 	movgt.w	r0, #4294967295
3400c6a8:	2000      	movle	r0, #0
3400c6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return -1;

  return 0;
}
3400c6ae:	bf48      	it	mi
3400c6b0:	2001      	movmi	r0, #1
3400c6b2:	4770      	bx	lr

3400c6b4 <pd_model_pp_reset>:
  return hand_nb;
}
int32_t pd_model_pp_reset(pd_model_pp_static_param_t *pInput_static_param)
{
  return AI_PD_POSTPROCESS_ERROR_NO;
}
3400c6b4:	2000      	movs	r0, #0
3400c6b6:	4770      	bx	lr

3400c6b8 <pd_model_pp_process>:
  float32_t width  = pInput_static_param->width;
3400c6b8:	edd2 7a00 	vldr	s15, [r2]


int32_t pd_model_pp_process(pd_model_pp_in_t *pInput,
                            pd_postprocess_out_t *pOutput,
                            pd_model_pp_static_param_t *pInput_static_param)
{
3400c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pOutput->box_nb = 0;
3400c6c0:	2600      	movs	r6, #0
{
3400c6c2:	ed2d 8b04 	vpush	{d8-d9}
  float32_t width  = pInput_static_param->width;
3400c6c6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
  float32_t height = pInput_static_param->height;
3400c6ca:	edd2 7a01 	vldr	s15, [r2, #4]
{
3400c6ce:	4614      	mov	r4, r2
3400c6d0:	468a      	mov	sl, r1
  float32_t height = pInput_static_param->height;
3400c6d2:	eef8 8a67 	vcvt.f32.u32	s17, s15
  size_t box_nb = 0;
3400c6d6:	4635      	mov	r5, r6
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c6d8:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
  const size_t in_struct_size = (2 * pInput_static_param->nb_keypoints) + AI_PD_MODEL_PP_KEYPOINTS;// CEN TBD
3400c6dc:	f8d2 b008 	ldr.w	fp, [r2, #8]
{
3400c6e0:	b095      	sub	sp, #84	@ 0x54
  const size_t in_struct_size = (2 * pInput_static_param->nb_keypoints) + AI_PD_MODEL_PP_KEYPOINTS;// CEN TBD
3400c6e2:	f10b 0302 	add.w	r3, fp, #2
3400c6e6:	00db      	lsls	r3, r3, #3
  pd_pp_box_t *pBoxes = (pd_pp_box_t *)pOutput->pOutData;
3400c6e8:	f8d1 8000 	ldr.w	r8, [r1]
3400c6ec:	6802      	ldr	r2, [r0, #0]
3400c6ee:	6847      	ldr	r7, [r0, #4]
3400c6f0:	f8d4 901c 	ldr.w	r9, [r4, #28]
  pOutput->box_nb = 0;
3400c6f4:	604e      	str	r6, [r1, #4]
  for (uint32_t i = 0; i < pInput_static_param->nb_total_boxes; i++) {
3400c6f6:	9301      	str	r3, [sp, #4]
3400c6f8:	6963      	ldr	r3, [r4, #20]
3400c6fa:	429e      	cmp	r6, r3
3400c6fc:	d31b      	bcc.n	3400c736 <pd_model_pp_process+0x7e>
  qsort(pd_boxes, box_nb, sizeof(pd_pp_box_t), pd_pp_nms_comparator);
3400c6fe:	2218      	movs	r2, #24
3400c700:	4629      	mov	r1, r5
3400c702:	4640      	mov	r0, r8
3400c704:	4bb6      	ldr	r3, [pc, #728]	@ (3400c9e0 <pd_model_pp_process+0x328>)
  pOutput->box_nb = box_nb;
3400c706:	f8ca 5004 	str.w	r5, [sl, #4]
  qsort(pd_boxes, box_nb, sizeof(pd_pp_box_t), pd_pp_nms_comparator);
3400c70a:	f012 fdb2 	bl	3401f272 <qsort>
  for (size_t i = 0; i < box_nb; i++) {
3400c70e:	f04f 0e18 	mov.w	lr, #24
3400c712:	4647      	mov	r7, r8
  int hand_nb = 0;
3400c714:	f04f 0c00 	mov.w	ip, #0
  corners[0].x = box->x_center - box->width / 2;
3400c718:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
    return 0;
3400c71c:	ed9f 4ab1 	vldr	s8, [pc, #708]	@ 3400c9e4 <pd_model_pp_process+0x32c>
3400c720:	fb0e 8e05 	mla	lr, lr, r5, r8
  for (size_t i = 0; i < box_nb; i++) {
3400c724:	4577      	cmp	r7, lr
3400c726:	f040 8157 	bne.w	3400c9d8 <pd_model_pp_process+0x320>
  }
  pd_pp_nms(pOutput,
            pInput_static_param);

  return ret;
}
3400c72a:	2000      	movs	r0, #0
3400c72c:	b015      	add	sp, #84	@ 0x54
3400c72e:	ecbd 8b04 	vpop	{d8-d9}
3400c732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pd_pp_box_t *pBox = &pBoxes[box_nb]; //&pd_boxes[box_nb];
3400c736:	2318      	movs	r3, #24
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c738:	ecb2 0a01 	vldmia	r2!, {s0}
    pd_pp_box_t *pBox = &pBoxes[box_nb]; //&pd_boxes[box_nb];
3400c73c:	fb03 8105 	mla	r1, r3, r5, r8
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c740:	eeb1 0a40 	vneg.f32	s0, s0
    pd_pp_box_t *pBox = &pBoxes[box_nb]; //&pd_boxes[box_nb];
3400c744:	9103      	str	r1, [sp, #12]
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c746:	9202      	str	r2, [sp, #8]
3400c748:	f016 fafe 	bl	34022d48 <expf>
3400c74c:	ee30 0a09 	vadd.f32	s0, s0, s18
    if (pBox->prob >= pInput_static_param->conf_threshold) {
3400c750:	ed94 7a03 	vldr	s14, [r4, #12]
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c754:	eec9 7a00 	vdiv.f32	s15, s18, s0
    if (pBox->prob >= pInput_static_param->conf_threshold) {
3400c758:	eef4 7ac7 	vcmpe.f32	s15, s14
3400c75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c760:	9903      	ldr	r1, [sp, #12]
    if (pBox->prob >= pInput_static_param->conf_threshold) {
3400c762:	9a02      	ldr	r2, [sp, #8]
    pBox->prob = 1.0f / (1.0f + expf(-pRawProbs[i]));
3400c764:	edc1 7a00 	vstr	s15, [r1]
    if (pBox->prob >= pInput_static_param->conf_threshold) {
3400c768:	db2d      	blt.n	3400c7c6 <pd_model_pp_process+0x10e>
      pBox->x_center = (pAnchors[i*2+0] * width  + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_XCENTER]) / width;
3400c76a:	ed99 7a00 	vldr	s14, [r9]
3400c76e:	edd7 7a00 	vldr	s15, [r7]
3400c772:	eee8 7a07 	vfma.f32	s15, s16, s14
3400c776:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400c77a:	ed81 7a01 	vstr	s14, [r1, #4]
      pBox->y_center = (pAnchors[i*2+1] * height + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_YCENTER]) / height;
3400c77e:	edd7 7a01 	vldr	s15, [r7, #4]
3400c782:	ed99 7a01 	vldr	s14, [r9, #4]
3400c786:	eee8 7a87 	vfma.f32	s15, s17, s14
3400c78a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
3400c78e:	ed81 7a02 	vstr	s14, [r1, #8]
      pBox->width = pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_WIDTHREL]  / width;
3400c792:	ed97 7a02 	vldr	s14, [r7, #8]
3400c796:	eec7 7a08 	vdiv.f32	s15, s14, s16
3400c79a:	edc1 7a03 	vstr	s15, [r1, #12]
      pBox->height = pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_HEIGHTREL] / height;
3400c79e:	ed97 7a03 	vldr	s14, [r7, #12]
3400c7a2:	eec7 7a28 	vdiv.f32	s15, s14, s17
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c7a6:	4638      	mov	r0, r7
      pBox->height = pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_HEIGHTREL] / height;
3400c7a8:	edc1 7a04 	vstr	s15, [r1, #16]
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c7ac:	f04f 0e00 	mov.w	lr, #0
3400c7b0:	f10b 0c01 	add.w	ip, fp, #1
3400c7b4:	f1bc 0c01 	subs.w	ip, ip, #1
3400c7b8:	f100 0008 	add.w	r0, r0, #8
3400c7bc:	d109      	bne.n	3400c7d2 <pd_model_pp_process+0x11a>
      if (box_nb >= pInput_static_param->max_boxes_limit) {
3400c7be:	69a3      	ldr	r3, [r4, #24]
      box_nb++;
3400c7c0:	3501      	adds	r5, #1
      if (box_nb >= pInput_static_param->max_boxes_limit) {
3400c7c2:	429d      	cmp	r5, r3
3400c7c4:	d29b      	bcs.n	3400c6fe <pd_model_pp_process+0x46>
  for (uint32_t i = 0; i < pInput_static_param->nb_total_boxes; i++) {
3400c7c6:	9b01      	ldr	r3, [sp, #4]
3400c7c8:	3601      	adds	r6, #1
3400c7ca:	441f      	add	r7, r3
3400c7cc:	f109 0908 	add.w	r9, r9, #8
3400c7d0:	e792      	b.n	3400c6f8 <pd_model_pp_process+0x40>
        pBox->pKps[j].x = (pAnchors[i*2+0] * width  + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_KEYPOINTS + (2 * j) + 0]) / width;
3400c7d2:	ed99 7a00 	vldr	s14, [r9]
3400c7d6:	edd0 7a02 	vldr	s15, [r0, #8]
3400c7da:	eee8 7a07 	vfma.f32	s15, s16, s14
3400c7de:	ee87 7a88 	vdiv.f32	s14, s15, s16
3400c7e2:	694b      	ldr	r3, [r1, #20]
3400c7e4:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
3400c7e8:	ed83 7a00 	vstr	s14, [r3]
        pBox->pKps[j].y = (pAnchors[i*2+1] * height + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_KEYPOINTS + (2 * j) + 1]) / height;
3400c7ec:	ed99 7a01 	vldr	s14, [r9, #4]
3400c7f0:	edd0 7a03 	vldr	s15, [r0, #12]
3400c7f4:	eee8 7a87 	vfma.f32	s15, s17, s14
3400c7f8:	ee87 7aa8 	vdiv.f32	s14, s15, s17
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c7fc:	f10e 0e01 	add.w	lr, lr, #1
        pBox->pKps[j].y = (pAnchors[i*2+1] * height + pRawBoxes[i * in_struct_size + AI_PD_MODEL_PP_KEYPOINTS + (2 * j) + 1]) / height;
3400c800:	ed83 7a01 	vstr	s14, [r3, #4]
      for (uint32_t j = 0; j < pInput_static_param->nb_keypoints; j++) {
3400c804:	e7d6      	b.n	3400c7b4 <pd_model_pp_process+0xfc>
  corners[0].x = box->x_center - box->width / 2;
3400c806:	ed97 7a01 	vldr	s14, [r7, #4]
3400c80a:	edd7 5a03 	vldr	s11, [r7, #12]
3400c80e:	eef0 7a47 	vmov.f32	s15, s14
3400c812:	eee5 7ae6 	vfms.f32	s15, s11, s13
  corners[0].y = box->y_center - box->height / 2;
3400c816:	ed97 6a04 	vldr	s12, [r7, #16]
  corners[1].x = box->x_center + box->width / 2;
3400c81a:	eea5 7aa6 	vfma.f32	s14, s11, s13
  corners[0].x = box->x_center - box->width / 2;
3400c81e:	edcd 7a0c 	vstr	s15, [sp, #48]	@ 0x30
  corners[0].y = box->y_center - box->height / 2;
3400c822:	edd7 7a02 	vldr	s15, [r7, #8]
  corners[1].x = box->x_center + box->width / 2;
3400c826:	ed8d 7a0e 	vstr	s14, [sp, #56]	@ 0x38
  corners[0].y = box->y_center - box->height / 2;
3400c82a:	eeb0 5a67 	vmov.f32	s10, s15
  corners[0].x = box->x_center - box->width / 2;
3400c82e:	ed93 7a01 	vldr	s14, [r3, #4]
  corners[1].y = box->y_center + box->height / 2;
3400c832:	eee6 7a26 	vfma.f32	s15, s12, s13
  corners[0].x = box->x_center - box->width / 2;
3400c836:	edd3 5a03 	vldr	s11, [r3, #12]
  corners[1].y = box->y_center + box->height / 2;
3400c83a:	edcd 7a0f 	vstr	s15, [sp, #60]	@ 0x3c
  corners[0].x = box->x_center - box->width / 2;
3400c83e:	eef0 7a47 	vmov.f32	s15, s14
3400c842:	eee5 7ae6 	vfms.f32	s15, s11, s13
  corners[0].y = box->y_center - box->height / 2;
3400c846:	eea6 5a66 	vfms.f32	s10, s12, s13
  corners[0].x = box->x_center - box->width / 2;
3400c84a:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
  corners[0].y = box->y_center - box->height / 2;
3400c84e:	edd3 7a02 	vldr	s15, [r3, #8]
3400c852:	ed93 6a04 	vldr	s12, [r3, #16]
3400c856:	ed8d 5a0d 	vstr	s10, [sp, #52]	@ 0x34
3400c85a:	eeb0 5a67 	vmov.f32	s10, s15
  corners[1].x = box->x_center + box->width / 2;
3400c85e:	eea5 7aa6 	vfma.f32	s14, s11, s13
  corners[0].y = box->y_center - box->height / 2;
3400c862:	eea6 5a66 	vfms.f32	s10, s12, s13
  corners[1].y = box->y_center + box->height / 2;
3400c866:	eee6 7a26 	vfma.f32	s15, s12, s13
  corners[0].y = box->y_center - box->height / 2;
3400c86a:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
  corners[1].x = box->x_center + box->width / 2;
3400c86e:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
  corners[1].y = box->y_center + box->height / 2;
3400c872:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
  for (i = 0; i < 2; i++) {
3400c876:	2000      	movs	r0, #0
3400c878:	aa0c      	add	r2, sp, #48	@ 0x30
3400c87a:	ae08      	add	r6, sp, #32
3400c87c:	ad0a      	add	r5, sp, #40	@ 0x28
3400c87e:	f10d 0a10 	add.w	sl, sp, #16
3400c882:	f10d 0918 	add.w	r9, sp, #24
    xmin[i] = MIN(corners[i][0].x, corners[i][1].x);
3400c886:	ed92 7a00 	vldr	s14, [r2]
3400c88a:	edd2 7a02 	vldr	s15, [r2, #8]
3400c88e:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400c892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c896:	d408      	bmi.n	3400c8aa <pd_model_pp_process+0x1f2>
    xmax[i] = MAX(corners[i][0].x, corners[i][1].x);
3400c898:	bfc9      	itett	gt
3400c89a:	ee17 ba90 	vmovgt	fp, s15
3400c89e:	eeb0 7a67 	vmovle.f32	s14, s15
3400c8a2:	eef0 7a47 	vmovgt.f32	s15, s14
3400c8a6:	ee07 ba10 	vmovgt	s14, fp
    xmin[i] = MIN(corners[i][0].x, corners[i][1].x);
3400c8aa:	ecaa 7a01 	vstmia	sl!, {s14}
    xmax[i] = MAX(corners[i][0].x, corners[i][1].x);
3400c8ae:	ece9 7a01 	vstmia	r9!, {s15}
    ymin[i] = MIN(corners[i][0].y, corners[i][1].y);
3400c8b2:	ed92 7a01 	vldr	s14, [r2, #4]
3400c8b6:	edd2 7a03 	vldr	s15, [r2, #12]
3400c8ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
3400c8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c8c2:	d408      	bmi.n	3400c8d6 <pd_model_pp_process+0x21e>
    ymax[i] = MAX(corners[i][0].y, corners[i][1].y);
3400c8c4:	bfc9      	itett	gt
3400c8c6:	ee17 ba90 	vmovgt	fp, s15
3400c8ca:	eeb0 7a67 	vmovle.f32	s14, s15
3400c8ce:	eef0 7a47 	vmovgt.f32	s15, s14
3400c8d2:	ee07 ba10 	vmovgt	s14, fp
    ymin[i] = MIN(corners[i][0].y, corners[i][1].y);
3400c8d6:	eca6 7a01 	vstmia	r6!, {s14}
    ymax[i] = MAX(corners[i][0].y, corners[i][1].y);
3400c8da:	ece5 7a01 	vstmia	r5!, {s15}
  for (i = 0; i < 2; i++) {
3400c8de:	3210      	adds	r2, #16
3400c8e0:	2800      	cmp	r0, #0
3400c8e2:	d074      	beq.n	3400c9ce <pd_model_pp_process+0x316>
    area[i] = (ymax[i] - ymin[i]) * (xmax[i] - xmin[i]);
3400c8e4:	eddd 3a0a 	vldr	s7, [sp, #40]	@ 0x28
3400c8e8:	eddd 2a08 	vldr	s5, [sp, #32]
3400c8ec:	ed9d 3a06 	vldr	s6, [sp, #24]
3400c8f0:	ed9d 2a04 	vldr	s4, [sp, #16]
3400c8f4:	ee33 6ae2 	vsub.f32	s12, s7, s5
3400c8f8:	ee73 7a42 	vsub.f32	s15, s6, s4
3400c8fc:	ee26 6a27 	vmul.f32	s12, s12, s15
  if (area[0] <= 0 || area[1] <= 0)
3400c900:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
3400c904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    area[i] = (ymax[i] - ymin[i]) * (xmax[i] - xmin[i]);
3400c908:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
3400c90c:	eddd 4a09 	vldr	s9, [sp, #36]	@ 0x24
3400c910:	ed9d 7a07 	vldr	s14, [sp, #28]
3400c914:	ed9d 5a05 	vldr	s10, [sp, #20]
    return 0;
3400c918:	eef0 5a44 	vmov.f32	s11, s8
  if (area[0] <= 0 || area[1] <= 0)
3400c91c:	d93c      	bls.n	3400c998 <pd_model_pp_process+0x2e0>
    area[i] = (ymax[i] - ymin[i]) * (xmax[i] - xmin[i]);
3400c91e:	ee77 5ae4 	vsub.f32	s11, s15, s9
3400c922:	ee77 1a45 	vsub.f32	s3, s14, s10
3400c926:	ee65 5aa1 	vmul.f32	s11, s11, s3
  if (area[0] <= 0 || area[1] <= 0)
3400c92a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
3400c92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c932:	d94e      	bls.n	3400c9d2 <pd_model_pp_process+0x31a>
  intersect_xmin = MAX(xmin[0], xmin[1]);
3400c934:	eeb4 2a45 	vcmp.f32	s4, s10
3400c938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  intersect_ymin = MAX(ymin[0], ymin[1]);
3400c93c:	eef4 2a64 	vcmp.f32	s5, s9
  intersect_xmin = MAX(xmin[0], xmin[1]);
3400c940:	fe32 5a05 	vselgt.f32	s10, s4, s10
  intersect_ymin = MAX(ymin[0], ymin[1]);
3400c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  intersect_xmax = MIN(xmax[0], xmax[1]);
3400c948:	eeb4 3a47 	vcmp.f32	s6, s14
  intersect_ymin = MAX(ymin[0], ymin[1]);
3400c94c:	fe72 4aa4 	vselgt.f32	s9, s5, s9
  intersect_xmax = MIN(xmax[0], xmax[1]);
3400c950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  intersect_ymax = MIN(ymax[0], ymax[1]);
3400c954:	eef4 3a67 	vcmp.f32	s7, s15
  intersect_xmax = MIN(xmax[0], xmax[1]);
3400c958:	bf48      	it	mi
3400c95a:	eeb0 7a43 	vmovmi.f32	s14, s6
  intersect_ymax = MIN(ymax[0], ymax[1]);
3400c95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c962:	bf48      	it	mi
3400c964:	eef0 7a63 	vmovmi.f32	s15, s7
  intersect_area = MAX(intersect_ymax - intersect_ymin, 0.0f) * MAX(intersect_xmax - intersect_xmin, 0.0f);
3400c968:	ee77 7ae4 	vsub.f32	s15, s15, s9
3400c96c:	ee37 7a45 	vsub.f32	s14, s14, s10
3400c970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3400c974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c978:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
3400c97c:	fe77 7a84 	vselgt.f32	s15, s15, s8
3400c980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c984:	fe37 7a04 	vselgt.f32	s14, s14, s8
3400c988:	ee67 7a87 	vmul.f32	s15, s15, s14
  return intersect_area / (area[0] + area[1] - intersect_area);
3400c98c:	ee36 6a25 	vadd.f32	s12, s12, s11
3400c990:	ee36 6a67 	vsub.f32	s12, s12, s15
3400c994:	eec7 5a86 	vdiv.f32	s11, s15, s12
      if (iou >= pInput_static_param->iou_threshold) {
3400c998:	edd4 7a04 	vldr	s15, [r4, #16]
3400c99c:	eef4 7ae5 	vcmpe.f32	s15, s11
3400c9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400c9a4:	f103 0318 	add.w	r3, r3, #24
3400c9a8:	d90f      	bls.n	3400c9ca <pd_model_pp_process+0x312>
    for (int j = 0; j < hand_nb; j++) {
3400c9aa:	3101      	adds	r1, #1
3400c9ac:	4561      	cmp	r1, ip
3400c9ae:	f6ff af2a 	blt.w	3400c806 <pd_model_pp_process+0x14e>
    pd_boxes[hand_nb++] = pd_boxes[i];
3400c9b2:	2518      	movs	r5, #24
3400c9b4:	463e      	mov	r6, r7
3400c9b6:	fb05 850c 	mla	r5, r5, ip, r8
3400c9ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
3400c9bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3400c9be:	e896 0003 	ldmia.w	r6, {r0, r1}
3400c9c2:	e885 0003 	stmia.w	r5, {r0, r1}
3400c9c6:	f10c 0c01 	add.w	ip, ip, #1
  for (size_t i = 0; i < box_nb; i++) {
3400c9ca:	3718      	adds	r7, #24
3400c9cc:	e6aa      	b.n	3400c724 <pd_model_pp_process+0x6c>
3400c9ce:	2001      	movs	r0, #1
3400c9d0:	e759      	b.n	3400c886 <pd_model_pp_process+0x1ce>
    return 0;
3400c9d2:	eef0 5a44 	vmov.f32	s11, s8
3400c9d6:	e7df      	b.n	3400c998 <pd_model_pp_process+0x2e0>
3400c9d8:	4643      	mov	r3, r8
    for (int j = 0; j < hand_nb; j++) {
3400c9da:	2100      	movs	r1, #0
3400c9dc:	e7e6      	b.n	3400c9ac <pd_model_pp_process+0x2f4>
3400c9de:	bf00      	nop
3400c9e0:	3400c68f 	.word	0x3400c68f
3400c9e4:	00000000 	.word	0x00000000

3400c9e8 <vision_models_sigmoid_f>:
#include "vision_models_pp.h"



float32_t vision_models_sigmoid_f(float32_t x)
{
3400c9e8:	b508      	push	{r3, lr}
  return (1.0f / (1.0f + expf(-x)));
3400c9ea:	eeb1 0a40 	vneg.f32	s0, s0
3400c9ee:	f016 f9ab 	bl	34022d48 <expf>
3400c9f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400c9f6:	ee30 0a27 	vadd.f32	s0, s0, s15
}
3400c9fa:	ee87 0a80 	vdiv.f32	s0, s15, s0
3400c9fe:	bd08      	pop	{r3, pc}

3400ca00 <vision_models_softmax_f>:


void vision_models_softmax_f(float32_t *input_x, float32_t *output_x, int32_t len_x, float32_t *tmp_x)
{
3400ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400ca04:	460f      	mov	r7, r1
3400ca06:	ed2d 8b02 	vpush	{d8}
3400ca0a:	4614      	mov	r4, r2
3400ca0c:	461d      	mov	r5, r3
3400ca0e:	4606      	mov	r6, r0
3400ca10:	4698      	mov	r8, r3
  float32_t sum = 0;

  for (int32_t i = 0; i < len_x; ++i)
3400ca12:	469a      	mov	sl, r3
3400ca14:	f04f 0900 	mov.w	r9, #0
  float32_t sum = 0;
3400ca18:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 3400ca6c <vision_models_softmax_f+0x6c>
  for (int32_t i = 0; i < len_x; ++i)
3400ca1c:	45a1      	cmp	r9, r4
3400ca1e:	db13      	blt.n	3400ca48 <vision_models_softmax_f+0x48>
  {
    tmp_x[i] = expf(input_x[i]);
    sum = sum + tmp_x[i];
  }
  sum = 1.0f / sum;
3400ca20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3400ca24:	2c00      	cmp	r4, #0
3400ca26:	f104 0201 	add.w	r2, r4, #1
3400ca2a:	ee87 7a88 	vdiv.f32	s14, s15, s16
  for (int32_t i = 0; i < len_x; ++i)
3400ca2e:	bfb8      	it	lt
3400ca30:	2201      	movlt	r2, #1
3400ca32:	3a01      	subs	r2, #1
3400ca34:	d113      	bne.n	3400ca5e <vision_models_softmax_f+0x5e>
  {
    tmp_x[i] *= sum;
  }
  memcpy(output_x, tmp_x, len_x * sizeof(float32_t));
}
3400ca36:	ecbd 8b02 	vpop	{d8}
  memcpy(output_x, tmp_x, len_x * sizeof(float32_t));
3400ca3a:	4629      	mov	r1, r5
3400ca3c:	4638      	mov	r0, r7
3400ca3e:	00a2      	lsls	r2, r4, #2
}
3400ca40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  memcpy(output_x, tmp_x, len_x * sizeof(float32_t));
3400ca44:	f013 be8f 	b.w	34020766 <memcpy>
    tmp_x[i] = expf(input_x[i]);
3400ca48:	ecb6 0a01 	vldmia	r6!, {s0}
3400ca4c:	f016 f97c 	bl	34022d48 <expf>
  for (int32_t i = 0; i < len_x; ++i)
3400ca50:	f109 0901 	add.w	r9, r9, #1
    tmp_x[i] = expf(input_x[i]);
3400ca54:	ecaa 0a01 	vstmia	sl!, {s0}
    sum = sum + tmp_x[i];
3400ca58:	ee38 8a00 	vadd.f32	s16, s16, s0
  for (int32_t i = 0; i < len_x; ++i)
3400ca5c:	e7de      	b.n	3400ca1c <vision_models_softmax_f+0x1c>
    tmp_x[i] *= sum;
3400ca5e:	edd8 7a00 	vldr	s15, [r8]
3400ca62:	ee67 7a87 	vmul.f32	s15, s15, s14
3400ca66:	ece8 7a01 	vstmia	r8!, {s15}
  for (int32_t i = 0; i < len_x; ++i)
3400ca6a:	e7e2      	b.n	3400ca32 <vision_models_softmax_f+0x32>
3400ca6c:	00000000 	.word	0x00000000

3400ca70 <overlap>:

//***************iou ********
//inline
float32_t overlap(float32_t x1, float32_t w1, float32_t x2, float32_t w2)
{
  float32_t l1 = x1 - w1 / 2;
3400ca70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
3400ca74:	ee60 0aa7 	vmul.f32	s1, s1, s15
  float32_t l2 = x2 - w2 / 2;
3400ca78:	ee61 1aa7 	vmul.f32	s3, s3, s15
  float32_t l1 = x1 - w1 / 2;
3400ca7c:	ee30 7a60 	vsub.f32	s14, s0, s1
  float32_t l2 = x2 - w2 / 2;
3400ca80:	ee71 7a61 	vsub.f32	s15, s2, s3
  float32_t left = l1 > l2 ? l1 : l2;
  float32_t r1 = x1 + w1 / 2;
3400ca84:	ee70 0a80 	vadd.f32	s1, s1, s0
  float32_t left = l1 > l2 ? l1 : l2;
3400ca88:	eeb4 7a67 	vcmp.f32	s14, s15
  float32_t r2 = x2 + w2 / 2;
3400ca8c:	ee31 1a81 	vadd.f32	s2, s3, s2
  float32_t left = l1 > l2 ? l1 : l2;
3400ca90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t right = r1 < r2 ? r1 : r2;
3400ca94:	eef4 0a41 	vcmp.f32	s1, s2
  float32_t left = l1 > l2 ? l1 : l2;
3400ca98:	fe77 7a27 	vselgt.f32	s15, s14, s15
  float32_t right = r1 < r2 ? r1 : r2;
3400ca9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400caa0:	bf48      	it	mi
3400caa2:	eeb0 1a60 	vmovmi.f32	s2, s1
  return (right - left);
}
3400caa6:	ee31 0a67 	vsub.f32	s0, s2, s15
3400caaa:	4770      	bx	lr

3400caac <box_intersection>:

//inline
float32_t box_intersection(float32_t *a, float32_t *b)
{
  float32_t w = overlap(a[0], a[2], b[0], b[2]);
3400caac:	edd1 1a02 	vldr	s3, [r1, #8]
3400cab0:	ed91 1a00 	vldr	s2, [r1]
3400cab4:	edd0 0a02 	vldr	s1, [r0, #8]
3400cab8:	ed90 0a00 	vldr	s0, [r0]
{
3400cabc:	b508      	push	{r3, lr}
  float32_t w = overlap(a[0], a[2], b[0], b[2]);
3400cabe:	f7ff ffd7 	bl	3400ca70 <overlap>
  float32_t h = overlap(a[1], a[3], b[1], b[3]);
  if (w < 0 || h < 0) return 0;
3400cac2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3400cac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t w = overlap(a[0], a[2], b[0], b[2]);
3400caca:	eef0 6a40 	vmov.f32	s13, s0
  if (w < 0 || h < 0) return 0;
3400cace:	d411      	bmi.n	3400caf4 <box_intersection+0x48>
  float32_t h = overlap(a[1], a[3], b[1], b[3]);
3400cad0:	edd1 1a03 	vldr	s3, [r1, #12]
3400cad4:	ed91 1a01 	vldr	s2, [r1, #4]
3400cad8:	edd0 0a03 	vldr	s1, [r0, #12]
3400cadc:	ed90 0a01 	vldr	s0, [r0, #4]
3400cae0:	f7ff ffc6 	bl	3400ca70 <overlap>
  if (w < 0 || h < 0) return 0;
3400cae4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
3400cae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400caec:	d402      	bmi.n	3400caf4 <box_intersection+0x48>
  float32_t area = w * h;
3400caee:	ee26 0a80 	vmul.f32	s0, s13, s0
  return (area);
}
3400caf2:	bd08      	pop	{r3, pc}
  if (w < 0 || h < 0) return 0;
3400caf4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 3400cafc <box_intersection+0x50>
3400caf8:	e7fb      	b.n	3400caf2 <box_intersection+0x46>
3400cafa:	bf00      	nop
3400cafc:	00000000 	.word	0x00000000

3400cb00 <box_union>:

//inline
float32_t box_union(float32_t *a, float32_t *b)
{
3400cb00:	b510      	push	{r4, lr}
  float32_t i = box_intersection(a, b);
3400cb02:	f7ff ffd3 	bl	3400caac <box_intersection>
  float32_t u = a[2] * a[3] + b[2] * b[3] - i;
3400cb06:	ed91 7a03 	vldr	s14, [r1, #12]
3400cb0a:	edd1 7a02 	vldr	s15, [r1, #8]
3400cb0e:	edd0 6a02 	vldr	s13, [r0, #8]
3400cb12:	ee67 7a87 	vmul.f32	s15, s15, s14
3400cb16:	ed90 7a03 	vldr	s14, [r0, #12]
3400cb1a:	eee6 7a87 	vfma.f32	s15, s13, s14
  return (u);
}
3400cb1e:	ee37 0ac0 	vsub.f32	s0, s15, s0
3400cb22:	bd10      	pop	{r4, pc}

3400cb24 <vision_models_box_iou>:


float32_t vision_models_box_iou(float32_t *a, float32_t *b)
{
3400cb24:	b508      	push	{r3, lr}
  float32_t I = box_intersection(a, b);
3400cb26:	f7ff ffc1 	bl	3400caac <box_intersection>
  float32_t U = box_union(a, b);
 if (I == 0 || U == 0)
3400cb2a:	eeb5 0a40 	vcmp.f32	s0, #0.0
3400cb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t I = box_intersection(a, b);
3400cb32:	eeb0 6a40 	vmov.f32	s12, s0
 if (I == 0 || U == 0)
3400cb36:	d00b      	beq.n	3400cb50 <vision_models_box_iou+0x2c>
  float32_t U = box_union(a, b);
3400cb38:	f7ff ffe2 	bl	3400cb00 <box_union>
 if (I == 0 || U == 0)
3400cb3c:	eeb5 0a40 	vcmp.f32	s0, #0.0
3400cb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float32_t U = box_union(a, b);
3400cb44:	eef0 7a40 	vmov.f32	s15, s0
 if (I == 0 || U == 0)
3400cb48:	d002      	beq.n	3400cb50 <vision_models_box_iou+0x2c>
  {
    return 0;
  }
  return (I / U);
3400cb4a:	ee86 0a27 	vdiv.f32	s0, s12, s15
}
3400cb4e:	bd08      	pop	{r3, pc}
    return 0;
3400cb50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 3400cb58 <vision_models_box_iou+0x34>
3400cb54:	e7fb      	b.n	3400cb4e <vision_models_box_iou+0x2a>
3400cb56:	bf00      	nop
3400cb58:	00000000 	.word	0x00000000

3400cb5c <vision_models_maxi_p_if32ou16>:
    index++;
  }

}
void vision_models_maxi_p_if32ou16(float32_t *arr, uint32_t len_arr, uint16_t offset, float32_t *maxim, uint16_t *index, uint32_t parallelize)
{
3400cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  parallelize = MIN(4, parallelize);
3400cb60:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
3400cb64:	2c04      	cmp	r4, #4
3400cb66:	bf28      	it	cs
3400cb68:	2404      	movcs	r4, #4
3400cb6a:	46a4      	mov	ip, r4
  for (uint16_t k = 0; k < parallelize; k++)
3400cb6c:	2400      	movs	r4, #0
  {
    *index = 0;
3400cb6e:	46a0      	mov	r8, r4
  for (uint16_t k = 0; k < parallelize; k++)
3400cb70:	4564      	cmp	r4, ip
3400cb72:	d301      	bcc.n	3400cb78 <vision_models_maxi_p_if32ou16+0x1c>
    }
    maxim++;
    index++;
  }

}
3400cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *maxim = arr[k*offset];
3400cb78:	fb02 fe04 	mul.w	lr, r2, r4
3400cb7c:	eb00 058e 	add.w	r5, r0, lr, lsl #2
3400cb80:	682d      	ldr	r5, [r5, #0]
    *index = 0;
3400cb82:	f8a7 8000 	strh.w	r8, [r7]
    *maxim = arr[k*offset];
3400cb86:	601d      	str	r5, [r3, #0]
    for (uint16_t i = 1; i < len_arr; i++)
3400cb88:	2501      	movs	r5, #1
3400cb8a:	428d      	cmp	r5, r1
3400cb8c:	d304      	bcc.n	3400cb98 <vision_models_maxi_p_if32ou16+0x3c>
  for (uint16_t k = 0; k < parallelize; k++)
3400cb8e:	3401      	adds	r4, #1
    maxim++;
3400cb90:	3304      	adds	r3, #4
    index++;
3400cb92:	3702      	adds	r7, #2
  for (uint16_t k = 0; k < parallelize; k++)
3400cb94:	b2a4      	uxth	r4, r4
3400cb96:	e7eb      	b.n	3400cb70 <vision_models_maxi_p_if32ou16+0x14>
      if (arr[k*offset+i] > *maxim)
3400cb98:	eb05 060e 	add.w	r6, r5, lr
3400cb9c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
3400cba0:	edd6 7a00 	vldr	s15, [r6]
3400cba4:	ed93 7a00 	vldr	s14, [r3]
3400cba8:	eef4 7ac7 	vcmpe.f32	s15, s14
3400cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        *maxim = arr[k*offset+i];
3400cbb0:	bfc4      	itt	gt
3400cbb2:	edc3 7a00 	vstrgt	s15, [r3]
        *index = i;
3400cbb6:	803d      	strhgt	r5, [r7, #0]
    for (uint16_t i = 1; i < len_arr; i++)
3400cbb8:	3501      	adds	r5, #1
3400cbba:	b2ad      	uxth	r5, r5
3400cbbc:	e7e5      	b.n	3400cb8a <vision_models_maxi_p_if32ou16+0x2e>

3400cbbe <vision_models_maxi_if32ou32>:
  }

}

void vision_models_maxi_if32ou32(float32_t *arr, uint32_t len_arr, float32_t *maxim, uint32_t *index)
{
3400cbbe:	b530      	push	{r4, r5, lr}
  *index = 0;
3400cbc0:	2400      	movs	r4, #0
  *maxim = arr[0];

  for (uint32_t i = 1; i < len_arr; i++)
3400cbc2:	2501      	movs	r5, #1
  *index = 0;
3400cbc4:	601c      	str	r4, [r3, #0]
  *maxim = arr[0];
3400cbc6:	f850 4b04 	ldr.w	r4, [r0], #4
3400cbca:	2900      	cmp	r1, #0
3400cbcc:	6014      	str	r4, [r2, #0]
  for (uint32_t i = 1; i < len_arr; i++)
3400cbce:	bf14      	ite	ne
3400cbd0:	460c      	movne	r4, r1
3400cbd2:	462c      	moveq	r4, r5
3400cbd4:	3c01      	subs	r4, #1
3400cbd6:	d100      	bne.n	3400cbda <vision_models_maxi_if32ou32+0x1c>
    {
      *maxim = arr[i];
      *index = i;
    }
  }
}
3400cbd8:	bd30      	pop	{r4, r5, pc}
    if (arr[i] > *maxim)
3400cbda:	ecf0 7a01 	vldmia	r0!, {s15}
3400cbde:	ed92 7a00 	vldr	s14, [r2]
3400cbe2:	eef4 7ac7 	vcmpe.f32	s15, s14
3400cbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *maxim = arr[i];
3400cbea:	bfc4      	itt	gt
3400cbec:	edc2 7a00 	vstrgt	s15, [r2]
      *index = i;
3400cbf0:	601d      	strgt	r5, [r3, #0]
  for (uint32_t i = 1; i < len_arr; i++)
3400cbf2:	3501      	adds	r5, #1
3400cbf4:	e7ee      	b.n	3400cbd4 <vision_models_maxi_if32ou32+0x16>
	...

3400cbf8 <LTDC_FillRectRgb888>:
  return 0;
}

static int32_t LTDC_FillRectRgb888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                                   uint32_t Color)
{
3400cbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  r = (Color >> 16) & 0xff;
  g = (Color >> 8) & 0xff;
  b = (Color >> 0) & 0xff;

  layer_width = Lcd_Ctx[Instance].XSize;
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cbfc:	f04f 0834 	mov.w	r8, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400cc00:	4e18      	ldr	r6, [pc, #96]	@ (3400cc64 <LTDC_FillRectRgb888+0x6c>)
3400cc02:	ea4f 1e40 	mov.w	lr, r0, lsl #5
3400cc06:	eb06 1040 	add.w	r0, r6, r0, lsl #5
3400cc0a:	f856 600e 	ldr.w	r6, [r6, lr]
  pel += (Ypos * layer_width * 3) + Xpos * 3;
  for (h = 0; h < Height; h++) {
3400cc0e:	f04f 0e00 	mov.w	lr, #0
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc12:	6885      	ldr	r5, [r0, #8]
3400cc14:	4814      	ldr	r0, [pc, #80]	@ (3400cc68 <LTDC_FillRectRgb888+0x70>)
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400cc16:	fb02 1206 	mla	r2, r2, r6, r1
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc1a:	fb08 0005 	mla	r0, r8, r5, r0
{
3400cc1e:	9c07      	ldr	r4, [sp, #28]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc20:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400cc22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  r = (Color >> 16) & 0xff;
3400cc26:	f3c4 4707 	ubfx	r7, r4, #16, #8
  g = (Color >> 8) & 0xff;
3400cc2a:	f3c4 2c07 	ubfx	ip, r4, #8, #8
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400cc2e:	1881      	adds	r1, r0, r2
  b = (Color >> 0) & 0xff;
3400cc30:	b2e4      	uxtb	r4, r4
      /* FIXME */
      pel[3 * w + 0] = b;
      pel[3 * w + 1] = g;
      pel[3 * w + 2] = r;
    }
    pel += layer_width * 3;
3400cc32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  for (h = 0; h < Height; h++) {
3400cc36:	9a06      	ldr	r2, [sp, #24]
3400cc38:	4596      	cmp	lr, r2
3400cc3a:	d010      	beq.n	3400cc5e <LTDC_FillRectRgb888+0x66>
3400cc3c:	460a      	mov	r2, r1
    for (w = 0; w < Width; w++) {
3400cc3e:	1c58      	adds	r0, r3, #1
3400cc40:	e005      	b.n	3400cc4e <LTDC_FillRectRgb888+0x56>
      pel[3 * w + 0] = b;
3400cc42:	f802 4c03 	strb.w	r4, [r2, #-3]
      pel[3 * w + 1] = g;
3400cc46:	f802 cc02 	strb.w	ip, [r2, #-2]
      pel[3 * w + 2] = r;
3400cc4a:	f802 7c01 	strb.w	r7, [r2, #-1]
    for (w = 0; w < Width; w++) {
3400cc4e:	3801      	subs	r0, #1
3400cc50:	f102 0203 	add.w	r2, r2, #3
3400cc54:	d1f5      	bne.n	3400cc42 <LTDC_FillRectRgb888+0x4a>
    pel += layer_width * 3;
3400cc56:	4431      	add	r1, r6
  for (h = 0; h < Height; h++) {
3400cc58:	f10e 0e01 	add.w	lr, lr, #1
3400cc5c:	e7eb      	b.n	3400cc36 <LTDC_FillRectRgb888+0x3e>
  }

  return 0;
}
3400cc5e:	2000      	movs	r0, #0
3400cc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400cc64:	34146034 	.word	0x34146034
3400cc68:	34146054 	.word	0x34146054

3400cc6c <LTDC_FillRectArgb8888>:

static int32_t LTDC_FillRectArgb8888(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height,
                                     uint32_t Color)
{
3400cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  r = (Color >> 16) & 0xff;
  g = (Color >> 8) & 0xff;
  b = (Color >> 0) & 0xff;

  layer_width = Lcd_Ctx[Instance].XSize;
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc70:	f04f 0834 	mov.w	r8, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400cc74:	4c19      	ldr	r4, [pc, #100]	@ (3400ccdc <LTDC_FillRectArgb8888+0x70>)
3400cc76:	ea4f 1e40 	mov.w	lr, r0, lsl #5
3400cc7a:	eb04 1040 	add.w	r0, r4, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc7e:	6886      	ldr	r6, [r0, #8]
3400cc80:	4817      	ldr	r0, [pc, #92]	@ (3400cce0 <LTDC_FillRectArgb8888+0x74>)
  layer_width = Lcd_Ctx[Instance].XSize;
3400cc82:	f854 400e 	ldr.w	r4, [r4, lr]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc86:	fb08 0006 	mla	r0, r8, r6, r0
  pel += (Ypos * layer_width * 4) + Xpos * 4;
  for (h = 0; h < Height; h++) {
3400cc8a:	f04f 0e00 	mov.w	lr, #0
    for (w = 0; w < Width; w++) {
      /* FIXME */
      pel[4 * w + 0] = r;
      pel[4 * w + 1] = g;
      pel[4 * w + 2] = b;
      pel[4 * w + 3] = 0xff;
3400cc8e:	f04f 08ff 	mov.w	r8, #255	@ 0xff
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400cc92:	fb02 1104 	mla	r1, r2, r4, r1
{
3400cc96:	9d07      	ldr	r5, [sp, #28]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cc98:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  r = (Color >> 16) & 0xff;
3400cc9a:	f3c5 4707 	ubfx	r7, r5, #16, #8
  g = (Color >> 8) & 0xff;
3400cc9e:	f3c5 2c07 	ubfx	ip, r5, #8, #8
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400cca2:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  b = (Color >> 0) & 0xff;
3400cca6:	b2ed      	uxtb	r5, r5
    }
    pel += layer_width * 4;
3400cca8:	00a1      	lsls	r1, r4, #2
3400ccaa:	009b      	lsls	r3, r3, #2
  for (h = 0; h < Height; h++) {
3400ccac:	9806      	ldr	r0, [sp, #24]
3400ccae:	4586      	cmp	lr, r0
3400ccb0:	d010      	beq.n	3400ccd4 <LTDC_FillRectArgb8888+0x68>
      pel[4 * w + 3] = 0xff;
3400ccb2:	089c      	lsrs	r4, r3, #2
3400ccb4:	4610      	mov	r0, r2
3400ccb6:	3401      	adds	r4, #1
3400ccb8:	e006      	b.n	3400ccc8 <LTDC_FillRectArgb8888+0x5c>
      pel[4 * w + 0] = r;
3400ccba:	7007      	strb	r7, [r0, #0]
      pel[4 * w + 1] = g;
3400ccbc:	f880 c001 	strb.w	ip, [r0, #1]
      pel[4 * w + 2] = b;
3400ccc0:	7085      	strb	r5, [r0, #2]
      pel[4 * w + 3] = 0xff;
3400ccc2:	f880 8003 	strb.w	r8, [r0, #3]
    for (w = 0; w < Width; w++) {
3400ccc6:	3004      	adds	r0, #4
3400ccc8:	3c01      	subs	r4, #1
3400ccca:	d1f6      	bne.n	3400ccba <LTDC_FillRectArgb8888+0x4e>
    pel += layer_width * 4;
3400cccc:	440a      	add	r2, r1
  for (h = 0; h < Height; h++) {
3400ccce:	f10e 0e01 	add.w	lr, lr, #1
3400ccd2:	e7eb      	b.n	3400ccac <LTDC_FillRectArgb8888+0x40>
  }

  return 0;
}
3400ccd4:	2000      	movs	r0, #0
3400ccd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400ccda:	bf00      	nop
3400ccdc:	34146034 	.word	0x34146034
3400cce0:	34146054 	.word	0x34146054

3400cce4 <LTDC_GetFormat>:
  return res;
}

static int32_t LTDC_GetFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  return BSP_LCD_GetPixelFormat(Instance, PixelFormat);
3400cce4:	f002 bc3a 	b.w	3400f55c <BSP_LCD_GetPixelFormat>

3400cce8 <LTDC_SetLayer>:
{
3400cce8:	b538      	push	{r3, r4, r5, lr}
3400ccea:	460c      	mov	r4, r1
  current_layer = LayerIndex;
3400ccec:	4b08      	ldr	r3, [pc, #32]	@ (3400cd10 <LTDC_SetLayer+0x28>)
{
3400ccee:	4605      	mov	r5, r0
  current_layer = LayerIndex;
3400ccf0:	7019      	strb	r1, [r3, #0]
  res = BSP_LCD_SetActiveLayer(Instance, LayerIndex);
3400ccf2:	f002 fc3d 	bl	3400f570 <BSP_LCD_SetActiveLayer>
  if (is_layer_rgb888[LayerIndex]) {
3400ccf6:	4b07      	ldr	r3, [pc, #28]	@ (3400cd14 <LTDC_SetLayer+0x2c>)
3400ccf8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
3400ccfc:	b133      	cbz	r3, 3400cd0c <LTDC_SetLayer+0x24>
    Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400ccfe:	2201      	movs	r2, #1
3400cd00:	2103      	movs	r1, #3
    Lcd_Ctx[Instance].BppFactor = 3;
3400cd02:	4b05      	ldr	r3, [pc, #20]	@ (3400cd18 <LTDC_SetLayer+0x30>)
3400cd04:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400cd08:	e9c3 2103 	strd	r2, r1, [r3, #12]
}
3400cd0c:	bd38      	pop	{r3, r4, r5, pc}
3400cd0e:	bf00      	nop
3400cd10:	3410f0c0 	.word	0x3410f0c0
3400cd14:	3410f0b8 	.word	0x3410f0b8
3400cd18:	34146034 	.word	0x34146034

3400cd1c <LTDC_GetYSize>:
  return BSP_LCD_GetYSize(Instance, YSize);
3400cd1c:	f002 bc5e 	b.w	3400f5dc <BSP_LCD_GetYSize>

3400cd20 <LTDC_GetXSize>:
  return BSP_LCD_GetXSize(Instance, YSize);
3400cd20:	f002 bc52 	b.w	3400f5c8 <BSP_LCD_GetXSize>

3400cd24 <LTDC_GetPixel>:
  return BSP_LCD_ReadPixel(Instance, Xpos, Ypos, Color);
3400cd24:	f002 bc64 	b.w	3400f5f0 <BSP_LCD_ReadPixel>

3400cd28 <LTDC_FillRect>:
{
3400cd28:	b4f0      	push	{r4, r5, r6, r7}
  if (is_layer_rgb888[current_layer])
3400cd2a:	4e0c      	ldr	r6, [pc, #48]	@ (3400cd5c <LTDC_FillRect+0x34>)
3400cd2c:	4f0c      	ldr	r7, [pc, #48]	@ (3400cd60 <LTDC_FillRect+0x38>)
3400cd2e:	7836      	ldrb	r6, [r6, #0]
{
3400cd30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  if (is_layer_rgb888[current_layer])
3400cd34:	f857 7026 	ldr.w	r7, [r7, r6, lsl #2]
3400cd38:	b127      	cbz	r7, 3400cd44 <LTDC_FillRect+0x1c>
    return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
3400cd3a:	e9cd 4504 	strd	r4, r5, [sp, #16]
}
3400cd3e:	bcf0      	pop	{r4, r5, r6, r7}
    return LTDC_FillRectRgb888(Instance, Xpos, Ypos, Width, Height, Color);
3400cd40:	f7ff bf5a 	b.w	3400cbf8 <LTDC_FillRectRgb888>
  if (is_layer_argb8888[current_layer])
3400cd44:	4f07      	ldr	r7, [pc, #28]	@ (3400cd64 <LTDC_FillRect+0x3c>)
3400cd46:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
3400cd4a:	e9cd 4504 	strd	r4, r5, [sp, #16]
  if (is_layer_argb8888[current_layer])
3400cd4e:	b116      	cbz	r6, 3400cd56 <LTDC_FillRect+0x2e>
}
3400cd50:	bcf0      	pop	{r4, r5, r6, r7}
    return LTDC_FillRectArgb8888(Instance, Xpos, Ypos, Width, Height, Color);
3400cd52:	f7ff bf8b 	b.w	3400cc6c <LTDC_FillRectArgb8888>
}
3400cd56:	bcf0      	pop	{r4, r5, r6, r7}
  return BSP_LCD_FillRect(Instance, Xpos, Ypos, Width, Height, Color);
3400cd58:	f002 be1c 	b.w	3400f994 <BSP_LCD_FillRect>
3400cd5c:	3410f0c0 	.word	0x3410f0c0
3400cd60:	3410f0b8 	.word	0x3410f0b8
3400cd64:	3410f0b0 	.word	0x3410f0b0

3400cd68 <LTDC_FillRGBRect>:
{
3400cd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (is_layer_rgb888[current_layer])
3400cd6c:	4f3f      	ldr	r7, [pc, #252]	@ (3400ce6c <LTDC_FillRGBRect+0x104>)
{
3400cd6e:	4688      	mov	r8, r1
3400cd70:	e9dd 6c08 	ldrd	r6, ip, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400cd74:	f897 9000 	ldrb.w	r9, [r7]
3400cd78:	4f3d      	ldr	r7, [pc, #244]	@ (3400ce70 <LTDC_FillRGBRect+0x108>)
{
3400cd7a:	4615      	mov	r5, r2
  if (is_layer_rgb888[current_layer])
3400cd7c:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
{
3400cd80:	469e      	mov	lr, r3
  if (is_layer_rgb888[current_layer])
3400cd82:	b37f      	cbz	r7, 3400cde4 <LTDC_FillRGBRect+0x7c>
  layer_width = Lcd_Ctx[Instance].XSize;
3400cd84:	4b3b      	ldr	r3, [pc, #236]	@ (3400ce74 <LTDC_FillRGBRect+0x10c>)
3400cd86:	0142      	lsls	r2, r0, #5
3400cd88:	eb03 1440 	add.w	r4, r3, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cd8c:	2034      	movs	r0, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400cd8e:	589a      	ldr	r2, [r3, r2]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cd90:	68a1      	ldr	r1, [r4, #8]
3400cd92:	4b39      	ldr	r3, [pc, #228]	@ (3400ce78 <LTDC_FillRGBRect+0x110>)
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400cd94:	fb02 8505 	mla	r5, r2, r5, r8
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cd98:	fb00 3301 	mla	r3, r0, r1, r3
3400cd9c:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
  pel += (Ypos * layer_width * 3) + Xpos * 3;
3400cd9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400cda2:	4429      	add	r1, r5
  for (h = 0; h < Height; h++) {
3400cda4:	2500      	movs	r5, #0
3400cda6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    pel += layer_width + 3;
3400cdaa:	1cd0      	adds	r0, r2, #3
  for (h = 0; h < Height; h++) {
3400cdac:	4565      	cmp	r5, ip
3400cdae:	d05a      	beq.n	3400ce66 <LTDC_FillRGBRect+0xfe>
3400cdb0:	4672      	mov	r2, lr
3400cdb2:	460b      	mov	r3, r1
    for (w = 0; w < Width; w++) {
3400cdb4:	1c74      	adds	r4, r6, #1
3400cdb6:	e00b      	b.n	3400cdd0 <LTDC_FillRGBRect+0x68>
      pel[3 * w + 0] = *pData++;
3400cdb8:	f812 8c03 	ldrb.w	r8, [r2, #-3]
3400cdbc:	f803 8c03 	strb.w	r8, [r3, #-3]
      pel[3 * w + 1] = *pData++;
3400cdc0:	f812 8c02 	ldrb.w	r8, [r2, #-2]
3400cdc4:	f803 8c02 	strb.w	r8, [r3, #-2]
      pel[3 * w + 2] = *pData++;
3400cdc8:	f812 8c01 	ldrb.w	r8, [r2, #-1]
3400cdcc:	f803 8c01 	strb.w	r8, [r3, #-1]
    for (w = 0; w < Width; w++) {
3400cdd0:	3c01      	subs	r4, #1
3400cdd2:	f102 0203 	add.w	r2, r2, #3
3400cdd6:	f103 0303 	add.w	r3, r3, #3
3400cdda:	d1ed      	bne.n	3400cdb8 <LTDC_FillRGBRect+0x50>
3400cddc:	44be      	add	lr, r7
    pel += layer_width + 3;
3400cdde:	4401      	add	r1, r0
  for (h = 0; h < Height; h++) {
3400cde0:	3501      	adds	r5, #1
3400cde2:	e7e3      	b.n	3400cdac <LTDC_FillRGBRect+0x44>
  if (is_layer_argb8888[current_layer])
3400cde4:	f8df a094 	ldr.w	sl, [pc, #148]	@ 3400ce7c <LTDC_FillRGBRect+0x114>
3400cde8:	f85a 9029 	ldr.w	r9, [sl, r9, lsl #2]
3400cdec:	f1b9 0f00 	cmp.w	r9, #0
3400cdf0:	d033      	beq.n	3400ce5a <LTDC_FillRGBRect+0xf2>
  layer_width = Lcd_Ctx[Instance].XSize;
3400cdf2:	4b20      	ldr	r3, [pc, #128]	@ (3400ce74 <LTDC_FillRGBRect+0x10c>)
3400cdf4:	0142      	lsls	r2, r0, #5
3400cdf6:	eb03 1440 	add.w	r4, r3, r0, lsl #5
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cdfa:	2034      	movs	r0, #52	@ 0x34
  layer_width = Lcd_Ctx[Instance].XSize;
3400cdfc:	589a      	ldr	r2, [r3, r2]
  pel = (uint8_t *) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress);
3400cdfe:	68a1      	ldr	r1, [r4, #8]
3400ce00:	4b1d      	ldr	r3, [pc, #116]	@ (3400ce78 <LTDC_FillRGBRect+0x110>)
3400ce02:	00b6      	lsls	r6, r6, #2
3400ce04:	fb00 3301 	mla	r3, r0, r1, r3
3400ce08:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400ce0a:	fb02 8305 	mla	r3, r2, r5, r8
    pel += layer_width + 4;
3400ce0e:	1d15      	adds	r5, r2, #4
  pel += (Ypos * layer_width * 4) + Xpos * 4;
3400ce10:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  for (h = 0; h < Height; h++) {
3400ce14:	4567      	cmp	r7, ip
3400ce16:	d026      	beq.n	3400ce66 <LTDC_FillRGBRect+0xfe>
3400ce18:	4673      	mov	r3, lr
3400ce1a:	eb0e 0406 	add.w	r4, lr, r6
3400ce1e:	1ae0      	subs	r0, r4, r3
3400ce20:	0880      	lsrs	r0, r0, #2
3400ce22:	460a      	mov	r2, r1
3400ce24:	3001      	adds	r0, #1
3400ce26:	e010      	b.n	3400ce4a <LTDC_FillRGBRect+0xe2>
      pel[4 * w + 2] = *pData++;
3400ce28:	f893 e000 	ldrb.w	lr, [r3]
      pel[4 * w + 3] = *pData++;
3400ce2c:	3304      	adds	r3, #4
      pel[4 * w + 2] = *pData++;
3400ce2e:	f802 ec02 	strb.w	lr, [r2, #-2]
      pel[4 * w + 1] = *pData++;
3400ce32:	f813 ec03 	ldrb.w	lr, [r3, #-3]
3400ce36:	f802 ec03 	strb.w	lr, [r2, #-3]
      pel[4 * w + 0] = *pData++;
3400ce3a:	f813 ec02 	ldrb.w	lr, [r3, #-2]
3400ce3e:	f802 ec04 	strb.w	lr, [r2, #-4]
      pel[4 * w + 3] = *pData++;
3400ce42:	f813 ec01 	ldrb.w	lr, [r3, #-1]
3400ce46:	f802 ec01 	strb.w	lr, [r2, #-1]
    for (w = 0; w < Width; w++) {
3400ce4a:	3801      	subs	r0, #1
3400ce4c:	f102 0204 	add.w	r2, r2, #4
3400ce50:	d1ea      	bne.n	3400ce28 <LTDC_FillRGBRect+0xc0>
3400ce52:	46a6      	mov	lr, r4
    pel += layer_width + 4;
3400ce54:	4429      	add	r1, r5
  for (h = 0; h < Height; h++) {
3400ce56:	3701      	adds	r7, #1
3400ce58:	e7dc      	b.n	3400ce14 <LTDC_FillRGBRect+0xac>
  return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
3400ce5a:	e9cd 6c08 	strd	r6, ip, [sp, #32]
}
3400ce5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return BSP_LCD_FillRGBRect(Instance, Xpos, Ypos, pData, Width, Height);
3400ce62:	f002 bc3b 	b.w	3400f6dc <BSP_LCD_FillRGBRect>
}
3400ce66:	2000      	movs	r0, #0
3400ce68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400ce6c:	3410f0c0 	.word	0x3410f0c0
3400ce70:	3410f0b8 	.word	0x3410f0b8
3400ce74:	34146034 	.word	0x34146034
3400ce78:	34146054 	.word	0x34146054
3400ce7c:	3410f0b0 	.word	0x3410f0b0

3400ce80 <LTDC_DrawBitmap>:
  return BSP_LCD_DrawBitmap(Instance, Xpos, Ypos, pBmp);
3400ce80:	f002 bc52 	b.w	3400f728 <BSP_LCD_DrawBitmap>

3400ce84 <fill_lcd_layer_config_from_scrl_layer_config>:
{
3400ce84:	b510      	push	{r4, lr}
  layer_config->X1 = layer_config->X0 + l->size.width;
3400ce86:	8883      	ldrh	r3, [r0, #4]
  layer_config->X0 = l->origin.x;
3400ce88:	8804      	ldrh	r4, [r0, #0]
  layer_config->Y0 = l->origin.y;
3400ce8a:	8842      	ldrh	r2, [r0, #2]
  layer_config->X1 = layer_config->X0 + l->size.width;
3400ce8c:	4423      	add	r3, r4
3400ce8e:	604b      	str	r3, [r1, #4]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400ce90:	88c3      	ldrh	r3, [r0, #6]
  layer_config->X0 = l->origin.x;
3400ce92:	600c      	str	r4, [r1, #0]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400ce94:	4413      	add	r3, r2
  layer_config->Y0 = l->origin.y;
3400ce96:	608a      	str	r2, [r1, #8]
  layer_config->Y1 = layer_config->Y0 + l->size.height;
3400ce98:	60cb      	str	r3, [r1, #12]
  switch (fmt) {
3400ce9a:	7a03      	ldrb	r3, [r0, #8]
3400ce9c:	2b05      	cmp	r3, #5
3400ce9e:	d80b      	bhi.n	3400ceb8 <fill_lcd_layer_config_from_scrl_layer_config+0x34>
3400cea0:	e8df f003 	tbb	[pc, r3]
3400cea4:	080a1203 	.word	0x080a1203
3400cea8:	1010      	.short	0x1010
    res = LCD_PIXEL_FORMAT_RGB565;
3400ceaa:	2302      	movs	r3, #2
  layer_config->PixelFormat = pixel_format_from_scrl_format(l->format);
3400ceac:	610b      	str	r3, [r1, #16]
  layer_config->Address = (uint32_t) l->address;
3400ceae:	68c3      	ldr	r3, [r0, #12]
3400ceb0:	614b      	str	r3, [r1, #20]
}
3400ceb2:	bd10      	pop	{r4, pc}
    res = LCD_PIXEL_FORMAT_ARGB8888;
3400ceb4:	2300      	movs	r3, #0
    break;
3400ceb6:	e7f9      	b.n	3400ceac <fill_lcd_layer_config_from_scrl_layer_config+0x28>
    assert(0);
3400ceb8:	2179      	movs	r1, #121	@ 0x79
3400ceba:	4b04      	ldr	r3, [pc, #16]	@ (3400cecc <fill_lcd_layer_config_from_scrl_layer_config+0x48>)
3400cebc:	4a04      	ldr	r2, [pc, #16]	@ (3400ced0 <fill_lcd_layer_config_from_scrl_layer_config+0x4c>)
3400cebe:	4805      	ldr	r0, [pc, #20]	@ (3400ced4 <fill_lcd_layer_config_from_scrl_layer_config+0x50>)
3400cec0:	f012 f980 	bl	3401f1c4 <__assert_func>
    res = LCD_PIXEL_FORMAT_RGB888;
3400cec4:	2301      	movs	r3, #1
3400cec6:	e7f1      	b.n	3400ceac <fill_lcd_layer_config_from_scrl_layer_config+0x28>
  switch (fmt) {
3400cec8:	2304      	movs	r3, #4
3400ceca:	e7ef      	b.n	3400ceac <fill_lcd_layer_config_from_scrl_layer_config+0x28>
3400cecc:	34026d17 	.word	0x34026d17
3400ced0:	3403410c 	.word	0x3403410c
3400ced4:	34027e6a 	.word	0x34027e6a

3400ced8 <LTDC_SetPixel>:
{
3400ced8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400ceda:	4d0f      	ldr	r5, [pc, #60]	@ (3400cf18 <LTDC_SetPixel+0x40>)
3400cedc:	782e      	ldrb	r6, [r5, #0]
3400cede:	4d0f      	ldr	r5, [pc, #60]	@ (3400cf1c <LTDC_SetPixel+0x44>)
3400cee0:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
3400cee4:	b13d      	cbz	r5, 3400cef6 <LTDC_SetPixel+0x1e>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , 1, Color);
3400cee6:	9301      	str	r3, [sp, #4]
3400cee8:	2301      	movs	r3, #1
3400ceea:	2000      	movs	r0, #0
3400ceec:	9300      	str	r3, [sp, #0]
3400ceee:	f7ff fe83 	bl	3400cbf8 <LTDC_FillRectRgb888>
}
3400cef2:	b003      	add	sp, #12
3400cef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400cef6:	4f0a      	ldr	r7, [pc, #40]	@ (3400cf20 <LTDC_SetPixel+0x48>)
3400cef8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
3400cefc:	b136      	cbz	r6, 3400cf0c <LTDC_SetPixel+0x34>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , 1, Color);
3400cefe:	9301      	str	r3, [sp, #4]
3400cf00:	2301      	movs	r3, #1
3400cf02:	4628      	mov	r0, r5
3400cf04:	9300      	str	r3, [sp, #0]
3400cf06:	f7ff feb1 	bl	3400cc6c <LTDC_FillRectArgb8888>
    return LTDC_SetPixelArgb8888(Instance, Xpos, Ypos, Color);
3400cf0a:	e7f2      	b.n	3400cef2 <LTDC_SetPixel+0x1a>
}
3400cf0c:	b003      	add	sp, #12
3400cf0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_WritePixel(Instance, Xpos, Ypos, Color);
3400cf12:	f002 bb93 	b.w	3400f63c <BSP_LCD_WritePixel>
3400cf16:	bf00      	nop
3400cf18:	3410f0c0 	.word	0x3410f0c0
3400cf1c:	3410f0b8 	.word	0x3410f0b8
3400cf20:	3410f0b0 	.word	0x3410f0b0

3400cf24 <LTDC_DrawVLine>:
{
3400cf24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400cf26:	4e10      	ldr	r6, [pc, #64]	@ (3400cf68 <LTDC_DrawVLine+0x44>)
{
3400cf28:	9d08      	ldr	r5, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400cf2a:	7837      	ldrb	r7, [r6, #0]
3400cf2c:	4e0f      	ldr	r6, [pc, #60]	@ (3400cf6c <LTDC_DrawVLine+0x48>)
3400cf2e:	f856 6027 	ldr.w	r6, [r6, r7, lsl #2]
3400cf32:	b13e      	cbz	r6, 3400cf44 <LTDC_DrawVLine+0x20>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, 1 , Length, Color);
3400cf34:	e9cd 3500 	strd	r3, r5, [sp]
3400cf38:	2000      	movs	r0, #0
3400cf3a:	2301      	movs	r3, #1
3400cf3c:	f7ff fe5c 	bl	3400cbf8 <LTDC_FillRectRgb888>
}
3400cf40:	b003      	add	sp, #12
3400cf42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400cf44:	f8df c028 	ldr.w	ip, [pc, #40]	@ 3400cf70 <LTDC_DrawVLine+0x4c>
3400cf48:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
3400cf4c:	b137      	cbz	r7, 3400cf5c <LTDC_DrawVLine+0x38>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, 1 , Length, Color);
3400cf4e:	e9cd 3500 	strd	r3, r5, [sp]
3400cf52:	4630      	mov	r0, r6
3400cf54:	2301      	movs	r3, #1
3400cf56:	f7ff fe89 	bl	3400cc6c <LTDC_FillRectArgb8888>
    return LTDC_DrawVLineArgb8888(Instance, Xpos, Ypos, Length, Color);
3400cf5a:	e7f1      	b.n	3400cf40 <LTDC_DrawVLine+0x1c>
  return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
3400cf5c:	9508      	str	r5, [sp, #32]
}
3400cf5e:	b003      	add	sp, #12
3400cf60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_DrawVLine(Instance, Xpos, Ypos, Length, Color);
3400cf64:	f002 bcf6 	b.w	3400f954 <BSP_LCD_DrawVLine>
3400cf68:	3410f0c0 	.word	0x3410f0c0
3400cf6c:	3410f0b8 	.word	0x3410f0b8
3400cf70:	3410f0b0 	.word	0x3410f0b0

3400cf74 <LTDC_DrawHLine>:
{
3400cf74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (is_layer_rgb888[current_layer])
3400cf76:	4d10      	ldr	r5, [pc, #64]	@ (3400cfb8 <LTDC_DrawHLine+0x44>)
{
3400cf78:	9c08      	ldr	r4, [sp, #32]
  if (is_layer_rgb888[current_layer])
3400cf7a:	782e      	ldrb	r6, [r5, #0]
3400cf7c:	4d0f      	ldr	r5, [pc, #60]	@ (3400cfbc <LTDC_DrawHLine+0x48>)
3400cf7e:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
3400cf82:	b13d      	cbz	r5, 3400cf94 <LTDC_DrawHLine+0x20>
  return LTDC_FillRectRgb888(0, Xpos, Ypos, Length , 1, Color);
3400cf84:	2001      	movs	r0, #1
3400cf86:	9401      	str	r4, [sp, #4]
3400cf88:	9000      	str	r0, [sp, #0]
3400cf8a:	2000      	movs	r0, #0
3400cf8c:	f7ff fe34 	bl	3400cbf8 <LTDC_FillRectRgb888>
}
3400cf90:	b003      	add	sp, #12
3400cf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (is_layer_argb8888[current_layer])
3400cf94:	4f0a      	ldr	r7, [pc, #40]	@ (3400cfc0 <LTDC_DrawHLine+0x4c>)
3400cf96:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
3400cf9a:	b136      	cbz	r6, 3400cfaa <LTDC_DrawHLine+0x36>
  return LTDC_FillRectArgb8888(0, Xpos, Ypos, Length , 1, Color);
3400cf9c:	2001      	movs	r0, #1
3400cf9e:	9401      	str	r4, [sp, #4]
3400cfa0:	9000      	str	r0, [sp, #0]
3400cfa2:	4628      	mov	r0, r5
3400cfa4:	f7ff fe62 	bl	3400cc6c <LTDC_FillRectArgb8888>
    return LTDC_DrawHLineArgb8888(Instance, Xpos, Ypos, Length, Color);
3400cfa8:	e7f2      	b.n	3400cf90 <LTDC_DrawHLine+0x1c>
  return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
3400cfaa:	9408      	str	r4, [sp, #32]
}
3400cfac:	b003      	add	sp, #12
3400cfae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return BSP_LCD_DrawHLine(Instance, Xpos, Ypos, Length, Color);
3400cfb2:	f002 bcad 	b.w	3400f910 <BSP_LCD_DrawHLine>
3400cfb6:	bf00      	nop
3400cfb8:	3410f0c0 	.word	0x3410f0c0
3400cfbc:	3410f0b8 	.word	0x3410f0b8
3400cfc0:	3410f0b0 	.word	0x3410f0b0

3400cfc4 <SCRL_Init>:
  .SetLayer = LTDC_SetLayer,
  .GetFormat = LTDC_GetFormat,
};

int SCRL_Init(SCRL_LayerConfig *layers_config[SCRL_LAYER_NB], SCRL_ScreenConfig *screen_config)
{
3400cfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
3400cfc6:	4605      	mov	r5, r0
3400cfc8:	b087      	sub	sp, #28
  BSP_LCD_LayerConfig_t LayerConfig = {0};
3400cfca:	2218      	movs	r2, #24
3400cfcc:	2100      	movs	r1, #0
3400cfce:	4668      	mov	r0, sp
3400cfd0:	f013 f942 	bl	34020258 <memset>
    if (!layers_config[i])
3400cfd4:	682a      	ldr	r2, [r5, #0]
3400cfd6:	2a00      	cmp	r2, #0
3400cfd8:	d044      	beq.n	3400d064 <SCRL_Init+0xa0>
3400cfda:	686b      	ldr	r3, [r5, #4]
3400cfdc:	2b00      	cmp	r3, #0
3400cfde:	d041      	beq.n	3400d064 <SCRL_Init+0xa0>
    if (!layers_config[i]->address)
3400cfe0:	68d1      	ldr	r1, [r2, #12]
3400cfe2:	2900      	cmp	r1, #0
3400cfe4:	d03e      	beq.n	3400d064 <SCRL_Init+0xa0>
3400cfe6:	68d9      	ldr	r1, [r3, #12]
3400cfe8:	2900      	cmp	r1, #0
3400cfea:	d03b      	beq.n	3400d064 <SCRL_Init+0xa0>
    if (layers_config[i]->format == SCRL_YUV422)
3400cfec:	7a12      	ldrb	r2, [r2, #8]
3400cfee:	2a02      	cmp	r2, #2
3400cff0:	d038      	beq.n	3400d064 <SCRL_Init+0xa0>
3400cff2:	7a1b      	ldrb	r3, [r3, #8]
3400cff4:	2b02      	cmp	r3, #2
3400cff6:	d035      	beq.n	3400d064 <SCRL_Init+0xa0>

  ret = SCRL_validate_parameters(layers_config, screen_config);
  if (ret)
    return ret;

  current_layer = SCRL_LAYER_0;
3400cff8:	2400      	movs	r4, #0
3400cffa:	4b1c      	ldr	r3, [pc, #112]	@ (3400d06c <SCRL_Init+0xa8>)

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
3400cffc:	2101      	movs	r1, #1
3400cffe:	4620      	mov	r0, r4
  current_layer = SCRL_LAYER_0;
3400d000:	701c      	strb	r4, [r3, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
3400d002:	f002 fe31 	bl	3400fc68 <BSP_LCD_Init>

  fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_0], &LayerConfig);
3400d006:	682e      	ldr	r6, [r5, #0]
3400d008:	4669      	mov	r1, sp
3400d00a:	4630      	mov	r0, r6
3400d00c:	f7ff ff3a 	bl	3400ce84 <fill_lcd_layer_config_from_scrl_layer_config>
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400d010:	7a33      	ldrb	r3, [r6, #8]
3400d012:	4f17      	ldr	r7, [pc, #92]	@ (3400d070 <SCRL_Init+0xac>)
3400d014:	1f19      	subs	r1, r3, #4
3400d016:	424a      	negs	r2, r1
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400d018:	f1a3 0003 	sub.w	r0, r3, #3
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400d01c:	414a      	adcs	r2, r1
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400d01e:	4e15      	ldr	r6, [pc, #84]	@ (3400d074 <SCRL_Init+0xb0>)
3400d020:	4243      	negs	r3, r0
3400d022:	4143      	adcs	r3, r0
  is_layer_rgb888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_RGB888;
3400d024:	603a      	str	r2, [r7, #0]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
3400d026:	4621      	mov	r1, r4
3400d028:	466a      	mov	r2, sp
3400d02a:	4620      	mov	r0, r4
  is_layer_argb8888[SCRL_LAYER_0] = layers_config[SCRL_LAYER_0]->format == SCRL_ARGB8888;
3400d02c:	6033      	str	r3, [r6, #0]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_1, &LayerConfig);
3400d02e:	f002 fe27 	bl	3400fc80 <BSP_LCD_ConfigLayer>

  fill_lcd_layer_config_from_scrl_layer_config(layers_config[SCRL_LAYER_1], &LayerConfig);
3400d032:	686d      	ldr	r5, [r5, #4]
3400d034:	4669      	mov	r1, sp
3400d036:	4628      	mov	r0, r5
3400d038:	f7ff ff24 	bl	3400ce84 <fill_lcd_layer_config_from_scrl_layer_config>
  is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
3400d03c:	7a2b      	ldrb	r3, [r5, #8]
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400d03e:	2101      	movs	r1, #1
  is_layer_rgb888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_RGB888;
3400d040:	1f1d      	subs	r5, r3, #4
3400d042:	426a      	negs	r2, r5
3400d044:	416a      	adcs	r2, r5
3400d046:	607a      	str	r2, [r7, #4]
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
3400d048:	1edf      	subs	r7, r3, #3
3400d04a:	427b      	negs	r3, r7
3400d04c:	417b      	adcs	r3, r7
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400d04e:	466a      	mov	r2, sp
3400d050:	4620      	mov	r0, r4
  is_layer_argb8888[SCRL_LAYER_1] = layers_config[SCRL_LAYER_1]->format == SCRL_ARGB8888;
3400d052:	6073      	str	r3, [r6, #4]
  BSP_LCD_ConfigLayer(0, LTDC_LAYER_2, &LayerConfig);
3400d054:	f002 fe14 	bl	3400fc80 <BSP_LCD_ConfigLayer>

  UTIL_LCD_SetFuncDriver(&Dummy_Driver);
3400d058:	4807      	ldr	r0, [pc, #28]	@ (3400d078 <SCRL_Init+0xb4>)
3400d05a:	f00f ff3d 	bl	3401ced8 <UTIL_LCD_SetFuncDriver>
  return 0;
3400d05e:	4620      	mov	r0, r4

  return 0;
}
3400d060:	b007      	add	sp, #28
3400d062:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
3400d064:	f04f 30ff 	mov.w	r0, #4294967295
3400d068:	e7fa      	b.n	3400d060 <SCRL_Init+0x9c>
3400d06a:	bf00      	nop
3400d06c:	3410f0c0 	.word	0x3410f0c0
3400d070:	3410f0b8 	.word	0x3410f0b8
3400d074:	3410f0b0 	.word	0x3410f0b0
3400d078:	3403412c 	.word	0x3403412c

3400d07c <SCRL_SetAddress_NoReload>:

int SCRL_SetAddress_NoReload(void *address, SCRL_Layer layer)
{
3400d07c:	b508      	push	{r3, lr}
3400d07e:	460a      	mov	r2, r1
  return HAL_LTDC_SetAddress_NoReload(&hlcd_ltdc, (uint32_t) address, layer);
3400d080:	4601      	mov	r1, r0
3400d082:	4802      	ldr	r0, [pc, #8]	@ (3400d08c <SCRL_SetAddress_NoReload+0x10>)
3400d084:	f008 f88c 	bl	340151a0 <HAL_LTDC_SetAddress_NoReload>
}
3400d088:	bd08      	pop	{r3, pc}
3400d08a:	bf00      	nop
3400d08c:	34146054 	.word	0x34146054

3400d090 <SCRL_ReloadLayer>:

int SCRL_ReloadLayer(SCRL_Layer layer)
{
3400d090:	b508      	push	{r3, lr}
3400d092:	4602      	mov	r2, r0
  return HAL_LTDC_ReloadLayer(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING, layer);
3400d094:	2102      	movs	r1, #2
3400d096:	4802      	ldr	r0, [pc, #8]	@ (3400d0a0 <SCRL_ReloadLayer+0x10>)
3400d098:	f008 f85a 	bl	34015150 <HAL_LTDC_ReloadLayer>
}
3400d09c:	bd08      	pop	{r3, pc}
3400d09e:	bf00      	nop
3400d0a0:	34146054 	.word	0x34146054

3400d0a4 <SRCL_Update>:

int SRCL_Update(void)
{
  /* Nothing to do */
  return 0;
}
3400d0a4:	2000      	movs	r0, #0
3400d0a6:	4770      	bx	lr

3400d0a8 <MX_LTDC_ConfigLayer>:

HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
3400d0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert(LayerIndex < SCRL_LAYER_NB);
3400d0ac:	2901      	cmp	r1, #1
{
3400d0ae:	b099      	sub	sp, #100	@ 0x64
3400d0b0:	460c      	mov	r4, r1
3400d0b2:	4613      	mov	r3, r2
3400d0b4:	9000      	str	r0, [sp, #0]
  assert(LayerIndex < SCRL_LAYER_NB);
3400d0b6:	d906      	bls.n	3400d0c6 <MX_LTDC_ConfigLayer+0x1e>
3400d0b8:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
3400d0bc:	4b34      	ldr	r3, [pc, #208]	@ (3400d190 <MX_LTDC_ConfigLayer+0xe8>)
3400d0be:	4a35      	ldr	r2, [pc, #212]	@ (3400d194 <MX_LTDC_ConfigLayer+0xec>)
3400d0c0:	4835      	ldr	r0, [pc, #212]	@ (3400d198 <MX_LTDC_ConfigLayer+0xf0>)
3400d0c2:	f012 f87f 	bl	3401f1c4 <__assert_func>
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400d0c6:	e9d2 9800 	ldrd	r9, r8, [r2]
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400d0ca:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
  pLayerCfg.ARGBAddress = Config->Address;
3400d0ce:	f8d2 b014 	ldr.w	fp, [r2, #20]

  if (is_layer_rgb888[LayerIndex])
3400d0d2:	4a32      	ldr	r2, [pc, #200]	@ (3400d19c <MX_LTDC_ConfigLayer+0xf4>)
  pLayerCfg.Layer.ImageWidth = (Config->X1 - Config->X0);
3400d0d4:	eba8 0a09 	sub.w	sl, r8, r9
  if (is_layer_rgb888[LayerIndex])
3400d0d8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400d0dc:	1bf5      	subs	r5, r6, r7
  if (is_layer_rgb888[LayerIndex])
3400d0de:	b318      	cbz	r0, 3400d128 <MX_LTDC_ConfigLayer+0x80>
  LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
3400d0e0:	2230      	movs	r2, #48	@ 0x30
3400d0e2:	2100      	movs	r1, #0
3400d0e4:	a808      	add	r0, sp, #32
3400d0e6:	f013 f8b7 	bl	34020258 <memset>
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400d0ea:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d0ec:	f44f 6cc0 	mov.w	ip, #1536	@ 0x600
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400d0f0:	9307      	str	r3, [sp, #28]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d0f2:	2307      	movs	r3, #7
3400d0f4:	e9cd c309 	strd	ip, r3, [sp, #36]	@ 0x24
  pLayerCfg.FlexARGB.PixelSize = 3;/*LTDC_ARGB_PIXEL_SIZE_3_BYTES;*/
3400d0f8:	2303      	movs	r3, #3
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400d0fa:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400d0fe:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400d102:	e9cd a50b 	strd	sl, r5, [sp, #44]	@ 0x2c
  pLayerCfg.FlexARGB.BluePos = 16;
3400d106:	2210      	movs	r2, #16
  pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
3400d108:	930e      	str	r3, [sp, #56]	@ 0x38
  pLayerCfg.FlexARGB.BluePos = 16;
3400d10a:	2308      	movs	r3, #8
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400d10c:	9800      	ldr	r0, [sp, #0]
  pLayerCfg.FlexARGB.BluePos = 16;
3400d10e:	e9cd 3211 	strd	r3, r2, [sp, #68]	@ 0x44
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400d112:	a903      	add	r1, sp, #12
3400d114:	4622      	mov	r2, r4
  pLayerCfg.FlexARGB.GreenWidth = 8;
3400d116:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  pLayerCfg.ARGBAddress = Config->Address;
3400d11a:	e9cd 3b16 	strd	r3, fp, [sp, #88]	@ 0x58
  return HAL_LTDC_ConfigLayerFlexARGB(hltdc, &pLayerCfg, LayerIndex);
3400d11e:	f008 f873 	bl	34015208 <HAL_LTDC_ConfigLayerFlexARGB>
    return SCRL_ConfigLayer_Layer_rgb888(hltdc, LayerIndex, Config);
  else if (is_layer_argb8888[LayerIndex])
    return SCRL_ConfigLayer_Layer_argb888(hltdc, LayerIndex, Config);
  else
    return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
}
3400d122:	b019      	add	sp, #100	@ 0x64
3400d124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (is_layer_argb8888[LayerIndex])
3400d128:	4a1d      	ldr	r2, [pc, #116]	@ (3400d1a0 <MX_LTDC_ConfigLayer+0xf8>)
3400d12a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
3400d12e:	b199      	cbz	r1, 3400d158 <MX_LTDC_ConfigLayer+0xb0>
  LTDC_LayerFlexARGBTypeDef pLayerCfg ={0};
3400d130:	4601      	mov	r1, r0
3400d132:	2230      	movs	r2, #48	@ 0x30
3400d134:	a808      	add	r0, sp, #32
3400d136:	f013 f88f 	bl	34020258 <memset>
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400d13a:	23ff      	movs	r3, #255	@ 0xff
  pLayerCfg.Layer.WindowY1 = Config->Y1;
3400d13c:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.Layer.Alpha = LTDC_LxCACR_CONSTA;
3400d140:	9307      	str	r3, [sp, #28]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d142:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
3400d146:	2307      	movs	r3, #7
  pLayerCfg.Layer.WindowX1 = Config->X1;
3400d148:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.Layer.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d14c:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  pLayerCfg.Layer.ImageHeight = (Config->Y1 - Config->Y0);
3400d150:	e9cd a50b 	strd	sl, r5, [sp, #44]	@ 0x2c
  pLayerCfg.FlexARGB.PixelSize = 4;/*LTDC_ARGB_PIXEL_SIZE_4_BYTES;*/
3400d154:	2304      	movs	r3, #4
3400d156:	e7d6      	b.n	3400d106 <MX_LTDC_ConfigLayer+0x5e>
  LTDC_LayerCfgTypeDef pLayerCfg ={0};
3400d158:	221c      	movs	r2, #28
3400d15a:	a809      	add	r0, sp, #36	@ 0x24
3400d15c:	9301      	str	r3, [sp, #4]
3400d15e:	f013 f87b 	bl	34020258 <memset>
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400d162:	9b01      	ldr	r3, [sp, #4]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d164:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400d168:	691b      	ldr	r3, [r3, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400d16a:	4622      	mov	r2, r4
  pLayerCfg.PixelFormat = Config->PixelFormat;
3400d16c:	9307      	str	r3, [sp, #28]
  pLayerCfg.Alpha = LTDC_LxCACR_CONSTA;
3400d16e:	23ff      	movs	r3, #255	@ 0xff
3400d170:	9308      	str	r3, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d172:	2307      	movs	r3, #7
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400d174:	9800      	ldr	r0, [sp, #0]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
3400d176:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400d17a:	a903      	add	r1, sp, #12
  pLayerCfg.WindowX1 = Config->X1;
3400d17c:	e9cd 9803 	strd	r9, r8, [sp, #12]
  pLayerCfg.WindowY1 = Config->Y1;
3400d180:	e9cd 7605 	strd	r7, r6, [sp, #20]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
3400d184:	e9cd ba0c 	strd	fp, sl, [sp, #48]	@ 0x30
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
3400d188:	950e      	str	r5, [sp, #56]	@ 0x38
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
3400d18a:	f007 ff3b 	bl	34015004 <HAL_LTDC_ConfigLayer>
    return SCRL_ConfigLayer_Layer_default(hltdc, LayerIndex, Config);
3400d18e:	e7c8      	b.n	3400d122 <MX_LTDC_ConfigLayer+0x7a>
3400d190:	34027ea0 	.word	0x34027ea0
3400d194:	340340f8 	.word	0x340340f8
3400d198:	34027e6a 	.word	0x34027e6a
3400d19c:	3410f0b8 	.word	0x3410f0b8
3400d1a0:	3410f0b0 	.word	0x3410f0b0
3400d1a4:	00000000 	.word	0x00000000

3400d1a8 <kf_mat_dot_product>:
 * m1     is a matrix of size row_nb   * inter_nb
 * m2     is a matrix of size inter_nb * col_nb
 * result can overlap with either m1 or m2
*/
static void kf_mat_dot_product(double *result, double *m1, double *m2, int row_nb, int col_nb, int inter_nb)
{
3400d1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400d1ac:	b087      	sub	sp, #28
3400d1ae:	af00      	add	r7, sp, #0
3400d1b0:	e9c7 2001 	strd	r2, r0, [r7, #4]
  double res[row_nb][col_nb];
3400d1b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
{
3400d1b6:	617b      	str	r3, [r7, #20]
  double res[row_nb][col_nb];
3400d1b8:	435a      	muls	r2, r3
3400d1ba:	466b      	mov	r3, sp
3400d1bc:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
3400d1c0:	469d      	mov	sp, r3
3400d1c2:	00d0      	lsls	r0, r2, #3
3400d1c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3400d1c6:	466e      	mov	r6, sp
  int r, c, i;

  for (r = 0; r < row_nb; r++) {
3400d1c8:	ea4f 0ac2 	mov.w	sl, r2, lsl #3
  double res[row_nb][col_nb];
3400d1cc:	2200      	movs	r2, #0
3400d1ce:	4634      	mov	r4, r6
  for (r = 0; r < row_nb; r++) {
3400d1d0:	4615      	mov	r5, r2
  double res[row_nb][col_nb];
3400d1d2:	6138      	str	r0, [r7, #16]
{
3400d1d4:	46a0      	mov	r8, r4
    for (c = 0; c < col_nb; c++) {
3400d1d6:	2000      	movs	r0, #0
3400d1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3400d1da:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
3400d1de:	441a      	add	r2, r3
3400d1e0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
3400d1e4:	60fb      	str	r3, [r7, #12]
      res[r][c] = 0;
      for (i = 0; i < inter_nb; i++) {
3400d1e6:	687b      	ldr	r3, [r7, #4]
    for (c = 0; c < col_nb; c++) {
3400d1e8:	46cb      	mov	fp, r9
3400d1ea:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
3400d1ee:	68fb      	ldr	r3, [r7, #12]
3400d1f0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 3400d248 <kf_mat_dot_product+0xa0>
3400d1f4:	eba3 0e09 	sub.w	lr, r3, r9
3400d1f8:	f1ae 0e08 	sub.w	lr, lr, #8
3400d1fc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
3400d200:	f10e 0e01 	add.w	lr, lr, #1
3400d204:	f04e e001 	dls	lr, lr
        res[r][c] += m1[r * inter_nb + i] * m2[i * col_nb + c];
3400d208:	ed9c 6b00 	vldr	d6, [ip]
3400d20c:	ecbb 5b02 	vldmia	fp!, {d5}
      for (i = 0; i < inter_nb; i++) {
3400d210:	44d4      	add	ip, sl
        res[r][c] += m1[r * inter_nb + i] * m2[i * col_nb + c];
3400d212:	eea5 7b06 	vfma.f64	d7, d5, d6
      for (i = 0; i < inter_nb; i++) {
3400d216:	f00f c809 	le	lr, 3400d208 <kf_mat_dot_product+0x60>
    for (c = 0; c < col_nb; c++) {
3400d21a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3400d21c:	3001      	adds	r0, #1
3400d21e:	4283      	cmp	r3, r0
3400d220:	eca8 7b02 	vstmia	r8!, {d7}
3400d224:	d1df      	bne.n	3400d1e6 <kf_mat_dot_product+0x3e>
  for (r = 0; r < row_nb; r++) {
3400d226:	697b      	ldr	r3, [r7, #20]
3400d228:	3501      	adds	r5, #1
3400d22a:	42ab      	cmp	r3, r5
3400d22c:	4454      	add	r4, sl
3400d22e:	d1d1      	bne.n	3400d1d4 <kf_mat_dot_product+0x2c>
      }
    }
  }

  memcpy(result, res, sizeof(res));
3400d230:	693a      	ldr	r2, [r7, #16]
3400d232:	4631      	mov	r1, r6
3400d234:	68b8      	ldr	r0, [r7, #8]
3400d236:	f013 fa96 	bl	34020766 <memcpy>
}
3400d23a:	371c      	adds	r7, #28
3400d23c:	46bd      	mov	sp, r7
3400d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400d242:	bf00      	nop
3400d244:	f3af 8000 	nop.w
	...

3400d250 <kf_mat_transpose.constprop.0>:
*/
static void kf_mat_transpose(double *result, double *m, int row_nb, int col_nb)
{
  int r, c;

  for (r = 0; r < row_nb; r++) {
3400d250:	2300      	movs	r3, #0
static void kf_mat_transpose(double *result, double *m, int row_nb, int col_nb)
3400d252:	b5f0      	push	{r4, r5, r6, r7, lr}
3400d254:	00d7      	lsls	r7, r2, #3
    for (c = 0; c < col_nb; c++) {
3400d256:	f04f 0e04 	mov.w	lr, #4
3400d25a:	f04e e001 	dls	lr, lr
3400d25e:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
      result[r * col_nb + c] = m[c * row_nb + r];
3400d262:	e9d6 4500 	ldrd	r4, r5, [r6]
    for (c = 0; c < col_nb; c++) {
3400d266:	443e      	add	r6, r7
      result[r * col_nb + c] = m[c * row_nb + r];
3400d268:	e8e0 4502 	strd	r4, r5, [r0], #8
    for (c = 0; c < col_nb; c++) {
3400d26c:	f00f c807 	le	lr, 3400d262 <kf_mat_transpose.constprop.0+0x12>
  for (r = 0; r < row_nb; r++) {
3400d270:	3301      	adds	r3, #1
3400d272:	429a      	cmp	r2, r3
3400d274:	d1ef      	bne.n	3400d256 <kf_mat_transpose.constprop.0+0x6>
    }
  }
}
3400d276:	bdf0      	pop	{r4, r5, r6, r7, pc}

3400d278 <kf_vector_mat_dot_product.constprop.0>:
static void kf_vector_mat_dot_product(double *result, double *v, double *m, int row_nb, int col_nb)
3400d278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
3400d27c:	b091      	sub	sp, #68	@ 0x44
  for (c = 0; c < col_nb; c++) {
3400d27e:	466e      	mov	r6, sp
3400d280:	2500      	movs	r5, #0
3400d282:	4634      	mov	r4, r6
3400d284:	ea4f 09c3 	mov.w	r9, r3, lsl #3
3400d288:	f101 0840 	add.w	r8, r1, #64	@ 0x40
3400d28c:	eba8 0e01 	sub.w	lr, r8, r1
3400d290:	f1ae 0e08 	sub.w	lr, lr, #8
3400d294:	ea4f 0ede 	mov.w	lr, lr, lsr #3
3400d298:	f10e 0e01 	add.w	lr, lr, #1
3400d29c:	468c      	mov	ip, r1
3400d29e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 3400d2e8 <kf_vector_mat_dot_product.constprop.0+0x70>
3400d2a2:	f04e e001 	dls	lr, lr
3400d2a6:	eb02 07c5 	add.w	r7, r2, r5, lsl #3
      res[c] += v[r] * m[r * col_nb + c];
3400d2aa:	ed97 6b00 	vldr	d6, [r7]
3400d2ae:	ecbc 5b02 	vldmia	ip!, {d5}
    for (r = 0; r < row_nb; r++) {
3400d2b2:	444f      	add	r7, r9
      res[c] += v[r] * m[r * col_nb + c];
3400d2b4:	eea5 7b06 	vfma.f64	d7, d5, d6
    for (r = 0; r < row_nb; r++) {
3400d2b8:	f00f c809 	le	lr, 3400d2aa <kf_vector_mat_dot_product.constprop.0+0x32>
  for (c = 0; c < col_nb; c++) {
3400d2bc:	3501      	adds	r5, #1
3400d2be:	42ab      	cmp	r3, r5
3400d2c0:	eca6 7b02 	vstmia	r6!, {d7}
3400d2c4:	d1e2      	bne.n	3400d28c <kf_vector_mat_dot_product.constprop.0+0x14>
  memcpy(result, res, sizeof(res));
3400d2c6:	4603      	mov	r3, r0
3400d2c8:	ad10      	add	r5, sp, #64	@ 0x40
3400d2ca:	4622      	mov	r2, r4
3400d2cc:	ca03      	ldmia	r2!, {r0, r1}
3400d2ce:	42aa      	cmp	r2, r5
3400d2d0:	6018      	str	r0, [r3, #0]
3400d2d2:	6059      	str	r1, [r3, #4]
3400d2d4:	4614      	mov	r4, r2
3400d2d6:	f103 0308 	add.w	r3, r3, #8
3400d2da:	d1f6      	bne.n	3400d2ca <kf_vector_mat_dot_product.constprop.0+0x52>
}
3400d2dc:	b011      	add	sp, #68	@ 0x44
3400d2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3400d2e2:	bf00      	nop
3400d2e4:	f3af 8000 	nop.w
	...

3400d2f0 <kf_init>:
  for (i = 0; i < KF_DIM; i++)
    projected_cov[i][i] += innovation_cov[i];
}

void kf_init(struct kf_state *state, struct kf_box *measure)
{
3400d2f0:	b538      	push	{r3, r4, r5, lr}
  int i;

  /* init mean */
  state->mean[0] = measure->cx;
3400d2f2:	e9d1 2300 	ldrd	r2, r3, [r1]
3400d2f6:	e9c0 2300 	strd	r2, r3, [r0]
  state->mean[1] = measure->cy;
3400d2fa:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
3400d2fe:	e9c0 2302 	strd	r2, r3, [r0, #8]
  state->mean[2] = measure->a;
3400d302:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
3400d306:	e9c0 2304 	strd	r2, r3, [r0, #16]
  state->mean[3] = measure->h;
3400d30a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
3400d30e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  state->mean[4] = 0;
3400d312:	2300      	movs	r3, #0
3400d314:	2200      	movs	r2, #0
{
3400d316:	460d      	mov	r5, r1
3400d318:	4604      	mov	r4, r0
  state->mean[4] = 0;
3400d31a:	e9c0 2308 	strd	r2, r3, [r0, #32]
  state->mean[5] = 0;
3400d31e:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  state->mean[6] = 0;
3400d322:	e9c0 230c 	strd	r2, r3, [r0, #48]	@ 0x30
  state->mean[7] = 0;
3400d326:	e9c0 230e 	strd	r2, r3, [r0, #56]	@ 0x38

  /* init covariance */
  memset(state->covariance, 0, sizeof(state->covariance));
3400d32a:	2100      	movs	r1, #0
3400d32c:	f44f 7200 	mov.w	r2, #512	@ 0x200
3400d330:	3040      	adds	r0, #64	@ 0x40
3400d332:	f012 ff91 	bl	34020258 <memset>
  state->covariance[0][0] = 2 * std_weight_position * measure->h;
  state->covariance[1][1] = 2 * std_weight_position * measure->h;
  state->covariance[2][2] = 1e-2;
3400d336:	a31c      	add	r3, pc, #112	@ (adr r3, 3400d3a8 <kf_init+0xb8>)
3400d338:	e9d3 2300 	ldrd	r2, r3, [r3]
  state->covariance[0][0] = 2 * std_weight_position * measure->h;
3400d33c:	ed95 7b06 	vldr	d7, [r5, #24]
3400d340:	ed9f 6b15 	vldr	d6, [pc, #84]	@ 3400d398 <kf_init+0xa8>
3400d344:	ee27 6b06 	vmul.f64	d6, d7, d6
3400d348:	ed84 6b10 	vstr	d6, [r4, #64]	@ 0x40
  state->covariance[1][1] = 2 * std_weight_position * measure->h;
3400d34c:	ed84 6b22 	vstr	d6, [r4, #136]	@ 0x88
  state->covariance[3][3] = 2 * std_weight_position * measure->h;
3400d350:	ed84 6b46 	vstr	d6, [r4, #280]	@ 0x118
  state->covariance[4][4] = 10 * std_weight_velocity * measure->h;
3400d354:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 3400d3a0 <kf_init+0xb0>
3400d358:	f04f 0e08 	mov.w	lr, #8
3400d35c:	ee27 7b06 	vmul.f64	d7, d7, d6
3400d360:	f04e e001 	dls	lr, lr
3400d364:	ed84 7b58 	vstr	d7, [r4, #352]	@ 0x160
  state->covariance[5][5] = 10 * std_weight_velocity * measure->h;
3400d368:	ed84 7b6a 	vstr	d7, [r4, #424]	@ 0x1a8
  state->covariance[6][6] = 1e-5;
  state->covariance[7][7] = 10 * std_weight_velocity * measure->h;
3400d36c:	ed84 7b8e 	vstr	d7, [r4, #568]	@ 0x238
  state->covariance[2][2] = 1e-2;
3400d370:	e9c4 2334 	strd	r2, r3, [r4, #208]	@ 0xd0
  state->covariance[6][6] = 1e-5;
3400d374:	a30e      	add	r3, pc, #56	@ (adr r3, 3400d3b0 <kf_init+0xc0>)
3400d376:	e9d3 2300 	ldrd	r2, r3, [r3]
3400d37a:	e9c4 237c 	strd	r2, r3, [r4, #496]	@ 0x1f0
  for (i = 0; i < 2 * KF_DIM; i ++)
    state->covariance[i][i] *= state->covariance[i][i];
3400d37e:	ed94 7b10 	vldr	d7, [r4, #64]	@ 0x40
3400d382:	ee27 7b07 	vmul.f64	d7, d7, d7
  for (i = 0; i < 2 * KF_DIM; i ++)
3400d386:	3448      	adds	r4, #72	@ 0x48
    state->covariance[i][i] *= state->covariance[i][i];
3400d388:	ed04 7b02 	vstr	d7, [r4, #-8]
  for (i = 0; i < 2 * KF_DIM; i ++)
3400d38c:	f00f c809 	le	lr, 3400d37e <kf_init+0x8e>
}
3400d390:	bd38      	pop	{r3, r4, r5, pc}
3400d392:	bf00      	nop
3400d394:	f3af 8000 	nop.w
3400d398:	9999999a 	.word	0x9999999a
3400d39c:	3fb99999 	.word	0x3fb99999
3400d3a0:	00000000 	.word	0x00000000
3400d3a4:	3fb00000 	.word	0x3fb00000
3400d3a8:	47ae147b 	.word	0x47ae147b
3400d3ac:	3f847ae1 	.word	0x3f847ae1
3400d3b0:	88e368f1 	.word	0x88e368f1
3400d3b4:	3ee4f8b5 	.word	0x3ee4f8b5

3400d3b8 <kf_predict>:
void kf_predict(struct kf_state *state, struct kf_box *predicted)
{
  double motion_cov[2 * KF_DIM];
  int i;

  motion_cov[0] = state->mean[3] * std_weight_position;
3400d3b8:	ed90 7b06 	vldr	d7, [r0, #24]
  motion_cov[1] = state->mean[3] * std_weight_position;
  motion_cov[2] = 1e-2;
3400d3bc:	a33c      	add	r3, pc, #240	@ (adr r3, 3400d4b0 <kf_predict+0xf8>)
3400d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
  motion_cov[0] = state->mean[3] * std_weight_position;
3400d3c2:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 3400d498 <kf_predict+0xe0>
3400d3c6:	ee27 6b06 	vmul.f64	d6, d7, d6
{
3400d3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400d3ce:	b092      	sub	sp, #72	@ 0x48
  motion_cov[0] = state->mean[3] * std_weight_position;
3400d3d0:	ed8d 6b02 	vstr	d6, [sp, #8]
  motion_cov[1] = state->mean[3] * std_weight_position;
3400d3d4:	ed8d 6b04 	vstr	d6, [sp, #16]
  motion_cov[3] = state->mean[3] * std_weight_position;
3400d3d8:	ed8d 6b08 	vstr	d6, [sp, #32]
  motion_cov[4] = state->mean[3] * std_weight_velocity;
3400d3dc:	ed9f 6b30 	vldr	d6, [pc, #192]	@ 3400d4a0 <kf_predict+0xe8>
  motion_cov[2] = 1e-2;
3400d3e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  motion_cov[5] = state->mean[3] * std_weight_velocity;
  motion_cov[6] = 1e-5;
3400d3e4:	a334      	add	r3, pc, #208	@ (adr r3, 3400d4b8 <kf_predict+0x100>)
3400d3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  motion_cov[4] = state->mean[3] * std_weight_velocity;
3400d3ea:	ee27 7b06 	vmul.f64	d7, d7, d6
  motion_cov[6] = 1e-5;
3400d3ee:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  motion_cov[7] = state->mean[3] * std_weight_velocity;
3400d3f2:	2208      	movs	r2, #8
3400d3f4:	f10d 0808 	add.w	r8, sp, #8
{
3400d3f8:	4604      	mov	r4, r0
3400d3fa:	460e      	mov	r6, r1
  motion_cov[4] = state->mean[3] * std_weight_velocity;
3400d3fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  motion_cov[5] = state->mean[3] * std_weight_velocity;
3400d400:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  motion_cov[7] = state->mean[3] * std_weight_velocity;
3400d404:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
3400d408:	4643      	mov	r3, r8
3400d40a:	f042 e001 	dls	lr, r2
  for (i = 0; i < 2 * KF_DIM; i ++)
    motion_cov[i] *= motion_cov[i];
3400d40e:	ed93 7b00 	vldr	d7, [r3]
3400d412:	ee27 7b07 	vmul.f64	d7, d7, d7
3400d416:	eca3 7b02 	vstmia	r3!, {d7}
  for (i = 0; i < 2 * KF_DIM; i ++)
3400d41a:	f00f c009 	le	lr, 3400d40e <kf_predict+0x56>

  /* predict state */
  kf_vector_mat_dot_product(state->mean, state->mean, (double *) motion_mat_t, 2 * KF_DIM, 2 * KF_DIM);

  /*predict covariance : motion_mat * state->covariance * motion_mat_t + motion_cov */
  kf_mat_dot_product((double *) state->covariance, (double *) motion_mat, (double *) state->covariance,
3400d41e:	2508      	movs	r5, #8
3400d420:	f104 0740 	add.w	r7, r4, #64	@ 0x40
  kf_vector_mat_dot_product(state->mean, state->mean, (double *) motion_mat_t, 2 * KF_DIM, 2 * KF_DIM);
3400d424:	2308      	movs	r3, #8
3400d426:	4621      	mov	r1, r4
3400d428:	4620      	mov	r0, r4
3400d42a:	4a1f      	ldr	r2, [pc, #124]	@ (3400d4a8 <kf_predict+0xf0>)
3400d42c:	f7ff ff24 	bl	3400d278 <kf_vector_mat_dot_product.constprop.0>
  kf_mat_dot_product((double *) state->covariance, (double *) motion_mat, (double *) state->covariance,
3400d430:	462b      	mov	r3, r5
3400d432:	463a      	mov	r2, r7
3400d434:	4638      	mov	r0, r7
3400d436:	491d      	ldr	r1, [pc, #116]	@ (3400d4ac <kf_predict+0xf4>)
3400d438:	e9cd 5500 	strd	r5, r5, [sp]
3400d43c:	f7ff feb4 	bl	3400d1a8 <kf_mat_dot_product>
             2 * KF_DIM, 2 * KF_DIM, 2 * KF_DIM);
  kf_mat_dot_product((double *) state->covariance, (double *) state->covariance, (double *) motion_mat_t,
3400d440:	462b      	mov	r3, r5
3400d442:	4639      	mov	r1, r7
3400d444:	4638      	mov	r0, r7
3400d446:	e9cd 5500 	strd	r5, r5, [sp]
3400d44a:	4a17      	ldr	r2, [pc, #92]	@ (3400d4a8 <kf_predict+0xf0>)
3400d44c:	f7ff feac 	bl	3400d1a8 <kf_mat_dot_product>
             2 * KF_DIM, 2 * KF_DIM, 2 * KF_DIM);
  for (i = 0; i < 2 * KF_DIM; i ++)
3400d450:	4623      	mov	r3, r4
3400d452:	f045 e001 	dls	lr, r5
    state->covariance[i][i] += motion_cov[i];
3400d456:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
3400d45a:	ecb8 6b02 	vldmia	r8!, {d6}
3400d45e:	ee37 7b06 	vadd.f64	d7, d7, d6
  for (i = 0; i < 2 * KF_DIM; i ++)
3400d462:	3348      	adds	r3, #72	@ 0x48
    state->covariance[i][i] += motion_cov[i];
3400d464:	ed03 7b02 	vstr	d7, [r3, #-8]
  for (i = 0; i < 2 * KF_DIM; i ++)
3400d468:	f00f c80b 	le	lr, 3400d456 <kf_predict+0x9e>

  /* set predicted result */
  predicted->cx = state->mean[0];
3400d46c:	e9d4 2300 	ldrd	r2, r3, [r4]
3400d470:	e9c6 2300 	strd	r2, r3, [r6]
  predicted->cy = state->mean[1];
3400d474:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
3400d478:	e9c6 2302 	strd	r2, r3, [r6, #8]
  predicted->a  = state->mean[2];
3400d47c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
3400d480:	e9c6 2304 	strd	r2, r3, [r6, #16]
  predicted->h  = state->mean[3];
3400d484:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
3400d488:	e9c6 2306 	strd	r2, r3, [r6, #24]
}
3400d48c:	b012      	add	sp, #72	@ 0x48
3400d48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400d492:	bf00      	nop
3400d494:	f3af 8000 	nop.w
3400d498:	9999999a 	.word	0x9999999a
3400d49c:	3fa99999 	.word	0x3fa99999
3400d4a0:	9999999a 	.word	0x9999999a
3400d4a4:	3f799999 	.word	0x3f799999
3400d4a8:	34034358 	.word	0x34034358
3400d4ac:	34034558 	.word	0x34034558
3400d4b0:	47ae147b 	.word	0x47ae147b
3400d4b4:	3f847ae1 	.word	0x3f847ae1
3400d4b8:	88e368f1 	.word	0x88e368f1
3400d4bc:	3ee4f8b5 	.word	0x3ee4f8b5

3400d4c0 <kf_update>:

void kf_update(struct kf_state *state, struct kf_box *measure)
{
3400d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  innovation_cov[2] = 1e-1;
3400d4c4:	a3e6      	add	r3, pc, #920	@ (adr r3, 3400d860 <kf_update+0x3a0>)
3400d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
{
3400d4ca:	f2ad 7da4 	subw	sp, sp, #1956	@ 0x7a4
  innovation_cov[0] = std_weight_position * state->mean[3];
3400d4ce:	ed9f 6be0 	vldr	d6, [pc, #896]	@ 3400d850 <kf_update+0x390>
3400d4d2:	ed90 7b06 	vldr	d7, [r0, #24]
3400d4d6:	f04f 0e04 	mov.w	lr, #4
3400d4da:	ee27 7b06 	vmul.f64	d7, d7, d6
{
3400d4de:	af02      	add	r7, sp, #8
  innovation_cov[0] = std_weight_position * state->mean[3];
3400d4e0:	f507 6593 	add.w	r5, r7, #1176	@ 0x498
  innovation_cov[2] = 1e-1;
3400d4e4:	e9c5 2304 	strd	r2, r3, [r5, #16]
{
3400d4e8:	4604      	mov	r4, r0
3400d4ea:	460e      	mov	r6, r1
  innovation_cov[0] = std_weight_position * state->mean[3];
3400d4ec:	ed85 7b00 	vstr	d7, [r5]
  innovation_cov[1] = std_weight_position * state->mean[3];
3400d4f0:	ed85 7b02 	vstr	d7, [r5, #8]
  innovation_cov[3] = std_weight_position * state->mean[3];
3400d4f4:	ed85 7b06 	vstr	d7, [r5, #24]
  for (i = 0; i < KF_DIM; i ++)
3400d4f8:	46a9      	mov	r9, r5
  innovation_cov[3] = std_weight_position * state->mean[3];
3400d4fa:	462b      	mov	r3, r5
  for (i = 0; i < KF_DIM; i ++)
3400d4fc:	f04f 0a00 	mov.w	sl, #0
3400d500:	f04e e001 	dls	lr, lr
    innovation_cov[i] *= innovation_cov[i];
3400d504:	ed93 7b00 	vldr	d7, [r3]
3400d508:	ee27 7b07 	vmul.f64	d7, d7, d7
  for (i = 0; i < KF_DIM; i ++)
3400d50c:	f10a 0a01 	add.w	sl, sl, #1
    innovation_cov[i] *= innovation_cov[i];
3400d510:	eca3 7b02 	vstmia	r3!, {d7}
  for (i = 0; i < KF_DIM; i ++)
3400d514:	f00f c00b 	le	lr, 3400d504 <kf_update+0x44>
  kf_mat_dot_product((double *) tmp, (double *) update_mat, (double *) state->covariance,
3400d518:	f04f 0b08 	mov.w	fp, #8
  kf_vector_mat_dot_product(projected_mean, (double *) update_mat, state->mean, 2 * KF_DIM, KF_DIM);
3400d51c:	2304      	movs	r3, #4
3400d51e:	4622      	mov	r2, r4
3400d520:	49cd      	ldr	r1, [pc, #820]	@ (3400d858 <kf_update+0x398>)
3400d522:	f107 0018 	add.w	r0, r7, #24
  kf_mat_dot_product((double *) tmp, (double *) update_mat, (double *) state->covariance,
3400d526:	f104 0840 	add.w	r8, r4, #64	@ 0x40
  kf_vector_mat_dot_product(projected_mean, (double *) update_mat, state->mean, 2 * KF_DIM, KF_DIM);
3400d52a:	f7ff fea5 	bl	3400d278 <kf_vector_mat_dot_product.constprop.0>
  kf_mat_dot_product((double *) tmp, (double *) update_mat, (double *) state->covariance,
3400d52e:	2304      	movs	r3, #4
3400d530:	4642      	mov	r2, r8
3400d532:	49c9      	ldr	r1, [pc, #804]	@ (3400d858 <kf_update+0x398>)
3400d534:	f507 60b3 	add.w	r0, r7, #1432	@ 0x598
3400d538:	e9cd bb00 	strd	fp, fp, [sp]
3400d53c:	f7ff fe34 	bl	3400d1a8 <kf_mat_dot_product>
  kf_mat_dot_product((double *) projected_cov, (double *) tmp, (double *) update_mat_t,
3400d540:	2304      	movs	r3, #4
3400d542:	e9cd ab00 	strd	sl, fp, [sp]
3400d546:	4ac5      	ldr	r2, [pc, #788]	@ (3400d85c <kf_update+0x39c>)
3400d548:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
3400d54c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
3400d550:	f7ff fe2a 	bl	3400d1a8 <kf_mat_dot_product>
  for (i = 0; i < KF_DIM; i++)
3400d554:	f04f 0e04 	mov.w	lr, #4
3400d558:	f04e e001 	dls	lr, lr
3400d55c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
3400d560:	617b      	str	r3, [r7, #20]
    projected_cov[i][i] += innovation_cov[i];
3400d562:	ed93 7b00 	vldr	d7, [r3]
3400d566:	ecb9 6b02 	vldmia	r9!, {d6}
3400d56a:	461a      	mov	r2, r3
3400d56c:	ee37 7b06 	vadd.f64	d7, d7, d6
3400d570:	3328      	adds	r3, #40	@ 0x28
3400d572:	ed82 7b00 	vstr	d7, [r2]
  for (i = 0; i < KF_DIM; i++)
3400d576:	f00f c00d 	le	lr, 3400d562 <kf_update+0xa2>
  for (r = 0; r < row_nb; r++) {
3400d57a:	2200      	movs	r2, #0
{
3400d57c:	f8c7 d010 	str.w	sp, [r7, #16]
  double res[row_nb][col_nb];
3400d580:	f8df c2d8 	ldr.w	ip, [pc, #728]	@ 3400d85c <kf_update+0x39c>
3400d584:	b0c0      	sub	sp, #256	@ 0x100
3400d586:	a902      	add	r1, sp, #8
  for (r = 0; r < row_nb; r++) {
3400d588:	f8c7 8008 	str.w	r8, [r7, #8]
    for (c = 0; c < col_nb; c++) {
3400d58c:	4643      	mov	r3, r8
3400d58e:	2000      	movs	r0, #0
3400d590:	eb01 1a82 	add.w	sl, r1, r2, lsl #6
      for (i = 0; i < inter_nb; i++) {
3400d594:	f04f 0e08 	mov.w	lr, #8
3400d598:	46e3      	mov	fp, ip
3400d59a:	ed9f 7bb3 	vldr	d7, [pc, #716]	@ 3400d868 <kf_update+0x3a8>
3400d59e:	f04e e001 	dls	lr, lr
        res[r][c] += m1[c * inter_nb + i] * m2[i * row_nb + r];
3400d5a2:	46d9      	mov	r9, fp
3400d5a4:	ecb3 5b02 	vldmia	r3!, {d5}
3400d5a8:	ed99 6b00 	vldr	d6, [r9]
3400d5ac:	f10b 0b20 	add.w	fp, fp, #32
3400d5b0:	eea5 7b06 	vfma.f64	d7, d5, d6
      for (i = 0; i < inter_nb; i++) {
3400d5b4:	f00f c80b 	le	lr, 3400d5a2 <kf_update+0xe2>
    for (c = 0; c < col_nb; c++) {
3400d5b8:	3008      	adds	r0, #8
3400d5ba:	2840      	cmp	r0, #64	@ 0x40
3400d5bc:	ecaa 7b02 	vstmia	sl!, {d7}
3400d5c0:	d1e8      	bne.n	3400d594 <kf_update+0xd4>
  for (r = 0; r < row_nb; r++) {
3400d5c2:	3201      	adds	r2, #1
3400d5c4:	2a04      	cmp	r2, #4
3400d5c6:	f10c 0c08 	add.w	ip, ip, #8
3400d5ca:	d1df      	bne.n	3400d58c <kf_update+0xcc>
  memcpy(result, res, sizeof(res));
3400d5cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400d5d0:	4628      	mov	r0, r5
3400d5d2:	f013 f8c8 	bl	34020766 <memcpy>
  memset(lower, 0, row_col_nb * row_col_nb * sizeof(double));
3400d5d6:	2280      	movs	r2, #128	@ 0x80
3400d5d8:	2100      	movs	r1, #0
3400d5da:	f8d7 d010 	ldr.w	sp, [r7, #16]
3400d5de:	f507 7006 	add.w	r0, r7, #536	@ 0x218
3400d5e2:	f012 fe39 	bl	34020258 <memset>
  for (r = 0; r < row_col_nb; r++) {
3400d5e6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
  memset(lower, 0, row_col_nb * row_col_nb * sizeof(double));
3400d5ea:	469b      	mov	fp, r3
  for (r = 0; r < row_col_nb; r++) {
3400d5ec:	f04f 0900 	mov.w	r9, #0
3400d5f0:	613b      	str	r3, [r7, #16]
  for (r = 0; r < row_nb; r++) {
3400d5f2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
3400d5f6:	469a      	mov	sl, r3
    for (c = 0; c <= r; c++) {
3400d5f8:	f04f 0800 	mov.w	r8, #0
  for (r = 0; r < row_nb; r++) {
3400d5fc:	697a      	ldr	r2, [r7, #20]
3400d5fe:	f8c7 b00c 	str.w	fp, [r7, #12]
      if (r == c) {
3400d602:	45c1      	cmp	r9, r8
3400d604:	f000 8102 	beq.w	3400d80c <kf_update+0x34c>
3400d608:	469c      	mov	ip, r3
3400d60a:	4658      	mov	r0, fp
      sum = 0;
3400d60c:	ed9f 6b96 	vldr	d6, [pc, #600]	@ 3400d868 <kf_update+0x3a8>
3400d610:	f108 0101 	add.w	r1, r8, #1
        for (i = 0; i < c; i++)
3400d614:	3901      	subs	r1, #1
3400d616:	f040 80ff 	bne.w	3400d818 <kf_update+0x358>
        lower[r * n + c] = (A[r * n + c] - sum) / lower[c * n + c];
3400d61a:	ed92 7b00 	vldr	d7, [r2]
3400d61e:	ed9a 5b00 	vldr	d5, [sl]
3400d622:	ee37 7b46 	vsub.f64	d7, d7, d6
3400d626:	ee87 6b05 	vdiv.f64	d6, d7, d5
3400d62a:	68f9      	ldr	r1, [r7, #12]
3400d62c:	ed81 6b00 	vstr	d6, [r1]
3400d630:	e016      	b.n	3400d660 <kf_update+0x1a0>
          sum += lower[c * n + i] * lower[c * n + i];
3400d632:	ecb0 6b02 	vldmia	r0!, {d6}
3400d636:	eea6 7b06 	vfma.f64	d7, d6, d6
        for (i = 0; i < c; i++)
3400d63a:	3901      	subs	r1, #1
3400d63c:	d1f9      	bne.n	3400d632 <kf_update+0x172>
3400d63e:	e9c7 3200 	strd	r3, r2, [r7]
        lower[c * n + c] = sqrt(A[c * n + c] - sum);
3400d642:	2228      	movs	r2, #40	@ 0x28
3400d644:	f107 0398 	add.w	r3, r7, #152	@ 0x98
3400d648:	fb02 3108 	mla	r1, r2, r8, r3
3400d64c:	ed91 0b00 	vldr	d0, [r1]
3400d650:	ee30 0b47 	vsub.f64	d0, d0, d7
3400d654:	f014 ffb8 	bl	340225c8 <sqrt>
3400d658:	e9d7 3200 	ldrd	r3, r2, [r7]
3400d65c:	ed8a 0b00 	vstr	d0, [sl]
    for (c = 0; c <= r; c++) {
3400d660:	68f9      	ldr	r1, [r7, #12]
3400d662:	f108 0801 	add.w	r8, r8, #1
3400d666:	3108      	adds	r1, #8
3400d668:	45c8      	cmp	r8, r9
3400d66a:	f10a 0a28 	add.w	sl, sl, #40	@ 0x28
3400d66e:	f102 0208 	add.w	r2, r2, #8
3400d672:	60f9      	str	r1, [r7, #12]
3400d674:	f103 0320 	add.w	r3, r3, #32
3400d678:	ddc3      	ble.n	3400d602 <kf_update+0x142>
  for (r = 0; r < row_col_nb; r++) {
3400d67a:	697b      	ldr	r3, [r7, #20]
3400d67c:	f109 0901 	add.w	r9, r9, #1
3400d680:	3320      	adds	r3, #32
3400d682:	f1b9 0f04 	cmp.w	r9, #4
3400d686:	f10b 0b20 	add.w	fp, fp, #32
3400d68a:	617b      	str	r3, [r7, #20]
3400d68c:	d1b1      	bne.n	3400d5f2 <kf_update+0x132>
  memset(m_inv, 0, row_col_nb * row_col_nb * sizeof(double));
3400d68e:	2280      	movs	r2, #128	@ 0x80
3400d690:	2100      	movs	r1, #0
3400d692:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
3400d696:	f012 fddf 	bl	34020258 <memset>
  for (r = 0; r < row_col_nb; r++) {
3400d69a:	f04f 0800 	mov.w	r8, #0
        m_inv[r * n + c] = 1 / m[r * n + c];
3400d69e:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
  memset(m_inv, 0, row_col_nb * row_col_nb * sizeof(double));
3400d6a2:	f507 7c06 	add.w	ip, r7, #536	@ 0x218
3400d6a6:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
  for (r = 0; r < row_col_nb; r++) {
3400d6aa:	4661      	mov	r1, ip
3400d6ac:	4682      	mov	sl, r0
    for (c = 0; c <= r; c++) {
3400d6ae:	2300      	movs	r3, #0
  for (r = 0; r < row_col_nb; r++) {
3400d6b0:	f507 7ecc 	add.w	lr, r7, #408	@ 0x198
      if (r == c) {
3400d6b4:	4598      	cmp	r8, r3
3400d6b6:	f040 80db 	bne.w	3400d870 <kf_update+0x3b0>
        m_inv[r * n + c] = 1 / m[r * n + c];
3400d6ba:	ed91 7b00 	vldr	d7, [r1]
3400d6be:	ee85 6b07 	vdiv.f64	d6, d5, d7
    for (c = 0; c <= r; c++) {
3400d6c2:	3301      	adds	r3, #1
3400d6c4:	4543      	cmp	r3, r8
        m_inv[r * n + c] = 1 / m[r * n + c];
3400d6c6:	ecaa 6b02 	vstmia	sl!, {d6}
    for (c = 0; c <= r; c++) {
3400d6ca:	f101 0108 	add.w	r1, r1, #8
3400d6ce:	f10e 0e28 	add.w	lr, lr, #40	@ 0x28
3400d6d2:	ddef      	ble.n	3400d6b4 <kf_update+0x1f4>
  for (r = 0; r < row_col_nb; r++) {
3400d6d4:	693b      	ldr	r3, [r7, #16]
3400d6d6:	f108 0801 	add.w	r8, r8, #1
3400d6da:	3328      	adds	r3, #40	@ 0x28
3400d6dc:	f1b8 0f04 	cmp.w	r8, #4
3400d6e0:	613b      	str	r3, [r7, #16]
3400d6e2:	f100 0020 	add.w	r0, r0, #32
3400d6e6:	f10c 0c20 	add.w	ip, ip, #32
3400d6ea:	d1de      	bne.n	3400d6aa <kf_update+0x1ea>
3400d6ec:	46a1      	mov	r9, r4
  kf_mat_dot_product(x, cho, B, row_nb, col_nb, row_nb);
3400d6ee:	2408      	movs	r4, #8
  kf_mat_transpose(cho_inv_t, cho_inv, row_nb, row_nb);
3400d6f0:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
3400d6f4:	4642      	mov	r2, r8
3400d6f6:	f507 708c 	add.w	r0, r7, #280	@ 0x118
3400d6fa:	f7ff fda9 	bl	3400d250 <kf_mat_transpose.constprop.0>
  kf_mat_dot_product(cho, cho_inv_t, cho_inv, row_nb, row_nb, row_nb);
3400d6fe:	460a      	mov	r2, r1
3400d700:	4643      	mov	r3, r8
3400d702:	f507 718c 	add.w	r1, r7, #280	@ 0x118
3400d706:	f507 7006 	add.w	r0, r7, #536	@ 0x218
3400d70a:	e9cd 8800 	strd	r8, r8, [sp]
3400d70e:	f7ff fd4b 	bl	3400d1a8 <kf_mat_dot_product>
  kf_mat_dot_product(x, cho, B, row_nb, col_nb, row_nb);
3400d712:	4643      	mov	r3, r8
3400d714:	462a      	mov	r2, r5
3400d716:	f507 7106 	add.w	r1, r7, #536	@ 0x218
3400d71a:	f507 7026 	add.w	r0, r7, #664	@ 0x298
3400d71e:	f8cd 8004 	str.w	r8, [sp, #4]
3400d722:	9400      	str	r4, [sp, #0]
3400d724:	f7ff fd40 	bl	3400d1a8 <kf_mat_dot_product>
   *         diagonal. In that case projected_cov is also diagonal. If this is case then we can replace
             kf_cho_solve with a faster version.
   */
  kf_cho_solve((double *) kalman_gain_T, (double *) projected_cov, (double *) B, (double *) cho, (double *) cho_inv,
               (double *) cho_inv_t, KF_DIM, 2 * KF_DIM);
  kf_mat_transpose((double *) kalman_gain, (double *) kalman_gain_T, 2 * KF_DIM, KF_DIM);
3400d728:	4622      	mov	r2, r4
3400d72a:	f507 7126 	add.w	r1, r7, #664	@ 0x298
3400d72e:	f507 7066 	add.w	r0, r7, #920	@ 0x398
3400d732:	f7ff fd8d 	bl	3400d250 <kf_mat_transpose.constprop.0>

  innovation[0] = measure->cx - projected_mean[0];
3400d736:	ed97 6b06 	vldr	d6, [r7, #24]
3400d73a:	ed96 7b00 	vldr	d7, [r6]
3400d73e:	ee37 7b46 	vsub.f64	d7, d7, d6
  innovation[1] = measure->cy - projected_mean[1];
3400d742:	ed97 6b08 	vldr	d6, [r7, #32]
  innovation[0] = measure->cx - projected_mean[0];
3400d746:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  innovation[1] = measure->cy - projected_mean[1];
3400d74a:	ed96 7b02 	vldr	d7, [r6, #8]
3400d74e:	ee37 7b46 	vsub.f64	d7, d7, d6
  innovation[2] = measure->a  - projected_mean[2];
3400d752:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
  innovation[1] = measure->cy - projected_mean[1];
3400d756:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
  innovation[2] = measure->a  - projected_mean[2];
3400d75a:	ed96 7b04 	vldr	d7, [r6, #16]
3400d75e:	ee37 7b46 	vsub.f64	d7, d7, d6
  innovation[3] = measure->h  - projected_mean[3];
3400d762:	ed97 6b0c 	vldr	d6, [r7, #48]	@ 0x30
  innovation[2] = measure->a  - projected_mean[2];
3400d766:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
  innovation[3] = measure->h  - projected_mean[3];
3400d76a:	ed96 7b06 	vldr	d7, [r6, #24]

  /* update mean */
  kf_mat_dot_product(mean_temp, (double *) kalman_gain, innovation, 2 * KF_DIM, 1, KF_DIM);
3400d76e:	2301      	movs	r3, #1
  innovation[3] = measure->h  - projected_mean[3];
3400d770:	ee37 7b46 	vsub.f64	d7, d7, d6
  kf_mat_dot_product(mean_temp, (double *) kalman_gain, innovation, 2 * KF_DIM, 1, KF_DIM);
3400d774:	f107 0238 	add.w	r2, r7, #56	@ 0x38
  innovation[3] = measure->h  - projected_mean[3];
3400d778:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
  kf_mat_dot_product(mean_temp, (double *) kalman_gain, innovation, 2 * KF_DIM, 1, KF_DIM);
3400d77c:	f507 7166 	add.w	r1, r7, #920	@ 0x398
3400d780:	9300      	str	r3, [sp, #0]
3400d782:	f8cd 8004 	str.w	r8, [sp, #4]
3400d786:	4623      	mov	r3, r4
3400d788:	f107 0058 	add.w	r0, r7, #88	@ 0x58
3400d78c:	f7ff fd0c 	bl	3400d1a8 <kf_mat_dot_product>
  for (i = 0; i < 2 * KF_DIM; i++)
3400d790:	f044 e001 	dls	lr, r4
3400d794:	f107 0358 	add.w	r3, r7, #88	@ 0x58
    state->mean[i] += mean_temp[i];
3400d798:	ed99 7b00 	vldr	d7, [r9]
3400d79c:	ecb3 6b02 	vldmia	r3!, {d6}
3400d7a0:	ee37 7b06 	vadd.f64	d7, d7, d6
3400d7a4:	eca9 7b02 	vstmia	r9!, {d7}
  for (i = 0; i < 2 * KF_DIM; i++)
3400d7a8:	f00f c00b 	le	lr, 3400d798 <kf_update+0x2d8>

  /* update covariance */
  kf_mat_dot_product((double *) kalman_gain, (double *) kalman_gain, (double *) projected_cov,
3400d7ac:	2404      	movs	r4, #4
3400d7ae:	f507 7166 	add.w	r1, r7, #920	@ 0x398
3400d7b2:	4608      	mov	r0, r1
3400d7b4:	2308      	movs	r3, #8
3400d7b6:	f107 0298 	add.w	r2, r7, #152	@ 0x98
3400d7ba:	e9cd 4400 	strd	r4, r4, [sp]
3400d7be:	f7ff fcf3 	bl	3400d1a8 <kf_mat_dot_product>
                     2 * KF_DIM, KF_DIM, KF_DIM);
  kf_mat_dot_product((double *) covariance_temp, (double *) kalman_gain, (double *) kalman_gain_T,
3400d7c2:	2308      	movs	r3, #8
3400d7c4:	f507 7226 	add.w	r2, r7, #664	@ 0x298
3400d7c8:	f507 7166 	add.w	r1, r7, #920	@ 0x398
3400d7cc:	9401      	str	r4, [sp, #4]
3400d7ce:	9300      	str	r3, [sp, #0]
3400d7d0:	f507 60b3 	add.w	r0, r7, #1432	@ 0x598
3400d7d4:	f7ff fce8 	bl	3400d1a8 <kf_mat_dot_product>
3400d7d8:	2100      	movs	r1, #0
3400d7da:	f507 62b3 	add.w	r2, r7, #1432	@ 0x598
    for (c = 0; c < col_nb; c++) {
3400d7de:	f04f 0e08 	mov.w	lr, #8
  for (r = 0; r < row_col_nb; r++) {
3400d7e2:	4610      	mov	r0, r2
3400d7e4:	f04e e001 	dls	lr, lr
3400d7e8:	68bb      	ldr	r3, [r7, #8]
      result[r * col_nb + c] = m1[r * col_nb + c] - m2[r * col_nb + c];
3400d7ea:	ed93 7b00 	vldr	d7, [r3]
3400d7ee:	ecb0 6b02 	vldmia	r0!, {d6}
3400d7f2:	ee37 7b46 	vsub.f64	d7, d7, d6
3400d7f6:	eca3 7b02 	vstmia	r3!, {d7}
    for (c = 0; c < col_nb; c++) {
3400d7fa:	f00f c00b 	le	lr, 3400d7ea <kf_update+0x32a>
  for (r = 0; r < row_nb; r++) {
3400d7fe:	3108      	adds	r1, #8
3400d800:	2940      	cmp	r1, #64	@ 0x40
3400d802:	f102 0240 	add.w	r2, r2, #64	@ 0x40
3400d806:	d042      	beq.n	3400d88e <kf_update+0x3ce>
3400d808:	60bb      	str	r3, [r7, #8]
3400d80a:	e7e8      	b.n	3400d7de <kf_update+0x31e>
3400d80c:	4618      	mov	r0, r3
      sum = 0;
3400d80e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 3400d868 <kf_update+0x3a8>
3400d812:	f109 0101 	add.w	r1, r9, #1
3400d816:	e710      	b.n	3400d63a <kf_update+0x17a>
          sum += lower[r * n + i] * lower[c * n + i];
3400d818:	ecb0 5b02 	vldmia	r0!, {d5}
3400d81c:	ecbc 7b02 	vldmia	ip!, {d7}
3400d820:	eea5 6b07 	vfma.f64	d6, d5, d7
        for (i = 0; i < c; i++)
3400d824:	e6f6      	b.n	3400d614 <kf_update+0x154>
          sum += m[r * n + k] * m_inv[k * n + c];
3400d826:	ecbb 4b02 	vldmia	fp!, {d4}
3400d82a:	ed19 6b08 	vldr	d6, [r9, #-32]	@ 0xffffffe0
3400d82e:	eea4 7b06 	vfma.f64	d7, d4, d6
        for (k = c; k < r; k++)
3400d832:	3a01      	subs	r2, #1
3400d834:	f109 0920 	add.w	r9, r9, #32
3400d838:	d1f5      	bne.n	3400d826 <kf_update+0x366>
        m_inv[r * n + c] = -sum / m[r * n + r];
3400d83a:	693a      	ldr	r2, [r7, #16]
3400d83c:	eeb1 7b47 	vneg.f64	d7, d7
3400d840:	ed92 4b00 	vldr	d4, [r2]
3400d844:	ee87 6b04 	vdiv.f64	d6, d7, d4
3400d848:	e73b      	b.n	3400d6c2 <kf_update+0x202>
3400d84a:	bf00      	nop
3400d84c:	f3af 8000 	nop.w
3400d850:	9999999a 	.word	0x9999999a
3400d854:	3fa99999 	.word	0x3fa99999
3400d858:	34034258 	.word	0x34034258
3400d85c:	34034158 	.word	0x34034158
3400d860:	9999999a 	.word	0x9999999a
3400d864:	3fb99999 	.word	0x3fb99999
	...
        sum = 0;
3400d870:	eba8 0203 	sub.w	r2, r8, r3
3400d874:	4543      	cmp	r3, r8
3400d876:	46f1      	mov	r9, lr
3400d878:	468b      	mov	fp, r1
3400d87a:	ed1f 7b05 	vldr	d7, [pc, #-20]	@ 3400d868 <kf_update+0x3a8>
3400d87e:	f102 0201 	add.w	r2, r2, #1
3400d882:	dc02      	bgt.n	3400d88a <kf_update+0x3ca>
3400d884:	f1b8 4f00 	cmp.w	r8, #2147483648	@ 0x80000000
3400d888:	d1d3      	bne.n	3400d832 <kf_update+0x372>
3400d88a:	2201      	movs	r2, #1
3400d88c:	e7d1      	b.n	3400d832 <kf_update+0x372>
                     2 * KF_DIM, 2 * KF_DIM, KF_DIM);
  kf_mat_sub((double *) state->covariance, (double *) state->covariance, (double *) covariance_temp,
             2 * KF_DIM, 2 * KF_DIM);
}
3400d88e:	f207 779c 	addw	r7, r7, #1948	@ 0x79c
3400d892:	46bd      	mov	sp, r7
3400d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

3400d898 <ulist_del>:
  ulist_add_internal(item, head->prev, head);
}

static inline void ulist_del(struct ulist *item)
{
  item->prev->next = item->next;
3400d898:	e9d0 3200 	ldrd	r3, r2, [r0]
3400d89c:	6013      	str	r3, [r2, #0]
  item->next->prev = item->prev;
3400d89e:	605a      	str	r2, [r3, #4]
  item->next = NULL;
3400d8a0:	2300      	movs	r3, #0
  item->prev = NULL;
3400d8a2:	e9c0 3300 	strd	r3, r3, [r0]
}
3400d8a6:	4770      	bx	lr

3400d8a8 <trk_box_intersection>:
  return right - left;
}

static double trk_box_intersection(trk_box_t *a, trk_box_t *b)
{
  double w = trk_overlap(a->cx, a->w, b->cx, b->w);
3400d8a8:	ed90 6b00 	vldr	d6, [r0]
3400d8ac:	ed91 7b00 	vldr	d7, [r1]
  double l1 = x1 - w1 / 2;
3400d8b0:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
  double w = trk_overlap(a->cx, a->w, b->cx, b->w);
3400d8b4:	ed90 1b04 	vldr	d1, [r0, #16]
3400d8b8:	ed91 2b04 	vldr	d2, [r1, #16]
  double l1 = x1 - w1 / 2;
3400d8bc:	eeb0 3b46 	vmov.f64	d3, d6
  double l2 = x2 - w2 / 2;
3400d8c0:	eeb0 4b47 	vmov.f64	d4, d7
  double l1 = x1 - w1 / 2;
3400d8c4:	eea1 3b45 	vfms.f64	d3, d1, d5
  double l2 = x2 - w2 / 2;
3400d8c8:	eea2 4b45 	vfms.f64	d4, d2, d5
  double r1 = x1 + w1 / 2;
3400d8cc:	eea1 6b05 	vfma.f64	d6, d1, d5
  double left = l1 > l2 ? l1 : l2;
3400d8d0:	eeb4 3b44 	vcmp.f64	d3, d4
  double r2 = x2 + w2 / 2;
3400d8d4:	eea2 7b05 	vfma.f64	d7, d2, d5
  double left = l1 > l2 ? l1 : l2;
3400d8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  double right = r1 < r2 ? r1 : r2;
3400d8dc:	eeb4 6b47 	vcmp.f64	d6, d7
  double left = l1 > l2 ? l1 : l2;
3400d8e0:	fe33 4b04 	vselgt.f64	d4, d3, d4
  double right = r1 < r2 ? r1 : r2;
3400d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d8e8:	bf48      	it	mi
3400d8ea:	eeb0 7b46 	vmovmi.f64	d7, d6
  return right - left;
3400d8ee:	ee37 6b44 	vsub.f64	d6, d7, d4
  double h = trk_overlap(a->cy, a->h, b->cy, b->h);
3400d8f2:	ed90 4b02 	vldr	d4, [r0, #8]
3400d8f6:	ed91 7b02 	vldr	d7, [r1, #8]
3400d8fa:	ed90 0b06 	vldr	d0, [r0, #24]
3400d8fe:	ed91 1b06 	vldr	d1, [r1, #24]
  double l1 = x1 - w1 / 2;
3400d902:	eeb0 2b44 	vmov.f64	d2, d4
  double l2 = x2 - w2 / 2;
3400d906:	eeb0 3b47 	vmov.f64	d3, d7
  double l1 = x1 - w1 / 2;
3400d90a:	eea0 2b45 	vfms.f64	d2, d0, d5
  double l2 = x2 - w2 / 2;
3400d90e:	eea1 3b45 	vfms.f64	d3, d1, d5
  double r1 = x1 + w1 / 2;
3400d912:	eea0 4b05 	vfma.f64	d4, d0, d5
  double left = l1 > l2 ? l1 : l2;
3400d916:	eeb4 2b43 	vcmp.f64	d2, d3
  double r2 = x2 + w2 / 2;
3400d91a:	eea1 7b05 	vfma.f64	d7, d1, d5
  double left = l1 > l2 ? l1 : l2;
3400d91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  double right = r1 < r2 ? r1 : r2;
3400d922:	eeb4 4b47 	vcmp.f64	d4, d7
  double left = l1 > l2 ? l1 : l2;
3400d926:	fe32 3b03 	vselgt.f64	d3, d2, d3
  double right = r1 < r2 ? r1 : r2;
3400d92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

  return w < 0 || h < 0 ? 0 : w * h;
3400d92e:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
  double right = r1 < r2 ? r1 : r2;
3400d932:	bf48      	it	mi
3400d934:	eeb0 7b44 	vmovmi.f64	d7, d4
  return w < 0 || h < 0 ? 0 : w * h;
3400d938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d93c:	d409      	bmi.n	3400d952 <trk_box_intersection+0xaa>
  return right - left;
3400d93e:	ee37 0b43 	vsub.f64	d0, d7, d3
  return w < 0 || h < 0 ? 0 : w * h;
3400d942:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3400d946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d94a:	d402      	bmi.n	3400d952 <trk_box_intersection+0xaa>
3400d94c:	ee20 0b06 	vmul.f64	d0, d0, d6
3400d950:	4770      	bx	lr
3400d952:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 3400d958 <trk_box_intersection+0xb0>
}
3400d956:	4770      	bx	lr
	...

3400d960 <trk_compute_iou>:

  return a->w * a->h + b->w * b->h - I;
}

static double trk_compute_iou(trk_tbox_t *tbox, trk_dbox_t *dbox)
{
3400d960:	b500      	push	{lr}
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400d962:	e9d1 2300 	ldrd	r2, r3, [r1]
{
3400d966:	ed2d 8b08 	vpush	{d8-d11}
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400d96a:	ed91 8b04 	vldr	d8, [r1, #16]
3400d96e:	ed91 bb06 	vldr	d11, [r1, #24]
  trk_box_t boxb = {tbox->cx, tbox->cy, tbox->w, tbox->h};
3400d972:	ed90 ab08 	vldr	d10, [r0, #32]
3400d976:	ed90 9b0a 	vldr	d9, [r0, #40]	@ 0x28
{
3400d97a:	b091      	sub	sp, #68	@ 0x44
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400d97c:	e9cd 2300 	strd	r2, r3, [sp]
3400d980:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  double I, U;

  I = trk_box_intersection(&boxa, &boxb);
3400d984:	a908      	add	r1, sp, #32
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400d986:	e9cd 2302 	strd	r2, r3, [sp, #8]
  trk_box_t boxb = {tbox->cx, tbox->cy, tbox->w, tbox->h};
3400d98a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
3400d98e:	e9cd 2308 	strd	r2, r3, [sp, #32]
3400d992:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
  I = trk_box_intersection(&boxa, &boxb);
3400d996:	4668      	mov	r0, sp
  trk_box_t boxa = {dbox->cx, dbox->cy, dbox->w, dbox->h};
3400d998:	ed8d 8b04 	vstr	d8, [sp, #16]
3400d99c:	ed8d bb06 	vstr	d11, [sp, #24]
  trk_box_t boxb = {tbox->cx, tbox->cy, tbox->w, tbox->h};
3400d9a0:	ed8d ab0c 	vstr	d10, [sp, #48]	@ 0x30
3400d9a4:	ed8d 9b0e 	vstr	d9, [sp, #56]	@ 0x38
3400d9a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  I = trk_box_intersection(&boxa, &boxb);
3400d9ac:	f7ff ff7c 	bl	3400d8a8 <trk_box_intersection>
  U = trk_box_union(&boxa, &boxb);

  return I == 0 || U == 0 ? 0 : I / U;
3400d9b0:	eeb5 0b40 	vcmp.f64	d0, #0.0
3400d9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  I = trk_box_intersection(&boxa, &boxb);
3400d9b8:	eeb0 7b40 	vmov.f64	d7, d0
  return I == 0 || U == 0 ? 0 : I / U;
3400d9bc:	d011      	beq.n	3400d9e2 <trk_compute_iou+0x82>
  return a->w * a->h + b->w * b->h - I;
3400d9be:	ee28 8b0b 	vmul.f64	d8, d8, d11
3400d9c2:	eeaa 8b09 	vfma.f64	d8, d10, d9
3400d9c6:	ee38 8b40 	vsub.f64	d8, d8, d0
  return I == 0 || U == 0 ? 0 : I / U;
3400d9ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
3400d9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400d9d2:	d006      	beq.n	3400d9e2 <trk_compute_iou+0x82>
3400d9d4:	ee87 0b08 	vdiv.f64	d0, d7, d8
}
3400d9d8:	b011      	add	sp, #68	@ 0x44
3400d9da:	ecbd 8b08 	vpop	{d8-d11}
3400d9de:	f85d fb04 	ldr.w	pc, [sp], #4
  return I == 0 || U == 0 ? 0 : I / U;
3400d9e2:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 3400d9e8 <trk_compute_iou+0x88>
3400d9e6:	e7f7      	b.n	3400d9d8 <trk_compute_iou+0x78>
	...

3400d9f0 <trk_kalman_pred>:
  m.h = dbox->h;
  kf_init(&tbox->kf_state, &m);
}

static void trk_kalman_pred(trk_tbox_t *tbox)
{
3400d9f0:	b510      	push	{r4, lr}
  struct kf_box predicted;

  if (tbox->tlost_cnt)
3400d9f2:	6883      	ldr	r3, [r0, #8]
{
3400d9f4:	4604      	mov	r4, r0
3400d9f6:	b088      	sub	sp, #32
  if (tbox->tlost_cnt)
3400d9f8:	b11b      	cbz	r3, 3400da02 <trk_kalman_pred+0x12>
    tbox->kf_state.mean[7] = 0;
3400d9fa:	2200      	movs	r2, #0
3400d9fc:	2300      	movs	r3, #0
3400d9fe:	e9c0 231e 	strd	r2, r3, [r0, #120]	@ 0x78
  kf_predict(&tbox->kf_state, &predicted);
3400da02:	4669      	mov	r1, sp
3400da04:	f104 0040 	add.w	r0, r4, #64	@ 0x40
3400da08:	f7ff fcd6 	bl	3400d3b8 <kf_predict>
  tbox->cx = predicted.cx;
3400da0c:	e9dd 2300 	ldrd	r2, r3, [sp]
  tbox->cy = predicted.cy;
  tbox->w = predicted.a * predicted.h;
3400da10:	ed9d 6b06 	vldr	d6, [sp, #24]
3400da14:	ed9d 7b04 	vldr	d7, [sp, #16]
3400da18:	ee27 7b06 	vmul.f64	d7, d7, d6
  tbox->cx = predicted.cx;
3400da1c:	e9c4 2304 	strd	r2, r3, [r4, #16]
  tbox->cy = predicted.cy;
3400da20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  tbox->w = predicted.a * predicted.h;
3400da24:	ed84 7b08 	vstr	d7, [r4, #32]
  tbox->h = predicted.h;
3400da28:	ed84 6b0a 	vstr	d6, [r4, #40]	@ 0x28
  tbox->cy = predicted.cy;
3400da2c:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
3400da30:	b008      	add	sp, #32
3400da32:	bd10      	pop	{r4, pc}

3400da34 <trk_kalman_update.constprop.0>:
{
  struct kf_box m;

  m.cx = dbox->cx;
  m.cy = dbox->cy;
  m.a = dbox->w / dbox->h;
3400da34:	ed91 7b06 	vldr	d7, [r1, #24]
  m.cx = dbox->cx;
3400da38:	e9d1 2300 	ldrd	r2, r3, [r1]
  m.a = dbox->w / dbox->h;
3400da3c:	ed91 5b04 	vldr	d5, [r1, #16]
static void trk_kalman_update(trk_tbox_t *tbox, trk_dbox_t *dbox)
3400da40:	b510      	push	{r4, lr}
  m.a = dbox->w / dbox->h;
3400da42:	ee85 6b07 	vdiv.f64	d6, d5, d7
static void trk_kalman_update(trk_tbox_t *tbox, trk_dbox_t *dbox)
3400da46:	4604      	mov	r4, r0
3400da48:	b088      	sub	sp, #32
  m.cx = dbox->cx;
3400da4a:	e9cd 2300 	strd	r2, r3, [sp]
  m.cy = dbox->cy;
3400da4e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  m.h = dbox->h;
  kf_update(&tbox->kf_state, &m);
3400da52:	3040      	adds	r0, #64	@ 0x40
3400da54:	4669      	mov	r1, sp
  m.a = dbox->w / dbox->h;
3400da56:	ed8d 6b04 	vstr	d6, [sp, #16]
  m.h = dbox->h;
3400da5a:	ed8d 7b06 	vstr	d7, [sp, #24]
  m.cy = dbox->cy;
3400da5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  kf_update(&tbox->kf_state, &m);
3400da62:	f7ff fd2d 	bl	3400d4c0 <kf_update>
  tbox->cx = tbox->kf_state.mean[0];
3400da66:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
  tbox->cy = tbox->kf_state.mean[1];
  tbox->w = tbox->kf_state.mean[2] * tbox->kf_state.mean[3];
3400da6a:	ed94 6b16 	vldr	d6, [r4, #88]	@ 0x58
3400da6e:	ed94 7b14 	vldr	d7, [r4, #80]	@ 0x50
3400da72:	ee27 7b06 	vmul.f64	d7, d7, d6
  tbox->cx = tbox->kf_state.mean[0];
3400da76:	e9c4 2304 	strd	r2, r3, [r4, #16]
  tbox->cy = tbox->kf_state.mean[1];
3400da7a:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	@ 0x48
  tbox->w = tbox->kf_state.mean[2] * tbox->kf_state.mean[3];
3400da7e:	ed84 7b08 	vstr	d7, [r4, #32]
  tbox->h = tbox->kf_state.mean[3];
3400da82:	ed84 6b0a 	vstr	d6, [r4, #40]	@ 0x28
  tbox->cy = tbox->kf_state.mean[1];
3400da86:	e9c4 2306 	strd	r2, r3, [r4, #24]
}
3400da8a:	b008      	add	sp, #32
3400da8c:	bd10      	pop	{r4, pc}

3400da8e <trk_init>:
    trk_tbox_set_tracking(ctx, dbox);
  }
}

int trk_init(trk_ctx_t *ctx, trk_conf_t *cfg, int trk_tbox_nb, trk_tbox_t *tboxes)
{
3400da8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  int i;

  ctx->cfg = *cfg;
3400da90:	4606      	mov	r6, r0
3400da92:	460d      	mov	r5, r1
{
3400da94:	4604      	mov	r4, r0
3400da96:	4694      	mov	ip, r2
3400da98:	461f      	mov	r7, r3
  ctx->cfg = *cfg;
3400da9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400da9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400da9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3400daa0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
3400daa2:	e895 0003 	ldmia.w	r5, {r0, r1}
  tbox->is_tracking = 0;
3400daa6:	2500      	movs	r5, #0
  ctx->next_id = 1;
3400daa8:	2201      	movs	r2, #1
3400daaa:	45ac      	cmp	ip, r5
  ctx->cfg = *cfg;
3400daac:	e886 0003 	stmia.w	r6, {r0, r1}
  ctx->next_id = 1;
3400dab0:	eb0c 0102 	add.w	r1, ip, r2
3400dab4:	bfb8      	it	lt
3400dab6:	4611      	movlt	r1, r2
  ulist_init_head(&ctx->tfree);
  ulist_init_head(&ctx->ttracking);
3400dab8:	f104 0334 	add.w	r3, r4, #52	@ 0x34
3400dabc:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
  ulist_init_head(&ctx->tlost);
3400dac0:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
3400dac4:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
  ulist_init_head(&ctx->tremain);
3400dac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400dacc:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  ulist_init_head(&ctx->tfree);
3400dad0:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
  ulist_init_head(&ctx->dhigh);
3400dad4:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
  ulist_init_head(&ctx->tfree);
3400dad8:	e9c4 000b 	strd	r0, r0, [r4, #44]	@ 0x2c
  ctx->next_id = 1;
3400dadc:	62a2      	str	r2, [r4, #40]	@ 0x28
  ulist_init_head(&ctx->dhigh);
3400dade:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  ulist_init_head(&ctx->dlow);
3400dae2:	f104 0354 	add.w	r3, r4, #84	@ 0x54
3400dae6:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
  for (i = 0; i < trk_tbox_nb; i++)
3400daea:	3738      	adds	r7, #56	@ 0x38
3400daec:	3901      	subs	r1, #1
3400daee:	d101      	bne.n	3400daf4 <trk_init+0x66>
    trk_tbox_set_free(ctx, &tboxes[i]);

  return 0;
}
3400daf0:	2000      	movs	r0, #0
3400daf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tbox->dbox_userdata = NULL;
3400daf4:	f847 5c04 	str.w	r5, [r7, #-4]
  ulist_add_internal(item, head, head->next);
3400daf8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  tbox->is_tracking = 0;
3400dafa:	f847 5c38 	str.w	r5, [r7, #-56]
  next->prev = item;
3400dafe:	6057      	str	r7, [r2, #4]
  item->prev = prev;
3400db00:	e9c7 2000 	strd	r2, r0, [r7]
  prev->next = item;
3400db04:	62e7      	str	r7, [r4, #44]	@ 0x2c
  for (i = 0; i < trk_tbox_nb; i++)
3400db06:	f507 7720 	add.w	r7, r7, #640	@ 0x280
3400db0a:	e7ef      	b.n	3400daec <trk_init+0x5e>

3400db0c <trk_update>:

int trk_update(trk_ctx_t *ctx, int trk_dbox_nb, trk_dbox_t *dboxes)
{
3400db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400db10:	4607      	mov	r7, r0
{
3400db12:	ed2d 8b04 	vpush	{d8-d9}
3400db16:	4604      	mov	r4, r0
3400db18:	4688      	mov	r8, r1
3400db1a:	4615      	mov	r5, r2
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400db1c:	f857 6f34 	ldr.w	r6, [r7, #52]!
{
3400db20:	b08d      	sub	sp, #52	@ 0x34
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400db22:	3e38      	subs	r6, #56	@ 0x38
3400db24:	f106 0338 	add.w	r3, r6, #56	@ 0x38
3400db28:	429f      	cmp	r7, r3
3400db2a:	d160      	bne.n	3400dbee <trk_update+0xe2>
  ulist_for_each_entry(tbox, &ctx->tlost, list)
3400db2c:	46a2      	mov	sl, r4
3400db2e:	f85a 6f3c 	ldr.w	r6, [sl, #60]!
3400db32:	3e38      	subs	r6, #56	@ 0x38
3400db34:	f106 0338 	add.w	r3, r6, #56	@ 0x38
3400db38:	459a      	cmp	sl, r3
3400db3a:	d15d      	bne.n	3400dbf8 <trk_update+0xec>
  ulist_init_head(&ctx->dlow);
3400db3c:	f104 0354 	add.w	r3, r4, #84	@ 0x54
3400db40:	f1b8 0f00 	cmp.w	r8, #0
3400db44:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
3400db48:	9300      	str	r3, [sp, #0]
3400db4a:	f108 0301 	add.w	r3, r8, #1
3400db4e:	bfb8      	it	lt
3400db50:	2301      	movlt	r3, #1
  ulist_init_head(&ctx->dhigh);
3400db52:	f104 094c 	add.w	r9, r4, #76	@ 0x4c
3400db56:	e9c4 9913 	strd	r9, r9, [r4, #76]	@ 0x4c
  for (i = 0; i < trk_dbox_nb; i++) {
3400db5a:	352c      	adds	r5, #44	@ 0x2c
3400db5c:	3b01      	subs	r3, #1
3400db5e:	d150      	bne.n	3400dc02 <trk_update+0xf6>
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->ttracking, list)
3400db60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400db62:	f104 0844 	add.w	r8, r4, #68	@ 0x44
3400db66:	f851 5938 	ldr.w	r5, [r1], #-56
3400db6a:	3d38      	subs	r5, #56	@ 0x38
3400db6c:	f101 0038 	add.w	r0, r1, #56	@ 0x38
3400db70:	42b8      	cmp	r0, r7
3400db72:	d15c      	bne.n	3400dc2e <trk_update+0x122>
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tlost, list)
3400db74:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3400db76:	f851 5938 	ldr.w	r5, [r1], #-56
3400db7a:	3d38      	subs	r5, #56	@ 0x38
3400db7c:	f101 0038 	add.w	r0, r1, #56	@ 0x38
3400db80:	4550      	cmp	r0, sl
3400db82:	d160      	bne.n	3400dc46 <trk_update+0x13a>
    if (max_score < 1 - ctx->cfg.sim1_thresh)
3400db84:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400db88:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3400db8a:	f851 692c 	ldr.w	r6, [r1], #-44
3400db8e:	3e2c      	subs	r6, #44	@ 0x2c
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400db90:	6c60      	ldr	r0, [r4, #68]	@ 0x44
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400db92:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
3400db96:	9301      	str	r3, [sp, #4]
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400db98:	f850 3938 	ldr.w	r3, [r0], #-56
3400db9c:	f1a3 0b38 	sub.w	fp, r3, #56	@ 0x38
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400dba0:	9b01      	ldr	r3, [sp, #4]
3400dba2:	454b      	cmp	r3, r9
3400dba4:	f040 8097 	bne.w	3400dcd6 <trk_update+0x1ca>
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400dba8:	6d61      	ldr	r1, [r4, #84]	@ 0x54
3400dbaa:	f851 292c 	ldr.w	r2, [r1], #-44
3400dbae:	3a2c      	subs	r2, #44	@ 0x2c
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dbb0:	6c65      	ldr	r5, [r4, #68]	@ 0x44
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400dbb2:	9800      	ldr	r0, [sp, #0]
3400dbb4:	f101 032c 	add.w	r3, r1, #44	@ 0x2c
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dbb8:	f855 6938 	ldr.w	r6, [r5], #-56
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400dbbc:	4283      	cmp	r3, r0
3400dbbe:	9301      	str	r3, [sp, #4]
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dbc0:	f1a6 0638 	sub.w	r6, r6, #56	@ 0x38
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400dbc4:	f040 80c5 	bne.w	3400dd52 <trk_update+0x246>
3400dbc8:	2100      	movs	r1, #0
  ulist_add(&tbox->list, &ctx->tfree);
3400dbca:	f104 032c 	add.w	r3, r4, #44	@ 0x2c
3400dbce:	9300      	str	r3, [sp, #0]
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dbd0:	f105 0038 	add.w	r0, r5, #56	@ 0x38
3400dbd4:	4540      	cmp	r0, r8
3400dbd6:	f040 80c1 	bne.w	3400dd5c <trk_update+0x250>
  assert(ulist_is_empty(&ctx->tremain) == 1);
3400dbda:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3400dbdc:	4598      	cmp	r8, r3
3400dbde:	f000 80db 	beq.w	3400dd98 <trk_update+0x28c>
3400dbe2:	21fb      	movs	r1, #251	@ 0xfb
3400dbe4:	4b9c      	ldr	r3, [pc, #624]	@ (3400de58 <trk_update+0x34c>)
3400dbe6:	4a9d      	ldr	r2, [pc, #628]	@ (3400de5c <trk_update+0x350>)
    assert(0);
3400dbe8:	489d      	ldr	r0, [pc, #628]	@ (3400de60 <trk_update+0x354>)
3400dbea:	f011 faeb 	bl	3401f1c4 <__assert_func>
    trk_kalman_pred(tbox);
3400dbee:	4630      	mov	r0, r6
3400dbf0:	f7ff fefe 	bl	3400d9f0 <trk_kalman_pred>
  ulist_for_each_entry(tbox, &ctx->ttracking, list)
3400dbf4:	6bb6      	ldr	r6, [r6, #56]	@ 0x38
3400dbf6:	e794      	b.n	3400db22 <trk_update+0x16>
    trk_kalman_pred(tbox);
3400dbf8:	4630      	mov	r0, r6
3400dbfa:	f7ff fef9 	bl	3400d9f0 <trk_kalman_pred>
  ulist_for_each_entry(tbox, &ctx->tlost, list)
3400dbfe:	6bb6      	ldr	r6, [r6, #56]	@ 0x38
3400dc00:	e797      	b.n	3400db32 <trk_update+0x26>
    if (dbox->conf > ctx->cfg.track_thresh)
3400dc02:	ed15 6b03 	vldr	d6, [r5, #-12]
3400dc06:	ed94 7b00 	vldr	d7, [r4]
3400dc0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400dc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  ulist_add_internal(item, head->prev, head);
3400dc12:	bfcd      	iteet	gt
3400dc14:	6d21      	ldrgt	r1, [r4, #80]	@ 0x50
3400dc16:	6da1      	ldrle	r1, [r4, #88]	@ 0x58
  item->next = next;
3400dc18:	9a00      	ldrle	r2, [sp, #0]
  next->prev = item;
3400dc1a:	6525      	strgt	r5, [r4, #80]	@ 0x50
3400dc1c:	bfd6      	itet	le
3400dc1e:	65a5      	strle	r5, [r4, #88]	@ 0x58
  item->next = next;
3400dc20:	f8c5 9000 	strgt.w	r9, [r5]
3400dc24:	602a      	strle	r2, [r5, #0]
  item->prev = prev;
3400dc26:	6069      	str	r1, [r5, #4]
  prev->next = item;
3400dc28:	600d      	str	r5, [r1, #0]
  for (i = 0; i < trk_dbox_nb; i++) {
3400dc2a:	3538      	adds	r5, #56	@ 0x38
3400dc2c:	e796      	b.n	3400db5c <trk_update+0x50>
  ulist_add(item, head);
}

static inline void ulist_move_tail(struct ulist *item, struct ulist *head)
{
  ulist_del(item);
3400dc2e:	f7ff fe33 	bl	3400d898 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400dc32:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  next->prev = item;
3400dc34:	64a0      	str	r0, [r4, #72]	@ 0x48
  item->prev = prev;
3400dc36:	e9c1 830e 	strd	r8, r3, [r1, #56]	@ 0x38
  prev->next = item;
3400dc3a:	6018      	str	r0, [r3, #0]
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->ttracking, list)
3400dc3c:	6bab      	ldr	r3, [r5, #56]	@ 0x38
3400dc3e:	4629      	mov	r1, r5
3400dc40:	f1a3 0538 	sub.w	r5, r3, #56	@ 0x38
3400dc44:	e792      	b.n	3400db6c <trk_update+0x60>
  ulist_del(item);
3400dc46:	f7ff fe27 	bl	3400d898 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400dc4a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  next->prev = item;
3400dc4c:	64a0      	str	r0, [r4, #72]	@ 0x48
  item->prev = prev;
3400dc4e:	e9c1 830e 	strd	r8, r3, [r1, #56]	@ 0x38
  prev->next = item;
3400dc52:	6018      	str	r0, [r3, #0]
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tlost, list)
3400dc54:	6bab      	ldr	r3, [r5, #56]	@ 0x38
3400dc56:	4629      	mov	r1, r5
3400dc58:	f1a3 0538 	sub.w	r5, r3, #56	@ 0x38
3400dc5c:	e78e      	b.n	3400db7c <trk_update+0x70>
      score = trk_compute_iou(tbox, dbox) * dbox->conf;
3400dc5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
3400dc62:	f7ff fe7d 	bl	3400d960 <trk_compute_iou>
3400dc66:	9903      	ldr	r1, [sp, #12]
3400dc68:	ed91 7b08 	vldr	d7, [r1, #32]
3400dc6c:	ee20 0b07 	vmul.f64	d0, d0, d7
      if (score <= max_score)
3400dc70:	eeb4 0bc9 	vcmpe.f64	d0, d9
3400dc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dc78:	d903      	bls.n	3400dc82 <trk_update+0x176>
      tboxhigh = tbox;
3400dc7a:	9802      	ldr	r0, [sp, #8]
      max_score = score;
3400dc7c:	eeb0 9b40 	vmov.f64	d9, d0
      tboxhigh = tbox;
3400dc80:	4605      	mov	r5, r0
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dc82:	f8db 3038 	ldr.w	r3, [fp, #56]	@ 0x38
3400dc86:	4658      	mov	r0, fp
3400dc88:	f1a3 0b38 	sub.w	fp, r3, #56	@ 0x38
3400dc8c:	f100 0c38 	add.w	ip, r0, #56	@ 0x38
3400dc90:	45c4      	cmp	ip, r8
3400dc92:	d1e4      	bne.n	3400dc5e <trk_update+0x152>
    if (max_score < 1 - ctx->cfg.sim1_thresh)
3400dc94:	ed94 7b04 	vldr	d7, [r4, #16]
3400dc98:	ee38 7b47 	vsub.f64	d7, d8, d7
3400dc9c:	eeb4 9bc7 	vcmpe.f64	d9, d7
3400dca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dca4:	d412      	bmi.n	3400dccc <trk_update+0x1c0>
  tbox->tlost_cnt = 0;
3400dca6:	2300      	movs	r3, #0
3400dca8:	60ab      	str	r3, [r5, #8]
  tbox->dbox_userdata = dbox->userdata;
3400dcaa:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  trk_kalman_update(tbox, dbox);
3400dcac:	4628      	mov	r0, r5
  tbox->dbox_userdata = dbox->userdata;
3400dcae:	636b      	str	r3, [r5, #52]	@ 0x34
  trk_kalman_update(tbox, dbox);
3400dcb0:	f7ff fec0 	bl	3400da34 <trk_kalman_update.constprop.0>
  ulist_move_tail(&tbox->list, &ctx->ttracking);
3400dcb4:	f105 0038 	add.w	r0, r5, #56	@ 0x38
  ulist_del(item);
3400dcb8:	f7ff fdee 	bl	3400d898 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400dcbc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  next->prev = item;
3400dcbe:	63a0      	str	r0, [r4, #56]	@ 0x38
  item->prev = prev;
3400dcc0:	e9c5 730e 	strd	r7, r3, [r5, #56]	@ 0x38
  prev->next = item;
3400dcc4:	6018      	str	r0, [r3, #0]
    ulist_del(&dbox->list);
3400dcc6:	9801      	ldr	r0, [sp, #4]
3400dcc8:	f7ff fde6 	bl	3400d898 <ulist_del>
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dhigh, list) {
3400dccc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3400dcce:	4631      	mov	r1, r6
3400dcd0:	f1a3 062c 	sub.w	r6, r3, #44	@ 0x2c
3400dcd4:	e75c      	b.n	3400db90 <trk_update+0x84>
    max_score = -1;
3400dcd6:	eebf 9b00 	vmov.f64	d9, #240	@ 0xbf800000 -1.0
    tboxhigh = NULL;
3400dcda:	2500      	movs	r5, #0
3400dcdc:	e7d6      	b.n	3400dc8c <trk_update+0x180>
      score = trk_compute_iou(tbox, dbox);
3400dcde:	4628      	mov	r0, r5
3400dce0:	e9cd 1202 	strd	r1, r2, [sp, #8]
3400dce4:	f7ff fe3c 	bl	3400d960 <trk_compute_iou>
      if (score <= max_score)
3400dce8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
3400dcec:	eeb4 0bc8 	vcmpe.f64	d0, d8
3400dcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dcf4:	d902      	bls.n	3400dcfc <trk_update+0x1f0>
      max_score = score;
3400dcf6:	eeb0 8b40 	vmov.f64	d8, d0
      tboxhigh = tbox;
3400dcfa:	46ab      	mov	fp, r5
    ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dcfc:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
3400dcfe:	4635      	mov	r5, r6
3400dd00:	f1a0 0638 	sub.w	r6, r0, #56	@ 0x38
3400dd04:	f105 0038 	add.w	r0, r5, #56	@ 0x38
3400dd08:	4540      	cmp	r0, r8
3400dd0a:	d1e8      	bne.n	3400dcde <trk_update+0x1d2>
    if (max_score < ctx->cfg.sim2_thresh)
3400dd0c:	ed94 7b06 	vldr	d7, [r4, #24]
3400dd10:	eeb4 8bc7 	vcmpe.f64	d8, d7
3400dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400dd18:	d416      	bmi.n	3400dd48 <trk_update+0x23c>
  tbox->tlost_cnt = 0;
3400dd1a:	2300      	movs	r3, #0
  tbox->dbox_userdata = dbox->userdata;
3400dd1c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  tbox->tlost_cnt = 0;
3400dd1e:	f8cb 3008 	str.w	r3, [fp, #8]
  tbox->dbox_userdata = dbox->userdata;
3400dd22:	f8cb 0034 	str.w	r0, [fp, #52]	@ 0x34
  trk_kalman_update(tbox, dbox);
3400dd26:	4658      	mov	r0, fp
3400dd28:	9202      	str	r2, [sp, #8]
3400dd2a:	f7ff fe83 	bl	3400da34 <trk_kalman_update.constprop.0>
  ulist_move_tail(&tbox->list, &ctx->ttracking);
3400dd2e:	f10b 0038 	add.w	r0, fp, #56	@ 0x38
  ulist_del(item);
3400dd32:	f7ff fdb1 	bl	3400d898 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400dd36:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  next->prev = item;
3400dd38:	63a0      	str	r0, [r4, #56]	@ 0x38
  item->prev = prev;
3400dd3a:	e9cb 710e 	strd	r7, r1, [fp, #56]	@ 0x38
  prev->next = item;
3400dd3e:	6008      	str	r0, [r1, #0]
    ulist_del(&dbox->list);
3400dd40:	9801      	ldr	r0, [sp, #4]
3400dd42:	f7ff fda9 	bl	3400d898 <ulist_del>
3400dd46:	9a02      	ldr	r2, [sp, #8]
  ulist_for_each_entry_safe(dbox, dtmp, &ctx->dlow, list) {
3400dd48:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
3400dd4a:	4611      	mov	r1, r2
3400dd4c:	f1a3 022c 	sub.w	r2, r3, #44	@ 0x2c
3400dd50:	e72e      	b.n	3400dbb0 <trk_update+0xa4>
    max_score = -1;
3400dd52:	eebf 8b00 	vmov.f64	d8, #240	@ 0xbf800000 -1.0
    tboxhigh = NULL;
3400dd56:	f04f 0b00 	mov.w	fp, #0
3400dd5a:	e7d3      	b.n	3400dd04 <trk_update+0x1f8>
    tbox->tlost_cnt++;
3400dd5c:	68ab      	ldr	r3, [r5, #8]
3400dd5e:	f103 0b01 	add.w	fp, r3, #1
3400dd62:	f8c5 b008 	str.w	fp, [r5, #8]
    ulist_del(&tbox->list);
3400dd66:	f7ff fd97 	bl	3400d898 <ulist_del>
    if (tbox->tlost_cnt == ctx->cfg.tlost_cnt)
3400dd6a:	6a22      	ldr	r2, [r4, #32]
3400dd6c:	4593      	cmp	fp, r2
3400dd6e:	d10c      	bne.n	3400dd8a <trk_update+0x27e>
  ulist_add_internal(item, head, head->next);
3400dd70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  tbox->is_tracking = 0;
3400dd72:	6029      	str	r1, [r5, #0]
  tbox->dbox_userdata = NULL;
3400dd74:	6369      	str	r1, [r5, #52]	@ 0x34
  next->prev = item;
3400dd76:	6058      	str	r0, [r3, #4]
  item->next = next;
3400dd78:	63ab      	str	r3, [r5, #56]	@ 0x38
  item->prev = prev;
3400dd7a:	9b00      	ldr	r3, [sp, #0]
3400dd7c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  prev->next = item;
3400dd7e:	62e0      	str	r0, [r4, #44]	@ 0x2c
  ulist_for_each_entry_safe(tbox, ttmp, &ctx->tremain, list) {
3400dd80:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
3400dd82:	4635      	mov	r5, r6
3400dd84:	f1a3 0638 	sub.w	r6, r3, #56	@ 0x38
3400dd88:	e722      	b.n	3400dbd0 <trk_update+0xc4>
  ulist_add_internal(item, head->prev, head);
3400dd8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  tbox->dbox_userdata = NULL;
3400dd8c:	6369      	str	r1, [r5, #52]	@ 0x34
  next->prev = item;
3400dd8e:	6420      	str	r0, [r4, #64]	@ 0x40
  item->prev = prev;
3400dd90:	e9c5 a30e 	strd	sl, r3, [r5, #56]	@ 0x38
  prev->next = item;
3400dd94:	6018      	str	r0, [r3, #0]
}
3400dd96:	e7f3      	b.n	3400dd80 <trk_update+0x274>
  tbox->is_tracking = 1;
3400dd98:	f04f 0801 	mov.w	r8, #1
  ulist_for_each_entry(dbox, &ctx->dhigh, list) {
3400dd9c:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
  if (ulist_is_empty(&ctx->tfree)) {
3400dd9e:	f104 0a2c 	add.w	sl, r4, #44	@ 0x2c
  ulist_for_each_entry(dbox, &ctx->dhigh, list) {
3400dda2:	3d2c      	subs	r5, #44	@ 0x2c
3400dda4:	f105 032c 	add.w	r3, r5, #44	@ 0x2c
3400dda8:	4599      	cmp	r9, r3
3400ddaa:	d105      	bne.n	3400ddb8 <trk_update+0x2ac>
  trk_matching_step2(ctx);
  trk_update_tlost(ctx);
  trk_add_new_tracks(ctx);

  return 0;
}
3400ddac:	2000      	movs	r0, #0
3400ddae:	b00d      	add	sp, #52	@ 0x34
3400ddb0:	ecbd 8b04 	vpop	{d8-d9}
3400ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dbox->conf < ctx->cfg.det_thresh)
3400ddb8:	ed95 6b08 	vldr	d6, [r5, #32]
3400ddbc:	ed94 7b02 	vldr	d7, [r4, #8]
3400ddc0:	eeb4 6bc7 	vcmpe.f64	d6, d7
3400ddc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3400ddc8:	d442      	bmi.n	3400de50 <trk_update+0x344>
  ulist_add_tail(item, head);
}

static inline int ulist_is_empty(const struct ulist *head)
{
  return head->next == head;
3400ddca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
  if (ulist_is_empty(&ctx->tfree)) {
3400ddcc:	4556      	cmp	r6, sl
3400ddce:	d103      	bne.n	3400ddd8 <trk_update+0x2cc>
    assert(0);
3400ddd0:	2181      	movs	r1, #129	@ 0x81
3400ddd2:	4b24      	ldr	r3, [pc, #144]	@ (3400de64 <trk_update+0x358>)
3400ddd4:	4a24      	ldr	r2, [pc, #144]	@ (3400de68 <trk_update+0x35c>)
3400ddd6:	e707      	b.n	3400dbe8 <trk_update+0xdc>
  m.a = dbox->w / dbox->h;
3400ddd8:	ed95 5b04 	vldr	d5, [r5, #16]
  m.cx = dbox->cx;
3400dddc:	e9d5 2300 	ldrd	r2, r3, [r5]
  m.a = dbox->w / dbox->h;
3400dde0:	ed95 7b06 	vldr	d7, [r5, #24]
3400dde4:	ee85 6b07 	vdiv.f64	d6, d5, d7
  kf_init(&tbox->kf_state, &m);
3400dde8:	f106 0008 	add.w	r0, r6, #8
3400ddec:	a904      	add	r1, sp, #16
  m.cx = dbox->cx;
3400ddee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  m.cy = dbox->cy;
3400ddf2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m.a = dbox->w / dbox->h;
3400ddf6:	ed8d 6b08 	vstr	d6, [sp, #32]
  m.cy = dbox->cy;
3400ddfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  m.h = dbox->h;
3400ddfe:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  kf_init(&tbox->kf_state, &m);
3400de02:	f7ff fa75 	bl	3400d2f0 <kf_init>
  tbox->id = ctx->next_id++;
3400de06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
  tbox->is_tracking = 1;
3400de08:	f846 8c38 	str.w	r8, [r6, #-56]
  tbox->id = ctx->next_id++;
3400de0c:	1c5a      	adds	r2, r3, #1
3400de0e:	62a2      	str	r2, [r4, #40]	@ 0x28
3400de10:	f846 3c34 	str.w	r3, [r6, #-52]
  tbox->tlost_cnt = 0;
3400de14:	2300      	movs	r3, #0
3400de16:	f846 3c30 	str.w	r3, [r6, #-48]
  tbox->cx = dbox->cx;
3400de1a:	e9d5 2300 	ldrd	r2, r3, [r5]
3400de1e:	e946 230a 	strd	r2, r3, [r6, #-40]	@ 0x28
  tbox->cy = dbox->cy;
3400de22:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
3400de26:	e946 2308 	strd	r2, r3, [r6, #-32]
  tbox->w = dbox->w;
3400de2a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
3400de2e:	e946 2306 	strd	r2, r3, [r6, #-24]
  tbox->h = dbox->h;
3400de32:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
3400de36:	e946 2304 	strd	r2, r3, [r6, #-16]
  tbox->dbox_userdata = dbox->userdata;
3400de3a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
  ulist_del(item);
3400de3c:	4630      	mov	r0, r6
3400de3e:	f846 3c04 	str.w	r3, [r6, #-4]
3400de42:	f7ff fd29 	bl	3400d898 <ulist_del>
  ulist_add_internal(item, head->prev, head);
3400de46:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  next->prev = item;
3400de48:	63a6      	str	r6, [r4, #56]	@ 0x38
  item->prev = prev;
3400de4a:	e9c6 7300 	strd	r7, r3, [r6]
  prev->next = item;
3400de4e:	601e      	str	r6, [r3, #0]
  ulist_for_each_entry(dbox, &ctx->dhigh, list) {
3400de50:	6aed      	ldr	r5, [r5, #44]	@ 0x2c
3400de52:	3d2c      	subs	r5, #44	@ 0x2c
3400de54:	e7a6      	b.n	3400dda4 <trk_update+0x298>
3400de56:	bf00      	nop
3400de58:	34027ebb 	.word	0x34027ebb
3400de5c:	3403476e 	.word	0x3403476e
3400de60:	34027ede 	.word	0x34027ede
3400de64:	34026d17 	.word	0x34026d17
3400de68:	34034758 	.word	0x34034758

3400de6c <LL_ATON_End_EpochBlock_197>:


/* scheduling epoch=197  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_197(const void *epoch_block)
{
3400de6c:	b530      	push	{r4, r5, lr}
3400de6e:	b0af      	sub	sp, #188	@ 0xbc
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_835 */
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
3400de70:	22b4      	movs	r2, #180	@ 0xb4
3400de72:	2100      	movs	r1, #0
3400de74:	a801      	add	r0, sp, #4
3400de76:	f012 f9ef 	bl	34020258 <memset>
3400de7a:	f44f 7407 	mov.w	r4, #540	@ 0x21c
3400de7e:	f643 7148 	movw	r1, #16200	@ 0x3f48
3400de82:	221e      	movs	r2, #30
3400de84:	e9cd 1406 	strd	r1, r4, [sp, #24]
3400de88:	e9cd 2202 	strd	r2, r2, [sp, #8]
3400de8c:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
3400de90:	910a      	str	r1, [sp, #40]	@ 0x28
3400de92:	9111      	str	r1, [sp, #68]	@ 0x44
3400de94:	2248      	movs	r2, #72	@ 0x48
3400de96:	f44f 6107 	mov.w	r1, #2160	@ 0x870
3400de9a:	232a      	movs	r3, #42	@ 0x2a
3400de9c:	4c16      	ldr	r4, [pc, #88]	@ (3400def8 <LL_ATON_End_EpochBlock_197+0x8c>)
3400de9e:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400dea2:	940b      	str	r4, [sp, #44]	@ 0x2c
3400dea4:	2204      	movs	r2, #4
3400dea6:	f64f 5420 	movw	r4, #64800	@ 0xfd20
3400deaa:	2012      	movs	r0, #18
3400deac:	f88d 3004 	strb.w	r3, [sp, #4]
3400deb0:	2301      	movs	r3, #1
3400deb2:	4d12      	ldr	r5, [pc, #72]	@ (3400defc <LL_ATON_End_EpochBlock_197+0x90>)
3400deb4:	e9cd 2414 	strd	r2, r4, [sp, #80]	@ 0x50
3400deb8:	682a      	ldr	r2, [r5, #0]
3400deba:	e9cd 0304 	strd	r0, r3, [sp, #16]
3400debe:	9216      	str	r2, [sp, #88]	@ 0x58
3400dec0:	4a0f      	ldr	r2, [pc, #60]	@ (3400df00 <LL_ATON_End_EpochBlock_197+0x94>)
3400dec2:	e9cd 0308 	strd	r0, r3, [sp, #32]
3400dec6:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
3400deca:	9221      	str	r2, [sp, #132]	@ 0x84
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_835 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
3400decc:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear2_sw_info = {
3400dece:	3230      	adds	r2, #48	@ 0x30
3400ded0:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400ded4:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400ded8:	931c      	str	r3, [sp, #112]	@ 0x70
3400deda:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400dede:	9327      	str	r3, [sp, #156]	@ 0x9c
3400dee0:	922c      	str	r2, [sp, #176]	@ 0xb0
3400dee2:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  ll_sw_forward_dequantizelinear(&dequantizelinear2_sw_info);
3400dee6:	f7f6 fed7 	bl	34004c98 <ll_sw_forward_dequantizelinear>
  /* *** MCU cache clean (only) operation (SW, whole range) *** */
  /*     memory pool: 12 */
  /*     start: (((uintptr_t)(_mem_pool__user_io_output_2_Default)) + 0) */
  /*     end:   (((uintptr_t)(_mem_pool__user_io_output_2_Default)) + 64800) */
  LL_ATON_Cache_MCU_Clean_Range((((uintptr_t)(_mem_pool__user_io_output_2_Default)) + 0) /* Equivalent hex offset = 0x0 */, 64800);
3400deea:	6828      	ldr	r0, [r5, #0]
  void LL_ATON_Cache_MCU_Clean_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Clean_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400deec:	1901      	adds	r1, r0, r4
3400deee:	f7f4 f8c3 	bl	34002078 <mcu_cache_clean_range>

}
3400def2:	b02f      	add	sp, #188	@ 0xbc
3400def4:	bd30      	pop	{r4, r5, pc}
3400def6:	bf00      	nop
3400def8:	34200000 	.word	0x34200000
3400defc:	341455b0 	.word	0x341455b0
3400df00:	704c76d0 	.word	0x704c76d0

3400df04 <_ec_blob_cache_start_func_198>:
  void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size);
#else
  static inline void LL_ATON_Cache_MCU_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    LL_ATON_OSAL_LOCK_MCU_CACHE();
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400df04:	4901      	ldr	r1, [pc, #4]	@ (3400df0c <_ec_blob_cache_start_func_198+0x8>)
3400df06:	4802      	ldr	r0, [pc, #8]	@ (3400df10 <_ec_blob_cache_start_func_198+0xc>)
3400df08:	f7f4 b88c 	b.w	34002024 <mcu_cache_invalidate_range>
3400df0c:	3420f0e0 	.word	0x3420f0e0
3400df10:	3420e100 	.word	0x3420e100

3400df14 <_ec_blob_cache_start_func_168>:
3400df14:	4901      	ldr	r1, [pc, #4]	@ (3400df1c <_ec_blob_cache_start_func_168+0x8>)
3400df16:	4802      	ldr	r0, [pc, #8]	@ (3400df20 <_ec_blob_cache_start_func_168+0xc>)
3400df18:	f7f4 b884 	b.w	34002024 <mcu_cache_invalidate_range>
3400df1c:	34274760 	.word	0x34274760
3400df20:	34270800 	.word	0x34270800

3400df24 <_ec_blob_cache_start_func_138>:
3400df24:	4901      	ldr	r1, [pc, #4]	@ (3400df2c <_ec_blob_cache_start_func_138+0x8>)
3400df26:	4802      	ldr	r0, [pc, #8]	@ (3400df30 <_ec_blob_cache_start_func_138+0xc>)
3400df28:	f7f4 b87c 	b.w	34002024 <mcu_cache_invalidate_range>
3400df2c:	342f0d20 	.word	0x342f0d20
3400df30:	342e1000 	.word	0x342e1000

3400df34 <_ec_blob_cache_start_func_119>:
3400df34:	4901      	ldr	r1, [pc, #4]	@ (3400df3c <_ec_blob_cache_start_func_119+0x8>)
3400df36:	4802      	ldr	r0, [pc, #8]	@ (3400df40 <_ec_blob_cache_start_func_119+0xc>)
3400df38:	f7f4 b874 	b.w	34002024 <mcu_cache_invalidate_range>
3400df3c:	342a8c00 	.word	0x342a8c00
3400df40:	34270800 	.word	0x34270800

3400df44 <_ec_blob_cache_start_func_1>:
3400df44:	4901      	ldr	r1, [pc, #4]	@ (3400df4c <_ec_blob_cache_start_func_1+0x8>)
3400df46:	4802      	ldr	r0, [pc, #8]	@ (3400df50 <_ec_blob_cache_start_func_1+0xc>)
3400df48:	f7f4 b86c 	b.w	34002024 <mcu_cache_invalidate_range>
3400df4c:	342c4e00 	.word	0x342c4e00
3400df50:	342a8c00 	.word	0x342a8c00

3400df54 <LL_ATON_End_EpochBlock_227>:


/* scheduling epoch=227  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_227(const void *epoch_block)
{
3400df54:	b537      	push	{r0, r1, r2, r4, r5, lr}
3400df56:	4d0d      	ldr	r5, [pc, #52]	@ (3400df8c <LL_ATON_End_EpochBlock_227+0x38>)
3400df58:	4c0d      	ldr	r4, [pc, #52]	@ (3400df90 <LL_ATON_End_EpochBlock_227+0x3c>)
3400df5a:	4629      	mov	r1, r5
3400df5c:	4620      	mov	r0, r4
3400df5e:	f7f4 f861 	bl	34002024 <mcu_cache_invalidate_range>
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) /* Equivalent hex address = 0x34200000UL */, 4064);

  LL_ATON_LIB_UNUSED(epoch_block);

  /* Reset the stream switch */
  LL_Switch_Init(NULL, 0);
3400df62:	2100      	movs	r1, #0
3400df64:	4608      	mov	r0, r1
3400df66:	f7f4 fde7 	bl	34002b38 <LL_Switch_Init>
    {
      .name = NULL,
    }
  };

  LL_ATON_LIB_Concat(Concat_780_tensor_info_in_227, 3, Concat_780_tensor_info_out_227, 1, 4, 8);
3400df6a:	2304      	movs	r3, #4
3400df6c:	2208      	movs	r2, #8
3400df6e:	2103      	movs	r1, #3
3400df70:	e9cd 3200 	strd	r3, r2, [sp]
3400df74:	4807      	ldr	r0, [pc, #28]	@ (3400df94 <LL_ATON_End_EpochBlock_227+0x40>)
3400df76:	2301      	movs	r3, #1
3400df78:	4a07      	ldr	r2, [pc, #28]	@ (3400df98 <LL_ATON_End_EpochBlock_227+0x44>)
3400df7a:	f7f5 fd27 	bl	340039cc <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400df7e:	4629      	mov	r1, r5
3400df80:	4620      	mov	r0, r4
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 4064))) */
  LL_ATON_Cache_MCU_Clean_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 0))) /* Equivalent hex address = 0x34200000UL */, 4064);

}
3400df82:	b003      	add	sp, #12
3400df84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400df88:	f7f4 b876 	b.w	34002078 <mcu_cache_clean_range>
3400df8c:	34200fe0 	.word	0x34200fe0
3400df90:	34200000 	.word	0x34200000
3400df94:	34039fd4 	.word	0x34039fd4
3400df98:	34039f64 	.word	0x34039f64

3400df9c <LL_ATON_End_EpochBlock_196>:
{
3400df9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400df9e:	4d0d      	ldr	r5, [pc, #52]	@ (3400dfd4 <LL_ATON_End_EpochBlock_196+0x38>)
3400dfa0:	4c0d      	ldr	r4, [pc, #52]	@ (3400dfd8 <LL_ATON_End_EpochBlock_196+0x3c>)
3400dfa2:	4629      	mov	r1, r5
3400dfa4:	4620      	mov	r0, r4
3400dfa6:	f7f4 f83d 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400dfaa:	2100      	movs	r1, #0
3400dfac:	4608      	mov	r0, r1
3400dfae:	f7f4 fdc3 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_Concat(Concat_833_tensor_info_in_196, 3, Concat_833_tensor_info_out_196, 1, 6, 0);
3400dfb2:	2306      	movs	r3, #6
3400dfb4:	2200      	movs	r2, #0
3400dfb6:	2103      	movs	r1, #3
3400dfb8:	e9cd 3200 	strd	r3, r2, [sp]
3400dfbc:	4807      	ldr	r0, [pc, #28]	@ (3400dfdc <LL_ATON_End_EpochBlock_196+0x40>)
3400dfbe:	2301      	movs	r3, #1
3400dfc0:	4a07      	ldr	r2, [pc, #28]	@ (3400dfe0 <LL_ATON_End_EpochBlock_196+0x44>)
3400dfc2:	f7f5 fd03 	bl	340039cc <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400dfc6:	4629      	mov	r1, r5
3400dfc8:	4620      	mov	r0, r4
}
3400dfca:	b003      	add	sp, #12
3400dfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400dfd0:	f7f4 b852 	b.w	34002078 <mcu_cache_clean_range>
3400dfd4:	34203f60 	.word	0x34203f60
3400dfd8:	34200000 	.word	0x34200000
3400dfdc:	34039e04 	.word	0x34039e04
3400dfe0:	34039d94 	.word	0x34039d94

3400dfe4 <LL_ATON_End_EpochBlock_166>:
{
3400dfe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400dfe6:	4d0d      	ldr	r5, [pc, #52]	@ (3400e01c <LL_ATON_End_EpochBlock_166+0x38>)
3400dfe8:	4c0d      	ldr	r4, [pc, #52]	@ (3400e020 <LL_ATON_End_EpochBlock_166+0x3c>)
3400dfea:	4629      	mov	r1, r5
3400dfec:	4620      	mov	r0, r4
3400dfee:	f7f4 f819 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400dff2:	2100      	movs	r1, #0
3400dff4:	4608      	mov	r0, r1
3400dff6:	f7f4 fd9f 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_Concat(Concat_886_tensor_info_in_166, 3, Concat_886_tensor_info_out_166, 1, 4, 6);
3400dffa:	2304      	movs	r3, #4
3400dffc:	2206      	movs	r2, #6
3400dffe:	2103      	movs	r1, #3
3400e000:	e9cd 3200 	strd	r3, r2, [sp]
3400e004:	4807      	ldr	r0, [pc, #28]	@ (3400e024 <LL_ATON_End_EpochBlock_166+0x40>)
3400e006:	2301      	movs	r3, #1
3400e008:	4a07      	ldr	r2, [pc, #28]	@ (3400e028 <LL_ATON_End_EpochBlock_166+0x44>)
3400e00a:	f7f5 fcdf 	bl	340039cc <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e00e:	4629      	mov	r1, r5
3400e010:	4620      	mov	r0, r4
}
3400e012:	b003      	add	sp, #12
3400e014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e018:	f7f4 b82e 	b.w	34002078 <mcu_cache_clean_range>
3400e01c:	34300a40 	.word	0x34300a40
3400e020:	342f0d20 	.word	0x342f0d20
3400e024:	34039c34 	.word	0x34039c34
3400e028:	34039bc4 	.word	0x34039bc4

3400e02c <LL_ATON_End_EpochBlock_137>:
{
3400e02c:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e02e:	4d0e      	ldr	r5, [pc, #56]	@ (3400e068 <LL_ATON_End_EpochBlock_137+0x3c>)
3400e030:	4c0e      	ldr	r4, [pc, #56]	@ (3400e06c <LL_ATON_End_EpochBlock_137+0x40>)
3400e032:	b085      	sub	sp, #20
3400e034:	4629      	mov	r1, r5
3400e036:	4620      	mov	r0, r4
3400e038:	f7f3 fff4 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e03c:	2100      	movs	r1, #0
3400e03e:	4608      	mov	r0, r1
3400e040:	f7f4 fd7a 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_DepthToSpace(Resize_553_resize_NN_to_expansion_dts_1803_tensor_info_in_137, 1, Resize_553_resize_NN_to_expansion_dts_1803_tensor_info_out_137, 2, 2, 2, 5);
3400e044:	2302      	movs	r3, #2
3400e046:	2205      	movs	r2, #5
3400e048:	2101      	movs	r1, #1
3400e04a:	e9cd 3201 	strd	r3, r2, [sp, #4]
3400e04e:	9300      	str	r3, [sp, #0]
3400e050:	4a07      	ldr	r2, [pc, #28]	@ (3400e070 <LL_ATON_End_EpochBlock_137+0x44>)
3400e052:	4808      	ldr	r0, [pc, #32]	@ (3400e074 <LL_ATON_End_EpochBlock_137+0x48>)
3400e054:	f7f5 fbae 	bl	340037b4 <LL_ATON_LIB_DMA_DepthToSpace>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e058:	4629      	mov	r1, r5
3400e05a:	4620      	mov	r0, r4
}
3400e05c:	b005      	add	sp, #20
3400e05e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e062:	f7f4 b809 	b.w	34002078 <mcu_cache_clean_range>
3400e066:	bf00      	nop
3400e068:	34238400 	.word	0x34238400
3400e06c:	34200000 	.word	0x34200000
3400e070:	34039a64 	.word	0x34039a64
3400e074:	34039ad4 	.word	0x34039ad4

3400e078 <LL_ATON_End_EpochBlock_118>:
{
3400e078:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e07a:	4d0e      	ldr	r5, [pc, #56]	@ (3400e0b4 <LL_ATON_End_EpochBlock_118+0x3c>)
3400e07c:	4c0e      	ldr	r4, [pc, #56]	@ (3400e0b8 <LL_ATON_End_EpochBlock_118+0x40>)
3400e07e:	b085      	sub	sp, #20
3400e080:	4629      	mov	r1, r5
3400e082:	4620      	mov	r0, r4
3400e084:	f7f3 ffce 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e088:	2100      	movs	r1, #0
3400e08a:	4608      	mov	r0, r1
3400e08c:	f7f4 fd54 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_DepthToSpace(Resize_495_resize_NN_to_expansion_dts_1799_tensor_info_in_118, 1, Resize_495_resize_NN_to_expansion_dts_1799_tensor_info_out_118, 2, 2, 2, 3);
3400e090:	2302      	movs	r3, #2
3400e092:	2203      	movs	r2, #3
3400e094:	2101      	movs	r1, #1
3400e096:	e9cd 3201 	strd	r3, r2, [sp, #4]
3400e09a:	9300      	str	r3, [sp, #0]
3400e09c:	4a07      	ldr	r2, [pc, #28]	@ (3400e0bc <LL_ATON_End_EpochBlock_118+0x44>)
3400e09e:	4808      	ldr	r0, [pc, #32]	@ (3400e0c0 <LL_ATON_End_EpochBlock_118+0x48>)
3400e0a0:	f7f5 fb88 	bl	340037b4 <LL_ATON_LIB_DMA_DepthToSpace>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e0a4:	4629      	mov	r1, r5
3400e0a6:	4620      	mov	r0, r4
}
3400e0a8:	b005      	add	sp, #20
3400e0aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e0ae:	f7f3 bfe3 	b.w	34002078 <mcu_cache_clean_range>
3400e0b2:	bf00      	nop
3400e0b4:	3428ca00 	.word	0x3428ca00
3400e0b8:	34270800 	.word	0x34270800
3400e0bc:	34039934 	.word	0x34039934
3400e0c0:	340399a4 	.word	0x340399a4

3400e0c4 <LL_ATON_End_EpochBlock_228>:


/* scheduling epoch=228  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_228(const void *epoch_block)
{
3400e0c4:	b570      	push	{r4, r5, r6, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e0c6:	f643 7560 	movw	r5, #16224	@ 0x3f60
  /* *** MCU cache invalidate (only) operation for unaligned buffer end address (last line) *** */
  /*     memory pool: 10 */
  /*     start: (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16192) */
  /*     end:   (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16224) */
  LL_ATON_Cache_MCU_Invalidate_Range((((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16192) /* Equivalent hex offset = 0x3f40 */, 32);
3400e0ca:	4c25      	ldr	r4, [pc, #148]	@ (3400e160 <LL_ATON_End_EpochBlock_228+0x9c>)
{
3400e0cc:	b0ae      	sub	sp, #184	@ 0xb8
  LL_ATON_Cache_MCU_Invalidate_Range((((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16192) /* Equivalent hex offset = 0x3f40 */, 32);
3400e0ce:	6820      	ldr	r0, [r4, #0]
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_782 */
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400e0d0:	f44f 7687 	mov.w	r6, #270	@ 0x10e
3400e0d4:	1941      	adds	r1, r0, r5
3400e0d6:	f500 507d 	add.w	r0, r0, #16192	@ 0x3f40
3400e0da:	f7f3 ffa3 	bl	34002024 <mcu_cache_invalidate_range>
3400e0de:	22b4      	movs	r2, #180	@ 0xb4
3400e0e0:	2100      	movs	r1, #0
3400e0e2:	a801      	add	r0, sp, #4
3400e0e4:	f012 f8b8 	bl	34020258 <memset>
3400e0e8:	f640 71d2 	movw	r1, #4050	@ 0xfd2
3400e0ec:	220f      	movs	r2, #15
3400e0ee:	232a      	movs	r3, #42	@ 0x2a
3400e0f0:	2012      	movs	r0, #18
3400e0f2:	e9cd 1606 	strd	r1, r6, [sp, #24]
3400e0f6:	e9cd 2202 	strd	r2, r2, [sp, #8]
3400e0fa:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
3400e0fe:	f88d 3004 	strb.w	r3, [sp, #4]
3400e102:	910a      	str	r1, [sp, #40]	@ 0x28
3400e104:	2301      	movs	r3, #1
3400e106:	9111      	str	r1, [sp, #68]	@ 0x44
3400e108:	2248      	movs	r2, #72	@ 0x48
3400e10a:	f44f 6187 	mov.w	r1, #1080	@ 0x438
3400e10e:	e9cd 0304 	strd	r0, r3, [sp, #16]
3400e112:	e9cd 0308 	strd	r0, r3, [sp, #32]
3400e116:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
3400e11a:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400e11e:	2004      	movs	r0, #4
3400e120:	f643 7248 	movw	r2, #16200	@ 0x3f48
3400e124:	e9cd 0214 	strd	r0, r2, [sp, #80]	@ 0x50
3400e128:	6822      	ldr	r2, [r4, #0]
3400e12a:	4e0e      	ldr	r6, [pc, #56]	@ (3400e164 <LL_ATON_End_EpochBlock_228+0xa0>)
3400e12c:	9216      	str	r2, [sp, #88]	@ 0x58
3400e12e:	4a0e      	ldr	r2, [pc, #56]	@ (3400e168 <LL_ATON_End_EpochBlock_228+0xa4>)
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_782 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400e130:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400e132:	9221      	str	r2, [sp, #132]	@ 0x84
3400e134:	3230      	adds	r2, #48	@ 0x30
3400e136:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400e13a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400e13e:	931c      	str	r3, [sp, #112]	@ 0x70
3400e140:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400e144:	9327      	str	r3, [sp, #156]	@ 0x9c
3400e146:	922c      	str	r2, [sp, #176]	@ 0xb0
3400e148:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400e14c:	960b      	str	r6, [sp, #44]	@ 0x2c
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400e14e:	f7f6 fda3 	bl	34004c98 <ll_sw_forward_dequantizelinear>
  /* *** MCU cache clean (only) operation (SW, whole range) *** */
  /*     memory pool: 10 */
  /*     start: (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 0) */
  /*     end:   (((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 16224) */
  LL_ATON_Cache_MCU_Clean_Range((((uintptr_t)(_mem_pool__user_io_output_0_Default)) + 0) /* Equivalent hex offset = 0x0 */, 16224);
3400e152:	6820      	ldr	r0, [r4, #0]
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e154:	1941      	adds	r1, r0, r5
3400e156:	f7f3 ff8f 	bl	34002078 <mcu_cache_clean_range>

}
3400e15a:	b02e      	add	sp, #184	@ 0xb8
3400e15c:	bd70      	pop	{r4, r5, r6, pc}
3400e15e:	bf00      	nop
3400e160:	341455b8 	.word	0x341455b8
3400e164:	34200000 	.word	0x34200000
3400e168:	704c76e0 	.word	0x704c76e0

3400e16c <LL_ATON_End_EpochBlock_167>:
{
3400e16c:	b510      	push	{r4, lr}
3400e16e:	b0ae      	sub	sp, #184	@ 0xb8
  Dequantizelinear_sw_info dequantizelinear1_sw_info = {
3400e170:	22b4      	movs	r2, #180	@ 0xb4
3400e172:	2100      	movs	r1, #0
3400e174:	a801      	add	r0, sp, #4
3400e176:	f012 f86f 	bl	34020258 <memset>
3400e17a:	232a      	movs	r3, #42	@ 0x2a
3400e17c:	f64f 5120 	movw	r1, #64800	@ 0xfd20
3400e180:	223c      	movs	r2, #60	@ 0x3c
3400e182:	f44f 6487 	mov.w	r4, #1080	@ 0x438
3400e186:	2012      	movs	r0, #18
3400e188:	f88d 3004 	strb.w	r3, [sp, #4]
3400e18c:	2301      	movs	r3, #1
3400e18e:	e9cd 1406 	strd	r1, r4, [sp, #24]
3400e192:	e9cd 2202 	strd	r2, r2, [sp, #8]
3400e196:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
3400e19a:	910a      	str	r1, [sp, #40]	@ 0x28
3400e19c:	9111      	str	r1, [sp, #68]	@ 0x44
3400e19e:	2248      	movs	r2, #72	@ 0x48
3400e1a0:	f44f 5187 	mov.w	r1, #4320	@ 0x10e0
3400e1a4:	e9cd 0304 	strd	r0, r3, [sp, #16]
3400e1a8:	e9cd 0308 	strd	r0, r3, [sp, #32]
3400e1ac:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
3400e1b0:	2004      	movs	r0, #4
3400e1b2:	4c11      	ldr	r4, [pc, #68]	@ (3400e1f8 <LL_ATON_End_EpochBlock_167+0x8c>)
3400e1b4:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400e1b8:	940b      	str	r4, [sp, #44]	@ 0x2c
3400e1ba:	4a10      	ldr	r2, [pc, #64]	@ (3400e1fc <LL_ATON_End_EpochBlock_167+0x90>)
3400e1bc:	4c10      	ldr	r4, [pc, #64]	@ (3400e200 <LL_ATON_End_EpochBlock_167+0x94>)
3400e1be:	e9cd 0214 	strd	r0, r2, [sp, #80]	@ 0x50
3400e1c2:	6822      	ldr	r2, [r4, #0]
  ll_sw_forward_dequantizelinear(&dequantizelinear1_sw_info);
3400e1c4:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear1_sw_info = {
3400e1c6:	9216      	str	r2, [sp, #88]	@ 0x58
3400e1c8:	4a0e      	ldr	r2, [pc, #56]	@ (3400e204 <LL_ATON_End_EpochBlock_167+0x98>)
3400e1ca:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400e1ce:	9221      	str	r2, [sp, #132]	@ 0x84
3400e1d0:	3230      	adds	r2, #48	@ 0x30
3400e1d2:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400e1d6:	931c      	str	r3, [sp, #112]	@ 0x70
3400e1d8:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400e1dc:	9327      	str	r3, [sp, #156]	@ 0x9c
3400e1de:	922c      	str	r2, [sp, #176]	@ 0xb0
3400e1e0:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  ll_sw_forward_dequantizelinear(&dequantizelinear1_sw_info);
3400e1e4:	f7f6 fd58 	bl	34004c98 <ll_sw_forward_dequantizelinear>
  LL_ATON_Cache_MCU_Clean_Range((((uintptr_t)(_mem_pool__user_io_output_1_Default)) + 0) /* Equivalent hex offset = 0x0 */, 259200);
3400e1e8:	6820      	ldr	r0, [r4, #0]
3400e1ea:	f500 317d 	add.w	r1, r0, #259072	@ 0x3f400
3400e1ee:	3180      	adds	r1, #128	@ 0x80
3400e1f0:	f7f3 ff42 	bl	34002078 <mcu_cache_clean_range>
}
3400e1f4:	b02e      	add	sp, #184	@ 0xb8
3400e1f6:	bd10      	pop	{r4, pc}
3400e1f8:	342f0d20 	.word	0x342f0d20
3400e1fc:	0003f480 	.word	0x0003f480
3400e200:	341455b4 	.word	0x341455b4
3400e204:	704c76c0 	.word	0x704c76c0

3400e208 <LL_ATON_Set_User_Input_Buffer_Default>:
  if (num == 0) {
3400e208:	b940      	cbnz	r0, 3400e21c <LL_ATON_Set_User_Input_Buffer_Default+0x14>
    if (((uintptr_t)buffer % 32) != 0)
3400e20a:	f011 001f 	ands.w	r0, r1, #31
3400e20e:	d107      	bne.n	3400e220 <LL_ATON_Set_User_Input_Buffer_Default+0x18>
    if (size < 691200)
3400e210:	4b05      	ldr	r3, [pc, #20]	@ (3400e228 <LL_ATON_Set_User_Input_Buffer_Default+0x20>)
3400e212:	429a      	cmp	r2, r3
3400e214:	d906      	bls.n	3400e224 <LL_ATON_Set_User_Input_Buffer_Default+0x1c>
    _mem_pool__user_io_input_0_Default = buffer;
3400e216:	4b05      	ldr	r3, [pc, #20]	@ (3400e22c <LL_ATON_Set_User_Input_Buffer_Default+0x24>)
3400e218:	6019      	str	r1, [r3, #0]
    return LL_ATON_User_IO_NOERROR;
3400e21a:	4770      	bx	lr
    return LL_ATON_User_IO_WRONG_INDEX;
3400e21c:	2003      	movs	r0, #3
3400e21e:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_ALIGN; /* enforce MCU cacheline alignment */
3400e220:	2001      	movs	r0, #1
3400e222:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_SIZE; /* enforce size needed */
3400e224:	2002      	movs	r0, #2
}
3400e226:	4770      	bx	lr
3400e228:	000a8bff 	.word	0x000a8bff
3400e22c:	341455bc 	.word	0x341455bc

3400e230 <LL_ATON_Get_User_Input_Buffer_Default>:
  if (num == 0) {
3400e230:	b910      	cbnz	r0, 3400e238 <LL_ATON_Get_User_Input_Buffer_Default+0x8>
    return _mem_pool__user_io_input_0_Default;
3400e232:	4b02      	ldr	r3, [pc, #8]	@ (3400e23c <LL_ATON_Get_User_Input_Buffer_Default+0xc>)
3400e234:	6818      	ldr	r0, [r3, #0]
3400e236:	4770      	bx	lr
    return NULL;
3400e238:	2000      	movs	r0, #0
}
3400e23a:	4770      	bx	lr
3400e23c:	341455bc 	.word	0x341455bc

3400e240 <LL_ATON_Set_User_Output_Buffer_Default>:
  if (num == 0) {
3400e240:	b948      	cbnz	r0, 3400e256 <LL_ATON_Set_User_Output_Buffer_Default+0x16>
    if (((uintptr_t)buffer % 32) != 0)
3400e242:	06c8      	lsls	r0, r1, #27
3400e244:	d11e      	bne.n	3400e284 <LL_ATON_Set_User_Output_Buffer_Default+0x44>
    if (size < 16200)
3400e246:	f643 7347 	movw	r3, #16199	@ 0x3f47
3400e24a:	429a      	cmp	r2, r3
3400e24c:	d916      	bls.n	3400e27c <LL_ATON_Set_User_Output_Buffer_Default+0x3c>
    _mem_pool__user_io_output_0_Default = buffer;
3400e24e:	4b0e      	ldr	r3, [pc, #56]	@ (3400e288 <LL_ATON_Set_User_Output_Buffer_Default+0x48>)
    return LL_ATON_User_IO_NOERROR;
3400e250:	2000      	movs	r0, #0
    _mem_pool__user_io_output_2_Default = buffer;
3400e252:	6019      	str	r1, [r3, #0]
    return LL_ATON_User_IO_NOERROR;
3400e254:	4770      	bx	lr
  if (num == 1) {
3400e256:	2801      	cmp	r0, #1
3400e258:	d106      	bne.n	3400e268 <LL_ATON_Set_User_Output_Buffer_Default+0x28>
    if (((uintptr_t)buffer % 32) != 0)
3400e25a:	06cb      	lsls	r3, r1, #27
3400e25c:	d113      	bne.n	3400e286 <LL_ATON_Set_User_Output_Buffer_Default+0x46>
    if (size < 259200)
3400e25e:	4b0b      	ldr	r3, [pc, #44]	@ (3400e28c <LL_ATON_Set_User_Output_Buffer_Default+0x4c>)
3400e260:	429a      	cmp	r2, r3
3400e262:	d90b      	bls.n	3400e27c <LL_ATON_Set_User_Output_Buffer_Default+0x3c>
    _mem_pool__user_io_output_1_Default = buffer;
3400e264:	4b0a      	ldr	r3, [pc, #40]	@ (3400e290 <LL_ATON_Set_User_Output_Buffer_Default+0x50>)
3400e266:	e7f3      	b.n	3400e250 <LL_ATON_Set_User_Output_Buffer_Default+0x10>
  if (num == 2) {
3400e268:	2802      	cmp	r0, #2
3400e26a:	d109      	bne.n	3400e280 <LL_ATON_Set_User_Output_Buffer_Default+0x40>
    if (((uintptr_t)buffer % 32) != 0)
3400e26c:	06cb      	lsls	r3, r1, #27
3400e26e:	d109      	bne.n	3400e284 <LL_ATON_Set_User_Output_Buffer_Default+0x44>
    if (size < 64800)
3400e270:	f64f 531f 	movw	r3, #64799	@ 0xfd1f
3400e274:	429a      	cmp	r2, r3
3400e276:	d906      	bls.n	3400e286 <LL_ATON_Set_User_Output_Buffer_Default+0x46>
    _mem_pool__user_io_output_2_Default = buffer;
3400e278:	4b06      	ldr	r3, [pc, #24]	@ (3400e294 <LL_ATON_Set_User_Output_Buffer_Default+0x54>)
3400e27a:	e7e9      	b.n	3400e250 <LL_ATON_Set_User_Output_Buffer_Default+0x10>
      return LL_ATON_User_IO_WRONG_SIZE; /* enforce size needed */
3400e27c:	2002      	movs	r0, #2
3400e27e:	4770      	bx	lr
    return LL_ATON_User_IO_WRONG_INDEX;
3400e280:	2003      	movs	r0, #3
3400e282:	4770      	bx	lr
      return LL_ATON_User_IO_WRONG_ALIGN; /* enforce MCU cacheline alignment */
3400e284:	2001      	movs	r0, #1
}
3400e286:	4770      	bx	lr
3400e288:	341455b8 	.word	0x341455b8
3400e28c:	0003f47f 	.word	0x0003f47f
3400e290:	341455b4 	.word	0x341455b4
3400e294:	341455b0 	.word	0x341455b0

3400e298 <LL_ATON_Get_User_Output_Buffer_Default>:
  if (num == 0) {
3400e298:	b910      	cbnz	r0, 3400e2a0 <LL_ATON_Get_User_Output_Buffer_Default+0x8>
    return _mem_pool__user_io_output_0_Default;
3400e29a:	4b06      	ldr	r3, [pc, #24]	@ (3400e2b4 <LL_ATON_Get_User_Output_Buffer_Default+0x1c>)
    return _mem_pool__user_io_output_1_Default;
3400e29c:	6818      	ldr	r0, [r3, #0]
3400e29e:	4770      	bx	lr
  if (num == 1) {
3400e2a0:	2801      	cmp	r0, #1
3400e2a2:	d101      	bne.n	3400e2a8 <LL_ATON_Get_User_Output_Buffer_Default+0x10>
    return _mem_pool__user_io_output_1_Default;
3400e2a4:	4b04      	ldr	r3, [pc, #16]	@ (3400e2b8 <LL_ATON_Get_User_Output_Buffer_Default+0x20>)
3400e2a6:	e7f9      	b.n	3400e29c <LL_ATON_Get_User_Output_Buffer_Default+0x4>
  if (num == 2) {
3400e2a8:	2802      	cmp	r0, #2
3400e2aa:	d101      	bne.n	3400e2b0 <LL_ATON_Get_User_Output_Buffer_Default+0x18>
    return _mem_pool__user_io_output_2_Default;
3400e2ac:	4b03      	ldr	r3, [pc, #12]	@ (3400e2bc <LL_ATON_Get_User_Output_Buffer_Default+0x24>)
3400e2ae:	e7f5      	b.n	3400e29c <LL_ATON_Get_User_Output_Buffer_Default+0x4>
    return NULL;
3400e2b0:	2000      	movs	r0, #0
}
3400e2b2:	4770      	bx	lr
3400e2b4:	341455b8 	.word	0x341455b8
3400e2b8:	341455b4 	.word	0x341455b4
3400e2bc:	341455b0 	.word	0x341455b0

3400e2c0 <LL_ATON_EC_Network_Init_Default>:


// this function MUST be called ONLY ONCE once for initializing the network
bool LL_ATON_EC_Network_Init_Default(void)
{
  memset(_ec_blob_1_prev_base_addrs, 0, 1 * sizeof(ECAddr));
3400e2c0:	2200      	movs	r2, #0
3400e2c2:	4b10      	ldr	r3, [pc, #64]	@ (3400e304 <LL_ATON_EC_Network_Init_Default+0x44>)
{
3400e2c4:	b513      	push	{r0, r1, r4, lr}
  memset(_ec_blob_1_prev_base_addrs, 0, 1 * sizeof(ECAddr));
3400e2c6:	601a      	str	r2, [r3, #0]
#else
  static inline void LL_ATON_Cache_NPU_Clean_Invalidate_Range(uintptr_t virtual_addr, uint32_t size)
  {
    /* NOTE: The ATON NPU cache does not provide a pure invalidate-range function, but only a clean-invalidate range
       function! One has to take this into account when using `stai_ext_cache_npu_clean_invalidate_range`. */
    LL_ATON_OSAL_LOCK_NPU_CACHE();
3400e2c8:	f7f6 f800 	bl	340042cc <aton_osal_freertos_lock>
    npu_cache_clean_invalidate_range(ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr),
3400e2cc:	490e      	ldr	r1, [pc, #56]	@ (3400e308 <LL_ATON_EC_Network_Init_Default+0x48>)
3400e2ce:	480f      	ldr	r0, [pc, #60]	@ (3400e30c <LL_ATON_EC_Network_Init_Default+0x4c>)
3400e2d0:	f7f3 ff3a 	bl	34002148 <npu_cache_clean_invalidate_range>
                                     ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr + size));
    LL_ATON_OSAL_UNLOCK_NPU_CACHE();
3400e2d4:	f7f6 f812 	bl	340042fc <aton_osal_freertos_unlock>

  LL_ATON_Cache_NPU_Clean_Invalidate_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  unsigned int size;
  size = 55608;
3400e2d8:	f64d 1338 	movw	r3, #55608	@ 0xd938

  if (!ec_copy_program((const uint8_t *)_ec_blob_1_reloc, (ECInstr *)_ec_blob_1, &size))
3400e2dc:	490b      	ldr	r1, [pc, #44]	@ (3400e30c <LL_ATON_EC_Network_Init_Default+0x4c>)
3400e2de:	480c      	ldr	r0, [pc, #48]	@ (3400e310 <LL_ATON_EC_Network_Init_Default+0x50>)
3400e2e0:	aa01      	add	r2, sp, #4
  size = 55608;
3400e2e2:	9301      	str	r3, [sp, #4]
  if (!ec_copy_program((const uint8_t *)_ec_blob_1_reloc, (ECInstr *)_ec_blob_1, &size))
3400e2e4:	f7f3 ff38 	bl	34002158 <ec_copy_program>
3400e2e8:	4604      	mov	r4, r0
3400e2ea:	b140      	cbz	r0, 3400e2fe <LL_ATON_EC_Network_Init_Default+0x3e>
  {
    // TODO maybe generate/print error because it was not possible to copy the blob
    return false;
  }

  _ec_blob_1_reloc_table_ptr = ec_get_reloc_table_ptr((const uint8_t *)_ec_blob_1_reloc);
3400e2ec:	4808      	ldr	r0, [pc, #32]	@ (3400e310 <LL_ATON_EC_Network_Init_Default+0x50>)
3400e2ee:	f7f3 ff7d 	bl	340021ec <ec_get_reloc_table_ptr>
3400e2f2:	4b08      	ldr	r3, [pc, #32]	@ (3400e314 <LL_ATON_EC_Network_Init_Default+0x54>)
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e2f4:	4904      	ldr	r1, [pc, #16]	@ (3400e308 <LL_ATON_EC_Network_Init_Default+0x48>)
3400e2f6:	6018      	str	r0, [r3, #0]
3400e2f8:	4804      	ldr	r0, [pc, #16]	@ (3400e30c <LL_ATON_EC_Network_Init_Default+0x4c>)
3400e2fa:	f7f3 febd 	bl	34002078 <mcu_cache_clean_range>

  LL_ATON_Cache_MCU_Clean_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  return true;
}
3400e2fe:	4620      	mov	r0, r4
3400e300:	b002      	add	sp, #8
3400e302:	bd10      	pop	{r4, pc}
3400e304:	3410f0c4 	.word	0x3410f0c4
3400e308:	341455b0 	.word	0x341455b0
3400e30c:	3410f0d0 	.word	0x3410f0d0
3400e310:	3406e670 	.word	0x3406e670
3400e314:	3410f0c8 	.word	0x3410f0c8

3400e318 <LL_ATON_EC_Inference_Init_Default>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_Default(void)
{
3400e318:	b513      	push	{r0, r1, r4, lr}
    LL_ATON_OSAL_LOCK_NPU_CACHE();
3400e31a:	f7f5 ffd7 	bl	340042cc <aton_osal_freertos_lock>
    npu_cache_clean_invalidate_range(ATON_LIB_VIRTUAL_TO_PHYSICAL_ADDR(virtual_addr),
3400e31e:	490c      	ldr	r1, [pc, #48]	@ (3400e350 <LL_ATON_EC_Inference_Init_Default+0x38>)
3400e320:	480c      	ldr	r0, [pc, #48]	@ (3400e354 <LL_ATON_EC_Inference_Init_Default+0x3c>)
3400e322:	f7f3 ff11 	bl	34002148 <npu_cache_clean_invalidate_range>
    LL_ATON_OSAL_UNLOCK_NPU_CACHE();
3400e326:	f7f5 ffe9 	bl	340042fc <aton_osal_freertos_unlock>
  LL_ATON_Cache_NPU_Clean_Invalidate_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  if (!ec_reloc(_ec_blob_1_reloc_table_ptr, (ECInstr *)_ec_blob_1, _ec_blob_1__user_io_input_0_RELOC_IDX, (ECAddr)(uintptr_t)_ec_blob_1__user_io_input_0_BASE_SYMBOL, _ec_blob_1_prev_base_addrs + _ec_blob_1__user_io_input_0_RELOC_IDX))
3400e32a:	4b0b      	ldr	r3, [pc, #44]	@ (3400e358 <LL_ATON_EC_Inference_Init_Default+0x40>)
3400e32c:	480b      	ldr	r0, [pc, #44]	@ (3400e35c <LL_ATON_EC_Inference_Init_Default+0x44>)
3400e32e:	9300      	str	r3, [sp, #0]
3400e330:	4b0b      	ldr	r3, [pc, #44]	@ (3400e360 <LL_ATON_EC_Inference_Init_Default+0x48>)
3400e332:	2200      	movs	r2, #0
3400e334:	681b      	ldr	r3, [r3, #0]
3400e336:	4907      	ldr	r1, [pc, #28]	@ (3400e354 <LL_ATON_EC_Inference_Init_Default+0x3c>)
3400e338:	6800      	ldr	r0, [r0, #0]
3400e33a:	f7f3 ff6b 	bl	34002214 <ec_reloc>
3400e33e:	4604      	mov	r4, r0
3400e340:	b118      	cbz	r0, 3400e34a <LL_ATON_EC_Inference_Init_Default+0x32>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e342:	4903      	ldr	r1, [pc, #12]	@ (3400e350 <LL_ATON_EC_Inference_Init_Default+0x38>)
3400e344:	4803      	ldr	r0, [pc, #12]	@ (3400e354 <LL_ATON_EC_Inference_Init_Default+0x3c>)
3400e346:	f7f3 fe97 	bl	34002078 <mcu_cache_clean_range>
  }

  LL_ATON_Cache_MCU_Clean_Range((uintptr_t)_ec_blob_1, (uint32_t)222432);

  return true;
}
3400e34a:	4620      	mov	r0, r4
3400e34c:	b002      	add	sp, #8
3400e34e:	bd10      	pop	{r4, pc}
3400e350:	341455b0 	.word	0x341455b0
3400e354:	3410f0d0 	.word	0x3410f0d0
3400e358:	3410f0c4 	.word	0x3410f0c4
3400e35c:	3410f0c8 	.word	0x3410f0c8
3400e360:	341455bc 	.word	0x341455bc

3400e364 <LL_ATON_EpochBlockItems_Default>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
3400e364:	4800      	ldr	r0, [pc, #0]	@ (3400e368 <LL_ATON_EpochBlockItems_Default+0x4>)
3400e366:	4770      	bx	lr
3400e368:	3403a0b4 	.word	0x3403a0b4

3400e36c <LL_ATON_Input_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400e36c:	4800      	ldr	r0, [pc, #0]	@ (3400e370 <LL_ATON_Input_Buffers_Info_Default+0x4>)
3400e36e:	4770      	bx	lr
3400e370:	34039874 	.word	0x34039874

3400e374 <LL_ATON_Output_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400e374:	4800      	ldr	r0, [pc, #0]	@ (3400e378 <LL_ATON_Output_Buffers_Info_Default+0x4>)
3400e376:	4770      	bx	lr
3400e378:	3403976c 	.word	0x3403976c

3400e37c <LL_ATON_Internal_Buffers_Info_Default>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400e37c:	4800      	ldr	r0, [pc, #0]	@ (3400e380 <LL_ATON_Internal_Buffers_Info_Default+0x4>)
3400e37e:	4770      	bx	lr
3400e380:	3403548c 	.word	0x3403548c

3400e384 <_ec_blob_cache_start_func_156>:
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e384:	4901      	ldr	r1, [pc, #4]	@ (3400e38c <_ec_blob_cache_start_func_156+0x8>)
3400e386:	4802      	ldr	r0, [pc, #8]	@ (3400e390 <_ec_blob_cache_start_func_156+0xc>)
3400e388:	f7f3 be4c 	b.w	34002024 <mcu_cache_invalidate_range>
3400e38c:	34246e00 	.word	0x34246e00
3400e390:	34223700 	.word	0x34223700

3400e394 <_ec_blob_cache_start_func_139>:


// Epoch Controller Blob (name='_ec_blob_139') micro instructions needed

// Epoch Controller Blob (name='_ec_blob_139') start function
static void _ec_blob_cache_start_func_139(const void *epoch_block) {
3400e394:	b508      	push	{r3, lr}
3400e396:	4907      	ldr	r1, [pc, #28]	@ (3400e3b4 <_ec_blob_cache_start_func_139+0x20>)
3400e398:	4807      	ldr	r0, [pc, #28]	@ (3400e3b8 <_ec_blob_cache_start_func_139+0x24>)
3400e39a:	f7f3 fe43 	bl	34002024 <mcu_cache_invalidate_range>
3400e39e:	4907      	ldr	r1, [pc, #28]	@ (3400e3bc <_ec_blob_cache_start_func_139+0x28>)
3400e3a0:	4807      	ldr	r0, [pc, #28]	@ (3400e3c0 <_ec_blob_cache_start_func_139+0x2c>)
3400e3a2:	f7f3 fe3f 	bl	34002024 <mcu_cache_invalidate_range>
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 476352))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 491904))) */
  LL_ATON_Cache_MCU_Invalidate_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 476352))) /* Equivalent hex address = 0x342744c0UL */, 15552);

};
3400e3a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
3400e3aa:	4906      	ldr	r1, [pc, #24]	@ (3400e3c4 <_ec_blob_cache_start_func_139+0x30>)
3400e3ac:	4806      	ldr	r0, [pc, #24]	@ (3400e3c8 <_ec_blob_cache_start_func_139+0x34>)
3400e3ae:	f7f3 be39 	b.w	34002024 <mcu_cache_invalidate_range>
3400e3b2:	bf00      	nop
3400e3b4:	34221300 	.word	0x34221300
3400e3b8:	3421c200 	.word	0x3421c200
3400e3bc:	3422cca0 	.word	0x3422cca0
3400e3c0:	3422c4c0 	.word	0x3422c4c0
3400e3c4:	34278180 	.word	0x34278180
3400e3c8:	342744c0 	.word	0x342744c0

3400e3cc <_ec_blob_cache_start_func_75>:
3400e3cc:	4901      	ldr	r1, [pc, #4]	@ (3400e3d4 <_ec_blob_cache_start_func_75+0x8>)
3400e3ce:	4802      	ldr	r0, [pc, #8]	@ (3400e3d8 <_ec_blob_cache_start_func_75+0xc>)
3400e3d0:	f7f3 be28 	b.w	34002024 <mcu_cache_invalidate_range>
3400e3d4:	34231800 	.word	0x34231800
3400e3d8:	3422f400 	.word	0x3422f400

3400e3dc <_ec_blob_cache_start_func_52>:
3400e3dc:	4901      	ldr	r1, [pc, #4]	@ (3400e3e4 <_ec_blob_cache_start_func_52+0x8>)
3400e3de:	4802      	ldr	r0, [pc, #8]	@ (3400e3e8 <_ec_blob_cache_start_func_52+0xc>)
3400e3e0:	f7f3 be20 	b.w	34002024 <mcu_cache_invalidate_range>
3400e3e4:	34212000 	.word	0x34212000
3400e3e8:	34209000 	.word	0x34209000

3400e3ec <_ec_blob_cache_start_func_122>:
static void _ec_blob_cache_start_func_122(const void *epoch_block) {
3400e3ec:	f7ff bff6 	b.w	3400e3dc <_ec_blob_cache_start_func_52>

3400e3f0 <_ec_blob_cache_start_func_30>:
3400e3f0:	4901      	ldr	r1, [pc, #4]	@ (3400e3f8 <_ec_blob_cache_start_func_30+0x8>)
3400e3f2:	4802      	ldr	r0, [pc, #8]	@ (3400e3fc <_ec_blob_cache_start_func_30+0xc>)
3400e3f4:	f7f3 be16 	b.w	34002024 <mcu_cache_invalidate_range>
3400e3f8:	34212000 	.word	0x34212000
3400e3fc:	34200000 	.word	0x34200000

3400e400 <_ec_blob_cache_start_func_26>:
3400e400:	4901      	ldr	r1, [pc, #4]	@ (3400e408 <_ec_blob_cache_start_func_26+0x8>)
3400e402:	4802      	ldr	r0, [pc, #8]	@ (3400e40c <_ec_blob_cache_start_func_26+0xc>)
3400e404:	f7f3 be0e 	b.w	34002024 <mcu_cache_invalidate_range>
3400e408:	34224000 	.word	0x34224000
3400e40c:	34200000 	.word	0x34200000

3400e410 <_ec_blob_cache_start_func_1>:
3400e410:	4901      	ldr	r1, [pc, #4]	@ (3400e418 <_ec_blob_cache_start_func_1+0x8>)
3400e412:	4802      	ldr	r0, [pc, #8]	@ (3400e41c <_ec_blob_cache_start_func_1+0xc>)
3400e414:	f7f3 be06 	b.w	34002024 <mcu_cache_invalidate_range>
3400e418:	3425a000 	.word	0x3425a000
3400e41c:	34248000 	.word	0x34248000

3400e420 <LL_ATON_End_EpochBlock_155>:


/* scheduling epoch=155  nodes=1   ------------------------------------------------------------------- */

static void LL_ATON_End_EpochBlock_155(const void *epoch_block)
{
3400e420:	b510      	push	{r4, lr}
3400e422:	b0ae      	sub	sp, #184	@ 0xb8
  LL_ATON_LIB_UNUSED(epoch_block);


/* Unit= 27 [PROCESSOR 0] */
/* kind=DequantizeLinear node=Dequantize_350 */
  Dequantizelinear_sw_info dequantizelinear4_sw_info = {
3400e424:	22b4      	movs	r2, #180	@ 0xb4
3400e426:	2100      	movs	r1, #0
3400e428:	a801      	add	r0, sp, #4
3400e42a:	f011 ff15 	bl	34020258 <memset>
3400e42e:	232a      	movs	r3, #42	@ 0x2a
3400e430:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
3400e434:	f88d 3004 	strb.w	r3, [sp, #4]
3400e438:	2301      	movs	r3, #1
3400e43a:	4918      	ldr	r1, [pc, #96]	@ (3400e49c <LL_ATON_End_EpochBlock_155+0x7c>)
3400e43c:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400e440:	e9cd 320d 	strd	r3, r2, [sp, #52]	@ 0x34
3400e444:	e9cd 2206 	strd	r2, r2, [sp, #24]
3400e448:	920a      	str	r2, [sp, #40]	@ 0x28
3400e44a:	910b      	str	r1, [sp, #44]	@ 0x2c
3400e44c:	9211      	str	r2, [sp, #68]	@ 0x44
3400e44e:	2104      	movs	r1, #4
3400e450:	f44f 52fc 	mov.w	r2, #8064	@ 0x1f80
3400e454:	e9cd 2112 	strd	r2, r1, [sp, #72]	@ 0x48
3400e458:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
3400e45c:	4a10      	ldr	r2, [pc, #64]	@ (3400e4a0 <LL_ATON_End_EpochBlock_155+0x80>)
3400e45e:	4c11      	ldr	r4, [pc, #68]	@ (3400e4a4 <LL_ATON_End_EpochBlock_155+0x84>)
    .general.type = LL_SW_DEQUANTIZELINEAR,
  };

  /* Low Level SW Layer function invocation. This will exploit EmbedNets libs) */
  /* Node Dequantize_350 mapped on EmbedNets (INTEGER) as DequantizeLinear | Category: Format-Converter */
  ll_sw_forward_dequantizelinear(&dequantizelinear4_sw_info);
3400e460:	eb0d 0001 	add.w	r0, sp, r1
  Dequantizelinear_sw_info dequantizelinear4_sw_info = {
3400e464:	9221      	str	r2, [sp, #132]	@ 0x84
3400e466:	3260      	adds	r2, #96	@ 0x60
3400e468:	e9cd 3304 	strd	r3, r3, [sp, #16]
3400e46c:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400e470:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
3400e474:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400e478:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400e47c:	931c      	str	r3, [sp, #112]	@ 0x70
3400e47e:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400e482:	9327      	str	r3, [sp, #156]	@ 0x9c
3400e484:	922c      	str	r2, [sp, #176]	@ 0xb0
3400e486:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400e48a:	9416      	str	r4, [sp, #88]	@ 0x58
  ll_sw_forward_dequantizelinear(&dequantizelinear4_sw_info);
3400e48c:	f7f6 fc04 	bl	34004c98 <ll_sw_forward_dequantizelinear>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e490:	4620      	mov	r0, r4
3400e492:	4905      	ldr	r1, [pc, #20]	@ (3400e4a8 <LL_ATON_End_EpochBlock_155+0x88>)
3400e494:	f7f3 fdf0 	bl	34002078 <mcu_cache_clean_range>
  /*     memory pool: 8 */
  /*     start: ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 290304))) */
  /*     end:   ((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 298368))) */
  LL_ATON_Cache_MCU_Clean_Range(((uintptr_t)(ATON_LIB_PHYSICAL_TO_VIRTUAL_ADDR(0x34200000UL + 290304))) /* Equivalent hex address = 0x34246e00UL */, 8064);

}
3400e498:	b02e      	add	sp, #184	@ 0xb8
3400e49a:	bd10      	pop	{r4, pc}
3400e49c:	3422c4c0 	.word	0x3422c4c0
3400e4a0:	71112130 	.word	0x71112130
3400e4a4:	34246e00 	.word	0x34246e00
3400e4a8:	34248d80 	.word	0x34248d80

3400e4ac <LL_ATON_End_EpochBlock_154>:
{
3400e4ac:	b530      	push	{r4, r5, lr}
3400e4ae:	b0af      	sub	sp, #188	@ 0xbc
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400e4b0:	22b4      	movs	r2, #180	@ 0xb4
3400e4b2:	2100      	movs	r1, #0
3400e4b4:	a801      	add	r0, sp, #4
3400e4b6:	f011 fecf 	bl	34020258 <memset>
3400e4ba:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
3400e4be:	f648 52c0 	movw	r2, #36288	@ 0x8dc0
3400e4c2:	2112      	movs	r1, #18
3400e4c4:	232a      	movs	r3, #42	@ 0x2a
3400e4c6:	e9cd 1002 	strd	r1, r0, [sp, #8]
3400e4ca:	e9cd 2006 	strd	r2, r0, [sp, #24]
3400e4ce:	e9cd 100d 	strd	r1, r0, [sp, #52]	@ 0x34
3400e4d2:	920a      	str	r2, [sp, #40]	@ 0x28
3400e4d4:	f44f 51fc 	mov.w	r1, #8064	@ 0x1f80
3400e4d8:	9211      	str	r2, [sp, #68]	@ 0x44
3400e4da:	2204      	movs	r2, #4
3400e4dc:	f88d 3004 	strb.w	r3, [sp, #4]
3400e4e0:	2301      	movs	r3, #1
3400e4e2:	e9cd 1212 	strd	r1, r2, [sp, #72]	@ 0x48
3400e4e6:	4c12      	ldr	r4, [pc, #72]	@ (3400e530 <LL_ATON_End_EpochBlock_154+0x84>)
3400e4e8:	9214      	str	r2, [sp, #80]	@ 0x50
3400e4ea:	4a12      	ldr	r2, [pc, #72]	@ (3400e534 <LL_ATON_End_EpochBlock_154+0x88>)
3400e4ec:	4d12      	ldr	r5, [pc, #72]	@ (3400e538 <LL_ATON_End_EpochBlock_154+0x8c>)
3400e4ee:	e9cd 2415 	strd	r2, r4, [sp, #84]	@ 0x54
3400e4f2:	4a12      	ldr	r2, [pc, #72]	@ (3400e53c <LL_ATON_End_EpochBlock_154+0x90>)
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400e4f4:	a801      	add	r0, sp, #4
  Dequantizelinear_sw_info dequantizelinear3_sw_info = {
3400e4f6:	9221      	str	r2, [sp, #132]	@ 0x84
3400e4f8:	3260      	adds	r2, #96	@ 0x60
3400e4fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
3400e4fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
3400e502:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
3400e506:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
3400e50a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
3400e50e:	931c      	str	r3, [sp, #112]	@ 0x70
3400e510:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
3400e514:	9327      	str	r3, [sp, #156]	@ 0x9c
3400e516:	922c      	str	r2, [sp, #176]	@ 0xb0
3400e518:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
3400e51c:	950b      	str	r5, [sp, #44]	@ 0x2c
  ll_sw_forward_dequantizelinear(&dequantizelinear3_sw_info);
3400e51e:	f7f6 fbbb 	bl	34004c98 <ll_sw_forward_dequantizelinear>
3400e522:	4629      	mov	r1, r5
3400e524:	4620      	mov	r0, r4
3400e526:	f7f3 fda7 	bl	34002078 <mcu_cache_clean_range>
}
3400e52a:	b02f      	add	sp, #188	@ 0xbc
3400e52c:	bd30      	pop	{r4, r5, pc}
3400e52e:	bf00      	nop
3400e530:	34200000 	.word	0x34200000
3400e534:	00023700 	.word	0x00023700
3400e538:	34223700 	.word	0x34223700
3400e53c:	71112100 	.word	0x71112100

3400e540 <LL_ATON_End_EpochBlock_153>:
{
3400e540:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e542:	4d0d      	ldr	r5, [pc, #52]	@ (3400e578 <LL_ATON_End_EpochBlock_153+0x38>)
3400e544:	4c0d      	ldr	r4, [pc, #52]	@ (3400e57c <LL_ATON_End_EpochBlock_153+0x3c>)
3400e546:	4629      	mov	r1, r5
3400e548:	4620      	mov	r0, r4
3400e54a:	f7f3 fd6b 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e54e:	2100      	movs	r1, #0
3400e550:	4608      	mov	r0, r1
3400e552:	f7f4 faf1 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_Concat(Concat_338_tensor_info_in_153, 2, Concat_338_tensor_info_out_153, 3, 4, 5);
3400e556:	2304      	movs	r3, #4
3400e558:	2205      	movs	r2, #5
3400e55a:	2102      	movs	r1, #2
3400e55c:	e9cd 3200 	strd	r3, r2, [sp]
3400e560:	4807      	ldr	r0, [pc, #28]	@ (3400e580 <LL_ATON_End_EpochBlock_153+0x40>)
3400e562:	2303      	movs	r3, #3
3400e564:	4a07      	ldr	r2, [pc, #28]	@ (3400e584 <LL_ATON_End_EpochBlock_153+0x44>)
3400e566:	f7f5 fa31 	bl	340039cc <LL_ATON_LIB_Concat>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e56a:	4629      	mov	r1, r5
3400e56c:	4620      	mov	r0, r4
}
3400e56e:	b003      	add	sp, #12
3400e570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e574:	f7f3 bd80 	b.w	34002078 <mcu_cache_clean_range>
3400e578:	3422c4c0 	.word	0x3422c4c0
3400e57c:	34223700 	.word	0x34223700
3400e580:	340a9528 	.word	0x340a9528
3400e584:	340a94b8 	.word	0x340a94b8

3400e588 <LL_ATON_End_EpochBlock_138>:
{
3400e588:	b510      	push	{r4, lr}
3400e58a:	b0e8      	sub	sp, #416	@ 0x1a0
  Resize_integer_sw_info resize_integer2_sw_info = {
3400e58c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
3400e590:	2100      	movs	r1, #0
3400e592:	4668      	mov	r0, sp
3400e594:	f011 fe60 	bl	34020258 <memset>
3400e598:	232d      	movs	r3, #45	@ 0x2d
3400e59a:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
3400e59e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
3400e5a2:	f88d 3000 	strb.w	r3, [sp]
3400e5a6:	230c      	movs	r3, #12
3400e5a8:	e9cd 1005 	strd	r1, r0, [sp, #20]
3400e5ac:	9109      	str	r1, [sp, #36]	@ 0x24
3400e5ae:	f101 5150 	add.w	r1, r1, #872415232	@ 0x34000000
3400e5b2:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
3400e5b6:	910a      	str	r1, [sp, #40]	@ 0x28
3400e5b8:	2118      	movs	r1, #24
3400e5ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400e5be:	e9cd 3301 	strd	r3, r3, [sp, #4]
3400e5c2:	2301      	movs	r3, #1
3400e5c4:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
3400e5c8:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
3400e5cc:	f44f 3110 	mov.w	r1, #147456	@ 0x24000
3400e5d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
3400e5d4:	e9cd 2307 	strd	r2, r3, [sp, #28]
3400e5d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
3400e5dc:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
3400e5e0:	4a26      	ldr	r2, [pc, #152]	@ (3400e67c <LL_ATON_End_EpochBlock_138+0xf4>)
3400e5e2:	e9cd 1010 	strd	r1, r0, [sp, #64]	@ 0x40
3400e5e6:	9220      	str	r2, [sp, #128]	@ 0x80
3400e5e8:	3260      	adds	r2, #96	@ 0x60
3400e5ea:	4c25      	ldr	r4, [pc, #148]	@ (3400e680 <LL_ATON_End_EpochBlock_138+0xf8>)
3400e5ec:	922b      	str	r2, [sp, #172]	@ 0xac
3400e5ee:	4825      	ldr	r0, [pc, #148]	@ (3400e684 <LL_ATON_End_EpochBlock_138+0xfc>)
3400e5f0:	3a50      	subs	r2, #80	@ 0x50
3400e5f2:	9236      	str	r2, [sp, #216]	@ 0xd8
3400e5f4:	3260      	adds	r2, #96	@ 0x60
3400e5f6:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
3400e5fa:	9114      	str	r1, [sp, #80]	@ 0x50
3400e5fc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
3400e600:	931b      	str	r3, [sp, #108]	@ 0x6c
3400e602:	9326      	str	r3, [sp, #152]	@ 0x98
3400e604:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
3400e608:	9331      	str	r3, [sp, #196]	@ 0xc4
3400e60a:	933c      	str	r3, [sp, #240]	@ 0xf0
3400e60c:	9241      	str	r2, [sp, #260]	@ 0x104
3400e60e:	9415      	str	r4, [sp, #84]	@ 0x54
3400e610:	2204      	movs	r2, #4
3400e612:	f88d 3108 	strb.w	r3, [sp, #264]	@ 0x108
3400e616:	904c      	str	r0, [sp, #304]	@ 0x130
3400e618:	2008      	movs	r0, #8
3400e61a:	e9cd 2345 	strd	r2, r3, [sp, #276]	@ 0x114
3400e61e:	e9cd 0350 	strd	r0, r3, [sp, #320]	@ 0x140
3400e622:	e9cd 235b 	strd	r2, r3, [sp, #364]	@ 0x16c
3400e626:	e9cd 3343 	strd	r3, r3, [sp, #268]	@ 0x10c
3400e62a:	e9cd 334e 	strd	r3, r3, [sp, #312]	@ 0x138
3400e62e:	e9cd 3359 	strd	r3, r3, [sp, #356]	@ 0x164
3400e632:	4b15      	ldr	r3, [pc, #84]	@ (3400e688 <LL_ATON_End_EpochBlock_138+0x100>)
3400e634:	9052      	str	r0, [sp, #328]	@ 0x148
3400e636:	2020      	movs	r0, #32
3400e638:	9362      	str	r3, [sp, #392]	@ 0x188
3400e63a:	4b14      	ldr	r3, [pc, #80]	@ (3400e68c <LL_ATON_End_EpochBlock_138+0x104>)
3400e63c:	2110      	movs	r1, #16
3400e63e:	9364      	str	r3, [sp, #400]	@ 0x190
3400e640:	f240 3302 	movw	r3, #770	@ 0x302
3400e644:	e9cd 2055 	strd	r2, r0, [sp, #340]	@ 0x154
3400e648:	e9cd 0053 	strd	r0, r0, [sp, #332]	@ 0x14c
3400e64c:	4810      	ldr	r0, [pc, #64]	@ (3400e690 <LL_ATON_End_EpochBlock_138+0x108>)
3400e64e:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
3400e652:	9057      	str	r0, [sp, #348]	@ 0x15c
  ll_sw_forward_resize_integer(&resize_integer2_sw_info);
3400e654:	4668      	mov	r0, sp
  Resize_integer_sw_info resize_integer2_sw_info = {
3400e656:	e9cd 215d 	strd	r2, r1, [sp, #372]	@ 0x174
3400e65a:	e9cd 1148 	strd	r1, r1, [sp, #288]	@ 0x120
3400e65e:	e9cd 225f 	strd	r2, r2, [sp, #380]	@ 0x17c
3400e662:	9247      	str	r2, [sp, #284]	@ 0x11c
3400e664:	9161      	str	r1, [sp, #388]	@ 0x184
3400e666:	f8ad 319c 	strh.w	r3, [sp, #412]	@ 0x19c
  ll_sw_forward_resize_integer(&resize_integer2_sw_info);
3400e66a:	f7f6 fbb1 	bl	34004dd0 <ll_sw_forward_resize_integer>
3400e66e:	4620      	mov	r0, r4
3400e670:	4908      	ldr	r1, [pc, #32]	@ (3400e694 <LL_ATON_End_EpochBlock_138+0x10c>)
3400e672:	f7f3 fd01 	bl	34002078 <mcu_cache_clean_range>
}
3400e676:	b068      	add	sp, #416	@ 0x1a0
3400e678:	bd10      	pop	{r4, pc}
3400e67a:	bf00      	nop
3400e67c:	711120e0 	.word	0x711120e0
3400e680:	34224000 	.word	0x34224000
3400e684:	711120b0 	.word	0x711120b0
3400e688:	71112030 	.word	0x71112030
3400e68c:	bf400000 	.word	0xbf400000
3400e690:	71112010 	.word	0x71112010
3400e694:	34248000 	.word	0x34248000

3400e698 <LL_ATON_End_EpochBlock_121>:
{
3400e698:	b510      	push	{r4, lr}
3400e69a:	b0e8      	sub	sp, #416	@ 0x1a0
  Resize_integer_sw_info resize_integer1_sw_info = {
3400e69c:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
3400e6a0:	2100      	movs	r1, #0
3400e6a2:	4668      	mov	r0, sp
3400e6a4:	f011 fdd8 	bl	34020258 <memset>
3400e6a8:	232d      	movs	r3, #45	@ 0x2d
3400e6aa:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
3400e6ae:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
3400e6b2:	f88d 3000 	strb.w	r3, [sp]
3400e6b6:	2306      	movs	r3, #6
3400e6b8:	e9cd 1005 	strd	r1, r0, [sp, #20]
3400e6bc:	9109      	str	r1, [sp, #36]	@ 0x24
3400e6be:	4931      	ldr	r1, [pc, #196]	@ (3400e784 <LL_ATON_End_EpochBlock_121+0xec>)
3400e6c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
3400e6c4:	910a      	str	r1, [sp, #40]	@ 0x28
3400e6c6:	210c      	movs	r1, #12
3400e6c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
3400e6cc:	2301      	movs	r3, #1
3400e6ce:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
3400e6d2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
3400e6d6:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
3400e6da:	e9cd 2303 	strd	r2, r3, [sp, #12]
3400e6de:	e9cd 2307 	strd	r2, r3, [sp, #28]
3400e6e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
3400e6e6:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
3400e6ea:	4a27      	ldr	r2, [pc, #156]	@ (3400e788 <LL_ATON_End_EpochBlock_121+0xf0>)
3400e6ec:	e9cd 1010 	strd	r1, r0, [sp, #64]	@ 0x40
3400e6f0:	9220      	str	r2, [sp, #128]	@ 0x80
3400e6f2:	3260      	adds	r2, #96	@ 0x60
3400e6f4:	4c25      	ldr	r4, [pc, #148]	@ (3400e78c <LL_ATON_End_EpochBlock_121+0xf4>)
3400e6f6:	922b      	str	r2, [sp, #172]	@ 0xac
3400e6f8:	4825      	ldr	r0, [pc, #148]	@ (3400e790 <LL_ATON_End_EpochBlock_121+0xf8>)
3400e6fa:	3a50      	subs	r2, #80	@ 0x50
3400e6fc:	9236      	str	r2, [sp, #216]	@ 0xd8
3400e6fe:	3260      	adds	r2, #96	@ 0x60
3400e700:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
3400e704:	9114      	str	r1, [sp, #80]	@ 0x50
3400e706:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
3400e70a:	931b      	str	r3, [sp, #108]	@ 0x6c
3400e70c:	9326      	str	r3, [sp, #152]	@ 0x98
3400e70e:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
3400e712:	9331      	str	r3, [sp, #196]	@ 0xc4
3400e714:	933c      	str	r3, [sp, #240]	@ 0xf0
3400e716:	9241      	str	r2, [sp, #260]	@ 0x104
3400e718:	9415      	str	r4, [sp, #84]	@ 0x54
3400e71a:	2204      	movs	r2, #4
3400e71c:	f88d 3108 	strb.w	r3, [sp, #264]	@ 0x108
3400e720:	904c      	str	r0, [sp, #304]	@ 0x130
3400e722:	2008      	movs	r0, #8
3400e724:	e9cd 2345 	strd	r2, r3, [sp, #276]	@ 0x114
3400e728:	e9cd 0350 	strd	r0, r3, [sp, #320]	@ 0x140
3400e72c:	e9cd 235b 	strd	r2, r3, [sp, #364]	@ 0x16c
3400e730:	e9cd 3343 	strd	r3, r3, [sp, #268]	@ 0x10c
3400e734:	e9cd 334e 	strd	r3, r3, [sp, #312]	@ 0x138
3400e738:	e9cd 3359 	strd	r3, r3, [sp, #356]	@ 0x164
3400e73c:	4b15      	ldr	r3, [pc, #84]	@ (3400e794 <LL_ATON_End_EpochBlock_121+0xfc>)
3400e73e:	9052      	str	r0, [sp, #328]	@ 0x148
3400e740:	2020      	movs	r0, #32
3400e742:	9362      	str	r3, [sp, #392]	@ 0x188
3400e744:	4b14      	ldr	r3, [pc, #80]	@ (3400e798 <LL_ATON_End_EpochBlock_121+0x100>)
3400e746:	2110      	movs	r1, #16
3400e748:	9364      	str	r3, [sp, #400]	@ 0x190
3400e74a:	f240 3302 	movw	r3, #770	@ 0x302
3400e74e:	e9cd 2055 	strd	r2, r0, [sp, #340]	@ 0x154
3400e752:	e9cd 0053 	strd	r0, r0, [sp, #332]	@ 0x14c
3400e756:	4811      	ldr	r0, [pc, #68]	@ (3400e79c <LL_ATON_End_EpochBlock_121+0x104>)
3400e758:	e9cd 214a 	strd	r2, r1, [sp, #296]	@ 0x128
3400e75c:	9057      	str	r0, [sp, #348]	@ 0x15c
  ll_sw_forward_resize_integer(&resize_integer1_sw_info);
3400e75e:	4668      	mov	r0, sp
  Resize_integer_sw_info resize_integer1_sw_info = {
3400e760:	e9cd 215d 	strd	r2, r1, [sp, #372]	@ 0x174
3400e764:	e9cd 1148 	strd	r1, r1, [sp, #288]	@ 0x120
3400e768:	e9cd 225f 	strd	r2, r2, [sp, #380]	@ 0x17c
3400e76c:	9247      	str	r2, [sp, #284]	@ 0x11c
3400e76e:	9161      	str	r1, [sp, #388]	@ 0x184
3400e770:	f8ad 319c 	strh.w	r3, [sp, #412]	@ 0x19c
  ll_sw_forward_resize_integer(&resize_integer1_sw_info);
3400e774:	f7f6 fb2c 	bl	34004dd0 <ll_sw_forward_resize_integer>
3400e778:	4620      	mov	r0, r4
3400e77a:	4909      	ldr	r1, [pc, #36]	@ (3400e7a0 <LL_ATON_End_EpochBlock_121+0x108>)
3400e77c:	f7f3 fc7c 	bl	34002078 <mcu_cache_clean_range>
}
3400e780:	b068      	add	sp, #416	@ 0x1a0
3400e782:	bd10      	pop	{r4, pc}
3400e784:	3422f400 	.word	0x3422f400
3400e788:	71112110 	.word	0x71112110
3400e78c:	3421b000 	.word	0x3421b000
3400e790:	711120c0 	.word	0x711120c0
3400e794:	71112070 	.word	0x71112070
3400e798:	bf400000 	.word	0xbf400000
3400e79c:	71112050 	.word	0x71112050
3400e7a0:	34224000 	.word	0x34224000

3400e7a4 <LL_ATON_End_EpochBlock_74>:
{
3400e7a4:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e7a6:	4d10      	ldr	r5, [pc, #64]	@ (3400e7e8 <LL_ATON_End_EpochBlock_74+0x44>)
3400e7a8:	4c10      	ldr	r4, [pc, #64]	@ (3400e7ec <LL_ATON_End_EpochBlock_74+0x48>)
3400e7aa:	b085      	sub	sp, #20
3400e7ac:	4629      	mov	r1, r5
3400e7ae:	4620      	mov	r0, r4
3400e7b0:	f7f3 fc38 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e7b4:	2100      	movs	r1, #0
3400e7b6:	4608      	mov	r0, r1
3400e7b8:	f7f4 f9be 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_162_tensor_shape_in_74[0], Transpose_162_tensor_axes_offsets_in_74[0], &Transpose_162_tensor_shape_out_74[0], Transpose_162_tensor_axes_offsets_out_74[0], Transpose_162_target_pos_array_in_74, Transpose_162_perm_to_use_array_in_74, 1, 2);
3400e7bc:	2301      	movs	r3, #1
3400e7be:	2202      	movs	r2, #2
3400e7c0:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400e7c4:	4b0a      	ldr	r3, [pc, #40]	@ (3400e7f0 <LL_ATON_End_EpochBlock_74+0x4c>)
3400e7c6:	4a0b      	ldr	r2, [pc, #44]	@ (3400e7f4 <LL_ATON_End_EpochBlock_74+0x50>)
3400e7c8:	9301      	str	r3, [sp, #4]
3400e7ca:	4b0b      	ldr	r3, [pc, #44]	@ (3400e7f8 <LL_ATON_End_EpochBlock_74+0x54>)
3400e7cc:	490b      	ldr	r1, [pc, #44]	@ (3400e7fc <LL_ATON_End_EpochBlock_74+0x58>)
3400e7ce:	9300      	str	r3, [sp, #0]
3400e7d0:	480b      	ldr	r0, [pc, #44]	@ (3400e800 <LL_ATON_End_EpochBlock_74+0x5c>)
3400e7d2:	4b0c      	ldr	r3, [pc, #48]	@ (3400e804 <LL_ATON_End_EpochBlock_74+0x60>)
3400e7d4:	f7f4 fffc 	bl	340037d0 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e7d8:	4629      	mov	r1, r5
3400e7da:	4620      	mov	r0, r4
}
3400e7dc:	b005      	add	sp, #20
3400e7de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e7e2:	f7f3 bc49 	b.w	34002078 <mcu_cache_clean_range>
3400e7e6:	bf00      	nop
3400e7e8:	3421b000 	.word	0x3421b000
3400e7ec:	34212000 	.word	0x34212000
3400e7f0:	340a93d4 	.word	0x340a93d4
3400e7f4:	340a93dc 	.word	0x340a93dc
3400e7f8:	340a93d8 	.word	0x340a93d8
3400e7fc:	340a93a4 	.word	0x340a93a4
3400e800:	340a9414 	.word	0x340a9414
3400e804:	340a93c4 	.word	0x340a93c4

3400e808 <LL_ATON_End_EpochBlock_51>:
{
3400e808:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e80a:	4d10      	ldr	r5, [pc, #64]	@ (3400e84c <LL_ATON_End_EpochBlock_51+0x44>)
3400e80c:	4c10      	ldr	r4, [pc, #64]	@ (3400e850 <LL_ATON_End_EpochBlock_51+0x48>)
3400e80e:	b085      	sub	sp, #20
3400e810:	4629      	mov	r1, r5
3400e812:	4620      	mov	r0, r4
3400e814:	f7f3 fc06 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e818:	2100      	movs	r1, #0
3400e81a:	4608      	mov	r0, r1
3400e81c:	f7f4 f98c 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_108_tensor_shape_in_51[0], Transpose_108_tensor_axes_offsets_in_51[0], &Transpose_108_tensor_shape_out_51[0], Transpose_108_tensor_axes_offsets_out_51[0], Transpose_108_target_pos_array_in_51, Transpose_108_perm_to_use_array_in_51, 1, 2);
3400e820:	2301      	movs	r3, #1
3400e822:	2202      	movs	r2, #2
3400e824:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400e828:	4b0a      	ldr	r3, [pc, #40]	@ (3400e854 <LL_ATON_End_EpochBlock_51+0x4c>)
3400e82a:	4a0b      	ldr	r2, [pc, #44]	@ (3400e858 <LL_ATON_End_EpochBlock_51+0x50>)
3400e82c:	9301      	str	r3, [sp, #4]
3400e82e:	4b0b      	ldr	r3, [pc, #44]	@ (3400e85c <LL_ATON_End_EpochBlock_51+0x54>)
3400e830:	490b      	ldr	r1, [pc, #44]	@ (3400e860 <LL_ATON_End_EpochBlock_51+0x58>)
3400e832:	9300      	str	r3, [sp, #0]
3400e834:	480b      	ldr	r0, [pc, #44]	@ (3400e864 <LL_ATON_End_EpochBlock_51+0x5c>)
3400e836:	4b0c      	ldr	r3, [pc, #48]	@ (3400e868 <LL_ATON_End_EpochBlock_51+0x60>)
3400e838:	f7f4 ffca 	bl	340037d0 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e83c:	4629      	mov	r1, r5
3400e83e:	4620      	mov	r0, r4
}
3400e840:	b005      	add	sp, #20
3400e842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e846:	f7f3 bc17 	b.w	34002078 <mcu_cache_clean_range>
3400e84a:	bf00      	nop
3400e84c:	34224000 	.word	0x34224000
3400e850:	34212000 	.word	0x34212000
3400e854:	340a931c 	.word	0x340a931c
3400e858:	340a9324 	.word	0x340a9324
3400e85c:	340a9320 	.word	0x340a9320
3400e860:	340a92ec 	.word	0x340a92ec
3400e864:	340a935c 	.word	0x340a935c
3400e868:	340a930c 	.word	0x340a930c

3400e86c <LL_ATON_End_EpochBlock_29>:
{
3400e86c:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e86e:	4d10      	ldr	r5, [pc, #64]	@ (3400e8b0 <LL_ATON_End_EpochBlock_29+0x44>)
3400e870:	4c10      	ldr	r4, [pc, #64]	@ (3400e8b4 <LL_ATON_End_EpochBlock_29+0x48>)
3400e872:	b085      	sub	sp, #20
3400e874:	4629      	mov	r1, r5
3400e876:	4620      	mov	r0, r4
3400e878:	f7f3 fbd4 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e87c:	2100      	movs	r1, #0
3400e87e:	4608      	mov	r0, r1
3400e880:	f7f4 f95a 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_54_tensor_shape_in_29[0], Transpose_54_tensor_axes_offsets_in_29[0], &Transpose_54_tensor_shape_out_29[0], Transpose_54_tensor_axes_offsets_out_29[0], Transpose_54_target_pos_array_in_29, Transpose_54_perm_to_use_array_in_29, 2, 3);
3400e884:	2302      	movs	r3, #2
3400e886:	2203      	movs	r2, #3
3400e888:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400e88c:	4b0a      	ldr	r3, [pc, #40]	@ (3400e8b8 <LL_ATON_End_EpochBlock_29+0x4c>)
3400e88e:	4a0b      	ldr	r2, [pc, #44]	@ (3400e8bc <LL_ATON_End_EpochBlock_29+0x50>)
3400e890:	9301      	str	r3, [sp, #4]
3400e892:	4b0b      	ldr	r3, [pc, #44]	@ (3400e8c0 <LL_ATON_End_EpochBlock_29+0x54>)
3400e894:	490b      	ldr	r1, [pc, #44]	@ (3400e8c4 <LL_ATON_End_EpochBlock_29+0x58>)
3400e896:	9300      	str	r3, [sp, #0]
3400e898:	480b      	ldr	r0, [pc, #44]	@ (3400e8c8 <LL_ATON_End_EpochBlock_29+0x5c>)
3400e89a:	4b0c      	ldr	r3, [pc, #48]	@ (3400e8cc <LL_ATON_End_EpochBlock_29+0x60>)
3400e89c:	f7f4 ff98 	bl	340037d0 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e8a0:	4629      	mov	r1, r5
3400e8a2:	4620      	mov	r0, r4
}
3400e8a4:	b005      	add	sp, #20
3400e8a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e8aa:	f7f3 bbe5 	b.w	34002078 <mcu_cache_clean_range>
3400e8ae:	bf00      	nop
3400e8b0:	3426c000 	.word	0x3426c000
3400e8b4:	34248000 	.word	0x34248000
3400e8b8:	340a9264 	.word	0x340a9264
3400e8bc:	340a926c 	.word	0x340a926c
3400e8c0:	340a9268 	.word	0x340a9268
3400e8c4:	340a9234 	.word	0x340a9234
3400e8c8:	340a92a4 	.word	0x340a92a4
3400e8cc:	340a9254 	.word	0x340a9254

3400e8d0 <LL_ATON_End_EpochBlock_25>:
{
3400e8d0:	b530      	push	{r4, r5, lr}
    mcu_cache_invalidate_range(virtual_addr, virtual_addr + size);
3400e8d2:	4d10      	ldr	r5, [pc, #64]	@ (3400e914 <LL_ATON_End_EpochBlock_25+0x44>)
3400e8d4:	4c10      	ldr	r4, [pc, #64]	@ (3400e918 <LL_ATON_End_EpochBlock_25+0x48>)
3400e8d6:	b085      	sub	sp, #20
3400e8d8:	4629      	mov	r1, r5
3400e8da:	4620      	mov	r0, r4
3400e8dc:	f7f3 fba2 	bl	34002024 <mcu_cache_invalidate_range>
  LL_Switch_Init(NULL, 0);
3400e8e0:	2100      	movs	r1, #0
3400e8e2:	4608      	mov	r0, r1
3400e8e4:	f7f4 f928 	bl	34002b38 <LL_Switch_Init>
  LL_ATON_LIB_DMA_Transpose(&Transpose_52_tensor_shape_in_25[0], Transpose_52_tensor_axes_offsets_in_25[0], &Transpose_52_tensor_shape_out_25[0], Transpose_52_tensor_axes_offsets_out_25[0], Transpose_52_target_pos_array_in_25, Transpose_52_perm_to_use_array_in_25, 7, 8);
3400e8e8:	2307      	movs	r3, #7
3400e8ea:	2208      	movs	r2, #8
3400e8ec:	e9cd 3202 	strd	r3, r2, [sp, #8]
3400e8f0:	4b0a      	ldr	r3, [pc, #40]	@ (3400e91c <LL_ATON_End_EpochBlock_25+0x4c>)
3400e8f2:	4a0b      	ldr	r2, [pc, #44]	@ (3400e920 <LL_ATON_End_EpochBlock_25+0x50>)
3400e8f4:	9301      	str	r3, [sp, #4]
3400e8f6:	4b0b      	ldr	r3, [pc, #44]	@ (3400e924 <LL_ATON_End_EpochBlock_25+0x54>)
3400e8f8:	490b      	ldr	r1, [pc, #44]	@ (3400e928 <LL_ATON_End_EpochBlock_25+0x58>)
3400e8fa:	9300      	str	r3, [sp, #0]
3400e8fc:	480b      	ldr	r0, [pc, #44]	@ (3400e92c <LL_ATON_End_EpochBlock_25+0x5c>)
3400e8fe:	4b0c      	ldr	r3, [pc, #48]	@ (3400e930 <LL_ATON_End_EpochBlock_25+0x60>)
3400e900:	f7f4 ff66 	bl	340037d0 <LL_ATON_LIB_DMA_Transpose>
    mcu_cache_clean_range(virtual_addr, virtual_addr + size);
3400e904:	4629      	mov	r1, r5
3400e906:	4620      	mov	r0, r4
}
3400e908:	b005      	add	sp, #20
3400e90a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400e90e:	f7f3 bbb3 	b.w	34002078 <mcu_cache_clean_range>
3400e912:	bf00      	nop
3400e914:	342a2000 	.word	0x342a2000
3400e918:	34290000 	.word	0x34290000
3400e91c:	340a91ac 	.word	0x340a91ac
3400e920:	340a91b4 	.word	0x340a91b4
3400e924:	340a91b0 	.word	0x340a91b0
3400e928:	340a917c 	.word	0x340a917c
3400e92c:	340a91ec 	.word	0x340a91ec
3400e930:	340a919c 	.word	0x340a919c

3400e934 <LL_ATON_Set_User_Input_Buffer_palm_detector>:
}
3400e934:	2003      	movs	r0, #3
3400e936:	4770      	bx	lr

3400e938 <LL_ATON_Get_User_Input_Buffer_palm_detector>:
}
3400e938:	2000      	movs	r0, #0
3400e93a:	4770      	bx	lr

3400e93c <LL_ATON_Set_User_Output_Buffer_palm_detector>:
LL_ATON_User_IO_Result_t LL_ATON_Set_User_Output_Buffer_palm_detector(uint32_t num, void* buffer, uint32_t size)
3400e93c:	2003      	movs	r0, #3
3400e93e:	4770      	bx	lr

3400e940 <LL_ATON_Get_User_Output_Buffer_palm_detector>:
void *LL_ATON_Get_User_Output_Buffer_palm_detector(uint32_t num)
3400e940:	2000      	movs	r0, #0
3400e942:	4770      	bx	lr

3400e944 <LL_ATON_EC_Network_Init_palm_detector>:
bool LL_ATON_EC_Network_Init_palm_detector(void)
{


  return true;
}
3400e944:	2001      	movs	r0, #1
3400e946:	4770      	bx	lr

3400e948 <LL_ATON_EC_Inference_Init_palm_detector>:

// this function should be called before each inference
bool LL_ATON_EC_Inference_Init_palm_detector(void)
3400e948:	2001      	movs	r0, #1
3400e94a:	4770      	bx	lr

3400e94c <LL_ATON_EpochBlockItems_palm_detector>:
    },
  };


  return ll_atonn_rt_epoch_block_array;
}
3400e94c:	4800      	ldr	r0, [pc, #0]	@ (3400e950 <LL_ATON_EpochBlockItems_palm_detector+0x4>)
3400e94e:	4770      	bx	lr
3400e950:	340a95d0 	.word	0x340a95d0

3400e954 <LL_ATON_Input_Buffers_Info_palm_detector>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400e954:	4800      	ldr	r0, [pc, #0]	@ (3400e958 <LL_ATON_Input_Buffers_Info_palm_detector+0x4>)
3400e956:	4770      	bx	lr
3400e958:	340a90fc 	.word	0x340a90fc

3400e95c <LL_ATON_Output_Buffers_Info_palm_detector>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400e95c:	4800      	ldr	r0, [pc, #0]	@ (3400e960 <LL_ATON_Output_Buffers_Info_palm_detector+0x4>)
3400e95e:	4770      	bx	lr
3400e960:	340a902c 	.word	0x340a902c

3400e964 <LL_ATON_Internal_Buffers_Info_palm_detector>:
      .name = NULL,
    }
  };

  return buff_info;
}
3400e964:	4800      	ldr	r0, [pc, #0]	@ (3400e968 <LL_ATON_Internal_Buffers_Info_palm_detector+0x4>)
3400e966:	4770      	bx	lr
3400e968:	340a5784 	.word	0x340a5784

3400e96c <APS256XX_EnableMemoryMappedMode>:
  * @param  BurstType Type of burst used for the access
  * @retval Memory status
  */
int32_t APS256XX_EnableMemoryMappedMode(XSPI_HandleTypeDef *Ctx, uint32_t ReadLatencyCode, uint32_t WriteLatencyCode,
                                        uint32_t IOMode, uint32_t BurstType)
{
3400e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400e970:	b098      	sub	sp, #96	@ 0x60
3400e972:	4605      	mov	r5, r0
3400e974:	4617      	mov	r7, r2
3400e976:	460e      	mov	r6, r1
  XSPI_RegularCmdTypeDef   sCommand = {0};
3400e978:	223c      	movs	r2, #60	@ 0x3c
3400e97a:	2100      	movs	r1, #0
3400e97c:	a806      	add	r0, sp, #24
{
3400e97e:	4698      	mov	r8, r3
3400e980:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
  XSPI_RegularCmdTypeDef   sCommand = {0};
3400e982:	f011 fc69 	bl	34020258 <memset>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3400e986:	2210      	movs	r2, #16
3400e988:	2100      	movs	r1, #0
3400e98a:	a801      	add	r0, sp, #4
3400e98c:	f011 fc64 	bl	34020258 <memset>

  /* Initialize the write command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_WRITE_CFG;
3400e990:	2302      	movs	r3, #2
3400e992:	9305      	str	r3, [sp, #20]
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
3400e994:	2304      	movs	r3, #4
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400e996:	2c00      	cmp	r4, #0
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
3400e998:	9308      	str	r3, [sp, #32]
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400e99a:	bf14      	ite	ne
3400e99c:	2380      	movne	r3, #128	@ 0x80
3400e99e:	23a0      	moveq	r3, #160	@ 0xa0
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400e9a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = ((BurstType == 0U) ? APS256XX_WRITE_LINEAR_BURST_CMD : APS256XX_WRITE_CMD);
3400e9a4:	9307      	str	r3, [sp, #28]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400e9a6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400e9aa:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400e9ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
3400e9b2:	f1b8 0f00 	cmp.w	r8, #0
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400e9b6:	930e      	str	r3, [sp, #56]	@ 0x38
  sCommand.DataMode            = ((IOMode == 0U) ? HAL_XSPI_DATA_8_LINES : HAL_XSPI_DATA_16_LINES);
3400e9b8:	bf14      	ite	ne
3400e9ba:	f04f 63a0 	movne.w	r3, #83886080	@ 0x5000000
3400e9be:	f04f 6380 	moveq.w	r3, #67108864	@ 0x4000000
3400e9c2:	9313      	str	r3, [sp, #76]	@ 0x4c
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
3400e9c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3400e9c8:	9315      	str	r3, [sp, #84]	@ 0x54
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
3400e9ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400e9ce:	3f01      	subs	r7, #1
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400e9d0:	f241 3288 	movw	r2, #5000	@ 0x1388
3400e9d4:	4628      	mov	r0, r5
3400e9d6:	a905      	add	r1, sp, #20
  sCommand.DummyCycles         = (WriteLatencyCode - 1U);
3400e9d8:	9716      	str	r7, [sp, #88]	@ 0x58
  sCommand.DQSMode             = HAL_XSPI_DQS_ENABLE;
3400e9da:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400e9dc:	f00d ffc4 	bl	3401c968 <HAL_XSPI_Command>
3400e9e0:	b120      	cbz	r0, 3400e9ec <APS256XX_EnableMemoryMappedMode+0x80>
  {
    return APS256XX_ERROR;
3400e9e2:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
3400e9e6:	b018      	add	sp, #96	@ 0x60
3400e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  sCommand.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400e9ec:	2301      	movs	r3, #1
3400e9ee:	9305      	str	r3, [sp, #20]
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
3400e9f0:	fab4 f384 	clz	r3, r4
3400e9f4:	095b      	lsrs	r3, r3, #5
3400e9f6:	015b      	lsls	r3, r3, #5
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
3400e9f8:	3e01      	subs	r6, #1
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400e9fa:	f241 3288 	movw	r2, #5000	@ 0x1388
3400e9fe:	4628      	mov	r0, r5
3400ea00:	a905      	add	r1, sp, #20
  sCommand.Instruction   = ((BurstType == 0U) ? APS256XX_READ_LINEAR_BURST_CMD : APS256XX_READ_CMD);
3400ea02:	9307      	str	r3, [sp, #28]
  sCommand.DummyCycles   = (ReadLatencyCode - 1U);
3400ea04:	9616      	str	r6, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ea06:	f00d ffaf 	bl	3401c968 <HAL_XSPI_Command>
3400ea0a:	2800      	cmp	r0, #0
3400ea0c:	d1e9      	bne.n	3400e9e2 <APS256XX_EnableMemoryMappedMode+0x76>
  sMemMappedCfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400ea0e:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
3400ea10:	a901      	add	r1, sp, #4
3400ea12:	4628      	mov	r0, r5
3400ea14:	f00e f9d6 	bl	3401cdc4 <HAL_XSPI_MemoryMapped>
3400ea18:	3800      	subs	r0, #0
3400ea1a:	bf18      	it	ne
3400ea1c:	2001      	movne	r0, #1
3400ea1e:	4240      	negs	r0, r0
3400ea20:	e7e1      	b.n	3400e9e6 <APS256XX_EnableMemoryMappedMode+0x7a>

3400ea22 <APS256XX_WriteReg>:
  * @param  Address Register address
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t APS256XX_WriteReg(XSPI_HandleTypeDef *Ctx, uint32_t Address, uint8_t Value)
{
3400ea22:	b530      	push	{r4, r5, lr}
3400ea24:	b097      	sub	sp, #92	@ 0x5c
3400ea26:	460d      	mov	r5, r1
3400ea28:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef sCommand = {0};
3400ea2a:	2100      	movs	r1, #0
{
3400ea2c:	f88d 2007 	strb.w	r2, [sp, #7]
  XSPI_RegularCmdTypeDef sCommand = {0};
3400ea30:	a803      	add	r0, sp, #12
3400ea32:	224c      	movs	r2, #76	@ 0x4c
3400ea34:	f011 fc10 	bl	34020258 <memset>
  /* Initialize the write register command */
  sCommand.OperationType       = HAL_XSPI_OPTYPE_COMMON_CFG;
  sCommand.InstructionMode     = HAL_XSPI_INSTRUCTION_8_LINES;
  sCommand.InstructionWidth    = HAL_XSPI_INSTRUCTION_8_BITS;
  sCommand.InstructionDTRMode  = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
3400ea38:	23c0      	movs	r3, #192	@ 0xc0
3400ea3a:	2204      	movs	r2, #4
  sCommand.AddressMode         = HAL_XSPI_ADDRESS_8_LINES;
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400ea3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  sCommand.Instruction         = APS256XX_WRITE_REG_CMD;
3400ea40:	e9cd 3205 	strd	r3, r2, [sp, #20]
  sCommand.AddressWidth        = HAL_XSPI_ADDRESS_32_BITS;
3400ea44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400ea48:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  sCommand.AddressDTRMode      = HAL_XSPI_ADDRESS_DTR_ENABLE;
3400ea4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400ea50:	930c      	str	r3, [sp, #48]	@ 0x30
  sCommand.Address             = Address;
  sCommand.AlternateBytesMode  = HAL_XSPI_ALT_BYTES_NONE;
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
3400ea52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  sCommand.Address             = Address;
3400ea56:	9509      	str	r5, [sp, #36]	@ 0x24
  sCommand.DataMode            = HAL_XSPI_DATA_8_LINES;
3400ea58:	9311      	str	r3, [sp, #68]	@ 0x44
  sCommand.DataDTRMode         = HAL_XSPI_DATA_DTR_ENABLE;
  sCommand.DataLength          = 2;
3400ea5a:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
3400ea5e:	2302      	movs	r3, #2
 #if defined (XSPI_CCR_SIOO)
  sCommand.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Configure the command */
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ea60:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ea64:	4620      	mov	r0, r4
3400ea66:	a903      	add	r1, sp, #12
  sCommand.DataLength          = 2;
3400ea68:	e9cd 3512 	strd	r3, r5, [sp, #72]	@ 0x48
  if (HAL_XSPI_Command(Ctx, &sCommand, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ea6c:	f00d ff7c 	bl	3401c968 <HAL_XSPI_Command>
3400ea70:	b960      	cbnz	r0, 3400ea8c <APS256XX_WriteReg+0x6a>
  {
    return APS256XX_ERROR;
  }

  /* Transmission of the data */
  if (HAL_XSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ea72:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ea76:	4620      	mov	r0, r4
3400ea78:	f10d 0107 	add.w	r1, sp, #7
3400ea7c:	f00e f88c 	bl	3401cb98 <HAL_XSPI_Transmit>
3400ea80:	3800      	subs	r0, #0
3400ea82:	bf18      	it	ne
3400ea84:	2001      	movne	r0, #1
3400ea86:	4240      	negs	r0, r0
  {
    return APS256XX_ERROR;
  }

  return APS256XX_OK;
}
3400ea88:	b017      	add	sp, #92	@ 0x5c
3400ea8a:	bd30      	pop	{r4, r5, pc}
    return APS256XX_ERROR;
3400ea8c:	f04f 30ff 	mov.w	r0, #4294967295
3400ea90:	e7fa      	b.n	3400ea88 <APS256XX_WriteReg+0x66>

3400ea92 <MX66UW1G45G_GetFlashInfo>:
  */
int32_t MX66UW1G45G_GetFlashInfo(MX66UW1G45G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize = MX66UW1G45G_FLASH_SIZE;
  pInfo->EraseSectorSize = MX66UW1G45G_BLOCK_64K;
3400ea92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
3400ea96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400ea9a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_64K);
  pInfo->EraseSubSectorSize = MX66UW1G45G_BLOCK_4K;
3400ea9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3400eaa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400eaa6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
3400eaaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
  pInfo->ProgPageSize = MX66UW1G45G_PAGE_SIZE;
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400eaae:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSubSector1Size = MX66UW1G45G_BLOCK_4K;
3400eab2:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_BLOCK_4K);
3400eab6:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber = (MX66UW1G45G_FLASH_SIZE / MX66UW1G45G_PAGE_SIZE);
3400eab8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3400eabc:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX66UW1G45G_OK;
};
3400eac0:	2000      	movs	r0, #0
3400eac2:	4770      	bx	lr

3400eac4 <MX66UW1G45G_AutoPollingMemReady>:
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX66UW1G45G_AutoPollingMemReady(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                        MX66UW1G45G_Transfer_t Rate)
{
3400eac4:	b570      	push	{r4, r5, r6, lr}
3400eac6:	460d      	mov	r5, r1
3400eac8:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
3400eaca:	2100      	movs	r1, #0
{
3400eacc:	4606      	mov	r6, r0
3400eace:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400ead0:	a805      	add	r0, sp, #20
3400ead2:	224c      	movs	r2, #76	@ 0x4c
3400ead4:	f011 fbc0 	bl	34020258 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400ead8:	2214      	movs	r2, #20
3400eada:	2100      	movs	r1, #0
3400eadc:	4668      	mov	r0, sp
3400eade:	f011 fbbb 	bl	34020258 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400eae2:	b92d      	cbnz	r5, 3400eaf0 <MX66UW1G45G_AutoPollingMemReady+0x2c>
3400eae4:	2c01      	cmp	r4, #1
3400eae6:	d14d      	bne.n	3400eb84 <MX66UW1G45G_AutoPollingMemReady+0xc0>
  {
    return MX66UW1G45G_ERROR;
3400eae8:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400eaec:	b018      	add	sp, #96	@ 0x60
3400eaee:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400eaf0:	2204      	movs	r2, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400eaf2:	f104 3cff 	add.w	ip, r4, #4294967295
3400eaf6:	f1dc 0300 	rsbs	r3, ip, #0
3400eafa:	eb43 030c 	adc.w	r3, r3, ip
3400eafe:	00db      	lsls	r3, r3, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400eb00:	9208      	str	r2, [sp, #32]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400eb02:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400eb04:	2d00      	cmp	r5, #0
3400eb06:	d040      	beq.n	3400eb8a <MX66UW1G45G_AutoPollingMemReady+0xc6>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400eb08:	2310      	movs	r3, #16
3400eb0a:	f240 52fa 	movw	r2, #1530	@ 0x5fa
3400eb0e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400eb10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400eb14:	1e60      	subs	r0, r4, #1
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400eb16:	930c      	str	r3, [sp, #48]	@ 0x30
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400eb18:	4243      	negs	r3, r0
3400eb1a:	4143      	adcs	r3, r0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400eb1c:	9207      	str	r2, [sp, #28]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400eb1e:	02da      	lsls	r2, r3, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400eb20:	920e      	str	r2, [sp, #56]	@ 0x38
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400eb22:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400eb26:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400eb28:	920d      	str	r2, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400eb2a:	bf14      	ite	ne
3400eb2c:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
3400eb30:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400eb34:	ea4f 63c3 	mov.w	r3, r3, lsl #27
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400eb38:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400eb3a:	9315      	str	r3, [sp, #84]	@ 0x54
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400eb3c:	d02d      	beq.n	3400eb9a <MX66UW1G45G_AutoPollingMemReady+0xd6>
3400eb3e:	2c01      	cmp	r4, #1
3400eb40:	d126      	bne.n	3400eb90 <MX66UW1G45G_AutoPollingMemReady+0xcc>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400eb42:	2305      	movs	r3, #5
3400eb44:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400eb46:	2202      	movs	r2, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400eb48:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400eb4c:	9317      	str	r3, [sp, #92]	@ 0x5c
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400eb4e:	2301      	movs	r3, #1
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400eb50:	2110      	movs	r1, #16
  s_config.MatchMask = MX66UW1G45G_SR_WIP;
3400eb52:	9301      	str	r3, [sp, #4]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400eb54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3400eb58:	9214      	str	r2, [sp, #80]	@ 0x50
3400eb5a:	e9cd 3103 	strd	r3, r1, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400eb5e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400eb62:	4630      	mov	r0, r6
3400eb64:	a905      	add	r1, sp, #20
3400eb66:	f00d feff 	bl	3401c968 <HAL_XSPI_Command>
3400eb6a:	2800      	cmp	r0, #0
3400eb6c:	d1bc      	bne.n	3400eae8 <MX66UW1G45G_AutoPollingMemReady+0x24>
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400eb6e:	f241 3288 	movw	r2, #5000	@ 0x1388
3400eb72:	4669      	mov	r1, sp
3400eb74:	4630      	mov	r0, r6
3400eb76:	f00e f8a9 	bl	3401cccc <HAL_XSPI_AutoPolling>
3400eb7a:	3800      	subs	r0, #0
3400eb7c:	bf18      	it	ne
3400eb7e:	2001      	movne	r0, #1
3400eb80:	4240      	negs	r0, r0
3400eb82:	e7b3      	b.n	3400eaec <MX66UW1G45G_AutoPollingMemReady+0x28>
3400eb84:	2201      	movs	r2, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400eb86:	462b      	mov	r3, r5
3400eb88:	e7ba      	b.n	3400eb00 <MX66UW1G45G_AutoPollingMemReady+0x3c>
3400eb8a:	2205      	movs	r2, #5
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400eb8c:	462b      	mov	r3, r5
3400eb8e:	e7c1      	b.n	3400eb14 <MX66UW1G45G_AutoPollingMemReady+0x50>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400eb90:	2304      	movs	r3, #4
3400eb92:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400eb94:	2201      	movs	r2, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400eb96:	2300      	movs	r3, #0
3400eb98:	e7d8      	b.n	3400eb4c <MX66UW1G45G_AutoPollingMemReady+0x88>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400eb9a:	2c01      	cmp	r4, #1
3400eb9c:	d1fa      	bne.n	3400eb94 <MX66UW1G45G_AutoPollingMemReady+0xd0>
3400eb9e:	e7d2      	b.n	3400eb46 <MX66UW1G45G_AutoPollingMemReady+0x82>

3400eba0 <MX66UW1G45G_EnableSTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableSTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                              MX66UW1G45G_AddressWidth_t AddressWidth)
{
3400eba0:	b570      	push	{r4, r5, r6, lr}
3400eba2:	460c      	mov	r4, r1
3400eba4:	b098      	sub	sp, #96	@ 0x60
  XSPI_RegularCmdTypeDef s_command = {0};
3400eba6:	2100      	movs	r1, #0
{
3400eba8:	4606      	mov	r6, r0
3400ebaa:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400ebac:	a805      	add	r0, sp, #20
3400ebae:	224c      	movs	r2, #76	@ 0x4c
3400ebb0:	f011 fb52 	bl	34020258 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400ebb4:	2210      	movs	r2, #16
3400ebb6:	2100      	movs	r1, #0
3400ebb8:	a801      	add	r0, sp, #4
3400ebba:	f011 fb4d 	bl	34020258 <memset>

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX66UW1G45G_OPI_MODE) && (AddressWidth == MX66UW1G45G_3BYTES_SIZE))
3400ebbe:	2c01      	cmp	r4, #1
3400ebc0:	d144      	bne.n	3400ec4c <MX66UW1G45G_EnableSTRMemoryMappedMode+0xac>
3400ebc2:	b91d      	cbnz	r5, 3400ebcc <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2c>
  {
    return MX66UW1G45G_ERROR;
3400ebc4:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400ebc8:	b018      	add	sp, #96	@ 0x60
3400ebca:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400ebcc:	9405      	str	r4, [sp, #20]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400ebce:	2204      	movs	r2, #4
3400ebd0:	2310      	movs	r3, #16
3400ebd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
3400ebd6:	f64e 4213 	movw	r2, #60435	@ 0xec13
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400ebda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
                               : HAL_XSPI_ADDRESS_32_BITS;
3400ebde:	2d00      	cmp	r5, #0
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400ebe0:	930c      	str	r3, [sp, #48]	@ 0x30
                               : HAL_XSPI_ADDRESS_32_BITS;
3400ebe2:	bf14      	ite	ne
3400ebe4:	f44f 5340 	movne.w	r3, #12288	@ 0x3000
3400ebe8:	f44f 5300 	moveq.w	r3, #8192	@ 0x2000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ebec:	2c00      	cmp	r4, #0
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ebee:	9207      	str	r2, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ebf0:	bf0c      	ite	eq
3400ebf2:	f04f 7280 	moveq.w	r2, #16777216	@ 0x1000000
3400ebf6:	f04f 6280 	movne.w	r2, #67108864	@ 0x4000000
  s_command.AddressWidth = (AddressWidth == MX66UW1G45G_3BYTES_SIZE)
3400ebfa:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ebfc:	bf0c      	ite	eq
3400ebfe:	2308      	moveq	r3, #8
3400ec00:	230a      	movne	r3, #10
3400ec02:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ec04:	4630      	mov	r0, r6
3400ec06:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ec0a:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
3400ec0c:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ec0e:	f00d feab 	bl	3401c968 <HAL_XSPI_Command>
3400ec12:	2800      	cmp	r0, #0
3400ec14:	d1d6      	bne.n	3400ebc4 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x24>
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
3400ec16:	2302      	movs	r3, #2
3400ec18:	9305      	str	r3, [sp, #20]
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400ec1a:	bb1c      	cbnz	r4, 3400ec64 <MX66UW1G45G_EnableSTRMemoryMappedMode+0xc4>
3400ec1c:	2d00      	cmp	r5, #0
3400ec1e:	bf18      	it	ne
3400ec20:	2312      	movne	r3, #18
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ec22:	9307      	str	r3, [sp, #28]
  s_command.DummyCycles = 0U;
3400ec24:	2300      	movs	r3, #0
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ec26:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ec2a:	4630      	mov	r0, r6
3400ec2c:	a905      	add	r1, sp, #20
  s_command.DummyCycles = 0U;
3400ec2e:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ec30:	f00d fe9a 	bl	3401c968 <HAL_XSPI_Command>
3400ec34:	2800      	cmp	r0, #0
3400ec36:	d1c5      	bne.n	3400ebc4 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x24>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400ec38:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400ec3a:	a901      	add	r1, sp, #4
3400ec3c:	4630      	mov	r0, r6
3400ec3e:	f00e f8c1 	bl	3401cdc4 <HAL_XSPI_MemoryMapped>
3400ec42:	3800      	subs	r0, #0
3400ec44:	bf18      	it	ne
3400ec46:	2001      	movne	r0, #1
3400ec48:	4240      	negs	r0, r0
3400ec4a:	e7bd      	b.n	3400ebc8 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x28>
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400ec4c:	2301      	movs	r3, #1
3400ec4e:	9305      	str	r3, [sp, #20]
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400ec50:	2c00      	cmp	r4, #0
3400ec52:	d1bc      	bne.n	3400ebce <MX66UW1G45G_EnableSTRMemoryMappedMode+0x2e>
                              : MX66UW1G45G_OCTA_READ_CMD;
3400ec54:	2d00      	cmp	r5, #0
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400ec56:	9308      	str	r3, [sp, #32]
                              : MX66UW1G45G_OCTA_READ_CMD;
3400ec58:	bf14      	ite	ne
3400ec5a:	220c      	movne	r2, #12
3400ec5c:	220b      	moveq	r2, #11
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400ec5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400ec62:	e7bc      	b.n	3400ebde <MX66UW1G45G_EnableSTRMemoryMappedMode+0x3e>
                              : MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400ec64:	f241 23ed 	movw	r3, #4845	@ 0x12ed
3400ec68:	e7db      	b.n	3400ec22 <MX66UW1G45G_EnableSTRMemoryMappedMode+0x82>

3400ec6a <MX66UW1G45G_EnableDTRMemoryMappedMode>:
  * @param  AddressWidth Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval XSPI memory status
  */
int32_t MX66UW1G45G_EnableDTRMemoryMappedMode(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode)
{
3400ec6a:	b530      	push	{r4, r5, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  XSPI_RegularCmdTypeDef s_command = {0};
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400ec6c:	2510      	movs	r5, #16
{
3400ec6e:	b099      	sub	sp, #100	@ 0x64
3400ec70:	4604      	mov	r4, r0
  XSPI_RegularCmdTypeDef s_command = {0};
3400ec72:	223c      	movs	r2, #60	@ 0x3c
3400ec74:	2100      	movs	r1, #0
3400ec76:	a806      	add	r0, sp, #24
3400ec78:	f011 faee 	bl	34020258 <memset>
  XSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
3400ec7c:	462a      	mov	r2, r5
3400ec7e:	2100      	movs	r1, #0
3400ec80:	a801      	add	r0, sp, #4
3400ec82:	f011 fae9 	bl	34020258 <memset>

  /* Initialize the read command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3400ec86:	2301      	movs	r3, #1
3400ec88:	9305      	str	r3, [sp, #20]
  s_command.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3400ec8a:	2304      	movs	r3, #4
3400ec8c:	9308      	str	r3, [sp, #32]
  s_command.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3400ec8e:	2308      	movs	r3, #8
  s_command.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3400ec90:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  s_command.Instruction = MX66UW1G45G_OCTA_READ_DTR_CMD;
3400ec94:	f64e 6311 	movw	r3, #60945	@ 0xee11
3400ec98:	9307      	str	r3, [sp, #28]
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400ec9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400ec9e:	f44f 6e00 	mov.w	lr, #2048	@ 0x800
  s_command.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3400eca2:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400eca4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3400eca8:	e9cd 3e0d 	strd	r3, lr, [sp, #52]	@ 0x34
  s_command.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400ecac:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  s_command.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400ecb0:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  s_command.DataMode = HAL_XSPI_DATA_8_LINES;
3400ecb4:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DummyCycles = DUMMY_CYCLES_READ_OCTAL_DTR;
3400ecb6:	230a      	movs	r3, #10
3400ecb8:	e9cd 1315 	strd	r1, r3, [sp, #84]	@ 0x54
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3400ecbc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ecc0:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ecc4:	4620      	mov	r0, r4
3400ecc6:	a905      	add	r1, sp, #20
  s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3400ecc8:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ecca:	f00d fe4d 	bl	3401c968 <HAL_XSPI_Command>
3400ecce:	b118      	cbz	r0, 3400ecd8 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6e>
  {
    return MX66UW1G45G_ERROR;
3400ecd0:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400ecd4:	b019      	add	sp, #100	@ 0x64
3400ecd6:	bd30      	pop	{r4, r5, pc}
  s_command.OperationType = HAL_XSPI_OPTYPE_WRITE_CFG;
3400ecd8:	2302      	movs	r3, #2
3400ecda:	9305      	str	r3, [sp, #20]
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400ecdc:	f241 23ed 	movw	r3, #4845	@ 0x12ed
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3400ece0:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ece4:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ece8:	4620      	mov	r0, r4
3400ecea:	a905      	add	r1, sp, #20
  s_command.Instruction = MX66UW1G45G_OCTA_PAGE_PROG_CMD;
3400ecec:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ecee:	f00d fe3b 	bl	3401c968 <HAL_XSPI_Command>
3400ecf2:	2800      	cmp	r0, #0
3400ecf4:	d1ec      	bne.n	3400ecd0 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x66>
  s_mem_mapped_cfg.TimeOutActivation = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3400ecf6:	9001      	str	r0, [sp, #4]
  if (HAL_XSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
3400ecf8:	a901      	add	r1, sp, #4
3400ecfa:	4620      	mov	r0, r4
3400ecfc:	f00e f862 	bl	3401cdc4 <HAL_XSPI_MemoryMapped>
3400ed00:	3800      	subs	r0, #0
3400ed02:	bf18      	it	ne
3400ed04:	2001      	movne	r0, #1
3400ed06:	4240      	negs	r0, r0
3400ed08:	e7e4      	b.n	3400ecd4 <MX66UW1G45G_EnableDTRMemoryMappedMode+0x6a>

3400ed0a <MX66UW1G45G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_WriteEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400ed0a:	b5f0      	push	{r4, r5, r6, r7, lr}
3400ed0c:	460c      	mov	r4, r1
3400ed0e:	b099      	sub	sp, #100	@ 0x64
  XSPI_RegularCmdTypeDef s_command = {0};
3400ed10:	2100      	movs	r1, #0
{
3400ed12:	4606      	mov	r6, r0
3400ed14:	4615      	mov	r5, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400ed16:	a805      	add	r0, sp, #20
3400ed18:	224c      	movs	r2, #76	@ 0x4c
3400ed1a:	f011 fa9d 	bl	34020258 <memset>
  XSPI_AutoPollingTypeDef s_config = {0};
3400ed1e:	2214      	movs	r2, #20
3400ed20:	2100      	movs	r1, #0
3400ed22:	4668      	mov	r0, sp
3400ed24:	f011 fa98 	bl	34020258 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400ed28:	b92c      	cbnz	r4, 3400ed36 <MX66UW1G45G_WriteEnable+0x2c>
3400ed2a:	2d01      	cmp	r5, #1
3400ed2c:	d15d      	bne.n	3400edea <MX66UW1G45G_WriteEnable+0xe0>
  {
    return MX66UW1G45G_ERROR;
3400ed2e:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400ed32:	b019      	add	sp, #100	@ 0x64
3400ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ed36:	2204      	movs	r2, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400ed38:	1e69      	subs	r1, r5, #1
3400ed3a:	424b      	negs	r3, r1
3400ed3c:	414b      	adcs	r3, r1
3400ed3e:	00db      	lsls	r3, r3, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400ed40:	9208      	str	r2, [sp, #32]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ed42:	930a      	str	r3, [sp, #40]	@ 0x28
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400ed44:	2c00      	cmp	r4, #0
3400ed46:	d053      	beq.n	3400edf0 <MX66UW1G45G_WriteEnable+0xe6>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400ed48:	2310      	movs	r3, #16
3400ed4a:	9309      	str	r3, [sp, #36]	@ 0x24
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
3400ed4c:	f240 63f9 	movw	r3, #1785	@ 0x6f9
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ed50:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ed54:	4630      	mov	r0, r6
3400ed56:	a905      	add	r1, sp, #20
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ed58:	9307      	str	r3, [sp, #28]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ed5a:	f00d fe05 	bl	3401c968 <HAL_XSPI_Command>
3400ed5e:	4603      	mov	r3, r0
3400ed60:	2800      	cmp	r0, #0
3400ed62:	d1e4      	bne.n	3400ed2e <MX66UW1G45G_WriteEnable+0x24>
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ed64:	2c00      	cmp	r4, #0
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400ed66:	f105 32ff 	add.w	r2, r5, #4294967295
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ed6a:	f240 5cfa 	movw	ip, #1530	@ 0x5fa
3400ed6e:	bf12      	itee	ne
3400ed70:	f44f 6e80 	movne.w	lr, #1024	@ 0x400
3400ed74:	f04f 0c05 	moveq.w	ip, #5
3400ed78:	f04f 0e00 	moveq.w	lr, #0
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400ed7c:	4257      	negs	r7, r2
3400ed7e:	4157      	adcs	r7, r2
3400ed80:	02ff      	lsls	r7, r7, #11
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ed82:	2c00      	cmp	r4, #0
3400ed84:	d036      	beq.n	3400edf4 <MX66UW1G45G_WriteEnable+0xea>
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400ed86:	2d01      	cmp	r5, #1
3400ed88:	d03a      	beq.n	3400ee00 <MX66UW1G45G_WriteEnable+0xf6>
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ed8a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400ed8e:	2404      	movs	r4, #4
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400ed90:	2101      	movs	r1, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400ed92:	461a      	mov	r2, r3
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400ed94:	f44f 5540 	mov.w	r5, #12288	@ 0x3000
3400ed98:	950d      	str	r5, [sp, #52]	@ 0x34
  s_command.Address = 0U;
3400ed9a:	2500      	movs	r5, #0
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ed9c:	9013      	str	r0, [sp, #76]	@ 0x4c
3400ed9e:	9114      	str	r1, [sp, #80]	@ 0x50
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400eda0:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400eda2:	4630      	mov	r0, r6
3400eda4:	f241 3288 	movw	r2, #5000	@ 0x1388
3400eda8:	a905      	add	r1, sp, #20
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400edaa:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
3400edae:	f8cd c01c 	str.w	ip, [sp, #28]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_NONE : HAL_XSPI_ADDRESS_8_LINES;
3400edb2:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400edb6:	970e      	str	r7, [sp, #56]	@ 0x38
  s_command.Address = 0U;
3400edb8:	950b      	str	r5, [sp, #44]	@ 0x2c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400edba:	f00d fdd5 	bl	3401c968 <HAL_XSPI_Command>
3400edbe:	2800      	cmp	r0, #0
3400edc0:	d1b5      	bne.n	3400ed2e <MX66UW1G45G_WriteEnable+0x24>
  s_config.MatchValue = 2U;
3400edc2:	2302      	movs	r3, #2
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400edc4:	2210      	movs	r2, #16
  s_config.MatchMask = 2U;
3400edc6:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400edca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  s_config.MatchMode = HAL_XSPI_MATCH_MODE_AND;
3400edce:	9002      	str	r0, [sp, #8]
  s_config.AutomaticStop = HAL_XSPI_AUTOMATIC_STOP_ENABLE;
3400edd0:	e9cd 3203 	strd	r3, r2, [sp, #12]
  if (HAL_XSPI_AutoPolling(Ctx, &s_config, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400edd4:	4669      	mov	r1, sp
3400edd6:	f241 3288 	movw	r2, #5000	@ 0x1388
3400edda:	4630      	mov	r0, r6
3400eddc:	f00d ff76 	bl	3401cccc <HAL_XSPI_AutoPolling>
3400ede0:	1b40      	subs	r0, r0, r5
3400ede2:	bf18      	it	ne
3400ede4:	2001      	movne	r0, #1
3400ede6:	4240      	negs	r0, r0
3400ede8:	e7a3      	b.n	3400ed32 <MX66UW1G45G_WriteEnable+0x28>
3400edea:	2201      	movs	r2, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400edec:	4623      	mov	r3, r4
3400edee:	e7a7      	b.n	3400ed40 <MX66UW1G45G_WriteEnable+0x36>
                              : MX66UW1G45G_OCTA_WRITE_ENABLE_CMD;
3400edf0:	2306      	movs	r3, #6
3400edf2:	e7ad      	b.n	3400ed50 <MX66UW1G45G_WriteEnable+0x46>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400edf4:	2d01      	cmp	r5, #1
3400edf6:	d00c      	beq.n	3400ee12 <MX66UW1G45G_WriteEnable+0x108>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400edf8:	4623      	mov	r3, r4
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400edfa:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400edfe:	e7c7      	b.n	3400ed90 <MX66UW1G45G_WriteEnable+0x86>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400ee00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ee04:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
3400ee08:	2405      	movs	r4, #5
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400ee0a:	2102      	movs	r1, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400ee0c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
3400ee10:	e7c0      	b.n	3400ed94 <MX66UW1G45G_WriteEnable+0x8a>
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DATA_DTR_ENABLE : HAL_XSPI_DATA_DTR_DISABLE;
3400ee12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ee16:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
3400ee1a:	e7f6      	b.n	3400ee0a <MX66UW1G45G_WriteEnable+0x100>

3400ee1c <MX66UW1G45G_WriteCfg2Register>:
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX66UW1G45G_WriteCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                      MX66UW1G45G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
3400ee1c:	b5f0      	push	{r4, r5, r6, r7, lr}
3400ee1e:	460d      	mov	r5, r1
3400ee20:	b095      	sub	sp, #84	@ 0x54
3400ee22:	4606      	mov	r6, r0
3400ee24:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400ee26:	2100      	movs	r1, #0
3400ee28:	224c      	movs	r2, #76	@ 0x4c
3400ee2a:	a801      	add	r0, sp, #4
{
3400ee2c:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400ee2e:	f011 fa13 	bl	34020258 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400ee32:	b92d      	cbnz	r5, 3400ee40 <MX66UW1G45G_WriteCfg2Register+0x24>
3400ee34:	2c01      	cmp	r4, #1
3400ee36:	d140      	bne.n	3400eeba <MX66UW1G45G_WriteCfg2Register+0x9e>
  {
    return MX66UW1G45G_ERROR;
3400ee38:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400ee3c:	b015      	add	sp, #84	@ 0x54
3400ee3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ee40:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400ee42:	1e61      	subs	r1, r4, #1
3400ee44:	424a      	negs	r2, r1
3400ee46:	414a      	adcs	r2, r1
3400ee48:	00d2      	lsls	r2, r2, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400ee4a:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ee4c:	9206      	str	r2, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400ee4e:	2d00      	cmp	r5, #0
3400ee50:	d036      	beq.n	3400eec0 <MX66UW1G45G_WriteCfg2Register+0xa4>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400ee52:	2310      	movs	r3, #16
3400ee54:	f247 228d 	movw	r2, #29325	@ 0x728d
3400ee58:	9305      	str	r3, [sp, #20]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400ee5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400ee5e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400ee60:	1e63      	subs	r3, r4, #1
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ee62:	9203      	str	r2, [sp, #12]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400ee64:	425a      	negs	r2, r3
3400ee66:	415a      	adcs	r2, r3
3400ee68:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ee6a:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400ee6c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ee70:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400ee72:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ee74:	bf14      	ite	ne
3400ee76:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400ee7a:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400ee7e:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = WriteAddr;
3400ee82:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ee84:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ee86:	9211      	str	r2, [sp, #68]	@ 0x44
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400ee88:	d01e      	beq.n	3400eec8 <MX66UW1G45G_WriteCfg2Register+0xac>
3400ee8a:	2c01      	cmp	r4, #1
3400ee8c:	bf0c      	ite	eq
3400ee8e:	2302      	moveq	r3, #2
3400ee90:	2301      	movne	r3, #1
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ee92:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ee96:	4630      	mov	r0, r6
3400ee98:	a901      	add	r1, sp, #4
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400ee9a:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ee9c:	f00d fd64 	bl	3401c968 <HAL_XSPI_Command>
3400eea0:	2800      	cmp	r0, #0
3400eea2:	d1c9      	bne.n	3400ee38 <MX66UW1G45G_WriteCfg2Register+0x1c>
  if (HAL_XSPI_Transmit(Ctx, &Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400eea4:	f241 3288 	movw	r2, #5000	@ 0x1388
3400eea8:	4630      	mov	r0, r6
3400eeaa:	a91a      	add	r1, sp, #104	@ 0x68
3400eeac:	f00d fe74 	bl	3401cb98 <HAL_XSPI_Transmit>
3400eeb0:	3800      	subs	r0, #0
3400eeb2:	bf18      	it	ne
3400eeb4:	2001      	movne	r0, #1
3400eeb6:	4240      	negs	r0, r0
3400eeb8:	e7c0      	b.n	3400ee3c <MX66UW1G45G_WriteCfg2Register+0x20>
3400eeba:	2301      	movs	r3, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400eebc:	462a      	mov	r2, r5
3400eebe:	e7c4      	b.n	3400ee4a <MX66UW1G45G_WriteCfg2Register+0x2e>
3400eec0:	2272      	movs	r2, #114	@ 0x72
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400eec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400eec6:	e7ca      	b.n	3400ee5e <MX66UW1G45G_WriteCfg2Register+0x42>
  s_command.DataLength = (Mode == MX66UW1G45G_SPI_MODE) ? 1U : ((Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U);
3400eec8:	2301      	movs	r3, #1
3400eeca:	e7e2      	b.n	3400ee92 <MX66UW1G45G_WriteCfg2Register+0x76>

3400eecc <MX66UW1G45G_ReadCfg2Register>:
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX66UW1G45G_ReadCfg2Register(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode,
                                     MX66UW1G45G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
3400eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
3400eece:	460d      	mov	r5, r1
3400eed0:	b095      	sub	sp, #84	@ 0x54
3400eed2:	4606      	mov	r6, r0
3400eed4:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400eed6:	2100      	movs	r1, #0
3400eed8:	224c      	movs	r2, #76	@ 0x4c
3400eeda:	a801      	add	r0, sp, #4
{
3400eedc:	461f      	mov	r7, r3
  XSPI_RegularCmdTypeDef s_command = {0};
3400eede:	f011 f9bb 	bl	34020258 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400eee2:	b92d      	cbnz	r5, 3400eef0 <MX66UW1G45G_ReadCfg2Register+0x24>
3400eee4:	2c01      	cmp	r4, #1
3400eee6:	d144      	bne.n	3400ef72 <MX66UW1G45G_ReadCfg2Register+0xa6>
  {
    return MX66UW1G45G_ERROR;
3400eee8:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400eeec:	b015      	add	sp, #84	@ 0x54
3400eeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400eef0:	2304      	movs	r3, #4
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400eef2:	1e61      	subs	r1, r4, #1
3400eef4:	424a      	negs	r2, r1
3400eef6:	414a      	adcs	r2, r1
3400eef8:	00d2      	lsls	r2, r2, #3
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400eefa:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400eefc:	9206      	str	r2, [sp, #24]
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400eefe:	2d00      	cmp	r5, #0
3400ef00:	d03a      	beq.n	3400ef78 <MX66UW1G45G_ReadCfg2Register+0xac>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400ef02:	2310      	movs	r3, #16
3400ef04:	f247 128e 	movw	r2, #29070	@ 0x718e
3400ef08:	9305      	str	r3, [sp, #20]
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400ef0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400ef0e:	9308      	str	r3, [sp, #32]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400ef10:	1e63      	subs	r3, r4, #1
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400ef12:	9203      	str	r2, [sp, #12]
                                 : HAL_XSPI_ADDRESS_DTR_DISABLE;
3400ef14:	425a      	negs	r2, r3
3400ef16:	415a      	adcs	r2, r3
3400ef18:	02d3      	lsls	r3, r2, #11
  s_command.AddressDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ef1a:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400ef1c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ef20:	2d00      	cmp	r5, #0
  s_command.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3400ef22:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ef24:	bf14      	ite	ne
3400ef26:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
3400ef2a:	f04f 7380 	moveq.w	r3, #16777216	@ 0x1000000
                              : HAL_XSPI_DATA_DTR_DISABLE;
3400ef2e:	ea4f 62c2 	mov.w	r2, r2, lsl #27
  s_command.Address = ReadAddr;
3400ef32:	9707      	str	r7, [sp, #28]
  s_command.DataMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_DATA_1_LINE : HAL_XSPI_DATA_8_LINES;
3400ef34:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DataDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400ef36:	9211      	str	r2, [sp, #68]	@ 0x44
                              : ((Rate == MX66UW1G45G_DTR_TRANSFER)
3400ef38:	d027      	beq.n	3400ef8a <MX66UW1G45G_ReadCfg2Register+0xbe>
3400ef3a:	2c01      	cmp	r4, #1
3400ef3c:	d120      	bne.n	3400ef80 <MX66UW1G45G_ReadCfg2Register+0xb4>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400ef3e:	2305      	movs	r3, #5
3400ef40:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400ef42:	2202      	movs	r2, #2
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400ef44:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3400ef48:	9210      	str	r2, [sp, #64]	@ 0x40
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ef4a:	4630      	mov	r0, r6
3400ef4c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ef50:	a901      	add	r1, sp, #4
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400ef52:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ef54:	f00d fd08 	bl	3401c968 <HAL_XSPI_Command>
3400ef58:	2800      	cmp	r0, #0
3400ef5a:	d1c5      	bne.n	3400eee8 <MX66UW1G45G_ReadCfg2Register+0x1c>
  if (HAL_XSPI_Receive(Ctx, Value, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400ef5c:	f241 3288 	movw	r2, #5000	@ 0x1388
3400ef60:	4630      	mov	r0, r6
3400ef62:	991a      	ldr	r1, [sp, #104]	@ 0x68
3400ef64:	f00d fe5c 	bl	3401cc20 <HAL_XSPI_Receive>
3400ef68:	3800      	subs	r0, #0
3400ef6a:	bf18      	it	ne
3400ef6c:	2001      	movne	r0, #1
3400ef6e:	4240      	negs	r0, r0
3400ef70:	e7bc      	b.n	3400eeec <MX66UW1G45G_ReadCfg2Register+0x20>
3400ef72:	2301      	movs	r3, #1
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400ef74:	462a      	mov	r2, r5
3400ef76:	e7c0      	b.n	3400eefa <MX66UW1G45G_ReadCfg2Register+0x2e>
3400ef78:	2271      	movs	r2, #113	@ 0x71
  s_command.AddressMode = (Mode == MX66UW1G45G_SPI_MODE) ? HAL_XSPI_ADDRESS_1_LINE : HAL_XSPI_ADDRESS_8_LINES;
3400ef7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400ef7e:	e7c6      	b.n	3400ef0e <MX66UW1G45G_ReadCfg2Register+0x42>
  s_command.DummyCycles = (Mode == MX66UW1G45G_SPI_MODE)
3400ef80:	2304      	movs	r3, #4
3400ef82:	9312      	str	r3, [sp, #72]	@ 0x48
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400ef84:	2201      	movs	r2, #1
  s_command.DQSMode = (Rate == MX66UW1G45G_DTR_TRANSFER) ? HAL_XSPI_DQS_ENABLE : HAL_XSPI_DQS_DISABLE;
3400ef86:	2300      	movs	r3, #0
3400ef88:	e7de      	b.n	3400ef48 <MX66UW1G45G_ReadCfg2Register+0x7c>
  s_command.DataLength = (Rate == MX66UW1G45G_DTR_TRANSFER) ? 2U : 1U;
3400ef8a:	2c01      	cmp	r4, #1
3400ef8c:	d1fa      	bne.n	3400ef84 <MX66UW1G45G_ReadCfg2Register+0xb8>
3400ef8e:	e7d8      	b.n	3400ef42 <MX66UW1G45G_ReadCfg2Register+0x76>

3400ef90 <MX66UW1G45G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetEnable(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400ef90:	b570      	push	{r4, r5, r6, lr}
3400ef92:	460d      	mov	r5, r1
3400ef94:	b094      	sub	sp, #80	@ 0x50
3400ef96:	4606      	mov	r6, r0
3400ef98:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400ef9a:	2100      	movs	r1, #0
3400ef9c:	224c      	movs	r2, #76	@ 0x4c
3400ef9e:	a801      	add	r0, sp, #4
3400efa0:	f011 f95a 	bl	34020258 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400efa4:	b9d5      	cbnz	r5, 3400efdc <MX66UW1G45G_ResetEnable+0x4c>
3400efa6:	2c01      	cmp	r4, #1
3400efa8:	d01c      	beq.n	3400efe4 <MX66UW1G45G_ResetEnable+0x54>
  /* Initialize the reset enable command */
  s_command.OperationType = HAL_XSPI_OPTYPE_COMMON_CFG;
  s_command.IOSelect =  HAL_XSPI_SELECT_IO_3_0;
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400efaa:	2301      	movs	r3, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400efac:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400efae:	1e63      	subs	r3, r4, #1
3400efb0:	425c      	negs	r4, r3
3400efb2:	415c      	adcs	r4, r3
3400efb4:	00e4      	lsls	r4, r4, #3
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400efb6:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400efb8:	b195      	cbz	r5, 3400efe0 <MX66UW1G45G_ResetEnable+0x50>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400efba:	2310      	movs	r3, #16
3400efbc:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_ENABLE_CMD
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
3400efbe:	f246 6399 	movw	r3, #26265	@ 0x6699
  s_command.DummyCycles = 0U;
  s_command.DQSMode = HAL_XSPI_DQS_DISABLE;


  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400efc2:	f241 3288 	movw	r2, #5000	@ 0x1388
3400efc6:	4630      	mov	r0, r6
3400efc8:	a901      	add	r1, sp, #4
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400efca:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400efcc:	f00d fccc 	bl	3401c968 <HAL_XSPI_Command>
3400efd0:	3800      	subs	r0, #0
3400efd2:	bf18      	it	ne
3400efd4:	2001      	movne	r0, #1
3400efd6:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400efd8:	b014      	add	sp, #80	@ 0x50
3400efda:	bd70      	pop	{r4, r5, r6, pc}
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
3400efdc:	2304      	movs	r3, #4
3400efde:	e7e5      	b.n	3400efac <MX66UW1G45G_ResetEnable+0x1c>
                              : MX66UW1G45G_OCTA_RESET_ENABLE_CMD;
3400efe0:	2366      	movs	r3, #102	@ 0x66
3400efe2:	e7ee      	b.n	3400efc2 <MX66UW1G45G_ResetEnable+0x32>
    return MX66UW1G45G_ERROR;
3400efe4:	f04f 30ff 	mov.w	r0, #4294967295
3400efe8:	e7f6      	b.n	3400efd8 <MX66UW1G45G_ResetEnable+0x48>

3400efea <MX66UW1G45G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX66UW1G45G_ResetMemory(XSPI_HandleTypeDef *Ctx, MX66UW1G45G_Interface_t Mode, MX66UW1G45G_Transfer_t Rate)
{
3400efea:	b570      	push	{r4, r5, r6, lr}
3400efec:	460d      	mov	r5, r1
3400efee:	b094      	sub	sp, #80	@ 0x50
3400eff0:	4606      	mov	r6, r0
3400eff2:	4614      	mov	r4, r2
  XSPI_RegularCmdTypeDef s_command = {0};
3400eff4:	2100      	movs	r1, #0
3400eff6:	224c      	movs	r2, #76	@ 0x4c
3400eff8:	a801      	add	r0, sp, #4
3400effa:	f011 f92d 	bl	34020258 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX66UW1G45G_SPI_MODE) && (Rate == MX66UW1G45G_DTR_TRANSFER))
3400effe:	b9bd      	cbnz	r5, 3400f030 <MX66UW1G45G_ResetMemory+0x46>
3400f000:	2c01      	cmp	r4, #1
3400f002:	d01d      	beq.n	3400f040 <MX66UW1G45G_ResetMemory+0x56>
3400f004:	2301      	movs	r3, #1
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
                                  ? HAL_XSPI_INSTRUCTION_1_LINE
                                  : HAL_XSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
                                     ? HAL_XSPI_INSTRUCTION_DTR_ENABLE
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400f006:	462c      	mov	r4, r5
  s_command.InstructionMode = (Mode == MX66UW1G45G_SPI_MODE)
3400f008:	9304      	str	r3, [sp, #16]
  s_command.InstructionDTRMode = (Rate == MX66UW1G45G_DTR_TRANSFER)
3400f00a:	9406      	str	r4, [sp, #24]
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
                                   ? HAL_XSPI_INSTRUCTION_8_BITS
                                   : HAL_XSPI_INSTRUCTION_16_BITS;
3400f00c:	b1b5      	cbz	r5, 3400f03c <MX66UW1G45G_ResetMemory+0x52>
  s_command.InstructionWidth = (Mode == MX66UW1G45G_SPI_MODE)
3400f00e:	2310      	movs	r3, #16
3400f010:	9305      	str	r3, [sp, #20]
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
                              ? MX66UW1G45G_RESET_MEMORY_CMD
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
3400f012:	f649 1366 	movw	r3, #39270	@ 0x9966
 #if defined (XSPI_CCR_SIOO)
  s_command.SIOOMode            = HAL_XSPI_SIOO_INST_EVERY_CMD;
 #endif

  /* Send the command */
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400f016:	f241 3288 	movw	r2, #5000	@ 0x1388
3400f01a:	4630      	mov	r0, r6
3400f01c:	a901      	add	r1, sp, #4
  s_command.Instruction = (Mode == MX66UW1G45G_SPI_MODE)
3400f01e:	9303      	str	r3, [sp, #12]
  if (HAL_XSPI_Command(Ctx, &s_command, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
3400f020:	f00d fca2 	bl	3401c968 <HAL_XSPI_Command>
3400f024:	3800      	subs	r0, #0
3400f026:	bf18      	it	ne
3400f028:	2001      	movne	r0, #1
3400f02a:	4240      	negs	r0, r0
  {
    return MX66UW1G45G_ERROR;
  }

  return MX66UW1G45G_OK;
}
3400f02c:	b014      	add	sp, #80	@ 0x50
3400f02e:	bd70      	pop	{r4, r5, r6, pc}
                                     : HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3400f030:	1e63      	subs	r3, r4, #1
3400f032:	425c      	negs	r4, r3
3400f034:	415c      	adcs	r4, r3
3400f036:	00e4      	lsls	r4, r4, #3
3400f038:	2304      	movs	r3, #4
3400f03a:	e7e5      	b.n	3400f008 <MX66UW1G45G_ResetMemory+0x1e>
                              : MX66UW1G45G_OCTA_RESET_MEMORY_CMD;
3400f03c:	2399      	movs	r3, #153	@ 0x99
3400f03e:	e7ea      	b.n	3400f016 <MX66UW1G45G_ResetMemory+0x2c>
    return MX66UW1G45G_ERROR;
3400f040:	f04f 30ff 	mov.w	r0, #4294967295
3400f044:	e7f2      	b.n	3400f02c <MX66UW1G45G_ResetMemory+0x42>
	...

3400f048 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400f048:	4b04      	ldr	r3, [pc, #16]	@ (3400f05c <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400f04a:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400f04c:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400f050:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400f054:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400f056:	9b01      	ldr	r3, [sp, #4]
}
3400f058:	b002      	add	sp, #8
3400f05a:	4770      	bx	lr
3400f05c:	56028000 	.word	0x56028000

3400f060 <BSP_SMPS_Init>:
  * @param Voltage configuration
  *          This parameter can be one of the following values:
  *            @arg  SMPS_VOLTAGE_NOMINAL
  *            @arg  SMPS_VOLTAGE_OVERDRIVE
  */
void BSP_SMPS_Init(SMPSVoltage_TypeDef Voltage){
3400f060:	b570      	push	{r4, r5, r6, lr}
3400f062:	4604      	mov	r4, r0
3400f064:	b086      	sub	sp, #24
  SMPS_GPIO_CLK_ENABLE();
3400f066:	2020      	movs	r0, #32
3400f068:	f7ff ffee 	bl	3400f048 <LL_AHB4_GRP1_EnableClock>
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400f06c:	2300      	movs	r3, #0
  /* configure the external SMPS control pin */
  gpio_init_structure.Pin = SMPS_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400f06e:	2610      	movs	r6, #16
  GPIO_InitTypeDef  gpio_init_structure = {0};
3400f070:	9303      	str	r3, [sp, #12]
3400f072:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
3400f074:	2301      	movs	r3, #1
3400f076:	e9cd 6301 	strd	r6, r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400f07a:	2303      	movs	r3, #3
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
3400f07c:	4d06      	ldr	r5, [pc, #24]	@ (3400f098 <BSP_SMPS_Init+0x38>)
3400f07e:	a901      	add	r1, sp, #4
3400f080:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3400f082:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init (SMPS_GPIO_PORT, &gpio_init_structure);
3400f084:	f004 fbea 	bl	3401385c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(SMPS_GPIO_PORT, SMPS_GPIO_PIN, (GPIO_PinState) Voltage);
3400f088:	4622      	mov	r2, r4
3400f08a:	4631      	mov	r1, r6
3400f08c:	4628      	mov	r0, r5
3400f08e:	f004 ff3d 	bl	34013f0c <HAL_GPIO_WritePin>
}
3400f092:	b006      	add	sp, #24
3400f094:	bd70      	pop	{r4, r5, r6, pc}
3400f096:	bf00      	nop
3400f098:	56021400 	.word	0x56021400

3400f09c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
3400f09c:	b570      	push	{r4, r5, r6, lr}
3400f09e:	4604      	mov	r4, r0
3400f0a0:	b086      	sub	sp, #24
3400f0a2:	460d      	mov	r5, r1
  GPIO_InitTypeDef             gpio_init_structure       = {0};
3400f0a4:	2214      	movs	r2, #20
3400f0a6:	2100      	movs	r1, #0
3400f0a8:	a801      	add	r0, sp, #4
3400f0aa:	f011 f8d5 	bl	34020258 <memset>
                                                            BSP_BUTTON_TAMP_IT_PRIORITY};
  static const uint32_t        BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER1_EXTI_LINE,
                                                            BUTTON_TAMP_EXTI_LINE};

  /* Enable the BUTTON clock */
  if (Button == BUTTON_USER1)
3400f0ae:	b9ac      	cbnz	r4, 3400f0dc <BSP_PB_Init+0x40>
  {
    BUTTON_USER1_GPIO_CLK_ENABLE();
3400f0b0:	2004      	movs	r0, #4
  }
  else /* BUTTON_TAMP */
  {
    BUTTON_TAMP_GPIO_CLK_ENABLE();
3400f0b2:	f7ff ffc9 	bl	3400f048 <LL_AHB4_GRP1_EnableClock>
  }
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
3400f0b6:	4b21      	ldr	r3, [pc, #132]	@ (3400f13c <BSP_PB_Init+0xa0>)
  gpio_init_structure.Pull  = GPIO_PULLDOWN;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
3400f0b8:	2600      	movs	r6, #0
  gpio_init_structure.Pin   = BUTTON_PIN [Button];
3400f0ba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
3400f0be:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
3400f0c0:	2302      	movs	r3, #2
3400f0c2:	e9cd 3603 	strd	r3, r6, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
3400f0c6:	b95d      	cbnz	r5, 3400f0e0 <BSP_PB_Init+0x44>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
3400f0c8:	4b1d      	ldr	r3, [pc, #116]	@ (3400f140 <BSP_PB_Init+0xa4>)
3400f0ca:	a901      	add	r1, sp, #4
3400f0cc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
3400f0d0:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
3400f0d2:	f004 fbc3 	bl	3401385c <HAL_GPIO_Init>
  {
    /* Bad value of ButtonMode parameter */
    return BSP_ERROR_WRONG_PARAM;
  }

  return BSP_ERROR_NONE;
3400f0d6:	2000      	movs	r0, #0
}
3400f0d8:	b006      	add	sp, #24
3400f0da:	bd70      	pop	{r4, r5, r6, pc}
    BUTTON_TAMP_GPIO_CLK_ENABLE();
3400f0dc:	2010      	movs	r0, #16
3400f0de:	e7e8      	b.n	3400f0b2 <BSP_PB_Init+0x16>
  else if(ButtonMode == BUTTON_MODE_EXTI)
3400f0e0:	2d01      	cmp	r5, #1
3400f0e2:	d127      	bne.n	3400f134 <BSP_PB_Init+0x98>
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
3400f0e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
3400f0e8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
3400f0ea:	4b15      	ldr	r3, [pc, #84]	@ (3400f140 <BSP_PB_Init+0xa4>)
3400f0ec:	a901      	add	r1, sp, #4
3400f0ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
3400f0f2:	f004 fbb3 	bl	3401385c <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
3400f0f6:	230c      	movs	r3, #12
3400f0f8:	4d12      	ldr	r5, [pc, #72]	@ (3400f144 <BSP_PB_Init+0xa8>)
3400f0fa:	fb03 5504 	mla	r5, r3, r4, r5
3400f0fe:	4b12      	ldr	r3, [pc, #72]	@ (3400f148 <BSP_PB_Init+0xac>)
3400f100:	4628      	mov	r0, r5
3400f102:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
3400f106:	f004 fb81 	bl	3401380c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
3400f10a:	4b10      	ldr	r3, [pc, #64]	@ (3400f14c <BSP_PB_Init+0xb0>)
3400f10c:	4631      	mov	r1, r6
3400f10e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
3400f112:	4628      	mov	r0, r5
3400f114:	f004 fb6c 	bl	340137f0 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
3400f118:	4b0d      	ldr	r3, [pc, #52]	@ (3400f150 <BSP_PB_Init+0xb4>)
3400f11a:	4632      	mov	r2, r6
3400f11c:	f933 5014 	ldrsh.w	r5, [r3, r4, lsl #1]
3400f120:	4b0c      	ldr	r3, [pc, #48]	@ (3400f154 <BSP_PB_Init+0xb8>)
3400f122:	4628      	mov	r0, r5
3400f124:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
3400f128:	f001 fd20 	bl	34010b6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
3400f12c:	4628      	mov	r0, r5
3400f12e:	f001 fd7b 	bl	34010c28 <HAL_NVIC_EnableIRQ>
3400f132:	e7d0      	b.n	3400f0d6 <BSP_PB_Init+0x3a>
    return BSP_ERROR_WRONG_PARAM;
3400f134:	f06f 0001 	mvn.w	r0, #1
3400f138:	e7ce      	b.n	3400f0d8 <BSP_PB_Init+0x3c>
3400f13a:	bf00      	nop
3400f13c:	341051b4 	.word	0x341051b4
3400f140:	341051b8 	.word	0x341051b8
3400f144:	341455c0 	.word	0x341455c0
3400f148:	341051a8 	.word	0x341051a8
3400f14c:	341051a0 	.word	0x341051a0
3400f150:	341051b0 	.word	0x341051b0
3400f154:	34105198 	.word	0x34105198

3400f158 <BSP_PB_GetState>:
  *            @arg  BUTTON_USER2: User2 Push Button
  *            @arg  BUTTON_TAMP : TAMP Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
3400f158:	b508      	push	{r3, lr}
  return (uint32_t) HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
3400f15a:	4b04      	ldr	r3, [pc, #16]	@ (3400f16c <BSP_PB_GetState+0x14>)
3400f15c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
3400f160:	4b03      	ldr	r3, [pc, #12]	@ (3400f170 <BSP_PB_GetState+0x18>)
3400f162:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
3400f166:	f004 febf 	bl	34013ee8 <HAL_GPIO_ReadPin>
}
3400f16a:	bd08      	pop	{r3, pc}
3400f16c:	341051b4 	.word	0x341051b4
3400f170:	341051b8 	.word	0x341051b8

3400f174 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
3400f174:	4770      	bx	lr

3400f176 <BUTTON_TAMP_EXTI_Callback>:
{
3400f176:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_TAMP);
3400f178:	2001      	movs	r0, #1
3400f17a:	f7ff fffb 	bl	3400f174 <BSP_PB_Callback>
}
3400f17e:	bd08      	pop	{r3, pc}

3400f180 <BUTTON_USER1_EXTI_Callback>:
{
3400f180:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER1);
3400f182:	2000      	movs	r0, #0
3400f184:	f7ff fff6 	bl	3400f174 <BSP_PB_Callback>
}
3400f188:	bd08      	pop	{r3, pc}
	...

3400f18c <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400f18c:	4b04      	ldr	r3, [pc, #16]	@ (3400f1a0 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400f18e:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400f190:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400f194:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400f198:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400f19a:	9b01      	ldr	r3, [sp, #4]
}
3400f19c:	b002      	add	sp, #8
3400f19e:	4770      	bx	lr
3400f1a0:	56028000 	.word	0x56028000

3400f1a4 <I2C_GetTiming.constprop.0>:
  * @brief  Compute I2C timing according current I2C clock source and required I2C clock.
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
3400f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f1a8:	b08b      	sub	sp, #44	@ 0x2c
{
  uint32_t ret = 0;
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
3400f1aa:	b918      	cbnz	r0, 3400f1b4 <I2C_GetTiming.constprop.0+0x10>
  uint32_t ret = 0;
3400f1ac:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
3400f1ae:	b00b      	add	sp, #44	@ 0x2c
3400f1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
3400f1b4:	4b6f      	ldr	r3, [pc, #444]	@ (3400f374 <I2C_GetTiming.constprop.0+0x1d0>)
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3400f1b6:	f640 15f6 	movw	r5, #2550	@ 0x9f6
  ti2cclk = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
3400f1ba:	eb03 0350 	add.w	r3, r3, r0, lsr #1
3400f1be:	fbb3 f3f0 	udiv	r3, r3, r0
3400f1c2:	9300      	str	r3, [sp, #0]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
3400f1c4:	005b      	lsls	r3, r3, #1
3400f1c6:	9301      	str	r3, [sp, #4]
3400f1c8:	9b00      	ldr	r3, [sp, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
3400f1ca:	f04f 0b10 	mov.w	fp, #16
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
3400f1ce:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
3400f1d2:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
  if (tsdadel_min <= 0)
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
3400f1d6:	4619      	mov	r1, r3
3400f1d8:	2300      	movs	r3, #0
3400f1da:	469a      	mov	sl, r3
3400f1dc:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 3400f37c <I2C_GetTiming.constprop.0+0x1d8>
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
3400f1e0:	f1c4 24ff 	rsb	r4, r4, #4278255360	@ 0xff00ff00
3400f1e4:	f504 047f 	add.w	r4, r4, #16711680	@ 0xff0000
3400f1e8:	34e2      	adds	r4, #226	@ 0xe2
3400f1ea:	f8dc 2000 	ldr.w	r2, [ip]
  if (tsdadel_min <= 0)
3400f1ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  if (tsdadel_max <= 0)
3400f1f2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
3400f1f6:	468e      	mov	lr, r1
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3400f1f8:	2700      	movs	r7, #0
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
3400f1fa:	f240 3079 	movw	r0, #889	@ 0x379
3400f1fe:	4586      	cmp	lr, r0
3400f200:	9702      	str	r7, [sp, #8]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
3400f202:	f107 0701 	add.w	r7, r7, #1
      if (tscldel >= (uint32_t)tscldel_min)
3400f206:	d950      	bls.n	3400f2aa <I2C_GetTiming.constprop.0+0x106>
3400f208:	2600      	movs	r6, #0
3400f20a:	f04f 0810 	mov.w	r8, #16
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3400f20e:	46b1      	mov	r9, r6
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
3400f210:	42b4      	cmp	r4, r6
3400f212:	d844      	bhi.n	3400f29e <I2C_GetTiming.constprop.0+0xfa>
3400f214:	42b5      	cmp	r5, r6
3400f216:	d342      	bcc.n	3400f29e <I2C_GetTiming.constprop.0+0xfa>
          {
            if (presc != prev_presc)
3400f218:	459b      	cmp	fp, r3
3400f21a:	d040      	beq.n	3400f29e <I2C_GetTiming.constprop.0+0xfa>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3400f21c:	2014      	movs	r0, #20
3400f21e:	fb00 fb02 	mul.w	fp, r0, r2
3400f222:	4855      	ldr	r0, [pc, #340]	@ (3400f378 <I2C_GetTiming.constprop.0+0x1d4>)
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
3400f224:	3201      	adds	r2, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
3400f226:	eb00 0a0b 	add.w	sl, r0, fp
3400f22a:	f840 300b 	str.w	r3, [r0, fp]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
3400f22e:	9802      	ldr	r0, [sp, #8]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3400f230:	2a7f      	cmp	r2, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
3400f232:	e9ca 0901 	strd	r0, r9, [sl, #4]
              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
3400f236:	d92f      	bls.n	3400f298 <I2C_GetTiming.constprop.0+0xf4>
3400f238:	f8cc 2000 	str.w	r2, [ip]
  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;

  prev_error = ti2cspeed;

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400f23c:	f8dc 3000 	ldr.w	r3, [ip]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400f240:	2600      	movs	r6, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400f242:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400f244:	f242 7310 	movw	r3, #10000	@ 0x2710
3400f248:	f04f 32ff 	mov.w	r2, #4294967295
3400f24c:	9304      	str	r3, [sp, #16]
3400f24e:	9b01      	ldr	r3, [sp, #4]
3400f250:	4949      	ldr	r1, [pc, #292]	@ (3400f378 <I2C_GetTiming.constprop.0+0x1d4>)
3400f252:	3332      	adds	r3, #50	@ 0x32
3400f254:	9309      	str	r3, [sp, #36]	@ 0x24
3400f256:	9b01      	ldr	r3, [sp, #4]
3400f258:	f5c3 5e90 	rsb	lr, r3, #4608	@ 0x1200
3400f25c:	f10e 0e0c 	add.w	lr, lr, #12
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400f260:	9b06      	ldr	r3, [sp, #24]
3400f262:	429e      	cmp	r6, r3
3400f264:	d12d      	bne.n	3400f2c2 <I2C_GetTiming.constprop.0+0x11e>
        if (idx < I2C_VALID_TIMING_NBR)
3400f266:	2a7f      	cmp	r2, #127	@ 0x7f
3400f268:	d8a0      	bhi.n	3400f1ac <I2C_GetTiming.constprop.0+0x8>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400f26a:	2114      	movs	r1, #20
3400f26c:	434a      	muls	r2, r1
3400f26e:	4b42      	ldr	r3, [pc, #264]	@ (3400f378 <I2C_GetTiming.constprop.0+0x1d4>)
3400f270:	1899      	adds	r1, r3, r2
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
3400f272:	7c08      	ldrb	r0, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400f274:	589b      	ldr	r3, [r3, r2]
3400f276:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
3400f27a:	684b      	ldr	r3, [r1, #4]
3400f27c:	051b      	lsls	r3, r3, #20
3400f27e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400f282:	4318      	orrs	r0, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
3400f284:	688b      	ldr	r3, [r1, #8]
3400f286:	041b      	lsls	r3, r3, #16
3400f288:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400f28c:	4318      	orrs	r0, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
3400f28e:	68cb      	ldr	r3, [r1, #12]
3400f290:	021b      	lsls	r3, r3, #8
3400f292:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
3400f294:	4318      	orrs	r0, r3
  return ret;
3400f296:	e78a      	b.n	3400f1ae <I2C_GetTiming.constprop.0+0xa>
              prev_presc = presc;
3400f298:	469b      	mov	fp, r3
3400f29a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
3400f29e:	f1b8 0801 	subs.w	r8, r8, #1
3400f2a2:	f109 0901 	add.w	r9, r9, #1
3400f2a6:	440e      	add	r6, r1
3400f2a8:	d1b2      	bne.n	3400f210 <I2C_GetTiming.constprop.0+0x6c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
3400f2aa:	2f10      	cmp	r7, #16
3400f2ac:	448e      	add	lr, r1
3400f2ae:	d1a4      	bne.n	3400f1fa <I2C_GetTiming.constprop.0+0x56>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
3400f2b0:	9800      	ldr	r0, [sp, #0]
3400f2b2:	3301      	adds	r3, #1
3400f2b4:	2b10      	cmp	r3, #16
3400f2b6:	4401      	add	r1, r0
3400f2b8:	d19d      	bne.n	3400f1f6 <I2C_GetTiming.constprop.0+0x52>
3400f2ba:	f1ba 0f00 	cmp.w	sl, #0
3400f2be:	d1bb      	bne.n	3400f238 <I2C_GetTiming.constprop.0+0x94>
3400f2c0:	e7bc      	b.n	3400f23c <I2C_GetTiming.constprop.0+0x98>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400f2c2:	2700      	movs	r7, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
3400f2c4:	9800      	ldr	r0, [sp, #0]
3400f2c6:	680b      	ldr	r3, [r1, #0]
3400f2c8:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400f2cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400f2ce:	ebae 0403 	sub.w	r4, lr, r3
3400f2d2:	4418      	add	r0, r3
3400f2d4:	9003      	str	r0, [sp, #12]
3400f2d6:	9801      	ldr	r0, [sp, #4]
3400f2d8:	ea4f 0b44 	mov.w	fp, r4, lsl #1
3400f2dc:	181d      	adds	r5, r3, r0
3400f2de:	f5a5 5011 	sub.w	r0, r5, #9280	@ 0x2440
3400f2e2:	380a      	subs	r0, #10
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
3400f2e4:	9c03      	ldr	r4, [sp, #12]
3400f2e6:	9002      	str	r0, [sp, #8]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400f2e8:	f241 205c 	movw	r0, #4700	@ 0x125c
3400f2ec:	4284      	cmp	r4, r0
3400f2ee:	9708      	str	r7, [sp, #32]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400f2f0:	f107 0701 	add.w	r7, r7, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400f2f4:	d935      	bls.n	3400f362 <I2C_GetTiming.constprop.0+0x1be>
3400f2f6:	9800      	ldr	r0, [sp, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
3400f2f8:	f1a4 0532 	sub.w	r5, r4, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400f2fc:	ebb0 0f95 	cmp.w	r0, r5, lsr #2
3400f300:	d22f      	bcs.n	3400f362 <I2C_GetTiming.constprop.0+0x1be>
3400f302:	9802      	ldr	r0, [sp, #8]
3400f304:	46d8      	mov	r8, fp
3400f306:	1905      	adds	r5, r0, r4
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
3400f308:	f44f 7080 	mov.w	r0, #256	@ 0x100
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3400f30c:	f04f 0900 	mov.w	r9, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
3400f310:	f8dd c00c 	ldr.w	ip, [sp, #12]
              ret = count;
3400f314:	9005      	str	r0, [sp, #20]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
3400f316:	f241 0047 	movw	r0, #4167	@ 0x1047
3400f31a:	f205 6a83 	addw	sl, r5, #1667	@ 0x683
3400f31e:	4582      	cmp	sl, r0
3400f320:	f8cd 901c 	str.w	r9, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
3400f324:	f109 0901 	add.w	r9, r9, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
3400f328:	d813      	bhi.n	3400f352 <I2C_GetTiming.constprop.0+0x1ae>
3400f32a:	f5bc 6f7a 	cmp.w	ip, #4000	@ 0xfa0
3400f32e:	d310      	bcc.n	3400f352 <I2C_GetTiming.constprop.0+0x1ae>
3400f330:	9800      	ldr	r0, [sp, #0]
3400f332:	4560      	cmp	r0, ip
3400f334:	d20d      	bcs.n	3400f352 <I2C_GetTiming.constprop.0+0x1ae>
              error = -error;
3400f336:	2d00      	cmp	r5, #0
3400f338:	bfac      	ite	ge
3400f33a:	46aa      	movge	sl, r5
3400f33c:	46c2      	movlt	sl, r8
            if ((uint32_t)error < prev_error)
3400f33e:	9804      	ldr	r0, [sp, #16]
3400f340:	4582      	cmp	sl, r0
3400f342:	d206      	bcs.n	3400f352 <I2C_GetTiming.constprop.0+0x1ae>
              I2c_valid_timing[count].scll = scll;
3400f344:	9a08      	ldr	r2, [sp, #32]
              prev_error = (uint32_t)error;
3400f346:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
3400f34a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
3400f34c:	9a07      	ldr	r2, [sp, #28]
3400f34e:	60ca      	str	r2, [r1, #12]
              ret = count;
3400f350:	4632      	mov	r2, r6
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
3400f352:	9805      	ldr	r0, [sp, #20]
3400f354:	449c      	add	ip, r3
3400f356:	3801      	subs	r0, #1
3400f358:	441d      	add	r5, r3
3400f35a:	eba8 0803 	sub.w	r8, r8, r3
3400f35e:	9005      	str	r0, [sp, #20]
3400f360:	d1d9      	bne.n	3400f316 <I2C_GetTiming.constprop.0+0x172>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
3400f362:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
3400f366:	441c      	add	r4, r3
3400f368:	ebab 0b03 	sub.w	fp, fp, r3
3400f36c:	d1bc      	bne.n	3400f2e8 <I2C_GetTiming.constprop.0+0x144>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
3400f36e:	3601      	adds	r6, #1
3400f370:	3114      	adds	r1, #20
3400f372:	e775      	b.n	3400f260 <I2C_GetTiming.constprop.0+0xbc>
3400f374:	3b9aca00 	.word	0x3b9aca00
3400f378:	34145630 	.word	0x34145630
3400f37c:	3414562c 	.word	0x3414562c

3400f380 <BSP_I2C1_DeInit>:
  I2c1InitCounter--;
3400f380:	4a0e      	ldr	r2, [pc, #56]	@ (3400f3bc <BSP_I2C1_DeInit+0x3c>)
{
3400f382:	b508      	push	{r3, lr}
  I2c1InitCounter--;
3400f384:	6813      	ldr	r3, [r2, #0]
3400f386:	3b01      	subs	r3, #1
3400f388:	6013      	str	r3, [r2, #0]
  if (I2c1InitCounter == 0U)
3400f38a:	b10b      	cbz	r3, 3400f390 <BSP_I2C1_DeInit+0x10>
  int32_t ret = BSP_ERROR_NONE;
3400f38c:	2000      	movs	r0, #0
}
3400f38e:	bd08      	pop	{r3, pc}
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin );
3400f390:	f44f 7100 	mov.w	r1, #512	@ 0x200
3400f394:	480a      	ldr	r0, [pc, #40]	@ (3400f3c0 <BSP_I2C1_DeInit+0x40>)
3400f396:	f004 fc79 	bl	34013c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
3400f39a:	480a      	ldr	r0, [pc, #40]	@ (3400f3c4 <BSP_I2C1_DeInit+0x44>)
3400f39c:	2102      	movs	r1, #2
3400f39e:	f004 fc75 	bl	34013c8c <HAL_GPIO_DeInit>
  WRITE_REG(RCC->APB1ENCR1, Periphs);
3400f3a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
3400f3a6:	4b08      	ldr	r3, [pc, #32]	@ (3400f3c8 <BSP_I2C1_DeInit+0x48>)
    if (HAL_I2C_DeInit(&hbus_i2c1) != HAL_OK)
3400f3a8:	4808      	ldr	r0, [pc, #32]	@ (3400f3cc <BSP_I2C1_DeInit+0x4c>)
3400f3aa:	f8c3 2264 	str.w	r2, [r3, #612]	@ 0x264
3400f3ae:	f005 f80d 	bl	340143cc <HAL_I2C_DeInit>
3400f3b2:	2800      	cmp	r0, #0
3400f3b4:	d0ea      	beq.n	3400f38c <BSP_I2C1_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
3400f3b6:	f06f 0007 	mvn.w	r0, #7
  return ret;
3400f3ba:	e7e8      	b.n	3400f38e <BSP_I2C1_DeInit+0xe>
3400f3bc:	34146030 	.word	0x34146030
3400f3c0:	56021c00 	.word	0x56021c00
3400f3c4:	56020800 	.word	0x56020800
3400f3c8:	56029000 	.word	0x56029000
3400f3cc:	341455d8 	.word	0x341455d8

3400f3d0 <MX_I2C1_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
3400f3d0:	2300      	movs	r3, #0
3400f3d2:	2201      	movs	r2, #1
{
3400f3d4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
3400f3d6:	6041      	str	r1, [r0, #4]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
3400f3d8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
3400f3dc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
3400f3e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
3400f3e4:	6203      	str	r3, [r0, #32]
{
3400f3e6:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
3400f3e8:	f004 ff2e 	bl	34014248 <HAL_I2C_Init>
3400f3ec:	4601      	mov	r1, r0
3400f3ee:	b108      	cbz	r0, 3400f3f4 <MX_I2C1_Init+0x24>
    status = HAL_ERROR;
3400f3f0:	2001      	movs	r0, #1
}
3400f3f2:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
3400f3f4:	4620      	mov	r0, r4
3400f3f6:	f005 fa03 	bl	34014800 <HAL_I2CEx_ConfigAnalogFilter>
3400f3fa:	4601      	mov	r1, r0
3400f3fc:	2800      	cmp	r0, #0
3400f3fe:	d1f7      	bne.n	3400f3f0 <MX_I2C1_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
3400f400:	4620      	mov	r0, r4
3400f402:	f005 fa57 	bl	340148b4 <HAL_I2CEx_ConfigDigitalFilter>
3400f406:	3800      	subs	r0, #0
3400f408:	bf18      	it	ne
3400f40a:	2001      	movne	r0, #1
3400f40c:	e7f1      	b.n	3400f3f2 <MX_I2C1_Init+0x22>
	...

3400f410 <BSP_I2C1_Init>:
{
3400f410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hbus_i2c1.Instance = BUS_I2C1;
3400f414:	4b28      	ldr	r3, [pc, #160]	@ (3400f4b8 <BSP_I2C1_Init+0xa8>)
3400f416:	4e29      	ldr	r6, [pc, #164]	@ (3400f4bc <BSP_I2C1_Init+0xac>)
{
3400f418:	b086      	sub	sp, #24
  hbus_i2c1.Instance = BUS_I2C1;
3400f41a:	6033      	str	r3, [r6, #0]
  if (I2c1InitCounter == 0U)
3400f41c:	4b28      	ldr	r3, [pc, #160]	@ (3400f4c0 <BSP_I2C1_Init+0xb0>)
3400f41e:	681a      	ldr	r2, [r3, #0]
3400f420:	b11a      	cbz	r2, 3400f42a <BSP_I2C1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
3400f422:	2000      	movs	r0, #0
}
3400f424:	b006      	add	sp, #24
3400f426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    I2c1InitCounter++;
3400f42a:	2201      	movs	r2, #1
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3400f42c:	4630      	mov	r0, r6
    I2c1InitCounter++;
3400f42e:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
3400f430:	f005 f9e0 	bl	340147f4 <HAL_I2C_GetState>
3400f434:	4604      	mov	r4, r0
3400f436:	2800      	cmp	r0, #0
3400f438:	d1f3      	bne.n	3400f422 <BSP_I2C1_Init+0x12>
  HAL_PWREx_EnableVddIO4();
3400f43a:	f005 ffd5 	bl	340153e8 <HAL_PWREx_EnableVddIO4>
  BUS_I2C1_SCL_GPIO_CLK_ENABLE();
3400f43e:	2080      	movs	r0, #128	@ 0x80
3400f440:	f7ff fea4 	bl	3400f18c <LL_AHB4_GRP1_EnableClock>
  BUS_I2C1_SDA_GPIO_CLK_ENABLE();
3400f444:	2004      	movs	r0, #4
3400f446:	f7ff fea1 	bl	3400f18c <LL_AHB4_GRP1_EnableClock>
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400f44a:	2702      	movs	r7, #2
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400f44c:	f44f 7300 	mov.w	r3, #512	@ 0x200
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3400f450:	4605      	mov	r5, r0
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400f452:	f04f 0812 	mov.w	r8, #18
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400f456:	eb0d 0100 	add.w	r1, sp, r0
  gpio_init_structure.Alternate = BUS_I2C1_SCL_AF;
3400f45a:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400f45c:	4819      	ldr	r0, [pc, #100]	@ (3400f4c4 <BSP_I2C1_Init+0xb4>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400f45e:	e9cd 3801 	strd	r3, r8, [sp, #4]
  gpio_init_structure.Pull      = GPIO_NOPULL;
3400f462:	9403      	str	r4, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400f464:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
3400f466:	f004 f9f9 	bl	3401385c <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
3400f46a:	4817      	ldr	r0, [pc, #92]	@ (3400f4c8 <BSP_I2C1_Init+0xb8>)
3400f46c:	eb0d 0105 	add.w	r1, sp, r5
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
3400f470:	e9cd 7801 	strd	r7, r8, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400f474:	e9cd 4703 	strd	r4, r7, [sp, #12]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_AF;
3400f478:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
3400f47a:	f004 f9ef 	bl	3401385c <HAL_GPIO_Init>
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3400f47e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
3400f482:	4a12      	ldr	r2, [pc, #72]	@ (3400f4cc <BSP_I2C1_Init+0xbc>)
3400f484:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3400f488:	f8d2 1264 	ldr.w	r1, [r2, #612]	@ 0x264
3400f48c:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
3400f48e:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->APB1RSTSR1, Periphs);
3400f490:	f8c2 3a24 	str.w	r3, [r2, #2596]	@ 0xa24
  WRITE_REG(RCC->APB1RSTCR1, Periphs);
3400f494:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3400f498:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C1_FREQUENCY)) != HAL_OK)
3400f49c:	f007 f856 	bl	3401654c <HAL_RCC_GetPCLK1Freq>
3400f4a0:	f7ff fe80 	bl	3400f1a4 <I2C_GetTiming.constprop.0>
3400f4a4:	4601      	mov	r1, r0
3400f4a6:	4630      	mov	r0, r6
3400f4a8:	f7ff ff92 	bl	3400f3d0 <MX_I2C1_Init>
3400f4ac:	2800      	cmp	r0, #0
3400f4ae:	d0b8      	beq.n	3400f422 <BSP_I2C1_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
3400f4b0:	f06f 0007 	mvn.w	r0, #7
  return ret;
3400f4b4:	e7b6      	b.n	3400f424 <BSP_I2C1_Init+0x14>
3400f4b6:	bf00      	nop
3400f4b8:	50005400 	.word	0x50005400
3400f4bc:	341455d8 	.word	0x341455d8
3400f4c0:	34146030 	.word	0x34146030
3400f4c4:	56021c00 	.word	0x56021c00
3400f4c8:	56020800 	.word	0x56020800
3400f4cc:	56028000 	.word	0x56028000

3400f4d0 <BSP_I2C1_WriteReg16>:
{
3400f4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400f4d2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3400f4d6:	9200      	str	r2, [sp, #0]
3400f4d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400f4dc:	460a      	mov	r2, r1
3400f4de:	2302      	movs	r3, #2
3400f4e0:	4601      	mov	r1, r0
3400f4e2:	4808      	ldr	r0, [pc, #32]	@ (3400f504 <BSP_I2C1_WriteReg16+0x34>)
3400f4e4:	f004 ffba 	bl	3401445c <HAL_I2C_Mem_Write>
    ret = BSP_ERROR_NONE;
3400f4e8:	2300      	movs	r3, #0
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400f4ea:	b140      	cbz	r0, 3400f4fe <BSP_I2C1_WriteReg16+0x2e>
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3400f4ec:	4805      	ldr	r0, [pc, #20]	@ (3400f504 <BSP_I2C1_WriteReg16+0x34>)
3400f4ee:	f005 f984 	bl	340147fa <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3400f4f2:	2804      	cmp	r0, #4
3400f4f4:	bf14      	ite	ne
3400f4f6:	f06f 0303 	mvnne.w	r3, #3
3400f4fa:	f06f 0365 	mvneq.w	r3, #101	@ 0x65
}
3400f4fe:	4618      	mov	r0, r3
3400f500:	b004      	add	sp, #16
3400f502:	bd10      	pop	{r4, pc}
3400f504:	341455d8 	.word	0x341455d8

3400f508 <BSP_I2C1_ReadReg16>:
{
3400f508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400f50a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3400f50e:	9200      	str	r2, [sp, #0]
3400f510:	e9cd 3401 	strd	r3, r4, [sp, #4]
3400f514:	460a      	mov	r2, r1
3400f516:	2302      	movs	r3, #2
3400f518:	4601      	mov	r1, r0
3400f51a:	4808      	ldr	r0, [pc, #32]	@ (3400f53c <BSP_I2C1_ReadReg16+0x34>)
3400f51c:	f005 f882 	bl	34014624 <HAL_I2C_Mem_Read>
    ret = BSP_ERROR_NONE;
3400f520:	2300      	movs	r3, #0
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
3400f522:	b140      	cbz	r0, 3400f536 <BSP_I2C1_ReadReg16+0x2e>
    if (HAL_I2C_GetError(&hbus_i2c1) == HAL_I2C_ERROR_AF)
3400f524:	4805      	ldr	r0, [pc, #20]	@ (3400f53c <BSP_I2C1_ReadReg16+0x34>)
3400f526:	f005 f968 	bl	340147fa <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
3400f52a:	2804      	cmp	r0, #4
3400f52c:	bf14      	ite	ne
3400f52e:	f06f 0303 	mvnne.w	r3, #3
3400f532:	f06f 0365 	mvneq.w	r3, #101	@ 0x65
}
3400f536:	4618      	mov	r0, r3
3400f538:	b004      	add	sp, #16
3400f53a:	bd10      	pop	{r4, pc}
3400f53c:	341455d8 	.word	0x341455d8

3400f540 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
3400f540:	f00f bade 	b.w	3401eb00 <HAL_GetTick>

3400f544 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400f544:	4b04      	ldr	r3, [pc, #16]	@ (3400f558 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400f546:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400f548:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400f54c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400f550:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400f552:	9b01      	ldr	r3, [sp, #4]
}
3400f554:	b002      	add	sp, #8
3400f556:	4770      	bx	lr
3400f558:	56028000 	.word	0x56028000

3400f55c <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400f55c:	b918      	cbnz	r0, 3400f566 <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat =  Lcd_Ctx[Instance].PixelFormat;
3400f55e:	4b03      	ldr	r3, [pc, #12]	@ (3400f56c <BSP_LCD_GetPixelFormat+0x10>)
3400f560:	68db      	ldr	r3, [r3, #12]
3400f562:	600b      	str	r3, [r1, #0]
3400f564:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400f566:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400f56a:	4770      	bx	lr
3400f56c:	34146034 	.word	0x34146034

3400f570 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
3400f570:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;
  LTDC_LayerCfgTypeDef *pLayerCfg;

  if(Instance >= LCD_INSTANCES_NBR)
3400f572:	bb08      	cbnz	r0, 3400f5b8 <BSP_LCD_SetActiveLayer+0x48>
  else
  {
    pLayerCfg = &hlcd_ltdc.LayerCfg[LayerIndex];

    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400f574:	2434      	movs	r4, #52	@ 0x34
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
3400f576:	4b12      	ldr	r3, [pc, #72]	@ (3400f5c0 <BSP_LCD_SetActiveLayer+0x50>)
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400f578:	4a12      	ldr	r2, [pc, #72]	@ (3400f5c4 <BSP_LCD_SetActiveLayer+0x54>)
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
3400f57a:	6099      	str	r1, [r3, #8]
    Lcd_Ctx[Instance].XSize = pLayerCfg->ImageWidth;
3400f57c:	fb04 2101 	mla	r1, r4, r1, r2
3400f580:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
3400f582:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize = pLayerCfg->ImageHeight;
3400f584:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
3400f586:	605a      	str	r2, [r3, #4]

    if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB565)
3400f588:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
3400f58a:	2a04      	cmp	r2, #4
3400f58c:	d104      	bne.n	3400f598 <BSP_LCD_SetActiveLayer+0x28>
    {
      Lcd_Ctx[Instance].BppFactor = 2;
3400f58e:	2202      	movs	r2, #2
3400f590:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB565;
    }
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
    {
      Lcd_Ctx[Instance].BppFactor = 2;
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
3400f592:	60da      	str	r2, [r3, #12]
  int32_t ret = BSP_ERROR_NONE;
3400f594:	2000      	movs	r0, #0
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
    }
  }

  return ret;
}
3400f596:	bd10      	pop	{r4, pc}
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_ARGB4444)
3400f598:	2a08      	cmp	r2, #8
3400f59a:	d103      	bne.n	3400f5a4 <BSP_LCD_SetActiveLayer+0x34>
      Lcd_Ctx[Instance].BppFactor = 2;
3400f59c:	2202      	movs	r2, #2
3400f59e:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB4444;
3400f5a0:	2204      	movs	r2, #4
3400f5a2:	e7f6      	b.n	3400f592 <BSP_LCD_SetActiveLayer+0x22>
    else if (pLayerCfg->PixelFormat ==  LTDC_PIXEL_FORMAT_RGB888)
3400f5a4:	2a06      	cmp	r2, #6
3400f5a6:	d103      	bne.n	3400f5b0 <BSP_LCD_SetActiveLayer+0x40>
      Lcd_Ctx[Instance].BppFactor = 3;
3400f5a8:	2203      	movs	r2, #3
3400f5aa:	611a      	str	r2, [r3, #16]
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_RGB888;
3400f5ac:	2201      	movs	r2, #1
3400f5ae:	e7f0      	b.n	3400f592 <BSP_LCD_SetActiveLayer+0x22>
      Lcd_Ctx[Instance].BppFactor = 4;
3400f5b0:	2204      	movs	r2, #4
      Lcd_Ctx[Instance].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
3400f5b2:	e9c3 0203 	strd	r0, r2, [r3, #12]
3400f5b6:	e7ed      	b.n	3400f594 <BSP_LCD_SetActiveLayer+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400f5b8:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400f5bc:	e7eb      	b.n	3400f596 <BSP_LCD_SetActiveLayer+0x26>
3400f5be:	bf00      	nop
3400f5c0:	34146034 	.word	0x34146034
3400f5c4:	34146054 	.word	0x34146054

3400f5c8 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400f5c8:	b918      	cbnz	r0, 3400f5d2 <BSP_LCD_GetXSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
3400f5ca:	4b03      	ldr	r3, [pc, #12]	@ (3400f5d8 <BSP_LCD_GetXSize+0x10>)
3400f5cc:	681b      	ldr	r3, [r3, #0]
3400f5ce:	600b      	str	r3, [r1, #0]
3400f5d0:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400f5d2:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400f5d6:	4770      	bx	lr
3400f5d8:	34146034 	.word	0x34146034

3400f5dc <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
3400f5dc:	b918      	cbnz	r0, 3400f5e6 <BSP_LCD_GetYSize+0xa>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
3400f5de:	4b03      	ldr	r3, [pc, #12]	@ (3400f5ec <BSP_LCD_GetYSize+0x10>)
3400f5e0:	685b      	ldr	r3, [r3, #4]
3400f5e2:	600b      	str	r3, [r1, #0]
3400f5e4:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
3400f5e6:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
3400f5ea:	4770      	bx	lr
3400f5ec:	34146034 	.word	0x34146034

3400f5f0 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
3400f5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400f5f2:	2734      	movs	r7, #52	@ 0x34
3400f5f4:	4d0f      	ldr	r5, [pc, #60]	@ (3400f634 <BSP_LCD_ReadPixel+0x44>)
3400f5f6:	0146      	lsls	r6, r0, #5
3400f5f8:	eb05 1040 	add.w	r0, r5, r0, lsl #5
3400f5fc:	6884      	ldr	r4, [r0, #8]
3400f5fe:	480e      	ldr	r0, [pc, #56]	@ (3400f638 <BSP_LCD_ReadPixel+0x48>)
  {
    /* Read data value from RAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f600:	59ad      	ldr	r5, [r5, r6]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400f602:	fb07 0004 	mla	r0, r7, r4, r0
3400f606:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f608:	fb05 1202 	mla	r2, r5, r2, r1
3400f60c:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400f60e:	b924      	cbnz	r4, 3400f61a <BSP_LCD_ReadPixel+0x2a>
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f610:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    /* Read data value from RAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
  }

  return BSP_ERROR_NONE;
}
3400f614:	2000      	movs	r0, #0
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f616:	601a      	str	r2, [r3, #0]
}
3400f618:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
3400f61a:	2c06      	cmp	r4, #6
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f61c:	bf05      	ittet	eq
3400f61e:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
3400f622:	5812      	ldreq	r2, [r2, r0]
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f624:	f830 2012 	ldrhne.w	r2, [r0, r2, lsl #1]
    *Color = CONVERTARGB88882RGB888(*Color);
3400f628:	f022 427f 	biceq.w	r2, r2, #4278190080	@ 0xff000000
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
3400f62c:	bf18      	it	ne
3400f62e:	b292      	uxthne	r2, r2
3400f630:	e7f0      	b.n	3400f614 <BSP_LCD_ReadPixel+0x24>
3400f632:	bf00      	nop
3400f634:	34146034 	.word	0x34146034
3400f638:	34146054 	.word	0x34146054

3400f63c <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
3400f63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400f640:	2734      	movs	r7, #52	@ 0x34
3400f642:	4e24      	ldr	r6, [pc, #144]	@ (3400f6d4 <BSP_LCD_WritePixel+0x98>)
3400f644:	ea4f 1c40 	mov.w	ip, r0, lsl #5
3400f648:	eb06 1040 	add.w	r0, r6, r0, lsl #5
3400f64c:	6884      	ldr	r4, [r0, #8]
3400f64e:	4d22      	ldr	r5, [pc, #136]	@ (3400f6d8 <BSP_LCD_WritePixel+0x9c>)
3400f650:	fb07 5404 	mla	r4, r7, r4, r5
3400f654:	f8d4 8048 	ldr.w	r8, [r4, #72]	@ 0x48
  {
    /* Write data value to RAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
3400f658:	f8d4 e05c 	ldr.w	lr, [r4, #92]	@ 0x5c
3400f65c:	f856 400c 	ldr.w	r4, [r6, ip]
3400f660:	fb04 1402 	mla	r4, r4, r2, r1
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
3400f664:	f1b8 0f00 	cmp.w	r8, #0
3400f668:	d104      	bne.n	3400f674 <BSP_LCD_WritePixel+0x38>
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
3400f66a:	f84e 3024 	str.w	r3, [lr, r4, lsl #2]
    /* Write data value to RAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
  }

  return BSP_ERROR_NONE;
}
3400f66e:	2000      	movs	r0, #0
3400f670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
3400f674:	f1b8 0f06 	cmp.w	r8, #6
3400f678:	d127      	bne.n	3400f6ca <BSP_LCD_WritePixel+0x8e>
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-3U)) = (uint8_t) (Color);
3400f67a:	fa5f f883 	uxtb.w	r8, r3
3400f67e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
3400f682:	f1ae 0e03 	sub.w	lr, lr, #3
3400f686:	f804 800e 	strb.w	r8, [r4, lr]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
3400f68a:	f856 400c 	ldr.w	r4, [r6, ip]
3400f68e:	f3c3 2807 	ubfx	r8, r3, #8, #8
3400f692:	fb04 1402 	mla	r4, r4, r2, r1
3400f696:	eb04 0944 	add.w	r9, r4, r4, lsl #1
3400f69a:	6884      	ldr	r4, [r0, #8]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
3400f69c:	f3c3 4307 	ubfx	r3, r3, #16, #8
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-2U)) = (uint8_t) (Color>>8U);
3400f6a0:	fb07 5e04 	mla	lr, r7, r4, r5
3400f6a4:	f8de e05c 	ldr.w	lr, [lr, #92]	@ 0x5c
3400f6a8:	f1ae 0e02 	sub.w	lr, lr, #2
3400f6ac:	f809 800e 	strb.w	r8, [r9, lr]
    *(__IO uint8_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + ((3U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))-1U)) = (uint8_t) (Color>>16U);
3400f6b0:	f856 400c 	ldr.w	r4, [r6, ip]
3400f6b4:	fb04 1202 	mla	r2, r4, r2, r1
3400f6b8:	6881      	ldr	r1, [r0, #8]
3400f6ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
3400f6be:	fb07 5501 	mla	r5, r7, r1, r5
3400f6c2:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
3400f6c4:	3901      	subs	r1, #1
3400f6c6:	5453      	strb	r3, [r2, r1]
3400f6c8:	e7d1      	b.n	3400f66e <BSP_LCD_WritePixel+0x32>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
3400f6ca:	b29b      	uxth	r3, r3
3400f6cc:	f82e 3014 	strh.w	r3, [lr, r4, lsl #1]
3400f6d0:	e7cd      	b.n	3400f66e <BSP_LCD_WritePixel+0x32>
3400f6d2:	bf00      	nop
3400f6d4:	34146034 	.word	0x34146034
3400f6d8:	34146054 	.word	0x34146054

3400f6dc <BSP_LCD_FillRGBRect>:
{
3400f6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400f6e0:	4680      	mov	r8, r0
3400f6e2:	460e      	mov	r6, r1
3400f6e4:	4614      	mov	r4, r2
3400f6e6:	461d      	mov	r5, r3
  for(i = 0; i < Height; i++)
3400f6e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3400f6ea:	eb03 0902 	add.w	r9, r3, r2
      pdata += Lcd_Ctx[Instance].BppFactor;
3400f6ee:	4b0d      	ldr	r3, [pc, #52]	@ (3400f724 <BSP_LCD_FillRGBRect+0x48>)
3400f6f0:	eb03 1a40 	add.w	sl, r3, r0, lsl #5
  for(i = 0; i < Height; i++)
3400f6f4:	454c      	cmp	r4, r9
3400f6f6:	d012      	beq.n	3400f71e <BSP_LCD_FillRGBRect+0x42>
3400f6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3400f6fa:	4637      	mov	r7, r6
3400f6fc:	eb03 0b06 	add.w	fp, r3, r6
3400f700:	e009      	b.n	3400f716 <BSP_LCD_FillRGBRect+0x3a>
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
3400f702:	682b      	ldr	r3, [r5, #0]
3400f704:	4639      	mov	r1, r7
3400f706:	4622      	mov	r2, r4
3400f708:	4640      	mov	r0, r8
3400f70a:	f7ff ff97 	bl	3400f63c <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
3400f70e:	f8da 3010 	ldr.w	r3, [sl, #16]
3400f712:	3701      	adds	r7, #1
3400f714:	441d      	add	r5, r3
    for(j = 0; j < Width; j++)
3400f716:	455f      	cmp	r7, fp
3400f718:	d1f3      	bne.n	3400f702 <BSP_LCD_FillRGBRect+0x26>
  for(i = 0; i < Height; i++)
3400f71a:	3401      	adds	r4, #1
3400f71c:	e7ea      	b.n	3400f6f4 <BSP_LCD_FillRGBRect+0x18>
}
3400f71e:	2000      	movs	r0, #0
3400f720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400f724:	34146034 	.word	0x34146034

3400f728 <BSP_LCD_DrawBitmap>:
{
3400f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400f72c:	2634      	movs	r6, #52	@ 0x34
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
3400f72e:	f8d3 4012 	ldr.w	r4, [r3, #18]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400f732:	4f39      	ldr	r7, [pc, #228]	@ (3400f818 <BSP_LCD_DrawBitmap+0xf0>)
3400f734:	ea4f 1840 	mov.w	r8, r0, lsl #5
{
3400f738:	b085      	sub	sp, #20
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
3400f73a:	9402      	str	r4, [sp, #8]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400f73c:	f857 4008 	ldr.w	r4, [r7, r8]
3400f740:	eb07 1040 	add.w	r0, r7, r0, lsl #5
3400f744:	fb04 1202 	mla	r2, r4, r2, r1
3400f748:	6904      	ldr	r4, [r0, #16]
3400f74a:	4934      	ldr	r1, [pc, #208]	@ (3400f81c <BSP_LCD_DrawBitmap+0xf4>)
3400f74c:	6880      	ldr	r0, [r0, #8]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
3400f74e:	8b9d      	ldrh	r5, [r3, #28]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400f750:	fb06 1100 	mla	r1, r6, r0, r1
3400f754:	6dce      	ldr	r6, [r1, #92]	@ 0x5c
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
3400f756:	f8d3 c00a 	ldr.w	ip, [r3, #10]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
3400f75a:	fb04 6602 	mla	r6, r4, r2, r6
  if ((bit_pixel/8U) == 4U)
3400f75e:	f1a5 0220 	sub.w	r2, r5, #32
3400f762:	2a07      	cmp	r2, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
3400f764:	f8d3 a016 	ldr.w	sl, [r3, #22]
  if ((bit_pixel/8U) == 4U)
3400f768:	d91b      	bls.n	3400f7a2 <BSP_LCD_DrawBitmap+0x7a>
  else if ((bit_pixel/8U) == 2U)
3400f76a:	f1a5 0210 	sub.w	r2, r5, #16
    input_color_mode = DMA2D_INPUT_RGB565;
3400f76e:	2a07      	cmp	r2, #7
3400f770:	bf8c      	ite	hi
3400f772:	f04f 0b01 	movhi.w	fp, #1
3400f776:	f04f 0b02 	movls.w	fp, #2
  for(index=0; index < height; index++)
3400f77a:	f04f 0900 	mov.w	r9, #0
3400f77e:	9a02      	ldr	r2, [sp, #8]
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
3400f780:	08ed      	lsrs	r5, r5, #3
3400f782:	4355      	muls	r5, r2
3400f784:	f10a 32ff 	add.w	r2, sl, #4294967295
3400f788:	fb05 cc02 	mla	ip, r5, r2, ip
3400f78c:	eb03 040c 	add.w	r4, r3, ip
    pbmp -= width*(bit_pixel/8U);
3400f790:	426b      	negs	r3, r5
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
    break;
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
3400f792:	4d23      	ldr	r5, [pc, #140]	@ (3400f820 <BSP_LCD_DrawBitmap+0xf8>)
    pbmp -= width*(bit_pixel/8U);
3400f794:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
3400f796:	45d1      	cmp	r9, sl
3400f798:	d106      	bne.n	3400f7a8 <BSP_LCD_DrawBitmap+0x80>
}
3400f79a:	2000      	movs	r0, #0
3400f79c:	b005      	add	sp, #20
3400f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
3400f7a2:	f04f 0b00 	mov.w	fp, #0
3400f7a6:	e7e8      	b.n	3400f77a <BSP_LCD_DrawBitmap+0x52>
  switch(Lcd_Ctx[Instance].PixelFormat)
3400f7a8:	eb07 0308 	add.w	r3, r7, r8
3400f7ac:	68db      	ldr	r3, [r3, #12]
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;

  hlcd_dma2d.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400f7ae:	481c      	ldr	r0, [pc, #112]	@ (3400f820 <BSP_LCD_DrawBitmap+0xf8>)
3400f7b0:	3b01      	subs	r3, #1
3400f7b2:	2b03      	cmp	r3, #3
3400f7b4:	bf96      	itet	ls
3400f7b6:	4a1b      	ldrls	r2, [pc, #108]	@ (3400f824 <BSP_LCD_DrawBitmap+0xfc>)
  switch(Lcd_Ctx[Instance].PixelFormat)
3400f7b8:	2300      	movhi	r3, #0
3400f7ba:	5cd3      	ldrbls	r3, [r2, r3]
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
3400f7bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
3400f7c0:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hlcd_dma2d.Init.OutputOffset = 0;
3400f7c4:	2300      	movs	r3, #0
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
3400f7c6:	22ff      	movs	r2, #255	@ 0xff
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
3400f7c8:	e9c5 3b11 	strd	r3, fp, [r5, #68]	@ 0x44
  hlcd_dma2d.Init.OutputOffset = 0;
3400f7cc:	60eb      	str	r3, [r5, #12]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
3400f7ce:	64eb      	str	r3, [r5, #76]	@ 0x4c
  hlcd_dma2d.Instance = DMA2D;
3400f7d0:	4b15      	ldr	r3, [pc, #84]	@ (3400f828 <BSP_LCD_DrawBitmap+0x100>)
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
3400f7d2:	652a      	str	r2, [r5, #80]	@ 0x50
  hlcd_dma2d.Instance = DMA2D;
3400f7d4:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400f7d6:	f003 fe1f 	bl	34013418 <HAL_DMA2D_Init>
3400f7da:	b988      	cbnz	r0, 3400f800 <BSP_LCD_DrawBitmap+0xd8>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
3400f7dc:	2101      	movs	r1, #1
3400f7de:	4628      	mov	r0, r5
3400f7e0:	f003 ff56 	bl	34013690 <HAL_DMA2D_ConfigLayer>
3400f7e4:	b960      	cbnz	r0, 3400f800 <BSP_LCD_DrawBitmap+0xd8>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
3400f7e6:	2301      	movs	r3, #1
3400f7e8:	4632      	mov	r2, r6
3400f7ea:	9300      	str	r3, [sp, #0]
3400f7ec:	4621      	mov	r1, r4
3400f7ee:	9b02      	ldr	r3, [sp, #8]
3400f7f0:	480b      	ldr	r0, [pc, #44]	@ (3400f820 <BSP_LCD_DrawBitmap+0xf8>)
3400f7f2:	f003 fe99 	bl	34013528 <HAL_DMA2D_Start>
3400f7f6:	b918      	cbnz	r0, 3400f800 <BSP_LCD_DrawBitmap+0xd8>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400f7f8:	2132      	movs	r1, #50	@ 0x32
3400f7fa:	4809      	ldr	r0, [pc, #36]	@ (3400f820 <BSP_LCD_DrawBitmap+0xf8>)
3400f7fc:	f003 feca 	bl	34013594 <HAL_DMA2D_PollForTransfer>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
3400f800:	eb07 0308 	add.w	r3, r7, r8
3400f804:	691b      	ldr	r3, [r3, #16]
3400f806:	f857 2008 	ldr.w	r2, [r7, r8]
  for(index=0; index < height; index++)
3400f80a:	f109 0901 	add.w	r9, r9, #1
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
3400f80e:	fb03 6602 	mla	r6, r3, r2, r6
    pbmp -= width*(bit_pixel/8U);
3400f812:	9b03      	ldr	r3, [sp, #12]
3400f814:	441c      	add	r4, r3
  for(index=0; index < height; index++)
3400f816:	e7be      	b.n	3400f796 <BSP_LCD_DrawBitmap+0x6e>
3400f818:	34146034 	.word	0x34146034
3400f81c:	34146054 	.word	0x34146054
3400f820:	341460fc 	.word	0x341460fc
3400f824:	341051c0 	.word	0x341051c0
3400f828:	58021000 	.word	0x58021000

3400f82c <LL_FillBuffer>:
{
3400f82c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3400f830:	461f      	mov	r7, r3
  switch(Lcd_Ctx[Instance].PixelFormat)
3400f832:	4b34      	ldr	r3, [pc, #208]	@ (3400f904 <LL_FillBuffer+0xd8>)
{
3400f834:	4616      	mov	r6, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
3400f836:	eb03 1340 	add.w	r3, r3, r0, lsl #5
3400f83a:	68da      	ldr	r2, [r3, #12]
{
3400f83c:	460d      	mov	r5, r1
3400f83e:	e9dd 1408 	ldrd	r1, r4, [sp, #32]
  switch(Lcd_Ctx[Instance].PixelFormat)
3400f842:	2a02      	cmp	r2, #2
3400f844:	d023      	beq.n	3400f88e <LL_FillBuffer+0x62>
3400f846:	2a04      	cmp	r2, #4
3400f848:	d03e      	beq.n	3400f8c8 <LL_FillBuffer+0x9c>
3400f84a:	2a01      	cmp	r2, #1
3400f84c:	d054      	beq.n	3400f8f8 <LL_FillBuffer+0xcc>
3400f84e:	2200      	movs	r2, #0
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
3400f850:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3400f854:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 3400f90c <LL_FillBuffer+0xe0>
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
3400f858:	e9c8 3201 	strd	r3, r2, [r8, #4]
  hlcd_dma2d.Instance = DMA2D;
3400f85c:	4b2a      	ldr	r3, [pc, #168]	@ (3400f908 <LL_FillBuffer+0xdc>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400f85e:	4640      	mov	r0, r8
  hlcd_dma2d.Init.OutputOffset = OffLine;
3400f860:	f8c8 100c 	str.w	r1, [r8, #12]
  hlcd_dma2d.Instance = DMA2D;
3400f864:	f8c8 3000 	str.w	r3, [r8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
3400f868:	f003 fdd6 	bl	34013418 <HAL_DMA2D_Init>
3400f86c:	2800      	cmp	r0, #0
3400f86e:	d146      	bne.n	3400f8fe <LL_FillBuffer+0xd2>
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
3400f870:	4633      	mov	r3, r6
3400f872:	462a      	mov	r2, r5
3400f874:	4621      	mov	r1, r4
3400f876:	4640      	mov	r0, r8
3400f878:	9700      	str	r7, [sp, #0]
3400f87a:	f003 fe55 	bl	34013528 <HAL_DMA2D_Start>
3400f87e:	bbf0      	cbnz	r0, 3400f8fe <LL_FillBuffer+0xd2>
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400f880:	2132      	movs	r1, #50	@ 0x32
3400f882:	4640      	mov	r0, r8
}
3400f884:	b002      	add	sp, #8
3400f886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
3400f88a:	f003 be83 	b.w	34013594 <HAL_DMA2D_PollForTransfer>
    input_color = CONVERTRGB5652ARGB8888(Color);
3400f88e:	f240 1e03 	movw	lr, #259	@ 0x103
3400f892:	f240 2c0f 	movw	ip, #527	@ 0x20f
3400f896:	f3c4 1045 	ubfx	r0, r4, #5, #6
3400f89a:	f3c4 23c4 	ubfx	r3, r4, #11, #5
3400f89e:	fb0e f000 	mul.w	r0, lr, r0
3400f8a2:	fb0c f303 	mul.w	r3, ip, r3
3400f8a6:	f004 041f 	and.w	r4, r4, #31
3400f8aa:	fb0c f404 	mul.w	r4, ip, r4
3400f8ae:	3021      	adds	r0, #33	@ 0x21
3400f8b0:	3317      	adds	r3, #23
3400f8b2:	0980      	lsrs	r0, r0, #6
3400f8b4:	099b      	lsrs	r3, r3, #6
3400f8b6:	0200      	lsls	r0, r0, #8
3400f8b8:	3417      	adds	r4, #23
3400f8ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
3400f8be:	ea40 1094 	orr.w	r0, r0, r4, lsr #6
3400f8c2:	f040 447f 	orr.w	r4, r0, #4278190080	@ 0xff000000
    break;
3400f8c6:	e7c3      	b.n	3400f850 <LL_FillBuffer+0x24>
    input_color = CONVERTARGB44442ARGB8888(Color);
3400f8c8:	f3c4 3303 	ubfx	r3, r4, #12, #4
3400f8cc:	eb03 1003 	add.w	r0, r3, r3, lsl #4
3400f8d0:	f3c4 2303 	ubfx	r3, r4, #8, #4
3400f8d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
3400f8d8:	041b      	lsls	r3, r3, #16
3400f8da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
3400f8de:	f004 000f 	and.w	r0, r4, #15
3400f8e2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
3400f8e6:	4303      	orrs	r3, r0
3400f8e8:	f3c4 1003 	ubfx	r0, r4, #4, #4
3400f8ec:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
3400f8f0:	4404      	add	r4, r0
3400f8f2:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    break;
3400f8f6:	e7ab      	b.n	3400f850 <LL_FillBuffer+0x24>
    input_color = CONVERTRGB8882ARGB8888(Color);
3400f8f8:	f044 447f 	orr.w	r4, r4, #4278190080	@ 0xff000000
    break;
3400f8fc:	e7a8      	b.n	3400f850 <LL_FillBuffer+0x24>
}
3400f8fe:	b002      	add	sp, #8
3400f900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400f904:	34146034 	.word	0x34146034
3400f908:	58021000 	.word	0x58021000
3400f90c:	341460fc 	.word	0x341460fc

3400f910 <BSP_LCD_DrawHLine>:
{
3400f910:	b573      	push	{r0, r1, r4, r5, r6, lr}
3400f912:	4615      	mov	r5, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f914:	4c0d      	ldr	r4, [pc, #52]	@ (3400f94c <BSP_LCD_DrawHLine+0x3c>)
3400f916:	0146      	lsls	r6, r0, #5
{
3400f918:	461a      	mov	r2, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f91a:	eb04 1340 	add.w	r3, r4, r0, lsl #5
3400f91e:	59a4      	ldr	r4, [r4, r6]
3400f920:	691e      	ldr	r6, [r3, #16]
3400f922:	fb04 1105 	mla	r1, r4, r5, r1
3400f926:	2534      	movs	r5, #52	@ 0x34
3400f928:	689c      	ldr	r4, [r3, #8]
3400f92a:	4b09      	ldr	r3, [pc, #36]	@ (3400f950 <BSP_LCD_DrawHLine+0x40>)
3400f92c:	fb05 3304 	mla	r3, r5, r4, r3
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
3400f930:	2400      	movs	r4, #0
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f932:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
3400f934:	9b06      	ldr	r3, [sp, #24]
3400f936:	fb06 5101 	mla	r1, r6, r1, r5
3400f93a:	9301      	str	r3, [sp, #4]
3400f93c:	9400      	str	r4, [sp, #0]
3400f93e:	2301      	movs	r3, #1
3400f940:	f7ff ff74 	bl	3400f82c <LL_FillBuffer>
}
3400f944:	4620      	mov	r0, r4
3400f946:	b002      	add	sp, #8
3400f948:	bd70      	pop	{r4, r5, r6, pc}
3400f94a:	bf00      	nop
3400f94c:	34146034 	.word	0x34146034
3400f950:	34146054 	.word	0x34146054

3400f954 <BSP_LCD_DrawVLine>:
{
3400f954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f956:	2734      	movs	r7, #52	@ 0x34
3400f958:	4d0c      	ldr	r5, [pc, #48]	@ (3400f98c <BSP_LCD_DrawVLine+0x38>)
3400f95a:	0146      	lsls	r6, r0, #5
3400f95c:	eb05 1440 	add.w	r4, r5, r0, lsl #5
3400f960:	59ad      	ldr	r5, [r5, r6]
3400f962:	6926      	ldr	r6, [r4, #16]
3400f964:	fb02 1105 	mla	r1, r2, r5, r1
3400f968:	68a4      	ldr	r4, [r4, #8]
3400f96a:	4a09      	ldr	r2, [pc, #36]	@ (3400f990 <BSP_LCD_DrawVLine+0x3c>)
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
3400f96c:	3d01      	subs	r5, #1
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f96e:	fb07 2204 	mla	r2, r7, r4, r2
3400f972:	6dd4      	ldr	r4, [r2, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
3400f974:	9a08      	ldr	r2, [sp, #32]
3400f976:	fb06 4101 	mla	r1, r6, r1, r4
3400f97a:	9201      	str	r2, [sp, #4]
3400f97c:	9500      	str	r5, [sp, #0]
3400f97e:	2201      	movs	r2, #1
3400f980:	f7ff ff54 	bl	3400f82c <LL_FillBuffer>
}
3400f984:	2000      	movs	r0, #0
3400f986:	b003      	add	sp, #12
3400f988:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400f98a:	bf00      	nop
3400f98c:	34146034 	.word	0x34146034
3400f990:	34146054 	.word	0x34146054

3400f994 <BSP_LCD_FillRect>:
{
3400f994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400f996:	4615      	mov	r5, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f998:	2734      	movs	r7, #52	@ 0x34
{
3400f99a:	461a      	mov	r2, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f99c:	4b0c      	ldr	r3, [pc, #48]	@ (3400f9d0 <BSP_LCD_FillRect+0x3c>)
3400f99e:	0146      	lsls	r6, r0, #5
3400f9a0:	eb03 1440 	add.w	r4, r3, r0, lsl #5
3400f9a4:	599b      	ldr	r3, [r3, r6]
3400f9a6:	6926      	ldr	r6, [r4, #16]
3400f9a8:	fb05 1503 	mla	r5, r5, r3, r1
3400f9ac:	68a1      	ldr	r1, [r4, #8]
3400f9ae:	4c09      	ldr	r4, [pc, #36]	@ (3400f9d4 <BSP_LCD_FillRect+0x40>)
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3400f9b0:	1a9b      	subs	r3, r3, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
3400f9b2:	fb07 4401 	mla	r4, r7, r1, r4
3400f9b6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
3400f9b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
3400f9ba:	9300      	str	r3, [sp, #0]
3400f9bc:	fb06 1105 	mla	r1, r6, r5, r1
3400f9c0:	9b08      	ldr	r3, [sp, #32]
3400f9c2:	9401      	str	r4, [sp, #4]
3400f9c4:	f7ff ff32 	bl	3400f82c <LL_FillBuffer>
}
3400f9c8:	2000      	movs	r0, #0
3400f9ca:	b003      	add	sp, #12
3400f9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400f9ce:	bf00      	nop
3400f9d0:	34146034 	.word	0x34146034
3400f9d4:	34146054 	.word	0x34146054

3400f9d8 <MX_LTDC_Init>:
{
3400f9d8:	b4f0      	push	{r4, r5, r6, r7}
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
3400f9da:	2400      	movs	r4, #0
3400f9dc:	4d0c      	ldr	r5, [pc, #48]	@ (3400fa10 <MX_LTDC_Init+0x38>)
  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
3400f9de:	2603      	movs	r6, #3
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
3400f9e0:	e9c0 5400 	strd	r5, r4, [r0]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
3400f9e4:	2507      	movs	r5, #7
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
3400f9e6:	194f      	adds	r7, r1, r5
  hltdc->Init.TotalWidth         = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP + RK050HR18_HFP - 1U;
3400f9e8:	310b      	adds	r1, #11
3400f9ea:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hltdc->Init.Backcolor.Blue  = 0x0;
3400f9ec:	8684      	strh	r4, [r0, #52]	@ 0x34
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
3400f9ee:	1951      	adds	r1, r2, r5
  hltdc->Init.Backcolor.Red   = 0x0;
3400f9f0:	f880 4036 	strb.w	r4, [r0, #54]	@ 0x36
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
3400f9f4:	320b      	adds	r2, #11
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
3400f9f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
3400f9fa:	6104      	str	r4, [r0, #16]
  hltdc->Init.HorizontalSync     = (uint32_t)RK050HR18_HSYNC - 1U;
3400f9fc:	6146      	str	r6, [r0, #20]
  hltdc->Init.AccumulatedHBP     = (uint32_t)RK050HR18_HSYNC + (uint32_t)RK050HR18_HBP - 1U;
3400f9fe:	61c5      	str	r5, [r0, #28]
  hltdc->Init.AccumulatedActiveW = (uint32_t)RK050HR18_HSYNC + Width + (uint32_t)RK050HR18_HBP -1U;
3400fa00:	6247      	str	r7, [r0, #36]	@ 0x24
  hltdc->Init.VerticalSync       = (uint32_t)RK050HR18_VSYNC - 1U;
3400fa02:	6186      	str	r6, [r0, #24]
  hltdc->Init.AccumulatedVBP     = (uint32_t)RK050HR18_VSYNC + (uint32_t)RK050HR18_VBP - 1U;
3400fa04:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP -1U;
3400fa06:	6281      	str	r1, [r0, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = (uint32_t)RK050HR18_VSYNC + Height + (uint32_t)RK050HR18_VBP + RK050HR18_VFP - 1U;
3400fa08:	6302      	str	r2, [r0, #48]	@ 0x30
}
3400fa0a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_LTDC_Init(hltdc);
3400fa0c:	f005 ba28 	b.w	34014e60 <HAL_LTDC_Init>
3400fa10:	58001000 	.word	0x58001000

3400fa14 <MX_LTDC_ClockConfig>:
{
3400fa14:	b500      	push	{lr}
3400fa16:	b0e5      	sub	sp, #404	@ 0x194
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3400fa18:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3400fa1c:	2100      	movs	r1, #0
3400fa1e:	4668      	mov	r0, sp
3400fa20:	f010 fc1a 	bl	34020258 <memset>
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
3400fa24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
3400fa28:	2300      	movs	r3, #0
3400fa2a:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
3400fa2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400fa32:	f04f 5140 	mov.w	r1, #805306368	@ 0x30000000
  RCC_PeriphCLKInitStruct.LtdcClockSelection = RCC_LTDCCLKSOURCE_IC16;
3400fa36:	9346      	str	r3, [sp, #280]	@ 0x118
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400fa38:	2302      	movs	r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400fa3a:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC16].ClockDivider = 2;
3400fa3c:	e9cd 1320 	strd	r1, r3, [sp, #128]	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3400fa40:	f006 feb0 	bl	340167a4 <HAL_RCCEx_PeriphCLKConfig>
}
3400fa44:	3800      	subs	r0, #0
3400fa46:	bf18      	it	ne
3400fa48:	2001      	movne	r0, #1
3400fa4a:	b065      	add	sp, #404	@ 0x194
3400fa4c:	f85d fb04 	ldr.w	pc, [sp], #4

3400fa50 <BSP_LCD_InitEx>:
{
3400fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400fa54:	4614      	mov	r4, r2
  MX_LTDC_LayerConfig_t config = {0};
3400fa56:	2218      	movs	r2, #24
{
3400fa58:	460e      	mov	r6, r1
3400fa5a:	b08d      	sub	sp, #52	@ 0x34
3400fa5c:	4605      	mov	r5, r0
  MX_LTDC_LayerConfig_t config = {0};
3400fa5e:	2100      	movs	r1, #0
3400fa60:	eb0d 0002 	add.w	r0, sp, r2
{
3400fa64:	4699      	mov	r9, r3
  MX_LTDC_LayerConfig_t config = {0};
3400fa66:	f010 fbf7 	bl	34020258 <memset>
  if ((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
3400fa6a:	2e01      	cmp	r6, #1
3400fa6c:	f200 80da 	bhi.w	3400fc24 <BSP_LCD_InitEx+0x1d4>
3400fa70:	2d00      	cmp	r5, #0
3400fa72:	f040 80d7 	bne.w	3400fc24 <BSP_LCD_InitEx+0x1d4>
3400fa76:	2c02      	cmp	r4, #2
3400fa78:	f240 80ad 	bls.w	3400fbd6 <BSP_LCD_InitEx+0x186>
      (PixelFormat != LCD_PIXEL_FORMAT_ARGB8888) &&  (PixelFormat != LCD_PIXEL_FORMAT_ARGB4444)))
3400fa7c:	2c04      	cmp	r4, #4
3400fa7e:	f040 80d1 	bne.w	3400fc24 <BSP_LCD_InitEx+0x1d4>
3400fa82:	2302      	movs	r3, #2
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB4444;
3400fa84:	2508      	movs	r5, #8
      Lcd_Ctx[Instance].BppFactor = 2U;
3400fa86:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 3400fc5c <BSP_LCD_InitEx+0x20c>
    hlcd_ltdc.Instance = LTDC;
3400fa8a:	4a68      	ldr	r2, [pc, #416]	@ (3400fc2c <BSP_LCD_InitEx+0x1dc>)
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
3400fa8c:	e9c8 4303 	strd	r4, r3, [r8, #12]
  WRITE_REG(RCC->APB5ENSR, Periphs);
3400fa90:	2402      	movs	r4, #2
    Lcd_Ctx[Instance].YSize  = Height;
3400fa92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
3400fa94:	4e66      	ldr	r6, [pc, #408]	@ (3400fc30 <BSP_LCD_InitEx+0x1e0>)
3400fa96:	f8c8 3004 	str.w	r3, [r8, #4]
    hlcd_ltdc.Instance = LTDC;
3400fa9a:	4b66      	ldr	r3, [pc, #408]	@ (3400fc34 <BSP_LCD_InitEx+0x1e4>)
    hlcd_dma2d.Instance = DMA2D;
3400fa9c:	f8df b1c0 	ldr.w	fp, [pc, #448]	@ 3400fc60 <BSP_LCD_InitEx+0x210>
    hlcd_ltdc.Instance = LTDC;
3400faa0:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
3400faa2:	4b65      	ldr	r3, [pc, #404]	@ (3400fc38 <BSP_LCD_InitEx+0x1e8>)
    Lcd_Ctx[Instance].XSize  = Width;
3400faa4:	f8c8 9000 	str.w	r9, [r8]
    hlcd_dma2d.Instance = DMA2D;
3400faa8:	f8cb 3000 	str.w	r3, [fp]
3400faac:	f8c6 4a7c 	str.w	r4, [r6, #2684]	@ 0xa7c
  tmpreg = READ_REG(RCC->APB5ENR);
3400fab0:	f8d6 327c 	ldr.w	r3, [r6, #636]	@ 0x27c
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400fab4:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 3400fc64 <BSP_LCD_InitEx+0x214>
  tmpreg = READ_REG(RCC->APB5ENR);
3400fab8:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
3400faba:	9b00      	ldr	r3, [sp, #0]
    /* PB13 LCD_CLK     */
    /* PQ4  LCD_INT     */
    /* PQ6  LCD_BL_CTRL */
    /* PE1  NRST        */

    __HAL_RCC_GPIOA_CLK_ENABLE();
3400fabc:	2001      	movs	r0, #1
  WRITE_REG(RCC->APB5RSTSR, Periphs);
3400fabe:	f8c6 4a3c 	str.w	r4, [r6, #2620]	@ 0xa3c
  WRITE_REG(RCC->APB5RSTCR, Periphs);
3400fac2:	f8ca 423c 	str.w	r4, [sl, #572]	@ 0x23c
3400fac6:	f7ff fd3d 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
3400faca:	4620      	mov	r0, r4
3400facc:	f7ff fd3a 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
3400fad0:	2008      	movs	r0, #8
3400fad2:	f7ff fd37 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
3400fad6:	2010      	movs	r0, #16
3400fad8:	f7ff fd34 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOG_CLK_ENABLE();
3400fadc:	2040      	movs	r0, #64	@ 0x40
3400fade:	f7ff fd31 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOH_CLK_ENABLE();
3400fae2:	2080      	movs	r0, #128	@ 0x80
3400fae4:	f7ff fd2e 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOQ_CLK_ENABLE();
3400fae8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
3400faec:	f7ff fd2a 	bl	3400f544 <LL_AHB4_GRP1_EnableClock>

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
    gpio_init_structure.Pull      = GPIO_NOPULL;
3400faf0:	2300      	movs	r3, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;

    /* G3, G2, B7, B1, B6, R5 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400faf2:	270e      	movs	r7, #14
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
3400faf4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
3400faf8:	f248 1387 	movw	r3, #33159	@ 0x8187
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
3400fafc:	484f      	ldr	r0, [pc, #316]	@ (3400fc3c <BSP_LCD_InitEx+0x1ec>)
3400fafe:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_15;
3400fb00:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400fb02:	9705      	str	r7, [sp, #20]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
3400fb04:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
3400fb06:	f003 fea9 	bl	3401385c <HAL_GPIO_Init>

    /* LCD_CLK, LCD_HSYNC B2, R3, G6, G5, G4 */
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
3400fb0a:	f64f 0314 	movw	r3, #63508	@ 0xf814
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
3400fb0e:	484c      	ldr	r0, [pc, #304]	@ (3400fc40 <BSP_LCD_InitEx+0x1f0>)
3400fb10:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
3400fb12:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400fb14:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
3400fb16:	f003 fea1 	bl	3401385c <HAL_GPIO_Init>

    /* R7, R1, R2 */
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
3400fb1a:	f44f 4303 	mov.w	r3, #33536	@ 0x8300
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3400fb1e:	4849      	ldr	r0, [pc, #292]	@ (3400fc44 <BSP_LCD_InitEx+0x1f4>)
3400fb20:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_15;
3400fb22:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400fb24:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
3400fb26:	f003 fe99 	bl	3401385c <HAL_GPIO_Init>

    /* LCD_VSYNC */
    gpio_init_structure.Pin       = GPIO_PIN_11;
3400fb2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400fb2e:	4846      	ldr	r0, [pc, #280]	@ (3400fc48 <BSP_LCD_InitEx+0x1f8>)
3400fb30:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_11;
3400fb32:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400fb34:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400fb36:	f003 fe91 	bl	3401385c <HAL_GPIO_Init>

    /* R0, G1, B3, G7, R6, G0 */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
3400fb3a:	f641 1343 	movw	r3, #6467	@ 0x1943
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400fb3e:	4843      	ldr	r0, [pc, #268]	@ (3400fc4c <BSP_LCD_InitEx+0x1fc>)
3400fb40:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 ;
3400fb42:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400fb44:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400fb46:	f003 fe89 	bl	3401385c <HAL_GPIO_Init>

    /* B4, R4, B5 */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3400fb4a:	2358      	movs	r3, #88	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF14_LCD;
3400fb4c:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);

    /* NRST */
    gpio_init_structure.Pin       = GPIO_PIN_1;
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400fb4e:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3400fb50:	483f      	ldr	r0, [pc, #252]	@ (3400fc50 <BSP_LCD_InitEx+0x200>)
3400fb52:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
3400fb54:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
3400fb56:	f003 fe81 	bl	3401385c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400fb5a:	483b      	ldr	r0, [pc, #236]	@ (3400fc48 <BSP_LCD_InitEx+0x1f8>)
3400fb5c:	a901      	add	r1, sp, #4
    gpio_init_structure.Pin       = GPIO_PIN_1;
3400fb5e:	9401      	str	r4, [sp, #4]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400fb60:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
3400fb62:	f003 fe7b 	bl	3401385c <HAL_GPIO_Init>

    /* LCD_ONOFF, LCD_BL_CTRL */
    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_6;
3400fb66:	2348      	movs	r3, #72	@ 0x48
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3400fb68:	483a      	ldr	r0, [pc, #232]	@ (3400fc54 <BSP_LCD_InitEx+0x204>)
3400fb6a:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400fb6c:	e9cd 3701 	strd	r3, r7, [sp, #4]
    HAL_GPIO_Init(GPIOQ, &gpio_init_structure);
3400fb70:	f003 fe74 	bl	3401385c <HAL_GPIO_Init>

    /* LCD_DE */
    gpio_init_structure.Pin       = GPIO_PIN_13;
3400fb74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400fb78:	4834      	ldr	r0, [pc, #208]	@ (3400fc4c <BSP_LCD_InitEx+0x1fc>)
3400fb7a:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
3400fb7c:	e9cd 3701 	strd	r3, r7, [sp, #4]
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
3400fb80:	f003 fe6c 	bl	3401385c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_3, GPIO_PIN_SET); /* LCD On */ /* PQ3  LCD_ONOFF   */
3400fb84:	463a      	mov	r2, r7
3400fb86:	2108      	movs	r1, #8
3400fb88:	4832      	ldr	r0, [pc, #200]	@ (3400fc54 <BSP_LCD_InitEx+0x204>)
3400fb8a:	f004 f9bf 	bl	34013f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET); /* Display Enable */ /* PG13 LCD_DE      */
3400fb8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400fb92:	463a      	mov	r2, r7
3400fb94:	4619      	mov	r1, r3
3400fb96:	482d      	ldr	r0, [pc, #180]	@ (3400fc4c <BSP_LCD_InitEx+0x1fc>)
3400fb98:	f004 f9b8 	bl	34013f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOQ, GPIO_PIN_6, GPIO_PIN_SET); /* 100% Brightness */ /* PQ6  LCD_BL_CTRL */
3400fb9c:	463a      	mov	r2, r7
3400fb9e:	2140      	movs	r1, #64	@ 0x40
3400fba0:	482c      	ldr	r0, [pc, #176]	@ (3400fc54 <BSP_LCD_InitEx+0x204>)
3400fba2:	f004 f9b3 	bl	34013f0c <HAL_GPIO_WritePin>
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  if(hdma2d->Instance == DMA2D)
3400fba6:	f8db 3000 	ldr.w	r3, [fp]
3400fbaa:	4a23      	ldr	r2, [pc, #140]	@ (3400fc38 <BSP_LCD_InitEx+0x1e8>)
3400fbac:	4293      	cmp	r3, r2
3400fbae:	d109      	bne.n	3400fbc4 <BSP_LCD_InitEx+0x174>
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400fbb0:	f8c6 4a60 	str.w	r4, [r6, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400fbb4:	f8d6 3260 	ldr.w	r3, [r6, #608]	@ 0x260
3400fbb8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400fbba:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400fbbc:	f8c6 4a20 	str.w	r4, [r6, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400fbc0:	f8ca 4220 	str.w	r4, [sl, #544]	@ 0x220
    if (MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
3400fbc4:	481b      	ldr	r0, [pc, #108]	@ (3400fc34 <BSP_LCD_InitEx+0x1e4>)
3400fbc6:	f7ff ff25 	bl	3400fa14 <MX_LTDC_ClockConfig>
3400fbca:	b170      	cbz	r0, 3400fbea <BSP_LCD_InitEx+0x19a>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400fbcc:	f06f 0003 	mvn.w	r0, #3
}
3400fbd0:	b00d      	add	sp, #52	@ 0x34
3400fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (PixelFormat == LCD_PIXEL_FORMAT_RGB565)
3400fbd6:	d005      	beq.n	3400fbe4 <BSP_LCD_InitEx+0x194>
    else if  (PixelFormat == LCD_PIXEL_FORMAT_RGB888)
3400fbd8:	2c01      	cmp	r4, #1
3400fbda:	bf0a      	itet	eq
3400fbdc:	2303      	moveq	r3, #3
3400fbde:	2304      	movne	r3, #4
3400fbe0:	2506      	moveq	r5, #6
3400fbe2:	e750      	b.n	3400fa86 <BSP_LCD_InitEx+0x36>
3400fbe4:	4623      	mov	r3, r4
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
3400fbe6:	2504      	movs	r5, #4
3400fbe8:	e74d      	b.n	3400fa86 <BSP_LCD_InitEx+0x36>
      if (MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
3400fbea:	4649      	mov	r1, r9
3400fbec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
3400fbee:	4811      	ldr	r0, [pc, #68]	@ (3400fc34 <BSP_LCD_InitEx+0x1e4>)
3400fbf0:	f7ff fef2 	bl	3400f9d8 <MX_LTDC_Init>
3400fbf4:	4601      	mov	r1, r0
3400fbf6:	2800      	cmp	r0, #0
3400fbf8:	d1e8      	bne.n	3400fbcc <BSP_LCD_InitEx+0x17c>
        config.Y1          = Height;
3400fbfa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        config.X1          = Width;
3400fbfc:	e9cd 0906 	strd	r0, r9, [sp, #24]
        config.PixelFormat = ltdc_pixel_format;
3400fc00:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
        config.Address     = LCD_LAYER_0_ADDRESS;
3400fc04:	4b14      	ldr	r3, [pc, #80]	@ (3400fc58 <BSP_LCD_InitEx+0x208>)
        config.Y0          = 0;
3400fc06:	9008      	str	r0, [sp, #32]
        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
3400fc08:	aa06      	add	r2, sp, #24
3400fc0a:	480a      	ldr	r0, [pc, #40]	@ (3400fc34 <BSP_LCD_InitEx+0x1e4>)
        config.Address     = LCD_LAYER_0_ADDRESS;
3400fc0c:	930b      	str	r3, [sp, #44]	@ 0x2c
        if (MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
3400fc0e:	f7fd fa4b 	bl	3400d0a8 <MX_LTDC_ConfigLayer>
        Lcd_Ctx[Instance].ReloadEnable = 1U;
3400fc12:	2301      	movs	r3, #1
  int32_t ret = BSP_ERROR_NONE;
3400fc14:	2800      	cmp	r0, #0
3400fc16:	bf14      	ite	ne
3400fc18:	f06f 0003 	mvnne.w	r0, #3
3400fc1c:	2000      	moveq	r0, #0
        Lcd_Ctx[Instance].ReloadEnable = 1U;
3400fc1e:	f8c8 3018 	str.w	r3, [r8, #24]
3400fc22:	e7d5      	b.n	3400fbd0 <BSP_LCD_InitEx+0x180>
    ret = BSP_ERROR_WRONG_PARAM;
3400fc24:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400fc28:	e7d2      	b.n	3400fbd0 <BSP_LCD_InitEx+0x180>
3400fc2a:	bf00      	nop
3400fc2c:	58001000 	.word	0x58001000
3400fc30:	56028000 	.word	0x56028000
3400fc34:	34146054 	.word	0x34146054
3400fc38:	58021000 	.word	0x58021000
3400fc3c:	56020000 	.word	0x56020000
3400fc40:	56020400 	.word	0x56020400
3400fc44:	56020c00 	.word	0x56020c00
3400fc48:	56021000 	.word	0x56021000
3400fc4c:	56021800 	.word	0x56021800
3400fc50:	56021c00 	.word	0x56021c00
3400fc54:	56024000 	.word	0x56024000
3400fc58:	34200000 	.word	0x34200000
3400fc5c:	34146034 	.word	0x34146034
3400fc60:	341460fc 	.word	0x341460fc
3400fc64:	56029000 	.word	0x56029000

3400fc68 <BSP_LCD_Init>:
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
3400fc68:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
{
3400fc6c:	b507      	push	{r0, r1, r2, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB565, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
3400fc6e:	2202      	movs	r2, #2
3400fc70:	9300      	str	r3, [sp, #0]
3400fc72:	f44f 7348 	mov.w	r3, #800	@ 0x320
3400fc76:	f7ff feeb 	bl	3400fa50 <BSP_LCD_InitEx>
}
3400fc7a:	b003      	add	sp, #12
3400fc7c:	f85d fb04 	ldr.w	pc, [sp], #4

3400fc80 <BSP_LCD_ConfigLayer>:
{
3400fc80:	b508      	push	{r3, lr}
  if(Instance >= LCD_INSTANCES_NBR)
3400fc82:	b9a8      	cbnz	r0, 3400fcb0 <BSP_LCD_ConfigLayer+0x30>
    if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_RGB565)
3400fc84:	6913      	ldr	r3, [r2, #16]
3400fc86:	2b02      	cmp	r3, #2
3400fc88:	d10a      	bne.n	3400fca0 <BSP_LCD_ConfigLayer+0x20>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
3400fc8a:	2304      	movs	r3, #4
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
3400fc8c:	6113      	str	r3, [r2, #16]
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
3400fc8e:	480a      	ldr	r0, [pc, #40]	@ (3400fcb8 <BSP_LCD_ConfigLayer+0x38>)
3400fc90:	f7fd fa0a 	bl	3400d0a8 <MX_LTDC_ConfigLayer>
  int32_t ret = BSP_ERROR_NONE;
3400fc94:	2800      	cmp	r0, #0
3400fc96:	bf14      	ite	ne
3400fc98:	f06f 0003 	mvnne.w	r0, #3
3400fc9c:	2000      	moveq	r0, #0
}
3400fc9e:	bd08      	pop	{r3, pc}
    else if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_ARGB4444)
3400fca0:	2b04      	cmp	r3, #4
3400fca2:	d101      	bne.n	3400fca8 <BSP_LCD_ConfigLayer+0x28>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_ARGB4444;
3400fca4:	2308      	movs	r3, #8
3400fca6:	e7f1      	b.n	3400fc8c <BSP_LCD_ConfigLayer+0xc>
    else if (Config->PixelFormat ==  LCD_PIXEL_FORMAT_ARGB8888)
3400fca8:	2b00      	cmp	r3, #0
3400fcaa:	d0f0      	beq.n	3400fc8e <BSP_LCD_ConfigLayer+0xe>
      Config->PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
3400fcac:	2306      	movs	r3, #6
3400fcae:	e7ed      	b.n	3400fc8c <BSP_LCD_ConfigLayer+0xc>
    ret = BSP_ERROR_WRONG_PARAM;
3400fcb0:	f06f 0001 	mvn.w	r0, #1
3400fcb4:	e7f3      	b.n	3400fc9e <BSP_LCD_ConfigLayer+0x1e>
3400fcb6:	bf00      	nop
3400fcb8:	34146054 	.word	0x34146054

3400fcbc <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400fcbc:	4b04      	ldr	r3, [pc, #16]	@ (3400fcd0 <LL_AHB4_GRP1_EnableClock+0x14>)
{
3400fcbe:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3400fcc0:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3400fcc4:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
3400fcc8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3400fcca:	9b01      	ldr	r3, [sp, #4]
}
3400fccc:	b002      	add	sp, #8
3400fcce:	4770      	bx	lr
3400fcd0:	56028000 	.word	0x56028000

3400fcd4 <XSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  XSPI instance
  * @retval BSP status
  */
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400fcd4:	b530      	push	{r4, r5, lr}
{
  int32_t ret;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fcd6:	4c20      	ldr	r4, [pc, #128]	@ (3400fd58 <XSPI_NOR_EnterSOPIMode.constprop.0+0x84>)
static int32_t XSPI_NOR_EnterSOPIMode(uint32_t Instance)
3400fcd8:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fcda:	78a2      	ldrb	r2, [r4, #2]
3400fcdc:	7861      	ldrb	r1, [r4, #1]
3400fcde:	481f      	ldr	r0, [pc, #124]	@ (3400fd5c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400fce0:	f7ff f813 	bl	3400ed0a <MX66UW1G45G_WriteEnable>
3400fce4:	b118      	cbz	r0, 3400fcee <XSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
                                    XSPI_Nor_Ctx[Instance].TransferRate) != MX66UW1G45G_OK)
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400fce6:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
3400fcea:	b005      	add	sp, #20
3400fcec:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fcee:	9000      	str	r0, [sp, #0]
3400fcf0:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400fcf4:	78a2      	ldrb	r2, [r4, #2]
3400fcf6:	7861      	ldrb	r1, [r4, #1]
3400fcf8:	4818      	ldr	r0, [pc, #96]	@ (3400fd5c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400fcfa:	f7ff f88f 	bl	3400ee1c <MX66UW1G45G_WriteCfg2Register>
3400fcfe:	2800      	cmp	r0, #0
3400fd00:	d1f1      	bne.n	3400fce6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fd02:	78a2      	ldrb	r2, [r4, #2]
3400fd04:	7861      	ldrb	r1, [r4, #1]
3400fd06:	4815      	ldr	r0, [pc, #84]	@ (3400fd5c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400fd08:	f7fe ffff 	bl	3400ed0a <MX66UW1G45G_WriteEnable>
3400fd0c:	4603      	mov	r3, r0
3400fd0e:	2800      	cmp	r0, #0
3400fd10:	d1e9      	bne.n	3400fce6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fd12:	2501      	movs	r5, #1
3400fd14:	9500      	str	r5, [sp, #0]
3400fd16:	78a2      	ldrb	r2, [r4, #2]
3400fd18:	7861      	ldrb	r1, [r4, #1]
3400fd1a:	4810      	ldr	r0, [pc, #64]	@ (3400fd5c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400fd1c:	f7ff f87e 	bl	3400ee1c <MX66UW1G45G_WriteCfg2Register>
3400fd20:	4604      	mov	r4, r0
3400fd22:	2800      	cmp	r0, #0
3400fd24:	d1df      	bne.n	3400fce6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400fd26:	2028      	movs	r0, #40	@ 0x28
3400fd28:	f00e feec 	bl	3401eb04 <HAL_Delay>
    if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400fd2c:	4622      	mov	r2, r4
3400fd2e:	4629      	mov	r1, r5
3400fd30:	480a      	ldr	r0, [pc, #40]	@ (3400fd5c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400fd32:	f7fe fec7 	bl	3400eac4 <MX66UW1G45G_AutoPollingMemReady>
3400fd36:	4603      	mov	r3, r0
3400fd38:	2800      	cmp	r0, #0
3400fd3a:	d1d4      	bne.n	3400fce6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400fd3c:	aa03      	add	r2, sp, #12
3400fd3e:	9200      	str	r2, [sp, #0]
3400fd40:	4629      	mov	r1, r5
3400fd42:	4602      	mov	r2, r0
3400fd44:	4805      	ldr	r0, [pc, #20]	@ (3400fd5c <XSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
3400fd46:	f7ff f8c1 	bl	3400eecc <MX66UW1G45G_ReadCfg2Register>
3400fd4a:	2800      	cmp	r0, #0
3400fd4c:	d1cb      	bne.n	3400fce6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX66UW1G45G_CR2_SOPI)
3400fd4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400fd52:	42ab      	cmp	r3, r5
3400fd54:	d0c9      	beq.n	3400fcea <XSPI_NOR_EnterSOPIMode.constprop.0+0x16>
3400fd56:	e7c6      	b.n	3400fce6 <XSPI_NOR_EnterSOPIMode.constprop.0+0x12>
3400fd58:	341461cc 	.word	0x341461cc
3400fd5c:	341461d0 	.word	0x341461d0

3400fd60 <XSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400fd60:	b530      	push	{r4, r5, lr}
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fd62:	4d27      	ldr	r5, [pc, #156]	@ (3400fe00 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
3400fd64:	4c27      	ldr	r4, [pc, #156]	@ (3400fe04 <XSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
static int32_t XSPI_NOR_EnterDOPIMode(uint32_t Instance)
3400fd66:	b085      	sub	sp, #20
  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fd68:	4620      	mov	r0, r4
3400fd6a:	78aa      	ldrb	r2, [r5, #2]
3400fd6c:	7869      	ldrb	r1, [r5, #1]
3400fd6e:	f7fe ffcc 	bl	3400ed0a <MX66UW1G45G_WriteEnable>
3400fd72:	b118      	cbz	r0, 3400fd7c <XSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
3400fd74:	f06f 0004 	mvn.w	r0, #4
}
3400fd78:	b005      	add	sp, #20
3400fd7a:	bd30      	pop	{r4, r5, pc}
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fd7c:	9000      	str	r0, [sp, #0]
3400fd7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
3400fd82:	4620      	mov	r0, r4
3400fd84:	78aa      	ldrb	r2, [r5, #2]
3400fd86:	7869      	ldrb	r1, [r5, #1]
3400fd88:	f7ff f848 	bl	3400ee1c <MX66UW1G45G_WriteCfg2Register>
3400fd8c:	2800      	cmp	r0, #0
3400fd8e:	d1f1      	bne.n	3400fd74 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fd90:	4620      	mov	r0, r4
3400fd92:	78aa      	ldrb	r2, [r5, #2]
3400fd94:	7869      	ldrb	r1, [r5, #1]
3400fd96:	f7fe ffb8 	bl	3400ed0a <MX66UW1G45G_WriteEnable>
3400fd9a:	4603      	mov	r3, r0
3400fd9c:	2800      	cmp	r0, #0
3400fd9e:	d1e9      	bne.n	3400fd74 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fda0:	2202      	movs	r2, #2
3400fda2:	9200      	str	r2, [sp, #0]
3400fda4:	4620      	mov	r0, r4
3400fda6:	78aa      	ldrb	r2, [r5, #2]
3400fda8:	7869      	ldrb	r1, [r5, #1]
3400fdaa:	f7ff f837 	bl	3400ee1c <MX66UW1G45G_WriteCfg2Register>
3400fdae:	2800      	cmp	r0, #0
3400fdb0:	d1e0      	bne.n	3400fd74 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400fdb2:	2028      	movs	r0, #40	@ 0x28
3400fdb4:	f00e fea6 	bl	3401eb04 <HAL_Delay>
    hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400fdb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3400fdbc:	60e3      	str	r3, [r4, #12]
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400fdbe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400fdc2:	4620      	mov	r0, r4
    hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400fdc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400fdc6:	f00c fc91 	bl	3401c6ec <HAL_XSPI_Init>
3400fdca:	b9a8      	cbnz	r0, 3400fdf8 <XSPI_NOR_EnterDOPIMode.constprop.0+0x98>
    else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
3400fdcc:	2201      	movs	r2, #1
3400fdce:	4620      	mov	r0, r4
3400fdd0:	4611      	mov	r1, r2
3400fdd2:	f7fe fe77 	bl	3400eac4 <MX66UW1G45G_AutoPollingMemReady>
3400fdd6:	4603      	mov	r3, r0
3400fdd8:	2800      	cmp	r0, #0
3400fdda:	d1cb      	bne.n	3400fd74 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE, BSP_XSPI_NOR_DTR_TRANSFER,
3400fddc:	aa03      	add	r2, sp, #12
3400fdde:	9200      	str	r2, [sp, #0]
3400fde0:	2201      	movs	r2, #1
3400fde2:	4620      	mov	r0, r4
3400fde4:	4611      	mov	r1, r2
3400fde6:	f7ff f871 	bl	3400eecc <MX66UW1G45G_ReadCfg2Register>
3400fdea:	2800      	cmp	r0, #0
3400fdec:	d1c2      	bne.n	3400fd74 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX66UW1G45G_CR2_DOPI)
3400fdee:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400fdf2:	2b02      	cmp	r3, #2
3400fdf4:	d0c0      	beq.n	3400fd78 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400fdf6:	e7bd      	b.n	3400fd74 <XSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
3400fdf8:	f06f 0003 	mvn.w	r0, #3
  return ret;
3400fdfc:	e7bc      	b.n	3400fd78 <XSPI_NOR_EnterDOPIMode.constprop.0+0x18>
3400fdfe:	bf00      	nop
3400fe00:	341461cc 	.word	0x341461cc
3400fe04:	341461d0 	.word	0x341461d0

3400fe08 <MX_XSPI_NOR_Init>:
  hxspi->Init.FifoThresholdByte       = 1;
3400fe08:	2301      	movs	r3, #1
3400fe0a:	4a0f      	ldr	r2, [pc, #60]	@ (3400fe48 <MX_XSPI_NOR_Init+0x40>)
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400fe0c:	f04f 0c02 	mov.w	ip, #2
  hxspi->Init.FifoThresholdByte       = 1;
3400fe10:	e9c0 2300 	strd	r2, r3, [r0]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400fe14:	680b      	ldr	r3, [r1, #0]
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400fe16:	684a      	ldr	r2, [r1, #4]
  hxspi->Init.MemorySize              = Init->MemorySize; /* 1 GBits */
3400fe18:	6103      	str	r3, [r0, #16]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400fe1a:	2300      	movs	r3, #0
  hxspi->Init.ClockPrescaler          = Init->ClockPrescaler;
3400fe1c:	6242      	str	r2, [r0, #36]	@ 0x24
  hxspi->Init.DelayHoldQuarterCycle   = HAL_XSPI_DHQC_DISABLE;
3400fe1e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hxspi->Init.SampleShifting          = Init->SampleShifting;
3400fe20:	688a      	ldr	r2, [r1, #8]
  hxspi->Init.FreeRunningClock        = HAL_XSPI_FREERUNCLK_DISABLE;
3400fe22:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hxspi->Init.ClockMode               = HAL_XSPI_CLOCK_MODE_0;
3400fe26:	61c3      	str	r3, [r0, #28]
  hxspi->Init.ChipSelectBoundary      = HAL_XSPI_BONDARYOF_NONE;
3400fe28:	6303      	str	r3, [r0, #48]	@ 0x30
  hxspi->Init.MemoryMode              = HAL_XSPI_SINGLE_MEM;
3400fe2a:	6083      	str	r3, [r0, #8]
  hxspi->Init.WrapSize                = HAL_XSPI_WRAP_NOT_SUPPORTED;
3400fe2c:	6203      	str	r3, [r0, #32]
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400fe2e:	68cb      	ldr	r3, [r1, #12]
  hxspi->Init.SampleShifting          = Init->SampleShifting;
3400fe30:	6282      	str	r2, [r0, #40]	@ 0x28
  if (Init->TransferRate == (uint32_t) BSP_XSPI_NOR_DTR_TRANSFER)
3400fe32:	2b01      	cmp	r3, #1
3400fe34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    hxspi->Init.MemoryType            = HAL_XSPI_MEMTYPE_MACRONIX;
3400fe38:	60c3      	str	r3, [r0, #12]
    hxspi->Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
3400fe3a:	bf04      	itt	eq
3400fe3c:	f04f 5380 	moveq.w	r3, #268435456	@ 0x10000000
3400fe40:	62c3      	streq	r3, [r0, #44]	@ 0x2c
  return HAL_XSPI_Init(hxspi);
3400fe42:	f00c bc53 	b.w	3401c6ec <HAL_XSPI_Init>
3400fe46:	bf00      	nop
3400fe48:	5802a000 	.word	0x5802a000

3400fe4c <BSP_XSPI_NOR_EnableMemoryMappedMode>:
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400fe4c:	4601      	mov	r1, r0
{
3400fe4e:	b510      	push	{r4, lr}
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400fe50:	b9b0      	cbnz	r0, 3400fe80 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x34>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400fe52:	4c0d      	ldr	r4, [pc, #52]	@ (3400fe88 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x3c>)
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
3400fe54:	480d      	ldr	r0, [pc, #52]	@ (3400fe8c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400fe56:	f00d f823 	bl	3401cea0 <HAL_XSPI_SetClockPrescaler>
    if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400fe5a:	78a3      	ldrb	r3, [r4, #2]
3400fe5c:	7861      	ldrb	r1, [r4, #1]
3400fe5e:	b95b      	cbnz	r3, 3400fe78 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x2c>
      if (MX66UW1G45G_EnableMemoryMappedModeSTR(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fe60:	2201      	movs	r2, #1
3400fe62:	480a      	ldr	r0, [pc, #40]	@ (3400fe8c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400fe64:	f7fe fe9c 	bl	3400eba0 <MX66UW1G45G_EnableSTRMemoryMappedMode>
3400fe68:	b110      	cbz	r0, 3400fe70 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x24>
        ret = BSP_ERROR_COMPONENT_FAILURE;
3400fe6a:	f06f 0004 	mvn.w	r0, #4
}
3400fe6e:	bd10      	pop	{r4, pc}
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400fe70:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
3400fe72:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_MMP;
3400fe74:	7023      	strb	r3, [r4, #0]
3400fe76:	e7fa      	b.n	3400fe6e <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
      if (MX66UW1G45G_EnableMemoryMappedModeDTR(&hxspi_nor[Instance],
3400fe78:	4804      	ldr	r0, [pc, #16]	@ (3400fe8c <BSP_XSPI_NOR_EnableMemoryMappedMode+0x40>)
3400fe7a:	f7fe fef6 	bl	3400ec6a <MX66UW1G45G_EnableDTRMemoryMappedMode>
3400fe7e:	e7f3      	b.n	3400fe68 <BSP_XSPI_NOR_EnableMemoryMappedMode+0x1c>
    ret = BSP_ERROR_WRONG_PARAM;
3400fe80:	f06f 0001 	mvn.w	r0, #1
  return ret;
3400fe84:	e7f3      	b.n	3400fe6e <BSP_XSPI_NOR_EnableMemoryMappedMode+0x22>
3400fe86:	bf00      	nop
3400fe88:	341461cc 	.word	0x341461cc
3400fe8c:	341461d0 	.word	0x341461d0

3400fe90 <BSP_XSPI_NOR_ConfigFlash>:
{
3400fe90:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
3400fe94:	460d      	mov	r5, r1
3400fe96:	4616      	mov	r6, r2
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400fe98:	2800      	cmp	r0, #0
3400fe9a:	d15f      	bne.n	3400ff5c <BSP_XSPI_NOR_ConfigFlash+0xcc>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_MMP)
3400fe9c:	4c32      	ldr	r4, [pc, #200]	@ (3400ff68 <BSP_XSPI_NOR_ConfigFlash+0xd8>)
3400fe9e:	7823      	ldrb	r3, [r4, #0]
3400fea0:	2b02      	cmp	r3, #2
3400fea2:	d05e      	beq.n	3400ff62 <BSP_XSPI_NOR_ConfigFlash+0xd2>
      switch (XSPI_Nor_Ctx[Instance].InterfaceMode)
3400fea4:	7863      	ldrb	r3, [r4, #1]
3400fea6:	2b01      	cmp	r3, #1
3400fea8:	d14f      	bne.n	3400ff4a <BSP_XSPI_NOR_ConfigFlash+0xba>
          if ((Mode != BSP_XSPI_NOR_OPI_MODE) || (Rate != XSPI_Nor_Ctx[Instance].TransferRate))
3400feaa:	2901      	cmp	r1, #1
3400feac:	78a2      	ldrb	r2, [r4, #2]
3400feae:	d109      	bne.n	3400fec4 <BSP_XSPI_NOR_ConfigFlash+0x34>
3400feb0:	4296      	cmp	r6, r2
3400feb2:	d107      	bne.n	3400fec4 <BSP_XSPI_NOR_ConfigFlash+0x34>
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400feb4:	2301      	movs	r3, #1
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
3400feb6:	2000      	movs	r0, #0
        XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
3400feb8:	7023      	strb	r3, [r4, #0]
        XSPI_Nor_Ctx[Instance].InterfaceMode = Mode;
3400feba:	7065      	strb	r5, [r4, #1]
        XSPI_Nor_Ctx[Instance].TransferRate  = Rate;
3400febc:	70a6      	strb	r6, [r4, #2]
}
3400febe:	b004      	add	sp, #16
3400fec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static int32_t XSPI_NOR_ExitOPIMode(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  uint8_t reg[2];

  if (MX66UW1G45G_WriteEnable(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fec4:	4f29      	ldr	r7, [pc, #164]	@ (3400ff6c <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400fec6:	2101      	movs	r1, #1
3400fec8:	4638      	mov	r0, r7
3400feca:	f7fe ff1e 	bl	3400ed0a <MX66UW1G45G_WriteEnable>
3400fece:	4603      	mov	r3, r0
3400fed0:	b110      	cbz	r0, 3400fed8 <BSP_XSPI_NOR_ConfigFlash+0x48>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400fed2:	f06f 0004 	mvn.w	r0, #4
3400fed6:	e7f2      	b.n	3400febe <BSP_XSPI_NOR_ConfigFlash+0x2e>
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
    reg[1] = 0;
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fed8:	9000      	str	r0, [sp, #0]
    reg[0] = 0;
3400feda:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (MX66UW1G45G_WriteCfg2Register(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
3400fede:	78a2      	ldrb	r2, [r4, #2]
3400fee0:	4638      	mov	r0, r7
3400fee2:	7861      	ldrb	r1, [r4, #1]
3400fee4:	f7fe ff9a 	bl	3400ee1c <MX66UW1G45G_WriteCfg2Register>
3400fee8:	4680      	mov	r8, r0
3400feea:	2800      	cmp	r0, #0
3400feec:	d1f1      	bne.n	3400fed2 <BSP_XSPI_NOR_ConfigFlash+0x42>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX66UW1G45G_WRITE_REG_MAX_TIME);
3400feee:	2028      	movs	r0, #40	@ 0x28
3400fef0:	f00e fe08 	bl	3401eb04 <HAL_Delay>

      if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_DTR_TRANSFER)
3400fef4:	78a3      	ldrb	r3, [r4, #2]
3400fef6:	2b01      	cmp	r3, #1
3400fef8:	d01b      	beq.n	3400ff32 <BSP_XSPI_NOR_ConfigFlash+0xa2>
      }

      if (ret == BSP_ERROR_NONE)
      {
        /* Check Flash busy ? */
        if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
3400fefa:	2200      	movs	r2, #0
3400fefc:	481b      	ldr	r0, [pc, #108]	@ (3400ff6c <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400fefe:	4611      	mov	r1, r2
3400ff00:	f7fe fde0 	bl	3400eac4 <MX66UW1G45G_AutoPollingMemReady>
3400ff04:	4603      	mov	r3, r0
3400ff06:	2800      	cmp	r0, #0
3400ff08:	d1e3      	bne.n	3400fed2 <BSP_XSPI_NOR_ConfigFlash+0x42>
                                             BSP_XSPI_NOR_STR_TRANSFER) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        /* Check the configuration has been correctly done */
        else if (MX66UW1G45G_ReadCfg2Register(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE, BSP_XSPI_NOR_STR_TRANSFER,
3400ff0a:	aa03      	add	r2, sp, #12
3400ff0c:	4601      	mov	r1, r0
3400ff0e:	9200      	str	r2, [sp, #0]
3400ff10:	4602      	mov	r2, r0
3400ff12:	4816      	ldr	r0, [pc, #88]	@ (3400ff6c <BSP_XSPI_NOR_ConfigFlash+0xdc>)
3400ff14:	f7fe ffda 	bl	3400eecc <MX66UW1G45G_ReadCfg2Register>
3400ff18:	2800      	cmp	r0, #0
3400ff1a:	d1da      	bne.n	3400fed2 <BSP_XSPI_NOR_ConfigFlash+0x42>
                                               MX66UW1G45G_CR2_REG1_ADDR, reg) != MX66UW1G45G_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
        }
        else if (reg[0] != 0U)
3400ff1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
3400ff20:	2b00      	cmp	r3, #0
3400ff22:	d1d6      	bne.n	3400fed2 <BSP_XSPI_NOR_ConfigFlash+0x42>
            if ((ret == BSP_ERROR_NONE) && (Mode == BSP_XSPI_NOR_OPI_MODE))
3400ff24:	2d01      	cmp	r5, #1
3400ff26:	d1c5      	bne.n	3400feb4 <BSP_XSPI_NOR_ConfigFlash+0x24>
              if (XSPI_Nor_Ctx[Instance].TransferRate == BSP_XSPI_NOR_STR_TRANSFER)
3400ff28:	78a3      	ldrb	r3, [r4, #2]
3400ff2a:	b993      	cbnz	r3, 3400ff52 <BSP_XSPI_NOR_ConfigFlash+0xc2>
              ret = XSPI_NOR_EnterDOPIMode(Instance);
3400ff2c:	f7ff ff18 	bl	3400fd60 <XSPI_NOR_EnterDOPIMode.constprop.0>
3400ff30:	e011      	b.n	3400ff56 <BSP_XSPI_NOR_ConfigFlash+0xc6>
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400ff32:	4638      	mov	r0, r7
        hxspi_nor[Instance].Init.MemoryType            = HAL_XSPI_MEMTYPE_MICRON;
3400ff34:	f8c7 800c 	str.w	r8, [r7, #12]
        hxspi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_DISABLE;
3400ff38:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        if (HAL_XSPI_Init(&hxspi_nor[Instance]) != HAL_OK)
3400ff3c:	f00c fbd6 	bl	3401c6ec <HAL_XSPI_Init>
3400ff40:	2800      	cmp	r0, #0
3400ff42:	d0da      	beq.n	3400fefa <BSP_XSPI_NOR_ConfigFlash+0x6a>
            ret = XSPI_NOR_ExitOPIMode(Instance);
3400ff44:	f06f 0003 	mvn.w	r0, #3
3400ff48:	e7b9      	b.n	3400febe <BSP_XSPI_NOR_ConfigFlash+0x2e>
          if (Mode == BSP_XSPI_NOR_OPI_MODE)
3400ff4a:	2901      	cmp	r1, #1
3400ff4c:	d1b2      	bne.n	3400feb4 <BSP_XSPI_NOR_ConfigFlash+0x24>
            if (Rate == BSP_XSPI_NOR_STR_TRANSFER)
3400ff4e:	2a00      	cmp	r2, #0
3400ff50:	d1ec      	bne.n	3400ff2c <BSP_XSPI_NOR_ConfigFlash+0x9c>
              ret = XSPI_NOR_EnterSOPIMode(Instance);
3400ff52:	f7ff febf 	bl	3400fcd4 <XSPI_NOR_EnterSOPIMode.constprop.0>
      if (ret == BSP_ERROR_NONE)
3400ff56:	2800      	cmp	r0, #0
3400ff58:	d1b1      	bne.n	3400febe <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400ff5a:	e7ab      	b.n	3400feb4 <BSP_XSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
3400ff5c:	f06f 0001 	mvn.w	r0, #1
3400ff60:	e7ad      	b.n	3400febe <BSP_XSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_XSPI_MMP_LOCK_FAILURE;
3400ff62:	f06f 0019 	mvn.w	r0, #25
  return ret;
3400ff66:	e7aa      	b.n	3400febe <BSP_XSPI_NOR_ConfigFlash+0x2e>
3400ff68:	341461cc 	.word	0x341461cc
3400ff6c:	341461d0 	.word	0x341461d0

3400ff70 <BSP_XSPI_NOR_Init>:
{
3400ff70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400ff74:	4689      	mov	r9, r1
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400ff76:	4604      	mov	r4, r0
3400ff78:	4e82      	ldr	r6, [pc, #520]	@ (34010184 <BSP_XSPI_NOR_Init+0x214>)
{
3400ff7a:	b08f      	sub	sp, #60	@ 0x3c
  if (Instance >= XSPI_NOR_INSTANCES_NUMBER)
3400ff7c:	2800      	cmp	r0, #0
3400ff7e:	f040 80fa 	bne.w	34010176 <BSP_XSPI_NOR_Init+0x206>
    if (XSPI_Nor_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
3400ff82:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 34010190 <BSP_XSPI_NOR_Init+0x220>
3400ff86:	f898 3000 	ldrb.w	r3, [r8]
3400ff8a:	b153      	cbz	r3, 3400ffa2 <BSP_XSPI_NOR_Init+0x32>
      ret = BSP_ERROR_NONE;
3400ff8c:	2500      	movs	r5, #0
 (void) (HAL_XSPI_SetClockPrescaler(&hxspi_nor[Instance], 0));
3400ff8e:	2064      	movs	r0, #100	@ 0x64
3400ff90:	2100      	movs	r1, #0
3400ff92:	fb00 6004 	mla	r0, r0, r4, r6
3400ff96:	f00c ff83 	bl	3401cea0 <HAL_XSPI_SetClockPrescaler>
}
3400ff9a:	4628      	mov	r0, r5
3400ff9c:	b00f      	add	sp, #60	@ 0x3c
3400ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3400ffa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3400ffa6:	4a78      	ldr	r2, [pc, #480]	@ (34010188 <BSP_XSPI_NOR_Init+0x218>)
  __HAL_RCC_PWR_CLK_ENABLE();
3400ffa8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3400ffac:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3400ffb0:	f8d2 1260 	ldr.w	r1, [r2, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
3400ffb4:	2509      	movs	r5, #9
3400ffb6:	9100      	str	r1, [sp, #0]
  (void)tmpreg;
3400ffb8:	9900      	ldr	r1, [sp, #0]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3400ffba:	f8c2 3a20 	str.w	r3, [r2, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3400ffbe:	441a      	add	r2, r3
3400ffc0:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220
  __HAL_RCC_PWR_CLK_ENABLE();
3400ffc4:	f7ff fe7a 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO3();
3400ffc8:	f005 fa06 	bl	340153d8 <HAL_PWREx_EnableVddIO3>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO3, PWR_VDDIO_RANGE_1V8);
3400ffcc:	2101      	movs	r1, #1
3400ffce:	2002      	movs	r0, #2
3400ffd0:	f005 f9b4 	bl	3401533c <HAL_PWREx_ConfigVddIORange>
  XSPI_NOR_CLK_GPIO_CLK_ENABLE();
3400ffd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3400ffd8:	f7ff fe70 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400ffdc:	2701      	movs	r7, #1
  XSPI_NOR_DQS_GPIO_CLK_ENABLE();
3400ffde:	f7ff fe6d 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
3400ffe2:	f04f 0b03 	mov.w	fp, #3
  XSPI_NOR_CS_GPIO_CLK_ENABLE();
3400ffe6:	f7ff fe69 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D0_GPIO_CLK_ENABLE();
3400ffea:	f7ff fe67 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D1_GPIO_CLK_ENABLE();
3400ffee:	f7ff fe65 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D2_GPIO_CLK_ENABLE();
3400fff2:	f7ff fe63 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D3_GPIO_CLK_ENABLE();
3400fff6:	f7ff fe61 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D4_GPIO_CLK_ENABLE();
3400fffa:	f7ff fe5f 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D5_GPIO_CLK_ENABLE();
3400fffe:	f7ff fe5d 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D6_GPIO_CLK_ENABLE();
34010002:	f7ff fe5b 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_NOR_D7_GPIO_CLK_ENABLE();
34010006:	f7ff fe59 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  GPIO_InitStruct.Pin       = XSPI_NOR_CS_PIN;
3401000a:	2302      	movs	r3, #2
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
3401000c:	485f      	ldr	r0, [pc, #380]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401000e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34010010:	e9cd 3305 	strd	r3, r3, [sp, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
34010014:	e9cd 7b07 	strd	r7, fp, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CS_PIN_AF;
34010018:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
3401001a:	f003 fc1f 	bl	3401385c <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
3401001e:	485b      	ldr	r0, [pc, #364]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
34010020:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_DQS_PIN;
34010022:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_DQS_PIN_AF;
34010024:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
34010026:	f003 fc19 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
3401002a:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
3401002c:	4857      	ldr	r0, [pc, #348]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401002e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_CLK_PIN;
34010030:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
34010032:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = XSPI_NOR_CLK_PIN_AF;
34010034:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
34010036:	f003 fc11 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
3401003a:	2304      	movs	r3, #4
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
3401003c:	4853      	ldr	r0, [pc, #332]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401003e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D0_PIN;
34010040:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D0_PIN_AF;
34010042:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
34010044:	f003 fc0a 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
34010048:	2308      	movs	r3, #8
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
3401004a:	4850      	ldr	r0, [pc, #320]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401004c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D1_PIN;
3401004e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D1_PIN_AF;
34010050:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
34010052:	f003 fc03 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
34010056:	2310      	movs	r3, #16
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
34010058:	f04f 0a20 	mov.w	sl, #32
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
3401005c:	484b      	ldr	r0, [pc, #300]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401005e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D2_PIN;
34010060:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D2_PIN_AF;
34010062:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
34010064:	f003 fbfa 	bl	3401385c <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
34010068:	4848      	ldr	r0, [pc, #288]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401006a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D3_PIN;
3401006c:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D3_PIN_AF;
34010070:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
34010072:	f003 fbf3 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
34010076:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
3401007a:	4844      	ldr	r0, [pc, #272]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401007c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D4_PIN;
3401007e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D4_PIN_AF;
34010080:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
34010082:	f003 fbeb 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
34010086:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
3401008a:	4840      	ldr	r0, [pc, #256]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401008c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D5_PIN;
3401008e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D5_PIN_AF;
34010090:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
34010092:	f003 fbe3 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
34010096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
3401009a:	483c      	ldr	r0, [pc, #240]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
3401009c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_NOR_D6_PIN;
3401009e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D6_PIN_AF;
340100a0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
340100a2:	f003 fbdb 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
340100a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
340100aa:	a905      	add	r1, sp, #20
340100ac:	4837      	ldr	r0, [pc, #220]	@ (3401018c <BSP_XSPI_NOR_Init+0x21c>)
  GPIO_InitStruct.Pin       = XSPI_NOR_D7_PIN;
340100ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_NOR_D7_PIN_AF;
340100b0:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
340100b2:	f003 fbd3 	bl	3401385c <HAL_GPIO_Init>
      (void)MX66UW1G45G_GetFlashInfo(&pInfo);
340100b6:	a805      	add	r0, sp, #20
340100b8:	f7fe fceb 	bl	3400ea92 <MX66UW1G45G_GetFlashInfo>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
340100bc:	9b05      	ldr	r3, [sp, #20]
340100be:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
340100c2:	2b00      	cmp	r3, #0
340100c4:	fab3 f283 	clz	r2, r3
340100c8:	bf08      	it	eq
340100ca:	4652      	moveq	r2, sl
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
340100cc:	f899 3001 	ldrb.w	r3, [r9, #1]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340100d0:	4630      	mov	r0, r6
340100d2:	a901      	add	r1, sp, #4
      xspi_init.ClockPrescaler = 0x03; /* XSPI clock = 200MHz / ClockPrescaler = 50MHz, then switch to 200MHz*/
340100d4:	f8cd b008 	str.w	fp, [sp, #8]
      xspi_init.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
340100d8:	9201      	str	r2, [sp, #4]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
340100da:	9403      	str	r4, [sp, #12]
      xspi_init.TransferRate   = (uint32_t)Init->TransferRate;
340100dc:	9304      	str	r3, [sp, #16]
      if (MX_XSPI_NOR_Init(&hxspi_nor[Instance], &xspi_init) != HAL_OK)
340100de:	f7ff fe93 	bl	3400fe08 <MX_XSPI_NOR_Init>
340100e2:	2800      	cmp	r0, #0
340100e4:	d14a      	bne.n	3401017c <BSP_XSPI_NOR_Init+0x20c>
  if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340100e6:	4622      	mov	r2, r4
340100e8:	4621      	mov	r1, r4
340100ea:	4630      	mov	r0, r6
340100ec:	f7fe ff50 	bl	3400ef90 <MX66UW1G45G_ResetEnable>
340100f0:	b110      	cbz	r0, 340100f8 <BSP_XSPI_NOR_Init+0x188>
        ret = BSP_ERROR_COMPONENT_FAILURE;
340100f2:	f06f 0504 	mvn.w	r5, #4
340100f6:	e74a      	b.n	3400ff8e <BSP_XSPI_NOR_Init+0x1e>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_SPI_MODE,
340100f8:	4622      	mov	r2, r4
340100fa:	4621      	mov	r1, r4
340100fc:	4630      	mov	r0, r6
340100fe:	f7fe ff74 	bl	3400efea <MX66UW1G45G_ResetMemory>
34010102:	2800      	cmp	r0, #0
34010104:	d1f5      	bne.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34010106:	4622      	mov	r2, r4
34010108:	4639      	mov	r1, r7
3401010a:	4630      	mov	r0, r6
3401010c:	f7fe ff40 	bl	3400ef90 <MX66UW1G45G_ResetEnable>
34010110:	2800      	cmp	r0, #0
34010112:	d1ee      	bne.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34010114:	4622      	mov	r2, r4
34010116:	4639      	mov	r1, r7
34010118:	4630      	mov	r0, r6
3401011a:	f7fe ff66 	bl	3400efea <MX66UW1G45G_ResetMemory>
3401011e:	2800      	cmp	r0, #0
34010120:	d1e7      	bne.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetEnable(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34010122:	463a      	mov	r2, r7
34010124:	4639      	mov	r1, r7
34010126:	4630      	mov	r0, r6
34010128:	f7fe ff32 	bl	3400ef90 <MX66UW1G45G_ResetEnable>
3401012c:	2800      	cmp	r0, #0
3401012e:	d1e0      	bne.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
  else if (MX66UW1G45G_ResetMemory(&hxspi_nor[Instance], BSP_XSPI_NOR_OPI_MODE,
34010130:	463a      	mov	r2, r7
34010132:	4639      	mov	r1, r7
34010134:	4630      	mov	r0, r6
34010136:	f7fe ff58 	bl	3400efea <MX66UW1G45G_ResetMemory>
3401013a:	2800      	cmp	r0, #0
3401013c:	d1d9      	bne.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
3401013e:	2064      	movs	r0, #100	@ 0x64
    XSPI_Nor_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;     /* After reset S/W setting to indirect access  */
34010140:	f888 7000 	strb.w	r7, [r8]
    XSPI_Nor_Ctx[Instance].InterfaceMode = BSP_XSPI_NOR_SPI_MODE;    /* After reset H/W back to SPI mode by default */
34010144:	f888 4001 	strb.w	r4, [r8, #1]
    XSPI_Nor_Ctx[Instance].TransferRate  = BSP_XSPI_NOR_STR_TRANSFER; /* After reset S/W setting to STR mode        */
34010148:	f888 4002 	strb.w	r4, [r8, #2]
    HAL_Delay(MX66UW1G45G_RESET_MAX_TIME);
3401014c:	f00e fcda 	bl	3401eb04 <HAL_Delay>
      else if (MX66UW1G45G_AutoPollingMemReady(&hxspi_nor[Instance], XSPI_Nor_Ctx[Instance].InterfaceMode,
34010150:	4630      	mov	r0, r6
34010152:	f898 2002 	ldrb.w	r2, [r8, #2]
34010156:	f898 1001 	ldrb.w	r1, [r8, #1]
3401015a:	f7fe fcb3 	bl	3400eac4 <MX66UW1G45G_AutoPollingMemReady>
3401015e:	2800      	cmp	r0, #0
34010160:	d1c7      	bne.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
      else if (BSP_XSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
34010162:	f899 2001 	ldrb.w	r2, [r9, #1]
34010166:	f899 1000 	ldrb.w	r1, [r9]
3401016a:	f7ff fe91 	bl	3400fe90 <BSP_XSPI_NOR_ConfigFlash>
3401016e:	2800      	cmp	r0, #0
34010170:	f43f af0c 	beq.w	3400ff8c <BSP_XSPI_NOR_Init+0x1c>
34010174:	e7bd      	b.n	340100f2 <BSP_XSPI_NOR_Init+0x182>
    ret = BSP_ERROR_WRONG_PARAM;
34010176:	f06f 0501 	mvn.w	r5, #1
3401017a:	e708      	b.n	3400ff8e <BSP_XSPI_NOR_Init+0x1e>
        ret = BSP_ERROR_PERIPH_FAILURE;
3401017c:	f06f 0503 	mvn.w	r5, #3
34010180:	e705      	b.n	3400ff8e <BSP_XSPI_NOR_Init+0x1e>
34010182:	bf00      	nop
34010184:	341461d0 	.word	0x341461d0
34010188:	56028000 	.word	0x56028000
3401018c:	56023400 	.word	0x56023400
34010190:	341461cc 	.word	0x341461cc

34010194 <MX_XSPI_RAM_Init>:
{
34010194:	b538      	push	{r3, r4, r5, lr}
34010196:	4604      	mov	r4, r0
34010198:	460d      	mov	r5, r1
  uint32_t hspi_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI1);
3401019a:	2000      	movs	r0, #0
3401019c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
340101a0:	f00a fc6e 	bl	3401aa80 <HAL_RCCEx_GetPeriphCLKFreq>
  hxspi->Init.FifoThresholdByte          = 8;
340101a4:	2308      	movs	r3, #8
340101a6:	4a13      	ldr	r2, [pc, #76]	@ (340101f4 <MX_XSPI_RAM_Init+0x60>)
  hxspi->Init.SampleShifting             = Init->SampleShifting;
340101a8:	68a9      	ldr	r1, [r5, #8]
  hxspi->Init.FifoThresholdByte          = 8;
340101aa:	e9c4 2300 	strd	r2, r3, [r4]
  hxspi->Init.MemoryMode                 = HAL_XSPI_SINGLE_MEM;
340101ae:	2200      	movs	r2, #0
340101b0:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
340101b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
  hxspi->Init.MemorySize                 = Init->MemorySize;
340101b8:	682b      	ldr	r3, [r5, #0]
  hxspi->Init.MemorySelect               = HAL_XSPI_CSSEL_NCS1;
340101ba:	63e2      	str	r2, [r4, #60]	@ 0x3c
  hxspi->Init.MemorySize                 = Init->MemorySize;
340101bc:	6123      	str	r3, [r4, #16]
  hxspi->Init.ChipSelectHighTimeCycle    = 5;
340101be:	2305      	movs	r3, #5
340101c0:	6163      	str	r3, [r4, #20]
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
340101c2:	686b      	ldr	r3, [r5, #4]
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
340101c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
  hxspi->Init.SampleShifting             = Init->SampleShifting;
340101c8:	62a1      	str	r1, [r4, #40]	@ 0x28
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
340101ca:	210b      	movs	r1, #11
  hxspi->Init.ClockPrescaler             = Init->ClockPrescaler;
340101cc:	6263      	str	r3, [r4, #36]	@ 0x24
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
340101ce:	fbb0 f3f3 	udiv	r3, r0, r3
  hxspi->Init.ChipSelectBoundary         = HAL_XSPI_BONDARYOF_16KB;
340101d2:	e9c4 510b 	strd	r5, r1, [r4, #44]	@ 0x2c
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
340101d6:	4908      	ldr	r1, [pc, #32]	@ (340101f8 <MX_XSPI_RAM_Init+0x64>)
340101d8:	005b      	lsls	r3, r3, #1
340101da:	fbb3 f3f1 	udiv	r3, r3, r1
340101de:	3b04      	subs	r3, #4
  return HAL_XSPI_Init(hxspi);
340101e0:	4620      	mov	r0, r4
  hxspi->Init.ClockMode                  = HAL_XSPI_CLOCK_MODE_0;
340101e2:	61e2      	str	r2, [r4, #28]
  hxspi->Init.FreeRunningClock           = HAL_XSPI_FREERUNCLK_DISABLE;
340101e4:	61a2      	str	r2, [r4, #24]
  hxspi->Init.Refresh                    = ((2U * (hspi_clk / hxspi->Init.ClockPrescaler)) / 1000000U) - 4U;
340101e6:	63a3      	str	r3, [r4, #56]	@ 0x38
  hxspi->Init.WrapSize                   = HAL_XSPI_WRAP_NOT_SUPPORTED;
340101e8:	6222      	str	r2, [r4, #32]
}
340101ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return HAL_XSPI_Init(hxspi);
340101ee:	f00c ba7d 	b.w	3401c6ec <HAL_XSPI_Init>
340101f2:	bf00      	nop
340101f4:	58025000 	.word	0x58025000
340101f8:	000f4240 	.word	0x000f4240

340101fc <BSP_XSPI_RAM_Init>:
{
340101fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
34010200:	4604      	mov	r4, r0
{
34010202:	b08b      	sub	sp, #44	@ 0x2c
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
34010204:	2800      	cmp	r0, #0
34010206:	f040 810d 	bne.w	34010424 <BSP_XSPI_RAM_Init+0x228>
    if (XSPI_Ram_Ctx[Instance].IsInitialized == XSPI_ACCESS_NONE)
3401020a:	4e88      	ldr	r6, [pc, #544]	@ (3401042c <BSP_XSPI_RAM_Init+0x230>)
3401020c:	7833      	ldrb	r3, [r6, #0]
3401020e:	9301      	str	r3, [sp, #4]
34010210:	2b00      	cmp	r3, #0
34010212:	f040 80f0 	bne.w	340103f6 <BSP_XSPI_RAM_Init+0x1fa>

  /* hxspi unused argument(s) compilation warning */
  UNUSED(hxspi);

 /* XSPI power enable */
  __HAL_RCC_PWR_CLK_ENABLE();
34010216:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
3401021a:	f7ff fd4f 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  HAL_PWREx_EnableVddIO2();
3401021e:	f005 f8d3 	bl	340153c8 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_ConfigVddIORange(PWR_VDDIO2, PWR_VDDIO_RANGE_1V8);
34010222:	2101      	movs	r1, #1
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34010224:	f04f 0820 	mov.w	r8, #32
34010228:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
3401022c:	4608      	mov	r0, r1
3401022e:	f005 f885 	bl	3401533c <HAL_PWREx_ConfigVddIORange>
34010232:	4b7f      	ldr	r3, [pc, #508]	@ (34010430 <BSP_XSPI_RAM_Init+0x234>)
  /* XSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CS_PIN;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
34010234:	2409      	movs	r4, #9
34010236:	f8c3 8a60 	str.w	r8, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3401023a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
3401023e:	2501      	movs	r5, #1
34010240:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
34010242:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34010244:	4a7b      	ldr	r2, [pc, #492]	@ (34010434 <BSP_XSPI_RAM_Init+0x238>)
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
34010246:	f8c3 8a20 	str.w	r8, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401024a:	f8c2 8220 	str.w	r8, [r2, #544]	@ 0x220
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401024e:	f8c3 7a60 	str.w	r7, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
34010252:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
34010256:	f04f 0903 	mov.w	r9, #3
3401025a:	9103      	str	r1, [sp, #12]
  (void)tmpreg;
3401025c:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401025e:	f8c3 7a20 	str.w	r7, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
34010262:	f8c2 7220 	str.w	r7, [r2, #544]	@ 0x220
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
34010266:	2202      	movs	r2, #2
  XSPI_RAM_CLK_GPIO_CLK_ENABLE();
34010268:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
3401026c:	f7ff fd26 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_DQS_GPIO_CLK_ENABLE();
34010270:	f7ff fd24 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_CS_GPIO_CLK_ENABLE();
34010274:	f7ff fd22 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D0_GPIO_CLK_ENABLE();
34010278:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
3401027c:	f7ff fd1e 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
34010280:	a905      	add	r1, sp, #20
  XSPI_RAM_D1_GPIO_CLK_ENABLE();
34010282:	f7ff fd1b 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D2_GPIO_CLK_ENABLE();
34010286:	f7ff fd19 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D3_GPIO_CLK_ENABLE();
3401028a:	f7ff fd17 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D4_GPIO_CLK_ENABLE();
3401028e:	f7ff fd15 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D5_GPIO_CLK_ENABLE();
34010292:	f7ff fd13 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D6_GPIO_CLK_ENABLE();
34010296:	f7ff fd11 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  XSPI_RAM_D7_GPIO_CLK_ENABLE();
3401029a:	f7ff fd0f 	bl	3400fcbc <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
3401029e:	4866      	ldr	r0, [pc, #408]	@ (34010438 <BSP_XSPI_RAM_Init+0x23c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
340102a0:	e9cd 5205 	strd	r5, r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_CS_PIN_AF;
340102a4:	e9cd 9408 	strd	r9, r4, [sp, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
340102a8:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
340102aa:	f003 fad7 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI DQS0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
340102ae:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI DQS1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
340102b0:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);

  /* XSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
340102b4:	f04f 0a10 	mov.w	sl, #16
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
340102b8:	485f      	ldr	r0, [pc, #380]	@ (34010438 <BSP_XSPI_RAM_Init+0x23c>)
340102ba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS0_PIN;
340102bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS0_PIN_AF;
340102be:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
340102c0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS0_GPIO_PORT, &GPIO_InitStruct);
340102c2:	f003 facb 	bl	3401385c <HAL_GPIO_Init>
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
340102c6:	485c      	ldr	r0, [pc, #368]	@ (34010438 <BSP_XSPI_RAM_Init+0x23c>)
340102c8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_DQS1_PIN_AF;
340102ca:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_DQS1_PIN;
340102cc:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
340102d0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_DQS1_GPIO_PORT, &GPIO_InitStruct);
340102d2:	f003 fac3 	bl	3401385c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
340102d6:	4858      	ldr	r0, [pc, #352]	@ (34010438 <BSP_XSPI_RAM_Init+0x23c>)
340102d8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_CLK_PIN_AF;
340102da:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_CLK_PIN;
340102dc:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
340102e0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
340102e2:	f003 fabb 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
340102e6:	4855      	ldr	r0, [pc, #340]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
340102e8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D0_PIN_AF;
340102ea:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D0_PIN;
340102ec:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
340102ee:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(XSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
340102f0:	f003 fab4 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
340102f4:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
340102f6:	4851      	ldr	r0, [pc, #324]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
340102f8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D1_PIN;
340102fa:	9205      	str	r2, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D1_PIN_AF;
340102fc:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
340102fe:	f003 faad 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
34010302:	2304      	movs	r3, #4
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
34010304:	484d      	ldr	r0, [pc, #308]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
34010306:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D2_PIN;
34010308:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D2_PIN_AF;
3401030a:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
3401030c:	f003 faa6 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
34010310:	484a      	ldr	r0, [pc, #296]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
34010312:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D3_PIN_AF;
34010314:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D3_PIN;
34010316:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
3401031a:	f003 fa9f 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
3401031e:	4847      	ldr	r0, [pc, #284]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
34010320:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D4_PIN_AF;
34010322:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D4_PIN;
34010324:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
34010328:	f003 fa98 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
3401032c:	4843      	ldr	r0, [pc, #268]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401032e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D5_PIN_AF;
34010330:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D5_PIN;
34010332:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
34010336:	f003 fa91 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
3401033a:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
3401033c:	483f      	ldr	r0, [pc, #252]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401033e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D6_PIN_AF;
34010340:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D6_PIN;
34010342:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
34010344:	f003 fa8a 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
34010348:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
3401034a:	483c      	ldr	r0, [pc, #240]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401034c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D7_PIN_AF;
3401034e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D7_PIN;
34010350:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
34010352:	f003 fa83 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D8 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
34010356:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
3401035a:	4838      	ldr	r0, [pc, #224]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401035c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D8_PIN_AF;
3401035e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D8_PIN;
34010360:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D8_GPIO_PORT, &GPIO_InitStruct);
34010362:	f003 fa7b 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D9 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
34010366:	f44f 7300 	mov.w	r3, #512	@ 0x200
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
3401036a:	4834      	ldr	r0, [pc, #208]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401036c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D9_PIN_AF;
3401036e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D9_PIN;
34010370:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D9_GPIO_PORT, &GPIO_InitStruct);
34010372:	f003 fa73 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D10 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
34010376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
3401037a:	4830      	ldr	r0, [pc, #192]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401037c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D10_PIN_AF;
3401037e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D10_PIN;
34010380:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D10_GPIO_PORT, &GPIO_InitStruct);
34010382:	f003 fa6b 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D11 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
34010386:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
3401038a:	482c      	ldr	r0, [pc, #176]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401038c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D11_PIN_AF;
3401038e:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D11_PIN;
34010390:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D11_GPIO_PORT, &GPIO_InitStruct);
34010392:	f003 fa63 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D12 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
34010396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
3401039a:	4828      	ldr	r0, [pc, #160]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
3401039c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = XSPI_RAM_D12_PIN;
3401039e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = XSPI_RAM_D12_PIN_AF;
340103a0:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(XSPI_RAM_D12_GPIO_PORT, &GPIO_InitStruct);
340103a2:	f003 fa5b 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D13 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
340103a6:	4825      	ldr	r0, [pc, #148]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
340103a8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D13_PIN_AF;
340103aa:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D13_PIN;
340103ac:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D13_GPIO_PORT, &GPIO_InitStruct);
340103ae:	f003 fa55 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D14 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
340103b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
340103b6:	4821      	ldr	r0, [pc, #132]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
340103b8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D14_PIN_AF;
340103ba:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D14_PIN;
340103bc:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D14_GPIO_PORT, &GPIO_InitStruct);
340103be:	f003 fa4d 	bl	3401385c <HAL_GPIO_Init>

  /* XSPI D15 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
340103c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
340103c6:	481d      	ldr	r0, [pc, #116]	@ (3401043c <BSP_XSPI_RAM_Init+0x240>)
340103c8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = XSPI_RAM_D15_PIN_AF;
340103ca:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pin       = XSPI_RAM_D15_PIN;
340103cc:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(XSPI_RAM_D15_GPIO_PORT, &GPIO_InitStruct);
340103ce:	f003 fa45 	bl	3401385c <HAL_GPIO_Init>
      xspi_init.MemorySize     = HAL_XSPI_SIZE_256MB;
340103d2:	2318      	movs	r3, #24
340103d4:	9305      	str	r3, [sp, #20]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
340103d6:	9b01      	ldr	r3, [sp, #4]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
340103d8:	4819      	ldr	r0, [pc, #100]	@ (34010440 <BSP_XSPI_RAM_Init+0x244>)
340103da:	a905      	add	r1, sp, #20
      xspi_init.ClockPrescaler = 3;
340103dc:	f8cd 9018 	str.w	r9, [sp, #24]
      xspi_init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
340103e0:	9307      	str	r3, [sp, #28]
      if (MX_XSPI_RAM_Init(&hxspi_ram[Instance], &xspi_init) != HAL_OK)
340103e2:	f7ff fed7 	bl	34010194 <MX_XSPI_RAM_Init>
  int32_t ret = BSP_ERROR_NONE;
340103e6:	2800      	cmp	r0, #0
340103e8:	bf14      	ite	ne
340103ea:	f06f 0403 	mvnne.w	r4, #3
340103ee:	2400      	moveq	r4, #0
      XSPI_Ram_Ctx[Instance].IsInitialized = XSPI_ACCESS_INDIRECT;
340103f0:	7035      	strb	r5, [r6, #0]
      XSPI_Ram_Ctx[Instance].LatencyType   = BSP_XSPI_RAM_FIXED_LATENCY;
340103f2:	7075      	strb	r5, [r6, #1]
      XSPI_Ram_Ctx[Instance].BurstType     = BSP_XSPI_RAM_LINEAR_BURST;
340103f4:	70b5      	strb	r5, [r6, #2]
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 0, 0x30));
340103f6:	2230      	movs	r2, #48	@ 0x30
340103f8:	2100      	movs	r1, #0
340103fa:	4811      	ldr	r0, [pc, #68]	@ (34010440 <BSP_XSPI_RAM_Init+0x244>)
340103fc:	f7fe fb11 	bl	3400ea22 <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 4, 0x20));
34010400:	2220      	movs	r2, #32
34010402:	2104      	movs	r1, #4
34010404:	480e      	ldr	r0, [pc, #56]	@ (34010440 <BSP_XSPI_RAM_Init+0x244>)
34010406:	f7fe fb0c 	bl	3400ea22 <APS256XX_WriteReg>
    (void) (APS256XX_WriteReg(&hxspi_ram[Instance], 8, 0x40));
3401040a:	2108      	movs	r1, #8
3401040c:	2240      	movs	r2, #64	@ 0x40
3401040e:	480c      	ldr	r0, [pc, #48]	@ (34010440 <BSP_XSPI_RAM_Init+0x244>)
34010410:	f7fe fb07 	bl	3400ea22 <APS256XX_WriteReg>
    (void) (HAL_XSPI_SetClockPrescaler(&hxspi_ram[Instance], 0));
34010414:	2100      	movs	r1, #0
34010416:	480a      	ldr	r0, [pc, #40]	@ (34010440 <BSP_XSPI_RAM_Init+0x244>)
34010418:	f00c fd42 	bl	3401cea0 <HAL_XSPI_SetClockPrescaler>
}
3401041c:	4620      	mov	r0, r4
3401041e:	b00b      	add	sp, #44	@ 0x2c
34010420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
34010424:	f06f 0401 	mvn.w	r4, #1
  return ret;
34010428:	e7f8      	b.n	3401041c <BSP_XSPI_RAM_Init+0x220>
3401042a:	bf00      	nop
3401042c:	34146164 	.word	0x34146164
34010430:	56028000 	.word	0x56028000
34010434:	56029000 	.word	0x56029000
34010438:	56023800 	.word	0x56023800
3401043c:	56023c00 	.word	0x56023c00
34010440:	34146168 	.word	0x34146168

34010444 <BSP_XSPI_RAM_EnableMemoryMappedMode>:
{
34010444:	b507      	push	{r0, r1, r2, lr}
  if (Instance >= XSPI_RAM_INSTANCES_NUMBER)
34010446:	b968      	cbnz	r0, 34010464 <BSP_XSPI_RAM_EnableMemoryMappedMode+0x20>
    if (APS256XX_EnableMemoryMappedMode(&hxspi_ram[Instance], 7, 7, 1, 0) != APS256XX_OK)
34010448:	2207      	movs	r2, #7
3401044a:	9000      	str	r0, [sp, #0]
3401044c:	2301      	movs	r3, #1
3401044e:	4611      	mov	r1, r2
34010450:	4806      	ldr	r0, [pc, #24]	@ (3401046c <BSP_XSPI_RAM_EnableMemoryMappedMode+0x28>)
34010452:	f7fe fa8b 	bl	3400e96c <APS256XX_EnableMemoryMappedMode>
      ret = BSP_ERROR_PERIPH_FAILURE;
34010456:	2800      	cmp	r0, #0
34010458:	bf18      	it	ne
3401045a:	f06f 0003 	mvnne.w	r0, #3
}
3401045e:	b003      	add	sp, #12
34010460:	f85d fb04 	ldr.w	pc, [sp], #4
    ret = BSP_ERROR_WRONG_PARAM;
34010464:	f06f 0001 	mvn.w	r0, #1
34010468:	e7f9      	b.n	3401045e <BSP_XSPI_RAM_EnableMemoryMappedMode+0x1a>
3401046a:	bf00      	nop
3401046c:	34146168 	.word	0x34146168

34010470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
34010470:	480f      	ldr	r0, [pc, #60]	@ (340104b0 <LoopForever+0x4>)
  msr   MSPLIM, r0
34010472:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
34010476:	480f      	ldr	r0, [pc, #60]	@ (340104b4 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
34010478:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
3401047a:	f000 f829 	bl	340104d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
3401047e:	480e      	ldr	r0, [pc, #56]	@ (340104b8 <LoopForever+0xc>)
  ldr r1, =_edata
34010480:	490e      	ldr	r1, [pc, #56]	@ (340104bc <LoopForever+0x10>)
  ldr r2, =_sidata
34010482:	4a0f      	ldr	r2, [pc, #60]	@ (340104c0 <LoopForever+0x14>)
  movs r3, #0
34010484:	2300      	movs	r3, #0
  b LoopCopyDataInit
34010486:	e002      	b.n	3401048e <LoopCopyDataInit>

34010488 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
34010488:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3401048a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
3401048c:	3304      	adds	r3, #4

3401048e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
3401048e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34010490:	428c      	cmp	r4, r1
  bcc CopyDataInit
34010492:	d3f9      	bcc.n	34010488 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34010494:	4a0b      	ldr	r2, [pc, #44]	@ (340104c4 <LoopForever+0x18>)
  ldr r4, =_ebss
34010496:	4c0c      	ldr	r4, [pc, #48]	@ (340104c8 <LoopForever+0x1c>)
  movs r3, #0
34010498:	2300      	movs	r3, #0
  b LoopFillZerobss
3401049a:	e001      	b.n	340104a0 <LoopFillZerobss>

3401049c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
3401049c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
3401049e:	3204      	adds	r2, #4

340104a0 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
340104a0:	42a2      	cmp	r2, r4
  bcc FillZerobss
340104a2:	d3fb      	bcc.n	3401049c <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
340104a4:	f010 f922 	bl	340206ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
340104a8:	f00e fd8c 	bl	3401efc4 <main>

340104ac <LoopForever>:

LoopForever:
  b LoopForever
340104ac:	e7fe      	b.n	340104ac <LoopForever>
340104ae:	0000      	.short	0x0000
  ldr   r0, =_sstack
340104b0:	341ff000 	.word	0x341ff000
  ldr   r0, =_estack
340104b4:	34200000 	.word	0x34200000
  ldr r0, =_sdata
340104b8:	34108cac 	.word	0x34108cac
  ldr r1, =_edata
340104bc:	3410cfe8 	.word	0x3410cfe8
  ldr r2, =_sidata
340104c0:	34108cac 	.word	0x34108cac
  ldr r2, =_sbss
340104c4:	3410d000 	.word	0x3410d000
  ldr r4, =_ebss
340104c8:	341fa758 	.word	0x341fa758

340104cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
340104cc:	e7fe      	b.n	340104cc <ADC1_2_IRQHandler>
	...

340104d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
340104d0:	4b44      	ldr	r3, [pc, #272]	@ (340105e4 <SystemInit+0x114>)
340104d2:	4a45      	ldr	r2, [pc, #276]	@ (340105e8 <SystemInit+0x118>)
{
340104d4:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340104d6:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
340104d8:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
340104da:	2502      	movs	r5, #2
  SAU->RNR = 0;
340104dc:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340104de:	4943      	ldr	r1, [pc, #268]	@ (340105ec <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
340104e0:	4e43      	ldr	r6, [pc, #268]	@ (340105f0 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
340104e2:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
340104e6:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
340104ea:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
340104ee:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
340104f2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
340104f6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
340104fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
340104fe:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34010502:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34010506:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
3401050a:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
3401050e:	2503      	movs	r5, #3
  SAU->RBAR = 0;
34010510:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34010514:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
34010518:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
3401051c:	2504      	movs	r5, #4
  SAU->RBAR = 0;
3401051e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34010522:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
34010526:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
3401052a:	2505      	movs	r5, #5
  SAU->RBAR = 0;
3401052c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34010530:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
34010534:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
34010538:	2506      	movs	r5, #6
  SAU->RBAR = 0;
3401053a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3401053e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
34010542:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
34010546:	2507      	movs	r5, #7
  SAU->RBAR = 0;
34010548:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3401054c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34010550:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34010554:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34010558:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3401055c:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34010560:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34010564:	689a      	ldr	r2, [r3, #8]
34010566:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34010568:	4a22      	ldr	r2, [pc, #136]	@ (340105f4 <SystemInit+0x124>)
3401056a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
3401056c:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
34010570:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34010572:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34010574:	f045 0510 	orr.w	r5, r5, #16
34010578:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
3401057a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3401057c:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
34010580:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34010584:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
34010588:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3401058c:	f042 0210 	orr.w	r2, r2, #16
34010590:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34010594:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
34010598:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
3401059c:	f022 0210 	bic.w	r2, r2, #16
340105a0:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
340105a4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
340105a8:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
340105ac:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340105b0:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
340105b2:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
340105b6:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
340105ba:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
340105be:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
340105c2:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
340105c4:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340105c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
340105cc:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
340105d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
340105d4:	4a08      	ldr	r2, [pc, #32]	@ (340105f8 <SystemInit+0x128>)
340105d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
340105da:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
340105de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
340105e2:	bd70      	pop	{r4, r5, r6, pc}
340105e4:	e000ed00 	.word	0xe000ed00
340105e8:	34000400 	.word	0x34000400
340105ec:	56028000 	.word	0x56028000
340105f0:	56008000 	.word	0x56008000
340105f4:	56024800 	.word	0x56024800
340105f8:	e002ed00 	.word	0xe002ed00

340105fc <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
340105fc:	4b6e      	ldr	r3, [pc, #440]	@ (340107b8 <SystemCoreClockUpdate+0x1bc>)
{
340105fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34010600:	6a1a      	ldr	r2, [r3, #32]
34010602:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
34010606:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
3401060a:	f000 80b8 	beq.w	3401077e <SystemCoreClockUpdate+0x182>
3401060e:	d806      	bhi.n	3401061e <SystemCoreClockUpdate+0x22>
34010610:	b962      	cbnz	r2, 3401062c <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34010612:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34010614:	4b69      	ldr	r3, [pc, #420]	@ (340107bc <SystemCoreClockUpdate+0x1c0>)
34010616:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3401061a:	40d3      	lsrs	r3, r2
    break;
3401061c:	e003      	b.n	34010626 <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3401061e:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34010622:	d00b      	beq.n	3401063c <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
34010624:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34010626:	4a66      	ldr	r2, [pc, #408]	@ (340107c0 <SystemCoreClockUpdate+0x1c4>)
34010628:	6013      	str	r3, [r2, #0]
}
3401062a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3401062c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
3401062e:	4a65      	ldr	r2, [pc, #404]	@ (340107c4 <SystemCoreClockUpdate+0x1c8>)
34010630:	f413 7f00 	tst.w	r3, #512	@ 0x200
34010634:	4b64      	ldr	r3, [pc, #400]	@ (340107c8 <SystemCoreClockUpdate+0x1cc>)
34010636:	bf08      	it	eq
34010638:	4613      	moveq	r3, r2
3401063a:	e7f4      	b.n	34010626 <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
3401063c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
34010640:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34010644:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34010648:	d02a      	beq.n	340106a0 <SystemCoreClockUpdate+0xa4>
3401064a:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
3401064e:	d036      	beq.n	340106be <SystemCoreClockUpdate+0xc2>
34010650:	2a00      	cmp	r2, #0
34010652:	d143      	bne.n	340106dc <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34010654:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
34010658:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
3401065a:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3401065e:	f100 8096 	bmi.w	3401078e <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34010662:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34010666:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3401066a:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
3401066e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34010672:	460e      	mov	r6, r1
    switch (pllsource)
34010674:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34010678:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
3401067c:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34010680:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
34010684:	d04f      	beq.n	34010726 <SystemCoreClockUpdate+0x12a>
34010686:	d87c      	bhi.n	34010782 <SystemCoreClockUpdate+0x186>
34010688:	2e00      	cmp	r6, #0
3401068a:	d03c      	beq.n	34010706 <SystemCoreClockUpdate+0x10a>
3401068c:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
3401068e:	4b4a      	ldr	r3, [pc, #296]	@ (340107b8 <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
34010690:	4f4c      	ldr	r7, [pc, #304]	@ (340107c4 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34010692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
34010694:	f413 7f00 	tst.w	r3, #512	@ 0x200
34010698:	4b4b      	ldr	r3, [pc, #300]	@ (340107c8 <SystemCoreClockUpdate+0x1cc>)
3401069a:	bf08      	it	eq
3401069c:	463b      	moveq	r3, r7
3401069e:	e038      	b.n	34010712 <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
340106a0:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
340106a4:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
340106a6:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340106aa:	d470      	bmi.n	3401078e <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340106ac:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
340106b0:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
340106b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
340106b8:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
340106bc:	e7d9      	b.n	34010672 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340106be:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
340106c2:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340106c4:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340106c8:	d461      	bmi.n	3401078e <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340106ca:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
340106ce:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
340106d2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340106d6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
340106da:	e7ca      	b.n	34010672 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
340106dc:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
340106e0:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
340106e2:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
340106e6:	d452      	bmi.n	3401078e <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
340106e8:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
340106ec:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
340106f0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
340106f4:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
340106f8:	e7bb      	b.n	34010672 <SystemCoreClockUpdate+0x76>
    switch (pllsource)
340106fa:	460a      	mov	r2, r1
340106fc:	460d      	mov	r5, r1
340106fe:	4608      	mov	r0, r1
34010700:	460c      	mov	r4, r1
34010702:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
34010706:	4b2c      	ldr	r3, [pc, #176]	@ (340107b8 <SystemCoreClockUpdate+0x1bc>)
34010708:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
3401070a:	4b2c      	ldr	r3, [pc, #176]	@ (340107bc <SystemCoreClockUpdate+0x1c0>)
3401070c:	f3c7 17c1 	ubfx	r7, r7, #7, #2
34010710:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
34010712:	b14e      	cbz	r6, 34010728 <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34010714:	4a28      	ldr	r2, [pc, #160]	@ (340107b8 <SystemCoreClockUpdate+0x1bc>)
34010716:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
3401071a:	f3c2 4207 	ubfx	r2, r2, #16, #8
3401071e:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
34010720:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
34010724:	e77f      	b.n	34010626 <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
34010726:	4b29      	ldr	r3, [pc, #164]	@ (340107cc <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34010728:	ee07 0a10 	vmov	s14, r0
3401072c:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
34010730:	ee07 4a10 	vmov	s14, r4
34010734:	ee07 3a90 	vmov	s15, r3
34010738:	eddf 6a25 	vldr	s13, [pc, #148]	@ 340107d0 <SystemCoreClockUpdate+0x1d4>
3401073c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34010740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34010744:	eea6 7a26 	vfma.f32	s14, s12, s13
34010748:	ee67 7a87 	vmul.f32	s15, s15, s14
3401074c:	ee07 1a10 	vmov	s14, r1
34010750:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34010754:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34010758:	ee07 5a90 	vmov	s15, r5
3401075c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34010760:	ee07 2a90 	vmov	s15, r2
34010764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34010768:	ee27 7a27 	vmul.f32	s14, s14, s15
3401076c:	eec6 7a87 	vdiv.f32	s15, s13, s14
34010770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34010774:	ee17 3a90 	vmov	r3, s15
34010778:	e7cc      	b.n	34010714 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
3401077a:	4b14      	ldr	r3, [pc, #80]	@ (340107cc <SystemCoreClockUpdate+0x1d0>)
3401077c:	e7ca      	b.n	34010714 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3401077e:	4b13      	ldr	r3, [pc, #76]	@ (340107cc <SystemCoreClockUpdate+0x1d0>)
34010780:	e751      	b.n	34010626 <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34010782:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34010786:	4b13      	ldr	r3, [pc, #76]	@ (340107d4 <SystemCoreClockUpdate+0x1d8>)
34010788:	bf18      	it	ne
3401078a:	2300      	movne	r3, #0
3401078c:	e7cc      	b.n	34010728 <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
3401078e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34010792:	d0f2      	beq.n	3401077a <SystemCoreClockUpdate+0x17e>
34010794:	d809      	bhi.n	340107aa <SystemCoreClockUpdate+0x1ae>
34010796:	2900      	cmp	r1, #0
34010798:	d0af      	beq.n	340106fa <SystemCoreClockUpdate+0xfe>
3401079a:	2200      	movs	r2, #0
3401079c:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
340107a0:	4615      	mov	r5, r2
340107a2:	4610      	mov	r0, r2
340107a4:	4614      	mov	r4, r2
340107a6:	4611      	mov	r1, r2
340107a8:	e771      	b.n	3401068e <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340107aa:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340107ae:	4b09      	ldr	r3, [pc, #36]	@ (340107d4 <SystemCoreClockUpdate+0x1d8>)
340107b0:	bf18      	it	ne
340107b2:	2300      	movne	r3, #0
340107b4:	e7ae      	b.n	34010714 <SystemCoreClockUpdate+0x118>
340107b6:	bf00      	nop
340107b8:	56028000 	.word	0x56028000
340107bc:	03d09000 	.word	0x03d09000
340107c0:	3410cd9c 	.word	0x3410cd9c
340107c4:	003d0900 	.word	0x003d0900
340107c8:	00f42400 	.word	0x00f42400
340107cc:	02dc6c00 	.word	0x02dc6c00
340107d0:	33800000 	.word	0x33800000
340107d4:	00bb8000 	.word	0x00bb8000

340107d8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
340107d8:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
340107dc:	b500      	push	{lr}
  SystemCoreClockUpdate();
340107de:	f7ff ff0d 	bl	340105fc <SystemCoreClockUpdate>

  return SystemCoreClock;
}
340107e2:	4b05      	ldr	r3, [pc, #20]	@ (340107f8 <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
340107e4:	f85d eb04 	ldr.w	lr, [sp], #4
340107e8:	6818      	ldr	r0, [r3, #0]
340107ea:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
340107ee:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
340107f2:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
340107f6:	4774      	bxns	lr
340107f8:	3410cd9c 	.word	0x3410cd9c

340107fc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
340107fc:	4770      	bx	lr

340107fe <HAL_Init>:
{
340107fe:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34010800:	2003      	movs	r0, #3
34010802:	f000 f995 	bl	34010b30 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
34010806:	f7ff fef9 	bl	340105fc <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
3401080a:	200f      	movs	r0, #15
3401080c:	f00e f98e 	bl	3401eb2c <HAL_InitTick>
34010810:	4604      	mov	r4, r0
34010812:	b918      	cbnz	r0, 3401081c <HAL_Init+0x1e>
  HAL_MspInit();
34010814:	f7ff fff2 	bl	340107fc <HAL_MspInit>
}
34010818:	4620      	mov	r0, r4
3401081a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401081c:	2401      	movs	r4, #1
3401081e:	e7fb      	b.n	34010818 <HAL_Init+0x1a>

34010820 <HAL_BSEC_OTP_Reload>:
  * @param  FuseId  Fuse to be reload, this parameter value is between 0 and BSEC_NB_FUSES-1
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_BSEC_OTP_Reload(BSEC_HandleTypeDef *hbsec, uint32_t FuseId)
{
34010820:	b570      	push	{r4, r5, r6, lr}
34010822:	4604      	mov	r4, r0
34010824:	460d      	mov	r5, r1
  uint32_t status_reg;
  uint32_t status_bit;
  uint32_t tick_start = HAL_GetTick();
34010826:	f00e f96b 	bl	3401eb00 <HAL_GetTick>
3401082a:	4606      	mov	r6, r0

  /* Check the handle pointer */
  if (hbsec == NULL)
3401082c:	b12c      	cbz	r4, 3401083a <HAL_BSEC_OTP_Reload+0x1a>
  {
    return HAL_ERROR;
  }

  /* Check the instance */
 if (hbsec->Instance != BSEC)
3401082e:	6822      	ldr	r2, [r4, #0]
34010830:	4b1b      	ldr	r3, [pc, #108]	@ (340108a0 <HAL_BSEC_OTP_Reload+0x80>)
34010832:	429a      	cmp	r2, r3
34010834:	d003      	beq.n	3401083e <HAL_BSEC_OTP_Reload+0x1e>
  {
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
34010836:	2301      	movs	r3, #1
34010838:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
3401083a:	2001      	movs	r0, #1
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
    return HAL_ERROR;
  }

  return HAL_OK;
}
3401083c:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
3401083e:	f5b5 7fbc 	cmp.w	r5, #376	@ 0x178
34010842:	d2f8      	bcs.n	34010836 <HAL_BSEC_OTP_Reload+0x16>
    status_reg = FuseId / 32U;
34010844:	096b      	lsrs	r3, r5, #5
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34010846:	f503 7308 	add.w	r3, r3, #544	@ 0x220
3401084a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
3401084e:	2301      	movs	r3, #1
34010850:	f005 001f 	and.w	r0, r5, #31
34010854:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SRLOCKx[status_reg] & status_bit) == 0U)
34010856:	420b      	tst	r3, r1
34010858:	d11f      	bne.n	3401089a <HAL_BSEC_OTP_Reload+0x7a>
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR), FuseId);
3401085a:	f8d2 3c04 	ldr.w	r3, [r2, #3076]	@ 0xc04
3401085e:	f423 43c3 	bic.w	r3, r3, #24960	@ 0x6180
34010862:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
34010866:	432b      	orrs	r3, r5
34010868:	f8c2 3c04 	str.w	r3, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
3401086c:	6823      	ldr	r3, [r4, #0]
3401086e:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
34010872:	07d2      	lsls	r2, r2, #31
34010874:	d409      	bmi.n	3401088a <HAL_BSEC_OTP_Reload+0x6a>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS) != 0U)
34010876:	f8d3 0e44 	ldr.w	r0, [r3, #3652]	@ 0xe44
3401087a:	f410 008c 	ands.w	r0, r0, #4587520	@ 0x460000
3401087e:	d0dd      	beq.n	3401083c <HAL_BSEC_OTP_Reload+0x1c>
        hbsec->ErrorCode = (hbsec->Instance->OTPSR & BSEC_OTPSR_RELOAD_ERRORS);
34010880:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
34010884:	f403 038c 	and.w	r3, r3, #4587520	@ 0x460000
34010888:	e7d6      	b.n	34010838 <HAL_BSEC_OTP_Reload+0x18>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
3401088a:	f00e f939 	bl	3401eb00 <HAL_GetTick>
3401088e:	1b80      	subs	r0, r0, r6
34010890:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34010894:	d9ea      	bls.n	3401086c <HAL_BSEC_OTP_Reload+0x4c>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34010896:	230a      	movs	r3, #10
34010898:	e7ce      	b.n	34010838 <HAL_BSEC_OTP_Reload+0x18>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
3401089a:	2304      	movs	r3, #4
3401089c:	e7cc      	b.n	34010838 <HAL_BSEC_OTP_Reload+0x18>
3401089e:	bf00      	nop
340108a0:	56009000 	.word	0x56009000

340108a4 <HAL_BSEC_OTP_Read>:
{
340108a4:	b570      	push	{r4, r5, r6, lr}
340108a6:	460e      	mov	r6, r1
340108a8:	4615      	mov	r5, r2
  if (hbsec == NULL)
340108aa:	4604      	mov	r4, r0
340108ac:	b130      	cbz	r0, 340108bc <HAL_BSEC_OTP_Read+0x18>
 if ((pFuseData == NULL) || (hbsec->Instance != BSEC))
340108ae:	b11a      	cbz	r2, 340108b8 <HAL_BSEC_OTP_Read+0x14>
340108b0:	6802      	ldr	r2, [r0, #0]
340108b2:	4b09      	ldr	r3, [pc, #36]	@ (340108d8 <HAL_BSEC_OTP_Read+0x34>)
340108b4:	429a      	cmp	r2, r3
340108b6:	d003      	beq.n	340108c0 <HAL_BSEC_OTP_Read+0x1c>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340108b8:	2301      	movs	r3, #1
340108ba:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340108bc:	2001      	movs	r0, #1
}
340108be:	bd70      	pop	{r4, r5, r6, pc}
  if (FuseId < BSEC_NB_FUSES)
340108c0:	f5b1 7fbc 	cmp.w	r1, #376	@ 0x178
340108c4:	d2f8      	bcs.n	340108b8 <HAL_BSEC_OTP_Read+0x14>
    if (HAL_BSEC_OTP_Reload(hbsec, FuseId) == HAL_OK)
340108c6:	f7ff ffab 	bl	34010820 <HAL_BSEC_OTP_Reload>
340108ca:	2800      	cmp	r0, #0
340108cc:	d1f6      	bne.n	340108bc <HAL_BSEC_OTP_Read+0x18>
      *pFuseData = hbsec->Instance->FVRw[FuseId];
340108ce:	6823      	ldr	r3, [r4, #0]
340108d0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
340108d4:	602b      	str	r3, [r5, #0]
  return HAL_OK;
340108d6:	e7f2      	b.n	340108be <HAL_BSEC_OTP_Read+0x1a>
340108d8:	56009000 	.word	0x56009000

340108dc <HAL_BSEC_OTP_Program>:
{
340108dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
340108e0:	4604      	mov	r4, r0
340108e2:	460e      	mov	r6, r1
340108e4:	4617      	mov	r7, r2
340108e6:	4699      	mov	r9, r3
  uint32_t tick_start = HAL_GetTick();
340108e8:	f00e f90a 	bl	3401eb00 <HAL_GetTick>
340108ec:	4680      	mov	r8, r0
  if (hbsec == NULL)
340108ee:	b12c      	cbz	r4, 340108fc <HAL_BSEC_OTP_Program+0x20>
 if (hbsec->Instance != BSEC)
340108f0:	6822      	ldr	r2, [r4, #0]
340108f2:	4b28      	ldr	r3, [pc, #160]	@ (34010994 <HAL_BSEC_OTP_Program+0xb8>)
340108f4:	429a      	cmp	r2, r3
340108f6:	d005      	beq.n	34010904 <HAL_BSEC_OTP_Program+0x28>
    hbsec->ErrorCode = HAL_BSEC_ERROR_INVALID_PARAM;
340108f8:	2301      	movs	r3, #1
340108fa:	6063      	str	r3, [r4, #4]
    return HAL_ERROR;
340108fc:	2001      	movs	r0, #1
}
340108fe:	b003      	add	sp, #12
34010900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_BSEC_PERMANENT_LOCK(Lock));
34010904:	f439 4380 	bics.w	r3, r9, #16384	@ 0x4000
34010908:	d004      	beq.n	34010914 <HAL_BSEC_OTP_Program+0x38>
3401090a:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
3401090e:	4822      	ldr	r0, [pc, #136]	@ (34010998 <HAL_BSEC_OTP_Program+0xbc>)
34010910:	f00e fc26 	bl	3401f160 <assert_failed>
  if (FuseId < BSEC_NB_FUSES)
34010914:	f5b6 7fbc 	cmp.w	r6, #376	@ 0x178
34010918:	d2ee      	bcs.n	340108f8 <HAL_BSEC_OTP_Program+0x1c>
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3401091a:	6822      	ldr	r2, [r4, #0]
    status_reg = FuseId / 32U;
3401091c:	0973      	lsrs	r3, r6, #5
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3401091e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
34010922:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    status_bit = (uint32_t)(1UL << (FuseId % 32U));
34010926:	2301      	movs	r3, #1
34010928:	f006 001f 	and.w	r0, r6, #31
3401092c:	4083      	lsls	r3, r0
    if ((hbsec->Instance->SPLOCKx[status_reg] & status_bit) == 0U)
3401092e:	420b      	tst	r3, r1
34010930:	d12e      	bne.n	34010990 <HAL_BSEC_OTP_Program+0xb4>
      hbsec->Instance->WDR = FuseData;
34010932:	f8c2 7c08 	str.w	r7, [r2, #3080]	@ 0xc08
      MODIFY_REG(hbsec->Instance->OTPCR, (BSEC_OTPCR_PPLOCK | BSEC_OTPCR_PROG | BSEC_OTPCR_ADDR),
34010936:	f8d2 5c04 	ldr.w	r5, [r2, #3076]	@ 0xc04
3401093a:	f425 45c3 	bic.w	r5, r5, #24960	@ 0x6180
3401093e:	f025 057f 	bic.w	r5, r5, #127	@ 0x7f
34010942:	4335      	orrs	r5, r6
34010944:	ea45 0509 	orr.w	r5, r5, r9
34010948:	f445 5500 	orr.w	r5, r5, #8192	@ 0x2000
3401094c:	f8c2 5c04 	str.w	r5, [r2, #3076]	@ 0xc04
      while ((hbsec->Instance->OTPSR & BSEC_OTPSR_BUSY) != 0U)
34010950:	6823      	ldr	r3, [r4, #0]
34010952:	f8d3 2e44 	ldr.w	r2, [r3, #3652]	@ 0xe44
34010956:	07d2      	lsls	r2, r2, #31
34010958:	d406      	bmi.n	34010968 <HAL_BSEC_OTP_Program+0x8c>
      if ((hbsec->Instance->OTPSR & BSEC_OTPSR_PROGFAIL) != 0U)
3401095a:	f8d3 3e44 	ldr.w	r3, [r3, #3652]	@ 0xe44
3401095e:	03db      	lsls	r3, r3, #15
34010960:	d50b      	bpl.n	3401097a <HAL_BSEC_OTP_Program+0x9e>
        hbsec->ErrorCode = HAL_BSEC_ERROR_PROGFAIL;
34010962:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34010966:	e7c8      	b.n	340108fa <HAL_BSEC_OTP_Program+0x1e>
        if ((HAL_GetTick() - tick_start) > BSEC_TIMEOUT)
34010968:	f00e f8ca 	bl	3401eb00 <HAL_GetTick>
3401096c:	eba0 0008 	sub.w	r0, r0, r8
34010970:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34010974:	d9ec      	bls.n	34010950 <HAL_BSEC_OTP_Program+0x74>
          hbsec->ErrorCode = HAL_BSEC_ERROR_TIMEOUT;
34010976:	230a      	movs	r3, #10
34010978:	e7bf      	b.n	340108fa <HAL_BSEC_OTP_Program+0x1e>
      if (HAL_BSEC_OTP_Read(hbsec, FuseId, &read_data) == HAL_OK)
3401097a:	4631      	mov	r1, r6
3401097c:	4620      	mov	r0, r4
3401097e:	aa01      	add	r2, sp, #4
34010980:	f7ff ff90 	bl	340108a4 <HAL_BSEC_OTP_Read>
34010984:	2800      	cmp	r0, #0
34010986:	d1b9      	bne.n	340108fc <HAL_BSEC_OTP_Program+0x20>
        if (read_data != FuseData)
34010988:	9b01      	ldr	r3, [sp, #4]
3401098a:	42bb      	cmp	r3, r7
3401098c:	d1e9      	bne.n	34010962 <HAL_BSEC_OTP_Program+0x86>
3401098e:	e7b6      	b.n	340108fe <HAL_BSEC_OTP_Program+0x22>
      hbsec->ErrorCode = HAL_BSEC_ERROR_LOCK;
34010990:	2304      	movs	r3, #4
34010992:	e7b2      	b.n	340108fa <HAL_BSEC_OTP_Program+0x1e>
34010994:	56009000 	.word	0x56009000
34010998:	3402b88a 	.word	0x3402b88a

3401099c <CACHEAXI_CommandByAddr>:
  *                       CACHEAXI_IT_MODE, CACHEAXI_POLLING_MODE.
  * @retval HAL status
  */
static HAL_StatusTypeDef CACHEAXI_CommandByAddr(CACHEAXI_HandleTypeDef *hcacheaxi, uint32_t Command,
                                                const uint32_t *pAddr, uint32_t dSize, uint32_t mode)
{
3401099c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t op_addr = (uint32_t)pAddr;
  uint32_t tickstart;

  /* Check no ongoing operation */
  if (READ_BIT(hcacheaxi->Instance->SR, (CACHEAXI_SR_BUSYF | CACHEAXI_SR_BUSYCMDF)) != 0U)
3401099e:	6804      	ldr	r4, [r0, #0]
{
340109a0:	4605      	mov	r5, r0
  if (READ_BIT(hcacheaxi->Instance->SR, (CACHEAXI_SR_BUSYF | CACHEAXI_SR_BUSYCMDF)) != 0U)
340109a2:	6860      	ldr	r0, [r4, #4]
340109a4:	f010 0009 	ands.w	r0, r0, #9
340109a8:	d13f      	bne.n	34010a2a <CACHEAXI_CommandByAddr+0x8e>
    status =  HAL_BUSY;
  }
  else
  {
    /* Update the error code */
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
340109aa:	60a8      	str	r0, [r5, #8]

    /* Update the CACHEAXI handle State */
    hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
340109ac:	2001      	movs	r0, #1
340109ae:	7128      	strb	r0, [r5, #4]

    /* Make sure flags are reset */
    WRITE_REG(hcacheaxi->Instance->FCR, (CACHEAXI_FCR_CBSYENDF | CACHEAXI_FCR_CCMDENDF));
340109b0:	2012      	movs	r0, #18

    /* Fill area start address */
    WRITE_REG(hcacheaxi->Instance->CMDRSADDRR, op_addr);

    /* Fill area end address */
    WRITE_REG(hcacheaxi->Instance->CMDREADDRR, (op_addr + dSize - 1U));
340109b2:	3b01      	subs	r3, #1
    WRITE_REG(hcacheaxi->Instance->FCR, (CACHEAXI_FCR_CBSYENDF | CACHEAXI_FCR_CCMDENDF));
340109b4:	60e0      	str	r0, [r4, #12]
    WRITE_REG(hcacheaxi->Instance->CMDRSADDRR, op_addr);
340109b6:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
    WRITE_REG(hcacheaxi->Instance->CMDREADDRR, (op_addr + dSize - 1U));
340109ba:	441a      	add	r2, r3
340109bc:	f8c4 2108 	str.w	r2, [r4, #264]	@ 0x108

    /* Set command */
    MODIFY_REG(hcacheaxi->Instance->CR2, CACHEAXI_CR2_CACHECMD, Command);
340109c0:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340109c4:	f023 0306 	bic.w	r3, r3, #6
340109c8:	4319      	orrs	r1, r3

    /* Enable IT if required */
    if (mode == CACHEAXI_IT_MODE)
340109ca:	9b04      	ldr	r3, [sp, #16]
    MODIFY_REG(hcacheaxi->Instance->CR2, CACHEAXI_CR2_CACHECMD, Command);
340109cc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
    if (mode == CACHEAXI_IT_MODE)
340109d0:	2b01      	cmp	r3, #1
    {
      /* Enable end of cache command interrupt */
      SET_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
340109d2:	68a3      	ldr	r3, [r4, #8]
    if (mode == CACHEAXI_IT_MODE)
340109d4:	d10a      	bne.n	340109ec <CACHEAXI_CommandByAddr+0x50>
      SET_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
340109d6:	f043 0310 	orr.w	r3, r3, #16
340109da:	60a3      	str	r3, [r4, #8]

      /* Launch cache command */
      SET_BIT(hcacheaxi->Instance->CR2, CACHEAXI_CR2_STARTCMD);
340109dc:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340109e0:	f043 0301 	orr.w	r3, r3, #1
340109e4:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  HAL_StatusTypeDef status = HAL_OK;
340109e8:	2000      	movs	r0, #0
340109ea:	e01d      	b.n	34010a28 <CACHEAXI_CommandByAddr+0x8c>
    }
    else
    {
      /* Make sure that end of cache command interrupt is disabled */
      CLEAR_BIT(hcacheaxi->Instance->IER, CACHEAXI_IER_CMDENDIE);
340109ec:	f023 0310 	bic.w	r3, r3, #16
340109f0:	60a3      	str	r3, [r4, #8]

      /* Launch cache command */
      SET_BIT(hcacheaxi->Instance->CR2, CACHEAXI_CR2_STARTCMD);
340109f2:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
340109f6:	f043 0301 	orr.w	r3, r3, #1
340109fa:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100

      /* Get timeout */
      tickstart = HAL_GetTick();
340109fe:	f00e f87f 	bl	3401eb00 <HAL_GetTick>
34010a02:	4604      	mov	r4, r0

      /* Wait for end of cache command */
      while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_CMDENDF) == 0U)
34010a04:	682b      	ldr	r3, [r5, #0]
34010a06:	685b      	ldr	r3, [r3, #4]
34010a08:	06db      	lsls	r3, r3, #27
34010a0a:	d4ed      	bmi.n	340109e8 <CACHEAXI_CommandByAddr+0x4c>
      {
        if ((HAL_GetTick() - tickstart) > CACHEAXI_COMMAND_TIMEOUT_VALUE)
34010a0c:	f00e f878 	bl	3401eb00 <HAL_GetTick>
34010a10:	1b00      	subs	r0, r0, r4
34010a12:	28c8      	cmp	r0, #200	@ 0xc8
34010a14:	d9f6      	bls.n	34010a04 <CACHEAXI_CommandByAddr+0x68>
        {
          if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_CMDENDF) == 0U)
34010a16:	682b      	ldr	r3, [r5, #0]
34010a18:	685b      	ldr	r3, [r3, #4]
34010a1a:	06da      	lsls	r2, r3, #27
34010a1c:	d4f2      	bmi.n	34010a04 <CACHEAXI_CommandByAddr+0x68>
          {
            /* Update error code */
            hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34010a1e:	2310      	movs	r3, #16
34010a20:	60ab      	str	r3, [r5, #8]

            /* Change the CACHEAXI state */
            hcacheaxi->State = HAL_CACHEAXI_STATE_ERROR;
34010a22:	2306      	movs	r3, #6

            /* Return error status */
            status =  HAL_ERROR;
34010a24:	2001      	movs	r0, #1
            hcacheaxi->State = HAL_CACHEAXI_STATE_ERROR;
34010a26:	712b      	strb	r3, [r5, #4]
      }
    }
  }

  return status;
}
34010a28:	bd38      	pop	{r3, r4, r5, pc}
    status =  HAL_BUSY;
34010a2a:	2002      	movs	r0, #2
34010a2c:	e7fc      	b.n	34010a28 <CACHEAXI_CommandByAddr+0x8c>
	...

34010a30 <HAL_CACHEAXI_Enable>:
{
34010a30:	b538      	push	{r3, r4, r5, lr}
  if (hcacheaxi == NULL)
34010a32:	4604      	mov	r4, r0
34010a34:	b350      	cbz	r0, 34010a8c <HAL_CACHEAXI_Enable+0x5c>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34010a36:	6803      	ldr	r3, [r0, #0]
34010a38:	4a15      	ldr	r2, [pc, #84]	@ (34010a90 <HAL_CACHEAXI_Enable+0x60>)
34010a3a:	4293      	cmp	r3, r2
34010a3c:	d008      	beq.n	34010a50 <HAL_CACHEAXI_Enable+0x20>
34010a3e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010a42:	4293      	cmp	r3, r2
34010a44:	d004      	beq.n	34010a50 <HAL_CACHEAXI_Enable+0x20>
34010a46:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
34010a4a:	4812      	ldr	r0, [pc, #72]	@ (34010a94 <HAL_CACHEAXI_Enable+0x64>)
34010a4c:	f00e fb88 	bl	3401f160 <assert_failed>
  if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34010a50:	6823      	ldr	r3, [r4, #0]
34010a52:	685b      	ldr	r3, [r3, #4]
34010a54:	07d9      	lsls	r1, r3, #31
34010a56:	d407      	bmi.n	34010a68 <HAL_CACHEAXI_Enable+0x38>
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34010a58:	2000      	movs	r0, #0
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34010a5a:	6822      	ldr	r2, [r4, #0]
    hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34010a5c:	60a0      	str	r0, [r4, #8]
    SET_BIT(hcacheaxi->Instance->CR1, CACHEAXI_CR1_EN);
34010a5e:	6813      	ldr	r3, [r2, #0]
34010a60:	f043 0301 	orr.w	r3, r3, #1
34010a64:	6013      	str	r3, [r2, #0]
}
34010a66:	bd38      	pop	{r3, r4, r5, pc}
    tickstart = HAL_GetTick();
34010a68:	f00e f84a 	bl	3401eb00 <HAL_GetTick>
34010a6c:	4605      	mov	r5, r0
    while (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) != 0U)
34010a6e:	6823      	ldr	r3, [r4, #0]
34010a70:	685b      	ldr	r3, [r3, #4]
34010a72:	07db      	lsls	r3, r3, #31
34010a74:	d5f0      	bpl.n	34010a58 <HAL_CACHEAXI_Enable+0x28>
      if ((HAL_GetTick() - tickstart) > CACHEAXI_ENABLE_TIMEOUT_VALUE)
34010a76:	f00e f843 	bl	3401eb00 <HAL_GetTick>
34010a7a:	1b40      	subs	r0, r0, r5
34010a7c:	2801      	cmp	r0, #1
34010a7e:	d9f6      	bls.n	34010a6e <HAL_CACHEAXI_Enable+0x3e>
        if (READ_BIT(hcacheaxi->Instance->SR, CACHEAXI_SR_BUSYF) == 0U)
34010a80:	6823      	ldr	r3, [r4, #0]
34010a82:	685b      	ldr	r3, [r3, #4]
34010a84:	07da      	lsls	r2, r3, #31
34010a86:	d4f2      	bmi.n	34010a6e <HAL_CACHEAXI_Enable+0x3e>
          hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_TIMEOUT;
34010a88:	2310      	movs	r3, #16
34010a8a:	60a3      	str	r3, [r4, #8]
    return HAL_ERROR;
34010a8c:	2001      	movs	r0, #1
34010a8e:	e7ea      	b.n	34010a66 <HAL_CACHEAXI_Enable+0x36>
34010a90:	580dfc00 	.word	0x580dfc00
34010a94:	3402b8eb 	.word	0x3402b8eb

34010a98 <HAL_CACHEAXI_Init>:
{
34010a98:	b510      	push	{r4, lr}
  if (hcacheaxi == NULL)
34010a9a:	4604      	mov	r4, r0
34010a9c:	b1c8      	cbz	r0, 34010ad2 <HAL_CACHEAXI_Init+0x3a>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34010a9e:	6803      	ldr	r3, [r0, #0]
34010aa0:	4a0d      	ldr	r2, [pc, #52]	@ (34010ad8 <HAL_CACHEAXI_Init+0x40>)
34010aa2:	4293      	cmp	r3, r2
34010aa4:	d007      	beq.n	34010ab6 <HAL_CACHEAXI_Init+0x1e>
34010aa6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010aaa:	4293      	cmp	r3, r2
34010aac:	d003      	beq.n	34010ab6 <HAL_CACHEAXI_Init+0x1e>
34010aae:	21bc      	movs	r1, #188	@ 0xbc
34010ab0:	480a      	ldr	r0, [pc, #40]	@ (34010adc <HAL_CACHEAXI_Init+0x44>)
34010ab2:	f00e fb55 	bl	3401f160 <assert_failed>
  if (hcacheaxi->State == HAL_CACHEAXI_STATE_RESET)
34010ab6:	7923      	ldrb	r3, [r4, #4]
34010ab8:	b913      	cbnz	r3, 34010ac0 <HAL_CACHEAXI_Init+0x28>
    HAL_CACHEAXI_MspInit(hcacheaxi);
34010aba:	4620      	mov	r0, r4
34010abc:	f00e fb36 	bl	3401f12c <HAL_CACHEAXI_MspInit>
  hcacheaxi->ErrorCode = HAL_CACHEAXI_ERROR_NONE;
34010ac0:	2300      	movs	r3, #0
34010ac2:	60a3      	str	r3, [r4, #8]
  hcacheaxi->State = HAL_CACHEAXI_STATE_READY;
34010ac4:	2301      	movs	r3, #1
34010ac6:	7123      	strb	r3, [r4, #4]
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34010ac8:	4620      	mov	r0, r4
}
34010aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  status = HAL_CACHEAXI_Enable(hcacheaxi);
34010ace:	f7ff bfaf 	b.w	34010a30 <HAL_CACHEAXI_Enable>
}
34010ad2:	2001      	movs	r0, #1
34010ad4:	bd10      	pop	{r4, pc}
34010ad6:	bf00      	nop
34010ad8:	580dfc00 	.word	0x580dfc00
34010adc:	3402b8eb 	.word	0x3402b8eb

34010ae0 <HAL_CACHEAXI_CleanInvalidByAddr>:
{
34010ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
34010ae2:	460e      	mov	r6, r1
34010ae4:	4615      	mov	r5, r2
  if (hcacheaxi == NULL)
34010ae6:	4604      	mov	r4, r0
34010ae8:	b1e0      	cbz	r0, 34010b24 <HAL_CACHEAXI_CleanInvalidByAddr+0x44>
  assert_param(IS_CACHEAXI_ALL_INSTANCE(hcacheaxi->Instance));
34010aea:	6803      	ldr	r3, [r0, #0]
34010aec:	4a0e      	ldr	r2, [pc, #56]	@ (34010b28 <HAL_CACHEAXI_CleanInvalidByAddr+0x48>)
34010aee:	4293      	cmp	r3, r2
34010af0:	d008      	beq.n	34010b04 <HAL_CACHEAXI_CleanInvalidByAddr+0x24>
34010af2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010af6:	4293      	cmp	r3, r2
34010af8:	d004      	beq.n	34010b04 <HAL_CACHEAXI_CleanInvalidByAddr+0x24>
34010afa:	f240 214d 	movw	r1, #589	@ 0x24d
34010afe:	480b      	ldr	r0, [pc, #44]	@ (34010b2c <HAL_CACHEAXI_CleanInvalidByAddr+0x4c>)
34010b00:	f00e fb2e 	bl	3401f160 <assert_failed>
  assert_param(IS_CACHEAXI_REGION_SIZE(dSize));
34010b04:	b925      	cbnz	r5, 34010b10 <HAL_CACHEAXI_CleanInvalidByAddr+0x30>
34010b06:	f240 214e 	movw	r1, #590	@ 0x24e
34010b0a:	4808      	ldr	r0, [pc, #32]	@ (34010b2c <HAL_CACHEAXI_CleanInvalidByAddr+0x4c>)
34010b0c:	f00e fb28 	bl	3401f160 <assert_failed>
  status = CACHEAXI_CommandByAddr(hcacheaxi, CACHEAXI_COMMAND_CLEAN_INVALIDATE, pAddr, dSize, CACHEAXI_POLLING_MODE);
34010b10:	2300      	movs	r3, #0
34010b12:	4632      	mov	r2, r6
34010b14:	9300      	str	r3, [sp, #0]
34010b16:	2106      	movs	r1, #6
34010b18:	462b      	mov	r3, r5
34010b1a:	4620      	mov	r0, r4
34010b1c:	f7ff ff3e 	bl	3401099c <CACHEAXI_CommandByAddr>
}
34010b20:	b002      	add	sp, #8
34010b22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
34010b24:	2001      	movs	r0, #1
34010b26:	e7fb      	b.n	34010b20 <HAL_CACHEAXI_CleanInvalidByAddr+0x40>
34010b28:	580dfc00 	.word	0x580dfc00
34010b2c:	3402b8eb 	.word	0x3402b8eb

34010b30 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34010b30:	1ec3      	subs	r3, r0, #3
34010b32:	2b04      	cmp	r3, #4
{
34010b34:	b510      	push	{r4, lr}
34010b36:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34010b38:	d903      	bls.n	34010b42 <HAL_NVIC_SetPriorityGrouping+0x12>
34010b3a:	21e6      	movs	r1, #230	@ 0xe6
34010b3c:	4809      	ldr	r0, [pc, #36]	@ (34010b64 <HAL_NVIC_SetPriorityGrouping+0x34>)
34010b3e:	f00e fb0f 	bl	3401f160 <assert_failed>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34010b42:	4909      	ldr	r1, [pc, #36]	@ (34010b68 <HAL_NVIC_SetPriorityGrouping+0x38>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34010b44:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34010b46:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34010b48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
34010b4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
34010b50:	0412      	lsls	r2, r2, #16
34010b52:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34010b54:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
34010b56:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34010b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
34010b5e:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
34010b60:	bd10      	pop	{r4, pc}
34010b62:	bf00      	nop
34010b64:	3402b950 	.word	0x3402b950
34010b68:	e000ed00 	.word	0xe000ed00

34010b6c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34010b6c:	f110 0f0c 	cmn.w	r0, #12
{
34010b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34010b74:	4605      	mov	r5, r0
34010b76:	460c      	mov	r4, r1
34010b78:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34010b7a:	db01      	blt.n	34010b80 <HAL_NVIC_SetPriority+0x14>
34010b7c:	1d03      	adds	r3, r0, #4
34010b7e:	d103      	bne.n	34010b88 <HAL_NVIC_SetPriority+0x1c>
34010b80:	21ff      	movs	r1, #255	@ 0xff
34010b82:	4826      	ldr	r0, [pc, #152]	@ (34010c1c <HAL_NVIC_SetPriority+0xb0>)
34010b84:	f00e faec 	bl	3401f160 <assert_failed>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34010b88:	4b25      	ldr	r3, [pc, #148]	@ (34010c20 <HAL_NVIC_SetPriority+0xb4>)
34010b8a:	68de      	ldr	r6, [r3, #12]
34010b8c:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34010b90:	2e02      	cmp	r6, #2
34010b92:	d806      	bhi.n	34010ba2 <HAL_NVIC_SetPriority+0x36>
34010b94:	b157      	cbz	r7, 34010bac <HAL_NVIC_SetPriority+0x40>
34010b96:	f44f 7181 	mov.w	r1, #258	@ 0x102
34010b9a:	4820      	ldr	r0, [pc, #128]	@ (34010c1c <HAL_NVIC_SetPriority+0xb0>)
34010b9c:	f00e fae0 	bl	3401f160 <assert_failed>
34010ba0:	e004      	b.n	34010bac <HAL_NVIC_SetPriority+0x40>
34010ba2:	2301      	movs	r3, #1
34010ba4:	1ef2      	subs	r2, r6, #3
34010ba6:	4093      	lsls	r3, r2
34010ba8:	42bb      	cmp	r3, r7
34010baa:	d9f4      	bls.n	34010b96 <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
34010bac:	2c0f      	cmp	r4, #15
34010bae:	f1c6 0807 	rsb	r8, r6, #7
34010bb2:	d804      	bhi.n	34010bbe <HAL_NVIC_SetPriority+0x52>
34010bb4:	2301      	movs	r3, #1
34010bb6:	fa03 f308 	lsl.w	r3, r3, r8
34010bba:	42a3      	cmp	r3, r4
34010bbc:	d804      	bhi.n	34010bc8 <HAL_NVIC_SetPriority+0x5c>
34010bbe:	f240 1103 	movw	r1, #259	@ 0x103
34010bc2:	4816      	ldr	r0, [pc, #88]	@ (34010c1c <HAL_NVIC_SetPriority+0xb0>)
34010bc4:	f00e facc 	bl	3401f160 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34010bc8:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34010bcc:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34010bd0:	bf28      	it	cs
34010bd2:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34010bd6:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34010bda:	2b06      	cmp	r3, #6
34010bdc:	f1a6 0603 	sub.w	r6, r6, #3
34010be0:	bf98      	it	ls
34010be2:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34010be4:	fa02 f808 	lsl.w	r8, r2, r8
34010be8:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34010bec:	40b2      	lsls	r2, r6
34010bee:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34010bf2:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
34010bf4:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34010bf6:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34010bfa:	bfac      	ite	ge
34010bfc:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34010c00:	4a08      	ldrlt	r2, [pc, #32]	@ (34010c24 <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34010c02:	ea4f 1303 	mov.w	r3, r3, lsl #4
34010c06:	b2db      	uxtb	r3, r3
34010c08:	bfab      	itete	ge
34010c0a:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34010c0e:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34010c12:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34010c16:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
34010c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34010c1c:	3402b950 	.word	0x3402b950
34010c20:	e000ed00 	.word	0xe000ed00
34010c24:	e000ed14 	.word	0xe000ed14

34010c28 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34010c28:	2800      	cmp	r0, #0
34010c2a:	db08      	blt.n	34010c3e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
34010c2c:	2301      	movs	r3, #1
34010c2e:	0941      	lsrs	r1, r0, #5
34010c30:	4a05      	ldr	r2, [pc, #20]	@ (34010c48 <HAL_NVIC_EnableIRQ+0x20>)
34010c32:	f000 001f 	and.w	r0, r0, #31
34010c36:	4083      	lsls	r3, r0
34010c38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
34010c3c:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
34010c3e:	f240 1115 	movw	r1, #277	@ 0x115
34010c42:	4802      	ldr	r0, [pc, #8]	@ (34010c4c <HAL_NVIC_EnableIRQ+0x24>)
34010c44:	f00e ba8c 	b.w	3401f160 <assert_failed>
34010c48:	e000e100 	.word	0xe000e100
34010c4c:	3402b950 	.word	0x3402b950

34010c50 <HAL_NVIC_GetPriorityGrouping>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34010c50:	4b02      	ldr	r3, [pc, #8]	@ (34010c5c <HAL_NVIC_GetPriorityGrouping+0xc>)
34010c52:	68d8      	ldr	r0, [r3, #12]
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
}
34010c54:	f3c0 2002 	ubfx	r0, r0, #8, #3
34010c58:	4770      	bx	lr
34010c5a:	bf00      	nop
34010c5c:	e000ed00 	.word	0xe000ed00

34010c60 <HAL_NVIC_GetPriority>:
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34010c60:	f110 0f0c 	cmn.w	r0, #12
{
34010c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010c66:	4604      	mov	r4, r0
34010c68:	460d      	mov	r5, r1
34010c6a:	4617      	mov	r7, r2
34010c6c:	461e      	mov	r6, r3
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34010c6e:	db01      	blt.n	34010c74 <HAL_NVIC_GetPriority+0x14>
34010c70:	1d03      	adds	r3, r0, #4
34010c72:	d104      	bne.n	34010c7e <HAL_NVIC_GetPriority+0x1e>
34010c74:	f44f 71bc 	mov.w	r1, #376	@ 0x178
34010c78:	4819      	ldr	r0, [pc, #100]	@ (34010ce0 <HAL_NVIC_GetPriority+0x80>)
34010c7a:	f00e fa71 	bl	3401f160 <assert_failed>
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
34010c7e:	1eeb      	subs	r3, r5, #3
34010c80:	2b04      	cmp	r3, #4
34010c82:	d904      	bls.n	34010c8e <HAL_NVIC_GetPriority+0x2e>
34010c84:	f240 1179 	movw	r1, #377	@ 0x179
34010c88:	4815      	ldr	r0, [pc, #84]	@ (34010ce0 <HAL_NVIC_GetPriority+0x80>)
34010c8a:	f00e fa69 	bl	3401f160 <assert_failed>
  if ((int32_t)(IRQn) >= 0)
34010c8e:	2c00      	cmp	r4, #0
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
34010c90:	bfac      	ite	ge
34010c92:	f104 4460 	addge.w	r4, r4, #3758096384	@ 0xe0000000
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
34010c96:	4b13      	ldrlt	r3, [pc, #76]	@ (34010ce4 <HAL_NVIC_GetPriority+0x84>)
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34010c98:	f005 0107 	and.w	r1, r5, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34010c9c:	f1c1 0207 	rsb	r2, r1, #7
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
34010ca0:	bfab      	itete	ge
34010ca2:	f504 4461 	addge.w	r4, r4, #57600	@ 0xe100
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
34010ca6:	f004 040f 	andlt.w	r4, r4, #15
    return(((uint32_t)NVIC->IPR[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
34010caa:	f894 3300 	ldrbge.w	r3, [r4, #768]	@ 0x300
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
34010cae:	5d1b      	ldrblt	r3, [r3, r4]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34010cb0:	1d08      	adds	r0, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34010cb2:	2a04      	cmp	r2, #4
34010cb4:	bf28      	it	cs
34010cb6:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34010cb8:	2806      	cmp	r0, #6
34010cba:	f1a1 0103 	sub.w	r1, r1, #3

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
34010cbe:	f04f 30ff 	mov.w	r0, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34010cc2:	bf98      	it	ls
34010cc4:	2100      	movls	r1, #0
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
34010cc6:	091b      	lsrs	r3, r3, #4
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
34010cc8:	fa00 f202 	lsl.w	r2, r0, r2
34010ccc:	fa23 f401 	lsr.w	r4, r3, r1
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
34010cd0:	4088      	lsls	r0, r1
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
34010cd2:	ea24 0202 	bic.w	r2, r4, r2
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
34010cd6:	ea23 0300 	bic.w	r3, r3, r0
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
34010cda:	603a      	str	r2, [r7, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
34010cdc:	6033      	str	r3, [r6, #0]

  /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
}
34010cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
34010ce0:	3402b950 	.word	0x3402b950
34010ce4:	e000ed14 	.word	0xe000ed14

34010ce8 <DCMIPP_CSI_SetVCConfig>:
  * @param  hdcmipp         Pointer to DCMIPP handle
  * @param  Pipe            Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @param  VirtualChannel  Specifies the virtual channel, can be a value from @ref DCMIPP_Virtual_Channel
  */
static HAL_StatusTypeDef DCMIPP_CSI_SetVCConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t VirtualChannel)
{
34010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34010cea:	4614      	mov	r4, r2
  uint32_t tickstart;

  /* Set Virtual Channel ID for the selected Pipe */
  if (Pipe == DCMIPP_PIPE0)
  {
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
34010cec:	6803      	ldr	r3, [r0, #0]
  if (Pipe == DCMIPP_PIPE0)
34010cee:	bb71      	cbnz	r1, 34010d4e <DCMIPP_CSI_SetVCConfig+0x66>
    MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_VC, VirtualChannel << DCMIPP_P0FSCR_VC_Pos);
34010cf0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34010cf4:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
34010cf8:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
34010cfc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
    }
  }

  /* Enable the selected virtual channel */
  switch (VirtualChannel)
34010d00:	4b23      	ldr	r3, [pc, #140]	@ (34010d90 <DCMIPP_CSI_SetVCConfig+0xa8>)
34010d02:	2c02      	cmp	r4, #2
    case DCMIPP_VIRTUAL_CHANNEL3:
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
      break;
    default:
      /* DCMIPP_VIRTUAL_CHANNEL0: */
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
34010d04:	681a      	ldr	r2, [r3, #0]
  switch (VirtualChannel)
34010d06:	d038      	beq.n	34010d7a <DCMIPP_CSI_SetVCConfig+0x92>
34010d08:	2c03      	cmp	r4, #3
34010d0a:	d039      	beq.n	34010d80 <DCMIPP_CSI_SetVCConfig+0x98>
34010d0c:	2c01      	cmp	r4, #1
34010d0e:	d13a      	bne.n	34010d86 <DCMIPP_CSI_SetVCConfig+0x9e>
      SET_BIT(csi_instance->CR, CSI_CR_VC1START);
34010d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
34010d14:	601a      	str	r2, [r3, #0]
      break;
  }

  /* wait for the selected virtual channel active state */
  tickstart = HAL_GetTick();
34010d16:	f00d fef3 	bl	3401eb00 <HAL_GetTick>
  {
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
    {
      return HAL_ERROR;
    }
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
34010d1a:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  tickstart = HAL_GetTick();
34010d1e:	4607      	mov	r7, r0
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
34010d20:	4d1b      	ldr	r5, [pc, #108]	@ (34010d90 <DCMIPP_CSI_SetVCConfig+0xa8>)
34010d22:	40a6      	lsls	r6, r4
    if ((HAL_GetTick() - tickstart) > DCMIPP_TIMEOUT)
34010d24:	f00d feec 	bl	3401eb00 <HAL_GetTick>
34010d28:	1bc0      	subs	r0, r0, r7
34010d2a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34010d2e:	d82d      	bhi.n	34010d8c <DCMIPP_CSI_SetVCConfig+0xa4>
  } while ((csi_instance->SR0 & (CSI_SR0_VC0STATEF << VirtualChannel)) != (CSI_SR0_VC0STATEF << VirtualChannel));
34010d30:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
34010d34:	ea36 0303 	bics.w	r3, r6, r3
34010d38:	d1f4      	bne.n	34010d24 <DCMIPP_CSI_SetVCConfig+0x3c>

  /* Enable the SOF and EOF interrupts for the selected virtual channel */
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
34010d3a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
                             (DCMIPP_CSI_IT_SOF0 << VirtualChannel));
  return HAL_OK;
34010d3e:	2000      	movs	r0, #0
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, (DCMIPP_CSI_IT_EOF0 << VirtualChannel) | \
34010d40:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
34010d44:	40a3      	lsls	r3, r4
34010d46:	4313      	orrs	r3, r2
34010d48:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
}
34010d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Pipe == DCMIPP_PIPE1)
34010d4e:	2901      	cmp	r1, #1
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
34010d50:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
  else if (Pipe == DCMIPP_PIPE1)
34010d54:	d106      	bne.n	34010d64 <DCMIPP_CSI_SetVCConfig+0x7c>
    MODIFY_REG(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_VC, VirtualChannel << DCMIPP_P1FSCR_VC_Pos);
34010d56:	f422 12c0 	bic.w	r2, r2, #1572864	@ 0x180000
34010d5a:	ea42 42c4 	orr.w	r2, r2, r4, lsl #19
34010d5e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
34010d62:	e7cd      	b.n	34010d00 <DCMIPP_CSI_SetVCConfig+0x18>
    if ((hdcmipp->Instance->P1FSCR & DCMIPP_P1FSCR_PIPEDIFF) == DCMIPP_P1FSCR_PIPEDIFF)
34010d64:	0352      	lsls	r2, r2, #13
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_VC, VirtualChannel << DCMIPP_P2FSCR_VC_Pos);
34010d66:	bf41      	itttt	mi
34010d68:	f8d3 2c04 	ldrmi.w	r2, [r3, #3076]	@ 0xc04
34010d6c:	f422 12c0 	bicmi.w	r2, r2, #1572864	@ 0x180000
34010d70:	ea42 42c4 	orrmi.w	r2, r2, r4, lsl #19
34010d74:	f8c3 2c04 	strmi.w	r2, [r3, #3076]	@ 0xc04
34010d78:	e7c2      	b.n	34010d00 <DCMIPP_CSI_SetVCConfig+0x18>
      SET_BIT(csi_instance->CR, CSI_CR_VC2START);
34010d7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
34010d7e:	e7c9      	b.n	34010d14 <DCMIPP_CSI_SetVCConfig+0x2c>
      SET_BIT(csi_instance->CR, CSI_CR_VC3START);
34010d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
34010d84:	e7c6      	b.n	34010d14 <DCMIPP_CSI_SetVCConfig+0x2c>
      SET_BIT(csi_instance->CR, CSI_CR_VC0START);
34010d86:	f042 0204 	orr.w	r2, r2, #4
34010d8a:	e7c3      	b.n	34010d14 <DCMIPP_CSI_SetVCConfig+0x2c>
      return HAL_ERROR;
34010d8c:	2001      	movs	r0, #1
34010d8e:	e7dd      	b.n	34010d4c <DCMIPP_CSI_SetVCConfig+0x64>
34010d90:	58006000 	.word	0x58006000

34010d94 <DCMIPP_SetConfig.part.0>:
  else if (Pipe == DCMIPP_PIPE1)
34010d94:	2901      	cmp	r1, #1
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
34010d96:	b530      	push	{r4, r5, lr}
34010d98:	f04f 0502 	mov.w	r5, #2
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
34010d9c:	6804      	ldr	r4, [r0, #0]
  else if (Pipe == DCMIPP_PIPE1)
34010d9e:	d110      	bne.n	34010dc2 <DCMIPP_SetConfig.part.0+0x2e>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34010da0:	7185      	strb	r5, [r0, #6]
    hdcmipp->Instance->P1FCTCR |= CaptureMode;
34010da2:	f8d4 1900 	ldr.w	r1, [r4, #2304]	@ 0x900
34010da6:	430b      	orrs	r3, r1
34010da8:	f8c4 3900 	str.w	r3, [r4, #2304]	@ 0x900
    WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34010dac:	f8c4 29c4 	str.w	r2, [r4, #2500]	@ 0x9c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME  | DCMIPP_IT_PIPE1_OVR | DCMIPP_IT_PIPE1_VSYNC |
34010db0:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
34010db4:	f443 0306 	orr.w	r3, r3, #8781824	@ 0x860000
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
34010db8:	f043 0320 	orr.w	r3, r3, #32
34010dbc:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
}
34010dc0:	bd30      	pop	{r4, r5, pc}
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34010dc2:	4408      	add	r0, r1
34010dc4:	7145      	strb	r5, [r0, #5]
    hdcmipp->Instance->P2FCTCR |= CaptureMode;
34010dc6:	f8d4 1d00 	ldr.w	r1, [r4, #3328]	@ 0xd00
34010dca:	430b      	orrs	r3, r1
34010dcc:	f8c4 3d00 	str.w	r3, [r4, #3328]	@ 0xd00
    WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
34010dd0:	f8c4 2dc4 	str.w	r2, [r4, #3524]	@ 0xdc4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_OVR | DCMIPP_IT_PIPE2_VSYNC |
34010dd4:	f8d4 33f0 	ldr.w	r3, [r4, #1008]	@ 0x3f0
34010dd8:	f043 4306 	orr.w	r3, r3, #2248146944	@ 0x86000000
34010ddc:	e7ec      	b.n	34010db8 <DCMIPP_SetConfig.part.0+0x24>

34010dde <DCMIPP_SetConfig>:
{
34010dde:	b470      	push	{r4, r5, r6}
34010de0:	4615      	mov	r5, r2
34010de2:	461e      	mov	r6, r3
  if (Pipe == DCMIPP_PIPE0)
34010de4:	b999      	cbnz	r1, 34010e0e <DCMIPP_SetConfig+0x30>
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34010de6:	2302      	movs	r3, #2
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
34010de8:	6801      	ldr	r1, [r0, #0]
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34010dea:	7143      	strb	r3, [r0, #5]
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
34010dec:	f8d1 2500 	ldr.w	r2, [r1, #1280]	@ 0x500
34010df0:	4332      	orrs	r2, r6
34010df2:	f8c1 2500 	str.w	r2, [r1, #1280]	@ 0x500
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
34010df6:	f8c1 55c4 	str.w	r5, [r1, #1476]	@ 0x5c4
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
34010dfa:	f8d1 33f0 	ldr.w	r3, [r1, #1008]	@ 0x3f0
}
34010dfe:	bc70      	pop	{r4, r5, r6}
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
34010e00:	f443 4306 	orr.w	r3, r3, #34304	@ 0x8600
34010e04:	f043 0320 	orr.w	r3, r3, #32
34010e08:	f8c1 33f0 	str.w	r3, [r1, #1008]	@ 0x3f0
}
34010e0c:	4770      	bx	lr
34010e0e:	bc70      	pop	{r4, r5, r6}
34010e10:	f7ff bfc0 	b.w	34010d94 <DCMIPP_SetConfig.part.0>

34010e14 <DCMIPP_EnableCapture.part.0>:
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
34010e14:	2302      	movs	r3, #2
34010e16:	7183      	strb	r3, [r0, #6]
    SET_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEN);
34010e18:	6803      	ldr	r3, [r0, #0]
34010e1a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
34010e1e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010e22:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    SET_BIT(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_CPTREQ);
34010e26:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
34010e2a:	f042 0208 	orr.w	r2, r2, #8
34010e2e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
34010e32:	4770      	bx	lr

34010e34 <DCMIPP_EnableCapture>:
  if (Pipe == DCMIPP_PIPE0)
34010e34:	b969      	cbnz	r1, 34010e52 <DCMIPP_EnableCapture+0x1e>
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
34010e36:	6803      	ldr	r3, [r0, #0]
34010e38:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
34010e3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010e40:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
34010e44:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
34010e48:	f042 0208 	orr.w	r2, r2, #8
34010e4c:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
34010e50:	4770      	bx	lr
  else if (Pipe == DCMIPP_PIPE1)
34010e52:	2901      	cmp	r1, #1
34010e54:	d101      	bne.n	34010e5a <DCMIPP_EnableCapture+0x26>
34010e56:	f7ff bfdd 	b.w	34010e14 <DCMIPP_EnableCapture.part.0>
    SET_BIT(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_PIPEN);
34010e5a:	6803      	ldr	r3, [r0, #0]
34010e5c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
34010e60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34010e64:	f8c3 2c04 	str.w	r2, [r3, #3076]	@ 0xc04
    SET_BIT(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_CPTREQ);
34010e68:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34010e6c:	f042 0208 	orr.w	r2, r2, #8
34010e70:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
}
34010e74:	4770      	bx	lr
	...

34010e78 <DCMIPP_CSI_WritePHYReg.constprop.0>:
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34010e78:	4b18      	ldr	r3, [pc, #96]	@ (34010edc <DCMIPP_CSI_WritePHYReg.constprop.0+0x64>)
static void DCMIPP_CSI_WritePHYReg(CSI_TypeDef *hcsi, uint32_t reg_msb, uint32_t reg_lsb, uint32_t val)
34010e7a:	b510      	push	{r4, lr}
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34010e7c:	695a      	ldr	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
34010e7e:	b2c9      	uxtb	r1, r1
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34010e80:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
34010e84:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34010e86:	691a      	ldr	r2, [r3, #16]
34010e88:	f042 0201 	orr.w	r2, r2, #1
34010e8c:	611a      	str	r2, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34010e8e:	695a      	ldr	r2, [r3, #20]
34010e90:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
34010e94:	615a      	str	r2, [r3, #20]
  CLEAR_REG(hcsi->PTCR0);
34010e96:	2200      	movs	r2, #0
34010e98:	611a      	str	r2, [r3, #16]
  CLEAR_REG(hcsi->PTCR1);
34010e9a:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, reg_msb & 0xFFU);
34010e9c:	695c      	ldr	r4, [r3, #20]
34010e9e:	615c      	str	r4, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34010ea0:	691c      	ldr	r4, [r3, #16]
34010ea2:	f044 0401 	orr.w	r4, r4, #1
34010ea6:	611c      	str	r4, [r3, #16]
  CLEAR_REG(hcsi->PTCR0);
34010ea8:	611a      	str	r2, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM);
34010eaa:	695c      	ldr	r4, [r3, #20]
34010eac:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
34010eb0:	615c      	str	r4, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34010eb2:	691c      	ldr	r4, [r3, #16]
34010eb4:	f044 0401 	orr.w	r4, r4, #1
34010eb8:	611c      	str	r4, [r3, #16]
  SET_BIT(hcsi->PTCR1, CSI_PTCR1_TWM | (reg_lsb & 0xFFU));
34010eba:	695c      	ldr	r4, [r3, #20]
34010ebc:	4304      	orrs	r4, r0
34010ebe:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
34010ec2:	615c      	str	r4, [r3, #20]
  CLEAR_REG(hcsi->PTCR0);
34010ec4:	611a      	str	r2, [r3, #16]
  CLEAR_REG(hcsi->PTCR1);
34010ec6:	615a      	str	r2, [r3, #20]
  SET_BIT(hcsi->PTCR1, val & 0xFFU);
34010ec8:	6958      	ldr	r0, [r3, #20]
34010eca:	4301      	orrs	r1, r0
34010ecc:	6159      	str	r1, [r3, #20]
  SET_BIT(hcsi->PTCR0, CSI_PTCR0_TCKEN);
34010ece:	6919      	ldr	r1, [r3, #16]
34010ed0:	f041 0101 	orr.w	r1, r1, #1
34010ed4:	6119      	str	r1, [r3, #16]
  CLEAR_REG(hcsi->PTCR0);
34010ed6:	611a      	str	r2, [r3, #16]
}
34010ed8:	bd10      	pop	{r4, pc}
34010eda:	bf00      	nop
34010edc:	58007000 	.word	0x58007000

34010ee0 <HAL_DCMIPP_Init>:
{
34010ee0:	b510      	push	{r4, lr}
  if (hdcmipp == NULL)
34010ee2:	4604      	mov	r4, r0
34010ee4:	b1d8      	cbz	r0, 34010f1e <HAL_DCMIPP_Init+0x3e>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010ee6:	6803      	ldr	r3, [r0, #0]
34010ee8:	4a0e      	ldr	r2, [pc, #56]	@ (34010f24 <HAL_DCMIPP_Init+0x44>)
34010eea:	4293      	cmp	r3, r2
34010eec:	d008      	beq.n	34010f00 <HAL_DCMIPP_Init+0x20>
34010eee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010ef2:	4293      	cmp	r3, r2
34010ef4:	d004      	beq.n	34010f00 <HAL_DCMIPP_Init+0x20>
34010ef6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
34010efa:	480b      	ldr	r0, [pc, #44]	@ (34010f28 <HAL_DCMIPP_Init+0x48>)
34010efc:	f00e f930 	bl	3401f160 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
34010f00:	7923      	ldrb	r3, [r4, #4]
34010f02:	b913      	cbnz	r3, 34010f0a <HAL_DCMIPP_Init+0x2a>
    HAL_DCMIPP_MspInit(hdcmipp);
34010f04:	4620      	mov	r0, r4
34010f06:	f7f6 fa67 	bl	340073d8 <HAL_DCMIPP_MspInit>
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
34010f0a:	2303      	movs	r3, #3
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
34010f0c:	2000      	movs	r0, #0
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
34010f0e:	7123      	strb	r3, [r4, #4]
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
34010f10:	2301      	movs	r3, #1
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
34010f12:	7160      	strb	r0, [r4, #5]
34010f14:	71a0      	strb	r0, [r4, #6]
34010f16:	71e0      	strb	r0, [r4, #7]
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
34010f18:	60a0      	str	r0, [r4, #8]
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
34010f1a:	7123      	strb	r3, [r4, #4]
}
34010f1c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34010f1e:	2001      	movs	r0, #1
34010f20:	e7fc      	b.n	34010f1c <HAL_DCMIPP_Init+0x3c>
34010f22:	bf00      	nop
34010f24:	58002000 	.word	0x58002000
34010f28:	3402b9b3 	.word	0x3402b9b3

34010f2c <HAL_DCMIPP_CSI_SetConfig>:
{
34010f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34010f30:	4605      	mov	r5, r0
34010f32:	b0fe      	sub	sp, #504	@ 0x1f8
34010f34:	460c      	mov	r4, r1
  const SNPS_FreqsTypeDef SNPS_Freqs[63] =
34010f36:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
34010f3a:	4668      	mov	r0, sp
34010f3c:	4954      	ldr	r1, [pc, #336]	@ (34011090 <HAL_DCMIPP_CSI_SetConfig+0x164>)
34010f3e:	f00f fc12 	bl	34020766 <memcpy>
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
34010f42:	b91d      	cbnz	r5, 34010f4c <HAL_DCMIPP_CSI_SetConfig+0x20>
    return HAL_ERROR;
34010f44:	2001      	movs	r0, #1
}
34010f46:	b07e      	add	sp, #504	@ 0x1f8
34010f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hdcmipp == NULL) || (pCSI_Config == NULL))
34010f4c:	2c00      	cmp	r4, #0
34010f4e:	d0f9      	beq.n	34010f44 <HAL_DCMIPP_CSI_SetConfig+0x18>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34010f50:	682b      	ldr	r3, [r5, #0]
34010f52:	4a50      	ldr	r2, [pc, #320]	@ (34011094 <HAL_DCMIPP_CSI_SetConfig+0x168>)
34010f54:	4293      	cmp	r3, r2
34010f56:	d008      	beq.n	34010f6a <HAL_DCMIPP_CSI_SetConfig+0x3e>
34010f58:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34010f5c:	4293      	cmp	r3, r2
34010f5e:	d004      	beq.n	34010f6a <HAL_DCMIPP_CSI_SetConfig+0x3e>
34010f60:	f240 218b 	movw	r1, #651	@ 0x28b
34010f64:	484c      	ldr	r0, [pc, #304]	@ (34011098 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
34010f66:	f00e f8fb 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_NUMBER_OF_LANES(pCSI_Config->NumberOfLanes));
34010f6a:	6823      	ldr	r3, [r4, #0]
34010f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34010f70:	d007      	beq.n	34010f82 <HAL_DCMIPP_CSI_SetConfig+0x56>
34010f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34010f76:	d004      	beq.n	34010f82 <HAL_DCMIPP_CSI_SetConfig+0x56>
34010f78:	f44f 7123 	mov.w	r1, #652	@ 0x28c
34010f7c:	4846      	ldr	r0, [pc, #280]	@ (34011098 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
34010f7e:	f00e f8ef 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_LANE_MAPPING(pCSI_Config->DataLaneMapping));
34010f82:	6863      	ldr	r3, [r4, #4]
34010f84:	3b01      	subs	r3, #1
34010f86:	2b01      	cmp	r3, #1
34010f88:	d904      	bls.n	34010f94 <HAL_DCMIPP_CSI_SetConfig+0x68>
34010f8a:	f240 218d 	movw	r1, #653	@ 0x28d
34010f8e:	4842      	ldr	r0, [pc, #264]	@ (34011098 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
34010f90:	f00e f8e6 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_PHY_BITRATE(pCSI_Config->PHYBitrate));
34010f94:	68a3      	ldr	r3, [r4, #8]
34010f96:	2b3e      	cmp	r3, #62	@ 0x3e
34010f98:	d904      	bls.n	34010fa4 <HAL_DCMIPP_CSI_SetConfig+0x78>
34010f9a:	f240 218e 	movw	r1, #654	@ 0x28e
34010f9e:	483e      	ldr	r0, [pc, #248]	@ (34011098 <HAL_DCMIPP_CSI_SetConfig+0x16c>)
34010fa0:	f00e f8de 	bl	3401f160 <assert_failed>
  CLEAR_BIT(csi_instance->CR, CSI_CR_CSIEN);
34010fa4:	4b3d      	ldr	r3, [pc, #244]	@ (3401109c <HAL_DCMIPP_CSI_SetConfig+0x170>)
34010fa6:	681a      	ldr	r2, [r3, #0]
34010fa8:	f022 0201 	bic.w	r2, r2, #1
34010fac:	601a      	str	r2, [r3, #0]
  if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34010fae:	6861      	ldr	r1, [r4, #4]
34010fb0:	2901      	cmp	r1, #1
34010fb2:	d11a      	bne.n	34010fea <HAL_DCMIPP_CSI_SetConfig+0xbe>
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE0 << CSI_LMCFGR_DL0MAP_Pos) | \
34010fb4:	6822      	ldr	r2, [r4, #0]
34010fb6:	f442 1204 	orr.w	r2, r2, #2162688	@ 0x210000
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
34010fba:	671a      	str	r2, [r3, #112]	@ 0x70
  SET_BIT(csi_instance->CR, CSI_CR_CSIEN);
34010fbc:	681a      	ldr	r2, [r3, #0]
34010fbe:	f042 0201 	orr.w	r2, r2, #1
34010fc2:	601a      	str	r2, [r3, #0]
  __HAL_DCMIPP_CSI_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO |  DCMIPP_CSI_IT_SYNCERR | \
34010fc4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34010fc8:	f042 42b0 	orr.w	r2, r2, #1476395008	@ 0x58000000
34010fcc:	f442 1204 	orr.w	r2, r2, #2162688	@ 0x210000
34010fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34010fd4:	6822      	ldr	r2, [r4, #0]
34010fd6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0 | DCMIPP_CSI_IT_ESOTSYNCDL0 |
34010fda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34010fde:	d154      	bne.n	3401108a <HAL_DCMIPP_CSI_SetConfig+0x15e>
    if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_PHYSICAL_DATA_LANES)
34010fe0:	2901      	cmp	r1, #1
34010fe2:	d108      	bne.n	34010ff6 <HAL_DCMIPP_CSI_SetConfig+0xca>
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34010fe4:	f042 021f 	orr.w	r2, r2, #31
34010fe8:	e007      	b.n	34010ffa <HAL_DCMIPP_CSI_SetConfig+0xce>
  else if (pCSI_Config->DataLaneMapping == DCMIPP_CSI_INVERTED_DATA_LANES)
34010fea:	2902      	cmp	r1, #2
34010fec:	d1aa      	bne.n	34010f44 <HAL_DCMIPP_CSI_SetConfig+0x18>
    WRITE_REG(csi_instance->LMCFGR, pCSI_Config->NumberOfLanes | (DCMIPP_CSI_DATA_LANE1 << CSI_LMCFGR_DL0MAP_Pos) | \
34010fee:	6822      	ldr	r2, [r4, #0]
34010ff0:	f442 1290 	orr.w	r2, r2, #1179648	@ 0x120000
34010ff4:	e7e1      	b.n	34010fba <HAL_DCMIPP_CSI_SetConfig+0x8e>
      __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34010ff6:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
  CLEAR_REG(csi_instance-> PCR);
34010ffa:	2600      	movs	r6, #0
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34010ffc:	4d28      	ldr	r5, [pc, #160]	@ (340110a0 <HAL_DCMIPP_CSI_SetConfig+0x174>)
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
34010ffe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  CLEAR_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
34011002:	682b      	ldr	r3, [r5, #0]
34011004:	4f25      	ldr	r7, [pc, #148]	@ (3401109c <HAL_DCMIPP_CSI_SetConfig+0x170>)
34011006:	f023 0302 	bic.w	r3, r3, #2
3401100a:	602b      	str	r3, [r5, #0]
  CLEAR_REG(csi_instance-> PCR);
3401100c:	607e      	str	r6, [r7, #4]
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
3401100e:	692b      	ldr	r3, [r5, #16]
  HAL_Delay(1);
34011010:	2001      	movs	r0, #1
  SET_BIT(csi_instance->PTCR0, CSI_PTCR0_TCKEN);
34011012:	f043 0301 	orr.w	r3, r3, #1
34011016:	612b      	str	r3, [r5, #16]
  HAL_Delay(1);
34011018:	f00d fd74 	bl	3401eb04 <HAL_Delay>
  CLEAR_REG(csi_instance->PTCR0);
3401101c:	612e      	str	r6, [r5, #16]
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
3401101e:	f8d4 8008 	ldr.w	r8, [r4, #8]
34011022:	68ab      	ldr	r3, [r5, #8]
34011024:	f85d 2038 	ldr.w	r2, [sp, r8, lsl #3]
34011028:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
3401102c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34011030:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
34011034:	60ab      	str	r3, [r5, #8]
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
34011036:	2138      	movs	r1, #56	@ 0x38
34011038:	2008      	movs	r0, #8
  MODIFY_REG(csi_instance->PFCR, CSI_PFCR_HSFR, (0x28U << CSI_PFCR_CCFR_Pos) |
3401103a:	0216      	lsls	r6, r2, #8
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0x08, 0x38);
3401103c:	f7ff ff1c 	bl	34010e78 <DCMIPP_CSI_WritePHYReg.constprop.0>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe4, 0x11);
34011040:	2111      	movs	r1, #17
34011042:	20e4      	movs	r0, #228	@ 0xe4
34011044:	f7ff ff18 	bl	34010e78 <DCMIPP_CSI_WritePHYReg.constprop.0>
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
34011048:	eb0d 03c8 	add.w	r3, sp, r8, lsl #3
3401104c:	f8d3 8004 	ldr.w	r8, [r3, #4]
34011050:	20e3      	movs	r0, #227	@ 0xe3
34011052:	ea4f 2118 	mov.w	r1, r8, lsr #8
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
34011056:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target >> 8);
3401105a:	f7ff ff0d 	bl	34010e78 <DCMIPP_CSI_WritePHYReg.constprop.0>
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3401105e:	f046 0628 	orr.w	r6, r6, #40	@ 0x28
  DCMIPP_CSI_WritePHYReg(csi_instance, 0x00, 0xe3, SNPS_Freqs[pCSI_Config->PHYBitrate].osc_freq_target & 0xFFU);
34011062:	20e3      	movs	r0, #227	@ 0xe3
34011064:	fa5f f188 	uxtb.w	r1, r8
34011068:	f7ff ff06 	bl	34010e78 <DCMIPP_CSI_WritePHYReg.constprop.0>
  WRITE_REG(csi_instance-> PFCR, (0x28U << CSI_PFCR_CCFR_Pos) |
3401106c:	60ae      	str	r6, [r5, #8]
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
3401106e:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(csi_instance->PMCR);
34011070:	2000      	movs	r0, #0
  if (pCSI_Config->NumberOfLanes == DCMIPP_CSI_ONE_DATA_LANE)
34011072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
34011076:	bf0c      	ite	eq
34011078:	2307      	moveq	r3, #7
    WRITE_REG(csi_instance->PCR, CSI_PCR_DL0EN | CSI_PCR_DL1EN | CSI_PCR_CLEN | CSI_PCR_PWRDOWN);
3401107a:	230f      	movne	r3, #15
3401107c:	607b      	str	r3, [r7, #4]
  SET_BIT(csi_instance->PRCR, CSI_PRCR_PEN);
3401107e:	682b      	ldr	r3, [r5, #0]
34011080:	f043 0302 	orr.w	r3, r3, #2
34011084:	602b      	str	r3, [r5, #0]
  CLEAR_REG(csi_instance->PMCR);
34011086:	6068      	str	r0, [r5, #4]
  return HAL_OK;
34011088:	e75d      	b.n	34010f46 <HAL_DCMIPP_CSI_SetConfig+0x1a>
    __HAL_DCMIPP_CSI_DPHY_ENABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1 | DCMIPP_CSI_IT_ESOTSYNCDL1 |
3401108a:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
3401108e:	e7a9      	b.n	34010fe4 <HAL_DCMIPP_CSI_SetConfig+0xb8>
34011090:	3402615c 	.word	0x3402615c
34011094:	58002000 	.word	0x58002000
34011098:	3402b9b3 	.word	0x3402b9b3
3401109c:	58006000 	.word	0x58006000
340110a0:	58007000 	.word	0x58007000

340110a4 <HAL_DCMIPP_CSI_PIPE_SetConfig>:
{
340110a4:	b570      	push	{r4, r5, r6, lr}
340110a6:	460d      	mov	r5, r1
340110a8:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
340110aa:	4606      	mov	r6, r0
340110ac:	b908      	cbnz	r0, 340110b2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe>
    return HAL_ERROR;
340110ae:	2001      	movs	r0, #1
}
340110b0:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pCSI_PipeConfig == NULL))
340110b2:	2a00      	cmp	r2, #0
340110b4:	d0fb      	beq.n	340110ae <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340110b6:	6803      	ldr	r3, [r0, #0]
340110b8:	4a50      	ldr	r2, [pc, #320]	@ (340111fc <HAL_DCMIPP_CSI_PIPE_SetConfig+0x158>)
340110ba:	4293      	cmp	r3, r2
340110bc:	d008      	beq.n	340110d0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2c>
340110be:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340110c2:	4293      	cmp	r3, r2
340110c4:	d004      	beq.n	340110d0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x2c>
340110c6:	f44f 7144 	mov.w	r1, #784	@ 0x310
340110ca:	484d      	ldr	r0, [pc, #308]	@ (34011200 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
340110cc:	f00e f848 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340110d0:	2d02      	cmp	r5, #2
340110d2:	d904      	bls.n	340110de <HAL_DCMIPP_CSI_PIPE_SetConfig+0x3a>
340110d4:	f240 3111 	movw	r1, #785	@ 0x311
340110d8:	4849      	ldr	r0, [pc, #292]	@ (34011200 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
340110da:	f00e f841 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
340110de:	6823      	ldr	r3, [r4, #0]
340110e0:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340110e4:	d004      	beq.n	340110f0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x4c>
340110e6:	f240 3112 	movw	r1, #786	@ 0x312
340110ea:	4845      	ldr	r0, [pc, #276]	@ (34011200 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
340110ec:	f00e f838 	bl	3401f160 <assert_failed>
  if (Pipe != DCMIPP_PIPE2)
340110f0:	2d02      	cmp	r5, #2
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
340110f2:	6823      	ldr	r3, [r4, #0]
  if (Pipe != DCMIPP_PIPE2)
340110f4:	d01c      	beq.n	34011130 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
    assert_param(IS_DCMIPP_DATA_TYPE_MODE(pCSI_PipeConfig->DataTypeMode));
340110f6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340110fa:	d004      	beq.n	34011106 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x62>
340110fc:	f240 3116 	movw	r1, #790	@ 0x316
34011100:	483f      	ldr	r0, [pc, #252]	@ (34011200 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
34011102:	f00e f82d 	bl	3401f160 <assert_failed>
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34011106:	6823      	ldr	r3, [r4, #0]
34011108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401110c:	d002      	beq.n	34011114 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x70>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
3401110e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34011112:	d10d      	bne.n	34011130 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
      assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDB));
34011114:	68a3      	ldr	r3, [r4, #8]
34011116:	3b18      	subs	r3, #24
34011118:	2b15      	cmp	r3, #21
3401111a:	d804      	bhi.n	34011126 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x82>
3401111c:	4a39      	ldr	r2, [pc, #228]	@ (34011204 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x160>)
3401111e:	fa22 f303 	lsr.w	r3, r2, r3
34011122:	07da      	lsls	r2, r3, #31
34011124:	d404      	bmi.n	34011130 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x8c>
34011126:	f240 311b 	movw	r1, #795	@ 0x31b
3401112a:	4835      	ldr	r0, [pc, #212]	@ (34011200 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
3401112c:	f00e f818 	bl	3401f160 <assert_failed>
  if (pCSI_PipeConfig->DataTypeMode != DCMIPP_DTMODE_ALL)
34011130:	6823      	ldr	r3, [r4, #0]
34011132:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34011136:	d00d      	beq.n	34011154 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xb0>
    assert_param(IS_DCMIPP_DATA_TYPE(pCSI_PipeConfig->DataTypeIDA));
34011138:	6863      	ldr	r3, [r4, #4]
3401113a:	3b18      	subs	r3, #24
3401113c:	2b15      	cmp	r3, #21
3401113e:	d804      	bhi.n	3401114a <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa6>
34011140:	4a30      	ldr	r2, [pc, #192]	@ (34011204 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x160>)
34011142:	fa22 f303 	lsr.w	r3, r2, r3
34011146:	07db      	lsls	r3, r3, #31
34011148:	d404      	bmi.n	34011154 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xb0>
3401114a:	f240 3121 	movw	r1, #801	@ 0x321
3401114e:	482c      	ldr	r0, [pc, #176]	@ (34011200 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x15c>)
34011150:	f00e f806 	bl	3401f160 <assert_failed>
  state = hdcmipp->State;
34011154:	7933      	ldrb	r3, [r6, #4]
  if ((state == HAL_DCMIPP_STATE_INIT) || (state == HAL_DCMIPP_STATE_READY))
34011156:	3b01      	subs	r3, #1
34011158:	2b01      	cmp	r3, #1
3401115a:	d82e      	bhi.n	340111ba <HAL_DCMIPP_CSI_PIPE_SetConfig+0x116>
    if (((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL) || \
3401115c:	6822      	ldr	r2, [r4, #0]
3401115e:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
34011162:	d045      	beq.n	340111f0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x14c>
34011164:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
34011168:	d12b      	bne.n	340111c2 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x11e>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
3401116a:	2d00      	cmp	r5, #0
3401116c:	d19f      	bne.n	340110ae <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
3401116e:	4613      	mov	r3, r2
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
34011170:	6861      	ldr	r1, [r4, #4]
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
34011172:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
      pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDA << DCMIPP_P0FSCR_DTIDA_Pos);
34011176:	ea43 0301 	orr.w	r3, r3, r1
    if ((pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_DTIDA_OR_DTIDB)
3401117a:	6831      	ldr	r1, [r6, #0]
3401117c:	d002      	beq.n	34011184 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xe0>
        || (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB))
3401117e:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
34011182:	d104      	bne.n	3401118e <HAL_DCMIPP_CSI_PIPE_SetConfig+0xea>
      if (Pipe != DCMIPP_PIPE2)
34011184:	2d02      	cmp	r5, #2
34011186:	d02b      	beq.n	340111e0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>
        pxfscr_reg |= (uint32_t)(pCSI_PipeConfig->DataTypeIDB << DCMIPP_P0FSCR_DTIDB_Pos);
34011188:	68a2      	ldr	r2, [r4, #8]
3401118a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (Pipe == DCMIPP_PIPE0)
3401118e:	b9ed      	cbnz	r5, 340111cc <HAL_DCMIPP_CSI_PIPE_SetConfig+0x128>
      MODIFY_REG(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_DTMODE | DCMIPP_P0FSCR_DTIDA |
34011190:	6831      	ldr	r1, [r6, #0]
34011192:	4a1d      	ldr	r2, [pc, #116]	@ (34011208 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x164>)
34011194:	f8d1 0404 	ldr.w	r0, [r1, #1028]	@ 0x404
34011198:	4002      	ands	r2, r0
3401119a:	431a      	orrs	r2, r3
3401119c:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
    CLEAR_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
340111a0:	6833      	ldr	r3, [r6, #0]
340111a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
340111a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
340111aa:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    SET_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
340111ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
340111b2:	f042 0201 	orr.w	r2, r2, #1
340111b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
340111ba:	2302      	movs	r3, #2
  return HAL_OK;
340111bc:	2000      	movs	r0, #0
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
340111be:	7133      	strb	r3, [r6, #4]
  return HAL_OK;
340111c0:	e776      	b.n	340110b0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xc>
  uint32_t pxfscr_reg = 0;
340111c2:	2d02      	cmp	r5, #2
340111c4:	bf14      	ite	ne
340111c6:	4613      	movne	r3, r2
340111c8:	2300      	moveq	r3, #0
340111ca:	e7d1      	b.n	34011170 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xcc>
    else if (Pipe == DCMIPP_PIPE1)
340111cc:	2d01      	cmp	r5, #1
340111ce:	d107      	bne.n	340111e0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x13c>
      MODIFY_REG(hdcmipp->Instance->P1FSCR, (DCMIPP_P1FSCR_DTIDA | DCMIPP_P1FSCR_DTIDB |
340111d0:	f8d1 0804 	ldr.w	r0, [r1, #2052]	@ 0x804
340111d4:	4a0c      	ldr	r2, [pc, #48]	@ (34011208 <HAL_DCMIPP_CSI_PIPE_SetConfig+0x164>)
340111d6:	4002      	ands	r2, r0
340111d8:	431a      	orrs	r2, r3
340111da:	f8c1 2804 	str.w	r2, [r1, #2052]	@ 0x804
340111de:	e7df      	b.n	340111a0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xfc>
      MODIFY_REG(hdcmipp->Instance->P2FSCR, DCMIPP_P2FSCR_DTIDA, pxfscr_reg);
340111e0:	f8d1 2c04 	ldr.w	r2, [r1, #3076]	@ 0xc04
340111e4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
340111e8:	4313      	orrs	r3, r2
340111ea:	f8c1 3c04 	str.w	r3, [r1, #3076]	@ 0xc04
340111ee:	e7d7      	b.n	340111a0 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xfc>
         (pCSI_PipeConfig->DataTypeMode == DCMIPP_DTMODE_ALL_EXCEPT_DTIA_DTIB)) && (Pipe != DCMIPP_PIPE0))
340111f0:	2d00      	cmp	r5, #0
340111f2:	f47f af5c 	bne.w	340110ae <HAL_DCMIPP_CSI_PIPE_SetConfig+0xa>
340111f6:	4613      	mov	r3, r2
340111f8:	e7ca      	b.n	34011190 <HAL_DCMIPP_CSI_PIPE_SetConfig+0xec>
340111fa:	bf00      	nop
340111fc:	58002000 	.word	0x58002000
34011200:	3402b9b3 	.word	0x3402b9b3
34011204:	003c1fc3 	.word	0x003c1fc3
34011208:	fffcc0c0 	.word	0xfffcc0c0

3401120c <HAL_DCMIPP_CSI_SetVCConfig>:
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
3401120c:	2903      	cmp	r1, #3
{
3401120e:	b570      	push	{r4, r5, r6, lr}
34011210:	4606      	mov	r6, r0
34011212:	460d      	mov	r5, r1
34011214:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
34011216:	d904      	bls.n	34011222 <HAL_DCMIPP_CSI_SetVCConfig+0x16>
34011218:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
3401121c:	4815      	ldr	r0, [pc, #84]	@ (34011274 <HAL_DCMIPP_CSI_SetVCConfig+0x68>)
3401121e:	f00d ff9f 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_CSI_DATA_TYPE_FORMAT(DataTypeFormat));
34011222:	2c06      	cmp	r4, #6
34011224:	d904      	bls.n	34011230 <HAL_DCMIPP_CSI_SetVCConfig+0x24>
34011226:	f240 31c9 	movw	r1, #969	@ 0x3c9
3401122a:	4812      	ldr	r0, [pc, #72]	@ (34011274 <HAL_DCMIPP_CSI_SetVCConfig+0x68>)
3401122c:	f00d ff98 	bl	3401f160 <assert_failed>
  if (hdcmipp == NULL)
34011230:	b1f6      	cbz	r6, 34011270 <HAL_DCMIPP_CSI_SetVCConfig+0x64>
  switch (VirtualChannel)
34011232:	2d03      	cmp	r5, #3
34011234:	d808      	bhi.n	34011248 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
34011236:	e8df f005 	tbb	[pc, r5]
3401123a:	0902      	.short	0x0902
3401123c:	150f      	.short	0x150f
      WRITE_REG(csi_instance->VC0CFGR1, (DataTypeFormat << CSI_VC0CFGR1_CDTFT_Pos) | CSI_VC0CFGR1_ALLDT);
3401123e:	4b0e      	ldr	r3, [pc, #56]	@ (34011278 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
34011240:	0224      	lsls	r4, r4, #8
34011242:	f044 0401 	orr.w	r4, r4, #1
34011246:	611c      	str	r4, [r3, #16]
  return HAL_OK;
34011248:	2000      	movs	r0, #0
}
3401124a:	bd70      	pop	{r4, r5, r6, pc}
      WRITE_REG(csi_instance->VC1CFGR1, (DataTypeFormat << CSI_VC1CFGR1_CDTFT_Pos) | CSI_VC1CFGR1_ALLDT);
3401124c:	4b0a      	ldr	r3, [pc, #40]	@ (34011278 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3401124e:	0224      	lsls	r4, r4, #8
34011250:	f044 0401 	orr.w	r4, r4, #1
34011254:	621c      	str	r4, [r3, #32]
      break;
34011256:	e7f7      	b.n	34011248 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
      WRITE_REG(csi_instance->VC2CFGR1, (DataTypeFormat << CSI_VC2CFGR1_CDTFT_Pos) | CSI_VC2CFGR1_ALLDT);
34011258:	4b07      	ldr	r3, [pc, #28]	@ (34011278 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
3401125a:	0224      	lsls	r4, r4, #8
3401125c:	f044 0401 	orr.w	r4, r4, #1
34011260:	631c      	str	r4, [r3, #48]	@ 0x30
      break;
34011262:	e7f1      	b.n	34011248 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
      WRITE_REG(csi_instance->VC3CFGR1, (DataTypeFormat << CSI_VC3CFGR1_CDTFT_Pos) | CSI_VC3CFGR1_ALLDT);
34011264:	4b04      	ldr	r3, [pc, #16]	@ (34011278 <HAL_DCMIPP_CSI_SetVCConfig+0x6c>)
34011266:	0224      	lsls	r4, r4, #8
34011268:	f044 0401 	orr.w	r4, r4, #1
3401126c:	641c      	str	r4, [r3, #64]	@ 0x40
      break;
3401126e:	e7eb      	b.n	34011248 <HAL_DCMIPP_CSI_SetVCConfig+0x3c>
    return HAL_ERROR;
34011270:	2001      	movs	r0, #1
34011272:	e7ea      	b.n	3401124a <HAL_DCMIPP_CSI_SetVCConfig+0x3e>
34011274:	3402b9b3 	.word	0x3402b9b3
34011278:	58006000 	.word	0x58006000

3401127c <HAL_DCMIPP_PIPE_SetConfig>:
{
3401127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401127e:	460d      	mov	r5, r1
34011280:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
34011282:	4606      	mov	r6, r0
34011284:	b908      	cbnz	r0, 3401128a <HAL_DCMIPP_PIPE_SetConfig+0xe>
    return HAL_ERROR;
34011286:	2001      	movs	r0, #1
}
34011288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
3401128a:	2a00      	cmp	r2, #0
3401128c:	d0fb      	beq.n	34011286 <HAL_DCMIPP_PIPE_SetConfig+0xa>
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3401128e:	6803      	ldr	r3, [r0, #0]
34011290:	4a46      	ldr	r2, [pc, #280]	@ (340113ac <HAL_DCMIPP_PIPE_SetConfig+0x130>)
34011292:	4293      	cmp	r3, r2
34011294:	d008      	beq.n	340112a8 <HAL_DCMIPP_PIPE_SetConfig+0x2c>
34011296:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401129a:	4293      	cmp	r3, r2
3401129c:	d004      	beq.n	340112a8 <HAL_DCMIPP_PIPE_SetConfig+0x2c>
3401129e:	f240 4102 	movw	r1, #1026	@ 0x402
340112a2:	4843      	ldr	r0, [pc, #268]	@ (340113b0 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
340112a4:	f00d ff5c 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340112a8:	2d02      	cmp	r5, #2
340112aa:	d904      	bls.n	340112b6 <HAL_DCMIPP_PIPE_SetConfig+0x3a>
340112ac:	f240 4103 	movw	r1, #1027	@ 0x403
340112b0:	483f      	ldr	r0, [pc, #252]	@ (340113b0 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
340112b2:	f00d ff55 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_FRAME_RATE(pPipeConfig->FrameRate));
340112b6:	6823      	ldr	r3, [r4, #0]
340112b8:	2b03      	cmp	r3, #3
340112ba:	d904      	bls.n	340112c6 <HAL_DCMIPP_PIPE_SetConfig+0x4a>
340112bc:	f240 4104 	movw	r1, #1028	@ 0x404
340112c0:	483b      	ldr	r0, [pc, #236]	@ (340113b0 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
340112c2:	f00d ff4d 	bl	3401f160 <assert_failed>
  if (Pipe != DCMIPP_PIPE0)
340112c6:	b9bd      	cbnz	r5, 340112f8 <HAL_DCMIPP_PIPE_SetConfig+0x7c>
  pipe_state = hdcmipp->PipeState[Pipe];
340112c8:	1971      	adds	r1, r6, r5
340112ca:	7948      	ldrb	r0, [r1, #5]
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
340112cc:	7933      	ldrb	r3, [r6, #4]
  pipe_state = hdcmipp->PipeState[Pipe];
340112ce:	b2c0      	uxtb	r0, r0
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
340112d0:	2b02      	cmp	r3, #2
340112d2:	b2da      	uxtb	r2, r3
340112d4:	d1d7      	bne.n	34011286 <HAL_DCMIPP_PIPE_SetConfig+0xa>
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
340112d6:	f010 00fb 	ands.w	r0, r0, #251	@ 0xfb
340112da:	d1d4      	bne.n	34011286 <HAL_DCMIPP_PIPE_SetConfig+0xa>
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
340112dc:	714a      	strb	r2, [r1, #5]
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
340112de:	6833      	ldr	r3, [r6, #0]
340112e0:	6827      	ldr	r7, [r4, #0]
  if (Pipe == DCMIPP_PIPE0)
340112e2:	bb15      	cbnz	r5, 3401132a <HAL_DCMIPP_PIPE_SetConfig+0xae>
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
340112e4:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
340112e8:	f022 0203 	bic.w	r2, r2, #3
340112ec:	433a      	orrs	r2, r7
340112ee:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
340112f2:	2301      	movs	r3, #1
340112f4:	714b      	strb	r3, [r1, #5]
  return HAL_OK;
340112f6:	e7c7      	b.n	34011288 <HAL_DCMIPP_PIPE_SetConfig+0xc>
    assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(pPipeConfig->PixelPackerFormat));
340112f8:	68a3      	ldr	r3, [r4, #8]
340112fa:	2b09      	cmp	r3, #9
340112fc:	d904      	bls.n	34011308 <HAL_DCMIPP_PIPE_SetConfig+0x8c>
340112fe:	f240 4107 	movw	r1, #1031	@ 0x407
34011302:	482b      	ldr	r0, [pc, #172]	@ (340113b0 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
34011304:	f00d ff2c 	bl	3401f160 <assert_failed>
    assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(pPipeConfig->PixelPipePitch));
34011308:	6863      	ldr	r3, [r4, #4]
3401130a:	071a      	lsls	r2, r3, #28
3401130c:	d102      	bne.n	34011314 <HAL_DCMIPP_PIPE_SetConfig+0x98>
3401130e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34011312:	d304      	bcc.n	3401131e <HAL_DCMIPP_PIPE_SetConfig+0xa2>
34011314:	f44f 6181 	mov.w	r1, #1032	@ 0x408
34011318:	4825      	ldr	r0, [pc, #148]	@ (340113b0 <HAL_DCMIPP_PIPE_SetConfig+0x134>)
3401131a:	f00d ff21 	bl	3401f160 <assert_failed>
  if ((Pipe == DCMIPP_PIPE2) && ((pPipeConfig->PixelPackerFormat) > DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1))
3401131e:	2d02      	cmp	r5, #2
34011320:	d1d2      	bne.n	340112c8 <HAL_DCMIPP_PIPE_SetConfig+0x4c>
34011322:	68a3      	ldr	r3, [r4, #8]
34011324:	2b06      	cmp	r3, #6
34011326:	d9cf      	bls.n	340112c8 <HAL_DCMIPP_PIPE_SetConfig+0x4c>
34011328:	e7ad      	b.n	34011286 <HAL_DCMIPP_PIPE_SetConfig+0xa>
  else if (Pipe == DCMIPP_PIPE1)
3401132a:	2d01      	cmp	r5, #1
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
3401132c:	e9d4 4601 	ldrd	r4, r6, [r4, #4]
  else if (Pipe == DCMIPP_PIPE1)
34011330:	d126      	bne.n	34011380 <HAL_DCMIPP_PIPE_SetConfig+0x104>
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
34011332:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
34011336:	4d1f      	ldr	r5, [pc, #124]	@ (340113b4 <HAL_DCMIPP_PIPE_SetConfig+0x138>)
    MODIFY_REG(hdcmipp->Instance->P1FCTCR, DCMIPP_P1FCTCR_FRATE, pPipeConfig->FrameRate);
34011338:	f022 0203 	bic.w	r2, r2, #3
3401133c:	433a      	orrs	r2, r7
3401133e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
34011342:	f8d3 29c0 	ldr.w	r2, [r3, #2496]	@ 0x9c0
34011346:	f022 020f 	bic.w	r2, r2, #15
3401134a:	4332      	orrs	r2, r6
3401134c:	f8c3 29c0 	str.w	r2, [r3, #2496]	@ 0x9c0
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH,
34011350:	f8d3 29cc 	ldr.w	r2, [r3, #2508]	@ 0x9cc
34011354:	402a      	ands	r2, r5
34011356:	4322      	orrs	r2, r4
34011358:	f8c3 29cc 	str.w	r2, [r3, #2508]	@ 0x9cc
    if ((pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV422_2) ||
3401135c:	1ff2      	subs	r2, r6, #7
3401135e:	2a01      	cmp	r2, #1
34011360:	d806      	bhi.n	34011370 <HAL_DCMIPP_PIPE_SetConfig+0xf4>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
34011362:	f8d3 29dc 	ldr.w	r2, [r3, #2524]	@ 0x9dc
34011366:	402a      	ands	r2, r5
34011368:	4322      	orrs	r2, r4
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
3401136a:	f8c3 29dc 	str.w	r2, [r3, #2524]	@ 0x9dc
3401136e:	e7c0      	b.n	340112f2 <HAL_DCMIPP_PIPE_SetConfig+0x76>
    else if (pPipeConfig->PixelPackerFormat == DCMIPP_PIXEL_PACKER_FORMAT_YUV420_3)
34011370:	2e09      	cmp	r6, #9
34011372:	d1be      	bne.n	340112f2 <HAL_DCMIPP_PIPE_SetConfig+0x76>
      MODIFY_REG(hdcmipp->Instance->P1PPM1PR, DCMIPP_P1PPM1PR_PITCH,
34011374:	f8d3 29dc 	ldr.w	r2, [r3, #2524]	@ 0x9dc
34011378:	402a      	ands	r2, r5
3401137a:	ea42 0254 	orr.w	r2, r2, r4, lsr #1
3401137e:	e7f4      	b.n	3401136a <HAL_DCMIPP_PIPE_SetConfig+0xee>
    MODIFY_REG(hdcmipp->Instance->P2FCTCR, DCMIPP_P2FCTCR_FRATE, pPipeConfig->FrameRate);
34011380:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
34011384:	f022 0203 	bic.w	r2, r2, #3
34011388:	433a      	orrs	r2, r7
3401138a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, pPipeConfig->PixelPackerFormat);
3401138e:	f8d3 2dc0 	ldr.w	r2, [r3, #3520]	@ 0xdc0
34011392:	f022 020f 	bic.w	r2, r2, #15
34011396:	4332      	orrs	r2, r6
34011398:	f8c3 2dc0 	str.w	r2, [r3, #3520]	@ 0xdc0
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH,
3401139c:	f8d3 2dcc 	ldr.w	r2, [r3, #3532]	@ 0xdcc
340113a0:	f36f 020e 	bfc	r2, #0, #15
340113a4:	4322      	orrs	r2, r4
340113a6:	f8c3 2dcc 	str.w	r2, [r3, #3532]	@ 0xdcc
340113aa:	e7a2      	b.n	340112f2 <HAL_DCMIPP_PIPE_SetConfig+0x76>
340113ac:	58002000 	.word	0x58002000
340113b0:	3402b9b3 	.word	0x3402b9b3
340113b4:	ffff8000 	.word	0xffff8000

340113b8 <HAL_DCMIPP_CSI_PIPE_Start>:
{
340113b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340113bc:	2902      	cmp	r1, #2
{
340113be:	4604      	mov	r4, r0
340113c0:	460d      	mov	r5, r1
340113c2:	4616      	mov	r6, r2
340113c4:	461f      	mov	r7, r3
340113c6:	f8dd 8018 	ldr.w	r8, [sp, #24]
  assert_param(IS_DCMIPP_PIPE(Pipe));
340113ca:	d904      	bls.n	340113d6 <HAL_DCMIPP_CSI_PIPE_Start+0x1e>
340113cc:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
340113d0:	481a      	ldr	r0, [pc, #104]	@ (3401143c <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
340113d2:	f00d fec5 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_VCID(VirtualChannel));
340113d6:	2e03      	cmp	r6, #3
340113d8:	d904      	bls.n	340113e4 <HAL_DCMIPP_CSI_PIPE_Start+0x2c>
340113da:	f240 6111 	movw	r1, #1553	@ 0x611
340113de:	4817      	ldr	r0, [pc, #92]	@ (3401143c <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
340113e0:	f00d febe 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));
340113e4:	f038 0304 	bics.w	r3, r8, #4
340113e8:	d004      	beq.n	340113f4 <HAL_DCMIPP_CSI_PIPE_Start+0x3c>
340113ea:	f240 6112 	movw	r1, #1554	@ 0x612
340113ee:	4813      	ldr	r0, [pc, #76]	@ (3401143c <HAL_DCMIPP_CSI_PIPE_Start+0x84>)
340113f0:	f00d feb6 	bl	3401f160 <assert_failed>
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
340113f4:	b91c      	cbnz	r4, 340113fe <HAL_DCMIPP_CSI_PIPE_Start+0x46>
    return HAL_ERROR;
340113f6:	2601      	movs	r6, #1
}
340113f8:	4630      	mov	r0, r6
340113fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
340113fe:	073a      	lsls	r2, r7, #28
34011400:	d1f9      	bne.n	340113f6 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
34011402:	6823      	ldr	r3, [r4, #0]
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
34011404:	1962      	adds	r2, r4, r5
  mode = READ_BIT(hdcmipp->Instance->CMCR, DCMIPP_CMCR_INSEL);
34011406:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
  if ((hdcmipp->PipeState[Pipe] != HAL_DCMIPP_PIPE_STATE_READY) || (mode != DCMIPP_SERIAL_MODE))
3401140a:	7952      	ldrb	r2, [r2, #5]
3401140c:	2a01      	cmp	r2, #1
3401140e:	d1f2      	bne.n	340113f6 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
34011410:	07db      	lsls	r3, r3, #31
34011412:	d5f0      	bpl.n	340113f6 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  if (DCMIPP_CSI_SetVCConfig(hdcmipp, Pipe, VirtualChannel) != HAL_OK)
34011414:	4632      	mov	r2, r6
34011416:	4629      	mov	r1, r5
34011418:	4620      	mov	r0, r4
3401141a:	f7ff fc65 	bl	34010ce8 <DCMIPP_CSI_SetVCConfig>
3401141e:	4606      	mov	r6, r0
34011420:	2800      	cmp	r0, #0
34011422:	d1e8      	bne.n	340113f6 <HAL_DCMIPP_CSI_PIPE_Start+0x3e>
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
34011424:	4629      	mov	r1, r5
34011426:	4620      	mov	r0, r4
34011428:	4643      	mov	r3, r8
3401142a:	463a      	mov	r2, r7
3401142c:	f7ff fcd7 	bl	34010dde <DCMIPP_SetConfig>
  DCMIPP_EnableCapture(hdcmipp, Pipe);
34011430:	4629      	mov	r1, r5
34011432:	4620      	mov	r0, r4
34011434:	f7ff fcfe 	bl	34010e34 <DCMIPP_EnableCapture>
  return HAL_OK;
34011438:	e7de      	b.n	340113f8 <HAL_DCMIPP_CSI_PIPE_Start+0x40>
3401143a:	bf00      	nop
3401143c:	3402b9b3 	.word	0x3402b9b3

34011440 <HAL_DCMIPP_PIPE_LineEventCallback>:
__weak void HAL_DCMIPP_PIPE_LineEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34011440:	4770      	bx	lr

34011442 <HAL_DCMIPP_PIPE_LimitEventCallback>:
__weak void HAL_DCMIPP_PIPE_LimitEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34011442:	4770      	bx	lr

34011444 <HAL_DCMIPP_PIPE_ErrorCallback>:
__weak void HAL_DCMIPP_PIPE_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
34011444:	4770      	bx	lr

34011446 <HAL_DCMIPP_ErrorCallback>:
__weak void HAL_DCMIPP_ErrorCallback(DCMIPP_HandleTypeDef *hdcmipp)
34011446:	4770      	bx	lr

34011448 <HAL_DCMIPP_IRQHandler>:
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
34011448:	6803      	ldr	r3, [r0, #0]
{
3401144a:	b570      	push	{r4, r5, r6, lr}
  uint32_t cmsr2flags = READ_REG(hdcmipp->Instance->CMSR2);
3401144c:	f8d3 63f8 	ldr.w	r6, [r3, #1016]	@ 0x3f8
{
34011450:	4604      	mov	r4, r0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34011452:	0472      	lsls	r2, r6, #17
  uint32_t cmierflags = READ_REG(hdcmipp->Instance->CMIER);
34011454:	f8d3 53f0 	ldr.w	r5, [r3, #1008]	@ 0x3f0
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LIMIT) != 0U)
34011458:	d512      	bpl.n	34011480 <HAL_DCMIPP_IRQHandler+0x38>
    if ((cmierflags & DCMIPP_IT_PIPE0_LIMIT) != 0U)
3401145a:	0469      	lsls	r1, r5, #17
3401145c:	d510      	bpl.n	34011480 <HAL_DCMIPP_IRQHandler+0x38>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
3401145e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
34011462:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_LIMIT);
34011464:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
34011468:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_LIMIT;
3401146c:	6882      	ldr	r2, [r0, #8]
3401146e:	f042 0204 	orr.w	r2, r2, #4
34011472:	6082      	str	r2, [r0, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LIMIT);
34011474:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34011478:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LimitEventCallback(hdcmipp, DCMIPP_PIPE0);
3401147c:	f7ff ffe1 	bl	34011442 <HAL_DCMIPP_PIPE_LimitEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_VSYNC) != 0U)
34011480:	0572      	lsls	r2, r6, #21
34011482:	d50a      	bpl.n	3401149a <HAL_DCMIPP_IRQHandler+0x52>
    if ((cmierflags & DCMIPP_IT_PIPE0_VSYNC) != 0U)
34011484:	056b      	lsls	r3, r5, #21
34011486:	d508      	bpl.n	3401149a <HAL_DCMIPP_IRQHandler+0x52>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34011488:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3401148c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
3401148e:	2100      	movs	r1, #0
34011490:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_VSYNC);
34011492:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE0);
34011496:	f7f5 ff7f 	bl	34007398 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_FRAME) != 0U)
3401149a:	05b0      	lsls	r0, r6, #22
3401149c:	d516      	bpl.n	340114cc <HAL_DCMIPP_IRQHandler+0x84>
    if ((cmierflags & DCMIPP_IT_PIPE0_FRAME) != 0U)
3401149e:	05a9      	lsls	r1, r5, #22
340114a0:	d514      	bpl.n	340114cc <HAL_DCMIPP_IRQHandler+0x84>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340114a2:	6823      	ldr	r3, [r4, #0]
340114a4:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
340114a8:	0752      	lsls	r2, r2, #29
340114aa:	d507      	bpl.n	340114bc <HAL_DCMIPP_IRQHandler+0x74>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR);
340114ac:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340114b0:	f422 4206 	bic.w	r2, r2, #34304	@ 0x8600
340114b4:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_READY;
340114b8:	2201      	movs	r2, #1
340114ba:	7162      	strb	r2, [r4, #5]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340114bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
340114c0:	2100      	movs	r1, #0
340114c2:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_FRAME);
340114c4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE0);
340114c8:	f7f5 ff76 	bl	340073b8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_LINE) != 0U)
340114cc:	05f3      	lsls	r3, r6, #23
340114ce:	d50a      	bpl.n	340114e6 <HAL_DCMIPP_IRQHandler+0x9e>
    if ((cmierflags & DCMIPP_IT_PIPE0_LINE) != 0U)
340114d0:	05e8      	lsls	r0, r5, #23
340114d2:	d508      	bpl.n	340114e6 <HAL_DCMIPP_IRQHandler+0x9e>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
340114d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
340114d8:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
340114da:	2100      	movs	r1, #0
340114dc:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_LINE);
340114de:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE0);
340114e2:	f7ff ffad 	bl	34011440 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE0_OVR) != 0U)
340114e6:	0431      	lsls	r1, r6, #16
340114e8:	d516      	bpl.n	34011518 <HAL_DCMIPP_IRQHandler+0xd0>
    if ((cmierflags & DCMIPP_IT_PIPE0_OVR) != 0U)
340114ea:	042a      	lsls	r2, r5, #16
340114ec:	d514      	bpl.n	34011518 <HAL_DCMIPP_IRQHandler+0xd0>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
340114ee:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
340114f0:	2100      	movs	r1, #0
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
340114f2:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
340114f6:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_OVR);
340114f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
340114fc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE0_OVR;
34011500:	68a2      	ldr	r2, [r4, #8]
34011502:	f042 0208 	orr.w	r2, r2, #8
34011506:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE0_OVR);
34011508:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3401150c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[0] = HAL_DCMIPP_PIPE_STATE_ERROR;
34011510:	2304      	movs	r3, #4
34011512:	7163      	strb	r3, [r4, #5]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE0);
34011514:	f7ff ff96 	bl	34011444 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
34011518:	03f3      	lsls	r3, r6, #15
3401151a:	d50a      	bpl.n	34011532 <HAL_DCMIPP_IRQHandler+0xea>
    if ((cmierflags & DCMIPP_FLAG_PIPE1_LINE) != 0U)
3401151c:	03e8      	lsls	r0, r5, #15
3401151e:	d508      	bpl.n	34011532 <HAL_DCMIPP_IRQHandler+0xea>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
34011520:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34011524:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
34011526:	2101      	movs	r1, #1
34011528:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_LINE);
3401152a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE1);
3401152e:	f7ff ff87 	bl	34011440 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_VSYNC) != 0U)
34011532:	0371      	lsls	r1, r6, #13
34011534:	d50a      	bpl.n	3401154c <HAL_DCMIPP_IRQHandler+0x104>
    if ((cmierflags & DCMIPP_IT_PIPE1_VSYNC) != 0U)
34011536:	036a      	lsls	r2, r5, #13
34011538:	d508      	bpl.n	3401154c <HAL_DCMIPP_IRQHandler+0x104>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
3401153a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
3401153e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34011540:	2101      	movs	r1, #1
34011542:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_VSYNC);
34011544:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE1);
34011548:	f7f5 ff26 	bl	34007398 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_FRAME) != 0U)
3401154c:	03b3      	lsls	r3, r6, #14
3401154e:	d516      	bpl.n	3401157e <HAL_DCMIPP_IRQHandler+0x136>
    if ((cmierflags & DCMIPP_IT_PIPE1_FRAME) != 0U)
34011550:	03a8      	lsls	r0, r5, #14
34011552:	d514      	bpl.n	3401157e <HAL_DCMIPP_IRQHandler+0x136>
      if ((hdcmipp->Instance->P1FCTCR & DCMIPP_P1FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011554:	6823      	ldr	r3, [r4, #0]
34011556:	f8d3 2900 	ldr.w	r2, [r3, #2304]	@ 0x900
3401155a:	0751      	lsls	r1, r2, #29
3401155c:	d507      	bpl.n	3401156e <HAL_DCMIPP_IRQHandler+0x126>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_FRAME | DCMIPP_IT_PIPE1_VSYNC | DCMIPP_IT_PIPE1_OVR);
3401155e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34011562:	f422 0206 	bic.w	r2, r2, #8781824	@ 0x860000
34011566:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_READY;
3401156a:	2201      	movs	r2, #1
3401156c:	71a2      	strb	r2, [r4, #6]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
3401156e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
34011572:	2101      	movs	r1, #1
34011574:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_FRAME);
34011576:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE1);
3401157a:	f7f5 ff1d 	bl	340073b8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE1_OVR) != 0U)
3401157e:	0232      	lsls	r2, r6, #8
34011580:	d516      	bpl.n	340115b0 <HAL_DCMIPP_IRQHandler+0x168>
    if ((cmierflags & DCMIPP_IT_PIPE1_OVR) != 0U)
34011582:	022b      	lsls	r3, r5, #8
34011584:	d514      	bpl.n	340115b0 <HAL_DCMIPP_IRQHandler+0x168>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34011586:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
34011588:	2101      	movs	r1, #1
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
3401158a:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
3401158e:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE1_OVR);
34011590:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
34011594:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE1_OVR;
34011598:	68a2      	ldr	r2, [r4, #8]
3401159a:	f042 0210 	orr.w	r2, r2, #16
3401159e:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE1_OVR);
340115a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
340115a4:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[1] = HAL_DCMIPP_PIPE_STATE_ERROR;
340115a8:	2304      	movs	r3, #4
340115aa:	71a3      	strb	r3, [r4, #6]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE1);
340115ac:	f7ff ff4a 	bl	34011444 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_LINE) != 0U)
340115b0:	01f0      	lsls	r0, r6, #7
340115b2:	d50a      	bpl.n	340115ca <HAL_DCMIPP_IRQHandler+0x182>
    if ((cmierflags & DCMIPP_IT_PIPE2_LINE) != 0U)
340115b4:	01e9      	lsls	r1, r5, #7
340115b6:	d508      	bpl.n	340115ca <HAL_DCMIPP_IRQHandler+0x182>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
340115b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
340115bc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
340115be:	2102      	movs	r1, #2
340115c0:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_LINE);
340115c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_LineEventCallback(hdcmipp, DCMIPP_PIPE2);
340115c6:	f7ff ff3b 	bl	34011440 <HAL_DCMIPP_PIPE_LineEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_VSYNC) != 0U)
340115ca:	0172      	lsls	r2, r6, #5
340115cc:	d50a      	bpl.n	340115e4 <HAL_DCMIPP_IRQHandler+0x19c>
    if ((cmierflags & DCMIPP_IT_PIPE2_VSYNC) != 0U)
340115ce:	016b      	lsls	r3, r5, #5
340115d0:	d508      	bpl.n	340115e4 <HAL_DCMIPP_IRQHandler+0x19c>
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
340115d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
340115d6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
340115d8:	2102      	movs	r1, #2
340115da:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_VSYNC);
340115dc:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_VsyncEventCallback(hdcmipp, DCMIPP_PIPE2);
340115e0:	f7f5 feda 	bl	34007398 <HAL_DCMIPP_PIPE_VsyncEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_FRAME) != 0U)
340115e4:	01b0      	lsls	r0, r6, #6
340115e6:	d516      	bpl.n	34011616 <HAL_DCMIPP_IRQHandler+0x1ce>
    if ((cmierflags & DCMIPP_IT_PIPE2_FRAME) != 0U)
340115e8:	01a9      	lsls	r1, r5, #6
340115ea:	d514      	bpl.n	34011616 <HAL_DCMIPP_IRQHandler+0x1ce>
      if ((hdcmipp->Instance->P2FCTCR & DCMIPP_P2FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340115ec:	6823      	ldr	r3, [r4, #0]
340115ee:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
340115f2:	0752      	lsls	r2, r2, #29
340115f4:	d507      	bpl.n	34011606 <HAL_DCMIPP_IRQHandler+0x1be>
        __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_FRAME | DCMIPP_IT_PIPE2_VSYNC | DCMIPP_IT_PIPE2_OVR);
340115f6:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
340115fa:	f022 4206 	bic.w	r2, r2, #2248146944	@ 0x86000000
340115fe:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
        hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_READY;
34011602:	2201      	movs	r2, #1
34011604:	71e2      	strb	r2, [r4, #7]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
34011606:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
3401160a:	2102      	movs	r1, #2
3401160c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_FRAME);
3401160e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      HAL_DCMIPP_PIPE_FrameEventCallback(hdcmipp, DCMIPP_PIPE2);
34011612:	f7f5 fed1 	bl	340073b8 <HAL_DCMIPP_PIPE_FrameEventCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PIPE2_OVR) != 0U)
34011616:	2e00      	cmp	r6, #0
34011618:	da16      	bge.n	34011648 <HAL_DCMIPP_IRQHandler+0x200>
    if ((cmierflags & DCMIPP_IT_PIPE2_OVR) != 0U)
3401161a:	2d00      	cmp	r5, #0
3401161c:	da14      	bge.n	34011648 <HAL_DCMIPP_IRQHandler+0x200>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
3401161e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34011620:	2102      	movs	r1, #2
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34011622:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34011626:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PIPE2_OVR);
34011628:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
3401162c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PIPE2_OVR;
34011630:	68a2      	ldr	r2, [r4, #8]
34011632:	f042 0220 	orr.w	r2, r2, #32
34011636:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PIPE2_OVR);
34011638:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3401163c:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->PipeState[2] = HAL_DCMIPP_PIPE_STATE_ERROR;
34011640:	2304      	movs	r3, #4
34011642:	71e3      	strb	r3, [r4, #7]
      HAL_DCMIPP_PIPE_ErrorCallback(hdcmipp, DCMIPP_PIPE2);
34011644:	f7ff fefe 	bl	34011444 <HAL_DCMIPP_PIPE_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_PARALLEL_SYNC_ERROR) != 0U)
34011648:	0670      	lsls	r0, r6, #25
3401164a:	d514      	bpl.n	34011676 <HAL_DCMIPP_IRQHandler+0x22e>
    if ((cmierflags & DCMIPP_IT_PARALLEL_SYNC_ERROR) != 0U)
3401164c:	0669      	lsls	r1, r5, #25
3401164e:	d512      	bpl.n	34011676 <HAL_DCMIPP_IRQHandler+0x22e>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34011650:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011652:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
34011654:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34011658:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
3401165c:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_PARALLEL_SYNC;
34011660:	68a2      	ldr	r2, [r4, #8]
34011662:	f042 0202 	orr.w	r2, r2, #2
34011666:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_PARALLEL_SYNC_ERROR);
34011668:	2240      	movs	r2, #64	@ 0x40
3401166a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3401166e:	2304      	movs	r3, #4
34011670:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011672:	f7ff fee8 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((cmsr2flags & DCMIPP_FLAG_AXI_TRANSFER_ERROR) != 0U)
34011676:	06b2      	lsls	r2, r6, #26
34011678:	d514      	bpl.n	340116a4 <HAL_DCMIPP_IRQHandler+0x25c>
    if ((cmierflags & DCMIPP_IT_AXI_TRANSFER_ERROR) != 0U)
3401167a:	06ab      	lsls	r3, r5, #26
3401167c:	d512      	bpl.n	340116a4 <HAL_DCMIPP_IRQHandler+0x25c>
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
3401167e:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011680:	4620      	mov	r0, r4
      __HAL_DCMIPP_DISABLE_IT(hdcmipp, DCMIPP_IT_AXI_TRANSFER_ERROR);
34011682:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
34011686:	f022 0220 	bic.w	r2, r2, #32
3401168a:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
      hdcmipp->ErrorCode |= HAL_DCMIPP_ERROR_AXI_TRANSFER;
3401168e:	68a2      	ldr	r2, [r4, #8]
34011690:	f042 0201 	orr.w	r2, r2, #1
34011694:	60a2      	str	r2, [r4, #8]
      __HAL_DCMIPP_CLEAR_FLAG(hdcmipp, DCMIPP_FLAG_AXI_TRANSFER_ERROR);
34011696:	2220      	movs	r2, #32
34011698:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
3401169c:	2304      	movs	r3, #4
3401169e:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
340116a0:	f7ff fed1 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
}
340116a4:	bd70      	pop	{r4, r5, r6, pc}

340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>:
__weak void HAL_DCMIPP_CSI_LineErrorCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t DataLane)
340116a6:	4770      	bx	lr

340116a8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>:
__weak void HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
340116a8:	4770      	bx	lr

340116aa <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>:
__weak void HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(DCMIPP_HandleTypeDef *hdcmipp)
340116aa:	4770      	bx	lr

340116ac <HAL_DCMIPP_CSI_EndOfFrameEventCallback>:
__weak void HAL_DCMIPP_CSI_EndOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
340116ac:	4770      	bx	lr

340116ae <HAL_DCMIPP_CSI_StartOfFrameEventCallback>:
__weak void HAL_DCMIPP_CSI_StartOfFrameEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t VirtualChannel)
340116ae:	4770      	bx	lr

340116b0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>:
__weak void HAL_DCMIPP_CSI_TimerCounterEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Timer)
340116b0:	4770      	bx	lr

340116b2 <HAL_DCMIPP_CSI_LineByteEventCallback>:
__weak void HAL_DCMIPP_CSI_LineByteEventCallback(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Counter)
340116b2:	4770      	bx	lr

340116b4 <HAL_DCMIPP_CSI_IRQHandler>:
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340116b4:	4bb5      	ldr	r3, [pc, #724]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
{
340116b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sr0flags = READ_REG(csi_instance->SR0);
340116ba:	f8d3 6090 	ldr.w	r6, [r3, #144]	@ 0x90
{
340116be:	4604      	mov	r4, r0
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340116c0:	02b2      	lsls	r2, r6, #10
  uint32_t sr1flags = READ_REG(csi_instance->SR1);
340116c2:	f8d3 8094 	ldr.w	r8, [r3, #148]	@ 0x94
  uint32_t ier0_flags = READ_REG(csi_instance->IER0);
340116c6:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  uint32_t ier1_flags = READ_REG(csi_instance->IER1);
340116ca:	f8d3 7084 	ldr.w	r7, [r3, #132]	@ 0x84
  if ((sr0flags & DCMIPP_CSI_FLAG_CCFIFO) != 0U)
340116ce:	d50d      	bpl.n	340116ec <HAL_DCMIPP_CSI_IRQHandler+0x38>
    if ((ier0_flags & DCMIPP_CSI_IT_CCFIFO) != 0U)
340116d0:	02a9      	lsls	r1, r5, #10
340116d2:	d50b      	bpl.n	340116ec <HAL_DCMIPP_CSI_IRQHandler+0x38>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CCFIFO);
340116d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
340116d8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
340116dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CCFIFO);
340116e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
340116e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback(hdcmipp);
340116e8:	f7ff ffde 	bl	340116a8 <HAL_DCMIPP_CSI_ClockChangerFifoFullEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB3) != 0U)
340116ec:	0732      	lsls	r2, r6, #28
340116ee:	d515      	bpl.n	3401171c <HAL_DCMIPP_CSI_IRQHandler+0x68>
    if ((ier0_flags & DCMIPP_CSI_IT_LB3) != 0U)
340116f0:	072b      	lsls	r3, r5, #28
340116f2:	d513      	bpl.n	3401171c <HAL_DCMIPP_CSI_IRQHandler+0x68>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340116f4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
340116f6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340116f8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
340116fc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340116fe:	f013 0f04 	tst.w	r3, #4
34011702:	4ba2      	ldr	r3, [pc, #648]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB3);
34011704:	bf1e      	ittt	ne
34011706:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401170a:	f022 0208 	bicne.w	r2, r2, #8
3401170e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB3);
34011712:	2208      	movs	r2, #8
34011714:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER3);
34011718:	f7ff ffcb 	bl	340116b2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB2) != 0U)
3401171c:	0770      	lsls	r0, r6, #29
3401171e:	d515      	bpl.n	3401174c <HAL_DCMIPP_CSI_IRQHandler+0x98>
    if ((ier0_flags & DCMIPP_CSI_IT_LB2) != 0U)
34011720:	0769      	lsls	r1, r5, #29
34011722:	d513      	bpl.n	3401174c <HAL_DCMIPP_CSI_IRQHandler+0x98>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011724:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34011726:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011728:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
3401172c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401172e:	f013 0f04 	tst.w	r3, #4
34011732:	4b96      	ldr	r3, [pc, #600]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB2);
34011734:	bf1e      	ittt	ne
34011736:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401173a:	f022 0204 	bicne.w	r2, r2, #4
3401173e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB2);
34011742:	2204      	movs	r2, #4
34011744:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER2);
34011748:	f7ff ffb3 	bl	340116b2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB1) != 0U)
3401174c:	07b2      	lsls	r2, r6, #30
3401174e:	d515      	bpl.n	3401177c <HAL_DCMIPP_CSI_IRQHandler+0xc8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB1) != 0U)
34011750:	07ab      	lsls	r3, r5, #30
34011752:	d513      	bpl.n	3401177c <HAL_DCMIPP_CSI_IRQHandler+0xc8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011754:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34011756:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011758:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
3401175c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401175e:	f013 0f04 	tst.w	r3, #4
34011762:	4b8a      	ldr	r3, [pc, #552]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB1);
34011764:	bf1e      	ittt	ne
34011766:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401176a:	f022 0202 	bicne.w	r2, r2, #2
3401176e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB1);
34011772:	2202      	movs	r2, #2
34011774:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER1);
34011778:	f7ff ff9b 	bl	340116b2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_LB0) != 0U)
3401177c:	07f0      	lsls	r0, r6, #31
3401177e:	d515      	bpl.n	340117ac <HAL_DCMIPP_CSI_IRQHandler+0xf8>
    if ((ier0_flags & DCMIPP_CSI_IT_LB0) != 0U)
34011780:	07e9      	lsls	r1, r5, #31
34011782:	d513      	bpl.n	340117ac <HAL_DCMIPP_CSI_IRQHandler+0xf8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011784:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
34011786:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011788:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
3401178c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401178e:	f013 0f04 	tst.w	r3, #4
34011792:	4b7e      	ldr	r3, [pc, #504]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_LB0);
34011794:	bf1e      	ittt	ne
34011796:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401179a:	f022 0201 	bicne.w	r2, r2, #1
3401179e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_LB0);
340117a2:	2201      	movs	r2, #1
340117a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_LineByteEventCallback(hdcmipp, DCMIPP_CSI_COUNTER0);
340117a8:	f7ff ff83 	bl	340116b2 <HAL_DCMIPP_CSI_LineByteEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF3) != 0U)
340117ac:	0432      	lsls	r2, r6, #16
340117ae:	d516      	bpl.n	340117de <HAL_DCMIPP_CSI_IRQHandler+0x12a>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF3) != 0U)
340117b0:	042b      	lsls	r3, r5, #16
340117b2:	d514      	bpl.n	340117de <HAL_DCMIPP_CSI_IRQHandler+0x12a>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340117b4:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340117b6:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340117b8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340117bc:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340117be:	f013 0f04 	tst.w	r3, #4
340117c2:	4b72      	ldr	r3, [pc, #456]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF3);
340117c4:	bf1e      	ittt	ne
340117c6:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340117ca:	f422 4200 	bicne.w	r2, r2, #32768	@ 0x8000
340117ce:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF3);
340117d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340117d6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340117da:	f7ff ff67 	bl	340116ac <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF2) != 0U)
340117de:	0470      	lsls	r0, r6, #17
340117e0:	d516      	bpl.n	34011810 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF2) != 0U)
340117e2:	0469      	lsls	r1, r5, #17
340117e4:	d514      	bpl.n	34011810 <HAL_DCMIPP_CSI_IRQHandler+0x15c>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340117e6:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340117e8:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340117ea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340117ee:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340117f0:	f013 0f04 	tst.w	r3, #4
340117f4:	4b65      	ldr	r3, [pc, #404]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF2);
340117f6:	bf1e      	ittt	ne
340117f8:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340117fc:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
34011800:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF2);
34011804:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34011808:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
3401180c:	f7ff ff4e 	bl	340116ac <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF1) != 0U)
34011810:	04b2      	lsls	r2, r6, #18
34011812:	d516      	bpl.n	34011842 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF1) != 0U)
34011814:	04ab      	lsls	r3, r5, #18
34011816:	d514      	bpl.n	34011842 <HAL_DCMIPP_CSI_IRQHandler+0x18e>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011818:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3401181a:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401181c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34011820:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011822:	f013 0f04 	tst.w	r3, #4
34011826:	4b59      	ldr	r3, [pc, #356]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF1);
34011828:	bf1e      	ittt	ne
3401182a:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401182e:	f422 5200 	bicne.w	r2, r2, #8192	@ 0x2000
34011832:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF1);
34011836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3401183a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
3401183e:	f7ff ff35 	bl	340116ac <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_EOF0) != 0U)
34011842:	04f0      	lsls	r0, r6, #19
34011844:	d516      	bpl.n	34011874 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
    if ((ier0_flags & DCMIPP_CSI_IT_EOF0) != 0U)
34011846:	04e9      	lsls	r1, r5, #19
34011848:	d514      	bpl.n	34011874 <HAL_DCMIPP_CSI_IRQHandler+0x1c0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401184a:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
3401184c:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401184e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34011852:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011854:	f013 0f04 	tst.w	r3, #4
34011858:	4b4c      	ldr	r3, [pc, #304]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EOF0);
3401185a:	bf1e      	ittt	ne
3401185c:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34011860:	f422 5280 	bicne.w	r2, r2, #4096	@ 0x1000
34011864:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_EOF0);
34011868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3401186c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_EndOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34011870:	f7ff ff1c 	bl	340116ac <HAL_DCMIPP_CSI_EndOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF3) != 0U)
34011874:	0532      	lsls	r2, r6, #20
34011876:	d516      	bpl.n	340118a6 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF3) != 0U)
34011878:	052b      	lsls	r3, r5, #20
3401187a:	d514      	bpl.n	340118a6 <HAL_DCMIPP_CSI_IRQHandler+0x1f2>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401187c:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
3401187e:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011880:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
34011884:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011886:	f013 0f04 	tst.w	r3, #4
3401188a:	4b40      	ldr	r3, [pc, #256]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF3);
3401188c:	bf1e      	ittt	ne
3401188e:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34011892:	f422 6200 	bicne.w	r2, r2, #2048	@ 0x800
34011896:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF3);
3401189a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401189e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL3);
340118a2:	f7ff ff04 	bl	340116ae <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF2) != 0U)
340118a6:	0570      	lsls	r0, r6, #21
340118a8:	d516      	bpl.n	340118d8 <HAL_DCMIPP_CSI_IRQHandler+0x224>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF2) != 0U)
340118aa:	0569      	lsls	r1, r5, #21
340118ac:	d514      	bpl.n	340118d8 <HAL_DCMIPP_CSI_IRQHandler+0x224>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340118ae:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340118b0:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340118b2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340118b6:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340118b8:	f013 0f04 	tst.w	r3, #4
340118bc:	4b33      	ldr	r3, [pc, #204]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF2);
340118be:	bf1e      	ittt	ne
340118c0:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340118c4:	f422 6280 	bicne.w	r2, r2, #1024	@ 0x400
340118c8:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF2);
340118cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
340118d0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL2);
340118d4:	f7ff feeb 	bl	340116ae <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF1) != 0U)
340118d8:	05b2      	lsls	r2, r6, #22
340118da:	d516      	bpl.n	3401190a <HAL_DCMIPP_CSI_IRQHandler+0x256>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF1) != 0U)
340118dc:	05ab      	lsls	r3, r5, #22
340118de:	d514      	bpl.n	3401190a <HAL_DCMIPP_CSI_IRQHandler+0x256>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340118e0:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340118e2:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340118e4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
340118e8:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340118ea:	f013 0f04 	tst.w	r3, #4
340118ee:	4b27      	ldr	r3, [pc, #156]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF1);
340118f0:	bf1e      	ittt	ne
340118f2:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340118f6:	f422 7200 	bicne.w	r2, r2, #512	@ 0x200
340118fa:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF1);
340118fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
34011902:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL1);
34011906:	f7ff fed2 	bl	340116ae <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SOF0) != 0U)
3401190a:	05f0      	lsls	r0, r6, #23
3401190c:	d516      	bpl.n	3401193c <HAL_DCMIPP_CSI_IRQHandler+0x288>
    if ((ier0_flags & DCMIPP_CSI_IT_SOF0) != 0U)
3401190e:	05e9      	lsls	r1, r5, #23
34011910:	d514      	bpl.n	3401193c <HAL_DCMIPP_CSI_IRQHandler+0x288>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011912:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34011914:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011916:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
3401191a:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401191c:	f013 0f04 	tst.w	r3, #4
34011920:	4b1a      	ldr	r3, [pc, #104]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SOF0);
34011922:	bf1e      	ittt	ne
34011924:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
34011928:	f422 7280 	bicne.w	r2, r2, #256	@ 0x100
3401192c:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SOF0);
34011930:	f44f 7280 	mov.w	r2, #256	@ 0x100
34011934:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_StartOfFrameEventCallback(hdcmipp, DCMIPP_VIRTUAL_CHANNEL0);
34011938:	f7ff feb9 	bl	340116ae <HAL_DCMIPP_CSI_StartOfFrameEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM3) != 0U)
3401193c:	0632      	lsls	r2, r6, #24
3401193e:	d515      	bpl.n	3401196c <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM3) != 0U)
34011940:	062b      	lsls	r3, r5, #24
34011942:	d513      	bpl.n	3401196c <HAL_DCMIPP_CSI_IRQHandler+0x2b8>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011944:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34011946:	2103      	movs	r1, #3
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011948:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
3401194c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401194e:	f013 0f04 	tst.w	r3, #4
34011952:	4b0e      	ldr	r3, [pc, #56]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM3);
34011954:	bf1e      	ittt	ne
34011956:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401195a:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
3401195e:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM3);
34011962:	2280      	movs	r2, #128	@ 0x80
34011964:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER3);
34011968:	f7ff fea2 	bl	340116b0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM2) != 0U)
3401196c:	0670      	lsls	r0, r6, #25
3401196e:	d519      	bpl.n	340119a4 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM2) != 0U)
34011970:	0669      	lsls	r1, r5, #25
34011972:	d517      	bpl.n	340119a4 <HAL_DCMIPP_CSI_IRQHandler+0x2f0>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011974:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
34011976:	2102      	movs	r1, #2
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
34011978:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
3401197c:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
3401197e:	f013 0f04 	tst.w	r3, #4
34011982:	4b02      	ldr	r3, [pc, #8]	@ (3401198c <HAL_DCMIPP_CSI_IRQHandler+0x2d8>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM2);
34011984:	bf18      	it	ne
34011986:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
3401198a:	e001      	b.n	34011990 <HAL_DCMIPP_CSI_IRQHandler+0x2dc>
3401198c:	58006000 	.word	0x58006000
34011990:	bf1c      	itt	ne
34011992:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
34011996:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM2);
3401199a:	2240      	movs	r2, #64	@ 0x40
3401199c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER2);
340119a0:	f7ff fe86 	bl	340116b0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM1) != 0U)
340119a4:	06b2      	lsls	r2, r6, #26
340119a6:	d515      	bpl.n	340119d4 <HAL_DCMIPP_CSI_IRQHandler+0x320>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM1) != 0U)
340119a8:	06ab      	lsls	r3, r5, #26
340119aa:	d513      	bpl.n	340119d4 <HAL_DCMIPP_CSI_IRQHandler+0x320>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340119ac:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
340119ae:	2101      	movs	r1, #1
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340119b0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
340119b4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340119b6:	f013 0f04 	tst.w	r3, #4
340119ba:	4bb9      	ldr	r3, [pc, #740]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM1);
340119bc:	bf1e      	ittt	ne
340119be:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340119c2:	f022 0220 	bicne.w	r2, r2, #32
340119c6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM1);
340119ca:	2220      	movs	r2, #32
340119cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER1);
340119d0:	f7ff fe6e 	bl	340116b0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_TIM0) != 0U)
340119d4:	06f0      	lsls	r0, r6, #27
340119d6:	d515      	bpl.n	34011a04 <HAL_DCMIPP_CSI_IRQHandler+0x350>
    if ((ier0_flags & DCMIPP_CSI_IT_TIM0) != 0U)
340119d8:	06e9      	lsls	r1, r5, #27
340119da:	d513      	bpl.n	34011a04 <HAL_DCMIPP_CSI_IRQHandler+0x350>
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340119dc:	6823      	ldr	r3, [r4, #0]
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340119de:	2100      	movs	r1, #0
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340119e0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
340119e4:	4620      	mov	r0, r4
      if ((hdcmipp->Instance->P0FCTCR & DCMIPP_P0FCTCR_CPTMODE) == DCMIPP_MODE_SNAPSHOT)
340119e6:	f013 0f04 	tst.w	r3, #4
340119ea:	4bad      	ldr	r3, [pc, #692]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
        __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_TIM0);
340119ec:	bf1e      	ittt	ne
340119ee:	f8d3 2080 	ldrne.w	r2, [r3, #128]	@ 0x80
340119f2:	f022 0210 	bicne.w	r2, r2, #16
340119f6:	f8c3 2080 	strne.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_TIM0);
340119fa:	2210      	movs	r2, #16
340119fc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_TimerCounterEventCallback(hdcmipp, DCMIPP_CSI_TIMER0);
34011a00:	f7ff fe56 	bl	340116b0 <HAL_DCMIPP_CSI_TimerCounterEventCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SYNCERR) != 0U)
34011a04:	0072      	lsls	r2, r6, #1
34011a06:	d513      	bpl.n	34011a30 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
    if ((ier0_flags & DCMIPP_CSI_IT_SYNCERR) != 0U)
34011a08:	006b      	lsls	r3, r5, #1
34011a0a:	d511      	bpl.n	34011a30 <HAL_DCMIPP_CSI_IRQHandler+0x37c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34011a0c:	4ba4      	ldr	r3, [pc, #656]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a0e:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SYNCERR);
34011a10:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011a14:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
34011a18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SYNCERR);
34011a1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
34011a20:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SYNC;
34011a24:	68a3      	ldr	r3, [r4, #8]
34011a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34011a2a:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a2c:	f7ff fd0b 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_WDERR) != 0U)
34011a30:	00b0      	lsls	r0, r6, #2
34011a32:	d513      	bpl.n	34011a5c <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
    if ((ier0_flags & DCMIPP_CSI_IT_WDERR) != 0U)
34011a34:	00a9      	lsls	r1, r5, #2
34011a36:	d511      	bpl.n	34011a5c <HAL_DCMIPP_CSI_IRQHandler+0x3a8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34011a38:	4b99      	ldr	r3, [pc, #612]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a3a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_WDERR);
34011a3c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011a40:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
34011a44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_WDERR);
34011a48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
34011a4c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_WDG;
34011a50:	68a3      	ldr	r3, [r4, #8]
34011a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34011a56:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a58:	f7ff fcf5 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKTERR) != 0U)
34011a5c:	00f2      	lsls	r2, r6, #3
34011a5e:	d513      	bpl.n	34011a88 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKTERR) != 0U)
34011a60:	00eb      	lsls	r3, r5, #3
34011a62:	d511      	bpl.n	34011a88 <HAL_DCMIPP_CSI_IRQHandler+0x3d4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34011a64:	4b8e      	ldr	r3, [pc, #568]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a66:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKTERR);
34011a68:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011a6c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
34011a70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKTERR);
34011a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34011a78:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SPKT;
34011a7c:	68a3      	ldr	r3, [r4, #8]
34011a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
34011a82:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a84:	f7ff fcdf 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_IDERR) != 0U)
34011a88:	0130      	lsls	r0, r6, #4
34011a8a:	d513      	bpl.n	34011ab4 <HAL_DCMIPP_CSI_IRQHandler+0x400>
    if ((ier0_flags & DCMIPP_CSI_IT_IDERR) != 0U)
34011a8c:	0129      	lsls	r1, r5, #4
34011a8e:	d511      	bpl.n	34011ab4 <HAL_DCMIPP_CSI_IRQHandler+0x400>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34011a90:	4b83      	ldr	r3, [pc, #524]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011a92:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_IDERR);
34011a94:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011a98:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
34011a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_IDERR);
34011aa0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
34011aa4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DATA_ID;
34011aa8:	68a3      	ldr	r3, [r4, #8]
34011aaa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
34011aae:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011ab0:	f7ff fcc9 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CECCERR) != 0U)
34011ab4:	0172      	lsls	r2, r6, #5
34011ab6:	d513      	bpl.n	34011ae0 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
    if ((ier0_flags & DCMIPP_CSI_IT_CECCERR) != 0U)
34011ab8:	016b      	lsls	r3, r5, #5
34011aba:	d511      	bpl.n	34011ae0 <HAL_DCMIPP_CSI_IRQHandler+0x42c>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34011abc:	4b78      	ldr	r3, [pc, #480]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011abe:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CECCERR);
34011ac0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011ac4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
34011ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CECCERR);
34011acc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
34011ad0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CECC;
34011ad4:	68a3      	ldr	r3, [r4, #8]
34011ad6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
34011ada:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011adc:	f7ff fcb3 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_ECCERR) != 0U)
34011ae0:	01b0      	lsls	r0, r6, #6
34011ae2:	d513      	bpl.n	34011b0c <HAL_DCMIPP_CSI_IRQHandler+0x458>
    if ((ier0_flags & DCMIPP_CSI_IT_ECCERR) != 0U)
34011ae4:	01a9      	lsls	r1, r5, #6
34011ae6:	d511      	bpl.n	34011b0c <HAL_DCMIPP_CSI_IRQHandler+0x458>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34011ae8:	4b6d      	ldr	r3, [pc, #436]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011aea:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECCERR);
34011aec:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011af0:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
34011af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECCERR);
34011af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
34011afc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_ECC;
34011b00:	68a3      	ldr	r3, [r4, #8]
34011b02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
34011b06:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011b08:	f7ff fc9d 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_CRCERR) != 0U)
34011b0c:	01f2      	lsls	r2, r6, #7
34011b0e:	d513      	bpl.n	34011b38 <HAL_DCMIPP_CSI_IRQHandler+0x484>
    if ((ier0_flags & DCMIPP_CSI_IT_CRCERR) != 0U)
34011b10:	01eb      	lsls	r3, r5, #7
34011b12:	d511      	bpl.n	34011b38 <HAL_DCMIPP_CSI_IRQHandler+0x484>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34011b14:	4b62      	ldr	r3, [pc, #392]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011b16:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_CRCERR);
34011b18:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011b1c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
34011b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_CRCERR);
34011b24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34011b28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_CRC;
34011b2c:	68a3      	ldr	r3, [r4, #8]
34011b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
34011b32:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_ErrorCallback(hdcmipp);
34011b34:	f7ff fc87 	bl	34011446 <HAL_DCMIPP_ErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL0) != 0U)
34011b38:	f018 0f01 	tst.w	r8, #1
34011b3c:	d014      	beq.n	34011b68 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL0) != 0U)
34011b3e:	07f8      	lsls	r0, r7, #31
34011b40:	d512      	bpl.n	34011b68 <HAL_DCMIPP_CSI_IRQHandler+0x4b4>
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34011b42:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34011b44:	4b56      	ldr	r3, [pc, #344]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011b46:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL0);
34011b48:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011b4c:	f022 0201 	bic.w	r2, r2, #1
34011b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL0);
34011b54:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34011b58:	68a3      	ldr	r3, [r4, #8]
34011b5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34011b5e:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34011b60:	2304      	movs	r3, #4
34011b62:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011b64:	f7ff fd9f 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL0) != 0U)
34011b68:	f018 0f02 	tst.w	r8, #2
34011b6c:	d015      	beq.n	34011b9a <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL0) != 0U)
34011b6e:	07b9      	lsls	r1, r7, #30
34011b70:	d513      	bpl.n	34011b9a <HAL_DCMIPP_CSI_IRQHandler+0x4e6>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34011b72:	4b4b      	ldr	r3, [pc, #300]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011b74:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34011b76:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011b7a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL0);
34011b7c:	f022 0202 	bic.w	r2, r2, #2
34011b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL0);
34011b84:	2202      	movs	r2, #2
34011b86:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34011b8a:	68a3      	ldr	r3, [r4, #8]
34011b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34011b90:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34011b92:	2304      	movs	r3, #4
34011b94:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011b96:	f7ff fd86 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL0) != 0U)
34011b9a:	f018 0f04 	tst.w	r8, #4
34011b9e:	d013      	beq.n	34011bc8 <HAL_DCMIPP_CSI_IRQHandler+0x514>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL0) != 0U)
34011ba0:	077a      	lsls	r2, r7, #29
34011ba2:	d511      	bpl.n	34011bc8 <HAL_DCMIPP_CSI_IRQHandler+0x514>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34011ba4:	4b3e      	ldr	r3, [pc, #248]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011ba6:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34011ba8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011bac:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL0);
34011bae:	f022 0204 	bic.w	r2, r2, #4
34011bb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL0);
34011bb6:	2204      	movs	r2, #4
34011bb8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34011bbc:	68a3      	ldr	r3, [r4, #8]
34011bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34011bc2:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011bc4:	f7ff fd6f 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL0) != 0U)
34011bc8:	f018 0f08 	tst.w	r8, #8
34011bcc:	d013      	beq.n	34011bf6 <HAL_DCMIPP_CSI_IRQHandler+0x542>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL0) != 0U)
34011bce:	073b      	lsls	r3, r7, #28
34011bd0:	d511      	bpl.n	34011bf6 <HAL_DCMIPP_CSI_IRQHandler+0x542>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34011bd2:	4b33      	ldr	r3, [pc, #204]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011bd4:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34011bd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011bda:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL0);
34011bdc:	f022 0208 	bic.w	r2, r2, #8
34011be0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL0);
34011be4:	2208      	movs	r2, #8
34011be6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34011bea:	68a3      	ldr	r3, [r4, #8]
34011bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34011bf0:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011bf2:	f7ff fd58 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ECTRLDL0) != 0U)
34011bf6:	f018 0f10 	tst.w	r8, #16
34011bfa:	d013      	beq.n	34011c24 <HAL_DCMIPP_CSI_IRQHandler+0x570>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL0) != 0U)
34011bfc:	06f8      	lsls	r0, r7, #27
34011bfe:	d511      	bpl.n	34011c24 <HAL_DCMIPP_CSI_IRQHandler+0x570>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34011c00:	4b27      	ldr	r3, [pc, #156]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011c02:	2101      	movs	r1, #1
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34011c04:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011c08:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL0);
34011c0a:	f022 0210 	bic.w	r2, r2, #16
34011c0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ECTRLDL0);
34011c12:	2210      	movs	r2, #16
34011c14:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34011c18:	68a3      	ldr	r3, [r4, #8]
34011c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34011c1e:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE0);
34011c20:	f7ff fd41 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTDL1) != 0U)
34011c24:	f418 7f80 	tst.w	r8, #256	@ 0x100
34011c28:	d016      	beq.n	34011c58 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTDL1) != 0U)
34011c2a:	05f9      	lsls	r1, r7, #23
34011c2c:	d514      	bpl.n	34011c58 <HAL_DCMIPP_CSI_IRQHandler+0x5a4>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34011c2e:	4b1c      	ldr	r3, [pc, #112]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c30:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34011c32:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c36:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTDL1);
34011c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34011c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTDL1);
34011c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
34011c44:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT;
34011c48:	68a3      	ldr	r3, [r4, #8]
34011c4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
34011c4e:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34011c50:	2304      	movs	r3, #4
34011c52:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c54:	f7ff fd27 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESOTSYNCDL1) != 0U)
34011c58:	f418 7f00 	tst.w	r8, #512	@ 0x200
34011c5c:	d016      	beq.n	34011c8c <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
    if ((ier1_flags & DCMIPP_CSI_IT_ESOTSYNCDL1) != 0U)
34011c5e:	05ba      	lsls	r2, r7, #22
34011c60:	d514      	bpl.n	34011c8c <HAL_DCMIPP_CSI_IRQHandler+0x5d8>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34011c62:	4b0f      	ldr	r3, [pc, #60]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c64:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34011c66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c6a:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESOTSYNCDL1);
34011c6c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
34011c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESOTSYNCDL1);
34011c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
34011c78:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_SOT_SYNC;
34011c7c:	68a3      	ldr	r3, [r4, #8]
34011c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
34011c82:	60a3      	str	r3, [r4, #8]
      hdcmipp->State = HAL_DCMIPP_STATE_ERROR;
34011c84:	2304      	movs	r3, #4
34011c86:	7123      	strb	r3, [r4, #4]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c88:	f7ff fd0d 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_EESCDL1) != 0U)
34011c8c:	f418 6f80 	tst.w	r8, #1024	@ 0x400
34011c90:	d017      	beq.n	34011cc2 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
    if ((ier1_flags & DCMIPP_CSI_IT_EESCDL1) != 0U)
34011c92:	057b      	lsls	r3, r7, #21
34011c94:	d515      	bpl.n	34011cc2 <HAL_DCMIPP_CSI_IRQHandler+0x60e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34011c96:	4b02      	ldr	r3, [pc, #8]	@ (34011ca0 <HAL_DCMIPP_CSI_IRQHandler+0x5ec>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011c98:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34011c9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011c9e:	e001      	b.n	34011ca4 <HAL_DCMIPP_CSI_IRQHandler+0x5f0>
34011ca0:	58006000 	.word	0x58006000
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011ca4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_EESCDL1);
34011ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
34011caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_EESCDL1);
34011cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
34011cb2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_ESCAPE;
34011cb6:	68a3      	ldr	r3, [r4, #8]
34011cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34011cbc:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011cbe:	f7ff fcf2 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_FLAG_ESYNCESCDL1) != 0U)
34011cc2:	f418 6f00 	tst.w	r8, #2048	@ 0x800
34011cc6:	d014      	beq.n	34011cf2 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
    if ((ier1_flags & DCMIPP_CSI_IT_ESYNCESCDL1) != 0U)
34011cc8:	0538      	lsls	r0, r7, #20
34011cca:	d512      	bpl.n	34011cf2 <HAL_DCMIPP_CSI_IRQHandler+0x63e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34011ccc:	4b1f      	ldr	r3, [pc, #124]	@ (34011d4c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011cce:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34011cd0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011cd4:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ESYNCESCDL1);
34011cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34011cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_FLAG_ESYNCESCDL1);
34011cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34011ce2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_LP_SYNC;
34011ce6:	68a3      	ldr	r3, [r4, #8]
34011ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34011cec:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011cee:	f7ff fcda 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr1flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34011cf2:	f418 5f80 	tst.w	r8, #4096	@ 0x1000
34011cf6:	d014      	beq.n	34011d22 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
    if ((ier1_flags & DCMIPP_CSI_IT_ECTRLDL1) != 0U)
34011cf8:	04f9      	lsls	r1, r7, #19
34011cfa:	d512      	bpl.n	34011d22 <HAL_DCMIPP_CSI_IRQHandler+0x66e>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34011cfc:	4b13      	ldr	r3, [pc, #76]	@ (34011d4c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011cfe:	2102      	movs	r1, #2
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34011d00:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011d04:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34011d06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34011d0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_DPHY_FLAG(csi_instance, DCMIPP_CSI_IT_ECTRLDL1);
34011d0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34011d12:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      hdcmipp->ErrorCode |= HAL_DCMIPP_CSI_ERROR_DPHY_CTRL;
34011d16:	68a3      	ldr	r3, [r4, #8]
34011d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34011d1c:	60a3      	str	r3, [r4, #8]
      HAL_DCMIPP_CSI_LineErrorCallback(hdcmipp, DCMIPP_CSI_DATA_LANE1);
34011d1e:	f7ff fcc2 	bl	340116a6 <HAL_DCMIPP_CSI_LineErrorCallback>
  if ((sr0flags & DCMIPP_CSI_FLAG_SPKT) != 0U)
34011d22:	03f2      	lsls	r2, r6, #15
34011d24:	d50f      	bpl.n	34011d46 <HAL_DCMIPP_CSI_IRQHandler+0x692>
    if ((ier0_flags & DCMIPP_CSI_IT_SPKT) != 0U)
34011d26:	03eb      	lsls	r3, r5, #15
34011d28:	d50d      	bpl.n	34011d46 <HAL_DCMIPP_CSI_IRQHandler+0x692>
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34011d2a:	4b08      	ldr	r3, [pc, #32]	@ (34011d4c <HAL_DCMIPP_CSI_IRQHandler+0x698>)
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34011d2c:	4620      	mov	r0, r4
      __HAL_DCMIPP_CSI_DISABLE_IT(csi_instance, DCMIPP_CSI_IT_SPKT);
34011d2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34011d32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34011d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      __HAL_DCMIPP_CSI_CLEAR_FLAG(csi_instance, DCMIPP_CSI_FLAG_SPKT);
34011d3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34011d3e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
      HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback(hdcmipp);
34011d42:	f7ff fcb2 	bl	340116aa <HAL_DCMIPP_CSI_ShortPacketDetectionEventCallback>
}
34011d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34011d4a:	bf00      	nop
34011d4c:	58006000 	.word	0x58006000

34011d50 <HAL_DCMIPP_PIPE_SetCropConfig>:
{
34011d50:	b570      	push	{r4, r5, r6, lr}
34011d52:	460e      	mov	r6, r1
34011d54:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pCropConfig == NULL))
34011d56:	4605      	mov	r5, r0
34011d58:	b908      	cbnz	r0, 34011d5e <HAL_DCMIPP_PIPE_SetCropConfig+0xe>
    return HAL_ERROR;
34011d5a:	2001      	movs	r0, #1
}
34011d5c:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pCropConfig == NULL))
34011d5e:	2a00      	cmp	r2, #0
34011d60:	d0fb      	beq.n	34011d5a <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011d62:	2902      	cmp	r1, #2
34011d64:	d904      	bls.n	34011d70 <HAL_DCMIPP_PIPE_SetCropConfig+0x20>
34011d66:	f640 61ef 	movw	r1, #3823	@ 0xeef
34011d6a:	484a      	ldr	r0, [pc, #296]	@ (34011e94 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34011d6c:	f00d f9f8 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_AREA(pCropConfig->PipeArea));
34011d70:	6923      	ldr	r3, [r4, #16]
34011d72:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
34011d76:	d004      	beq.n	34011d82 <HAL_DCMIPP_PIPE_SetCropConfig+0x32>
34011d78:	f44f 616f 	mov.w	r1, #3824	@ 0xef0
34011d7c:	4845      	ldr	r0, [pc, #276]	@ (34011e94 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34011d7e:	f00d f9ef 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_HSTART(pCropConfig->HStart));
34011d82:	6863      	ldr	r3, [r4, #4]
34011d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011d88:	d304      	bcc.n	34011d94 <HAL_DCMIPP_PIPE_SetCropConfig+0x44>
34011d8a:	f640 61f1 	movw	r1, #3825	@ 0xef1
34011d8e:	4841      	ldr	r0, [pc, #260]	@ (34011e94 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34011d90:	f00d f9e6 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_HSIZE(pCropConfig->HSize));
34011d94:	f640 72fe 	movw	r2, #4094	@ 0xffe
34011d98:	68e3      	ldr	r3, [r4, #12]
34011d9a:	3b01      	subs	r3, #1
34011d9c:	4293      	cmp	r3, r2
34011d9e:	d904      	bls.n	34011daa <HAL_DCMIPP_PIPE_SetCropConfig+0x5a>
34011da0:	f640 61f2 	movw	r1, #3826	@ 0xef2
34011da4:	483b      	ldr	r0, [pc, #236]	@ (34011e94 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34011da6:	f00d f9db 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_VSIZE(pCropConfig->VSize));
34011daa:	f640 72fe 	movw	r2, #4094	@ 0xffe
34011dae:	68a3      	ldr	r3, [r4, #8]
34011db0:	3b01      	subs	r3, #1
34011db2:	4293      	cmp	r3, r2
34011db4:	d904      	bls.n	34011dc0 <HAL_DCMIPP_PIPE_SetCropConfig+0x70>
34011db6:	f640 61f3 	movw	r1, #3827	@ 0xef3
34011dba:	4836      	ldr	r0, [pc, #216]	@ (34011e94 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34011dbc:	f00d f9d0 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_CROP_VSTART(pCropConfig->VStart));
34011dc0:	6823      	ldr	r3, [r4, #0]
34011dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34011dc6:	d304      	bcc.n	34011dd2 <HAL_DCMIPP_PIPE_SetCropConfig+0x82>
34011dc8:	f640 61f4 	movw	r1, #3828	@ 0xef4
34011dcc:	4831      	ldr	r0, [pc, #196]	@ (34011e94 <HAL_DCMIPP_PIPE_SetCropConfig+0x144>)
34011dce:	f00d f9c7 	bl	3401f160 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011dd2:	792b      	ldrb	r3, [r5, #4]
34011dd4:	2b02      	cmp	r3, #2
34011dd6:	d1c0      	bne.n	34011d5a <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
    if (Pipe == DCMIPP_PIPE0)
34011dd8:	bb3e      	cbnz	r6, 34011e2a <HAL_DCMIPP_PIPE_SetCropConfig+0xda>
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34011dda:	682a      	ldr	r2, [r5, #0]
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34011ddc:	4b2e      	ldr	r3, [pc, #184]	@ (34011e98 <HAL_DCMIPP_PIPE_SetCropConfig+0x148>)
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34011dde:	f8d2 1104 	ldr.w	r1, [r2, #260]	@ 0x104
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34011de2:	400b      	ands	r3, r1
34011de4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34011de8:	d0b7      	beq.n	34011d5a <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
        MODIFY_REG(hdcmipp->Instance->P0SCSTR, DCMIPP_P0SCSTR_HSTART | DCMIPP_P0SCSTR_VSTART,
34011dea:	e9d4 0300 	ldrd	r0, r3, [r4]
34011dee:	f8d2 1504 	ldr.w	r1, [r2, #1284]	@ 0x504
34011df2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011df6:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011dfa:	430b      	orrs	r3, r1
34011dfc:	f8c2 3504 	str.w	r3, [r2, #1284]	@ 0x504
        MODIFY_REG(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_HSIZE | DCMIPP_P0SCSZR_VSIZE | DCMIPP_P0SCSZR_POSNEG,
34011e00:	f8d2 1508 	ldr.w	r1, [r2, #1288]	@ 0x508
34011e04:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
34011e08:	f021 419f 	bic.w	r1, r1, #1333788672	@ 0x4f800000
34011e0c:	4303      	orrs	r3, r0
34011e0e:	f421 01fe 	bic.w	r1, r1, #8323072	@ 0x7f0000
34011e12:	68a0      	ldr	r0, [r4, #8]
34011e14:	f421 617f 	bic.w	r1, r1, #4080	@ 0xff0
34011e18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011e1c:	f021 010f 	bic.w	r1, r1, #15
34011e20:	430b      	orrs	r3, r1
34011e22:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  return HAL_OK;
34011e26:	2000      	movs	r0, #0
34011e28:	e798      	b.n	34011d5c <HAL_DCMIPP_PIPE_SetCropConfig+0xc>
    else if (Pipe == DCMIPP_PIPE1)
34011e2a:	2e01      	cmp	r6, #1
34011e2c:	d117      	bne.n	34011e5e <HAL_DCMIPP_PIPE_SetCropConfig+0x10e>
      MODIFY_REG(hdcmipp->Instance->P1CRSTR, DCMIPP_P1CRSTR_HSTART | DCMIPP_P1CRSTR_VSTART,
34011e2e:	e9d4 0300 	ldrd	r0, r3, [r4]
34011e32:	682a      	ldr	r2, [r5, #0]
34011e34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011e38:	f8d2 1904 	ldr.w	r1, [r2, #2308]	@ 0x904
34011e3c:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011e40:	430b      	orrs	r3, r1
34011e42:	f8c2 3904 	str.w	r3, [r2, #2308]	@ 0x904
      MODIFY_REG(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_HSIZE | DCMIPP_P1CRSZR_VSIZE,
34011e46:	f8d2 1908 	ldr.w	r1, [r2, #2312]	@ 0x908
34011e4a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34011e4e:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011e52:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011e56:	430b      	orrs	r3, r1
34011e58:	f8c2 3908 	str.w	r3, [r2, #2312]	@ 0x908
34011e5c:	e7e3      	b.n	34011e26 <HAL_DCMIPP_PIPE_SetCropConfig+0xd6>
    else if (Pipe == DCMIPP_PIPE2)
34011e5e:	2e02      	cmp	r6, #2
34011e60:	f47f af7b 	bne.w	34011d5a <HAL_DCMIPP_PIPE_SetCropConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2CRSTR, DCMIPP_P2CRSTR_HSTART | DCMIPP_P2CRSTR_VSTART,
34011e64:	e9d4 0300 	ldrd	r0, r3, [r4]
34011e68:	682a      	ldr	r2, [r5, #0]
34011e6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011e6e:	f8d2 1d04 	ldr.w	r1, [r2, #3332]	@ 0xd04
34011e72:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011e76:	430b      	orrs	r3, r1
34011e78:	f8c2 3d04 	str.w	r3, [r2, #3332]	@ 0xd04
      MODIFY_REG(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_HSIZE | DCMIPP_P2CRSZR_VSIZE,
34011e7c:	f8d2 1d08 	ldr.w	r1, [r2, #3336]	@ 0xd08
34011e80:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34011e84:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34011e88:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34011e8c:	430b      	orrs	r3, r1
34011e8e:	f8c2 3d08 	str.w	r3, [r2, #3336]	@ 0xd08
34011e92:	e7c8      	b.n	34011e26 <HAL_DCMIPP_PIPE_SetCropConfig+0xd6>
34011e94:	3402b9b3 	.word	0x3402b9b3
34011e98:	00ff4000 	.word	0x00ff4000

34011e9c <HAL_DCMIPP_PIPE_EnableCrop>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011e9c:	2902      	cmp	r1, #2
{
34011e9e:	b538      	push	{r3, r4, r5, lr}
34011ea0:	4605      	mov	r5, r0
34011ea2:	460c      	mov	r4, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011ea4:	d904      	bls.n	34011eb0 <HAL_DCMIPP_PIPE_EnableCrop+0x14>
34011ea6:	f640 713f 	movw	r1, #3903	@ 0xf3f
34011eaa:	481a      	ldr	r0, [pc, #104]	@ (34011f14 <HAL_DCMIPP_PIPE_EnableCrop+0x78>)
34011eac:	f00d f958 	bl	3401f160 <assert_failed>
  if (hdcmipp == NULL)
34011eb0:	b36d      	cbz	r5, 34011f0e <HAL_DCMIPP_PIPE_EnableCrop+0x72>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011eb2:	792b      	ldrb	r3, [r5, #4]
34011eb4:	2b02      	cmp	r3, #2
34011eb6:	d12a      	bne.n	34011f0e <HAL_DCMIPP_PIPE_EnableCrop+0x72>
    if (Pipe == DCMIPP_PIPE0)
34011eb8:	b97c      	cbnz	r4, 34011eda <HAL_DCMIPP_PIPE_EnableCrop+0x3e>
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34011eba:	682b      	ldr	r3, [r5, #0]
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34011ebc:	4a16      	ldr	r2, [pc, #88]	@ (34011f18 <HAL_DCMIPP_PIPE_EnableCrop+0x7c>)
      tmp = READ_REG(hdcmipp->Instance->PRCR);
34011ebe:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
      if (((tmp & DCMIPP_PRCR_ENABLE) == DCMIPP_PRCR_ENABLE) && ((tmp & DCMIPP_PRCR_FORMAT) == DCMIPP_FORMAT_BYTE))
34011ec2:	400a      	ands	r2, r1
34011ec4:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
34011ec8:	d021      	beq.n	34011f0e <HAL_DCMIPP_PIPE_EnableCrop+0x72>
        SET_BIT(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_ENABLE);
34011eca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
34011ece:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34011ed2:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  return HAL_OK;
34011ed6:	2000      	movs	r0, #0
}
34011ed8:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE1)
34011eda:	2c01      	cmp	r4, #1
34011edc:	d10d      	bne.n	34011efa <HAL_DCMIPP_PIPE_EnableCrop+0x5e>
      if (hdcmipp->Instance->P1SRCR != DCMIPP_P1SRCR_CROPEN)
34011ede:	682b      	ldr	r3, [r5, #0]
    return HAL_ERROR;
34011ee0:	4620      	mov	r0, r4
      if (hdcmipp->Instance->P1SRCR != DCMIPP_P1SRCR_CROPEN)
34011ee2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	@ 0x820
34011ee6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
34011eea:	d0f5      	beq.n	34011ed8 <HAL_DCMIPP_PIPE_EnableCrop+0x3c>
        SET_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34011eec:	f8d3 2908 	ldr.w	r2, [r3, #2312]	@ 0x908
34011ef0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
34011ef4:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
34011ef8:	e7ed      	b.n	34011ed6 <HAL_DCMIPP_PIPE_EnableCrop+0x3a>
    else if (Pipe == DCMIPP_PIPE2)
34011efa:	2c02      	cmp	r4, #2
34011efc:	d107      	bne.n	34011f0e <HAL_DCMIPP_PIPE_EnableCrop+0x72>
      SET_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34011efe:	682a      	ldr	r2, [r5, #0]
34011f00:	f8d2 3d08 	ldr.w	r3, [r2, #3336]	@ 0xd08
34011f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34011f08:	f8c2 3d08 	str.w	r3, [r2, #3336]	@ 0xd08
34011f0c:	e7e3      	b.n	34011ed6 <HAL_DCMIPP_PIPE_EnableCrop+0x3a>
    return HAL_ERROR;
34011f0e:	2001      	movs	r0, #1
34011f10:	e7e2      	b.n	34011ed8 <HAL_DCMIPP_PIPE_EnableCrop+0x3c>
34011f12:	bf00      	nop
34011f14:	3402b9b3 	.word	0x3402b9b3
34011f18:	00ff4000 	.word	0x00ff4000

34011f1c <HAL_DCMIPP_PIPE_DisableCrop>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011f1c:	2902      	cmp	r1, #2
{
34011f1e:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011f20:	d906      	bls.n	34011f30 <HAL_DCMIPP_PIPE_DisableCrop+0x14>
34011f22:	f640 717e 	movw	r1, #3966	@ 0xf7e
34011f26:	4810      	ldr	r0, [pc, #64]	@ (34011f68 <HAL_DCMIPP_PIPE_DisableCrop+0x4c>)
34011f28:	f00d f91a 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34011f2c:	2001      	movs	r0, #1
34011f2e:	e00a      	b.n	34011f46 <HAL_DCMIPP_PIPE_DisableCrop+0x2a>
  if (hdcmipp == NULL)
34011f30:	2800      	cmp	r0, #0
34011f32:	d0fb      	beq.n	34011f2c <HAL_DCMIPP_PIPE_DisableCrop+0x10>
  if (Pipe == DCMIPP_PIPE0)
34011f34:	6803      	ldr	r3, [r0, #0]
34011f36:	b939      	cbnz	r1, 34011f48 <HAL_DCMIPP_PIPE_DisableCrop+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P0SCSZR, DCMIPP_P0SCSZR_ENABLE);
34011f38:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
34011f3c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
34011f40:	f8c3 2508 	str.w	r2, [r3, #1288]	@ 0x508
  return HAL_OK;
34011f44:	2000      	movs	r0, #0
}
34011f46:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE1)
34011f48:	2901      	cmp	r1, #1
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34011f4a:	bf0b      	itete	eq
34011f4c:	f8d3 2908 	ldreq.w	r2, [r3, #2312]	@ 0x908
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34011f50:	f8d3 2d08 	ldrne.w	r2, [r3, #3336]	@ 0xd08
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34011f54:	f022 4200 	biceq.w	r2, r2, #2147483648	@ 0x80000000
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34011f58:	f022 4200 	bicne.w	r2, r2, #2147483648	@ 0x80000000
    CLEAR_BIT(hdcmipp->Instance->P1CRSZR, DCMIPP_P1CRSZR_ENABLE);
34011f5c:	bf0c      	ite	eq
34011f5e:	f8c3 2908 	streq.w	r2, [r3, #2312]	@ 0x908
    CLEAR_BIT(hdcmipp->Instance->P2CRSZR, DCMIPP_P2CRSZR_ENABLE);
34011f62:	f8c3 2d08 	strne.w	r2, [r3, #3336]	@ 0xd08
34011f66:	e7ed      	b.n	34011f44 <HAL_DCMIPP_PIPE_DisableCrop+0x28>
34011f68:	3402b9b3 	.word	0x3402b9b3

34011f6c <HAL_DCMIPP_PIPE_SetISPDecimationConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011f6c:	2902      	cmp	r1, #2
{
34011f6e:	b570      	push	{r4, r5, r6, lr}
34011f70:	4605      	mov	r5, r0
34011f72:	460e      	mov	r6, r1
34011f74:	4614      	mov	r4, r2
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011f76:	d904      	bls.n	34011f82 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x16>
34011f78:	f241 0152 	movw	r1, #4178	@ 0x1052
34011f7c:	4818      	ldr	r0, [pc, #96]	@ (34011fe0 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34011f7e:	f00d f8ef 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34011f82:	6822      	ldr	r2, [r4, #0]
34011f84:	b152      	cbz	r2, 34011f9c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x30>
34011f86:	2a18      	cmp	r2, #24
34011f88:	d803      	bhi.n	34011f92 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x26>
34011f8a:	4b16      	ldr	r3, [pc, #88]	@ (34011fe4 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x78>)
34011f8c:	40d3      	lsrs	r3, r2
34011f8e:	07da      	lsls	r2, r3, #31
34011f90:	d404      	bmi.n	34011f9c <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x30>
34011f92:	f241 0153 	movw	r1, #4179	@ 0x1053
34011f96:	4812      	ldr	r0, [pc, #72]	@ (34011fe0 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34011f98:	f00d f8e2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
34011f9c:	6862      	ldr	r2, [r4, #4]
34011f9e:	b152      	cbz	r2, 34011fb6 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x4a>
34011fa0:	2a06      	cmp	r2, #6
34011fa2:	d803      	bhi.n	34011fac <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x40>
34011fa4:	2354      	movs	r3, #84	@ 0x54
34011fa6:	40d3      	lsrs	r3, r2
34011fa8:	07db      	lsls	r3, r3, #31
34011faa:	d404      	bmi.n	34011fb6 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x4a>
34011fac:	f241 0154 	movw	r1, #4180	@ 0x1054
34011fb0:	480b      	ldr	r0, [pc, #44]	@ (34011fe0 <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x74>)
34011fb2:	f00d f8d5 	bl	3401f160 <assert_failed>
  if ((hdcmipp == NULL) || (pDecConfig == NULL))
34011fb6:	b18d      	cbz	r5, 34011fdc <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34011fb8:	792b      	ldrb	r3, [r5, #4]
34011fba:	2b02      	cmp	r3, #2
34011fbc:	d10e      	bne.n	34011fdc <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
    if (Pipe == DCMIPP_PIPE1)
34011fbe:	2e01      	cmp	r6, #1
34011fc0:	d10c      	bne.n	34011fdc <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x70>
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34011fc2:	e9d4 3000 	ldrd	r3, r0, [r4]
34011fc6:	4303      	orrs	r3, r0
  return HAL_OK;
34011fc8:	2000      	movs	r0, #0
      MODIFY_REG(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_VDEC | DCMIPP_P1DECR_HDEC,
34011fca:	6829      	ldr	r1, [r5, #0]
34011fcc:	f8d1 2830 	ldr.w	r2, [r1, #2096]	@ 0x830
34011fd0:	f022 021e 	bic.w	r2, r2, #30
34011fd4:	4313      	orrs	r3, r2
34011fd6:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830
}
34011fda:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
34011fdc:	2001      	movs	r0, #1
34011fde:	e7fc      	b.n	34011fda <HAL_DCMIPP_PIPE_SetISPDecimationConfig+0x6e>
34011fe0:	3402b9b3 	.word	0x3402b9b3
34011fe4:	01010100 	.word	0x01010100

34011fe8 <HAL_DCMIPP_PIPE_EnableISPDecimation>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011fe8:	2902      	cmp	r1, #2
{
34011fea:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34011fec:	d906      	bls.n	34011ffc <HAL_DCMIPP_PIPE_EnableISPDecimation+0x14>
34011fee:	f241 017a 	movw	r1, #4218	@ 0x107a
34011ff2:	4809      	ldr	r0, [pc, #36]	@ (34012018 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x30>)
34011ff4:	f00d f8b4 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34011ff8:	2001      	movs	r0, #1
}
34011ffa:	bd08      	pop	{r3, pc}
  if (hdcmipp == NULL)
34011ffc:	2800      	cmp	r0, #0
34011ffe:	d0fb      	beq.n	34011ff8 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x10>
  if (Pipe == DCMIPP_PIPE1)
34012000:	2901      	cmp	r1, #1
34012002:	d1f9      	bne.n	34011ff8 <HAL_DCMIPP_PIPE_EnableISPDecimation+0x10>
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34012004:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012006:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1DECR, DCMIPP_P1DECR_ENABLE);
34012008:	f8d2 3830 	ldr.w	r3, [r2, #2096]	@ 0x830
3401200c:	f043 0301 	orr.w	r3, r3, #1
34012010:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830
  return HAL_OK;
34012014:	e7f1      	b.n	34011ffa <HAL_DCMIPP_PIPE_EnableISPDecimation+0x12>
34012016:	bf00      	nop
34012018:	3402b9b3 	.word	0x3402b9b3

3401201c <HAL_DCMIPP_PIPE_SetDecimationConfig>:
{
3401201c:	b570      	push	{r4, r5, r6, lr}
3401201e:	460e      	mov	r6, r1
34012020:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34012022:	4605      	mov	r5, r0
34012024:	b908      	cbnz	r0, 3401202a <HAL_DCMIPP_PIPE_SetDecimationConfig+0xe>
    return HAL_ERROR;
34012026:	2001      	movs	r0, #1
}
34012028:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401202a:	2902      	cmp	r1, #2
3401202c:	d904      	bls.n	34012038 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x1c>
3401202e:	f241 01bc 	movw	r1, #4284	@ 0x10bc
34012032:	481e      	ldr	r0, [pc, #120]	@ (340120ac <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34012034:	f00d f894 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_VRATIO(pDecConfig->VRatio));
34012038:	6822      	ldr	r2, [r4, #0]
3401203a:	b152      	cbz	r2, 34012052 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x36>
3401203c:	2a18      	cmp	r2, #24
3401203e:	d803      	bhi.n	34012048 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x2c>
34012040:	4b1b      	ldr	r3, [pc, #108]	@ (340120b0 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x94>)
34012042:	40d3      	lsrs	r3, r2
34012044:	07da      	lsls	r2, r3, #31
34012046:	d404      	bmi.n	34012052 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x36>
34012048:	f241 01bd 	movw	r1, #4285	@ 0x10bd
3401204c:	4817      	ldr	r0, [pc, #92]	@ (340120ac <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
3401204e:	f00d f887 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_HRATIO(pDecConfig->HRatio));
34012052:	6862      	ldr	r2, [r4, #4]
34012054:	b152      	cbz	r2, 3401206c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x50>
34012056:	2a06      	cmp	r2, #6
34012058:	d803      	bhi.n	34012062 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x46>
3401205a:	2354      	movs	r3, #84	@ 0x54
3401205c:	40d3      	lsrs	r3, r2
3401205e:	07db      	lsls	r3, r3, #31
34012060:	d404      	bmi.n	3401206c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x50>
34012062:	f241 01be 	movw	r1, #4286	@ 0x10be
34012066:	4811      	ldr	r0, [pc, #68]	@ (340120ac <HAL_DCMIPP_PIPE_SetDecimationConfig+0x90>)
34012068:	f00d f87a 	bl	3401f160 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
3401206c:	792b      	ldrb	r3, [r5, #4]
3401206e:	2b02      	cmp	r3, #2
34012070:	d1d9      	bne.n	34012026 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xa>
    if (Pipe == DCMIPP_PIPE1)
34012072:	2e01      	cmp	r6, #1
34012074:	d10c      	bne.n	34012090 <HAL_DCMIPP_PIPE_SetDecimationConfig+0x74>
      MODIFY_REG(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_VDEC | DCMIPP_P1DCCR_HDEC,
34012076:	e9d4 3000 	ldrd	r3, r0, [r4]
3401207a:	6829      	ldr	r1, [r5, #0]
3401207c:	4303      	orrs	r3, r0
3401207e:	f8d1 290c 	ldr.w	r2, [r1, #2316]	@ 0x90c
34012082:	f022 021e 	bic.w	r2, r2, #30
34012086:	4313      	orrs	r3, r2
34012088:	f8c1 390c 	str.w	r3, [r1, #2316]	@ 0x90c
  return HAL_OK;
3401208c:	2000      	movs	r0, #0
3401208e:	e7cb      	b.n	34012028 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xc>
    else if (Pipe == DCMIPP_PIPE2)
34012090:	2e02      	cmp	r6, #2
34012092:	d1c8      	bne.n	34012026 <HAL_DCMIPP_PIPE_SetDecimationConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_VDEC | DCMIPP_P2DCCR_HDEC,
34012094:	e9d4 3000 	ldrd	r3, r0, [r4]
34012098:	6829      	ldr	r1, [r5, #0]
3401209a:	4303      	orrs	r3, r0
3401209c:	f8d1 2d0c 	ldr.w	r2, [r1, #3340]	@ 0xd0c
340120a0:	f022 021e 	bic.w	r2, r2, #30
340120a4:	4313      	orrs	r3, r2
340120a6:	f8c1 3d0c 	str.w	r3, [r1, #3340]	@ 0xd0c
340120aa:	e7ef      	b.n	3401208c <HAL_DCMIPP_PIPE_SetDecimationConfig+0x70>
340120ac:	3402b9b3 	.word	0x3402b9b3
340120b0:	01010100 	.word	0x01010100

340120b4 <HAL_DCMIPP_PIPE_EnableDecimation>:
{
340120b4:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340120b6:	b130      	cbz	r0, 340120c6 <HAL_DCMIPP_PIPE_EnableDecimation+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340120b8:	2902      	cmp	r1, #2
340120ba:	d906      	bls.n	340120ca <HAL_DCMIPP_PIPE_EnableDecimation+0x16>
340120bc:	f241 01e9 	movw	r1, #4329	@ 0x10e9
340120c0:	480c      	ldr	r0, [pc, #48]	@ (340120f4 <HAL_DCMIPP_PIPE_EnableDecimation+0x40>)
340120c2:	f00d f84d 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
340120c6:	2001      	movs	r0, #1
340120c8:	e009      	b.n	340120de <HAL_DCMIPP_PIPE_EnableDecimation+0x2a>
  if (Pipe == DCMIPP_PIPE1)
340120ca:	2901      	cmp	r1, #1
340120cc:	d108      	bne.n	340120e0 <HAL_DCMIPP_PIPE_EnableDecimation+0x2c>
    SET_BIT(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_ENABLE);
340120ce:	6802      	ldr	r2, [r0, #0]
340120d0:	f8d2 390c 	ldr.w	r3, [r2, #2316]	@ 0x90c
340120d4:	f043 0301 	orr.w	r3, r3, #1
340120d8:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  return HAL_OK;
340120dc:	2000      	movs	r0, #0
}
340120de:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
340120e0:	2902      	cmp	r1, #2
340120e2:	d1f0      	bne.n	340120c6 <HAL_DCMIPP_PIPE_EnableDecimation+0x12>
    SET_BIT(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_ENABLE);
340120e4:	6802      	ldr	r2, [r0, #0]
340120e6:	f8d2 3d0c 	ldr.w	r3, [r2, #3340]	@ 0xd0c
340120ea:	f043 0301 	orr.w	r3, r3, #1
340120ee:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
340120f2:	e7f3      	b.n	340120dc <HAL_DCMIPP_PIPE_EnableDecimation+0x28>
340120f4:	3402b9b3 	.word	0x3402b9b3

340120f8 <HAL_DCMIPP_PIPE_DisableDecimation>:
{
340120f8:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340120fa:	b130      	cbz	r0, 3401210a <HAL_DCMIPP_PIPE_DisableDecimation+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340120fc:	2902      	cmp	r1, #2
340120fe:	d906      	bls.n	3401210e <HAL_DCMIPP_PIPE_DisableDecimation+0x16>
34012100:	f241 110a 	movw	r1, #4362	@ 0x110a
34012104:	480c      	ldr	r0, [pc, #48]	@ (34012138 <HAL_DCMIPP_PIPE_DisableDecimation+0x40>)
34012106:	f00d f82b 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
3401210a:	2001      	movs	r0, #1
3401210c:	e009      	b.n	34012122 <HAL_DCMIPP_PIPE_DisableDecimation+0x2a>
  if (Pipe == DCMIPP_PIPE1)
3401210e:	2901      	cmp	r1, #1
34012110:	d108      	bne.n	34012124 <HAL_DCMIPP_PIPE_DisableDecimation+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P1DCCR, DCMIPP_P1DCCR_ENABLE);
34012112:	6802      	ldr	r2, [r0, #0]
34012114:	f8d2 390c 	ldr.w	r3, [r2, #2316]	@ 0x90c
34012118:	f023 0301 	bic.w	r3, r3, #1
3401211c:	f8c2 390c 	str.w	r3, [r2, #2316]	@ 0x90c
  return HAL_OK;
34012120:	2000      	movs	r0, #0
}
34012122:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34012124:	2902      	cmp	r1, #2
34012126:	d1f0      	bne.n	3401210a <HAL_DCMIPP_PIPE_DisableDecimation+0x12>
    CLEAR_BIT(hdcmipp->Instance->P2DCCR, DCMIPP_P2DCCR_ENABLE);
34012128:	6802      	ldr	r2, [r0, #0]
3401212a:	f8d2 3d0c 	ldr.w	r3, [r2, #3340]	@ 0xd0c
3401212e:	f023 0301 	bic.w	r3, r3, #1
34012132:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
34012136:	e7f3      	b.n	34012120 <HAL_DCMIPP_PIPE_DisableDecimation+0x28>
34012138:	3402b9b3 	.word	0x3402b9b3

3401213c <HAL_DCMIPP_PIPE_SetDownsizeConfig>:
{
3401213c:	b570      	push	{r4, r5, r6, lr}
3401213e:	460e      	mov	r6, r1
34012140:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
34012142:	4605      	mov	r5, r0
34012144:	b908      	cbnz	r0, 3401214a <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xe>
    return HAL_ERROR;
34012146:	2001      	movs	r0, #1
}
34012148:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pDownsizeConfig == NULL))
3401214a:	2a00      	cmp	r2, #0
3401214c:	d0fb      	beq.n	34012146 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401214e:	2902      	cmp	r1, #2
34012150:	d904      	bls.n	3401215c <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x20>
34012152:	f241 1134 	movw	r1, #4404	@ 0x1134
34012156:	483f      	ldr	r0, [pc, #252]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34012158:	f00d f802 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->HDivFactor));
3401215c:	6963      	ldr	r3, [r4, #20]
3401215e:	3b80      	subs	r3, #128	@ 0x80
34012160:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
34012164:	d304      	bcc.n	34012170 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x34>
34012166:	f241 1135 	movw	r1, #4405	@ 0x1135
3401216a:	483a      	ldr	r0, [pc, #232]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
3401216c:	f00c fff8 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_DIV_FACTOR(pDownsizeConfig->VDivFactor));
34012170:	6923      	ldr	r3, [r4, #16]
34012172:	3b80      	subs	r3, #128	@ 0x80
34012174:	f5b3 7f60 	cmp.w	r3, #896	@ 0x380
34012178:	d304      	bcc.n	34012184 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x48>
3401217a:	f241 1136 	movw	r1, #4406	@ 0x1136
3401217e:	4835      	ldr	r0, [pc, #212]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34012180:	f00c ffee 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->HRatio));
34012184:	68e3      	ldr	r3, [r4, #12]
34012186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401218a:	d304      	bcc.n	34012196 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x5a>
3401218c:	f241 1137 	movw	r1, #4407	@ 0x1137
34012190:	4830      	ldr	r0, [pc, #192]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
34012192:	f00c ffe5 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_RATIO(pDownsizeConfig->VRatio));
34012196:	68a3      	ldr	r3, [r4, #8]
34012198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401219c:	d304      	bcc.n	340121a8 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x6c>
3401219e:	f241 1138 	movw	r1, #4408	@ 0x1138
340121a2:	482c      	ldr	r0, [pc, #176]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
340121a4:	f00c ffdc 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->HSize));
340121a8:	6863      	ldr	r3, [r4, #4]
340121aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340121ae:	d304      	bcc.n	340121ba <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x7e>
340121b0:	f241 1139 	movw	r1, #4409	@ 0x1139
340121b4:	4827      	ldr	r0, [pc, #156]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
340121b6:	f00c ffd3 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_DOWSIZE_SIZE(pDownsizeConfig->VSize));
340121ba:	6823      	ldr	r3, [r4, #0]
340121bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340121c0:	d304      	bcc.n	340121cc <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x90>
340121c2:	f241 113a 	movw	r1, #4410	@ 0x113a
340121c6:	4823      	ldr	r0, [pc, #140]	@ (34012254 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0x118>)
340121c8:	f00c ffca 	bl	3401f160 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
340121cc:	792b      	ldrb	r3, [r5, #4]
340121ce:	2b02      	cmp	r3, #2
340121d0:	d1b9      	bne.n	34012146 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
    if (Pipe == DCMIPP_PIPE1)
340121d2:	2e01      	cmp	r6, #1
340121d4:	d11e      	bne.n	34012214 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xd8>
      MODIFY_REG(hdcmipp->Instance->P1DSCR, (DCMIPP_P1DSCR_HDIV | DCMIPP_P1DSCR_VDIV),
340121d6:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
340121da:	682b      	ldr	r3, [r5, #0]
340121dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340121e0:	f8d3 1910 	ldr.w	r1, [r3, #2320]	@ 0x910
340121e4:	f001 21fc 	and.w	r1, r1, #4227922944	@ 0xfc00fc00
340121e8:	430a      	orrs	r2, r1
340121ea:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
      WRITE_REG(hdcmipp->Instance->P1DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P1DSRTIOR_HRATIO_Pos) | \
340121ee:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
340121f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
340121f6:	f8c3 2914 	str.w	r2, [r3, #2324]	@ 0x914
      MODIFY_REG(hdcmipp->Instance->P1DSSZR, DCMIPP_P1DSSZR_HSIZE | DCMIPP_P1DSSZR_VSIZE,
340121fa:	f8d3 1918 	ldr.w	r1, [r3, #2328]	@ 0x918
340121fe:	e9d4 0200 	ldrd	r0, r2, [r4]
34012202:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34012206:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3401220a:	430a      	orrs	r2, r1
3401220c:	f8c3 2918 	str.w	r2, [r3, #2328]	@ 0x918
  return HAL_OK;
34012210:	2000      	movs	r0, #0
34012212:	e799      	b.n	34012148 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xc>
    else if (Pipe == DCMIPP_PIPE2)
34012214:	2e02      	cmp	r6, #2
34012216:	d196      	bne.n	34012146 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xa>
      MODIFY_REG(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_HDIV | DCMIPP_P2DSCR_VDIV,
34012218:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
3401221c:	682b      	ldr	r3, [r5, #0]
3401221e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
34012222:	f8d3 1d10 	ldr.w	r1, [r3, #3344]	@ 0xd10
34012226:	f001 21fc 	and.w	r1, r1, #4227922944	@ 0xfc00fc00
3401222a:	430a      	orrs	r2, r1
3401222c:	f8c3 2d10 	str.w	r2, [r3, #3344]	@ 0xd10
      WRITE_REG(hdcmipp->Instance->P2DSRTIOR, (pDownsizeConfig->HRatio << DCMIPP_P2DSRTIOR_HRATIO_Pos) | \
34012230:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
34012234:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34012238:	f8c3 2d14 	str.w	r2, [r3, #3348]	@ 0xd14
      MODIFY_REG(hdcmipp->Instance->P2DSSZR, DCMIPP_P2DSSZR_HSIZE | DCMIPP_P2DSSZR_VSIZE,
3401223c:	f8d3 1d18 	ldr.w	r1, [r3, #3352]	@ 0xd18
34012240:	e9d4 0200 	ldrd	r0, r2, [r4]
34012244:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34012248:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3401224c:	430a      	orrs	r2, r1
3401224e:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
34012252:	e7dd      	b.n	34012210 <HAL_DCMIPP_PIPE_SetDownsizeConfig+0xd4>
34012254:	3402b9b3 	.word	0x3402b9b3

34012258 <HAL_DCMIPP_PIPE_EnableDownsize>:
{
34012258:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
3401225a:	b130      	cbz	r0, 3401226a <HAL_DCMIPP_PIPE_EnableDownsize+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401225c:	2902      	cmp	r1, #2
3401225e:	d906      	bls.n	3401226e <HAL_DCMIPP_PIPE_EnableDownsize+0x16>
34012260:	f241 117a 	movw	r1, #4474	@ 0x117a
34012264:	480c      	ldr	r0, [pc, #48]	@ (34012298 <HAL_DCMIPP_PIPE_EnableDownsize+0x40>)
34012266:	f00c ff7b 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
3401226a:	2001      	movs	r0, #1
3401226c:	e009      	b.n	34012282 <HAL_DCMIPP_PIPE_EnableDownsize+0x2a>
  if (Pipe == DCMIPP_PIPE1)
3401226e:	2901      	cmp	r1, #1
34012270:	d108      	bne.n	34012284 <HAL_DCMIPP_PIPE_EnableDownsize+0x2c>
    SET_BIT(hdcmipp->Instance->P1DSCR, DCMIPP_P1DSCR_ENABLE);
34012272:	6802      	ldr	r2, [r0, #0]
34012274:	f8d2 3910 	ldr.w	r3, [r2, #2320]	@ 0x910
34012278:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
3401227c:	f8c2 3910 	str.w	r3, [r2, #2320]	@ 0x910
  return HAL_OK;
34012280:	2000      	movs	r0, #0
}
34012282:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
34012284:	2902      	cmp	r1, #2
34012286:	d1f0      	bne.n	3401226a <HAL_DCMIPP_PIPE_EnableDownsize+0x12>
    SET_BIT(hdcmipp->Instance->P2DSCR, DCMIPP_P2DSCR_ENABLE);
34012288:	6802      	ldr	r2, [r0, #0]
3401228a:	f8d2 3d10 	ldr.w	r3, [r2, #3344]	@ 0xd10
3401228e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34012292:	f8c2 3d10 	str.w	r3, [r2, #3344]	@ 0xd10
34012296:	e7f3      	b.n	34012280 <HAL_DCMIPP_PIPE_EnableDownsize+0x28>
34012298:	3402b9b3 	.word	0x3402b9b3

3401229c <HAL_DCMIPP_PIPE_EnableGammaConversion>:
{
3401229c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
3401229e:	b130      	cbz	r0, 340122ae <HAL_DCMIPP_PIPE_EnableGammaConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340122a0:	2902      	cmp	r1, #2
340122a2:	d906      	bls.n	340122b2 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x16>
340122a4:	f241 11bc 	movw	r1, #4540	@ 0x11bc
340122a8:	480c      	ldr	r0, [pc, #48]	@ (340122dc <HAL_DCMIPP_PIPE_EnableGammaConversion+0x40>)
340122aa:	f00c ff59 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
340122ae:	2001      	movs	r0, #1
340122b0:	e009      	b.n	340122c6 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x2a>
  if (Pipe == DCMIPP_PIPE1)
340122b2:	2901      	cmp	r1, #1
340122b4:	d108      	bne.n	340122c8 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x2c>
    SET_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
340122b6:	6802      	ldr	r2, [r0, #0]
340122b8:	f8d2 3970 	ldr.w	r3, [r2, #2416]	@ 0x970
340122bc:	f043 0301 	orr.w	r3, r3, #1
340122c0:	f8c2 3970 	str.w	r3, [r2, #2416]	@ 0x970
  return HAL_OK;
340122c4:	2000      	movs	r0, #0
}
340122c6:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
340122c8:	2902      	cmp	r1, #2
340122ca:	d1f0      	bne.n	340122ae <HAL_DCMIPP_PIPE_EnableGammaConversion+0x12>
    SET_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
340122cc:	6802      	ldr	r2, [r0, #0]
340122ce:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	@ 0xd70
340122d2:	f043 0301 	orr.w	r3, r3, #1
340122d6:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
340122da:	e7f3      	b.n	340122c4 <HAL_DCMIPP_PIPE_EnableGammaConversion+0x28>
340122dc:	3402b9b3 	.word	0x3402b9b3

340122e0 <HAL_DCMIPP_PIPE_DisableGammaConversion>:
{
340122e0:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340122e2:	b130      	cbz	r0, 340122f2 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340122e4:	2902      	cmp	r1, #2
340122e6:	d906      	bls.n	340122f6 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x16>
340122e8:	f241 11dd 	movw	r1, #4573	@ 0x11dd
340122ec:	480c      	ldr	r0, [pc, #48]	@ (34012320 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x40>)
340122ee:	f00c ff37 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
340122f2:	2001      	movs	r0, #1
340122f4:	e009      	b.n	3401230a <HAL_DCMIPP_PIPE_DisableGammaConversion+0x2a>
  if (Pipe == DCMIPP_PIPE1)
340122f6:	2901      	cmp	r1, #1
340122f8:	d108      	bne.n	3401230c <HAL_DCMIPP_PIPE_DisableGammaConversion+0x2c>
    CLEAR_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE);
340122fa:	6802      	ldr	r2, [r0, #0]
340122fc:	f8d2 3970 	ldr.w	r3, [r2, #2416]	@ 0x970
34012300:	f023 0301 	bic.w	r3, r3, #1
34012304:	f8c2 3970 	str.w	r3, [r2, #2416]	@ 0x970
  return HAL_OK;
34012308:	2000      	movs	r0, #0
}
3401230a:	bd08      	pop	{r3, pc}
  else if (Pipe == DCMIPP_PIPE2)
3401230c:	2902      	cmp	r1, #2
3401230e:	d1f0      	bne.n	340122f2 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x12>
    CLEAR_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE);
34012310:	6802      	ldr	r2, [r0, #0]
34012312:	f8d2 3d70 	ldr.w	r3, [r2, #3440]	@ 0xd70
34012316:	f023 0301 	bic.w	r3, r3, #1
3401231a:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
3401231e:	e7f3      	b.n	34012308 <HAL_DCMIPP_PIPE_DisableGammaConversion+0x28>
34012320:	3402b9b3 	.word	0x3402b9b3

34012324 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion>:
{
34012324:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012326:	4a13      	ldr	r2, [pc, #76]	@ (34012374 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x50>)
34012328:	6803      	ldr	r3, [r0, #0]
{
3401232a:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3401232c:	4293      	cmp	r3, r2
{
3401232e:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012330:	d008      	beq.n	34012344 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x20>
34012332:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012336:	4293      	cmp	r3, r2
34012338:	d004      	beq.n	34012344 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x20>
3401233a:	f241 11f8 	movw	r1, #4600	@ 0x11f8
3401233e:	480e      	ldr	r0, [pc, #56]	@ (34012378 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x54>)
34012340:	f00c ff0e 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012344:	2d02      	cmp	r5, #2
34012346:	d906      	bls.n	34012356 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x32>
34012348:	f241 11f9 	movw	r1, #4601	@ 0x11f9
3401234c:	480a      	ldr	r0, [pc, #40]	@ (34012378 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x54>)
3401234e:	f00c ff07 	bl	3401f160 <assert_failed>
    return 0;
34012352:	2000      	movs	r0, #0
}
34012354:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34012356:	2d01      	cmp	r5, #1
34012358:	d105      	bne.n	34012366 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x42>
    return ((READ_BIT(hdcmipp->Instance->P1GMCR, DCMIPP_P1GMCR_ENABLE) == DCMIPP_P1GMCR_ENABLE) ? 1U : 0U);
3401235a:	6823      	ldr	r3, [r4, #0]
3401235c:	f8d3 0970 	ldr.w	r0, [r3, #2416]	@ 0x970
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
34012360:	f000 0001 	and.w	r0, r0, #1
34012364:	e7f6      	b.n	34012354 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x30>
  else if (Pipe == DCMIPP_PIPE2)
34012366:	2d02      	cmp	r5, #2
34012368:	d1f3      	bne.n	34012352 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P2GMCR, DCMIPP_P2GMCR_ENABLE) == DCMIPP_P2GMCR_ENABLE) ? 1U : 0U);
3401236a:	6823      	ldr	r3, [r4, #0]
3401236c:	f8d3 0d70 	ldr.w	r0, [r3, #3440]	@ 0xd70
34012370:	e7f6      	b.n	34012360 <HAL_DCMIPP_PIPE_IsEnabledGammaConversion+0x3c>
34012372:	bf00      	nop
34012374:	58002000 	.word	0x58002000
34012378:	3402b9b3 	.word	0x3402b9b3

3401237c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig>:
{
3401237c:	b570      	push	{r4, r5, r6, lr}
3401237e:	460e      	mov	r6, r1
34012380:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
34012382:	4605      	mov	r5, r0
34012384:	b908      	cbnz	r0, 3401238a <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xe>
    return HAL_ERROR;
34012386:	2001      	movs	r0, #1
}
34012388:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pRawBayer2RGBConfig == NULL))
3401238a:	2a00      	cmp	r2, #0
3401238c:	d0fb      	beq.n	34012386 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401238e:	2902      	cmp	r1, #2
34012390:	d904      	bls.n	3401239c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x20>
34012392:	f241 211e 	movw	r1, #4638	@ 0x121e
34012396:	4824      	ldr	r0, [pc, #144]	@ (34012428 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
34012398:	f00c fee2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_RAW_TYPE(pRawBayer2RGBConfig->RawBayerType));
3401239c:	68a2      	ldr	r2, [r4, #8]
3401239e:	b152      	cbz	r2, 340123b6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x3a>
340123a0:	2a06      	cmp	r2, #6
340123a2:	d803      	bhi.n	340123ac <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x30>
340123a4:	2354      	movs	r3, #84	@ 0x54
340123a6:	40d3      	lsrs	r3, r2
340123a8:	07db      	lsls	r3, r3, #31
340123aa:	d404      	bmi.n	340123b6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x3a>
340123ac:	f241 211f 	movw	r1, #4639	@ 0x121f
340123b0:	481d      	ldr	r0, [pc, #116]	@ (34012428 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
340123b2:	f00c fed5 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->PeakStrength));
340123b6:	68e3      	ldr	r3, [r4, #12]
340123b8:	2b07      	cmp	r3, #7
340123ba:	d904      	bls.n	340123c6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x4a>
340123bc:	f44f 5191 	mov.w	r1, #4640	@ 0x1220
340123c0:	4819      	ldr	r0, [pc, #100]	@ (34012428 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
340123c2:	f00c fecd 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->VLineStrength));
340123c6:	6823      	ldr	r3, [r4, #0]
340123c8:	2b07      	cmp	r3, #7
340123ca:	d904      	bls.n	340123d6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x5a>
340123cc:	f241 2121 	movw	r1, #4641	@ 0x1221
340123d0:	4815      	ldr	r0, [pc, #84]	@ (34012428 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
340123d2:	f00c fec5 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->HLineStrength));
340123d6:	6863      	ldr	r3, [r4, #4]
340123d8:	2b07      	cmp	r3, #7
340123da:	d904      	bls.n	340123e6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x6a>
340123dc:	f241 2122 	movw	r1, #4642	@ 0x1222
340123e0:	4811      	ldr	r0, [pc, #68]	@ (34012428 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
340123e2:	f00c febd 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_RAWBAYER2RGB_STRENGTH(pRawBayer2RGBConfig->EdgeStrength));
340123e6:	6923      	ldr	r3, [r4, #16]
340123e8:	2b07      	cmp	r3, #7
340123ea:	d904      	bls.n	340123f6 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0x7a>
340123ec:	f241 2123 	movw	r1, #4643	@ 0x1223
340123f0:	480d      	ldr	r0, [pc, #52]	@ (34012428 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xac>)
340123f2:	f00c feb5 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340123f6:	2e01      	cmp	r6, #1
340123f8:	d1c5      	bne.n	34012386 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xa>
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
340123fa:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
340123fe:	071b      	lsls	r3, r3, #28
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34012400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34012404:	68a2      	ldr	r2, [r4, #8]
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34012406:	6829      	ldr	r1, [r5, #0]
                  (pRawBayer2RGBConfig->PeakStrength << DCMIPP_P1DMCR_PEAK_Pos)     | \
34012408:	4313      	orrs	r3, r2
                  (pRawBayer2RGBConfig->VLineStrength << DCMIPP_P1DMCR_LINEV_Pos)   | \
3401240a:	6822      	ldr	r2, [r4, #0]
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
3401240c:	f8d1 0870 	ldr.w	r0, [r1, #2160]	@ 0x870
                  (pRawBayer2RGBConfig->EdgeStrength << DCMIPP_P1DMCR_EDGE_Pos)     | \
34012410:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                  (pRawBayer2RGBConfig->HLineStrength << DCMIPP_P1DMCR_LINEH_Pos));
34012414:	6862      	ldr	r2, [r4, #4]
    p1dmcr_reg = ((pRawBayer2RGBConfig->RawBayerType)                               | \
34012416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
3401241a:	4a04      	ldr	r2, [pc, #16]	@ (3401242c <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xb0>)
3401241c:	4002      	ands	r2, r0
3401241e:	4313      	orrs	r3, r2
  return HAL_OK;
34012420:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_TYPE | DCMIPP_P1DMCR_PEAK | DCMIPP_P1DMCR_LINEV | \
34012422:	f8c1 3870 	str.w	r3, [r1, #2160]	@ 0x870
  return HAL_OK;
34012426:	e7af      	b.n	34012388 <HAL_DCMIPP_PIPE_SetISPRawBayer2RGBConfig+0xc>
34012428:	3402b9b3 	.word	0x3402b9b3
3401242c:	8888fff9 	.word	0x8888fff9

34012430 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB>:
{
34012430:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012432:	b130      	cbz	r0, 34012442 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012434:	2902      	cmp	r1, #2
34012436:	d906      	bls.n	34012446 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x16>
34012438:	f241 214a 	movw	r1, #4682	@ 0x124a
3401243c:	4807      	ldr	r0, [pc, #28]	@ (3401245c <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x2c>)
3401243e:	f00c fe8f 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012442:	2001      	movs	r0, #1
}
34012444:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012446:	2901      	cmp	r1, #1
34012448:	d1fb      	bne.n	34012442 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x12>
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3401244a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401244c:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3401244e:	f8d2 3870 	ldr.w	r3, [r2, #2160]	@ 0x870
34012452:	f043 0301 	orr.w	r3, r3, #1
34012456:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  return HAL_OK;
3401245a:	e7f3      	b.n	34012444 <HAL_DCMIPP_PIPE_EnableISPRawBayer2RGB+0x14>
3401245c:	3402b9b3 	.word	0x3402b9b3

34012460 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB>:
{
34012460:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012462:	b130      	cbz	r0, 34012472 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012464:	2902      	cmp	r1, #2
34012466:	d906      	bls.n	34012476 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x16>
34012468:	f241 2167 	movw	r1, #4711	@ 0x1267
3401246c:	4807      	ldr	r0, [pc, #28]	@ (3401248c <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x2c>)
3401246e:	f00c fe77 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012472:	2001      	movs	r0, #1
}
34012474:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012476:	2901      	cmp	r1, #1
34012478:	d1fb      	bne.n	34012472 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3401247a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401247c:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1DMCR, DCMIPP_P1DMCR_ENABLE);
3401247e:	f8d2 3870 	ldr.w	r3, [r2, #2160]	@ 0x870
34012482:	f023 0301 	bic.w	r3, r3, #1
34012486:	f8c2 3870 	str.w	r3, [r2, #2160]	@ 0x870
  return HAL_OK;
3401248a:	e7f3      	b.n	34012474 <HAL_DCMIPP_PIPE_DisableISPRawBayer2RGB+0x14>
3401248c:	3402b9b3 	.word	0x3402b9b3

34012490 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig>:
{
34012490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34012492:	460f      	mov	r7, r1
34012494:	4615      	mov	r5, r2
34012496:	461c      	mov	r4, r3
  if (hdcmipp == NULL)
34012498:	4606      	mov	r6, r0
3401249a:	b908      	cbnz	r0, 340124a0 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x10>
    return HAL_ERROR;
3401249c:	2001      	movs	r0, #1
}
3401249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340124a0:	2902      	cmp	r1, #2
340124a2:	d904      	bls.n	340124ae <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x1e>
340124a4:	f241 2189 	movw	r1, #4745	@ 0x1289
340124a8:	480f      	ldr	r0, [pc, #60]	@ (340124e8 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
340124aa:	f00c fe59 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_NB_FIRST_LINES(NbFirstLines));
340124ae:	2d07      	cmp	r5, #7
340124b0:	d904      	bls.n	340124bc <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x2c>
340124b2:	f241 218a 	movw	r1, #4746	@ 0x128a
340124b6:	480c      	ldr	r0, [pc, #48]	@ (340124e8 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
340124b8:	f00c fe52 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_NB_LAST_LINES(NbLastLines));
340124bc:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
340124c0:	d304      	bcc.n	340124cc <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x3c>
340124c2:	f241 218b 	movw	r1, #4747	@ 0x128b
340124c6:	4808      	ldr	r0, [pc, #32]	@ (340124e8 <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0x58>)
340124c8:	f00c fe4a 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340124cc:	2f01      	cmp	r7, #1
340124ce:	d1e5      	bne.n	3401249c <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0xc>
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
340124d0:	6832      	ldr	r2, [r6, #0]
    p1srcr_reg = ((NbFirstLines << DCMIPP_P1SRCR_FIRSTLINEDEL_Pos) | (NbLastLines << DCMIPP_P1SRCR_LASTLINE_Pos));
340124d2:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
340124d6:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
340124da:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1SRCR, (DCMIPP_P1SRCR_FIRSTLINEDEL | DCMIPP_P1SRCR_LASTLINE), p1srcr_reg);
340124dc:	f36f 030e 	bfc	r3, #0, #15
340124e0:	431c      	orrs	r4, r3
340124e2:	f8c2 4820 	str.w	r4, [r2, #2080]	@ 0x820
  return HAL_OK;
340124e6:	e7da      	b.n	3401249e <HAL_DCMIPP_PIPE_SetISPRemovalStatisticConfig+0xe>
340124e8:	3402b9b3 	.word	0x3402b9b3

340124ec <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic>:
  if (hdcmipp == NULL)
340124ec:	b150      	cbz	r0, 34012504 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x18>
  if (Pipe == DCMIPP_PIPE1)
340124ee:	2901      	cmp	r1, #1
340124f0:	d108      	bne.n	34012504 <HAL_DCMIPP_PIPE_EnableISPRemovalStatistic+0x18>
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
340124f2:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340124f4:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
340124f6:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
340124fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
340124fe:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
34012502:	4770      	bx	lr
    return HAL_ERROR;
34012504:	2001      	movs	r0, #1
}
34012506:	4770      	bx	lr

34012508 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic>:
  if (hdcmipp == NULL)
34012508:	b150      	cbz	r0, 34012520 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x18>
  if (Pipe == DCMIPP_PIPE1)
3401250a:	2901      	cmp	r1, #1
3401250c:	d108      	bne.n	34012520 <HAL_DCMIPP_PIPE_DisableISPRemovalStatistic+0x18>
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
3401250e:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012510:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1SRCR, DCMIPP_P1SRCR_CROPEN);
34012512:	f8d2 3820 	ldr.w	r3, [r2, #2080]	@ 0x820
34012516:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3401251a:	f8c2 3820 	str.w	r3, [r2, #2080]	@ 0x820
  return HAL_OK;
3401251e:	4770      	bx	lr
    return HAL_ERROR;
34012520:	2001      	movs	r0, #1
}
34012522:	4770      	bx	lr

34012524 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig>:
{
34012524:	b570      	push	{r4, r5, r6, lr}
34012526:	460e      	mov	r6, r1
34012528:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
3401252a:	4605      	mov	r5, r0
3401252c:	b908      	cbnz	r0, 34012532 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xe>
    return HAL_ERROR;
3401252e:	2001      	movs	r0, #1
}
34012530:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012532:	2902      	cmp	r1, #2
34012534:	d918      	bls.n	34012568 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x44>
34012536:	f241 21ea 	movw	r1, #4842	@ 0x12ea
3401253a:	480d      	ldr	r0, [pc, #52]	@ (34012570 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x4c>)
3401253c:	f00c fe10 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
34012540:	2c07      	cmp	r4, #7
34012542:	d9f4      	bls.n	3401252e <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xa>
34012544:	f241 21eb 	movw	r1, #4843	@ 0x12eb
34012548:	4809      	ldr	r0, [pc, #36]	@ (34012570 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x4c>)
3401254a:	f00c fe09 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401254e:	2e01      	cmp	r6, #1
34012550:	d1ed      	bne.n	3401252e <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
34012552:	6829      	ldr	r1, [r5, #0]
  return HAL_OK;
34012554:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_STRENGTH, Strength << DCMIPP_P1BPRCR_STRENGTH_Pos);
34012556:	f8d1 3824 	ldr.w	r3, [r1, #2084]	@ 0x824
3401255a:	f023 030e 	bic.w	r3, r3, #14
3401255e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
34012562:	f8c1 3824 	str.w	r3, [r1, #2084]	@ 0x824
  return HAL_OK;
34012566:	e7e3      	b.n	34012530 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0xc>
  assert_param(IS_DCMIPP_BAD_PXL_REMOVAL_STRENGTH(Strength));
34012568:	2a07      	cmp	r2, #7
3401256a:	d9f0      	bls.n	3401254e <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x2a>
3401256c:	e7ea      	b.n	34012544 <HAL_DCMIPP_PIPE_SetISPBadPixelRemovalConfig+0x20>
3401256e:	bf00      	nop
34012570:	3402b9b3 	.word	0x3402b9b3

34012574 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval>:
{
34012574:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012576:	b130      	cbz	r0, 34012586 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012578:	2902      	cmp	r1, #2
3401257a:	d906      	bls.n	3401258a <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x16>
3401257c:	f241 3108 	movw	r1, #4872	@ 0x1308
34012580:	4807      	ldr	r0, [pc, #28]	@ (340125a0 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x2c>)
34012582:	f00c fded 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012586:	2001      	movs	r0, #1
}
34012588:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
3401258a:	2901      	cmp	r1, #1
3401258c:	d1fb      	bne.n	34012586 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x12>
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
3401258e:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012590:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
34012592:	f8d2 3824 	ldr.w	r3, [r2, #2084]	@ 0x824
34012596:	f043 0301 	orr.w	r3, r3, #1
3401259a:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  return HAL_OK;
3401259e:	e7f3      	b.n	34012588 <HAL_DCMIPP_PIPE_EnableISPBadPixelRemoval+0x14>
340125a0:	3402b9b3 	.word	0x3402b9b3

340125a4 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval>:
{
340125a4:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340125a6:	b130      	cbz	r0, 340125b6 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340125a8:	2902      	cmp	r1, #2
340125aa:	d906      	bls.n	340125ba <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x16>
340125ac:	f241 3125 	movw	r1, #4901	@ 0x1325
340125b0:	4807      	ldr	r0, [pc, #28]	@ (340125d0 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x2c>)
340125b2:	f00c fdd5 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
340125b6:	2001      	movs	r0, #1
}
340125b8:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340125ba:	2901      	cmp	r1, #1
340125bc:	d1fb      	bne.n	340125b6 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
340125be:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340125c0:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE);
340125c2:	f8d2 3824 	ldr.w	r3, [r2, #2084]	@ 0x824
340125c6:	f023 0301 	bic.w	r3, r3, #1
340125ca:	f8c2 3824 	str.w	r3, [r2, #2084]	@ 0x824
  return HAL_OK;
340125ce:	e7f3      	b.n	340125b8 <HAL_DCMIPP_PIPE_DisableISPBadPixelRemoval+0x14>
340125d0:	3402b9b3 	.word	0x3402b9b3

340125d4 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
340125d4:	2902      	cmp	r1, #2
{
340125d6:	b510      	push	{r4, lr}
340125d8:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_PIPE(Pipe));
340125da:	d904      	bls.n	340125e6 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x12>
340125dc:	f241 313b 	movw	r1, #4923	@ 0x133b
340125e0:	4804      	ldr	r0, [pc, #16]	@ (340125f4 <HAL_DCMIPP_PIPE_GetISPBadPixelRemovalConfig+0x20>)
340125e2:	f00c fdbd 	bl	3401f160 <assert_failed>
  return (((READ_REG(hdcmipp->Instance->P1BPRCR)) & DCMIPP_P1BPRCR_STRENGTH) >> DCMIPP_P1BPRCR_STRENGTH_Pos);
340125e6:	6823      	ldr	r3, [r4, #0]
340125e8:	f8d3 0824 	ldr.w	r0, [r3, #2084]	@ 0x824
}
340125ec:	f3c0 0042 	ubfx	r0, r0, #1, #3
340125f0:	bd10      	pop	{r4, pc}
340125f2:	bf00      	nop
340125f4:	3402b9b3 	.word	0x3402b9b3

340125f8 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval>:
{
340125f8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340125fa:	4a10      	ldr	r2, [pc, #64]	@ (3401263c <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x44>)
340125fc:	6803      	ldr	r3, [r0, #0]
{
340125fe:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012600:	4293      	cmp	r3, r2
{
34012602:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012604:	d008      	beq.n	34012618 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x20>
34012606:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401260a:	4293      	cmp	r3, r2
3401260c:	d004      	beq.n	34012618 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x20>
3401260e:	f241 3148 	movw	r1, #4936	@ 0x1348
34012612:	480b      	ldr	r0, [pc, #44]	@ (34012640 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x48>)
34012614:	f00c fda4 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012618:	2d02      	cmp	r5, #2
3401261a:	d906      	bls.n	3401262a <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x32>
3401261c:	f241 3149 	movw	r1, #4937	@ 0x1349
34012620:	4807      	ldr	r0, [pc, #28]	@ (34012640 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x48>)
34012622:	f00c fd9d 	bl	3401f160 <assert_failed>
    return 0;
34012626:	2000      	movs	r0, #0
}
34012628:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
3401262a:	2d01      	cmp	r5, #1
3401262c:	d1fb      	bne.n	34012626 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1BPRCR, DCMIPP_P1BPRCR_ENABLE) == DCMIPP_P1BPRCR_ENABLE) ? 1U : 0U);
3401262e:	6823      	ldr	r3, [r4, #0]
34012630:	f8d3 0824 	ldr.w	r0, [r3, #2084]	@ 0x824
34012634:	f000 0001 	and.w	r0, r0, #1
34012638:	e7f6      	b.n	34012628 <HAL_DCMIPP_PIPE_IsEnabledISPBadPixelRemoval+0x30>
3401263a:	bf00      	nop
3401263c:	58002000 	.word	0x58002000
34012640:	3402b9b3 	.word	0x3402b9b3

34012644 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter>:
{
34012644:	b538      	push	{r3, r4, r5, lr}
34012646:	4615      	mov	r5, r2
  if ((hdcmipp == NULL) || (pCounter == NULL))
34012648:	4604      	mov	r4, r0
3401264a:	b908      	cbnz	r0, 34012650 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0xc>
    return HAL_ERROR;
3401264c:	2001      	movs	r0, #1
}
3401264e:	bd38      	pop	{r3, r4, r5, pc}
  if ((hdcmipp == NULL) || (pCounter == NULL))
34012650:	2a00      	cmp	r2, #0
34012652:	d0fb      	beq.n	3401264c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x8>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012654:	2902      	cmp	r1, #2
34012656:	d904      	bls.n	34012662 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x1e>
34012658:	f241 3166 	movw	r1, #4966	@ 0x1366
3401265c:	4806      	ldr	r0, [pc, #24]	@ (34012678 <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x34>)
3401265e:	f00c fd7f 	bl	3401f160 <assert_failed>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34012662:	7923      	ldrb	r3, [r4, #4]
34012664:	2b02      	cmp	r3, #2
34012666:	d1f1      	bne.n	3401264c <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0x8>
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
34012668:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
3401266a:	2000      	movs	r0, #0
    *pCounter = READ_REG(hdcmipp->Instance->P1BPRSR & DCMIPP_P1BPRSR_BADCNT);
3401266c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
34012670:	f3c3 030b 	ubfx	r3, r3, #0, #12
34012674:	602b      	str	r3, [r5, #0]
  return HAL_OK;
34012676:	e7ea      	b.n	3401264e <HAL_DCMIPP_PIPE_GetISPRemovedBadPixelCounter+0xa>
34012678:	3402b9b3 	.word	0x3402b9b3

3401267c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig>:
{
3401267c:	b570      	push	{r4, r5, r6, lr}
3401267e:	460e      	mov	r6, r1
34012680:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
34012682:	4605      	mov	r5, r0
34012684:	b908      	cbnz	r0, 3401268a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xe>
    return HAL_ERROR;
34012686:	2001      	movs	r0, #1
}
34012688:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pColorConversionConfig == NULL))
3401268a:	2a00      	cmp	r2, #0
3401268c:	d0fb      	beq.n	34012686 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401268e:	2902      	cmp	r1, #2
34012690:	d904      	bls.n	3401269c <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x20>
34012692:	f241 4125 	movw	r1, #5157	@ 0x1425
34012696:	4898      	ldr	r0, [pc, #608]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34012698:	f00c fd62 	bl	3401f160 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(pColorConversionConfig->ClampOutputSamples));
3401269c:	7823      	ldrb	r3, [r4, #0]
3401269e:	2b01      	cmp	r3, #1
340126a0:	d904      	bls.n	340126ac <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x30>
340126a2:	f241 4126 	movw	r1, #5158	@ 0x1426
340126a6:	4894      	ldr	r0, [pc, #592]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340126a8:	f00c fd5a 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_OUTPUT_SAMPLES_TYPES(pColorConversionConfig->OutputSamplesType));
340126ac:	7863      	ldrb	r3, [r4, #1]
340126ae:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
340126b2:	d004      	beq.n	340126be <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x42>
340126b4:	f241 4127 	movw	r1, #5159	@ 0x1427
340126b8:	488f      	ldr	r0, [pc, #572]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340126ba:	f00c fd51 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RR));
340126be:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
340126c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340126c6:	db04      	blt.n	340126d2 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x56>
340126c8:	f241 4128 	movw	r1, #5160	@ 0x1428
340126cc:	488a      	ldr	r0, [pc, #552]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340126ce:	f00c fd47 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RG));
340126d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
340126d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340126da:	db04      	blt.n	340126e6 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x6a>
340126dc:	f241 4129 	movw	r1, #5161	@ 0x1429
340126e0:	4885      	ldr	r0, [pc, #532]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340126e2:	f00c fd3d 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RB));
340126e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
340126ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340126ee:	db04      	blt.n	340126fa <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x7e>
340126f0:	f241 412a 	movw	r1, #5162	@ 0x142a
340126f4:	4880      	ldr	r0, [pc, #512]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340126f6:	f00c fd33 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->RA));
340126fa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
340126fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34012702:	db04      	blt.n	3401270e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x92>
34012704:	f241 412b 	movw	r1, #5163	@ 0x142b
34012708:	487b      	ldr	r0, [pc, #492]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401270a:	f00c fd29 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GR));
3401270e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
34012712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34012716:	db04      	blt.n	34012722 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa6>
34012718:	f241 412c 	movw	r1, #5164	@ 0x142c
3401271c:	4876      	ldr	r0, [pc, #472]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401271e:	f00c fd1f 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GG));
34012722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34012726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401272a:	db04      	blt.n	34012736 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xba>
3401272c:	f241 412d 	movw	r1, #5165	@ 0x142d
34012730:	4871      	ldr	r0, [pc, #452]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34012732:	f00c fd15 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GB));
34012736:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
3401273a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401273e:	db04      	blt.n	3401274a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xce>
34012740:	f241 412e 	movw	r1, #5166	@ 0x142e
34012744:	486c      	ldr	r0, [pc, #432]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34012746:	f00c fd0b 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->GA));
3401274a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
3401274e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34012752:	db04      	blt.n	3401275e <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xe2>
34012754:	f241 412f 	movw	r1, #5167	@ 0x142f
34012758:	4867      	ldr	r0, [pc, #412]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401275a:	f00c fd01 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BR));
3401275e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
34012762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34012766:	db04      	blt.n	34012772 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xf6>
34012768:	f241 4130 	movw	r1, #5168	@ 0x1430
3401276c:	4862      	ldr	r0, [pc, #392]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
3401276e:	f00c fcf7 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BG));
34012772:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
34012776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401277a:	db04      	blt.n	34012786 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x10a>
3401277c:	f241 4131 	movw	r1, #5169	@ 0x1431
34012780:	485d      	ldr	r0, [pc, #372]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34012782:	f00c fced 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BB));
34012786:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
3401278a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3401278e:	db04      	blt.n	3401279a <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x11e>
34012790:	f241 4132 	movw	r1, #5170	@ 0x1432
34012794:	4858      	ldr	r0, [pc, #352]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
34012796:	f00c fce3 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_COLOR_CONVERSION_COEF(pColorConversionConfig->BA));
3401279a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
3401279e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
340127a2:	db04      	blt.n	340127ae <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x132>
340127a4:	f241 4133 	movw	r1, #5171	@ 0x1433
340127a8:	4853      	ldr	r0, [pc, #332]	@ (340128f8 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x27c>)
340127aa:	f00c fcd9 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340127ae:	2e01      	cmp	r6, #1
340127b0:	f47f af69 	bne.w	34012686 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
340127b4:	682b      	ldr	r3, [r5, #0]
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
340127b6:	7820      	ldrb	r0, [r4, #0]
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
340127b8:	f8d3 1880 	ldr.w	r1, [r3, #2176]	@ 0x880
                 ((uint32_t)pColorConversionConfig->OutputSamplesType);
340127bc:	7862      	ldrb	r2, [r4, #1]
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
340127be:	f021 0106 	bic.w	r1, r1, #6
    p1cccr_reg = ((uint32_t)pColorConversionConfig->ClampOutputSamples << DCMIPP_P1CCCR_CLAMP_Pos) | \
340127c2:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
    MODIFY_REG(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_CLAMP | DCMIPP_P1CCCR_TYPE, p1cccr_reg);
340127c6:	430a      	orrs	r2, r1
340127c8:	f8c3 2880 	str.w	r2, [r3, #2176]	@ 0x880
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
340127cc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
340127d0:	b290      	uxth	r0, r2
340127d2:	f3c2 010a 	ubfx	r1, r2, #0, #11
340127d6:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
340127d8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RR);
340127dc:	bfb8      	it	lt
340127de:	4608      	movlt	r0, r1
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RG);
340127e0:	f3c2 050a 	ubfx	r5, r2, #0, #11
340127e4:	2a00      	cmp	r2, #0
340127e6:	b291      	uxth	r1, r2
340127e8:	bfb8      	it	lt
340127ea:	4629      	movlt	r1, r5
    MODIFY_REG(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR | DCMIPP_P1CCRR1_RG,
340127ec:	f8d3 2884 	ldr.w	r2, [r3, #2180]	@ 0x884
340127f0:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
340127f4:	4302      	orrs	r2, r0
340127f6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
340127fa:	f8c3 2884 	str.w	r2, [r3, #2180]	@ 0x884
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
340127fe:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
34012802:	b295      	uxth	r5, r2
34012804:	f3c2 010a 	ubfx	r1, r2, #0, #11
34012808:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
3401280a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->RB);
3401280e:	bfb8      	it	lt
34012810:	460d      	movlt	r5, r1
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->RA);
34012812:	f3c2 0109 	ubfx	r1, r2, #0, #10
34012816:	2a00      	cmp	r2, #0
34012818:	b290      	uxth	r0, r2
3401281a:	bfb8      	it	lt
3401281c:	4608      	movlt	r0, r1
    MODIFY_REG(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB | DCMIPP_P1CCRR2_RA,
3401281e:	f8d3 2888 	ldr.w	r2, [r3, #2184]	@ 0x888
34012822:	4936      	ldr	r1, [pc, #216]	@ (340128fc <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0x280>)
34012824:	400a      	ands	r2, r1
34012826:	432a      	orrs	r2, r5
34012828:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3401282c:	f8c3 2888 	str.w	r2, [r3, #2184]	@ 0x888
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
34012830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
34012834:	b295      	uxth	r5, r2
34012836:	f3c2 000a 	ubfx	r0, r2, #0, #11
3401283a:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
3401283c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GG);
34012840:	bfb8      	it	lt
34012842:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GR);
34012844:	f3c2 060a 	ubfx	r6, r2, #0, #11
34012848:	2a00      	cmp	r2, #0
3401284a:	b290      	uxth	r0, r2
3401284c:	bfb8      	it	lt
3401284e:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR | DCMIPP_P1CCGR1_GG,
34012850:	f8d3 288c 	ldr.w	r2, [r3, #2188]	@ 0x88c
34012854:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
34012858:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
3401285c:	4302      	orrs	r2, r0
3401285e:	f8c3 288c 	str.w	r2, [r3, #2188]	@ 0x88c
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
34012862:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
34012866:	b295      	uxth	r5, r2
34012868:	f3c2 000a 	ubfx	r0, r2, #0, #11
3401286c:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
3401286e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->GB);
34012872:	bfb8      	it	lt
34012874:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->GA);
34012876:	f3c2 0609 	ubfx	r6, r2, #0, #10
3401287a:	2a00      	cmp	r2, #0
3401287c:	b290      	uxth	r0, r2
3401287e:	bfb8      	it	lt
34012880:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB | DCMIPP_P1CCGR2_GA,
34012882:	f8d3 2890 	ldr.w	r2, [r3, #2192]	@ 0x890
34012886:	400a      	ands	r2, r1
34012888:	432a      	orrs	r2, r5
3401288a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
3401288e:	f8c3 2890 	str.w	r2, [r3, #2192]	@ 0x890
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
34012892:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
34012896:	b295      	uxth	r5, r2
34012898:	f3c2 000a 	ubfx	r0, r2, #0, #11
3401289c:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
3401289e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BR);
340128a2:	bfb8      	it	lt
340128a4:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BG);
340128a6:	f3c2 060a 	ubfx	r6, r2, #0, #11
340128aa:	2a00      	cmp	r2, #0
340128ac:	b290      	uxth	r0, r2
340128ae:	bfb8      	it	lt
340128b0:	4630      	movlt	r0, r6
    MODIFY_REG(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR | DCMIPP_P1CCBR1_BG,
340128b2:	f8d3 2894 	ldr.w	r2, [r3, #2196]	@ 0x894
340128b6:	f002 22f8 	and.w	r2, r2, #4160813056	@ 0xf800f800
340128ba:	432a      	orrs	r2, r5
340128bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340128c0:	f8c3 2894 	str.w	r2, [r3, #2196]	@ 0x894
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
340128c4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
340128c8:	f3c2 000a 	ubfx	r0, r2, #0, #11
340128cc:	b295      	uxth	r5, r2
340128ce:	2a00      	cmp	r2, #0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
340128d0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    tmp1 = MATRIX_VALUE11((uint16_t)pColorConversionConfig->BB);
340128d4:	bfb8      	it	lt
340128d6:	4605      	movlt	r5, r0
    tmp2 = MATRIX_VALUE10((uint16_t)pColorConversionConfig->BA);
340128d8:	f3c2 0409 	ubfx	r4, r2, #0, #10
340128dc:	2a00      	cmp	r2, #0
340128de:	b290      	uxth	r0, r2
340128e0:	bfb8      	it	lt
340128e2:	4620      	movlt	r0, r4
    MODIFY_REG(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB | DCMIPP_P1CCBR2_BA,
340128e4:	f8d3 2898 	ldr.w	r2, [r3, #2200]	@ 0x898
340128e8:	400a      	ands	r2, r1
340128ea:	432a      	orrs	r2, r5
340128ec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340128f0:	f8c3 2898 	str.w	r2, [r3, #2200]	@ 0x898
  return HAL_OK;
340128f4:	2000      	movs	r0, #0
340128f6:	e6c7      	b.n	34012688 <HAL_DCMIPP_PIPE_SetISPColorConversionConfig+0xc>
340128f8:	3402b9b3 	.word	0x3402b9b3
340128fc:	fc00f800 	.word	0xfc00f800

34012900 <HAL_DCMIPP_PIPE_EnableISPColorConversion>:
{
34012900:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012902:	b130      	cbz	r0, 34012912 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012904:	2902      	cmp	r1, #2
34012906:	d906      	bls.n	34012916 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x16>
34012908:	f241 417b 	movw	r1, #5243	@ 0x147b
3401290c:	4807      	ldr	r0, [pc, #28]	@ (3401292c <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x2c>)
3401290e:	f00c fc27 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012912:	2001      	movs	r0, #1
}
34012914:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012916:	2901      	cmp	r1, #1
34012918:	d1fb      	bne.n	34012912 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x12>
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
3401291a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401291c:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
3401291e:	f8d2 3880 	ldr.w	r3, [r2, #2176]	@ 0x880
34012922:	f043 0301 	orr.w	r3, r3, #1
34012926:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
  return HAL_OK;
3401292a:	e7f3      	b.n	34012914 <HAL_DCMIPP_PIPE_EnableISPColorConversion+0x14>
3401292c:	3402b9b3 	.word	0x3402b9b3

34012930 <HAL_DCMIPP_PIPE_DisableISPColorConversion>:
{
34012930:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012932:	b130      	cbz	r0, 34012942 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012934:	2902      	cmp	r1, #2
34012936:	d906      	bls.n	34012946 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x16>
34012938:	f241 4197 	movw	r1, #5271	@ 0x1497
3401293c:	4807      	ldr	r0, [pc, #28]	@ (3401295c <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x2c>)
3401293e:	f00c fc0f 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012942:	2001      	movs	r0, #1
}
34012944:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012946:	2901      	cmp	r1, #1
34012948:	d1fb      	bne.n	34012942 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
3401294a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
3401294c:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE);
3401294e:	f8d2 3880 	ldr.w	r3, [r2, #2176]	@ 0x880
34012952:	f023 0301 	bic.w	r3, r3, #1
34012956:	f8c2 3880 	str.w	r3, [r2, #2176]	@ 0x880
  return HAL_OK;
3401295a:	e7f3      	b.n	34012944 <HAL_DCMIPP_PIPE_DisableISPColorConversion+0x14>
3401295c:	3402b9b3 	.word	0x3402b9b3

34012960 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig>:
{
34012960:	b510      	push	{r4, lr}
  if ((hdcmipp == NULL) || (pBlackLevelConfig == NULL))
34012962:	b100      	cbz	r0, 34012966 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
34012964:	b90a      	cbnz	r2, 3401296a <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0xa>
    return HAL_ERROR;
34012966:	2001      	movs	r0, #1
}
34012968:	bd10      	pop	{r4, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401296a:	2902      	cmp	r1, #2
3401296c:	d905      	bls.n	3401297a <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x1a>
3401296e:	f241 515b 	movw	r1, #5467	@ 0x155b
34012972:	480b      	ldr	r0, [pc, #44]	@ (340129a0 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x40>)
34012974:	f00c fbf4 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012978:	e7f5      	b.n	34012966 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
3401297a:	2901      	cmp	r1, #1
3401297c:	d1f3      	bne.n	34012966 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x6>
    MODIFY_REG(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_BLCR | DCMIPP_P1BLCCR_BLCG | DCMIPP_P1BLCCR_BLCB,
3401297e:	6800      	ldr	r0, [r0, #0]
34012980:	7853      	ldrb	r3, [r2, #1]
34012982:	7814      	ldrb	r4, [r2, #0]
34012984:	f8d0 1840 	ldr.w	r1, [r0, #2112]	@ 0x840
34012988:	7892      	ldrb	r2, [r2, #2]
3401298a:	041b      	lsls	r3, r3, #16
3401298c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
34012990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34012994:	b2ca      	uxtb	r2, r1
34012996:	4313      	orrs	r3, r2
34012998:	f8c0 3840 	str.w	r3, [r0, #2112]	@ 0x840
  return HAL_OK;
3401299c:	2000      	movs	r0, #0
3401299e:	e7e3      	b.n	34012968 <HAL_DCMIPP_PIPE_SetISPBlackLevelCalibrationConfig+0x8>
340129a0:	3402b9b3 	.word	0x3402b9b3

340129a4 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration>:
{
340129a4:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340129a6:	b130      	cbz	r0, 340129b6 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340129a8:	2902      	cmp	r1, #2
340129aa:	d906      	bls.n	340129ba <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x16>
340129ac:	f241 517a 	movw	r1, #5498	@ 0x157a
340129b0:	4807      	ldr	r0, [pc, #28]	@ (340129d0 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x2c>)
340129b2:	f00c fbd5 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
340129b6:	2001      	movs	r0, #1
}
340129b8:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340129ba:	2901      	cmp	r1, #1
340129bc:	d1fb      	bne.n	340129b6 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x12>
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
340129be:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340129c0:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
340129c2:	f8d2 3840 	ldr.w	r3, [r2, #2112]	@ 0x840
340129c6:	f043 0301 	orr.w	r3, r3, #1
340129ca:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840
  return HAL_OK;
340129ce:	e7f3      	b.n	340129b8 <HAL_DCMIPP_PIPE_EnableISPBlackLevelCalibration+0x14>
340129d0:	3402b9b3 	.word	0x3402b9b3

340129d4 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration>:
{
340129d4:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
340129d6:	b130      	cbz	r0, 340129e6 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
340129d8:	2902      	cmp	r1, #2
340129da:	d906      	bls.n	340129ea <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x16>
340129dc:	f241 5196 	movw	r1, #5526	@ 0x1596
340129e0:	4807      	ldr	r0, [pc, #28]	@ (34012a00 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x2c>)
340129e2:	f00c fbbd 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
340129e6:	2001      	movs	r0, #1
}
340129e8:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
340129ea:	2901      	cmp	r1, #1
340129ec:	d1fb      	bne.n	340129e6 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
340129ee:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
340129f0:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE);
340129f2:	f8d2 3840 	ldr.w	r3, [r2, #2112]	@ 0x840
340129f6:	f023 0301 	bic.w	r3, r3, #1
340129fa:	f8c2 3840 	str.w	r3, [r2, #2112]	@ 0x840
  return HAL_OK;
340129fe:	e7f3      	b.n	340129e8 <HAL_DCMIPP_PIPE_DisableISPBlackLevelCalibration+0x14>
34012a00:	3402b9b3 	.word	0x3402b9b3

34012a04 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012a04:	2902      	cmp	r1, #2
34012a06:	d904      	bls.n	34012a12 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0xe>
34012a08:	f241 51b0 	movw	r1, #5552	@ 0x15b0
34012a0c:	4807      	ldr	r0, [pc, #28]	@ (34012a2c <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x28>)
34012a0e:	f00c bba7 	b.w	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012a12:	2901      	cmp	r1, #1
34012a14:	d108      	bne.n	34012a28 <HAL_DCMIPP_PIPE_GetISPBlackLevelCalibrationConfig+0x24>
    p1blccr_reg = READ_REG(hdcmipp->Instance->P1BLCCR);
34012a16:	6803      	ldr	r3, [r0, #0]
34012a18:	f8d3 3840 	ldr.w	r3, [r3, #2112]	@ 0x840
    pBlackLevelConfig->BlueCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCB) >> DCMIPP_P1BLCCR_BLCB_Pos);
34012a1c:	0a19      	lsrs	r1, r3, #8
34012a1e:	7091      	strb	r1, [r2, #2]
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
34012a20:	0c19      	lsrs	r1, r3, #16
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
34012a22:	0e1b      	lsrs	r3, r3, #24
    pBlackLevelConfig->GreenCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCG) >> DCMIPP_P1BLCCR_BLCG_Pos);
34012a24:	7051      	strb	r1, [r2, #1]
    pBlackLevelConfig->RedCompBlackLevel = (uint8_t)((p1blccr_reg & DCMIPP_P1BLCCR_BLCR) >> DCMIPP_P1BLCCR_BLCR_Pos);
34012a26:	7013      	strb	r3, [r2, #0]
}
34012a28:	4770      	bx	lr
34012a2a:	bf00      	nop
34012a2c:	3402b9b3 	.word	0x3402b9b3

34012a30 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration>:
{
34012a30:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012a32:	4a10      	ldr	r2, [pc, #64]	@ (34012a74 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x44>)
34012a34:	6803      	ldr	r3, [r0, #0]
{
34012a36:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012a38:	4293      	cmp	r3, r2
{
34012a3a:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34012a3c:	d008      	beq.n	34012a50 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x20>
34012a3e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34012a42:	4293      	cmp	r3, r2
34012a44:	d004      	beq.n	34012a50 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x20>
34012a46:	f241 51c4 	movw	r1, #5572	@ 0x15c4
34012a4a:	480b      	ldr	r0, [pc, #44]	@ (34012a78 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x48>)
34012a4c:	f00c fb88 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012a50:	2d02      	cmp	r5, #2
34012a52:	d906      	bls.n	34012a62 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x32>
34012a54:	f241 51c5 	movw	r1, #5573	@ 0x15c5
34012a58:	4807      	ldr	r0, [pc, #28]	@ (34012a78 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x48>)
34012a5a:	f00c fb81 	bl	3401f160 <assert_failed>
    return 0;
34012a5e:	2000      	movs	r0, #0
}
34012a60:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34012a62:	2d01      	cmp	r5, #1
34012a64:	d1fb      	bne.n	34012a5e <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1BLCCR, DCMIPP_P1BLCCR_ENABLE) == DCMIPP_P1BLCCR_ENABLE) ? 1U : 0U);
34012a66:	6823      	ldr	r3, [r4, #0]
34012a68:	f8d3 0840 	ldr.w	r0, [r3, #2112]	@ 0x840
34012a6c:	f000 0001 	and.w	r0, r0, #1
34012a70:	e7f6      	b.n	34012a60 <HAL_DCMIPP_PIPE_IsEnabledISPBlackLevelCalibration+0x30>
34012a72:	bf00      	nop
34012a74:	58002000 	.word	0x58002000
34012a78:	3402b9b3 	.word	0x3402b9b3

34012a7c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig>:
{
34012a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34012a7e:	460f      	mov	r7, r1
34012a80:	4615      	mov	r5, r2
34012a82:	461c      	mov	r4, r3
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
34012a84:	4606      	mov	r6, r0
34012a86:	b908      	cbnz	r0, 34012a8c <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x10>
    return HAL_ERROR;
34012a88:	2001      	movs	r0, #1
}
34012a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pStatisticExtractionConfig == NULL))
34012a8c:	2b00      	cmp	r3, #0
34012a8e:	d0fb      	beq.n	34012a88 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012a90:	2902      	cmp	r1, #2
34012a92:	d904      	bls.n	34012a9e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x22>
34012a94:	f241 51e9 	movw	r1, #5609	@ 0x15e9
34012a98:	482a      	ldr	r0, [pc, #168]	@ (34012b44 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34012a9a:	f00c fb61 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34012a9e:	1e6b      	subs	r3, r5, #1
34012aa0:	2b02      	cmp	r3, #2
34012aa2:	d904      	bls.n	34012aae <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x32>
34012aa4:	f241 51ea 	movw	r1, #5610	@ 0x15ea
34012aa8:	4826      	ldr	r0, [pc, #152]	@ (34012b44 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34012aaa:	f00c fb59 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_BINS(pStatisticExtractionConfig->Bins));
34012aae:	68a3      	ldr	r3, [r4, #8]
34012ab0:	b16b      	cbz	r3, 34012ace <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x52>
34012ab2:	3b04      	subs	r3, #4
34012ab4:	2b08      	cmp	r3, #8
34012ab6:	d805      	bhi.n	34012ac4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x48>
34012ab8:	f240 1211 	movw	r2, #273	@ 0x111
34012abc:	fa22 f303 	lsr.w	r3, r2, r3
34012ac0:	07db      	lsls	r3, r3, #31
34012ac2:	d404      	bmi.n	34012ace <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x52>
34012ac4:	f241 51eb 	movw	r1, #5611	@ 0x15eb
34012ac8:	481e      	ldr	r0, [pc, #120]	@ (34012b44 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34012aca:	f00c fb49 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_SOURCE(pStatisticExtractionConfig->Source));
34012ace:	6863      	ldr	r3, [r4, #4]
34012ad0:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34012ad4:	d006      	beq.n	34012ae4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x68>
34012ad6:	2b40      	cmp	r3, #64	@ 0x40
34012ad8:	d004      	beq.n	34012ae4 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x68>
34012ada:	f241 51ec 	movw	r1, #5612	@ 0x15ec
34012ade:	4819      	ldr	r0, [pc, #100]	@ (34012b44 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34012ae0:	f00c fb3e 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODE(pStatisticExtractionConfig->Mode));
34012ae4:	6823      	ldr	r3, [r4, #0]
34012ae6:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
34012aea:	d004      	beq.n	34012af6 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0x7a>
34012aec:	f241 51ed 	movw	r1, #5613	@ 0x15ed
34012af0:	4814      	ldr	r0, [pc, #80]	@ (34012b44 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc8>)
34012af2:	f00c fb35 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012af6:	2f01      	cmp	r7, #1
34012af8:	d1c6      	bne.n	34012a88 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xc>
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
34012afa:	e9d4 3200 	ldrd	r3, r2, [r4]
34012afe:	4313      	orrs	r3, r2
34012b00:	68a2      	ldr	r2, [r4, #8]
    switch (ModuleID)
34012b02:	2d01      	cmp	r5, #1
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
34012b04:	6831      	ldr	r1, [r6, #0]
    p1stxcr_reg = (pStatisticExtractionConfig->Mode) | (pStatisticExtractionConfig->Source) | \
34012b06:	ea43 0302 	orr.w	r3, r3, r2
    switch (ModuleID)
34012b0a:	d009      	beq.n	34012b20 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xa4>
34012b0c:	2d02      	cmp	r5, #2
34012b0e:	d010      	beq.n	34012b32 <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb6>
        MODIFY_REG(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_BINS | DCMIPP_P1ST3CR_SRC | \
34012b10:	f8d1 2858 	ldr.w	r2, [r1, #2136]	@ 0x858
34012b14:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
34012b18:	4313      	orrs	r3, r2
34012b1a:	f8c1 3858 	str.w	r3, [r1, #2136]	@ 0x858
        break;
34012b1e:	e006      	b.n	34012b2e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb2>
        MODIFY_REG(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_BINS | DCMIPP_P1ST1CR_SRC | \
34012b20:	f8d1 2850 	ldr.w	r2, [r1, #2128]	@ 0x850
34012b24:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
34012b28:	4313      	orrs	r3, r2
34012b2a:	f8c1 3850 	str.w	r3, [r1, #2128]	@ 0x850
  return HAL_OK;
34012b2e:	2000      	movs	r0, #0
34012b30:	e7ab      	b.n	34012a8a <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xe>
        MODIFY_REG(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_BINS | DCMIPP_P1ST2CR_SRC | \
34012b32:	f8d1 2854 	ldr.w	r2, [r1, #2132]	@ 0x854
34012b36:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
34012b3a:	4313      	orrs	r3, r2
34012b3c:	f8c1 3854 	str.w	r3, [r1, #2132]	@ 0x854
        break;
34012b40:	e7f5      	b.n	34012b2e <HAL_DCMIPP_PIPE_SetISPStatisticExtractionConfig+0xb2>
34012b42:	bf00      	nop
34012b44:	3402b9b3 	.word	0x3402b9b3

34012b48 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig>:
{
34012b48:	b570      	push	{r4, r5, r6, lr}
34012b4a:	460e      	mov	r6, r1
34012b4c:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
34012b4e:	4605      	mov	r5, r0
34012b50:	b908      	cbnz	r0, 34012b56 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xe>
    return HAL_ERROR;
34012b52:	2001      	movs	r0, #1
}
34012b54:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pStatisticExtractionAreaConfig == NULL))
34012b56:	2a00      	cmp	r2, #0
34012b58:	d0fb      	beq.n	34012b52 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012b5a:	2902      	cmp	r1, #2
34012b5c:	d904      	bls.n	34012b68 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x20>
34012b5e:	f241 611f 	movw	r1, #5663	@ 0x161f
34012b62:	4821      	ldr	r0, [pc, #132]	@ (34012be8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34012b64:	f00c fafc 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->HStart));
34012b68:	6863      	ldr	r3, [r4, #4]
34012b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34012b6e:	d304      	bcc.n	34012b7a <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x32>
34012b70:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
34012b74:	481c      	ldr	r0, [pc, #112]	@ (34012be8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34012b76:	f00c faf3 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_START(pStatisticExtractionAreaConfig->VStart));
34012b7a:	6823      	ldr	r3, [r4, #0]
34012b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34012b80:	d304      	bcc.n	34012b8c <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x44>
34012b82:	f241 6121 	movw	r1, #5665	@ 0x1621
34012b86:	4818      	ldr	r0, [pc, #96]	@ (34012be8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34012b88:	f00c faea 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->HSize));
34012b8c:	68e3      	ldr	r3, [r4, #12]
34012b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34012b92:	d304      	bcc.n	34012b9e <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x56>
34012b94:	f241 6122 	movw	r1, #5666	@ 0x1622
34012b98:	4813      	ldr	r0, [pc, #76]	@ (34012be8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34012b9a:	f00c fae1 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE_STAT_EXTRACTION_SIZE(pStatisticExtractionAreaConfig->VSize));
34012b9e:	68a3      	ldr	r3, [r4, #8]
34012ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34012ba4:	d304      	bcc.n	34012bb0 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0x68>
34012ba6:	f241 6123 	movw	r1, #5667	@ 0x1623
34012baa:	480f      	ldr	r0, [pc, #60]	@ (34012be8 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa0>)
34012bac:	f00c fad8 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012bb0:	2e01      	cmp	r6, #1
34012bb2:	d1ce      	bne.n	34012b52 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1STSTR, DCMIPP_P1STSTR_HSTART | DCMIPP_P1STSTR_VSTART,
34012bb4:	e9d4 0300 	ldrd	r0, r3, [r4]
34012bb8:	682a      	ldr	r2, [r5, #0]
34012bba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34012bbe:	f8d2 185c 	ldr.w	r1, [r2, #2140]	@ 0x85c
34012bc2:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34012bc6:	430b      	orrs	r3, r1
34012bc8:	f8c2 385c 	str.w	r3, [r2, #2140]	@ 0x85c
    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
34012bcc:	f8d2 1860 	ldr.w	r1, [r2, #2144]	@ 0x860
34012bd0:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
34012bd4:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
34012bd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34012bdc:	430b      	orrs	r3, r1
  return HAL_OK;
34012bde:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_HSIZE | DCMIPP_P1STSZR_VSIZE,
34012be0:	f8c2 3860 	str.w	r3, [r2, #2144]	@ 0x860
  return HAL_OK;
34012be4:	e7b6      	b.n	34012b54 <HAL_DCMIPP_PIPE_SetISPAreaStatisticExtractionConfig+0xc>
34012be6:	bf00      	nop
34012be8:	3402b9b3 	.word	0x3402b9b3

34012bec <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction>:
{
34012bec:	b570      	push	{r4, r5, r6, lr}
34012bee:	460e      	mov	r6, r1
34012bf0:	4615      	mov	r5, r2
  if (hdcmipp == NULL)
34012bf2:	4604      	mov	r4, r0
34012bf4:	b908      	cbnz	r0, 34012bfa <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xe>
    return HAL_ERROR;
34012bf6:	2001      	movs	r0, #1
}
34012bf8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012bfa:	2902      	cmp	r1, #2
34012bfc:	d904      	bls.n	34012c08 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x1c>
34012bfe:	f241 6147 	movw	r1, #5703	@ 0x1647
34012c02:	4815      	ldr	r0, [pc, #84]	@ (34012c58 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>)
34012c04:	f00c faac 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
34012c08:	1e6b      	subs	r3, r5, #1
34012c0a:	2b02      	cmp	r3, #2
34012c0c:	d90e      	bls.n	34012c2c <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x40>
34012c0e:	f241 6148 	movw	r1, #5704	@ 0x1648
34012c12:	4811      	ldr	r0, [pc, #68]	@ (34012c58 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x6c>)
34012c14:	f00c faa4 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012c18:	2e01      	cmp	r6, #1
34012c1a:	d1ec      	bne.n	34012bf6 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa>
        SET_BIT(hdcmipp->Instance->P1ST3CR, DCMIPP_P1ST3CR_ENABLE);
34012c1c:	6822      	ldr	r2, [r4, #0]
34012c1e:	f8d2 3858 	ldr.w	r3, [r2, #2136]	@ 0x858
34012c22:	f043 0301 	orr.w	r3, r3, #1
34012c26:	f8c2 3858 	str.w	r3, [r2, #2136]	@ 0x858
        break;
34012c2a:	e013      	b.n	34012c54 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x68>
  if (Pipe == DCMIPP_PIPE1)
34012c2c:	2e01      	cmp	r6, #1
34012c2e:	d1e2      	bne.n	34012bf6 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xa>
    switch (ModuleID)
34012c30:	2d01      	cmp	r5, #1
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
34012c32:	6823      	ldr	r3, [r4, #0]
    switch (ModuleID)
34012c34:	d008      	beq.n	34012c48 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x5c>
34012c36:	2d02      	cmp	r5, #2
34012c38:	d1f0      	bne.n	34012c1c <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x30>
        SET_BIT(hdcmipp->Instance->P1ST2CR, DCMIPP_P1ST2CR_ENABLE);
34012c3a:	f8d3 2854 	ldr.w	r2, [r3, #2132]	@ 0x854
34012c3e:	f042 0201 	orr.w	r2, r2, #1
34012c42:	f8c3 2854 	str.w	r2, [r3, #2132]	@ 0x854
        break;
34012c46:	e005      	b.n	34012c54 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0x68>
        SET_BIT(hdcmipp->Instance->P1ST1CR, DCMIPP_P1ST1CR_ENABLE);
34012c48:	f8d3 2850 	ldr.w	r2, [r3, #2128]	@ 0x850
34012c4c:	f042 0201 	orr.w	r2, r2, #1
34012c50:	f8c3 2850 	str.w	r2, [r3, #2128]	@ 0x850
  return HAL_OK;
34012c54:	2000      	movs	r0, #0
34012c56:	e7cf      	b.n	34012bf8 <HAL_DCMIPP_PIPE_EnableISPStatisticExtraction+0xc>
34012c58:	3402b9b3 	.word	0x3402b9b3

34012c5c <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction>:
{
34012c5c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012c5e:	b130      	cbz	r0, 34012c6e <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012c60:	2902      	cmp	r1, #2
34012c62:	d906      	bls.n	34012c72 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x16>
34012c64:	f241 619f 	movw	r1, #5791	@ 0x169f
34012c68:	4807      	ldr	r0, [pc, #28]	@ (34012c88 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x2c>)
34012c6a:	f00c fa79 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012c6e:	2001      	movs	r0, #1
}
34012c70:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012c72:	2901      	cmp	r1, #1
34012c74:	d1fb      	bne.n	34012c6e <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x12>
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
34012c76:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012c78:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1STSZR, DCMIPP_P1STSZR_CROPEN);
34012c7a:	f8d2 3860 	ldr.w	r3, [r2, #2144]	@ 0x860
34012c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
34012c82:	f8c2 3860 	str.w	r3, [r2, #2144]	@ 0x860
  return HAL_OK;
34012c86:	e7f3      	b.n	34012c70 <HAL_DCMIPP_PIPE_EnableISPAreaStatisticExtraction+0x14>
34012c88:	3402b9b3 	.word	0x3402b9b3

34012c8c <HAL_DCMIPP_PIPE_SetISPExposureConfig>:
{
34012c8c:	b570      	push	{r4, r5, r6, lr}
34012c8e:	460e      	mov	r6, r1
34012c90:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
34012c92:	4605      	mov	r5, r0
34012c94:	b908      	cbnz	r0, 34012c9a <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xe>
    return HAL_ERROR;
34012c96:	2001      	movs	r0, #1
}
34012c98:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pExposureConfig == NULL))
34012c9a:	2a00      	cmp	r2, #0
34012c9c:	d0fb      	beq.n	34012c96 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012c9e:	2902      	cmp	r1, #2
34012ca0:	d904      	bls.n	34012cac <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x20>
34012ca2:	f241 61db 	movw	r1, #5851	@ 0x16db
34012ca6:	481c      	ldr	r0, [pc, #112]	@ (34012d18 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34012ca8:	f00c fa5a 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftRed));
34012cac:	7823      	ldrb	r3, [r4, #0]
34012cae:	2b07      	cmp	r3, #7
34012cb0:	d904      	bls.n	34012cbc <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x30>
34012cb2:	f241 61dc 	movw	r1, #5852	@ 0x16dc
34012cb6:	4818      	ldr	r0, [pc, #96]	@ (34012d18 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34012cb8:	f00c fa52 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftGreen));
34012cbc:	78a3      	ldrb	r3, [r4, #2]
34012cbe:	2b07      	cmp	r3, #7
34012cc0:	d904      	bls.n	34012ccc <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x40>
34012cc2:	f241 61dd 	movw	r1, #5853	@ 0x16dd
34012cc6:	4814      	ldr	r0, [pc, #80]	@ (34012d18 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34012cc8:	f00c fa4a 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_EXPOSURE_SHF(pExposureConfig->ShiftBlue));
34012ccc:	7923      	ldrb	r3, [r4, #4]
34012cce:	2b07      	cmp	r3, #7
34012cd0:	d904      	bls.n	34012cdc <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x50>
34012cd2:	f241 61de 	movw	r1, #5854	@ 0x16de
34012cd6:	4810      	ldr	r0, [pc, #64]	@ (34012d18 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0x8c>)
34012cd8:	f00c fa42 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012cdc:	2e01      	cmp	r6, #1
34012cde:	d1da      	bne.n	34012c96 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_SHFR | DCMIPP_P1EXCR1_MULTR,
34012ce0:	682a      	ldr	r2, [r5, #0]
34012ce2:	7863      	ldrb	r3, [r4, #1]
34012ce4:	7820      	ldrb	r0, [r4, #0]
34012ce6:	f8d2 1844 	ldr.w	r1, [r2, #2116]	@ 0x844
34012cea:	051b      	lsls	r3, r3, #20
34012cec:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
34012cf0:	f36f 511e 	bfc	r1, #20, #11
34012cf4:	430b      	orrs	r3, r1
34012cf6:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
34012cfa:	78e3      	ldrb	r3, [r4, #3]
34012cfc:	78a1      	ldrb	r1, [r4, #2]
34012cfe:	051b      	lsls	r3, r3, #20
34012d00:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
34012d04:	7921      	ldrb	r1, [r4, #4]
  return HAL_OK;
34012d06:	2000      	movs	r0, #0
    WRITE_REG(hdcmipp->Instance->P1EXCR2, (((uint32_t)pExposureConfig->ShiftGreen << DCMIPP_P1EXCR2_SHFG_Pos) | \
34012d08:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
34012d0c:	7961      	ldrb	r1, [r4, #5]
34012d0e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
34012d12:	f8c2 3848 	str.w	r3, [r2, #2120]	@ 0x848
  return HAL_OK;
34012d16:	e7bf      	b.n	34012c98 <HAL_DCMIPP_PIPE_SetISPExposureConfig+0xc>
34012d18:	3402b9b3 	.word	0x3402b9b3

34012d1c <HAL_DCMIPP_PIPE_EnableISPExposure>:
{
34012d1c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012d1e:	b130      	cbz	r0, 34012d2e <HAL_DCMIPP_PIPE_EnableISPExposure+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012d20:	2902      	cmp	r1, #2
34012d22:	d906      	bls.n	34012d32 <HAL_DCMIPP_PIPE_EnableISPExposure+0x16>
34012d24:	f241 7101 	movw	r1, #5889	@ 0x1701
34012d28:	4807      	ldr	r0, [pc, #28]	@ (34012d48 <HAL_DCMIPP_PIPE_EnableISPExposure+0x2c>)
34012d2a:	f00c fa19 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012d2e:	2001      	movs	r0, #1
}
34012d30:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012d32:	2901      	cmp	r1, #1
34012d34:	d1fb      	bne.n	34012d2e <HAL_DCMIPP_PIPE_EnableISPExposure+0x12>
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34012d36:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012d38:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34012d3a:	f8d2 3844 	ldr.w	r3, [r2, #2116]	@ 0x844
34012d3e:	f043 0301 	orr.w	r3, r3, #1
34012d42:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
  return HAL_OK;
34012d46:	e7f3      	b.n	34012d30 <HAL_DCMIPP_PIPE_EnableISPExposure+0x14>
34012d48:	3402b9b3 	.word	0x3402b9b3

34012d4c <HAL_DCMIPP_PIPE_DisableISPExposure>:
{
34012d4c:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012d4e:	b130      	cbz	r0, 34012d5e <HAL_DCMIPP_PIPE_DisableISPExposure+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012d50:	2902      	cmp	r1, #2
34012d52:	d906      	bls.n	34012d62 <HAL_DCMIPP_PIPE_DisableISPExposure+0x16>
34012d54:	f241 711d 	movw	r1, #5917	@ 0x171d
34012d58:	4807      	ldr	r0, [pc, #28]	@ (34012d78 <HAL_DCMIPP_PIPE_DisableISPExposure+0x2c>)
34012d5a:	f00c fa01 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012d5e:	2001      	movs	r0, #1
}
34012d60:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012d62:	2901      	cmp	r1, #1
34012d64:	d1fb      	bne.n	34012d5e <HAL_DCMIPP_PIPE_DisableISPExposure+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34012d66:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012d68:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE);
34012d6a:	f8d2 3844 	ldr.w	r3, [r2, #2116]	@ 0x844
34012d6e:	f023 0301 	bic.w	r3, r3, #1
34012d72:	f8c2 3844 	str.w	r3, [r2, #2116]	@ 0x844
  return HAL_OK;
34012d76:	e7f3      	b.n	34012d60 <HAL_DCMIPP_PIPE_DisableISPExposure+0x14>
34012d78:	3402b9b3 	.word	0x3402b9b3

34012d7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig>:
{
34012d7c:	b570      	push	{r4, r5, r6, lr}
34012d7e:	460e      	mov	r6, r1
34012d80:	4614      	mov	r4, r2
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
34012d82:	4605      	mov	r5, r0
34012d84:	b908      	cbnz	r0, 34012d8a <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xe>
    return HAL_ERROR;
34012d86:	2001      	movs	r0, #1
}
34012d88:	bd70      	pop	{r4, r5, r6, pc}
  if ((hdcmipp == NULL) || (pContrastConfig == NULL))
34012d8a:	2a00      	cmp	r2, #0
34012d8c:	d0fb      	beq.n	34012d86 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012d8e:	2902      	cmp	r1, #2
34012d90:	d904      	bls.n	34012d9c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x20>
34012d92:	f241 713b 	movw	r1, #5947	@ 0x173b
34012d96:	4839      	ldr	r0, [pc, #228]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012d98:	f00c f9e2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_0));
34012d9c:	7823      	ldrb	r3, [r4, #0]
34012d9e:	2b3f      	cmp	r3, #63	@ 0x3f
34012da0:	d904      	bls.n	34012dac <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x30>
34012da2:	f241 713c 	movw	r1, #5948	@ 0x173c
34012da6:	4835      	ldr	r0, [pc, #212]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012da8:	f00c f9da 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_32));
34012dac:	7863      	ldrb	r3, [r4, #1]
34012dae:	2b3f      	cmp	r3, #63	@ 0x3f
34012db0:	d904      	bls.n	34012dbc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x40>
34012db2:	f241 713d 	movw	r1, #5949	@ 0x173d
34012db6:	4831      	ldr	r0, [pc, #196]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012db8:	f00c f9d2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_64));
34012dbc:	78a3      	ldrb	r3, [r4, #2]
34012dbe:	2b3f      	cmp	r3, #63	@ 0x3f
34012dc0:	d904      	bls.n	34012dcc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x50>
34012dc2:	f241 713e 	movw	r1, #5950	@ 0x173e
34012dc6:	482d      	ldr	r0, [pc, #180]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012dc8:	f00c f9ca 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_96));
34012dcc:	78e3      	ldrb	r3, [r4, #3]
34012dce:	2b3f      	cmp	r3, #63	@ 0x3f
34012dd0:	d904      	bls.n	34012ddc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x60>
34012dd2:	f241 713f 	movw	r1, #5951	@ 0x173f
34012dd6:	4829      	ldr	r0, [pc, #164]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012dd8:	f00c f9c2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_128));
34012ddc:	7923      	ldrb	r3, [r4, #4]
34012dde:	2b3f      	cmp	r3, #63	@ 0x3f
34012de0:	d904      	bls.n	34012dec <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x70>
34012de2:	f44f 51ba 	mov.w	r1, #5952	@ 0x1740
34012de6:	4825      	ldr	r0, [pc, #148]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012de8:	f00c f9ba 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_160));
34012dec:	7963      	ldrb	r3, [r4, #5]
34012dee:	2b3f      	cmp	r3, #63	@ 0x3f
34012df0:	d904      	bls.n	34012dfc <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x80>
34012df2:	f241 7141 	movw	r1, #5953	@ 0x1741
34012df6:	4821      	ldr	r0, [pc, #132]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012df8:	f00c f9b2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_192));
34012dfc:	79a3      	ldrb	r3, [r4, #6]
34012dfe:	2b3f      	cmp	r3, #63	@ 0x3f
34012e00:	d904      	bls.n	34012e0c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x90>
34012e02:	f241 7142 	movw	r1, #5954	@ 0x1742
34012e06:	481d      	ldr	r0, [pc, #116]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012e08:	f00c f9aa 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_224));
34012e0c:	79e3      	ldrb	r3, [r4, #7]
34012e0e:	2b3f      	cmp	r3, #63	@ 0x3f
34012e10:	d904      	bls.n	34012e1c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa0>
34012e12:	f241 7143 	movw	r1, #5955	@ 0x1743
34012e16:	4819      	ldr	r0, [pc, #100]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012e18:	f00c f9a2 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_LUMINANCE(pContrastConfig->LUM_256));
34012e1c:	7a23      	ldrb	r3, [r4, #8]
34012e1e:	2b3f      	cmp	r3, #63	@ 0x3f
34012e20:	d904      	bls.n	34012e2c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xb0>
34012e22:	f241 7144 	movw	r1, #5956	@ 0x1744
34012e26:	4815      	ldr	r0, [pc, #84]	@ (34012e7c <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0x100>)
34012e28:	f00c f99a 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012e2c:	2e01      	cmp	r6, #1
34012e2e:	d1aa      	bne.n	34012d86 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xa>
    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
34012e30:	682a      	ldr	r2, [r5, #0]
34012e32:	7821      	ldrb	r1, [r4, #0]
34012e34:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
34012e38:	2000      	movs	r0, #0
    MODIFY_REG(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_LUM0,
34012e3a:	f423 43fc 	bic.w	r3, r3, #32256	@ 0x7e00
34012e3e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34012e42:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
    WRITE_REG(hdcmipp->Instance->P1CTCR2, (((uint32_t)pContrastConfig->LUM_32 << DCMIPP_P1CTCR2_LUM1_Pos) |
34012e46:	78a3      	ldrb	r3, [r4, #2]
34012e48:	7861      	ldrb	r1, [r4, #1]
34012e4a:	045b      	lsls	r3, r3, #17
34012e4c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
34012e50:	78e1      	ldrb	r1, [r4, #3]
34012e52:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34012e56:	7921      	ldrb	r1, [r4, #4]
34012e58:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
34012e5c:	f8c2 38a4 	str.w	r3, [r2, #2212]	@ 0x8a4
    WRITE_REG(hdcmipp->Instance->P1CTCR3, (((uint32_t)pContrastConfig->LUM_160 << DCMIPP_P1CTCR3_LUM5_Pos) |
34012e60:	79a3      	ldrb	r3, [r4, #6]
34012e62:	7961      	ldrb	r1, [r4, #5]
34012e64:	045b      	lsls	r3, r3, #17
34012e66:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
34012e6a:	79e1      	ldrb	r1, [r4, #7]
34012e6c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
34012e70:	7a21      	ldrb	r1, [r4, #8]
34012e72:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
34012e76:	f8c2 38a8 	str.w	r3, [r2, #2216]	@ 0x8a8
  return HAL_OK;
34012e7a:	e785      	b.n	34012d88 <HAL_DCMIPP_PIPE_SetISPCtrlContrastConfig+0xc>
34012e7c:	3402b9b3 	.word	0x3402b9b3

34012e80 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast>:
{
34012e80:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012e82:	b130      	cbz	r0, 34012e92 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012e84:	2902      	cmp	r1, #2
34012e86:	d906      	bls.n	34012e96 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x16>
34012e88:	f241 716c 	movw	r1, #5996	@ 0x176c
34012e8c:	4807      	ldr	r0, [pc, #28]	@ (34012eac <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x2c>)
34012e8e:	f00c f967 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012e92:	2001      	movs	r0, #1
}
34012e94:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012e96:	2901      	cmp	r1, #1
34012e98:	d1fb      	bne.n	34012e92 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x12>
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34012e9a:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012e9c:	2000      	movs	r0, #0
    SET_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34012e9e:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
34012ea2:	f043 0301 	orr.w	r3, r3, #1
34012ea6:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
34012eaa:	e7f3      	b.n	34012e94 <HAL_DCMIPP_PIPE_EnableISPCtrlContrast+0x14>
34012eac:	3402b9b3 	.word	0x3402b9b3

34012eb0 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast>:
{
34012eb0:	b508      	push	{r3, lr}
  if (hdcmipp == NULL)
34012eb2:	b130      	cbz	r0, 34012ec2 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x12>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012eb4:	2902      	cmp	r1, #2
34012eb6:	d906      	bls.n	34012ec6 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x16>
34012eb8:	f241 7188 	movw	r1, #6024	@ 0x1788
34012ebc:	4807      	ldr	r0, [pc, #28]	@ (34012edc <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x2c>)
34012ebe:	f00c f94f 	bl	3401f160 <assert_failed>
    return HAL_ERROR;
34012ec2:	2001      	movs	r0, #1
}
34012ec4:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE1)
34012ec6:	2901      	cmp	r1, #1
34012ec8:	d1fb      	bne.n	34012ec2 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x12>
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34012eca:	6802      	ldr	r2, [r0, #0]
  return HAL_OK;
34012ecc:	2000      	movs	r0, #0
    CLEAR_BIT(hdcmipp->Instance->P1CTCR1, DCMIPP_P1CTCR1_ENABLE);
34012ece:	f8d2 38a0 	ldr.w	r3, [r2, #2208]	@ 0x8a0
34012ed2:	f023 0301 	bic.w	r3, r3, #1
34012ed6:	f8c2 38a0 	str.w	r3, [r2, #2208]	@ 0x8a0
  return HAL_OK;
34012eda:	e7f3      	b.n	34012ec4 <HAL_DCMIPP_PIPE_DisableISPCtrlContrast+0x14>
34012edc:	3402b9b3 	.word	0x3402b9b3

34012ee0 <HAL_DCMIPP_PIPE_SetPitch>:
{
34012ee0:	b570      	push	{r4, r5, r6, lr}
34012ee2:	460e      	mov	r6, r1
34012ee4:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34012ee6:	4605      	mov	r5, r0
34012ee8:	b908      	cbnz	r0, 34012eee <HAL_DCMIPP_PIPE_SetPitch+0xe>
    return HAL_ERROR;
34012eea:	2001      	movs	r0, #1
}
34012eec:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012eee:	2902      	cmp	r1, #2
34012ef0:	d904      	bls.n	34012efc <HAL_DCMIPP_PIPE_SetPitch+0x1c>
34012ef2:	f241 71d2 	movw	r1, #6098	@ 0x17d2
34012ef6:	4812      	ldr	r0, [pc, #72]	@ (34012f40 <HAL_DCMIPP_PIPE_SetPitch+0x60>)
34012ef8:	f00c f932 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIXEL_PIPE_PITCH(LinePitch));
34012efc:	0723      	lsls	r3, r4, #28
34012efe:	d102      	bne.n	34012f06 <HAL_DCMIPP_PIPE_SetPitch+0x26>
34012f00:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
34012f04:	d304      	bcc.n	34012f10 <HAL_DCMIPP_PIPE_SetPitch+0x30>
34012f06:	f241 71d3 	movw	r1, #6099	@ 0x17d3
34012f0a:	480d      	ldr	r0, [pc, #52]	@ (34012f40 <HAL_DCMIPP_PIPE_SetPitch+0x60>)
34012f0c:	f00c f928 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012f10:	2e01      	cmp	r6, #1
34012f12:	d109      	bne.n	34012f28 <HAL_DCMIPP_PIPE_SetPitch+0x48>
    MODIFY_REG(hdcmipp->Instance->P1PPM0PR, DCMIPP_P1PPM0PR_PITCH, LinePitch << DCMIPP_P1PPM0PR_PITCH_Pos);
34012f14:	682a      	ldr	r2, [r5, #0]
34012f16:	f8d2 39cc 	ldr.w	r3, [r2, #2508]	@ 0x9cc
34012f1a:	f36f 030e 	bfc	r3, #0, #15
34012f1e:	4323      	orrs	r3, r4
34012f20:	f8c2 39cc 	str.w	r3, [r2, #2508]	@ 0x9cc
  return HAL_OK;
34012f24:	2000      	movs	r0, #0
34012f26:	e7e1      	b.n	34012eec <HAL_DCMIPP_PIPE_SetPitch+0xc>
  else if (Pipe == DCMIPP_PIPE2)
34012f28:	2e02      	cmp	r6, #2
34012f2a:	d1de      	bne.n	34012eea <HAL_DCMIPP_PIPE_SetPitch+0xa>
    MODIFY_REG(hdcmipp->Instance->P2PPM0PR, DCMIPP_P2PPM0PR_PITCH, LinePitch << DCMIPP_P2PPM0PR_PITCH_Pos);
34012f2c:	682a      	ldr	r2, [r5, #0]
34012f2e:	f8d2 3dcc 	ldr.w	r3, [r2, #3532]	@ 0xdcc
34012f32:	f36f 030e 	bfc	r3, #0, #15
34012f36:	4323      	orrs	r3, r4
34012f38:	f8c2 3dcc 	str.w	r3, [r2, #3532]	@ 0xdcc
34012f3c:	e7f2      	b.n	34012f24 <HAL_DCMIPP_PIPE_SetPitch+0x44>
34012f3e:	bf00      	nop
34012f40:	3402b9b3 	.word	0x3402b9b3

34012f44 <HAL_DCMIPP_PIPE_SetPixelPackerFormat>:
{
34012f44:	b570      	push	{r4, r5, r6, lr}
34012f46:	460e      	mov	r6, r1
34012f48:	4614      	mov	r4, r2
  if (hdcmipp == NULL)
34012f4a:	4605      	mov	r5, r0
34012f4c:	b908      	cbnz	r0, 34012f52 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xe>
    return HAL_ERROR;
34012f4e:	2001      	movs	r0, #1
}
34012f50:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012f52:	2902      	cmp	r1, #2
34012f54:	d917      	bls.n	34012f86 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x42>
34012f56:	f241 71f6 	movw	r1, #6134	@ 0x17f6
34012f5a:	4812      	ldr	r0, [pc, #72]	@ (34012fa4 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x60>)
34012f5c:	f00c f900 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(PixelPackerFormat));
34012f60:	2c09      	cmp	r4, #9
34012f62:	d9f4      	bls.n	34012f4e <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xa>
34012f64:	f241 71f7 	movw	r1, #6135	@ 0x17f7
34012f68:	480e      	ldr	r0, [pc, #56]	@ (34012fa4 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x60>)
34012f6a:	f00c f8f9 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
34012f6e:	2e01      	cmp	r6, #1
34012f70:	d10c      	bne.n	34012f8c <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x48>
    MODIFY_REG(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_FORMAT, PixelPackerFormat);
34012f72:	682a      	ldr	r2, [r5, #0]
34012f74:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34012f78:	f023 030f 	bic.w	r3, r3, #15
34012f7c:	4323      	orrs	r3, r4
34012f7e:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
34012f82:	2000      	movs	r0, #0
34012f84:	e7e4      	b.n	34012f50 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xc>
  assert_param(IS_DCMIPP_PIXEL_PACKER_FORMAT(PixelPackerFormat));
34012f86:	2a09      	cmp	r2, #9
34012f88:	d9f1      	bls.n	34012f6e <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x2a>
34012f8a:	e7eb      	b.n	34012f64 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x20>
  else if (Pipe == DCMIPP_PIPE2)
34012f8c:	2e02      	cmp	r6, #2
34012f8e:	d1de      	bne.n	34012f4e <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0xa>
    MODIFY_REG(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_FORMAT, PixelPackerFormat);
34012f90:	682a      	ldr	r2, [r5, #0]
34012f92:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
34012f96:	f023 030f 	bic.w	r3, r3, #15
34012f9a:	4323      	orrs	r3, r4
34012f9c:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34012fa0:	e7ef      	b.n	34012f82 <HAL_DCMIPP_PIPE_SetPixelPackerFormat+0x3e>
34012fa2:	bf00      	nop
34012fa4:	3402b9b3 	.word	0x3402b9b3

34012fa8 <HAL_DCMIPP_PIPE_SetMemoryAddress>:
{
34012fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34012faa:	460d      	mov	r5, r1
34012fac:	4616      	mov	r6, r2
34012fae:	461c      	mov	r4, r3
  if (hdcmipp == NULL)
34012fb0:	4607      	mov	r7, r0
34012fb2:	b908      	cbnz	r0, 34012fb8 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x10>
    return HAL_ERROR;
34012fb4:	2001      	movs	r0, #1
}
34012fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DCMIPP_PIPE(Pipe));
34012fb8:	2902      	cmp	r1, #2
34012fba:	d912      	bls.n	34012fe2 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x3a>
34012fbc:	f641 0165 	movw	r1, #6245	@ 0x1865
34012fc0:	481a      	ldr	r0, [pc, #104]	@ (3401302c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x84>)
34012fc2:	f00c f8cd 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_MEMORY_ADDRESS(Memory));
34012fc6:	2e01      	cmp	r6, #1
34012fc8:	d9f4      	bls.n	34012fb4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
34012fca:	f641 0166 	movw	r1, #6246	@ 0x1866
34012fce:	4817      	ldr	r0, [pc, #92]	@ (3401302c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x84>)
34012fd0:	f00c f8c6 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE0)
34012fd4:	b175      	cbz	r5, 34012ff4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x4c>
  else if (Pipe == DCMIPP_PIPE1)
34012fd6:	2d01      	cmp	r5, #1
34012fd8:	d11a      	bne.n	34013010 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x68>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34012fda:	683a      	ldr	r2, [r7, #0]
      WRITE_REG(hdcmipp->Instance->P1PPM0AR2, DstAddress);
34012fdc:	f8c2 49c8 	str.w	r4, [r2, #2504]	@ 0x9c8
34012fe0:	e006      	b.n	34012ff0 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  assert_param(IS_DCMIPP_MEMORY_ADDRESS(Memory));
34012fe2:	2a01      	cmp	r2, #1
34012fe4:	d8f1      	bhi.n	34012fca <HAL_DCMIPP_PIPE_SetMemoryAddress+0x22>
  if (Pipe == DCMIPP_PIPE0)
34012fe6:	6803      	ldr	r3, [r0, #0]
34012fe8:	b9c1      	cbnz	r1, 3401301c <HAL_DCMIPP_PIPE_SetMemoryAddress+0x74>
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34012fea:	b91a      	cbnz	r2, 34012ff4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x4c>
      WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
34012fec:	f8c3 45c4 	str.w	r4, [r3, #1476]	@ 0x5c4
  return HAL_OK;
34012ff0:	2000      	movs	r0, #0
34012ff2:	e7e0      	b.n	34012fb6 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xe>
      if ((hdcmipp->Instance->P0PPCR & DCMIPP_P0PPCR_DBM) == DCMIPP_P0PPCR_DBM)
34012ff4:	683b      	ldr	r3, [r7, #0]
34012ff6:	f8d3 25c0 	ldr.w	r2, [r3, #1472]	@ 0x5c0
34012ffa:	03d2      	lsls	r2, r2, #15
34012ffc:	d5da      	bpl.n	34012fb4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
        WRITE_REG(hdcmipp->Instance->P0PPM0AR2, DstAddress);
34012ffe:	f8c3 45c8 	str.w	r4, [r3, #1480]	@ 0x5c8
34013002:	e7f5      	b.n	34012ff0 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34013004:	461a      	mov	r2, r3
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34013006:	2e00      	cmp	r6, #0
34013008:	d1e8      	bne.n	34012fdc <HAL_DCMIPP_PIPE_SetMemoryAddress+0x34>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
3401300a:	f8c3 49c4 	str.w	r4, [r3, #2500]	@ 0x9c4
3401300e:	e7ef      	b.n	34012ff0 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  else if (Pipe == DCMIPP_PIPE2)
34013010:	2d02      	cmp	r5, #2
34013012:	d1cf      	bne.n	34012fb4 <HAL_DCMIPP_PIPE_SetMemoryAddress+0xc>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34013014:	683a      	ldr	r2, [r7, #0]
      WRITE_REG(hdcmipp->Instance->P2PPM0AR2, DstAddress);
34013016:	f8c2 4dc8 	str.w	r4, [r2, #3528]	@ 0xdc8
3401301a:	e7e9      	b.n	34012ff0 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
  else if (Pipe == DCMIPP_PIPE1)
3401301c:	2901      	cmp	r1, #1
3401301e:	d0f1      	beq.n	34013004 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x5c>
      WRITE_REG(hdcmipp->Instance->P1PPM0AR1, DstAddress);
34013020:	461a      	mov	r2, r3
    if (Memory == DCMIPP_MEMORY_ADDRESS_0)
34013022:	2e00      	cmp	r6, #0
34013024:	d1f7      	bne.n	34013016 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x6e>
      WRITE_REG(hdcmipp->Instance->P2PPM0AR1, DstAddress);
34013026:	f8c3 4dc4 	str.w	r4, [r3, #3524]	@ 0xdc4
3401302a:	e7e1      	b.n	34012ff0 <HAL_DCMIPP_PIPE_SetMemoryAddress+0x48>
3401302c:	3402b9b3 	.word	0x3402b9b3

34013030 <HAL_DCMIPP_PIPE_EnableRedBlueSwap>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34013030:	2902      	cmp	r1, #2
{
34013032:	b538      	push	{r3, r4, r5, lr}
34013034:	4604      	mov	r4, r0
34013036:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34013038:	d904      	bls.n	34013044 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x14>
3401303a:	f641 1139 	movw	r1, #6457	@ 0x1939
3401303e:	480f      	ldr	r0, [pc, #60]	@ (3401307c <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x4c>)
34013040:	f00c f88e 	bl	3401f160 <assert_failed>
  if (hdcmipp == NULL)
34013044:	b1bc      	cbz	r4, 34013076 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x46>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34013046:	7923      	ldrb	r3, [r4, #4]
34013048:	2b02      	cmp	r3, #2
3401304a:	d108      	bne.n	3401305e <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x2e>
    if (Pipe == DCMIPP_PIPE1)
3401304c:	2d01      	cmp	r5, #1
3401304e:	d108      	bne.n	34013062 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x32>
      SET_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_SWAPRB);
34013050:	6822      	ldr	r2, [r4, #0]
34013052:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
34013056:	f043 0310 	orr.w	r3, r3, #16
3401305a:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
3401305e:	2000      	movs	r0, #0
}
34013060:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE2)
34013062:	2d02      	cmp	r5, #2
34013064:	d107      	bne.n	34013076 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x46>
      SET_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_SWAPRB);
34013066:	6822      	ldr	r2, [r4, #0]
34013068:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
3401306c:	f043 0310 	orr.w	r3, r3, #16
34013070:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
34013074:	e7f3      	b.n	3401305e <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x2e>
    return HAL_ERROR;
34013076:	2001      	movs	r0, #1
34013078:	e7f2      	b.n	34013060 <HAL_DCMIPP_PIPE_EnableRedBlueSwap+0x30>
3401307a:	bf00      	nop
3401307c:	3402b9b3 	.word	0x3402b9b3

34013080 <HAL_DCMIPP_PIPE_DisableRedBlueSwap>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
34013080:	2902      	cmp	r1, #2
{
34013082:	b538      	push	{r3, r4, r5, lr}
34013084:	4604      	mov	r4, r0
34013086:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_PIPE(Pipe));
34013088:	d904      	bls.n	34013094 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x14>
3401308a:	f641 115b 	movw	r1, #6491	@ 0x195b
3401308e:	480f      	ldr	r0, [pc, #60]	@ (340130cc <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x4c>)
34013090:	f00c f866 	bl	3401f160 <assert_failed>
  if (hdcmipp == NULL)
34013094:	b1bc      	cbz	r4, 340130c6 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x46>
  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
34013096:	7923      	ldrb	r3, [r4, #4]
34013098:	2b02      	cmp	r3, #2
3401309a:	d108      	bne.n	340130ae <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x2e>
    if (Pipe == DCMIPP_PIPE1)
3401309c:	2d01      	cmp	r5, #1
3401309e:	d108      	bne.n	340130b2 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x32>
      CLEAR_BIT(hdcmipp->Instance->P1PPCR, DCMIPP_P1PPCR_SWAPRB);
340130a0:	6822      	ldr	r2, [r4, #0]
340130a2:	f8d2 39c0 	ldr.w	r3, [r2, #2496]	@ 0x9c0
340130a6:	f023 0310 	bic.w	r3, r3, #16
340130aa:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  return HAL_OK;
340130ae:	2000      	movs	r0, #0
}
340130b0:	bd38      	pop	{r3, r4, r5, pc}
    else if (Pipe == DCMIPP_PIPE2)
340130b2:	2d02      	cmp	r5, #2
340130b4:	d107      	bne.n	340130c6 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x46>
      CLEAR_BIT(hdcmipp->Instance->P2PPCR, DCMIPP_P2PPCR_SWAPRB);
340130b6:	6822      	ldr	r2, [r4, #0]
340130b8:	f8d2 3dc0 	ldr.w	r3, [r2, #3520]	@ 0xdc0
340130bc:	f023 0310 	bic.w	r3, r3, #16
340130c0:	f8c2 3dc0 	str.w	r3, [r2, #3520]	@ 0xdc0
340130c4:	e7f3      	b.n	340130ae <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x2e>
    return HAL_ERROR;
340130c6:	2001      	movs	r0, #1
340130c8:	e7f2      	b.n	340130b0 <HAL_DCMIPP_PIPE_DisableRedBlueSwap+0x30>
340130ca:	bf00      	nop
340130cc:	3402b9b3 	.word	0x3402b9b3

340130d0 <HAL_DCMIPP_PIPE_CSI_EnableShare>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
340130d0:	2902      	cmp	r1, #2
{
340130d2:	b508      	push	{r3, lr}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340130d4:	d906      	bls.n	340130e4 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x14>
340130d6:	f641 217d 	movw	r1, #6781	@ 0x1a7d
340130da:	480a      	ldr	r0, [pc, #40]	@ (34013104 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x34>)
340130dc:	f00c f840 	bl	3401f160 <assert_failed>
      return HAL_ERROR;
340130e0:	2001      	movs	r0, #1
}
340130e2:	bd08      	pop	{r3, pc}
  if (Pipe == DCMIPP_PIPE2)
340130e4:	d1fc      	bne.n	340130e0 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x10>
    tmp1 = hdcmipp->Instance->P2FSCR;
340130e6:	6803      	ldr	r3, [r0, #0]
340130e8:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	@ 0xc04
    tmp2 = hdcmipp->Instance->P1FSCR;
340130ec:	f8d3 1804 	ldr.w	r1, [r3, #2052]	@ 0x804
    if (((tmp1 & DCMIPP_P2FSCR_PIPEN) == DCMIPP_P2FSCR_PIPEN) || ((tmp2 & DCMIPP_P1FSCR_PIPEN) == DCMIPP_P1FSCR_PIPEN))
340130f0:	430a      	orrs	r2, r1
340130f2:	d4f5      	bmi.n	340130e0 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x10>
      CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEDIFF);
340130f4:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
  return HAL_OK;
340130f8:	2000      	movs	r0, #0
      CLEAR_BIT(hdcmipp->Instance->P1FSCR, DCMIPP_P1FSCR_PIPEDIFF);
340130fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
340130fe:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  return HAL_OK;
34013102:	e7ee      	b.n	340130e2 <HAL_DCMIPP_PIPE_CSI_EnableShare+0x12>
34013104:	3402b9b3 	.word	0x3402b9b3

34013108 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter>:
{
34013108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401310a:	460e      	mov	r6, r1
3401310c:	4615      	mov	r5, r2
3401310e:	461c      	mov	r4, r3
  if ((hdcmipp == NULL) || (pCounter == NULL))
34013110:	4607      	mov	r7, r0
34013112:	b908      	cbnz	r0, 34013118 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x10>
    return HAL_ERROR;
34013114:	2001      	movs	r0, #1
}
34013116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hdcmipp == NULL) || (pCounter == NULL))
34013118:	2b00      	cmp	r3, #0
3401311a:	d0fb      	beq.n	34013114 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401311c:	2902      	cmp	r1, #2
3401311e:	d904      	bls.n	3401312a <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x22>
34013120:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
34013124:	4810      	ldr	r0, [pc, #64]	@ (34013168 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x60>)
34013126:	f00c f81b 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_STAT_EXTRACTION_MODULE(ModuleID));
3401312a:	1e6b      	subs	r3, r5, #1
3401312c:	2b02      	cmp	r3, #2
3401312e:	d908      	bls.n	34013142 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x3a>
34013130:	f641 4101 	movw	r1, #7169	@ 0x1c01
34013134:	480c      	ldr	r0, [pc, #48]	@ (34013168 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x60>)
34013136:	f00c f813 	bl	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401313a:	2e01      	cmp	r6, #1
3401313c:	d1ea      	bne.n	34013114 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
  return HAL_OK;
3401313e:	2000      	movs	r0, #0
34013140:	e7e9      	b.n	34013116 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xe>
  if (Pipe == DCMIPP_PIPE1)
34013142:	2e01      	cmp	r6, #1
34013144:	d1e6      	bne.n	34013114 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0xc>
    switch (ModuleID)
34013146:	2d02      	cmp	r5, #2
34013148:	683b      	ldr	r3, [r7, #0]
3401314a:	d007      	beq.n	3401315c <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x54>
3401314c:	2d03      	cmp	r5, #3
3401314e:	d008      	beq.n	34013162 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x5a>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST1SR & DCMIPP_P1ST1SR_ACCU));
34013150:	f8d3 3864 	ldr.w	r3, [r3, #2148]	@ 0x864
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
34013154:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34013158:	6023      	str	r3, [r4, #0]
        break;
3401315a:	e7f0      	b.n	3401313e <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x36>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST2SR & DCMIPP_P1ST2SR_ACCU));
3401315c:	f8d3 3868 	ldr.w	r3, [r3, #2152]	@ 0x868
34013160:	e7f8      	b.n	34013154 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
        *pCounter = (READ_REG(hdcmipp->Instance->P1ST3SR & DCMIPP_P1ST3SR_ACCU));
34013162:	f8d3 386c 	ldr.w	r3, [r3, #2156]	@ 0x86c
34013166:	e7f5      	b.n	34013154 <HAL_DCMIPP_PIPE_GetISPAccumulatedStatisticsCounter+0x4c>
34013168:	3402b9b3 	.word	0x3402b9b3

3401316c <HAL_DCMIPP_PIPE_GetISPExposureConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401316c:	2902      	cmp	r1, #2
3401316e:	d904      	bls.n	3401317a <HAL_DCMIPP_PIPE_GetISPExposureConfig+0xe>
34013170:	f641 41e6 	movw	r1, #7398	@ 0x1ce6
34013174:	480c      	ldr	r0, [pc, #48]	@ (340131a8 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x3c>)
34013176:	f00b bff3 	b.w	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
3401317a:	2901      	cmp	r1, #1
3401317c:	d113      	bne.n	340131a6 <HAL_DCMIPP_PIPE_GetISPExposureConfig+0x3a>
    tmp = READ_REG(hdcmipp->Instance->P1EXCR2);
3401317e:	6801      	ldr	r1, [r0, #0]
34013180:	f8d1 3848 	ldr.w	r3, [r1, #2120]	@ 0x848
    pExposureConfig->MultiplierBlue  = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTB) >> DCMIPP_P1EXCR2_MULTB_Pos);
34013184:	0918      	lsrs	r0, r3, #4
34013186:	7150      	strb	r0, [r2, #5]
    pExposureConfig->ShiftBlue       = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFB) >> DCMIPP_P1EXCR2_SHFB_Pos);
34013188:	f3c3 3002 	ubfx	r0, r3, #12, #3
3401318c:	7110      	strb	r0, [r2, #4]
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
3401318e:	f3c3 7002 	ubfx	r0, r3, #28, #3
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34013192:	0d1b      	lsrs	r3, r3, #20
    pExposureConfig->ShiftGreen      = (uint8_t)((tmp & DCMIPP_P1EXCR2_SHFG) >> DCMIPP_P1EXCR2_SHFG_Pos);
34013194:	7090      	strb	r0, [r2, #2]
    pExposureConfig->MultiplierGreen = (uint8_t)((tmp & DCMIPP_P1EXCR2_MULTG) >> DCMIPP_P1EXCR2_MULTG_Pos);
34013196:	70d3      	strb	r3, [r2, #3]
    tmp = READ_REG(hdcmipp->Instance->P1EXCR1);
34013198:	f8d1 3844 	ldr.w	r3, [r1, #2116]	@ 0x844
    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
3401319c:	0d19      	lsrs	r1, r3, #20
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
3401319e:	f3c3 7302 	ubfx	r3, r3, #28, #3
    pExposureConfig->MultiplierRed   = (uint8_t)((tmp & DCMIPP_P1EXCR1_MULTR) >> DCMIPP_P1EXCR1_MULTR_Pos);
340131a2:	7051      	strb	r1, [r2, #1]
    pExposureConfig->ShiftRed        = (uint8_t)((tmp & DCMIPP_P1EXCR1_SHFR) >> DCMIPP_P1EXCR1_SHFR_Pos);
340131a4:	7013      	strb	r3, [r2, #0]
}
340131a6:	4770      	bx	lr
340131a8:	3402b9b3 	.word	0x3402b9b3

340131ac <HAL_DCMIPP_PIPE_GetISPColorConversionConfig>:
  assert_param(IS_DCMIPP_PIPE(Pipe));
340131ac:	2902      	cmp	r1, #2
{
340131ae:	b470      	push	{r4, r5, r6}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340131b0:	d905      	bls.n	340131be <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x12>
}
340131b2:	bc70      	pop	{r4, r5, r6}
  assert_param(IS_DCMIPP_PIPE(Pipe));
340131b4:	f641 511f 	movw	r1, #7455	@ 0x1d1f
340131b8:	484a      	ldr	r0, [pc, #296]	@ (340132e4 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x138>)
340131ba:	f00b bfd1 	b.w	3401f160 <assert_failed>
  if (Pipe == DCMIPP_PIPE1)
340131be:	2901      	cmp	r1, #1
340131c0:	f040 808d 	bne.w	340132de <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x132>
    tmp = (uint16_t)READ_REG(hdcmipp->Instance->P1CCCR);
340131c4:	6803      	ldr	r3, [r0, #0]
340131c6:	f8d3 1880 	ldr.w	r1, [r3, #2176]	@ 0x880
                                                 ? ENABLE : DISABLE;
340131ca:	f3c1 0080 	ubfx	r0, r1, #2, #1
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
340131ce:	f001 0102 	and.w	r1, r1, #2
    pColorConversionConfig->ClampOutputSamples = (((tmp & DCMIPP_P1CCCR_CLAMP) >> DCMIPP_P1YUVCR_CLAMP_Pos) != 0U)
340131d2:	7010      	strb	r0, [r2, #0]
    pColorConversionConfig->OutputSamplesType  = (uint8_t)(tmp & DCMIPP_P1CCCR_TYPE);
340131d4:	7051      	strb	r1, [r2, #1]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
340131d6:	f8d3 4884 	ldr.w	r4, [r3, #2180]	@ 0x884
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
340131da:	4943      	ldr	r1, [pc, #268]	@ (340132e8 <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x13c>)
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RG) >> DCMIPP_P1CCRR1_RG_Pos);
340131dc:	f3c4 400a 	ubfx	r0, r4, #16, #11
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
340131e0:	ea40 0501 	orr.w	r5, r0, r1
340131e4:	f014 6f80 	tst.w	r4, #67108864	@ 0x4000000
340131e8:	bf18      	it	ne
340131ea:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
340131ec:	f8d3 4884 	ldr.w	r4, [r3, #2180]	@ 0x884
    pColorConversionConfig->RG = (int16_t)GET_MATRIX_VALUE11(tmp);
340131f0:	8090      	strh	r0, [r2, #4]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR1, DCMIPP_P1CCRR1_RR) >> DCMIPP_P1CCRR1_RR_Pos);
340131f2:	f3c4 000a 	ubfx	r0, r4, #0, #11
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
340131f6:	ea40 0501 	orr.w	r5, r0, r1
340131fa:	f414 6f80 	tst.w	r4, #1024	@ 0x400
340131fe:	bf18      	it	ne
34013200:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
34013202:	f8d3 5888 	ldr.w	r5, [r3, #2184]	@ 0x888
    pColorConversionConfig->RR = (int16_t)GET_MATRIX_VALUE11(tmp);
34013206:	8050      	strh	r0, [r2, #2]
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
34013208:	4838      	ldr	r0, [pc, #224]	@ (340132ec <HAL_DCMIPP_PIPE_GetISPColorConversionConfig+0x140>)
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RA) >> DCMIPP_P1CCRR2_RA_Pos);
3401320a:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
3401320e:	ea44 0600 	orr.w	r6, r4, r0
34013212:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34013216:	bf18      	it	ne
34013218:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
3401321a:	f8d3 5888 	ldr.w	r5, [r3, #2184]	@ 0x888
    pColorConversionConfig->RA = (int16_t)GET_MATRIX_VALUE10(tmp);
3401321e:	8114      	strh	r4, [r2, #8]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCRR2, DCMIPP_P1CCRR2_RB) >> DCMIPP_P1CCRR2_RB_Pos);
34013220:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34013224:	ea44 0601 	orr.w	r6, r4, r1
34013228:	f415 6f80 	tst.w	r5, #1024	@ 0x400
3401322c:	bf18      	it	ne
3401322e:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34013230:	f8d3 588c 	ldr.w	r5, [r3, #2188]	@ 0x88c
    pColorConversionConfig->RB = (int16_t)GET_MATRIX_VALUE11(tmp);
34013234:	80d4      	strh	r4, [r2, #6]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GG) >> DCMIPP_P1CCGR1_GG_Pos);
34013236:	f3c5 440a 	ubfx	r4, r5, #16, #11
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
3401323a:	ea44 0601 	orr.w	r6, r4, r1
3401323e:	f015 6f80 	tst.w	r5, #67108864	@ 0x4000000
34013242:	bf18      	it	ne
34013244:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
34013246:	f8d3 588c 	ldr.w	r5, [r3, #2188]	@ 0x88c
    pColorConversionConfig->GG = (int16_t)GET_MATRIX_VALUE11(tmp);
3401324a:	8194      	strh	r4, [r2, #12]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR1, DCMIPP_P1CCGR1_GR) >> DCMIPP_P1CCGR1_GR_Pos);
3401324c:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34013250:	ea44 0601 	orr.w	r6, r4, r1
34013254:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34013258:	bf18      	it	ne
3401325a:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
3401325c:	f8d3 5890 	ldr.w	r5, [r3, #2192]	@ 0x890
    pColorConversionConfig->GR = (int16_t)GET_MATRIX_VALUE11(tmp);
34013260:	8154      	strh	r4, [r2, #10]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GA) >> DCMIPP_P1CCGR2_GA_Pos);
34013262:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34013266:	ea44 0600 	orr.w	r6, r4, r0
3401326a:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
3401326e:	bf18      	it	ne
34013270:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34013272:	f8d3 5890 	ldr.w	r5, [r3, #2192]	@ 0x890
    pColorConversionConfig->GA = (int16_t)GET_MATRIX_VALUE10(tmp);
34013276:	8214      	strh	r4, [r2, #16]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCGR2, DCMIPP_P1CCGR2_GB) >> DCMIPP_P1CCGR2_GB_Pos);
34013278:	f3c5 040a 	ubfx	r4, r5, #0, #11
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
3401327c:	ea44 0601 	orr.w	r6, r4, r1
34013280:	f415 6f80 	tst.w	r5, #1024	@ 0x400
34013284:	bf18      	it	ne
34013286:	4634      	movne	r4, r6
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
34013288:	f8d3 5898 	ldr.w	r5, [r3, #2200]	@ 0x898
    pColorConversionConfig->GB = (int16_t)GET_MATRIX_VALUE11(tmp);
3401328c:	81d4      	strh	r4, [r2, #14]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BA) >> DCMIPP_P1CCBR2_BA_Pos);
3401328e:	f3c5 4409 	ubfx	r4, r5, #16, #10
    pColorConversionConfig->BA = (int16_t)GET_MATRIX_VALUE10(tmp);
34013292:	4320      	orrs	r0, r4
34013294:	f015 7f00 	tst.w	r5, #33554432	@ 0x2000000
34013298:	bf18      	it	ne
3401329a:	4604      	movne	r4, r0
3401329c:	8314      	strh	r4, [r2, #24]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR2, DCMIPP_P1CCBR2_BB) >> DCMIPP_P1CCBR2_BB_Pos);
3401329e:	f8d3 4898 	ldr.w	r4, [r3, #2200]	@ 0x898
340132a2:	f3c4 000a 	ubfx	r0, r4, #0, #11
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
340132a6:	ea40 0501 	orr.w	r5, r0, r1
340132aa:	f414 6f80 	tst.w	r4, #1024	@ 0x400
340132ae:	bf18      	it	ne
340132b0:	4628      	movne	r0, r5
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
340132b2:	f8d3 4894 	ldr.w	r4, [r3, #2196]	@ 0x894
    pColorConversionConfig->BB = (int16_t)GET_MATRIX_VALUE11(tmp);
340132b6:	82d0      	strh	r0, [r2, #22]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BG) >> DCMIPP_P1CCBR1_BG_Pos);
340132b8:	f3c4 400a 	ubfx	r0, r4, #16, #11
    pColorConversionConfig->BG = (int16_t)GET_MATRIX_VALUE11(tmp);
340132bc:	ea40 0501 	orr.w	r5, r0, r1
340132c0:	f014 6f80 	tst.w	r4, #67108864	@ 0x4000000
340132c4:	bf18      	it	ne
340132c6:	4628      	movne	r0, r5
340132c8:	8290      	strh	r0, [r2, #20]
    tmp = (uint16_t)(READ_FIELD(hdcmipp->Instance->P1CCBR1, DCMIPP_P1CCBR1_BR) >> DCMIPP_P1CCBR1_BR_Pos);
340132ca:	f8d3 0894 	ldr.w	r0, [r3, #2196]	@ 0x894
340132ce:	f3c0 030a 	ubfx	r3, r0, #0, #11
    pColorConversionConfig->BR = (int16_t)GET_MATRIX_VALUE11(tmp);
340132d2:	4319      	orrs	r1, r3
340132d4:	f410 6f80 	tst.w	r0, #1024	@ 0x400
340132d8:	bf18      	it	ne
340132da:	460b      	movne	r3, r1
340132dc:	8253      	strh	r3, [r2, #18]
}
340132de:	bc70      	pop	{r4, r5, r6}
340132e0:	4770      	bx	lr
340132e2:	bf00      	nop
340132e4:	3402b9b3 	.word	0x3402b9b3
340132e8:	fffff800 	.word	0xfffff800
340132ec:	fffffc00 	.word	0xfffffc00

340132f0 <HAL_DCMIPP_PIPE_IsEnabledISPExposure>:
{
340132f0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340132f2:	4a10      	ldr	r2, [pc, #64]	@ (34013334 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x44>)
340132f4:	6803      	ldr	r3, [r0, #0]
{
340132f6:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340132f8:	4293      	cmp	r3, r2
{
340132fa:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
340132fc:	d008      	beq.n	34013310 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x20>
340132fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34013302:	4293      	cmp	r3, r2
34013304:	d004      	beq.n	34013310 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x20>
34013306:	f641 519b 	movw	r1, #7579	@ 0x1d9b
3401330a:	480b      	ldr	r0, [pc, #44]	@ (34013338 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x48>)
3401330c:	f00b ff28 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
34013310:	2d02      	cmp	r5, #2
34013312:	d906      	bls.n	34013322 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x32>
34013314:	f641 519c 	movw	r1, #7580	@ 0x1d9c
34013318:	4807      	ldr	r0, [pc, #28]	@ (34013338 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x48>)
3401331a:	f00b ff21 	bl	3401f160 <assert_failed>
    return 0;
3401331e:	2000      	movs	r0, #0
}
34013320:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
34013322:	2d01      	cmp	r5, #1
34013324:	d1fb      	bne.n	3401331e <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1EXCR1, DCMIPP_P1EXCR1_ENABLE) == DCMIPP_P1EXCR1_ENABLE) ? 1U : 0U);
34013326:	6823      	ldr	r3, [r4, #0]
34013328:	f8d3 0844 	ldr.w	r0, [r3, #2116]	@ 0x844
3401332c:	f000 0001 	and.w	r0, r0, #1
34013330:	e7f6      	b.n	34013320 <HAL_DCMIPP_PIPE_IsEnabledISPExposure+0x30>
34013332:	bf00      	nop
34013334:	58002000 	.word	0x58002000
34013338:	3402b9b3 	.word	0x3402b9b3

3401333c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion>:
{
3401333c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
3401333e:	4a10      	ldr	r2, [pc, #64]	@ (34013380 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x44>)
34013340:	6803      	ldr	r3, [r0, #0]
{
34013342:	4604      	mov	r4, r0
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34013344:	4293      	cmp	r3, r2
{
34013346:	460d      	mov	r5, r1
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
34013348:	d008      	beq.n	3401335c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x20>
3401334a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401334e:	4293      	cmp	r3, r2
34013350:	d004      	beq.n	3401335c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x20>
34013352:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
34013356:	480b      	ldr	r0, [pc, #44]	@ (34013384 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x48>)
34013358:	f00b ff02 	bl	3401f160 <assert_failed>
  assert_param(IS_DCMIPP_PIPE(Pipe));
3401335c:	2d02      	cmp	r5, #2
3401335e:	d906      	bls.n	3401336e <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x32>
34013360:	f641 51c8 	movw	r1, #7624	@ 0x1dc8
34013364:	4807      	ldr	r0, [pc, #28]	@ (34013384 <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x48>)
34013366:	f00b fefb 	bl	3401f160 <assert_failed>
    return 0;
3401336a:	2000      	movs	r0, #0
}
3401336c:	bd38      	pop	{r3, r4, r5, pc}
  if (Pipe == DCMIPP_PIPE1)
3401336e:	2d01      	cmp	r5, #1
34013370:	d1fb      	bne.n	3401336a <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x2e>
    return ((READ_BIT(hdcmipp->Instance->P1CCCR, DCMIPP_P1CCCR_ENABLE) == DCMIPP_P1CCCR_ENABLE) ? 1U : 0U);
34013372:	6823      	ldr	r3, [r4, #0]
34013374:	f8d3 0880 	ldr.w	r0, [r3, #2176]	@ 0x880
34013378:	f000 0001 	and.w	r0, r0, #1
3401337c:	e7f6      	b.n	3401336c <HAL_DCMIPP_PIPE_IsEnabledISPColorConversion+0x30>
3401337e:	bf00      	nop
34013380:	58002000 	.word	0x58002000
34013384:	3402b9b3 	.word	0x3402b9b3

34013388 <HAL_DCMIPP_GetState>:
  return hdcmipp->State;
34013388:	7900      	ldrb	r0, [r0, #4]
}
3401338a:	4770      	bx	lr

3401338c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
3401338c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
3401338e:	6804      	ldr	r4, [r0, #0]
34013390:	9d05      	ldr	r5, [sp, #20]
34013392:	6c66      	ldr	r6, [r4, #68]	@ 0x44
34013394:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
34013398:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
3401339a:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
3401339e:	4335      	orrs	r5, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
340133a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
340133a4:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
340133a6:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
340133a8:	d12f      	bne.n	3401340a <DMA2D_SetConfig+0x7e>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
340133aa:	6880      	ldr	r0, [r0, #8]
340133ac:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
340133b0:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
340133b4:	f401 427f 	and.w	r2, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
340133b8:	b2cd      	uxtb	r5, r1

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
340133ba:	2803      	cmp	r0, #3
340133bc:	d81a      	bhi.n	340133f4 <DMA2D_SetConfig+0x68>
340133be:	e8df f000 	tbb	[pc, r0]
340133c2:	0204      	.short	0x0204
340133c4:	0e06      	.short	0x0e06
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
    {
      tmp = (tmp3 | tmp2 | tmp4);
340133c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
340133ca:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
340133cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp2 = (tmp2 >> 19U);
340133ce:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
340133d0:	0a92      	lsrs	r2, r2, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
340133d2:	02c9      	lsls	r1, r1, #11
340133d4:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
340133d8:	ea41 01d5 	orr.w	r1, r1, r5, lsr #3
340133dc:	e7f5      	b.n	340133ca <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 19U);
340133de:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
340133e0:	0ad2      	lsrs	r2, r2, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
340133e2:	029b      	lsls	r3, r3, #10
340133e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
340133e8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
      tmp1 = (tmp1 >> 31U);
340133ec:	0ff1      	lsrs	r1, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
340133ee:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
340133f2:	e7ea      	b.n	340133ca <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 20U);
340133f4:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
340133f6:	0b12      	lsrs	r2, r2, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
340133f8:	021b      	lsls	r3, r3, #8
340133fa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
340133fe:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
      tmp1 = (tmp1 >> 28U);
34013402:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
34013404:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
34013408:	e7df      	b.n	340133ca <DMA2D_SetConfig+0x3e>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
3401340a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
3401340e:	bf0c      	ite	eq
34013410:	6161      	streq	r1, [r4, #20]
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
34013412:	60e1      	strne	r1, [r4, #12]
}
34013414:	e7da      	b.n	340133cc <DMA2D_SetConfig+0x40>

34013416 <HAL_DMA2D_MspInit>:
}
34013416:	4770      	bx	lr

34013418 <HAL_DMA2D_Init>:
{
34013418:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
3401341a:	4604      	mov	r4, r0
3401341c:	2800      	cmp	r0, #0
3401341e:	d07d      	beq.n	3401351c <HAL_DMA2D_Init+0x104>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
34013420:	6803      	ldr	r3, [r0, #0]
34013422:	4a3f      	ldr	r2, [pc, #252]	@ (34013520 <HAL_DMA2D_Init+0x108>)
34013424:	4293      	cmp	r3, r2
34013426:	d007      	beq.n	34013438 <HAL_DMA2D_Init+0x20>
34013428:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401342c:	4293      	cmp	r3, r2
3401342e:	d003      	beq.n	34013438 <HAL_DMA2D_Init+0x20>
34013430:	21f7      	movs	r1, #247	@ 0xf7
34013432:	483c      	ldr	r0, [pc, #240]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
34013434:	f00b fe94 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
34013438:	6863      	ldr	r3, [r4, #4]
3401343a:	f433 3240 	bics.w	r2, r3, #196608	@ 0x30000
3401343e:	d008      	beq.n	34013452 <HAL_DMA2D_Init+0x3a>
34013440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34013444:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34013448:	d003      	beq.n	34013452 <HAL_DMA2D_Init+0x3a>
3401344a:	21f8      	movs	r1, #248	@ 0xf8
3401344c:	4835      	ldr	r0, [pc, #212]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
3401344e:	f00b fe87 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
34013452:	68a3      	ldr	r3, [r4, #8]
34013454:	2b04      	cmp	r3, #4
34013456:	d903      	bls.n	34013460 <HAL_DMA2D_Init+0x48>
34013458:	21f9      	movs	r1, #249	@ 0xf9
3401345a:	4832      	ldr	r0, [pc, #200]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
3401345c:	f00b fe80 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));
34013460:	68e3      	ldr	r3, [r4, #12]
34013462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34013466:	d303      	bcc.n	34013470 <HAL_DMA2D_Init+0x58>
34013468:	21fa      	movs	r1, #250	@ 0xfa
3401346a:	482e      	ldr	r0, [pc, #184]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
3401346c:	f00b fe78 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->Init.AlphaInverted));
34013470:	6923      	ldr	r3, [r4, #16]
34013472:	2b01      	cmp	r3, #1
34013474:	d903      	bls.n	3401347e <HAL_DMA2D_Init+0x66>
34013476:	21fb      	movs	r1, #251	@ 0xfb
34013478:	482a      	ldr	r0, [pc, #168]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
3401347a:	f00b fe71 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->Init.RedBlueSwap));
3401347e:	6963      	ldr	r3, [r4, #20]
34013480:	2b01      	cmp	r3, #1
34013482:	d903      	bls.n	3401348c <HAL_DMA2D_Init+0x74>
34013484:	21fc      	movs	r1, #252	@ 0xfc
34013486:	4827      	ldr	r0, [pc, #156]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
34013488:	f00b fe6a 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_LOM_MODE(hdma2d->Init.LineOffsetMode));
3401348c:	69e3      	ldr	r3, [r4, #28]
3401348e:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
34013492:	d003      	beq.n	3401349c <HAL_DMA2D_Init+0x84>
34013494:	21fd      	movs	r1, #253	@ 0xfd
34013496:	4823      	ldr	r0, [pc, #140]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
34013498:	f00b fe62 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_BYTES_SWAP(hdma2d->Init.BytesSwap));
3401349c:	69a3      	ldr	r3, [r4, #24]
3401349e:	f433 7380 	bics.w	r3, r3, #256	@ 0x100
340134a2:	d003      	beq.n	340134ac <HAL_DMA2D_Init+0x94>
340134a4:	21fe      	movs	r1, #254	@ 0xfe
340134a6:	481f      	ldr	r0, [pc, #124]	@ (34013524 <HAL_DMA2D_Init+0x10c>)
340134a8:	f00b fe5a 	bl	3401f160 <assert_failed>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
340134ac:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
340134b0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
340134b4:	b923      	cbnz	r3, 340134c0 <HAL_DMA2D_Init+0xa8>
    HAL_DMA2D_MspInit(hdma2d);
340134b6:	4620      	mov	r0, r4
    hdma2d->Lock = HAL_UNLOCKED;
340134b8:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
    HAL_DMA2D_MspInit(hdma2d);
340134bc:	f7ff ffab 	bl	34013416 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
340134c0:	2302      	movs	r3, #2
340134c2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
340134c6:	6823      	ldr	r3, [r4, #0]
340134c8:	69e0      	ldr	r0, [r4, #28]
340134ca:	6819      	ldr	r1, [r3, #0]
340134cc:	6862      	ldr	r2, [r4, #4]
340134ce:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
340134d2:	4302      	orrs	r2, r0
340134d4:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
340134d8:	430a      	orrs	r2, r1
340134da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
340134dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
340134de:	69a0      	ldr	r0, [r4, #24]
340134e0:	68a2      	ldr	r2, [r4, #8]
340134e2:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
340134e6:	4302      	orrs	r2, r0
340134e8:	f021 0101 	bic.w	r1, r1, #1
340134ec:	430a      	orrs	r2, r1
340134ee:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
340134f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
340134f2:	68e1      	ldr	r1, [r4, #12]
340134f4:	f36f 020f 	bfc	r2, #0, #16
340134f8:	430a      	orrs	r2, r1
340134fa:	641a      	str	r2, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
340134fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
340134fe:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
34013502:	0552      	lsls	r2, r2, #21
34013504:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
34013508:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
3401350c:	430a      	orrs	r2, r1
3401350e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
34013510:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
34013512:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
34013514:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
34013516:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
3401351a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401351c:	2001      	movs	r0, #1
3401351e:	e7fc      	b.n	3401351a <HAL_DMA2D_Init+0x102>
34013520:	58021000 	.word	0x58021000
34013524:	3402ba16 	.word	0x3402ba16

34013528 <HAL_DMA2D_Start>:
{
34013528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401352c:	f8dd 8020 	ldr.w	r8, [sp, #32]
34013530:	4604      	mov	r4, r0
  assert_param(IS_DMA2D_LINE(Height));
34013532:	f5b8 3f80 	cmp.w	r8, #65536	@ 0x10000
{
34013536:	460e      	mov	r6, r1
34013538:	4617      	mov	r7, r2
3401353a:	461d      	mov	r5, r3
  assert_param(IS_DMA2D_LINE(Height));
3401353c:	d304      	bcc.n	34013548 <HAL_DMA2D_Start+0x20>
3401353e:	f240 21a9 	movw	r1, #681	@ 0x2a9
34013542:	4813      	ldr	r0, [pc, #76]	@ (34013590 <HAL_DMA2D_Start+0x68>)
34013544:	f00b fe0c 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_PIXEL(Width));
34013548:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
3401354c:	d304      	bcc.n	34013558 <HAL_DMA2D_Start+0x30>
3401354e:	f240 21aa 	movw	r1, #682	@ 0x2aa
34013552:	480f      	ldr	r0, [pc, #60]	@ (34013590 <HAL_DMA2D_Start+0x68>)
34013554:	f00b fe04 	bl	3401f160 <assert_failed>
  __HAL_LOCK(hdma2d);
34013558:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
3401355c:	2002      	movs	r0, #2
3401355e:	2b01      	cmp	r3, #1
34013560:	d012      	beq.n	34013588 <HAL_DMA2D_Start+0x60>
34013562:	2301      	movs	r3, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
34013564:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
34013568:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
3401356c:	463a      	mov	r2, r7
3401356e:	462b      	mov	r3, r5
34013570:	4620      	mov	r0, r4
34013572:	4631      	mov	r1, r6
34013574:	f8cd 8000 	str.w	r8, [sp]
34013578:	f7ff ff08 	bl	3401338c <DMA2D_SetConfig>
  return HAL_OK;
3401357c:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
3401357e:	6822      	ldr	r2, [r4, #0]
34013580:	6813      	ldr	r3, [r2, #0]
34013582:	f043 0301 	orr.w	r3, r3, #1
34013586:	6013      	str	r3, [r2, #0]
}
34013588:	b002      	add	sp, #8
3401358a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401358e:	bf00      	nop
34013590:	3402ba16 	.word	0x3402ba16

34013594 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
34013594:	2300      	movs	r3, #0
{
34013596:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
34013598:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
3401359a:	6803      	ldr	r3, [r0, #0]
{
3401359c:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
3401359e:	681b      	ldr	r3, [r3, #0]
{
340135a0:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
340135a2:	07db      	lsls	r3, r3, #31
340135a4:	d418      	bmi.n	340135d8 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
340135a6:	6822      	ldr	r2, [r4, #0]
340135a8:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
340135aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
340135ac:	4313      	orrs	r3, r2
  if (layer_start != 0U)
340135ae:	069e      	lsls	r6, r3, #26
340135b0:	d506      	bpl.n	340135c0 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
340135b2:	f00b faa5 	bl	3401eb00 <HAL_GetTick>
340135b6:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
340135b8:	6823      	ldr	r3, [r4, #0]
340135ba:	685a      	ldr	r2, [r3, #4]
340135bc:	06d2      	lsls	r2, r2, #27
340135be:	d53f      	bpl.n	34013640 <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
340135c0:	2212      	movs	r2, #18
340135c2:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
340135c4:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
340135c6:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
340135c8:	2301      	movs	r3, #1
340135ca:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        __HAL_UNLOCK(hdma2d);
340135ce:	2300      	movs	r3, #0
340135d0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
340135d4:	b002      	add	sp, #8
340135d6:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
340135d8:	f00b fa92 	bl	3401eb00 <HAL_GetTick>
340135dc:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
340135de:	6823      	ldr	r3, [r4, #0]
340135e0:	685a      	ldr	r2, [r3, #4]
340135e2:	0792      	lsls	r2, r2, #30
340135e4:	d4df      	bmi.n	340135a6 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
340135e6:	685a      	ldr	r2, [r3, #4]
340135e8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
340135ea:	9a01      	ldr	r2, [sp, #4]
340135ec:	f012 0f21 	tst.w	r2, #33	@ 0x21
340135f0:	d014      	beq.n	3401361c <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
340135f2:	9a01      	ldr	r2, [sp, #4]
340135f4:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
340135f6:	bf42      	ittt	mi
340135f8:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
340135fa:	f042 0202 	orrmi.w	r2, r2, #2
340135fe:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
34013600:	9a01      	ldr	r2, [sp, #4]
34013602:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
34013604:	bf42      	ittt	mi
34013606:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34013608:	f042 0201 	orrmi.w	r2, r2, #1
3401360c:	6662      	strmi	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
3401360e:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
34013610:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
34013612:	2304      	movs	r3, #4
        return HAL_ERROR;
34013614:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
34013616:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        return HAL_ERROR;
3401361a:	e7d8      	b.n	340135ce <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
3401361c:	1c69      	adds	r1, r5, #1
3401361e:	d0df      	beq.n	340135e0 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
34013620:	f00b fa6e 	bl	3401eb00 <HAL_GetTick>
34013624:	1b80      	subs	r0, r0, r6
34013626:	42a8      	cmp	r0, r5
34013628:	d801      	bhi.n	3401362e <HAL_DMA2D_PollForTransfer+0x9a>
3401362a:	2d00      	cmp	r5, #0
3401362c:	d1d7      	bne.n	340135de <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
3401362e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          return HAL_TIMEOUT;
34013630:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
34013632:	f043 0320 	orr.w	r3, r3, #32
34013636:	6663      	str	r3, [r4, #100]	@ 0x64
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
34013638:	2303      	movs	r3, #3
3401363a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
          return HAL_TIMEOUT;
3401363e:	e7c6      	b.n	340135ce <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
34013640:	685a      	ldr	r2, [r3, #4]
34013642:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
34013644:	9a01      	ldr	r2, [sp, #4]
34013646:	f012 0f29 	tst.w	r2, #41	@ 0x29
3401364a:	d016      	beq.n	3401367a <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
3401364c:	9a01      	ldr	r2, [sp, #4]
3401364e:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
34013650:	bf42      	ittt	mi
34013652:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34013654:	f042 0204 	orrmi.w	r2, r2, #4
34013658:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
3401365a:	9a01      	ldr	r2, [sp, #4]
3401365c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
3401365e:	bf42      	ittt	mi
34013660:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34013662:	f042 0202 	orrmi.w	r2, r2, #2
34013666:	6662      	strmi	r2, [r4, #100]	@ 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
34013668:	9a01      	ldr	r2, [sp, #4]
3401366a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
3401366c:	bf42      	ittt	mi
3401366e:	6e62      	ldrmi	r2, [r4, #100]	@ 0x64
34013670:	f042 0201 	orrmi.w	r2, r2, #1
34013674:	6662      	strmi	r2, [r4, #100]	@ 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
34013676:	2229      	movs	r2, #41	@ 0x29
34013678:	e7ca      	b.n	34013610 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
3401367a:	1c69      	adds	r1, r5, #1
3401367c:	d09d      	beq.n	340135ba <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
3401367e:	f00b fa3f 	bl	3401eb00 <HAL_GetTick>
34013682:	1b80      	subs	r0, r0, r6
34013684:	42a8      	cmp	r0, r5
34013686:	d8d2      	bhi.n	3401362e <HAL_DMA2D_PollForTransfer+0x9a>
34013688:	2d00      	cmp	r5, #0
3401368a:	d195      	bne.n	340135b8 <HAL_DMA2D_PollForTransfer+0x24>
3401368c:	e7cf      	b.n	3401362e <HAL_DMA2D_PollForTransfer+0x9a>
	...

34013690 <HAL_DMA2D_ConfigLayer>:
  assert_param(IS_DMA2D_LAYER(LayerIdx));
34013690:	2901      	cmp	r1, #1
{
34013692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34013694:	4604      	mov	r4, r0
34013696:	460d      	mov	r5, r1
  assert_param(IS_DMA2D_LAYER(LayerIdx));
34013698:	d904      	bls.n	340136a4 <HAL_DMA2D_ConfigLayer+0x14>
3401369a:	f240 61f3 	movw	r1, #1779	@ 0x6f3
3401369e:	4850      	ldr	r0, [pc, #320]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
340136a0:	f00b fd5e 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
340136a4:	231c      	movs	r3, #28
340136a6:	fb03 4305 	mla	r3, r3, r5, r4
340136aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
340136ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340136b0:	d304      	bcc.n	340136bc <HAL_DMA2D_ConfigLayer+0x2c>
340136b2:	f240 61f4 	movw	r1, #1780	@ 0x6f4
340136b6:	484a      	ldr	r0, [pc, #296]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
340136b8:	f00b fd52 	bl	3401f160 <assert_failed>
  if (hdma2d->Init.Mode != DMA2D_R2M)
340136bc:	6863      	ldr	r3, [r4, #4]
340136be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340136c2:	d017      	beq.n	340136f4 <HAL_DMA2D_ConfigLayer+0x64>
    assert_param(IS_DMA2D_INPUT_COLOR_MODE(hdma2d->LayerCfg[LayerIdx].InputColorMode));
340136c4:	231c      	movs	r3, #28
340136c6:	fb03 4305 	mla	r3, r3, r5, r4
340136ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340136cc:	2b0b      	cmp	r3, #11
340136ce:	d904      	bls.n	340136da <HAL_DMA2D_ConfigLayer+0x4a>
340136d0:	f240 61f7 	movw	r1, #1783	@ 0x6f7
340136d4:	4842      	ldr	r0, [pc, #264]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
340136d6:	f00b fd43 	bl	3401f160 <assert_failed>
    if (hdma2d->Init.Mode != DMA2D_M2M)
340136da:	6863      	ldr	r3, [r4, #4]
340136dc:	b153      	cbz	r3, 340136f4 <HAL_DMA2D_ConfigLayer+0x64>
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
340136de:	231c      	movs	r3, #28
340136e0:	fb03 4305 	mla	r3, r3, r5, r4
340136e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
340136e6:	2b02      	cmp	r3, #2
340136e8:	d904      	bls.n	340136f4 <HAL_DMA2D_ConfigLayer+0x64>
340136ea:	f240 61fa 	movw	r1, #1786	@ 0x6fa
340136ee:	483c      	ldr	r0, [pc, #240]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
340136f0:	f00b fd36 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
340136f4:	261c      	movs	r6, #28
340136f6:	fb06 4305 	mla	r3, r6, r5, r4
340136fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
340136fc:	2b01      	cmp	r3, #1
340136fe:	d904      	bls.n	3401370a <HAL_DMA2D_ConfigLayer+0x7a>
34013700:	f240 61fd 	movw	r1, #1789	@ 0x6fd
34013704:	4836      	ldr	r0, [pc, #216]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
34013706:	f00b fd2b 	bl	3401f160 <assert_failed>
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
3401370a:	fb06 4605 	mla	r6, r6, r5, r4
3401370e:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
34013710:	2b01      	cmp	r3, #1
34013712:	d904      	bls.n	3401371e <HAL_DMA2D_ConfigLayer+0x8e>
34013714:	f240 61fe 	movw	r1, #1790	@ 0x6fe
34013718:	4831      	ldr	r0, [pc, #196]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
3401371a:	f00b fd21 	bl	3401f160 <assert_failed>
  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
3401371e:	2d01      	cmp	r5, #1
34013720:	d10a      	bne.n	34013738 <HAL_DMA2D_ConfigLayer+0xa8>
34013722:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34013724:	2b0b      	cmp	r3, #11
34013726:	d107      	bne.n	34013738 <HAL_DMA2D_ConfigLayer+0xa8>
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
34013728:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3401372a:	2b02      	cmp	r3, #2
3401372c:	d904      	bls.n	34013738 <HAL_DMA2D_ConfigLayer+0xa8>
3401372e:	f240 7102 	movw	r1, #1794	@ 0x702
34013732:	482b      	ldr	r0, [pc, #172]	@ (340137e0 <HAL_DMA2D_ConfigLayer+0x150>)
34013734:	f00b fd14 	bl	3401f160 <assert_failed>
  __HAL_LOCK(hdma2d);
34013738:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
3401373c:	2002      	movs	r0, #2
3401373e:	2b01      	cmp	r3, #1
34013740:	d033      	beq.n	340137aa <HAL_DMA2D_ConfigLayer+0x11a>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
34013742:	211c      	movs	r1, #28
  __HAL_LOCK(hdma2d);
34013744:	2301      	movs	r3, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
34013746:	fb01 4105 	mla	r1, r1, r5, r4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
3401374a:	f884 0061 	strb.w	r0, [r4, #97]	@ 0x61
  __HAL_LOCK(hdma2d);
3401374e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
34013752:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
34013754:	e9d1 620b 	ldrd	r6, r2, [r1, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
34013758:	051b      	lsls	r3, r3, #20
3401375a:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
3401375c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
34013760:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
34013762:	4333      	orrs	r3, r6
34013764:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34013768:	f1a6 0009 	sub.w	r0, r6, #9
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
3401376c:	f007 427f 	and.w	r2, r7, #4278190080	@ 0xff000000
34013770:	431a      	orrs	r2, r3
34013772:	2801      	cmp	r0, #1
34013774:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
34013778:	bf98      	it	ls
3401377a:	4613      	movls	r3, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
3401377c:	6822      	ldr	r2, [r4, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
3401377e:	b9ad      	cbnz	r5, 340137ac <HAL_DMA2D_ConfigLayer+0x11c>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34013780:	6a55      	ldr	r5, [r2, #36]	@ 0x24
34013782:	4918      	ldr	r1, [pc, #96]	@ (340137e4 <HAL_DMA2D_ConfigLayer+0x154>)
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34013784:	2801      	cmp	r0, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34013786:	ea01 0105 	and.w	r1, r1, r5
3401378a:	ea41 0103 	orr.w	r1, r1, r3
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
3401378e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
34013790:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
34013792:	6193      	str	r3, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
34013794:	d803      	bhi.n	3401379e <HAL_DMA2D_ConfigLayer+0x10e>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
34013796:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34013798:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3401379c:	6293      	str	r3, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
3401379e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
340137a0:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
340137a2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  __HAL_UNLOCK(hdma2d);
340137a6:	f884 0060 	strb.w	r0, [r4, #96]	@ 0x60
}
340137aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
340137ac:	2e0b      	cmp	r6, #11
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
340137ae:	bf03      	ittte	eq
340137b0:	6c09      	ldreq	r1, [r1, #64]	@ 0x40
      regMask  |= DMA2D_FGPFCCR_CSS;
340137b2:	4e0d      	ldreq	r6, [pc, #52]	@ (340137e8 <HAL_DMA2D_ConfigLayer+0x158>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
340137b4:	ea43 4381 	orreq.w	r3, r3, r1, lsl #18
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
340137b8:	4e0c      	ldrne	r6, [pc, #48]	@ (340137ec <HAL_DMA2D_ConfigLayer+0x15c>)
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
340137ba:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
340137bc:	2801      	cmp	r0, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
340137be:	ea21 0106 	bic.w	r1, r1, r6
340137c2:	ea43 0301 	orr.w	r3, r3, r1
340137c6:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
340137c8:	f04f 031c 	mov.w	r3, #28
340137cc:	fb03 4505 	mla	r5, r3, r5, r4
340137d0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
340137d2:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
340137d4:	bf9e      	ittt	ls
340137d6:	6b6b      	ldrls	r3, [r5, #52]	@ 0x34
340137d8:	f023 437f 	bicls.w	r3, r3, #4278190080	@ 0xff000000
340137dc:	6213      	strls	r3, [r2, #32]
340137de:	e7de      	b.n	3401379e <HAL_DMA2D_ConfigLayer+0x10e>
340137e0:	3402ba16 	.word	0x3402ba16
340137e4:	00ccfff0 	.word	0x00ccfff0
340137e8:	ff3f000f 	.word	0xff3f000f
340137ec:	ff33000f 	.word	0xff33000f

340137f0 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
340137f0:	2901      	cmp	r1, #1
340137f2:	d005      	beq.n	34013800 <HAL_EXTI_RegisterCallback+0x10>
340137f4:	2902      	cmp	r1, #2
340137f6:	d001      	beq.n	340137fc <HAL_EXTI_RegisterCallback+0xc>
340137f8:	b929      	cbnz	r1, 34013806 <HAL_EXTI_RegisterCallback+0x16>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
340137fa:	6042      	str	r2, [r0, #4]
    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
      break;

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
340137fc:	6082      	str	r2, [r0, #8]
      break;
340137fe:	e000      	b.n	34013802 <HAL_EXTI_RegisterCallback+0x12>
      hexti->RisingCallback = pPendingCbfn;
34013800:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
34013802:	2000      	movs	r0, #0
34013804:	4770      	bx	lr
  switch (CallbackID)
34013806:	2001      	movs	r0, #1
      status = HAL_ERROR;
      break;
  }

  return status;
}
34013808:	4770      	bx	lr
	...

3401380c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
3401380c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
3401380e:	4b0f      	ldr	r3, [pc, #60]	@ (3401384c <HAL_EXTI_GetHandle+0x40>)
{
34013810:	4605      	mov	r5, r0
  assert_param(IS_EXTI_LINE(ExtiLine));
34013812:	400b      	ands	r3, r1
{
34013814:	460c      	mov	r4, r1
  assert_param(IS_EXTI_LINE(ExtiLine));
34013816:	b973      	cbnz	r3, 34013836 <HAL_EXTI_GetHandle+0x2a>
34013818:	f001 63e0 	and.w	r3, r1, #117440512	@ 0x7000000
3401381c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34013820:	d004      	beq.n	3401382c <HAL_EXTI_GetHandle+0x20>
34013822:	f001 7340 	and.w	r3, r1, #50331648	@ 0x3000000
34013826:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401382a:	d104      	bne.n	34013836 <HAL_EXTI_GetHandle+0x2a>
3401382c:	4b08      	ldr	r3, [pc, #32]	@ (34013850 <HAL_EXTI_GetHandle+0x44>)
3401382e:	4a09      	ldr	r2, [pc, #36]	@ (34013854 <HAL_EXTI_GetHandle+0x48>)
34013830:	4023      	ands	r3, r4
34013832:	4293      	cmp	r3, r2
34013834:	d904      	bls.n	34013840 <HAL_EXTI_GetHandle+0x34>
34013836:	f240 11d5 	movw	r1, #469	@ 0x1d5
3401383a:	4807      	ldr	r0, [pc, #28]	@ (34013858 <HAL_EXTI_GetHandle+0x4c>)
3401383c:	f00b fc90 	bl	3401f160 <assert_failed>

  /* Check null pointer */
  if (hexti == NULL)
34013840:	b115      	cbz	r5, 34013848 <HAL_EXTI_GetHandle+0x3c>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
34013842:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
34013844:	602c      	str	r4, [r5, #0]
  }
}
34013846:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
34013848:	2001      	movs	r0, #1
3401384a:	e7fc      	b.n	34013846 <HAL_EXTI_GetHandle+0x3a>
3401384c:	e8fcffe0 	.word	0xe8fcffe0
34013850:	0003001f 	.word	0x0003001f
34013854:	0002000d 	.word	0x0002000d
34013858:	3402ba78 	.word	0x3402ba78

3401385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
3401385c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34013860:	4b47      	ldr	r3, [pc, #284]	@ (34013980 <HAL_GPIO_Init+0x124>)
{
34013862:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34013864:	4298      	cmp	r0, r3
{
34013866:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34013868:	d054      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
3401386a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401386e:	4298      	cmp	r0, r3
34013870:	d050      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
34013872:	4b44      	ldr	r3, [pc, #272]	@ (34013984 <HAL_GPIO_Init+0x128>)
34013874:	4298      	cmp	r0, r3
34013876:	d04d      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
34013878:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401387c:	4298      	cmp	r0, r3
3401387e:	d049      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
34013880:	4b41      	ldr	r3, [pc, #260]	@ (34013988 <HAL_GPIO_Init+0x12c>)
34013882:	4298      	cmp	r0, r3
34013884:	d046      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
34013886:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3401388a:	4298      	cmp	r0, r3
3401388c:	d042      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
3401388e:	4b3f      	ldr	r3, [pc, #252]	@ (3401398c <HAL_GPIO_Init+0x130>)
34013890:	4298      	cmp	r0, r3
34013892:	d03f      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
34013894:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013898:	4298      	cmp	r0, r3
3401389a:	d03b      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
3401389c:	4b3c      	ldr	r3, [pc, #240]	@ (34013990 <HAL_GPIO_Init+0x134>)
3401389e:	4298      	cmp	r0, r3
340138a0:	d038      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138a2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138a6:	4298      	cmp	r0, r3
340138a8:	d034      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138aa:	4b3a      	ldr	r3, [pc, #232]	@ (34013994 <HAL_GPIO_Init+0x138>)
340138ac:	4298      	cmp	r0, r3
340138ae:	d031      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138b0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138b4:	4298      	cmp	r0, r3
340138b6:	d02d      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138b8:	4b37      	ldr	r3, [pc, #220]	@ (34013998 <HAL_GPIO_Init+0x13c>)
340138ba:	4298      	cmp	r0, r3
340138bc:	d02a      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138be:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138c2:	4298      	cmp	r0, r3
340138c4:	d026      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138c6:	4b35      	ldr	r3, [pc, #212]	@ (3401399c <HAL_GPIO_Init+0x140>)
340138c8:	4298      	cmp	r0, r3
340138ca:	d023      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138cc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138d0:	4298      	cmp	r0, r3
340138d2:	d01f      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138d4:	4b32      	ldr	r3, [pc, #200]	@ (340139a0 <HAL_GPIO_Init+0x144>)
340138d6:	4298      	cmp	r0, r3
340138d8:	d01c      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138da:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138de:	4298      	cmp	r0, r3
340138e0:	d018      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138e2:	4b30      	ldr	r3, [pc, #192]	@ (340139a4 <HAL_GPIO_Init+0x148>)
340138e4:	4298      	cmp	r0, r3
340138e6:	d015      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138e8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138ec:	4298      	cmp	r0, r3
340138ee:	d011      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138f0:	4b2d      	ldr	r3, [pc, #180]	@ (340139a8 <HAL_GPIO_Init+0x14c>)
340138f2:	4298      	cmp	r0, r3
340138f4:	d00e      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138f6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
340138fa:	4298      	cmp	r0, r3
340138fc:	d00a      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
340138fe:	4b2b      	ldr	r3, [pc, #172]	@ (340139ac <HAL_GPIO_Init+0x150>)
34013900:	4298      	cmp	r0, r3
34013902:	d007      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
34013904:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013908:	4298      	cmp	r0, r3
3401390a:	d003      	beq.n	34013914 <HAL_GPIO_Init+0xb8>
3401390c:	21ad      	movs	r1, #173	@ 0xad
3401390e:	4828      	ldr	r0, [pc, #160]	@ (340139b0 <HAL_GPIO_Init+0x154>)
34013910:	f00b fc26 	bl	3401f160 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
34013914:	6833      	ldr	r3, [r6, #0]
34013916:	b29a      	uxth	r2, r3
34013918:	b112      	cbz	r2, 34013920 <HAL_GPIO_Init+0xc4>
3401391a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401391e:	d303      	bcc.n	34013928 <HAL_GPIO_Init+0xcc>
34013920:	21ae      	movs	r1, #174	@ 0xae
34013922:	4823      	ldr	r0, [pc, #140]	@ (340139b0 <HAL_GPIO_Init+0x154>)
34013924:	f00b fc1c 	bl	3401f160 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
34013928:	6873      	ldr	r3, [r6, #4]
3401392a:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
3401392e:	d011      	beq.n	34013954 <HAL_GPIO_Init+0xf8>
34013930:	d81d      	bhi.n	3401396e <HAL_GPIO_Init+0x112>
34013932:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
34013936:	d00d      	beq.n	34013954 <HAL_GPIO_Init+0xf8>
34013938:	d809      	bhi.n	3401394e <HAL_GPIO_Init+0xf2>
3401393a:	2b03      	cmp	r3, #3
3401393c:	d90a      	bls.n	34013954 <HAL_GPIO_Init+0xf8>
3401393e:	3b11      	subs	r3, #17
34013940:	2b01      	cmp	r3, #1
34013942:	d907      	bls.n	34013954 <HAL_GPIO_Init+0xf8>
34013944:	21af      	movs	r1, #175	@ 0xaf
34013946:	481a      	ldr	r0, [pc, #104]	@ (340139b0 <HAL_GPIO_Init+0x154>)
34013948:	f00b fc0a 	bl	3401f160 <assert_failed>
3401394c:	e002      	b.n	34013954 <HAL_GPIO_Init+0xf8>
3401394e:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
34013952:	d1f7      	bne.n	34013944 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013954:	f04f 0900 	mov.w	r9, #0
34013958:	464f      	mov	r7, r9
3401395a:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 34013980 <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
3401395e:	f8df a054 	ldr.w	sl, [pc, #84]	@ 340139b4 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34013962:	6835      	ldr	r5, [r6, #0]
34013964:	fa35 f307 	lsrs.w	r3, r5, r7
34013968:	d126      	bne.n	340139b8 <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
3401396a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401396e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
34013972:	d0ef      	beq.n	34013954 <HAL_GPIO_Init+0xf8>
34013974:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34013978:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
3401397c:	e7e9      	b.n	34013952 <HAL_GPIO_Init+0xf6>
3401397e:	bf00      	nop
34013980:	56020000 	.word	0x56020000
34013984:	56020400 	.word	0x56020400
34013988:	56020800 	.word	0x56020800
3401398c:	56020c00 	.word	0x56020c00
34013990:	56021000 	.word	0x56021000
34013994:	56021400 	.word	0x56021400
34013998:	56021800 	.word	0x56021800
3401399c:	56021c00 	.word	0x56021c00
340139a0:	56023400 	.word	0x56023400
340139a4:	56023800 	.word	0x56023800
340139a8:	56023c00 	.word	0x56023c00
340139ac:	56024000 	.word	0x56024000
340139b0:	3402bad9 	.word	0x3402bad9
340139b4:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
340139b8:	f04f 0b01 	mov.w	fp, #1
340139bc:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
340139c0:	ea1b 0505 	ands.w	r5, fp, r5
340139c4:	f000 8130 	beq.w	34013c28 <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
340139c8:	6873      	ldr	r3, [r6, #4]
340139ca:	f003 0303 	and.w	r3, r3, #3
340139ce:	3b01      	subs	r3, #1
340139d0:	2b01      	cmp	r3, #1
340139d2:	d81a      	bhi.n	34013a0a <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
340139d4:	68f3      	ldr	r3, [r6, #12]
340139d6:	2b03      	cmp	r3, #3
340139d8:	d903      	bls.n	340139e2 <HAL_GPIO_Init+0x186>
340139da:	21be      	movs	r1, #190	@ 0xbe
340139dc:	489e      	ldr	r0, [pc, #632]	@ (34013c58 <HAL_GPIO_Init+0x3fc>)
340139de:	f00b fbbf 	bl	3401f160 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340139e2:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
340139e4:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340139e6:	fa03 f309 	lsl.w	r3, r3, r9
340139ea:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
340139ee:	68f3      	ldr	r3, [r6, #12]
340139f0:	fa03 f309 	lsl.w	r3, r3, r9
340139f4:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
340139f6:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340139f8:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
340139fa:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
340139fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34013a00:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34013a04:	40bb      	lsls	r3, r7
34013a06:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34013a08:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34013a0a:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
34013a0e:	f003 0303 	and.w	r3, r3, #3
34013a12:	2b03      	cmp	r3, #3
34013a14:	d102      	bne.n	34013a1c <HAL_GPIO_Init+0x1c0>
34013a16:	2a01      	cmp	r2, #1
34013a18:	f000 8082 	beq.w	34013b20 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
34013a1c:	2a02      	cmp	r2, #2
34013a1e:	d903      	bls.n	34013a28 <HAL_GPIO_Init+0x1cc>
34013a20:	21d1      	movs	r1, #209	@ 0xd1
34013a22:	488d      	ldr	r0, [pc, #564]	@ (34013c58 <HAL_GPIO_Init+0x3fc>)
34013a24:	f00b fb9c 	bl	3401f160 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34013a28:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
34013a2a:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34013a2c:	fa03 f309 	lsl.w	r3, r3, r9
34013a30:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34013a34:	68b3      	ldr	r3, [r6, #8]
34013a36:	fa03 f309 	lsl.w	r3, r3, r9
34013a3a:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
34013a3c:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34013a3e:	6873      	ldr	r3, [r6, #4]
34013a40:	f003 0303 	and.w	r3, r3, #3
34013a44:	2b02      	cmp	r3, #2
34013a46:	d16b      	bne.n	34013b20 <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
34013a48:	4544      	cmp	r4, r8
34013a4a:	d053      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a4c:	4b83      	ldr	r3, [pc, #524]	@ (34013c5c <HAL_GPIO_Init+0x400>)
34013a4e:	429c      	cmp	r4, r3
34013a50:	d050      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a52:	4b83      	ldr	r3, [pc, #524]	@ (34013c60 <HAL_GPIO_Init+0x404>)
34013a54:	429c      	cmp	r4, r3
34013a56:	d04d      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a58:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013a5c:	429c      	cmp	r4, r3
34013a5e:	d049      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a60:	4b80      	ldr	r3, [pc, #512]	@ (34013c64 <HAL_GPIO_Init+0x408>)
34013a62:	429c      	cmp	r4, r3
34013a64:	d046      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a66:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013a6a:	429c      	cmp	r4, r3
34013a6c:	d042      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a6e:	4b7e      	ldr	r3, [pc, #504]	@ (34013c68 <HAL_GPIO_Init+0x40c>)
34013a70:	429c      	cmp	r4, r3
34013a72:	d03f      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a74:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013a78:	429c      	cmp	r4, r3
34013a7a:	d03b      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a7c:	4b7b      	ldr	r3, [pc, #492]	@ (34013c6c <HAL_GPIO_Init+0x410>)
34013a7e:	429c      	cmp	r4, r3
34013a80:	d038      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a82:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013a86:	429c      	cmp	r4, r3
34013a88:	d034      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a8a:	4b79      	ldr	r3, [pc, #484]	@ (34013c70 <HAL_GPIO_Init+0x414>)
34013a8c:	429c      	cmp	r4, r3
34013a8e:	d031      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a90:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013a94:	429c      	cmp	r4, r3
34013a96:	d02d      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a98:	4b76      	ldr	r3, [pc, #472]	@ (34013c74 <HAL_GPIO_Init+0x418>)
34013a9a:	429c      	cmp	r4, r3
34013a9c:	d02a      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013a9e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013aa2:	429c      	cmp	r4, r3
34013aa4:	d026      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013aa6:	4b74      	ldr	r3, [pc, #464]	@ (34013c78 <HAL_GPIO_Init+0x41c>)
34013aa8:	429c      	cmp	r4, r3
34013aaa:	d023      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013aac:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013ab0:	429c      	cmp	r4, r3
34013ab2:	d01f      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ab4:	4b71      	ldr	r3, [pc, #452]	@ (34013c7c <HAL_GPIO_Init+0x420>)
34013ab6:	429c      	cmp	r4, r3
34013ab8:	d01c      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013aba:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013abe:	429c      	cmp	r4, r3
34013ac0:	d018      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ac2:	4b6f      	ldr	r3, [pc, #444]	@ (34013c80 <HAL_GPIO_Init+0x424>)
34013ac4:	429c      	cmp	r4, r3
34013ac6:	d015      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ac8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013acc:	429c      	cmp	r4, r3
34013ace:	d011      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ad0:	4b6c      	ldr	r3, [pc, #432]	@ (34013c84 <HAL_GPIO_Init+0x428>)
34013ad2:	429c      	cmp	r4, r3
34013ad4:	d00e      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ad6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013ada:	429c      	cmp	r4, r3
34013adc:	d00a      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ade:	4b6a      	ldr	r3, [pc, #424]	@ (34013c88 <HAL_GPIO_Init+0x42c>)
34013ae0:	429c      	cmp	r4, r3
34013ae2:	d007      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013ae4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013ae8:	429c      	cmp	r4, r3
34013aea:	d003      	beq.n	34013af4 <HAL_GPIO_Init+0x298>
34013aec:	21de      	movs	r1, #222	@ 0xde
34013aee:	485a      	ldr	r0, [pc, #360]	@ (34013c58 <HAL_GPIO_Init+0x3fc>)
34013af0:	f00b fb36 	bl	3401f160 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34013af4:	6933      	ldr	r3, [r6, #16]
34013af6:	2b0f      	cmp	r3, #15
34013af8:	d903      	bls.n	34013b02 <HAL_GPIO_Init+0x2a6>
34013afa:	21df      	movs	r1, #223	@ 0xdf
34013afc:	4856      	ldr	r0, [pc, #344]	@ (34013c58 <HAL_GPIO_Init+0x3fc>)
34013afe:	f00b fb2f 	bl	3401f160 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34013b02:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34013b04:	08fa      	lsrs	r2, r7, #3
34013b06:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34013b0a:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34013b0e:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34013b10:	0089      	lsls	r1, r1, #2
34013b12:	408b      	lsls	r3, r1
34013b14:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34013b18:	6933      	ldr	r3, [r6, #16]
34013b1a:	408b      	lsls	r3, r1
34013b1c:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34013b1e:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34013b20:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
34013b22:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34013b24:	fa03 f209 	lsl.w	r2, r3, r9
34013b28:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34013b2c:	6872      	ldr	r2, [r6, #4]
34013b2e:	ea02 0103 	and.w	r1, r2, r3
34013b32:	fa01 f109 	lsl.w	r1, r1, r9
34013b36:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34013b38:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
34013b3c:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34013b3e:	d073      	beq.n	34013c28 <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013b40:	f04f 0e0f 	mov.w	lr, #15
34013b44:	f027 0103 	bic.w	r1, r7, #3
34013b48:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34013b4c:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
34013b50:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
34013b54:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013b58:	4098      	lsls	r0, r3
34013b5a:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013b5e:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013b60:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013b64:	d064      	beq.n	34013c30 <HAL_GPIO_Init+0x3d4>
34013b66:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 34013c60 <HAL_GPIO_Init+0x404>
34013b6a:	4574      	cmp	r4, lr
34013b6c:	d062      	beq.n	34013c34 <HAL_GPIO_Init+0x3d8>
34013b6e:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34013b72:	4574      	cmp	r4, lr
34013b74:	d060      	beq.n	34013c38 <HAL_GPIO_Init+0x3dc>
34013b76:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34013b7a:	4574      	cmp	r4, lr
34013b7c:	d020      	beq.n	34013bc0 <HAL_GPIO_Init+0x364>
34013b7e:	4b3b      	ldr	r3, [pc, #236]	@ (34013c6c <HAL_GPIO_Init+0x410>)
34013b80:	429c      	cmp	r4, r3
34013b82:	d05b      	beq.n	34013c3c <HAL_GPIO_Init+0x3e0>
34013b84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013b88:	429c      	cmp	r4, r3
34013b8a:	d059      	beq.n	34013c40 <HAL_GPIO_Init+0x3e4>
34013b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013b90:	429c      	cmp	r4, r3
34013b92:	d057      	beq.n	34013c44 <HAL_GPIO_Init+0x3e8>
34013b94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013b98:	429c      	cmp	r4, r3
34013b9a:	d055      	beq.n	34013c48 <HAL_GPIO_Init+0x3ec>
34013b9c:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34013ba0:	429c      	cmp	r4, r3
34013ba2:	d053      	beq.n	34013c4c <HAL_GPIO_Init+0x3f0>
34013ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013ba8:	429c      	cmp	r4, r3
34013baa:	d051      	beq.n	34013c50 <HAL_GPIO_Init+0x3f4>
34013bac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013bb0:	429c      	cmp	r4, r3
34013bb2:	d04f      	beq.n	34013c54 <HAL_GPIO_Init+0x3f8>
34013bb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013bb8:	429c      	cmp	r4, r3
34013bba:	bf14      	ite	ne
34013bbc:	2310      	movne	r3, #16
34013bbe:	230b      	moveq	r3, #11
34013bc0:	4083      	lsls	r3, r0
34013bc2:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
34013bc6:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34013bc8:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34013bcc:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34013bd0:	ea23 0105 	bic.w	r1, r3, r5
34013bd4:	ea43 0305 	orr.w	r3, r3, r5
34013bd8:	bf08      	it	eq
34013bda:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34013bdc:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34013be0:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34013be4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34013be8:	ea23 0105 	bic.w	r1, r3, r5
34013bec:	ea43 0305 	orr.w	r3, r3, r5
34013bf0:	bf08      	it	eq
34013bf2:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34013bf4:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34013bf8:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34013bfc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34013c00:	ea23 0105 	bic.w	r1, r3, r5
34013c04:	ea43 0305 	orr.w	r3, r3, r5
34013c08:	bf08      	it	eq
34013c0a:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34013c0c:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34013c10:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34013c14:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34013c18:	ea23 0105 	bic.w	r1, r3, r5
34013c1c:	ea45 0503 	orr.w	r5, r5, r3
34013c20:	bf08      	it	eq
34013c22:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34013c24:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34013c28:	3701      	adds	r7, #1
34013c2a:	f109 0902 	add.w	r9, r9, #2
34013c2e:	e698      	b.n	34013962 <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013c30:	2300      	movs	r3, #0
34013c32:	e7c5      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c34:	2301      	movs	r3, #1
34013c36:	e7c3      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c38:	2302      	movs	r3, #2
34013c3a:	e7c1      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c3c:	2304      	movs	r3, #4
34013c3e:	e7bf      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c40:	2305      	movs	r3, #5
34013c42:	e7bd      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c44:	2306      	movs	r3, #6
34013c46:	e7bb      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c48:	2307      	movs	r3, #7
34013c4a:	e7b9      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c4c:	2308      	movs	r3, #8
34013c4e:	e7b7      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c50:	2309      	movs	r3, #9
34013c52:	e7b5      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c54:	230a      	movs	r3, #10
34013c56:	e7b3      	b.n	34013bc0 <HAL_GPIO_Init+0x364>
34013c58:	3402bad9 	.word	0x3402bad9
34013c5c:	46020000 	.word	0x46020000
34013c60:	56020400 	.word	0x56020400
34013c64:	56020800 	.word	0x56020800
34013c68:	56020c00 	.word	0x56020c00
34013c6c:	56021000 	.word	0x56021000
34013c70:	56021400 	.word	0x56021400
34013c74:	56021800 	.word	0x56021800
34013c78:	56021c00 	.word	0x56021c00
34013c7c:	56023400 	.word	0x56023400
34013c80:	56023800 	.word	0x56023800
34013c84:	56023c00 	.word	0x56023c00
34013c88:	56024000 	.word	0x56024000

34013c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
34013c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34013c90:	4b87      	ldr	r3, [pc, #540]	@ (34013eb0 <HAL_GPIO_DeInit+0x224>)
{
34013c92:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34013c94:	4298      	cmp	r0, r3
{
34013c96:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
34013c98:	d055      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013c9a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013c9e:	4298      	cmp	r0, r3
34013ca0:	d051      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013ca2:	4b84      	ldr	r3, [pc, #528]	@ (34013eb4 <HAL_GPIO_DeInit+0x228>)
34013ca4:	4298      	cmp	r0, r3
34013ca6:	d04e      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013ca8:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013cac:	4298      	cmp	r0, r3
34013cae:	d04a      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cb0:	4b81      	ldr	r3, [pc, #516]	@ (34013eb8 <HAL_GPIO_DeInit+0x22c>)
34013cb2:	4298      	cmp	r0, r3
34013cb4:	d047      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cb6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013cba:	4298      	cmp	r0, r3
34013cbc:	d043      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cbe:	4b7f      	ldr	r3, [pc, #508]	@ (34013ebc <HAL_GPIO_DeInit+0x230>)
34013cc0:	4298      	cmp	r0, r3
34013cc2:	d040      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cc4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013cc8:	4298      	cmp	r0, r3
34013cca:	d03c      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013ccc:	4b7c      	ldr	r3, [pc, #496]	@ (34013ec0 <HAL_GPIO_DeInit+0x234>)
34013cce:	4298      	cmp	r0, r3
34013cd0:	d039      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cd2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013cd6:	4298      	cmp	r0, r3
34013cd8:	d035      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cda:	4b7a      	ldr	r3, [pc, #488]	@ (34013ec4 <HAL_GPIO_DeInit+0x238>)
34013cdc:	4298      	cmp	r0, r3
34013cde:	d032      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013ce0:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013ce4:	4298      	cmp	r0, r3
34013ce6:	d02e      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013ce8:	4b77      	ldr	r3, [pc, #476]	@ (34013ec8 <HAL_GPIO_DeInit+0x23c>)
34013cea:	4298      	cmp	r0, r3
34013cec:	d02b      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cee:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013cf2:	4298      	cmp	r0, r3
34013cf4:	d027      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cf6:	4b75      	ldr	r3, [pc, #468]	@ (34013ecc <HAL_GPIO_DeInit+0x240>)
34013cf8:	4298      	cmp	r0, r3
34013cfa:	d024      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013cfc:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013d00:	4298      	cmp	r0, r3
34013d02:	d020      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d04:	4b72      	ldr	r3, [pc, #456]	@ (34013ed0 <HAL_GPIO_DeInit+0x244>)
34013d06:	4298      	cmp	r0, r3
34013d08:	d01d      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d0a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013d0e:	4298      	cmp	r0, r3
34013d10:	d019      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d12:	4b70      	ldr	r3, [pc, #448]	@ (34013ed4 <HAL_GPIO_DeInit+0x248>)
34013d14:	4298      	cmp	r0, r3
34013d16:	d016      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d18:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013d1c:	4298      	cmp	r0, r3
34013d1e:	d012      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d20:	4b6d      	ldr	r3, [pc, #436]	@ (34013ed8 <HAL_GPIO_DeInit+0x24c>)
34013d22:	4298      	cmp	r0, r3
34013d24:	d00f      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d26:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013d2a:	4298      	cmp	r0, r3
34013d2c:	d00b      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d2e:	4b6b      	ldr	r3, [pc, #428]	@ (34013edc <HAL_GPIO_DeInit+0x250>)
34013d30:	4298      	cmp	r0, r3
34013d32:	d008      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d34:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013d38:	4298      	cmp	r0, r3
34013d3a:	d004      	beq.n	34013d46 <HAL_GPIO_DeInit+0xba>
34013d3c:	f240 112d 	movw	r1, #301	@ 0x12d
34013d40:	4867      	ldr	r0, [pc, #412]	@ (34013ee0 <HAL_GPIO_DeInit+0x254>)
34013d42:	f00b fa0d 	bl	3401f160 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34013d46:	b2ab      	uxth	r3, r5
34013d48:	b113      	cbz	r3, 34013d50 <HAL_GPIO_DeInit+0xc4>
34013d4a:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
34013d4e:	d304      	bcc.n	34013d5a <HAL_GPIO_DeInit+0xce>
34013d50:	f44f 7197 	mov.w	r1, #302	@ 0x12e
34013d54:	4862      	ldr	r0, [pc, #392]	@ (34013ee0 <HAL_GPIO_DeInit+0x254>)
34013d56:	f00b fa03 	bl	3401f160 <assert_failed>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34013d5a:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
34013d5c:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013d60:	f04f 080f 	mov.w	r8, #15
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34013d64:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR1 &= ~(iocurrent);
34013d68:	485e      	ldr	r0, [pc, #376]	@ (34013ee4 <HAL_GPIO_DeInit+0x258>)
  while ((GPIO_Pin >> position) != 0x00u)
34013d6a:	fa35 f302 	lsrs.w	r3, r5, r2
34013d6e:	d101      	bne.n	34013d74 <HAL_GPIO_DeInit+0xe8>
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
    }

    position++;
  }
}
34013d70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
34013d74:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00u)
34013d78:	ea1c 0605 	ands.w	r6, ip, r5
34013d7c:	d07f      	beq.n	34013e7e <HAL_GPIO_DeInit+0x1f2>
      tmp = EXTI->EXTICR[position >> 2u];
34013d7e:	f022 0103 	bic.w	r1, r2, #3
34013d82:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34013d86:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013d8a:	f002 0703 	and.w	r7, r2, #3
      tmp = EXTI->EXTICR[position >> 2u];
34013d8e:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
      tmp &= (0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34013d90:	00ff      	lsls	r7, r7, #3
34013d92:	fa08 f907 	lsl.w	r9, r8, r7
34013d96:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34013d9a:	4b45      	ldr	r3, [pc, #276]	@ (34013eb0 <HAL_GPIO_DeInit+0x224>)
34013d9c:	429c      	cmp	r4, r3
34013d9e:	d070      	beq.n	34013e82 <HAL_GPIO_DeInit+0x1f6>
34013da0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013da4:	429c      	cmp	r4, r3
34013da6:	d06e      	beq.n	34013e86 <HAL_GPIO_DeInit+0x1fa>
34013da8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013dac:	429c      	cmp	r4, r3
34013dae:	d06c      	beq.n	34013e8a <HAL_GPIO_DeInit+0x1fe>
34013db0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013db4:	429c      	cmp	r4, r3
34013db6:	d06a      	beq.n	34013e8e <HAL_GPIO_DeInit+0x202>
34013db8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013dbc:	429c      	cmp	r4, r3
34013dbe:	d068      	beq.n	34013e92 <HAL_GPIO_DeInit+0x206>
34013dc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013dc4:	429c      	cmp	r4, r3
34013dc6:	d066      	beq.n	34013e96 <HAL_GPIO_DeInit+0x20a>
34013dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013dcc:	429c      	cmp	r4, r3
34013dce:	d064      	beq.n	34013e9a <HAL_GPIO_DeInit+0x20e>
34013dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013dd4:	429c      	cmp	r4, r3
34013dd6:	d062      	beq.n	34013e9e <HAL_GPIO_DeInit+0x212>
34013dd8:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34013ddc:	429c      	cmp	r4, r3
34013dde:	d060      	beq.n	34013ea2 <HAL_GPIO_DeInit+0x216>
34013de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013de4:	429c      	cmp	r4, r3
34013de6:	d05e      	beq.n	34013ea6 <HAL_GPIO_DeInit+0x21a>
34013de8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013dec:	429c      	cmp	r4, r3
34013dee:	d05c      	beq.n	34013eaa <HAL_GPIO_DeInit+0x21e>
34013df0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34013df4:	429c      	cmp	r4, r3
34013df6:	bf14      	ite	ne
34013df8:	2310      	movne	r3, #16
34013dfa:	230b      	moveq	r3, #11
34013dfc:	40bb      	lsls	r3, r7
34013dfe:	4573      	cmp	r3, lr
34013e00:	d117      	bne.n	34013e32 <HAL_GPIO_DeInit+0x1a6>
        EXTI->IMR1 &= ~(iocurrent);
34013e02:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
34013e06:	ea23 0306 	bic.w	r3, r3, r6
34013e0a:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
34013e0e:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
34013e12:	ea23 0306 	bic.w	r3, r3, r6
34013e16:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
34013e1a:	6803      	ldr	r3, [r0, #0]
34013e1c:	ea23 0306 	bic.w	r3, r3, r6
34013e20:	6003      	str	r3, [r0, #0]
        EXTI->FTSR1 &= ~(iocurrent);
34013e22:	6843      	ldr	r3, [r0, #4]
34013e24:	ea23 0306 	bic.w	r3, r3, r6
34013e28:	6043      	str	r3, [r0, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
34013e2a:	6e0b      	ldr	r3, [r1, #96]	@ 0x60
34013e2c:	ea23 0309 	bic.w	r3, r3, r9
34013e30:	660b      	str	r3, [r1, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34013e32:	6823      	ldr	r3, [r4, #0]
34013e34:	0056      	lsls	r6, r2, #1
34013e36:	fa0b f606 	lsl.w	r6, fp, r6
34013e3a:	4333      	orrs	r3, r6
34013e3c:	6023      	str	r3, [r4, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
34013e3e:	08d3      	lsrs	r3, r2, #3
34013e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
34013e44:	f002 0107 	and.w	r1, r2, #7
34013e48:	6a1f      	ldr	r7, [r3, #32]
34013e4a:	0089      	lsls	r1, r1, #2
34013e4c:	fa08 f101 	lsl.w	r1, r8, r1
34013e50:	ea27 0701 	bic.w	r7, r7, r1
34013e54:	621f      	str	r7, [r3, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34013e56:	68a7      	ldr	r7, [r4, #8]
34013e58:	ea27 0706 	bic.w	r7, r7, r6
34013e5c:	60a7      	str	r7, [r4, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
34013e5e:	6867      	ldr	r7, [r4, #4]
34013e60:	ea27 070c 	bic.w	r7, r7, ip
34013e64:	6067      	str	r7, [r4, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34013e66:	68e7      	ldr	r7, [r4, #12]
34013e68:	ea27 0706 	bic.w	r7, r7, r6
34013e6c:	60e7      	str	r7, [r4, #12]
      GPIOx->DELAYR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_DELAYRL_DLY1_Pos)) ;
34013e6e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
34013e70:	ea26 0601 	bic.w	r6, r6, r1
34013e74:	641e      	str	r6, [r3, #64]	@ 0x40
      GPIOx->ADVCFGR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_ADVCFGRL_1_Pos)) ;
34013e76:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
34013e78:	ea26 0101 	bic.w	r1, r6, r1
34013e7c:	6499      	str	r1, [r3, #72]	@ 0x48
    position++;
34013e7e:	3201      	adds	r2, #1
34013e80:	e773      	b.n	34013d6a <HAL_GPIO_DeInit+0xde>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos)))
34013e82:	2300      	movs	r3, #0
34013e84:	e7ba      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e86:	2301      	movs	r3, #1
34013e88:	e7b8      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e8a:	2302      	movs	r3, #2
34013e8c:	e7b6      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e8e:	2303      	movs	r3, #3
34013e90:	e7b4      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e92:	2304      	movs	r3, #4
34013e94:	e7b2      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e96:	2305      	movs	r3, #5
34013e98:	e7b0      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e9a:	2306      	movs	r3, #6
34013e9c:	e7ae      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013e9e:	2307      	movs	r3, #7
34013ea0:	e7ac      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013ea2:	2308      	movs	r3, #8
34013ea4:	e7aa      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013ea6:	2309      	movs	r3, #9
34013ea8:	e7a8      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013eaa:	230a      	movs	r3, #10
34013eac:	e7a6      	b.n	34013dfc <HAL_GPIO_DeInit+0x170>
34013eae:	bf00      	nop
34013eb0:	56020000 	.word	0x56020000
34013eb4:	56020400 	.word	0x56020400
34013eb8:	56020800 	.word	0x56020800
34013ebc:	56020c00 	.word	0x56020c00
34013ec0:	56021000 	.word	0x56021000
34013ec4:	56021400 	.word	0x56021400
34013ec8:	56021800 	.word	0x56021800
34013ecc:	56021c00 	.word	0x56021c00
34013ed0:	56023400 	.word	0x56023400
34013ed4:	56023800 	.word	0x56023800
34013ed8:	56023c00 	.word	0x56023c00
34013edc:	56024000 	.word	0x56024000
34013ee0:	3402bad9 	.word	0x3402bad9
34013ee4:	56025000 	.word	0x56025000

34013ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34013ee8:	b538      	push	{r3, r4, r5, lr}
34013eea:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34013eec:	460c      	mov	r4, r1
34013eee:	b921      	cbnz	r1, 34013efa <HAL_GPIO_ReadPin+0x12>
34013ef0:	f44f 71c1 	mov.w	r1, #386	@ 0x182
34013ef4:	4804      	ldr	r0, [pc, #16]	@ (34013f08 <HAL_GPIO_ReadPin+0x20>)
34013ef6:	f00b f933 	bl	3401f160 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
34013efa:	692b      	ldr	r3, [r5, #16]
34013efc:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
34013efe:	bf14      	ite	ne
34013f00:	2001      	movne	r0, #1
34013f02:	2000      	moveq	r0, #0
34013f04:	bd38      	pop	{r3, r4, r5, pc}
34013f06:	bf00      	nop
34013f08:	3402bad9 	.word	0x3402bad9

34013f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34013f0c:	b570      	push	{r4, r5, r6, lr}
34013f0e:	4605      	mov	r5, r0
34013f10:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34013f12:	460c      	mov	r4, r1
34013f14:	b921      	cbnz	r1, 34013f20 <HAL_GPIO_WritePin+0x14>
34013f16:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34013f1a:	4808      	ldr	r0, [pc, #32]	@ (34013f3c <HAL_GPIO_WritePin+0x30>)
34013f1c:	f00b f920 	bl	3401f160 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34013f20:	2e01      	cmp	r6, #1
34013f22:	d906      	bls.n	34013f32 <HAL_GPIO_WritePin+0x26>
34013f24:	f240 11a1 	movw	r1, #417	@ 0x1a1
34013f28:	4804      	ldr	r0, [pc, #16]	@ (34013f3c <HAL_GPIO_WritePin+0x30>)
34013f2a:	f00b f919 	bl	3401f160 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34013f2e:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34013f30:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34013f32:	2e00      	cmp	r6, #0
34013f34:	d1fb      	bne.n	34013f2e <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34013f36:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34013f38:	e7fa      	b.n	34013f30 <HAL_GPIO_WritePin+0x24>
34013f3a:	bf00      	nop
34013f3c:	3402bad9 	.word	0x3402bad9

34013f40 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
34013f40:	6803      	ldr	r3, [r0, #0]
34013f42:	699a      	ldr	r2, [r3, #24]
34013f44:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
34013f46:	bf44      	itt	mi
34013f48:	2200      	movmi	r2, #0
34013f4a:	629a      	strmi	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
34013f4c:	699a      	ldr	r2, [r3, #24]
34013f4e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
34013f50:	bf5e      	ittt	pl
34013f52:	699a      	ldrpl	r2, [r3, #24]
34013f54:	f042 0201 	orrpl.w	r2, r2, #1
34013f58:	619a      	strpl	r2, [r3, #24]
  }
}
34013f5a:	4770      	bx	lr

34013f5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
34013f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34013f60:	4614      	mov	r4, r2
34013f62:	461f      	mov	r7, r3
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013f64:	6802      	ldr	r2, [r0, #0]
34013f66:	4b29      	ldr	r3, [pc, #164]	@ (3401400c <I2C_TransferConfig+0xb0>)
{
34013f68:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013f6a:	429a      	cmp	r2, r3
{
34013f6c:	460e      	mov	r6, r1
34013f6e:	9d06      	ldr	r5, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34013f70:	d01d      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f72:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013f76:	429a      	cmp	r2, r3
34013f78:	d019      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f7a:	4b25      	ldr	r3, [pc, #148]	@ (34014010 <I2C_TransferConfig+0xb4>)
34013f7c:	429a      	cmp	r2, r3
34013f7e:	d016      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f80:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013f84:	429a      	cmp	r2, r3
34013f86:	d012      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f88:	4b22      	ldr	r3, [pc, #136]	@ (34014014 <I2C_TransferConfig+0xb8>)
34013f8a:	429a      	cmp	r2, r3
34013f8c:	d00f      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f8e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013f92:	429a      	cmp	r2, r3
34013f94:	d00b      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f96:	4b20      	ldr	r3, [pc, #128]	@ (34014018 <I2C_TransferConfig+0xbc>)
34013f98:	429a      	cmp	r2, r3
34013f9a:	d008      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013f9c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34013fa0:	429a      	cmp	r2, r3
34013fa2:	d004      	beq.n	34013fae <I2C_TransferConfig+0x52>
34013fa4:	f641 51c9 	movw	r1, #7625	@ 0x1dc9
34013fa8:	481c      	ldr	r0, [pc, #112]	@ (3401401c <I2C_TransferConfig+0xc0>)
34013faa:	f00b f8d9 	bl	3401f160 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
34013fae:	f037 7380 	bics.w	r3, r7, #16777216	@ 0x1000000
34013fb2:	d007      	beq.n	34013fc4 <I2C_TransferConfig+0x68>
34013fb4:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
34013fb8:	d004      	beq.n	34013fc4 <I2C_TransferConfig+0x68>
34013fba:	f641 51ca 	movw	r1, #7626	@ 0x1dca
34013fbe:	4817      	ldr	r0, [pc, #92]	@ (3401401c <I2C_TransferConfig+0xc0>)
34013fc0:	f00b f8ce 	bl	3401f160 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
34013fc4:	4b16      	ldr	r3, [pc, #88]	@ (34014020 <I2C_TransferConfig+0xc4>)
34013fc6:	429d      	cmp	r5, r3
34013fc8:	d00b      	beq.n	34013fe2 <I2C_TransferConfig+0x86>
34013fca:	f425 6280 	bic.w	r2, r5, #1024	@ 0x400
34013fce:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
34013fd2:	429a      	cmp	r2, r3
34013fd4:	d005      	beq.n	34013fe2 <I2C_TransferConfig+0x86>
34013fd6:	b125      	cbz	r5, 34013fe2 <I2C_TransferConfig+0x86>
34013fd8:	f641 51cb 	movw	r1, #7627	@ 0x1dcb
34013fdc:	480f      	ldr	r0, [pc, #60]	@ (3401401c <I2C_TransferConfig+0xc0>)
34013fde:	f00b f8bf 	bl	3401f160 <assert_failed>
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
34013fe2:	f8d8 0000 	ldr.w	r0, [r8]
34013fe6:	490f      	ldr	r1, [pc, #60]	@ (34014024 <I2C_TransferConfig+0xc8>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34013fe8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
34013fec:	6842      	ldr	r2, [r0, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34013fee:	ea44 0307 	orr.w	r3, r4, r7
34013ff2:	f3c6 0609 	ubfx	r6, r6, #0, #10
34013ff6:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->CR2, \
34013ff8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
34013ffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
34014000:	ea22 0201 	bic.w	r2, r2, r1
34014004:	4313      	orrs	r3, r2
34014006:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
34014008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401400c:	50005400 	.word	0x50005400
34014010:	50005800 	.word	0x50005800
34014014:	50005c00 	.word	0x50005c00
34014018:	56001c00 	.word	0x56001c00
3401401c:	3402bb3a 	.word	0x3402bb3a
34014020:	80004000 	.word	0x80004000
34014024:	03ff63ff 	.word	0x03ff63ff

34014028 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
34014028:	6803      	ldr	r3, [r0, #0]
{
3401402a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
3401402e:	699c      	ldr	r4, [r3, #24]
{
34014030:	4605      	mov	r5, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
34014032:	f014 0410 	ands.w	r4, r4, #16
{
34014036:	460f      	mov	r7, r1
34014038:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
3401403a:	d06f      	beq.n	3401411c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
3401403c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
3401403e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
34014040:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
34014042:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
34014044:	682b      	ldr	r3, [r5, #0]
34014046:	699a      	ldr	r2, [r3, #24]
34014048:	0690      	lsls	r0, r2, #26
3401404a:	d461      	bmi.n	34014110 <I2C_IsErrorOccurred+0xe8>
3401404c:	f1b8 0f00 	cmp.w	r8, #0
34014050:	d035      	beq.n	340140be <I2C_IsErrorOccurred+0x96>
    status = HAL_ERROR;
34014052:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
34014054:	f044 0404 	orr.w	r4, r4, #4
  itflag = hi2c->Instance->ISR;
34014058:	682e      	ldr	r6, [r5, #0]
3401405a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
3401405c:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
3401405e:	bf41      	itttt	mi
34014060:	f44f 7280 	movmi.w	r2, #256	@ 0x100
    status = HAL_ERROR;
34014064:	2001      	movmi	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
34014066:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
34014068:	f044 0401 	orrmi.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
3401406c:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
3401406e:	bf41      	itttt	mi
34014070:	f44f 6280 	movmi.w	r2, #1024	@ 0x400
    status = HAL_ERROR;
34014074:	2001      	movmi	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
34014076:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
3401407a:	61f2      	strmi	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
3401407c:	059b      	lsls	r3, r3, #22
3401407e:	d54f      	bpl.n	34014120 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34014080:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
34014084:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
34014088:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
3401408a:	4628      	mov	r0, r5
3401408c:	f7ff ff58 	bl	34013f40 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
34014090:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
34014092:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
34014094:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
34014098:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
3401409c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
340140a0:	f023 0301 	bic.w	r3, r3, #1
340140a4:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
340140a6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
340140a8:	4323      	orrs	r3, r4
340140aa:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
340140ac:	2320      	movs	r3, #32
340140ae:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
340140b2:	2300      	movs	r3, #0
340140b4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
340140b8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
340140bc:	e032      	b.n	34014124 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
340140be:	1c7a      	adds	r2, r7, #1
340140c0:	d0c1      	beq.n	34014046 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
340140c2:	f00a fd1d 	bl	3401eb00 <HAL_GetTick>
340140c6:	1b80      	subs	r0, r0, r6
340140c8:	42b8      	cmp	r0, r7
340140ca:	d801      	bhi.n	340140d0 <I2C_IsErrorOccurred+0xa8>
340140cc:	2f00      	cmp	r7, #0
340140ce:	d1b9      	bne.n	34014044 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
340140d0:	682b      	ldr	r3, [r5, #0]
340140d2:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
340140d4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
340140d8:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
340140da:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
340140dc:	0400      	lsls	r0, r0, #16
340140de:	d50a      	bpl.n	340140f6 <I2C_IsErrorOccurred+0xce>
340140e0:	0449      	lsls	r1, r1, #17
340140e2:	d408      	bmi.n	340140f6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
340140e4:	2a20      	cmp	r2, #32
340140e6:	d006      	beq.n	340140f6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
340140e8:	685a      	ldr	r2, [r3, #4]
340140ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
340140ee:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
340140f0:	f00a fd06 	bl	3401eb00 <HAL_GetTick>
340140f4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
340140f6:	682b      	ldr	r3, [r5, #0]
340140f8:	699b      	ldr	r3, [r3, #24]
340140fa:	069b      	lsls	r3, r3, #26
340140fc:	d4a2      	bmi.n	34014044 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
340140fe:	f00a fcff 	bl	3401eb00 <HAL_GetTick>
34014102:	1b80      	subs	r0, r0, r6
34014104:	2819      	cmp	r0, #25
34014106:	d9f6      	bls.n	340140f6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
34014108:	2420      	movs	r4, #32
              status = HAL_ERROR;
3401410a:	f04f 0801 	mov.w	r8, #1
3401410e:	e799      	b.n	34014044 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
34014110:	f1b8 0f00 	cmp.w	r8, #0
34014114:	d19d      	bne.n	34014052 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
34014116:	2220      	movs	r2, #32
34014118:	61da      	str	r2, [r3, #28]
3401411a:	e79a      	b.n	34014052 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
3401411c:	4620      	mov	r0, r4
3401411e:	e79b      	b.n	34014058 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
34014120:	2800      	cmp	r0, #0
34014122:	d1b2      	bne.n	3401408a <I2C_IsErrorOccurred+0x62>
}
34014124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

34014128 <I2C_WaitOnTXISFlagUntilTimeout>:
{
34014128:	b570      	push	{r4, r5, r6, lr}
3401412a:	4604      	mov	r4, r0
3401412c:	460d      	mov	r5, r1
3401412e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
34014130:	6823      	ldr	r3, [r4, #0]
34014132:	699b      	ldr	r3, [r3, #24]
34014134:	079b      	lsls	r3, r3, #30
34014136:	d501      	bpl.n	3401413c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
34014138:	2000      	movs	r0, #0
3401413a:	e01f      	b.n	3401417c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
3401413c:	4632      	mov	r2, r6
3401413e:	4629      	mov	r1, r5
34014140:	4620      	mov	r0, r4
34014142:	f7ff ff71 	bl	34014028 <I2C_IsErrorOccurred>
34014146:	b9c0      	cbnz	r0, 3401417a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
34014148:	1c6a      	adds	r2, r5, #1
3401414a:	d0f1      	beq.n	34014130 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401414c:	f00a fcd8 	bl	3401eb00 <HAL_GetTick>
34014150:	1b80      	subs	r0, r0, r6
34014152:	42a8      	cmp	r0, r5
34014154:	d801      	bhi.n	3401415a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
34014156:	2d00      	cmp	r5, #0
34014158:	d1ea      	bne.n	34014130 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
3401415a:	6823      	ldr	r3, [r4, #0]
3401415c:	699b      	ldr	r3, [r3, #24]
3401415e:	f013 0302 	ands.w	r3, r3, #2
34014162:	d1e5      	bne.n	34014130 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34014164:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
34014166:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
3401416a:	f042 0220 	orr.w	r2, r2, #32
3401416e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
34014170:	2220      	movs	r2, #32
34014172:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
34014176:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
3401417a:	2001      	movs	r0, #1
}
3401417c:	bd70      	pop	{r4, r5, r6, pc}

3401417e <I2C_WaitOnFlagUntilTimeout>:
{
3401417e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34014182:	4604      	mov	r4, r0
34014184:	460f      	mov	r7, r1
34014186:	4616      	mov	r6, r2
34014188:	461d      	mov	r5, r3
3401418a:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
3401418e:	6823      	ldr	r3, [r4, #0]
34014190:	699b      	ldr	r3, [r3, #24]
34014192:	ea37 0303 	bics.w	r3, r7, r3
34014196:	bf0c      	ite	eq
34014198:	2301      	moveq	r3, #1
3401419a:	2300      	movne	r3, #0
3401419c:	42b3      	cmp	r3, r6
3401419e:	d001      	beq.n	340141a4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
340141a0:	2000      	movs	r0, #0
340141a2:	e025      	b.n	340141f0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
340141a4:	4642      	mov	r2, r8
340141a6:	4629      	mov	r1, r5
340141a8:	4620      	mov	r0, r4
340141aa:	f7ff ff3d 	bl	34014028 <I2C_IsErrorOccurred>
340141ae:	b9f0      	cbnz	r0, 340141ee <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
340141b0:	1c6b      	adds	r3, r5, #1
340141b2:	d0ec      	beq.n	3401418e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
340141b4:	f00a fca4 	bl	3401eb00 <HAL_GetTick>
340141b8:	eba0 0008 	sub.w	r0, r0, r8
340141bc:	42a8      	cmp	r0, r5
340141be:	d801      	bhi.n	340141c4 <I2C_WaitOnFlagUntilTimeout+0x46>
340141c0:	2d00      	cmp	r5, #0
340141c2:	d1e4      	bne.n	3401418e <I2C_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
340141c4:	6823      	ldr	r3, [r4, #0]
340141c6:	699b      	ldr	r3, [r3, #24]
340141c8:	ea37 0303 	bics.w	r3, r7, r3
340141cc:	bf0c      	ite	eq
340141ce:	2301      	moveq	r3, #1
340141d0:	2300      	movne	r3, #0
340141d2:	42b3      	cmp	r3, r6
340141d4:	d1db      	bne.n	3401418e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
340141d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
340141d8:	f043 0320 	orr.w	r3, r3, #32
340141dc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
340141de:	2320      	movs	r3, #32
340141e0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
340141e4:	2300      	movs	r3, #0
340141e6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
340141ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
340141ee:	2001      	movs	r0, #1
}
340141f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

340141f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
340141f4:	b570      	push	{r4, r5, r6, lr}
340141f6:	4604      	mov	r4, r0
340141f8:	460d      	mov	r5, r1
340141fa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
340141fc:	6823      	ldr	r3, [r4, #0]
340141fe:	699b      	ldr	r3, [r3, #24]
34014200:	069b      	lsls	r3, r3, #26
34014202:	d501      	bpl.n	34014208 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
34014204:	2000      	movs	r0, #0
34014206:	e01d      	b.n	34014244 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
34014208:	4632      	mov	r2, r6
3401420a:	4629      	mov	r1, r5
3401420c:	4620      	mov	r0, r4
3401420e:	f7ff ff0b 	bl	34014028 <I2C_IsErrorOccurred>
34014212:	b9b0      	cbnz	r0, 34014242 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
34014214:	f00a fc74 	bl	3401eb00 <HAL_GetTick>
34014218:	1b80      	subs	r0, r0, r6
3401421a:	42a8      	cmp	r0, r5
3401421c:	d801      	bhi.n	34014222 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
3401421e:	2d00      	cmp	r5, #0
34014220:	d1ec      	bne.n	340141fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
34014222:	6823      	ldr	r3, [r4, #0]
34014224:	699b      	ldr	r3, [r3, #24]
34014226:	f013 0320 	ands.w	r3, r3, #32
3401422a:	d1e7      	bne.n	340141fc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
3401422c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
3401422e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
34014232:	f042 0220 	orr.w	r2, r2, #32
34014236:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
34014238:	2220      	movs	r2, #32
3401423a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
3401423e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
34014242:	2001      	movs	r0, #1
}
34014244:	bd70      	pop	{r4, r5, r6, pc}

34014246 <HAL_I2C_MspInit>:
}
34014246:	4770      	bx	lr

34014248 <HAL_I2C_Init>:
{
34014248:	b510      	push	{r4, lr}
  if (hi2c == NULL)
3401424a:	4604      	mov	r4, r0
3401424c:	2800      	cmp	r0, #0
3401424e:	f000 80af 	beq.w	340143b0 <HAL_I2C_Init+0x168>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34014252:	6803      	ldr	r3, [r0, #0]
34014254:	4a57      	ldr	r2, [pc, #348]	@ (340143b4 <HAL_I2C_Init+0x16c>)
34014256:	4293      	cmp	r3, r2
34014258:	d01d      	beq.n	34014296 <HAL_I2C_Init+0x4e>
3401425a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401425e:	4293      	cmp	r3, r2
34014260:	d019      	beq.n	34014296 <HAL_I2C_Init+0x4e>
34014262:	4a55      	ldr	r2, [pc, #340]	@ (340143b8 <HAL_I2C_Init+0x170>)
34014264:	4293      	cmp	r3, r2
34014266:	d016      	beq.n	34014296 <HAL_I2C_Init+0x4e>
34014268:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401426c:	4293      	cmp	r3, r2
3401426e:	d012      	beq.n	34014296 <HAL_I2C_Init+0x4e>
34014270:	4a52      	ldr	r2, [pc, #328]	@ (340143bc <HAL_I2C_Init+0x174>)
34014272:	4293      	cmp	r3, r2
34014274:	d00f      	beq.n	34014296 <HAL_I2C_Init+0x4e>
34014276:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401427a:	4293      	cmp	r3, r2
3401427c:	d00b      	beq.n	34014296 <HAL_I2C_Init+0x4e>
3401427e:	4a50      	ldr	r2, [pc, #320]	@ (340143c0 <HAL_I2C_Init+0x178>)
34014280:	4293      	cmp	r3, r2
34014282:	d008      	beq.n	34014296 <HAL_I2C_Init+0x4e>
34014284:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014288:	4293      	cmp	r3, r2
3401428a:	d004      	beq.n	34014296 <HAL_I2C_Init+0x4e>
3401428c:	f240 2126 	movw	r1, #550	@ 0x226
34014290:	484c      	ldr	r0, [pc, #304]	@ (340143c4 <HAL_I2C_Init+0x17c>)
34014292:	f00a ff65 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
34014296:	68a3      	ldr	r3, [r4, #8]
34014298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401429c:	d304      	bcc.n	340142a8 <HAL_I2C_Init+0x60>
3401429e:	f240 2127 	movw	r1, #551	@ 0x227
340142a2:	4848      	ldr	r0, [pc, #288]	@ (340143c4 <HAL_I2C_Init+0x17c>)
340142a4:	f00a ff5c 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
340142a8:	68e3      	ldr	r3, [r4, #12]
340142aa:	3b01      	subs	r3, #1
340142ac:	2b01      	cmp	r3, #1
340142ae:	d904      	bls.n	340142ba <HAL_I2C_Init+0x72>
340142b0:	f44f 710a 	mov.w	r1, #552	@ 0x228
340142b4:	4843      	ldr	r0, [pc, #268]	@ (340143c4 <HAL_I2C_Init+0x17c>)
340142b6:	f00a ff53 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
340142ba:	6923      	ldr	r3, [r4, #16]
340142bc:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
340142c0:	d004      	beq.n	340142cc <HAL_I2C_Init+0x84>
340142c2:	f240 2129 	movw	r1, #553	@ 0x229
340142c6:	483f      	ldr	r0, [pc, #252]	@ (340143c4 <HAL_I2C_Init+0x17c>)
340142c8:	f00a ff4a 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
340142cc:	6963      	ldr	r3, [r4, #20]
340142ce:	2bff      	cmp	r3, #255	@ 0xff
340142d0:	d904      	bls.n	340142dc <HAL_I2C_Init+0x94>
340142d2:	f240 212a 	movw	r1, #554	@ 0x22a
340142d6:	483b      	ldr	r0, [pc, #236]	@ (340143c4 <HAL_I2C_Init+0x17c>)
340142d8:	f00a ff42 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
340142dc:	69a3      	ldr	r3, [r4, #24]
340142de:	2b07      	cmp	r3, #7
340142e0:	d904      	bls.n	340142ec <HAL_I2C_Init+0xa4>
340142e2:	f240 212b 	movw	r1, #555	@ 0x22b
340142e6:	4837      	ldr	r0, [pc, #220]	@ (340143c4 <HAL_I2C_Init+0x17c>)
340142e8:	f00a ff3a 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
340142ec:	69e3      	ldr	r3, [r4, #28]
340142ee:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
340142f2:	d004      	beq.n	340142fe <HAL_I2C_Init+0xb6>
340142f4:	f44f 710b 	mov.w	r1, #556	@ 0x22c
340142f8:	4832      	ldr	r0, [pc, #200]	@ (340143c4 <HAL_I2C_Init+0x17c>)
340142fa:	f00a ff31 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
340142fe:	6a23      	ldr	r3, [r4, #32]
34014300:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
34014304:	d004      	beq.n	34014310 <HAL_I2C_Init+0xc8>
34014306:	f240 212d 	movw	r1, #557	@ 0x22d
3401430a:	482e      	ldr	r0, [pc, #184]	@ (340143c4 <HAL_I2C_Init+0x17c>)
3401430c:	f00a ff28 	bl	3401f160 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
34014310:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
34014314:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34014318:	b923      	cbnz	r3, 34014324 <HAL_I2C_Init+0xdc>
    HAL_I2C_MspInit(hi2c);
3401431a:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
3401431c:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
34014320:	f7ff ff91 	bl	34014246 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
34014324:	2324      	movs	r3, #36	@ 0x24
34014326:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
3401432a:	6823      	ldr	r3, [r4, #0]
3401432c:	681a      	ldr	r2, [r3, #0]
3401432e:	f022 0201 	bic.w	r2, r2, #1
34014332:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
34014334:	6862      	ldr	r2, [r4, #4]
34014336:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
3401433a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
3401433c:	689a      	ldr	r2, [r3, #8]
3401433e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34014342:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
34014344:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
34014348:	2901      	cmp	r1, #1
3401434a:	d106      	bne.n	3401435a <HAL_I2C_Init+0x112>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
3401434c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34014350:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34014352:	685a      	ldr	r2, [r3, #4]
34014354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
34014358:	e007      	b.n	3401436a <HAL_I2C_Init+0x122>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
3401435a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
3401435e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
34014360:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
34014362:	d1f6      	bne.n	34014352 <HAL_I2C_Init+0x10a>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
34014364:	685a      	ldr	r2, [r3, #4]
34014366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
3401436a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
3401436c:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3401436e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
34014370:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
34014374:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34014378:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
3401437a:	68da      	ldr	r2, [r3, #12]
3401437c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
34014380:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
34014382:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
34014386:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
34014388:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
3401438a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
3401438e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
34014390:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
34014394:	430a      	orrs	r2, r1
34014396:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
34014398:	681a      	ldr	r2, [r3, #0]
3401439a:	f042 0201 	orr.w	r2, r2, #1
3401439e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
340143a0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340143a2:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
340143a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
340143a8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
340143aa:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
340143ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
340143b0:	2001      	movs	r0, #1
340143b2:	e7fc      	b.n	340143ae <HAL_I2C_Init+0x166>
340143b4:	50005400 	.word	0x50005400
340143b8:	50005800 	.word	0x50005800
340143bc:	50005c00 	.word	0x50005c00
340143c0:	56001c00 	.word	0x56001c00
340143c4:	3402bb3a 	.word	0x3402bb3a

340143c8 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
340143c8:	4770      	bx	lr
	...

340143cc <HAL_I2C_DeInit>:
{
340143cc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
340143ce:	4604      	mov	r4, r0
340143d0:	2800      	cmp	r0, #0
340143d2:	d036      	beq.n	34014442 <HAL_I2C_DeInit+0x76>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
340143d4:	6803      	ldr	r3, [r0, #0]
340143d6:	4a1c      	ldr	r2, [pc, #112]	@ (34014448 <HAL_I2C_DeInit+0x7c>)
340143d8:	4293      	cmp	r3, r2
340143da:	d01d      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
340143dc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340143e0:	4293      	cmp	r3, r2
340143e2:	d019      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
340143e4:	4a19      	ldr	r2, [pc, #100]	@ (3401444c <HAL_I2C_DeInit+0x80>)
340143e6:	4293      	cmp	r3, r2
340143e8:	d016      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
340143ea:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340143ee:	4293      	cmp	r3, r2
340143f0:	d012      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
340143f2:	4a17      	ldr	r2, [pc, #92]	@ (34014450 <HAL_I2C_DeInit+0x84>)
340143f4:	4293      	cmp	r3, r2
340143f6:	d00f      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
340143f8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340143fc:	4293      	cmp	r3, r2
340143fe:	d00b      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
34014400:	4a14      	ldr	r2, [pc, #80]	@ (34014454 <HAL_I2C_DeInit+0x88>)
34014402:	4293      	cmp	r3, r2
34014404:	d008      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
34014406:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401440a:	4293      	cmp	r3, r2
3401440c:	d004      	beq.n	34014418 <HAL_I2C_DeInit+0x4c>
3401440e:	f240 2199 	movw	r1, #665	@ 0x299
34014412:	4811      	ldr	r0, [pc, #68]	@ (34014458 <HAL_I2C_DeInit+0x8c>)
34014414:	f00a fea4 	bl	3401f160 <assert_failed>
  hi2c->State = HAL_I2C_STATE_BUSY;
34014418:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
3401441a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
3401441c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
34014420:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
34014422:	4620      	mov	r0, r4
  __HAL_I2C_DISABLE(hi2c);
34014424:	f023 0301 	bic.w	r3, r3, #1
34014428:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
3401442a:	f7ff ffcd 	bl	340143c8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
3401442e:	2000      	movs	r0, #0
34014430:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
34014432:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
34014436:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
3401443a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
3401443c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
34014440:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
34014442:	2001      	movs	r0, #1
34014444:	e7fc      	b.n	34014440 <HAL_I2C_DeInit+0x74>
34014446:	bf00      	nop
34014448:	50005400 	.word	0x50005400
3401444c:	50005800 	.word	0x50005800
34014450:	50005c00 	.word	0x50005c00
34014454:	56001c00 	.word	0x56001c00
34014458:	3402bb3a 	.word	0x3402bb3a

3401445c <HAL_I2C_Mem_Write>:
{
3401445c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34014460:	4699      	mov	r9, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
34014462:	3b01      	subs	r3, #1
34014464:	2b01      	cmp	r3, #1
{
34014466:	4604      	mov	r4, r0
34014468:	460f      	mov	r7, r1
3401446a:	4616      	mov	r6, r2
3401446c:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
34014470:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
34014474:	d904      	bls.n	34014480 <HAL_I2C_Mem_Write+0x24>
34014476:	f640 2138 	movw	r1, #2616	@ 0xa38
3401447a:	4868      	ldr	r0, [pc, #416]	@ (3401461c <HAL_I2C_Mem_Write+0x1c0>)
3401447c:	f00a fe70 	bl	3401f160 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
34014480:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
34014484:	2b20      	cmp	r3, #32
34014486:	f040 80c6 	bne.w	34014616 <HAL_I2C_Mem_Write+0x1ba>
    if ((pData == NULL) || (Size == 0U))
3401448a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401448c:	b113      	cbz	r3, 34014494 <HAL_I2C_Mem_Write+0x38>
3401448e:	f1ba 0f00 	cmp.w	sl, #0
34014492:	d106      	bne.n	340144a2 <HAL_I2C_Mem_Write+0x46>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
34014494:	f44f 7300 	mov.w	r3, #512	@ 0x200
34014498:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
3401449a:	2001      	movs	r0, #1
}
3401449c:	b003      	add	sp, #12
3401449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
340144a2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
340144a6:	2b01      	cmp	r3, #1
340144a8:	f000 80b5 	beq.w	34014616 <HAL_I2C_Mem_Write+0x1ba>
340144ac:	f04f 0b01 	mov.w	fp, #1
340144b0:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
340144b4:	f00a fb24 	bl	3401eb00 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
340144b8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
340144ba:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
340144bc:	9000      	str	r0, [sp, #0]
340144be:	465a      	mov	r2, fp
340144c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
340144c4:	4620      	mov	r0, r4
340144c6:	f7ff fe5a 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
340144ca:	2800      	cmp	r0, #0
340144cc:	d1e5      	bne.n	3401449a <HAL_I2C_Mem_Write+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
340144ce:	2321      	movs	r3, #33	@ 0x21
340144d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
340144d4:	2340      	movs	r3, #64	@ 0x40
340144d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
340144da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340144dc:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
340144de:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
340144e0:	4b4f      	ldr	r3, [pc, #316]	@ (34014620 <HAL_I2C_Mem_Write+0x1c4>)
    hi2c->XferISR   = NULL;
340144e2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
340144e4:	4639      	mov	r1, r7
340144e6:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
340144e8:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
340144ec:	fa5f f289 	uxtb.w	r2, r9
340144f0:	9300      	str	r3, [sp, #0]
340144f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
340144f6:	f7ff fd31 	bl	34013f5c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
340144fa:	462a      	mov	r2, r5
340144fc:	4641      	mov	r1, r8
340144fe:	4620      	mov	r0, r4
34014500:	f7ff fe12 	bl	34014128 <I2C_WaitOnTXISFlagUntilTimeout>
34014504:	bb18      	cbnz	r0, 3401454e <HAL_I2C_Mem_Write+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
34014506:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401450a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
3401450c:	d115      	bne.n	3401453a <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401450e:	b2f6      	uxtb	r6, r6
34014510:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
34014512:	2200      	movs	r2, #0
34014514:	4643      	mov	r3, r8
34014516:	2180      	movs	r1, #128	@ 0x80
34014518:	4620      	mov	r0, r4
3401451a:	9500      	str	r5, [sp, #0]
3401451c:	f7ff fe2f 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
34014520:	b9a8      	cbnz	r0, 3401454e <HAL_I2C_Mem_Write+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
34014522:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34014524:	b29b      	uxth	r3, r3
34014526:	2bff      	cmp	r3, #255	@ 0xff
34014528:	d815      	bhi.n	34014556 <HAL_I2C_Mem_Write+0xfa>
      hi2c->XferSize = hi2c->XferCount;
3401452a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
3401452c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
34014530:	b292      	uxth	r2, r2
34014532:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
34014534:	9000      	str	r0, [sp, #0]
34014536:	b2d2      	uxtb	r2, r2
34014538:	e012      	b.n	34014560 <HAL_I2C_Mem_Write+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
3401453a:	0a32      	lsrs	r2, r6, #8
3401453c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
3401453e:	4641      	mov	r1, r8
34014540:	462a      	mov	r2, r5
34014542:	4620      	mov	r0, r4
34014544:	f7ff fdf0 	bl	34014128 <I2C_WaitOnTXISFlagUntilTimeout>
34014548:	b908      	cbnz	r0, 3401454e <HAL_I2C_Mem_Write+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
3401454a:	6823      	ldr	r3, [r4, #0]
3401454c:	e7df      	b.n	3401450e <HAL_I2C_Mem_Write+0xb2>
      __HAL_UNLOCK(hi2c);
3401454e:	2300      	movs	r3, #0
34014550:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
34014554:	e7a1      	b.n	3401449a <HAL_I2C_Mem_Write+0x3e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
34014556:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
34014558:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
3401455c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
3401455e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
34014560:	4639      	mov	r1, r7
34014562:	4620      	mov	r0, r4
34014564:	f7ff fcfa 	bl	34013f5c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
34014568:	462a      	mov	r2, r5
3401456a:	4641      	mov	r1, r8
3401456c:	4620      	mov	r0, r4
3401456e:	f7ff fddb 	bl	34014128 <I2C_WaitOnTXISFlagUntilTimeout>
34014572:	2800      	cmp	r0, #0
34014574:	d191      	bne.n	3401449a <HAL_I2C_Mem_Write+0x3e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
34014576:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014578:	6822      	ldr	r2, [r4, #0]
3401457a:	f813 1b01 	ldrb.w	r1, [r3], #1
3401457e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
34014580:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
34014582:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
34014584:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
34014586:	3b01      	subs	r3, #1
34014588:	b29b      	uxth	r3, r3
3401458a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
3401458c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
3401458e:	3a01      	subs	r2, #1
34014590:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34014592:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
34014594:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34014596:	b1b3      	cbz	r3, 340145c6 <HAL_I2C_Mem_Write+0x16a>
34014598:	b9aa      	cbnz	r2, 340145c6 <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
3401459a:	4643      	mov	r3, r8
3401459c:	2180      	movs	r1, #128	@ 0x80
3401459e:	4620      	mov	r0, r4
340145a0:	9500      	str	r5, [sp, #0]
340145a2:	f7ff fdec 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
340145a6:	2800      	cmp	r0, #0
340145a8:	f47f af77 	bne.w	3401449a <HAL_I2C_Mem_Write+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
340145ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340145ae:	b29b      	uxth	r3, r3
340145b0:	2bff      	cmp	r3, #255	@ 0xff
340145b2:	d928      	bls.n	34014606 <HAL_I2C_Mem_Write+0x1aa>
          hi2c->XferSize = MAX_NBYTE_SIZE;
340145b4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
340145b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
340145ba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
340145bc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
340145be:	4639      	mov	r1, r7
340145c0:	4620      	mov	r0, r4
340145c2:	f7ff fccb 	bl	34013f5c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
340145c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340145c8:	b29b      	uxth	r3, r3
340145ca:	2b00      	cmp	r3, #0
340145cc:	d1cc      	bne.n	34014568 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
340145ce:	462a      	mov	r2, r5
340145d0:	4641      	mov	r1, r8
340145d2:	4620      	mov	r0, r4
340145d4:	f7ff fe0e 	bl	340141f4 <I2C_WaitOnSTOPFlagUntilTimeout>
340145d8:	2800      	cmp	r0, #0
340145da:	f47f af5e 	bne.w	3401449a <HAL_I2C_Mem_Write+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
340145de:	2120      	movs	r1, #32
340145e0:	6823      	ldr	r3, [r4, #0]
340145e2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
340145e4:	685a      	ldr	r2, [r3, #4]
340145e6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
340145ea:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
340145ee:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
340145f2:	f022 0201 	bic.w	r2, r2, #1
340145f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
340145f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
340145fc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
34014600:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
34014604:	e74a      	b.n	3401449c <HAL_I2C_Mem_Write+0x40>
          hi2c->XferSize = hi2c->XferCount;
34014606:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34014608:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
3401460c:	b292      	uxth	r2, r2
3401460e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34014610:	9000      	str	r0, [sp, #0]
34014612:	b2d2      	uxtb	r2, r2
34014614:	e7d3      	b.n	340145be <HAL_I2C_Mem_Write+0x162>
    __HAL_LOCK(hi2c);
34014616:	2002      	movs	r0, #2
34014618:	e740      	b.n	3401449c <HAL_I2C_Mem_Write+0x40>
3401461a:	bf00      	nop
3401461c:	3402bb3a 	.word	0x3402bb3a
34014620:	80002000 	.word	0x80002000

34014624 <HAL_I2C_Mem_Read>:
{
34014624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34014628:	4699      	mov	r9, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
3401462a:	3b01      	subs	r3, #1
3401462c:	2b01      	cmp	r3, #1
{
3401462e:	4604      	mov	r4, r0
34014630:	460f      	mov	r7, r1
34014632:	4616      	mov	r6, r2
34014634:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
34014638:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
3401463c:	d904      	bls.n	34014648 <HAL_I2C_Mem_Read+0x24>
3401463e:	f640 21c1 	movw	r1, #2753	@ 0xac1
34014642:	4869      	ldr	r0, [pc, #420]	@ (340147e8 <HAL_I2C_Mem_Read+0x1c4>)
34014644:	f00a fd8c 	bl	3401f160 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
34014648:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
3401464c:	2b20      	cmp	r3, #32
3401464e:	f040 80c9 	bne.w	340147e4 <HAL_I2C_Mem_Read+0x1c0>
    if ((pData == NULL) || (Size == 0U))
34014652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34014654:	b113      	cbz	r3, 3401465c <HAL_I2C_Mem_Read+0x38>
34014656:	f1ba 0f00 	cmp.w	sl, #0
3401465a:	d106      	bne.n	3401466a <HAL_I2C_Mem_Read+0x46>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
3401465c:	f44f 7300 	mov.w	r3, #512	@ 0x200
34014660:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
34014662:	2001      	movs	r0, #1
}
34014664:	b003      	add	sp, #12
34014666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
3401466a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
3401466e:	2b01      	cmp	r3, #1
34014670:	f000 80b8 	beq.w	340147e4 <HAL_I2C_Mem_Read+0x1c0>
34014674:	f04f 0b01 	mov.w	fp, #1
34014678:	f884 b040 	strb.w	fp, [r4, #64]	@ 0x40
    tickstart = HAL_GetTick();
3401467c:	f00a fa40 	bl	3401eb00 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34014680:	2319      	movs	r3, #25
34014682:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
34014684:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
34014686:	465a      	mov	r2, fp
34014688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3401468c:	4620      	mov	r0, r4
3401468e:	f7ff fd76 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
34014692:	4603      	mov	r3, r0
34014694:	2800      	cmp	r0, #0
34014696:	d1e4      	bne.n	34014662 <HAL_I2C_Mem_Read+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
34014698:	2222      	movs	r2, #34	@ 0x22
3401469a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
3401469e:	2240      	movs	r2, #64	@ 0x40
340146a0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
340146a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
340146a6:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
340146a8:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
340146aa:	4a50      	ldr	r2, [pc, #320]	@ (340147ec <HAL_I2C_Mem_Read+0x1c8>)
    hi2c->XferISR   = NULL;
340146ac:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
340146ae:	4639      	mov	r1, r7
340146b0:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
340146b2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
340146b6:	9200      	str	r2, [sp, #0]
340146b8:	fa5f f289 	uxtb.w	r2, r9
340146bc:	f7ff fc4e 	bl	34013f5c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
340146c0:	462a      	mov	r2, r5
340146c2:	4641      	mov	r1, r8
340146c4:	4620      	mov	r0, r4
340146c6:	f7ff fd2f 	bl	34014128 <I2C_WaitOnTXISFlagUntilTimeout>
340146ca:	bb20      	cbnz	r0, 34014716 <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
340146cc:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
340146d0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
340146d2:	d116      	bne.n	34014702 <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
340146d4:	b2f6      	uxtb	r6, r6
340146d6:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
340146d8:	2200      	movs	r2, #0
340146da:	4643      	mov	r3, r8
340146dc:	2140      	movs	r1, #64	@ 0x40
340146de:	4620      	mov	r0, r4
340146e0:	9500      	str	r5, [sp, #0]
340146e2:	f7ff fd4c 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
340146e6:	b9b0      	cbnz	r0, 34014716 <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
340146e8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
340146ea:	b29b      	uxth	r3, r3
340146ec:	2bff      	cmp	r3, #255	@ 0xff
340146ee:	4b40      	ldr	r3, [pc, #256]	@ (340147f0 <HAL_I2C_Mem_Read+0x1cc>)
340146f0:	d815      	bhi.n	3401471e <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
340146f2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
340146f4:	b292      	uxth	r2, r2
340146f6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
340146f8:	9300      	str	r3, [sp, #0]
340146fa:	b2d2      	uxtb	r2, r2
340146fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
34014700:	e012      	b.n	34014728 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
34014702:	0a32      	lsrs	r2, r6, #8
34014704:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
34014706:	4641      	mov	r1, r8
34014708:	462a      	mov	r2, r5
3401470a:	4620      	mov	r0, r4
3401470c:	f7ff fd0c 	bl	34014128 <I2C_WaitOnTXISFlagUntilTimeout>
34014710:	b908      	cbnz	r0, 34014716 <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
34014712:	6823      	ldr	r3, [r4, #0]
34014714:	e7de      	b.n	340146d4 <HAL_I2C_Mem_Read+0xb0>
      __HAL_UNLOCK(hi2c);
34014716:	2300      	movs	r3, #0
34014718:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
3401471c:	e7a1      	b.n	34014662 <HAL_I2C_Mem_Read+0x3e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
3401471e:	22ff      	movs	r2, #255	@ 0xff
34014720:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
34014722:	9300      	str	r3, [sp, #0]
34014724:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
34014728:	4639      	mov	r1, r7
3401472a:	4620      	mov	r0, r4
3401472c:	f7ff fc16 	bl	34013f5c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
34014730:	4643      	mov	r3, r8
34014732:	2200      	movs	r2, #0
34014734:	2104      	movs	r1, #4
34014736:	4620      	mov	r0, r4
34014738:	9500      	str	r5, [sp, #0]
3401473a:	f7ff fd20 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
3401473e:	2800      	cmp	r0, #0
34014740:	d18f      	bne.n	34014662 <HAL_I2C_Mem_Read+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
34014742:	6823      	ldr	r3, [r4, #0]
34014744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
34014746:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014748:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
3401474a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
3401474c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
3401474e:	3301      	adds	r3, #1
34014750:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
34014752:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
34014754:	3a01      	subs	r2, #1
      hi2c->XferCount--;
34014756:	3b01      	subs	r3, #1
34014758:	b29b      	uxth	r3, r3
3401475a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
3401475c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
3401475e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34014760:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
34014762:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
34014764:	b1b3      	cbz	r3, 34014794 <HAL_I2C_Mem_Read+0x170>
34014766:	b9aa      	cbnz	r2, 34014794 <HAL_I2C_Mem_Read+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
34014768:	4643      	mov	r3, r8
3401476a:	2180      	movs	r1, #128	@ 0x80
3401476c:	4620      	mov	r0, r4
3401476e:	9500      	str	r5, [sp, #0]
34014770:	f7ff fd05 	bl	3401417e <I2C_WaitOnFlagUntilTimeout>
34014774:	2800      	cmp	r0, #0
34014776:	f47f af74 	bne.w	34014662 <HAL_I2C_Mem_Read+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
3401477a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
3401477c:	b29b      	uxth	r3, r3
3401477e:	2bff      	cmp	r3, #255	@ 0xff
34014780:	d928      	bls.n	340147d4 <HAL_I2C_Mem_Read+0x1b0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
34014782:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
34014784:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
34014788:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
3401478a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
3401478c:	4639      	mov	r1, r7
3401478e:	4620      	mov	r0, r4
34014790:	f7ff fbe4 	bl	34013f5c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
34014794:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
34014796:	b29b      	uxth	r3, r3
34014798:	2b00      	cmp	r3, #0
3401479a:	d1c9      	bne.n	34014730 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
3401479c:	462a      	mov	r2, r5
3401479e:	4641      	mov	r1, r8
340147a0:	4620      	mov	r0, r4
340147a2:	f7ff fd27 	bl	340141f4 <I2C_WaitOnSTOPFlagUntilTimeout>
340147a6:	2800      	cmp	r0, #0
340147a8:	f47f af5b 	bne.w	34014662 <HAL_I2C_Mem_Read+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
340147ac:	2120      	movs	r1, #32
340147ae:	6823      	ldr	r3, [r4, #0]
340147b0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
340147b2:	685a      	ldr	r2, [r3, #4]
340147b4:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
340147b8:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
340147bc:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
340147c0:	f022 0201 	bic.w	r2, r2, #1
340147c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
340147c6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
340147ca:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
340147ce:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
340147d2:	e747      	b.n	34014664 <HAL_I2C_Mem_Read+0x40>
          hi2c->XferSize = hi2c->XferCount;
340147d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
340147d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
340147da:	b292      	uxth	r2, r2
340147dc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
340147de:	9000      	str	r0, [sp, #0]
340147e0:	b2d2      	uxtb	r2, r2
340147e2:	e7d3      	b.n	3401478c <HAL_I2C_Mem_Read+0x168>
    __HAL_LOCK(hi2c);
340147e4:	2002      	movs	r0, #2
340147e6:	e73d      	b.n	34014664 <HAL_I2C_Mem_Read+0x40>
340147e8:	3402bb3a 	.word	0x3402bb3a
340147ec:	80002000 	.word	0x80002000
340147f0:	80002400 	.word	0x80002400

340147f4 <HAL_I2C_GetState>:
  return hi2c->State;
340147f4:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
340147f8:	4770      	bx	lr

340147fa <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
340147fa:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
340147fc:	4770      	bx	lr
	...

34014800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
34014800:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34014802:	4a27      	ldr	r2, [pc, #156]	@ (340148a0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
34014804:	6803      	ldr	r3, [r0, #0]
{
34014806:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
34014808:	4293      	cmp	r3, r2
{
3401480a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
3401480c:	d01c      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401480e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014812:	4293      	cmp	r3, r2
34014814:	d018      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34014816:	4a23      	ldr	r2, [pc, #140]	@ (340148a4 <HAL_I2CEx_ConfigAnalogFilter+0xa4>)
34014818:	4293      	cmp	r3, r2
3401481a:	d015      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401481c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014820:	4293      	cmp	r3, r2
34014822:	d011      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34014824:	4a20      	ldr	r2, [pc, #128]	@ (340148a8 <HAL_I2CEx_ConfigAnalogFilter+0xa8>)
34014826:	4293      	cmp	r3, r2
34014828:	d00e      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
3401482a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401482e:	4293      	cmp	r3, r2
34014830:	d00a      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34014832:	4a1e      	ldr	r2, [pc, #120]	@ (340148ac <HAL_I2CEx_ConfigAnalogFilter+0xac>)
34014834:	4293      	cmp	r3, r2
34014836:	d007      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34014838:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401483c:	4293      	cmp	r3, r2
3401483e:	d003      	beq.n	34014848 <HAL_I2CEx_ConfigAnalogFilter+0x48>
34014840:	2162      	movs	r1, #98	@ 0x62
34014842:	481b      	ldr	r0, [pc, #108]	@ (340148b0 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
34014844:	f00a fc8c 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
34014848:	f435 5380 	bics.w	r3, r5, #4096	@ 0x1000
3401484c:	d003      	beq.n	34014856 <HAL_I2CEx_ConfigAnalogFilter+0x56>
3401484e:	2163      	movs	r1, #99	@ 0x63
34014850:	4817      	ldr	r0, [pc, #92]	@ (340148b0 <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
34014852:	f00a fc85 	bl	3401f160 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
34014856:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
3401485a:	2b20      	cmp	r3, #32
3401485c:	b2d9      	uxtb	r1, r3
3401485e:	d11c      	bne.n	3401489a <HAL_I2CEx_ConfigAnalogFilter+0x9a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34014860:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
34014864:	2b01      	cmp	r3, #1
34014866:	d018      	beq.n	3401489a <HAL_I2CEx_ConfigAnalogFilter+0x9a>

    hi2c->State = HAL_I2C_STATE_BUSY;
34014868:	2324      	movs	r3, #36	@ 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
3401486a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
3401486c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
34014870:	6823      	ldr	r3, [r4, #0]
34014872:	681a      	ldr	r2, [r3, #0]
34014874:	f022 0201 	bic.w	r2, r2, #1
34014878:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
3401487a:	681a      	ldr	r2, [r3, #0]
3401487c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
34014880:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
34014882:	681a      	ldr	r2, [r3, #0]
34014884:	432a      	orrs	r2, r5
34014886:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
34014888:	681a      	ldr	r2, [r3, #0]
3401488a:	f042 0201 	orr.w	r2, r2, #1
3401488e:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
34014890:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
34014894:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
34014898:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
3401489a:	2002      	movs	r0, #2
3401489c:	e7fc      	b.n	34014898 <HAL_I2CEx_ConfigAnalogFilter+0x98>
3401489e:	bf00      	nop
340148a0:	50005400 	.word	0x50005400
340148a4:	50005800 	.word	0x50005800
340148a8:	50005c00 	.word	0x50005c00
340148ac:	56001c00 	.word	0x56001c00
340148b0:	3402bb9a 	.word	0x3402bb9a

340148b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
340148b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
340148b6:	4a26      	ldr	r2, [pc, #152]	@ (34014950 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
340148b8:	6803      	ldr	r3, [r0, #0]
{
340148ba:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
340148bc:	4293      	cmp	r3, r2
{
340148be:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
340148c0:	d01c      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148c2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340148c6:	4293      	cmp	r3, r2
340148c8:	d018      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148ca:	4a22      	ldr	r2, [pc, #136]	@ (34014954 <HAL_I2CEx_ConfigDigitalFilter+0xa0>)
340148cc:	4293      	cmp	r3, r2
340148ce:	d015      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148d0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340148d4:	4293      	cmp	r3, r2
340148d6:	d011      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148d8:	4a1f      	ldr	r2, [pc, #124]	@ (34014958 <HAL_I2CEx_ConfigDigitalFilter+0xa4>)
340148da:	4293      	cmp	r3, r2
340148dc:	d00e      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340148e2:	4293      	cmp	r3, r2
340148e4:	d00a      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148e6:	4a1d      	ldr	r2, [pc, #116]	@ (3401495c <HAL_I2CEx_ConfigDigitalFilter+0xa8>)
340148e8:	4293      	cmp	r3, r2
340148ea:	d007      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148ec:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
340148f0:	4293      	cmp	r3, r2
340148f2:	d003      	beq.n	340148fc <HAL_I2CEx_ConfigDigitalFilter+0x48>
340148f4:	2190      	movs	r1, #144	@ 0x90
340148f6:	481a      	ldr	r0, [pc, #104]	@ (34014960 <HAL_I2CEx_ConfigDigitalFilter+0xac>)
340148f8:	f00a fc32 	bl	3401f160 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
340148fc:	2d0f      	cmp	r5, #15
340148fe:	d903      	bls.n	34014908 <HAL_I2CEx_ConfigDigitalFilter+0x54>
34014900:	2191      	movs	r1, #145	@ 0x91
34014902:	4817      	ldr	r0, [pc, #92]	@ (34014960 <HAL_I2CEx_ConfigDigitalFilter+0xac>)
34014904:	f00a fc2c 	bl	3401f160 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
34014908:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
3401490c:	2b20      	cmp	r3, #32
3401490e:	b2d8      	uxtb	r0, r3
34014910:	d11b      	bne.n	3401494a <HAL_I2CEx_ConfigDigitalFilter+0x96>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
34014912:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
34014916:	2b01      	cmp	r3, #1
34014918:	d017      	beq.n	3401494a <HAL_I2CEx_ConfigDigitalFilter+0x96>

    hi2c->State = HAL_I2C_STATE_BUSY;
3401491a:	2324      	movs	r3, #36	@ 0x24
3401491c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
34014920:	6823      	ldr	r3, [r4, #0]
34014922:	681a      	ldr	r2, [r3, #0]
34014924:	f022 0201 	bic.w	r2, r2, #1
34014928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
3401492a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
3401492c:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
34014930:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
34014934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
34014936:	681a      	ldr	r2, [r3, #0]
34014938:	f042 0201 	orr.w	r2, r2, #1
3401493c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
3401493e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
34014942:	2000      	movs	r0, #0
34014944:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
34014948:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hi2c);
3401494a:	2002      	movs	r0, #2
3401494c:	e7fc      	b.n	34014948 <HAL_I2CEx_ConfigDigitalFilter+0x94>
3401494e:	bf00      	nop
34014950:	50005400 	.word	0x50005400
34014954:	50005800 	.word	0x50005800
34014958:	50005c00 	.word	0x50005c00
3401495c:	56001c00 	.word	0x56001c00
34014960:	3402bb9a 	.word	0x3402bb9a

34014964 <LTDC_SetConfig>:
  *       This function does not return a value as it is a static function used internally within the
  *        driver.
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, uint32_t Aux0Addr, uint32_t Aux1Addr, uint32_t Mirror,
                           uint32_t LayerIdx)
{
34014964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t stride;
  uint32_t tmp;

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
34014968:	2634      	movs	r6, #52	@ 0x34
{
3401496a:	b087      	sub	sp, #28
3401496c:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
34014970:	6804      	ldr	r4, [r0, #0]
34014972:	fb06 060c 	mla	r6, r6, ip, r0

  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014976:	f8d6 e048 	ldr.w	lr, [r6, #72]	@ 0x48
{
3401497a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
3401497e:	6e75      	ldr	r5, [r6, #100]	@ 0x64
34014980:	f10c 0301 	add.w	r3, ip, #1
34014984:	eb04 2303 	add.w	r3, r4, r3, lsl #8
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014988:	f1be 0f03 	cmp.w	lr, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (hltdc->LayerCfg[LayerIdx].ImageHeight);
3401498c:	63dd      	str	r5, [r3, #60]	@ 0x3c
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
3401498e:	d84c      	bhi.n	34014a2a <LTDC_SetConfig+0xc6>
  {
    case LTDC_PIXEL_FORMAT_ARGB8888:
    case LTDC_PIXEL_FORMAT_BGRA8888:
    case LTDC_PIXEL_FORMAT_ABGR8888:
    case LTDC_PIXEL_FORMAT_RGBA8888:
      stride = 4U;
34014990:	2604      	movs	r6, #4
      stride = 1U;
      break;
  }

  /* Configure the horizontal start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
34014992:	2734      	movs	r7, #52	@ 0x34
34014994:	fb07 000c 	mla	r0, r7, ip, r0
34014998:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
3401499c:	f8d0 b038 	ldr.w	fp, [r0, #56]	@ 0x38
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
340149a0:	68e7      	ldr	r7, [r4, #12]
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
340149a2:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
340149a6:	f10b 0901 	add.w	r9, fp, #1
340149aa:	f3c7 470b 	ubfx	r7, r7, #16, #12
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
340149ae:	f3cc 4c0b 	ubfx	ip, ip, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
340149b2:	444f      	add	r7, r9
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
340149b4:	44c4      	add	ip, r8
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
340149b6:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((hltdc->LayerCfg[LayerIdx].WindowX0 +
340149ba:	611f      	str	r7, [r3, #16]

  /* Configure the vertical start and stop position */
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
340149bc:	6c47      	ldr	r7, [r0, #68]	@ 0x44
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
340149be:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
340149c0:	9704      	str	r7, [sp, #16]
340149c2:	68e7      	ldr	r7, [r4, #12]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
340149c4:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
340149c6:	9205      	str	r2, [sp, #20]
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
340149c8:	f3c4 0c0b 	ubfx	ip, r4, #0, #12
340149cc:	1c54      	adds	r4, r2, #1
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
340149ce:	9a04      	ldr	r2, [sp, #16]
340149d0:	f3c7 070b 	ubfx	r7, r7, #0, #12
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
340149d4:	4464      	add	r4, ip
  tmp = ((hltdc->LayerCfg[LayerIdx].WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
340149d6:	4417      	add	r7, r2
                                         (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
340149d8:	ea44 4407 	orr.w	r4, r4, r7, lsl #16

  if (Mirror == LTDC_MIRROR_NONE)
  {
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
340149dc:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR = ((hltdc->LayerCfg[LayerIdx].WindowY0 +
340149de:	615c      	str	r4, [r3, #20]
        /* Configure the auxiliary frame buffer address 1 */
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;

        /* Configure the buffer length */
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
                                             (((hltdc->LayerCfg[LayerIdx].WindowX1 -
340149e0:	eba8 040b 	sub.w	r4, r8, fp
        break;
    }

    /* Configure the color frame buffer pitch in byte */
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
                                          (((hltdc->LayerCfg[LayerIdx].WindowX1 - hltdc->LayerCfg[LayerIdx].WindowX0) *
340149e4:	fb04 f906 	mul.w	r9, r4, r6
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
340149e8:	9201      	str	r2, [sp, #4]
  if (Mirror == LTDC_MIRROR_NONE)
340149ea:	9a03      	ldr	r2, [sp, #12]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
340149ec:	6e00      	ldr	r0, [r0, #96]	@ 0x60
  if (Mirror == LTDC_MIRROR_NONE)
340149ee:	2a03      	cmp	r2, #3
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
340149f0:	fb00 fc06 	mul.w	ip, r0, r6
                                            stride)  + 7U));
340149f4:	f109 0a07 	add.w	sl, r9, #7
  if (Mirror == LTDC_MIRROR_NONE)
340149f8:	d145      	bne.n	34014a86 <LTDC_SetConfig+0x122>
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
340149fa:	f240 160d 	movw	r6, #269	@ 0x10d
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
340149fe:	9a01      	ldr	r2, [sp, #4]
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014a00:	45b6      	cmp	lr, r6
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (hltdc->LayerCfg[LayerIdx].FBStartAdress);
34014a02:	635a      	str	r2, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014a04:	d02a      	beq.n	34014a5c <LTDC_SetConfig+0xf8>
34014a06:	f240 260d 	movw	r6, #525	@ 0x20d
34014a0a:	45b6      	cmp	lr, r6
34014a0c:	d031      	beq.n	34014a72 <LTDC_SetConfig+0x10e>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34014a0e:	ea4a 420c 	orr.w	r2, sl, ip, lsl #16
34014a12:	639a      	str	r2, [r3, #56]	@ 0x38
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable LTDC_Layer by setting LEN bit */
    MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN, LTDC_LxCR_LEN);
34014a14:	68da      	ldr	r2, [r3, #12]
34014a16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
34014a1a:	f022 0201 	bic.w	r2, r2, #1
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
                                           (((hltdc->LayerCfg[LayerIdx].WindowX1 -
                                              hltdc->LayerCfg[LayerIdx].WindowX0) * stride) + 7U));

    /* Enable horizontal mirroring bit & LTDC_Layer by setting LEN bit */
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34014a1e:	f042 0201 	orr.w	r2, r2, #1
34014a22:	60da      	str	r2, [r3, #12]
  }
}
34014a24:	b007      	add	sp, #28
34014a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014a2a:	f1ae 0704 	sub.w	r7, lr, #4
34014a2e:	2f09      	cmp	r7, #9
34014a30:	f04f 0601 	mov.w	r6, #1
34014a34:	d8ad      	bhi.n	34014992 <LTDC_SetConfig+0x2e>
34014a36:	f240 299b 	movw	r9, #667	@ 0x29b
34014a3a:	fa06 f807 	lsl.w	r8, r6, r7
34014a3e:	ea18 0f09 	tst.w	r8, r9
34014a42:	d107      	bne.n	34014a54 <LTDC_SetConfig+0xf0>
34014a44:	2f02      	cmp	r7, #2
34014a46:	d007      	beq.n	34014a58 <LTDC_SetConfig+0xf4>
34014a48:	2f08      	cmp	r7, #8
34014a4a:	d1a2      	bne.n	34014992 <LTDC_SetConfig+0x2e>
      stride = (((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos);
34014a4c:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
34014a4e:	f3c6 4682 	ubfx	r6, r6, #18, #3
      break;
34014a52:	e79e      	b.n	34014992 <LTDC_SetConfig+0x2e>
      stride = 2U;
34014a54:	2602      	movs	r6, #2
34014a56:	e79c      	b.n	34014992 <LTDC_SetConfig+0x2e>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014a58:	2603      	movs	r6, #3
34014a5a:	e79a      	b.n	34014992 <LTDC_SetConfig+0x2e>
                                              hltdc->LayerCfg[LayerIdx].WindowX0 + 7U);
34014a5c:	f108 0207 	add.w	r2, r8, #7
34014a60:	eba2 020b 	sub.w	r2, r2, fp
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34014a64:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34014a68:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (hltdc->LayerCfg[LayerIdx].ImageWidth << 16U) |
34014a6a:	649a      	str	r2, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = (hltdc->LayerCfg[LayerIdx].ImageHeight) >> 1U;
34014a6c:	086d      	lsrs	r5, r5, #1
34014a6e:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34014a70:	e7cd      	b.n	34014a0e <LTDC_SetConfig+0xaa>
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34014a72:	0864      	lsrs	r4, r4, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
34014a74:	9a02      	ldr	r2, [sp, #8]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014a76:	0840      	lsrs	r0, r0, #1
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34014a78:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014a7a:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr;
34014a7e:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr;
34014a80:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014a82:	649c      	str	r4, [r3, #72]	@ 0x48
34014a84:	e7f2      	b.n	34014a6c <LTDC_SetConfig+0x108>
  else if (Mirror == LTDC_MIRROR_HORIZONTAL)
34014a86:	9a03      	ldr	r2, [sp, #12]
34014a88:	bb3a      	cbnz	r2, 34014ada <LTDC_SetConfig+0x176>
                                                    hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34014a8a:	9a01      	ldr	r2, [sp, #4]
34014a8c:	1e57      	subs	r7, r2, #1
34014a8e:	444f      	add	r7, r9
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34014a90:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014a92:	f240 170d 	movw	r7, #269	@ 0x10d
34014a96:	45be      	cmp	lr, r7
34014a98:	d00a      	beq.n	34014ab0 <LTDC_SetConfig+0x14c>
34014a9a:	f240 270d 	movw	r7, #525	@ 0x20d
34014a9e:	45be      	cmp	lr, r7
34014aa0:	d010      	beq.n	34014ac4 <LTDC_SetConfig+0x160>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR = (((hltdc->LayerCfg[LayerIdx].ImageWidth * stride) << 16U) |
34014aa2:	ea4a 420c 	orr.w	r2, sl, ip, lsl #16
34014aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    SET_BIT(LTDC_LAYER(hltdc, LayerIdx)->CR, LTDC_LxCR_HMEN | LTDC_LxCR_LEN);
34014aa8:	68da      	ldr	r2, [r3, #12]
34014aaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
34014aae:	e7b6      	b.n	34014a1e <LTDC_SetConfig+0xba>
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) - 1U;
34014ab0:	3901      	subs	r1, #1
34014ab2:	4449      	add	r1, r9
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014ab4:	6419      	str	r1, [r3, #64]	@ 0x40
                                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) + 7U);
34014ab6:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014ab8:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34014abc:	086d      	lsrs	r5, r5, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014abe:	649c      	str	r4, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34014ac0:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34014ac2:	e7ee      	b.n	34014aa2 <LTDC_SetConfig+0x13e>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34014ac4:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34014ac6:	4366      	muls	r6, r4
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34014ac8:	9a02      	ldr	r2, [sp, #8]
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34014aca:	3901      	subs	r1, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34014acc:	3a01      	subs	r2, #1
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34014ace:	4431      	add	r1, r6
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) - 1U;
34014ad0:	4432      	add	r2, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014ad2:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014ad4:	0840      	lsrs	r0, r0, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34014ad6:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U) << 16U) |
34014ad8:	e7ed      	b.n	34014ab6 <LTDC_SetConfig+0x152>
                                          ((hltdc->LayerCfg[LayerIdx].WindowY1 -
34014ada:	e9dd 2704 	ldrd	r2, r7, [sp, #16]
34014ade:	eba2 0807 	sub.w	r8, r2, r7
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34014ae2:	9a03      	ldr	r2, [sp, #12]
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34014ae4:	f5cc 4c00 	rsb	ip, ip, #32768	@ 0x8000
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34014ae8:	2a01      	cmp	r2, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34014aea:	ea4a 4c0c 	orr.w	ip, sl, ip, lsl #16
  else if (Mirror == LTDC_MIRROR_VERTICAL)
34014aee:	d131      	bne.n	34014b54 <LTDC_SetConfig+0x1f0>
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34014af0:	9a01      	ldr	r2, [sp, #4]
                                            hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
34014af2:	f108 3aff 	add.w	sl, r8, #4294967295
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34014af6:	fb09 270a 	mla	r7, r9, sl, r2
34014afa:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014afc:	f240 170d 	movw	r7, #269	@ 0x10d
34014b00:	45be      	cmp	lr, r7
34014b02:	d006      	beq.n	34014b12 <LTDC_SetConfig+0x1ae>
34014b04:	f240 270d 	movw	r7, #525	@ 0x20d
34014b08:	45be      	cmp	lr, r7
34014b0a:	d00d      	beq.n	34014b28 <LTDC_SetConfig+0x1c4>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34014b0c:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
34014b10:	e780      	b.n	34014a14 <LTDC_SetConfig+0xb0>
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014b12:	ea4f 0258 	mov.w	r2, r8, lsr #1
34014b16:	3a01      	subs	r2, #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014b18:	fb09 1202 	mla	r2, r9, r2, r1
34014b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34014b1e:	f8c3 c048 	str.w	ip, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34014b22:	086d      	lsrs	r5, r5, #1
34014b24:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34014b26:	e7f1      	b.n	34014b0c <LTDC_SetConfig+0x1a8>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34014b28:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34014b2a:	4374      	muls	r4, r6
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014b2c:	ea4f 0858 	mov.w	r8, r8, lsr #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34014b30:	0840      	lsrs	r0, r0, #1
                                                  hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014b32:	f108 38ff 	add.w	r8, r8, #4294967295
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34014b36:	f5c0 4000 	rsb	r0, r0, #32768	@ 0x8000
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34014b3a:	fb04 f808 	mul.w	r8, r4, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34014b3e:	4370      	muls	r0, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34014b40:	9a02      	ldr	r2, [sp, #8]
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34014b42:	3407      	adds	r4, #7
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014b44:	4441      	add	r1, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34014b46:	4442      	add	r2, r8
                                               stride) << 16U) |
34014b48:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014b4c:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34014b4e:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) *
34014b50:	649c      	str	r4, [r3, #72]	@ 0x48
34014b52:	e7e6      	b.n	34014b22 <LTDC_SetConfig+0x1be>
                                           hltdc->LayerCfg[LayerIdx].WindowY0)) - 1U;
34014b54:	9a01      	ldr	r2, [sp, #4]
34014b56:	1e57      	subs	r7, r2, #1
34014b58:	fb09 7708 	mla	r7, r9, r8, r7
    LTDC_LAYER(hltdc, LayerIdx)->CFBAR = hltdc->LayerCfg[LayerIdx].FBStartAdress +
34014b5c:	635f      	str	r7, [r3, #52]	@ 0x34
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014b5e:	f240 170d 	movw	r7, #269	@ 0x10d
34014b62:	45be      	cmp	lr, r7
34014b64:	d006      	beq.n	34014b74 <LTDC_SetConfig+0x210>
34014b66:	f240 270d 	movw	r7, #525	@ 0x20d
34014b6a:	45be      	cmp	lr, r7
34014b6c:	d00d      	beq.n	34014b8a <LTDC_SetConfig+0x226>
    LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = ((((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride))) << 16U) |
34014b6e:	f8c3 c038 	str.w	ip, [r3, #56]	@ 0x38
34014b72:	e799      	b.n	34014aa8 <LTDC_SetConfig+0x144>
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014b74:	ea4f 0858 	mov.w	r8, r8, lsr #1
34014b78:	3901      	subs	r1, #1
34014b7a:	fb09 1108 	mla	r1, r9, r8, r1
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014b7e:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = ((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth * stride)) << 16U) |
34014b80:	f8c3 c048 	str.w	ip, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR = hltdc->LayerCfg[LayerIdx].ImageHeight >> 1U;
34014b84:	086d      	lsrs	r5, r5, #1
34014b86:	64dd      	str	r5, [r3, #76]	@ 0x4c
        break;
34014b88:	e7f1      	b.n	34014b6e <LTDC_SetConfig+0x20a>
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34014b8a:	0864      	lsrs	r4, r4, #1
                                              (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 -
34014b8c:	4374      	muls	r4, r6
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34014b8e:	0840      	lsrs	r0, r0, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014b90:	ea4f 0858 	mov.w	r8, r8, lsr #1
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34014b94:	f5c0 4000 	rsb	r0, r0, #32768	@ 0x8000
                                                          hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) *
34014b98:	fb04 f808 	mul.w	r8, r4, r8
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34014b9c:	4370      	muls	r0, r6
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014b9e:	9a02      	ldr	r2, [sp, #8]
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014ba0:	3901      	subs	r1, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014ba2:	3a01      	subs	r2, #1
                                                 hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * stride) + 7U);
34014ba4:	3407      	adds	r4, #7
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014ba6:	4442      	add	r2, r8
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) - 1U;
34014ba8:	4441      	add	r1, r8
                                              << 16U) |
34014baa:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
        LTDC_LAYER(hltdc, LayerIdx)->AFBA0R = Aux0Addr +
34014bae:	6419      	str	r1, [r3, #64]	@ 0x40
        LTDC_LAYER(hltdc, LayerIdx)->AFBA1R = Aux1Addr +
34014bb0:	645a      	str	r2, [r3, #68]	@ 0x44
        LTDC_LAYER(hltdc, LayerIdx)->AFBLR = (((0x8000U - (hltdc->LayerCfg[LayerIdx].ImageWidth >> 1U)) * stride)
34014bb2:	649c      	str	r4, [r3, #72]	@ 0x48
        LTDC_LAYER(hltdc, LayerIdx)->AFBLNR &= ~(LTDC_L1AFBLNR_AFBLNBR);
34014bb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
34014bb6:	f36f 020f 	bfc	r2, #0, #16
34014bba:	64da      	str	r2, [r3, #76]	@ 0x4c
34014bbc:	e7e2      	b.n	34014b84 <LTDC_SetConfig+0x220>
	...

34014bc0 <LTDC_SetCompositionConfig>:

  /* Configure the default color values */
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34014bc0:	6802      	ldr	r2, [r0, #0]
34014bc2:	1c4b      	adds	r3, r1, #1
34014bc4:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  tmp2 = (hltdc->LayerCfg[LayerIdx].Alpha0 << 24U);
34014bc8:	2334      	movs	r3, #52	@ 0x34
34014bca:	fb03 0101 	mla	r1, r3, r1, r0
34014bce:	6d08      	ldr	r0, [r1, #80]	@ 0x50
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34014bd0:	f891 3068 	ldrb.w	r3, [r1, #104]	@ 0x68
34014bd4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  tmp = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Green) << 8U);
34014bd8:	f891 0069 	ldrb.w	r0, [r1, #105]	@ 0x69
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34014bdc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmp1 = ((uint32_t)(hltdc->LayerCfg[LayerIdx].Backcolor.Red) << 16U);
34014be0:	f891 006a 	ldrb.w	r0, [r1, #106]	@ 0x6a
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (hltdc->LayerCfg[LayerIdx].Backcolor.Blue | tmp | tmp1 | tmp2));
34014be4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34014be8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
34014bea:	6a13      	ldr	r3, [r2, #32]
34014bec:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
34014bf0:	6213      	str	r3, [r2, #32]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (hltdc->LayerCfg[LayerIdx].Alpha);
34014bf2:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
34014bf4:	6213      	str	r3, [r2, #32]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BOR | LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
34014bf6:	6a90      	ldr	r0, [r2, #40]	@ 0x28
34014bf8:	4b05      	ldr	r3, [pc, #20]	@ (34014c10 <LTDC_SetCompositionConfig+0x50>)
34014bfa:	4003      	ands	r3, r0
34014bfc:	6293      	str	r3, [r2, #40]	@ 0x28
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34014bfe:	6a90      	ldr	r0, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34014c00:	e9d1 3115 	ldrd	r3, r1, [r1, #84]	@ 0x54
34014c04:	430b      	orrs	r3, r1
  tmp = ((uint32_t)(LTDC_LAYER(hltdc, LayerIdx)->BFCR & LTDC_LxBFCR_BOR_Msk) >> LTDC_LxBFCR_BOR_Pos) << 16U;
34014c06:	f400 3180 	and.w	r1, r0, #65536	@ 0x10000
                                       hltdc->LayerCfg[LayerIdx].BlendingFactor2 | tmp);
34014c0a:	430b      	orrs	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (hltdc->LayerCfg[LayerIdx].BlendingFactor1 |
34014c0c:	6293      	str	r3, [r2, #40]	@ 0x28
}
34014c0e:	4770      	bx	lr
34014c10:	fffef8f8 	.word	0xfffef8f8

34014c14 <LTDC_SetPredefFormat>:
  uint32_t BPOS = 0U;
  uint32_t GLEN = 0U;
  uint32_t GPOS = 0U;

  /* Specify Flex ARGB parameters according to pixel format */
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014c14:	2334      	movs	r3, #52	@ 0x34
34014c16:	fb03 0301 	mla	r3, r3, r1, r0
34014c1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
{
34014c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
34014c1e:	1fd4      	subs	r4, r2, #7
34014c20:	2c04      	cmp	r4, #4
34014c22:	d823      	bhi.n	34014c6c <LTDC_SetPredefFormat+0x58>
34014c24:	4a16      	ldr	r2, [pc, #88]	@ (34014c80 <LTDC_SetPredefFormat+0x6c>)
34014c26:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 34014c94 <LTDC_SetPredefFormat+0x80>
34014c2a:	5d16      	ldrb	r6, [r2, r4]
34014c2c:	4a15      	ldr	r2, [pc, #84]	@ (34014c84 <LTDC_SetPredefFormat+0x70>)
34014c2e:	4b16      	ldr	r3, [pc, #88]	@ (34014c88 <LTDC_SetPredefFormat+0x74>)
34014c30:	5d17      	ldrb	r7, [r2, r4]
34014c32:	4a16      	ldr	r2, [pc, #88]	@ (34014c8c <LTDC_SetPredefFormat+0x78>)
34014c34:	5d1b      	ldrb	r3, [r3, r4]
34014c36:	5d15      	ldrb	r5, [r2, r4]
34014c38:	4a15      	ldr	r2, [pc, #84]	@ (34014c90 <LTDC_SetPredefFormat+0x7c>)
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
                                           APOS;
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34014c3a:	049b      	lsls	r3, r3, #18
34014c3c:	5d12      	ldrb	r2, [r2, r4]
34014c3e:	f81c 4004 	ldrb.w	r4, [ip, r4]
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34014c42:	f101 0c01 	add.w	ip, r1, #1
34014c46:	6801      	ldr	r1, [r0, #0]
34014c48:	2007      	movs	r0, #7
                                           (RPOS << LTDC_LxFPF0R_RPOS_Pos) +
34014c4a:	0252      	lsls	r2, r2, #9
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34014c4c:	eb02 3285 	add.w	r2, r2, r5, lsl #14
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34014c50:	443a      	add	r2, r7
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (PSIZE << LTDC_LxFPF1R_PSIZE_Pos) +
34014c52:	eb03 3385 	add.w	r3, r3, r5, lsl #14
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34014c56:	eb01 210c 	add.w	r1, r1, ip, lsl #8
                                           (ALEN << LTDC_LxFPF0R_ALEN_Pos) +
34014c5a:	eb02 1246 	add.w	r2, r2, r6, lsl #5
                                           (BLEN << LTDC_LxFPF1R_BLEN_Pos)  +
                                           (BPOS << LTDC_LxFPF1R_BPOS_Pos) +
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34014c5e:	4423      	add	r3, r4
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = LTDC_LxPFCR_PF;
34014c60:	61c8      	str	r0, [r1, #28]
                                           (GLEN << LTDC_LxFPF1R_GLEN_Pos) +
34014c62:	eb03 1345 	add.w	r3, r3, r5, lsl #5
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (RLEN << LTDC_LxFPF0R_RLEN_Pos) +
34014c66:	674a      	str	r2, [r1, #116]	@ 0x74
      LTDC_LAYER(hltdc, LayerIdx)->FPF1R = 0U;
34014c68:	678b      	str	r3, [r1, #120]	@ 0x78
                                           GPOS;
      break;
    default:
      break;
  }
}
34014c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014c6c:	2a06      	cmp	r2, #6
34014c6e:	d8fc      	bhi.n	34014c6a <LTDC_SetPredefFormat+0x56>
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
34014c70:	6803      	ldr	r3, [r0, #0]
34014c72:	3101      	adds	r1, #1
34014c74:	eb03 2101 	add.w	r1, r3, r1, lsl #8
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
34014c78:	2300      	movs	r3, #0
      LTDC_LAYER(hltdc, LayerIdx)->PFCR = (hltdc->LayerCfg[LayerIdx].PixelFormat);
34014c7a:	61ca      	str	r2, [r1, #28]
      LTDC_LAYER(hltdc, LayerIdx)->FPF0R = 0U;
34014c7c:	674b      	str	r3, [r1, #116]	@ 0x74
34014c7e:	e7f3      	b.n	34014c68 <LTDC_SetPredefFormat+0x54>
34014c80:	341051d8 	.word	0x341051d8
34014c84:	341051d3 	.word	0x341051d3
34014c88:	341051dd 	.word	0x341051dd
34014c8c:	341051ce 	.word	0x341051ce
34014c90:	341051c9 	.word	0x341051c9
34014c94:	341051c4 	.word	0x341051c4

34014c98 <LTDC_RetrieveUserConfig.constprop.0>:
static void LTDC_RetrieveUserConfig(LTDC_HandleTypeDef *hltdc, uint32_t *Mirror, uint32_t *Aux0Addr,
34014c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
34014c9c:	468c      	mov	ip, r1
34014c9e:	9907      	ldr	r1, [sp, #28]
  const uint32_t hmirror = ((LTDC_LAYER(hltdc, LayerIdx)->CR) & LTDC_LxCR_HMEN_Msk);
34014ca0:	6805      	ldr	r5, [r0, #0]
34014ca2:	1c4c      	adds	r4, r1, #1
34014ca4:	eb05 2504 	add.w	r5, r5, r4, lsl #8
34014ca8:	68ec      	ldr	r4, [r5, #12]
34014caa:	f404 7e80 	and.w	lr, r4, #256	@ 0x100
  const uint32_t pitchSign = (LTDC_LAYER(hltdc, LayerIdx)->CFBLR & LTDC_LxCFBLR_CFBP) & LTDC_PITCH_SIGN_MSK;
34014cae:	6bac      	ldr	r4, [r5, #56]	@ 0x38
34014cb0:	f004 4880 	and.w	r8, r4, #1073741824	@ 0x40000000
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014cb4:	2434      	movs	r4, #52	@ 0x34
34014cb6:	fb04 0401 	mla	r4, r4, r1, r0
34014cba:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
34014cbc:	2e03      	cmp	r6, #3
34014cbe:	d813      	bhi.n	34014ce8 <LTDC_RetrieveUserConfig.constprop.0+0x50>
      stride = 4U;
34014cc0:	2404      	movs	r4, #4
  if ((pitchSign == 0U) && (hmirror == 0U))
34014cc2:	f1b8 0f00 	cmp.w	r8, #0
34014cc6:	d153      	bne.n	34014d70 <LTDC_RetrieveUserConfig.constprop.0+0xd8>
34014cc8:	2734      	movs	r7, #52	@ 0x34
34014cca:	f1be 0f00 	cmp.w	lr, #0
34014cce:	d123      	bne.n	34014d18 <LTDC_RetrieveUserConfig.constprop.0+0x80>
    *Mirror = LTDC_MIRROR_NONE;
34014cd0:	2403      	movs	r4, #3
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34014cd2:	fb07 0701 	mla	r7, r7, r1, r0
    *Mirror = LTDC_MIRROR_NONE;
34014cd6:	f8cc 4000 	str.w	r4, [ip]
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34014cda:	6b6c      	ldr	r4, [r5, #52]	@ 0x34
    *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R;
34014cdc:	6c29      	ldr	r1, [r5, #64]	@ 0x40
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR;
34014cde:	65fc      	str	r4, [r7, #92]	@ 0x5c
    *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R;
34014ce0:	6011      	str	r1, [r2, #0]
    *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R;
34014ce2:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34014ce4:	601a      	str	r2, [r3, #0]
}
34014ce6:	e02d      	b.n	34014d44 <LTDC_RetrieveUserConfig.constprop.0+0xac>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014ce8:	3e04      	subs	r6, #4
34014cea:	2e09      	cmp	r6, #9
34014cec:	f04f 0401 	mov.w	r4, #1
34014cf0:	d8e7      	bhi.n	34014cc2 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
34014cf2:	f240 299b 	movw	r9, #667	@ 0x29b
34014cf6:	fa04 f706 	lsl.w	r7, r4, r6
34014cfa:	ea17 0f09 	tst.w	r7, r9
34014cfe:	d107      	bne.n	34014d10 <LTDC_RetrieveUserConfig.constprop.0+0x78>
34014d00:	2e02      	cmp	r6, #2
34014d02:	d007      	beq.n	34014d14 <LTDC_RetrieveUserConfig.constprop.0+0x7c>
34014d04:	2e08      	cmp	r6, #8
34014d06:	d1dc      	bne.n	34014cc2 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
      stride = ((LTDC_LAYER(hltdc, LayerIdx)->FPF1R) & LTDC_LxFPF1R_PSIZE_Msk) >> LTDC_LxFPF1R_PSIZE_Pos;
34014d08:	6fac      	ldr	r4, [r5, #120]	@ 0x78
34014d0a:	f3c4 4482 	ubfx	r4, r4, #18, #3
      break;
34014d0e:	e7d8      	b.n	34014cc2 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
      stride = 2U;
34014d10:	2402      	movs	r4, #2
34014d12:	e7d6      	b.n	34014cc2 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
  switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014d14:	2403      	movs	r4, #3
34014d16:	e7d4      	b.n	34014cc2 <LTDC_RetrieveUserConfig.constprop.0+0x2a>
    *Mirror = LTDC_MIRROR_HORIZONTAL;
34014d18:	f8cc 8000 	str.w	r8, [ip]
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014d1c:	f240 1c0d 	movw	ip, #269	@ 0x10d
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014d20:	fb07 0001 	mla	r0, r7, r1, r0
34014d24:	e9d0 710e 	ldrd	r7, r1, [r0, #56]	@ 0x38
34014d28:	1bc9      	subs	r1, r1, r7
34014d2a:	fb04 f701 	mul.w	r7, r4, r1
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014d2e:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
                                                         hltdc->LayerCfg[LayerIdx].WindowX0)) + 1U;
34014d30:	3601      	adds	r6, #1
34014d32:	1bf6      	subs	r6, r6, r7
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014d34:	65c6      	str	r6, [r0, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014d36:	6c86      	ldr	r6, [r0, #72]	@ 0x48
34014d38:	4566      	cmp	r6, ip
34014d3a:	d005      	beq.n	34014d48 <LTDC_RetrieveUserConfig.constprop.0+0xb0>
34014d3c:	f240 270d 	movw	r7, #525	@ 0x20d
34014d40:	42be      	cmp	r6, r7
34014d42:	d006      	beq.n	34014d52 <LTDC_RetrieveUserConfig.constprop.0+0xba>
}
34014d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
34014d48:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                               hltdc->LayerCfg[LayerIdx].WindowX0)) + 1U;
34014d4a:	3301      	adds	r3, #1
34014d4c:	1bdb      	subs	r3, r3, r7
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014d4e:	6013      	str	r3, [r2, #0]
        break;
34014d50:	e7f8      	b.n	34014d44 <LTDC_RetrieveUserConfig.constprop.0+0xac>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
34014d52:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) + 1U;
34014d54:	0849      	lsrs	r1, r1, #1
34014d56:	3601      	adds	r6, #1
34014d58:	fb04 6111 	mls	r1, r4, r1, r6
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - \
34014d5c:	6011      	str	r1, [r2, #0]
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - \
34014d5e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
                    (stride * ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014d60:	e9d0 010e 	ldrd	r0, r1, [r0, #56]	@ 0x38
34014d64:	1a09      	subs	r1, r1, r0
                                hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U)) + 1U;
34014d66:	3201      	adds	r2, #1
34014d68:	0849      	lsrs	r1, r1, #1
34014d6a:	fb04 2211 	mls	r2, r4, r1, r2
34014d6e:	e7b9      	b.n	34014ce4 <LTDC_RetrieveUserConfig.constprop.0+0x4c>
  else if ((pitchSign != 0U) && (hmirror == 0U))
34014d70:	2634      	movs	r6, #52	@ 0x34
34014d72:	f1be 0f00 	cmp.w	lr, #0
34014d76:	d138      	bne.n	34014dea <LTDC_RetrieveUserConfig.constprop.0+0x152>
    *Mirror = LTDC_MIRROR_VERTICAL;
34014d78:	2701      	movs	r7, #1
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014d7a:	fb06 0601 	mla	r6, r6, r1, r0
    *Mirror = LTDC_MIRROR_VERTICAL;
34014d7e:	f8cc 7000 	str.w	r7, [ip]
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014d82:	e9d6 100e 	ldrd	r1, r0, [r6, #56]	@ 0x38
34014d86:	1a40      	subs	r0, r0, r1
34014d88:	fb00 fc04 	mul.w	ip, r0, r4
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34014d8c:	e9d6 1710 	ldrd	r1, r7, [r6, #64]	@ 0x40
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014d90:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
                                               ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34014d94:	1a79      	subs	r1, r7, r1
                                                 hltdc->LayerCfg[LayerIdx].WindowY0) - 1U));
34014d96:	f101 3eff 	add.w	lr, r1, #4294967295
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014d9a:	fb0c 871e 	mls	r7, ip, lr, r8
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014d9e:	f240 1e0d 	movw	lr, #269	@ 0x10d
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014da2:	65f7      	str	r7, [r6, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014da4:	6cb7      	ldr	r7, [r6, #72]	@ 0x48
34014da6:	4577      	cmp	r7, lr
34014da8:	d019      	beq.n	34014dde <LTDC_RetrieveUserConfig.constprop.0+0x146>
34014daa:	f240 2c0d 	movw	ip, #525	@ 0x20d
34014dae:	4567      	cmp	r7, ip
34014db0:	d1c8      	bne.n	34014d44 <LTDC_RetrieveUserConfig.constprop.0+0xac>
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014db2:	0849      	lsrs	r1, r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014db4:	0840      	lsrs	r0, r0, #1
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014db6:	3901      	subs	r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014db8:	4341      	muls	r1, r0
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014dba:	6c2f      	ldr	r7, [r5, #64]	@ 0x40
34014dbc:	fb04 7111 	mls	r1, r4, r1, r7
34014dc0:	6011      	str	r1, [r2, #0]
                                                           (((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34014dc2:	e9d6 1210 	ldrd	r1, r2, [r6, #64]	@ 0x40
34014dc6:	1a52      	subs	r2, r2, r1
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34014dc8:	6c68      	ldr	r0, [r5, #68]	@ 0x44
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014dca:	0852      	lsrs	r2, r2, #1
                                                           ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014dcc:	e9d6 510e 	ldrd	r5, r1, [r6, #56]	@ 0x38
34014dd0:	1b49      	subs	r1, r1, r5
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014dd2:	3a01      	subs	r2, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014dd4:	0849      	lsrs	r1, r1, #1
34014dd6:	434a      	muls	r2, r1
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34014dd8:	fb04 0212 	mls	r2, r4, r2, r0
34014ddc:	e782      	b.n	34014ce4 <LTDC_RetrieveUserConfig.constprop.0+0x4c>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014dde:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                                                              hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U) - 1U));
34014de0:	0849      	lsrs	r1, r1, #1
34014de2:	3901      	subs	r1, #1
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014de4:	fb0c 3311 	mls	r3, ip, r1, r3
34014de8:	e7b1      	b.n	34014d4e <LTDC_RetrieveUserConfig.constprop.0+0xb6>
    *Mirror = LTDC_MIRROR_HORIZONTAL_VERTICAL;
34014dea:	2702      	movs	r7, #2
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014dec:	fb06 0001 	mla	r0, r6, r1, r0
    *Mirror = LTDC_MIRROR_HORIZONTAL_VERTICAL;
34014df0:	f8cc 7000 	str.w	r7, [ip]
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014df4:	f8d5 e034 	ldr.w	lr, [r5, #52]	@ 0x34
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014df8:	e9d0 610e 	ldrd	r6, r1, [r0, #56]	@ 0x38
34014dfc:	1b89      	subs	r1, r1, r6
                                               (hltdc->LayerCfg[LayerIdx].WindowY1 - \
34014dfe:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	@ 0x40
34014e02:	1bf7      	subs	r7, r6, r7
                                                hltdc->LayerCfg[LayerIdx].WindowY0)) + 1U;
34014e04:	f10e 0601 	add.w	r6, lr, #1
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014e08:	f240 1e0d 	movw	lr, #269	@ 0x10d
                                              (stride * (hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014e0c:	fb01 fc04 	mul.w	ip, r1, r4
                                                hltdc->LayerCfg[LayerIdx].WindowY0)) + 1U;
34014e10:	fb07 661c 	mls	r6, r7, ip, r6
    hltdc->LayerCfg[LayerIdx].FBStartAdress = LTDC_LAYER(hltdc, LayerIdx)->CFBAR - \
34014e14:	65c6      	str	r6, [r0, #92]	@ 0x5c
    switch (hltdc->LayerCfg[LayerIdx].PixelFormat)
34014e16:	6c86      	ldr	r6, [r0, #72]	@ 0x48
34014e18:	4576      	cmp	r6, lr
34014e1a:	d019      	beq.n	34014e50 <LTDC_RetrieveUserConfig.constprop.0+0x1b8>
34014e1c:	f240 2c0d 	movw	ip, #525	@ 0x20d
34014e20:	4566      	cmp	r6, ip
34014e22:	d18f      	bne.n	34014d44 <LTDC_RetrieveUserConfig.constprop.0+0xac>
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014e24:	0849      	lsrs	r1, r1, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34014e26:	087f      	lsrs	r7, r7, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014e28:	4379      	muls	r1, r7
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014e2a:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34014e2c:	3601      	adds	r6, #1
34014e2e:	fb04 6111 	mls	r1, r4, r1, r6
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014e32:	6011      	str	r1, [r2, #0]
        *Aux1Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA1R - (stride * \
34014e34:	6c69      	ldr	r1, [r5, #68]	@ 0x44
                                                           ((hltdc->LayerCfg[LayerIdx].WindowX1 - \
34014e36:	e9d0 520e 	ldrd	r5, r2, [r0, #56]	@ 0x38
34014e3a:	1b52      	subs	r2, r2, r5
                                                           ((hltdc->LayerCfg[LayerIdx].WindowY1 - \
34014e3c:	e9d0 0510 	ldrd	r0, r5, [r0, #64]	@ 0x40
34014e40:	1a28      	subs	r0, r5, r0
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014e42:	0852      	lsrs	r2, r2, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34014e44:	0840      	lsrs	r0, r0, #1
                                                             hltdc->LayerCfg[LayerIdx].WindowX0) >> 1U) * \
34014e46:	4342      	muls	r2, r0
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34014e48:	3101      	adds	r1, #1
34014e4a:	fb04 1212 	mls	r2, r4, r2, r1
34014e4e:	e749      	b.n	34014ce4 <LTDC_RetrieveUserConfig.constprop.0+0x4c>
        *Aux0Addr = LTDC_LAYER(hltdc, LayerIdx)->AFBA0R - (stride * \
34014e50:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
                                                             hltdc->LayerCfg[LayerIdx].WindowY0) >> 1U)) + 1U;
34014e52:	087f      	lsrs	r7, r7, #1
34014e54:	3301      	adds	r3, #1
34014e56:	fb0c 3317 	mls	r3, ip, r7, r3
34014e5a:	e778      	b.n	34014d4e <LTDC_RetrieveUserConfig.constprop.0+0xb6>

34014e5c <HAL_LTDC_MspInit>:
}
34014e5c:	4770      	bx	lr
	...

34014e60 <HAL_LTDC_Init>:
{
34014e60:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
34014e62:	4604      	mov	r4, r0
34014e64:	2800      	cmp	r0, #0
34014e66:	f000 80c6 	beq.w	34014ff6 <HAL_LTDC_Init+0x196>
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));
34014e6a:	6803      	ldr	r3, [r0, #0]
34014e6c:	4a63      	ldr	r2, [pc, #396]	@ (34014ffc <HAL_LTDC_Init+0x19c>)
34014e6e:	4293      	cmp	r3, r2
34014e70:	d007      	beq.n	34014e82 <HAL_LTDC_Init+0x22>
34014e72:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34014e76:	4293      	cmp	r3, r2
34014e78:	d003      	beq.n	34014e82 <HAL_LTDC_Init+0x22>
34014e7a:	21f8      	movs	r1, #248	@ 0xf8
34014e7c:	4860      	ldr	r0, [pc, #384]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014e7e:	f00a f96f 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_HSYNC(hltdc->Init.HorizontalSync));
34014e82:	6963      	ldr	r3, [r4, #20]
34014e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014e88:	d303      	bcc.n	34014e92 <HAL_LTDC_Init+0x32>
34014e8a:	21f9      	movs	r1, #249	@ 0xf9
34014e8c:	485c      	ldr	r0, [pc, #368]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014e8e:	f00a f967 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_VSYNC(hltdc->Init.VerticalSync));
34014e92:	69a3      	ldr	r3, [r4, #24]
34014e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014e98:	d303      	bcc.n	34014ea2 <HAL_LTDC_Init+0x42>
34014e9a:	21fa      	movs	r1, #250	@ 0xfa
34014e9c:	4858      	ldr	r0, [pc, #352]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014e9e:	f00a f95f 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_AHBP(hltdc->Init.AccumulatedHBP));
34014ea2:	69e3      	ldr	r3, [r4, #28]
34014ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014ea8:	d303      	bcc.n	34014eb2 <HAL_LTDC_Init+0x52>
34014eaa:	21fb      	movs	r1, #251	@ 0xfb
34014eac:	4854      	ldr	r0, [pc, #336]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014eae:	f00a f957 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_AVBP(hltdc->Init.AccumulatedVBP));
34014eb2:	6a23      	ldr	r3, [r4, #32]
34014eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014eb8:	d303      	bcc.n	34014ec2 <HAL_LTDC_Init+0x62>
34014eba:	21fc      	movs	r1, #252	@ 0xfc
34014ebc:	4850      	ldr	r0, [pc, #320]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014ebe:	f00a f94f 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_AAH(hltdc->Init.AccumulatedActiveH));
34014ec2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34014ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014ec8:	d303      	bcc.n	34014ed2 <HAL_LTDC_Init+0x72>
34014eca:	21fd      	movs	r1, #253	@ 0xfd
34014ecc:	484c      	ldr	r0, [pc, #304]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014ece:	f00a f947 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_AAW(hltdc->Init.AccumulatedActiveW));
34014ed2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34014ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014ed8:	d303      	bcc.n	34014ee2 <HAL_LTDC_Init+0x82>
34014eda:	21fe      	movs	r1, #254	@ 0xfe
34014edc:	4848      	ldr	r0, [pc, #288]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014ede:	f00a f93f 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_TOTALH(hltdc->Init.TotalHeigh));
34014ee2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34014ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014ee8:	d303      	bcc.n	34014ef2 <HAL_LTDC_Init+0x92>
34014eea:	21ff      	movs	r1, #255	@ 0xff
34014eec:	4844      	ldr	r0, [pc, #272]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014eee:	f00a f937 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_TOTALW(hltdc->Init.TotalWidth));
34014ef2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34014ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34014ef8:	d304      	bcc.n	34014f04 <HAL_LTDC_Init+0xa4>
34014efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
34014efe:	4840      	ldr	r0, [pc, #256]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014f00:	f00a f92e 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
34014f04:	6863      	ldr	r3, [r4, #4]
34014f06:	f033 4300 	bics.w	r3, r3, #2147483648	@ 0x80000000
34014f0a:	d004      	beq.n	34014f16 <HAL_LTDC_Init+0xb6>
34014f0c:	f240 1101 	movw	r1, #257	@ 0x101
34014f10:	483b      	ldr	r0, [pc, #236]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014f12:	f00a f925 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
34014f16:	68a3      	ldr	r3, [r4, #8]
34014f18:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
34014f1c:	d004      	beq.n	34014f28 <HAL_LTDC_Init+0xc8>
34014f1e:	f44f 7181 	mov.w	r1, #258	@ 0x102
34014f22:	4837      	ldr	r0, [pc, #220]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014f24:	f00a f91c 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
34014f28:	68e3      	ldr	r3, [r4, #12]
34014f2a:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
34014f2e:	d004      	beq.n	34014f3a <HAL_LTDC_Init+0xda>
34014f30:	f240 1103 	movw	r1, #259	@ 0x103
34014f34:	4832      	ldr	r0, [pc, #200]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014f36:	f00a f913 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));
34014f3a:	6923      	ldr	r3, [r4, #16]
34014f3c:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
34014f40:	d004      	beq.n	34014f4c <HAL_LTDC_Init+0xec>
34014f42:	f44f 7182 	mov.w	r1, #260	@ 0x104
34014f46:	482e      	ldr	r0, [pc, #184]	@ (34015000 <HAL_LTDC_Init+0x1a0>)
34014f48:	f00a f90a 	bl	3401f160 <assert_failed>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
34014f4c:	f894 30a1 	ldrb.w	r3, [r4, #161]	@ 0xa1
34014f50:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
34014f54:	b923      	cbnz	r3, 34014f60 <HAL_LTDC_Init+0x100>
    HAL_LTDC_MspInit(hltdc);
34014f56:	4620      	mov	r0, r4
    hltdc->Lock = HAL_UNLOCKED;
34014f58:	f884 20a0 	strb.w	r2, [r4, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
34014f5c:	f7ff ff7e 	bl	34014e5c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
34014f60:	2302      	movs	r3, #2
34014f62:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
34014f66:	6823      	ldr	r3, [r4, #0]
34014f68:	699a      	ldr	r2, [r3, #24]
34014f6a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
34014f6e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34014f70:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
34014f74:	4302      	orrs	r2, r0
34014f76:	68e0      	ldr	r0, [r4, #12]
34014f78:	6999      	ldr	r1, [r3, #24]
34014f7a:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
34014f7c:	6920      	ldr	r0, [r4, #16]
34014f7e:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
34014f80:	430a      	orrs	r2, r1
34014f82:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
34014f84:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
34014f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34014f8c:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
34014f8e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
34014f92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34014f96:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
34014f98:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
34014f9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34014fa0:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
34014fa2:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
34014fa6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34014faa:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34014fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
34014fae:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34014fb2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
34014fb6:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
34014fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
34014fbc:	6add      	ldr	r5, [r3, #44]	@ 0x2c
34014fbe:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
34014fc2:	432a      	orrs	r2, r5
34014fc4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
34014fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34014fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_1)->RCR, LTDC_LxRCR_GRMSK);
34014fce:	2204      	movs	r2, #4
34014fd0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  WRITE_REG(LTDC_LAYER(hltdc, LTDC_LAYER_2)->RCR, LTDC_LxRCR_GRMSK);
34014fd4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34014fd8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34014fda:	2000      	movs	r0, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
34014fdc:	f042 0244 	orr.w	r2, r2, #68	@ 0x44
34014fe0:	665a      	str	r2, [r3, #100]	@ 0x64
  __HAL_LTDC_ENABLE(hltdc);
34014fe2:	699a      	ldr	r2, [r3, #24]
34014fe4:	f042 0201 	orr.w	r2, r2, #1
34014fe8:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
34014fea:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
34014fec:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
34014ff0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
34014ff4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
34014ff6:	2001      	movs	r0, #1
34014ff8:	e7fc      	b.n	34014ff4 <HAL_LTDC_Init+0x194>
34014ffa:	bf00      	nop
34014ffc:	58001000 	.word	0x58001000
34015000:	3402bbfd 	.word	0x3402bbfd

34015004 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
34015004:	2a01      	cmp	r2, #1
{
34015006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
34015008:	4606      	mov	r6, r0
3401500a:	460c      	mov	r4, r1
3401500c:	4617      	mov	r7, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
3401500e:	d904      	bls.n	3401501a <HAL_LTDC_ConfigLayer+0x16>
34015010:	f240 4104 	movw	r1, #1028	@ 0x404
34015014:	484d      	ldr	r0, [pc, #308]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
34015016:	f00a f8a3 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_HCONFIGST(pLayerCfg->WindowX0));
3401501a:	6823      	ldr	r3, [r4, #0]
3401501c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015020:	d304      	bcc.n	3401502c <HAL_LTDC_ConfigLayer+0x28>
34015022:	f240 4105 	movw	r1, #1029	@ 0x405
34015026:	4849      	ldr	r0, [pc, #292]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
34015028:	f00a f89a 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_HCONFIGSP(pLayerCfg->WindowX1));
3401502c:	6863      	ldr	r3, [r4, #4]
3401502e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015032:	d304      	bcc.n	3401503e <HAL_LTDC_ConfigLayer+0x3a>
34015034:	f240 4106 	movw	r1, #1030	@ 0x406
34015038:	4844      	ldr	r0, [pc, #272]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
3401503a:	f00a f891 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
3401503e:	68a3      	ldr	r3, [r4, #8]
34015040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015044:	d304      	bcc.n	34015050 <HAL_LTDC_ConfigLayer+0x4c>
34015046:	f240 4107 	movw	r1, #1031	@ 0x407
3401504a:	4840      	ldr	r0, [pc, #256]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
3401504c:	f00a f888 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
34015050:	68e3      	ldr	r3, [r4, #12]
34015052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34015056:	d304      	bcc.n	34015062 <HAL_LTDC_ConfigLayer+0x5e>
34015058:	f44f 6181 	mov.w	r1, #1032	@ 0x408
3401505c:	483b      	ldr	r0, [pc, #236]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
3401505e:	f00a f87f 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
34015062:	6923      	ldr	r3, [r4, #16]
34015064:	2b0b      	cmp	r3, #11
34015066:	d904      	bls.n	34015072 <HAL_LTDC_ConfigLayer+0x6e>
34015068:	f240 4109 	movw	r1, #1033	@ 0x409
3401506c:	4837      	ldr	r0, [pc, #220]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
3401506e:	f00a f877 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
34015072:	6963      	ldr	r3, [r4, #20]
34015074:	2bff      	cmp	r3, #255	@ 0xff
34015076:	d904      	bls.n	34015082 <HAL_LTDC_ConfigLayer+0x7e>
34015078:	f240 410a 	movw	r1, #1034	@ 0x40a
3401507c:	4833      	ldr	r0, [pc, #204]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
3401507e:	f00a f86f 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
34015082:	69a3      	ldr	r3, [r4, #24]
34015084:	2bff      	cmp	r3, #255	@ 0xff
34015086:	d904      	bls.n	34015092 <HAL_LTDC_ConfigLayer+0x8e>
34015088:	f240 410b 	movw	r1, #1035	@ 0x40b
3401508c:	482f      	ldr	r0, [pc, #188]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
3401508e:	f00a f867 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
34015092:	69e3      	ldr	r3, [r4, #28]
34015094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34015098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401509c:	d004      	beq.n	340150a8 <HAL_LTDC_ConfigLayer+0xa4>
3401509e:	f240 410c 	movw	r1, #1036	@ 0x40c
340150a2:	482a      	ldr	r0, [pc, #168]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
340150a4:	f00a f85c 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
340150a8:	6a23      	ldr	r3, [r4, #32]
340150aa:	f023 0302 	bic.w	r3, r3, #2
340150ae:	2b05      	cmp	r3, #5
340150b0:	d004      	beq.n	340150bc <HAL_LTDC_ConfigLayer+0xb8>
340150b2:	f240 410d 	movw	r1, #1037	@ 0x40d
340150b6:	4825      	ldr	r0, [pc, #148]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
340150b8:	f00a f852 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
340150bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340150be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340150c2:	d304      	bcc.n	340150ce <HAL_LTDC_ConfigLayer+0xca>
340150c4:	f240 410e 	movw	r1, #1038	@ 0x40e
340150c8:	4820      	ldr	r0, [pc, #128]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
340150ca:	f00a f849 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
340150ce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340150d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
340150d4:	d304      	bcc.n	340150e0 <HAL_LTDC_ConfigLayer+0xdc>
340150d6:	f240 410f 	movw	r1, #1039	@ 0x40f
340150da:	481c      	ldr	r0, [pc, #112]	@ (3401514c <HAL_LTDC_ConfigLayer+0x148>)
340150dc:	f00a f840 	bl	3401f160 <assert_failed>
  __HAL_LOCK(hltdc);
340150e0:	f896 30a0 	ldrb.w	r3, [r6, #160]	@ 0xa0
340150e4:	2002      	movs	r0, #2
340150e6:	2b01      	cmp	r3, #1
340150e8:	d02d      	beq.n	34015146 <HAL_LTDC_ConfigLayer+0x142>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
340150ea:	2534      	movs	r5, #52	@ 0x34
340150ec:	fb05 6507 	mla	r5, r5, r7, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
340150f0:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
340150f4:	3538      	adds	r5, #56	@ 0x38
340150f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
340150f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340150fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
340150fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
340150fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
34015100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
34015102:	6823      	ldr	r3, [r4, #0]
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34015104:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
34015106:	602b      	str	r3, [r5, #0]
  LTDC_SetPredefFormat(hltdc, LayerIdx);
34015108:	4630      	mov	r0, r6
3401510a:	f7ff fd83 	bl	34014c14 <LTDC_SetPredefFormat>
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
3401510e:	4639      	mov	r1, r7
34015110:	4630      	mov	r0, r6
34015112:	f7ff fd55 	bl	34014bc0 <LTDC_SetCompositionConfig>
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34015116:	2200      	movs	r2, #0
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34015118:	6834      	ldr	r4, [r6, #0]
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
3401511a:	4630      	mov	r0, r6
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
3401511c:	f504 7480 	add.w	r4, r4, #256	@ 0x100
34015120:	eb04 2407 	add.w	r4, r4, r7, lsl #8
34015124:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
34015126:	4611      	mov	r1, r2
  CLEAR_BIT(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN);
34015128:	f023 0308 	bic.w	r3, r3, #8
3401512c:	6323      	str	r3, [r4, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0U, 0U, LTDC_MIRROR_NONE, LayerIdx);
3401512e:	2303      	movs	r3, #3
34015130:	9700      	str	r7, [sp, #0]
34015132:	f7ff fc17 	bl	34014964 <LTDC_SetConfig>
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34015136:	2305      	movs	r3, #5
  __HAL_UNLOCK(hltdc);
34015138:	2000      	movs	r0, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
3401513a:	60a3      	str	r3, [r4, #8]
  hltdc->State  = HAL_LTDC_STATE_READY;
3401513c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
3401513e:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
  hltdc->State  = HAL_LTDC_STATE_READY;
34015142:	f886 30a1 	strb.w	r3, [r6, #161]	@ 0xa1
}
34015146:	b003      	add	sp, #12
34015148:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401514a:	bf00      	nop
3401514c:	3402bbfd 	.word	0x3402bbfd

34015150 <HAL_LTDC_ReloadLayer>:
  assert_param(IS_LTDC_RELOAD(ReloadType));
34015150:	1e4b      	subs	r3, r1, #1
34015152:	2b01      	cmp	r3, #1
{
34015154:	b570      	push	{r4, r5, r6, lr}
34015156:	4604      	mov	r4, r0
34015158:	460d      	mov	r5, r1
3401515a:	4616      	mov	r6, r2
  assert_param(IS_LTDC_RELOAD(ReloadType));
3401515c:	d904      	bls.n	34015168 <HAL_LTDC_ReloadLayer+0x18>
3401515e:	f640 0119 	movw	r1, #2073	@ 0x819
34015162:	480e      	ldr	r0, [pc, #56]	@ (3401519c <HAL_LTDC_ReloadLayer+0x4c>)
34015164:	f009 fffc 	bl	3401f160 <assert_failed>
  __HAL_LOCK(hltdc);
34015168:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
3401516c:	2002      	movs	r0, #2
3401516e:	2b01      	cmp	r3, #1
34015170:	d012      	beq.n	34015198 <HAL_LTDC_ReloadLayer+0x48>
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
34015172:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
34015174:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
34015178:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, ReloadType | LTDC_LxRCR_GRMSK);
3401517a:	3601      	adds	r6, #1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
3401517c:	f042 0208 	orr.w	r2, r2, #8
34015180:	665a      	str	r2, [r3, #100]	@ 0x64
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, ReloadType | LTDC_LxRCR_GRMSK);
34015182:	f045 0504 	orr.w	r5, r5, #4
34015186:	eb03 2306 	add.w	r3, r3, r6, lsl #8
3401518a:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hltdc);
3401518c:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
3401518e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34015190:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_READY;
34015194:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
34015198:	bd70      	pop	{r4, r5, r6, pc}
3401519a:	bf00      	nop
3401519c:	3402bbfd 	.word	0x3402bbfd

340151a0 <HAL_LTDC_SetAddress_NoReload>:
  uint32_t aux0Addr = 0U;
340151a0:	2300      	movs	r3, #0
{
340151a2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LTDC_LAYER(LayerIdx));
340151a4:	2a01      	cmp	r2, #1
{
340151a6:	b086      	sub	sp, #24
340151a8:	4604      	mov	r4, r0
340151aa:	460e      	mov	r6, r1
340151ac:	4615      	mov	r5, r2
  uint32_t aux1Addr = 0U;
340151ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
  uint32_t mirror = 0U;
340151b2:	9305      	str	r3, [sp, #20]
  assert_param(IS_LTDC_LAYER(LayerIdx));
340151b4:	d904      	bls.n	340151c0 <HAL_LTDC_SetAddress_NoReload+0x20>
340151b6:	f640 1165 	movw	r1, #2405	@ 0x965
340151ba:	4812      	ldr	r0, [pc, #72]	@ (34015204 <HAL_LTDC_SetAddress_NoReload+0x64>)
340151bc:	f009 ffd0 	bl	3401f160 <assert_failed>
  __HAL_LOCK(hltdc);
340151c0:	f894 30a0 	ldrb.w	r3, [r4, #160]	@ 0xa0
340151c4:	2002      	movs	r0, #2
340151c6:	2b01      	cmp	r3, #1
340151c8:	d019      	beq.n	340151fe <HAL_LTDC_SetAddress_NoReload+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
340151ca:	f884 00a1 	strb.w	r0, [r4, #161]	@ 0xa1
  LTDC_RetrieveUserConfig(hltdc, &mirror, &aux0Addr, &aux1Addr, LayerIdx);
340151ce:	ab04      	add	r3, sp, #16
340151d0:	4620      	mov	r0, r4
340151d2:	aa03      	add	r2, sp, #12
340151d4:	a905      	add	r1, sp, #20
340151d6:	9500      	str	r5, [sp, #0]
340151d8:	f7ff fd5e 	bl	34014c98 <LTDC_RetrieveUserConfig.constprop.0>
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
340151dc:	2334      	movs	r3, #52	@ 0x34
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
340151de:	2200      	movs	r2, #0
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
340151e0:	fb03 4305 	mla	r3, r3, r5, r4
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
340151e4:	4620      	mov	r0, r4
  hltdc->LayerCfg[LayerIdx].FBStartAdress = Address;
340151e6:	65de      	str	r6, [r3, #92]	@ 0x5c
  LTDC_SetConfig(hltdc, 0, 0, mirror, LayerIdx);
340151e8:	4611      	mov	r1, r2
340151ea:	9b05      	ldr	r3, [sp, #20]
340151ec:	9500      	str	r5, [sp, #0]
340151ee:	f7ff fbb9 	bl	34014964 <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
340151f2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
340151f4:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
340151f6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
340151fa:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
340151fe:	b006      	add	sp, #24
34015200:	bd70      	pop	{r4, r5, r6, pc}
34015202:	bf00      	nop
34015204:	3402bbfd 	.word	0x3402bbfd

34015208 <HAL_LTDC_ConfigLayerFlexARGB>:
  assert_param(IS_LTDC_LAYER(LayerIdx));
34015208:	2a01      	cmp	r2, #1
{
3401520a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401520c:	4606      	mov	r6, r0
3401520e:	460c      	mov	r4, r1
34015210:	4617      	mov	r7, r2
  assert_param(IS_LTDC_LAYER(LayerIdx));
34015212:	d904      	bls.n	3401521e <HAL_LTDC_ConfigLayerFlexARGB+0x16>
34015214:	f640 31a1 	movw	r1, #2977	@ 0xba1
34015218:	4847      	ldr	r0, [pc, #284]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401521a:	f009 ffa1 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.RedWidth));
3401521e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34015220:	2b0f      	cmp	r3, #15
34015222:	d904      	bls.n	3401522e <HAL_LTDC_ConfigLayerFlexARGB+0x26>
34015224:	f640 31a2 	movw	r1, #2978	@ 0xba2
34015228:	4843      	ldr	r0, [pc, #268]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401522a:	f009 ff99 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.GreenWidth));
3401522e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34015230:	2b0f      	cmp	r3, #15
34015232:	d904      	bls.n	3401523e <HAL_LTDC_ConfigLayerFlexARGB+0x36>
34015234:	f640 31a3 	movw	r1, #2979	@ 0xba3
34015238:	483f      	ldr	r0, [pc, #252]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401523a:	f009 ff91 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_WIDTH(pLayerFlexARGB->FlexARGB.BlueWidth));
3401523e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34015240:	2b0f      	cmp	r3, #15
34015242:	d904      	bls.n	3401524e <HAL_LTDC_ConfigLayerFlexARGB+0x46>
34015244:	f640 31a4 	movw	r1, #2980	@ 0xba4
34015248:	483b      	ldr	r0, [pc, #236]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401524a:	f009 ff89 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.RedPos));
3401524e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34015250:	2b1f      	cmp	r3, #31
34015252:	d904      	bls.n	3401525e <HAL_LTDC_ConfigLayerFlexARGB+0x56>
34015254:	f640 31a5 	movw	r1, #2981	@ 0xba5
34015258:	4837      	ldr	r0, [pc, #220]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401525a:	f009 ff81 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.GreenPos));
3401525e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34015260:	2b1f      	cmp	r3, #31
34015262:	d904      	bls.n	3401526e <HAL_LTDC_ConfigLayerFlexARGB+0x66>
34015264:	f640 31a6 	movw	r1, #2982	@ 0xba6
34015268:	4833      	ldr	r0, [pc, #204]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401526a:	f009 ff79 	bl	3401f160 <assert_failed>
  assert_param(IS_LTDC_ARGB_COMPONENT_POSITION(pLayerFlexARGB->FlexARGB.BluePos));
3401526e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34015270:	2b1f      	cmp	r3, #31
34015272:	d904      	bls.n	3401527e <HAL_LTDC_ConfigLayerFlexARGB+0x76>
34015274:	f640 31a7 	movw	r1, #2983	@ 0xba7
34015278:	482f      	ldr	r0, [pc, #188]	@ (34015338 <HAL_LTDC_ConfigLayerFlexARGB+0x130>)
3401527a:	f009 ff71 	bl	3401f160 <assert_failed>
  __HAL_LOCK(hltdc);
3401527e:	f896 30a0 	ldrb.w	r3, [r6, #160]	@ 0xa0
34015282:	2002      	movs	r0, #2
34015284:	2b01      	cmp	r3, #1
34015286:	d054      	beq.n	34015332 <HAL_LTDC_ConfigLayerFlexARGB+0x12a>
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
34015288:	2334      	movs	r3, #52	@ 0x34
3401528a:	fb03 6307 	mla	r3, r3, r7, r6
  hltdc->State = HAL_LTDC_STATE_BUSY;
3401528e:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
34015292:	6822      	ldr	r2, [r4, #0]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
34015294:	6835      	ldr	r5, [r6, #0]
  hltdc->LayerCfg[LayerIdx].WindowX0 = pLayerFlexARGB->Layer.WindowX0;
34015296:	639a      	str	r2, [r3, #56]	@ 0x38
  hltdc->LayerCfg[LayerIdx].WindowX1 = pLayerFlexARGB->Layer.WindowX1;
34015298:	6862      	ldr	r2, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
3401529a:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  hltdc->LayerCfg[LayerIdx].WindowX1 = pLayerFlexARGB->Layer.WindowX1;
3401529e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hltdc->LayerCfg[LayerIdx].WindowY0 = pLayerFlexARGB->Layer.WindowY0;
340152a0:	68a2      	ldr	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
340152a2:	eb05 2507 	add.w	r5, r5, r7, lsl #8
  hltdc->LayerCfg[LayerIdx].WindowY0 = pLayerFlexARGB->Layer.WindowY0;
340152a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hltdc->LayerCfg[LayerIdx].WindowY1 = pLayerFlexARGB->Layer.WindowY1;
340152a8:	68e2      	ldr	r2, [r4, #12]
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
340152aa:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx].WindowY1 = pLayerFlexARGB->Layer.WindowY1;
340152ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hltdc->LayerCfg[LayerIdx].PixelFormat = LTDC_PIXEL_FORMAT_FLEX_ARGB;
340152ae:	220c      	movs	r2, #12
340152b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hltdc->LayerCfg[LayerIdx].Alpha = pLayerFlexARGB->Layer.Alpha;
340152b2:	6922      	ldr	r2, [r4, #16]
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
340152b4:	4630      	mov	r0, r6
  hltdc->LayerCfg[LayerIdx].Alpha = pLayerFlexARGB->Layer.Alpha;
340152b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hltdc->LayerCfg[LayerIdx].Alpha0 = pLayerFlexARGB->Layer.Alpha0;
340152b8:	6962      	ldr	r2, [r4, #20]
340152ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hltdc->LayerCfg[LayerIdx].BlendingFactor1 = pLayerFlexARGB->Layer.BlendingFactor1;
340152bc:	69a2      	ldr	r2, [r4, #24]
340152be:	655a      	str	r2, [r3, #84]	@ 0x54
  hltdc->LayerCfg[LayerIdx].BlendingFactor2 = pLayerFlexARGB->Layer.BlendingFactor2;
340152c0:	69e2      	ldr	r2, [r4, #28]
340152c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hltdc->LayerCfg[LayerIdx].FBStartAdress = pLayerFlexARGB->ARGBAddress;
340152c4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
340152c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hltdc->LayerCfg[LayerIdx].ImageWidth = pLayerFlexARGB->Layer.ImageWidth;
340152c8:	6a22      	ldr	r2, [r4, #32]
340152ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hltdc->LayerCfg[LayerIdx].ImageHeight = pLayerFlexARGB->Layer.ImageHeight;
340152cc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
340152ce:	665a      	str	r2, [r3, #100]	@ 0x64
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = 0x7U;
340152d0:	2307      	movs	r3, #7
340152d2:	61eb      	str	r3, [r5, #28]
                                       (pLayerFlexARGB->FlexARGB.RedPos << LTDC_LxFPF0R_RPOS_Pos) |
340152d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
340152d6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
                                       (pLayerFlexARGB->FlexARGB.RedPos << LTDC_LxFPF0R_RPOS_Pos) |
340152d8:	025b      	lsls	r3, r3, #9
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
340152da:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                                       (pLayerFlexARGB->FlexARGB.AlphaWidth << LTDC_LxFPF0R_ALEN_Pos) |
340152de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
340152e0:	4313      	orrs	r3, r2
340152e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
340152e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  LTDC_LAYER(hltdc, LayerIdx)->FPF0R = (pLayerFlexARGB->FlexARGB.RedWidth << LTDC_LxFPF0R_RLEN_Pos) |
340152e8:	676b      	str	r3, [r5, #116]	@ 0x74
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
340152ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                                       (pLayerFlexARGB->FlexARGB.BlueWidth << LTDC_LxFPF1R_BLEN_Pos) |
340152ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340152ee:	039b      	lsls	r3, r3, #14
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
340152f0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
340152f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
340152f6:	4313      	orrs	r3, r2
                                       (pLayerFlexARGB->FlexARGB.BluePos << LTDC_LxFPF1R_BPOS_Pos) |
340152f8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
340152fa:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
340152fe:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34015300:	2405      	movs	r4, #5
                                       (pLayerFlexARGB->FlexARGB.GreenWidth << LTDC_LxFPF1R_GLEN_Pos) |
34015302:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
  LTDC_LAYER(hltdc, LayerIdx)->FPF1R = (pLayerFlexARGB->FlexARGB.PixelSize << LTDC_LxFPF1R_PSIZE_Pos) |
34015306:	67ab      	str	r3, [r5, #120]	@ 0x78
  LTDC_SetCompositionConfig(hltdc, LayerIdx);
34015308:	f7ff fc5a 	bl	34014bc0 <LTDC_SetCompositionConfig>
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
3401530c:	2200      	movs	r2, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
3401530e:	60ac      	str	r4, [r5, #8]
  MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN, 0U);
34015310:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
34015312:	4630      	mov	r0, r6
  MODIFY_REG(LTDC_LAYER(hltdc, LayerIdx)->PCR, LTDC_LxPCR_YCEN, 0U);
34015314:	f023 0308 	bic.w	r3, r3, #8
34015318:	632b      	str	r3, [r5, #48]	@ 0x30
  LTDC_SetConfig(hltdc, 0, 0, LTDC_MIRROR_NONE, LayerIdx);
3401531a:	4611      	mov	r1, r2
3401531c:	2303      	movs	r3, #3
3401531e:	9700      	str	r7, [sp, #0]
34015320:	f7ff fb20 	bl	34014964 <LTDC_SetConfig>
  hltdc->State = HAL_LTDC_STATE_READY;
34015324:	2301      	movs	r3, #1
  __HAL_UNLOCK(hltdc);
34015326:	2000      	movs	r0, #0
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->RCR, LTDC_LxRCR_IMR | LTDC_LxRCR_GRMSK);
34015328:	60ac      	str	r4, [r5, #8]
  hltdc->State = HAL_LTDC_STATE_READY;
3401532a:	f886 30a1 	strb.w	r3, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
3401532e:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
34015332:	b003      	add	sp, #12
34015334:	bdf0      	pop	{r4, r5, r6, r7, pc}
34015336:	bf00      	nop
34015338:	3402bbfd 	.word	0x3402bbfd

3401533c <HAL_PWREx_ConfigVddIORange>:
  * @retval None.
  */
void HAL_PWREx_ConfigVddIORange(uint32_t VddIOPort, uint32_t VoltageRange)
{
  /* Check the parameters */
  assert_param(IS_PWR_VDDIO(VddIOPort));
3401533c:	2804      	cmp	r0, #4
{
3401533e:	b538      	push	{r3, r4, r5, lr}
34015340:	4605      	mov	r5, r0
34015342:	460c      	mov	r4, r1
  assert_param(IS_PWR_VDDIO(VddIOPort));
34015344:	d912      	bls.n	3401536c <HAL_PWREx_ConfigVddIORange+0x30>
34015346:	f240 316a 	movw	r1, #874	@ 0x36a
3401534a:	481d      	ldr	r0, [pc, #116]	@ (340153c0 <HAL_PWREx_ConfigVddIORange+0x84>)
3401534c:	f009 ff08 	bl	3401f160 <assert_failed>
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
34015350:	2c01      	cmp	r4, #1
34015352:	d915      	bls.n	34015380 <HAL_PWREx_ConfigVddIORange+0x44>
34015354:	f240 316b 	movw	r1, #875	@ 0x36b
34015358:	4819      	ldr	r0, [pc, #100]	@ (340153c0 <HAL_PWREx_ConfigVddIORange+0x84>)
3401535a:	f009 ff01 	bl	3401f160 <assert_failed>

  switch (VddIOPort)
3401535e:	2d04      	cmp	r5, #4
34015360:	d80e      	bhi.n	34015380 <HAL_PWREx_ConfigVddIORange+0x44>
34015362:	e8df f005 	tbb	[pc, r5]
34015366:	0e06      	.short	0x0e06
34015368:	1c15      	.short	0x1c15
3401536a:	24          	.byte	0x24
3401536b:	00          	.byte	0x00
  assert_param(IS_PWR_VDDIO_RANGE(VoltageRange));
3401536c:	2901      	cmp	r1, #1
3401536e:	d9f6      	bls.n	3401535e <HAL_PWREx_ConfigVddIORange+0x22>
34015370:	e7f0      	b.n	34015354 <HAL_PWREx_ConfigVddIORange+0x18>
  {
    case PWR_VDDIO:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIOVRSEL, VoltageRange << PWR_SVMCR3_VDDIOVRSEL_Pos);
34015372:	4a14      	ldr	r2, [pc, #80]	@ (340153c4 <HAL_PWREx_ConfigVddIORange+0x88>)
34015374:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34015376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3401537a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    case PWR_VDDIO2:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
      break;

    case PWR_VDDIO3:
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
3401537e:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;

    default:
      break;
  }
}
34015380:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO2VRSEL, VoltageRange << PWR_SVMCR3_VDDIO2VRSEL_Pos);
34015382:	4a10      	ldr	r2, [pc, #64]	@ (340153c4 <HAL_PWREx_ConfigVddIORange+0x88>)
34015384:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34015386:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3401538a:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
3401538e:	e7f6      	b.n	3401537e <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR3, PWR_SVMCR3_VDDIO3VRSEL, VoltageRange << PWR_SVMCR3_VDDIO3VRSEL_Pos);
34015390:	4a0c      	ldr	r2, [pc, #48]	@ (340153c4 <HAL_PWREx_ConfigVddIORange+0x88>)
34015392:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34015394:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
34015398:	ea43 6384 	orr.w	r3, r3, r4, lsl #26
3401539c:	e7ef      	b.n	3401537e <HAL_PWREx_ConfigVddIORange+0x42>
      MODIFY_REG(PWR->SVMCR1, PWR_SVMCR1_VDDIO4VRSEL, VoltageRange << PWR_SVMCR1_VDDIO4VRSEL_Pos);
3401539e:	4a09      	ldr	r2, [pc, #36]	@ (340153c4 <HAL_PWREx_ConfigVddIORange+0x88>)
340153a0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
340153a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
340153a6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
340153aa:	6353      	str	r3, [r2, #52]	@ 0x34
      break;
340153ac:	e7e8      	b.n	34015380 <HAL_PWREx_ConfigVddIORange+0x44>
      MODIFY_REG(PWR->SVMCR2, PWR_SVMCR2_VDDIO5VRSEL, VoltageRange << PWR_SVMCR2_VDDIO5VRSEL_Pos);
340153ae:	4a05      	ldr	r2, [pc, #20]	@ (340153c4 <HAL_PWREx_ConfigVddIORange+0x88>)
340153b0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
340153b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
340153b6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
340153ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
340153bc:	e7e0      	b.n	34015380 <HAL_PWREx_ConfigVddIORange+0x44>
340153be:	bf00      	nop
340153c0:	3402bc5e 	.word	0x3402bc5e
340153c4:	56024800 	.word	0x56024800

340153c8 <HAL_PWREx_EnableVddIO2>:
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
340153c8:	4a02      	ldr	r2, [pc, #8]	@ (340153d4 <HAL_PWREx_EnableVddIO2+0xc>)
340153ca:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340153cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
340153d0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
340153d2:	4770      	bx	lr
340153d4:	56024800 	.word	0x56024800

340153d8 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
340153d8:	4a02      	ldr	r2, [pc, #8]	@ (340153e4 <HAL_PWREx_EnableVddIO3+0xc>)
340153da:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
340153dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
340153e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
340153e2:	4770      	bx	lr
340153e4:	56024800 	.word	0x56024800

340153e8 <HAL_PWREx_EnableVddIO4>:
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
340153e8:	4a02      	ldr	r2, [pc, #8]	@ (340153f4 <HAL_PWREx_EnableVddIO4+0xc>)
340153ea:	6b53      	ldr	r3, [r2, #52]	@ 0x34
340153ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
340153f0:	6353      	str	r3, [r2, #52]	@ 0x34
}
340153f2:	4770      	bx	lr
340153f4:	56024800 	.word	0x56024800

340153f8 <HAL_RAMCFG_EnableAXISRAM>:
  * @retval None.
  */
void HAL_RAMCFG_EnableAXISRAM(const RAMCFG_HandleTypeDef *hramcfg)
{
  /* Check the parameters */
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340153f8:	6803      	ldr	r3, [r0, #0]
340153fa:	4a1c      	ldr	r2, [pc, #112]	@ (3401546c <HAL_RAMCFG_EnableAXISRAM+0x74>)
{
340153fc:	b510      	push	{r4, lr}
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
340153fe:	4293      	cmp	r3, r2
{
34015400:	4604      	mov	r4, r0
  assert_param(IS_RAMCFG_AXISRAM_POWERDOWN_INSTANCE(hramcfg->Instance));
34015402:	d02c      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
34015404:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34015408:	4293      	cmp	r3, r2
3401540a:	d028      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
3401540c:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34015410:	3280      	adds	r2, #128	@ 0x80
34015412:	4293      	cmp	r3, r2
34015414:	d023      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
34015416:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401541a:	4293      	cmp	r3, r2
3401541c:	d01f      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
3401541e:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34015422:	3280      	adds	r2, #128	@ 0x80
34015424:	4293      	cmp	r3, r2
34015426:	d01a      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
34015428:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401542c:	4293      	cmp	r3, r2
3401542e:	d016      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
34015430:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34015434:	3280      	adds	r2, #128	@ 0x80
34015436:	4293      	cmp	r3, r2
34015438:	d011      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
3401543a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401543e:	4293      	cmp	r3, r2
34015440:	d00d      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
34015442:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
34015446:	3280      	adds	r2, #128	@ 0x80
34015448:	4293      	cmp	r3, r2
3401544a:	d008      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
3401544c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34015450:	4293      	cmp	r3, r2
34015452:	d004      	beq.n	3401545e <HAL_RAMCFG_EnableAXISRAM+0x66>
34015454:	f240 4107 	movw	r1, #1031	@ 0x407
34015458:	4805      	ldr	r0, [pc, #20]	@ (34015470 <HAL_RAMCFG_EnableAXISRAM+0x78>)
3401545a:	f009 fe81 	bl	3401f160 <assert_failed>

  /* AXISRAMi power on */
  CLEAR_BIT(hramcfg->Instance->CR, RAMCFG_AXISRAM_POWERDOWN);
3401545e:	6822      	ldr	r2, [r4, #0]
34015460:	6813      	ldr	r3, [r2, #0]
34015462:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34015466:	6013      	str	r3, [r2, #0]
}
34015468:	bd10      	pop	{r4, pc}
3401546a:	bf00      	nop
3401546c:	52023080 	.word	0x52023080
34015470:	3402bcc1 	.word	0x3402bcc1

34015474 <LL_RCC_HSI_IsReady>:
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34015474:	4b02      	ldr	r3, [pc, #8]	@ (34015480 <LL_RCC_HSI_IsReady+0xc>)
34015476:	6858      	ldr	r0, [r3, #4]
}
34015478:	f3c0 00c0 	ubfx	r0, r0, #3, #1
3401547c:	4770      	bx	lr
3401547e:	bf00      	nop
34015480:	56028000 	.word	0x56028000

34015484 <LL_RCC_MSI_IsReady>:
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34015484:	4b02      	ldr	r3, [pc, #8]	@ (34015490 <LL_RCC_MSI_IsReady+0xc>)
34015486:	6858      	ldr	r0, [r3, #4]
}
34015488:	f3c0 0080 	ubfx	r0, r0, #2, #1
3401548c:	4770      	bx	lr
3401548e:	bf00      	nop
34015490:	56028000 	.word	0x56028000

34015494 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34015494:	4b02      	ldr	r3, [pc, #8]	@ (340154a0 <LL_RCC_PLL1_IsReady+0xc>)
34015496:	6858      	ldr	r0, [r3, #4]
}
34015498:	f3c0 2000 	ubfx	r0, r0, #8, #1
3401549c:	4770      	bx	lr
3401549e:	bf00      	nop
340154a0:	56028000 	.word	0x56028000

340154a4 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
340154a4:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340154a6:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340154a8:	4d1b      	ldr	r5, [pc, #108]	@ (34015518 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
340154aa:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
340154ac:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340154ae:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340154b0:	021b      	lsls	r3, r3, #8
340154b2:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
340154b6:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340154b8:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
340154bc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
340154c0:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
340154c2:	429a      	cmp	r2, r3
340154c4:	d126      	bne.n	34015514 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
340154c6:	4b15      	ldr	r3, [pc, #84]	@ (3401551c <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
340154c8:	68ca      	ldr	r2, [r1, #12]
340154ca:	58e3      	ldr	r3, [r4, r3]
340154cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340154d0:	4293      	cmp	r3, r2
340154d2:	d11f      	bne.n	34015514 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
340154d4:	4b12      	ldr	r3, [pc, #72]	@ (34015520 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
340154d6:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
340154d8:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
340154dc:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
340154de:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
340154e2:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
340154e6:	429a      	cmp	r2, r3
340154e8:	d114      	bne.n	34015514 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340154ea:	4b0e      	ldr	r3, [pc, #56]	@ (34015524 <RCC_PLL_IsNewConfig+0x80>)
340154ec:	685a      	ldr	r2, [r3, #4]
340154ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
340154f2:	fa03 f000 	lsl.w	r0, r3, r0
340154f6:	4390      	bics	r0, r2
340154f8:	d00a      	beq.n	34015510 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
340154fa:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
340154fc:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34015500:	bf0c      	ite	eq
34015502:	2301      	moveq	r3, #1
34015504:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34015506:	6808      	ldr	r0, [r1, #0]
34015508:	1ac0      	subs	r0, r0, r3
3401550a:	bf18      	it	ne
3401550c:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
3401550e:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34015510:	2302      	movs	r3, #2
34015512:	e7f8      	b.n	34015506 <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34015514:	2001      	movs	r0, #1
  return ret;
34015516:	e7fa      	b.n	3401550e <RCC_PLL_IsNewConfig+0x6a>
34015518:	56028080 	.word	0x56028080
3401551c:	56028084 	.word	0x56028084
34015520:	56028088 	.word	0x56028088
34015524:	56028000 	.word	0x56028000

34015528 <RCC_PLL_Enable>:
{
34015528:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3401552a:	f44f 7480 	mov.w	r4, #256	@ 0x100
3401552e:	4e09      	ldr	r6, [pc, #36]	@ (34015554 <RCC_PLL_Enable+0x2c>)
34015530:	4084      	lsls	r4, r0
34015532:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
34015536:	f009 fae3 	bl	3401eb00 <HAL_GetTick>
3401553a:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3401553c:	6873      	ldr	r3, [r6, #4]
3401553e:	421c      	tst	r4, r3
34015540:	d001      	beq.n	34015546 <RCC_PLL_Enable+0x1e>
  return ret;
34015542:	2000      	movs	r0, #0
}
34015544:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34015546:	f009 fadb 	bl	3401eb00 <HAL_GetTick>
3401554a:	1b40      	subs	r0, r0, r5
3401554c:	2801      	cmp	r0, #1
3401554e:	d9f5      	bls.n	3401553c <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34015550:	2003      	movs	r0, #3
34015552:	e7f7      	b.n	34015544 <RCC_PLL_Enable+0x1c>
34015554:	56028000 	.word	0x56028000

34015558 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34015558:	680b      	ldr	r3, [r1, #0]
{
3401555a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
3401555e:	2b02      	cmp	r3, #2
{
34015560:	4681      	mov	r9, r0
34015562:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34015564:	4f83      	ldr	r7, [pc, #524]	@ (34015774 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34015566:	4e84      	ldr	r6, [pc, #528]	@ (34015778 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34015568:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
3401556c:	f040 8099 	bne.w	340156a2 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34015570:	684b      	ldr	r3, [r1, #4]
34015572:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34015576:	d004      	beq.n	34015582 <RCC_PLL_Config+0x2a>
34015578:	f240 71fa 	movw	r1, #2042	@ 0x7fa
3401557c:	487f      	ldr	r0, [pc, #508]	@ (3401577c <RCC_PLL_Config+0x224>)
3401557e:	f009 fdef 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34015582:	68eb      	ldr	r3, [r5, #12]
34015584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34015588:	d304      	bcc.n	34015594 <RCC_PLL_Config+0x3c>
3401558a:	f240 71fb 	movw	r1, #2043	@ 0x7fb
3401558e:	487b      	ldr	r0, [pc, #492]	@ (3401577c <RCC_PLL_Config+0x224>)
34015590:	f009 fde6 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34015594:	68ab      	ldr	r3, [r5, #8]
34015596:	3b01      	subs	r3, #1
34015598:	2b3e      	cmp	r3, #62	@ 0x3e
3401559a:	d904      	bls.n	340155a6 <RCC_PLL_Config+0x4e>
3401559c:	f240 71fc 	movw	r1, #2044	@ 0x7fc
340155a0:	4876      	ldr	r0, [pc, #472]	@ (3401577c <RCC_PLL_Config+0x224>)
340155a2:	f009 fddd 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
340155a6:	f640 12ba 	movw	r2, #2490	@ 0x9ba
340155aa:	692b      	ldr	r3, [r5, #16]
340155ac:	3b0a      	subs	r3, #10
340155ae:	4293      	cmp	r3, r2
340155b0:	d904      	bls.n	340155bc <RCC_PLL_Config+0x64>
340155b2:	f240 71fd 	movw	r1, #2045	@ 0x7fd
340155b6:	4871      	ldr	r0, [pc, #452]	@ (3401577c <RCC_PLL_Config+0x224>)
340155b8:	f009 fdd2 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
340155bc:	696b      	ldr	r3, [r5, #20]
340155be:	3b01      	subs	r3, #1
340155c0:	2b06      	cmp	r3, #6
340155c2:	d904      	bls.n	340155ce <RCC_PLL_Config+0x76>
340155c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
340155c8:	486c      	ldr	r0, [pc, #432]	@ (3401577c <RCC_PLL_Config+0x224>)
340155ca:	f009 fdc9 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
340155ce:	69ab      	ldr	r3, [r5, #24]
340155d0:	3b01      	subs	r3, #1
340155d2:	2b06      	cmp	r3, #6
340155d4:	d904      	bls.n	340155e0 <RCC_PLL_Config+0x88>
340155d6:	f240 71ff 	movw	r1, #2047	@ 0x7ff
340155da:	4868      	ldr	r0, [pc, #416]	@ (3401577c <RCC_PLL_Config+0x224>)
340155dc:	f009 fdc0 	bl	3401f160 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340155e0:	f44f 7880 	mov.w	r8, #256	@ 0x100
340155e4:	4b66      	ldr	r3, [pc, #408]	@ (34015780 <RCC_PLL_Config+0x228>)
340155e6:	fa08 f809 	lsl.w	r8, r8, r9
340155ea:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
340155ee:	f009 fa87 	bl	3401eb00 <HAL_GetTick>
340155f2:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340155f4:	f8df a194 	ldr.w	sl, [pc, #404]	@ 3401578c <RCC_PLL_Config+0x234>
340155f8:	f8da 3004 	ldr.w	r3, [sl, #4]
340155fc:	ea38 0303 	bics.w	r3, r8, r3
34015600:	d040      	beq.n	34015684 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34015602:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34015604:	495f      	ldr	r1, [pc, #380]	@ (34015784 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34015606:	f043 0304 	orr.w	r3, r3, #4
3401560a:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3401560c:	59e3      	ldr	r3, [r4, r7]
3401560e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34015612:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34015614:	692b      	ldr	r3, [r5, #16]
34015616:	68aa      	ldr	r2, [r5, #8]
34015618:	021b      	lsls	r3, r3, #8
3401561a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
3401561e:	686a      	ldr	r2, [r5, #4]
34015620:	59e0      	ldr	r0, [r4, r7]
34015622:	4313      	orrs	r3, r2
34015624:	4a58      	ldr	r2, [pc, #352]	@ (34015788 <RCC_PLL_Config+0x230>)
34015626:	4002      	ands	r2, r0
34015628:	4313      	orrs	r3, r2
3401562a:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
3401562c:	59a2      	ldr	r2, [r4, r6]
3401562e:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34015632:	061b      	lsls	r3, r3, #24
34015634:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
34015638:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
3401563c:	4313      	orrs	r3, r2
3401563e:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34015640:	5863      	ldr	r3, [r4, r1]
34015642:	68ea      	ldr	r2, [r5, #12]
34015644:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34015648:	4313      	orrs	r3, r2
3401564a:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
3401564c:	59a3      	ldr	r3, [r4, r6]
3401564e:	f023 0308 	bic.w	r3, r3, #8
34015652:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
34015654:	68eb      	ldr	r3, [r5, #12]
34015656:	b11b      	cbz	r3, 34015660 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34015658:	59a3      	ldr	r3, [r4, r6]
3401565a:	f043 030a 	orr.w	r3, r3, #10
3401565e:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34015660:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34015662:	4d4a      	ldr	r5, [pc, #296]	@ (3401578c <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34015664:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34015668:	f043 0301 	orr.w	r3, r3, #1
3401566c:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
3401566e:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
34015672:	f009 fa45 	bl	3401eb00 <HAL_GetTick>
34015676:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34015678:	686b      	ldr	r3, [r5, #4]
3401567a:	ea18 0f03 	tst.w	r8, r3
3401567e:	d00a      	beq.n	34015696 <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
34015680:	2000      	movs	r0, #0
34015682:	e006      	b.n	34015692 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34015684:	f009 fa3c 	bl	3401eb00 <HAL_GetTick>
34015688:	eba0 0009 	sub.w	r0, r0, r9
3401568c:	2801      	cmp	r0, #1
3401568e:	d9b3      	bls.n	340155f8 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
34015690:	2003      	movs	r0, #3
}
34015692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34015696:	f009 fa33 	bl	3401eb00 <HAL_GetTick>
3401569a:	1b00      	subs	r0, r0, r4
3401569c:	2801      	cmp	r0, #1
3401569e:	d9eb      	bls.n	34015678 <RCC_PLL_Config+0x120>
340156a0:	e7f6      	b.n	34015690 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
340156a2:	2b03      	cmp	r3, #3
340156a4:	d146      	bne.n	34015734 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
340156a6:	684b      	ldr	r3, [r1, #4]
340156a8:	b37b      	cbz	r3, 3401570a <RCC_PLL_Config+0x1b2>
340156aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340156ae:	d032      	beq.n	34015716 <RCC_PLL_Config+0x1be>
340156b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340156b4:	d032      	beq.n	3401571c <RCC_PLL_Config+0x1c4>
340156b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340156ba:	d00d      	beq.n	340156d8 <RCC_PLL_Config+0x180>
340156bc:	f640 013f 	movw	r1, #2111	@ 0x83f
340156c0:	482e      	ldr	r0, [pc, #184]	@ (3401577c <RCC_PLL_Config+0x224>)
340156c2:	f009 fd4d 	bl	3401f160 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
340156c6:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
340156c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340156cc:	d026      	beq.n	3401571c <RCC_PLL_Config+0x1c4>
340156ce:	d803      	bhi.n	340156d8 <RCC_PLL_Config+0x180>
340156d0:	b1db      	cbz	r3, 3401570a <RCC_PLL_Config+0x1b2>
340156d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340156d6:	d01e      	beq.n	34015716 <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
340156d8:	f44f 7680 	mov.w	r6, #256	@ 0x100
340156dc:	4b28      	ldr	r3, [pc, #160]	@ (34015780 <RCC_PLL_Config+0x228>)
340156de:	fa06 f609 	lsl.w	r6, r6, r9
340156e2:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
340156e4:	f009 fa0c 	bl	3401eb00 <HAL_GetTick>
340156e8:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
340156ea:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 3401578c <RCC_PLL_Config+0x234>
340156ee:	f8d9 3004 	ldr.w	r3, [r9, #4]
340156f2:	ea36 0303 	bics.w	r3, r6, r3
340156f6:	d016      	beq.n	34015726 <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
340156f8:	59e3      	ldr	r3, [r4, r7]
340156fa:	686a      	ldr	r2, [r5, #4]
340156fc:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34015700:	4313      	orrs	r3, r2
34015702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
34015706:	51e3      	str	r3, [r4, r7]
34015708:	e7ba      	b.n	34015680 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
3401570a:	f7ff feb3 	bl	34015474 <LL_RCC_HSI_IsReady>
3401570e:	2800      	cmp	r0, #0
34015710:	d1e2      	bne.n	340156d8 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34015712:	2001      	movs	r0, #1
34015714:	e7bd      	b.n	34015692 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
34015716:	f7ff feb5 	bl	34015484 <LL_RCC_MSI_IsReady>
3401571a:	e7f8      	b.n	3401570e <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3401571c:	4b1b      	ldr	r3, [pc, #108]	@ (3401578c <RCC_PLL_Config+0x234>)
3401571e:	685b      	ldr	r3, [r3, #4]
34015720:	06db      	lsls	r3, r3, #27
34015722:	d5f6      	bpl.n	34015712 <RCC_PLL_Config+0x1ba>
34015724:	e7d8      	b.n	340156d8 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34015726:	f009 f9eb 	bl	3401eb00 <HAL_GetTick>
3401572a:	eba0 0008 	sub.w	r0, r0, r8
3401572e:	2801      	cmp	r0, #1
34015730:	d9dd      	bls.n	340156ee <RCC_PLL_Config+0x196>
34015732:	e7ad      	b.n	34015690 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34015734:	2b01      	cmp	r3, #1
34015736:	d1a3      	bne.n	34015680 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34015738:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
3401573c:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3401573e:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34015740:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34015744:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34015746:	4b0e      	ldr	r3, [pc, #56]	@ (34015780 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34015748:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 3401578c <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3401574c:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
3401574e:	f009 f9d7 	bl	3401eb00 <HAL_GetTick>
34015752:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34015754:	f8d8 3004 	ldr.w	r3, [r8, #4]
34015758:	ea35 0303 	bics.w	r3, r5, r3
3401575c:	d003      	beq.n	34015766 <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3401575e:	59e3      	ldr	r3, [r4, r7]
34015760:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34015764:	e7cf      	b.n	34015706 <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34015766:	f009 f9cb 	bl	3401eb00 <HAL_GetTick>
3401576a:	1b80      	subs	r0, r0, r6
3401576c:	2801      	cmp	r0, #1
3401576e:	d9f1      	bls.n	34015754 <RCC_PLL_Config+0x1fc>
34015770:	e78e      	b.n	34015690 <RCC_PLL_Config+0x138>
34015772:	bf00      	nop
34015774:	56028080 	.word	0x56028080
34015778:	56028088 	.word	0x56028088
3401577c:	3402bd24 	.word	0x3402bd24
34015780:	56029000 	.word	0x56029000
34015784:	56028084 	.word	0x56028084
34015788:	8c0000ff 	.word	0x8c0000ff
3401578c:	56028000 	.word	0x56028000

34015790 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34015790:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34015794:	b508      	push	{r3, lr}
  switch (PLLSource1)
34015796:	d021      	beq.n	340157dc <RCC_IC_CheckPLLSources+0x4c>
34015798:	d805      	bhi.n	340157a6 <RCC_IC_CheckPLLSources+0x16>
3401579a:	b9c0      	cbnz	r0, 340157ce <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
3401579c:	f7ff fe7a 	bl	34015494 <LL_RCC_PLL1_IsReady>
340157a0:	b178      	cbz	r0, 340157c2 <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
340157a2:	2201      	movs	r2, #1
340157a4:	e003      	b.n	340157ae <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
340157a6:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
340157aa:	d01e      	beq.n	340157ea <RCC_IC_CheckPLLSources+0x5a>
340157ac:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
340157ae:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
340157b2:	d03c      	beq.n	3401582e <RCC_IC_CheckPLLSources+0x9e>
340157b4:	d820      	bhi.n	340157f8 <RCC_IC_CheckPLLSources+0x68>
340157b6:	b349      	cbz	r1, 3401580c <RCC_IC_CheckPLLSources+0x7c>
340157b8:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
340157bc:	d030      	beq.n	34015820 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
340157be:	2200      	movs	r2, #0
340157c0:	e02c      	b.n	3401581c <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340157c2:	4b1e      	ldr	r3, [pc, #120]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
340157c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340157c8:	f3c2 62c0 	ubfx	r2, r2, #27, #1
340157cc:	e7ef      	b.n	340157ae <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340157ce:	4b1b      	ldr	r3, [pc, #108]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
340157d0:	685a      	ldr	r2, [r3, #4]
340157d2:	0592      	lsls	r2, r2, #22
340157d4:	d4e5      	bmi.n	340157a2 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
340157d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
340157da:	e7f5      	b.n	340157c8 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
340157dc:	4b17      	ldr	r3, [pc, #92]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
340157de:	685a      	ldr	r2, [r3, #4]
340157e0:	0550      	lsls	r0, r2, #21
340157e2:	d4de      	bmi.n	340157a2 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
340157e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340157e8:	e7ee      	b.n	340157c8 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340157ea:	4b14      	ldr	r3, [pc, #80]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
340157ec:	685a      	ldr	r2, [r3, #4]
340157ee:	0512      	lsls	r2, r2, #20
340157f0:	d4d7      	bmi.n	340157a2 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
340157f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
340157f6:	e7e7      	b.n	340157c8 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
340157f8:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
340157fc:	d1df      	bne.n	340157be <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340157fe:	4b0f      	ldr	r3, [pc, #60]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
34015800:	6859      	ldr	r1, [r3, #4]
34015802:	0509      	lsls	r1, r1, #20
34015804:	d40a      	bmi.n	3401581c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34015806:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3401580a:	e005      	b.n	34015818 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
3401580c:	f7ff fe42 	bl	34015494 <LL_RCC_PLL1_IsReady>
34015810:	b920      	cbnz	r0, 3401581c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34015812:	4b0a      	ldr	r3, [pc, #40]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
34015814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34015818:	0118      	lsls	r0, r3, #4
3401581a:	d5d0      	bpl.n	340157be <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
3401581c:	4610      	mov	r0, r2
3401581e:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34015820:	4b06      	ldr	r3, [pc, #24]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
34015822:	6859      	ldr	r1, [r3, #4]
34015824:	0589      	lsls	r1, r1, #22
34015826:	d4f9      	bmi.n	3401581c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34015828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3401582c:	e7f4      	b.n	34015818 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3401582e:	4b03      	ldr	r3, [pc, #12]	@ (3401583c <RCC_IC_CheckPLLSources+0xac>)
34015830:	6859      	ldr	r1, [r3, #4]
34015832:	0548      	lsls	r0, r1, #21
34015834:	d4f2      	bmi.n	3401581c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34015836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3401583a:	e7ed      	b.n	34015818 <RCC_IC_CheckPLLSources+0x88>
3401583c:	56028000 	.word	0x56028000

34015840 <HAL_RCC_OscConfig>:
{
34015840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
34015844:	4604      	mov	r4, r0
34015846:	b918      	cbnz	r0, 34015850 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
34015848:	2001      	movs	r0, #1
}
3401584a:	b003      	add	sp, #12
3401584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
34015850:	6803      	ldr	r3, [r0, #0]
34015852:	b133      	cbz	r3, 34015862 <HAL_RCC_OscConfig+0x22>
34015854:	06dd      	lsls	r5, r3, #27
34015856:	d104      	bne.n	34015862 <HAL_RCC_OscConfig+0x22>
34015858:	f44f 71b9 	mov.w	r1, #370	@ 0x172
3401585c:	4893      	ldr	r0, [pc, #588]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
3401585e:	f009 fc7f 	bl	3401f160 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34015862:	4b93      	ldr	r3, [pc, #588]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
34015864:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34015866:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34015868:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3401586c:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34015870:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34015874:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34015878:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
3401587c:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34015880:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34015884:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34015888:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
3401588c:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3401588e:	6823      	ldr	r3, [r4, #0]
34015890:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
34015894:	07d8      	lsls	r0, r3, #31
34015896:	d463      	bmi.n	34015960 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
34015898:	6823      	ldr	r3, [r4, #0]
3401589a:	0799      	lsls	r1, r3, #30
3401589c:	f100 80d4 	bmi.w	34015a48 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
340158a0:	6823      	ldr	r3, [r4, #0]
340158a2:	06d8      	lsls	r0, r3, #27
340158a4:	d522      	bpl.n	340158ec <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
340158a6:	69e3      	ldr	r3, [r4, #28]
340158a8:	2b00      	cmp	r3, #0
340158aa:	f000 8347 	beq.w	34015f3c <HAL_RCC_OscConfig+0x6fc>
340158ae:	2b04      	cmp	r3, #4
340158b0:	f000 834d 	beq.w	34015f4e <HAL_RCC_OscConfig+0x70e>
340158b4:	f240 2105 	movw	r1, #517	@ 0x205
340158b8:	487c      	ldr	r0, [pc, #496]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
340158ba:	f009 fc51 	bl	3401f160 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
340158be:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
340158c2:	f040 8148 	bne.w	34015b56 <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
340158c6:	69e3      	ldr	r3, [r4, #28]
340158c8:	2b00      	cmp	r3, #0
340158ca:	d0bd      	beq.n	34015848 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
340158cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340158ce:	2b1f      	cmp	r3, #31
340158d0:	d904      	bls.n	340158dc <HAL_RCC_OscConfig+0x9c>
340158d2:	f44f 7106 	mov.w	r1, #536	@ 0x218
340158d6:	4875      	ldr	r0, [pc, #468]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
340158d8:	f009 fc42 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
340158dc:	4a74      	ldr	r2, [pc, #464]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
340158de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340158e0:	6c53      	ldr	r3, [r2, #68]	@ 0x44
340158e2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
340158e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340158ea:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
340158ec:	6823      	ldr	r3, [r4, #0]
340158ee:	0718      	lsls	r0, r3, #28
340158f0:	f100 8189 	bmi.w	34015c06 <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
340158f4:	6823      	ldr	r3, [r4, #0]
340158f6:	0759      	lsls	r1, r3, #29
340158f8:	f100 81b4 	bmi.w	34015c64 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
340158fc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340158fe:	2b03      	cmp	r3, #3
34015900:	d904      	bls.n	3401590c <HAL_RCC_OscConfig+0xcc>
34015902:	f240 21a5 	movw	r1, #677	@ 0x2a5
34015906:	4869      	ldr	r0, [pc, #420]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015908:	f009 fc2a 	bl	3401f160 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
3401590c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3401590e:	2f00      	cmp	r7, #0
34015910:	f040 8210 	bne.w	34015d34 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34015914:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34015916:	2b03      	cmp	r3, #3
34015918:	d904      	bls.n	34015924 <HAL_RCC_OscConfig+0xe4>
3401591a:	f240 21d3 	movw	r1, #723	@ 0x2d3
3401591e:	4863      	ldr	r0, [pc, #396]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015920:	f009 fc1e 	bl	3401f160 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34015924:	6c67      	ldr	r7, [r4, #68]	@ 0x44
34015926:	2f00      	cmp	r7, #0
34015928:	f040 8246 	bne.w	34015db8 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
3401592c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3401592e:	2b03      	cmp	r3, #3
34015930:	d904      	bls.n	3401593c <HAL_RCC_OscConfig+0xfc>
34015932:	f240 3101 	movw	r1, #769	@ 0x301
34015936:	485d      	ldr	r0, [pc, #372]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015938:	f009 fc12 	bl	3401f160 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3401593c:	6e27      	ldr	r7, [r4, #96]	@ 0x60
3401593e:	2f00      	cmp	r7, #0
34015940:	f040 827a 	bne.w	34015e38 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
34015944:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34015946:	2b03      	cmp	r3, #3
34015948:	d904      	bls.n	34015954 <HAL_RCC_OscConfig+0x114>
3401594a:	f240 312e 	movw	r1, #814	@ 0x32e
3401594e:	4857      	ldr	r0, [pc, #348]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015950:	f009 fc06 	bl	3401f160 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34015954:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
34015956:	2f00      	cmp	r7, #0
34015958:	f040 82b0 	bne.w	34015ebc <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
3401595c:	2000      	movs	r0, #0
3401595e:	e774      	b.n	3401584a <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
34015960:	6863      	ldr	r3, [r4, #4]
34015962:	2b00      	cmp	r3, #0
34015964:	f000 8313 	beq.w	34015f8e <HAL_RCC_OscConfig+0x74e>
34015968:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
3401596c:	2a10      	cmp	r2, #16
3401596e:	f000 8305 	beq.w	34015f7c <HAL_RCC_OscConfig+0x73c>
34015972:	4a50      	ldr	r2, [pc, #320]	@ (34015ab4 <HAL_RCC_OscConfig+0x274>)
34015974:	4293      	cmp	r3, r2
34015976:	f000 8301 	beq.w	34015f7c <HAL_RCC_OscConfig+0x73c>
3401597a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
3401597e:	484b      	ldr	r0, [pc, #300]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015980:	f009 fbee 	bl	3401f160 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34015984:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34015988:	d103      	bne.n	34015992 <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
3401598a:	6863      	ldr	r3, [r4, #4]
3401598c:	2b00      	cmp	r3, #0
3401598e:	d183      	bne.n	34015898 <HAL_RCC_OscConfig+0x58>
34015990:	e75a      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34015992:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34015996:	d0f8      	beq.n	3401598a <HAL_RCC_OscConfig+0x14a>
34015998:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
3401599c:	d101      	bne.n	340159a2 <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
3401599e:	05fa      	lsls	r2, r7, #23
340159a0:	d4f3      	bmi.n	3401598a <HAL_RCC_OscConfig+0x14a>
340159a2:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
340159a6:	d101      	bne.n	340159ac <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
340159a8:	05bb      	lsls	r3, r7, #22
340159aa:	d4ee      	bmi.n	3401598a <HAL_RCC_OscConfig+0x14a>
340159ac:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
340159b0:	d101      	bne.n	340159b6 <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
340159b2:	0578      	lsls	r0, r7, #21
340159b4:	d4e9      	bmi.n	3401598a <HAL_RCC_OscConfig+0x14a>
340159b6:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
340159ba:	d101      	bne.n	340159c0 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
340159bc:	0539      	lsls	r1, r7, #20
340159be:	d4e4      	bmi.n	3401598a <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340159c0:	6862      	ldr	r2, [r4, #4]
340159c2:	4b3b      	ldr	r3, [pc, #236]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
340159c4:	2a10      	cmp	r2, #16
340159c6:	d114      	bne.n	340159f2 <HAL_RCC_OscConfig+0x1b2>
340159c8:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
340159cc:	f009 f898 	bl	3401eb00 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
340159d0:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
340159d2:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
340159d4:	b35b      	cbz	r3, 34015a2e <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
340159d6:	4b36      	ldr	r3, [pc, #216]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
340159d8:	685a      	ldr	r2, [r3, #4]
340159da:	06d2      	lsls	r2, r2, #27
340159dc:	f53f af5c 	bmi.w	34015898 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
340159e0:	f009 f88e 	bl	3401eb00 <HAL_GetTick>
340159e4:	9b01      	ldr	r3, [sp, #4]
340159e6:	1ac0      	subs	r0, r0, r3
340159e8:	2864      	cmp	r0, #100	@ 0x64
340159ea:	4b31      	ldr	r3, [pc, #196]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
340159ec:	d9f4      	bls.n	340159d8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
340159ee:	2003      	movs	r0, #3
340159f0:	e72b      	b.n	3401584a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
340159f2:	b93a      	cbnz	r2, 34015a04 <HAL_RCC_OscConfig+0x1c4>
340159f4:	2110      	movs	r1, #16
340159f6:	4a30      	ldr	r2, [pc, #192]	@ (34015ab8 <HAL_RCC_OscConfig+0x278>)
340159f8:	6011      	str	r1, [r2, #0]
340159fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
340159fc:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34015a00:	655a      	str	r2, [r3, #84]	@ 0x54
34015a02:	e7e3      	b.n	340159cc <HAL_RCC_OscConfig+0x18c>
34015a04:	f248 0110 	movw	r1, #32784	@ 0x8010
34015a08:	428a      	cmp	r2, r1
34015a0a:	d109      	bne.n	34015a20 <HAL_RCC_OscConfig+0x1e0>
34015a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34015a0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34015a12:	655a      	str	r2, [r3, #84]	@ 0x54
34015a14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34015a16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
34015a1a:	655a      	str	r2, [r3, #84]	@ 0x54
34015a1c:	2210      	movs	r2, #16
34015a1e:	e7d3      	b.n	340159c8 <HAL_RCC_OscConfig+0x188>
34015a20:	4924      	ldr	r1, [pc, #144]	@ (34015ab4 <HAL_RCC_OscConfig+0x274>)
34015a22:	428a      	cmp	r2, r1
34015a24:	d1e6      	bne.n	340159f4 <HAL_RCC_OscConfig+0x1b4>
34015a26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34015a28:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
34015a2c:	e7f5      	b.n	34015a1a <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
34015a2e:	4b20      	ldr	r3, [pc, #128]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
34015a30:	685a      	ldr	r2, [r3, #4]
34015a32:	06d3      	lsls	r3, r2, #27
34015a34:	f57f af30 	bpl.w	34015898 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34015a38:	f009 f862 	bl	3401eb00 <HAL_GetTick>
34015a3c:	9b01      	ldr	r3, [sp, #4]
34015a3e:	1ac0      	subs	r0, r0, r3
34015a40:	2864      	cmp	r0, #100	@ 0x64
34015a42:	4b1b      	ldr	r3, [pc, #108]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
34015a44:	d9f4      	bls.n	34015a30 <HAL_RCC_OscConfig+0x1f0>
34015a46:	e7d2      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
34015a48:	68e3      	ldr	r3, [r4, #12]
34015a4a:	2b00      	cmp	r3, #0
34015a4c:	f000 8288 	beq.w	34015f60 <HAL_RCC_OscConfig+0x720>
34015a50:	2b08      	cmp	r3, #8
34015a52:	f000 828c 	beq.w	34015f6e <HAL_RCC_OscConfig+0x72e>
34015a56:	f240 11b5 	movw	r1, #437	@ 0x1b5
34015a5a:	4814      	ldr	r0, [pc, #80]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015a5c:	f009 fb80 	bl	3401f160 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34015a60:	bb66      	cbnz	r6, 34015abc <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34015a62:	68e3      	ldr	r3, [r4, #12]
34015a64:	2b00      	cmp	r3, #0
34015a66:	f43f aeef 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34015a6a:	6923      	ldr	r3, [r4, #16]
34015a6c:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34015a70:	d004      	beq.n	34015a7c <HAL_RCC_OscConfig+0x23c>
34015a72:	f240 11c7 	movw	r1, #455	@ 0x1c7
34015a76:	480d      	ldr	r0, [pc, #52]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015a78:	f009 fb72 	bl	3401f160 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34015a7c:	6963      	ldr	r3, [r4, #20]
34015a7e:	2b7f      	cmp	r3, #127	@ 0x7f
34015a80:	d904      	bls.n	34015a8c <HAL_RCC_OscConfig+0x24c>
34015a82:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
34015a86:	4809      	ldr	r0, [pc, #36]	@ (34015aac <HAL_RCC_OscConfig+0x26c>)
34015a88:	f009 fb6a 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34015a8c:	4a08      	ldr	r2, [pc, #32]	@ (34015ab0 <HAL_RCC_OscConfig+0x270>)
34015a8e:	6921      	ldr	r1, [r4, #16]
34015a90:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34015a92:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
34015a96:	430b      	orrs	r3, r1
34015a98:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34015a9a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34015a9c:	6961      	ldr	r1, [r4, #20]
34015a9e:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
34015aa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34015aa6:	6493      	str	r3, [r2, #72]	@ 0x48
}
34015aa8:	e6fa      	b.n	340158a0 <HAL_RCC_OscConfig+0x60>
34015aaa:	bf00      	nop
34015aac:	3402bd24 	.word	0x3402bd24
34015ab0:	56028000 	.word	0x56028000
34015ab4:	00018010 	.word	0x00018010
34015ab8:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34015abc:	2d00      	cmp	r5, #0
34015abe:	d0d0      	beq.n	34015a62 <HAL_RCC_OscConfig+0x222>
34015ac0:	f1bb 0f00 	cmp.w	fp, #0
34015ac4:	d101      	bne.n	34015aca <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34015ac6:	05f8      	lsls	r0, r7, #23
34015ac8:	d4cb      	bmi.n	34015a62 <HAL_RCC_OscConfig+0x222>
34015aca:	f1ba 0f00 	cmp.w	sl, #0
34015ace:	d101      	bne.n	34015ad4 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34015ad0:	05b9      	lsls	r1, r7, #22
34015ad2:	d4c6      	bmi.n	34015a62 <HAL_RCC_OscConfig+0x222>
34015ad4:	f1b9 0f00 	cmp.w	r9, #0
34015ad8:	d101      	bne.n	34015ade <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34015ada:	057a      	lsls	r2, r7, #21
34015adc:	d4c1      	bmi.n	34015a62 <HAL_RCC_OscConfig+0x222>
34015ade:	f1b8 0f00 	cmp.w	r8, #0
34015ae2:	d101      	bne.n	34015ae8 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34015ae4:	053b      	lsls	r3, r7, #20
34015ae6:	d4bc      	bmi.n	34015a62 <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34015ae8:	68e3      	ldr	r3, [r4, #12]
34015aea:	b313      	cbz	r3, 34015b32 <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
34015aec:	6923      	ldr	r3, [r4, #16]
34015aee:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34015af2:	d004      	beq.n	34015afe <HAL_RCC_OscConfig+0x2be>
34015af4:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34015af8:	48ab      	ldr	r0, [pc, #684]	@ (34015da8 <HAL_RCC_OscConfig+0x568>)
34015afa:	f009 fb31 	bl	3401f160 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
34015afe:	6963      	ldr	r3, [r4, #20]
34015b00:	2b7f      	cmp	r3, #127	@ 0x7f
34015b02:	d904      	bls.n	34015b0e <HAL_RCC_OscConfig+0x2ce>
34015b04:	f240 11d7 	movw	r1, #471	@ 0x1d7
34015b08:	48a7      	ldr	r0, [pc, #668]	@ (34015da8 <HAL_RCC_OscConfig+0x568>)
34015b0a:	f009 fb29 	bl	3401f160 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34015b0e:	2208      	movs	r2, #8
34015b10:	4ba6      	ldr	r3, [pc, #664]	@ (34015dac <HAL_RCC_OscConfig+0x56c>)
34015b12:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34015b16:	f008 fff3 	bl	3401eb00 <HAL_GetTick>
34015b1a:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
34015b1c:	f7ff fcaa 	bl	34015474 <LL_RCC_HSI_IsReady>
34015b20:	2800      	cmp	r0, #0
34015b22:	d1b3      	bne.n	34015a8c <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34015b24:	f008 ffec 	bl	3401eb00 <HAL_GetTick>
34015b28:	9b01      	ldr	r3, [sp, #4]
34015b2a:	1ac0      	subs	r0, r0, r3
34015b2c:	2801      	cmp	r0, #1
34015b2e:	d9f5      	bls.n	34015b1c <HAL_RCC_OscConfig+0x2dc>
34015b30:	e75d      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34015b32:	2208      	movs	r2, #8
34015b34:	4b9e      	ldr	r3, [pc, #632]	@ (34015db0 <HAL_RCC_OscConfig+0x570>)
34015b36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34015b38:	f008 ffe2 	bl	3401eb00 <HAL_GetTick>
34015b3c:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
34015b3e:	f7ff fc99 	bl	34015474 <LL_RCC_HSI_IsReady>
34015b42:	2800      	cmp	r0, #0
34015b44:	f43f aeac 	beq.w	340158a0 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34015b48:	f008 ffda 	bl	3401eb00 <HAL_GetTick>
34015b4c:	9b01      	ldr	r3, [sp, #4]
34015b4e:	1ac0      	subs	r0, r0, r3
34015b50:	2801      	cmp	r0, #1
34015b52:	d9f4      	bls.n	34015b3e <HAL_RCC_OscConfig+0x2fe>
34015b54:	e74b      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34015b56:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34015b5a:	f43f aeb4 	beq.w	340158c6 <HAL_RCC_OscConfig+0x86>
34015b5e:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
34015b62:	d102      	bne.n	34015b6a <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34015b64:	05f9      	lsls	r1, r7, #23
34015b66:	f53f aeae 	bmi.w	340158c6 <HAL_RCC_OscConfig+0x86>
34015b6a:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
34015b6e:	d102      	bne.n	34015b76 <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34015b70:	05ba      	lsls	r2, r7, #22
34015b72:	f53f aea8 	bmi.w	340158c6 <HAL_RCC_OscConfig+0x86>
34015b76:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
34015b7a:	d102      	bne.n	34015b82 <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34015b7c:	057b      	lsls	r3, r7, #21
34015b7e:	f53f aea2 	bmi.w	340158c6 <HAL_RCC_OscConfig+0x86>
34015b82:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
34015b86:	d102      	bne.n	34015b8e <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34015b88:	053f      	lsls	r7, r7, #20
34015b8a:	f53f ae9c 	bmi.w	340158c6 <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
34015b8e:	69e3      	ldr	r3, [r4, #28]
34015b90:	b343      	cbz	r3, 34015be4 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
34015b92:	6a23      	ldr	r3, [r4, #32]
34015b94:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
34015b98:	d004      	beq.n	34015ba4 <HAL_RCC_OscConfig+0x364>
34015b9a:	f44f 7109 	mov.w	r1, #548	@ 0x224
34015b9e:	4882      	ldr	r0, [pc, #520]	@ (34015da8 <HAL_RCC_OscConfig+0x568>)
34015ba0:	f009 fade 	bl	3401f160 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34015ba4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34015ba6:	2b1f      	cmp	r3, #31
34015ba8:	d904      	bls.n	34015bb4 <HAL_RCC_OscConfig+0x374>
34015baa:	f240 2125 	movw	r1, #549	@ 0x225
34015bae:	487e      	ldr	r0, [pc, #504]	@ (34015da8 <HAL_RCC_OscConfig+0x568>)
34015bb0:	f009 fad6 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34015bb4:	4a7d      	ldr	r2, [pc, #500]	@ (34015dac <HAL_RCC_OscConfig+0x56c>)
34015bb6:	6a21      	ldr	r1, [r4, #32]
34015bb8:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34015bba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
34015bbe:	430b      	orrs	r3, r1
34015bc0:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34015bc2:	2304      	movs	r3, #4
34015bc4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34015bc8:	f008 ff9a 	bl	3401eb00 <HAL_GetTick>
34015bcc:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
34015bce:	f7ff fc59 	bl	34015484 <LL_RCC_MSI_IsReady>
34015bd2:	2800      	cmp	r0, #0
34015bd4:	f47f ae82 	bne.w	340158dc <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34015bd8:	f008 ff92 	bl	3401eb00 <HAL_GetTick>
34015bdc:	1bc0      	subs	r0, r0, r7
34015bde:	2801      	cmp	r0, #1
34015be0:	d9f5      	bls.n	34015bce <HAL_RCC_OscConfig+0x38e>
34015be2:	e704      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34015be4:	2204      	movs	r2, #4
34015be6:	4b72      	ldr	r3, [pc, #456]	@ (34015db0 <HAL_RCC_OscConfig+0x570>)
34015be8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34015bea:	f008 ff89 	bl	3401eb00 <HAL_GetTick>
34015bee:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34015bf0:	f7ff fc48 	bl	34015484 <LL_RCC_MSI_IsReady>
34015bf4:	2800      	cmp	r0, #0
34015bf6:	f43f ae79 	beq.w	340158ec <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34015bfa:	f008 ff81 	bl	3401eb00 <HAL_GetTick>
34015bfe:	1bc0      	subs	r0, r0, r7
34015c00:	2801      	cmp	r0, #1
34015c02:	d9f5      	bls.n	34015bf0 <HAL_RCC_OscConfig+0x3b0>
34015c04:	e6f3      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34015c06:	69a3      	ldr	r3, [r4, #24]
34015c08:	2b01      	cmp	r3, #1
34015c0a:	d904      	bls.n	34015c16 <HAL_RCC_OscConfig+0x3d6>
34015c0c:	f240 2155 	movw	r1, #597	@ 0x255
34015c10:	4865      	ldr	r0, [pc, #404]	@ (34015da8 <HAL_RCC_OscConfig+0x568>)
34015c12:	f009 faa5 	bl	3401f160 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34015c16:	69a2      	ldr	r2, [r4, #24]
34015c18:	2301      	movs	r3, #1
34015c1a:	b18a      	cbz	r2, 34015c40 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34015c1c:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 34015dac <HAL_RCC_OscConfig+0x56c>
34015c20:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34015c24:	f008 ff6c 	bl	3401eb00 <HAL_GetTick>
34015c28:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34015c2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
34015c2e:	07da      	lsls	r2, r3, #31
34015c30:	f53f ae60 	bmi.w	340158f4 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34015c34:	f008 ff64 	bl	3401eb00 <HAL_GetTick>
34015c38:	1bc0      	subs	r0, r0, r7
34015c3a:	2801      	cmp	r0, #1
34015c3c:	d9f5      	bls.n	34015c2a <HAL_RCC_OscConfig+0x3ea>
34015c3e:	e6d6      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34015c40:	4a5b      	ldr	r2, [pc, #364]	@ (34015db0 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34015c42:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 34015dac <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34015c46:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
34015c48:	f008 ff5a 	bl	3401eb00 <HAL_GetTick>
34015c4c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34015c4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
34015c52:	07db      	lsls	r3, r3, #31
34015c54:	f57f ae4e 	bpl.w	340158f4 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34015c58:	f008 ff52 	bl	3401eb00 <HAL_GetTick>
34015c5c:	1bc0      	subs	r0, r0, r7
34015c5e:	2801      	cmp	r0, #1
34015c60:	d9f5      	bls.n	34015c4e <HAL_RCC_OscConfig+0x40e>
34015c62:	e6c4      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
34015c64:	68a3      	ldr	r3, [r4, #8]
34015c66:	f033 0202 	bics.w	r2, r3, #2
34015c6a:	d00a      	beq.n	34015c82 <HAL_RCC_OscConfig+0x442>
34015c6c:	f248 0202 	movw	r2, #32770	@ 0x8002
34015c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015c74:	4293      	cmp	r3, r2
34015c76:	d004      	beq.n	34015c82 <HAL_RCC_OscConfig+0x442>
34015c78:	f44f 7120 	mov.w	r1, #640	@ 0x280
34015c7c:	484a      	ldr	r0, [pc, #296]	@ (34015da8 <HAL_RCC_OscConfig+0x568>)
34015c7e:	f009 fa6f 	bl	3401f160 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34015c82:	68a3      	ldr	r3, [r4, #8]
34015c84:	4f49      	ldr	r7, [pc, #292]	@ (34015dac <HAL_RCC_OscConfig+0x56c>)
34015c86:	2b02      	cmp	r3, #2
34015c88:	d113      	bne.n	34015cb2 <HAL_RCC_OscConfig+0x472>
34015c8a:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34015c8e:	f008 ff37 	bl	3401eb00 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34015c92:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
34015c96:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34015c98:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 34015dac <HAL_RCC_OscConfig+0x56c>
34015c9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
34015ca0:	0798      	lsls	r0, r3, #30
34015ca2:	f53f ae2b 	bmi.w	340158fc <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34015ca6:	f008 ff2b 	bl	3401eb00 <HAL_GetTick>
34015caa:	1bc3      	subs	r3, r0, r7
34015cac:	4543      	cmp	r3, r8
34015cae:	d9f5      	bls.n	34015c9c <HAL_RCC_OscConfig+0x45c>
34015cb0:	e69d      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34015cb2:	b9d3      	cbnz	r3, 34015cea <HAL_RCC_OscConfig+0x4aa>
34015cb4:	2202      	movs	r2, #2
34015cb6:	4b3e      	ldr	r3, [pc, #248]	@ (34015db0 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34015cb8:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34015cbc:	601a      	str	r2, [r3, #0]
34015cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015cc4:	643b      	str	r3, [r7, #64]	@ 0x40
34015cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015cc8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34015ccc:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
34015cce:	f008 ff17 	bl	3401eb00 <HAL_GetTick>
34015cd2:	4680      	mov	r8, r0
34015cd4:	687b      	ldr	r3, [r7, #4]
34015cd6:	0799      	lsls	r1, r3, #30
34015cd8:	f57f ae10 	bpl.w	340158fc <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34015cdc:	f008 ff10 	bl	3401eb00 <HAL_GetTick>
34015ce0:	eba0 0308 	sub.w	r3, r0, r8
34015ce4:	454b      	cmp	r3, r9
34015ce6:	d9f5      	bls.n	34015cd4 <HAL_RCC_OscConfig+0x494>
34015ce8:	e681      	b.n	340159ee <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34015cea:	f248 0202 	movw	r2, #32770	@ 0x8002
34015cee:	4293      	cmp	r3, r2
34015cf0:	d109      	bne.n	34015d06 <HAL_RCC_OscConfig+0x4c6>
34015cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34015cf8:	643b      	str	r3, [r7, #64]	@ 0x40
34015cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015d00:	643b      	str	r3, [r7, #64]	@ 0x40
34015d02:	2302      	movs	r3, #2
34015d04:	e7c1      	b.n	34015c8a <HAL_RCC_OscConfig+0x44a>
34015d06:	4a2b      	ldr	r2, [pc, #172]	@ (34015db4 <HAL_RCC_OscConfig+0x574>)
34015d08:	4293      	cmp	r3, r2
34015d0a:	d107      	bne.n	34015d1c <HAL_RCC_OscConfig+0x4dc>
34015d0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34015d12:	643b      	str	r3, [r7, #64]	@ 0x40
34015d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
34015d1a:	e7f1      	b.n	34015d00 <HAL_RCC_OscConfig+0x4c0>
34015d1c:	2202      	movs	r2, #2
34015d1e:	4b24      	ldr	r3, [pc, #144]	@ (34015db0 <HAL_RCC_OscConfig+0x570>)
34015d20:	601a      	str	r2, [r3, #0]
34015d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015d24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34015d28:	643b      	str	r3, [r7, #64]	@ 0x40
34015d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34015d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34015d30:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34015d32:	e7ac      	b.n	34015c8e <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34015d34:	2000      	movs	r0, #0
34015d36:	f104 0128 	add.w	r1, r4, #40	@ 0x28
34015d3a:	f7ff fbb3 	bl	340154a4 <RCC_PLL_IsNewConfig>
34015d3e:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
34015d40:	f7ff fba8 	bl	34015494 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34015d44:	2a01      	cmp	r2, #1
34015d46:	d125      	bne.n	34015d94 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015d48:	4b18      	ldr	r3, [pc, #96]	@ (34015dac <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34015d4a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34015d4e:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015d52:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015d56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015d5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34015d5e:	d103      	bne.n	34015d68 <HAL_RCC_OscConfig+0x528>
34015d60:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
34015d64:	f43f ad70 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34015d68:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34015d6c:	d10b      	bne.n	34015d86 <HAL_RCC_OscConfig+0x546>
34015d6e:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
34015d72:	f43f ad69 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
34015d76:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
34015d7a:	f43f ad65 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
34015d7e:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
34015d82:	f43f ad61 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
34015d86:	2000      	movs	r0, #0
34015d88:	f7ff fbe6 	bl	34015558 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34015d8c:	2800      	cmp	r0, #0
34015d8e:	f43f adc1 	beq.w	34015914 <HAL_RCC_OscConfig+0xd4>
34015d92:	e559      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
34015d94:	2f02      	cmp	r7, #2
34015d96:	f47f adbd 	bne.w	34015914 <HAL_RCC_OscConfig+0xd4>
34015d9a:	2800      	cmp	r0, #0
34015d9c:	f47f adba 	bne.w	34015914 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34015da0:	f7ff fbc2 	bl	34015528 <RCC_PLL_Enable>
34015da4:	e7f2      	b.n	34015d8c <HAL_RCC_OscConfig+0x54c>
34015da6:	bf00      	nop
34015da8:	3402bd24 	.word	0x3402bd24
34015dac:	56028000 	.word	0x56028000
34015db0:	56029000 	.word	0x56029000
34015db4:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34015db8:	2001      	movs	r0, #1
34015dba:	f104 0144 	add.w	r1, r4, #68	@ 0x44
34015dbe:	f7ff fb71 	bl	340154a4 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34015dc2:	4b77      	ldr	r3, [pc, #476]	@ (34015fa0 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34015dc4:	2801      	cmp	r0, #1
34015dc6:	685a      	ldr	r2, [r3, #4]
34015dc8:	d12c      	bne.n	34015e24 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34015dca:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015dce:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015dd2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015dd6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015dda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34015dde:	d105      	bne.n	34015dec <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015de0:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34015de4:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34015de8:	f43f ad2e 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34015dec:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34015df0:	d111      	bne.n	34015e16 <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015df2:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34015df6:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
34015dfa:	f43f ad25 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015dfe:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34015e02:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34015e06:	f43f ad1f 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015e0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34015e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34015e12:	f43f ad19 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34015e16:	2001      	movs	r0, #1
34015e18:	f7ff fb9e 	bl	34015558 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34015e1c:	2800      	cmp	r0, #0
34015e1e:	f43f ad85 	beq.w	3401592c <HAL_RCC_OscConfig+0xec>
34015e22:	e511      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34015e24:	2f02      	cmp	r7, #2
34015e26:	f47f ad81 	bne.w	3401592c <HAL_RCC_OscConfig+0xec>
34015e2a:	0592      	lsls	r2, r2, #22
34015e2c:	f53f ad7e 	bmi.w	3401592c <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34015e30:	2001      	movs	r0, #1
34015e32:	f7ff fb79 	bl	34015528 <RCC_PLL_Enable>
34015e36:	e7f1      	b.n	34015e1c <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34015e38:	2002      	movs	r0, #2
34015e3a:	f104 0160 	add.w	r1, r4, #96	@ 0x60
34015e3e:	f7ff fb31 	bl	340154a4 <RCC_PLL_IsNewConfig>
34015e42:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34015e44:	f7ff fb26 	bl	34015494 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
34015e48:	2a01      	cmp	r2, #1
34015e4a:	d12d      	bne.n	34015ea8 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015e4c:	4b54      	ldr	r3, [pc, #336]	@ (34015fa0 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34015e4e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
34015e52:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015e56:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015e5a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015e5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34015e62:	d105      	bne.n	34015e70 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015e64:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34015e68:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
34015e6c:	f43f acec 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34015e70:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34015e74:	d111      	bne.n	34015e9a <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015e76:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34015e7a:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
34015e7e:	f43f ace3 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015e82:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34015e86:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34015e8a:	f43f acdd 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015e8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34015e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34015e96:	f43f acd7 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34015e9a:	2002      	movs	r0, #2
34015e9c:	f7ff fb5c 	bl	34015558 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34015ea0:	2800      	cmp	r0, #0
34015ea2:	f43f ad4f 	beq.w	34015944 <HAL_RCC_OscConfig+0x104>
34015ea6:	e4cf      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34015ea8:	2f02      	cmp	r7, #2
34015eaa:	f47f ad4b 	bne.w	34015944 <HAL_RCC_OscConfig+0x104>
34015eae:	2800      	cmp	r0, #0
34015eb0:	f47f ad48 	bne.w	34015944 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34015eb4:	4638      	mov	r0, r7
34015eb6:	f7ff fb37 	bl	34015528 <RCC_PLL_Enable>
34015eba:	e7f1      	b.n	34015ea0 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34015ebc:	2003      	movs	r0, #3
34015ebe:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34015ec2:	f7ff faef 	bl	340154a4 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34015ec6:	4b36      	ldr	r3, [pc, #216]	@ (34015fa0 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34015ec8:	2801      	cmp	r0, #1
34015eca:	685a      	ldr	r2, [r3, #4]
34015ecc:	d12c      	bne.n	34015f28 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34015ece:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015ed2:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015ed6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015eda:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015ede:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34015ee2:	d105      	bne.n	34015ef0 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015ee4:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34015ee8:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
34015eec:	f43f acac 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34015ef0:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34015ef4:	d111      	bne.n	34015f1a <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34015ef6:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34015efa:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34015efe:	f43f aca3 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34015f02:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34015f06:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34015f0a:	f43f ac9d 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34015f0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34015f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34015f16:	f43f ac97 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34015f1a:	2003      	movs	r0, #3
34015f1c:	f7ff fb1c 	bl	34015558 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34015f20:	3800      	subs	r0, #0
34015f22:	bf18      	it	ne
34015f24:	2001      	movne	r0, #1
34015f26:	e490      	b.n	3401584a <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34015f28:	2f02      	cmp	r7, #2
34015f2a:	f47f ad17 	bne.w	3401595c <HAL_RCC_OscConfig+0x11c>
34015f2e:	0513      	lsls	r3, r2, #20
34015f30:	f53f ad14 	bmi.w	3401595c <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34015f34:	2003      	movs	r0, #3
34015f36:	f7ff faf7 	bl	34015528 <RCC_PLL_Enable>
34015f3a:	e7f1      	b.n	34015f20 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
34015f3c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34015f40:	f43f ac82 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
34015f44:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34015f48:	f47f ae09 	bne.w	34015b5e <HAL_RCC_OscConfig+0x31e>
34015f4c:	e47c      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
34015f4e:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34015f52:	f43f acbb 	beq.w	340158cc <HAL_RCC_OscConfig+0x8c>
34015f56:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
34015f5a:	f47f ae00 	bne.w	34015b5e <HAL_RCC_OscConfig+0x31e>
34015f5e:	e4b5      	b.n	340158cc <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
34015f60:	2e00      	cmp	r6, #0
34015f62:	f43f ac71 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
34015f66:	2d00      	cmp	r5, #0
34015f68:	f47f adaa 	bne.w	34015ac0 <HAL_RCC_OscConfig+0x280>
34015f6c:	e46c      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
34015f6e:	2e00      	cmp	r6, #0
34015f70:	f43f ad7b 	beq.w	34015a6a <HAL_RCC_OscConfig+0x22a>
34015f74:	2d00      	cmp	r5, #0
34015f76:	f43f ad78 	beq.w	34015a6a <HAL_RCC_OscConfig+0x22a>
34015f7a:	e5a1      	b.n	34015ac0 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
34015f7c:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34015f80:	f43f ac8a 	beq.w	34015898 <HAL_RCC_OscConfig+0x58>
34015f84:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34015f88:	f47f ad06 	bne.w	34015998 <HAL_RCC_OscConfig+0x158>
34015f8c:	e484      	b.n	34015898 <HAL_RCC_OscConfig+0x58>
34015f8e:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
34015f92:	f43f ac59 	beq.w	34015848 <HAL_RCC_OscConfig+0x8>
34015f96:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
34015f9a:	f47f acfd 	bne.w	34015998 <HAL_RCC_OscConfig+0x158>
34015f9e:	e453      	b.n	34015848 <HAL_RCC_OscConfig+0x8>
34015fa0:	56028000 	.word	0x56028000

34015fa4 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34015fa4:	4b1f      	ldr	r3, [pc, #124]	@ (34016024 <HAL_RCC_GetCpuClockFreq+0x80>)
{
34015fa6:	b510      	push	{r4, lr}
34015fa8:	6a1a      	ldr	r2, [r3, #32]
34015faa:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
34015fae:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34015fb2:	d034      	beq.n	3401601e <HAL_RCC_GetCpuClockFreq+0x7a>
34015fb4:	d806      	bhi.n	34015fc4 <HAL_RCC_GetCpuClockFreq+0x20>
34015fb6:	b952      	cbnz	r2, 34015fce <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34015fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34015fba:	481b      	ldr	r0, [pc, #108]	@ (34016028 <HAL_RCC_GetCpuClockFreq+0x84>)
34015fbc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34015fc0:	40d8      	lsrs	r0, r3
}
34015fc2:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34015fc4:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34015fc8:	d009      	beq.n	34015fde <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
34015fca:	2000      	movs	r0, #0
34015fcc:	e7f9      	b.n	34015fc2 <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34015fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34015fd0:	4816      	ldr	r0, [pc, #88]	@ (3401602c <HAL_RCC_GetCpuClockFreq+0x88>)
34015fd2:	f413 7f00 	tst.w	r3, #512	@ 0x200
34015fd6:	4b16      	ldr	r3, [pc, #88]	@ (34016030 <HAL_RCC_GetCpuClockFreq+0x8c>)
34015fd8:	bf08      	it	eq
34015fda:	4618      	moveq	r0, r3
34015fdc:	e7f1      	b.n	34015fc2 <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34015fde:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015fe2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34015fe6:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34015fea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
34015fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34015ff2:	f100 0401 	add.w	r4, r0, #1
34015ff6:	d00f      	beq.n	34016018 <HAL_RCC_GetCpuClockFreq+0x74>
34015ff8:	d805      	bhi.n	34016006 <HAL_RCC_GetCpuClockFreq+0x62>
34015ffa:	b953      	cbnz	r3, 34016012 <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34015ffc:	f003 fbba 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34016000:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34016004:	e7dd      	b.n	34015fc2 <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34016006:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401600a:	d1de      	bne.n	34015fca <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401600c:	f003 fc72 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34016010:	e7f6      	b.n	34016000 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34016012:	f003 fbef 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
34016016:	e7f3      	b.n	34016000 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34016018:	f003 fc2c 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401601c:	e7f0      	b.n	34016000 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
3401601e:	4805      	ldr	r0, [pc, #20]	@ (34016034 <HAL_RCC_GetCpuClockFreq+0x90>)
34016020:	e7cf      	b.n	34015fc2 <HAL_RCC_GetCpuClockFreq+0x1e>
34016022:	bf00      	nop
34016024:	56028000 	.word	0x56028000
34016028:	03d09000 	.word	0x03d09000
3401602c:	00f42400 	.word	0x00f42400
34016030:	003d0900 	.word	0x003d0900
34016034:	02dc6c00 	.word	0x02dc6c00

34016038 <HAL_RCC_ClockConfig>:
{
34016038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
3401603c:	4604      	mov	r4, r0
3401603e:	b910      	cbnz	r0, 34016046 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
34016040:	2001      	movs	r0, #1
}
34016042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
34016046:	6803      	ldr	r3, [r0, #0]
34016048:	2b7f      	cmp	r3, #127	@ 0x7f
3401604a:	d904      	bls.n	34016056 <HAL_RCC_ClockConfig+0x1e>
3401604c:	f240 317e 	movw	r1, #894	@ 0x37e
34016050:	4893      	ldr	r0, [pc, #588]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
34016052:	f009 f885 	bl	3401f160 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34016056:	6823      	ldr	r3, [r4, #0]
34016058:	071f      	lsls	r7, r3, #28
3401605a:	d513      	bpl.n	34016084 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
3401605c:	6923      	ldr	r3, [r4, #16]
3401605e:	2b07      	cmp	r3, #7
34016060:	d904      	bls.n	3401606c <HAL_RCC_ClockConfig+0x34>
34016062:	f240 3185 	movw	r1, #901	@ 0x385
34016066:	488e      	ldr	r0, [pc, #568]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
34016068:	f009 f87a 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
3401606c:	4a8d      	ldr	r2, [pc, #564]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
3401606e:	6921      	ldr	r1, [r4, #16]
34016070:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34016072:	f003 0307 	and.w	r3, r3, #7
34016076:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34016078:	bf81      	itttt	hi
3401607a:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
3401607c:	f023 0307 	bichi.w	r3, r3, #7
34016080:	430b      	orrhi	r3, r1
34016082:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34016084:	6823      	ldr	r3, [r4, #0]
34016086:	06de      	lsls	r6, r3, #27
34016088:	d516      	bpl.n	340160b8 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
3401608a:	6963      	ldr	r3, [r4, #20]
3401608c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34016090:	d006      	beq.n	340160a0 <HAL_RCC_ClockConfig+0x68>
34016092:	2b40      	cmp	r3, #64	@ 0x40
34016094:	d004      	beq.n	340160a0 <HAL_RCC_ClockConfig+0x68>
34016096:	f240 318f 	movw	r1, #911	@ 0x38f
3401609a:	4881      	ldr	r0, [pc, #516]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
3401609c:	f009 f860 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
340160a0:	4a80      	ldr	r2, [pc, #512]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
340160a2:	6961      	ldr	r1, [r4, #20]
340160a4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340160a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
340160aa:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
340160ac:	bf81      	itttt	hi
340160ae:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340160b0:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
340160b4:	430b      	orrhi	r3, r1
340160b6:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
340160b8:	6823      	ldr	r3, [r4, #0]
340160ba:	069d      	lsls	r5, r3, #26
340160bc:	d517      	bpl.n	340160ee <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
340160be:	69a3      	ldr	r3, [r4, #24]
340160c0:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
340160c4:	d007      	beq.n	340160d6 <HAL_RCC_ClockConfig+0x9e>
340160c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
340160ca:	d004      	beq.n	340160d6 <HAL_RCC_ClockConfig+0x9e>
340160cc:	f240 3199 	movw	r1, #921	@ 0x399
340160d0:	4873      	ldr	r0, [pc, #460]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
340160d2:	f009 f845 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
340160d6:	4a73      	ldr	r2, [pc, #460]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
340160d8:	69a1      	ldr	r1, [r4, #24]
340160da:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340160dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
340160e0:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
340160e2:	bf81      	itttt	hi
340160e4:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
340160e6:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
340160ea:	430b      	orrhi	r3, r1
340160ec:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
340160ee:	6823      	ldr	r3, [r4, #0]
340160f0:	0658      	lsls	r0, r3, #25
340160f2:	d517      	bpl.n	34016124 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
340160f4:	69e3      	ldr	r3, [r4, #28]
340160f6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
340160fa:	d007      	beq.n	3401610c <HAL_RCC_ClockConfig+0xd4>
340160fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016100:	d004      	beq.n	3401610c <HAL_RCC_ClockConfig+0xd4>
34016102:	f240 31a3 	movw	r1, #931	@ 0x3a3
34016106:	4866      	ldr	r0, [pc, #408]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
34016108:	f009 f82a 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3401610c:	4a65      	ldr	r2, [pc, #404]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
3401610e:	69e1      	ldr	r1, [r4, #28]
34016110:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34016112:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34016116:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34016118:	bf81      	itttt	hi
3401611a:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
3401611c:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34016120:	430b      	orrhi	r3, r1
34016122:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34016124:	6823      	ldr	r3, [r4, #0]
34016126:	0759      	lsls	r1, r3, #29
34016128:	d517      	bpl.n	3401615a <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3401612a:	68e3      	ldr	r3, [r4, #12]
3401612c:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34016130:	d007      	beq.n	34016142 <HAL_RCC_ClockConfig+0x10a>
34016132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34016136:	d004      	beq.n	34016142 <HAL_RCC_ClockConfig+0x10a>
34016138:	f240 31ad 	movw	r1, #941	@ 0x3ad
3401613c:	4858      	ldr	r0, [pc, #352]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
3401613e:	f009 f80f 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34016142:	4a58      	ldr	r2, [pc, #352]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
34016144:	68e1      	ldr	r1, [r4, #12]
34016146:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34016148:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
3401614c:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
3401614e:	bf81      	itttt	hi
34016150:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34016152:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
34016156:	430b      	orrhi	r3, r1
34016158:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
3401615a:	6823      	ldr	r3, [r4, #0]
3401615c:	07da      	lsls	r2, r3, #31
3401615e:	d52a      	bpl.n	340161b6 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
34016160:	6863      	ldr	r3, [r4, #4]
34016162:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34016166:	d004      	beq.n	34016172 <HAL_RCC_ClockConfig+0x13a>
34016168:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
3401616c:	484c      	ldr	r0, [pc, #304]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
3401616e:	f008 fff7 	bl	3401f160 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34016172:	6863      	ldr	r3, [r4, #4]
34016174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34016178:	f040 809a 	bne.w	340162b0 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3401617c:	4b49      	ldr	r3, [pc, #292]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
3401617e:	685b      	ldr	r3, [r3, #4]
34016180:	06db      	lsls	r3, r3, #27
34016182:	f57f af5d 	bpl.w	34016040 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34016186:	4d47      	ldr	r5, [pc, #284]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
34016188:	6862      	ldr	r2, [r4, #4]
3401618a:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3401618c:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34016190:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016194:	4313      	orrs	r3, r2
34016196:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34016198:	f008 fcb2 	bl	3401eb00 <HAL_GetTick>
3401619c:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3401619e:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
340161a0:	6862      	ldr	r2, [r4, #4]
340161a2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
340161a6:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
340161aa:	f040 80b7 	bne.w	3401631c <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
340161ae:	f7ff fef9 	bl	34015fa4 <HAL_RCC_GetCpuClockFreq>
340161b2:	4b3d      	ldr	r3, [pc, #244]	@ (340162a8 <HAL_RCC_ClockConfig+0x270>)
340161b4:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
340161b6:	6823      	ldr	r3, [r4, #0]
340161b8:	079f      	lsls	r7, r3, #30
340161ba:	f100 80b7 	bmi.w	3401632c <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
340161be:	6823      	ldr	r3, [r4, #0]
340161c0:	075e      	lsls	r6, r3, #29
340161c2:	f100 815c 	bmi.w	3401647e <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
340161c6:	6823      	ldr	r3, [r4, #0]
340161c8:	0718      	lsls	r0, r3, #28
340161ca:	d513      	bpl.n	340161f4 <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
340161cc:	6923      	ldr	r3, [r4, #16]
340161ce:	2b07      	cmp	r3, #7
340161d0:	d904      	bls.n	340161dc <HAL_RCC_ClockConfig+0x1a4>
340161d2:	f240 4163 	movw	r1, #1123	@ 0x463
340161d6:	4832      	ldr	r0, [pc, #200]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
340161d8:	f008 ffc2 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
340161dc:	4a31      	ldr	r2, [pc, #196]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
340161de:	6921      	ldr	r1, [r4, #16]
340161e0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340161e2:	f003 0307 	and.w	r3, r3, #7
340161e6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
340161e8:	bf3f      	itttt	cc
340161ea:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
340161ec:	f023 0307 	biccc.w	r3, r3, #7
340161f0:	430b      	orrcc	r3, r1
340161f2:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
340161f4:	6823      	ldr	r3, [r4, #0]
340161f6:	06d9      	lsls	r1, r3, #27
340161f8:	d516      	bpl.n	34016228 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
340161fa:	6963      	ldr	r3, [r4, #20]
340161fc:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34016200:	d006      	beq.n	34016210 <HAL_RCC_ClockConfig+0x1d8>
34016202:	2b40      	cmp	r3, #64	@ 0x40
34016204:	d004      	beq.n	34016210 <HAL_RCC_ClockConfig+0x1d8>
34016206:	f240 416d 	movw	r1, #1133	@ 0x46d
3401620a:	4825      	ldr	r0, [pc, #148]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
3401620c:	f008 ffa8 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34016210:	4a24      	ldr	r2, [pc, #144]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
34016212:	6961      	ldr	r1, [r4, #20]
34016214:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34016216:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3401621a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3401621c:	bf3f      	itttt	cc
3401621e:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34016220:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34016224:	430b      	orrcc	r3, r1
34016226:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34016228:	6823      	ldr	r3, [r4, #0]
3401622a:	069a      	lsls	r2, r3, #26
3401622c:	d517      	bpl.n	3401625e <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3401622e:	69a3      	ldr	r3, [r4, #24]
34016230:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34016234:	d007      	beq.n	34016246 <HAL_RCC_ClockConfig+0x20e>
34016236:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3401623a:	d004      	beq.n	34016246 <HAL_RCC_ClockConfig+0x20e>
3401623c:	f240 4177 	movw	r1, #1143	@ 0x477
34016240:	4817      	ldr	r0, [pc, #92]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
34016242:	f008 ff8d 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34016246:	4a17      	ldr	r2, [pc, #92]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
34016248:	69a1      	ldr	r1, [r4, #24]
3401624a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3401624c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34016250:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34016252:	bf3f      	itttt	cc
34016254:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34016256:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
3401625a:	430b      	orrcc	r3, r1
3401625c:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3401625e:	6823      	ldr	r3, [r4, #0]
34016260:	065b      	lsls	r3, r3, #25
34016262:	d517      	bpl.n	34016294 <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34016264:	69e3      	ldr	r3, [r4, #28]
34016266:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3401626a:	d007      	beq.n	3401627c <HAL_RCC_ClockConfig+0x244>
3401626c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016270:	d004      	beq.n	3401627c <HAL_RCC_ClockConfig+0x244>
34016272:	f240 4181 	movw	r1, #1153	@ 0x481
34016276:	480a      	ldr	r0, [pc, #40]	@ (340162a0 <HAL_RCC_ClockConfig+0x268>)
34016278:	f008 ff72 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3401627c:	4a09      	ldr	r2, [pc, #36]	@ (340162a4 <HAL_RCC_ClockConfig+0x26c>)
3401627e:	69e1      	ldr	r1, [r4, #28]
34016280:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34016282:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34016286:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34016288:	bf3f      	itttt	cc
3401628a:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
3401628c:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34016290:	430b      	orrcc	r3, r1
34016292:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34016294:	4b05      	ldr	r3, [pc, #20]	@ (340162ac <HAL_RCC_ClockConfig+0x274>)
}
34016296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
3401629a:	6818      	ldr	r0, [r3, #0]
3401629c:	f008 bc46 	b.w	3401eb2c <HAL_InitTick>
340162a0:	3402bd24 	.word	0x3402bd24
340162a4:	56028000 	.word	0x56028000
340162a8:	3410cd9c 	.word	0x3410cd9c
340162ac:	3410cda0 	.word	0x3410cda0
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
340162b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340162b4:	d126      	bne.n	34016304 <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
340162b6:	6a23      	ldr	r3, [r4, #32]
340162b8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340162bc:	d004      	beq.n	340162c8 <HAL_RCC_ClockConfig+0x290>
340162be:	f240 31c7 	movw	r1, #967	@ 0x3c7
340162c2:	487b      	ldr	r0, [pc, #492]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340162c4:	f008 ff4c 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
340162c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340162ca:	3b01      	subs	r3, #1
340162cc:	2bff      	cmp	r3, #255	@ 0xff
340162ce:	d904      	bls.n	340162da <HAL_RCC_ClockConfig+0x2a2>
340162d0:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
340162d4:	4876      	ldr	r0, [pc, #472]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340162d6:	f008 ff43 	bl	3401f160 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
340162da:	4e76      	ldr	r6, [pc, #472]	@ (340164b4 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
340162dc:	6a25      	ldr	r5, [r4, #32]
340162de:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
340162e2:	4629      	mov	r1, r5
340162e4:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
340162e8:	f7ff fa52 	bl	34015790 <RCC_IC_CheckPLLSources>
340162ec:	2801      	cmp	r0, #1
340162ee:	f47f aea7 	bne.w	34016040 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
340162f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340162f4:	3b01      	subs	r3, #1
340162f6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
340162fa:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
340162fe:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34016302:	e740      	b.n	34016186 <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34016304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34016308:	d105      	bne.n	34016316 <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
3401630a:	f7ff f8bb 	bl	34015484 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
3401630e:	2800      	cmp	r0, #0
34016310:	f47f af39 	bne.w	34016186 <HAL_RCC_ClockConfig+0x14e>
34016314:	e694      	b.n	34016040 <HAL_RCC_ClockConfig+0x8>
34016316:	f7ff f8ad 	bl	34015474 <LL_RCC_HSI_IsReady>
3401631a:	e7f8      	b.n	3401630e <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
3401631c:	f008 fbf0 	bl	3401eb00 <HAL_GetTick>
34016320:	1b80      	subs	r0, r0, r6
34016322:	42b8      	cmp	r0, r7
34016324:	f67f af3b 	bls.w	3401619e <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34016328:	2003      	movs	r0, #3
3401632a:	e68a      	b.n	34016042 <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
3401632c:	68a3      	ldr	r3, [r4, #8]
3401632e:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34016332:	d004      	beq.n	3401633e <HAL_RCC_ClockConfig+0x306>
34016334:	f240 4101 	movw	r1, #1025	@ 0x401
34016338:	485d      	ldr	r0, [pc, #372]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
3401633a:	f008 ff11 	bl	3401f160 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
3401633e:	68a3      	ldr	r3, [r4, #8]
34016340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34016344:	d11e      	bne.n	34016384 <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34016346:	4b5b      	ldr	r3, [pc, #364]	@ (340164b4 <HAL_RCC_ClockConfig+0x47c>)
34016348:	685b      	ldr	r3, [r3, #4]
3401634a:	06dd      	lsls	r5, r3, #27
3401634c:	f57f ae78 	bpl.w	34016040 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34016350:	4d58      	ldr	r5, [pc, #352]	@ (340164b4 <HAL_RCC_ClockConfig+0x47c>)
34016352:	68a2      	ldr	r2, [r4, #8]
34016354:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34016356:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
3401635a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3401635e:	4313      	orrs	r3, r2
34016360:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34016362:	f008 fbcd 	bl	3401eb00 <HAL_GetTick>
34016366:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34016368:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
3401636a:	68a2      	ldr	r2, [r4, #8]
3401636c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34016370:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34016374:	f43f af23 	beq.w	340161be <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34016378:	f008 fbc2 	bl	3401eb00 <HAL_GetTick>
3401637c:	1b80      	subs	r0, r0, r6
3401637e:	42b8      	cmp	r0, r7
34016380:	d9f2      	bls.n	34016368 <HAL_RCC_ClockConfig+0x330>
34016382:	e7d1      	b.n	34016328 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34016384:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34016388:	d16f      	bne.n	3401646a <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
3401638a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401638c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016390:	d004      	beq.n	3401639c <HAL_RCC_ClockConfig+0x364>
34016392:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34016396:	4846      	ldr	r0, [pc, #280]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
34016398:	f008 fee2 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
3401639c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401639e:	3b01      	subs	r3, #1
340163a0:	2bff      	cmp	r3, #255	@ 0xff
340163a2:	d904      	bls.n	340163ae <HAL_RCC_ClockConfig+0x376>
340163a4:	f240 4111 	movw	r1, #1041	@ 0x411
340163a8:	4841      	ldr	r0, [pc, #260]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340163aa:	f008 fed9 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
340163ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
340163b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340163b4:	d004      	beq.n	340163c0 <HAL_RCC_ClockConfig+0x388>
340163b6:	f240 4112 	movw	r1, #1042	@ 0x412
340163ba:	483d      	ldr	r0, [pc, #244]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340163bc:	f008 fed0 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
340163c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340163c2:	3b01      	subs	r3, #1
340163c4:	2bff      	cmp	r3, #255	@ 0xff
340163c6:	d904      	bls.n	340163d2 <HAL_RCC_ClockConfig+0x39a>
340163c8:	f240 4113 	movw	r1, #1043	@ 0x413
340163cc:	4838      	ldr	r0, [pc, #224]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340163ce:	f008 fec7 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
340163d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340163d4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340163d8:	d004      	beq.n	340163e4 <HAL_RCC_ClockConfig+0x3ac>
340163da:	f240 4114 	movw	r1, #1044	@ 0x414
340163de:	4834      	ldr	r0, [pc, #208]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340163e0:	f008 febe 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
340163e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340163e6:	3b01      	subs	r3, #1
340163e8:	2bff      	cmp	r3, #255	@ 0xff
340163ea:	d904      	bls.n	340163f6 <HAL_RCC_ClockConfig+0x3be>
340163ec:	f240 4115 	movw	r1, #1045	@ 0x415
340163f0:	482f      	ldr	r0, [pc, #188]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
340163f2:	f008 feb5 	bl	3401f160 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340163f6:	4d2f      	ldr	r5, [pc, #188]	@ (340164b4 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
340163f8:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
340163fc:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34016400:	4641      	mov	r1, r8
34016402:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34016406:	f7ff f9c3 	bl	34015790 <RCC_IC_CheckPLLSources>
3401640a:	2801      	cmp	r0, #1
3401640c:	f47f ae18 	bne.w	34016040 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34016410:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34016414:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34016416:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3401641a:	4639      	mov	r1, r7
3401641c:	f7ff f9b8 	bl	34015790 <RCC_IC_CheckPLLSources>
34016420:	2801      	cmp	r0, #1
34016422:	f47f ae0d 	bne.w	34016040 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34016426:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
3401642a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
3401642c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34016430:	4631      	mov	r1, r6
34016432:	f7ff f9ad 	bl	34015790 <RCC_IC_CheckPLLSources>
34016436:	2801      	cmp	r0, #1
34016438:	f47f ae02 	bne.w	34016040 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
3401643c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401643e:	3b01      	subs	r3, #1
34016440:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34016444:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34016448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401644a:	3b01      	subs	r3, #1
3401644c:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34016450:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34016454:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016456:	3b01      	subs	r3, #1
34016458:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
3401645c:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34016460:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34016464:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34016468:	e772      	b.n	34016350 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
3401646a:	b92b      	cbnz	r3, 34016478 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
3401646c:	f7ff f802 	bl	34015474 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34016470:	2800      	cmp	r0, #0
34016472:	f47f af6d 	bne.w	34016350 <HAL_RCC_ClockConfig+0x318>
34016476:	e5e3      	b.n	34016040 <HAL_RCC_ClockConfig+0x8>
34016478:	f7ff f804 	bl	34015484 <LL_RCC_MSI_IsReady>
3401647c:	e7f8      	b.n	34016470 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3401647e:	68e3      	ldr	r3, [r4, #12]
34016480:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34016484:	d007      	beq.n	34016496 <HAL_RCC_ClockConfig+0x45e>
34016486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401648a:	d004      	beq.n	34016496 <HAL_RCC_ClockConfig+0x45e>
3401648c:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34016490:	4807      	ldr	r0, [pc, #28]	@ (340164b0 <HAL_RCC_ClockConfig+0x478>)
34016492:	f008 fe65 	bl	3401f160 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34016496:	4a07      	ldr	r2, [pc, #28]	@ (340164b4 <HAL_RCC_ClockConfig+0x47c>)
34016498:	68e1      	ldr	r1, [r4, #12]
3401649a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3401649c:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
340164a0:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
340164a2:	bf3f      	itttt	cc
340164a4:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
340164a6:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
340164aa:	430b      	orrcc	r3, r1
340164ac:	6253      	strcc	r3, [r2, #36]	@ 0x24
340164ae:	e68a      	b.n	340161c6 <HAL_RCC_ClockConfig+0x18e>
340164b0:	3402bd24 	.word	0x3402bd24
340164b4:	56028000 	.word	0x56028000

340164b8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
340164b8:	4b1f      	ldr	r3, [pc, #124]	@ (34016538 <HAL_RCC_GetSysClockFreq+0x80>)
{
340164ba:	b510      	push	{r4, lr}
340164bc:	6a1a      	ldr	r2, [r3, #32]
340164be:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
340164c2:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
340164c6:	d034      	beq.n	34016532 <HAL_RCC_GetSysClockFreq+0x7a>
340164c8:	d806      	bhi.n	340164d8 <HAL_RCC_GetSysClockFreq+0x20>
340164ca:	b952      	cbnz	r2, 340164e2 <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340164cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340164ce:	481b      	ldr	r0, [pc, #108]	@ (3401653c <HAL_RCC_GetSysClockFreq+0x84>)
340164d0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340164d4:	40d8      	lsrs	r0, r3
}
340164d6:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
340164d8:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
340164dc:	d009      	beq.n	340164f2 <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
340164de:	2000      	movs	r0, #0
340164e0:	e7f9      	b.n	340164d6 <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
340164e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
340164e4:	4816      	ldr	r0, [pc, #88]	@ (34016540 <HAL_RCC_GetSysClockFreq+0x88>)
340164e6:	f413 7f00 	tst.w	r3, #512	@ 0x200
340164ea:	4b16      	ldr	r3, [pc, #88]	@ (34016544 <HAL_RCC_GetSysClockFreq+0x8c>)
340164ec:	bf08      	it	eq
340164ee:	4618      	moveq	r0, r3
340164f0:	e7f1      	b.n	340164d6 <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340164f2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340164f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
340164fa:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
340164fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
34016502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34016506:	f100 0401 	add.w	r4, r0, #1
3401650a:	d00f      	beq.n	3401652c <HAL_RCC_GetSysClockFreq+0x74>
3401650c:	d805      	bhi.n	3401651a <HAL_RCC_GetSysClockFreq+0x62>
3401650e:	b953      	cbnz	r3, 34016526 <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34016510:	f003 f930 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34016514:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34016518:	e7dd      	b.n	340164d6 <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
3401651a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401651e:	d1de      	bne.n	340164de <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34016520:	f003 f9e8 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34016524:	e7f6      	b.n	34016514 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34016526:	f003 f965 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401652a:	e7f3      	b.n	34016514 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401652c:	f003 f9a2 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
34016530:	e7f0      	b.n	34016514 <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
34016532:	4805      	ldr	r0, [pc, #20]	@ (34016548 <HAL_RCC_GetSysClockFreq+0x90>)
34016534:	e7cf      	b.n	340164d6 <HAL_RCC_GetSysClockFreq+0x1e>
34016536:	bf00      	nop
34016538:	56028000 	.word	0x56028000
3401653c:	03d09000 	.word	0x03d09000
34016540:	00f42400 	.word	0x00f42400
34016544:	003d0900 	.word	0x003d0900
34016548:	02dc6c00 	.word	0x02dc6c00

3401654c <HAL_RCC_GetPCLK1Freq>:
{
3401654c:	b508      	push	{r3, lr}
  return LL_RCC_CALC_PCLK1_FREQ(LL_RCC_CALC_HCLK_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler()),
3401654e:	f7ff ffb3 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34016552:	4b05      	ldr	r3, [pc, #20]	@ (34016568 <HAL_RCC_GetPCLK1Freq+0x1c>)
34016554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34016556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34016558:	f3c2 5202 	ubfx	r2, r2, #20, #3
3401655c:	40d0      	lsrs	r0, r2
3401655e:	f003 0307 	and.w	r3, r3, #7
}
34016562:	40d8      	lsrs	r0, r3
34016564:	bd08      	pop	{r3, pc}
34016566:	bf00      	nop
34016568:	56028000 	.word	0x56028000

3401656c <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3401656c:	4a02      	ldr	r2, [pc, #8]	@ (34016578 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
3401656e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34016570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34016574:	6553      	str	r3, [r2, #84]	@ 0x54
}
34016576:	4770      	bx	lr
34016578:	56028000 	.word	0x56028000

3401657c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3401657c:	4a02      	ldr	r2, [pc, #8]	@ (34016588 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
3401657e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34016580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34016584:	6553      	str	r3, [r2, #84]	@ 0x54
}
34016586:	4770      	bx	lr
34016588:	56028000 	.word	0x56028000

3401658c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
3401658c:	4b02      	ldr	r3, [pc, #8]	@ (34016598 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
3401658e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34016590:	f3c0 1080 	ubfx	r0, r0, #6, #1
34016594:	4770      	bx	lr
34016596:	bf00      	nop
34016598:	56028000 	.word	0x56028000

3401659c <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
3401659c:	4b02      	ldr	r3, [pc, #8]	@ (340165a8 <LL_RCC_HSE_IsReady+0xc>)
3401659e:	6858      	ldr	r0, [r3, #4]
}
340165a0:	f3c0 1000 	ubfx	r0, r0, #4, #1
340165a4:	4770      	bx	lr
340165a6:	bf00      	nop
340165a8:	56028000 	.word	0x56028000

340165ac <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
340165ac:	4b02      	ldr	r3, [pc, #8]	@ (340165b8 <LL_RCC_HSI_IsReady+0xc>)
340165ae:	6858      	ldr	r0, [r3, #4]
}
340165b0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
340165b4:	4770      	bx	lr
340165b6:	bf00      	nop
340165b8:	56028000 	.word	0x56028000

340165bc <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
340165bc:	4b02      	ldr	r3, [pc, #8]	@ (340165c8 <LL_RCC_MSI_IsReady+0xc>)
340165be:	6858      	ldr	r0, [r3, #4]
}
340165c0:	f3c0 0080 	ubfx	r0, r0, #2, #1
340165c4:	4770      	bx	lr
340165c6:	bf00      	nop
340165c8:	56028000 	.word	0x56028000

340165cc <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
340165cc:	4b02      	ldr	r3, [pc, #8]	@ (340165d8 <LL_RCC_LSE_IsReady+0xc>)
340165ce:	6858      	ldr	r0, [r3, #4]
}
340165d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
340165d4:	4770      	bx	lr
340165d6:	bf00      	nop
340165d8:	56028000 	.word	0x56028000

340165dc <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
340165dc:	4907      	ldr	r1, [pc, #28]	@ (340165fc <LL_RCC_SetClockSource+0x20>)
{
340165de:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
340165e0:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
340165e2:	f3c0 2504 	ubfx	r5, r0, #8, #5
340165e6:	5863      	ldr	r3, [r4, r1]
340165e8:	0e02      	lsrs	r2, r0, #24
340165ea:	40aa      	lsls	r2, r5
340165ec:	f3c0 4007 	ubfx	r0, r0, #16, #8
340165f0:	ea23 0302 	bic.w	r3, r3, r2
340165f4:	40a8      	lsls	r0, r5
340165f6:	4303      	orrs	r3, r0
340165f8:	5063      	str	r3, [r4, r1]
}
340165fa:	bd30      	pop	{r4, r5, pc}
340165fc:	56028144 	.word	0x56028144

34016600 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34016600:	4b05      	ldr	r3, [pc, #20]	@ (34016618 <LL_RCC_GetClockSource+0x18>)
34016602:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34016604:	58d1      	ldr	r1, [r2, r3]
34016606:	f3c0 2204 	ubfx	r2, r0, #8, #5
3401660a:	0e03      	lsrs	r3, r0, #24
3401660c:	4093      	lsls	r3, r2
3401660e:	400b      	ands	r3, r1
34016610:	40d3      	lsrs	r3, r2
}
34016612:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34016616:	4770      	bx	lr
34016618:	56028144 	.word	0x56028144

3401661c <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
3401661c:	4b02      	ldr	r3, [pc, #8]	@ (34016628 <LL_RCC_IC7_IsEnabled+0xc>)
3401661e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34016622:	f3c0 1080 	ubfx	r0, r0, #6, #1
34016626:	4770      	bx	lr
34016628:	56028000 	.word	0x56028000

3401662c <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
3401662c:	4b03      	ldr	r3, [pc, #12]	@ (3401663c <LL_RCC_IC7_GetDivider+0x10>)
3401662e:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
34016632:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34016636:	3001      	adds	r0, #1
34016638:	4770      	bx	lr
3401663a:	bf00      	nop
3401663c:	56028000 	.word	0x56028000

34016640 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34016640:	4b02      	ldr	r3, [pc, #8]	@ (3401664c <LL_RCC_IC8_IsEnabled+0xc>)
34016642:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34016646:	f3c0 10c0 	ubfx	r0, r0, #7, #1
3401664a:	4770      	bx	lr
3401664c:	56028000 	.word	0x56028000

34016650 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34016650:	4b03      	ldr	r3, [pc, #12]	@ (34016660 <LL_RCC_IC8_GetDivider+0x10>)
34016652:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
34016656:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3401665a:	3001      	adds	r0, #1
3401665c:	4770      	bx	lr
3401665e:	bf00      	nop
34016660:	56028000 	.word	0x56028000

34016664 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34016664:	4b02      	ldr	r3, [pc, #8]	@ (34016670 <LL_RCC_IC9_IsEnabled+0xc>)
34016666:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3401666a:	f3c0 2000 	ubfx	r0, r0, #8, #1
3401666e:	4770      	bx	lr
34016670:	56028000 	.word	0x56028000

34016674 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34016674:	4b03      	ldr	r3, [pc, #12]	@ (34016684 <LL_RCC_IC9_GetDivider+0x10>)
34016676:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
3401667a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
3401667e:	3001      	adds	r0, #1
34016680:	4770      	bx	lr
34016682:	bf00      	nop
34016684:	56028000 	.word	0x56028000

34016688 <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34016688:	4b02      	ldr	r3, [pc, #8]	@ (34016694 <LL_RCC_IC14_IsEnabled+0xc>)
3401668a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
3401668e:	f3c0 3040 	ubfx	r0, r0, #13, #1
34016692:	4770      	bx	lr
34016694:	56028000 	.word	0x56028000

34016698 <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34016698:	4b03      	ldr	r3, [pc, #12]	@ (340166a8 <LL_RCC_IC14_GetDivider+0x10>)
3401669a:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
3401669e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340166a2:	3001      	adds	r0, #1
340166a4:	4770      	bx	lr
340166a6:	bf00      	nop
340166a8:	56028000 	.word	0x56028000

340166ac <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
340166ac:	4b02      	ldr	r3, [pc, #8]	@ (340166b8 <LL_RCC_IC15_IsEnabled+0xc>)
340166ae:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
340166b2:	f3c0 3080 	ubfx	r0, r0, #14, #1
340166b6:	4770      	bx	lr
340166b8:	56028000 	.word	0x56028000

340166bc <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
340166bc:	4b03      	ldr	r3, [pc, #12]	@ (340166cc <LL_RCC_IC15_GetDivider+0x10>)
340166be:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
340166c2:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
340166c6:	3001      	adds	r0, #1
340166c8:	4770      	bx	lr
340166ca:	bf00      	nop
340166cc:	56028000 	.word	0x56028000

340166d0 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
340166d0:	4b02      	ldr	r3, [pc, #8]	@ (340166dc <RCCEx_GetHCLKFreq+0xc>)
340166d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
340166d4:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
340166d8:	40d8      	lsrs	r0, r3
340166da:	4770      	bx	lr
340166dc:	56028000 	.word	0x56028000

340166e0 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
340166e0:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
340166e4:	b508      	push	{r3, lr}
  switch (PLLsource)
340166e6:	d01d      	beq.n	34016724 <RCCEx_GetPLLSourceFreq+0x44>
340166e8:	d80a      	bhi.n	34016700 <RCCEx_GetPLLSourceFreq+0x20>
340166ea:	b970      	cbnz	r0, 3401670a <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340166ec:	f7ff ff5e 	bl	340165ac <LL_RCC_HSI_IsReady>
340166f0:	b148      	cbz	r0, 34016706 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340166f2:	4b10      	ldr	r3, [pc, #64]	@ (34016734 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340166f4:	4810      	ldr	r0, [pc, #64]	@ (34016738 <RCCEx_GetPLLSourceFreq+0x58>)
340166f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340166f8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340166fc:	40d8      	lsrs	r0, r3
340166fe:	e003      	b.n	34016708 <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
34016700:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34016704:	d014      	beq.n	34016730 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34016706:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34016708:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
3401670a:	f7ff ff57 	bl	340165bc <LL_RCC_MSI_IsReady>
3401670e:	2800      	cmp	r0, #0
34016710:	d0f9      	beq.n	34016706 <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34016712:	4b08      	ldr	r3, [pc, #32]	@ (34016734 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
34016714:	4809      	ldr	r0, [pc, #36]	@ (3401673c <RCCEx_GetPLLSourceFreq+0x5c>)
34016716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34016718:	f413 7f00 	tst.w	r3, #512	@ 0x200
3401671c:	4b08      	ldr	r3, [pc, #32]	@ (34016740 <RCCEx_GetPLLSourceFreq+0x60>)
3401671e:	bf08      	it	eq
34016720:	4618      	moveq	r0, r3
34016722:	e7f1      	b.n	34016708 <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
34016724:	f7ff ff3a 	bl	3401659c <LL_RCC_HSE_IsReady>
34016728:	2800      	cmp	r0, #0
3401672a:	d0ec      	beq.n	34016706 <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
3401672c:	4805      	ldr	r0, [pc, #20]	@ (34016744 <RCCEx_GetPLLSourceFreq+0x64>)
3401672e:	e7eb      	b.n	34016708 <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34016730:	4805      	ldr	r0, [pc, #20]	@ (34016748 <RCCEx_GetPLLSourceFreq+0x68>)
34016732:	e7e9      	b.n	34016708 <RCCEx_GetPLLSourceFreq+0x28>
34016734:	56028000 	.word	0x56028000
34016738:	03d09000 	.word	0x03d09000
3401673c:	00f42400 	.word	0x00f42400
34016740:	003d0900 	.word	0x003d0900
34016744:	02dc6c00 	.word	0x02dc6c00
34016748:	00bb8000 	.word	0x00bb8000

3401674c <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
3401674c:	ee07 2a10 	vmov	s14, r2
34016750:	ee06 3a10 	vmov	s12, r3
34016754:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34016758:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
3401675c:	eddf 5a10 	vldr	s11, [pc, #64]	@ 340167a0 <RCCEx_CalcPLLFreq+0x54>
34016760:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34016764:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34016768:	eea6 7a25 	vfma.f32	s14, s12, s11
3401676c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34016770:	ee67 7a87 	vmul.f32	s15, s15, s14
34016774:	eeb8 7a66 	vcvt.f32.u32	s14, s13
34016778:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
3401677c:	eddd 7a00 	vldr	s15, [sp]
34016780:	eef8 7a67 	vcvt.f32.u32	s15, s15
34016784:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
34016788:	eddd 7a01 	vldr	s15, [sp, #4]
3401678c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34016790:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34016794:	eefc 7ac7 	vcvt.u32.f32	s15, s14
34016798:	ee17 0a90 	vmov	r0, s15
3401679c:	4770      	bx	lr
3401679e:	bf00      	nop
340167a0:	33800000 	.word	0x33800000

340167a4 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340167a4:	e9d0 2300 	ldrd	r2, r3, [r0]
340167a8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
340167ac:	431a      	orrs	r2, r3
{
340167ae:	b570      	push	{r4, r5, r6, lr}
340167b0:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
340167b2:	d103      	bne.n	340167bc <HAL_RCCEx_PeriphCLKConfig+0x18>
340167b4:	2188      	movs	r1, #136	@ 0x88
340167b6:	4861      	ldr	r0, [pc, #388]	@ (3401693c <HAL_RCCEx_PeriphCLKConfig+0x198>)
340167b8:	f008 fcd2 	bl	3401f160 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
340167bc:	6823      	ldr	r3, [r4, #0]
340167be:	011a      	lsls	r2, r3, #4
340167c0:	f140 808e 	bpl.w	340168e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
340167c4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
340167c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
340167cc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
340167d0:	d05a      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340167d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340167d6:	d057      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340167d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
340167dc:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
340167e0:	d052      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340167e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
340167e6:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
340167ea:	d04d      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340167ec:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
340167f0:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
340167f4:	d048      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
340167f6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
340167fa:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
340167fe:	d043      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016800:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34016804:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
34016808:	d03e      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401680a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401680e:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
34016812:	d039      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016814:	494a      	ldr	r1, [pc, #296]	@ (34016940 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
34016816:	428a      	cmp	r2, r1
34016818:	d036      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401681a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401681e:	428a      	cmp	r2, r1
34016820:	d032      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016822:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34016826:	428a      	cmp	r2, r1
34016828:	d02e      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401682a:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
3401682e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34016832:	4288      	cmp	r0, r1
34016834:	d028      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016836:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
3401683a:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
3401683e:	4288      	cmp	r0, r1
34016840:	d022      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016842:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
34016846:	428a      	cmp	r2, r1
34016848:	d01e      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401684a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401684e:	428a      	cmp	r2, r1
34016850:	d01a      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016852:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34016856:	428a      	cmp	r2, r1
34016858:	d016      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401685a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401685e:	428a      	cmp	r2, r1
34016860:	d012      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016862:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34016866:	428a      	cmp	r2, r1
34016868:	d00e      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401686a:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3401686e:	428a      	cmp	r2, r1
34016870:	d00a      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016872:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34016876:	428a      	cmp	r2, r1
34016878:	d006      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
3401687a:	4a32      	ldr	r2, [pc, #200]	@ (34016944 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
3401687c:	4293      	cmp	r3, r2
3401687e:	d003      	beq.n	34016888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
34016880:	218e      	movs	r1, #142	@ 0x8e
34016882:	482e      	ldr	r0, [pc, #184]	@ (3401693c <HAL_RCCEx_PeriphCLKConfig+0x198>)
34016884:	f008 fc6c 	bl	3401f160 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34016888:	4b2f      	ldr	r3, [pc, #188]	@ (34016948 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3401688a:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
3401688e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34016892:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
34016896:	d13b      	bne.n	34016910 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34016898:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3401689c:	d108      	bne.n	340168b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
3401689e:	f008 f92f 	bl	3401eb00 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
340168a2:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
340168a6:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
340168a8:	f7ff fe90 	bl	340165cc <LL_RCC_LSE_IsReady>
340168ac:	2800      	cmp	r0, #0
340168ae:	d03d      	beq.n	3401692c <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
340168b0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
340168b4:	4a24      	ldr	r2, [pc, #144]	@ (34016948 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
340168b6:	f403 7040 	and.w	r0, r3, #768	@ 0x300
340168ba:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
340168be:	d108      	bne.n	340168d2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
340168c0:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
340168c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
340168c8:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
340168cc:	430b      	orrs	r3, r1
340168ce:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
340168d2:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
340168d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
340168da:	4303      	orrs	r3, r0
340168dc:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
340168e0:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
340168e2:	6823      	ldr	r3, [r4, #0]
340168e4:	075e      	lsls	r6, r3, #29
340168e6:	d55f      	bpl.n	340169a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
340168e8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340168ec:	2b07      	cmp	r3, #7
340168ee:	d903      	bls.n	340168f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
340168f0:	21d4      	movs	r1, #212	@ 0xd4
340168f2:	4812      	ldr	r0, [pc, #72]	@ (3401693c <HAL_RCCEx_PeriphCLKConfig+0x198>)
340168f4:	f008 fc34 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
340168f8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
340168fc:	3b03      	subs	r3, #3
340168fe:	2b04      	cmp	r3, #4
34016900:	d848      	bhi.n	34016994 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
34016902:	e8df f013 	tbh	[pc, r3, lsl #1]
34016906:	0f27      	.short	0x0f27
34016908:	0ee10025 	.word	0x0ee10025
3401690c:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34016910:	f401 7240 	and.w	r2, r1, #768	@ 0x300
34016914:	429a      	cmp	r2, r3
34016916:	d0bf      	beq.n	34016898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34016918:	4b0c      	ldr	r3, [pc, #48]	@ (3401694c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
3401691a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3401691c:	f042 0201 	orr.w	r2, r2, #1
34016920:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34016922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34016924:	07db      	lsls	r3, r3, #31
34016926:	d4b7      	bmi.n	34016898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
34016928:	2501      	movs	r5, #1
3401692a:	e7da      	b.n	340168e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3401692c:	f008 f8e8 	bl	3401eb00 <HAL_GetTick>
34016930:	1b40      	subs	r0, r0, r5
34016932:	42b0      	cmp	r0, r6
34016934:	d9b8      	bls.n	340168a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
34016936:	2503      	movs	r5, #3
34016938:	e7d3      	b.n	340168e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
3401693a:	bf00      	nop
3401693c:	3402bd84 	.word	0x3402bd84
34016940:	00010300 	.word	0x00010300
34016944:	0003e300 	.word	0x0003e300
34016948:	56028000 	.word	0x56028000
3401694c:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34016950:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34016952:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016956:	d003      	beq.n	34016960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
34016958:	21d9      	movs	r1, #217	@ 0xd9
3401695a:	48bd      	ldr	r0, [pc, #756]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401695c:	f008 fc00 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34016960:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34016962:	3b01      	subs	r3, #1
34016964:	2bff      	cmp	r3, #255	@ 0xff
34016966:	d903      	bls.n	34016970 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
34016968:	21da      	movs	r1, #218	@ 0xda
3401696a:	48b9      	ldr	r0, [pc, #740]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3401696c:	f008 fbf8 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34016970:	4ab8      	ldr	r2, [pc, #736]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016972:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34016974:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34016978:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3401697a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401697e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016982:	3901      	subs	r1, #1
34016984:	4303      	orrs	r3, r0
34016986:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401698a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
3401698e:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34016990:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34016994:	4aaf      	ldr	r2, [pc, #700]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016996:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
3401699a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3401699e:	f023 0307 	bic.w	r3, r3, #7
340169a2:	430b      	orrs	r3, r1
340169a4:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
340169a8:	6863      	ldr	r3, [r4, #4]
340169aa:	0258      	lsls	r0, r3, #9
340169ac:	d539      	bpl.n	34016a22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
340169ae:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340169b2:	4aa9      	ldr	r2, [pc, #676]	@ (34016c58 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
340169b4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
340169b8:	4293      	cmp	r3, r2
340169ba:	d004      	beq.n	340169c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
340169bc:	f44f 7192 	mov.w	r1, #292	@ 0x124
340169c0:	48a3      	ldr	r0, [pc, #652]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340169c2:	f008 fbcd 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
340169c6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
340169ca:	4aa4      	ldr	r2, [pc, #656]	@ (34016c5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
340169cc:	4293      	cmp	r3, r2
340169ce:	f041 8713 	bne.w	340187f8 <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
340169d2:	69a3      	ldr	r3, [r4, #24]
340169d4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340169d8:	d004      	beq.n	340169e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
340169da:	f240 1129 	movw	r1, #297	@ 0x129
340169de:	489c      	ldr	r0, [pc, #624]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340169e0:	f008 fbbe 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
340169e4:	69e3      	ldr	r3, [r4, #28]
340169e6:	3b01      	subs	r3, #1
340169e8:	2bff      	cmp	r3, #255	@ 0xff
340169ea:	d904      	bls.n	340169f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
340169ec:	f44f 7195 	mov.w	r1, #298	@ 0x12a
340169f0:	4897      	ldr	r0, [pc, #604]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
340169f2:	f008 fbb5 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340169f6:	4a97      	ldr	r2, [pc, #604]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
340169f8:	69e1      	ldr	r1, [r4, #28]
340169fa:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
340169fe:	69a0      	ldr	r0, [r4, #24]
34016a00:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016a04:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016a08:	3901      	subs	r1, #1
34016a0a:	4303      	orrs	r3, r0
34016a0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016a10:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34016a14:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34016a16:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016a1a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
34016a1e:	f7ff fddd 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
34016a22:	6863      	ldr	r3, [r4, #4]
34016a24:	0219      	lsls	r1, r3, #8
34016a26:	d539      	bpl.n	34016a9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
34016a28:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34016a2c:	4a8c      	ldr	r2, [pc, #560]	@ (34016c60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
34016a2e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016a32:	4293      	cmp	r3, r2
34016a34:	d004      	beq.n	34016a40 <HAL_RCCEx_PeriphCLKConfig+0x29c>
34016a36:	f240 1151 	movw	r1, #337	@ 0x151
34016a3a:	4885      	ldr	r0, [pc, #532]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016a3c:	f008 fb90 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34016a40:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34016a44:	4a87      	ldr	r2, [pc, #540]	@ (34016c64 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
34016a46:	4293      	cmp	r3, r2
34016a48:	f041 8706 	bne.w	34018858 <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34016a4c:	69a3      	ldr	r3, [r4, #24]
34016a4e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016a52:	d004      	beq.n	34016a5e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
34016a54:	f44f 71ab 	mov.w	r1, #342	@ 0x156
34016a58:	487d      	ldr	r0, [pc, #500]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016a5a:	f008 fb81 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34016a5e:	69e3      	ldr	r3, [r4, #28]
34016a60:	3b01      	subs	r3, #1
34016a62:	2bff      	cmp	r3, #255	@ 0xff
34016a64:	d904      	bls.n	34016a70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
34016a66:	f240 1157 	movw	r1, #343	@ 0x157
34016a6a:	4879      	ldr	r0, [pc, #484]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016a6c:	f008 fb78 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34016a70:	4a78      	ldr	r2, [pc, #480]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016a72:	69e1      	ldr	r1, [r4, #28]
34016a74:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34016a78:	69a0      	ldr	r0, [r4, #24]
34016a7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016a7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016a82:	3901      	subs	r1, #1
34016a84:	4303      	orrs	r3, r0
34016a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016a8a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34016a8e:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34016a90:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016a94:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
34016a98:	f7ff fda0 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34016a9c:	6863      	ldr	r3, [r4, #4]
34016a9e:	01da      	lsls	r2, r3, #7
34016aa0:	d539      	bpl.n	34016b16 <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
34016aa2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34016aa6:	4a70      	ldr	r2, [pc, #448]	@ (34016c68 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
34016aa8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016aac:	4293      	cmp	r3, r2
34016aae:	d004      	beq.n	34016aba <HAL_RCCEx_PeriphCLKConfig+0x316>
34016ab0:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
34016ab4:	4866      	ldr	r0, [pc, #408]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016ab6:	f008 fb53 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
34016aba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34016abe:	4a6b      	ldr	r2, [pc, #428]	@ (34016c6c <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34016ac0:	4293      	cmp	r3, r2
34016ac2:	f041 86f9 	bne.w	340188b8 <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34016ac6:	69a3      	ldr	r3, [r4, #24]
34016ac8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016acc:	d004      	beq.n	34016ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
34016ace:	f240 1183 	movw	r1, #387	@ 0x183
34016ad2:	485f      	ldr	r0, [pc, #380]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016ad4:	f008 fb44 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34016ad8:	69e3      	ldr	r3, [r4, #28]
34016ada:	3b01      	subs	r3, #1
34016adc:	2bff      	cmp	r3, #255	@ 0xff
34016ade:	d904      	bls.n	34016aea <HAL_RCCEx_PeriphCLKConfig+0x346>
34016ae0:	f44f 71c2 	mov.w	r1, #388	@ 0x184
34016ae4:	485a      	ldr	r0, [pc, #360]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016ae6:	f008 fb3b 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34016aea:	4a5a      	ldr	r2, [pc, #360]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016aec:	69e1      	ldr	r1, [r4, #28]
34016aee:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34016af2:	69a0      	ldr	r0, [r4, #24]
34016af4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016af8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016afc:	3901      	subs	r1, #1
34016afe:	4303      	orrs	r3, r0
34016b00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016b04:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34016b08:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34016b0a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016b0e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
34016b12:	f7ff fd63 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34016b16:	6823      	ldr	r3, [r4, #0]
34016b18:	051b      	lsls	r3, r3, #20
34016b1a:	d53c      	bpl.n	34016b96 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
34016b1c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34016b20:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34016b24:	d004      	beq.n	34016b30 <HAL_RCCEx_PeriphCLKConfig+0x38c>
34016b26:	f240 11ab 	movw	r1, #427	@ 0x1ab
34016b2a:	4849      	ldr	r0, [pc, #292]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016b2c:	f008 fb18 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34016b30:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34016b34:	2b20      	cmp	r3, #32
34016b36:	f041 86ff 	bne.w	34018938 <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34016b3a:	69a3      	ldr	r3, [r4, #24]
34016b3c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016b40:	d004      	beq.n	34016b4c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
34016b42:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
34016b46:	4842      	ldr	r0, [pc, #264]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016b48:	f008 fb0a 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34016b4c:	69e3      	ldr	r3, [r4, #28]
34016b4e:	3b01      	subs	r3, #1
34016b50:	2bff      	cmp	r3, #255	@ 0xff
34016b52:	d904      	bls.n	34016b5e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
34016b54:	f240 11b1 	movw	r1, #433	@ 0x1b1
34016b58:	483d      	ldr	r0, [pc, #244]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016b5a:	f008 fb01 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34016b5e:	4a3d      	ldr	r2, [pc, #244]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016b60:	69e1      	ldr	r1, [r4, #28]
34016b62:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
34016b66:	69a0      	ldr	r0, [r4, #24]
34016b68:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016b6c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016b70:	3901      	subs	r1, #1
34016b72:	4303      	orrs	r3, r0
34016b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016b78:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34016b7c:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34016b7e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34016b82:	4a34      	ldr	r2, [pc, #208]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016b84:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
34016b88:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34016b8c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34016b90:	430b      	orrs	r3, r1
34016b92:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34016b96:	6823      	ldr	r3, [r4, #0]
34016b98:	005e      	lsls	r6, r3, #1
34016b9a:	d539      	bpl.n	34016c10 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34016b9c:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34016ba0:	4a33      	ldr	r2, [pc, #204]	@ (34016c70 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
34016ba2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016ba6:	4293      	cmp	r3, r2
34016ba8:	d004      	beq.n	34016bb4 <HAL_RCCEx_PeriphCLKConfig+0x410>
34016baa:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34016bae:	4828      	ldr	r0, [pc, #160]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016bb0:	f008 fad6 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34016bb4:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34016bb8:	4a2e      	ldr	r2, [pc, #184]	@ (34016c74 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
34016bba:	4293      	cmp	r3, r2
34016bbc:	f041 86ea 	bne.w	34018994 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34016bc0:	6a23      	ldr	r3, [r4, #32]
34016bc2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016bc6:	d004      	beq.n	34016bd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
34016bc8:	f240 11dd 	movw	r1, #477	@ 0x1dd
34016bcc:	4820      	ldr	r0, [pc, #128]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016bce:	f008 fac7 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34016bd2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34016bd4:	3b01      	subs	r3, #1
34016bd6:	2bff      	cmp	r3, #255	@ 0xff
34016bd8:	d904      	bls.n	34016be4 <HAL_RCCEx_PeriphCLKConfig+0x440>
34016bda:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34016bde:	481c      	ldr	r0, [pc, #112]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016be0:	f008 fabe 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34016be4:	4a1b      	ldr	r2, [pc, #108]	@ (34016c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34016be6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34016be8:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34016bec:	6a20      	ldr	r0, [r4, #32]
34016bee:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016bf2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016bf6:	3901      	subs	r1, #1
34016bf8:	4303      	orrs	r3, r0
34016bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016bfe:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34016c02:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34016c04:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016c08:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
34016c0c:	f7ff fce6 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34016c10:	6823      	ldr	r3, [r4, #0]
34016c12:	2b00      	cmp	r3, #0
34016c14:	da53      	bge.n	34016cbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
34016c16:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34016c1a:	4a17      	ldr	r2, [pc, #92]	@ (34016c78 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
34016c1c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34016c20:	4293      	cmp	r3, r2
34016c22:	d004      	beq.n	34016c2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
34016c24:	f240 2105 	movw	r1, #517	@ 0x205
34016c28:	4809      	ldr	r0, [pc, #36]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016c2a:	f008 fa99 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34016c2e:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
34016c32:	4a12      	ldr	r2, [pc, #72]	@ (34016c7c <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
34016c34:	4293      	cmp	r3, r2
34016c36:	f041 86dd 	bne.w	340189f4 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34016c3a:	6a23      	ldr	r3, [r4, #32]
34016c3c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016c40:	d01e      	beq.n	34016c80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34016c42:	f240 210a 	movw	r1, #522	@ 0x20a
34016c46:	4802      	ldr	r0, [pc, #8]	@ (34016c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34016c48:	f008 fa8a 	bl	3401f160 <assert_failed>
34016c4c:	e018      	b.n	34016c80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34016c4e:	bf00      	nop
34016c50:	3402bd84 	.word	0x3402bd84
34016c54:	56028000 	.word	0x56028000
34016c58:	03000014 	.word	0x03000014
34016c5c:	03020014 	.word	0x03020014
34016c60:	03000414 	.word	0x03000414
34016c64:	03020414 	.word	0x03020414
34016c68:	03000814 	.word	0x03000814
34016c6c:	03020814 	.word	0x03020814
34016c70:	0300001c 	.word	0x0300001c
34016c74:	0302001c 	.word	0x0302001c
34016c78:	0300041c 	.word	0x0300041c
34016c7c:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34016c80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34016c82:	3b01      	subs	r3, #1
34016c84:	2bff      	cmp	r3, #255	@ 0xff
34016c86:	d904      	bls.n	34016c92 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
34016c88:	f240 210b 	movw	r1, #523	@ 0x20b
34016c8c:	48c4      	ldr	r0, [pc, #784]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016c8e:	f008 fa67 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34016c92:	4ac4      	ldr	r2, [pc, #784]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016c94:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34016c96:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34016c9a:	6a20      	ldr	r0, [r4, #32]
34016c9c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016ca0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016ca4:	3901      	subs	r1, #1
34016ca6:	4303      	orrs	r3, r0
34016ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016cac:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34016cb0:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34016cb2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34016cb6:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
34016cba:	f7ff fc8f 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34016cbe:	6823      	ldr	r3, [r4, #0]
34016cc0:	07d8      	lsls	r0, r3, #31
34016cc2:	d54f      	bpl.n	34016d64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34016cc4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34016cc8:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34016ccc:	d006      	beq.n	34016cdc <HAL_RCCEx_PeriphCLKConfig+0x538>
34016cce:	2b40      	cmp	r3, #64	@ 0x40
34016cd0:	d004      	beq.n	34016cdc <HAL_RCCEx_PeriphCLKConfig+0x538>
34016cd2:	f240 2132 	movw	r1, #562	@ 0x232
34016cd6:	48b2      	ldr	r0, [pc, #712]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016cd8:	f008 fa42 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
34016cdc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
34016ce0:	3b01      	subs	r3, #1
34016ce2:	2bff      	cmp	r3, #255	@ 0xff
34016ce4:	d904      	bls.n	34016cf0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
34016ce6:	f240 2133 	movw	r1, #563	@ 0x233
34016cea:	48ad      	ldr	r0, [pc, #692]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016cec:	f008 fa38 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34016cf0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
34016cf4:	2b20      	cmp	r3, #32
34016cf6:	f041 86ad 	bne.w	34018a54 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016cfa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016cfc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016d00:	d004      	beq.n	34016d0c <HAL_RCCEx_PeriphCLKConfig+0x568>
34016d02:	f44f 710e 	mov.w	r1, #568	@ 0x238
34016d06:	48a6      	ldr	r0, [pc, #664]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016d08:	f008 fa2a 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016d0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016d0e:	3b01      	subs	r3, #1
34016d10:	2bff      	cmp	r3, #255	@ 0xff
34016d12:	d904      	bls.n	34016d1e <HAL_RCCEx_PeriphCLKConfig+0x57a>
34016d14:	f240 2139 	movw	r1, #569	@ 0x239
34016d18:	48a1      	ldr	r0, [pc, #644]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016d1a:	f008 fa21 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34016d1e:	4aa1      	ldr	r2, [pc, #644]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016d20:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016d22:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016d26:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016d28:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016d2c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016d30:	3901      	subs	r1, #1
34016d32:	4303      	orrs	r3, r0
34016d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016d38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016d3c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016d3e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34016d42:	4998      	ldr	r1, [pc, #608]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016d44:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
34016d48:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
34016d4c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34016d50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34016d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
34016d58:	3a01      	subs	r2, #1
34016d5a:	4303      	orrs	r3, r0
34016d5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34016d60:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34016d64:	6823      	ldr	r3, [r4, #0]
34016d66:	0799      	lsls	r1, r3, #30
34016d68:	d53b      	bpl.n	34016de2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
34016d6a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34016d6e:	2b07      	cmp	r3, #7
34016d70:	d904      	bls.n	34016d7c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
34016d72:	f240 2161 	movw	r1, #609	@ 0x261
34016d76:	488a      	ldr	r0, [pc, #552]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016d78:	f008 f9f2 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34016d7c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34016d80:	2b02      	cmp	r3, #2
34016d82:	f041 8695 	bne.w	34018ab0 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34016d86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34016d88:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016d8c:	d004      	beq.n	34016d98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
34016d8e:	f240 2166 	movw	r1, #614	@ 0x266
34016d92:	4883      	ldr	r0, [pc, #524]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016d94:	f008 f9e4 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34016d98:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34016d9a:	3b01      	subs	r3, #1
34016d9c:	2bff      	cmp	r3, #255	@ 0xff
34016d9e:	d904      	bls.n	34016daa <HAL_RCCEx_PeriphCLKConfig+0x606>
34016da0:	f240 2167 	movw	r1, #615	@ 0x267
34016da4:	487e      	ldr	r0, [pc, #504]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016da6:	f008 f9db 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34016daa:	4a7e      	ldr	r2, [pc, #504]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016dac:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34016dae:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34016db2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34016db4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016db8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016dbc:	3901      	subs	r1, #1
34016dbe:	4303      	orrs	r3, r0
34016dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016dc4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34016dc8:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34016dca:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34016dce:	4a75      	ldr	r2, [pc, #468]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016dd0:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34016dd4:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34016dd8:	f023 0307 	bic.w	r3, r3, #7
34016ddc:	430b      	orrs	r3, r1
34016dde:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34016de2:	6823      	ldr	r3, [r4, #0]
34016de4:	071a      	lsls	r2, r3, #28
34016de6:	d528      	bpl.n	34016e3a <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
34016de8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34016dec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016df0:	d004      	beq.n	34016dfc <HAL_RCCEx_PeriphCLKConfig+0x658>
34016df2:	f240 218e 	movw	r1, #654	@ 0x28e
34016df6:	486a      	ldr	r0, [pc, #424]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016df8:	f008 f9b2 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
34016dfc:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
34016e00:	3b01      	subs	r3, #1
34016e02:	2bff      	cmp	r3, #255	@ 0xff
34016e04:	d904      	bls.n	34016e10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
34016e06:	f240 218f 	movw	r1, #655	@ 0x28f
34016e0a:	4865      	ldr	r0, [pc, #404]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016e0c:	f008 f9a8 	bl	3401f160 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34016e10:	4a64      	ldr	r2, [pc, #400]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016e12:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
34016e16:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
34016e1a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
34016e1e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016e22:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016e26:	3901      	subs	r1, #1
34016e28:	4303      	orrs	r3, r0
34016e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016e2e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34016e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
34016e36:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34016e3a:	6823      	ldr	r3, [r4, #0]
34016e3c:	06db      	lsls	r3, r3, #27
34016e3e:	d542      	bpl.n	34016ec6 <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34016e40:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34016e44:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34016e48:	d004      	beq.n	34016e54 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
34016e4a:	f240 219d 	movw	r1, #669	@ 0x29d
34016e4e:	4854      	ldr	r0, [pc, #336]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016e50:	f008 f986 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34016e54:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34016e58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34016e5c:	f041 8656 	bne.w	34018b0c <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34016e60:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34016e64:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016e68:	d004      	beq.n	34016e74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
34016e6a:	f240 21a2 	movw	r1, #674	@ 0x2a2
34016e6e:	484c      	ldr	r0, [pc, #304]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016e70:	f008 f976 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34016e74:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
34016e78:	3b01      	subs	r3, #1
34016e7a:	2bff      	cmp	r3, #255	@ 0xff
34016e7c:	d904      	bls.n	34016e88 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
34016e7e:	f240 21a3 	movw	r1, #675	@ 0x2a3
34016e82:	4847      	ldr	r0, [pc, #284]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016e84:	f008 f96c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34016e88:	4a46      	ldr	r2, [pc, #280]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016e8a:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
34016e8e:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
34016e92:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
34016e96:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016e9a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016e9e:	3901      	subs	r1, #1
34016ea0:	4303      	orrs	r3, r0
34016ea2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016ea6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34016eaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34016eae:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34016eb2:	4a3c      	ldr	r2, [pc, #240]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016eb4:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
34016eb8:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34016ebc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34016ec0:	430b      	orrs	r3, r1
34016ec2:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34016ec6:	6823      	ldr	r3, [r4, #0]
34016ec8:	069e      	lsls	r6, r3, #26
34016eca:	d53e      	bpl.n	34016f4a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34016ecc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34016ed0:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34016ed4:	d004      	beq.n	34016ee0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
34016ed6:	f240 21bd 	movw	r1, #701	@ 0x2bd
34016eda:	4831      	ldr	r0, [pc, #196]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016edc:	f008 f940 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34016ee0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34016ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34016ee8:	f041 8619 	bne.w	34018b1e <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
34016eec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
34016eee:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34016ef2:	d004      	beq.n	34016efe <HAL_RCCEx_PeriphCLKConfig+0x75a>
34016ef4:	f240 21c2 	movw	r1, #706	@ 0x2c2
34016ef8:	4829      	ldr	r0, [pc, #164]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016efa:	f008 f931 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
34016efe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
34016f00:	3b01      	subs	r3, #1
34016f02:	2bff      	cmp	r3, #255	@ 0xff
34016f04:	d904      	bls.n	34016f10 <HAL_RCCEx_PeriphCLKConfig+0x76c>
34016f06:	f240 21c3 	movw	r1, #707	@ 0x2c3
34016f0a:	4825      	ldr	r0, [pc, #148]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016f0c:	f008 f928 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34016f10:	4a24      	ldr	r2, [pc, #144]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016f12:	6e61      	ldr	r1, [r4, #100]	@ 0x64
34016f14:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
34016f18:	6e20      	ldr	r0, [r4, #96]	@ 0x60
34016f1a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34016f1e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34016f22:	3901      	subs	r1, #1
34016f24:	4303      	orrs	r3, r0
34016f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34016f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34016f2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
34016f32:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34016f36:	4a1b      	ldr	r2, [pc, #108]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016f38:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34016f3c:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34016f40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34016f44:	430b      	orrs	r3, r1
34016f46:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34016f4a:	6823      	ldr	r3, [r4, #0]
34016f4c:	0658      	lsls	r0, r3, #25
34016f4e:	d516      	bpl.n	34016f7e <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34016f50:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34016f54:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
34016f58:	d007      	beq.n	34016f6a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34016f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34016f5e:	d004      	beq.n	34016f6a <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34016f60:	f240 21dd 	movw	r1, #733	@ 0x2dd
34016f64:	480e      	ldr	r0, [pc, #56]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016f66:	f008 f8fb 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34016f6a:	4a0e      	ldr	r2, [pc, #56]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016f6c:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34016f70:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34016f74:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
34016f78:	430b      	orrs	r3, r1
34016f7a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34016f7e:	6823      	ldr	r3, [r4, #0]
34016f80:	0619      	lsls	r1, r3, #24
34016f82:	d518      	bpl.n	34016fb6 <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34016f84:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
34016f88:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34016f8c:	d004      	beq.n	34016f98 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34016f8e:	f240 21e7 	movw	r1, #743	@ 0x2e7
34016f92:	4803      	ldr	r0, [pc, #12]	@ (34016fa0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34016f94:	f008 f8e4 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34016f98:	4a02      	ldr	r2, [pc, #8]	@ (34016fa4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34016f9a:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34016f9e:	e003      	b.n	34016fa8 <HAL_RCCEx_PeriphCLKConfig+0x804>
34016fa0:	3402bd84 	.word	0x3402bd84
34016fa4:	56028000 	.word	0x56028000
34016fa8:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34016fac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34016fb0:	430b      	orrs	r3, r1
34016fb2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34016fb6:	6823      	ldr	r3, [r4, #0]
34016fb8:	05da      	lsls	r2, r3, #23
34016fba:	d513      	bpl.n	34016fe4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34016fbc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34016fc0:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34016fc4:	d004      	beq.n	34016fd0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
34016fc6:	f240 21f1 	movw	r1, #753	@ 0x2f1
34016fca:	48c1      	ldr	r0, [pc, #772]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016fcc:	f008 f8c8 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34016fd0:	4ac0      	ldr	r2, [pc, #768]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34016fd2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
34016fd6:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34016fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
34016fde:	430b      	orrs	r3, r1
34016fe0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34016fe4:	6823      	ldr	r3, [r4, #0]
34016fe6:	059b      	lsls	r3, r3, #22
34016fe8:	d54b      	bpl.n	34017082 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
34016fea:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34016fee:	2b03      	cmp	r3, #3
34016ff0:	d904      	bls.n	34016ffc <HAL_RCCEx_PeriphCLKConfig+0x858>
34016ff2:	f240 21fb 	movw	r1, #763	@ 0x2fb
34016ff6:	48b6      	ldr	r0, [pc, #728]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34016ff8:	f008 f8b2 	bl	3401f160 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
34016ffc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
34017000:	3b01      	subs	r3, #1
34017002:	2b0f      	cmp	r3, #15
34017004:	d904      	bls.n	34017010 <HAL_RCCEx_PeriphCLKConfig+0x86c>
34017006:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
3401700a:	48b1      	ldr	r0, [pc, #708]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3401700c:	f008 f8a8 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34017010:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
34017014:	2b02      	cmp	r3, #2
34017016:	f041 858b 	bne.w	34018b30 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
3401701a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
3401701c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017020:	d004      	beq.n	3401702c <HAL_RCCEx_PeriphCLKConfig+0x888>
34017022:	f240 3101 	movw	r1, #769	@ 0x301
34017026:	48aa      	ldr	r0, [pc, #680]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34017028:	f008 f89a 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
3401702c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
3401702e:	3b01      	subs	r3, #1
34017030:	2bff      	cmp	r3, #255	@ 0xff
34017032:	d904      	bls.n	3401703e <HAL_RCCEx_PeriphCLKConfig+0x89a>
34017034:	f240 3102 	movw	r1, #770	@ 0x302
34017038:	48a5      	ldr	r0, [pc, #660]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3401703a:	f008 f891 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3401703e:	4aa5      	ldr	r2, [pc, #660]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34017040:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34017042:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
34017046:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
34017048:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401704c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017050:	3901      	subs	r1, #1
34017052:	4303      	orrs	r3, r0
34017054:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017058:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
3401705c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34017060:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34017064:	499b      	ldr	r1, [pc, #620]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34017066:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
3401706a:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
3401706e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34017072:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
34017076:	3a01      	subs	r2, #1
34017078:	4303      	orrs	r3, r0
3401707a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
3401707e:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34017082:	6823      	ldr	r3, [r4, #0]
34017084:	055e      	lsls	r6, r3, #21
34017086:	d540      	bpl.n	3401710a <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
34017088:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
3401708c:	2b03      	cmp	r3, #3
3401708e:	d904      	bls.n	3401709a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34017090:	f240 311d 	movw	r1, #797	@ 0x31d
34017094:	488e      	ldr	r0, [pc, #568]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34017096:	f008 f863 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3401709a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
3401709e:	2b02      	cmp	r3, #2
340170a0:	f041 854e 	bne.w	34018b40 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
340170a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
340170a8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340170ac:	d004      	beq.n	340170b8 <HAL_RCCEx_PeriphCLKConfig+0x914>
340170ae:	f240 3122 	movw	r1, #802	@ 0x322
340170b2:	4887      	ldr	r0, [pc, #540]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340170b4:	f008 f854 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
340170b8:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
340170bc:	3b01      	subs	r3, #1
340170be:	2bff      	cmp	r3, #255	@ 0xff
340170c0:	d904      	bls.n	340170cc <HAL_RCCEx_PeriphCLKConfig+0x928>
340170c2:	f240 3123 	movw	r1, #803	@ 0x323
340170c6:	4882      	ldr	r0, [pc, #520]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340170c8:	f008 f84a 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
340170cc:	4a81      	ldr	r2, [pc, #516]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340170ce:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
340170d2:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
340170d6:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
340170da:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340170de:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340170e2:	3901      	subs	r1, #1
340170e4:	4303      	orrs	r3, r0
340170e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340170ea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
340170ee:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340170f2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
340170f6:	4a77      	ldr	r2, [pc, #476]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340170f8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
340170fc:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34017100:	f023 0303 	bic.w	r3, r3, #3
34017104:	430b      	orrs	r3, r1
34017106:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
3401710a:	6823      	ldr	r3, [r4, #0]
3401710c:	04d8      	lsls	r0, r3, #19
3401710e:	d540      	bpl.n	34017192 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
34017110:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34017114:	4a70      	ldr	r2, [pc, #448]	@ (340172d8 <HAL_RCCEx_PeriphCLKConfig+0xb34>)
34017116:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401711a:	4291      	cmp	r1, r2
3401711c:	d00a      	beq.n	34017134 <HAL_RCCEx_PeriphCLKConfig+0x990>
3401711e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34017122:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017126:	4293      	cmp	r3, r2
34017128:	d004      	beq.n	34017134 <HAL_RCCEx_PeriphCLKConfig+0x990>
3401712a:	f240 313d 	movw	r1, #829	@ 0x33d
3401712e:	4868      	ldr	r0, [pc, #416]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34017130:	f008 f816 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34017134:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
34017138:	4a68      	ldr	r2, [pc, #416]	@ (340172dc <HAL_RCCEx_PeriphCLKConfig+0xb38>)
3401713a:	4293      	cmp	r3, r2
3401713c:	f041 8508 	bne.w	34018b50 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017140:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34017142:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017146:	d004      	beq.n	34017152 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34017148:	f240 3142 	movw	r1, #834	@ 0x342
3401714c:	4860      	ldr	r0, [pc, #384]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3401714e:	f008 f807 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34017152:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34017154:	3b01      	subs	r3, #1
34017156:	2bff      	cmp	r3, #255	@ 0xff
34017158:	d904      	bls.n	34017164 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
3401715a:	f240 3143 	movw	r1, #835	@ 0x343
3401715e:	485c      	ldr	r0, [pc, #368]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34017160:	f007 fffe 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34017164:	4a5b      	ldr	r2, [pc, #364]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34017166:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34017168:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3401716c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401716e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017172:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017176:	3901      	subs	r1, #1
34017178:	4303      	orrs	r3, r0
3401717a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401717e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34017182:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017186:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401718a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
3401718e:	f7ff fa25 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34017192:	6823      	ldr	r3, [r4, #0]
34017194:	0499      	lsls	r1, r3, #18
34017196:	d540      	bpl.n	3401721a <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34017198:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
3401719c:	4a50      	ldr	r2, [pc, #320]	@ (340172e0 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
3401719e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340171a2:	4291      	cmp	r1, r2
340171a4:	d00a      	beq.n	340171bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
340171a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340171aa:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340171ae:	4293      	cmp	r3, r2
340171b0:	d004      	beq.n	340171bc <HAL_RCCEx_PeriphCLKConfig+0xa18>
340171b2:	f240 316a 	movw	r1, #874	@ 0x36a
340171b6:	4846      	ldr	r0, [pc, #280]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340171b8:	f007 ffd2 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
340171bc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
340171c0:	4a48      	ldr	r2, [pc, #288]	@ (340172e4 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
340171c2:	4293      	cmp	r3, r2
340171c4:	f041 84f5 	bne.w	34018bb2 <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340171c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340171ca:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340171ce:	d004      	beq.n	340171da <HAL_RCCEx_PeriphCLKConfig+0xa36>
340171d0:	f240 316f 	movw	r1, #879	@ 0x36f
340171d4:	483e      	ldr	r0, [pc, #248]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340171d6:	f007 ffc3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340171da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340171dc:	3b01      	subs	r3, #1
340171de:	2bff      	cmp	r3, #255	@ 0xff
340171e0:	d904      	bls.n	340171ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
340171e2:	f44f 715c 	mov.w	r1, #880	@ 0x370
340171e6:	483a      	ldr	r0, [pc, #232]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340171e8:	f007 ffba 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340171ec:	4a39      	ldr	r2, [pc, #228]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
340171ee:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340171f0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340171f4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340171f6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340171fa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340171fe:	3901      	subs	r1, #1
34017200:	4303      	orrs	r3, r0
34017202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017206:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3401720a:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401720e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017212:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34017216:	f7ff f9e1 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
3401721a:	6823      	ldr	r3, [r4, #0]
3401721c:	045a      	lsls	r2, r3, #17
3401721e:	d540      	bpl.n	340172a2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34017220:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34017224:	4a30      	ldr	r2, [pc, #192]	@ (340172e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34017226:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401722a:	4291      	cmp	r1, r2
3401722c:	d00a      	beq.n	34017244 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
3401722e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34017232:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017236:	4293      	cmp	r3, r2
34017238:	d004      	beq.n	34017244 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
3401723a:	f240 3197 	movw	r1, #919	@ 0x397
3401723e:	4824      	ldr	r0, [pc, #144]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34017240:	f007 ff8e 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34017244:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34017248:	4a28      	ldr	r2, [pc, #160]	@ (340172ec <HAL_RCCEx_PeriphCLKConfig+0xb48>)
3401724a:	4293      	cmp	r3, r2
3401724c:	f041 84f6 	bne.w	34018c3c <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017250:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34017252:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017256:	d004      	beq.n	34017262 <HAL_RCCEx_PeriphCLKConfig+0xabe>
34017258:	f44f 7167 	mov.w	r1, #924	@ 0x39c
3401725c:	481c      	ldr	r0, [pc, #112]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3401725e:	f007 ff7f 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34017262:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34017264:	3b01      	subs	r3, #1
34017266:	2bff      	cmp	r3, #255	@ 0xff
34017268:	d904      	bls.n	34017274 <HAL_RCCEx_PeriphCLKConfig+0xad0>
3401726a:	f240 319d 	movw	r1, #925	@ 0x39d
3401726e:	4818      	ldr	r0, [pc, #96]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34017270:	f007 ff76 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34017274:	4a17      	ldr	r2, [pc, #92]	@ (340172d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34017276:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34017278:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3401727c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401727e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017282:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017286:	3901      	subs	r1, #1
34017288:	4303      	orrs	r3, r0
3401728a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401728e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34017292:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017296:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401729a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
3401729e:	f7ff f99d 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
340172a2:	6823      	ldr	r3, [r4, #0]
340172a4:	041b      	lsls	r3, r3, #16
340172a6:	d554      	bpl.n	34017352 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
340172a8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
340172ac:	4a10      	ldr	r2, [pc, #64]	@ (340172f0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
340172ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340172b2:	4291      	cmp	r1, r2
340172b4:	d01e      	beq.n	340172f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
340172b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340172ba:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340172be:	4293      	cmp	r3, r2
340172c0:	d018      	beq.n	340172f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
340172c2:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
340172c6:	4802      	ldr	r0, [pc, #8]	@ (340172d0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
340172c8:	f007 ff4a 	bl	3401f160 <assert_failed>
340172cc:	e012      	b.n	340172f4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
340172ce:	bf00      	nop
340172d0:	3402bd84 	.word	0x3402bd84
340172d4:	56028000 	.word	0x56028000
340172d8:	0700000c 	.word	0x0700000c
340172dc:	0702000c 	.word	0x0702000c
340172e0:	0700040c 	.word	0x0700040c
340172e4:	0702040c 	.word	0x0702040c
340172e8:	0700080c 	.word	0x0700080c
340172ec:	0702080c 	.word	0x0702080c
340172f0:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
340172f4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
340172f8:	4abd      	ldr	r2, [pc, #756]	@ (340175f0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
340172fa:	4293      	cmp	r3, r2
340172fc:	f041 84cf 	bne.w	34018c9e <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017300:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34017302:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017306:	d004      	beq.n	34017312 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34017308:	f240 31c9 	movw	r1, #969	@ 0x3c9
3401730c:	48b9      	ldr	r0, [pc, #740]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401730e:	f007 ff27 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34017312:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34017314:	3b01      	subs	r3, #1
34017316:	2bff      	cmp	r3, #255	@ 0xff
34017318:	d904      	bls.n	34017324 <HAL_RCCEx_PeriphCLKConfig+0xb80>
3401731a:	f240 31ca 	movw	r1, #970	@ 0x3ca
3401731e:	48b5      	ldr	r0, [pc, #724]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017320:	f007 ff1e 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34017324:	4ab4      	ldr	r2, [pc, #720]	@ (340175f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34017326:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34017328:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3401732c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401732e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017332:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017336:	3901      	subs	r1, #1
34017338:	4303      	orrs	r3, r0
3401733a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401733e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34017342:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017346:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401734a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
3401734e:	f7ff f945 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34017352:	6823      	ldr	r3, [r4, #0]
34017354:	03de      	lsls	r6, r3, #15
34017356:	d540      	bpl.n	340173da <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34017358:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
3401735c:	4aa7      	ldr	r2, [pc, #668]	@ (340175fc <HAL_RCCEx_PeriphCLKConfig+0xe58>)
3401735e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017362:	4291      	cmp	r1, r2
34017364:	d00a      	beq.n	3401737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34017366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401736a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401736e:	4293      	cmp	r3, r2
34017370:	d004      	beq.n	3401737c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34017372:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34017376:	489f      	ldr	r0, [pc, #636]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017378:	f007 fef2 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
3401737c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34017380:	4a9f      	ldr	r2, [pc, #636]	@ (34017600 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34017382:	4293      	cmp	r3, r2
34017384:	f041 84bc 	bne.w	34018d00 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017388:	6d23      	ldr	r3, [r4, #80]	@ 0x50
3401738a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401738e:	d004      	beq.n	3401739a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34017390:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34017394:	4897      	ldr	r0, [pc, #604]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017396:	f007 fee3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
3401739a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
3401739c:	3b01      	subs	r3, #1
3401739e:	2bff      	cmp	r3, #255	@ 0xff
340173a0:	d904      	bls.n	340173ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
340173a2:	f240 31f7 	movw	r1, #1015	@ 0x3f7
340173a6:	4893      	ldr	r0, [pc, #588]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340173a8:	f007 feda 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340173ac:	4a92      	ldr	r2, [pc, #584]	@ (340175f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340173ae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340173b0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340173b4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340173b6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340173ba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340173be:	3901      	subs	r1, #1
340173c0:	4303      	orrs	r3, r0
340173c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340173c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
340173ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340173ce:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340173d2:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
340173d6:	f7ff f901 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
340173da:	6823      	ldr	r3, [r4, #0]
340173dc:	0398      	lsls	r0, r3, #14
340173de:	d540      	bpl.n	34017462 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
340173e0:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
340173e4:	4a87      	ldr	r2, [pc, #540]	@ (34017604 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
340173e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340173ea:	4291      	cmp	r1, r2
340173ec:	d00a      	beq.n	34017404 <HAL_RCCEx_PeriphCLKConfig+0xc60>
340173ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340173f2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340173f6:	4293      	cmp	r3, r2
340173f8:	d004      	beq.n	34017404 <HAL_RCCEx_PeriphCLKConfig+0xc60>
340173fa:	f240 411e 	movw	r1, #1054	@ 0x41e
340173fe:	487d      	ldr	r0, [pc, #500]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017400:	f007 feae 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34017404:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34017408:	4a7f      	ldr	r2, [pc, #508]	@ (34017608 <HAL_RCCEx_PeriphCLKConfig+0xe64>)
3401740a:	4293      	cmp	r3, r2
3401740c:	f041 84a9 	bne.w	34018d62 <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34017410:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34017412:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017416:	d004      	beq.n	34017422 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34017418:	f240 4123 	movw	r1, #1059	@ 0x423
3401741c:	4875      	ldr	r0, [pc, #468]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401741e:	f007 fe9f 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34017422:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34017424:	3b01      	subs	r3, #1
34017426:	2bff      	cmp	r3, #255	@ 0xff
34017428:	d904      	bls.n	34017434 <HAL_RCCEx_PeriphCLKConfig+0xc90>
3401742a:	f240 4124 	movw	r1, #1060	@ 0x424
3401742e:	4871      	ldr	r0, [pc, #452]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017430:	f007 fe96 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34017434:	4a70      	ldr	r2, [pc, #448]	@ (340175f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34017436:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34017438:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
3401743c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
3401743e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017442:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017446:	3901      	subs	r1, #1
34017448:	4303      	orrs	r3, r0
3401744a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401744e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34017452:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017456:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401745a:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
3401745e:	f7ff f8bd 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34017462:	6823      	ldr	r3, [r4, #0]
34017464:	0359      	lsls	r1, r3, #13
34017466:	d540      	bpl.n	340174ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34017468:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
3401746c:	4a67      	ldr	r2, [pc, #412]	@ (3401760c <HAL_RCCEx_PeriphCLKConfig+0xe68>)
3401746e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017472:	4291      	cmp	r1, r2
34017474:	d00a      	beq.n	3401748c <HAL_RCCEx_PeriphCLKConfig+0xce8>
34017476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401747a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401747e:	4293      	cmp	r3, r2
34017480:	d004      	beq.n	3401748c <HAL_RCCEx_PeriphCLKConfig+0xce8>
34017482:	f240 414b 	movw	r1, #1099	@ 0x44b
34017486:	485b      	ldr	r0, [pc, #364]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017488:	f007 fe6a 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
3401748c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34017490:	4a5f      	ldr	r2, [pc, #380]	@ (34017610 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34017492:	4293      	cmp	r3, r2
34017494:	f041 8496 	bne.w	34018dc4 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017498:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3401749a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401749e:	d004      	beq.n	340174aa <HAL_RCCEx_PeriphCLKConfig+0xd06>
340174a0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
340174a4:	4853      	ldr	r0, [pc, #332]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340174a6:	f007 fe5b 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340174aa:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340174ac:	3b01      	subs	r3, #1
340174ae:	2bff      	cmp	r3, #255	@ 0xff
340174b0:	d904      	bls.n	340174bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
340174b2:	f240 4151 	movw	r1, #1105	@ 0x451
340174b6:	484f      	ldr	r0, [pc, #316]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340174b8:	f007 fe52 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340174bc:	4a4e      	ldr	r2, [pc, #312]	@ (340175f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340174be:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340174c0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340174c4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340174c6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340174ca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340174ce:	3901      	subs	r1, #1
340174d0:	4303      	orrs	r3, r0
340174d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340174d6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340174da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340174de:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340174e2:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
340174e6:	f7ff f879 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
340174ea:	6823      	ldr	r3, [r4, #0]
340174ec:	031a      	lsls	r2, r3, #12
340174ee:	d540      	bpl.n	34017572 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
340174f0:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
340174f4:	4a47      	ldr	r2, [pc, #284]	@ (34017614 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
340174f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340174fa:	4291      	cmp	r1, r2
340174fc:	d00a      	beq.n	34017514 <HAL_RCCEx_PeriphCLKConfig+0xd70>
340174fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34017502:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017506:	4293      	cmp	r3, r2
34017508:	d004      	beq.n	34017514 <HAL_RCCEx_PeriphCLKConfig+0xd70>
3401750a:	f240 416b 	movw	r1, #1131	@ 0x46b
3401750e:	4839      	ldr	r0, [pc, #228]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017510:	f007 fe26 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34017514:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34017518:	4a3f      	ldr	r2, [pc, #252]	@ (34017618 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
3401751a:	4293      	cmp	r3, r2
3401751c:	f041 845b 	bne.w	34018dd6 <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017520:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017522:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017526:	d004      	beq.n	34017532 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
34017528:	f44f 618e 	mov.w	r1, #1136	@ 0x470
3401752c:	4831      	ldr	r0, [pc, #196]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
3401752e:	f007 fe17 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017532:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017534:	3b01      	subs	r3, #1
34017536:	2bff      	cmp	r3, #255	@ 0xff
34017538:	d904      	bls.n	34017544 <HAL_RCCEx_PeriphCLKConfig+0xda0>
3401753a:	f240 4171 	movw	r1, #1137	@ 0x471
3401753e:	482d      	ldr	r0, [pc, #180]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017540:	f007 fe0e 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017544:	4a2c      	ldr	r2, [pc, #176]	@ (340175f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34017546:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017548:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401754c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401754e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017552:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017556:	3901      	subs	r1, #1
34017558:	4303      	orrs	r3, r0
3401755a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401755e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017562:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017566:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401756a:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
3401756e:	f7ff f835 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34017572:	6823      	ldr	r3, [r4, #0]
34017574:	02db      	lsls	r3, r3, #11
34017576:	d55b      	bpl.n	34017630 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34017578:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
3401757c:	4a27      	ldr	r2, [pc, #156]	@ (3401761c <HAL_RCCEx_PeriphCLKConfig+0xe78>)
3401757e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017582:	4291      	cmp	r1, r2
34017584:	d00a      	beq.n	3401759c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34017586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401758a:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401758e:	4293      	cmp	r3, r2
34017590:	d004      	beq.n	3401759c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34017592:	f240 418b 	movw	r1, #1163	@ 0x48b
34017596:	4817      	ldr	r0, [pc, #92]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34017598:	f007 fde2 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3401759c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
340175a0:	4a1f      	ldr	r2, [pc, #124]	@ (34017620 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
340175a2:	4293      	cmp	r3, r2
340175a4:	f041 8420 	bne.w	34018de8 <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340175a8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340175aa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340175ae:	d004      	beq.n	340175ba <HAL_RCCEx_PeriphCLKConfig+0xe16>
340175b0:	f44f 6192 	mov.w	r1, #1168	@ 0x490
340175b4:	480f      	ldr	r0, [pc, #60]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340175b6:	f007 fdd3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
340175ba:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
340175bc:	3b01      	subs	r3, #1
340175be:	2bff      	cmp	r3, #255	@ 0xff
340175c0:	d904      	bls.n	340175cc <HAL_RCCEx_PeriphCLKConfig+0xe28>
340175c2:	f240 4191 	movw	r1, #1169	@ 0x491
340175c6:	480b      	ldr	r0, [pc, #44]	@ (340175f4 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
340175c8:	f007 fdca 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340175cc:	4a0a      	ldr	r2, [pc, #40]	@ (340175f8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
340175ce:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
340175d0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
340175d4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
340175d6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340175da:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340175de:	3901      	subs	r1, #1
340175e0:	4303      	orrs	r3, r0
340175e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340175e6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340175ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340175ee:	e019      	b.n	34017624 <HAL_RCCEx_PeriphCLKConfig+0xe80>
340175f0:	07020c0c 	.word	0x07020c0c
340175f4:	3402bd84 	.word	0x3402bd84
340175f8:	56028000 	.word	0x56028000
340175fc:	0700100c 	.word	0x0700100c
34017600:	0702100c 	.word	0x0702100c
34017604:	0700140c 	.word	0x0700140c
34017608:	0702140c 	.word	0x0702140c
3401760c:	0700082c 	.word	0x0700082c
34017610:	0702082c 	.word	0x0702082c
34017614:	07000c2c 	.word	0x07000c2c
34017618:	07020c2c 	.word	0x07020c2c
3401761c:	0700102c 	.word	0x0700102c
34017620:	0702102c 	.word	0x0702102c
34017624:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017628:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
3401762c:	f7fe ffd6 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34017630:	6823      	ldr	r3, [r4, #0]
34017632:	029e      	lsls	r6, r3, #10
34017634:	d540      	bpl.n	340176b8 <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34017636:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
3401763a:	4ac2      	ldr	r2, [pc, #776]	@ (34017944 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
3401763c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017640:	4291      	cmp	r1, r2
34017642:	d00a      	beq.n	3401765a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34017644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34017648:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3401764c:	4293      	cmp	r3, r2
3401764e:	d004      	beq.n	3401765a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34017650:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34017654:	48bc      	ldr	r0, [pc, #752]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017656:	f007 fd83 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
3401765a:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
3401765e:	4abb      	ldr	r2, [pc, #748]	@ (3401794c <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
34017660:	4293      	cmp	r3, r2
34017662:	f041 83ca 	bne.w	34018dfa <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34017666:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34017668:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401766c:	d004      	beq.n	34017678 <HAL_RCCEx_PeriphCLKConfig+0xed4>
3401766e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34017672:	48b5      	ldr	r0, [pc, #724]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017674:	f007 fd74 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017678:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3401767a:	3b01      	subs	r3, #1
3401767c:	2bff      	cmp	r3, #255	@ 0xff
3401767e:	d904      	bls.n	3401768a <HAL_RCCEx_PeriphCLKConfig+0xee6>
34017680:	f240 41b1 	movw	r1, #1201	@ 0x4b1
34017684:	48b0      	ldr	r0, [pc, #704]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017686:	f007 fd6b 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401768a:	4ab1      	ldr	r2, [pc, #708]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401768c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401768e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34017692:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34017694:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017698:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401769c:	3901      	subs	r1, #1
3401769e:	4303      	orrs	r3, r0
340176a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340176a4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340176a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340176ac:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340176b0:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
340176b4:	f7fe ff92 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
340176b8:	6823      	ldr	r3, [r4, #0]
340176ba:	0258      	lsls	r0, r3, #9
340176bc:	d540      	bpl.n	34017740 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
340176be:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
340176c2:	4aa4      	ldr	r2, [pc, #656]	@ (34017954 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
340176c4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340176c8:	4291      	cmp	r1, r2
340176ca:	d00a      	beq.n	340176e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
340176cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
340176d0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340176d4:	4293      	cmp	r3, r2
340176d6:	d004      	beq.n	340176e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
340176d8:	f240 41cb 	movw	r1, #1227	@ 0x4cb
340176dc:	489a      	ldr	r0, [pc, #616]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340176de:	f007 fd3f 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
340176e2:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
340176e6:	4a9c      	ldr	r2, [pc, #624]	@ (34017958 <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
340176e8:	4293      	cmp	r3, r2
340176ea:	f041 838f 	bne.w	34018e0c <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340176ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340176f0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340176f4:	d004      	beq.n	34017700 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
340176f6:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
340176fa:	4893      	ldr	r0, [pc, #588]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340176fc:	f007 fd30 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34017700:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34017702:	3b01      	subs	r3, #1
34017704:	2bff      	cmp	r3, #255	@ 0xff
34017706:	d904      	bls.n	34017712 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34017708:	f240 41d1 	movw	r1, #1233	@ 0x4d1
3401770c:	488e      	ldr	r0, [pc, #568]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401770e:	f007 fd27 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34017712:	4a8f      	ldr	r2, [pc, #572]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34017714:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34017716:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401771a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3401771c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017720:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017724:	3901      	subs	r1, #1
34017726:	4303      	orrs	r3, r0
34017728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401772c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34017730:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34017734:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017738:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
3401773c:	f7fe ff4e 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34017740:	6823      	ldr	r3, [r4, #0]
34017742:	0219      	lsls	r1, r3, #8
34017744:	d546      	bpl.n	340177d4 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
34017746:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3401774a:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
3401774e:	d00c      	beq.n	3401776a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34017750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34017754:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
34017758:	d007      	beq.n	3401776a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
3401775a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401775e:	d004      	beq.n	3401776a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34017760:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34017764:	4878      	ldr	r0, [pc, #480]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017766:	f007 fcfb 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3401776a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3401776e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34017772:	f041 8354 	bne.w	34018e1e <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017776:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017778:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401777c:	d004      	beq.n	34017788 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
3401777e:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34017782:	4871      	ldr	r0, [pc, #452]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017784:	f007 fcec 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017788:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401778a:	3b01      	subs	r3, #1
3401778c:	2bff      	cmp	r3, #255	@ 0xff
3401778e:	d904      	bls.n	3401779a <HAL_RCCEx_PeriphCLKConfig+0xff6>
34017790:	f240 41f1 	movw	r1, #1265	@ 0x4f1
34017794:	486c      	ldr	r0, [pc, #432]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017796:	f007 fce3 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401779a:	4a6d      	ldr	r2, [pc, #436]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401779c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401779e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340177a2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340177a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340177a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340177ac:	3901      	subs	r1, #1
340177ae:	4303      	orrs	r3, r0
340177b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340177b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340177b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340177bc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
340177c0:	4a63      	ldr	r2, [pc, #396]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340177c2:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
340177c6:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
340177ca:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
340177ce:	430b      	orrs	r3, r1
340177d0:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
340177d4:	6823      	ldr	r3, [r4, #0]
340177d6:	01da      	lsls	r2, r3, #7
340177d8:	d542      	bpl.n	34017860 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
340177da:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
340177de:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
340177e2:	d004      	beq.n	340177ee <HAL_RCCEx_PeriphCLKConfig+0x104a>
340177e4:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
340177e8:	4857      	ldr	r0, [pc, #348]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340177ea:	f007 fcb9 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
340177ee:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
340177f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
340177f6:	f041 8343 	bne.w	34018e80 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
340177fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
340177fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017802:	d004      	beq.n	3401780e <HAL_RCCEx_PeriphCLKConfig+0x106a>
34017804:	f240 511d 	movw	r1, #1309	@ 0x51d
34017808:	484f      	ldr	r0, [pc, #316]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401780a:	f007 fca9 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
3401780e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
34017812:	3b01      	subs	r3, #1
34017814:	2bff      	cmp	r3, #255	@ 0xff
34017816:	d904      	bls.n	34017822 <HAL_RCCEx_PeriphCLKConfig+0x107e>
34017818:	f240 511e 	movw	r1, #1310	@ 0x51e
3401781c:	484a      	ldr	r0, [pc, #296]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401781e:	f007 fc9f 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34017822:	4a4b      	ldr	r2, [pc, #300]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34017824:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
34017828:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
3401782c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
34017830:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017834:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017838:	3901      	subs	r1, #1
3401783a:	4303      	orrs	r3, r0
3401783c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017840:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34017844:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34017848:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
3401784c:	4a40      	ldr	r2, [pc, #256]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3401784e:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
34017852:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
34017856:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3401785a:	430b      	orrs	r3, r1
3401785c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34017860:	6823      	ldr	r3, [r4, #0]
34017862:	019b      	lsls	r3, r3, #6
34017864:	d540      	bpl.n	340178e8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
34017866:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
3401786a:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3401786e:	d007      	beq.n	34017880 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34017870:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34017874:	d004      	beq.n	34017880 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34017876:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3401787a:	4833      	ldr	r0, [pc, #204]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401787c:	f007 fc70 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34017880:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
34017884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34017888:	f041 8303 	bne.w	34018e92 <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3401788c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401788e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017892:	d004      	beq.n	3401789e <HAL_RCCEx_PeriphCLKConfig+0x10fa>
34017894:	f240 513d 	movw	r1, #1341	@ 0x53d
34017898:	482b      	ldr	r0, [pc, #172]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401789a:	f007 fc61 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3401789e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340178a0:	3b01      	subs	r3, #1
340178a2:	2bff      	cmp	r3, #255	@ 0xff
340178a4:	d904      	bls.n	340178b0 <HAL_RCCEx_PeriphCLKConfig+0x110c>
340178a6:	f240 513e 	movw	r1, #1342	@ 0x53e
340178aa:	4827      	ldr	r0, [pc, #156]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340178ac:	f007 fc58 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340178b0:	4a27      	ldr	r2, [pc, #156]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340178b2:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340178b4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340178b8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340178ba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340178be:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340178c2:	3901      	subs	r1, #1
340178c4:	4303      	orrs	r3, r0
340178c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340178ca:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
340178ce:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
340178d0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
340178d4:	4a1e      	ldr	r2, [pc, #120]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
340178d6:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
340178da:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
340178de:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
340178e2:	430b      	orrs	r3, r1
340178e4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
340178e8:	6823      	ldr	r3, [r4, #0]
340178ea:	015e      	lsls	r6, r3, #5
340178ec:	d54e      	bpl.n	3401798c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
340178ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
340178f2:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
340178f6:	d004      	beq.n	34017902 <HAL_RCCEx_PeriphCLKConfig+0x115e>
340178f8:	f240 5165 	movw	r1, #1381	@ 0x565
340178fc:	4812      	ldr	r0, [pc, #72]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
340178fe:	f007 fc2f 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34017902:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
34017906:	2b20      	cmp	r3, #32
34017908:	f041 82f3 	bne.w	34018ef2 <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3401790c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34017910:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017914:	d004      	beq.n	34017920 <HAL_RCCEx_PeriphCLKConfig+0x117c>
34017916:	f240 516a 	movw	r1, #1386	@ 0x56a
3401791a:	480b      	ldr	r0, [pc, #44]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3401791c:	f007 fc20 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
34017920:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34017924:	3b01      	subs	r3, #1
34017926:	2bff      	cmp	r3, #255	@ 0xff
34017928:	d904      	bls.n	34017934 <HAL_RCCEx_PeriphCLKConfig+0x1190>
3401792a:	f240 516b 	movw	r1, #1387	@ 0x56b
3401792e:	4806      	ldr	r0, [pc, #24]	@ (34017948 <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34017930:	f007 fc16 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34017934:	4a06      	ldr	r2, [pc, #24]	@ (34017950 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34017936:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
3401793a:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3401793e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34017942:	e00b      	b.n	3401795c <HAL_RCCEx_PeriphCLKConfig+0x11b8>
34017944:	0700142c 	.word	0x0700142c
34017948:	3402bd84 	.word	0x3402bd84
3401794c:	0702142c 	.word	0x0702142c
34017950:	56028000 	.word	0x56028000
34017954:	0700182c 	.word	0x0700182c
34017958:	0702182c 	.word	0x0702182c
3401795c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017960:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017964:	3901      	subs	r1, #1
34017966:	4303      	orrs	r3, r0
34017968:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401796c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34017970:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34017974:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34017978:	4abc      	ldr	r2, [pc, #752]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3401797a:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
3401797e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34017982:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34017986:	430b      	orrs	r3, r1
34017988:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3401798c:	6823      	ldr	r3, [r4, #0]
3401798e:	00d8      	lsls	r0, r3, #3
34017990:	d53d      	bpl.n	34017a0e <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
34017992:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
34017996:	4ab6      	ldr	r2, [pc, #728]	@ (34017c70 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
34017998:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3401799c:	4293      	cmp	r3, r2
3401799e:	d008      	beq.n	340179b2 <HAL_RCCEx_PeriphCLKConfig+0x120e>
340179a0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340179a4:	4293      	cmp	r3, r2
340179a6:	d004      	beq.n	340179b2 <HAL_RCCEx_PeriphCLKConfig+0x120e>
340179a8:	f240 5185 	movw	r1, #1413	@ 0x585
340179ac:	48b1      	ldr	r0, [pc, #708]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340179ae:	f007 fbd7 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
340179b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
340179b6:	4ab0      	ldr	r2, [pc, #704]	@ (34017c78 <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
340179b8:	4293      	cmp	r3, r2
340179ba:	f041 82c1 	bne.w	34018f40 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
340179be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
340179c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340179c4:	d004      	beq.n	340179d0 <HAL_RCCEx_PeriphCLKConfig+0x122c>
340179c6:	f240 518a 	movw	r1, #1418	@ 0x58a
340179ca:	48aa      	ldr	r0, [pc, #680]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340179cc:	f007 fbc8 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
340179d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
340179d2:	3b01      	subs	r3, #1
340179d4:	2bff      	cmp	r3, #255	@ 0xff
340179d6:	d904      	bls.n	340179e2 <HAL_RCCEx_PeriphCLKConfig+0x123e>
340179d8:	f240 518b 	movw	r1, #1419	@ 0x58b
340179dc:	48a5      	ldr	r0, [pc, #660]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
340179de:	f007 fbbf 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340179e2:	4aa2      	ldr	r2, [pc, #648]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
340179e4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
340179e6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
340179ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
340179ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340179f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340179f4:	3901      	subs	r1, #1
340179f6:	4303      	orrs	r3, r0
340179f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340179fc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34017a00:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017a02:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017a06:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
34017a0a:	f7fe fde7 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34017a0e:	6823      	ldr	r3, [r4, #0]
34017a10:	0099      	lsls	r1, r3, #2
34017a12:	d53d      	bpl.n	34017a90 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
34017a14:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34017a18:	4a98      	ldr	r2, [pc, #608]	@ (34017c7c <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
34017a1a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34017a1e:	4293      	cmp	r3, r2
34017a20:	d008      	beq.n	34017a34 <HAL_RCCEx_PeriphCLKConfig+0x1290>
34017a22:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017a26:	4293      	cmp	r3, r2
34017a28:	d004      	beq.n	34017a34 <HAL_RCCEx_PeriphCLKConfig+0x1290>
34017a2a:	f240 51b2 	movw	r1, #1458	@ 0x5b2
34017a2e:	4891      	ldr	r0, [pc, #580]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017a30:	f007 fb96 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34017a34:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
34017a38:	4a91      	ldr	r2, [pc, #580]	@ (34017c80 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
34017a3a:	4293      	cmp	r3, r2
34017a3c:	f041 82b0 	bne.w	34018fa0 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34017a40:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34017a42:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017a46:	d004      	beq.n	34017a52 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
34017a48:	f240 51b7 	movw	r1, #1463	@ 0x5b7
34017a4c:	4889      	ldr	r0, [pc, #548]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017a4e:	f007 fb87 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34017a52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34017a54:	3b01      	subs	r3, #1
34017a56:	2bff      	cmp	r3, #255	@ 0xff
34017a58:	d904      	bls.n	34017a64 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
34017a5a:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
34017a5e:	4885      	ldr	r0, [pc, #532]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017a60:	f007 fb7e 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34017a64:	4a81      	ldr	r2, [pc, #516]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34017a66:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34017a68:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34017a6c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34017a6e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017a72:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017a76:	3901      	subs	r1, #1
34017a78:	4303      	orrs	r3, r0
34017a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017a7e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34017a82:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017a84:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017a88:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
34017a8c:	f7fe fda6 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34017a90:	6863      	ldr	r3, [r4, #4]
34017a92:	07da      	lsls	r2, r3, #31
34017a94:	d53b      	bpl.n	34017b0e <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
34017a96:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34017a9a:	2b06      	cmp	r3, #6
34017a9c:	d904      	bls.n	34017aa8 <HAL_RCCEx_PeriphCLKConfig+0x1304>
34017a9e:	f240 51df 	movw	r1, #1503	@ 0x5df
34017aa2:	4874      	ldr	r0, [pc, #464]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017aa4:	f007 fb5c 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34017aa8:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34017aac:	2b02      	cmp	r3, #2
34017aae:	f041 82a7 	bne.w	34019000 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34017ab2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34017ab4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017ab8:	d004      	beq.n	34017ac4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
34017aba:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34017abe:	486d      	ldr	r0, [pc, #436]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017ac0:	f007 fb4e 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34017ac4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34017ac6:	3b01      	subs	r3, #1
34017ac8:	2bff      	cmp	r3, #255	@ 0xff
34017aca:	d904      	bls.n	34017ad6 <HAL_RCCEx_PeriphCLKConfig+0x1332>
34017acc:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34017ad0:	4868      	ldr	r0, [pc, #416]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017ad2:	f007 fb45 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34017ad6:	4a65      	ldr	r2, [pc, #404]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34017ad8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34017ada:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34017ade:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34017ae0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017ae4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017ae8:	3901      	subs	r1, #1
34017aea:	4303      	orrs	r3, r0
34017aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017af0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34017af4:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017af6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34017afa:	4a5c      	ldr	r2, [pc, #368]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34017afc:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
34017b00:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
34017b04:	f023 0307 	bic.w	r3, r3, #7
34017b08:	430b      	orrs	r3, r1
34017b0a:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34017b0e:	6863      	ldr	r3, [r4, #4]
34017b10:	079b      	lsls	r3, r3, #30
34017b12:	d543      	bpl.n	34017b9c <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
34017b14:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34017b18:	4a5a      	ldr	r2, [pc, #360]	@ (34017c84 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
34017b1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017b1e:	4291      	cmp	r1, r2
34017b20:	d00e      	beq.n	34017b40 <HAL_RCCEx_PeriphCLKConfig+0x139c>
34017b22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017b26:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017b2a:	4291      	cmp	r1, r2
34017b2c:	d008      	beq.n	34017b40 <HAL_RCCEx_PeriphCLKConfig+0x139c>
34017b2e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017b32:	4293      	cmp	r3, r2
34017b34:	d004      	beq.n	34017b40 <HAL_RCCEx_PeriphCLKConfig+0x139c>
34017b36:	f240 610c 	movw	r1, #1548	@ 0x60c
34017b3a:	484e      	ldr	r0, [pc, #312]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017b3c:	f007 fb10 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34017b40:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34017b44:	4a50      	ldr	r2, [pc, #320]	@ (34017c88 <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
34017b46:	4293      	cmp	r3, r2
34017b48:	f041 8288 	bne.w	3401905c <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017b4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017b4e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017b52:	d004      	beq.n	34017b5e <HAL_RCCEx_PeriphCLKConfig+0x13ba>
34017b54:	f240 6111 	movw	r1, #1553	@ 0x611
34017b58:	4846      	ldr	r0, [pc, #280]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017b5a:	f007 fb01 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017b5e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017b60:	3b01      	subs	r3, #1
34017b62:	2bff      	cmp	r3, #255	@ 0xff
34017b64:	d904      	bls.n	34017b70 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
34017b66:	f240 6112 	movw	r1, #1554	@ 0x612
34017b6a:	4842      	ldr	r0, [pc, #264]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017b6c:	f007 faf8 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017b70:	4a3e      	ldr	r2, [pc, #248]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34017b72:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017b74:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017b78:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017b7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017b7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017b82:	3901      	subs	r1, #1
34017b84:	4303      	orrs	r3, r0
34017b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017b8e:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017b90:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017b94:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
34017b98:	f7fe fd20 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34017b9c:	6863      	ldr	r3, [r4, #4]
34017b9e:	075e      	lsls	r6, r3, #29
34017ba0:	d543      	bpl.n	34017c2a <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
34017ba2:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34017ba6:	4a39      	ldr	r2, [pc, #228]	@ (34017c8c <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
34017ba8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017bac:	4291      	cmp	r1, r2
34017bae:	d00e      	beq.n	34017bce <HAL_RCCEx_PeriphCLKConfig+0x142a>
34017bb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017bb4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017bb8:	4291      	cmp	r1, r2
34017bba:	d008      	beq.n	34017bce <HAL_RCCEx_PeriphCLKConfig+0x142a>
34017bbc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017bc0:	4293      	cmp	r3, r2
34017bc2:	d004      	beq.n	34017bce <HAL_RCCEx_PeriphCLKConfig+0x142a>
34017bc4:	f240 6139 	movw	r1, #1593	@ 0x639
34017bc8:	482a      	ldr	r0, [pc, #168]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017bca:	f007 fac9 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34017bce:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34017bd2:	4a2f      	ldr	r2, [pc, #188]	@ (34017c90 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
34017bd4:	4293      	cmp	r3, r2
34017bd6:	f041 8272 	bne.w	340190be <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017bda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017bdc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017be0:	d004      	beq.n	34017bec <HAL_RCCEx_PeriphCLKConfig+0x1448>
34017be2:	f240 613e 	movw	r1, #1598	@ 0x63e
34017be6:	4823      	ldr	r0, [pc, #140]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017be8:	f007 faba 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017bec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017bee:	3b01      	subs	r3, #1
34017bf0:	2bff      	cmp	r3, #255	@ 0xff
34017bf2:	d904      	bls.n	34017bfe <HAL_RCCEx_PeriphCLKConfig+0x145a>
34017bf4:	f240 613f 	movw	r1, #1599	@ 0x63f
34017bf8:	481e      	ldr	r0, [pc, #120]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017bfa:	f007 fab1 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017bfe:	4a1b      	ldr	r2, [pc, #108]	@ (34017c6c <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34017c00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017c02:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017c06:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017c08:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017c0c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017c10:	3901      	subs	r1, #1
34017c12:	4303      	orrs	r3, r0
34017c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017c1c:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017c1e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017c22:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
34017c26:	f7fe fcd9 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34017c2a:	6863      	ldr	r3, [r4, #4]
34017c2c:	0718      	lsls	r0, r3, #28
34017c2e:	d55d      	bpl.n	34017cec <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
34017c30:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34017c34:	4a17      	ldr	r2, [pc, #92]	@ (34017c94 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
34017c36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017c3a:	4291      	cmp	r1, r2
34017c3c:	d00e      	beq.n	34017c5c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34017c3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017c42:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017c46:	4291      	cmp	r1, r2
34017c48:	d008      	beq.n	34017c5c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34017c4a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017c4e:	4293      	cmp	r3, r2
34017c50:	d004      	beq.n	34017c5c <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34017c52:	f240 6166 	movw	r1, #1638	@ 0x666
34017c56:	4807      	ldr	r0, [pc, #28]	@ (34017c74 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34017c58:	f007 fa82 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34017c5c:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34017c60:	4a0d      	ldr	r2, [pc, #52]	@ (34017c98 <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
34017c62:	4293      	cmp	r3, r2
34017c64:	f041 825c 	bne.w	34019120 <HAL_RCCEx_PeriphCLKConfig+0x297c>
34017c68:	e018      	b.n	34017c9c <HAL_RCCEx_PeriphCLKConfig+0x14f8>
34017c6a:	bf00      	nop
34017c6c:	56028000 	.word	0x56028000
34017c70:	07001418 	.word	0x07001418
34017c74:	3402bd84 	.word	0x3402bd84
34017c78:	07021418 	.word	0x07021418
34017c7c:	07001818 	.word	0x07001818
34017c80:	07021818 	.word	0x07021818
34017c84:	07000420 	.word	0x07000420
34017c88:	07020420 	.word	0x07020420
34017c8c:	07000820 	.word	0x07000820
34017c90:	07020820 	.word	0x07020820
34017c94:	07000c20 	.word	0x07000c20
34017c98:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017c9e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017ca2:	d004      	beq.n	34017cae <HAL_RCCEx_PeriphCLKConfig+0x150a>
34017ca4:	f240 616b 	movw	r1, #1643	@ 0x66b
34017ca8:	48bb      	ldr	r0, [pc, #748]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017caa:	f007 fa59 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017cae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017cb0:	3b01      	subs	r3, #1
34017cb2:	2bff      	cmp	r3, #255	@ 0xff
34017cb4:	d904      	bls.n	34017cc0 <HAL_RCCEx_PeriphCLKConfig+0x151c>
34017cb6:	f240 616c 	movw	r1, #1644	@ 0x66c
34017cba:	48b7      	ldr	r0, [pc, #732]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017cbc:	f007 fa50 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017cc0:	4ab6      	ldr	r2, [pc, #728]	@ (34017f9c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34017cc2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017cc4:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017cc8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017cca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017cce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017cd2:	3901      	subs	r1, #1
34017cd4:	4303      	orrs	r3, r0
34017cd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017cde:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017ce0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017ce4:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
34017ce8:	f7fe fc78 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34017cec:	6863      	ldr	r3, [r4, #4]
34017cee:	06d9      	lsls	r1, r3, #27
34017cf0:	d544      	bpl.n	34017d7c <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
34017cf2:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34017cf6:	4aaa      	ldr	r2, [pc, #680]	@ (34017fa0 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
34017cf8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017cfc:	4291      	cmp	r1, r2
34017cfe:	d00e      	beq.n	34017d1e <HAL_RCCEx_PeriphCLKConfig+0x157a>
34017d00:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017d04:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017d08:	4291      	cmp	r1, r2
34017d0a:	d008      	beq.n	34017d1e <HAL_RCCEx_PeriphCLKConfig+0x157a>
34017d0c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017d10:	4293      	cmp	r3, r2
34017d12:	d004      	beq.n	34017d1e <HAL_RCCEx_PeriphCLKConfig+0x157a>
34017d14:	f240 6193 	movw	r1, #1683	@ 0x693
34017d18:	489f      	ldr	r0, [pc, #636]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017d1a:	f007 fa21 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34017d1e:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
34017d22:	4aa0      	ldr	r2, [pc, #640]	@ (34017fa4 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
34017d24:	4293      	cmp	r3, r2
34017d26:	f041 822c 	bne.w	34019182 <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017d2a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017d2c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017d30:	d004      	beq.n	34017d3c <HAL_RCCEx_PeriphCLKConfig+0x1598>
34017d32:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
34017d36:	4898      	ldr	r0, [pc, #608]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017d38:	f007 fa12 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017d3c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017d3e:	3b01      	subs	r3, #1
34017d40:	2bff      	cmp	r3, #255	@ 0xff
34017d42:	d904      	bls.n	34017d4e <HAL_RCCEx_PeriphCLKConfig+0x15aa>
34017d44:	f240 6199 	movw	r1, #1689	@ 0x699
34017d48:	4893      	ldr	r0, [pc, #588]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017d4a:	f007 fa09 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017d4e:	4a93      	ldr	r2, [pc, #588]	@ (34017f9c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34017d50:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017d52:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017d56:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017d58:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017d5c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017d60:	3901      	subs	r1, #1
34017d62:	4303      	orrs	r3, r0
34017d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017d68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017d70:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017d74:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
34017d78:	f7fe fc30 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34017d7c:	6863      	ldr	r3, [r4, #4]
34017d7e:	069a      	lsls	r2, r3, #26
34017d80:	d544      	bpl.n	34017e0c <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34017d82:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34017d86:	4a88      	ldr	r2, [pc, #544]	@ (34017fa8 <HAL_RCCEx_PeriphCLKConfig+0x1804>)
34017d88:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017d8c:	4291      	cmp	r1, r2
34017d8e:	d00e      	beq.n	34017dae <HAL_RCCEx_PeriphCLKConfig+0x160a>
34017d90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017d94:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017d98:	4291      	cmp	r1, r2
34017d9a:	d008      	beq.n	34017dae <HAL_RCCEx_PeriphCLKConfig+0x160a>
34017d9c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017da0:	4293      	cmp	r3, r2
34017da2:	d004      	beq.n	34017dae <HAL_RCCEx_PeriphCLKConfig+0x160a>
34017da4:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
34017da8:	487b      	ldr	r0, [pc, #492]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017daa:	f007 f9d9 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34017dae:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34017db2:	4a7e      	ldr	r2, [pc, #504]	@ (34017fac <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34017db4:	4293      	cmp	r3, r2
34017db6:	f041 8231 	bne.w	3401921c <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017dba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017dbc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017dc0:	d004      	beq.n	34017dcc <HAL_RCCEx_PeriphCLKConfig+0x1628>
34017dc2:	f240 61c5 	movw	r1, #1733	@ 0x6c5
34017dc6:	4874      	ldr	r0, [pc, #464]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017dc8:	f007 f9ca 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017dcc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017dce:	3b01      	subs	r3, #1
34017dd0:	2bff      	cmp	r3, #255	@ 0xff
34017dd2:	d904      	bls.n	34017dde <HAL_RCCEx_PeriphCLKConfig+0x163a>
34017dd4:	f240 61c6 	movw	r1, #1734	@ 0x6c6
34017dd8:	486f      	ldr	r0, [pc, #444]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017dda:	f007 f9c1 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017dde:	4a6f      	ldr	r2, [pc, #444]	@ (34017f9c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34017de0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017de2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017de6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017de8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017dec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017df0:	3901      	subs	r1, #1
34017df2:	4303      	orrs	r3, r0
34017df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017df8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017e00:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017e04:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
34017e08:	f7fe fbe8 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34017e0c:	6863      	ldr	r3, [r4, #4]
34017e0e:	065b      	lsls	r3, r3, #25
34017e10:	d543      	bpl.n	34017e9a <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
34017e12:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34017e16:	4a66      	ldr	r2, [pc, #408]	@ (34017fb0 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
34017e18:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017e1c:	4291      	cmp	r1, r2
34017e1e:	d00e      	beq.n	34017e3e <HAL_RCCEx_PeriphCLKConfig+0x169a>
34017e20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017e24:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017e28:	4291      	cmp	r1, r2
34017e2a:	d008      	beq.n	34017e3e <HAL_RCCEx_PeriphCLKConfig+0x169a>
34017e2c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017e30:	4293      	cmp	r3, r2
34017e32:	d004      	beq.n	34017e3e <HAL_RCCEx_PeriphCLKConfig+0x169a>
34017e34:	f240 61ed 	movw	r1, #1773	@ 0x6ed
34017e38:	4857      	ldr	r0, [pc, #348]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017e3a:	f007 f991 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34017e3e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34017e42:	4a5c      	ldr	r2, [pc, #368]	@ (34017fb4 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34017e44:	4293      	cmp	r3, r2
34017e46:	f041 821a 	bne.w	3401927e <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34017e4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34017e4c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017e50:	d004      	beq.n	34017e5c <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34017e52:	f240 61f2 	movw	r1, #1778	@ 0x6f2
34017e56:	4850      	ldr	r0, [pc, #320]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017e58:	f007 f982 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34017e5c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34017e5e:	3b01      	subs	r3, #1
34017e60:	2bff      	cmp	r3, #255	@ 0xff
34017e62:	d904      	bls.n	34017e6e <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34017e64:	f240 61f3 	movw	r1, #1779	@ 0x6f3
34017e68:	484b      	ldr	r0, [pc, #300]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017e6a:	f007 f979 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34017e6e:	4a4b      	ldr	r2, [pc, #300]	@ (34017f9c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34017e70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34017e72:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34017e76:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34017e78:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017e7c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017e80:	3901      	subs	r1, #1
34017e82:	4303      	orrs	r3, r0
34017e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017e88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34017e8c:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017e8e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017e92:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
34017e96:	f7fe fba1 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34017e9a:	6863      	ldr	r3, [r4, #4]
34017e9c:	05de      	lsls	r6, r3, #23
34017e9e:	d544      	bpl.n	34017f2a <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34017ea0:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34017ea4:	4a44      	ldr	r2, [pc, #272]	@ (34017fb8 <HAL_RCCEx_PeriphCLKConfig+0x1814>)
34017ea6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017eaa:	4291      	cmp	r1, r2
34017eac:	d00e      	beq.n	34017ecc <HAL_RCCEx_PeriphCLKConfig+0x1728>
34017eae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017eb2:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017eb6:	4291      	cmp	r1, r2
34017eb8:	d008      	beq.n	34017ecc <HAL_RCCEx_PeriphCLKConfig+0x1728>
34017eba:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017ebe:	4293      	cmp	r3, r2
34017ec0:	d004      	beq.n	34017ecc <HAL_RCCEx_PeriphCLKConfig+0x1728>
34017ec2:	f240 711a 	movw	r1, #1818	@ 0x71a
34017ec6:	4834      	ldr	r0, [pc, #208]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017ec8:	f007 f94a 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34017ecc:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34017ed0:	4a3a      	ldr	r2, [pc, #232]	@ (34017fbc <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34017ed2:	4293      	cmp	r3, r2
34017ed4:	f041 8204 	bne.w	340192e0 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017ed8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017eda:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017ede:	d004      	beq.n	34017eea <HAL_RCCEx_PeriphCLKConfig+0x1746>
34017ee0:	f240 711f 	movw	r1, #1823	@ 0x71f
34017ee4:	482c      	ldr	r0, [pc, #176]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017ee6:	f007 f93b 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017eea:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017eec:	3b01      	subs	r3, #1
34017eee:	2bff      	cmp	r3, #255	@ 0xff
34017ef0:	d904      	bls.n	34017efc <HAL_RCCEx_PeriphCLKConfig+0x1758>
34017ef2:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
34017ef6:	4828      	ldr	r0, [pc, #160]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017ef8:	f007 f932 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017efc:	4a27      	ldr	r2, [pc, #156]	@ (34017f9c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34017efe:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017f00:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017f04:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017f06:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017f0a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017f0e:	3901      	subs	r1, #1
34017f10:	4303      	orrs	r3, r0
34017f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017f16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017f1e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017f22:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
34017f26:	f7fe fb59 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34017f2a:	6863      	ldr	r3, [r4, #4]
34017f2c:	0598      	lsls	r0, r3, #22
34017f2e:	d55d      	bpl.n	34017fec <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
34017f30:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34017f34:	4a22      	ldr	r2, [pc, #136]	@ (34017fc0 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
34017f36:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017f3a:	4291      	cmp	r1, r2
34017f3c:	d00e      	beq.n	34017f5c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34017f3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34017f42:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34017f46:	4291      	cmp	r1, r2
34017f48:	d008      	beq.n	34017f5c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34017f4a:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34017f4e:	4293      	cmp	r3, r2
34017f50:	d004      	beq.n	34017f5c <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34017f52:	f240 7147 	movw	r1, #1863	@ 0x747
34017f56:	4810      	ldr	r0, [pc, #64]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017f58:	f007 f902 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34017f5c:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34017f60:	4a18      	ldr	r2, [pc, #96]	@ (34017fc4 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34017f62:	4293      	cmp	r3, r2
34017f64:	f041 81ed 	bne.w	34019342 <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34017f68:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34017f6a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34017f6e:	d004      	beq.n	34017f7a <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34017f70:	f240 714c 	movw	r1, #1868	@ 0x74c
34017f74:	4808      	ldr	r0, [pc, #32]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017f76:	f007 f8f3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34017f7a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34017f7c:	3b01      	subs	r3, #1
34017f7e:	2bff      	cmp	r3, #255	@ 0xff
34017f80:	d904      	bls.n	34017f8c <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34017f82:	f240 714d 	movw	r1, #1869	@ 0x74d
34017f86:	4804      	ldr	r0, [pc, #16]	@ (34017f98 <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34017f88:	f007 f8ea 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34017f8c:	4a03      	ldr	r2, [pc, #12]	@ (34017f9c <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34017f8e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34017f90:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34017f94:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34017f96:	e017      	b.n	34017fc8 <HAL_RCCEx_PeriphCLKConfig+0x1824>
34017f98:	3402bd84 	.word	0x3402bd84
34017f9c:	56028000 	.word	0x56028000
34017fa0:	07001020 	.word	0x07001020
34017fa4:	07021020 	.word	0x07021020
34017fa8:	07001420 	.word	0x07001420
34017fac:	07021420 	.word	0x07021420
34017fb0:	07001820 	.word	0x07001820
34017fb4:	07021820 	.word	0x07021820
34017fb8:	07000030 	.word	0x07000030
34017fbc:	07020030 	.word	0x07020030
34017fc0:	07000430 	.word	0x07000430
34017fc4:	07020430 	.word	0x07020430
34017fc8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34017fcc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34017fd0:	3901      	subs	r1, #1
34017fd2:	4303      	orrs	r3, r0
34017fd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34017fd8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34017fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34017fe0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34017fe4:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
34017fe8:	f7fe faf8 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34017fec:	6863      	ldr	r3, [r4, #4]
34017fee:	0559      	lsls	r1, r3, #21
34017ff0:	d544      	bpl.n	3401807c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
34017ff2:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34017ff6:	4abc      	ldr	r2, [pc, #752]	@ (340182e8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
34017ff8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34017ffc:	4291      	cmp	r1, r2
34017ffe:	d00e      	beq.n	3401801e <HAL_RCCEx_PeriphCLKConfig+0x187a>
34018000:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34018004:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34018008:	4291      	cmp	r1, r2
3401800a:	d008      	beq.n	3401801e <HAL_RCCEx_PeriphCLKConfig+0x187a>
3401800c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34018010:	4293      	cmp	r3, r2
34018012:	d004      	beq.n	3401801e <HAL_RCCEx_PeriphCLKConfig+0x187a>
34018014:	f240 7174 	movw	r1, #1908	@ 0x774
34018018:	48b4      	ldr	r0, [pc, #720]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3401801a:	f007 f8a1 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
3401801e:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
34018022:	4ab3      	ldr	r2, [pc, #716]	@ (340182f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
34018024:	4293      	cmp	r3, r2
34018026:	f041 81bd 	bne.w	340193a4 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401802a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401802c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018030:	d004      	beq.n	3401803c <HAL_RCCEx_PeriphCLKConfig+0x1898>
34018032:	f240 7179 	movw	r1, #1913	@ 0x779
34018036:	48ad      	ldr	r0, [pc, #692]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34018038:	f007 f892 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401803c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401803e:	3b01      	subs	r3, #1
34018040:	2bff      	cmp	r3, #255	@ 0xff
34018042:	d904      	bls.n	3401804e <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34018044:	f240 717a 	movw	r1, #1914	@ 0x77a
34018048:	48a8      	ldr	r0, [pc, #672]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3401804a:	f007 f889 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401804e:	4aa9      	ldr	r2, [pc, #676]	@ (340182f4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34018050:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34018052:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34018056:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34018058:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401805c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018060:	3901      	subs	r1, #1
34018062:	4303      	orrs	r3, r0
34018064:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018068:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3401806c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018070:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34018074:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
34018078:	f7fe fab0 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
3401807c:	6863      	ldr	r3, [r4, #4]
3401807e:	051a      	lsls	r2, r3, #20
34018080:	d544      	bpl.n	3401810c <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34018082:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34018086:	4a9c      	ldr	r2, [pc, #624]	@ (340182f8 <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
34018088:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401808c:	4291      	cmp	r1, r2
3401808e:	d00e      	beq.n	340180ae <HAL_RCCEx_PeriphCLKConfig+0x190a>
34018090:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34018094:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34018098:	4291      	cmp	r1, r2
3401809a:	d008      	beq.n	340180ae <HAL_RCCEx_PeriphCLKConfig+0x190a>
3401809c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340180a0:	4293      	cmp	r3, r2
340180a2:	d004      	beq.n	340180ae <HAL_RCCEx_PeriphCLKConfig+0x190a>
340180a4:	f240 71a1 	movw	r1, #1953	@ 0x7a1
340180a8:	4890      	ldr	r0, [pc, #576]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340180aa:	f007 f859 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
340180ae:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
340180b2:	4a92      	ldr	r2, [pc, #584]	@ (340182fc <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
340180b4:	4293      	cmp	r3, r2
340180b6:	f041 81a6 	bne.w	34019406 <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340180ba:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340180bc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340180c0:	d004      	beq.n	340180cc <HAL_RCCEx_PeriphCLKConfig+0x1928>
340180c2:	f240 71a6 	movw	r1, #1958	@ 0x7a6
340180c6:	4889      	ldr	r0, [pc, #548]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340180c8:	f007 f84a 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340180cc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340180ce:	3b01      	subs	r3, #1
340180d0:	2bff      	cmp	r3, #255	@ 0xff
340180d2:	d904      	bls.n	340180de <HAL_RCCEx_PeriphCLKConfig+0x193a>
340180d4:	f240 71a7 	movw	r1, #1959	@ 0x7a7
340180d8:	4884      	ldr	r0, [pc, #528]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340180da:	f007 f841 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340180de:	4a85      	ldr	r2, [pc, #532]	@ (340182f4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
340180e0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340180e2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340180e6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340180e8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340180ec:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340180f0:	3901      	subs	r1, #1
340180f2:	4303      	orrs	r3, r0
340180f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340180f8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340180fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018100:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34018104:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
34018108:	f7fe fa68 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
3401810c:	6863      	ldr	r3, [r4, #4]
3401810e:	04db      	lsls	r3, r3, #19
34018110:	d544      	bpl.n	3401819c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
34018112:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34018116:	4a7a      	ldr	r2, [pc, #488]	@ (34018300 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
34018118:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401811c:	4291      	cmp	r1, r2
3401811e:	d00e      	beq.n	3401813e <HAL_RCCEx_PeriphCLKConfig+0x199a>
34018120:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34018124:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34018128:	4291      	cmp	r1, r2
3401812a:	d008      	beq.n	3401813e <HAL_RCCEx_PeriphCLKConfig+0x199a>
3401812c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34018130:	4293      	cmp	r3, r2
34018132:	d004      	beq.n	3401813e <HAL_RCCEx_PeriphCLKConfig+0x199a>
34018134:	f240 71ce 	movw	r1, #1998	@ 0x7ce
34018138:	486c      	ldr	r0, [pc, #432]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3401813a:	f007 f811 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
3401813e:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34018142:	4a70      	ldr	r2, [pc, #448]	@ (34018304 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34018144:	4293      	cmp	r3, r2
34018146:	f041 818f 	bne.w	34019468 <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401814a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401814c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018150:	d004      	beq.n	3401815c <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34018152:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34018156:	4865      	ldr	r0, [pc, #404]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34018158:	f007 f802 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401815c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401815e:	3b01      	subs	r3, #1
34018160:	2bff      	cmp	r3, #255	@ 0xff
34018162:	d904      	bls.n	3401816e <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34018164:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34018168:	4860      	ldr	r0, [pc, #384]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3401816a:	f006 fff9 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401816e:	4a61      	ldr	r2, [pc, #388]	@ (340182f4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34018170:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34018172:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34018176:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34018178:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401817c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018180:	3901      	subs	r1, #1
34018182:	4303      	orrs	r3, r0
34018184:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018188:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3401818c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018190:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34018194:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34018198:	f7fe fa20 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
3401819c:	6863      	ldr	r3, [r4, #4]
3401819e:	049e      	lsls	r6, r3, #18
340181a0:	d544      	bpl.n	3401822c <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
340181a2:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
340181a6:	4a58      	ldr	r2, [pc, #352]	@ (34018308 <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
340181a8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340181ac:	4291      	cmp	r1, r2
340181ae:	d00e      	beq.n	340181ce <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
340181b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340181b4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340181b8:	4291      	cmp	r1, r2
340181ba:	d008      	beq.n	340181ce <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
340181bc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340181c0:	4293      	cmp	r3, r2
340181c2:	d004      	beq.n	340181ce <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
340181c4:	f240 71fb 	movw	r1, #2043	@ 0x7fb
340181c8:	4848      	ldr	r0, [pc, #288]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340181ca:	f006 ffc9 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
340181ce:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
340181d2:	4a4e      	ldr	r2, [pc, #312]	@ (3401830c <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
340181d4:	4293      	cmp	r3, r2
340181d6:	f041 8199 	bne.w	3401950c <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340181da:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340181dc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340181e0:	d004      	beq.n	340181ec <HAL_RCCEx_PeriphCLKConfig+0x1a48>
340181e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
340181e6:	4841      	ldr	r0, [pc, #260]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340181e8:	f006 ffba 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340181ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340181ee:	3b01      	subs	r3, #1
340181f0:	2bff      	cmp	r3, #255	@ 0xff
340181f2:	d904      	bls.n	340181fe <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
340181f4:	f640 0101 	movw	r1, #2049	@ 0x801
340181f8:	483c      	ldr	r0, [pc, #240]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
340181fa:	f006 ffb1 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340181fe:	4a3d      	ldr	r2, [pc, #244]	@ (340182f4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34018200:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34018202:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34018206:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34018208:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401820c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018210:	3901      	subs	r1, #1
34018212:	4303      	orrs	r3, r0
34018214:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018218:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3401821c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018220:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34018224:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34018228:	f7fe f9d8 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
3401822c:	6863      	ldr	r3, [r4, #4]
3401822e:	0458      	lsls	r0, r3, #17
34018230:	d544      	bpl.n	340182bc <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34018232:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34018236:	4a36      	ldr	r2, [pc, #216]	@ (34018310 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34018238:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401823c:	4291      	cmp	r1, r2
3401823e:	d00e      	beq.n	3401825e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34018240:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34018244:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34018248:	4291      	cmp	r1, r2
3401824a:	d008      	beq.n	3401825e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
3401824c:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34018250:	4293      	cmp	r3, r2
34018252:	d004      	beq.n	3401825e <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34018254:	f640 0128 	movw	r1, #2088	@ 0x828
34018258:	4824      	ldr	r0, [pc, #144]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3401825a:	f006 ff81 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
3401825e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34018262:	4a2c      	ldr	r2, [pc, #176]	@ (34018314 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34018264:	4293      	cmp	r3, r2
34018266:	f041 8182 	bne.w	3401956e <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3401826a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401826c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018270:	d004      	beq.n	3401827c <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34018272:	f640 012d 	movw	r1, #2093	@ 0x82d
34018276:	481d      	ldr	r0, [pc, #116]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34018278:	f006 ff72 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3401827c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401827e:	3b01      	subs	r3, #1
34018280:	2bff      	cmp	r3, #255	@ 0xff
34018282:	d904      	bls.n	3401828e <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34018284:	f640 012e 	movw	r1, #2094	@ 0x82e
34018288:	4818      	ldr	r0, [pc, #96]	@ (340182ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3401828a:	f006 ff69 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401828e:	4a19      	ldr	r2, [pc, #100]	@ (340182f4 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34018290:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34018292:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34018296:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34018298:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401829c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340182a0:	3901      	subs	r1, #1
340182a2:	4303      	orrs	r3, r0
340182a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340182a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340182ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340182b0:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
340182b4:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
340182b8:	f7fe f990 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
340182bc:	6863      	ldr	r3, [r4, #4]
340182be:	0419      	lsls	r1, r3, #16
340182c0:	d560      	bpl.n	34018384 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
340182c2:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
340182c6:	4a14      	ldr	r2, [pc, #80]	@ (34018318 <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
340182c8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340182cc:	4291      	cmp	r1, r2
340182ce:	d02a      	beq.n	34018326 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
340182d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340182d4:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340182d8:	4291      	cmp	r1, r2
340182da:	d024      	beq.n	34018326 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
340182dc:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340182e0:	4293      	cmp	r3, r2
340182e2:	d020      	beq.n	34018326 <HAL_RCCEx_PeriphCLKConfig+0x1b82>
340182e4:	e01a      	b.n	3401831c <HAL_RCCEx_PeriphCLKConfig+0x1b78>
340182e6:	bf00      	nop
340182e8:	07000830 	.word	0x07000830
340182ec:	3402bd84 	.word	0x3402bd84
340182f0:	07020830 	.word	0x07020830
340182f4:	56028000 	.word	0x56028000
340182f8:	07000c30 	.word	0x07000c30
340182fc:	07020c30 	.word	0x07020c30
34018300:	07001030 	.word	0x07001030
34018304:	07021030 	.word	0x07021030
34018308:	07001430 	.word	0x07001430
3401830c:	07021430 	.word	0x07021430
34018310:	07001830 	.word	0x07001830
34018314:	07021830 	.word	0x07021830
34018318:	07001c30 	.word	0x07001c30
3401831c:	f640 0155 	movw	r1, #2133	@ 0x855
34018320:	48bb      	ldr	r0, [pc, #748]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018322:	f006 ff1d 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34018326:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
3401832a:	4aba      	ldr	r2, [pc, #744]	@ (34018614 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
3401832c:	4293      	cmp	r3, r2
3401832e:	f041 814f 	bne.w	340195d0 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34018332:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34018334:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018338:	d004      	beq.n	34018344 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
3401833a:	f640 015a 	movw	r1, #2138	@ 0x85a
3401833e:	48b4      	ldr	r0, [pc, #720]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018340:	f006 ff0e 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34018344:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34018346:	3b01      	subs	r3, #1
34018348:	2bff      	cmp	r3, #255	@ 0xff
3401834a:	d904      	bls.n	34018356 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
3401834c:	f640 015b 	movw	r1, #2139	@ 0x85b
34018350:	48af      	ldr	r0, [pc, #700]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018352:	f006 ff05 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34018356:	4ab0      	ldr	r2, [pc, #704]	@ (34018618 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34018358:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401835a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401835e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34018360:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018364:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018368:	3901      	subs	r1, #1
3401836a:	4303      	orrs	r3, r0
3401836c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018370:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34018374:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018378:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401837c:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34018380:	f7fe f92c 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34018384:	6863      	ldr	r3, [r4, #4]
34018386:	03da      	lsls	r2, r3, #15
34018388:	d544      	bpl.n	34018414 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
3401838a:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
3401838e:	4aa3      	ldr	r2, [pc, #652]	@ (3401861c <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34018390:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34018394:	4291      	cmp	r1, r2
34018396:	d00e      	beq.n	340183b6 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34018398:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401839c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
340183a0:	4291      	cmp	r1, r2
340183a2:	d008      	beq.n	340183b6 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
340183a4:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
340183a8:	4293      	cmp	r3, r2
340183aa:	d004      	beq.n	340183b6 <HAL_RCCEx_PeriphCLKConfig+0x1c12>
340183ac:	f640 0182 	movw	r1, #2178	@ 0x882
340183b0:	4897      	ldr	r0, [pc, #604]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340183b2:	f006 fed5 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
340183b6:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
340183ba:	4a99      	ldr	r2, [pc, #612]	@ (34018620 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
340183bc:	4293      	cmp	r3, r2
340183be:	f041 8138 	bne.w	34019632 <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340183c2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340183c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340183c8:	d004      	beq.n	340183d4 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
340183ca:	f640 0187 	movw	r1, #2183	@ 0x887
340183ce:	4890      	ldr	r0, [pc, #576]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340183d0:	f006 fec6 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340183d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340183d6:	3b01      	subs	r3, #1
340183d8:	2bff      	cmp	r3, #255	@ 0xff
340183da:	d904      	bls.n	340183e6 <HAL_RCCEx_PeriphCLKConfig+0x1c42>
340183dc:	f640 0188 	movw	r1, #2184	@ 0x888
340183e0:	488b      	ldr	r0, [pc, #556]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340183e2:	f006 febd 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340183e6:	4a8c      	ldr	r2, [pc, #560]	@ (34018618 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
340183e8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340183ea:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340183ee:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340183f0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340183f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340183f8:	3901      	subs	r1, #1
340183fa:	4303      	orrs	r3, r0
340183fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018400:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34018404:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018408:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401840c:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34018410:	f7fe f8e4 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34018414:	6863      	ldr	r3, [r4, #4]
34018416:	039b      	lsls	r3, r3, #14
34018418:	d544      	bpl.n	340184a4 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
3401841a:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
3401841e:	4a81      	ldr	r2, [pc, #516]	@ (34018624 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
34018420:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34018424:	4291      	cmp	r1, r2
34018426:	d00e      	beq.n	34018446 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34018428:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3401842c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34018430:	4291      	cmp	r1, r2
34018432:	d008      	beq.n	34018446 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34018434:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34018438:	4293      	cmp	r3, r2
3401843a:	d004      	beq.n	34018446 <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
3401843c:	f640 01af 	movw	r1, #2223	@ 0x8af
34018440:	4873      	ldr	r0, [pc, #460]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018442:	f006 fe8d 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34018446:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
3401844a:	4a77      	ldr	r2, [pc, #476]	@ (34018628 <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
3401844c:	4293      	cmp	r3, r2
3401844e:	f041 8121 	bne.w	34019694 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34018452:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34018454:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018458:	d004      	beq.n	34018464 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
3401845a:	f640 01b4 	movw	r1, #2228	@ 0x8b4
3401845e:	486c      	ldr	r0, [pc, #432]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018460:	f006 fe7e 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34018464:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34018466:	3b01      	subs	r3, #1
34018468:	2bff      	cmp	r3, #255	@ 0xff
3401846a:	d904      	bls.n	34018476 <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
3401846c:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34018470:	4867      	ldr	r0, [pc, #412]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018472:	f006 fe75 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34018476:	4a68      	ldr	r2, [pc, #416]	@ (34018618 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34018478:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401847a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401847e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34018480:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018484:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018488:	3901      	subs	r1, #1
3401848a:	4303      	orrs	r3, r0
3401848c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018490:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34018494:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018498:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3401849c:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
340184a0:	f7fe f89c 	bl	340165dc <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
340184a4:	6863      	ldr	r3, [r4, #4]
340184a6:	035e      	lsls	r6, r3, #13
340184a8:	d51e      	bpl.n	340184e8 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
340184aa:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
340184ae:	4a5f      	ldr	r2, [pc, #380]	@ (3401862c <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
340184b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340184b4:	4291      	cmp	r1, r2
340184b6:	d00a      	beq.n	340184ce <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
340184b8:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340184bc:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
340184c0:	4293      	cmp	r3, r2
340184c2:	d004      	beq.n	340184ce <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
340184c4:	f640 01dc 	movw	r1, #2268	@ 0x8dc
340184c8:	4851      	ldr	r0, [pc, #324]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340184ca:	f006 fe49 	bl	3401f160 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
340184ce:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
340184d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340184d6:	f7fe f881 	bl	340165dc <LL_RCC_SetClockSource>
340184da:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
340184de:	2b00      	cmp	r3, #0
340184e0:	f281 8109 	bge.w	340196f6 <HAL_RCCEx_PeriphCLKConfig+0x2f52>
340184e4:	f7fe f84a 	bl	3401657c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
340184e8:	6863      	ldr	r3, [r4, #4]
340184ea:	02d8      	lsls	r0, r3, #11
340184ec:	d51e      	bpl.n	3401852c <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
340184ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
340184f2:	4a4f      	ldr	r2, [pc, #316]	@ (34018630 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
340184f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
340184f8:	4291      	cmp	r1, r2
340184fa:	d00a      	beq.n	34018512 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
340184fc:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34018500:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34018504:	4293      	cmp	r3, r2
34018506:	d004      	beq.n	34018512 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34018508:	f640 01e6 	movw	r1, #2278	@ 0x8e6
3401850c:	4840      	ldr	r0, [pc, #256]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401850e:	f006 fe27 	bl	3401f160 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34018512:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34018516:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
3401851a:	f7fe f85f 	bl	340165dc <LL_RCC_SetClockSource>
3401851e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34018522:	2b00      	cmp	r3, #0
34018524:	f281 80eb 	bge.w	340196fe <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
34018528:	f7fe f828 	bl	3401657c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
3401852c:	6863      	ldr	r3, [r4, #4]
3401852e:	0319      	lsls	r1, r3, #12
34018530:	d549      	bpl.n	340185c6 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34018532:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34018536:	4a3f      	ldr	r2, [pc, #252]	@ (34018634 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
34018538:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3401853c:	4291      	cmp	r1, r2
3401853e:	d00a      	beq.n	34018556 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34018540:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34018544:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34018548:	4293      	cmp	r3, r2
3401854a:	d004      	beq.n	34018556 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
3401854c:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34018550:	482f      	ldr	r0, [pc, #188]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018552:	f006 fe05 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34018556:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
3401855a:	4a37      	ldr	r2, [pc, #220]	@ (34018638 <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
3401855c:	4293      	cmp	r3, r2
3401855e:	f041 80d2 	bne.w	34019706 <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018562:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018564:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018568:	d004      	beq.n	34018574 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
3401856a:	f640 01f5 	movw	r1, #2293	@ 0x8f5
3401856e:	4828      	ldr	r0, [pc, #160]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018570:	f006 fdf6 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018574:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018576:	3b01      	subs	r3, #1
34018578:	2bff      	cmp	r3, #255	@ 0xff
3401857a:	d904      	bls.n	34018586 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
3401857c:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34018580:	4823      	ldr	r0, [pc, #140]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34018582:	f006 fded 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018586:	4a24      	ldr	r2, [pc, #144]	@ (34018618 <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34018588:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401858a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401858e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018590:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018594:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018598:	3901      	subs	r1, #1
3401859a:	4303      	orrs	r3, r0
3401859c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340185a0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
340185a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
340185a8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
340185ac:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
340185b0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
340185b4:	f7fe f812 	bl	340165dc <LL_RCC_SetClockSource>
340185b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
340185bc:	2b00      	cmp	r3, #0
340185be:	f281 80ab 	bge.w	34019718 <HAL_RCCEx_PeriphCLKConfig+0x2f74>
340185c2:	f7fd ffdb 	bl	3401657c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
340185c6:	6863      	ldr	r3, [r4, #4]
340185c8:	029a      	lsls	r2, r3, #10
340185ca:	d564      	bpl.n	34018696 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
340185cc:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340185d0:	4a1a      	ldr	r2, [pc, #104]	@ (3401863c <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
340185d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
340185d6:	4291      	cmp	r1, r2
340185d8:	d00a      	beq.n	340185f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
340185da:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
340185de:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
340185e2:	4293      	cmp	r3, r2
340185e4:	d004      	beq.n	340185f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
340185e6:	f44f 6111 	mov.w	r1, #2320	@ 0x910
340185ea:	4809      	ldr	r0, [pc, #36]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
340185ec:	f006 fdb8 	bl	3401f160 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
340185f0:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
340185f4:	4a12      	ldr	r2, [pc, #72]	@ (34018640 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
340185f6:	4293      	cmp	r3, r2
340185f8:	f041 8092 	bne.w	34019720 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
340185fc:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
340185fe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018602:	d01f      	beq.n	34018644 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34018604:	f640 1115 	movw	r1, #2325	@ 0x915
34018608:	4801      	ldr	r0, [pc, #4]	@ (34018610 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
3401860a:	f006 fda9 	bl	3401f160 <assert_failed>
3401860e:	e019      	b.n	34018644 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34018610:	3402bd84 	.word	0x3402bd84
34018614:	07021c30 	.word	0x07021c30
34018618:	56028000 	.word	0x56028000
3401861c:	07000034 	.word	0x07000034
34018620:	07020034 	.word	0x07020034
34018624:	07000434 	.word	0x07000434
34018628:	07020434 	.word	0x07020434
3401862c:	01001014 	.word	0x01001014
34018630:	01001814 	.word	0x01001814
34018634:	03000c14 	.word	0x03000c14
34018638:	03020c14 	.word	0x03020c14
3401863c:	03001414 	.word	0x03001414
34018640:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018644:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018646:	3b01      	subs	r3, #1
34018648:	2bff      	cmp	r3, #255	@ 0xff
3401864a:	d904      	bls.n	34018656 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
3401864c:	f640 1116 	movw	r1, #2326	@ 0x916
34018650:	48b1      	ldr	r0, [pc, #708]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34018652:	f006 fd85 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018656:	4ab1      	ldr	r2, [pc, #708]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34018658:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3401865a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
3401865e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018660:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018664:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018668:	3901      	subs	r1, #1
3401866a:	4303      	orrs	r3, r0
3401866c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018670:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018674:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018678:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
3401867c:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34018680:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34018684:	f7fd ffaa 	bl	340165dc <LL_RCC_SetClockSource>
34018688:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
3401868c:	2b00      	cmp	r3, #0
3401868e:	f281 8050 	bge.w	34019732 <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
34018692:	f7fd ff73 	bl	3401657c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34018696:	6863      	ldr	r3, [r4, #4]
34018698:	061b      	lsls	r3, r3, #24
3401869a:	d511      	bpl.n	340186c0 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
3401869c:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
340186a0:	2b03      	cmp	r3, #3
340186a2:	d904      	bls.n	340186ae <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
340186a4:	f44f 6113 	mov.w	r1, #2352	@ 0x930
340186a8:	489b      	ldr	r0, [pc, #620]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340186aa:	f006 fd59 	bl	3401f160 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
340186ae:	4a9b      	ldr	r2, [pc, #620]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340186b0:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
340186b4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
340186b6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
340186ba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
340186be:	6253      	str	r3, [r2, #36]	@ 0x24
}
340186c0:	1e28      	subs	r0, r5, #0
340186c2:	bf18      	it	ne
340186c4:	2001      	movne	r0, #1
340186c6:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
340186c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
340186ca:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340186ce:	d003      	beq.n	340186d8 <HAL_RCCEx_PeriphCLKConfig+0x1f34>
340186d0:	21e6      	movs	r1, #230	@ 0xe6
340186d2:	4891      	ldr	r0, [pc, #580]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340186d4:	f006 fd44 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
340186d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
340186da:	3b01      	subs	r3, #1
340186dc:	2bff      	cmp	r3, #255	@ 0xff
340186de:	d903      	bls.n	340186e8 <HAL_RCCEx_PeriphCLKConfig+0x1f44>
340186e0:	21e7      	movs	r1, #231	@ 0xe7
340186e2:	488d      	ldr	r0, [pc, #564]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340186e4:	f006 fd3c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340186e8:	4a8c      	ldr	r2, [pc, #560]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340186ea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
340186ec:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
340186f0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
340186f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340186f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340186fa:	3901      	subs	r1, #1
340186fc:	4303      	orrs	r3, r0
340186fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018702:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34018706:	f44f 7300 	mov.w	r3, #512	@ 0x200
3401870a:	f7fe b941 	b.w	34016990 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3401870e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018710:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018714:	d003      	beq.n	3401871e <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
34018716:	21f3      	movs	r1, #243	@ 0xf3
34018718:	487f      	ldr	r0, [pc, #508]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401871a:	f006 fd21 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3401871e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018720:	3b01      	subs	r3, #1
34018722:	2bff      	cmp	r3, #255	@ 0xff
34018724:	d903      	bls.n	3401872e <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
34018726:	21f4      	movs	r1, #244	@ 0xf4
34018728:	487b      	ldr	r0, [pc, #492]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401872a:	f006 fd19 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3401872e:	4a7b      	ldr	r2, [pc, #492]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34018730:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018732:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018736:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018738:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401873c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018740:	3901      	subs	r1, #1
34018742:	4303      	orrs	r3, r0
34018744:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018748:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3401874c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018750:	f7fe b91e 	b.w	34016990 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34018754:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34018758:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401875c:	d004      	beq.n	34018768 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
3401875e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34018762:	486d      	ldr	r0, [pc, #436]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34018764:	f006 fcfc 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
34018768:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
3401876c:	3b01      	subs	r3, #1
3401876e:	2bff      	cmp	r3, #255	@ 0xff
34018770:	d904      	bls.n	3401877c <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
34018772:	f240 1101 	movw	r1, #257	@ 0x101
34018776:	4868      	ldr	r0, [pc, #416]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34018778:	f006 fcf2 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
3401877c:	4a67      	ldr	r2, [pc, #412]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
3401877e:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34018782:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
34018786:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3401878a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401878e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018792:	3901      	subs	r1, #1
34018794:	4303      	orrs	r3, r0
34018796:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401879a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3401879e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
340187a2:	f7fe b8f5 	b.w	34016990 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
340187a6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
340187aa:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340187ae:	d004      	beq.n	340187ba <HAL_RCCEx_PeriphCLKConfig+0x2016>
340187b0:	f240 110d 	movw	r1, #269	@ 0x10d
340187b4:	4858      	ldr	r0, [pc, #352]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340187b6:	f006 fcd3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
340187ba:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
340187be:	3b01      	subs	r3, #1
340187c0:	2bff      	cmp	r3, #255	@ 0xff
340187c2:	d904      	bls.n	340187ce <HAL_RCCEx_PeriphCLKConfig+0x202a>
340187c4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
340187c8:	4853      	ldr	r0, [pc, #332]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340187ca:	f006 fcc9 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
340187ce:	4a53      	ldr	r2, [pc, #332]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340187d0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
340187d4:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
340187d8:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
340187dc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340187e0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340187e4:	3901      	subs	r1, #1
340187e6:	4303      	orrs	r3, r0
340187e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340187ec:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340187f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
340187f4:	f7fe b8cc 	b.w	34016990 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
340187f8:	4a49      	ldr	r2, [pc, #292]	@ (34018920 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
340187fa:	4293      	cmp	r3, r2
340187fc:	d123      	bne.n	34018846 <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340187fe:	6a23      	ldr	r3, [r4, #32]
34018800:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018804:	d004      	beq.n	34018810 <HAL_RCCEx_PeriphCLKConfig+0x206c>
34018806:	f44f 719b 	mov.w	r1, #310	@ 0x136
3401880a:	4843      	ldr	r0, [pc, #268]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401880c:	f006 fca8 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34018810:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34018812:	3b01      	subs	r3, #1
34018814:	2bff      	cmp	r3, #255	@ 0xff
34018816:	d904      	bls.n	34018822 <HAL_RCCEx_PeriphCLKConfig+0x207e>
34018818:	f240 1137 	movw	r1, #311	@ 0x137
3401881c:	483e      	ldr	r0, [pc, #248]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401881e:	f006 fc9f 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34018822:	4a3e      	ldr	r2, [pc, #248]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34018824:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34018826:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3401882a:	6a20      	ldr	r0, [r4, #32]
3401882c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018830:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018834:	3901      	subs	r1, #1
34018836:	4303      	orrs	r3, r0
34018838:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401883c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34018840:	2308      	movs	r3, #8
34018842:	f7fe b8e8 	b.w	34016a16 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
34018846:	4a37      	ldr	r2, [pc, #220]	@ (34018924 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
34018848:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401884a:	bf02      	ittt	eq
3401884c:	2240      	moveq	r2, #64	@ 0x40
3401884e:	4b33      	ldreq	r3, [pc, #204]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34018850:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018854:	f7fe b8e1 	b.w	34016a1a <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34018858:	4a33      	ldr	r2, [pc, #204]	@ (34018928 <HAL_RCCEx_PeriphCLKConfig+0x2184>)
3401885a:	4293      	cmp	r3, r2
3401885c:	d123      	bne.n	340188a6 <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3401885e:	6a23      	ldr	r3, [r4, #32]
34018860:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018864:	d004      	beq.n	34018870 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
34018866:	f240 1163 	movw	r1, #355	@ 0x163
3401886a:	482b      	ldr	r0, [pc, #172]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401886c:	f006 fc78 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34018870:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34018872:	3b01      	subs	r3, #1
34018874:	2bff      	cmp	r3, #255	@ 0xff
34018876:	d904      	bls.n	34018882 <HAL_RCCEx_PeriphCLKConfig+0x20de>
34018878:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3401887c:	4826      	ldr	r0, [pc, #152]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3401887e:	f006 fc6f 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34018882:	4a26      	ldr	r2, [pc, #152]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34018884:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34018886:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3401888a:	6a20      	ldr	r0, [r4, #32]
3401888c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018890:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018894:	3901      	subs	r1, #1
34018896:	4303      	orrs	r3, r0
34018898:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401889c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
340188a0:	2308      	movs	r3, #8
340188a2:	f7fe b8f5 	b.w	34016a90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
340188a6:	4a21      	ldr	r2, [pc, #132]	@ (3401892c <HAL_RCCEx_PeriphCLKConfig+0x2188>)
340188a8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340188aa:	bf02      	ittt	eq
340188ac:	2240      	moveq	r2, #64	@ 0x40
340188ae:	4b1b      	ldreq	r3, [pc, #108]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340188b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340188b4:	f7fe b8ee 	b.w	34016a94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
340188b8:	4a1d      	ldr	r2, [pc, #116]	@ (34018930 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
340188ba:	4293      	cmp	r3, r2
340188bc:	d123      	bne.n	34018906 <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
340188be:	6a23      	ldr	r3, [r4, #32]
340188c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340188c4:	d004      	beq.n	340188d0 <HAL_RCCEx_PeriphCLKConfig+0x212c>
340188c6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
340188ca:	4813      	ldr	r0, [pc, #76]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340188cc:	f006 fc48 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
340188d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
340188d2:	3b01      	subs	r3, #1
340188d4:	2bff      	cmp	r3, #255	@ 0xff
340188d6:	d904      	bls.n	340188e2 <HAL_RCCEx_PeriphCLKConfig+0x213e>
340188d8:	f240 1191 	movw	r1, #401	@ 0x191
340188dc:	480e      	ldr	r0, [pc, #56]	@ (34018918 <HAL_RCCEx_PeriphCLKConfig+0x2174>)
340188de:	f006 fc3f 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340188e2:	4a0e      	ldr	r2, [pc, #56]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
340188e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
340188e6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
340188ea:	6a20      	ldr	r0, [r4, #32]
340188ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340188f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340188f4:	3901      	subs	r1, #1
340188f6:	4303      	orrs	r3, r0
340188f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340188fc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34018900:	2308      	movs	r3, #8
34018902:	f7fe b902 	b.w	34016b0a <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34018906:	4a0b      	ldr	r2, [pc, #44]	@ (34018934 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
34018908:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401890a:	bf02      	ittt	eq
3401890c:	2240      	moveq	r2, #64	@ 0x40
3401890e:	4b03      	ldreq	r3, [pc, #12]	@ (3401891c <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34018910:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018914:	f7fe b8fb 	b.w	34016b0e <HAL_RCCEx_PeriphCLKConfig+0x36a>
34018918:	3402bd84 	.word	0x3402bd84
3401891c:	56028000 	.word	0x56028000
34018920:	03030014 	.word	0x03030014
34018924:	03010014 	.word	0x03010014
34018928:	03030414 	.word	0x03030414
3401892c:	03010414 	.word	0x03010414
34018930:	03030814 	.word	0x03030814
34018934:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34018938:	2b30      	cmp	r3, #48	@ 0x30
3401893a:	d123      	bne.n	34018984 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
3401893c:	6a23      	ldr	r3, [r4, #32]
3401893e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018942:	d004      	beq.n	3401894e <HAL_RCCEx_PeriphCLKConfig+0x21aa>
34018944:	f240 11bd 	movw	r1, #445	@ 0x1bd
34018948:	48b2      	ldr	r0, [pc, #712]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3401894a:	f006 fc09 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
3401894e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34018950:	3b01      	subs	r3, #1
34018952:	2bff      	cmp	r3, #255	@ 0xff
34018954:	d904      	bls.n	34018960 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
34018956:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3401895a:	48ae      	ldr	r0, [pc, #696]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3401895c:	f006 fc00 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34018960:	4aad      	ldr	r2, [pc, #692]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018962:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34018964:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
34018968:	6a20      	ldr	r0, [r4, #32]
3401896a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401896e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018972:	3901      	subs	r1, #1
34018974:	4303      	orrs	r3, r0
34018976:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401897a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
3401897e:	2308      	movs	r3, #8
34018980:	f7fe b8fd 	b.w	34016b7e <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34018984:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018986:	bf02      	ittt	eq
34018988:	2240      	moveq	r2, #64	@ 0x40
3401898a:	4ba3      	ldreq	r3, [pc, #652]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3401898c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018990:	f7fe b8f7 	b.w	34016b82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34018994:	4aa1      	ldr	r2, [pc, #644]	@ (34018c1c <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34018996:	4293      	cmp	r3, r2
34018998:	d123      	bne.n	340189e2 <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3401899a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401899c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340189a0:	d004      	beq.n	340189ac <HAL_RCCEx_PeriphCLKConfig+0x2208>
340189a2:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
340189a6:	489b      	ldr	r0, [pc, #620]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340189a8:	f006 fbda 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
340189ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
340189ae:	3b01      	subs	r3, #1
340189b0:	2bff      	cmp	r3, #255	@ 0xff
340189b2:	d904      	bls.n	340189be <HAL_RCCEx_PeriphCLKConfig+0x221a>
340189b4:	f240 11eb 	movw	r1, #491	@ 0x1eb
340189b8:	4896      	ldr	r0, [pc, #600]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340189ba:	f006 fbd1 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340189be:	4a96      	ldr	r2, [pc, #600]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340189c0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
340189c2:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
340189c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
340189c8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340189cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340189d0:	3901      	subs	r1, #1
340189d2:	4303      	orrs	r3, r0
340189d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340189d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
340189dc:	2310      	movs	r3, #16
340189de:	f7fe b911 	b.w	34016c04 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
340189e2:	4a8f      	ldr	r2, [pc, #572]	@ (34018c20 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
340189e4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340189e6:	bf02      	ittt	eq
340189e8:	2240      	moveq	r2, #64	@ 0x40
340189ea:	4b8b      	ldreq	r3, [pc, #556]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
340189ec:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340189f0:	f7fe b90a 	b.w	34016c08 <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
340189f4:	4a8b      	ldr	r2, [pc, #556]	@ (34018c24 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
340189f6:	4293      	cmp	r3, r2
340189f8:	d123      	bne.n	34018a42 <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
340189fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
340189fc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018a00:	d004      	beq.n	34018a0c <HAL_RCCEx_PeriphCLKConfig+0x2268>
34018a02:	f240 2117 	movw	r1, #535	@ 0x217
34018a06:	4883      	ldr	r0, [pc, #524]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018a08:	f006 fbaa 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34018a0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34018a0e:	3b01      	subs	r3, #1
34018a10:	2bff      	cmp	r3, #255	@ 0xff
34018a12:	d904      	bls.n	34018a1e <HAL_RCCEx_PeriphCLKConfig+0x227a>
34018a14:	f44f 7106 	mov.w	r1, #536	@ 0x218
34018a18:	487e      	ldr	r0, [pc, #504]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018a1a:	f006 fba1 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34018a1e:	4a7e      	ldr	r2, [pc, #504]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018a20:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34018a22:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
34018a26:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
34018a28:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018a2c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018a30:	3901      	subs	r1, #1
34018a32:	4303      	orrs	r3, r0
34018a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018a38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34018a3c:	2310      	movs	r3, #16
34018a3e:	f7fe b938 	b.w	34016cb2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34018a42:	4a79      	ldr	r2, [pc, #484]	@ (34018c28 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34018a44:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018a46:	bf02      	ittt	eq
34018a48:	2240      	moveq	r2, #64	@ 0x40
34018a4a:	4b73      	ldreq	r3, [pc, #460]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018a4c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018a50:	f7fe b931 	b.w	34016cb6 <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34018a54:	2b30      	cmp	r3, #48	@ 0x30
34018a56:	d123      	bne.n	34018aa0 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018a5a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018a5e:	d004      	beq.n	34018a6a <HAL_RCCEx_PeriphCLKConfig+0x22c6>
34018a60:	f240 2145 	movw	r1, #581	@ 0x245
34018a64:	486b      	ldr	r0, [pc, #428]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018a66:	f006 fb7b 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018a6a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018a6c:	3b01      	subs	r3, #1
34018a6e:	2bff      	cmp	r3, #255	@ 0xff
34018a70:	d904      	bls.n	34018a7c <HAL_RCCEx_PeriphCLKConfig+0x22d8>
34018a72:	f240 2146 	movw	r1, #582	@ 0x246
34018a76:	4867      	ldr	r0, [pc, #412]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018a78:	f006 fb72 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018a7c:	4a66      	ldr	r2, [pc, #408]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018a7e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34018a80:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34018a84:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34018a86:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018a8a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018a8e:	3901      	subs	r1, #1
34018a90:	4303      	orrs	r3, r0
34018a92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34018a9a:	2380      	movs	r3, #128	@ 0x80
34018a9c:	f7fe b94f 	b.w	34016d3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34018aa0:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018aa2:	bf02      	ittt	eq
34018aa4:	2240      	moveq	r2, #64	@ 0x40
34018aa6:	4b5c      	ldreq	r3, [pc, #368]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018aa8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018aac:	f7fe b949 	b.w	34016d42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34018ab0:	2b03      	cmp	r3, #3
34018ab2:	d123      	bne.n	34018afc <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018ab6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018aba:	d004      	beq.n	34018ac6 <HAL_RCCEx_PeriphCLKConfig+0x2322>
34018abc:	f240 2173 	movw	r1, #627	@ 0x273
34018ac0:	4854      	ldr	r0, [pc, #336]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018ac2:	f006 fb4d 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018ac6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018ac8:	3b01      	subs	r3, #1
34018aca:	2bff      	cmp	r3, #255	@ 0xff
34018acc:	d904      	bls.n	34018ad8 <HAL_RCCEx_PeriphCLKConfig+0x2334>
34018ace:	f44f 711d 	mov.w	r1, #628	@ 0x274
34018ad2:	4850      	ldr	r0, [pc, #320]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018ad4:	f006 fb44 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018ad8:	4a4f      	ldr	r2, [pc, #316]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018ada:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34018adc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34018ae0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34018ae2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018ae6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018aea:	3901      	subs	r1, #1
34018aec:	4303      	orrs	r3, r0
34018aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34018af6:	2380      	movs	r3, #128	@ 0x80
34018af8:	f7fe b967 	b.w	34016dca <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34018afc:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018afe:	bf02      	ittt	eq
34018b00:	2240      	moveq	r2, #64	@ 0x40
34018b02:	4b45      	ldreq	r3, [pc, #276]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018b04:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018b08:	f7fe b961 	b.w	34016dce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34018b0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018b10:	bf02      	ittt	eq
34018b12:	2240      	moveq	r2, #64	@ 0x40
34018b14:	4b40      	ldreq	r3, [pc, #256]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018b16:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018b1a:	f7fe b9ca 	b.w	34016eb2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34018b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018b22:	bf02      	ittt	eq
34018b24:	2240      	moveq	r2, #64	@ 0x40
34018b26:	4b3c      	ldreq	r3, [pc, #240]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018b28:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018b2c:	f7fe ba03 	b.w	34016f36 <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
34018b30:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018b32:	bf02      	ittt	eq
34018b34:	2240      	moveq	r2, #64	@ 0x40
34018b36:	4b38      	ldreq	r3, [pc, #224]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018b38:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018b3c:	f7fe ba92 	b.w	34017064 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34018b40:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018b42:	bf02      	ittt	eq
34018b44:	2240      	moveq	r2, #64	@ 0x40
34018b46:	4b34      	ldreq	r3, [pc, #208]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018b48:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018b4c:	f7fe bad3 	b.w	340170f6 <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34018b50:	4a36      	ldr	r2, [pc, #216]	@ (34018c2c <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34018b52:	4293      	cmp	r3, r2
34018b54:	d124      	bne.n	34018ba0 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018b56:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018b58:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018b5c:	d004      	beq.n	34018b68 <HAL_RCCEx_PeriphCLKConfig+0x23c4>
34018b5e:	f240 314f 	movw	r1, #847	@ 0x34f
34018b62:	482c      	ldr	r0, [pc, #176]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018b64:	f006 fafc 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018b68:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018b6a:	3b01      	subs	r3, #1
34018b6c:	2bff      	cmp	r3, #255	@ 0xff
34018b6e:	d904      	bls.n	34018b7a <HAL_RCCEx_PeriphCLKConfig+0x23d6>
34018b70:	f44f 7154 	mov.w	r1, #848	@ 0x350
34018b74:	4827      	ldr	r0, [pc, #156]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018b76:	f006 faf3 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018b7a:	4a27      	ldr	r2, [pc, #156]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018b7c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018b7e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018b82:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018b84:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018b88:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018b8c:	3901      	subs	r1, #1
34018b8e:	4303      	orrs	r3, r0
34018b90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018b94:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018b98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018b9c:	f7fe baf3 	b.w	34017186 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34018ba0:	4a23      	ldr	r2, [pc, #140]	@ (34018c30 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34018ba2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018ba4:	bf02      	ittt	eq
34018ba6:	2240      	moveq	r2, #64	@ 0x40
34018ba8:	4b1b      	ldreq	r3, [pc, #108]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018baa:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018bae:	f7fe baec 	b.w	3401718a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34018bb2:	4a20      	ldr	r2, [pc, #128]	@ (34018c34 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34018bb4:	4293      	cmp	r3, r2
34018bb6:	d124      	bne.n	34018c02 <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018bb8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018bba:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018bbe:	d004      	beq.n	34018bca <HAL_RCCEx_PeriphCLKConfig+0x2426>
34018bc0:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34018bc4:	4813      	ldr	r0, [pc, #76]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018bc6:	f006 facb 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018bca:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018bcc:	3b01      	subs	r3, #1
34018bce:	2bff      	cmp	r3, #255	@ 0xff
34018bd0:	d904      	bls.n	34018bdc <HAL_RCCEx_PeriphCLKConfig+0x2438>
34018bd2:	f240 317d 	movw	r1, #893	@ 0x37d
34018bd6:	480f      	ldr	r0, [pc, #60]	@ (34018c14 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34018bd8:	f006 fac2 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018bdc:	4a0e      	ldr	r2, [pc, #56]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018bde:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018be0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018be4:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018be6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018bea:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018bee:	3901      	subs	r1, #1
34018bf0:	4303      	orrs	r3, r0
34018bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018bf6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018bfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018bfe:	f7fe bb06 	b.w	3401720e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34018c02:	4a0d      	ldr	r2, [pc, #52]	@ (34018c38 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34018c04:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018c06:	bf02      	ittt	eq
34018c08:	2240      	moveq	r2, #64	@ 0x40
34018c0a:	4b03      	ldreq	r3, [pc, #12]	@ (34018c18 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34018c0c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018c10:	f7fe baff 	b.w	34017212 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
34018c14:	3402bd84 	.word	0x3402bd84
34018c18:	56028000 	.word	0x56028000
34018c1c:	0303001c 	.word	0x0303001c
34018c20:	0301001c 	.word	0x0301001c
34018c24:	0303041c 	.word	0x0303041c
34018c28:	0301041c 	.word	0x0301041c
34018c2c:	0703000c 	.word	0x0703000c
34018c30:	0701000c 	.word	0x0701000c
34018c34:	0703040c 	.word	0x0703040c
34018c38:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34018c3c:	4ab1      	ldr	r2, [pc, #708]	@ (34018f04 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
34018c3e:	4293      	cmp	r3, r2
34018c40:	d124      	bne.n	34018c8c <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018c42:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018c44:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018c48:	d004      	beq.n	34018c54 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
34018c4a:	f240 31a9 	movw	r1, #937	@ 0x3a9
34018c4e:	48ae      	ldr	r0, [pc, #696]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018c50:	f006 fa86 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018c54:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018c56:	3b01      	subs	r3, #1
34018c58:	2bff      	cmp	r3, #255	@ 0xff
34018c5a:	d904      	bls.n	34018c66 <HAL_RCCEx_PeriphCLKConfig+0x24c2>
34018c5c:	f240 31aa 	movw	r1, #938	@ 0x3aa
34018c60:	48a9      	ldr	r0, [pc, #676]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018c62:	f006 fa7d 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018c66:	4aa9      	ldr	r2, [pc, #676]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018c68:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018c6a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018c6e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018c70:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018c74:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018c78:	3901      	subs	r1, #1
34018c7a:	4303      	orrs	r3, r0
34018c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018c80:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018c84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018c88:	f7fe bb05 	b.w	34017296 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34018c8c:	4aa0      	ldr	r2, [pc, #640]	@ (34018f10 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
34018c8e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018c90:	bf02      	ittt	eq
34018c92:	2240      	moveq	r2, #64	@ 0x40
34018c94:	4b9d      	ldreq	r3, [pc, #628]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018c96:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018c9a:	f7fe bafe 	b.w	3401729a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34018c9e:	4a9d      	ldr	r2, [pc, #628]	@ (34018f14 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
34018ca0:	4293      	cmp	r3, r2
34018ca2:	d124      	bne.n	34018cee <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018ca4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018ca6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018caa:	d004      	beq.n	34018cb6 <HAL_RCCEx_PeriphCLKConfig+0x2512>
34018cac:	f240 31d6 	movw	r1, #982	@ 0x3d6
34018cb0:	4895      	ldr	r0, [pc, #596]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018cb2:	f006 fa55 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018cb6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018cb8:	3b01      	subs	r3, #1
34018cba:	2bff      	cmp	r3, #255	@ 0xff
34018cbc:	d904      	bls.n	34018cc8 <HAL_RCCEx_PeriphCLKConfig+0x2524>
34018cbe:	f240 31d7 	movw	r1, #983	@ 0x3d7
34018cc2:	4891      	ldr	r0, [pc, #580]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018cc4:	f006 fa4c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018cc8:	4a90      	ldr	r2, [pc, #576]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018cca:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018ccc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018cd0:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018cd2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018cd6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018cda:	3901      	subs	r1, #1
34018cdc:	4303      	orrs	r3, r0
34018cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018ce2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018ce6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018cea:	f7fe bb2c 	b.w	34017346 <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34018cee:	4a8a      	ldr	r2, [pc, #552]	@ (34018f18 <HAL_RCCEx_PeriphCLKConfig+0x2774>)
34018cf0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018cf2:	bf02      	ittt	eq
34018cf4:	2240      	moveq	r2, #64	@ 0x40
34018cf6:	4b85      	ldreq	r3, [pc, #532]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018cf8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018cfc:	f7fe bb25 	b.w	3401734a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34018d00:	4a86      	ldr	r2, [pc, #536]	@ (34018f1c <HAL_RCCEx_PeriphCLKConfig+0x2778>)
34018d02:	4293      	cmp	r3, r2
34018d04:	d124      	bne.n	34018d50 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018d06:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018d08:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018d0c:	d004      	beq.n	34018d18 <HAL_RCCEx_PeriphCLKConfig+0x2574>
34018d0e:	f240 4103 	movw	r1, #1027	@ 0x403
34018d12:	487d      	ldr	r0, [pc, #500]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018d14:	f006 fa24 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018d18:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018d1a:	3b01      	subs	r3, #1
34018d1c:	2bff      	cmp	r3, #255	@ 0xff
34018d1e:	d904      	bls.n	34018d2a <HAL_RCCEx_PeriphCLKConfig+0x2586>
34018d20:	f240 4104 	movw	r1, #1028	@ 0x404
34018d24:	4878      	ldr	r0, [pc, #480]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018d26:	f006 fa1b 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018d2a:	4a78      	ldr	r2, [pc, #480]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018d2c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018d2e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018d32:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018d34:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018d38:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018d3c:	3901      	subs	r1, #1
34018d3e:	4303      	orrs	r3, r0
34018d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018d44:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018d48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018d4c:	f7fe bb3f 	b.w	340173ce <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34018d50:	4a73      	ldr	r2, [pc, #460]	@ (34018f20 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
34018d52:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018d54:	bf02      	ittt	eq
34018d56:	2240      	moveq	r2, #64	@ 0x40
34018d58:	4b6c      	ldreq	r3, [pc, #432]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018d5a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018d5e:	f7fe bb38 	b.w	340173d2 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34018d62:	4a70      	ldr	r2, [pc, #448]	@ (34018f24 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
34018d64:	4293      	cmp	r3, r2
34018d66:	d124      	bne.n	34018db2 <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34018d68:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34018d6a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018d6e:	d004      	beq.n	34018d7a <HAL_RCCEx_PeriphCLKConfig+0x25d6>
34018d70:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34018d74:	4864      	ldr	r0, [pc, #400]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018d76:	f006 f9f3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34018d7a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34018d7c:	3b01      	subs	r3, #1
34018d7e:	2bff      	cmp	r3, #255	@ 0xff
34018d80:	d904      	bls.n	34018d8c <HAL_RCCEx_PeriphCLKConfig+0x25e8>
34018d82:	f240 4131 	movw	r1, #1073	@ 0x431
34018d86:	4860      	ldr	r0, [pc, #384]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018d88:	f006 f9ea 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34018d8c:	4a5f      	ldr	r2, [pc, #380]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018d8e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34018d90:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34018d94:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34018d96:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018d9a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018d9e:	3901      	subs	r1, #1
34018da0:	4303      	orrs	r3, r0
34018da2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018da6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34018daa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34018dae:	f7fe bb52 	b.w	34017456 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34018db2:	4a5d      	ldr	r2, [pc, #372]	@ (34018f28 <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34018db4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018db6:	bf02      	ittt	eq
34018db8:	2240      	moveq	r2, #64	@ 0x40
34018dba:	4b54      	ldreq	r3, [pc, #336]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018dbc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018dc0:	f7fe bb4b 	b.w	3401745a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34018dc4:	4a59      	ldr	r2, [pc, #356]	@ (34018f2c <HAL_RCCEx_PeriphCLKConfig+0x2788>)
34018dc6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018dc8:	bf02      	ittt	eq
34018dca:	2240      	moveq	r2, #64	@ 0x40
34018dcc:	4b4f      	ldreq	r3, [pc, #316]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018dce:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018dd2:	f7fe bb86 	b.w	340174e2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34018dd6:	4a56      	ldr	r2, [pc, #344]	@ (34018f30 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
34018dd8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018dda:	bf02      	ittt	eq
34018ddc:	2240      	moveq	r2, #64	@ 0x40
34018dde:	4b4b      	ldreq	r3, [pc, #300]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018de0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018de4:	f7fe bbc1 	b.w	3401756a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34018de8:	4a52      	ldr	r2, [pc, #328]	@ (34018f34 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
34018dea:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018dec:	bf02      	ittt	eq
34018dee:	2240      	moveq	r2, #64	@ 0x40
34018df0:	4b46      	ldreq	r3, [pc, #280]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018df2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018df6:	f7fe bc17 	b.w	34017628 <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
34018dfa:	4a4f      	ldr	r2, [pc, #316]	@ (34018f38 <HAL_RCCEx_PeriphCLKConfig+0x2794>)
34018dfc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018dfe:	bf02      	ittt	eq
34018e00:	2240      	moveq	r2, #64	@ 0x40
34018e02:	4b42      	ldreq	r3, [pc, #264]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018e04:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018e08:	f7fe bc52 	b.w	340176b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34018e0c:	4a4b      	ldr	r2, [pc, #300]	@ (34018f3c <HAL_RCCEx_PeriphCLKConfig+0x2798>)
34018e0e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018e10:	bf02      	ittt	eq
34018e12:	2240      	moveq	r2, #64	@ 0x40
34018e14:	4b3d      	ldreq	r3, [pc, #244]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018e16:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018e1a:	f7fe bc8d 	b.w	34017738 <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
34018e1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34018e22:	d124      	bne.n	34018e6e <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34018e24:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34018e26:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018e2a:	d004      	beq.n	34018e36 <HAL_RCCEx_PeriphCLKConfig+0x2692>
34018e2c:	f240 41fd 	movw	r1, #1277	@ 0x4fd
34018e30:	4835      	ldr	r0, [pc, #212]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018e32:	f006 f995 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34018e36:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34018e38:	3b01      	subs	r3, #1
34018e3a:	2bff      	cmp	r3, #255	@ 0xff
34018e3c:	d904      	bls.n	34018e48 <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34018e3e:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34018e42:	4831      	ldr	r0, [pc, #196]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018e44:	f006 f98c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34018e48:	4a30      	ldr	r2, [pc, #192]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018e4a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34018e4c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34018e50:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34018e52:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018e56:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018e5a:	3901      	subs	r1, #1
34018e5c:	4303      	orrs	r3, r0
34018e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018e62:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34018e66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34018e6a:	f7fe bca7 	b.w	340177bc <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34018e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018e72:	bf02      	ittt	eq
34018e74:	2240      	moveq	r2, #64	@ 0x40
34018e76:	4b25      	ldreq	r3, [pc, #148]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018e78:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018e7c:	f7fe bca0 	b.w	340177c0 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34018e80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018e84:	bf02      	ittt	eq
34018e86:	2240      	moveq	r2, #64	@ 0x40
34018e88:	4b20      	ldreq	r3, [pc, #128]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018e8a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018e8e:	f7fe bcdd 	b.w	3401784c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34018e92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34018e96:	d123      	bne.n	34018ee0 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018e9a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018e9e:	d004      	beq.n	34018eaa <HAL_RCCEx_PeriphCLKConfig+0x2706>
34018ea0:	f240 514a 	movw	r1, #1354	@ 0x54a
34018ea4:	4818      	ldr	r0, [pc, #96]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018ea6:	f006 f95b 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018eaa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018eac:	3b01      	subs	r3, #1
34018eae:	2bff      	cmp	r3, #255	@ 0xff
34018eb0:	d904      	bls.n	34018ebc <HAL_RCCEx_PeriphCLKConfig+0x2718>
34018eb2:	f240 514b 	movw	r1, #1355	@ 0x54b
34018eb6:	4814      	ldr	r0, [pc, #80]	@ (34018f08 <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34018eb8:	f006 f952 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018ebc:	4a13      	ldr	r2, [pc, #76]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018ebe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34018ec0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34018ec4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34018ec6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018eca:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018ece:	3901      	subs	r1, #1
34018ed0:	4303      	orrs	r3, r0
34018ed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34018eda:	2380      	movs	r3, #128	@ 0x80
34018edc:	f7fe bcf8 	b.w	340178d0 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34018ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018ee4:	bf02      	ittt	eq
34018ee6:	2240      	moveq	r2, #64	@ 0x40
34018ee8:	4b08      	ldreq	r3, [pc, #32]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018eea:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018eee:	f7fe bcf1 	b.w	340178d4 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34018ef2:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018ef4:	bf02      	ittt	eq
34018ef6:	2240      	moveq	r2, #64	@ 0x40
34018ef8:	4b04      	ldreq	r3, [pc, #16]	@ (34018f0c <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34018efa:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018efe:	f7fe bd3b 	b.w	34017978 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
34018f02:	bf00      	nop
34018f04:	0703080c 	.word	0x0703080c
34018f08:	3402bd84 	.word	0x3402bd84
34018f0c:	56028000 	.word	0x56028000
34018f10:	0701080c 	.word	0x0701080c
34018f14:	07030c0c 	.word	0x07030c0c
34018f18:	07010c0c 	.word	0x07010c0c
34018f1c:	0703100c 	.word	0x0703100c
34018f20:	0701100c 	.word	0x0701100c
34018f24:	0703140c 	.word	0x0703140c
34018f28:	0701140c 	.word	0x0701140c
34018f2c:	0701082c 	.word	0x0701082c
34018f30:	07010c2c 	.word	0x07010c2c
34018f34:	0701102c 	.word	0x0701102c
34018f38:	0701142c 	.word	0x0701142c
34018f3c:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34018f40:	4aa8      	ldr	r2, [pc, #672]	@ (340191e4 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34018f42:	4293      	cmp	r3, r2
34018f44:	d123      	bne.n	34018f8e <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018f48:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018f4c:	d004      	beq.n	34018f58 <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34018f4e:	f240 5197 	movw	r1, #1431	@ 0x597
34018f52:	48a5      	ldr	r0, [pc, #660]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018f54:	f006 f904 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018f58:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018f5a:	3b01      	subs	r3, #1
34018f5c:	2bff      	cmp	r3, #255	@ 0xff
34018f5e:	d904      	bls.n	34018f6a <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34018f60:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34018f64:	48a0      	ldr	r0, [pc, #640]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018f66:	f006 f8fb 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018f6a:	4aa0      	ldr	r2, [pc, #640]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018f6c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34018f6e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34018f72:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34018f74:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018f78:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018f7c:	3901      	subs	r1, #1
34018f7e:	4303      	orrs	r3, r0
34018f80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34018f88:	2380      	movs	r3, #128	@ 0x80
34018f8a:	f7fe bd3a 	b.w	34017a02 <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34018f8e:	4a98      	ldr	r2, [pc, #608]	@ (340191f0 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34018f90:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018f92:	bf02      	ittt	eq
34018f94:	2240      	moveq	r2, #64	@ 0x40
34018f96:	4b95      	ldreq	r3, [pc, #596]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018f98:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018f9c:	f7fe bd33 	b.w	34017a06 <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34018fa0:	4a94      	ldr	r2, [pc, #592]	@ (340191f4 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34018fa2:	4293      	cmp	r3, r2
34018fa4:	d123      	bne.n	34018fee <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34018fa6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34018fa8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34018fac:	d004      	beq.n	34018fb8 <HAL_RCCEx_PeriphCLKConfig+0x2814>
34018fae:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34018fb2:	488d      	ldr	r0, [pc, #564]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018fb4:	f006 f8d4 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34018fb8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34018fba:	3b01      	subs	r3, #1
34018fbc:	2bff      	cmp	r3, #255	@ 0xff
34018fbe:	d904      	bls.n	34018fca <HAL_RCCEx_PeriphCLKConfig+0x2826>
34018fc0:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34018fc4:	4888      	ldr	r0, [pc, #544]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34018fc6:	f006 f8cb 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34018fca:	4a88      	ldr	r2, [pc, #544]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018fcc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34018fce:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34018fd2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34018fd4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34018fd8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34018fdc:	3901      	subs	r1, #1
34018fde:	4303      	orrs	r3, r0
34018fe0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34018fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34018fe8:	2380      	movs	r3, #128	@ 0x80
34018fea:	f7fe bd4b 	b.w	34017a84 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34018fee:	4a82      	ldr	r2, [pc, #520]	@ (340191f8 <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
34018ff0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34018ff2:	bf02      	ittt	eq
34018ff4:	2240      	moveq	r2, #64	@ 0x40
34018ff6:	4b7d      	ldreq	r3, [pc, #500]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34018ff8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34018ffc:	f7fe bd44 	b.w	34017a88 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34019000:	2b03      	cmp	r3, #3
34019002:	d123      	bne.n	3401904c <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34019004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34019006:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401900a:	d004      	beq.n	34019016 <HAL_RCCEx_PeriphCLKConfig+0x2872>
3401900c:	f240 51f1 	movw	r1, #1521	@ 0x5f1
34019010:	4875      	ldr	r0, [pc, #468]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019012:	f006 f8a5 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34019016:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34019018:	3b01      	subs	r3, #1
3401901a:	2bff      	cmp	r3, #255	@ 0xff
3401901c:	d904      	bls.n	34019028 <HAL_RCCEx_PeriphCLKConfig+0x2884>
3401901e:	f240 51f2 	movw	r1, #1522	@ 0x5f2
34019022:	4871      	ldr	r0, [pc, #452]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019024:	f006 f89c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34019028:	4a70      	ldr	r2, [pc, #448]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3401902a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
3401902c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34019030:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34019032:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019036:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401903a:	3901      	subs	r1, #1
3401903c:	4303      	orrs	r3, r0
3401903e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34019046:	2380      	movs	r3, #128	@ 0x80
34019048:	f7fe bd55 	b.w	34017af6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
3401904c:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401904e:	bf02      	ittt	eq
34019050:	2240      	moveq	r2, #64	@ 0x40
34019052:	4b66      	ldreq	r3, [pc, #408]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34019054:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34019058:	f7fe bd4f 	b.w	34017afa <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
3401905c:	4a67      	ldr	r2, [pc, #412]	@ (340191fc <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
3401905e:	4293      	cmp	r3, r2
34019060:	d124      	bne.n	340190ac <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34019062:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34019064:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34019068:	d004      	beq.n	34019074 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
3401906a:	f240 611e 	movw	r1, #1566	@ 0x61e
3401906e:	485e      	ldr	r0, [pc, #376]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019070:	f006 f876 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34019074:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34019076:	3b01      	subs	r3, #1
34019078:	2bff      	cmp	r3, #255	@ 0xff
3401907a:	d904      	bls.n	34019086 <HAL_RCCEx_PeriphCLKConfig+0x28e2>
3401907c:	f240 611f 	movw	r1, #1567	@ 0x61f
34019080:	4859      	ldr	r0, [pc, #356]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019082:	f006 f86d 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34019086:	4a59      	ldr	r2, [pc, #356]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34019088:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401908a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3401908e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34019090:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019094:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34019098:	3901      	subs	r1, #1
3401909a:	4303      	orrs	r3, r0
3401909c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340190a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340190a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
340190a8:	f7fe bd72 	b.w	34017b90 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
340190ac:	4a54      	ldr	r2, [pc, #336]	@ (34019200 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
340190ae:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340190b0:	bf02      	ittt	eq
340190b2:	2240      	moveq	r2, #64	@ 0x40
340190b4:	4b4d      	ldreq	r3, [pc, #308]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340190b6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340190ba:	f7fe bd6b 	b.w	34017b94 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
340190be:	4a51      	ldr	r2, [pc, #324]	@ (34019204 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
340190c0:	4293      	cmp	r3, r2
340190c2:	d124      	bne.n	3401910e <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
340190c4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
340190c6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340190ca:	d004      	beq.n	340190d6 <HAL_RCCEx_PeriphCLKConfig+0x2932>
340190cc:	f240 614b 	movw	r1, #1611	@ 0x64b
340190d0:	4845      	ldr	r0, [pc, #276]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340190d2:	f006 f845 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
340190d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
340190d8:	3b01      	subs	r3, #1
340190da:	2bff      	cmp	r3, #255	@ 0xff
340190dc:	d904      	bls.n	340190e8 <HAL_RCCEx_PeriphCLKConfig+0x2944>
340190de:	f240 614c 	movw	r1, #1612	@ 0x64c
340190e2:	4841      	ldr	r0, [pc, #260]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340190e4:	f006 f83c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340190e8:	4a40      	ldr	r2, [pc, #256]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340190ea:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340190ec:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340190f0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340190f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340190f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340190fa:	3901      	subs	r1, #1
340190fc:	4303      	orrs	r3, r0
340190fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34019106:	f44f 7380 	mov.w	r3, #256	@ 0x100
3401910a:	f7fe bd88 	b.w	34017c1e <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
3401910e:	4a3e      	ldr	r2, [pc, #248]	@ (34019208 <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
34019110:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019112:	bf02      	ittt	eq
34019114:	2240      	moveq	r2, #64	@ 0x40
34019116:	4b35      	ldreq	r3, [pc, #212]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34019118:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401911c:	f7fe bd81 	b.w	34017c22 <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34019120:	4a3a      	ldr	r2, [pc, #232]	@ (3401920c <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
34019122:	4293      	cmp	r3, r2
34019124:	d124      	bne.n	34019170 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34019126:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34019128:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401912c:	d004      	beq.n	34019138 <HAL_RCCEx_PeriphCLKConfig+0x2994>
3401912e:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
34019132:	482d      	ldr	r0, [pc, #180]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019134:	f006 f814 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34019138:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401913a:	3b01      	subs	r3, #1
3401913c:	2bff      	cmp	r3, #255	@ 0xff
3401913e:	d904      	bls.n	3401914a <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34019140:	f240 6179 	movw	r1, #1657	@ 0x679
34019144:	4828      	ldr	r0, [pc, #160]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019146:	f006 f80b 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3401914a:	4a28      	ldr	r2, [pc, #160]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3401914c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401914e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34019152:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34019154:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019158:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401915c:	3901      	subs	r1, #1
3401915e:	4303      	orrs	r3, r0
34019160:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019164:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34019168:	f44f 7380 	mov.w	r3, #256	@ 0x100
3401916c:	f7fe bdb8 	b.w	34017ce0 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34019170:	4a27      	ldr	r2, [pc, #156]	@ (34019210 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34019172:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019174:	bf02      	ittt	eq
34019176:	2240      	moveq	r2, #64	@ 0x40
34019178:	4b1c      	ldreq	r3, [pc, #112]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3401917a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401917e:	f7fe bdb1 	b.w	34017ce4 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34019182:	4a24      	ldr	r2, [pc, #144]	@ (34019214 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34019184:	4293      	cmp	r3, r2
34019186:	d124      	bne.n	340191d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34019188:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401918a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401918e:	d004      	beq.n	3401919a <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34019190:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34019194:	4814      	ldr	r0, [pc, #80]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34019196:	f005 ffe3 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401919a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401919c:	3b01      	subs	r3, #1
3401919e:	2bff      	cmp	r3, #255	@ 0xff
340191a0:	d904      	bls.n	340191ac <HAL_RCCEx_PeriphCLKConfig+0x2a08>
340191a2:	f240 61a6 	movw	r1, #1702	@ 0x6a6
340191a6:	4810      	ldr	r0, [pc, #64]	@ (340191e8 <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
340191a8:	f005 ffda 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340191ac:	4a0f      	ldr	r2, [pc, #60]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340191ae:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340191b0:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340191b4:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340191b6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340191ba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340191be:	3901      	subs	r1, #1
340191c0:	4303      	orrs	r3, r0
340191c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340191c6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340191ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340191ce:	f7fe bdcf 	b.w	34017d70 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
340191d2:	4a11      	ldr	r2, [pc, #68]	@ (34019218 <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
340191d4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340191d6:	bf02      	ittt	eq
340191d8:	2240      	moveq	r2, #64	@ 0x40
340191da:	4b04      	ldreq	r3, [pc, #16]	@ (340191ec <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
340191dc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340191e0:	f7fe bdc8 	b.w	34017d74 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
340191e4:	07031418 	.word	0x07031418
340191e8:	3402bd84 	.word	0x3402bd84
340191ec:	56028000 	.word	0x56028000
340191f0:	07011418 	.word	0x07011418
340191f4:	07031818 	.word	0x07031818
340191f8:	07011818 	.word	0x07011818
340191fc:	07030420 	.word	0x07030420
34019200:	07010420 	.word	0x07010420
34019204:	07030820 	.word	0x07030820
34019208:	07010820 	.word	0x07010820
3401920c:	07030c20 	.word	0x07030c20
34019210:	07010c20 	.word	0x07010c20
34019214:	07031020 	.word	0x07031020
34019218:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
3401921c:	4aab      	ldr	r2, [pc, #684]	@ (340194cc <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
3401921e:	4293      	cmp	r3, r2
34019220:	d124      	bne.n	3401926c <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34019222:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34019224:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34019228:	d004      	beq.n	34019234 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
3401922a:	f240 61d2 	movw	r1, #1746	@ 0x6d2
3401922e:	48a8      	ldr	r0, [pc, #672]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34019230:	f005 ff96 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34019234:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34019236:	3b01      	subs	r3, #1
34019238:	2bff      	cmp	r3, #255	@ 0xff
3401923a:	d904      	bls.n	34019246 <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
3401923c:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34019240:	48a3      	ldr	r0, [pc, #652]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34019242:	f005 ff8d 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34019246:	4aa3      	ldr	r2, [pc, #652]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34019248:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401924a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401924e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34019250:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019254:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34019258:	3901      	subs	r1, #1
3401925a:	4303      	orrs	r3, r0
3401925c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019260:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34019264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34019268:	f7fe bdca 	b.w	34017e00 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
3401926c:	4a9a      	ldr	r2, [pc, #616]	@ (340194d8 <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
3401926e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019270:	bf02      	ittt	eq
34019272:	2240      	moveq	r2, #64	@ 0x40
34019274:	4b97      	ldreq	r3, [pc, #604]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34019276:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401927a:	f7fe bdc3 	b.w	34017e04 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3401927e:	4a97      	ldr	r2, [pc, #604]	@ (340194dc <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34019280:	4293      	cmp	r3, r2
34019282:	d124      	bne.n	340192ce <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34019284:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34019286:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401928a:	d004      	beq.n	34019296 <HAL_RCCEx_PeriphCLKConfig+0x2af2>
3401928c:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34019290:	488f      	ldr	r0, [pc, #572]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34019292:	f005 ff65 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34019296:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34019298:	3b01      	subs	r3, #1
3401929a:	2bff      	cmp	r3, #255	@ 0xff
3401929c:	d904      	bls.n	340192a8 <HAL_RCCEx_PeriphCLKConfig+0x2b04>
3401929e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
340192a2:	488b      	ldr	r0, [pc, #556]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340192a4:	f005 ff5c 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340192a8:	4a8a      	ldr	r2, [pc, #552]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340192aa:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
340192ac:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
340192b0:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
340192b2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340192b6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340192ba:	3901      	subs	r1, #1
340192bc:	4303      	orrs	r3, r0
340192be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340192c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
340192c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
340192ca:	f7fe bde0 	b.w	34017e8e <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
340192ce:	4a84      	ldr	r2, [pc, #528]	@ (340194e0 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
340192d0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340192d2:	bf02      	ittt	eq
340192d4:	2240      	moveq	r2, #64	@ 0x40
340192d6:	4b7f      	ldreq	r3, [pc, #508]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340192d8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340192dc:	f7fe bdd9 	b.w	34017e92 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
340192e0:	4a80      	ldr	r2, [pc, #512]	@ (340194e4 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
340192e2:	4293      	cmp	r3, r2
340192e4:	d124      	bne.n	34019330 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340192e6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340192e8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340192ec:	d004      	beq.n	340192f8 <HAL_RCCEx_PeriphCLKConfig+0x2b54>
340192ee:	f240 712c 	movw	r1, #1836	@ 0x72c
340192f2:	4877      	ldr	r0, [pc, #476]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340192f4:	f005 ff34 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340192f8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340192fa:	3b01      	subs	r3, #1
340192fc:	2bff      	cmp	r3, #255	@ 0xff
340192fe:	d904      	bls.n	3401930a <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34019300:	f240 712d 	movw	r1, #1837	@ 0x72d
34019304:	4872      	ldr	r0, [pc, #456]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34019306:	f005 ff2b 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401930a:	4a72      	ldr	r2, [pc, #456]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401930c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401930e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34019312:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34019314:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019318:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401931c:	3901      	subs	r1, #1
3401931e:	4303      	orrs	r3, r0
34019320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019324:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34019328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401932c:	f7fe bdf7 	b.w	34017f1e <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34019330:	4a6d      	ldr	r2, [pc, #436]	@ (340194e8 <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34019332:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019334:	bf02      	ittt	eq
34019336:	2240      	moveq	r2, #64	@ 0x40
34019338:	4b66      	ldreq	r3, [pc, #408]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401933a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401933e:	f7fe bdf0 	b.w	34017f22 <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34019342:	4a6a      	ldr	r2, [pc, #424]	@ (340194ec <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34019344:	4293      	cmp	r3, r2
34019346:	d124      	bne.n	34019392 <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34019348:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401934a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401934e:	d004      	beq.n	3401935a <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34019350:	f240 7159 	movw	r1, #1881	@ 0x759
34019354:	485e      	ldr	r0, [pc, #376]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34019356:	f005 ff03 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401935a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401935c:	3b01      	subs	r3, #1
3401935e:	2bff      	cmp	r3, #255	@ 0xff
34019360:	d904      	bls.n	3401936c <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34019362:	f240 715a 	movw	r1, #1882	@ 0x75a
34019366:	485a      	ldr	r0, [pc, #360]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34019368:	f005 fefa 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401936c:	4a59      	ldr	r2, [pc, #356]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401936e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34019370:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34019374:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34019376:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401937a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401937e:	3901      	subs	r1, #1
34019380:	4303      	orrs	r3, r0
34019382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019386:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401938a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401938e:	f7fe be27 	b.w	34017fe0 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34019392:	4a57      	ldr	r2, [pc, #348]	@ (340194f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34019394:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019396:	bf02      	ittt	eq
34019398:	2240      	moveq	r2, #64	@ 0x40
3401939a:	4b4e      	ldreq	r3, [pc, #312]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
3401939c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340193a0:	f7fe be20 	b.w	34017fe4 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
340193a4:	4a53      	ldr	r2, [pc, #332]	@ (340194f4 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
340193a6:	4293      	cmp	r3, r2
340193a8:	d124      	bne.n	340193f4 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340193aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340193ac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340193b0:	d004      	beq.n	340193bc <HAL_RCCEx_PeriphCLKConfig+0x2c18>
340193b2:	f240 7186 	movw	r1, #1926	@ 0x786
340193b6:	4846      	ldr	r0, [pc, #280]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340193b8:	f005 fed2 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340193bc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340193be:	3b01      	subs	r3, #1
340193c0:	2bff      	cmp	r3, #255	@ 0xff
340193c2:	d904      	bls.n	340193ce <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
340193c4:	f240 7187 	movw	r1, #1927	@ 0x787
340193c8:	4841      	ldr	r0, [pc, #260]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
340193ca:	f005 fec9 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340193ce:	4a41      	ldr	r2, [pc, #260]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340193d0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340193d2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340193d6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340193d8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340193dc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340193e0:	3901      	subs	r1, #1
340193e2:	4303      	orrs	r3, r0
340193e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340193e8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340193ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340193f0:	f7fe be3e 	b.w	34018070 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
340193f4:	4a40      	ldr	r2, [pc, #256]	@ (340194f8 <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
340193f6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340193f8:	bf02      	ittt	eq
340193fa:	2240      	moveq	r2, #64	@ 0x40
340193fc:	4b35      	ldreq	r3, [pc, #212]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340193fe:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34019402:	f7fe be37 	b.w	34018074 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34019406:	4a3d      	ldr	r2, [pc, #244]	@ (340194fc <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34019408:	4293      	cmp	r3, r2
3401940a:	d124      	bne.n	34019456 <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401940c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401940e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34019412:	d004      	beq.n	3401941e <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
34019414:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34019418:	482d      	ldr	r0, [pc, #180]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3401941a:	f005 fea1 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401941e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34019420:	3b01      	subs	r3, #1
34019422:	2bff      	cmp	r3, #255	@ 0xff
34019424:	d904      	bls.n	34019430 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
34019426:	f240 71b4 	movw	r1, #1972	@ 0x7b4
3401942a:	4829      	ldr	r0, [pc, #164]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3401942c:	f005 fe98 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34019430:	4a28      	ldr	r2, [pc, #160]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34019432:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34019434:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34019438:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3401943a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401943e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34019442:	3901      	subs	r1, #1
34019444:	4303      	orrs	r3, r0
34019446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3401944a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401944e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34019452:	f7fe be55 	b.w	34018100 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34019456:	4a2a      	ldr	r2, [pc, #168]	@ (34019500 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
34019458:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401945a:	bf02      	ittt	eq
3401945c:	2240      	moveq	r2, #64	@ 0x40
3401945e:	4b1d      	ldreq	r3, [pc, #116]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34019460:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34019464:	f7fe be4e 	b.w	34018104 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34019468:	4a26      	ldr	r2, [pc, #152]	@ (34019504 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
3401946a:	4293      	cmp	r3, r2
3401946c:	d124      	bne.n	340194b8 <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401946e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34019470:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34019474:	d004      	beq.n	34019480 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
34019476:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
3401947a:	4815      	ldr	r0, [pc, #84]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3401947c:	f005 fe70 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34019480:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34019482:	3b01      	subs	r3, #1
34019484:	2bff      	cmp	r3, #255	@ 0xff
34019486:	d904      	bls.n	34019492 <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34019488:	f240 71e1 	movw	r1, #2017	@ 0x7e1
3401948c:	4810      	ldr	r0, [pc, #64]	@ (340194d0 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
3401948e:	f005 fe67 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34019492:	4a10      	ldr	r2, [pc, #64]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34019494:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34019496:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401949a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
3401949c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340194a0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340194a4:	3901      	subs	r1, #1
340194a6:	4303      	orrs	r3, r0
340194a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340194ac:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340194b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340194b4:	f7fe be6c 	b.w	34018190 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
340194b8:	4a13      	ldr	r2, [pc, #76]	@ (34019508 <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
340194ba:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340194bc:	bf02      	ittt	eq
340194be:	2240      	moveq	r2, #64	@ 0x40
340194c0:	4b04      	ldreq	r3, [pc, #16]	@ (340194d4 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
340194c2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340194c6:	f7fe be65 	b.w	34018194 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
340194ca:	bf00      	nop
340194cc:	07031420 	.word	0x07031420
340194d0:	3402bd84 	.word	0x3402bd84
340194d4:	56028000 	.word	0x56028000
340194d8:	07011420 	.word	0x07011420
340194dc:	07031820 	.word	0x07031820
340194e0:	07011820 	.word	0x07011820
340194e4:	07030030 	.word	0x07030030
340194e8:	07010030 	.word	0x07010030
340194ec:	07030430 	.word	0x07030430
340194f0:	07010430 	.word	0x07010430
340194f4:	07030830 	.word	0x07030830
340194f8:	07010830 	.word	0x07010830
340194fc:	07030c30 	.word	0x07030c30
34019500:	07010c30 	.word	0x07010c30
34019504:	07031030 	.word	0x07031030
34019508:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
3401950c:	4a8b      	ldr	r2, [pc, #556]	@ (3401973c <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
3401950e:	4293      	cmp	r3, r2
34019510:	d124      	bne.n	3401955c <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34019512:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34019514:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34019518:	d004      	beq.n	34019524 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
3401951a:	f640 010d 	movw	r1, #2061	@ 0x80d
3401951e:	4888      	ldr	r0, [pc, #544]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34019520:	f005 fe1e 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34019524:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34019526:	3b01      	subs	r3, #1
34019528:	2bff      	cmp	r3, #255	@ 0xff
3401952a:	d904      	bls.n	34019536 <HAL_RCCEx_PeriphCLKConfig+0x2d92>
3401952c:	f640 010e 	movw	r1, #2062	@ 0x80e
34019530:	4883      	ldr	r0, [pc, #524]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34019532:	f005 fe15 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34019536:	4a83      	ldr	r2, [pc, #524]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34019538:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401953a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401953e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34019540:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019544:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34019548:	3901      	subs	r1, #1
3401954a:	4303      	orrs	r3, r0
3401954c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019550:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34019554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34019558:	f7fe be62 	b.w	34018220 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
3401955c:	4a7a      	ldr	r2, [pc, #488]	@ (34019748 <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
3401955e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019560:	bf02      	ittt	eq
34019562:	2240      	moveq	r2, #64	@ 0x40
34019564:	4b77      	ldreq	r3, [pc, #476]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34019566:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401956a:	f7fe be5b 	b.w	34018224 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
3401956e:	4a77      	ldr	r2, [pc, #476]	@ (3401974c <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
34019570:	4293      	cmp	r3, r2
34019572:	d124      	bne.n	340195be <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34019574:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34019576:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401957a:	d004      	beq.n	34019586 <HAL_RCCEx_PeriphCLKConfig+0x2de2>
3401957c:	f640 013a 	movw	r1, #2106	@ 0x83a
34019580:	486f      	ldr	r0, [pc, #444]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34019582:	f005 fded 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34019586:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34019588:	3b01      	subs	r3, #1
3401958a:	2bff      	cmp	r3, #255	@ 0xff
3401958c:	d904      	bls.n	34019598 <HAL_RCCEx_PeriphCLKConfig+0x2df4>
3401958e:	f640 013b 	movw	r1, #2107	@ 0x83b
34019592:	486b      	ldr	r0, [pc, #428]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34019594:	f005 fde4 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34019598:	4a6a      	ldr	r2, [pc, #424]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401959a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
3401959c:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340195a0:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340195a2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340195a6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340195aa:	3901      	subs	r1, #1
340195ac:	4303      	orrs	r3, r0
340195ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340195b2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340195b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340195ba:	f7fe be79 	b.w	340182b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
340195be:	4a64      	ldr	r2, [pc, #400]	@ (34019750 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
340195c0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340195c2:	bf02      	ittt	eq
340195c4:	2240      	moveq	r2, #64	@ 0x40
340195c6:	4b5f      	ldreq	r3, [pc, #380]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340195c8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340195cc:	f7fe be72 	b.w	340182b4 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
340195d0:	4a60      	ldr	r2, [pc, #384]	@ (34019754 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
340195d2:	4293      	cmp	r3, r2
340195d4:	d124      	bne.n	34019620 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
340195d6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
340195d8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340195dc:	d004      	beq.n	340195e8 <HAL_RCCEx_PeriphCLKConfig+0x2e44>
340195de:	f640 0167 	movw	r1, #2151	@ 0x867
340195e2:	4857      	ldr	r0, [pc, #348]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340195e4:	f005 fdbc 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340195e8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340195ea:	3b01      	subs	r3, #1
340195ec:	2bff      	cmp	r3, #255	@ 0xff
340195ee:	d904      	bls.n	340195fa <HAL_RCCEx_PeriphCLKConfig+0x2e56>
340195f0:	f640 0168 	movw	r1, #2152	@ 0x868
340195f4:	4852      	ldr	r0, [pc, #328]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340195f6:	f005 fdb3 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340195fa:	4a52      	ldr	r2, [pc, #328]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340195fc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340195fe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34019602:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34019604:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34019608:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401960c:	3901      	subs	r1, #1
3401960e:	4303      	orrs	r3, r0
34019610:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019614:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34019618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401961c:	f7fe beac 	b.w	34018378 <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34019620:	4a4d      	ldr	r2, [pc, #308]	@ (34019758 <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
34019622:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019624:	bf02      	ittt	eq
34019626:	2240      	moveq	r2, #64	@ 0x40
34019628:	4b46      	ldreq	r3, [pc, #280]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401962a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401962e:	f7fe bea5 	b.w	3401837c <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34019632:	4a4a      	ldr	r2, [pc, #296]	@ (3401975c <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34019634:	4293      	cmp	r3, r2
34019636:	d124      	bne.n	34019682 <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34019638:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401963a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3401963e:	d004      	beq.n	3401964a <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
34019640:	f640 0194 	movw	r1, #2196	@ 0x894
34019644:	483e      	ldr	r0, [pc, #248]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34019646:	f005 fd8b 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
3401964a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
3401964c:	3b01      	subs	r3, #1
3401964e:	2bff      	cmp	r3, #255	@ 0xff
34019650:	d904      	bls.n	3401965c <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
34019652:	f640 0195 	movw	r1, #2197	@ 0x895
34019656:	483a      	ldr	r0, [pc, #232]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34019658:	f005 fd82 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3401965c:	4a39      	ldr	r2, [pc, #228]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401965e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34019660:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34019664:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34019666:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3401966a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3401966e:	3901      	subs	r1, #1
34019670:	4303      	orrs	r3, r0
34019672:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34019676:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3401967a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3401967e:	f7fe bec3 	b.w	34018408 <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34019682:	4a37      	ldr	r2, [pc, #220]	@ (34019760 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34019684:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019686:	bf02      	ittt	eq
34019688:	2240      	moveq	r2, #64	@ 0x40
3401968a:	4b2e      	ldreq	r3, [pc, #184]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401968c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34019690:	f7fe bebc 	b.w	3401840c <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34019694:	4a33      	ldr	r2, [pc, #204]	@ (34019764 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
34019696:	4293      	cmp	r3, r2
34019698:	d124      	bne.n	340196e4 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
3401969a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
3401969c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
340196a0:	d004      	beq.n	340196ac <HAL_RCCEx_PeriphCLKConfig+0x2f08>
340196a2:	f640 01c1 	movw	r1, #2241	@ 0x8c1
340196a6:	4826      	ldr	r0, [pc, #152]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340196a8:	f005 fd5a 	bl	3401f160 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
340196ac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
340196ae:	3b01      	subs	r3, #1
340196b0:	2bff      	cmp	r3, #255	@ 0xff
340196b2:	d904      	bls.n	340196be <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
340196b4:	f640 01c2 	movw	r1, #2242	@ 0x8c2
340196b8:	4821      	ldr	r0, [pc, #132]	@ (34019740 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
340196ba:	f005 fd51 	bl	3401f160 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340196be:	4a21      	ldr	r2, [pc, #132]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340196c0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
340196c2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
340196c6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
340196c8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340196cc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340196d0:	3901      	subs	r1, #1
340196d2:	4303      	orrs	r3, r0
340196d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
340196d8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340196dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
340196e0:	f7fe beda 	b.w	34018498 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
340196e4:	4a20      	ldr	r2, [pc, #128]	@ (34019768 <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
340196e6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
340196e8:	bf02      	ittt	eq
340196ea:	2240      	moveq	r2, #64	@ 0x40
340196ec:	4b15      	ldreq	r3, [pc, #84]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
340196ee:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
340196f2:	f7fe bed3 	b.w	3401849c <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
340196f6:	f7fc ff39 	bl	3401656c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
340196fa:	f7fe bef5 	b.w	340184e8 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
340196fe:	f7fc ff35 	bl	3401656c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34019702:	f7fe bf13 	b.w	3401852c <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34019706:	4a19      	ldr	r2, [pc, #100]	@ (3401976c <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34019708:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3401970a:	bf02      	ittt	eq
3401970c:	2240      	moveq	r2, #64	@ 0x40
3401970e:	4b0d      	ldreq	r3, [pc, #52]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34019710:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34019714:	f7fe bf4a 	b.w	340185ac <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34019718:	f7fc ff28 	bl	3401656c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
3401971c:	f7fe bf53 	b.w	340185c6 <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34019720:	4a13      	ldr	r2, [pc, #76]	@ (34019770 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
34019722:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34019724:	bf02      	ittt	eq
34019726:	2240      	moveq	r2, #64	@ 0x40
34019728:	4b06      	ldreq	r3, [pc, #24]	@ (34019744 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
3401972a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3401972e:	f7fe bfa5 	b.w	3401867c <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34019732:	f7fc ff1b 	bl	3401656c <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34019736:	f7fe bfae 	b.w	34018696 <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
3401973a:	bf00      	nop
3401973c:	07031430 	.word	0x07031430
34019740:	3402bd84 	.word	0x3402bd84
34019744:	56028000 	.word	0x56028000
34019748:	07011430 	.word	0x07011430
3401974c:	07031830 	.word	0x07031830
34019750:	07011830 	.word	0x07011830
34019754:	07031c30 	.word	0x07031c30
34019758:	07011c30 	.word	0x07011c30
3401975c:	07030034 	.word	0x07030034
34019760:	07010034 	.word	0x07010034
34019764:	07030434 	.word	0x07030434
34019768:	07010434 	.word	0x07010434
3401976c:	03010c14 	.word	0x03010c14
34019770:	03011414 	.word	0x03011414

34019774 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34019774:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34019776:	4c1e      	ldr	r4, [pc, #120]	@ (340197f0 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
34019778:	6863      	ldr	r3, [r4, #4]
3401977a:	05d9      	lsls	r1, r3, #23
3401977c:	d506      	bpl.n	3401978c <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
3401977e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34019782:	005a      	lsls	r2, r3, #1
34019784:	d40f      	bmi.n	340197a6 <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34019786:	2000      	movs	r0, #0
}
34019788:	b003      	add	sp, #12
3401978a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
3401978c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34019790:	011b      	lsls	r3, r3, #4
34019792:	d5f8      	bpl.n	34019786 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34019794:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34019798:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3401979c:	b003      	add	sp, #12
3401979e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340197a2:	f7fc bf9d 	b.w	340166e0 <RCCEx_GetPLLSourceFreq>
340197a6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340197aa:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340197ae:	f7fc ff97 	bl	340166e0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340197b2:	2800      	cmp	r0, #0
340197b4:	d0e7      	beq.n	34019786 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
340197b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
340197ba:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340197be:	f3c3 5105 	ubfx	r1, r3, #20, #6
340197c2:	d0e0      	beq.n	34019786 <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
340197c4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
340197c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
340197cc:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
340197d0:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
340197d4:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
340197d8:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
340197dc:	9401      	str	r4, [sp, #4]
340197de:	9500      	str	r5, [sp, #0]
340197e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340197e4:	f3c2 220b 	ubfx	r2, r2, #8, #12
340197e8:	f7fc ffb0 	bl	3401674c <RCCEx_CalcPLLFreq>
340197ec:	e7cc      	b.n	34019788 <HAL_RCCEx_GetPLL1CLKFreq+0x14>
340197ee:	bf00      	nop
340197f0:	56028000 	.word	0x56028000

340197f4 <HAL_RCCEx_GetPLL2CLKFreq>:
{
340197f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340197f6:	4c1e      	ldr	r4, [pc, #120]	@ (34019870 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
340197f8:	6863      	ldr	r3, [r4, #4]
340197fa:	0599      	lsls	r1, r3, #22
340197fc:	d506      	bpl.n	3401980c <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
340197fe:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
34019802:	005a      	lsls	r2, r3, #1
34019804:	d40f      	bmi.n	34019826 <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34019806:	2000      	movs	r0, #0
}
34019808:	b003      	add	sp, #12
3401980a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
3401980c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
34019810:	011b      	lsls	r3, r3, #4
34019812:	d5f8      	bpl.n	34019806 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34019814:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34019818:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3401981c:	b003      	add	sp, #12
3401981e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34019822:	f7fc bf5d 	b.w	340166e0 <RCCEx_GetPLLSourceFreq>
34019826:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
3401982a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3401982e:	f7fc ff57 	bl	340166e0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34019832:	2800      	cmp	r0, #0
34019834:	d0e7      	beq.n	34019806 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34019836:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
3401983a:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3401983e:	f3c3 5105 	ubfx	r1, r3, #20, #6
34019842:	d0e0      	beq.n	34019806 <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34019844:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34019848:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
3401984c:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34019850:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34019854:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34019858:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
3401985c:	9401      	str	r4, [sp, #4]
3401985e:	9500      	str	r5, [sp, #0]
34019860:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34019864:	f3c2 220b 	ubfx	r2, r2, #8, #12
34019868:	f7fc ff70 	bl	3401674c <RCCEx_CalcPLLFreq>
3401986c:	e7cc      	b.n	34019808 <HAL_RCCEx_GetPLL2CLKFreq+0x14>
3401986e:	bf00      	nop
34019870:	56028000 	.word	0x56028000

34019874 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34019874:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34019876:	4c1e      	ldr	r4, [pc, #120]	@ (340198f0 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
34019878:	6863      	ldr	r3, [r4, #4]
3401987a:	0559      	lsls	r1, r3, #21
3401987c:	d506      	bpl.n	3401988c <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3401987e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34019882:	005a      	lsls	r2, r3, #1
34019884:	d40f      	bmi.n	340198a6 <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34019886:	2000      	movs	r0, #0
}
34019888:	b003      	add	sp, #12
3401988a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
3401988c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34019890:	011b      	lsls	r3, r3, #4
34019892:	d5f8      	bpl.n	34019886 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34019894:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34019898:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3401989c:	b003      	add	sp, #12
3401989e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340198a2:	f7fc bf1d 	b.w	340166e0 <RCCEx_GetPLLSourceFreq>
340198a6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340198aa:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
340198ae:	f7fc ff17 	bl	340166e0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340198b2:	2800      	cmp	r0, #0
340198b4:	d0e7      	beq.n	34019886 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
340198b6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
340198ba:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
340198be:	f3c3 5105 	ubfx	r1, r3, #20, #6
340198c2:	d0e0      	beq.n	34019886 <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
340198c4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
340198c8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
340198cc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
340198d0:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
340198d4:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
340198d8:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
340198dc:	9401      	str	r4, [sp, #4]
340198de:	9500      	str	r5, [sp, #0]
340198e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340198e4:	f3c2 220b 	ubfx	r2, r2, #8, #12
340198e8:	f7fc ff30 	bl	3401674c <RCCEx_CalcPLLFreq>
340198ec:	e7cc      	b.n	34019888 <HAL_RCCEx_GetPLL3CLKFreq+0x14>
340198ee:	bf00      	nop
340198f0:	56028000 	.word	0x56028000

340198f4 <HAL_RCCEx_GetPLL4CLKFreq>:
{
340198f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
340198f6:	4c1e      	ldr	r4, [pc, #120]	@ (34019970 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
340198f8:	6863      	ldr	r3, [r4, #4]
340198fa:	0519      	lsls	r1, r3, #20
340198fc:	d506      	bpl.n	3401990c <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
340198fe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
34019902:	005a      	lsls	r2, r3, #1
34019904:	d40f      	bmi.n	34019926 <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34019906:	2000      	movs	r0, #0
}
34019908:	b003      	add	sp, #12
3401990a:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3401990c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34019910:	011b      	lsls	r3, r3, #4
34019912:	d5f8      	bpl.n	34019906 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34019914:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34019918:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
3401991c:	b003      	add	sp, #12
3401991e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34019922:	f7fc bedd 	b.w	340166e0 <RCCEx_GetPLLSourceFreq>
34019926:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3401992a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
3401992e:	f7fc fed7 	bl	340166e0 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34019932:	2800      	cmp	r0, #0
34019934:	d0e7      	beq.n	34019906 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34019936:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
3401993a:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
3401993e:	f3c3 5105 	ubfx	r1, r3, #20, #6
34019942:	d0e0      	beq.n	34019906 <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34019944:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34019948:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3401994c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34019950:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34019954:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34019958:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3401995c:	9401      	str	r4, [sp, #4]
3401995e:	9500      	str	r5, [sp, #0]
34019960:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34019964:	f3c2 220b 	ubfx	r2, r2, #8, #12
34019968:	f7fc fef0 	bl	3401674c <RCCEx_CalcPLLFreq>
3401996c:	e7cc      	b.n	34019908 <HAL_RCCEx_GetPLL4CLKFreq+0x14>
3401996e:	bf00      	nop
34019970:	56028000 	.word	0x56028000

34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34019974:	4b3e      	ldr	r3, [pc, #248]	@ (34019a70 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
34019976:	b510      	push	{r4, lr}
34019978:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
3401997c:	0652      	lsls	r2, r2, #25
3401997e:	d56b      	bpl.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34019980:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34019984:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34019988:	3a01      	subs	r2, #1
3401998a:	2a06      	cmp	r2, #6
3401998c:	d805      	bhi.n	3401999a <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
3401998e:	e8df f002 	tbb	[pc, r2]
34019992:	150f      	.short	0x150f
34019994:	3e321b48 	.word	0x3e321b48
34019998:	54          	.byte	0x54
34019999:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3401999a:	f7fc fe07 	bl	340165ac <LL_RCC_HSI_IsReady>
3401999e:	2800      	cmp	r0, #0
340199a0:	d05a      	beq.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
340199a2:	4b33      	ldr	r3, [pc, #204]	@ (34019a70 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340199a4:	4833      	ldr	r0, [pc, #204]	@ (34019a74 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
340199a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340199a8:	f3c3 13c1 	ubfx	r3, r3, #7, #2
340199ac:	40d8      	lsrs	r0, r3
340199ae:	e054      	b.n	34019a5a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
340199b0:	f7fc fe04 	bl	340165bc <LL_RCC_MSI_IsReady>
340199b4:	2800      	cmp	r0, #0
340199b6:	d04f      	beq.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
340199b8:	482f      	ldr	r0, [pc, #188]	@ (34019a78 <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
340199ba:	e04e      	b.n	34019a5a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
340199bc:	f7fc fdee 	bl	3401659c <LL_RCC_HSE_IsReady>
340199c0:	2800      	cmp	r0, #0
340199c2:	d049      	beq.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
340199c4:	482d      	ldr	r0, [pc, #180]	@ (34019a7c <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
340199c6:	e048      	b.n	34019a5a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
340199c8:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340199cc:	06d4      	lsls	r4, r2, #27
340199ce:	d543      	bpl.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340199d0:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
340199d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
340199d8:	f3c0 4007 	ubfx	r0, r0, #16, #8
340199dc:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
340199de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
340199e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340199e6:	d03c      	beq.n	34019a62 <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
340199e8:	d833      	bhi.n	34019a52 <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
340199ea:	bbbb      	cbnz	r3, 34019a5c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340199ec:	f7ff fec2 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
340199f0:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
340199f4:	e031      	b.n	34019a5a <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
340199f6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
340199fa:	0590      	lsls	r0, r2, #22
340199fc:	d52c      	bpl.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340199fe:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34019a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34019a06:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019a0a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34019a0c:	e7e7      	b.n	340199de <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
34019a0e:	f7fc fe4d 	bl	340166ac <LL_RCC_IC15_IsEnabled>
34019a12:	b308      	cbz	r0, 34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
34019a14:	f7fc fe52 	bl	340166bc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34019a18:	4b15      	ldr	r3, [pc, #84]	@ (34019a70 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
34019a1a:	4604      	mov	r4, r0
34019a1c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34019a20:	e7dd      	b.n	340199de <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34019a22:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019a26:	0351      	lsls	r1, r2, #13
34019a28:	d516      	bpl.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34019a2a:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34019a2e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34019a32:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019a36:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34019a38:	e7d1      	b.n	340199de <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34019a3a:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34019a3e:	0312      	lsls	r2, r2, #12
34019a40:	d50a      	bpl.n	34019a58 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34019a42:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34019a46:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34019a4a:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019a4e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34019a50:	e7c5      	b.n	340199de <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
34019a52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019a56:	d007      	beq.n	34019a68 <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34019a58:	2000      	movs	r0, #0
}
34019a5a:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019a5c:	f7ff feca 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
34019a60:	e7c6      	b.n	340199f0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019a62:	f7ff ff07 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
34019a66:	e7c3      	b.n	340199f0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019a68:	f7ff ff44 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34019a6c:	e7c0      	b.n	340199f0 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
34019a6e:	bf00      	nop
34019a70:	56028000 	.word	0x56028000
34019a74:	03d09000 	.word	0x03d09000
34019a78:	003d0900 	.word	0x003d0900
34019a7c:	02dc6c00 	.word	0x02dc6c00

34019a80 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34019a80:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34019a82:	4d2b      	ldr	r5, [pc, #172]	@ (34019b30 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
34019a84:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
34019a88:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34019a8c:	2b06      	cmp	r3, #6
34019a8e:	d835      	bhi.n	34019afc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34019a90:	e8df f003 	tbb	[pc, r3]
34019a94:	28110d04 	.word	0x28110d04
34019a98:	3c45      	.short	0x3c45
34019a9a:	4b          	.byte	0x4b
34019a9b:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019a9c:	f7fc fd0c 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
34019aa0:	f7fc fe16 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019aa4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34019aa6:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019aaa:	40d8      	lsrs	r0, r3
34019aac:	e027      	b.n	34019afe <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34019aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019ab2:	f7ff bf5f 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34019ab6:	f7fc fdb1 	bl	3401661c <LL_RCC_IC7_IsEnabled>
34019aba:	b1f8      	cbz	r0, 34019afc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34019abc:	f7fc fdb6 	bl	3401662c <LL_RCC_IC7_GetDivider>
34019ac0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34019ac2:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34019ac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34019aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019ace:	d017      	beq.n	34019b00 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34019ad0:	d811      	bhi.n	34019af6 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
34019ad2:	b913      	cbnz	r3, 34019ada <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019ad4:	f7ff fe4e 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
34019ad8:	e001      	b.n	34019ade <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019ada:	f7ff fe8b 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34019ade:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019ae2:	e00c      	b.n	34019afe <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34019ae4:	f7fc fdac 	bl	34016640 <LL_RCC_IC8_IsEnabled>
34019ae8:	b140      	cbz	r0, 34019afc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
34019aea:	f7fc fdb1 	bl	34016650 <LL_RCC_IC8_GetDivider>
34019aee:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34019af2:	4604      	mov	r4, r0
34019af4:	e7e7      	b.n	34019ac6 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
34019af6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019afa:	d004      	beq.n	34019b06 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34019afc:	2000      	movs	r0, #0
}
34019afe:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019b00:	f7ff feb8 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
34019b04:	e7eb      	b.n	34019ade <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019b06:	f7ff fef5 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34019b0a:	e7e8      	b.n	34019ade <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
34019b0c:	f7fc fd4e 	bl	340165ac <LL_RCC_HSI_IsReady>
34019b10:	2800      	cmp	r0, #0
34019b12:	d0f3      	beq.n	34019afc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019b14:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019b16:	4807      	ldr	r0, [pc, #28]	@ (34019b34 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
34019b18:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34019b1c:	e7c5      	b.n	34019aaa <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
34019b1e:	f7fc fd4d 	bl	340165bc <LL_RCC_MSI_IsReady>
34019b22:	2800      	cmp	r0, #0
34019b24:	d0ea      	beq.n	34019afc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
34019b26:	4804      	ldr	r0, [pc, #16]	@ (34019b38 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
34019b28:	e7e9      	b.n	34019afe <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34019b2a:	4804      	ldr	r0, [pc, #16]	@ (34019b3c <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
34019b2c:	e7e7      	b.n	34019afe <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
34019b2e:	bf00      	nop
34019b30:	56028000 	.word	0x56028000
34019b34:	03d09000 	.word	0x03d09000
34019b38:	003d0900 	.word	0x003d0900
34019b3c:	00bb8000 	.word	0x00bb8000

34019b40 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34019b40:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34019b42:	f7fc fd5d 	bl	34016600 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34019b46:	4b36      	ldr	r3, [pc, #216]	@ (34019c20 <RCCEx_GetXSPICLKFreq+0xe0>)
34019b48:	4298      	cmp	r0, r3
34019b4a:	d028      	beq.n	34019b9e <RCCEx_GetXSPICLKFreq+0x5e>
34019b4c:	d81b      	bhi.n	34019b86 <RCCEx_GetXSPICLKFreq+0x46>
34019b4e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019b52:	4298      	cmp	r0, r3
34019b54:	d013      	beq.n	34019b7e <RCCEx_GetXSPICLKFreq+0x3e>
34019b56:	d80b      	bhi.n	34019b70 <RCCEx_GetXSPICLKFreq+0x30>
34019b58:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34019b5c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019b60:	429a      	cmp	r2, r3
34019b62:	d04a      	beq.n	34019bfa <RCCEx_GetXSPICLKFreq+0xba>
34019b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34019b68:	4298      	cmp	r0, r3
34019b6a:	d046      	beq.n	34019bfa <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34019b6c:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
34019b6e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34019b70:	4b2c      	ldr	r3, [pc, #176]	@ (34019c24 <RCCEx_GetXSPICLKFreq+0xe4>)
34019b72:	4298      	cmp	r0, r3
34019b74:	d003      	beq.n	34019b7e <RCCEx_GetXSPICLKFreq+0x3e>
34019b76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019b7a:	4298      	cmp	r0, r3
34019b7c:	d1f6      	bne.n	34019b6c <RCCEx_GetXSPICLKFreq+0x2c>
}
34019b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019b82:	f7ff bef7 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34019b86:	4b28      	ldr	r3, [pc, #160]	@ (34019c28 <RCCEx_GetXSPICLKFreq+0xe8>)
34019b88:	4298      	cmp	r0, r3
34019b8a:	d028      	beq.n	34019bde <RCCEx_GetXSPICLKFreq+0x9e>
34019b8c:	d820      	bhi.n	34019bd0 <RCCEx_GetXSPICLKFreq+0x90>
34019b8e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34019b92:	4298      	cmp	r0, r3
34019b94:	d003      	beq.n	34019b9e <RCCEx_GetXSPICLKFreq+0x5e>
34019b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019b9a:	4298      	cmp	r0, r3
34019b9c:	d1e6      	bne.n	34019b6c <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34019b9e:	4b23      	ldr	r3, [pc, #140]	@ (34019c2c <RCCEx_GetXSPICLKFreq+0xec>)
34019ba0:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34019ba4:	f010 0004 	ands.w	r0, r0, #4
34019ba8:	d0e1      	beq.n	34019b6e <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34019baa:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34019bae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34019bb2:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019bb6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34019bb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34019bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019bc0:	d02a      	beq.n	34019c18 <RCCEx_GetXSPICLKFreq+0xd8>
34019bc2:	d820      	bhi.n	34019c06 <RCCEx_GetXSPICLKFreq+0xc6>
34019bc4:	bb2b      	cbnz	r3, 34019c12 <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019bc6:	f7ff fdd5 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
34019bca:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
34019bce:	e7ce      	b.n	34019b6e <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34019bd0:	4b17      	ldr	r3, [pc, #92]	@ (34019c30 <RCCEx_GetXSPICLKFreq+0xf0>)
34019bd2:	4298      	cmp	r0, r3
34019bd4:	d003      	beq.n	34019bde <RCCEx_GetXSPICLKFreq+0x9e>
34019bd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019bda:	4298      	cmp	r0, r3
34019bdc:	d1c6      	bne.n	34019b6c <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34019bde:	4b13      	ldr	r3, [pc, #76]	@ (34019c2c <RCCEx_GetXSPICLKFreq+0xec>)
34019be0:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34019be4:	f010 0008 	ands.w	r0, r0, #8
34019be8:	d0c1      	beq.n	34019b6e <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019bea:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34019bee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34019bf2:	f3c0 4007 	ubfx	r0, r0, #16, #8
34019bf6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34019bf8:	e7de      	b.n	34019bb8 <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019bfa:	f7fc fc5d 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
}
34019bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34019c02:	f7fc bd65 	b.w	340166d0 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
34019c06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019c0a:	d1af      	bne.n	34019b6c <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019c0c:	f7ff fe72 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34019c10:	e7db      	b.n	34019bca <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019c12:	f7ff fdef 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
34019c16:	e7d8      	b.n	34019bca <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019c18:	f7ff fe2c 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
34019c1c:	e7d5      	b.n	34019bca <RCCEx_GetXSPICLKFreq+0x8a>
34019c1e:	bf00      	nop
34019c20:	03020014 	.word	0x03020014
34019c24:	03010414 	.word	0x03010414
34019c28:	03030014 	.word	0x03030014
34019c2c:	56028000 	.word	0x56028000
34019c30:	03030414 	.word	0x03030414

34019c34 <RCCEx_GetOTGPHYCLKFreq>:
{
34019c34:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34019c36:	f7fc fce3 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34019c3a:	4b2b      	ldr	r3, [pc, #172]	@ (34019ce8 <RCCEx_GetOTGPHYCLKFreq+0xb4>)
34019c3c:	4298      	cmp	r0, r3
34019c3e:	d021      	beq.n	34019c84 <RCCEx_GetOTGPHYCLKFreq+0x50>
34019c40:	d815      	bhi.n	34019c6e <RCCEx_GetOTGPHYCLKFreq+0x3a>
34019c42:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019c46:	4298      	cmp	r0, r3
34019c48:	d00d      	beq.n	34019c66 <RCCEx_GetOTGPHYCLKFreq+0x32>
34019c4a:	d809      	bhi.n	34019c60 <RCCEx_GetOTGPHYCLKFreq+0x2c>
34019c4c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019c50:	4298      	cmp	r0, r3
34019c52:	d02d      	beq.n	34019cb0 <RCCEx_GetOTGPHYCLKFreq+0x7c>
34019c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34019c58:	4298      	cmp	r0, r3
34019c5a:	d029      	beq.n	34019cb0 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34019c5c:	2000      	movs	r0, #0
}
34019c5e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34019c60:	4b22      	ldr	r3, [pc, #136]	@ (34019cec <RCCEx_GetOTGPHYCLKFreq+0xb8>)
34019c62:	4298      	cmp	r0, r3
34019c64:	d1fa      	bne.n	34019c5c <RCCEx_GetOTGPHYCLKFreq+0x28>
}
34019c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019c6a:	f7ff be83 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34019c6e:	4b20      	ldr	r3, [pc, #128]	@ (34019cf0 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
34019c70:	4298      	cmp	r0, r3
34019c72:	d023      	beq.n	34019cbc <RCCEx_GetOTGPHYCLKFreq+0x88>
34019c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
34019c78:	4298      	cmp	r0, r3
34019c7a:	d01f      	beq.n	34019cbc <RCCEx_GetOTGPHYCLKFreq+0x88>
34019c7c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019c80:	4298      	cmp	r0, r3
34019c82:	d1eb      	bne.n	34019c5c <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34019c84:	f7fc fd12 	bl	340166ac <LL_RCC_IC15_IsEnabled>
34019c88:	2800      	cmp	r0, #0
34019c8a:	d0e7      	beq.n	34019c5c <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34019c8c:	f7fc fd16 	bl	340166bc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34019c90:	4b18      	ldr	r3, [pc, #96]	@ (34019cf4 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
34019c92:	4604      	mov	r4, r0
34019c94:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34019c98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34019c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019ca0:	d01f      	beq.n	34019ce2 <RCCEx_GetOTGPHYCLKFreq+0xae>
34019ca2:	d815      	bhi.n	34019cd0 <RCCEx_GetOTGPHYCLKFreq+0x9c>
34019ca4:	b9d3      	cbnz	r3, 34019cdc <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019ca6:	f7ff fd65 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
34019caa:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019cae:	e7d6      	b.n	34019c5e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34019cb0:	f7fc fc74 	bl	3401659c <LL_RCC_HSE_IsReady>
34019cb4:	2800      	cmp	r0, #0
34019cb6:	d0d1      	beq.n	34019c5c <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
34019cb8:	480f      	ldr	r0, [pc, #60]	@ (34019cf8 <RCCEx_GetOTGPHYCLKFreq+0xc4>)
34019cba:	e7d0      	b.n	34019c5e <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34019cbc:	f7fc fc6e 	bl	3401659c <LL_RCC_HSE_IsReady>
34019cc0:	2800      	cmp	r0, #0
34019cc2:	d0cb      	beq.n	34019c5c <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34019cc4:	f7fc fc62 	bl	3401658c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34019cc8:	2800      	cmp	r0, #0
34019cca:	d1f5      	bne.n	34019cb8 <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34019ccc:	480b      	ldr	r0, [pc, #44]	@ (34019cfc <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
34019cce:	e7c6      	b.n	34019c5e <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34019cd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019cd4:	d1c2      	bne.n	34019c5c <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019cd6:	f7ff fe0d 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34019cda:	e7e6      	b.n	34019caa <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019cdc:	f7ff fd8a 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
34019ce0:	e7e3      	b.n	34019caa <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019ce2:	f7ff fdc7 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
34019ce6:	e7e0      	b.n	34019caa <RCCEx_GetOTGPHYCLKFreq+0x76>
34019ce8:	03020c14 	.word	0x03020c14
34019cec:	03011414 	.word	0x03011414
34019cf0:	03030c14 	.word	0x03030c14
34019cf4:	56028000 	.word	0x56028000
34019cf8:	016e3600 	.word	0x016e3600
34019cfc:	02dc6c00 	.word	0x02dc6c00

34019d00 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
34019d00:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
34019d02:	f7fc fc7d 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34019d06:	4b11      	ldr	r3, [pc, #68]	@ (34019d4c <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
34019d08:	4298      	cmp	r0, r3
34019d0a:	d01c      	beq.n	34019d46 <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
34019d0c:	d805      	bhi.n	34019d1a <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
34019d0e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34019d12:	4298      	cmp	r0, r3
34019d14:	d012      	beq.n	34019d3c <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34019d16:	2000      	movs	r0, #0
}
34019d18:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34019d1a:	4b0d      	ldr	r3, [pc, #52]	@ (34019d50 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
34019d1c:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34019d20:	4298      	cmp	r0, r3
34019d22:	d1f8      	bne.n	34019d16 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
34019d24:	f7fc fc3a 	bl	3401659c <LL_RCC_HSE_IsReady>
34019d28:	2800      	cmp	r0, #0
34019d2a:	d0f4      	beq.n	34019d16 <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34019d2c:	f7fc fc2e 	bl	3401658c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
34019d30:	4b08      	ldr	r3, [pc, #32]	@ (34019d54 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
34019d32:	2800      	cmp	r0, #0
34019d34:	4808      	ldr	r0, [pc, #32]	@ (34019d58 <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
34019d36:	bf08      	it	eq
34019d38:	4618      	moveq	r0, r3
34019d3a:	e7ed      	b.n	34019d18 <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34019d3c:	4807      	ldr	r0, [pc, #28]	@ (34019d5c <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
34019d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34019d42:	f7ff bf77 	b.w	34019c34 <RCCEx_GetOTGPHYCLKFreq>
34019d46:	4806      	ldr	r0, [pc, #24]	@ (34019d60 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
34019d48:	e7f9      	b.n	34019d3e <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
34019d4a:	bf00      	nop
34019d4c:	01001814 	.word	0x01001814
34019d50:	01011014 	.word	0x01011014
34019d54:	02dc6c00 	.word	0x02dc6c00
34019d58:	016e3600 	.word	0x016e3600
34019d5c:	03000c14 	.word	0x03000c14
34019d60:	03001414 	.word	0x03001414

34019d64 <RCCEx_GetUSARTCLKFreq>:
{
34019d64:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34019d66:	f7fc fc4b 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019d6a:	4b6f      	ldr	r3, [pc, #444]	@ (34019f28 <RCCEx_GetUSARTCLKFreq+0x1c4>)
34019d6c:	4298      	cmp	r0, r3
34019d6e:	d039      	beq.n	34019de4 <RCCEx_GetUSARTCLKFreq+0x80>
34019d70:	d852      	bhi.n	34019e18 <RCCEx_GetUSARTCLKFreq+0xb4>
34019d72:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34019d76:	4298      	cmp	r0, r3
34019d78:	f000 80b5 	beq.w	34019ee6 <RCCEx_GetUSARTCLKFreq+0x182>
34019d7c:	d813      	bhi.n	34019da6 <RCCEx_GetUSARTCLKFreq+0x42>
34019d7e:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34019d82:	4298      	cmp	r0, r3
34019d84:	f000 80af 	beq.w	34019ee6 <RCCEx_GetUSARTCLKFreq+0x182>
34019d88:	d80b      	bhi.n	34019da2 <RCCEx_GetUSARTCLKFreq+0x3e>
34019d8a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34019d8e:	4298      	cmp	r0, r3
34019d90:	f000 80a9 	beq.w	34019ee6 <RCCEx_GetUSARTCLKFreq+0x182>
34019d94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34019d98:	4298      	cmp	r0, r3
34019d9a:	f000 80ae 	beq.w	34019efa <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34019d9e:	2000      	movs	r0, #0
}
34019da0:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019da2:	4b62      	ldr	r3, [pc, #392]	@ (34019f2c <RCCEx_GetUSARTCLKFreq+0x1c8>)
34019da4:	e7f8      	b.n	34019d98 <RCCEx_GetUSARTCLKFreq+0x34>
34019da6:	4b62      	ldr	r3, [pc, #392]	@ (34019f30 <RCCEx_GetUSARTCLKFreq+0x1cc>)
34019da8:	4298      	cmp	r0, r3
34019daa:	d00c      	beq.n	34019dc6 <RCCEx_GetUSARTCLKFreq+0x62>
34019dac:	d80f      	bhi.n	34019dce <RCCEx_GetUSARTCLKFreq+0x6a>
34019dae:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34019db2:	4298      	cmp	r0, r3
34019db4:	d007      	beq.n	34019dc6 <RCCEx_GetUSARTCLKFreq+0x62>
34019db6:	bf8e      	itee	hi
34019db8:	4b5e      	ldrhi	r3, [pc, #376]	@ (34019f34 <RCCEx_GetUSARTCLKFreq+0x1d0>)
34019dba:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34019dbe:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34019dc2:	4298      	cmp	r0, r3
34019dc4:	d1eb      	bne.n	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
}
34019dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019dca:	f7ff bdd3 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019dce:	4b5a      	ldr	r3, [pc, #360]	@ (34019f38 <RCCEx_GetUSARTCLKFreq+0x1d4>)
34019dd0:	4298      	cmp	r0, r3
34019dd2:	d007      	beq.n	34019de4 <RCCEx_GetUSARTCLKFreq+0x80>
34019dd4:	bf8e      	itee	hi
34019dd6:	4b59      	ldrhi	r3, [pc, #356]	@ (34019f3c <RCCEx_GetUSARTCLKFreq+0x1d8>)
34019dd8:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34019ddc:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34019de0:	4298      	cmp	r0, r3
34019de2:	d1dc      	bne.n	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34019de4:	f7fc fc3e 	bl	34016664 <LL_RCC_IC9_IsEnabled>
34019de8:	2800      	cmp	r0, #0
34019dea:	d0d8      	beq.n	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
34019dec:	f7fc fc42 	bl	34016674 <LL_RCC_IC9_GetDivider>
34019df0:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34019df2:	4b53      	ldr	r3, [pc, #332]	@ (34019f40 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34019df4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34019df8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34019dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34019e00:	f000 808e 	beq.w	34019f20 <RCCEx_GetUSARTCLKFreq+0x1bc>
34019e04:	f200 8082 	bhi.w	34019f0c <RCCEx_GetUSARTCLKFreq+0x1a8>
34019e08:	2b00      	cmp	r3, #0
34019e0a:	f040 8086 	bne.w	34019f1a <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34019e0e:	f7ff fcb1 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
34019e12:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34019e16:	e7c3      	b.n	34019da0 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019e18:	4b4a      	ldr	r3, [pc, #296]	@ (34019f44 <RCCEx_GetUSARTCLKFreq+0x1e0>)
34019e1a:	4298      	cmp	r0, r3
34019e1c:	d045      	beq.n	34019eaa <RCCEx_GetUSARTCLKFreq+0x146>
34019e1e:	d833      	bhi.n	34019e88 <RCCEx_GetUSARTCLKFreq+0x124>
34019e20:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34019e24:	4298      	cmp	r0, r3
34019e26:	d028      	beq.n	34019e7a <RCCEx_GetUSARTCLKFreq+0x116>
34019e28:	d81c      	bhi.n	34019e64 <RCCEx_GetUSARTCLKFreq+0x100>
34019e2a:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
34019e2e:	3bfc      	subs	r3, #252	@ 0xfc
34019e30:	4298      	cmp	r0, r3
34019e32:	d006      	beq.n	34019e42 <RCCEx_GetUSARTCLKFreq+0xde>
34019e34:	d810      	bhi.n	34019e58 <RCCEx_GetUSARTCLKFreq+0xf4>
34019e36:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34019e3a:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34019e3e:	4298      	cmp	r0, r3
34019e40:	d1ad      	bne.n	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34019e42:	f7fc fc21 	bl	34016688 <LL_RCC_IC14_IsEnabled>
34019e46:	2800      	cmp	r0, #0
34019e48:	d0a9      	beq.n	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
34019e4a:	f7fc fc25 	bl	34016698 <LL_RCC_IC14_GetDivider>
34019e4e:	4b3c      	ldr	r3, [pc, #240]	@ (34019f40 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34019e50:	4604      	mov	r4, r0
34019e52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34019e56:	e7cf      	b.n	34019df8 <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019e58:	4b3b      	ldr	r3, [pc, #236]	@ (34019f48 <RCCEx_GetUSARTCLKFreq+0x1e4>)
34019e5a:	4298      	cmp	r0, r3
34019e5c:	d0f1      	beq.n	34019e42 <RCCEx_GetUSARTCLKFreq+0xde>
34019e5e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34019e62:	e7ec      	b.n	34019e3e <RCCEx_GetUSARTCLKFreq+0xda>
34019e64:	4b39      	ldr	r3, [pc, #228]	@ (34019f4c <RCCEx_GetUSARTCLKFreq+0x1e8>)
34019e66:	4298      	cmp	r0, r3
34019e68:	d007      	beq.n	34019e7a <RCCEx_GetUSARTCLKFreq+0x116>
34019e6a:	bf8e      	itee	hi
34019e6c:	4b38      	ldrhi	r3, [pc, #224]	@ (34019f50 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34019e6e:	f020 0004 	bicls.w	r0, r0, #4
34019e72:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34019e76:	4298      	cmp	r0, r3
34019e78:	d191      	bne.n	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
34019e7a:	f7fc fba7 	bl	340165cc <LL_RCC_LSE_IsReady>
34019e7e:	3800      	subs	r0, #0
34019e80:	bf18      	it	ne
34019e82:	2001      	movne	r0, #1
34019e84:	03c0      	lsls	r0, r0, #15
34019e86:	e78b      	b.n	34019da0 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019e88:	4b32      	ldr	r3, [pc, #200]	@ (34019f54 <RCCEx_GetUSARTCLKFreq+0x1f0>)
34019e8a:	4298      	cmp	r0, r3
34019e8c:	d020      	beq.n	34019ed0 <RCCEx_GetUSARTCLKFreq+0x16c>
34019e8e:	d813      	bhi.n	34019eb8 <RCCEx_GetUSARTCLKFreq+0x154>
34019e90:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34019e94:	4298      	cmp	r0, r3
34019e96:	d008      	beq.n	34019eaa <RCCEx_GetUSARTCLKFreq+0x146>
34019e98:	bf8e      	itee	hi
34019e9a:	4b2f      	ldrhi	r3, [pc, #188]	@ (34019f58 <RCCEx_GetUSARTCLKFreq+0x1f4>)
34019e9c:	f020 0004 	bicls.w	r0, r0, #4
34019ea0:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34019ea4:	4298      	cmp	r0, r3
34019ea6:	f47f af7a 	bne.w	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
34019eaa:	f7fc fb87 	bl	340165bc <LL_RCC_MSI_IsReady>
34019eae:	2800      	cmp	r0, #0
34019eb0:	f43f af75 	beq.w	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34019eb4:	4829      	ldr	r0, [pc, #164]	@ (34019f5c <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
34019eb6:	e773      	b.n	34019da0 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34019eb8:	4b29      	ldr	r3, [pc, #164]	@ (34019f60 <RCCEx_GetUSARTCLKFreq+0x1fc>)
34019eba:	4298      	cmp	r0, r3
34019ebc:	d008      	beq.n	34019ed0 <RCCEx_GetUSARTCLKFreq+0x16c>
34019ebe:	bf8e      	itee	hi
34019ec0:	4b28      	ldrhi	r3, [pc, #160]	@ (34019f64 <RCCEx_GetUSARTCLKFreq+0x200>)
34019ec2:	f020 0004 	bicls.w	r0, r0, #4
34019ec6:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34019eca:	4298      	cmp	r0, r3
34019ecc:	f47f af67 	bne.w	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34019ed0:	f7fc fb6c 	bl	340165ac <LL_RCC_HSI_IsReady>
34019ed4:	2800      	cmp	r0, #0
34019ed6:	f43f af62 	beq.w	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34019eda:	4b19      	ldr	r3, [pc, #100]	@ (34019f40 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019edc:	4822      	ldr	r0, [pc, #136]	@ (34019f68 <RCCEx_GetUSARTCLKFreq+0x204>)
34019ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34019ee0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34019ee4:	e007      	b.n	34019ef6 <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019ee6:	f7fc fae7 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
34019eea:	f7fc fbf1 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34019eee:	4b14      	ldr	r3, [pc, #80]	@ (34019f40 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34019ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34019ef2:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34019ef6:	40d8      	lsrs	r0, r3
34019ef8:	e752      	b.n	34019da0 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34019efa:	f7fc fadd 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
34019efe:	f7fc fbe7 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34019f02:	4b0f      	ldr	r3, [pc, #60]	@ (34019f40 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34019f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34019f06:	f003 0307 	and.w	r3, r3, #7
34019f0a:	e7f4      	b.n	34019ef6 <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
34019f0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34019f10:	f47f af45 	bne.w	34019d9e <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34019f14:	f7ff fcee 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
34019f18:	e77b      	b.n	34019e12 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34019f1a:	f7ff fc6b 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
34019f1e:	e778      	b.n	34019e12 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34019f20:	f7ff fca8 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
34019f24:	e775      	b.n	34019e12 <RCCEx_GetUSARTCLKFreq+0xae>
34019f26:	bf00      	nop
34019f28:	07021430 	.word	0x07021430
34019f2c:	07000830 	.word	0x07000830
34019f30:	07011430 	.word	0x07011430
34019f34:	07010830 	.word	0x07010830
34019f38:	07020434 	.word	0x07020434
34019f3c:	07020830 	.word	0x07020830
34019f40:	56028000 	.word	0x56028000
34019f44:	07050030 	.word	0x07050030
34019f48:	07030830 	.word	0x07030830
34019f4c:	07040830 	.word	0x07040830
34019f50:	07041430 	.word	0x07041430
34019f54:	07060030 	.word	0x07060030
34019f58:	07051430 	.word	0x07051430
34019f5c:	003d0900 	.word	0x003d0900
34019f60:	07060830 	.word	0x07060830
34019f64:	07061430 	.word	0x07061430
34019f68:	03d09000 	.word	0x03d09000

34019f6c <RCCEx_GetUARTCLKFreq>:
{
34019f6c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34019f6e:	f7fc fb47 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019f72:	4b77      	ldr	r3, [pc, #476]	@ (3401a150 <RCCEx_GetUARTCLKFreq+0x1e4>)
34019f74:	4298      	cmp	r0, r3
34019f76:	d03e      	beq.n	34019ff6 <RCCEx_GetUARTCLKFreq+0x8a>
34019f78:	d859      	bhi.n	3401a02e <RCCEx_GetUARTCLKFreq+0xc2>
34019f7a:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34019f7e:	4298      	cmp	r0, r3
34019f80:	f000 80c6 	beq.w	3401a110 <RCCEx_GetUARTCLKFreq+0x1a4>
34019f84:	d814      	bhi.n	34019fb0 <RCCEx_GetUARTCLKFreq+0x44>
34019f86:	4b73      	ldr	r3, [pc, #460]	@ (3401a154 <RCCEx_GetUARTCLKFreq+0x1e8>)
34019f88:	4298      	cmp	r0, r3
34019f8a:	f000 80cb 	beq.w	3401a124 <RCCEx_GetUARTCLKFreq+0x1b8>
34019f8e:	3b01      	subs	r3, #1
34019f90:	4298      	cmp	r0, r3
34019f92:	d90b      	bls.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
34019f94:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
34019f98:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34019f9c:	429a      	cmp	r2, r3
34019f9e:	f000 80b7 	beq.w	3401a110 <RCCEx_GetUARTCLKFreq+0x1a4>
34019fa2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34019fa6:	4298      	cmp	r0, r3
34019fa8:	f000 80b2 	beq.w	3401a110 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34019fac:	2000      	movs	r0, #0
}
34019fae:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019fb0:	4b69      	ldr	r3, [pc, #420]	@ (3401a158 <RCCEx_GetUARTCLKFreq+0x1ec>)
34019fb2:	4298      	cmp	r0, r3
34019fb4:	d00d      	beq.n	34019fd2 <RCCEx_GetUARTCLKFreq+0x66>
34019fb6:	d812      	bhi.n	34019fde <RCCEx_GetUARTCLKFreq+0x72>
34019fb8:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34019fbc:	4298      	cmp	r0, r3
34019fbe:	d008      	beq.n	34019fd2 <RCCEx_GetUARTCLKFreq+0x66>
34019fc0:	d80b      	bhi.n	34019fda <RCCEx_GetUARTCLKFreq+0x6e>
34019fc2:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34019fc6:	4298      	cmp	r0, r3
34019fc8:	d003      	beq.n	34019fd2 <RCCEx_GetUARTCLKFreq+0x66>
34019fca:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34019fce:	4298      	cmp	r0, r3
34019fd0:	d1ec      	bne.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
}
34019fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34019fd6:	f7ff bccd 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34019fda:	4b60      	ldr	r3, [pc, #384]	@ (3401a15c <RCCEx_GetUARTCLKFreq+0x1f0>)
34019fdc:	e7f7      	b.n	34019fce <RCCEx_GetUARTCLKFreq+0x62>
34019fde:	4b60      	ldr	r3, [pc, #384]	@ (3401a160 <RCCEx_GetUARTCLKFreq+0x1f4>)
34019fe0:	4298      	cmp	r0, r3
34019fe2:	d008      	beq.n	34019ff6 <RCCEx_GetUARTCLKFreq+0x8a>
34019fe4:	d821      	bhi.n	3401a02a <RCCEx_GetUARTCLKFreq+0xbe>
34019fe6:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34019fea:	4298      	cmp	r0, r3
34019fec:	d003      	beq.n	34019ff6 <RCCEx_GetUARTCLKFreq+0x8a>
34019fee:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34019ff2:	4298      	cmp	r0, r3
34019ff4:	d1da      	bne.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34019ff6:	f7fc fb35 	bl	34016664 <LL_RCC_IC9_IsEnabled>
34019ffa:	2800      	cmp	r0, #0
34019ffc:	d0d6      	beq.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
34019ffe:	f7fc fb39 	bl	34016674 <LL_RCC_IC9_GetDivider>
3401a002:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3401a004:	4b57      	ldr	r3, [pc, #348]	@ (3401a164 <RCCEx_GetUARTCLKFreq+0x1f8>)
3401a006:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3401a00a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
3401a00e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a012:	f000 809a 	beq.w	3401a14a <RCCEx_GetUARTCLKFreq+0x1de>
3401a016:	f200 808e 	bhi.w	3401a136 <RCCEx_GetUARTCLKFreq+0x1ca>
3401a01a:	2b00      	cmp	r3, #0
3401a01c:	f040 8092 	bne.w	3401a144 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a020:	f7ff fba8 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
3401a024:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a028:	e7c1      	b.n	34019fae <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401a02a:	4b4f      	ldr	r3, [pc, #316]	@ (3401a168 <RCCEx_GetUARTCLKFreq+0x1fc>)
3401a02c:	e7e1      	b.n	34019ff2 <RCCEx_GetUARTCLKFreq+0x86>
3401a02e:	4b4f      	ldr	r3, [pc, #316]	@ (3401a16c <RCCEx_GetUARTCLKFreq+0x200>)
3401a030:	4298      	cmp	r0, r3
3401a032:	d04a      	beq.n	3401a0ca <RCCEx_GetUARTCLKFreq+0x15e>
3401a034:	d836      	bhi.n	3401a0a4 <RCCEx_GetUARTCLKFreq+0x138>
3401a036:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a03a:	4298      	cmp	r0, r3
3401a03c:	d029      	beq.n	3401a092 <RCCEx_GetUARTCLKFreq+0x126>
3401a03e:	d81c      	bhi.n	3401a07a <RCCEx_GetUARTCLKFreq+0x10e>
3401a040:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3401a044:	3b04      	subs	r3, #4
3401a046:	4298      	cmp	r0, r3
3401a048:	d008      	beq.n	3401a05c <RCCEx_GetUARTCLKFreq+0xf0>
3401a04a:	d812      	bhi.n	3401a072 <RCCEx_GetUARTCLKFreq+0x106>
3401a04c:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3401a050:	4298      	cmp	r0, r3
3401a052:	d003      	beq.n	3401a05c <RCCEx_GetUARTCLKFreq+0xf0>
3401a054:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
3401a058:	4298      	cmp	r0, r3
3401a05a:	d1a7      	bne.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401a05c:	f7fc fb14 	bl	34016688 <LL_RCC_IC14_IsEnabled>
3401a060:	2800      	cmp	r0, #0
3401a062:	d0a3      	beq.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
3401a064:	f7fc fb18 	bl	34016698 <LL_RCC_IC14_GetDivider>
3401a068:	4b3e      	ldr	r3, [pc, #248]	@ (3401a164 <RCCEx_GetUARTCLKFreq+0x1f8>)
3401a06a:	4604      	mov	r4, r0
3401a06c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3401a070:	e7cb      	b.n	3401a00a <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401a072:	4b3f      	ldr	r3, [pc, #252]	@ (3401a170 <RCCEx_GetUARTCLKFreq+0x204>)
3401a074:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a078:	e7ee      	b.n	3401a058 <RCCEx_GetUARTCLKFreq+0xec>
3401a07a:	4b3e      	ldr	r3, [pc, #248]	@ (3401a174 <RCCEx_GetUARTCLKFreq+0x208>)
3401a07c:	4298      	cmp	r0, r3
3401a07e:	d008      	beq.n	3401a092 <RCCEx_GetUARTCLKFreq+0x126>
3401a080:	d80e      	bhi.n	3401a0a0 <RCCEx_GetUARTCLKFreq+0x134>
3401a082:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401a086:	4298      	cmp	r0, r3
3401a088:	d003      	beq.n	3401a092 <RCCEx_GetUARTCLKFreq+0x126>
3401a08a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a08e:	4298      	cmp	r0, r3
3401a090:	d18c      	bne.n	34019fac <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
3401a092:	f7fc fa9b 	bl	340165cc <LL_RCC_LSE_IsReady>
3401a096:	3800      	subs	r0, #0
3401a098:	bf18      	it	ne
3401a09a:	2001      	movne	r0, #1
3401a09c:	03c0      	lsls	r0, r0, #15
3401a09e:	e786      	b.n	34019fae <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401a0a0:	4b35      	ldr	r3, [pc, #212]	@ (3401a178 <RCCEx_GetUARTCLKFreq+0x20c>)
3401a0a2:	e7f4      	b.n	3401a08e <RCCEx_GetUARTCLKFreq+0x122>
3401a0a4:	4b35      	ldr	r3, [pc, #212]	@ (3401a17c <RCCEx_GetUARTCLKFreq+0x210>)
3401a0a6:	4298      	cmp	r0, r3
3401a0a8:	d025      	beq.n	3401a0f6 <RCCEx_GetUARTCLKFreq+0x18a>
3401a0aa:	d817      	bhi.n	3401a0dc <RCCEx_GetUARTCLKFreq+0x170>
3401a0ac:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
3401a0b0:	3b04      	subs	r3, #4
3401a0b2:	4298      	cmp	r0, r3
3401a0b4:	d009      	beq.n	3401a0ca <RCCEx_GetUARTCLKFreq+0x15e>
3401a0b6:	d80f      	bhi.n	3401a0d8 <RCCEx_GetUARTCLKFreq+0x16c>
3401a0b8:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401a0bc:	4298      	cmp	r0, r3
3401a0be:	d004      	beq.n	3401a0ca <RCCEx_GetUARTCLKFreq+0x15e>
3401a0c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a0c4:	4298      	cmp	r0, r3
3401a0c6:	f47f af71 	bne.w	34019fac <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
3401a0ca:	f7fc fa77 	bl	340165bc <LL_RCC_MSI_IsReady>
3401a0ce:	2800      	cmp	r0, #0
3401a0d0:	f43f af6c 	beq.w	34019fac <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
3401a0d4:	482a      	ldr	r0, [pc, #168]	@ (3401a180 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
3401a0d6:	e76a      	b.n	34019fae <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401a0d8:	4b2a      	ldr	r3, [pc, #168]	@ (3401a184 <RCCEx_GetUARTCLKFreq+0x218>)
3401a0da:	e7f3      	b.n	3401a0c4 <RCCEx_GetUARTCLKFreq+0x158>
3401a0dc:	4b2a      	ldr	r3, [pc, #168]	@ (3401a188 <RCCEx_GetUARTCLKFreq+0x21c>)
3401a0de:	4298      	cmp	r0, r3
3401a0e0:	d009      	beq.n	3401a0f6 <RCCEx_GetUARTCLKFreq+0x18a>
3401a0e2:	d813      	bhi.n	3401a10c <RCCEx_GetUARTCLKFreq+0x1a0>
3401a0e4:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401a0e8:	4298      	cmp	r0, r3
3401a0ea:	d004      	beq.n	3401a0f6 <RCCEx_GetUARTCLKFreq+0x18a>
3401a0ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a0f0:	4298      	cmp	r0, r3
3401a0f2:	f47f af5b 	bne.w	34019fac <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a0f6:	f7fc fa59 	bl	340165ac <LL_RCC_HSI_IsReady>
3401a0fa:	2800      	cmp	r0, #0
3401a0fc:	f43f af56 	beq.w	34019fac <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a100:	4b18      	ldr	r3, [pc, #96]	@ (3401a164 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a102:	4822      	ldr	r0, [pc, #136]	@ (3401a18c <RCCEx_GetUARTCLKFreq+0x220>)
3401a104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401a106:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401a10a:	e009      	b.n	3401a120 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3401a10c:	4b20      	ldr	r3, [pc, #128]	@ (3401a190 <RCCEx_GetUARTCLKFreq+0x224>)
3401a10e:	e7ef      	b.n	3401a0f0 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a110:	f7fc f9d2 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a114:	f7fc fadc 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401a118:	4b12      	ldr	r3, [pc, #72]	@ (3401a164 <RCCEx_GetUARTCLKFreq+0x1f8>)
3401a11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401a11c:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a120:	40d8      	lsrs	r0, r3
3401a122:	e744      	b.n	34019fae <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a124:	f7fc f9c8 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a128:	f7fc fad2 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3401a12c:	4b0d      	ldr	r3, [pc, #52]	@ (3401a164 <RCCEx_GetUARTCLKFreq+0x1f8>)
3401a12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3401a130:	f3c3 1302 	ubfx	r3, r3, #4, #3
3401a134:	e7f4      	b.n	3401a120 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
3401a136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a13a:	f47f af37 	bne.w	34019fac <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a13e:	f7ff fbd9 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401a142:	e76f      	b.n	3401a024 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a144:	f7ff fb56 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401a148:	e76c      	b.n	3401a024 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a14a:	f7ff fb93 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401a14e:	e769      	b.n	3401a024 <RCCEx_GetUARTCLKFreq+0xb8>
3401a150:	07021c30 	.word	0x07021c30
3401a154:	07000034 	.word	0x07000034
3401a158:	07011c30 	.word	0x07011c30
3401a15c:	07011830 	.word	0x07011830
3401a160:	07021030 	.word	0x07021030
3401a164:	56028000 	.word	0x56028000
3401a168:	07021830 	.word	0x07021830
3401a16c:	07050034 	.word	0x07050034
3401a170:	07031830 	.word	0x07031830
3401a174:	07041830 	.word	0x07041830
3401a178:	07041c30 	.word	0x07041c30
3401a17c:	07060034 	.word	0x07060034
3401a180:	003d0900 	.word	0x003d0900
3401a184:	07051c30 	.word	0x07051c30
3401a188:	07061830 	.word	0x07061830
3401a18c:	03d09000 	.word	0x03d09000
3401a190:	07061c30 	.word	0x07061c30

3401a194 <RCCEx_GetSPICLKFreq>:
{
3401a194:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401a196:	f7fc fa33 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a19a:	4b89      	ldr	r3, [pc, #548]	@ (3401a3c0 <RCCEx_GetSPICLKFreq+0x22c>)
3401a19c:	4298      	cmp	r0, r3
3401a19e:	d055      	beq.n	3401a24c <RCCEx_GetSPICLKFreq+0xb8>
3401a1a0:	d865      	bhi.n	3401a26e <RCCEx_GetSPICLKFreq+0xda>
3401a1a2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
3401a1a6:	4298      	cmp	r0, r3
3401a1a8:	f000 80ca 	beq.w	3401a340 <RCCEx_GetSPICLKFreq+0x1ac>
3401a1ac:	d81e      	bhi.n	3401a1ec <RCCEx_GetSPICLKFreq+0x58>
3401a1ae:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401a1b2:	4298      	cmp	r0, r3
3401a1b4:	f000 80ba 	beq.w	3401a32c <RCCEx_GetSPICLKFreq+0x198>
3401a1b8:	d80a      	bhi.n	3401a1d0 <RCCEx_GetSPICLKFreq+0x3c>
3401a1ba:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a1be:	4298      	cmp	r0, r3
3401a1c0:	d00b      	beq.n	3401a1da <RCCEx_GetSPICLKFreq+0x46>
3401a1c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a1c6:	4298      	cmp	r0, r3
3401a1c8:	f000 80b0 	beq.w	3401a32c <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3401a1cc:	2000      	movs	r0, #0
}
3401a1ce:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a1d0:	4b7c      	ldr	r3, [pc, #496]	@ (3401a3c4 <RCCEx_GetSPICLKFreq+0x230>)
3401a1d2:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a1d6:	4298      	cmp	r0, r3
3401a1d8:	d1f8      	bne.n	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a1da:	f7fc f96d 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a1de:	f7fc fa77 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3401a1e2:	4b79      	ldr	r3, [pc, #484]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
3401a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3401a1e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
3401a1ea:	e0a7      	b.n	3401a33c <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a1ec:	4b77      	ldr	r3, [pc, #476]	@ (3401a3cc <RCCEx_GetSPICLKFreq+0x238>)
3401a1ee:	4298      	cmp	r0, r3
3401a1f0:	f000 80af 	beq.w	3401a352 <RCCEx_GetSPICLKFreq+0x1be>
3401a1f4:	d81d      	bhi.n	3401a232 <RCCEx_GetSPICLKFreq+0x9e>
3401a1f6:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3401a1fa:	4298      	cmp	r0, r3
3401a1fc:	d00a      	beq.n	3401a214 <RCCEx_GetSPICLKFreq+0x80>
3401a1fe:	d80d      	bhi.n	3401a21c <RCCEx_GetSPICLKFreq+0x88>
3401a200:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a204:	4298      	cmp	r0, r3
3401a206:	d005      	beq.n	3401a214 <RCCEx_GetSPICLKFreq+0x80>
3401a208:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
3401a20c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
3401a210:	4298      	cmp	r0, r3
3401a212:	d1db      	bne.n	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
}
3401a214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a218:	f7ff bbac 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a21c:	4b6c      	ldr	r3, [pc, #432]	@ (3401a3d0 <RCCEx_GetSPICLKFreq+0x23c>)
3401a21e:	4298      	cmp	r0, r3
3401a220:	d0f8      	beq.n	3401a214 <RCCEx_GetSPICLKFreq+0x80>
3401a222:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
3401a226:	4298      	cmp	r0, r3
3401a228:	f000 8093 	beq.w	3401a352 <RCCEx_GetSPICLKFreq+0x1be>
3401a22c:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3401a230:	e7ee      	b.n	3401a210 <RCCEx_GetSPICLKFreq+0x7c>
3401a232:	4b68      	ldr	r3, [pc, #416]	@ (3401a3d4 <RCCEx_GetSPICLKFreq+0x240>)
3401a234:	4298      	cmp	r0, r3
3401a236:	d009      	beq.n	3401a24c <RCCEx_GetSPICLKFreq+0xb8>
3401a238:	d813      	bhi.n	3401a262 <RCCEx_GetSPICLKFreq+0xce>
3401a23a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a23e:	4298      	cmp	r0, r3
3401a240:	f000 8087 	beq.w	3401a352 <RCCEx_GetSPICLKFreq+0x1be>
3401a244:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a248:	4298      	cmp	r0, r3
3401a24a:	d1bf      	bne.n	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3401a24c:	f7fc fa0a 	bl	34016664 <LL_RCC_IC9_IsEnabled>
3401a250:	2800      	cmp	r0, #0
3401a252:	d0bb      	beq.n	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
3401a254:	f7fc fa0e 	bl	34016674 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3401a258:	4b5b      	ldr	r3, [pc, #364]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
3401a25a:	4604      	mov	r4, r0
3401a25c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3401a260:	e082      	b.n	3401a368 <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a262:	4b5d      	ldr	r3, [pc, #372]	@ (3401a3d8 <RCCEx_GetSPICLKFreq+0x244>)
3401a264:	4298      	cmp	r0, r3
3401a266:	d074      	beq.n	3401a352 <RCCEx_GetSPICLKFreq+0x1be>
3401a268:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
3401a26c:	e7ec      	b.n	3401a248 <RCCEx_GetSPICLKFreq+0xb4>
3401a26e:	4b5b      	ldr	r3, [pc, #364]	@ (3401a3dc <RCCEx_GetSPICLKFreq+0x248>)
3401a270:	4298      	cmp	r0, r3
3401a272:	d043      	beq.n	3401a2fc <RCCEx_GetSPICLKFreq+0x168>
3401a274:	d830      	bhi.n	3401a2d8 <RCCEx_GetSPICLKFreq+0x144>
3401a276:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
3401a27a:	4298      	cmp	r0, r3
3401a27c:	d0e6      	beq.n	3401a24c <RCCEx_GetSPICLKFreq+0xb8>
3401a27e:	d808      	bhi.n	3401a292 <RCCEx_GetSPICLKFreq+0xfe>
3401a280:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3401a284:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a288:	429a      	cmp	r2, r3
3401a28a:	d079      	beq.n	3401a380 <RCCEx_GetSPICLKFreq+0x1ec>
3401a28c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
3401a290:	e7da      	b.n	3401a248 <RCCEx_GetSPICLKFreq+0xb4>
3401a292:	4b53      	ldr	r3, [pc, #332]	@ (3401a3e0 <RCCEx_GetSPICLKFreq+0x24c>)
3401a294:	4298      	cmp	r0, r3
3401a296:	d00d      	beq.n	3401a2b4 <RCCEx_GetSPICLKFreq+0x120>
3401a298:	d814      	bhi.n	3401a2c4 <RCCEx_GetSPICLKFreq+0x130>
3401a29a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a29e:	4298      	cmp	r0, r3
3401a2a0:	d008      	beq.n	3401a2b4 <RCCEx_GetSPICLKFreq+0x120>
3401a2a2:	d80d      	bhi.n	3401a2c0 <RCCEx_GetSPICLKFreq+0x12c>
3401a2a4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a2a8:	4298      	cmp	r0, r3
3401a2aa:	d003      	beq.n	3401a2b4 <RCCEx_GetSPICLKFreq+0x120>
3401a2ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a2b0:	4298      	cmp	r0, r3
3401a2b2:	d18b      	bne.n	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
3401a2b4:	f7fc f982 	bl	340165bc <LL_RCC_MSI_IsReady>
3401a2b8:	2800      	cmp	r0, #0
3401a2ba:	d087      	beq.n	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
3401a2bc:	4849      	ldr	r0, [pc, #292]	@ (3401a3e4 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
3401a2be:	e786      	b.n	3401a1ce <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a2c0:	4b49      	ldr	r3, [pc, #292]	@ (3401a3e8 <RCCEx_GetSPICLKFreq+0x254>)
3401a2c2:	e7f5      	b.n	3401a2b0 <RCCEx_GetSPICLKFreq+0x11c>
3401a2c4:	4b49      	ldr	r3, [pc, #292]	@ (3401a3ec <RCCEx_GetSPICLKFreq+0x258>)
3401a2c6:	4298      	cmp	r0, r3
3401a2c8:	d018      	beq.n	3401a2fc <RCCEx_GetSPICLKFreq+0x168>
3401a2ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a2ce:	4298      	cmp	r0, r3
3401a2d0:	d014      	beq.n	3401a2fc <RCCEx_GetSPICLKFreq+0x168>
3401a2d2:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3401a2d6:	e7eb      	b.n	3401a2b0 <RCCEx_GetSPICLKFreq+0x11c>
3401a2d8:	4b45      	ldr	r3, [pc, #276]	@ (3401a3f0 <RCCEx_GetSPICLKFreq+0x25c>)
3401a2da:	4298      	cmp	r0, r3
3401a2dc:	d069      	beq.n	3401a3b2 <RCCEx_GetSPICLKFreq+0x21e>
3401a2de:	d81e      	bhi.n	3401a31e <RCCEx_GetSPICLKFreq+0x18a>
3401a2e0:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401a2e4:	4298      	cmp	r0, r3
3401a2e6:	d018      	beq.n	3401a31a <RCCEx_GetSPICLKFreq+0x186>
3401a2e8:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
3401a2ec:	d811      	bhi.n	3401a312 <RCCEx_GetSPICLKFreq+0x17e>
3401a2ee:	4a41      	ldr	r2, [pc, #260]	@ (3401a3f4 <RCCEx_GetSPICLKFreq+0x260>)
3401a2f0:	4293      	cmp	r3, r2
3401a2f2:	d003      	beq.n	3401a2fc <RCCEx_GetSPICLKFreq+0x168>
3401a2f4:	4b40      	ldr	r3, [pc, #256]	@ (3401a3f8 <RCCEx_GetSPICLKFreq+0x264>)
3401a2f6:	4298      	cmp	r0, r3
3401a2f8:	f47f af68 	bne.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a2fc:	f7fc f956 	bl	340165ac <LL_RCC_HSI_IsReady>
3401a300:	2800      	cmp	r0, #0
3401a302:	f43f af63 	beq.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a306:	4b30      	ldr	r3, [pc, #192]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a308:	483c      	ldr	r0, [pc, #240]	@ (3401a3fc <RCCEx_GetSPICLKFreq+0x268>)
3401a30a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401a30c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401a310:	e014      	b.n	3401a33c <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3401a312:	4a3b      	ldr	r2, [pc, #236]	@ (3401a400 <RCCEx_GetSPICLKFreq+0x26c>)
3401a314:	4293      	cmp	r3, r2
3401a316:	f47f af59 	bne.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
3401a31a:	483a      	ldr	r0, [pc, #232]	@ (3401a404 <RCCEx_GetSPICLKFreq+0x270>)
3401a31c:	e757      	b.n	3401a1ce <RCCEx_GetSPICLKFreq+0x3a>
3401a31e:	4b3a      	ldr	r3, [pc, #232]	@ (3401a408 <RCCEx_GetSPICLKFreq+0x274>)
3401a320:	4298      	cmp	r0, r3
3401a322:	d046      	beq.n	3401a3b2 <RCCEx_GetSPICLKFreq+0x21e>
3401a324:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a328:	4298      	cmp	r0, r3
3401a32a:	e7f4      	b.n	3401a316 <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a32c:	f7fc f8c4 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a330:	f7fc f9ce 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401a334:	4b24      	ldr	r3, [pc, #144]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
3401a336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401a338:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3401a33c:	40d8      	lsrs	r0, r3
      break;
3401a33e:	e746      	b.n	3401a1ce <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a340:	f7fc f8ba 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a344:	f7fc f9c4 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3401a348:	4b1f      	ldr	r3, [pc, #124]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
3401a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3401a34c:	f3c3 3302 	ubfx	r3, r3, #12, #3
3401a350:	e7f4      	b.n	3401a33c <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401a352:	f7fc f975 	bl	34016640 <LL_RCC_IC8_IsEnabled>
3401a356:	2800      	cmp	r0, #0
3401a358:	f43f af38 	beq.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
3401a35c:	f7fc f978 	bl	34016650 <LL_RCC_IC8_GetDivider>
3401a360:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401a362:	4b19      	ldr	r3, [pc, #100]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
3401a364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3401a368:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
3401a36c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a370:	d01c      	beq.n	3401a3ac <RCCEx_GetSPICLKFreq+0x218>
3401a372:	d811      	bhi.n	3401a398 <RCCEx_GetSPICLKFreq+0x204>
3401a374:	b9bb      	cbnz	r3, 3401a3a6 <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a376:	f7ff f9fd 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
3401a37a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a37e:	e726      	b.n	3401a1ce <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401a380:	f7fc f982 	bl	34016688 <LL_RCC_IC14_IsEnabled>
3401a384:	2800      	cmp	r0, #0
3401a386:	f43f af21 	beq.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
3401a38a:	f7fc f985 	bl	34016698 <LL_RCC_IC14_GetDivider>
3401a38e:	4b0e      	ldr	r3, [pc, #56]	@ (3401a3c8 <RCCEx_GetSPICLKFreq+0x234>)
3401a390:	4604      	mov	r4, r0
3401a392:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3401a396:	e7e7      	b.n	3401a368 <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
3401a398:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a39c:	f47f af16 	bne.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a3a0:	f7ff faa8 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401a3a4:	e7e9      	b.n	3401a37a <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a3a6:	f7ff fa25 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401a3aa:	e7e6      	b.n	3401a37a <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a3ac:	f7ff fa62 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401a3b0:	e7e3      	b.n	3401a37a <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
3401a3b2:	f7fc f8f3 	bl	3401659c <LL_RCC_HSE_IsReady>
3401a3b6:	2800      	cmp	r0, #0
3401a3b8:	f43f af08 	beq.w	3401a1cc <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
3401a3bc:	4813      	ldr	r0, [pc, #76]	@ (3401a40c <RCCEx_GetSPICLKFreq+0x278>)
3401a3be:	e706      	b.n	3401a1ce <RCCEx_GetSPICLKFreq+0x3a>
3401a3c0:	07030820 	.word	0x07030820
3401a3c4:	07001020 	.word	0x07001020
3401a3c8:	56028000 	.word	0x56028000
3401a3cc:	07020820 	.word	0x07020820
3401a3d0:	07011820 	.word	0x07011820
3401a3d4:	07021420 	.word	0x07021420
3401a3d8:	07021820 	.word	0x07021820
3401a3dc:	07050c20 	.word	0x07050c20
3401a3e0:	07041420 	.word	0x07041420
3401a3e4:	003d0900 	.word	0x003d0900
3401a3e8:	07041020 	.word	0x07041020
3401a3ec:	07050420 	.word	0x07050420
3401a3f0:	07061020 	.word	0x07061020
3401a3f4:	07051020 	.word	0x07051020
3401a3f8:	07051820 	.word	0x07051820
3401a3fc:	03d09000 	.word	0x03d09000
3401a400:	07060820 	.word	0x07060820
3401a404:	00bb8000 	.word	0x00bb8000
3401a408:	07061420 	.word	0x07061420
3401a40c:	02dc6c00 	.word	0x02dc6c00

3401a410 <RCCEx_GetSAICLKFreq>:
{
3401a410:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401a412:	f7fc f8f5 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401a416:	4b49      	ldr	r3, [pc, #292]	@ (3401a53c <RCCEx_GetSAICLKFreq+0x12c>)
3401a418:	4298      	cmp	r0, r3
3401a41a:	d04a      	beq.n	3401a4b2 <RCCEx_GetSAICLKFreq+0xa2>
3401a41c:	d839      	bhi.n	3401a492 <RCCEx_GetSAICLKFreq+0x82>
3401a41e:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
3401a422:	4298      	cmp	r0, r3
3401a424:	d021      	beq.n	3401a46a <RCCEx_GetSAICLKFreq+0x5a>
3401a426:	d815      	bhi.n	3401a454 <RCCEx_GetSAICLKFreq+0x44>
3401a428:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a42c:	4298      	cmp	r0, r3
3401a42e:	d00d      	beq.n	3401a44c <RCCEx_GetSAICLKFreq+0x3c>
3401a430:	d809      	bhi.n	3401a446 <RCCEx_GetSAICLKFreq+0x36>
3401a432:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a436:	4298      	cmp	r0, r3
3401a438:	d04e      	beq.n	3401a4d8 <RCCEx_GetSAICLKFreq+0xc8>
3401a43a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a43e:	4298      	cmp	r0, r3
3401a440:	d04a      	beq.n	3401a4d8 <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3401a442:	2000      	movs	r0, #0
}
3401a444:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401a446:	4b3e      	ldr	r3, [pc, #248]	@ (3401a540 <RCCEx_GetSAICLKFreq+0x130>)
3401a448:	4298      	cmp	r0, r3
3401a44a:	d1fa      	bne.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
}
3401a44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a450:	f7ff ba90 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401a454:	4b3b      	ldr	r3, [pc, #236]	@ (3401a544 <RCCEx_GetSAICLKFreq+0x134>)
3401a456:	4298      	cmp	r0, r3
3401a458:	d04d      	beq.n	3401a4f6 <RCCEx_GetSAICLKFreq+0xe6>
3401a45a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a45e:	4298      	cmp	r0, r3
3401a460:	d049      	beq.n	3401a4f6 <RCCEx_GetSAICLKFreq+0xe6>
3401a462:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a466:	4298      	cmp	r0, r3
3401a468:	d1eb      	bne.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401a46a:	f7fc f8d7 	bl	3401661c <LL_RCC_IC7_IsEnabled>
3401a46e:	2800      	cmp	r0, #0
3401a470:	d0e7      	beq.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
3401a472:	f7fc f8db 	bl	3401662c <LL_RCC_IC7_GetDivider>
3401a476:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3401a478:	4b33      	ldr	r3, [pc, #204]	@ (3401a548 <RCCEx_GetSAICLKFreq+0x138>)
3401a47a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401a47e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
3401a482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a486:	d047      	beq.n	3401a518 <RCCEx_GetSAICLKFreq+0x108>
3401a488:	d840      	bhi.n	3401a50c <RCCEx_GetSAICLKFreq+0xfc>
3401a48a:	bb7b      	cbnz	r3, 3401a4ec <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a48c:	f7ff f972 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
3401a490:	e02e      	b.n	3401a4f0 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401a492:	4b2e      	ldr	r3, [pc, #184]	@ (3401a54c <RCCEx_GetSAICLKFreq+0x13c>)
3401a494:	4298      	cmp	r0, r3
3401a496:	d01d      	beq.n	3401a4d4 <RCCEx_GetSAICLKFreq+0xc4>
3401a498:	d811      	bhi.n	3401a4be <RCCEx_GetSAICLKFreq+0xae>
3401a49a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a49e:	4298      	cmp	r0, r3
3401a4a0:	d03d      	beq.n	3401a51e <RCCEx_GetSAICLKFreq+0x10e>
3401a4a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a4a6:	4298      	cmp	r0, r3
3401a4a8:	d039      	beq.n	3401a51e <RCCEx_GetSAICLKFreq+0x10e>
3401a4aa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a4ae:	4298      	cmp	r0, r3
3401a4b0:	d1c7      	bne.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
3401a4b2:	f7fc f883 	bl	340165bc <LL_RCC_MSI_IsReady>
3401a4b6:	2800      	cmp	r0, #0
3401a4b8:	d0c3      	beq.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
3401a4ba:	4825      	ldr	r0, [pc, #148]	@ (3401a550 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
3401a4bc:	e7c2      	b.n	3401a444 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
3401a4be:	4b25      	ldr	r3, [pc, #148]	@ (3401a554 <RCCEx_GetSAICLKFreq+0x144>)
3401a4c0:	4298      	cmp	r0, r3
3401a4c2:	d036      	beq.n	3401a532 <RCCEx_GetSAICLKFreq+0x122>
3401a4c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a4c8:	4298      	cmp	r0, r3
3401a4ca:	d032      	beq.n	3401a532 <RCCEx_GetSAICLKFreq+0x122>
3401a4cc:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a4d0:	4298      	cmp	r0, r3
3401a4d2:	d1b6      	bne.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
3401a4d4:	4820      	ldr	r0, [pc, #128]	@ (3401a558 <RCCEx_GetSAICLKFreq+0x148>)
3401a4d6:	e7b5      	b.n	3401a444 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a4d8:	f7fb ffee 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a4dc:	f7fc f8f8 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
3401a4e0:	4b19      	ldr	r3, [pc, #100]	@ (3401a548 <RCCEx_GetSAICLKFreq+0x138>)
3401a4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3401a4e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a4e8:	40d8      	lsrs	r0, r3
3401a4ea:	e7ab      	b.n	3401a444 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a4ec:	f7ff f982 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
3401a4f0:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a4f4:	e7a6      	b.n	3401a444 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401a4f6:	f7fc f8a3 	bl	34016640 <LL_RCC_IC8_IsEnabled>
3401a4fa:	2800      	cmp	r0, #0
3401a4fc:	d0a1      	beq.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
3401a4fe:	f7fc f8a7 	bl	34016650 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401a502:	4b11      	ldr	r3, [pc, #68]	@ (3401a548 <RCCEx_GetSAICLKFreq+0x138>)
3401a504:	4604      	mov	r4, r0
3401a506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3401a50a:	e7b8      	b.n	3401a47e <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
3401a50c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a510:	d197      	bne.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a512:	f7ff f9ef 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401a516:	e7eb      	b.n	3401a4f0 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a518:	f7ff f9ac 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401a51c:	e7e8      	b.n	3401a4f0 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a51e:	f7fc f845 	bl	340165ac <LL_RCC_HSI_IsReady>
3401a522:	2800      	cmp	r0, #0
3401a524:	d08d      	beq.n	3401a442 <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a526:	4b08      	ldr	r3, [pc, #32]	@ (3401a548 <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a528:	480c      	ldr	r0, [pc, #48]	@ (3401a55c <RCCEx_GetSAICLKFreq+0x14c>)
3401a52a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401a52c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401a530:	e7da      	b.n	3401a4e8 <RCCEx_GetSAICLKFreq+0xd8>
}
3401a532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3401a536:	f7ff baa3 	b.w	34019a80 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
3401a53a:	bf00      	nop
3401a53c:	07041418 	.word	0x07041418
3401a540:	07011818 	.word	0x07011818
3401a544:	07031418 	.word	0x07031418
3401a548:	56028000 	.word	0x56028000
3401a54c:	07061418 	.word	0x07061418
3401a550:	003d0900 	.word	0x003d0900
3401a554:	07071418 	.word	0x07071418
3401a558:	00bb8000 	.word	0x00bb8000
3401a55c:	03d09000 	.word	0x03d09000

3401a560 <RCCEx_GetI3CCLKFreq>:
{
3401a560:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401a562:	f7fc f84d 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401a566:	4b3d      	ldr	r3, [pc, #244]	@ (3401a65c <RCCEx_GetI3CCLKFreq+0xfc>)
3401a568:	4298      	cmp	r0, r3
3401a56a:	d060      	beq.n	3401a62e <RCCEx_GetI3CCLKFreq+0xce>
3401a56c:	d830      	bhi.n	3401a5d0 <RCCEx_GetI3CCLKFreq+0x70>
3401a56e:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
3401a572:	4298      	cmp	r0, r3
3401a574:	d057      	beq.n	3401a626 <RCCEx_GetI3CCLKFreq+0xc6>
3401a576:	d80d      	bhi.n	3401a594 <RCCEx_GetI3CCLKFreq+0x34>
3401a578:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a57c:	4298      	cmp	r0, r3
3401a57e:	d048      	beq.n	3401a612 <RCCEx_GetI3CCLKFreq+0xb2>
3401a580:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
3401a584:	4298      	cmp	r0, r3
3401a586:	d04e      	beq.n	3401a626 <RCCEx_GetI3CCLKFreq+0xc6>
3401a588:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a58c:	4298      	cmp	r0, r3
3401a58e:	d040      	beq.n	3401a612 <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
3401a590:	2000      	movs	r0, #0
}
3401a592:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401a594:	4b32      	ldr	r3, [pc, #200]	@ (3401a660 <RCCEx_GetI3CCLKFreq+0x100>)
3401a596:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a59a:	4298      	cmp	r0, r3
3401a59c:	d1f8      	bne.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3401a59e:	4b31      	ldr	r3, [pc, #196]	@ (3401a664 <RCCEx_GetI3CCLKFreq+0x104>)
3401a5a0:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401a5a4:	0592      	lsls	r2, r2, #22
3401a5a6:	d5f3      	bpl.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401a5a8:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3401a5ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401a5b0:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a5b4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3401a5b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3401a5ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a5be:	d04a      	beq.n	3401a656 <RCCEx_GetI3CCLKFreq+0xf6>
3401a5c0:	d840      	bhi.n	3401a644 <RCCEx_GetI3CCLKFreq+0xe4>
3401a5c2:	2b00      	cmp	r3, #0
3401a5c4:	d144      	bne.n	3401a650 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a5c6:	f7ff f8d5 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
3401a5ca:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a5ce:	e7e0      	b.n	3401a592 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401a5d0:	4b25      	ldr	r3, [pc, #148]	@ (3401a668 <RCCEx_GetI3CCLKFreq+0x108>)
3401a5d2:	4298      	cmp	r0, r3
3401a5d4:	d008      	beq.n	3401a5e8 <RCCEx_GetI3CCLKFreq+0x88>
3401a5d6:	d80d      	bhi.n	3401a5f4 <RCCEx_GetI3CCLKFreq+0x94>
3401a5d8:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a5dc:	4298      	cmp	r0, r3
3401a5de:	d026      	beq.n	3401a62e <RCCEx_GetI3CCLKFreq+0xce>
3401a5e0:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
3401a5e4:	4298      	cmp	r0, r3
3401a5e6:	d1d3      	bne.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
3401a5e8:	f7fb ffe8 	bl	340165bc <LL_RCC_MSI_IsReady>
3401a5ec:	2800      	cmp	r0, #0
3401a5ee:	d0cf      	beq.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
3401a5f0:	481e      	ldr	r0, [pc, #120]	@ (3401a66c <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
3401a5f2:	e7ce      	b.n	3401a592 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
3401a5f4:	4b1e      	ldr	r3, [pc, #120]	@ (3401a670 <RCCEx_GetI3CCLKFreq+0x110>)
3401a5f6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a5fa:	4298      	cmp	r0, r3
3401a5fc:	d1c8      	bne.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a5fe:	f7fb ffd5 	bl	340165ac <LL_RCC_HSI_IsReady>
3401a602:	2800      	cmp	r0, #0
3401a604:	d0c4      	beq.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a606:	4b17      	ldr	r3, [pc, #92]	@ (3401a664 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a608:	481a      	ldr	r0, [pc, #104]	@ (3401a674 <RCCEx_GetI3CCLKFreq+0x114>)
3401a60a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401a60c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401a610:	e007      	b.n	3401a622 <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a612:	f7fb ff51 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a616:	f7fc f85b 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401a61a:	4b12      	ldr	r3, [pc, #72]	@ (3401a664 <RCCEx_GetI3CCLKFreq+0x104>)
3401a61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401a61e:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a622:	40d8      	lsrs	r0, r3
3401a624:	e7b5      	b.n	3401a592 <RCCEx_GetI3CCLKFreq+0x32>
}
3401a626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a62a:	f7ff b9a3 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401a62e:	f7fc f83d 	bl	340166ac <LL_RCC_IC15_IsEnabled>
3401a632:	2800      	cmp	r0, #0
3401a634:	d0ac      	beq.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
3401a636:	f7fc f841 	bl	340166bc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3401a63a:	4b0a      	ldr	r3, [pc, #40]	@ (3401a664 <RCCEx_GetI3CCLKFreq+0x104>)
3401a63c:	4604      	mov	r4, r0
3401a63e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3401a642:	e7b8      	b.n	3401a5b6 <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
3401a644:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a648:	d1a2      	bne.n	3401a590 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a64a:	f7ff f953 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401a64e:	e7bc      	b.n	3401a5ca <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a650:	f7ff f8d0 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401a654:	e7b9      	b.n	3401a5ca <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a656:	f7ff f90d 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401a65a:	e7b6      	b.n	3401a5ca <RCCEx_GetI3CCLKFreq+0x6a>
3401a65c:	0703100c 	.word	0x0703100c
3401a660:	0702100c 	.word	0x0702100c
3401a664:	56028000 	.word	0x56028000
3401a668:	0704140c 	.word	0x0704140c
3401a66c:	003d0900 	.word	0x003d0900
3401a670:	0705100c 	.word	0x0705100c
3401a674:	03d09000 	.word	0x03d09000

3401a678 <RCCEx_GetSDMMCCLKFreq>:
{
3401a678:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401a67a:	f7fb ffc1 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3401a67e:	4b2d      	ldr	r3, [pc, #180]	@ (3401a734 <RCCEx_GetSDMMCCLKFreq+0xbc>)
3401a680:	4298      	cmp	r0, r3
3401a682:	d01d      	beq.n	3401a6c0 <RCCEx_GetSDMMCCLKFreq+0x48>
3401a684:	d813      	bhi.n	3401a6ae <RCCEx_GetSDMMCCLKFreq+0x36>
3401a686:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a68a:	4298      	cmp	r0, r3
3401a68c:	d00b      	beq.n	3401a6a6 <RCCEx_GetSDMMCCLKFreq+0x2e>
3401a68e:	d807      	bhi.n	3401a6a0 <RCCEx_GetSDMMCCLKFreq+0x28>
3401a690:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a694:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3401a698:	4298      	cmp	r0, r3
3401a69a:	d02a      	beq.n	3401a6f2 <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3401a69c:	2000      	movs	r0, #0
}
3401a69e:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3401a6a0:	4b25      	ldr	r3, [pc, #148]	@ (3401a738 <RCCEx_GetSDMMCCLKFreq+0xc0>)
3401a6a2:	4298      	cmp	r0, r3
3401a6a4:	d1fa      	bne.n	3401a69c <RCCEx_GetSDMMCCLKFreq+0x24>
}
3401a6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a6aa:	f7ff b963 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3401a6ae:	4b23      	ldr	r3, [pc, #140]	@ (3401a73c <RCCEx_GetSDMMCCLKFreq+0xc4>)
3401a6b0:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3401a6b4:	429a      	cmp	r2, r3
3401a6b6:	d022      	beq.n	3401a6fe <RCCEx_GetSDMMCCLKFreq+0x86>
3401a6b8:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3401a6bc:	4298      	cmp	r0, r3
3401a6be:	d1ed      	bne.n	3401a69c <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3401a6c0:	4b1f      	ldr	r3, [pc, #124]	@ (3401a740 <RCCEx_GetSDMMCCLKFreq+0xc8>)
3401a6c2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3401a6c6:	f010 0008 	ands.w	r0, r0, #8
3401a6ca:	d0e8      	beq.n	3401a69e <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401a6cc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3401a6d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401a6d4:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a6d8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3401a6da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
3401a6de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a6e2:	d023      	beq.n	3401a72c <RCCEx_GetSDMMCCLKFreq+0xb4>
3401a6e4:	d819      	bhi.n	3401a71a <RCCEx_GetSDMMCCLKFreq+0xa2>
3401a6e6:	b9f3      	cbnz	r3, 3401a726 <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a6e8:	f7ff f844 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3401a6ec:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
3401a6f0:	e7d5      	b.n	3401a69e <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401a6f2:	f7fb fee1 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
}
3401a6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401a6fa:	f7fb bfe9 	b.w	340166d0 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3401a6fe:	4b10      	ldr	r3, [pc, #64]	@ (3401a740 <RCCEx_GetSDMMCCLKFreq+0xc8>)
3401a700:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
3401a704:	f010 0010 	ands.w	r0, r0, #16
3401a708:	d0c9      	beq.n	3401a69e <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3401a70a:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3401a70e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3401a712:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a716:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
3401a718:	e7df      	b.n	3401a6da <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
3401a71a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a71e:	d1bd      	bne.n	3401a69c <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a720:	f7ff f8e8 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401a724:	e7e2      	b.n	3401a6ec <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a726:	f7ff f865 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401a72a:	e7df      	b.n	3401a6ec <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a72c:	f7ff f8a2 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401a730:	e7dc      	b.n	3401a6ec <RCCEx_GetSDMMCCLKFreq+0x74>
3401a732:	bf00      	nop
3401a734:	0302001c 	.word	0x0302001c
3401a738:	0301041c 	.word	0x0301041c
3401a73c:	0303001c 	.word	0x0303001c
3401a740:	56028000 	.word	0x56028000

3401a744 <RCCEx_GetI2CCLKFreq>:
{
3401a744:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401a746:	f7fb ff5b 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a74a:	4b50      	ldr	r3, [pc, #320]	@ (3401a88c <RCCEx_GetI2CCLKFreq+0x148>)
3401a74c:	4298      	cmp	r0, r3
3401a74e:	f000 8085 	beq.w	3401a85c <RCCEx_GetI2CCLKFreq+0x118>
3401a752:	d84b      	bhi.n	3401a7ec <RCCEx_GetI2CCLKFreq+0xa8>
3401a754:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
3401a758:	4298      	cmp	r0, r3
3401a75a:	d01a      	beq.n	3401a792 <RCCEx_GetI2CCLKFreq+0x4e>
3401a75c:	d81d      	bhi.n	3401a79a <RCCEx_GetI2CCLKFreq+0x56>
3401a75e:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3401a762:	4298      	cmp	r0, r3
3401a764:	d008      	beq.n	3401a778 <RCCEx_GetI2CCLKFreq+0x34>
3401a766:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
3401a76a:	d80f      	bhi.n	3401a78c <RCCEx_GetI2CCLKFreq+0x48>
3401a76c:	4a48      	ldr	r2, [pc, #288]	@ (3401a890 <RCCEx_GetI2CCLKFreq+0x14c>)
3401a76e:	4293      	cmp	r3, r2
3401a770:	d002      	beq.n	3401a778 <RCCEx_GetI2CCLKFreq+0x34>
3401a772:	4b48      	ldr	r3, [pc, #288]	@ (3401a894 <RCCEx_GetI2CCLKFreq+0x150>)
3401a774:	4298      	cmp	r0, r3
3401a776:	d14a      	bne.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401a778:	f7fb fe9e 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401a77c:	f7fb ffa8 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401a780:	4b45      	ldr	r3, [pc, #276]	@ (3401a898 <RCCEx_GetI2CCLKFreq+0x154>)
3401a782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401a784:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a788:	40d8      	lsrs	r0, r3
3401a78a:	e041      	b.n	3401a810 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a78c:	4a43      	ldr	r2, [pc, #268]	@ (3401a89c <RCCEx_GetI2CCLKFreq+0x158>)
3401a78e:	4293      	cmp	r3, r2
3401a790:	d13d      	bne.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
}
3401a792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a796:	f7ff b8ed 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a79a:	4b41      	ldr	r3, [pc, #260]	@ (3401a8a0 <RCCEx_GetI2CCLKFreq+0x15c>)
3401a79c:	4298      	cmp	r0, r3
3401a79e:	d008      	beq.n	3401a7b2 <RCCEx_GetI2CCLKFreq+0x6e>
3401a7a0:	d820      	bhi.n	3401a7e4 <RCCEx_GetI2CCLKFreq+0xa0>
3401a7a2:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3401a7a6:	4298      	cmp	r0, r3
3401a7a8:	d0f3      	beq.n	3401a792 <RCCEx_GetI2CCLKFreq+0x4e>
3401a7aa:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3401a7ae:	4298      	cmp	r0, r3
3401a7b0:	d12d      	bne.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
3401a7b2:	4b39      	ldr	r3, [pc, #228]	@ (3401a898 <RCCEx_GetI2CCLKFreq+0x154>)
3401a7b4:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401a7b8:	0592      	lsls	r2, r2, #22
3401a7ba:	d528      	bpl.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401a7bc:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
3401a7c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
3401a7c4:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401a7c8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3401a7ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3401a7ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a7d2:	d057      	beq.n	3401a884 <RCCEx_GetI2CCLKFreq+0x140>
3401a7d4:	d84d      	bhi.n	3401a872 <RCCEx_GetI2CCLKFreq+0x12e>
3401a7d6:	2b00      	cmp	r3, #0
3401a7d8:	d151      	bne.n	3401a87e <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a7da:	f7fe ffcb 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
3401a7de:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a7e2:	e015      	b.n	3401a810 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a7e4:	4b2f      	ldr	r3, [pc, #188]	@ (3401a8a4 <RCCEx_GetI2CCLKFreq+0x160>)
3401a7e6:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a7ea:	e7e0      	b.n	3401a7ae <RCCEx_GetI2CCLKFreq+0x6a>
3401a7ec:	4b2e      	ldr	r3, [pc, #184]	@ (3401a8a8 <RCCEx_GetI2CCLKFreq+0x164>)
3401a7ee:	4298      	cmp	r0, r3
3401a7f0:	d014      	beq.n	3401a81c <RCCEx_GetI2CCLKFreq+0xd8>
3401a7f2:	d819      	bhi.n	3401a828 <RCCEx_GetI2CCLKFreq+0xe4>
3401a7f4:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3401a7f8:	4298      	cmp	r0, r3
3401a7fa:	d02f      	beq.n	3401a85c <RCCEx_GetI2CCLKFreq+0x118>
3401a7fc:	d809      	bhi.n	3401a812 <RCCEx_GetI2CCLKFreq+0xce>
3401a7fe:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a802:	4298      	cmp	r0, r3
3401a804:	d02a      	beq.n	3401a85c <RCCEx_GetI2CCLKFreq+0x118>
3401a806:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a80a:	4298      	cmp	r0, r3
3401a80c:	d026      	beq.n	3401a85c <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3401a80e:	2000      	movs	r0, #0
}
3401a810:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a812:	4b26      	ldr	r3, [pc, #152]	@ (3401a8ac <RCCEx_GetI2CCLKFreq+0x168>)
3401a814:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a818:	4298      	cmp	r0, r3
3401a81a:	d1f8      	bne.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
3401a81c:	f7fb fece 	bl	340165bc <LL_RCC_MSI_IsReady>
3401a820:	2800      	cmp	r0, #0
3401a822:	d0f4      	beq.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
3401a824:	4822      	ldr	r0, [pc, #136]	@ (3401a8b0 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
3401a826:	e7f3      	b.n	3401a810 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a828:	4b22      	ldr	r3, [pc, #136]	@ (3401a8b4 <RCCEx_GetI2CCLKFreq+0x170>)
3401a82a:	4298      	cmp	r0, r3
3401a82c:	d008      	beq.n	3401a840 <RCCEx_GetI2CCLKFreq+0xfc>
3401a82e:	d811      	bhi.n	3401a854 <RCCEx_GetI2CCLKFreq+0x110>
3401a830:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3401a834:	4298      	cmp	r0, r3
3401a836:	d0f1      	beq.n	3401a81c <RCCEx_GetI2CCLKFreq+0xd8>
3401a838:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
3401a83c:	4298      	cmp	r0, r3
3401a83e:	d1e6      	bne.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
3401a840:	f7fb feb4 	bl	340165ac <LL_RCC_HSI_IsReady>
3401a844:	2800      	cmp	r0, #0
3401a846:	d0e2      	beq.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401a848:	4b13      	ldr	r3, [pc, #76]	@ (3401a898 <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401a84a:	481b      	ldr	r0, [pc, #108]	@ (3401a8b8 <RCCEx_GetI2CCLKFreq+0x174>)
3401a84c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3401a84e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401a852:	e799      	b.n	3401a788 <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3401a854:	4b19      	ldr	r3, [pc, #100]	@ (3401a8bc <RCCEx_GetI2CCLKFreq+0x178>)
3401a856:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a85a:	e7ef      	b.n	3401a83c <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401a85c:	f7fb ff26 	bl	340166ac <LL_RCC_IC15_IsEnabled>
3401a860:	2800      	cmp	r0, #0
3401a862:	d0d4      	beq.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
3401a864:	f7fb ff2a 	bl	340166bc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3401a868:	4b0b      	ldr	r3, [pc, #44]	@ (3401a898 <RCCEx_GetI2CCLKFreq+0x154>)
3401a86a:	4604      	mov	r4, r0
3401a86c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3401a870:	e7ab      	b.n	3401a7ca <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
3401a872:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401a876:	d1ca      	bne.n	3401a80e <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401a878:	f7ff f83c 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401a87c:	e7af      	b.n	3401a7de <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401a87e:	f7fe ffb9 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401a882:	e7ac      	b.n	3401a7de <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401a884:	f7fe fff6 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401a888:	e7a9      	b.n	3401a7de <RCCEx_GetI2CCLKFreq+0x9a>
3401a88a:	bf00      	nop
3401a88c:	0703000c 	.word	0x0703000c
3401a890:	0700000c 	.word	0x0700000c
3401a894:	0700080c 	.word	0x0700080c
3401a898:	56028000 	.word	0x56028000
3401a89c:	0701000c 	.word	0x0701000c
3401a8a0:	0702040c 	.word	0x0702040c
3401a8a4:	0702080c 	.word	0x0702080c
3401a8a8:	0704080c 	.word	0x0704080c
3401a8ac:	0704000c 	.word	0x0704000c
3401a8b0:	003d0900 	.word	0x003d0900
3401a8b4:	0705040c 	.word	0x0705040c
3401a8b8:	03d09000 	.word	0x03d09000
3401a8bc:	0705080c 	.word	0x0705080c

3401a8c0 <RCCEx_GetLPTIMCLKFreq>:
{
3401a8c0:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3401a8c2:	f7fb fe9d 	bl	34016600 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401a8c6:	4b63      	ldr	r3, [pc, #396]	@ (3401aa54 <RCCEx_GetLPTIMCLKFreq+0x194>)
3401a8c8:	4298      	cmp	r0, r3
3401a8ca:	d03a      	beq.n	3401a942 <RCCEx_GetLPTIMCLKFreq+0x82>
3401a8cc:	d850      	bhi.n	3401a970 <RCCEx_GetLPTIMCLKFreq+0xb0>
3401a8ce:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
3401a8d2:	4298      	cmp	r0, r3
3401a8d4:	f000 80a7 	beq.w	3401aa26 <RCCEx_GetLPTIMCLKFreq+0x166>
3401a8d8:	d813      	bhi.n	3401a902 <RCCEx_GetLPTIMCLKFreq+0x42>
3401a8da:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3401a8de:	4298      	cmp	r0, r3
3401a8e0:	f000 8097 	beq.w	3401aa12 <RCCEx_GetLPTIMCLKFreq+0x152>
3401a8e4:	3b01      	subs	r3, #1
3401a8e6:	4298      	cmp	r0, r3
3401a8e8:	d909      	bls.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
3401a8ea:	f203 4301 	addw	r3, r3, #1025	@ 0x401
3401a8ee:	4298      	cmp	r0, r3
3401a8f0:	f000 8099 	beq.w	3401aa26 <RCCEx_GetLPTIMCLKFreq+0x166>
3401a8f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a8f8:	4298      	cmp	r0, r3
3401a8fa:	f000 8094 	beq.w	3401aa26 <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
3401a8fe:	2000      	movs	r0, #0
}
3401a900:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401a902:	4b55      	ldr	r3, [pc, #340]	@ (3401aa58 <RCCEx_GetLPTIMCLKFreq+0x198>)
3401a904:	4298      	cmp	r0, r3
3401a906:	d015      	beq.n	3401a934 <RCCEx_GetLPTIMCLKFreq+0x74>
3401a908:	d808      	bhi.n	3401a91c <RCCEx_GetLPTIMCLKFreq+0x5c>
3401a90a:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3401a90e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a912:	429a      	cmp	r2, r3
3401a914:	d00e      	beq.n	3401a934 <RCCEx_GetLPTIMCLKFreq+0x74>
3401a916:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
3401a91a:	e7ed      	b.n	3401a8f8 <RCCEx_GetLPTIMCLKFreq+0x38>
3401a91c:	4b4f      	ldr	r3, [pc, #316]	@ (3401aa5c <RCCEx_GetLPTIMCLKFreq+0x19c>)
3401a91e:	4298      	cmp	r0, r3
3401a920:	d00f      	beq.n	3401a942 <RCCEx_GetLPTIMCLKFreq+0x82>
3401a922:	d80b      	bhi.n	3401a93c <RCCEx_GetLPTIMCLKFreq+0x7c>
3401a924:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3401a928:	4298      	cmp	r0, r3
3401a92a:	d003      	beq.n	3401a934 <RCCEx_GetLPTIMCLKFreq+0x74>
3401a92c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a930:	4298      	cmp	r0, r3
3401a932:	d1e4      	bne.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
}
3401a934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401a938:	f7ff b81c 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401a93c:	4b48      	ldr	r3, [pc, #288]	@ (3401aa60 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
3401a93e:	4298      	cmp	r0, r3
3401a940:	d1dd      	bne.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3401a942:	f7fb feb3 	bl	340166ac <LL_RCC_IC15_IsEnabled>
3401a946:	2800      	cmp	r0, #0
3401a948:	d0d9      	beq.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
3401a94a:	f7fb feb7 	bl	340166bc <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3401a94e:	4b45      	ldr	r3, [pc, #276]	@ (3401aa64 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3401a950:	4604      	mov	r4, r0
3401a952:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3401a956:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3401a95a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401a95e:	d075      	beq.n	3401aa4c <RCCEx_GetLPTIMCLKFreq+0x18c>
3401a960:	d86a      	bhi.n	3401aa38 <RCCEx_GetLPTIMCLKFreq+0x178>
3401a962:	2b00      	cmp	r3, #0
3401a964:	d16f      	bne.n	3401aa46 <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401a966:	f7fe ff05 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
3401a96a:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401a96e:	e7c7      	b.n	3401a900 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401a970:	4b3d      	ldr	r3, [pc, #244]	@ (3401aa68 <RCCEx_GetLPTIMCLKFreq+0x1a8>)
3401a972:	4298      	cmp	r0, r3
3401a974:	d034      	beq.n	3401a9e0 <RCCEx_GetLPTIMCLKFreq+0x120>
3401a976:	d824      	bhi.n	3401a9c2 <RCCEx_GetLPTIMCLKFreq+0x102>
3401a978:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
3401a97c:	4298      	cmp	r0, r3
3401a97e:	d00f      	beq.n	3401a9a0 <RCCEx_GetLPTIMCLKFreq+0xe0>
3401a980:	d815      	bhi.n	3401a9ae <RCCEx_GetLPTIMCLKFreq+0xee>
3401a982:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a986:	4298      	cmp	r0, r3
3401a988:	d00a      	beq.n	3401a9a0 <RCCEx_GetLPTIMCLKFreq+0xe0>
3401a98a:	d806      	bhi.n	3401a99a <RCCEx_GetLPTIMCLKFreq+0xda>
3401a98c:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3401a990:	4298      	cmp	r0, r3
3401a992:	d0d6      	beq.n	3401a942 <RCCEx_GetLPTIMCLKFreq+0x82>
3401a994:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3401a998:	e7d1      	b.n	3401a93e <RCCEx_GetLPTIMCLKFreq+0x7e>
3401a99a:	4b34      	ldr	r3, [pc, #208]	@ (3401aa6c <RCCEx_GetLPTIMCLKFreq+0x1ac>)
3401a99c:	4298      	cmp	r0, r3
3401a99e:	d1ae      	bne.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
3401a9a0:	f7fb fe14 	bl	340165cc <LL_RCC_LSE_IsReady>
3401a9a4:	3800      	subs	r0, #0
3401a9a6:	bf18      	it	ne
3401a9a8:	2001      	movne	r0, #1
3401a9aa:	03c0      	lsls	r0, r0, #15
3401a9ac:	e7a8      	b.n	3401a900 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401a9ae:	4b30      	ldr	r3, [pc, #192]	@ (3401aa70 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
3401a9b0:	4298      	cmp	r0, r3
3401a9b2:	d0f5      	beq.n	3401a9a0 <RCCEx_GetLPTIMCLKFreq+0xe0>
3401a9b4:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
3401a9b8:	4298      	cmp	r0, r3
3401a9ba:	d011      	beq.n	3401a9e0 <RCCEx_GetLPTIMCLKFreq+0x120>
3401a9bc:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3401a9c0:	e7ec      	b.n	3401a99c <RCCEx_GetLPTIMCLKFreq+0xdc>
3401a9c2:	4b2c      	ldr	r3, [pc, #176]	@ (3401aa74 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
3401a9c4:	4298      	cmp	r0, r3
3401a9c6:	d015      	beq.n	3401a9f4 <RCCEx_GetLPTIMCLKFreq+0x134>
3401a9c8:	d81b      	bhi.n	3401aa02 <RCCEx_GetLPTIMCLKFreq+0x142>
3401a9ca:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
3401a9ce:	4298      	cmp	r0, r3
3401a9d0:	d006      	beq.n	3401a9e0 <RCCEx_GetLPTIMCLKFreq+0x120>
3401a9d2:	d80c      	bhi.n	3401a9ee <RCCEx_GetLPTIMCLKFreq+0x12e>
3401a9d4:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3401a9d8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3401a9dc:	4298      	cmp	r0, r3
3401a9de:	d18e      	bne.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3401a9e0:	4b20      	ldr	r3, [pc, #128]	@ (3401aa64 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3401a9e2:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
3401a9e4:	07db      	lsls	r3, r3, #31
3401a9e6:	d58a      	bpl.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
3401a9e8:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
3401a9ec:	e788      	b.n	3401a900 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401a9ee:	4b22      	ldr	r3, [pc, #136]	@ (3401aa78 <RCCEx_GetLPTIMCLKFreq+0x1b8>)
3401a9f0:	4298      	cmp	r0, r3
3401a9f2:	d184      	bne.n	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401a9f4:	f7fb fd60 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3401a9f8:	4b1a      	ldr	r3, [pc, #104]	@ (3401aa64 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3401a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401a9fc:	f3c3 6301 	ubfx	r3, r3, #24, #2
3401aa00:	e00f      	b.n	3401aa22 <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3401aa02:	4b1e      	ldr	r3, [pc, #120]	@ (3401aa7c <RCCEx_GetLPTIMCLKFreq+0x1bc>)
3401aa04:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
3401aa08:	429a      	cmp	r2, r3
3401aa0a:	d0f3      	beq.n	3401a9f4 <RCCEx_GetLPTIMCLKFreq+0x134>
3401aa0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
3401aa10:	e7ee      	b.n	3401a9f0 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401aa12:	f7fb fd51 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401aa16:	f7fb fe5b 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401aa1a:	4b12      	ldr	r3, [pc, #72]	@ (3401aa64 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3401aa1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3401aa1e:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3401aa22:	40d8      	lsrs	r0, r3
      break;
3401aa24:	e76c      	b.n	3401a900 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401aa26:	f7fb fd47 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401aa2a:	f7fb fe51 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3401aa2e:	4b0d      	ldr	r3, [pc, #52]	@ (3401aa64 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
3401aa30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3401aa32:	f3c3 3302 	ubfx	r3, r3, #12, #3
3401aa36:	e7f4      	b.n	3401aa22 <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
3401aa38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401aa3c:	f47f af5f 	bne.w	3401a8fe <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401aa40:	f7fe ff58 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401aa44:	e791      	b.n	3401a96a <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401aa46:	f7fe fed5 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401aa4a:	e78e      	b.n	3401a96a <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401aa4c:	f7fe ff12 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401aa50:	e78b      	b.n	3401a96a <RCCEx_GetLPTIMCLKFreq+0xaa>
3401aa52:	bf00      	nop
3401aa54:	0702102c 	.word	0x0702102c
3401aa58:	0701102c 	.word	0x0701102c
3401aa5c:	0702082c 	.word	0x0702082c
3401aa60:	07020c2c 	.word	0x07020c2c
3401aa64:	56028000 	.word	0x56028000
3401aa68:	07040c2c 	.word	0x07040c2c
3401aa6c:	07030c2c 	.word	0x07030c2c
3401aa70:	0703182c 	.word	0x0703182c
3401aa74:	07050c2c 	.word	0x07050c2c
3401aa78:	0705082c 	.word	0x0705082c
3401aa7c:	0705102c 	.word	0x0705102c

3401aa80 <HAL_RCCEx_GetPeriphCLKFreq>:
{
3401aa80:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
3401aa82:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
3401aa86:	430b      	orrs	r3, r1
3401aa88:	f000 8447 	beq.w	3401b31a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
3401aa8c:	4bbf      	ldr	r3, [pc, #764]	@ (3401ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
3401aa8e:	4298      	cmp	r0, r3
3401aa90:	f171 0300 	sbcs.w	r3, r1, #0
3401aa94:	f080 80e6 	bcs.w	3401ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
3401aa98:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
3401aa9c:	430b      	orrs	r3, r1
3401aa9e:	f000 835b 	beq.w	3401b158 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
3401aaa2:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3401aaa6:	f171 0300 	sbcs.w	r3, r1, #0
3401aaaa:	d26a      	bcs.n	3401ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
3401aaac:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
3401aab0:	430b      	orrs	r3, r1
3401aab2:	f000 82b9 	beq.w	3401b028 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
3401aab6:	f240 2301 	movw	r3, #513	@ 0x201
3401aaba:	4298      	cmp	r0, r3
3401aabc:	f171 0300 	sbcs.w	r3, r1, #0
3401aac0:	d224      	bcs.n	3401ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
3401aac2:	2809      	cmp	r0, #9
3401aac4:	f171 0300 	sbcs.w	r3, r1, #0
3401aac8:	d215      	bcs.n	3401aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
3401aaca:	ea50 0301 	orrs.w	r3, r0, r1
3401aace:	d01b      	beq.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3401aad0:	3801      	subs	r0, #1
3401aad2:	f141 31ff 	adc.w	r1, r1, #4294967295
3401aad6:	2808      	cmp	r0, #8
3401aad8:	f171 0100 	sbcs.w	r1, r1, #0
3401aadc:	d214      	bcs.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3401aade:	2807      	cmp	r0, #7
3401aae0:	d812      	bhi.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
3401aae2:	e8df f010 	tbh	[pc, r0, lsl #1]
3401aae6:	01a6      	.short	0x01a6
3401aae8:	0011020f 	.word	0x0011020f
3401aaec:	00110285 	.word	0x00110285
3401aaf0:	00110011 	.word	0x00110011
3401aaf4:	0235      	.short	0x0235
3401aaf6:	f1a0 0310 	sub.w	r3, r0, #16
3401aafa:	430b      	orrs	r3, r1
3401aafc:	f000 8242 	beq.w	3401af84 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
3401ab00:	3820      	subs	r0, #32
3401ab02:	4308      	orrs	r0, r1
3401ab04:	f000 8268 	beq.w	3401afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
3401ab08:	2000      	movs	r0, #0
3401ab0a:	e219      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
3401ab0c:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
3401ab10:	430b      	orrs	r3, r1
3401ab12:	f000 831d 	beq.w	3401b150 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
3401ab16:	f242 0301 	movw	r3, #8193	@ 0x2001
3401ab1a:	4298      	cmp	r0, r3
3401ab1c:	f171 0300 	sbcs.w	r3, r1, #0
3401ab20:	d224      	bcs.n	3401ab6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
3401ab22:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
3401ab26:	430b      	orrs	r3, r1
3401ab28:	f000 82df 	beq.w	3401b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
3401ab2c:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
3401ab30:	430b      	orrs	r3, r1
3401ab32:	f000 8308 	beq.w	3401b146 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
3401ab36:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
3401ab3a:	4308      	orrs	r0, r1
3401ab3c:	d1e4      	bne.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
3401ab3e:	4d94      	ldr	r5, [pc, #592]	@ (3401ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
3401ab40:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
3401ab44:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
3401ab48:	2b02      	cmp	r3, #2
3401ab4a:	f000 82c1 	beq.w	3401b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
3401ab4e:	2b03      	cmp	r3, #3
3401ab50:	f000 8256 	beq.w	3401b000 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
3401ab54:	2b01      	cmp	r3, #1
3401ab56:	f000 824b 	beq.w	3401aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401ab5a:	f7fb fcad 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401ab5e:	f7fb fdb7 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3401ab62:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3401ab64:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401ab68:	40d8      	lsrs	r0, r3
3401ab6a:	e1e9      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
3401ab6c:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
3401ab70:	430b      	orrs	r3, r1
3401ab72:	f000 82ef 	beq.w	3401b154 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
3401ab76:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
3401ab7a:	4308      	orrs	r0, r1
3401ab7c:	d1c4      	bne.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3401ab7e:	4885      	ldr	r0, [pc, #532]	@ (3401ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
3401ab80:	e2e2      	b.n	3401b148 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
3401ab82:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
3401ab86:	430b      	orrs	r3, r1
3401ab88:	f000 82f6 	beq.w	3401b178 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
3401ab8c:	4b82      	ldr	r3, [pc, #520]	@ (3401ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
3401ab8e:	4298      	cmp	r0, r3
3401ab90:	f171 0300 	sbcs.w	r3, r1, #0
3401ab94:	d224      	bcs.n	3401abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
3401ab96:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
3401ab9a:	430b      	orrs	r3, r1
3401ab9c:	f000 82e8 	beq.w	3401b170 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
3401aba0:	4b7e      	ldr	r3, [pc, #504]	@ (3401ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
3401aba2:	4298      	cmp	r0, r3
3401aba4:	f171 0300 	sbcs.w	r3, r1, #0
3401aba8:	d20f      	bcs.n	3401abca <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
3401abaa:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
3401abae:	430b      	orrs	r3, r1
3401abb0:	f000 82d7 	beq.w	3401b162 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3401abb4:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
3401abb8:	430b      	orrs	r3, r1
3401abba:	f000 82d7 	beq.w	3401b16c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3401abbe:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
3401abc2:	4308      	orrs	r0, r1
3401abc4:	d1a0      	bne.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401abc6:	4876      	ldr	r0, [pc, #472]	@ (3401ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
3401abc8:	e2c7      	b.n	3401b15a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
3401abca:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
3401abce:	430b      	orrs	r3, r1
3401abd0:	f000 82d0 	beq.w	3401b174 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
3401abd4:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
3401abd8:	4308      	orrs	r0, r1
3401abda:	d195      	bne.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
3401abdc:	4871      	ldr	r0, [pc, #452]	@ (3401ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
3401abde:	e2c1      	b.n	3401b164 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
3401abe0:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
3401abe4:	430b      	orrs	r3, r1
3401abe6:	f000 834d 	beq.w	3401b284 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
3401abea:	4b6f      	ldr	r3, [pc, #444]	@ (3401ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
3401abec:	4298      	cmp	r0, r3
3401abee:	f171 0300 	sbcs.w	r3, r1, #0
3401abf2:	d228      	bcs.n	3401ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
3401abf4:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
3401abf8:	430b      	orrs	r3, r1
3401abfa:	f000 8302 	beq.w	3401b202 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
3401abfe:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
3401ac02:	4308      	orrs	r0, r1
3401ac04:	d180      	bne.n	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
3401ac06:	4d62      	ldr	r5, [pc, #392]	@ (3401ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
3401ac08:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
3401ac0c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401ac10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401ac14:	f000 8195 	beq.w	3401af42 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
3401ac18:	f200 8319 	bhi.w	3401b24e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
3401ac1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401ac20:	f000 831f 	beq.w	3401b262 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
3401ac24:	f240 81e1 	bls.w	3401afea <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
3401ac28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401ac2c:	f47f af6c 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401ac30:	f7fb fd06 	bl	34016640 <LL_RCC_IC8_IsEnabled>
3401ac34:	2800      	cmp	r0, #0
3401ac36:	f43f af67 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
3401ac3a:	f7fb fd09 	bl	34016650 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401ac3e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3401ac42:	4604      	mov	r4, r0
3401ac44:	e191      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
3401ac46:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
3401ac4a:	430b      	orrs	r3, r1
3401ac4c:	f000 8344 	beq.w	3401b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3401ac50:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
3401ac54:	4308      	orrs	r0, r1
3401ac56:	f47f af57 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3401ac5a:	4854      	ldr	r0, [pc, #336]	@ (3401adac <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
3401ac5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3401ac60:	f7ff bbd6 	b.w	3401a410 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
3401ac64:	2300      	movs	r3, #0
3401ac66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3401ac6a:	4291      	cmp	r1, r2
3401ac6c:	bf08      	it	eq
3401ac6e:	4298      	cmpeq	r0, r3
3401ac70:	f000 836f 	beq.w	3401b352 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
3401ac74:	4283      	cmp	r3, r0
3401ac76:	418a      	sbcs	r2, r1
3401ac78:	d35f      	bcc.n	3401ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
3401ac7a:	2210      	movs	r2, #16
3401ac7c:	4291      	cmp	r1, r2
3401ac7e:	bf08      	it	eq
3401ac80:	4298      	cmpeq	r0, r3
3401ac82:	f000 8359 	beq.w	3401b338 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
3401ac86:	4283      	cmp	r3, r0
3401ac88:	418a      	sbcs	r2, r1
3401ac8a:	d329      	bcc.n	3401ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
3401ac8c:	2202      	movs	r2, #2
3401ac8e:	4291      	cmp	r1, r2
3401ac90:	bf08      	it	eq
3401ac92:	4298      	cmpeq	r0, r3
3401ac94:	f000 8349 	beq.w	3401b32a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
3401ac98:	4283      	cmp	r3, r0
3401ac9a:	418a      	sbcs	r2, r1
3401ac9c:	d314      	bcc.n	3401acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
3401ac9e:	4299      	cmp	r1, r3
3401aca0:	bf08      	it	eq
3401aca2:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
3401aca6:	f000 833a 	beq.w	3401b31e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
3401acaa:	2901      	cmp	r1, #1
3401acac:	bf08      	it	eq
3401acae:	4298      	cmpeq	r0, r3
3401acb0:	f000 8337 	beq.w	3401b322 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
3401acb4:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
3401acb8:	4308      	orrs	r0, r1
3401acba:	f47f af25 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
3401acbe:	483c      	ldr	r0, [pc, #240]	@ (3401adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
3401acc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3401acc4:	f7ff bcd8 	b.w	3401a678 <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
3401acc8:	2904      	cmp	r1, #4
3401acca:	bf08      	it	eq
3401accc:	4298      	cmpeq	r0, r3
3401acce:	f000 8331 	beq.w	3401b334 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
3401acd2:	2908      	cmp	r1, #8
3401acd4:	bf08      	it	eq
3401acd6:	4298      	cmpeq	r0, r3
3401acd8:	f47f af16 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
3401acdc:	4835      	ldr	r0, [pc, #212]	@ (3401adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
3401acde:	e325      	b.n	3401b32c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
3401ace0:	f44f 7200 	mov.w	r2, #512	@ 0x200
3401ace4:	4291      	cmp	r1, r2
3401ace6:	bf08      	it	eq
3401ace8:	4298      	cmpeq	r0, r3
3401acea:	f000 832e 	beq.w	3401b34a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
3401acee:	4283      	cmp	r3, r0
3401acf0:	418a      	sbcs	r2, r1
3401acf2:	d311      	bcc.n	3401ad18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
3401acf4:	2940      	cmp	r1, #64	@ 0x40
3401acf6:	bf08      	it	eq
3401acf8:	4298      	cmpeq	r0, r3
3401acfa:	f000 831f 	beq.w	3401b33c <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
3401acfe:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
3401ad02:	bf08      	it	eq
3401ad04:	4298      	cmpeq	r0, r3
3401ad06:	f000 831b 	beq.w	3401b340 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
3401ad0a:	2920      	cmp	r1, #32
3401ad0c:	bf08      	it	eq
3401ad0e:	2800      	cmpeq	r0, #0
3401ad10:	f47f aefa 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3401ad14:	4828      	ldr	r0, [pc, #160]	@ (3401adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
3401ad16:	e309      	b.n	3401b32c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
3401ad18:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
3401ad1c:	bf08      	it	eq
3401ad1e:	4298      	cmpeq	r0, r3
3401ad20:	f000 8315 	beq.w	3401b34e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
3401ad24:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
3401ad28:	bf08      	it	eq
3401ad2a:	4298      	cmpeq	r0, r3
3401ad2c:	f47f aeec 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
3401ad30:	4822      	ldr	r0, [pc, #136]	@ (3401adbc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
3401ad32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3401ad36:	f7ff b919 	b.w	34019f6c <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
3401ad3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
3401ad3e:	4291      	cmp	r1, r2
3401ad40:	bf08      	it	eq
3401ad42:	4298      	cmpeq	r0, r3
3401ad44:	f000 830f 	beq.w	3401b366 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
3401ad48:	4283      	cmp	r3, r0
3401ad4a:	418a      	sbcs	r2, r1
3401ad4c:	d34b      	bcc.n	3401ade6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
3401ad4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3401ad52:	4291      	cmp	r1, r2
3401ad54:	bf08      	it	eq
3401ad56:	4298      	cmpeq	r0, r3
3401ad58:	f000 8301 	beq.w	3401b35e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
3401ad5c:	4283      	cmp	r3, r0
3401ad5e:	418a      	sbcs	r2, r1
3401ad60:	d330      	bcc.n	3401adc4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
3401ad62:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
3401ad66:	bf08      	it	eq
3401ad68:	4298      	cmpeq	r0, r3
3401ad6a:	f000 82f4 	beq.w	3401b356 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
3401ad6e:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
3401ad72:	bf08      	it	eq
3401ad74:	4298      	cmpeq	r0, r3
3401ad76:	f000 82f0 	beq.w	3401b35a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
3401ad7a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
3401ad7e:	bf08      	it	eq
3401ad80:	2800      	cmpeq	r0, #0
3401ad82:	f47f aec1 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3401ad86:	480e      	ldr	r0, [pc, #56]	@ (3401adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
3401ad88:	e2db      	b.n	3401b342 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
3401ad8a:	bf00      	nop
3401ad8c:	20000001 	.word	0x20000001
3401ad90:	56028000 	.word	0x56028000
3401ad94:	07000c0c 	.word	0x07000c0c
3401ad98:	00800001 	.word	0x00800001
3401ad9c:	00100001 	.word	0x00100001
3401ada0:	0700140c 	.word	0x0700140c
3401ada4:	0700182c 	.word	0x0700182c
3401ada8:	04000001 	.word	0x04000001
3401adac:	07001418 	.word	0x07001418
3401adb0:	0300001c 	.word	0x0300001c
3401adb4:	07000c20 	.word	0x07000c20
3401adb8:	07001420 	.word	0x07001420
3401adbc:	07000c30 	.word	0x07000c30
3401adc0:	07001430 	.word	0x07001430
  switch (PeriphClk)
3401adc4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
3401adc8:	bf08      	it	eq
3401adca:	4298      	cmpeq	r0, r3
3401adcc:	f000 82c9 	beq.w	3401b362 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
3401add0:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
3401add4:	bf08      	it	eq
3401add6:	4298      	cmpeq	r0, r3
3401add8:	f47f ae96 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
3401addc:	48b4      	ldr	r0, [pc, #720]	@ (3401b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
3401adde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3401ade2:	f7fe bf8d 	b.w	34019d00 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
3401ade6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
3401adea:	4291      	cmp	r1, r2
3401adec:	bf08      	it	eq
3401adee:	4298      	cmpeq	r0, r3
3401adf0:	f000 82c0 	beq.w	3401b374 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
3401adf4:	4283      	cmp	r3, r0
3401adf6:	418a      	sbcs	r2, r1
3401adf8:	d30d      	bcc.n	3401ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
3401adfa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
3401adfe:	bf08      	it	eq
3401ae00:	4298      	cmpeq	r0, r3
3401ae02:	f000 82b5 	beq.w	3401b370 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
3401ae06:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
3401ae0a:	bf08      	it	eq
3401ae0c:	4298      	cmpeq	r0, r3
3401ae0e:	f47f ae7b 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3401ae12:	48a8      	ldr	r0, [pc, #672]	@ (3401b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
3401ae14:	e2a8      	b.n	3401b368 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
3401ae16:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
3401ae1a:	bf08      	it	eq
3401ae1c:	4298      	cmpeq	r0, r3
3401ae1e:	f000 82ae 	beq.w	3401b37e <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
3401ae22:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
3401ae26:	bf08      	it	eq
3401ae28:	4298      	cmpeq	r0, r3
3401ae2a:	f47f ae6d 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3401ae2e:	48a2      	ldr	r0, [pc, #648]	@ (3401b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
3401ae30:	e2a1      	b.n	3401b376 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
3401ae32:	4da2      	ldr	r5, [pc, #648]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401ae34:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
3401ae38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3401ae3c:	2b40      	cmp	r3, #64	@ 0x40
3401ae3e:	d053      	beq.n	3401aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
3401ae40:	d814      	bhi.n	3401ae6c <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
3401ae42:	2b20      	cmp	r3, #32
3401ae44:	d025      	beq.n	3401ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
3401ae46:	d805      	bhi.n	3401ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
3401ae48:	bb03      	cbnz	r3, 3401ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401ae4a:	f7fb fb35 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401ae4e:	f7fb fc3f 	bl	340166d0 <RCCEx_GetHCLKFreq>
      break;
3401ae52:	e002      	b.n	3401ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3401ae54:	2b30      	cmp	r3, #48	@ 0x30
3401ae56:	d034      	beq.n	3401aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
3401ae58:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3401ae5a:	4b98      	ldr	r3, [pc, #608]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401ae5c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3401ae60:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3401ae64:	3301      	adds	r3, #1
3401ae66:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
3401ae6a:	e069      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3401ae6c:	2b60      	cmp	r3, #96	@ 0x60
3401ae6e:	d047      	beq.n	3401af00 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
3401ae70:	2b70      	cmp	r3, #112	@ 0x70
3401ae72:	d03f      	beq.n	3401aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
3401ae74:	2b50      	cmp	r3, #80	@ 0x50
3401ae76:	d1ef      	bne.n	3401ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
3401ae78:	f7fb fb98 	bl	340165ac <LL_RCC_HSI_IsReady>
3401ae7c:	2800      	cmp	r0, #0
3401ae7e:	d0eb      	beq.n	3401ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401ae80:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401ae82:	488f      	ldr	r0, [pc, #572]	@ (3401b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
3401ae84:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401ae88:	40d8      	lsrs	r0, r3
      break;
3401ae8a:	e7e6      	b.n	3401ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401ae8c:	f7fe fd72 	bl	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
3401ae90:	e7e3      	b.n	3401ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401ae92:	f7fb fbc3 	bl	3401661c <LL_RCC_IC7_IsEnabled>
3401ae96:	2800      	cmp	r0, #0
3401ae98:	d0de      	beq.n	3401ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
3401ae9a:	f7fb fbc7 	bl	3401662c <LL_RCC_IC7_GetDivider>
3401ae9e:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3401aea0:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3401aea4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
3401aea8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401aeac:	d019      	beq.n	3401aee2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
3401aeae:	d812      	bhi.n	3401aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
3401aeb0:	b913      	cbnz	r3, 3401aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401aeb2:	f7fe fc5f 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
3401aeb6:	e001      	b.n	3401aebc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401aeb8:	f7fe fc9c 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
3401aebc:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401aec0:	e7cb      	b.n	3401ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
3401aec2:	f7fb fbbd 	bl	34016640 <LL_RCC_IC8_IsEnabled>
3401aec6:	2800      	cmp	r0, #0
3401aec8:	d0c6      	beq.n	3401ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
3401aeca:	f7fb fbc1 	bl	34016650 <LL_RCC_IC8_GetDivider>
3401aece:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
3401aed2:	4604      	mov	r4, r0
3401aed4:	e7e6      	b.n	3401aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
3401aed6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401aeda:	d1bd      	bne.n	3401ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401aedc:	f7fe fd0a 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401aee0:	e7ec      	b.n	3401aebc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401aee2:	f7fe fcc7 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401aee6:	e7e9      	b.n	3401aebc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
3401aee8:	f7fb fb68 	bl	340165bc <LL_RCC_MSI_IsReady>
3401aeec:	2800      	cmp	r0, #0
3401aeee:	d0b3      	beq.n	3401ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
3401aef0:	4874      	ldr	r0, [pc, #464]	@ (3401b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
3401aef2:	e7b2      	b.n	3401ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401aef4:	f7fb fae0 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3401aef8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3401aefa:	f3c3 6301 	ubfx	r3, r3, #24, #2
3401aefe:	e7c3      	b.n	3401ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
3401af00:	4871      	ldr	r0, [pc, #452]	@ (3401b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
3401af02:	e7aa      	b.n	3401ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
3401af04:	4d6d      	ldr	r5, [pc, #436]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401af06:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
3401af0a:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
3401af0e:	3b01      	subs	r3, #1
3401af10:	2b06      	cmp	r3, #6
3401af12:	f200 80f5 	bhi.w	3401b100 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
3401af16:	a201      	add	r2, pc, #4	@ (adr r2, 3401af1c <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
3401af18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3401af1c:	3401aff1 	.word	0x3401aff1
3401af20:	3401b263 	.word	0x3401b263
3401af24:	3401ac31 	.word	0x3401ac31
3401af28:	3401af43 	.word	0x3401af43
3401af2c:	3401afb1 	.word	0x3401afb1
3401af30:	3401b383 	.word	0x3401b383
3401af34:	3401b279 	.word	0x3401b279
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401af38:	f7fe fc5c 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
3401af3c:	fbb0 f0f4 	udiv	r0, r0, r4
}
3401af40:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
3401af42:	f7fb fb3b 	bl	340165bc <LL_RCC_MSI_IsReady>
3401af46:	2800      	cmp	r0, #0
3401af48:	f43f adde 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
3401af4c:	485d      	ldr	r0, [pc, #372]	@ (3401b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
3401af4e:	e7f7      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
3401af50:	4b5a      	ldr	r3, [pc, #360]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401af52:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401af56:	0395      	lsls	r5, r2, #14
3401af58:	f57f add6 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3401af5c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
3401af60:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3401af64:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401af68:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3401af6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
3401af6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3401af72:	f000 81ae 	beq.w	3401b2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
3401af76:	f200 81a5 	bhi.w	3401b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
3401af7a:	2b00      	cmp	r3, #0
3401af7c:	d1dc      	bne.n	3401af38 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401af7e:	f7fe fbf9 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
3401af82:	e7db      	b.n	3401af3c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
3401af84:	4d4d      	ldr	r5, [pc, #308]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401af86:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
3401af8a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3401af8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3401af92:	d014      	beq.n	3401afbe <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
3401af94:	d808      	bhi.n	3401afa8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3401af96:	bb5b      	cbnz	r3, 3401aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401af98:	f7fb fa8e 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401af9c:	f7fb fb98 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
3401afa0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3401afa2:	f3c3 4302 	ubfx	r3, r3, #16, #3
3401afa6:	e5df      	b.n	3401ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3401afa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401afac:	f47f adac 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3401afb0:	f7fb fafc 	bl	340165ac <LL_RCC_HSI_IsReady>
3401afb4:	2800      	cmp	r0, #0
3401afb6:	f43f ada7 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401afba:	6cab      	ldr	r3, [r5, #72]	@ 0x48
3401afbc:	e136      	b.n	3401b22c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
3401afbe:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3401afc2:	03dc      	lsls	r4, r3, #15
3401afc4:	f57f ada0 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3401afc8:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3401afcc:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3401afd0:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401afd4:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3401afd6:	e7c8      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3401afd8:	4a38      	ldr	r2, [pc, #224]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401afda:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
3401afde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3401afe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3401afe6:	d012      	beq.n	3401b00e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
3401afe8:	d806      	bhi.n	3401aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3401afea:	2b00      	cmp	r3, #0
3401afec:	f000 8088 	beq.w	3401b100 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
3401aff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401aff4:	f7fe bcbe 	b.w	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
3401aff8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
3401affc:	f47f ad84 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
3401b000:	f7fb facc 	bl	3401659c <LL_RCC_HSE_IsReady>
3401b004:	2800      	cmp	r0, #0
3401b006:	f43f ad7f 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
3401b00a:	4830      	ldr	r0, [pc, #192]	@ (3401b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
3401b00c:	e798      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
3401b00e:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3401b012:	0518      	lsls	r0, r3, #20
3401b014:	f57f ad78 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3401b018:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3401b01c:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3401b020:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401b024:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
3401b026:	e7a0      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
3401b028:	4a24      	ldr	r2, [pc, #144]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401b02a:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
3401b02e:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
3401b032:	2b02      	cmp	r3, #2
3401b034:	d010      	beq.n	3401b058 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
3401b036:	2b03      	cmp	r3, #3
3401b038:	d034      	beq.n	3401b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
3401b03a:	2b01      	cmp	r3, #1
3401b03c:	d009      	beq.n	3401b052 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401b03e:	f7fb fa3b 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401b042:	f7fb fb45 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3401b046:	4b1d      	ldr	r3, [pc, #116]	@ (3401b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3401b048:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
3401b04c:	f3c3 1303 	ubfx	r3, r3, #4, #4
3401b050:	e708      	b.n	3401ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3401b052:	f7fe fc8f 	bl	34019974 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
3401b056:	e7f6      	b.n	3401b046 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3401b058:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3401b05c:	04d9      	lsls	r1, r3, #19
3401b05e:	d516      	bpl.n	3401b08e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3401b060:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3401b064:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3401b068:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
3401b06c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
3401b070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3401b074:	f100 0401 	add.w	r4, r0, #1
3401b078:	d00e      	beq.n	3401b098 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
3401b07a:	d805      	bhi.n	3401b088 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
3401b07c:	b94b      	cbnz	r3, 3401b092 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3401b07e:	f7fe fb79 	bl	34019774 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3401b082:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3401b086:	e7de      	b.n	3401b046 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
3401b088:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401b08c:	d007      	beq.n	3401b09e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
3401b08e:	2000      	movs	r0, #0
3401b090:	e7d9      	b.n	3401b046 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3401b092:	f7fe fbaf 	bl	340197f4 <HAL_RCCEx_GetPLL2CLKFreq>
3401b096:	e7f4      	b.n	3401b082 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401b098:	f7fe fbec 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401b09c:	e7f1      	b.n	3401b082 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401b09e:	f7fe fc29 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401b0a2:	e7ee      	b.n	3401b082 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
3401b0a4:	f7fb fa7a 	bl	3401659c <LL_RCC_HSE_IsReady>
3401b0a8:	2800      	cmp	r0, #0
3401b0aa:	d0f0      	beq.n	3401b08e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
3401b0ac:	4807      	ldr	r0, [pc, #28]	@ (3401b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
3401b0ae:	e7ca      	b.n	3401b046 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
3401b0b0:	01001014 	.word	0x01001014
3401b0b4:	03001414 	.word	0x03001414
3401b0b8:	03000814 	.word	0x03000814
3401b0bc:	56028000 	.word	0x56028000
3401b0c0:	03d09000 	.word	0x03d09000
3401b0c4:	003d0900 	.word	0x003d0900
3401b0c8:	00bb8000 	.word	0x00bb8000
3401b0cc:	02dc6c00 	.word	0x02dc6c00
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
3401b0d0:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3401b0d4:	035b      	lsls	r3, r3, #13
3401b0d6:	f57f ad17 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3401b0da:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3401b0de:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3401b0e2:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401b0e6:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
3401b0e8:	e73f      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
3401b0ea:	4ba7      	ldr	r3, [pc, #668]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b0ec:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
3401b0f0:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3401b0f4:	2a20      	cmp	r2, #32
3401b0f6:	d019      	beq.n	3401b12c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
3401b0f8:	d808      	bhi.n	3401b10c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
3401b0fa:	2a00      	cmp	r2, #0
3401b0fc:	f47f af78 	bne.w	3401aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401b100:	f7fb f9da 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
}
3401b104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3401b108:	f7fb bae2 	b.w	340166d0 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
3401b10c:	2a30      	cmp	r2, #48	@ 0x30
3401b10e:	f47f acfb 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3401b112:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401b116:	0714      	lsls	r4, r2, #28
3401b118:	f57f acf6 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401b11c:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3401b120:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
3401b124:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401b128:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3401b12a:	e71e      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
3401b12c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3401b130:	0755      	lsls	r5, r2, #29
3401b132:	f57f ace9 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3401b136:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3401b13a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3401b13e:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401b142:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
3401b144:	e711      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3401b146:	4891      	ldr	r0, [pc, #580]	@ (3401b38c <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
3401b148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
3401b14c:	f7ff bafa 	b.w	3401a744 <RCCEx_GetI2CCLKFreq>
3401b150:	488f      	ldr	r0, [pc, #572]	@ (3401b390 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
3401b152:	e7f9      	b.n	3401b148 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
3401b154:	488f      	ldr	r0, [pc, #572]	@ (3401b394 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
3401b156:	e7f7      	b.n	3401b148 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
3401b158:	488f      	ldr	r0, [pc, #572]	@ (3401b398 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
3401b15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3401b15e:	f7ff b9ff 	b.w	3401a560 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
3401b162:	488e      	ldr	r0, [pc, #568]	@ (3401b39c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
3401b164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
3401b168:	f7ff bbaa 	b.w	3401a8c0 <RCCEx_GetLPTIMCLKFreq>
3401b16c:	488c      	ldr	r0, [pc, #560]	@ (3401b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
3401b16e:	e7f9      	b.n	3401b164 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
3401b170:	488c      	ldr	r0, [pc, #560]	@ (3401b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
3401b172:	e7f7      	b.n	3401b164 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
3401b174:	488c      	ldr	r0, [pc, #560]	@ (3401b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
3401b176:	e7f5      	b.n	3401b164 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
3401b178:	4a83      	ldr	r2, [pc, #524]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b17a:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3401b17e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3401b182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3401b186:	d031      	beq.n	3401b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
3401b188:	d812      	bhi.n	3401b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
3401b18a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401b18e:	f43f af2f 	beq.w	3401aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
3401b192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401b196:	d01d      	beq.n	3401b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
3401b198:	2b00      	cmp	r3, #0
3401b19a:	f47f acb5 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3401b19e:	f7fb f98b 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
3401b1a2:	f7fb fa95 	bl	340166d0 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
3401b1a6:	4b78      	ldr	r3, [pc, #480]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3401b1aa:	f3c3 3302 	ubfx	r3, r3, #12, #3
3401b1ae:	e4db      	b.n	3401ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
3401b1b0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
3401b1b4:	f43f aec5 	beq.w	3401af42 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
3401b1b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401b1bc:	d02f      	beq.n	3401b21e <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
3401b1be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
3401b1c2:	f47f aca1 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
3401b1c6:	f7fb fa01 	bl	340165cc <LL_RCC_LSE_IsReady>
3401b1ca:	3800      	subs	r0, #0
3401b1cc:	bf18      	it	ne
3401b1ce:	2001      	movne	r0, #1
3401b1d0:	03c0      	lsls	r0, r0, #15
3401b1d2:	e6b5      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3401b1d4:	f7fb fa46 	bl	34016664 <LL_RCC_IC9_IsEnabled>
3401b1d8:	2800      	cmp	r0, #0
3401b1da:	f43f ac95 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
3401b1de:	f7fb fa49 	bl	34016674 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
3401b1e2:	4b69      	ldr	r3, [pc, #420]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b1e4:	4604      	mov	r4, r0
3401b1e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3401b1ea:	e6be      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3401b1ec:	f7fb fa4c 	bl	34016688 <LL_RCC_IC14_IsEnabled>
3401b1f0:	2800      	cmp	r0, #0
3401b1f2:	f43f ac89 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
3401b1f6:	f7fb fa4f 	bl	34016698 <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
3401b1fa:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
3401b1fe:	4604      	mov	r4, r0
3401b200:	e6b3      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
3401b202:	4d61      	ldr	r5, [pc, #388]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b204:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
3401b208:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3401b20c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401b210:	d010      	beq.n	3401b234 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
3401b212:	f67f aec0 	bls.w	3401af96 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
3401b216:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3401b21a:	f47f ac75 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3401b21e:	f7fb f9c5 	bl	340165ac <LL_RCC_HSI_IsReady>
3401b222:	2800      	cmp	r0, #0
3401b224:	f43f ac70 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401b228:	4b57      	ldr	r3, [pc, #348]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b22a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3401b22c:	485f      	ldr	r0, [pc, #380]	@ (3401b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
3401b22e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
3401b232:	e499      	b.n	3401ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
3401b234:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
3401b238:	0418      	lsls	r0, r3, #16
3401b23a:	f57f ac65 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3401b23e:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3401b242:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3401b246:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401b24a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
3401b24c:	e68d      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401b24e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
3401b252:	f000 8096 	beq.w	3401b382 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
3401b256:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
3401b25a:	d00d      	beq.n	3401b278 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
3401b25c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
3401b260:	e6a4      	b.n	3401afac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3401b262:	f7fb f9db 	bl	3401661c <LL_RCC_IC7_IsEnabled>
3401b266:	2800      	cmp	r0, #0
3401b268:	f43f ac4e 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
3401b26c:	f7fb f9de 	bl	3401662c <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
3401b270:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
3401b274:	4604      	mov	r4, r0
3401b276:	e678      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3401b278:	f7fb f91e 	bl	340164b8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
3401b27c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3401b27e:	f3c3 6301 	ubfx	r3, r3, #24, #2
3401b282:	e471      	b.n	3401ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
3401b284:	4a40      	ldr	r2, [pc, #256]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b286:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3401b28a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
3401b28e:	2b20      	cmp	r3, #32
3401b290:	d00b      	beq.n	3401b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
3401b292:	f67f aeaa 	bls.w	3401afea <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
3401b296:	2b30      	cmp	r3, #48	@ 0x30
3401b298:	f47f ac36 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
3401b29c:	f7fb f986 	bl	340165ac <LL_RCC_HSI_IsReady>
3401b2a0:	2800      	cmp	r0, #0
3401b2a2:	f43f ac31 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3401b2a6:	6c93      	ldr	r3, [r2, #72]	@ 0x48
3401b2a8:	e7c0      	b.n	3401b22c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
3401b2aa:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
3401b2ae:	0319      	lsls	r1, r3, #12
3401b2b0:	f57f ac2a 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3401b2b4:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3401b2b8:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3401b2bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
3401b2c0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3401b2c2:	e652      	b.n	3401af6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
3401b2c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3401b2c8:	f47f ac1e 	bne.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3401b2cc:	f7fe fb12 	bl	340198f4 <HAL_RCCEx_GetPLL4CLKFreq>
3401b2d0:	e634      	b.n	3401af3c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3401b2d2:	f7fe facf 	bl	34019874 <HAL_RCCEx_GetPLL3CLKFreq>
3401b2d6:	e631      	b.n	3401af3c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3401b2d8:	4a2b      	ldr	r2, [pc, #172]	@ (3401b388 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
3401b2da:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3401b2de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
3401b2e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401b2e6:	d005      	beq.n	3401b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
3401b2e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3401b2ec:	d009      	beq.n	3401b302 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
3401b2ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3401b2f2:	e766      	b.n	3401b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3401b2f4:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
3401b2f6:	07db      	lsls	r3, r3, #31
3401b2f8:	f57f ac06 	bpl.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
3401b2fc:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
3401b300:	e61e      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
3401b302:	f7fb f94b 	bl	3401659c <LL_RCC_HSE_IsReady>
3401b306:	2800      	cmp	r0, #0
3401b308:	f43f abfe 	beq.w	3401ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3401b30c:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
3401b310:	4827      	ldr	r0, [pc, #156]	@ (3401b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
3401b312:	f3c3 3305 	ubfx	r3, r3, #12, #6
3401b316:	3301      	adds	r3, #1
3401b318:	e5a5      	b.n	3401ae66 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
3401b31a:	4826      	ldr	r0, [pc, #152]	@ (3401b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
3401b31c:	e49e      	b.n	3401ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3401b31e:	4826      	ldr	r0, [pc, #152]	@ (3401b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
3401b320:	e4ce      	b.n	3401acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
3401b322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3401b326:	f7fe bbab 	b.w	34019a80 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
3401b32a:	4824      	ldr	r0, [pc, #144]	@ (3401b3bc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
3401b32c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3401b330:	f7fe bf30 	b.w	3401a194 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3401b334:	4822      	ldr	r0, [pc, #136]	@ (3401b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
3401b336:	e7f9      	b.n	3401b32c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
3401b338:	4822      	ldr	r0, [pc, #136]	@ (3401b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
3401b33a:	e7f7      	b.n	3401b32c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
3401b33c:	4822      	ldr	r0, [pc, #136]	@ (3401b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
3401b33e:	e7f5      	b.n	3401b32c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3401b340:	4822      	ldr	r0, [pc, #136]	@ (3401b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
3401b342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3401b346:	f7fe bd0d 	b.w	34019d64 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
3401b34a:	4821      	ldr	r0, [pc, #132]	@ (3401b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
3401b34c:	e7f9      	b.n	3401b342 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
3401b34e:	4821      	ldr	r0, [pc, #132]	@ (3401b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
3401b350:	e7f7      	b.n	3401b342 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
3401b352:	4821      	ldr	r0, [pc, #132]	@ (3401b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
3401b354:	e4ed      	b.n	3401ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3401b356:	4821      	ldr	r0, [pc, #132]	@ (3401b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
3401b358:	e4eb      	b.n	3401ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
3401b35a:	4821      	ldr	r0, [pc, #132]	@ (3401b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
3401b35c:	e4e9      	b.n	3401ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
3401b35e:	4821      	ldr	r0, [pc, #132]	@ (3401b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
3401b360:	e4e7      	b.n	3401ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
3401b362:	4821      	ldr	r0, [pc, #132]	@ (3401b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
3401b364:	e7ed      	b.n	3401b342 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3401b366:	4821      	ldr	r0, [pc, #132]	@ (3401b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
3401b368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3401b36c:	f7fe bc62 	b.w	34019c34 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
3401b370:	481f      	ldr	r0, [pc, #124]	@ (3401b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
3401b372:	e534      	b.n	3401adde <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
3401b374:	481f      	ldr	r0, [pc, #124]	@ (3401b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
3401b376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
3401b37a:	f7fe bbe1 	b.w	34019b40 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
3401b37e:	481e      	ldr	r0, [pc, #120]	@ (3401b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
3401b380:	e7f9      	b.n	3401b376 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
3401b382:	481e      	ldr	r0, [pc, #120]	@ (3401b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
3401b384:	e5dc      	b.n	3401af40 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
3401b386:	bf00      	nop
3401b388:	56028000 	.word	0x56028000
3401b38c:	0700000c 	.word	0x0700000c
3401b390:	0700040c 	.word	0x0700040c
3401b394:	0700080c 	.word	0x0700080c
3401b398:	0700100c 	.word	0x0700100c
3401b39c:	0700082c 	.word	0x0700082c
3401b3a0:	07000c2c 	.word	0x07000c2c
3401b3a4:	0700102c 	.word	0x0700102c
3401b3a8:	0700142c 	.word	0x0700142c
3401b3ac:	03d09000 	.word	0x03d09000
3401b3b0:	02dc6c00 	.word	0x02dc6c00
3401b3b4:	07001818 	.word	0x07001818
3401b3b8:	0300041c 	.word	0x0300041c
3401b3bc:	07000420 	.word	0x07000420
3401b3c0:	07000820 	.word	0x07000820
3401b3c4:	07001020 	.word	0x07001020
3401b3c8:	07001820 	.word	0x07001820
3401b3cc:	07000030 	.word	0x07000030
3401b3d0:	07000430 	.word	0x07000430
3401b3d4:	07000830 	.word	0x07000830
3401b3d8:	07001030 	.word	0x07001030
3401b3dc:	07001830 	.word	0x07001830
3401b3e0:	07001c30 	.word	0x07001c30
3401b3e4:	07000034 	.word	0x07000034
3401b3e8:	07000434 	.word	0x07000434
3401b3ec:	03000c14 	.word	0x03000c14
3401b3f0:	01001814 	.word	0x01001814
3401b3f4:	03000014 	.word	0x03000014
3401b3f8:	03000414 	.word	0x03000414
3401b3fc:	00bb8000 	.word	0x00bb8000

3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>:
  *         This parameter can be one of @ref RIF_MASTER_INDEX
  * @param  pConfig Pointer on Master Isolation configuration structure
  * @retval None
  */
void HAL_RIF_RIMC_ConfigMasterAttributes(uint32_t MasterId, const RIMC_MasterConfig_t *pConfig)
{
3401b400:	b538      	push	{r3, r4, r5, lr}
3401b402:	4604      	mov	r4, r0
  uint32_t master_cid;
  uint32_t rimc_attr_val;

  /* Check the parameter */
  assert_param(pConfig != (void *)NULL);
3401b404:	460d      	mov	r5, r1
3401b406:	b921      	cbnz	r1, 3401b412 <HAL_RIF_RIMC_ConfigMasterAttributes+0x12>
3401b408:	f240 1111 	movw	r1, #273	@ 0x111
3401b40c:	4825      	ldr	r0, [pc, #148]	@ (3401b4a4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401b40e:	f003 fea7 	bl	3401f160 <assert_failed>
  assert_param(IS_RIF_MASTER_INDEX(MasterId));
3401b412:	2c0c      	cmp	r4, #12
3401b414:	d904      	bls.n	3401b420 <HAL_RIF_RIMC_ConfigMasterAttributes+0x20>
3401b416:	f44f 7189 	mov.w	r1, #274	@ 0x112
3401b41a:	4822      	ldr	r0, [pc, #136]	@ (3401b4a4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401b41c:	f003 fea0 	bl	3401f160 <assert_failed>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401b420:	682b      	ldr	r3, [r5, #0]
3401b422:	2b20      	cmp	r3, #32
3401b424:	d838      	bhi.n	3401b498 <HAL_RIF_RIMC_ConfigMasterAttributes+0x98>
3401b426:	2b03      	cmp	r3, #3
3401b428:	d82a      	bhi.n	3401b480 <HAL_RIF_RIMC_ConfigMasterAttributes+0x80>
3401b42a:	3b01      	subs	r3, #1
3401b42c:	2b01      	cmp	r3, #1
3401b42e:	d82d      	bhi.n	3401b48c <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
  assert_param(IS_RIF_MASTER_CID(pConfig->MasterCID));
3401b430:	682b      	ldr	r3, [r5, #0]
3401b432:	2b80      	cmp	r3, #128	@ 0x80
3401b434:	d001      	beq.n	3401b43a <HAL_RIF_RIMC_ConfigMasterAttributes+0x3a>
3401b436:	2bff      	cmp	r3, #255	@ 0xff
3401b438:	d904      	bls.n	3401b444 <HAL_RIF_RIMC_ConfigMasterAttributes+0x44>
3401b43a:	f44f 718a 	mov.w	r1, #276	@ 0x114
3401b43e:	4819      	ldr	r0, [pc, #100]	@ (3401b4a4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401b440:	f003 fe8e 	bl	3401f160 <assert_failed>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(pConfig->SecPriv));
3401b444:	686b      	ldr	r3, [r5, #4]
3401b446:	2b03      	cmp	r3, #3
3401b448:	d904      	bls.n	3401b454 <HAL_RIF_RIMC_ConfigMasterAttributes+0x54>
3401b44a:	f240 1115 	movw	r1, #277	@ 0x115
3401b44e:	4815      	ldr	r0, [pc, #84]	@ (3401b4a4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401b450:	f003 fe86 	bl	3401f160 <assert_failed>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
3401b454:	682b      	ldr	r3, [r5, #0]
3401b456:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
3401b45a:	fab3 f283 	clz	r2, r3

  master_cid = POSITION_VAL(pConfig->MasterCID);
  rimc_attr_val = RIFSC->RIMC_ATTRx[MasterId];
3401b45e:	00a0      	lsls	r0, r4, #2
3401b460:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3401b464:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3401b468:	f8d0 3c10 	ldr.w	r3, [r0, #3088]	@ 0xc10
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401b46c:	6869      	ldr	r1, [r5, #4]
  rimc_attr_val &= (~(RIFSC_RIMC_ATTRx_MCID | RIFSC_RIMC_ATTRx_MPRIV | RIFSC_RIMC_ATTRx_MSEC));
3401b46e:	f423 735c 	bic.w	r3, r3, #880	@ 0x370
3401b472:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  rimc_attr_val |= ((master_cid << RIFSC_RIMC_ATTRx_MCID_Pos) | (pConfig->SecPriv << RIFSC_RIMC_ATTRx_MSEC_Pos));
3401b476:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  RIFSC->RIMC_ATTRx[MasterId] = rimc_attr_val;
3401b47a:	f8c0 3c10 	str.w	r3, [r0, #3088]	@ 0xc10
}
3401b47e:	bd38      	pop	{r3, r4, r5, pc}
3401b480:	4a09      	ldr	r2, [pc, #36]	@ (3401b4a8 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa8>)
3401b482:	3b04      	subs	r3, #4
3401b484:	fa22 f303 	lsr.w	r3, r2, r3
3401b488:	07db      	lsls	r3, r3, #31
3401b48a:	d4d1      	bmi.n	3401b430 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
  assert_param(IS_RIF_SINGLE_CID(pConfig->MasterCID));
3401b48c:	f240 1113 	movw	r1, #275	@ 0x113
3401b490:	4804      	ldr	r0, [pc, #16]	@ (3401b4a4 <HAL_RIF_RIMC_ConfigMasterAttributes+0xa4>)
3401b492:	f003 fe65 	bl	3401f160 <assert_failed>
3401b496:	e7cb      	b.n	3401b430 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401b498:	2b40      	cmp	r3, #64	@ 0x40
3401b49a:	d0c9      	beq.n	3401b430 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401b49c:	2b80      	cmp	r3, #128	@ 0x80
3401b49e:	d1f5      	bne.n	3401b48c <HAL_RIF_RIMC_ConfigMasterAttributes+0x8c>
3401b4a0:	e7c6      	b.n	3401b430 <HAL_RIF_RIMC_ConfigMasterAttributes+0x30>
3401b4a2:	bf00      	nop
3401b4a4:	3402bde7 	.word	0x3402bde7
3401b4a8:	10001011 	.word	0x10001011

3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>:
  */
void HAL_RIF_RISC_SetSlaveSecureAttributes(uint32_t PeriphId, uint32_t SecPriv)
{
  __IO uint32_t sec_reg_val;

  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401b4ac:	4b38      	ldr	r3, [pc, #224]	@ (3401b590 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe4>)
{
3401b4ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
3401b4b0:	4298      	cmp	r0, r3
3401b4b2:	4604      	mov	r4, r0
3401b4b4:	460d      	mov	r5, r1
3401b4b6:	d85c      	bhi.n	3401b572 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xc6>
3401b4b8:	3b1e      	subs	r3, #30
3401b4ba:	4298      	cmp	r0, r3
3401b4bc:	d83b      	bhi.n	3401b536 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x8a>
3401b4be:	4b35      	ldr	r3, [pc, #212]	@ (3401b594 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xe8>)
3401b4c0:	4298      	cmp	r0, r3
3401b4c2:	d84b      	bhi.n	3401b55c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xb0>
3401b4c4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
3401b4c8:	d23a      	bcs.n	3401b540 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x94>
3401b4ca:	4b33      	ldr	r3, [pc, #204]	@ (3401b598 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xec>)
3401b4cc:	4298      	cmp	r0, r3
3401b4ce:	d840      	bhi.n	3401b552 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa6>
3401b4d0:	1fc2      	subs	r2, r0, #7
3401b4d2:	3b22      	subs	r3, #34	@ 0x22
3401b4d4:	429a      	cmp	r2, r3
3401b4d6:	d937      	bls.n	3401b548 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x9c>
  assert_param(IS_RIF_SEC_PRIV_ATTRIBUTE(SecPriv));
3401b4d8:	2d03      	cmp	r5, #3
3401b4da:	d904      	bls.n	3401b4e6 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x3a>
3401b4dc:	f44f 71ba 	mov.w	r1, #372	@ 0x174
3401b4e0:	482e      	ldr	r0, [pc, #184]	@ (3401b59c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3401b4e2:	f003 fe3d 	bl	3401f160 <assert_failed>

  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401b4e6:	2201      	movs	r2, #1
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401b4e8:	0f20      	lsrs	r0, r4, #28
3401b4ea:	0080      	lsls	r0, r0, #2
3401b4ec:	f100 40a8 	add.w	r0, r0, #1409286144	@ 0x54000000
3401b4f0:	f500 3010 	add.w	r0, r0, #147456	@ 0x24000
3401b4f4:	6903      	ldr	r3, [r0, #16]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401b4f6:	f004 041f 	and.w	r4, r4, #31
  sec_reg_val = RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401b4fa:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401b4fc:	9b01      	ldr	r3, [sp, #4]
3401b4fe:	40a2      	lsls	r2, r4
3401b500:	ea23 0302 	bic.w	r3, r3, r2
3401b504:	9301      	str	r3, [sp, #4]
  sec_reg_val |= ((SecPriv & RIF_ATTRIBUTE_SEC) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401b506:	9901      	ldr	r1, [sp, #4]
3401b508:	f005 0301 	and.w	r3, r5, #1
3401b50c:	40a3      	lsls	r3, r4
3401b50e:	430b      	orrs	r3, r1
3401b510:	9301      	str	r3, [sp, #4]
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401b512:	9b01      	ldr	r3, [sp, #4]

  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401b514:	f3c5 0140 	ubfx	r1, r5, #1, #1
  RIFSC->RISC_SECCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401b518:	6103      	str	r3, [r0, #16]
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401b51a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401b51c:	40a1      	lsls	r1, r4
  sec_reg_val = RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT];
3401b51e:	9301      	str	r3, [sp, #4]
  sec_reg_val &= (~(1U << (PeriphId & RIF_PERIPH_BIT_POSITION)));
3401b520:	9b01      	ldr	r3, [sp, #4]
3401b522:	ea23 0302 	bic.w	r3, r3, r2
3401b526:	9301      	str	r3, [sp, #4]
  sec_reg_val |= (((SecPriv & RIF_ATTRIBUTE_PRIV) >> 1U) << (PeriphId & RIF_PERIPH_BIT_POSITION));
3401b528:	9b01      	ldr	r3, [sp, #4]
3401b52a:	4319      	orrs	r1, r3
3401b52c:	9101      	str	r1, [sp, #4]
  RIFSC->RISC_PRIVCFGRx[PeriphId >> RIF_PERIPH_REG_SHIFT] = sec_reg_val;
3401b52e:	9b01      	ldr	r3, [sp, #4]
3401b530:	6303      	str	r3, [r0, #48]	@ 0x30
}
3401b532:	b003      	add	sp, #12
3401b534:	bd30      	pop	{r4, r5, pc}
3401b536:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
3401b53a:	4b19      	ldr	r3, [pc, #100]	@ (3401b5a0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf4>)
3401b53c:	3a02      	subs	r2, #2
3401b53e:	e01d      	b.n	3401b57c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3401b540:	4b18      	ldr	r3, [pc, #96]	@ (3401b5a4 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf8>)
3401b542:	f100 4260 	add.w	r2, r0, #3758096384	@ 0xe0000000
3401b546:	e019      	b.n	3401b57c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd0>
3401b548:	f1a0 0308 	sub.w	r3, r0, #8
3401b54c:	2b17      	cmp	r3, #23
3401b54e:	d9c3      	bls.n	3401b4d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401b550:	e017      	b.n	3401b582 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401b552:	f100 4370 	add.w	r3, r0, #4026531840	@ 0xf0000000
3401b556:	3b1c      	subs	r3, #28
3401b558:	2b02      	cmp	r3, #2
3401b55a:	e7f8      	b.n	3401b54e <HAL_RIF_RISC_SetSlaveSecureAttributes+0xa2>
3401b55c:	4b12      	ldr	r3, [pc, #72]	@ (3401b5a8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xfc>)
3401b55e:	4298      	cmp	r0, r3
3401b560:	d803      	bhi.n	3401b56a <HAL_RIF_RISC_SetSlaveSecureAttributes+0xbe>
3401b562:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3401b566:	d2b7      	bcs.n	3401b4d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401b568:	e00b      	b.n	3401b582 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401b56a:	4b10      	ldr	r3, [pc, #64]	@ (3401b5ac <HAL_RIF_RISC_SetSlaveSecureAttributes+0x100>)
3401b56c:	4298      	cmp	r0, r3
3401b56e:	d0b3      	beq.n	3401b4d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401b570:	e007      	b.n	3401b582 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401b572:	f100 4230 	add.w	r2, r0, #2952790016	@ 0xb0000000
3401b576:	2a1e      	cmp	r2, #30
3401b578:	d803      	bhi.n	3401b582 <HAL_RIF_RISC_SetSlaveSecureAttributes+0xd6>
3401b57a:	4b0d      	ldr	r3, [pc, #52]	@ (3401b5b0 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x104>)
3401b57c:	40d3      	lsrs	r3, r2
3401b57e:	07db      	lsls	r3, r3, #31
3401b580:	d4aa      	bmi.n	3401b4d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
  assert_param(IS_RIF_RISC_PERIPH_INDEX(PeriphId) || IS_RIF_RCC_PERIPH_INDEX(PeriphId));
3401b582:	f240 1173 	movw	r1, #371	@ 0x173
3401b586:	4805      	ldr	r0, [pc, #20]	@ (3401b59c <HAL_RIF_RISC_SetSlaveSecureAttributes+0xf0>)
3401b588:	f003 fdea 	bl	3401f160 <assert_failed>
3401b58c:	e7a4      	b.n	3401b4d8 <HAL_RIF_RISC_SetSlaveSecureAttributes+0x2c>
3401b58e:	bf00      	nop
3401b590:	4000001f 	.word	0x4000001f
3401b594:	2000001e 	.word	0x2000001e
3401b598:	1000001a 	.word	0x1000001a
3401b59c:	3402bde7 	.word	0x3402bde7
3401b5a0:	2e838c0b 	.word	0x2e838c0b
3401b5a4:	77dff03b 	.word	0x77dff03b
3401b5a8:	30000008 	.word	0x30000008
3401b5ac:	3000000a 	.word	0x3000000a
3401b5b0:	49deef7f 	.word	0x49deef7f

3401b5b4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
3401b5b4:	4770      	bx	lr
	...

3401b5b8 <HAL_TIM_Base_Start>:
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401b5b8:	6803      	ldr	r3, [r0, #0]
{
3401b5ba:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401b5bc:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
{
3401b5c0:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401b5c2:	d07d      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5c4:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401b5c8:	d07a      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401b5ce:	d077      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401b5d4:	d074      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5d6:	4a65      	ldr	r2, [pc, #404]	@ (3401b76c <HAL_TIM_Base_Start+0x1b4>)
3401b5d8:	4293      	cmp	r3, r2
3401b5da:	d071      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5dc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b5e0:	4293      	cmp	r3, r2
3401b5e2:	d06d      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5e4:	4a62      	ldr	r2, [pc, #392]	@ (3401b770 <HAL_TIM_Base_Start+0x1b8>)
3401b5e6:	4293      	cmp	r3, r2
3401b5e8:	d06a      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5ea:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b5ee:	4293      	cmp	r3, r2
3401b5f0:	d066      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5f2:	4a60      	ldr	r2, [pc, #384]	@ (3401b774 <HAL_TIM_Base_Start+0x1bc>)
3401b5f4:	4293      	cmp	r3, r2
3401b5f6:	d063      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b5f8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b5fc:	4293      	cmp	r3, r2
3401b5fe:	d05f      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b600:	4a5d      	ldr	r2, [pc, #372]	@ (3401b778 <HAL_TIM_Base_Start+0x1c0>)
3401b602:	4293      	cmp	r3, r2
3401b604:	d05c      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b606:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b60a:	4293      	cmp	r3, r2
3401b60c:	d058      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b60e:	4a5b      	ldr	r2, [pc, #364]	@ (3401b77c <HAL_TIM_Base_Start+0x1c4>)
3401b610:	4293      	cmp	r3, r2
3401b612:	d055      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b614:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b618:	4293      	cmp	r3, r2
3401b61a:	d051      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b61c:	4a58      	ldr	r2, [pc, #352]	@ (3401b780 <HAL_TIM_Base_Start+0x1c8>)
3401b61e:	4293      	cmp	r3, r2
3401b620:	d04e      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b622:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b626:	4293      	cmp	r3, r2
3401b628:	d04a      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b62a:	4a56      	ldr	r2, [pc, #344]	@ (3401b784 <HAL_TIM_Base_Start+0x1cc>)
3401b62c:	4293      	cmp	r3, r2
3401b62e:	d047      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b630:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b634:	4293      	cmp	r3, r2
3401b636:	d043      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b638:	4a53      	ldr	r2, [pc, #332]	@ (3401b788 <HAL_TIM_Base_Start+0x1d0>)
3401b63a:	4293      	cmp	r3, r2
3401b63c:	d040      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b63e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b642:	4293      	cmp	r3, r2
3401b644:	d03c      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b646:	4a51      	ldr	r2, [pc, #324]	@ (3401b78c <HAL_TIM_Base_Start+0x1d4>)
3401b648:	4293      	cmp	r3, r2
3401b64a:	d039      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b64c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b650:	4293      	cmp	r3, r2
3401b652:	d035      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b654:	4a4e      	ldr	r2, [pc, #312]	@ (3401b790 <HAL_TIM_Base_Start+0x1d8>)
3401b656:	4293      	cmp	r3, r2
3401b658:	d032      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b65a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b65e:	4293      	cmp	r3, r2
3401b660:	d02e      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b662:	4a4c      	ldr	r2, [pc, #304]	@ (3401b794 <HAL_TIM_Base_Start+0x1dc>)
3401b664:	4293      	cmp	r3, r2
3401b666:	d02b      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b668:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b66c:	4293      	cmp	r3, r2
3401b66e:	d027      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b670:	4a49      	ldr	r2, [pc, #292]	@ (3401b798 <HAL_TIM_Base_Start+0x1e0>)
3401b672:	4293      	cmp	r3, r2
3401b674:	d024      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b676:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b67a:	4293      	cmp	r3, r2
3401b67c:	d020      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b67e:	4a47      	ldr	r2, [pc, #284]	@ (3401b79c <HAL_TIM_Base_Start+0x1e4>)
3401b680:	4293      	cmp	r3, r2
3401b682:	d01d      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b684:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b688:	4293      	cmp	r3, r2
3401b68a:	d019      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b68c:	4a44      	ldr	r2, [pc, #272]	@ (3401b7a0 <HAL_TIM_Base_Start+0x1e8>)
3401b68e:	4293      	cmp	r3, r2
3401b690:	d016      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b692:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b696:	4293      	cmp	r3, r2
3401b698:	d012      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b69a:	4a42      	ldr	r2, [pc, #264]	@ (3401b7a4 <HAL_TIM_Base_Start+0x1ec>)
3401b69c:	4293      	cmp	r3, r2
3401b69e:	d00f      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b6a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b6a4:	4293      	cmp	r3, r2
3401b6a6:	d00b      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b6a8:	4a3f      	ldr	r2, [pc, #252]	@ (3401b7a8 <HAL_TIM_Base_Start+0x1f0>)
3401b6aa:	4293      	cmp	r3, r2
3401b6ac:	d008      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b6ae:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b6b2:	4293      	cmp	r3, r2
3401b6b4:	d004      	beq.n	3401b6c0 <HAL_TIM_Base_Start+0x108>
3401b6b6:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
3401b6ba:	483c      	ldr	r0, [pc, #240]	@ (3401b7ac <HAL_TIM_Base_Start+0x1f4>)
3401b6bc:	f003 fd50 	bl	3401f160 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
3401b6c0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
3401b6c4:	2b01      	cmp	r3, #1
3401b6c6:	d14e      	bne.n	3401b766 <HAL_TIM_Base_Start+0x1ae>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
3401b6c8:	2302      	movs	r3, #2
3401b6ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
3401b6ce:	6823      	ldr	r3, [r4, #0]
3401b6d0:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3401b6d4:	d039      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6d6:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401b6da:	d036      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401b6e0:	d033      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401b6e6:	d030      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6e8:	4a20      	ldr	r2, [pc, #128]	@ (3401b76c <HAL_TIM_Base_Start+0x1b4>)
3401b6ea:	4293      	cmp	r3, r2
3401b6ec:	d02d      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6ee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b6f2:	4293      	cmp	r3, r2
3401b6f4:	d029      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6f6:	4a1e      	ldr	r2, [pc, #120]	@ (3401b770 <HAL_TIM_Base_Start+0x1b8>)
3401b6f8:	4293      	cmp	r3, r2
3401b6fa:	d026      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b6fc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b700:	4293      	cmp	r3, r2
3401b702:	d022      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b704:	4a1b      	ldr	r2, [pc, #108]	@ (3401b774 <HAL_TIM_Base_Start+0x1bc>)
3401b706:	4293      	cmp	r3, r2
3401b708:	d01f      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b70a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b70e:	4293      	cmp	r3, r2
3401b710:	d01b      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b712:	4a1b      	ldr	r2, [pc, #108]	@ (3401b780 <HAL_TIM_Base_Start+0x1c8>)
3401b714:	4293      	cmp	r3, r2
3401b716:	d018      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b718:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b71c:	4293      	cmp	r3, r2
3401b71e:	d014      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b720:	4a18      	ldr	r2, [pc, #96]	@ (3401b784 <HAL_TIM_Base_Start+0x1cc>)
3401b722:	4293      	cmp	r3, r2
3401b724:	d011      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b726:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b72a:	4293      	cmp	r3, r2
3401b72c:	d00d      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b72e:	4a18      	ldr	r2, [pc, #96]	@ (3401b790 <HAL_TIM_Base_Start+0x1d8>)
3401b730:	4293      	cmp	r3, r2
3401b732:	d00a      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b734:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b738:	4293      	cmp	r3, r2
3401b73a:	d006      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b73c:	4a17      	ldr	r2, [pc, #92]	@ (3401b79c <HAL_TIM_Base_Start+0x1e4>)
3401b73e:	4293      	cmp	r3, r2
3401b740:	d003      	beq.n	3401b74a <HAL_TIM_Base_Start+0x192>
3401b742:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b746:	4293      	cmp	r3, r2
3401b748:	d107      	bne.n	3401b75a <HAL_TIM_Base_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
3401b74a:	6899      	ldr	r1, [r3, #8]
3401b74c:	4a18      	ldr	r2, [pc, #96]	@ (3401b7b0 <HAL_TIM_Base_Start+0x1f8>)
3401b74e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
3401b750:	2a06      	cmp	r2, #6
3401b752:	d006      	beq.n	3401b762 <HAL_TIM_Base_Start+0x1aa>
3401b754:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3401b758:	d003      	beq.n	3401b762 <HAL_TIM_Base_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
3401b75a:	681a      	ldr	r2, [r3, #0]
3401b75c:	f042 0201 	orr.w	r2, r2, #1
3401b760:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
3401b762:	2000      	movs	r0, #0
}
3401b764:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401b766:	2001      	movs	r0, #1
3401b768:	e7fc      	b.n	3401b764 <HAL_TIM_Base_Start+0x1ac>
3401b76a:	bf00      	nop
3401b76c:	50000400 	.word	0x50000400
3401b770:	50000800 	.word	0x50000800
3401b774:	50000c00 	.word	0x50000c00
3401b778:	50001000 	.word	0x50001000
3401b77c:	50001400 	.word	0x50001400
3401b780:	52000400 	.word	0x52000400
3401b784:	52004c00 	.word	0x52004c00
3401b788:	50003000 	.word	0x50003000
3401b78c:	50003400 	.word	0x50003400
3401b790:	50001800 	.word	0x50001800
3401b794:	50001c00 	.word	0x50001c00
3401b798:	50002000 	.word	0x50002000
3401b79c:	52004000 	.word	0x52004000
3401b7a0:	52004400 	.word	0x52004400
3401b7a4:	52004800 	.word	0x52004800
3401b7a8:	52003c00 	.word	0x52003c00
3401b7ac:	3402be47 	.word	0x3402be47
3401b7b0:	00010007 	.word	0x00010007

3401b7b4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3401b7b4:	f1b0 4fa4 	cmp.w	r0, #1375731712	@ 0x52000000
  tmpcr1 = TIMx->CR1;
3401b7b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
3401b7ba:	d024      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7bc:	f1b0 4f84 	cmp.w	r0, #1107296256	@ 0x42000000
3401b7c0:	d021      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7c2:	f1b0 4fa0 	cmp.w	r0, #1342177280	@ 0x50000000
3401b7c6:	d01e      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7c8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
3401b7cc:	d01b      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7ce:	4a3e      	ldr	r2, [pc, #248]	@ (3401b8c8 <TIM_Base_SetConfig+0x114>)
3401b7d0:	4290      	cmp	r0, r2
3401b7d2:	d018      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b7d8:	4290      	cmp	r0, r2
3401b7da:	d014      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7dc:	4a3b      	ldr	r2, [pc, #236]	@ (3401b8cc <TIM_Base_SetConfig+0x118>)
3401b7de:	4290      	cmp	r0, r2
3401b7e0:	d011      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7e2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b7e6:	4290      	cmp	r0, r2
3401b7e8:	d00d      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7ea:	4a39      	ldr	r2, [pc, #228]	@ (3401b8d0 <TIM_Base_SetConfig+0x11c>)
3401b7ec:	4290      	cmp	r0, r2
3401b7ee:	d00a      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7f0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b7f4:	4290      	cmp	r0, r2
3401b7f6:	d006      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7f8:	4a36      	ldr	r2, [pc, #216]	@ (3401b8d4 <TIM_Base_SetConfig+0x120>)
3401b7fa:	4290      	cmp	r0, r2
3401b7fc:	d003      	beq.n	3401b806 <TIM_Base_SetConfig+0x52>
3401b7fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b802:	4290      	cmp	r0, r2
3401b804:	d108      	bne.n	3401b818 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
3401b806:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
3401b808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
3401b80c:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
3401b80e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
3401b810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
3401b814:	4313      	orrs	r3, r2
3401b816:	e022      	b.n	3401b85e <TIM_Base_SetConfig+0xaa>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
3401b818:	4a2f      	ldr	r2, [pc, #188]	@ (3401b8d8 <TIM_Base_SetConfig+0x124>)
3401b81a:	4290      	cmp	r0, r2
3401b81c:	d0f7      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b81e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b822:	4290      	cmp	r0, r2
3401b824:	d0f3      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b826:	4a2d      	ldr	r2, [pc, #180]	@ (3401b8dc <TIM_Base_SetConfig+0x128>)
3401b828:	4290      	cmp	r0, r2
3401b82a:	d0f0      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b82c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b830:	4290      	cmp	r0, r2
3401b832:	d0ec      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b834:	4a2a      	ldr	r2, [pc, #168]	@ (3401b8e0 <TIM_Base_SetConfig+0x12c>)
3401b836:	4290      	cmp	r0, r2
3401b838:	d0e9      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b83a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b83e:	4290      	cmp	r0, r2
3401b840:	d0e5      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b842:	4a28      	ldr	r2, [pc, #160]	@ (3401b8e4 <TIM_Base_SetConfig+0x130>)
3401b844:	4290      	cmp	r0, r2
3401b846:	d0e2      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b848:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b84c:	4290      	cmp	r0, r2
3401b84e:	d0de      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b850:	4a25      	ldr	r2, [pc, #148]	@ (3401b8e8 <TIM_Base_SetConfig+0x134>)
3401b852:	4290      	cmp	r0, r2
3401b854:	d0db      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
3401b856:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b85a:	4290      	cmp	r0, r2
3401b85c:	d0d7      	beq.n	3401b80e <TIM_Base_SetConfig+0x5a>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
3401b85e:	694a      	ldr	r2, [r1, #20]
3401b860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3401b864:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
3401b866:	688a      	ldr	r2, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
3401b868:	f1b0 4fa4 	cmp.w	r0, #1375731712	@ 0x52000000
  TIMx->ARR = (uint32_t)Structure->Period ;
3401b86c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
3401b86e:	680a      	ldr	r2, [r1, #0]
3401b870:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
3401b872:	d01e      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b874:	f1b0 4f84 	cmp.w	r0, #1107296256	@ 0x42000000
3401b878:	d01b      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b87a:	4a16      	ldr	r2, [pc, #88]	@ (3401b8d4 <TIM_Base_SetConfig+0x120>)
3401b87c:	4290      	cmp	r0, r2
3401b87e:	d018      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b880:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b884:	4290      	cmp	r0, r2
3401b886:	d014      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b888:	4a15      	ldr	r2, [pc, #84]	@ (3401b8e0 <TIM_Base_SetConfig+0x12c>)
3401b88a:	4290      	cmp	r0, r2
3401b88c:	d011      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b88e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b892:	4290      	cmp	r0, r2
3401b894:	d00d      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b896:	4a13      	ldr	r2, [pc, #76]	@ (3401b8e4 <TIM_Base_SetConfig+0x130>)
3401b898:	4290      	cmp	r0, r2
3401b89a:	d00a      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b89c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b8a0:	4290      	cmp	r0, r2
3401b8a2:	d006      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b8a4:	4a10      	ldr	r2, [pc, #64]	@ (3401b8e8 <TIM_Base_SetConfig+0x134>)
3401b8a6:	4290      	cmp	r0, r2
3401b8a8:	d003      	beq.n	3401b8b2 <TIM_Base_SetConfig+0xfe>
3401b8aa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b8ae:	4290      	cmp	r0, r2
3401b8b0:	d101      	bne.n	3401b8b6 <TIM_Base_SetConfig+0x102>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
3401b8b2:	690a      	ldr	r2, [r1, #16]
3401b8b4:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
3401b8b6:	6802      	ldr	r2, [r0, #0]
3401b8b8:	f042 0204 	orr.w	r2, r2, #4
3401b8bc:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
3401b8be:	2201      	movs	r2, #1
3401b8c0:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
3401b8c2:	6003      	str	r3, [r0, #0]
}
3401b8c4:	4770      	bx	lr
3401b8c6:	bf00      	nop
3401b8c8:	50000400 	.word	0x50000400
3401b8cc:	50000800 	.word	0x50000800
3401b8d0:	50000c00 	.word	0x50000c00
3401b8d4:	52000400 	.word	0x52000400
3401b8d8:	52004c00 	.word	0x52004c00
3401b8dc:	50001800 	.word	0x50001800
3401b8e0:	52004000 	.word	0x52004000
3401b8e4:	52004400 	.word	0x52004400
3401b8e8:	52004800 	.word	0x52004800

3401b8ec <HAL_TIM_Base_Init>:
{
3401b8ec:	b510      	push	{r4, lr}
  if (htim == NULL)
3401b8ee:	4604      	mov	r4, r0
3401b8f0:	2800      	cmp	r0, #0
3401b8f2:	f000 8100 	beq.w	3401baf6 <HAL_TIM_Base_Init+0x20a>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
3401b8f6:	6803      	ldr	r3, [r0, #0]
3401b8f8:	f1b3 4fa4 	cmp.w	r3, #1375731712	@ 0x52000000
3401b8fc:	d07d      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b8fe:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
3401b902:	d07a      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401b908:	d077      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401b90e:	d074      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b910:	4a7a      	ldr	r2, [pc, #488]	@ (3401bafc <HAL_TIM_Base_Init+0x210>)
3401b912:	4293      	cmp	r3, r2
3401b914:	d071      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b916:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b91a:	4293      	cmp	r3, r2
3401b91c:	d06d      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b91e:	4a78      	ldr	r2, [pc, #480]	@ (3401bb00 <HAL_TIM_Base_Init+0x214>)
3401b920:	4293      	cmp	r3, r2
3401b922:	d06a      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b924:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b928:	4293      	cmp	r3, r2
3401b92a:	d066      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b92c:	4a75      	ldr	r2, [pc, #468]	@ (3401bb04 <HAL_TIM_Base_Init+0x218>)
3401b92e:	4293      	cmp	r3, r2
3401b930:	d063      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b932:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b936:	4293      	cmp	r3, r2
3401b938:	d05f      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b93a:	4a73      	ldr	r2, [pc, #460]	@ (3401bb08 <HAL_TIM_Base_Init+0x21c>)
3401b93c:	4293      	cmp	r3, r2
3401b93e:	d05c      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b940:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b944:	4293      	cmp	r3, r2
3401b946:	d058      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b948:	4a70      	ldr	r2, [pc, #448]	@ (3401bb0c <HAL_TIM_Base_Init+0x220>)
3401b94a:	4293      	cmp	r3, r2
3401b94c:	d055      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b94e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b952:	4293      	cmp	r3, r2
3401b954:	d051      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b956:	4a6e      	ldr	r2, [pc, #440]	@ (3401bb10 <HAL_TIM_Base_Init+0x224>)
3401b958:	4293      	cmp	r3, r2
3401b95a:	d04e      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b95c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b960:	4293      	cmp	r3, r2
3401b962:	d04a      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b964:	4a6b      	ldr	r2, [pc, #428]	@ (3401bb14 <HAL_TIM_Base_Init+0x228>)
3401b966:	4293      	cmp	r3, r2
3401b968:	d047      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b96a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b96e:	4293      	cmp	r3, r2
3401b970:	d043      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b972:	4a69      	ldr	r2, [pc, #420]	@ (3401bb18 <HAL_TIM_Base_Init+0x22c>)
3401b974:	4293      	cmp	r3, r2
3401b976:	d040      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b978:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b97c:	4293      	cmp	r3, r2
3401b97e:	d03c      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b980:	4a66      	ldr	r2, [pc, #408]	@ (3401bb1c <HAL_TIM_Base_Init+0x230>)
3401b982:	4293      	cmp	r3, r2
3401b984:	d039      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b986:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b98a:	4293      	cmp	r3, r2
3401b98c:	d035      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b98e:	4a64      	ldr	r2, [pc, #400]	@ (3401bb20 <HAL_TIM_Base_Init+0x234>)
3401b990:	4293      	cmp	r3, r2
3401b992:	d032      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b994:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b998:	4293      	cmp	r3, r2
3401b99a:	d02e      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b99c:	4a61      	ldr	r2, [pc, #388]	@ (3401bb24 <HAL_TIM_Base_Init+0x238>)
3401b99e:	4293      	cmp	r3, r2
3401b9a0:	d02b      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9a2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b9a6:	4293      	cmp	r3, r2
3401b9a8:	d027      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9aa:	4a5f      	ldr	r2, [pc, #380]	@ (3401bb28 <HAL_TIM_Base_Init+0x23c>)
3401b9ac:	4293      	cmp	r3, r2
3401b9ae:	d024      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9b0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b9b4:	4293      	cmp	r3, r2
3401b9b6:	d020      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9b8:	4a5c      	ldr	r2, [pc, #368]	@ (3401bb2c <HAL_TIM_Base_Init+0x240>)
3401b9ba:	4293      	cmp	r3, r2
3401b9bc:	d01d      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9be:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b9c2:	4293      	cmp	r3, r2
3401b9c4:	d019      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9c6:	4a5a      	ldr	r2, [pc, #360]	@ (3401bb30 <HAL_TIM_Base_Init+0x244>)
3401b9c8:	4293      	cmp	r3, r2
3401b9ca:	d016      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9cc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b9d0:	4293      	cmp	r3, r2
3401b9d2:	d012      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9d4:	4a57      	ldr	r2, [pc, #348]	@ (3401bb34 <HAL_TIM_Base_Init+0x248>)
3401b9d6:	4293      	cmp	r3, r2
3401b9d8:	d00f      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9da:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b9de:	4293      	cmp	r3, r2
3401b9e0:	d00b      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9e2:	4a55      	ldr	r2, [pc, #340]	@ (3401bb38 <HAL_TIM_Base_Init+0x24c>)
3401b9e4:	4293      	cmp	r3, r2
3401b9e6:	d008      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9e8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401b9ec:	4293      	cmp	r3, r2
3401b9ee:	d004      	beq.n	3401b9fa <HAL_TIM_Base_Init+0x10e>
3401b9f0:	f44f 718d 	mov.w	r1, #282	@ 0x11a
3401b9f4:	4851      	ldr	r0, [pc, #324]	@ (3401bb3c <HAL_TIM_Base_Init+0x250>)
3401b9f6:	f003 fbb3 	bl	3401f160 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
3401b9fa:	68a3      	ldr	r3, [r4, #8]
3401b9fc:	f033 0210 	bics.w	r2, r3, #16
3401ba00:	d00a      	beq.n	3401ba18 <HAL_TIM_Base_Init+0x12c>
3401ba02:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
3401ba06:	2a20      	cmp	r2, #32
3401ba08:	d006      	beq.n	3401ba18 <HAL_TIM_Base_Init+0x12c>
3401ba0a:	2b40      	cmp	r3, #64	@ 0x40
3401ba0c:	d004      	beq.n	3401ba18 <HAL_TIM_Base_Init+0x12c>
3401ba0e:	f240 111b 	movw	r1, #283	@ 0x11b
3401ba12:	484a      	ldr	r0, [pc, #296]	@ (3401bb3c <HAL_TIM_Base_Init+0x250>)
3401ba14:	f003 fba4 	bl	3401f160 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
3401ba18:	6923      	ldr	r3, [r4, #16]
3401ba1a:	f433 7280 	bics.w	r2, r3, #256	@ 0x100
3401ba1e:	d007      	beq.n	3401ba30 <HAL_TIM_Base_Init+0x144>
3401ba20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401ba24:	d004      	beq.n	3401ba30 <HAL_TIM_Base_Init+0x144>
3401ba26:	f44f 718e 	mov.w	r1, #284	@ 0x11c
3401ba2a:	4844      	ldr	r0, [pc, #272]	@ (3401bb3c <HAL_TIM_Base_Init+0x250>)
3401ba2c:	f003 fb98 	bl	3401f160 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
3401ba30:	6823      	ldr	r3, [r4, #0]
3401ba32:	68e2      	ldr	r2, [r4, #12]
3401ba34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
3401ba38:	d026      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401ba3e:	d023      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba40:	492e      	ldr	r1, [pc, #184]	@ (3401bafc <HAL_TIM_Base_Init+0x210>)
3401ba42:	428b      	cmp	r3, r1
3401ba44:	d020      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba46:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401ba4a:	428b      	cmp	r3, r1
3401ba4c:	d01c      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba4e:	492c      	ldr	r1, [pc, #176]	@ (3401bb00 <HAL_TIM_Base_Init+0x214>)
3401ba50:	428b      	cmp	r3, r1
3401ba52:	d019      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba54:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401ba58:	428b      	cmp	r3, r1
3401ba5a:	d015      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba5c:	4929      	ldr	r1, [pc, #164]	@ (3401bb04 <HAL_TIM_Base_Init+0x218>)
3401ba5e:	428b      	cmp	r3, r1
3401ba60:	d012      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba62:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401ba66:	428b      	cmp	r3, r1
3401ba68:	d00e      	beq.n	3401ba88 <HAL_TIM_Base_Init+0x19c>
3401ba6a:	681b      	ldr	r3, [r3, #0]
3401ba6c:	3a01      	subs	r2, #1
3401ba6e:	04db      	lsls	r3, r3, #19
3401ba70:	bf54      	ite	pl
3401ba72:	f64f 73fe 	movwpl	r3, #65534	@ 0xfffe
3401ba76:	4b32      	ldrmi	r3, [pc, #200]	@ (3401bb40 <HAL_TIM_Base_Init+0x254>)
3401ba78:	429a      	cmp	r2, r3
3401ba7a:	d907      	bls.n	3401ba8c <HAL_TIM_Base_Init+0x1a0>
3401ba7c:	f240 111d 	movw	r1, #285	@ 0x11d
3401ba80:	482e      	ldr	r0, [pc, #184]	@ (3401bb3c <HAL_TIM_Base_Init+0x250>)
3401ba82:	f003 fb6d 	bl	3401f160 <assert_failed>
3401ba86:	e001      	b.n	3401ba8c <HAL_TIM_Base_Init+0x1a0>
3401ba88:	2a00      	cmp	r2, #0
3401ba8a:	d0f7      	beq.n	3401ba7c <HAL_TIM_Base_Init+0x190>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
3401ba8c:	69a3      	ldr	r3, [r4, #24]
3401ba8e:	f033 0380 	bics.w	r3, r3, #128	@ 0x80
3401ba92:	d004      	beq.n	3401ba9e <HAL_TIM_Base_Init+0x1b2>
3401ba94:	f44f 718f 	mov.w	r1, #286	@ 0x11e
3401ba98:	4828      	ldr	r0, [pc, #160]	@ (3401bb3c <HAL_TIM_Base_Init+0x250>)
3401ba9a:	f003 fb61 	bl	3401f160 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
3401ba9e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
3401baa2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
3401baa6:	b923      	cbnz	r3, 3401bab2 <HAL_TIM_Base_Init+0x1c6>
    HAL_TIM_Base_MspInit(htim);
3401baa8:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
3401baaa:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
3401baae:	f7ff fd81 	bl	3401b5b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
3401bab2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3401bab4:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
3401bab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
3401baba:	1d21      	adds	r1, r4, #4
3401babc:	f7ff fe7a 	bl	3401b7b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3401bac0:	2301      	movs	r3, #1
  return HAL_OK;
3401bac2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
3401bac4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3401bac8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
3401bacc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
3401bad0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
3401bad4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
3401bad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401badc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
3401bae0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
3401bae4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
3401bae8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
3401baec:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
3401baf0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
3401baf4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3401baf6:	2001      	movs	r0, #1
3401baf8:	e7fc      	b.n	3401baf4 <HAL_TIM_Base_Init+0x208>
3401bafa:	bf00      	nop
3401bafc:	50000400 	.word	0x50000400
3401bb00:	50000800 	.word	0x50000800
3401bb04:	50000c00 	.word	0x50000c00
3401bb08:	50001000 	.word	0x50001000
3401bb0c:	50001400 	.word	0x50001400
3401bb10:	52000400 	.word	0x52000400
3401bb14:	52004c00 	.word	0x52004c00
3401bb18:	50003000 	.word	0x50003000
3401bb1c:	50003400 	.word	0x50003400
3401bb20:	50001800 	.word	0x50001800
3401bb24:	50001c00 	.word	0x50001c00
3401bb28:	50002000 	.word	0x50002000
3401bb2c:	52004000 	.word	0x52004000
3401bb30:	52004400 	.word	0x52004400
3401bb34:	52004800 	.word	0x52004800
3401bb38:	52003c00 	.word	0x52003c00
3401bb3c:	3402be47 	.word	0x3402be47
3401bb40:	000fffee 	.word	0x000fffee

3401bb44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3401bb44:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3401bb46:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401bb48:	e852 3f00 	ldrex	r3, [r2]
3401bb4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401bb50:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3401bb54:	6802      	ldr	r2, [r0, #0]
3401bb56:	2900      	cmp	r1, #0
3401bb58:	d1f5      	bne.n	3401bb46 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3401bb5a:	4c0f      	ldr	r4, [pc, #60]	@ (3401bb98 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401bb5c:	f102 0308 	add.w	r3, r2, #8
3401bb60:	e853 3f00 	ldrex	r3, [r3]
3401bb64:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401bb66:	f102 0c08 	add.w	ip, r2, #8
3401bb6a:	e84c 3100 	strex	r1, r3, [ip]
3401bb6e:	2900      	cmp	r1, #0
3401bb70:	d1f4      	bne.n	3401bb5c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3401bb72:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
3401bb74:	2b01      	cmp	r3, #1
3401bb76:	d107      	bne.n	3401bb88 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401bb78:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3401bb7c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401bb80:	e842 3100 	strex	r1, r3, [r2]
3401bb84:	2900      	cmp	r1, #0
3401bb86:	d1f7      	bne.n	3401bb78 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3401bb88:	2320      	movs	r3, #32
3401bb8a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401bb8e:	2300      	movs	r3, #0
3401bb90:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3401bb92:	6743      	str	r3, [r0, #116]	@ 0x74
}
3401bb94:	bd10      	pop	{r4, pc}
3401bb96:	bf00      	nop
3401bb98:	effffffe 	.word	0xeffffffe

3401bb9c <HAL_UART_MspInit>:
}
3401bb9c:	4770      	bx	lr
	...

3401bba0 <UART_SetConfig>:
{
3401bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401bba2:	6842      	ldr	r2, [r0, #4]
3401bba4:	4bb0      	ldr	r3, [pc, #704]	@ (3401be68 <UART_SetConfig+0x2c8>)
{
3401bba6:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
3401bba8:	429a      	cmp	r2, r3
3401bbaa:	d904      	bls.n	3401bbb6 <UART_SetConfig+0x16>
3401bbac:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
3401bbb0:	48ae      	ldr	r0, [pc, #696]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bbb2:	f003 fad5 	bl	3401f160 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
3401bbb6:	68a3      	ldr	r3, [r4, #8]
3401bbb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401bbbc:	d007      	beq.n	3401bbce <UART_SetConfig+0x2e>
3401bbbe:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3401bbc2:	d004      	beq.n	3401bbce <UART_SetConfig+0x2e>
3401bbc4:	f640 4151 	movw	r1, #3153	@ 0xc51
3401bbc8:	48a8      	ldr	r0, [pc, #672]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bbca:	f003 fac9 	bl	3401f160 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
3401bbce:	6822      	ldr	r2, [r4, #0]
3401bbd0:	49a7      	ldr	r1, [pc, #668]	@ (3401be70 <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3401bbd2:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
3401bbd4:	428a      	cmp	r2, r1
3401bbd6:	d004      	beq.n	3401bbe2 <UART_SetConfig+0x42>
3401bbd8:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
3401bbdc:	428a      	cmp	r2, r1
3401bbde:	f040 80af 	bne.w	3401bd40 <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
3401bbe2:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3401bbe6:	d004      	beq.n	3401bbf2 <UART_SetConfig+0x52>
3401bbe8:	f640 4154 	movw	r1, #3156	@ 0xc54
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3401bbec:	489f      	ldr	r0, [pc, #636]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bbee:	f003 fab7 	bl	3401f160 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
3401bbf2:	6923      	ldr	r3, [r4, #16]
3401bbf4:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
3401bbf8:	d007      	beq.n	3401bc0a <UART_SetConfig+0x6a>
3401bbfa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
3401bbfe:	d004      	beq.n	3401bc0a <UART_SetConfig+0x6a>
3401bc00:	f640 415c 	movw	r1, #3164	@ 0xc5c
3401bc04:	4899      	ldr	r0, [pc, #612]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bc06:	f003 faab 	bl	3401f160 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
3401bc0a:	6963      	ldr	r3, [r4, #20]
3401bc0c:	f033 020c 	bics.w	r2, r3, #12
3401bc10:	d100      	bne.n	3401bc14 <UART_SetConfig+0x74>
3401bc12:	b923      	cbnz	r3, 3401bc1e <UART_SetConfig+0x7e>
3401bc14:	f640 415d 	movw	r1, #3165	@ 0xc5d
3401bc18:	4894      	ldr	r0, [pc, #592]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bc1a:	f003 faa1 	bl	3401f160 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
3401bc1e:	69a3      	ldr	r3, [r4, #24]
3401bc20:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
3401bc24:	d004      	beq.n	3401bc30 <UART_SetConfig+0x90>
3401bc26:	f640 415e 	movw	r1, #3166	@ 0xc5e
3401bc2a:	4890      	ldr	r0, [pc, #576]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bc2c:	f003 fa98 	bl	3401f160 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
3401bc30:	69e3      	ldr	r3, [r4, #28]
3401bc32:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3401bc36:	d004      	beq.n	3401bc42 <UART_SetConfig+0xa2>
3401bc38:	f640 415f 	movw	r1, #3167	@ 0xc5f
3401bc3c:	488b      	ldr	r0, [pc, #556]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bc3e:	f003 fa8f 	bl	3401f160 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
3401bc42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401bc44:	2b0b      	cmp	r3, #11
3401bc46:	d904      	bls.n	3401bc52 <UART_SetConfig+0xb2>
3401bc48:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
3401bc4c:	4887      	ldr	r0, [pc, #540]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bc4e:	f003 fa87 	bl	3401f160 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401bc52:	6921      	ldr	r1, [r4, #16]
3401bc54:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401bc56:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401bc58:	430a      	orrs	r2, r1
3401bc5a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401bc5c:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401bc5e:	69e5      	ldr	r5, [r4, #28]
3401bc60:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401bc62:	4984      	ldr	r1, [pc, #528]	@ (3401be74 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3401bc64:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3401bc66:	4001      	ands	r1, r0
3401bc68:	430a      	orrs	r2, r1
3401bc6a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3401bc6c:	685a      	ldr	r2, [r3, #4]
3401bc6e:	68e1      	ldr	r1, [r4, #12]
3401bc70:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
3401bc74:	430a      	orrs	r2, r1
3401bc76:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3401bc78:	4a7d      	ldr	r2, [pc, #500]	@ (3401be70 <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3401bc7a:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
3401bc7c:	4293      	cmp	r3, r2
3401bc7e:	d005      	beq.n	3401bc8c <UART_SetConfig+0xec>
3401bc80:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bc84:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
3401bc86:	bf1c      	itt	ne
3401bc88:	6a22      	ldrne	r2, [r4, #32]
3401bc8a:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3401bc8c:	689a      	ldr	r2, [r3, #8]
3401bc8e:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
3401bc92:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
3401bc96:	430a      	orrs	r2, r1
3401bc98:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3401bc9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3401bc9c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401bc9e:	f022 020f 	bic.w	r2, r2, #15
3401bca2:	430a      	orrs	r2, r1
3401bca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
3401bca6:	4a74      	ldr	r2, [pc, #464]	@ (3401be78 <UART_SetConfig+0x2d8>)
3401bca8:	4293      	cmp	r3, r2
3401bcaa:	d07a      	beq.n	3401bda2 <UART_SetConfig+0x202>
3401bcac:	4a73      	ldr	r2, [pc, #460]	@ (3401be7c <UART_SetConfig+0x2dc>)
3401bcae:	4293      	cmp	r3, r2
3401bcb0:	f000 809c 	beq.w	3401bdec <UART_SetConfig+0x24c>
3401bcb4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401bcb8:	4293      	cmp	r3, r2
3401bcba:	f000 809b 	beq.w	3401bdf4 <UART_SetConfig+0x254>
3401bcbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401bcc2:	4293      	cmp	r3, r2
3401bcc4:	f000 809a 	beq.w	3401bdfc <UART_SetConfig+0x25c>
3401bcc8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401bccc:	f000 809a 	beq.w	3401be04 <UART_SetConfig+0x264>
3401bcd0:	4a6b      	ldr	r2, [pc, #428]	@ (3401be80 <UART_SetConfig+0x2e0>)
3401bcd2:	4293      	cmp	r3, r2
3401bcd4:	f000 809a 	beq.w	3401be0c <UART_SetConfig+0x26c>
3401bcd8:	4a6a      	ldr	r2, [pc, #424]	@ (3401be84 <UART_SetConfig+0x2e4>)
3401bcda:	4293      	cmp	r3, r2
3401bcdc:	f000 809a 	beq.w	3401be14 <UART_SetConfig+0x274>
3401bce0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401bce4:	4293      	cmp	r3, r2
3401bce6:	f000 8099 	beq.w	3401be1c <UART_SetConfig+0x27c>
3401bcea:	4a67      	ldr	r2, [pc, #412]	@ (3401be88 <UART_SetConfig+0x2e8>)
3401bcec:	4293      	cmp	r3, r2
3401bcee:	f000 8099 	beq.w	3401be24 <UART_SetConfig+0x284>
3401bcf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401bcf6:	4293      	cmp	r3, r2
3401bcf8:	f000 8098 	beq.w	3401be2c <UART_SetConfig+0x28c>
3401bcfc:	4a5c      	ldr	r2, [pc, #368]	@ (3401be70 <UART_SetConfig+0x2d0>)
3401bcfe:	4293      	cmp	r3, r2
3401bd00:	d02e      	beq.n	3401bd60 <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
3401bd02:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bd06:	4293      	cmp	r3, r2
3401bd08:	f04f 0000 	mov.w	r0, #0
3401bd0c:	f04f 0100 	mov.w	r1, #0
3401bd10:	d14a      	bne.n	3401bda8 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401bd12:	f7fe feb5 	bl	3401aa80 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401bd16:	2800      	cmp	r0, #0
3401bd18:	d041      	beq.n	3401bd9e <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401bd1a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401bd1c:	4a5b      	ldr	r2, [pc, #364]	@ (3401be8c <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401bd1e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401bd20:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401bd24:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3401bd28:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401bd2c:	4299      	cmp	r1, r3
3401bd2e:	d91b      	bls.n	3401bd68 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
3401bd30:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
3401bd32:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
3401bd36:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
3401bd38:	2300      	movs	r3, #0
  huart->TxISR = NULL;
3401bd3a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
3401bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
3401bd40:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3401bd44:	d004      	beq.n	3401bd50 <UART_SetConfig+0x1b0>
3401bd46:	f640 4158 	movw	r1, #3160	@ 0xc58
3401bd4a:	4848      	ldr	r0, [pc, #288]	@ (3401be6c <UART_SetConfig+0x2cc>)
3401bd4c:	f003 fa08 	bl	3401f160 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
3401bd50:	6a23      	ldr	r3, [r4, #32]
3401bd52:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3401bd56:	f43f af4c 	beq.w	3401bbf2 <UART_SetConfig+0x52>
3401bd5a:	f640 4159 	movw	r1, #3161	@ 0xc59
3401bd5e:	e745      	b.n	3401bbec <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401bd60:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
3401bd64:	2100      	movs	r1, #0
3401bd66:	e7d4      	b.n	3401bd12 <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3401bd68:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
3401bd6c:	d8e0      	bhi.n	3401bd30 <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401bd6e:	2300      	movs	r3, #0
3401bd70:	4619      	mov	r1, r3
3401bd72:	f7e5 feeb 	bl	34001b4c <__aeabi_uldivmod>
3401bd76:	4606      	mov	r6, r0
3401bd78:	460f      	mov	r7, r1
3401bd7a:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
3401bd7e:	0868      	lsrs	r0, r5, #1
3401bd80:	1830      	adds	r0, r6, r0
3401bd82:	462a      	mov	r2, r5
3401bd84:	f04f 0300 	mov.w	r3, #0
3401bd88:	f147 0100 	adc.w	r1, r7, #0
3401bd8c:	f7e5 fede 	bl	34001b4c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3401bd90:	4b3f      	ldr	r3, [pc, #252]	@ (3401be90 <UART_SetConfig+0x2f0>)
3401bd92:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
3401bd96:	429a      	cmp	r2, r3
3401bd98:	d8ca      	bhi.n	3401bd30 <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
3401bd9a:	6823      	ldr	r3, [r4, #0]
3401bd9c:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
3401bd9e:	2000      	movs	r0, #0
3401bda0:	e7c7      	b.n	3401bd32 <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401bda2:	2000      	movs	r0, #0
3401bda4:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3401bda8:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
3401bdac:	d142      	bne.n	3401be34 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401bdae:	f7fe fe67 	bl	3401aa80 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401bdb2:	2800      	cmp	r0, #0
3401bdb4:	d0f3      	beq.n	3401bd9e <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401bdb6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401bdb8:	4b34      	ldr	r3, [pc, #208]	@ (3401be8c <UART_SetConfig+0x2ec>)
3401bdba:	6862      	ldr	r2, [r4, #4]
3401bdbc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3401bdc0:	fbb0 f0f3 	udiv	r0, r0, r3
3401bdc4:	0853      	lsrs	r3, r2, #1
3401bdc6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
3401bdca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401bdce:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3401bdd2:	f1a3 0110 	sub.w	r1, r3, #16
3401bdd6:	4291      	cmp	r1, r2
3401bdd8:	d8aa      	bhi.n	3401bd30 <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401bdda:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
3401bdde:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3401bde0:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3401bde2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
3401bde6:	4313      	orrs	r3, r2
3401bde8:	60cb      	str	r3, [r1, #12]
3401bdea:	e7d8      	b.n	3401bd9e <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
3401bdec:	2000      	movs	r0, #0
3401bdee:	f44f 7100 	mov.w	r1, #512	@ 0x200
3401bdf2:	e7d9      	b.n	3401bda8 <UART_SetConfig+0x208>
3401bdf4:	2000      	movs	r0, #0
3401bdf6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
3401bdfa:	e7d5      	b.n	3401bda8 <UART_SetConfig+0x208>
3401bdfc:	2000      	movs	r0, #0
3401bdfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
3401be02:	e7d1      	b.n	3401bda8 <UART_SetConfig+0x208>
3401be04:	2000      	movs	r0, #0
3401be06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
3401be0a:	e7cd      	b.n	3401bda8 <UART_SetConfig+0x208>
3401be0c:	2000      	movs	r0, #0
3401be0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
3401be12:	e7c9      	b.n	3401bda8 <UART_SetConfig+0x208>
3401be14:	2000      	movs	r0, #0
3401be16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
3401be1a:	e7c5      	b.n	3401bda8 <UART_SetConfig+0x208>
3401be1c:	2000      	movs	r0, #0
3401be1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
3401be22:	e7c1      	b.n	3401bda8 <UART_SetConfig+0x208>
3401be24:	2000      	movs	r0, #0
3401be26:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
3401be2a:	e7bd      	b.n	3401bda8 <UART_SetConfig+0x208>
3401be2c:	2000      	movs	r0, #0
3401be2e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
3401be32:	e7b9      	b.n	3401bda8 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3401be34:	f7fe fe24 	bl	3401aa80 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
3401be38:	2800      	cmp	r0, #0
3401be3a:	d0b0      	beq.n	3401bd9e <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3401be3c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401be3e:	4b13      	ldr	r3, [pc, #76]	@ (3401be8c <UART_SetConfig+0x2ec>)
3401be40:	6862      	ldr	r2, [r4, #4]
3401be42:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
3401be46:	fbb0 f3f3 	udiv	r3, r0, r3
3401be4a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
3401be4e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3401be52:	f64f 72ef 	movw	r2, #65519	@ 0xffef
3401be56:	f1a3 0110 	sub.w	r1, r3, #16
3401be5a:	4291      	cmp	r1, r2
3401be5c:	f63f af68 	bhi.w	3401bd30 <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
3401be60:	6822      	ldr	r2, [r4, #0]
3401be62:	60d3      	str	r3, [r2, #12]
3401be64:	e79b      	b.n	3401bd9e <UART_SetConfig+0x1fe>
3401be66:	bf00      	nop
3401be68:	00bebc1f 	.word	0x00bebc1f
3401be6c:	3402bea7 	.word	0x3402bea7
3401be70:	56000c00 	.word	0x56000c00
3401be74:	cfff69f3 	.word	0xcfff69f3
3401be78:	52001000 	.word	0x52001000
3401be7c:	50004400 	.word	0x50004400
3401be80:	52001400 	.word	0x52001400
3401be84:	50007800 	.word	0x50007800
3401be88:	52001800 	.word	0x52001800
3401be8c:	341051e2 	.word	0x341051e2
3401be90:	000ffcff 	.word	0x000ffcff

3401be94 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401be94:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
3401be96:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401be98:	2bff      	cmp	r3, #255	@ 0xff
{
3401be9a:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3401be9c:	d904      	bls.n	3401bea8 <UART_AdvFeatureConfig+0x14>
3401be9e:	f640 41e5 	movw	r1, #3301	@ 0xce5
3401bea2:	487e      	ldr	r0, [pc, #504]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bea4:	f003 f95c 	bl	3401f160 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3401bea8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401beaa:	0718      	lsls	r0, r3, #28
3401beac:	d50f      	bpl.n	3401bece <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3401beae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401beb0:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
3401beb4:	d004      	beq.n	3401bec0 <UART_AdvFeatureConfig+0x2c>
3401beb6:	f640 41ea 	movw	r1, #3306	@ 0xcea
3401beba:	4878      	ldr	r0, [pc, #480]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bebc:	f003 f950 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3401bec0:	6822      	ldr	r2, [r4, #0]
3401bec2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3401bec4:	6853      	ldr	r3, [r2, #4]
3401bec6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3401beca:	430b      	orrs	r3, r1
3401becc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3401bece:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401bed0:	07d9      	lsls	r1, r3, #31
3401bed2:	d50f      	bpl.n	3401bef4 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3401bed4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401bed6:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
3401beda:	d004      	beq.n	3401bee6 <UART_AdvFeatureConfig+0x52>
3401bedc:	f640 41f1 	movw	r1, #3313	@ 0xcf1
3401bee0:	486e      	ldr	r0, [pc, #440]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bee2:	f003 f93d 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3401bee6:	6822      	ldr	r2, [r4, #0]
3401bee8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
3401beea:	6853      	ldr	r3, [r2, #4]
3401beec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3401bef0:	430b      	orrs	r3, r1
3401bef2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3401bef4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401bef6:	079a      	lsls	r2, r3, #30
3401bef8:	d50f      	bpl.n	3401bf1a <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3401befa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401befc:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3401bf00:	d004      	beq.n	3401bf0c <UART_AdvFeatureConfig+0x78>
3401bf02:	f640 41f8 	movw	r1, #3320	@ 0xcf8
3401bf06:	4865      	ldr	r0, [pc, #404]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bf08:	f003 f92a 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3401bf0c:	6822      	ldr	r2, [r4, #0]
3401bf0e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3401bf10:	6853      	ldr	r3, [r2, #4]
3401bf12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401bf16:	430b      	orrs	r3, r1
3401bf18:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3401bf1a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401bf1c:	075b      	lsls	r3, r3, #29
3401bf1e:	d50f      	bpl.n	3401bf40 <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3401bf20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401bf22:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
3401bf26:	d004      	beq.n	3401bf32 <UART_AdvFeatureConfig+0x9e>
3401bf28:	f640 41ff 	movw	r1, #3327	@ 0xcff
3401bf2c:	485b      	ldr	r0, [pc, #364]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bf2e:	f003 f917 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3401bf32:	6822      	ldr	r2, [r4, #0]
3401bf34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3401bf36:	6853      	ldr	r3, [r2, #4]
3401bf38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
3401bf3c:	430b      	orrs	r3, r1
3401bf3e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3401bf40:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401bf42:	06d8      	lsls	r0, r3, #27
3401bf44:	d50f      	bpl.n	3401bf66 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3401bf46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401bf48:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
3401bf4c:	d004      	beq.n	3401bf58 <UART_AdvFeatureConfig+0xc4>
3401bf4e:	f640 5106 	movw	r1, #3334	@ 0xd06
3401bf52:	4852      	ldr	r0, [pc, #328]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bf54:	f003 f904 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3401bf58:	6822      	ldr	r2, [r4, #0]
3401bf5a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3401bf5c:	6893      	ldr	r3, [r2, #8]
3401bf5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3401bf62:	430b      	orrs	r3, r1
3401bf64:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3401bf66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401bf68:	0699      	lsls	r1, r3, #26
3401bf6a:	d50f      	bpl.n	3401bf8c <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3401bf6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401bf6e:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
3401bf72:	d004      	beq.n	3401bf7e <UART_AdvFeatureConfig+0xea>
3401bf74:	f640 510e 	movw	r1, #3342	@ 0xd0e
3401bf78:	4848      	ldr	r0, [pc, #288]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401bf7a:	f003 f8f1 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3401bf7e:	6822      	ldr	r2, [r4, #0]
3401bf80:	6c21      	ldr	r1, [r4, #64]	@ 0x40
3401bf82:	6893      	ldr	r3, [r2, #8]
3401bf84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
3401bf88:	430b      	orrs	r3, r1
3401bf8a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3401bf8c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401bf8e:	065a      	lsls	r2, r3, #25
3401bf90:	d56f      	bpl.n	3401c072 <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3401bf92:	6823      	ldr	r3, [r4, #0]
3401bf94:	4a42      	ldr	r2, [pc, #264]	@ (3401c0a0 <UART_AdvFeatureConfig+0x20c>)
3401bf96:	4293      	cmp	r3, r2
3401bf98:	d047      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bf9a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bf9e:	4293      	cmp	r3, r2
3401bfa0:	d043      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfa2:	4a40      	ldr	r2, [pc, #256]	@ (3401c0a4 <UART_AdvFeatureConfig+0x210>)
3401bfa4:	4293      	cmp	r3, r2
3401bfa6:	d040      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfa8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bfac:	4293      	cmp	r3, r2
3401bfae:	d03c      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfb0:	4a3d      	ldr	r2, [pc, #244]	@ (3401c0a8 <UART_AdvFeatureConfig+0x214>)
3401bfb2:	4293      	cmp	r3, r2
3401bfb4:	d039      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfb6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bfba:	4293      	cmp	r3, r2
3401bfbc:	d035      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfbe:	4a3b      	ldr	r2, [pc, #236]	@ (3401c0ac <UART_AdvFeatureConfig+0x218>)
3401bfc0:	4293      	cmp	r3, r2
3401bfc2:	d032      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfc4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bfc8:	4293      	cmp	r3, r2
3401bfca:	d02e      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfcc:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401bfd0:	d02b      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfd2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401bfd6:	4293      	cmp	r3, r2
3401bfd8:	d027      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfda:	4a35      	ldr	r2, [pc, #212]	@ (3401c0b0 <UART_AdvFeatureConfig+0x21c>)
3401bfdc:	4293      	cmp	r3, r2
3401bfde:	d024      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfe0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bfe4:	4293      	cmp	r3, r2
3401bfe6:	d020      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfe8:	4a32      	ldr	r2, [pc, #200]	@ (3401c0b4 <UART_AdvFeatureConfig+0x220>)
3401bfea:	4293      	cmp	r3, r2
3401bfec:	d01d      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bfee:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401bff2:	4293      	cmp	r3, r2
3401bff4:	d019      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bff6:	4a30      	ldr	r2, [pc, #192]	@ (3401c0b8 <UART_AdvFeatureConfig+0x224>)
3401bff8:	4293      	cmp	r3, r2
3401bffa:	d016      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401bffc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c000:	4293      	cmp	r3, r2
3401c002:	d012      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401c004:	4a2d      	ldr	r2, [pc, #180]	@ (3401c0bc <UART_AdvFeatureConfig+0x228>)
3401c006:	4293      	cmp	r3, r2
3401c008:	d00f      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401c00a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c00e:	4293      	cmp	r3, r2
3401c010:	d00b      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401c012:	4a2b      	ldr	r2, [pc, #172]	@ (3401c0c0 <UART_AdvFeatureConfig+0x22c>)
3401c014:	4293      	cmp	r3, r2
3401c016:	d008      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401c018:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c01c:	4293      	cmp	r3, r2
3401c01e:	d004      	beq.n	3401c02a <UART_AdvFeatureConfig+0x196>
3401c020:	f640 5116 	movw	r1, #3350	@ 0xd16
3401c024:	481d      	ldr	r0, [pc, #116]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401c026:	f003 f89b 	bl	3401f160 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3401c02a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401c02c:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
3401c030:	d004      	beq.n	3401c03c <UART_AdvFeatureConfig+0x1a8>
3401c032:	f640 5117 	movw	r1, #3351	@ 0xd17
3401c036:	4819      	ldr	r0, [pc, #100]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401c038:	f003 f892 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401c03c:	6821      	ldr	r1, [r4, #0]
3401c03e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
3401c040:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3401c042:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3401c046:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3401c04a:	ea43 0302 	orr.w	r3, r3, r2
3401c04e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3401c050:	d10f      	bne.n	3401c072 <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3401c052:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401c054:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
3401c058:	d004      	beq.n	3401c064 <UART_AdvFeatureConfig+0x1d0>
3401c05a:	f640 511c 	movw	r1, #3356	@ 0xd1c
3401c05e:	480f      	ldr	r0, [pc, #60]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401c060:	f003 f87e 	bl	3401f160 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3401c064:	6822      	ldr	r2, [r4, #0]
3401c066:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
3401c068:	6853      	ldr	r3, [r2, #4]
3401c06a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
3401c06e:	430b      	orrs	r3, r1
3401c070:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3401c072:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401c074:	061b      	lsls	r3, r3, #24
3401c076:	d50f      	bpl.n	3401c098 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3401c078:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401c07a:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3401c07e:	d004      	beq.n	3401c08a <UART_AdvFeatureConfig+0x1f6>
3401c080:	f640 5124 	movw	r1, #3364	@ 0xd24
3401c084:	4805      	ldr	r0, [pc, #20]	@ (3401c09c <UART_AdvFeatureConfig+0x208>)
3401c086:	f003 f86b 	bl	3401f160 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3401c08a:	6822      	ldr	r2, [r4, #0]
3401c08c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3401c08e:	6853      	ldr	r3, [r2, #4]
3401c090:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
3401c094:	430b      	orrs	r3, r1
3401c096:	6053      	str	r3, [r2, #4]
}
3401c098:	bd10      	pop	{r4, pc}
3401c09a:	bf00      	nop
3401c09c:	3402bea7 	.word	0x3402bea7
3401c0a0:	52001000 	.word	0x52001000
3401c0a4:	50004400 	.word	0x50004400
3401c0a8:	50004800 	.word	0x50004800
3401c0ac:	50004c00 	.word	0x50004c00
3401c0b0:	52001400 	.word	0x52001400
3401c0b4:	50007800 	.word	0x50007800
3401c0b8:	50007c00 	.word	0x50007c00
3401c0bc:	52001800 	.word	0x52001800
3401c0c0:	52001c00 	.word	0x52001c00

3401c0c4 <UART_WaitOnFlagUntilTimeout>:
{
3401c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401c0c8:	4604      	mov	r4, r0
3401c0ca:	460d      	mov	r5, r1
3401c0cc:	4617      	mov	r7, r2
3401c0ce:	4698      	mov	r8, r3
3401c0d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3401c0d4:	6822      	ldr	r2, [r4, #0]
3401c0d6:	69d3      	ldr	r3, [r2, #28]
3401c0d8:	ea35 0303 	bics.w	r3, r5, r3
3401c0dc:	bf0c      	ite	eq
3401c0de:	2301      	moveq	r3, #1
3401c0e0:	2300      	movne	r3, #0
3401c0e2:	42bb      	cmp	r3, r7
3401c0e4:	d001      	beq.n	3401c0ea <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
3401c0e6:	2000      	movs	r0, #0
3401c0e8:	e022      	b.n	3401c130 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
3401c0ea:	f1b9 3fff 	cmp.w	r9, #4294967295
3401c0ee:	d0f2      	beq.n	3401c0d6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401c0f0:	f002 fd06 	bl	3401eb00 <HAL_GetTick>
3401c0f4:	eba0 0008 	sub.w	r0, r0, r8
3401c0f8:	4548      	cmp	r0, r9
3401c0fa:	d829      	bhi.n	3401c150 <UART_WaitOnFlagUntilTimeout+0x8c>
3401c0fc:	f1b9 0f00 	cmp.w	r9, #0
3401c100:	d026      	beq.n	3401c150 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3401c102:	6821      	ldr	r1, [r4, #0]
3401c104:	680b      	ldr	r3, [r1, #0]
3401c106:	075a      	lsls	r2, r3, #29
3401c108:	d5e4      	bpl.n	3401c0d4 <UART_WaitOnFlagUntilTimeout+0x10>
3401c10a:	2d80      	cmp	r5, #128	@ 0x80
3401c10c:	d0e2      	beq.n	3401c0d4 <UART_WaitOnFlagUntilTimeout+0x10>
3401c10e:	2d40      	cmp	r5, #64	@ 0x40
3401c110:	d0e0      	beq.n	3401c0d4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3401c112:	69ce      	ldr	r6, [r1, #28]
3401c114:	f016 0608 	ands.w	r6, r6, #8
3401c118:	d00c      	beq.n	3401c134 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401c11a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
3401c11c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3401c11e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3401c120:	f7ff fd10 	bl	3401bb44 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
3401c124:	2300      	movs	r3, #0
          return HAL_ERROR;
3401c126:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
3401c128:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
3401c12c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3401c130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3401c134:	69cb      	ldr	r3, [r1, #28]
3401c136:	051b      	lsls	r3, r3, #20
3401c138:	d5cc      	bpl.n	3401c0d4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401c13a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
3401c13e:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3401c140:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
3401c142:	f7ff fcff 	bl	3401bb44 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401c146:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
3401c148:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
3401c14c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
3401c150:	2003      	movs	r0, #3
3401c152:	e7ed      	b.n	3401c130 <UART_WaitOnFlagUntilTimeout+0x6c>

3401c154 <HAL_UART_Transmit>:
{
3401c154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3401c158:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
3401c15a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
3401c15e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
3401c160:	2b20      	cmp	r3, #32
{
3401c162:	460d      	mov	r5, r1
3401c164:	4616      	mov	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
3401c166:	d148      	bne.n	3401c1fa <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
3401c168:	2900      	cmp	r1, #0
3401c16a:	d048      	beq.n	3401c1fe <HAL_UART_Transmit+0xaa>
3401c16c:	2a00      	cmp	r2, #0
3401c16e:	d046      	beq.n	3401c1fe <HAL_UART_Transmit+0xaa>
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401c170:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
3401c172:	f04f 0900 	mov.w	r9, #0
3401c176:	f8c0 9090 	str.w	r9, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3401c17a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
3401c17e:	f002 fcbf 	bl	3401eb00 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401c182:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
3401c184:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401c188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
3401c18c:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
3401c190:	4607      	mov	r7, r0
      pdata16bits = NULL;
3401c192:	464e      	mov	r6, r9
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3401c194:	d103      	bne.n	3401c19e <HAL_UART_Transmit+0x4a>
3401c196:	6923      	ldr	r3, [r4, #16]
3401c198:	b90b      	cbnz	r3, 3401c19e <HAL_UART_Transmit+0x4a>
      pdata16bits = (const uint16_t *) pData;
3401c19a:	462e      	mov	r6, r5
      pdata8bits  = NULL;
3401c19c:	461d      	mov	r5, r3
    while (huart->TxXferCount > 0U)
3401c19e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401c1a2:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
3401c1a4:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401c1a6:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
3401c1aa:	b942      	cbnz	r2, 3401c1be <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3401c1ac:	2140      	movs	r1, #64	@ 0x40
3401c1ae:	4620      	mov	r0, r4
3401c1b0:	f7ff ff88 	bl	3401c0c4 <UART_WaitOnFlagUntilTimeout>
3401c1b4:	2320      	movs	r3, #32
3401c1b6:	b948      	cbnz	r0, 3401c1cc <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
3401c1b8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
3401c1bc:	e009      	b.n	3401c1d2 <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3401c1be:	2200      	movs	r2, #0
3401c1c0:	2180      	movs	r1, #128	@ 0x80
3401c1c2:	4620      	mov	r0, r4
3401c1c4:	f7ff ff7e 	bl	3401c0c4 <UART_WaitOnFlagUntilTimeout>
3401c1c8:	b130      	cbz	r0, 3401c1d8 <HAL_UART_Transmit+0x84>
        huart->gState = HAL_UART_STATE_READY;
3401c1ca:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
3401c1cc:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
3401c1ce:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
3401c1d2:	b003      	add	sp, #12
3401c1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3401c1d8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
3401c1da:	b95d      	cbnz	r5, 3401c1f4 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3401c1dc:	f836 3b02 	ldrh.w	r3, [r6], #2
3401c1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3401c1e4:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
3401c1e6:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
3401c1ea:	3a01      	subs	r2, #1
3401c1ec:	b292      	uxth	r2, r2
3401c1ee:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
3401c1f2:	e7d4      	b.n	3401c19e <HAL_UART_Transmit+0x4a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3401c1f4:	f815 3b01 	ldrb.w	r3, [r5], #1
3401c1f8:	e7f4      	b.n	3401c1e4 <HAL_UART_Transmit+0x90>
    return HAL_BUSY;
3401c1fa:	2002      	movs	r0, #2
3401c1fc:	e7e9      	b.n	3401c1d2 <HAL_UART_Transmit+0x7e>
      return  HAL_ERROR;
3401c1fe:	2001      	movs	r0, #1
3401c200:	e7e7      	b.n	3401c1d2 <HAL_UART_Transmit+0x7e>

3401c202 <UART_CheckIdleState>:
{
3401c202:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401c204:	2600      	movs	r6, #0
{
3401c206:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3401c208:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
3401c20c:	f002 fc78 	bl	3401eb00 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401c210:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
3401c212:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3401c214:	681b      	ldr	r3, [r3, #0]
3401c216:	071a      	lsls	r2, r3, #28
3401c218:	d51c      	bpl.n	3401c254 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401c21a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401c21e:	4632      	mov	r2, r6
3401c220:	9300      	str	r3, [sp, #0]
3401c222:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3401c226:	4603      	mov	r3, r0
3401c228:	4620      	mov	r0, r4
3401c22a:	f7ff ff4b 	bl	3401c0c4 <UART_WaitOnFlagUntilTimeout>
3401c22e:	b188      	cbz	r0, 3401c254 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3401c230:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401c232:	e852 3f00 	ldrex	r3, [r2]
3401c236:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401c23a:	e842 3100 	strex	r1, r3, [r2]
3401c23e:	2900      	cmp	r1, #0
3401c240:	d1f6      	bne.n	3401c230 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
3401c242:	2320      	movs	r3, #32
3401c244:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
3401c248:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
3401c24a:	2300      	movs	r3, #0
3401c24c:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3401c250:	b002      	add	sp, #8
3401c252:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3401c254:	6823      	ldr	r3, [r4, #0]
3401c256:	681b      	ldr	r3, [r3, #0]
3401c258:	075b      	lsls	r3, r3, #29
3401c25a:	d524      	bpl.n	3401c2a6 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3401c25c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3401c260:	2200      	movs	r2, #0
3401c262:	9300      	str	r3, [sp, #0]
3401c264:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3401c268:	462b      	mov	r3, r5
3401c26a:	4620      	mov	r0, r4
3401c26c:	f7ff ff2a 	bl	3401c0c4 <UART_WaitOnFlagUntilTimeout>
3401c270:	b1c8      	cbz	r0, 3401c2a6 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3401c272:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401c274:	e852 3f00 	ldrex	r3, [r2]
3401c278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401c27c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3401c280:	6822      	ldr	r2, [r4, #0]
3401c282:	2900      	cmp	r1, #0
3401c284:	d1f5      	bne.n	3401c272 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3401c286:	f102 0308 	add.w	r3, r2, #8
3401c28a:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3401c28e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3401c292:	f102 0008 	add.w	r0, r2, #8
3401c296:	e840 3100 	strex	r1, r3, [r0]
3401c29a:	2900      	cmp	r1, #0
3401c29c:	d1f3      	bne.n	3401c286 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3401c29e:	2320      	movs	r3, #32
3401c2a0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
3401c2a4:	e7d0      	b.n	3401c248 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
3401c2a6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401c2a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
3401c2aa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3401c2ae:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3401c2b2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3401c2b4:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
3401c2b6:	e7c8      	b.n	3401c24a <UART_CheckIdleState+0x48>

3401c2b8 <HAL_UART_Init>:
{
3401c2b8:	b510      	push	{r4, lr}
  if (huart == NULL)
3401c2ba:	4604      	mov	r4, r0
3401c2bc:	2800      	cmp	r0, #0
3401c2be:	f000 80d0 	beq.w	3401c462 <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401c2c2:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401c2c4:	6803      	ldr	r3, [r0, #0]
3401c2c6:	4a68      	ldr	r2, [pc, #416]	@ (3401c468 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
3401c2c8:	2900      	cmp	r1, #0
3401c2ca:	d07c      	beq.n	3401c3c6 <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3401c2cc:	4293      	cmp	r3, r2
3401c2ce:	d04e      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2d0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c2d4:	4293      	cmp	r3, r2
3401c2d6:	d04a      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2d8:	4a64      	ldr	r2, [pc, #400]	@ (3401c46c <HAL_UART_Init+0x1b4>)
3401c2da:	4293      	cmp	r3, r2
3401c2dc:	d047      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c2e2:	4293      	cmp	r3, r2
3401c2e4:	d043      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2e6:	4a62      	ldr	r2, [pc, #392]	@ (3401c470 <HAL_UART_Init+0x1b8>)
3401c2e8:	4293      	cmp	r3, r2
3401c2ea:	d040      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2ec:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c2f0:	4293      	cmp	r3, r2
3401c2f2:	d03c      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2f4:	4a5f      	ldr	r2, [pc, #380]	@ (3401c474 <HAL_UART_Init+0x1bc>)
3401c2f6:	4293      	cmp	r3, r2
3401c2f8:	d039      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c2fa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c2fe:	4293      	cmp	r3, r2
3401c300:	d035      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c302:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401c306:	d032      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c308:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401c30c:	4293      	cmp	r3, r2
3401c30e:	d02e      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c310:	4a59      	ldr	r2, [pc, #356]	@ (3401c478 <HAL_UART_Init+0x1c0>)
3401c312:	4293      	cmp	r3, r2
3401c314:	d02b      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c316:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c31a:	4293      	cmp	r3, r2
3401c31c:	d027      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c31e:	4a57      	ldr	r2, [pc, #348]	@ (3401c47c <HAL_UART_Init+0x1c4>)
3401c320:	4293      	cmp	r3, r2
3401c322:	d024      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c324:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c328:	4293      	cmp	r3, r2
3401c32a:	d020      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c32c:	4a54      	ldr	r2, [pc, #336]	@ (3401c480 <HAL_UART_Init+0x1c8>)
3401c32e:	4293      	cmp	r3, r2
3401c330:	d01d      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c332:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c336:	4293      	cmp	r3, r2
3401c338:	d019      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c33a:	4a52      	ldr	r2, [pc, #328]	@ (3401c484 <HAL_UART_Init+0x1cc>)
3401c33c:	4293      	cmp	r3, r2
3401c33e:	d016      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c340:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c344:	4293      	cmp	r3, r2
3401c346:	d012      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c348:	4a4f      	ldr	r2, [pc, #316]	@ (3401c488 <HAL_UART_Init+0x1d0>)
3401c34a:	4293      	cmp	r3, r2
3401c34c:	d00f      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c34e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c352:	4293      	cmp	r3, r2
3401c354:	d00b      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c356:	4a4d      	ldr	r2, [pc, #308]	@ (3401c48c <HAL_UART_Init+0x1d4>)
3401c358:	4293      	cmp	r3, r2
3401c35a:	d008      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c35c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c360:	4293      	cmp	r3, r2
3401c362:	d004      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c364:	f44f 71a0 	mov.w	r1, #320	@ 0x140
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401c368:	4849      	ldr	r0, [pc, #292]	@ (3401c490 <HAL_UART_Init+0x1d8>)
3401c36a:	f002 fef9 	bl	3401f160 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3401c36e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
3401c372:	b923      	cbnz	r3, 3401c37e <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
3401c374:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
3401c376:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3401c37a:	f7ff fc0f 	bl	3401bb9c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3401c37e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
3401c380:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3401c382:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
3401c386:	6813      	ldr	r3, [r2, #0]
3401c388:	f023 0301 	bic.w	r3, r3, #1
3401c38c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3401c38e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401c390:	b113      	cbz	r3, 3401c398 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
3401c392:	4620      	mov	r0, r4
3401c394:	f7ff fd7e 	bl	3401be94 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
3401c398:	4620      	mov	r0, r4
3401c39a:	f7ff fc01 	bl	3401bba0 <UART_SetConfig>
3401c39e:	2801      	cmp	r0, #1
3401c3a0:	d05f      	beq.n	3401c462 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3401c3a2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
3401c3a4:	4620      	mov	r0, r4
}
3401c3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3401c3aa:	685a      	ldr	r2, [r3, #4]
3401c3ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3401c3b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3401c3b2:	689a      	ldr	r2, [r3, #8]
3401c3b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3401c3b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3401c3ba:	681a      	ldr	r2, [r3, #0]
3401c3bc:	f042 0201 	orr.w	r2, r2, #1
3401c3c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
3401c3c2:	f7ff bf1e 	b.w	3401c202 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
3401c3c6:	4293      	cmp	r3, r2
3401c3c8:	d0d1      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3ca:	4a32      	ldr	r2, [pc, #200]	@ (3401c494 <HAL_UART_Init+0x1dc>)
3401c3cc:	4293      	cmp	r3, r2
3401c3ce:	d0ce      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3d0:	4a26      	ldr	r2, [pc, #152]	@ (3401c46c <HAL_UART_Init+0x1b4>)
3401c3d2:	4293      	cmp	r3, r2
3401c3d4:	d0cb      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3d6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c3da:	4293      	cmp	r3, r2
3401c3dc:	d0c7      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3de:	4a24      	ldr	r2, [pc, #144]	@ (3401c470 <HAL_UART_Init+0x1b8>)
3401c3e0:	4293      	cmp	r3, r2
3401c3e2:	d0c4      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3e4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c3e8:	4293      	cmp	r3, r2
3401c3ea:	d0c0      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3ec:	4a21      	ldr	r2, [pc, #132]	@ (3401c474 <HAL_UART_Init+0x1bc>)
3401c3ee:	4293      	cmp	r3, r2
3401c3f0:	d0bd      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3f2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c3f6:	4293      	cmp	r3, r2
3401c3f8:	d0b9      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c3fa:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3401c3fe:	d0b6      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c400:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
3401c404:	4293      	cmp	r3, r2
3401c406:	d0b2      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c408:	4a1b      	ldr	r2, [pc, #108]	@ (3401c478 <HAL_UART_Init+0x1c0>)
3401c40a:	4293      	cmp	r3, r2
3401c40c:	d0af      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c40e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c412:	4293      	cmp	r3, r2
3401c414:	d0ab      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c416:	4a19      	ldr	r2, [pc, #100]	@ (3401c47c <HAL_UART_Init+0x1c4>)
3401c418:	4293      	cmp	r3, r2
3401c41a:	d0a8      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c41c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c420:	4293      	cmp	r3, r2
3401c422:	d0a4      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c424:	4a16      	ldr	r2, [pc, #88]	@ (3401c480 <HAL_UART_Init+0x1c8>)
3401c426:	4293      	cmp	r3, r2
3401c428:	d0a1      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c42a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c42e:	4293      	cmp	r3, r2
3401c430:	d09d      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c432:	4a14      	ldr	r2, [pc, #80]	@ (3401c484 <HAL_UART_Init+0x1cc>)
3401c434:	4293      	cmp	r3, r2
3401c436:	d09a      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c438:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c43c:	4293      	cmp	r3, r2
3401c43e:	d096      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c440:	4a11      	ldr	r2, [pc, #68]	@ (3401c488 <HAL_UART_Init+0x1d0>)
3401c442:	4293      	cmp	r3, r2
3401c444:	d093      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c446:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c44a:	4293      	cmp	r3, r2
3401c44c:	d08f      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c44e:	4a0f      	ldr	r2, [pc, #60]	@ (3401c48c <HAL_UART_Init+0x1d4>)
3401c450:	4293      	cmp	r3, r2
3401c452:	d08c      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c454:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c458:	4293      	cmp	r3, r2
3401c45a:	d088      	beq.n	3401c36e <HAL_UART_Init+0xb6>
3401c45c:	f240 1145 	movw	r1, #325	@ 0x145
3401c460:	e782      	b.n	3401c368 <HAL_UART_Init+0xb0>
}
3401c462:	2001      	movs	r0, #1
3401c464:	bd10      	pop	{r4, pc}
3401c466:	bf00      	nop
3401c468:	52001000 	.word	0x52001000
3401c46c:	50004400 	.word	0x50004400
3401c470:	50004800 	.word	0x50004800
3401c474:	50004c00 	.word	0x50004c00
3401c478:	52001400 	.word	0x52001400
3401c47c:	50007800 	.word	0x50007800
3401c480:	50007c00 	.word	0x50007c00
3401c484:	52001800 	.word	0x52001800
3401c488:	52001c00 	.word	0x52001c00
3401c48c:	56000c00 	.word	0x56000c00
3401c490:	3402bea7 	.word	0x3402bea7
3401c494:	42001000 	.word	0x42001000

3401c498 <XSPI_ConfigCmd>:
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401c498:	6802      	ldr	r2, [r0, #0]
{
3401c49a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401c49e:	6813      	ldr	r3, [r2, #0]
{
3401c4a0:	4606      	mov	r6, r0
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3401c4a2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401c4a6:	6013      	str	r3, [r2, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401c4a8:	6883      	ldr	r3, [r0, #8]
{
3401c4aa:	460c      	mov	r4, r1
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401c4ac:	b97b      	cbnz	r3, 3401c4ce <XSPI_ConfigCmd+0x36>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401c4ae:	684b      	ldr	r3, [r1, #4]
3401c4b0:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3401c4b4:	d004      	beq.n	3401c4c0 <XSPI_ConfigCmd+0x28>
3401c4b6:	f640 41a4 	movw	r1, #3236	@ 0xca4
3401c4ba:	4876      	ldr	r0, [pc, #472]	@ (3401c694 <XSPI_ConfigCmd+0x1fc>)
3401c4bc:	f002 fe50 	bl	3401f160 <assert_failed>
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3401c4c0:	6832      	ldr	r2, [r6, #0]
3401c4c2:	6861      	ldr	r1, [r4, #4]
3401c4c4:	6813      	ldr	r3, [r2, #0]
3401c4c6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
3401c4ca:	430b      	orrs	r3, r1
3401c4cc:	6013      	str	r3, [r2, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401c4ce:	6823      	ldr	r3, [r4, #0]
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3401c4d0:	6831      	ldr	r1, [r6, #0]
  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401c4d2:	2b02      	cmp	r3, #2
3401c4d4:	d158      	bne.n	3401c588 <XSPI_ConfigCmd+0xf0>
    ccr_reg = &(hxspi->Instance->WCCR);
3401c4d6:	f501 72c0 	add.w	r2, r1, #384	@ 0x180
    tcr_reg = &(hxspi->Instance->WTCR);
3401c4da:	f501 70c4 	add.w	r0, r1, #392	@ 0x188
    ir_reg  = &(hxspi->Instance->WIR);
3401c4de:	f501 75c8 	add.w	r5, r1, #400	@ 0x190
    abr_reg = &(hxspi->Instance->WABR);
3401c4e2:	f501 73d0 	add.w	r3, r1, #416	@ 0x1a0
    ir_reg  = &(hxspi->Instance->IR);
    abr_reg = &(hxspi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3401c4e6:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
3401c4e8:	6017      	str	r7, [r2, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401c4ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
3401c4ec:	b167      	cbz	r7, 3401c508 <XSPI_ConfigCmd+0x70>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3401c4ee:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3401c4f0:	601f      	str	r7, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3401c4f2:	6b67      	ldr	r7, [r4, #52]	@ 0x34
3401c4f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401c4f6:	f8d2 c000 	ldr.w	ip, [r2]
3401c4fa:	433b      	orrs	r3, r7
3401c4fc:	6b27      	ldr	r7, [r4, #48]	@ 0x30
3401c4fe:	433b      	orrs	r3, r7
3401c500:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
3401c504:	433b      	orrs	r3, r7
3401c506:	6013      	str	r3, [r2, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3401c508:	6803      	ldr	r3, [r0, #0]
3401c50a:	6c67      	ldr	r7, [r4, #68]	@ 0x44
3401c50c:	f023 031f 	bic.w	r3, r3, #31
3401c510:	433b      	orrs	r3, r7
3401c512:	6003      	str	r3, [r0, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401c514:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
3401c518:	f1be 0f00 	cmp.w	lr, #0
3401c51c:	d00e      	beq.n	3401c53c <XSPI_ConfigCmd+0xa4>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401c51e:	6823      	ldr	r3, [r4, #0]
3401c520:	b913      	cbnz	r3, 3401c528 <XSPI_ConfigCmd+0x90>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3401c522:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401c524:	3b01      	subs	r3, #1
3401c526:	640b      	str	r3, [r1, #64]	@ 0x40
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3401c528:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401c52a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3401c52e:	d13f      	bne.n	3401c5b0 <XSPI_ConfigCmd+0x118>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401c530:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3401c534:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401c538:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401c53c:	68e3      	ldr	r3, [r4, #12]
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401c53e:	f8d4 901c 	ldr.w	r9, [r4, #28]
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401c542:	2b00      	cmp	r3, #0
3401c544:	f000 8083 	beq.w	3401c64e <XSPI_ConfigCmd+0x1b6>
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401c548:	e9d4 c804 	ldrd	ip, r8, [r4, #16]
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401c54c:	f1b9 0f00 	cmp.w	r9, #0
3401c550:	d053      	beq.n	3401c5fa <XSPI_ConfigCmd+0x162>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401c552:	e9d4 0708 	ldrd	r0, r7, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401c556:	f1be 0f00 	cmp.w	lr, #0
3401c55a:	d032      	beq.n	3401c5c2 <XSPI_ConfigCmd+0x12a>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401c55c:	ea4e 0303 	orr.w	r3, lr, r3
3401c560:	ea43 0309 	orr.w	r3, r3, r9
3401c564:	ea43 0308 	orr.w	r3, r3, r8
3401c568:	ea43 030c 	orr.w	r3, r3, ip
3401c56c:	433b      	orrs	r3, r7
3401c56e:	4303      	orrs	r3, r0
3401c570:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401c572:	6816      	ldr	r6, [r2, #0]
3401c574:	4303      	orrs	r3, r0
3401c576:	4848      	ldr	r0, [pc, #288]	@ (3401c698 <XSPI_ConfigCmd+0x200>)
3401c578:	4030      	ands	r0, r6
3401c57a:	4303      	orrs	r3, r0

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401c57c:	6013      	str	r3, [r2, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3401c57e:	68a3      	ldr	r3, [r4, #8]
3401c580:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3401c582:	69a3      	ldr	r3, [r4, #24]
3401c584:	648b      	str	r3, [r1, #72]	@ 0x48
3401c586:	e04c      	b.n	3401c622 <XSPI_ConfigCmd+0x18a>
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3401c588:	2b03      	cmp	r3, #3
    ccr_reg = &(hxspi->Instance->WPCCR);
3401c58a:	bf01      	itttt	eq
3401c58c:	f501 72a0 	addeq.w	r2, r1, #320	@ 0x140
    tcr_reg = &(hxspi->Instance->WPTCR);
3401c590:	f501 70a4 	addeq.w	r0, r1, #328	@ 0x148
    ir_reg  = &(hxspi->Instance->WPIR);
3401c594:	f501 75a8 	addeq.w	r5, r1, #336	@ 0x150
    abr_reg = &(hxspi->Instance->WPABR);
3401c598:	f501 73b0 	addeq.w	r3, r1, #352	@ 0x160
    ccr_reg = &(hxspi->Instance->CCR);
3401c59c:	bf1f      	itttt	ne
3401c59e:	f501 7280 	addne.w	r2, r1, #256	@ 0x100
    tcr_reg = &(hxspi->Instance->TCR);
3401c5a2:	f501 7084 	addne.w	r0, r1, #264	@ 0x108
    ir_reg  = &(hxspi->Instance->IR);
3401c5a6:	f501 7588 	addne.w	r5, r1, #272	@ 0x110
    abr_reg = &(hxspi->Instance->ABR);
3401c5aa:	f501 7390 	addne.w	r3, r1, #288	@ 0x120
3401c5ae:	e79a      	b.n	3401c4e6 <XSPI_ConfigCmd+0x4e>
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3401c5b0:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3401c5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3401c5b6:	d1c1      	bne.n	3401c53c <XSPI_ConfigCmd+0xa4>
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3401c5b8:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
3401c5bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
3401c5c0:	e7ba      	b.n	3401c538 <XSPI_ConfigCmd+0xa0>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401c5c2:	ea43 0309 	orr.w	r3, r3, r9
3401c5c6:	f8d2 e000 	ldr.w	lr, [r2]
3401c5ca:	ea43 0308 	orr.w	r3, r3, r8
3401c5ce:	ea43 030c 	orr.w	r3, r3, ip
3401c5d2:	433b      	orrs	r3, r7
3401c5d4:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
3401c5d8:	4303      	orrs	r3, r0
3401c5da:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
3401c5de:	ea43 030e 	orr.w	r3, r3, lr
3401c5e2:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3401c5e4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3401c5e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401c5ea:	d1c8      	bne.n	3401c57e <XSPI_ConfigCmd+0xe6>
3401c5ec:	6963      	ldr	r3, [r4, #20]
3401c5ee:	2b08      	cmp	r3, #8
3401c5f0:	d1c5      	bne.n	3401c57e <XSPI_ConfigCmd+0xe6>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401c5f2:	6813      	ldr	r3, [r2, #0]
3401c5f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401c5f8:	e7c0      	b.n	3401c57c <XSPI_ConfigCmd+0xe4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3401c5fa:	6811      	ldr	r1, [r2, #0]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401c5fc:	f1be 0f00 	cmp.w	lr, #0
3401c600:	d012      	beq.n	3401c628 <XSPI_ConfigCmd+0x190>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3401c602:	ea4e 0303 	orr.w	r3, lr, r3
3401c606:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401c608:	ea43 0308 	orr.w	r3, r3, r8
3401c60c:	ea43 030c 	orr.w	r3, r3, ip
3401c610:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
3401c614:	4303      	orrs	r3, r0
3401c616:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3401c61a:	430b      	orrs	r3, r1
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401c61c:	6013      	str	r3, [r2, #0]
      *ir_reg = pCmd->Instruction;
3401c61e:	68a3      	ldr	r3, [r4, #8]
3401c620:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
3401c622:	2000      	movs	r0, #0
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
    }
  }

  return status;
}
3401c624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3401c628:	ea43 0308 	orr.w	r3, r3, r8
3401c62c:	ea43 030c 	orr.w	r3, r3, ip
3401c630:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
3401c634:	430b      	orrs	r3, r1
3401c636:	6013      	str	r3, [r2, #0]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3401c638:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
3401c63a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3401c63e:	d1ee      	bne.n	3401c61e <XSPI_ConfigCmd+0x186>
3401c640:	6963      	ldr	r3, [r4, #20]
3401c642:	2b08      	cmp	r3, #8
3401c644:	d1eb      	bne.n	3401c61e <XSPI_ConfigCmd+0x186>
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3401c646:	6813      	ldr	r3, [r2, #0]
3401c648:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
3401c64c:	e7e6      	b.n	3401c61c <XSPI_ConfigCmd+0x184>
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401c64e:	f1b9 0f00 	cmp.w	r9, #0
3401c652:	d01b      	beq.n	3401c68c <XSPI_ConfigCmd+0x1f4>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3401c654:	e9d4 6008 	ldrd	r6, r0, [r4, #32]
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401c658:	f1be 0f00 	cmp.w	lr, #0
3401c65c:	d00d      	beq.n	3401c67a <XSPI_ConfigCmd+0x1e2>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3401c65e:	ea4e 0309 	orr.w	r3, lr, r9
3401c662:	6815      	ldr	r5, [r2, #0]
3401c664:	4303      	orrs	r3, r0
3401c666:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3401c668:	4333      	orrs	r3, r6
3401c66a:	4303      	orrs	r3, r0
3401c66c:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
3401c670:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
3401c674:	4303      	orrs	r3, r0
3401c676:	6013      	str	r3, [r2, #0]
3401c678:	e783      	b.n	3401c582 <XSPI_ConfigCmd+0xea>
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3401c67a:	6813      	ldr	r3, [r2, #0]
3401c67c:	ea40 0009 	orr.w	r0, r0, r9
3401c680:	4330      	orrs	r0, r6
3401c682:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401c686:	4318      	orrs	r0, r3
3401c688:	6010      	str	r0, [r2, #0]
3401c68a:	e77a      	b.n	3401c582 <XSPI_ConfigCmd+0xea>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401c68c:	2308      	movs	r3, #8
      status = HAL_ERROR;
3401c68e:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401c690:	65f3      	str	r3, [r6, #92]	@ 0x5c
3401c692:	e7c7      	b.n	3401c624 <XSPI_ConfigCmd+0x18c>
3401c694:	3402bf08 	.word	0x3402bf08
3401c698:	f0ffc0c0 	.word	0xf0ffc0c0

3401c69c <XSPI_WaitFlagStateUntilTimeout>:
{
3401c69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401c6a0:	4604      	mov	r4, r0
3401c6a2:	460e      	mov	r6, r1
3401c6a4:	4615      	mov	r5, r2
3401c6a6:	461f      	mov	r7, r3
3401c6a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3401c6ac:	6822      	ldr	r2, [r4, #0]
3401c6ae:	6a13      	ldr	r3, [r2, #32]
3401c6b0:	4233      	tst	r3, r6
3401c6b2:	bf14      	ite	ne
3401c6b4:	2301      	movne	r3, #1
3401c6b6:	2300      	moveq	r3, #0
3401c6b8:	42ab      	cmp	r3, r5
3401c6ba:	d101      	bne.n	3401c6c0 <XSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
3401c6bc:	2000      	movs	r0, #0
3401c6be:	e00e      	b.n	3401c6de <XSPI_WaitFlagStateUntilTimeout+0x42>
    if (Timeout != HAL_MAX_DELAY)
3401c6c0:	f1b8 3fff 	cmp.w	r8, #4294967295
3401c6c4:	d0f3      	beq.n	3401c6ae <XSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401c6c6:	f002 fa1b 	bl	3401eb00 <HAL_GetTick>
3401c6ca:	1bc0      	subs	r0, r0, r7
3401c6cc:	4540      	cmp	r0, r8
3401c6ce:	d908      	bls.n	3401c6e2 <XSPI_WaitFlagStateUntilTimeout+0x46>
        hxspi->State     = HAL_XSPI_STATE_READY;
3401c6d0:	2302      	movs	r3, #2
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401c6d2:	2003      	movs	r0, #3
        hxspi->State     = HAL_XSPI_STATE_READY;
3401c6d4:	65a3      	str	r3, [r4, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3401c6d6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
3401c6d8:	f043 0301 	orr.w	r3, r3, #1
3401c6dc:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
3401c6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3401c6e2:	f1b8 0f00 	cmp.w	r8, #0
3401c6e6:	d1e1      	bne.n	3401c6ac <XSPI_WaitFlagStateUntilTimeout+0x10>
3401c6e8:	e7f2      	b.n	3401c6d0 <XSPI_WaitFlagStateUntilTimeout+0x34>

3401c6ea <HAL_XSPI_MspInit>:
}
3401c6ea:	4770      	bx	lr

3401c6ec <HAL_XSPI_Init>:
{
3401c6ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401c6ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
3401c6f0:	f002 fa06 	bl	3401eb00 <HAL_GetTick>
3401c6f4:	4606      	mov	r6, r0
  if (hxspi == NULL)
3401c6f6:	2c00      	cmp	r4, #0
3401c6f8:	f000 812a 	beq.w	3401c950 <HAL_XSPI_Init+0x264>
    assert_param(IS_XSPI_MEMORY_MODE(hxspi->Init.MemoryMode));
3401c6fc:	68a3      	ldr	r3, [r4, #8]
3401c6fe:	f033 0340 	bics.w	r3, r3, #64	@ 0x40
3401c702:	d004      	beq.n	3401c70e <HAL_XSPI_Init+0x22>
3401c704:	f240 1161 	movw	r1, #353	@ 0x161
3401c708:	4892      	ldr	r0, [pc, #584]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c70a:	f002 fd29 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_MEMORY_TYPE(hxspi->Init.MemoryType));
3401c70e:	68e3      	ldr	r3, [r4, #12]
3401c710:	f033 7240 	bics.w	r2, r3, #50331648	@ 0x3000000
3401c714:	d009      	beq.n	3401c72a <HAL_XSPI_Init+0x3e>
3401c716:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
3401c71a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401c71e:	d004      	beq.n	3401c72a <HAL_XSPI_Init+0x3e>
3401c720:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3401c724:	488b      	ldr	r0, [pc, #556]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c726:	f002 fd1b 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_MEMORY_SIZE(hxspi->Init.MemorySize));
3401c72a:	6923      	ldr	r3, [r4, #16]
3401c72c:	2b1f      	cmp	r3, #31
3401c72e:	d904      	bls.n	3401c73a <HAL_XSPI_Init+0x4e>
3401c730:	f240 1163 	movw	r1, #355	@ 0x163
3401c734:	4887      	ldr	r0, [pc, #540]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c736:	f002 fd13 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_CS_HIGH_TIME_CYCLE(hxspi->Init.ChipSelectHighTimeCycle));
3401c73a:	6963      	ldr	r3, [r4, #20]
3401c73c:	3b01      	subs	r3, #1
3401c73e:	2b3f      	cmp	r3, #63	@ 0x3f
3401c740:	d904      	bls.n	3401c74c <HAL_XSPI_Init+0x60>
3401c742:	f44f 71b2 	mov.w	r1, #356	@ 0x164
3401c746:	4883      	ldr	r0, [pc, #524]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c748:	f002 fd0a 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_FREE_RUN_CLK(hxspi->Init.FreeRunningClock));
3401c74c:	69a3      	ldr	r3, [r4, #24]
3401c74e:	f033 0302 	bics.w	r3, r3, #2
3401c752:	d004      	beq.n	3401c75e <HAL_XSPI_Init+0x72>
3401c754:	f240 1165 	movw	r1, #357	@ 0x165
3401c758:	487e      	ldr	r0, [pc, #504]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c75a:	f002 fd01 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_CLOCK_MODE(hxspi->Init.ClockMode));
3401c75e:	69e3      	ldr	r3, [r4, #28]
3401c760:	2b01      	cmp	r3, #1
3401c762:	d904      	bls.n	3401c76e <HAL_XSPI_Init+0x82>
3401c764:	f44f 71b3 	mov.w	r1, #358	@ 0x166
3401c768:	487a      	ldr	r0, [pc, #488]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c76a:	f002 fcf9 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_WRAP_SIZE(hxspi->Init.WrapSize));
3401c76e:	6a23      	ldr	r3, [r4, #32]
3401c770:	f433 3200 	bics.w	r2, r3, #131072	@ 0x20000
3401c774:	d00c      	beq.n	3401c790 <HAL_XSPI_Init+0xa4>
3401c776:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3401c77a:	d009      	beq.n	3401c790 <HAL_XSPI_Init+0xa4>
3401c77c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3401c780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401c784:	d004      	beq.n	3401c790 <HAL_XSPI_Init+0xa4>
3401c786:	f240 1167 	movw	r1, #359	@ 0x167
3401c78a:	4872      	ldr	r0, [pc, #456]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c78c:	f002 fce8 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_CLK_PRESCALER(hxspi->Init.ClockPrescaler));
3401c790:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401c792:	2bff      	cmp	r3, #255	@ 0xff
3401c794:	d904      	bls.n	3401c7a0 <HAL_XSPI_Init+0xb4>
3401c796:	f44f 71b4 	mov.w	r1, #360	@ 0x168
3401c79a:	486e      	ldr	r0, [pc, #440]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c79c:	f002 fce0 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_SAMPLE_SHIFTING(hxspi->Init.SampleShifting));
3401c7a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3401c7a2:	f033 4380 	bics.w	r3, r3, #1073741824	@ 0x40000000
3401c7a6:	d004      	beq.n	3401c7b2 <HAL_XSPI_Init+0xc6>
3401c7a8:	f240 1169 	movw	r1, #361	@ 0x169
3401c7ac:	4869      	ldr	r0, [pc, #420]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c7ae:	f002 fcd7 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_DHQC(hxspi->Init.DelayHoldQuarterCycle));
3401c7b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401c7b4:	f033 5380 	bics.w	r3, r3, #268435456	@ 0x10000000
3401c7b8:	d004      	beq.n	3401c7c4 <HAL_XSPI_Init+0xd8>
3401c7ba:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
3401c7be:	4865      	ldr	r0, [pc, #404]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c7c0:	f002 fcce 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
3401c7c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401c7c6:	2b1f      	cmp	r3, #31
3401c7c8:	d904      	bls.n	3401c7d4 <HAL_XSPI_Init+0xe8>
3401c7ca:	f240 116b 	movw	r1, #363	@ 0x16b
3401c7ce:	4861      	ldr	r0, [pc, #388]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c7d0:	f002 fcc6 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
3401c7d4:	6863      	ldr	r3, [r4, #4]
3401c7d6:	3b01      	subs	r3, #1
3401c7d8:	2b3f      	cmp	r3, #63	@ 0x3f
3401c7da:	d904      	bls.n	3401c7e6 <HAL_XSPI_Init+0xfa>
3401c7dc:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
3401c7e0:	485c      	ldr	r0, [pc, #368]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c7e2:	f002 fcbd 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
3401c7e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401c7e8:	2bff      	cmp	r3, #255	@ 0xff
3401c7ea:	d904      	bls.n	3401c7f6 <HAL_XSPI_Init+0x10a>
3401c7ec:	f240 116d 	movw	r1, #365	@ 0x16d
3401c7f0:	4858      	ldr	r0, [pc, #352]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c7f2:	f002 fcb5 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
3401c7f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401c7f8:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
3401c7fc:	d004      	beq.n	3401c808 <HAL_XSPI_Init+0x11c>
3401c7fe:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
3401c802:	4854      	ldr	r0, [pc, #336]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c804:	f002 fcac 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
3401c808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401c80a:	f433 1300 	bics.w	r3, r3, #2097152	@ 0x200000
3401c80e:	d004      	beq.n	3401c81a <HAL_XSPI_Init+0x12e>
3401c810:	f240 116f 	movw	r1, #367	@ 0x16f
3401c814:	484f      	ldr	r0, [pc, #316]	@ (3401c954 <HAL_XSPI_Init+0x268>)
3401c816:	f002 fca3 	bl	3401f160 <assert_failed>
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3401c81a:	2300      	movs	r3, #0
3401c81c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3401c81e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
3401c820:	2f00      	cmp	r7, #0
3401c822:	f040 8087 	bne.w	3401c934 <HAL_XSPI_Init+0x248>
      HAL_XSPI_MspInit(hxspi);
3401c826:	4620      	mov	r0, r4
3401c828:	f7ff ff5f 	bl	3401c6ea <HAL_XSPI_MspInit>
  hxspi->Timeout = Timeout;
3401c82c:	f241 3288 	movw	r2, #5000	@ 0x1388
      MODIFY_REG(hxspi->Instance->DCR1,
3401c830:	69e3      	ldr	r3, [r4, #28]
3401c832:	68e5      	ldr	r5, [r4, #12]
3401c834:	6821      	ldr	r1, [r4, #0]
3401c836:	431d      	orrs	r5, r3
3401c838:	6923      	ldr	r3, [r4, #16]
3401c83a:	6888      	ldr	r0, [r1, #8]
3401c83c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
3401c840:	4b45      	ldr	r3, [pc, #276]	@ (3401c958 <HAL_XSPI_Init+0x26c>)
  hxspi->Timeout = Timeout;
3401c842:	6622      	str	r2, [r4, #96]	@ 0x60
      MODIFY_REG(hxspi->Instance->DCR1,
3401c844:	4003      	ands	r3, r0
3401c846:	431d      	orrs	r5, r3
3401c848:	6963      	ldr	r3, [r4, #20]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3401c84a:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hxspi->Instance->DCR1,
3401c84c:	3b01      	subs	r3, #1
3401c84e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
3401c852:	608d      	str	r5, [r1, #8]
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3401c854:	68cb      	ldr	r3, [r1, #12]
3401c856:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3401c85a:	4303      	orrs	r3, r0
3401c85c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3401c85e:	690b      	ldr	r3, [r1, #16]
3401c860:	6b20      	ldr	r0, [r4, #48]	@ 0x30
3401c862:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
3401c866:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3401c86a:	610b      	str	r3, [r1, #16]
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3401c86c:	690b      	ldr	r3, [r1, #16]
3401c86e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
3401c870:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3401c874:	4303      	orrs	r3, r0
3401c876:	610b      	str	r3, [r1, #16]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3401c878:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3401c87a:	6860      	ldr	r0, [r4, #4]
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3401c87c:	614b      	str	r3, [r1, #20]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3401c87e:	680b      	ldr	r3, [r1, #0]
3401c880:	3801      	subs	r0, #1
3401c882:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3401c886:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
3401c88a:	600b      	str	r3, [r1, #0]
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401c88c:	4620      	mov	r0, r4
3401c88e:	9200      	str	r2, [sp, #0]
3401c890:	4633      	mov	r3, r6
3401c892:	463a      	mov	r2, r7
3401c894:	2120      	movs	r1, #32
3401c896:	f7ff ff01 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3401c89a:	2800      	cmp	r0, #0
3401c89c:	d156      	bne.n	3401c94c <HAL_XSPI_Init+0x260>
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401c89e:	6823      	ldr	r3, [r4, #0]
3401c8a0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3401c8a2:	68da      	ldr	r2, [r3, #12]
3401c8a4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
3401c8a8:	430a      	orrs	r2, r1
3401c8aa:	60da      	str	r2, [r3, #12]
        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3401c8ac:	4a2b      	ldr	r2, [pc, #172]	@ (3401c95c <HAL_XSPI_Init+0x270>)
3401c8ae:	4293      	cmp	r3, r2
3401c8b0:	d042      	beq.n	3401c938 <HAL_XSPI_Init+0x24c>
3401c8b2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c8b6:	4293      	cmp	r3, r2
3401c8b8:	d03e      	beq.n	3401c938 <HAL_XSPI_Init+0x24c>
3401c8ba:	4a29      	ldr	r2, [pc, #164]	@ (3401c960 <HAL_XSPI_Init+0x274>)
3401c8bc:	4293      	cmp	r3, r2
3401c8be:	d03b      	beq.n	3401c938 <HAL_XSPI_Init+0x24c>
3401c8c0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c8c4:	4293      	cmp	r3, r2
3401c8c6:	d037      	beq.n	3401c938 <HAL_XSPI_Init+0x24c>
3401c8c8:	4a26      	ldr	r2, [pc, #152]	@ (3401c964 <HAL_XSPI_Init+0x278>)
3401c8ca:	4293      	cmp	r3, r2
3401c8cc:	d034      	beq.n	3401c938 <HAL_XSPI_Init+0x24c>
3401c8ce:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3401c8d2:	4293      	cmp	r3, r2
3401c8d4:	d030      	beq.n	3401c938 <HAL_XSPI_Init+0x24c>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3401c8d6:	6823      	ldr	r3, [r4, #0]
3401c8d8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
3401c8da:	6819      	ldr	r1, [r3, #0]
3401c8dc:	68a2      	ldr	r2, [r4, #8]
3401c8de:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3401c8e2:	4302      	orrs	r2, r0
3401c8e4:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
3401c8e8:	430a      	orrs	r2, r1
3401c8ea:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3401c8ec:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
3401c8f0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
3401c8f4:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
3401c8f8:	4302      	orrs	r2, r0
3401c8fa:	430a      	orrs	r2, r1
3401c8fc:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        HAL_XSPI_ENABLE(hxspi);
3401c900:	681a      	ldr	r2, [r3, #0]
3401c902:	f042 0201 	orr.w	r2, r2, #1
3401c906:	601a      	str	r2, [r3, #0]
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3401c908:	69a2      	ldr	r2, [r4, #24]
3401c90a:	2a02      	cmp	r2, #2
3401c90c:	d103      	bne.n	3401c916 <HAL_XSPI_Init+0x22a>
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3401c90e:	689a      	ldr	r2, [r3, #8]
3401c910:	f042 0202 	orr.w	r2, r2, #2
3401c914:	609a      	str	r2, [r3, #8]
        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3401c916:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3401c918:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3401c91c:	bf02      	ittt	eq
3401c91e:	689a      	ldreq	r2, [r3, #8]
3401c920:	f442 1200 	orreq.w	r2, r2, #2097152	@ 0x200000
3401c924:	609a      	streq	r2, [r3, #8]
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401c926:	68e3      	ldr	r3, [r4, #12]
3401c928:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3401c92c:	bf0c      	ite	eq
3401c92e:	2301      	moveq	r3, #1
          hxspi->State = HAL_XSPI_STATE_READY;
3401c930:	2302      	movne	r3, #2
3401c932:	65a3      	str	r3, [r4, #88]	@ 0x58
  HAL_StatusTypeDef status = HAL_OK;
3401c934:	2000      	movs	r0, #0
3401c936:	e009      	b.n	3401c94c <HAL_XSPI_Init+0x260>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401c938:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3401c93a:	2200      	movs	r2, #0
3401c93c:	9300      	str	r3, [sp, #0]
3401c93e:	2120      	movs	r1, #32
3401c940:	4633      	mov	r3, r6
3401c942:	4620      	mov	r0, r4
3401c944:	f7ff feaa 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
          if (status != HAL_OK)
3401c948:	2800      	cmp	r0, #0
3401c94a:	d0c4      	beq.n	3401c8d6 <HAL_XSPI_Init+0x1ea>
}
3401c94c:	b003      	add	sp, #12
3401c94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
3401c950:	2001      	movs	r0, #1
3401c952:	e7fb      	b.n	3401c94c <HAL_XSPI_Init+0x260>
3401c954:	3402bf08 	.word	0x3402bf08
3401c958:	f8e0c0fc 	.word	0xf8e0c0fc
3401c95c:	58025000 	.word	0x58025000
3401c960:	5802a000 	.word	0x5802a000
3401c964:	5802d000 	.word	0x5802d000

3401c968 <HAL_XSPI_Command>:
{
3401c968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401c96a:	460c      	mov	r4, r1
3401c96c:	4605      	mov	r5, r0
3401c96e:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3401c970:	f002 f8c6 	bl	3401eb00 <HAL_GetTick>
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3401c974:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401c976:	4606      	mov	r6, r0
  assert_param(IS_XSPI_OPERATION_TYPE(pCmd->OperationType));
3401c978:	2b03      	cmp	r3, #3
3401c97a:	d904      	bls.n	3401c986 <HAL_XSPI_Command+0x1e>
3401c97c:	f240 313e 	movw	r1, #830	@ 0x33e
3401c980:	4884      	ldr	r0, [pc, #528]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401c982:	f002 fbed 	bl	3401f160 <assert_failed>
  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3401c986:	68ab      	ldr	r3, [r5, #8]
3401c988:	b943      	cbnz	r3, 3401c99c <HAL_XSPI_Command+0x34>
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
3401c98a:	6863      	ldr	r3, [r4, #4]
3401c98c:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
3401c990:	d004      	beq.n	3401c99c <HAL_XSPI_Command+0x34>
3401c992:	f240 3141 	movw	r1, #833	@ 0x341
3401c996:	487f      	ldr	r0, [pc, #508]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401c998:	f002 fbe2 	bl	3401f160 <assert_failed>
  assert_param(IS_XSPI_INSTRUCTION_MODE(pCmd->InstructionMode));
3401c99c:	68e3      	ldr	r3, [r4, #12]
3401c99e:	2b04      	cmp	r3, #4
3401c9a0:	d904      	bls.n	3401c9ac <HAL_XSPI_Command+0x44>
3401c9a2:	f44f 7151 	mov.w	r1, #836	@ 0x344
3401c9a6:	487b      	ldr	r0, [pc, #492]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401c9a8:	f002 fbda 	bl	3401f160 <assert_failed>
  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3401c9ac:	68e3      	ldr	r3, [r4, #12]
3401c9ae:	b18b      	cbz	r3, 3401c9d4 <HAL_XSPI_Command+0x6c>
    assert_param(IS_XSPI_INSTRUCTION_WIDTH(pCmd->InstructionWidth));
3401c9b0:	6923      	ldr	r3, [r4, #16]
3401c9b2:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
3401c9b6:	d004      	beq.n	3401c9c2 <HAL_XSPI_Command+0x5a>
3401c9b8:	f240 3147 	movw	r1, #839	@ 0x347
3401c9bc:	4875      	ldr	r0, [pc, #468]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401c9be:	f002 fbcf 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_INSTRUCTION_DTR_MODE(pCmd->InstructionDTRMode));
3401c9c2:	6963      	ldr	r3, [r4, #20]
3401c9c4:	f033 0308 	bics.w	r3, r3, #8
3401c9c8:	d004      	beq.n	3401c9d4 <HAL_XSPI_Command+0x6c>
3401c9ca:	f44f 7152 	mov.w	r1, #840	@ 0x348
3401c9ce:	4871      	ldr	r0, [pc, #452]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401c9d0:	f002 fbc6 	bl	3401f160 <assert_failed>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3401c9d4:	69e3      	ldr	r3, [r4, #28]
3401c9d6:	b303      	cbz	r3, 3401ca1a <HAL_XSPI_Command+0xb2>
3401c9d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
3401c9dc:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
3401c9e0:	d10d      	bne.n	3401c9fe <HAL_XSPI_Command+0x96>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401c9e2:	6a23      	ldr	r3, [r4, #32]
3401c9e4:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
3401c9e8:	d12c      	bne.n	3401ca44 <HAL_XSPI_Command+0xdc>
    assert_param(IS_XSPI_ADDRESS_DTR_MODE(pCmd->AddressDTRMode));
3401c9ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3401c9ec:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
3401c9f0:	d013      	beq.n	3401ca1a <HAL_XSPI_Command+0xb2>
3401c9f2:	f240 314f 	movw	r1, #847	@ 0x34f
3401c9f6:	4867      	ldr	r0, [pc, #412]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401c9f8:	f002 fbb2 	bl	3401f160 <assert_failed>
3401c9fc:	e00d      	b.n	3401ca1a <HAL_XSPI_Command+0xb2>
  assert_param(IS_XSPI_ADDRESS_MODE(pCmd->AddressMode));
3401c9fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3401ca02:	d0ee      	beq.n	3401c9e2 <HAL_XSPI_Command+0x7a>
3401ca04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
3401ca08:	d0eb      	beq.n	3401c9e2 <HAL_XSPI_Command+0x7a>
3401ca0a:	f240 314b 	movw	r1, #843	@ 0x34b
3401ca0e:	4861      	ldr	r0, [pc, #388]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401ca10:	f002 fba6 	bl	3401f160 <assert_failed>
  if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3401ca14:	69e3      	ldr	r3, [r4, #28]
3401ca16:	2b00      	cmp	r3, #0
3401ca18:	d1e3      	bne.n	3401c9e2 <HAL_XSPI_Command+0x7a>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401ca1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401ca1c:	b333      	cbz	r3, 3401ca6c <HAL_XSPI_Command+0x104>
3401ca1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
3401ca22:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
3401ca26:	d113      	bne.n	3401ca50 <HAL_XSPI_Command+0xe8>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401ca28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
3401ca2a:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3401ca2e:	d13d      	bne.n	3401caac <HAL_XSPI_Command+0x144>
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
3401ca30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3401ca32:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
3401ca36:	d019      	beq.n	3401ca6c <HAL_XSPI_Command+0x104>
3401ca38:	f240 3156 	movw	r1, #854	@ 0x356
3401ca3c:	4855      	ldr	r0, [pc, #340]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401ca3e:	f002 fb8f 	bl	3401f160 <assert_failed>
3401ca42:	e013      	b.n	3401ca6c <HAL_XSPI_Command+0x104>
    assert_param(IS_XSPI_ADDRESS_WIDTH(pCmd->AddressWidth));
3401ca44:	f240 314e 	movw	r1, #846	@ 0x34e
3401ca48:	4852      	ldr	r0, [pc, #328]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401ca4a:	f002 fb89 	bl	3401f160 <assert_failed>
3401ca4e:	e7cc      	b.n	3401c9ea <HAL_XSPI_Command+0x82>
  assert_param(IS_XSPI_ALT_BYTES_MODE(pCmd->AlternateBytesMode));
3401ca50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3401ca54:	d0e8      	beq.n	3401ca28 <HAL_XSPI_Command+0xc0>
3401ca56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
3401ca5a:	d0e5      	beq.n	3401ca28 <HAL_XSPI_Command+0xc0>
3401ca5c:	f240 3152 	movw	r1, #850	@ 0x352
3401ca60:	484c      	ldr	r0, [pc, #304]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401ca62:	f002 fb7d 	bl	3401f160 <assert_failed>
  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3401ca66:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
3401ca68:	2b00      	cmp	r3, #0
3401ca6a:	d1dd      	bne.n	3401ca28 <HAL_XSPI_Command+0xc0>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3401ca6c:	68eb      	ldr	r3, [r5, #12]
3401ca6e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
3401ca70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401ca74:	d120      	bne.n	3401cab8 <HAL_XSPI_Command+0x150>
3401ca76:	b389      	cbz	r1, 3401cadc <HAL_XSPI_Command+0x174>
3401ca78:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
3401ca7c:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
3401ca80:	d124      	bne.n	3401cacc <HAL_XSPI_Command+0x164>
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401ca82:	6823      	ldr	r3, [r4, #0]
3401ca84:	2b00      	cmp	r3, #0
3401ca86:	d03d      	beq.n	3401cb04 <HAL_XSPI_Command+0x19c>
    assert_param(IS_XSPI_DATA_DTR_MODE(pCmd->DataDTRMode));
3401ca88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3401ca8a:	f033 6300 	bics.w	r3, r3, #134217728	@ 0x8000000
3401ca8e:	d004      	beq.n	3401ca9a <HAL_XSPI_Command+0x132>
3401ca90:	f240 3161 	movw	r1, #865	@ 0x361
3401ca94:	483f      	ldr	r0, [pc, #252]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401ca96:	f002 fb63 	bl	3401f160 <assert_failed>
    assert_param(IS_XSPI_DUMMY_CYCLES(pCmd->DummyCycles));
3401ca9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401ca9c:	2b1f      	cmp	r3, #31
3401ca9e:	d91d      	bls.n	3401cadc <HAL_XSPI_Command+0x174>
3401caa0:	f240 3162 	movw	r1, #866	@ 0x362
3401caa4:	483b      	ldr	r0, [pc, #236]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401caa6:	f002 fb5b 	bl	3401f160 <assert_failed>
3401caaa:	e017      	b.n	3401cadc <HAL_XSPI_Command+0x174>
    assert_param(IS_XSPI_ALT_BYTES_WIDTH(pCmd->AlternateBytesWidth));
3401caac:	f240 3155 	movw	r1, #853	@ 0x355
3401cab0:	4838      	ldr	r0, [pc, #224]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401cab2:	f002 fb55 	bl	3401f160 <assert_failed>
3401cab6:	e7bb      	b.n	3401ca30 <HAL_XSPI_Command+0xc8>
  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));
3401cab8:	b181      	cbz	r1, 3401cadc <HAL_XSPI_Command+0x174>
3401caba:	f021 7300 	bic.w	r3, r1, #33554432	@ 0x2000000
3401cabe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3401cac2:	d0de      	beq.n	3401ca82 <HAL_XSPI_Command+0x11a>
3401cac4:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
3401cac8:	d1d6      	bne.n	3401ca78 <HAL_XSPI_Command+0x110>
3401caca:	e7da      	b.n	3401ca82 <HAL_XSPI_Command+0x11a>
3401cacc:	f240 3159 	movw	r1, #857	@ 0x359
3401cad0:	4830      	ldr	r0, [pc, #192]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401cad2:	f002 fb45 	bl	3401f160 <assert_failed>
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3401cad6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401cad8:	2b00      	cmp	r3, #0
3401cada:	d1d2      	bne.n	3401ca82 <HAL_XSPI_Command+0x11a>
  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));
3401cadc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401cade:	f033 5300 	bics.w	r3, r3, #536870912	@ 0x20000000
3401cae2:	d004      	beq.n	3401caee <HAL_XSPI_Command+0x186>
3401cae4:	f240 3165 	movw	r1, #869	@ 0x365
3401cae8:	482a      	ldr	r0, [pc, #168]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401caea:	f002 fb39 	bl	3401f160 <assert_failed>
  state = hxspi->State;
3401caee:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401caf0:	2b02      	cmp	r3, #2
3401caf2:	d110      	bne.n	3401cb16 <HAL_XSPI_Command+0x1ae>
3401caf4:	68eb      	ldr	r3, [r5, #12]
3401caf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3401cafa:	d112      	bne.n	3401cb22 <HAL_XSPI_Command+0x1ba>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cafc:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401cafe:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cb00:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401cb02:	e028      	b.n	3401cb56 <HAL_XSPI_Command+0x1ee>
      assert_param(IS_XSPI_DATA_LENGTH(pCmd->DataLength));
3401cb04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3401cb06:	2b00      	cmp	r3, #0
3401cb08:	d1be      	bne.n	3401ca88 <HAL_XSPI_Command+0x120>
3401cb0a:	f240 315f 	movw	r1, #863	@ 0x35f
3401cb0e:	4821      	ldr	r0, [pc, #132]	@ (3401cb94 <HAL_XSPI_Command+0x22c>)
3401cb10:	f002 fb26 	bl	3401f160 <assert_failed>
3401cb14:	e7b8      	b.n	3401ca88 <HAL_XSPI_Command+0x120>
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3401cb16:	2b14      	cmp	r3, #20
3401cb18:	d11f      	bne.n	3401cb5a <HAL_XSPI_Command+0x1f2>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3401cb1a:	6823      	ldr	r3, [r4, #0]
3401cb1c:	3b02      	subs	r3, #2
3401cb1e:	2b01      	cmp	r3, #1
3401cb20:	d8ec      	bhi.n	3401cafc <HAL_XSPI_Command+0x194>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401cb22:	4633      	mov	r3, r6
3401cb24:	2200      	movs	r2, #0
3401cb26:	2120      	movs	r1, #32
3401cb28:	4628      	mov	r0, r5
3401cb2a:	9700      	str	r7, [sp, #0]
3401cb2c:	f7ff fdb6 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401cb30:	bb70      	cbnz	r0, 3401cb90 <HAL_XSPI_Command+0x228>
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3401cb32:	65e8      	str	r0, [r5, #92]	@ 0x5c
      status = XSPI_ConfigCmd(hxspi, pCmd);
3401cb34:	4621      	mov	r1, r4
3401cb36:	4628      	mov	r0, r5
3401cb38:	f7ff fcae 	bl	3401c498 <XSPI_ConfigCmd>
      if (status == HAL_OK)
3401cb3c:	b958      	cbnz	r0, 3401cb56 <HAL_XSPI_Command+0x1ee>
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3401cb3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3401cb40:	b99b      	cbnz	r3, 3401cb6a <HAL_XSPI_Command+0x202>
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401cb42:	4602      	mov	r2, r0
3401cb44:	4633      	mov	r3, r6
3401cb46:	2120      	movs	r1, #32
3401cb48:	4628      	mov	r0, r5
3401cb4a:	9700      	str	r7, [sp, #0]
3401cb4c:	f7ff fda6 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401cb50:	2202      	movs	r2, #2
3401cb52:	682b      	ldr	r3, [r5, #0]
3401cb54:	625a      	str	r2, [r3, #36]	@ 0x24
}
3401cb56:	b003      	add	sp, #12
3401cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3401cb5a:	2b24      	cmp	r3, #36	@ 0x24
3401cb5c:	d1ce      	bne.n	3401cafc <HAL_XSPI_Command+0x194>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3401cb5e:	6823      	ldr	r3, [r4, #0]
3401cb60:	f023 0302 	bic.w	r3, r3, #2
3401cb64:	2b01      	cmp	r3, #1
3401cb66:	d1c9      	bne.n	3401cafc <HAL_XSPI_Command+0x194>
3401cb68:	e7db      	b.n	3401cb22 <HAL_XSPI_Command+0x1ba>
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3401cb6a:	6823      	ldr	r3, [r4, #0]
3401cb6c:	b90b      	cbnz	r3, 3401cb72 <HAL_XSPI_Command+0x20a>
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3401cb6e:	2304      	movs	r3, #4
3401cb70:	e005      	b.n	3401cb7e <HAL_XSPI_Command+0x216>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3401cb72:	2b01      	cmp	r3, #1
3401cb74:	d105      	bne.n	3401cb82 <HAL_XSPI_Command+0x21a>
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3401cb76:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401cb78:	2b24      	cmp	r3, #36	@ 0x24
3401cb7a:	d0f8      	beq.n	3401cb6e <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3401cb7c:	2314      	movs	r3, #20
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401cb7e:	65ab      	str	r3, [r5, #88]	@ 0x58
3401cb80:	e7e9      	b.n	3401cb56 <HAL_XSPI_Command+0x1ee>
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3401cb82:	2b02      	cmp	r3, #2
3401cb84:	d1e7      	bne.n	3401cb56 <HAL_XSPI_Command+0x1ee>
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3401cb86:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401cb88:	2b14      	cmp	r3, #20
3401cb8a:	d0f0      	beq.n	3401cb6e <HAL_XSPI_Command+0x206>
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3401cb8c:	2324      	movs	r3, #36	@ 0x24
3401cb8e:	e7f6      	b.n	3401cb7e <HAL_XSPI_Command+0x216>
      status = HAL_BUSY;
3401cb90:	2002      	movs	r0, #2
3401cb92:	e7e0      	b.n	3401cb56 <HAL_XSPI_Command+0x1ee>
3401cb94:	3402bf08 	.word	0x3402bf08

3401cb98 <HAL_XSPI_Transmit>:
{
3401cb98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401cb9c:	4604      	mov	r4, r0
3401cb9e:	4688      	mov	r8, r1
3401cba0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
3401cba2:	f001 ffad 	bl	3401eb00 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401cba6:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401cba8:	4605      	mov	r5, r0
  if (pData == NULL)
3401cbaa:	f1b8 0f00 	cmp.w	r8, #0
3401cbae:	d103      	bne.n	3401cbb8 <HAL_XSPI_Transmit+0x20>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401cbb0:	2308      	movs	r3, #8
    status = HAL_ERROR;
3401cbb2:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cbb4:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401cbb6:	e02e      	b.n	3401cc16 <HAL_XSPI_Transmit+0x7e>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401cbb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401cbba:	2b04      	cmp	r3, #4
3401cbbc:	d12e      	bne.n	3401cc1c <HAL_XSPI_Transmit+0x84>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401cbbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hxspi->pBuffPtr  = (uint8_t *)pData;
3401cbc0:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401cbc4:	3301      	adds	r3, #1
3401cbc6:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3401cbc8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401cbca:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3401cbcc:	683b      	ldr	r3, [r7, #0]
3401cbce:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401cbd2:	603b      	str	r3, [r7, #0]
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3401cbd4:	462b      	mov	r3, r5
3401cbd6:	2201      	movs	r2, #1
3401cbd8:	2104      	movs	r1, #4
3401cbda:	4620      	mov	r0, r4
3401cbdc:	9600      	str	r6, [sp, #0]
3401cbde:	f7ff fd5d 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3401cbe2:	b9c0      	cbnz	r0, 3401cc16 <HAL_XSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3401cbe4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401cbe6:	781b      	ldrb	r3, [r3, #0]
3401cbe8:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hxspi->pBuffPtr++;
3401cbec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401cbee:	3301      	adds	r3, #1
3401cbf0:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3401cbf2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401cbf4:	3b01      	subs	r3, #1
3401cbf6:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401cbf8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401cbfa:	2b00      	cmp	r3, #0
3401cbfc:	d1ea      	bne.n	3401cbd4 <HAL_XSPI_Transmit+0x3c>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401cbfe:	462b      	mov	r3, r5
3401cc00:	2201      	movs	r2, #1
3401cc02:	2102      	movs	r1, #2
3401cc04:	4620      	mov	r0, r4
3401cc06:	9600      	str	r6, [sp, #0]
3401cc08:	f7ff fd48 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3401cc0c:	b918      	cbnz	r0, 3401cc16 <HAL_XSPI_Transmit+0x7e>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401cc0e:	2302      	movs	r3, #2
3401cc10:	6822      	ldr	r2, [r4, #0]
3401cc12:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3401cc14:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401cc16:	b002      	add	sp, #8
3401cc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cc1c:	2310      	movs	r3, #16
3401cc1e:	e7c8      	b.n	3401cbb2 <HAL_XSPI_Transmit+0x1a>

3401cc20 <HAL_XSPI_Receive>:
{
3401cc20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
3401cc24:	4604      	mov	r4, r0
3401cc26:	4616      	mov	r6, r2
3401cc28:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
3401cc2a:	f001 ff69 	bl	3401eb00 <HAL_GetTick>
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3401cc2e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401cc30:	4607      	mov	r7, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3401cc32:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3401cc34:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
3401cc38:	f1b8 0f00 	cmp.w	r8, #0
3401cc3c:	d103      	bne.n	3401cc46 <HAL_XSPI_Receive+0x26>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3401cc3e:	2308      	movs	r3, #8
    status = HAL_ERROR;
3401cc40:	2001      	movs	r0, #1
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cc42:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401cc44:	e035      	b.n	3401ccb2 <HAL_XSPI_Receive+0x92>
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401cc46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401cc48:	2b04      	cmp	r3, #4
3401cc4a:	d13d      	bne.n	3401ccc8 <HAL_XSPI_Receive+0xa8>
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401cc4c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hxspi->pBuffPtr  = pData;
3401cc4e:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3401cc52:	3301      	adds	r3, #1
3401cc54:	64e3      	str	r3, [r4, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3401cc56:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401cc58:	64a3      	str	r3, [r4, #72]	@ 0x48
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401cc5a:	6829      	ldr	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401cc5c:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401cc5e:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
3401cc62:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401cc66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3401cc6a:	6029      	str	r1, [r5, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401cc6c:	d124      	bne.n	3401ccb8 <HAL_XSPI_Receive+0x98>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401cc6e:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3401cc70:	463b      	mov	r3, r7
3401cc72:	2201      	movs	r2, #1
3401cc74:	2106      	movs	r1, #6
3401cc76:	4620      	mov	r0, r4
3401cc78:	9600      	str	r6, [sp, #0]
3401cc7a:	f7ff fd0f 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
3401cc7e:	b9c0      	cbnz	r0, 3401ccb2 <HAL_XSPI_Receive+0x92>
        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3401cc80:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
3401cc84:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401cc86:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3401cc88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401cc8a:	3301      	adds	r3, #1
3401cc8c:	6463      	str	r3, [r4, #68]	@ 0x44
        hxspi->XferCount--;
3401cc8e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401cc90:	3b01      	subs	r3, #1
3401cc92:	64e3      	str	r3, [r4, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3401cc94:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3401cc96:	2b00      	cmp	r3, #0
3401cc98:	d1ea      	bne.n	3401cc70 <HAL_XSPI_Receive+0x50>
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3401cc9a:	463b      	mov	r3, r7
3401cc9c:	2201      	movs	r2, #1
3401cc9e:	2102      	movs	r1, #2
3401cca0:	4620      	mov	r0, r4
3401cca2:	9600      	str	r6, [sp, #0]
3401cca4:	f7ff fcfa 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
3401cca8:	b918      	cbnz	r0, 3401ccb2 <HAL_XSPI_Receive+0x92>
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3401ccaa:	2302      	movs	r3, #2
3401ccac:	6822      	ldr	r2, [r4, #0]
3401ccae:	6253      	str	r3, [r2, #36]	@ 0x24
          hxspi->State = HAL_XSPI_STATE_READY;
3401ccb0:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401ccb2:	b002      	add	sp, #8
3401ccb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401ccb8:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
3401ccbc:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3401ccc0:	d1d5      	bne.n	3401cc6e <HAL_XSPI_Receive+0x4e>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401ccc2:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
3401ccc6:	e7d3      	b.n	3401cc70 <HAL_XSPI_Receive+0x50>
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401ccc8:	2310      	movs	r3, #16
3401ccca:	e7b9      	b.n	3401cc40 <HAL_XSPI_Receive+0x20>

3401cccc <HAL_XSPI_AutoPolling>:
{
3401cccc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
3401ccd0:	4604      	mov	r4, r0
3401ccd2:	460d      	mov	r5, r1
3401ccd4:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
3401ccd6:	f001 ff13 	bl	3401eb00 <HAL_GetTick>
  uint32_t addr_reg = hxspi->Instance->AR;
3401ccda:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401ccdc:	4606      	mov	r6, r0
  uint32_t addr_reg = hxspi->Instance->AR;
3401ccde:	f8d3 8048 	ldr.w	r8, [r3, #72]	@ 0x48
  uint32_t ir_reg = hxspi->Instance->IR;
3401cce2:	f8d3 9110 	ldr.w	r9, [r3, #272]	@ 0x110
  uint32_t dlr_reg = hxspi->Instance->DLR;
3401cce6:	f8d3 a040 	ldr.w	sl, [r3, #64]	@ 0x40
  assert_param(IS_XSPI_MATCH_MODE(pCfg->MatchMode));
3401ccea:	68ab      	ldr	r3, [r5, #8]
3401ccec:	f433 0300 	bics.w	r3, r3, #8388608	@ 0x800000
3401ccf0:	d004      	beq.n	3401ccfc <HAL_XSPI_AutoPolling+0x30>
3401ccf2:	f240 7134 	movw	r1, #1844	@ 0x734
3401ccf6:	4832      	ldr	r0, [pc, #200]	@ (3401cdc0 <HAL_XSPI_AutoPolling+0xf4>)
3401ccf8:	f002 fa32 	bl	3401f160 <assert_failed>
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
3401ccfc:	68eb      	ldr	r3, [r5, #12]
3401ccfe:	f433 0380 	bics.w	r3, r3, #4194304	@ 0x400000
3401cd02:	d004      	beq.n	3401cd0e <HAL_XSPI_AutoPolling+0x42>
3401cd04:	f240 7135 	movw	r1, #1845	@ 0x735
3401cd08:	482d      	ldr	r0, [pc, #180]	@ (3401cdc0 <HAL_XSPI_AutoPolling+0xf4>)
3401cd0a:	f002 fa29 	bl	3401f160 <assert_failed>
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
3401cd0e:	692b      	ldr	r3, [r5, #16]
3401cd10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401cd14:	d304      	bcc.n	3401cd20 <HAL_XSPI_AutoPolling+0x54>
3401cd16:	f240 7136 	movw	r1, #1846	@ 0x736
3401cd1a:	4829      	ldr	r0, [pc, #164]	@ (3401cdc0 <HAL_XSPI_AutoPolling+0xf4>)
3401cd1c:	f002 fa20 	bl	3401f160 <assert_failed>
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));
3401cd20:	f1ba 0f03 	cmp.w	sl, #3
3401cd24:	d904      	bls.n	3401cd30 <HAL_XSPI_AutoPolling+0x64>
3401cd26:	f240 7137 	movw	r1, #1847	@ 0x737
3401cd2a:	4825      	ldr	r0, [pc, #148]	@ (3401cdc0 <HAL_XSPI_AutoPolling+0xf4>)
3401cd2c:	f002 fa18 	bl	3401f160 <assert_failed>
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3401cd30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401cd32:	2b04      	cmp	r3, #4
3401cd34:	d13e      	bne.n	3401cdb4 <HAL_XSPI_AutoPolling+0xe8>
3401cd36:	68eb      	ldr	r3, [r5, #12]
3401cd38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3401cd3c:	d13a      	bne.n	3401cdb4 <HAL_XSPI_AutoPolling+0xe8>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3401cd3e:	4633      	mov	r3, r6
3401cd40:	2200      	movs	r2, #0
3401cd42:	2120      	movs	r1, #32
3401cd44:	4620      	mov	r0, r4
3401cd46:	9700      	str	r7, [sp, #0]
3401cd48:	f7ff fca8 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401cd4c:	2800      	cmp	r0, #0
3401cd4e:	d135      	bne.n	3401cdbc <HAL_XSPI_AutoPolling+0xf0>
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3401cd50:	682b      	ldr	r3, [r5, #0]
3401cd52:	6821      	ldr	r1, [r4, #0]
3401cd54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3401cd58:	686b      	ldr	r3, [r5, #4]
3401cd5a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3401cd5e:	692b      	ldr	r3, [r5, #16]
3401cd60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401cd64:	680a      	ldr	r2, [r1, #0]
3401cd66:	e9d5 3502 	ldrd	r3, r5, [r5, #8]
3401cd6a:	431d      	orrs	r5, r3
3401cd6c:	f022 5343 	bic.w	r3, r2, #817889280	@ 0x30c00000
3401cd70:	431d      	orrs	r5, r3
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401cd72:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401cd74:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401cd78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3401cd7c:	600d      	str	r5, [r1, #0]
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3401cd7e:	d111      	bne.n	3401cda4 <HAL_XSPI_AutoPolling+0xd8>
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3401cd80:	f8c1 8048 	str.w	r8, [r1, #72]	@ 0x48
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3401cd84:	4633      	mov	r3, r6
3401cd86:	2201      	movs	r2, #1
3401cd88:	2108      	movs	r1, #8
3401cd8a:	4620      	mov	r0, r4
3401cd8c:	9700      	str	r7, [sp, #0]
3401cd8e:	f7ff fc85 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
3401cd92:	b920      	cbnz	r0, 3401cd9e <HAL_XSPI_AutoPolling+0xd2>
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3401cd94:	2208      	movs	r2, #8
3401cd96:	6823      	ldr	r3, [r4, #0]
3401cd98:	625a      	str	r2, [r3, #36]	@ 0x24
        hxspi->State = HAL_XSPI_STATE_READY;
3401cd9a:	2302      	movs	r3, #2
3401cd9c:	65a3      	str	r3, [r4, #88]	@ 0x58
}
3401cd9e:	b002      	add	sp, #8
3401cda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3401cda4:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
3401cda8:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
3401cdac:	d1e8      	bne.n	3401cd80 <HAL_XSPI_AutoPolling+0xb4>
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3401cdae:	f8c1 9110 	str.w	r9, [r1, #272]	@ 0x110
3401cdb2:	e7e7      	b.n	3401cd84 <HAL_XSPI_AutoPolling+0xb8>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cdb4:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401cdb6:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cdb8:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401cdba:	e7f0      	b.n	3401cd9e <HAL_XSPI_AutoPolling+0xd2>
      status = HAL_BUSY;
3401cdbc:	2002      	movs	r0, #2
3401cdbe:	e7ee      	b.n	3401cd9e <HAL_XSPI_AutoPolling+0xd2>
3401cdc0:	3402bf08 	.word	0x3402bf08

3401cdc4 <HAL_XSPI_MemoryMapped>:
{
3401cdc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
3401cdc6:	460c      	mov	r4, r1
3401cdc8:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
3401cdca:	f001 fe99 	bl	3401eb00 <HAL_GetTick>
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401cdce:	6823      	ldr	r3, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
3401cdd0:	4606      	mov	r6, r0
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
3401cdd2:	f033 0308 	bics.w	r3, r3, #8
3401cdd6:	d004      	beq.n	3401cde2 <HAL_XSPI_MemoryMapped+0x1e>
3401cdd8:	f44f 61f9 	mov.w	r1, #1992	@ 0x7c8
3401cddc:	482f      	ldr	r0, [pc, #188]	@ (3401ce9c <HAL_XSPI_MemoryMapped+0xd8>)
3401cdde:	f002 f9bf 	bl	3401f160 <assert_failed>
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));
3401cde2:	68a3      	ldr	r3, [r4, #8]
3401cde4:	f033 7300 	bics.w	r3, r3, #33554432	@ 0x2000000
3401cde8:	d004      	beq.n	3401cdf4 <HAL_XSPI_MemoryMapped+0x30>
3401cdea:	f240 71c9 	movw	r1, #1993	@ 0x7c9
3401cdee:	482b      	ldr	r0, [pc, #172]	@ (3401ce9c <HAL_XSPI_MemoryMapped+0xd8>)
3401cdf0:	f002 f9b6 	bl	3401f160 <assert_failed>
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3401cdf4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
3401cdf6:	2b04      	cmp	r3, #4
3401cdf8:	d14b      	bne.n	3401ce92 <HAL_XSPI_MemoryMapped+0xce>
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3401cdfa:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
3401cdfc:	2200      	movs	r2, #0
3401cdfe:	9300      	str	r3, [sp, #0]
3401ce00:	2120      	movs	r1, #32
3401ce02:	4633      	mov	r3, r6
3401ce04:	4628      	mov	r0, r5
3401ce06:	f7ff fc49 	bl	3401c69c <XSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
3401ce0a:	4606      	mov	r6, r0
3401ce0c:	bb58      	cbnz	r0, 3401ce66 <HAL_XSPI_MemoryMapped+0xa2>
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3401ce0e:	2388      	movs	r3, #136	@ 0x88
3401ce10:	65ab      	str	r3, [r5, #88]	@ 0x58
      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3401ce12:	68a3      	ldr	r3, [r4, #8]
3401ce14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3401ce18:	d128      	bne.n	3401ce6c <HAL_XSPI_MemoryMapped+0xa8>
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3401ce1a:	682a      	ldr	r2, [r5, #0]
3401ce1c:	6813      	ldr	r3, [r2, #0]
3401ce1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
3401ce22:	6013      	str	r3, [r2, #0]
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3401ce24:	6823      	ldr	r3, [r4, #0]
3401ce26:	2b08      	cmp	r3, #8
3401ce28:	d112      	bne.n	3401ce50 <HAL_XSPI_MemoryMapped+0x8c>
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));
3401ce2a:	6863      	ldr	r3, [r4, #4]
3401ce2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3401ce30:	d304      	bcc.n	3401ce3c <HAL_XSPI_MemoryMapped+0x78>
3401ce32:	f240 71e5 	movw	r1, #2021	@ 0x7e5
3401ce36:	4819      	ldr	r0, [pc, #100]	@ (3401ce9c <HAL_XSPI_MemoryMapped+0xd8>)
3401ce38:	f002 f992 	bl	3401f160 <assert_failed>
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3401ce3c:	682b      	ldr	r3, [r5, #0]
3401ce3e:	6862      	ldr	r2, [r4, #4]
3401ce40:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3401ce44:	2210      	movs	r2, #16
3401ce46:	625a      	str	r2, [r3, #36]	@ 0x24
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3401ce48:	681a      	ldr	r2, [r3, #0]
3401ce4a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3401ce4e:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3401ce50:	682a      	ldr	r2, [r5, #0]
3401ce52:	6821      	ldr	r1, [r4, #0]
3401ce54:	6813      	ldr	r3, [r2, #0]
3401ce56:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3401ce5a:	f023 0308 	bic.w	r3, r3, #8
3401ce5e:	430b      	orrs	r3, r1
3401ce60:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
3401ce64:	6013      	str	r3, [r2, #0]
}
3401ce66:	4630      	mov	r0, r6
3401ce68:	b002      	add	sp, #8
3401ce6a:	bd70      	pop	{r4, r5, r6, pc}
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));
3401ce6c:	68e3      	ldr	r3, [r4, #12]
3401ce6e:	f033 6380 	bics.w	r3, r3, #67108864	@ 0x4000000
3401ce72:	d004      	beq.n	3401ce7e <HAL_XSPI_MemoryMapped+0xba>
3401ce74:	f240 71dd 	movw	r1, #2013	@ 0x7dd
3401ce78:	4808      	ldr	r0, [pc, #32]	@ (3401ce9c <HAL_XSPI_MemoryMapped+0xd8>)
3401ce7a:	f002 f971 	bl	3401f160 <assert_failed>
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3401ce7e:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
3401ce82:	6829      	ldr	r1, [r5, #0]
3401ce84:	4303      	orrs	r3, r0
3401ce86:	680a      	ldr	r2, [r1, #0]
3401ce88:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
3401ce8c:	4313      	orrs	r3, r2
3401ce8e:	600b      	str	r3, [r1, #0]
3401ce90:	e7c8      	b.n	3401ce24 <HAL_XSPI_MemoryMapped+0x60>
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401ce92:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401ce94:	2601      	movs	r6, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401ce96:	65eb      	str	r3, [r5, #92]	@ 0x5c
3401ce98:	e7e5      	b.n	3401ce66 <HAL_XSPI_MemoryMapped+0xa2>
3401ce9a:	bf00      	nop
3401ce9c:	3402bf08 	.word	0x3402bf08

3401cea0 <HAL_XSPI_SetClockPrescaler>:
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3401cea0:	29ff      	cmp	r1, #255	@ 0xff
{
3401cea2:	b538      	push	{r3, r4, r5, lr}
3401cea4:	4604      	mov	r4, r0
3401cea6:	460d      	mov	r5, r1
  assert_param(IS_XSPI_CLK_PRESCALER(Prescaler));
3401cea8:	d904      	bls.n	3401ceb4 <HAL_XSPI_SetClockPrescaler+0x14>
3401ceaa:	f640 2193 	movw	r1, #2707	@ 0xa93
3401ceae:	4809      	ldr	r0, [pc, #36]	@ (3401ced4 <HAL_XSPI_SetClockPrescaler+0x34>)
3401ceb0:	f002 f956 	bl	3401f160 <assert_failed>
  if ((hxspi->State & XSPI_BUSY_STATE_MASK) == 0U)
3401ceb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401ceb6:	f010 0008 	ands.w	r0, r0, #8
3401ceba:	d107      	bne.n	3401cecc <HAL_XSPI_SetClockPrescaler+0x2c>
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401cebc:	6822      	ldr	r2, [r4, #0]
    hxspi->Init.ClockPrescaler = Prescaler;
3401cebe:	6265      	str	r5, [r4, #36]	@ 0x24
    MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3401cec0:	68d3      	ldr	r3, [r2, #12]
3401cec2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
3401cec6:	432b      	orrs	r3, r5
3401cec8:	60d3      	str	r3, [r2, #12]
}
3401ceca:	bd38      	pop	{r3, r4, r5, pc}
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401cecc:	2310      	movs	r3, #16
    status = HAL_ERROR;
3401cece:	2001      	movs	r0, #1
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3401ced0:	65e3      	str	r3, [r4, #92]	@ 0x5c
3401ced2:	e7fa      	b.n	3401ceca <HAL_XSPI_SetClockPrescaler+0x2a>
3401ced4:	3402bf08 	.word	0x3402bf08

3401ced8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
3401ced8:	b570      	push	{r4, r5, r6, lr}
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
3401ceda:	2600      	movs	r6, #0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
3401cedc:	4c16      	ldr	r4, [pc, #88]	@ (3401cf38 <UTIL_LCD_SetFuncDriver+0x60>)
3401cede:	6803      	ldr	r3, [r0, #0]
  FuncDriver.GetYSize       = pDrv->GetYSize;
3401cee0:	6a02      	ldr	r2, [r0, #32]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
3401cee2:	6023      	str	r3, [r4, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
3401cee4:	6843      	ldr	r3, [r0, #4]
  FuncDriver.GetYSize       = pDrv->GetYSize;
3401cee6:	6222      	str	r2, [r4, #32]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
3401cee8:	6063      	str	r3, [r4, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
3401ceea:	6883      	ldr	r3, [r0, #8]
  FuncDriver.SetLayer       = pDrv->SetLayer;
3401ceec:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
3401ceee:	60a3      	str	r3, [r4, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
3401cef0:	68c3      	ldr	r3, [r0, #12]
  DrawProp->LcdLayer = 0;
3401cef2:	4d12      	ldr	r5, [pc, #72]	@ (3401cf3c <UTIL_LCD_SetFuncDriver+0x64>)
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
3401cef4:	60e3      	str	r3, [r4, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
3401cef6:	6903      	ldr	r3, [r0, #16]
  FuncDriver.SetLayer       = pDrv->SetLayer;
3401cef8:	6262      	str	r2, [r4, #36]	@ 0x24
  FuncDriver.FillRect       = pDrv->FillRect;
3401cefa:	6123      	str	r3, [r4, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
3401cefc:	6943      	ldr	r3, [r0, #20]
  FuncDriver.GetFormat      = pDrv->GetFormat;
3401cefe:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  FuncDriver.GetPixel       = pDrv->GetPixel;
3401cf00:	6163      	str	r3, [r4, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
3401cf02:	6983      	ldr	r3, [r0, #24]
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401cf04:	f105 0114 	add.w	r1, r5, #20
  FuncDriver.SetPixel       = pDrv->SetPixel;
3401cf08:	61a3      	str	r3, [r4, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
3401cf0a:	69c3      	ldr	r3, [r0, #28]
  DrawProp->LcdDevice = 0;
3401cf0c:	e9c5 6603 	strd	r6, r6, [r5, #12]
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401cf10:	4630      	mov	r0, r6
  FuncDriver.GetXSize       = pDrv->GetXSize;
3401cf12:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
3401cf14:	62a2      	str	r2, [r4, #40]	@ 0x28
  FuncDriver.GetXSize(0, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401cf16:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp[DrawProp->LcdLayer].LcdYsize);
3401cf18:	68e9      	ldr	r1, [r5, #12]
3401cf1a:	6a23      	ldr	r3, [r4, #32]
3401cf1c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
3401cf20:	4630      	mov	r0, r6
3401cf22:	3118      	adds	r1, #24
3401cf24:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401cf26:	68eb      	ldr	r3, [r5, #12]
3401cf28:	4630      	mov	r0, r6
3401cf2a:	eb05 1143 	add.w	r1, r5, r3, lsl #5
3401cf2e:	311c      	adds	r1, #28
3401cf30:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
}
3401cf32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  FuncDriver.GetFormat(0, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401cf36:	4718      	bx	r3
3401cf38:	34146234 	.word	0x34146234
3401cf3c:	34146260 	.word	0x34146260

3401cf40 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
3401cf40:	b570      	push	{r4, r5, r6, lr}
  if(FuncDriver.SetLayer != NULL)
3401cf42:	4e10      	ldr	r6, [pc, #64]	@ (3401cf84 <UTIL_LCD_SetLayer+0x44>)
{
3401cf44:	4605      	mov	r5, r0
  if(FuncDriver.SetLayer != NULL)
3401cf46:	6a73      	ldr	r3, [r6, #36]	@ 0x24
3401cf48:	b1db      	cbz	r3, 3401cf82 <UTIL_LCD_SetLayer+0x42>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
3401cf4a:	4c0f      	ldr	r4, [pc, #60]	@ (3401cf88 <UTIL_LCD_SetLayer+0x48>)
3401cf4c:	4601      	mov	r1, r0
3401cf4e:	6920      	ldr	r0, [r4, #16]
3401cf50:	4798      	blx	r3
3401cf52:	b9b0      	cbnz	r0, 3401cf82 <UTIL_LCD_SetLayer+0x42>
    {
      DrawProp->LcdLayer = Layer;
      FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401cf54:	eb04 1145 	add.w	r1, r4, r5, lsl #5
3401cf58:	69f3      	ldr	r3, [r6, #28]
3401cf5a:	6920      	ldr	r0, [r4, #16]
      DrawProp->LcdLayer = Layer;
3401cf5c:	60e5      	str	r5, [r4, #12]
      FuncDriver.GetXSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdXsize);
3401cf5e:	3114      	adds	r1, #20
3401cf60:	4798      	blx	r3
      FuncDriver.GetYSize(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdYsize);
3401cf62:	68e1      	ldr	r1, [r4, #12]
3401cf64:	6a33      	ldr	r3, [r6, #32]
3401cf66:	eb04 1141 	add.w	r1, r4, r1, lsl #5
3401cf6a:	6920      	ldr	r0, [r4, #16]
3401cf6c:	3118      	adds	r1, #24
3401cf6e:	4798      	blx	r3
      FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401cf70:	68e1      	ldr	r1, [r4, #12]
3401cf72:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
3401cf74:	eb04 1141 	add.w	r1, r4, r1, lsl #5
3401cf78:	6920      	ldr	r0, [r4, #16]
3401cf7a:	311c      	adds	r1, #28
    }
  }
}
3401cf7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      FuncDriver.GetFormat(DrawProp->LcdDevice, &DrawProp[DrawProp->LcdLayer].LcdPixelFormat);
3401cf80:	4718      	bx	r3
}
3401cf82:	bd70      	pop	{r4, r5, r6, pc}
3401cf84:	34146234 	.word	0x34146234
3401cf88:	34146260 	.word	0x34146260

3401cf8c <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
3401cf8c:	4a02      	ldr	r2, [pc, #8]	@ (3401cf98 <UTIL_LCD_SetTextColor+0xc>)
3401cf8e:	68d3      	ldr	r3, [r2, #12]
3401cf90:	015b      	lsls	r3, r3, #5
3401cf92:	50d0      	str	r0, [r2, r3]
}
3401cf94:	4770      	bx	lr
3401cf96:	bf00      	nop
3401cf98:	34146260 	.word	0x34146260

3401cf9c <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
3401cf9c:	4b02      	ldr	r3, [pc, #8]	@ (3401cfa8 <UTIL_LCD_SetFont+0xc>)
3401cf9e:	68da      	ldr	r2, [r3, #12]
3401cfa0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
3401cfa4:	6098      	str	r0, [r3, #8]
}
3401cfa6:	4770      	bx	lr
3401cfa8:	34146260 	.word	0x34146260

3401cfac <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
3401cfac:	4b02      	ldr	r3, [pc, #8]	@ (3401cfb8 <UTIL_LCD_GetFont+0xc>)
3401cfae:	68da      	ldr	r2, [r3, #12]
3401cfb0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
3401cfb4:	6898      	ldr	r0, [r3, #8]
3401cfb6:	4770      	bx	lr
3401cfb8:	34146260 	.word	0x34146260

3401cfbc <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
3401cfbc:	b513      	push	{r0, r1, r4, lr}
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
3401cfbe:	9c04      	ldr	r4, [sp, #16]
3401cfc0:	e9cd 3400 	strd	r3, r4, [sp]
3401cfc4:	4b04      	ldr	r3, [pc, #16]	@ (3401cfd8 <UTIL_LCD_FillRGBRect+0x1c>)
3401cfc6:	685c      	ldr	r4, [r3, #4]
3401cfc8:	4613      	mov	r3, r2
3401cfca:	460a      	mov	r2, r1
3401cfcc:	4601      	mov	r1, r0
3401cfce:	4803      	ldr	r0, [pc, #12]	@ (3401cfdc <UTIL_LCD_FillRGBRect+0x20>)
3401cfd0:	6900      	ldr	r0, [r0, #16]
3401cfd2:	47a0      	blx	r4
}
3401cfd4:	b002      	add	sp, #8
3401cfd6:	bd10      	pop	{r4, pc}
3401cfd8:	34146234 	.word	0x34146234
3401cfdc:	34146260 	.word	0x34146260

3401cfe0 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3401cfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401cfe2:	4606      	mov	r6, r0
  /* Write line */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401cfe4:	4817      	ldr	r0, [pc, #92]	@ (3401d044 <UTIL_LCD_DrawHLine+0x64>)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401cfe6:	4d18      	ldr	r5, [pc, #96]	@ (3401d048 <UTIL_LCD_DrawHLine+0x68>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401cfe8:	68c4      	ldr	r4, [r0, #12]
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401cfea:	68ad      	ldr	r5, [r5, #8]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401cfec:	eb00 1444 	add.w	r4, r0, r4, lsl #5
3401cff0:	69e4      	ldr	r4, [r4, #28]
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401cff2:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401cff4:	2c02      	cmp	r4, #2
3401cff6:	d110      	bne.n	3401d01a <UTIL_LCD_DrawHLine+0x3a>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401cff8:	095c      	lsrs	r4, r3, #5
3401cffa:	0a1f      	lsrs	r7, r3, #8
3401cffc:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401d000:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
3401d004:	433c      	orrs	r4, r7
3401d006:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401d00a:	431c      	orrs	r4, r3
3401d00c:	9400      	str	r4, [sp, #0]
  }
  else /*LCD_PIXEL_FORMAT_ARGB8888*/
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401d00e:	4613      	mov	r3, r2
3401d010:	460a      	mov	r2, r1
3401d012:	4631      	mov	r1, r6
3401d014:	47a8      	blx	r5
  }
}
3401d016:	b003      	add	sp, #12
3401d018:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401d01a:	2c01      	cmp	r4, #1
3401d01c:	d103      	bne.n	3401d026 <UTIL_LCD_DrawHLine+0x46>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
3401d01e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401d022:	9300      	str	r3, [sp, #0]
3401d024:	e7f3      	b.n	3401d00e <UTIL_LCD_DrawHLine+0x2e>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401d026:	2c04      	cmp	r4, #4
3401d028:	d1fb      	bne.n	3401d022 <UTIL_LCD_DrawHLine+0x42>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401d02a:	0f1f      	lsrs	r7, r3, #28
3401d02c:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401d030:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
3401d034:	0a1f      	lsrs	r7, r3, #8
3401d036:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
3401d03a:	0b1b      	lsrs	r3, r3, #12
3401d03c:	433c      	orrs	r4, r7
3401d03e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401d042:	e7e2      	b.n	3401d00a <UTIL_LCD_DrawHLine+0x2a>
3401d044:	34146260 	.word	0x34146260
3401d048:	34146234 	.word	0x34146234

3401d04c <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
3401d04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401d04e:	4606      	mov	r6, r0
  /* Write line */
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d050:	4817      	ldr	r0, [pc, #92]	@ (3401d0b0 <UTIL_LCD_DrawVLine+0x64>)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401d052:	4d18      	ldr	r5, [pc, #96]	@ (3401d0b4 <UTIL_LCD_DrawVLine+0x68>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d054:	68c4      	ldr	r4, [r0, #12]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401d056:	68ed      	ldr	r5, [r5, #12]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d058:	eb00 1444 	add.w	r4, r0, r4, lsl #5
3401d05c:	69e4      	ldr	r4, [r4, #28]
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401d05e:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d060:	2c02      	cmp	r4, #2
3401d062:	d110      	bne.n	3401d086 <UTIL_LCD_DrawVLine+0x3a>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
3401d064:	095c      	lsrs	r4, r3, #5
3401d066:	0a1f      	lsrs	r7, r3, #8
3401d068:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
3401d06c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
3401d070:	433c      	orrs	r4, r7
3401d072:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
  }
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401d076:	431c      	orrs	r4, r3
3401d078:	9400      	str	r4, [sp, #0]
  }
  else /*LCD_PIXEL_FORMAT_ARGB888*/
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401d07a:	4613      	mov	r3, r2
3401d07c:	460a      	mov	r2, r1
3401d07e:	4631      	mov	r1, r6
3401d080:	47a8      	blx	r5
  }
}
3401d082:	b003      	add	sp, #12
3401d084:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401d086:	2c01      	cmp	r4, #1
3401d088:	d103      	bne.n	3401d092 <UTIL_LCD_DrawVLine+0x46>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB888(Color));
3401d08a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
3401d08e:	9300      	str	r3, [sp, #0]
3401d090:	e7f3      	b.n	3401d07a <UTIL_LCD_DrawVLine+0x2e>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401d092:	2c04      	cmp	r4, #4
3401d094:	d1fb      	bne.n	3401d08e <UTIL_LCD_DrawVLine+0x42>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882ARGB4444(Color));
3401d096:	0f1f      	lsrs	r7, r3, #28
3401d098:	f3c3 1403 	ubfx	r4, r3, #4, #4
3401d09c:	ea44 3407 	orr.w	r4, r4, r7, lsl #12
3401d0a0:	0a1f      	lsrs	r7, r3, #8
3401d0a2:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
3401d0a6:	0b1b      	lsrs	r3, r3, #12
3401d0a8:	433c      	orrs	r4, r7
3401d0aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
3401d0ae:	e7e2      	b.n	3401d076 <UTIL_LCD_DrawVLine+0x2a>
3401d0b0:	34146260 	.word	0x34146260
3401d0b4:	34146234 	.word	0x34146234

3401d0b8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
3401d0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401d0bc:	f8df 81e0 	ldr.w	r8, [pc, #480]	@ 3401d2a0 <UTIL_LCD_DisplayChar+0x1e8>
{
3401d0c0:	b0a3      	sub	sp, #140	@ 0x8c
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401d0c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
{
3401d0c6:	9108      	str	r1, [sp, #32]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401d0c8:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401d0cc:	6899      	ldr	r1, [r3, #8]
{
3401d0ce:	9005      	str	r0, [sp, #20]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
3401d0d0:	88cb      	ldrh	r3, [r1, #6]
3401d0d2:	888c      	ldrh	r4, [r1, #4]
3401d0d4:	9307      	str	r3, [sp, #28]
  uint8_t rgb8[24*4];
  uint16_t* rgb16 = (uint16_t*)rgb8;
  uint32_t* argb32 = (uint32_t*)rgb8;
  uint16_t* argb4444 = (uint16_t*)rgb8;

  offset =  8 *((width + 7)/8) -  width ;
3401d0d6:	1de3      	adds	r3, r4, #7
3401d0d8:	f023 0007 	bic.w	r0, r3, #7
3401d0dc:	9003      	str	r0, [sp, #12]

  for(i = 0; i < height; i++)
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
3401d0de:	08d8      	lsrs	r0, r3, #3
3401d0e0:	9006      	str	r0, [sp, #24]
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
    }
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
    {
      for (j = 0; j < width*3; j = j+ 3)
3401d0e2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
3401d0e6:	9009      	str	r0, [sp, #36]	@ 0x24
3401d0e8:	9808      	ldr	r0, [sp, #32]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
3401d0ea:	3a20      	subs	r2, #32
3401d0ec:	3001      	adds	r0, #1
3401d0ee:	9004      	str	r0, [sp, #16]
3401d0f0:	9807      	ldr	r0, [sp, #28]
3401d0f2:	680d      	ldr	r5, [r1, #0]
3401d0f4:	4342      	muls	r2, r0
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
3401d0f6:	10db      	asrs	r3, r3, #3
3401d0f8:	fb03 5502 	mla	r5, r3, r2, r5
3401d0fc:	9b04      	ldr	r3, [sp, #16]
  for(i = 0; i < height; i++)
3401d0fe:	9a08      	ldr	r2, [sp, #32]
3401d100:	1e59      	subs	r1, r3, #1
3401d102:	1a9b      	subs	r3, r3, r2
3401d104:	9a07      	ldr	r2, [sp, #28]
3401d106:	3b01      	subs	r3, #1
3401d108:	429a      	cmp	r2, r3
3401d10a:	d802      	bhi.n	3401d112 <UTIL_LCD_DisplayChar+0x5a>
}
3401d10c:	b023      	add	sp, #140	@ 0x8c
3401d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
3401d112:	9806      	ldr	r0, [sp, #24]
      line =  pchar[0];
3401d114:	782b      	ldrb	r3, [r5, #0]
    switch(((width + 7)/8))
3401d116:	2801      	cmp	r0, #1
      line =  pchar[0];
3401d118:	461a      	mov	r2, r3
    switch(((width + 7)/8))
3401d11a:	d004      	beq.n	3401d126 <UTIL_LCD_DisplayChar+0x6e>
3401d11c:	2802      	cmp	r0, #2
3401d11e:	d127      	bne.n	3401d170 <UTIL_LCD_DisplayChar+0xb8>
      line =  (pchar[0]<< 8) | pchar[1];
3401d120:	882a      	ldrh	r2, [r5, #0]
3401d122:	ba52      	rev16	r2, r2
3401d124:	b292      	uxth	r2, r2
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d126:	f8d8 000c 	ldr.w	r0, [r8, #12]
3401d12a:	eb08 1040 	add.w	r0, r8, r0, lsl #5
3401d12e:	69c7      	ldr	r7, [r0, #28]
3401d130:	2f02      	cmp	r7, #2
3401d132:	d13c      	bne.n	3401d1ae <UTIL_LCD_DisplayChar+0xf6>
3401d134:	f04f 0c01 	mov.w	ip, #1
        if(line & (1 << (width- j + offset- 1)))
3401d138:	9b03      	ldr	r3, [sp, #12]
      for (j = 0; j < width; j++)
3401d13a:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
3401d13e:	f103 3aff 	add.w	sl, r3, #4294967295
3401d142:	4663      	mov	r3, ip
3401d144:	4574      	cmp	r4, lr
3401d146:	eb04 0603 	add.w	r6, r4, r3
3401d14a:	bf08      	it	eq
3401d14c:	4666      	moveq	r6, ip
3401d14e:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401d152:	3e01      	subs	r6, #1
3401d154:	d113      	bne.n	3401d17e <UTIL_LCD_DisplayChar+0xc6>
        else
        {
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb4444[0], width, 1);
3401d156:	f8cd c000 	str.w	ip, [sp]
        else
        {
          argb32[j] = DrawProp[DrawProp->LcdLayer].BackColor;
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
3401d15a:	4623      	mov	r3, r4
3401d15c:	9805      	ldr	r0, [sp, #20]
3401d15e:	aa0a      	add	r2, sp, #40	@ 0x28
3401d160:	f7ff ff2c 	bl	3401cfbc <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
3401d164:	9b04      	ldr	r3, [sp, #16]
3401d166:	3301      	adds	r3, #1
3401d168:	9304      	str	r3, [sp, #16]
3401d16a:	9b06      	ldr	r3, [sp, #24]
3401d16c:	441d      	add	r5, r3
3401d16e:	e7c5      	b.n	3401d0fc <UTIL_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
3401d170:	786a      	ldrb	r2, [r5, #1]
3401d172:	041b      	lsls	r3, r3, #16
3401d174:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
3401d178:	78aa      	ldrb	r2, [r5, #2]
3401d17a:	431a      	orrs	r2, r3
      break;
3401d17c:	e7d3      	b.n	3401d126 <UTIL_LCD_DisplayChar+0x6e>
        if(line & (1 << (width- j + offset- 1)))
3401d17e:	ebaa 030e 	sub.w	r3, sl, lr
3401d182:	fa0c f303 	lsl.w	r3, ip, r3
3401d186:	4213      	tst	r3, r2
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
3401d188:	bf14      	ite	ne
3401d18a:	6807      	ldrne	r7, [r0, #0]
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
3401d18c:	6847      	ldreq	r7, [r0, #4]
      for (j = 0; j < width; j++)
3401d18e:	f10e 0e01 	add.w	lr, lr, #1
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
3401d192:	f3c7 03c4 	ubfx	r3, r7, #3, #5
3401d196:	ea4f 4bd7 	mov.w	fp, r7, lsr #19
3401d19a:	097f      	lsrs	r7, r7, #5
3401d19c:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
3401d1a0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
3401d1a4:	433b      	orrs	r3, r7
3401d1a6:	b29b      	uxth	r3, r3
          rgb16[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
3401d1a8:	f829 3b02 	strh.w	r3, [r9], #2
      for (j = 0; j < width; j++)
3401d1ac:	e7d1      	b.n	3401d152 <UTIL_LCD_DisplayChar+0x9a>
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401d1ae:	2f01      	cmp	r7, #1
3401d1b0:	d126      	bne.n	3401d200 <UTIL_LCD_DisplayChar+0x148>
      for (j = 0; j < width*3; j = j+ 3)
3401d1b2:	f04f 0c00 	mov.w	ip, #0
        if(line & (1 << (width- j/3 + offset- 1)))
3401d1b6:	f04f 0b03 	mov.w	fp, #3
3401d1ba:	9b03      	ldr	r3, [sp, #12]
3401d1bc:	ae0a      	add	r6, sp, #40	@ 0x28
3401d1be:	f103 3aff 	add.w	sl, r3, #4294967295
      for (j = 0; j < width*3; j = j+ 3)
3401d1c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401d1c4:	459c      	cmp	ip, r3
3401d1c6:	d302      	bcc.n	3401d1ce <UTIL_LCD_DisplayChar+0x116>
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, &rgb8[0], width, 1);
3401d1c8:	2301      	movs	r3, #1
3401d1ca:	9300      	str	r3, [sp, #0]
3401d1cc:	e7c5      	b.n	3401d15a <UTIL_LCD_DisplayChar+0xa2>
        if(line & (1 << (width- j/3 + offset- 1)))
3401d1ce:	fbbc f3fb 	udiv	r3, ip, fp
3401d1d2:	ebaa 0303 	sub.w	r3, sl, r3
3401d1d6:	fa07 f303 	lsl.w	r3, r7, r3
3401d1da:	4213      	tst	r3, r2
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
3401d1dc:	bf14      	ite	ne
3401d1de:	6803      	ldrne	r3, [r0, #0]
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
3401d1e0:	6843      	ldreq	r3, [r0, #4]
      for (j = 0; j < width*3; j = j+ 3)
3401d1e2:	f10c 0c03 	add.w	ip, ip, #3
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) & 0xFFU;
3401d1e6:	fa5f f983 	uxtb.w	r9, r3
          rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 8) & 0xFFU;
3401d1ea:	f3c3 2e07 	ubfx	lr, r3, #8, #8
          rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].BackColor)) >> 16) & 0xFFU;
3401d1ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
          rgb8[j] = CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) & 0xFFU;
3401d1f2:	f886 9000 	strb.w	r9, [r6]
          rgb8[j + 1U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 8) & 0xFFU;
3401d1f6:	f886 e001 	strb.w	lr, [r6, #1]
          rgb8[j + 2U] = (CONVERTARGB88882RGB888((DrawProp[DrawProp->LcdLayer].TextColor)) >> 16) & 0xFFU;
3401d1fa:	70b3      	strb	r3, [r6, #2]
      for (j = 0; j < width*3; j = j+ 3)
3401d1fc:	3603      	adds	r6, #3
3401d1fe:	e7e0      	b.n	3401d1c2 <UTIL_LCD_DisplayChar+0x10a>
    else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401d200:	2f04      	cmp	r7, #4
3401d202:	d01f      	beq.n	3401d244 <UTIL_LCD_DisplayChar+0x18c>
        if(line & (1 << (width- j + offset- 1)))
3401d204:	f04f 0a01 	mov.w	sl, #1
      for (j = 0; j < width; j++)
3401d208:	2700      	movs	r7, #0
3401d20a:	4656      	mov	r6, sl
        if(line & (1 << (width- j + offset- 1)))
3401d20c:	9b03      	ldr	r3, [sp, #12]
3401d20e:	42bc      	cmp	r4, r7
3401d210:	f103 3bff 	add.w	fp, r3, #4294967295
3401d214:	eb04 0306 	add.w	r3, r4, r6
3401d218:	bf14      	ite	ne
3401d21a:	469c      	movne	ip, r3
3401d21c:	46d4      	moveq	ip, sl
3401d21e:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401d222:	f1bc 0c01 	subs.w	ip, ip, #1
3401d226:	d0cf      	beq.n	3401d1c8 <UTIL_LCD_DisplayChar+0x110>
        if(line & (1 << (width- j + offset- 1)))
3401d228:	ebab 0e07 	sub.w	lr, fp, r7
3401d22c:	6843      	ldr	r3, [r0, #4]
3401d22e:	fa0a fe0e 	lsl.w	lr, sl, lr
3401d232:	ea1e 0f02 	tst.w	lr, r2
          argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
3401d236:	6806      	ldr	r6, [r0, #0]
        if(line & (1 << (width- j + offset- 1)))
3401d238:	bf08      	it	eq
3401d23a:	461e      	moveq	r6, r3
      for (j = 0; j < width; j++)
3401d23c:	3701      	adds	r7, #1
          argb32[j] = DrawProp[DrawProp->LcdLayer].TextColor;
3401d23e:	f849 6b04 	str.w	r6, [r9], #4
      for (j = 0; j < width; j++)
3401d242:	e7ee      	b.n	3401d222 <UTIL_LCD_DisplayChar+0x16a>
3401d244:	f04f 0c01 	mov.w	ip, #1
        if(line & (1 << (width- j + offset- 1)))
3401d248:	9b03      	ldr	r3, [sp, #12]
      for (j = 0; j < width; j++)
3401d24a:	f04f 0e00 	mov.w	lr, #0
        if(line & (1 << (width- j + offset- 1)))
3401d24e:	f103 3bff 	add.w	fp, r3, #4294967295
3401d252:	4663      	mov	r3, ip
3401d254:	4574      	cmp	r4, lr
3401d256:	eb04 0603 	add.w	r6, r4, r3
3401d25a:	bf08      	it	eq
3401d25c:	4666      	moveq	r6, ip
3401d25e:	f10d 0a28 	add.w	sl, sp, #40	@ 0x28
      for (j = 0; j < width; j++)
3401d262:	3e01      	subs	r6, #1
3401d264:	f43f af77 	beq.w	3401d156 <UTIL_LCD_DisplayChar+0x9e>
        if(line & (1 << (width- j + offset- 1)))
3401d268:	ebab 030e 	sub.w	r3, fp, lr
3401d26c:	fa0c f303 	lsl.w	r3, ip, r3
3401d270:	4213      	tst	r3, r2
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
3401d272:	bf14      	ite	ne
3401d274:	6807      	ldrne	r7, [r0, #0]
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
3401d276:	6847      	ldreq	r7, [r0, #4]
      for (j = 0; j < width; j++)
3401d278:	f10e 0e01 	add.w	lr, lr, #1
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].BackColor);
3401d27c:	0f3b      	lsrs	r3, r7, #28
3401d27e:	f3c7 1903 	ubfx	r9, r7, #4, #4
3401d282:	ea49 3903 	orr.w	r9, r9, r3, lsl #12
3401d286:	0a3b      	lsrs	r3, r7, #8
3401d288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
3401d28c:	0b3f      	lsrs	r7, r7, #12
3401d28e:	ea49 0303 	orr.w	r3, r9, r3
3401d292:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
3401d296:	433b      	orrs	r3, r7
          argb4444[j] = CONVERTARGB88882ARGB4444(DrawProp[DrawProp->LcdLayer].TextColor);
3401d298:	f82a 3b02 	strh.w	r3, [sl], #2
      for (j = 0; j < width; j++)
3401d29c:	e7e1      	b.n	3401d262 <UTIL_LCD_DisplayChar+0x1aa>
3401d29e:	bf00      	nop
3401d2a0:	34146260 	.word	0x34146260

3401d2a4 <UTIL_LCD_DisplayStringAt>:
{
3401d2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401d2a8:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 3401d334 <UTIL_LCD_DisplayStringAt+0x90>
{
3401d2ac:	4605      	mov	r5, r0
  while (*ptr++) size ++ ;
3401d2ae:	4610      	mov	r0, r2
{
3401d2b0:	4699      	mov	r9, r3
3401d2b2:	4616      	mov	r6, r2
3401d2b4:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
3401d2b6:	f7e3 fa6b 	bl	34000790 <strlen>
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401d2ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
  switch (Mode)
3401d2be:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (DrawProp[DrawProp->LcdLayer].LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
3401d2c2:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401d2c6:	689a      	ldr	r2, [r3, #8]
3401d2c8:	695c      	ldr	r4, [r3, #20]
3401d2ca:	8892      	ldrh	r2, [r2, #4]
3401d2cc:	fbb4 f4f2 	udiv	r4, r4, r2
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
3401d2d0:	eba4 0400 	sub.w	r4, r4, r0
3401d2d4:	fb02 f404 	mul.w	r4, r2, r4
  switch (Mode)
3401d2d8:	d01b      	beq.n	3401d312 <UTIL_LCD_DisplayStringAt+0x6e>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
3401d2da:	1b64      	subs	r4, r4, r5
3401d2dc:	f1b9 0f02 	cmp.w	r9, #2
3401d2e0:	bf08      	it	eq
3401d2e2:	4625      	moveq	r5, r4
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
3401d2e4:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
3401d2e8:	1e6a      	subs	r2, r5, #1
    refcolumn = 1;
3401d2ea:	429a      	cmp	r2, r3
3401d2ec:	bf88      	it	hi
3401d2ee:	2501      	movhi	r5, #1
3401d2f0:	2400      	movs	r4, #0
  while ((*Text != 0) & (((DrawProp[DrawProp->LcdLayer].LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
3401d2f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
3401d2f6:	5d32      	ldrb	r2, [r6, r4]
3401d2f8:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401d2fc:	6899      	ldr	r1, [r3, #8]
3401d2fe:	695b      	ldr	r3, [r3, #20]
3401d300:	8889      	ldrh	r1, [r1, #4]
3401d302:	fb04 3311 	mls	r3, r4, r1, r3
3401d306:	b29b      	uxth	r3, r3
3401d308:	4299      	cmp	r1, r3
3401d30a:	d800      	bhi.n	3401d30e <UTIL_LCD_DisplayStringAt+0x6a>
3401d30c:	b922      	cbnz	r2, 3401d318 <UTIL_LCD_DisplayStringAt+0x74>
}
3401d30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
3401d312:	eb05 0554 	add.w	r5, r5, r4, lsr #1
      break;
3401d316:	e7e5      	b.n	3401d2e4 <UTIL_LCD_DisplayStringAt+0x40>
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
3401d318:	4628      	mov	r0, r5
3401d31a:	4639      	mov	r1, r7
3401d31c:	f7ff fecc 	bl	3401d0b8 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
3401d320:	f8d8 300c 	ldr.w	r3, [r8, #12]
    i++;
3401d324:	3401      	adds	r4, #1
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
3401d326:	eb08 1343 	add.w	r3, r8, r3, lsl #5
3401d32a:	689b      	ldr	r3, [r3, #8]
3401d32c:	889b      	ldrh	r3, [r3, #4]
3401d32e:	441d      	add	r5, r3
    i++;
3401d330:	e7df      	b.n	3401d2f2 <UTIL_LCD_DisplayStringAt+0x4e>
3401d332:	bf00      	nop
3401d334:	34146260 	.word	0x34146260

3401d338 <UTIL_LCD_DrawRect>:
{
3401d338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401d33c:	461f      	mov	r7, r3
3401d33e:	460e      	mov	r6, r1
3401d340:	4605      	mov	r5, r0
3401d342:	4614      	mov	r4, r2
3401d344:	f8dd 8018 	ldr.w	r8, [sp, #24]
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
3401d348:	4643      	mov	r3, r8
3401d34a:	f7ff fe49 	bl	3401cfe0 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
3401d34e:	1e79      	subs	r1, r7, #1
3401d350:	4643      	mov	r3, r8
3401d352:	4622      	mov	r2, r4
3401d354:	4628      	mov	r0, r5
3401d356:	4431      	add	r1, r6
3401d358:	f7ff fe42 	bl	3401cfe0 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401d35c:	3c01      	subs	r4, #1
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
3401d35e:	4643      	mov	r3, r8
3401d360:	463a      	mov	r2, r7
3401d362:	4631      	mov	r1, r6
3401d364:	4628      	mov	r0, r5
3401d366:	f7ff fe71 	bl	3401d04c <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401d36a:	4643      	mov	r3, r8
3401d36c:	463a      	mov	r2, r7
3401d36e:	4631      	mov	r1, r6
3401d370:	1960      	adds	r0, r4, r5
}
3401d372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
3401d376:	f7ff be69 	b.w	3401d04c <UTIL_LCD_DrawVLine>
	...

3401d37c <UTIL_LCD_FillRect>:
{
3401d37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401d37e:	4607      	mov	r7, r0
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d380:	481a      	ldr	r0, [pc, #104]	@ (3401d3ec <UTIL_LCD_FillRect+0x70>)
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401d382:	4e1b      	ldr	r6, [pc, #108]	@ (3401d3f0 <UTIL_LCD_FillRect+0x74>)
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d384:	68c5      	ldr	r5, [r0, #12]
{
3401d386:	9c08      	ldr	r4, [sp, #32]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d388:	eb00 1545 	add.w	r5, r0, r5, lsl #5
3401d38c:	69ed      	ldr	r5, [r5, #28]
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401d38e:	6936      	ldr	r6, [r6, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d390:	2d02      	cmp	r5, #2
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401d392:	6900      	ldr	r0, [r0, #16]
  if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
3401d394:	d10c      	bne.n	3401d3b0 <UTIL_LCD_FillRect+0x34>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
3401d396:	0965      	lsrs	r5, r4, #5
3401d398:	ea4f 2c14 	mov.w	ip, r4, lsr #8
3401d39c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
3401d3a0:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
3401d3a4:	ea45 050c 	orr.w	r5, r5, ip
3401d3a8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Color));
3401d3ac:	432c      	orrs	r4, r5
3401d3ae:	e003      	b.n	3401d3b8 <UTIL_LCD_FillRect+0x3c>
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB888)
3401d3b0:	2d01      	cmp	r5, #1
3401d3b2:	d109      	bne.n	3401d3c8 <UTIL_LCD_FillRect+0x4c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB888(Color));
3401d3b4:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
3401d3b8:	e9cd 3400 	strd	r3, r4, [sp]
3401d3bc:	4613      	mov	r3, r2
3401d3be:	460a      	mov	r2, r1
3401d3c0:	4639      	mov	r1, r7
3401d3c2:	47b0      	blx	r6
}
3401d3c4:	b003      	add	sp, #12
3401d3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_ARGB4444)
3401d3c8:	2d04      	cmp	r5, #4
3401d3ca:	d1f5      	bne.n	3401d3b8 <UTIL_LCD_FillRect+0x3c>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882ARGB4444(Color));
3401d3cc:	ea4f 7c14 	mov.w	ip, r4, lsr #28
3401d3d0:	f3c4 1503 	ubfx	r5, r4, #4, #4
3401d3d4:	ea45 350c 	orr.w	r5, r5, ip, lsl #12
3401d3d8:	ea4f 2c14 	mov.w	ip, r4, lsr #8
3401d3dc:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
3401d3e0:	0b24      	lsrs	r4, r4, #12
3401d3e2:	ea45 050c 	orr.w	r5, r5, ip
3401d3e6:	f404 6470 	and.w	r4, r4, #3840	@ 0xf00
3401d3ea:	e7df      	b.n	3401d3ac <UTIL_LCD_FillRect+0x30>
3401d3ec:	34146260 	.word	0x34146260
3401d3f0:	34146234 	.word	0x34146234

3401d3f4 <UTIL_LCD_Clear>:
{
3401d3f4:	b507      	push	{r0, r1, r2, lr}
  UTIL_LCD_FillRect(0, 0, DrawProp[DrawProp->LcdLayer].LcdXsize, DrawProp[DrawProp->LcdLayer].LcdYsize, Color);
3401d3f6:	2100      	movs	r1, #0
3401d3f8:	4a06      	ldr	r2, [pc, #24]	@ (3401d414 <UTIL_LCD_Clear+0x20>)
3401d3fa:	68d3      	ldr	r3, [r2, #12]
3401d3fc:	9000      	str	r0, [sp, #0]
3401d3fe:	eb02 1243 	add.w	r2, r2, r3, lsl #5
3401d402:	4608      	mov	r0, r1
3401d404:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
3401d408:	f7ff ffb8 	bl	3401d37c <UTIL_LCD_FillRect>
}
3401d40c:	b003      	add	sp, #12
3401d40e:	f85d fb04 	ldr.w	pc, [sp], #4
3401d412:	bf00      	nop
3401d414:	34146260 	.word	0x34146260

3401d418 <clamp_point>:
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

static int clamp_point(int *x, int *y)
{
  int xi = *x;
3401d418:	6803      	ldr	r3, [r0, #0]
{
3401d41a:	b510      	push	{r4, lr}
  int yi = *y;

  if (*x < 0)
3401d41c:	2b00      	cmp	r3, #0
    *x = 0;
3401d41e:	bfb8      	it	lt
3401d420:	2400      	movlt	r4, #0
  int yi = *y;
3401d422:	680a      	ldr	r2, [r1, #0]
    *x = 0;
3401d424:	bfb8      	it	lt
3401d426:	6004      	strlt	r4, [r0, #0]
  if (*y < 0)
3401d428:	680c      	ldr	r4, [r1, #0]
3401d42a:	2c00      	cmp	r4, #0
    *y = 0;
3401d42c:	bfbc      	itt	lt
3401d42e:	2400      	movlt	r4, #0
3401d430:	600c      	strlt	r4, [r1, #0]
  if (*x >= lcd_bg_area.XSize)
3401d432:	6804      	ldr	r4, [r0, #0]
3401d434:	f5b4 7f48 	cmp.w	r4, #800	@ 0x320
    *x = lcd_bg_area.XSize - 1;
3401d438:	bf24      	itt	cs
3401d43a:	f240 341f 	movwcs	r4, #799	@ 0x31f
3401d43e:	6004      	strcs	r4, [r0, #0]
  if (*y >= lcd_bg_area.YSize)
3401d440:	680c      	ldr	r4, [r1, #0]
3401d442:	f5b4 7ff0 	cmp.w	r4, #480	@ 0x1e0
    *y = lcd_bg_area.YSize - 1;
3401d446:	bf24      	itt	cs
3401d448:	f240 14df 	movwcs	r4, #479	@ 0x1df
3401d44c:	600c      	strcs	r4, [r1, #0]

  return (xi != *x) || (yi != *y);
3401d44e:	6800      	ldr	r0, [r0, #0]
3401d450:	4298      	cmp	r0, r3
3401d452:	d104      	bne.n	3401d45e <clamp_point+0x46>
3401d454:	6808      	ldr	r0, [r1, #0]
3401d456:	1a80      	subs	r0, r0, r2
3401d458:	bf18      	it	ne
3401d45a:	2001      	movne	r0, #1
}
3401d45c:	bd10      	pop	{r4, pc}
  return (xi != *x) || (yi != *y);
3401d45e:	2001      	movs	r0, #1
3401d460:	e7fc      	b.n	3401d45c <clamp_point+0x44>
	...

3401d464 <convert_length>:

// Added until here

static void convert_length(float32_t wi, float32_t hi, int *wo, int *ho)
{
  *wo = (int) (lcd_bg_area.XSize * wi);
3401d464:	eddf 7a08 	vldr	s15, [pc, #32]	@ 3401d488 <convert_length+0x24>
3401d468:	ee20 0a27 	vmul.f32	s0, s0, s15
  *ho = (int) (lcd_bg_area.YSize * hi);
3401d46c:	eddf 7a07 	vldr	s15, [pc, #28]	@ 3401d48c <convert_length+0x28>
3401d470:	ee60 0aa7 	vmul.f32	s1, s1, s15
  *wo = (int) (lcd_bg_area.XSize * wi);
3401d474:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  *ho = (int) (lcd_bg_area.YSize * hi);
3401d478:	eefd 0ae0 	vcvt.s32.f32	s1, s1
  *wo = (int) (lcd_bg_area.XSize * wi);
3401d47c:	ed80 0a00 	vstr	s0, [r0]
  *ho = (int) (lcd_bg_area.YSize * hi);
3401d480:	edc1 0a00 	vstr	s1, [r1]
}
3401d484:	4770      	bx	lr
3401d486:	bf00      	nop
3401d488:	44480000 	.word	0x44480000
3401d48c:	43f00000 	.word	0x43f00000

3401d490 <bqueue_get_free>:
{
3401d490:	b510      	push	{r4, lr}
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401d492:	4249      	negs	r1, r1
{
3401d494:	4604      	mov	r4, r0
  ret = xSemaphoreTake(bq->free, is_blocking ? portMAX_DELAY : 0);
3401d496:	6800      	ldr	r0, [r0, #0]
3401d498:	f7ed f96a 	bl	3400a770 <xQueueSemaphoreTake>
  if (ret == pdFALSE)
3401d49c:	b170      	cbz	r0, 3401d4bc <bqueue_get_free+0x2c>
  res = bq->buffers[bq->free_idx];
3401d49e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3401d4a2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
3401d4a6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	@ 0xac
  bq->free_idx = (bq->free_idx + 1) % bq->buffer_nb;
3401d4aa:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
3401d4ae:	3301      	adds	r3, #1
3401d4b0:	fb93 f1f2 	sdiv	r1, r3, r2
3401d4b4:	fb02 3311 	mls	r3, r2, r1, r3
3401d4b8:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
}
3401d4bc:	bd10      	pop	{r4, pc}
	...

3401d4c0 <isp_thread_fct>:
    disp_ms = HAL_GetTick() - ts;
  }
}

static void isp_thread_fct(void *arg)
{
3401d4c0:	b510      	push	{r4, lr}
  int ret;

  while (1) {
    ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
3401d4c2:	4c09      	ldr	r4, [pc, #36]	@ (3401d4e8 <isp_thread_fct+0x28>)
3401d4c4:	f04f 31ff 	mov.w	r1, #4294967295
3401d4c8:	6820      	ldr	r0, [r4, #0]
3401d4ca:	f7ed f951 	bl	3400a770 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401d4ce:	2801      	cmp	r0, #1
3401d4d0:	d006      	beq.n	3401d4e0 <isp_thread_fct+0x20>
3401d4d2:	f240 61df 	movw	r1, #1759	@ 0x6df
3401d4d6:	4b05      	ldr	r3, [pc, #20]	@ (3401d4ec <isp_thread_fct+0x2c>)
3401d4d8:	4a05      	ldr	r2, [pc, #20]	@ (3401d4f0 <isp_thread_fct+0x30>)
3401d4da:	4806      	ldr	r0, [pc, #24]	@ (3401d4f4 <isp_thread_fct+0x34>)
3401d4dc:	f001 fe72 	bl	3401f1c4 <__assert_func>

    CAM_IspUpdate();
3401d4e0:	f001 face 	bl	3401ea80 <CAM_IspUpdate>
    ret = xSemaphoreTake(isp_sem, portMAX_DELAY);
3401d4e4:	e7ee      	b.n	3401d4c4 <isp_thread_fct+0x4>
3401d4e6:	bf00      	nop
3401d4e8:	34149788 	.word	0x34149788
3401d4ec:	340263dc 	.word	0x340263dc
3401d4f0:	34106249 	.word	0x34106249
3401d4f4:	3402bf69 	.word	0x3402bf69

3401d4f8 <on_pd_toggle_button_click>:
  turn_people_detection = !turn_people_detection;
3401d4f8:	4a04      	ldr	r2, [pc, #16]	@ (3401d50c <on_pd_toggle_button_click+0x14>)
  printf("Button pressed. \n \r");
3401d4fa:	4805      	ldr	r0, [pc, #20]	@ (3401d510 <on_pd_toggle_button_click+0x18>)
  turn_people_detection = !turn_people_detection;
3401d4fc:	6813      	ldr	r3, [r2, #0]
3401d4fe:	fab3 f383 	clz	r3, r3
3401d502:	095b      	lsrs	r3, r3, #5
3401d504:	6013      	str	r3, [r2, #0]
  printf("Button pressed. \n \r");
3401d506:	f002 bd09 	b.w	3401ff1c <iprintf>
3401d50a:	bf00      	nop
3401d50c:	3410cdb0 	.word	0x3410cdb0
3401d510:	3402bf8e 	.word	0x3402bf8e

3401d514 <TRK_Init>:
{
3401d514:	b530      	push	{r4, r5, lr}
3401d516:	b08b      	sub	sp, #44	@ 0x2c
  const trk_conf_t cfg = {
3401d518:	466c      	mov	r4, sp
3401d51a:	4d08      	ldr	r5, [pc, #32]	@ (3401d53c <TRK_Init+0x28>)
3401d51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3401d51e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401d520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3401d522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3401d524:	e895 0003 	ldmia.w	r5, {r0, r1}
  return trk_init(&trk_ctx, (trk_conf_t *) &cfg, ARRAY_NB(tboxes), tboxes);
3401d528:	2214      	movs	r2, #20
  const trk_conf_t cfg = {
3401d52a:	e884 0003 	stmia.w	r4, {r0, r1}
  return trk_init(&trk_ctx, (trk_conf_t *) &cfg, ARRAY_NB(tboxes), tboxes);
3401d52e:	4b04      	ldr	r3, [pc, #16]	@ (3401d540 <TRK_Init+0x2c>)
3401d530:	4669      	mov	r1, sp
3401d532:	4804      	ldr	r0, [pc, #16]	@ (3401d544 <TRK_Init+0x30>)
3401d534:	f7f0 faab 	bl	3400da8e <trk_init>
}
3401d538:	b00b      	add	sp, #44	@ 0x2c
3401d53a:	bd30      	pop	{r4, r5, pc}
3401d53c:	34026358 	.word	0x34026358
3401d540:	34146538 	.word	0x34146538
3401d544:	341462a8 	.word	0x341462a8

3401d548 <bqueue_get_ready>:
{
3401d548:	b510      	push	{r4, lr}
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401d54a:	f04f 31ff 	mov.w	r1, #4294967295
{
3401d54e:	4604      	mov	r4, r0
  ret = xSemaphoreTake(bq->ready, portMAX_DELAY);
3401d550:	6d40      	ldr	r0, [r0, #84]	@ 0x54
3401d552:	f7ed f90d 	bl	3400a770 <xQueueSemaphoreTake>
  assert(ret == pdTRUE);
3401d556:	2801      	cmp	r0, #1
3401d558:	d006      	beq.n	3401d568 <bqueue_get_ready+0x20>
3401d55a:	f240 2155 	movw	r1, #597	@ 0x255
3401d55e:	4b0a      	ldr	r3, [pc, #40]	@ (3401d588 <bqueue_get_ready+0x40>)
3401d560:	4a0a      	ldr	r2, [pc, #40]	@ (3401d58c <bqueue_get_ready+0x44>)
3401d562:	480b      	ldr	r0, [pc, #44]	@ (3401d590 <bqueue_get_ready+0x48>)
3401d564:	f001 fe2e 	bl	3401f1c4 <__assert_func>
  res = bq->buffers[bq->ready_idx];
3401d568:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
3401d56c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
3401d570:	f8d2 00ac 	ldr.w	r0, [r2, #172]	@ 0xac
  bq->ready_idx = (bq->ready_idx + 1) % bq->buffer_nb;
3401d574:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
3401d578:	3301      	adds	r3, #1
3401d57a:	fb93 f1f2 	sdiv	r1, r3, r2
3401d57e:	fb02 3311 	mls	r3, r2, r1, r3
3401d582:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
}
3401d586:	bd10      	pop	{r4, pc}
3401d588:	340263dc 	.word	0x340263dc
3401d58c:	341061ee 	.word	0x341061ee
3401d590:	3402bf69 	.word	0x3402bf69

3401d594 <bqueue_init.constprop.0>:
static int bqueue_init(bqueue_t *bq, int buffer_nb, uint8_t **buffers)
3401d594:	b538      	push	{r3, r4, r5, lr}
3401d596:	460d      	mov	r5, r1
  bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
3401d598:	2102      	movs	r1, #2
static int bqueue_init(bqueue_t *bq, int buffer_nb, uint8_t **buffers)
3401d59a:	4604      	mov	r4, r0
  bq->free = xSemaphoreCreateCountingStatic(buffer_nb, buffer_nb, &bq->free_buffer);
3401d59c:	1d02      	adds	r2, r0, #4
3401d59e:	4608      	mov	r0, r1
3401d5a0:	f7ec ff22 	bl	3400a3e8 <xQueueCreateCountingSemaphoreStatic>
3401d5a4:	6020      	str	r0, [r4, #0]
  if (!bq->free)
3401d5a6:	b150      	cbz	r0, 3401d5be <bqueue_init.constprop.0+0x2a>
  bq->ready = xSemaphoreCreateCountingStatic(buffer_nb, 0, &bq->ready_buffer);
3401d5a8:	2100      	movs	r1, #0
3401d5aa:	2002      	movs	r0, #2
3401d5ac:	f104 0258 	add.w	r2, r4, #88	@ 0x58
3401d5b0:	f7ec ff1a 	bl	3400a3e8 <xQueueCreateCountingSemaphoreStatic>
3401d5b4:	6560      	str	r0, [r4, #84]	@ 0x54
  if (!bq->ready)
3401d5b6:	b928      	cbnz	r0, 3401d5c4 <bqueue_init.constprop.0+0x30>
  vSemaphoreDelete(bq->free);
3401d5b8:	6820      	ldr	r0, [r4, #0]
3401d5ba:	f7ed f9d9 	bl	3400a970 <vQueueDelete>
    return -1;
3401d5be:	f04f 30ff 	mov.w	r0, #4294967295
3401d5c2:	e00d      	b.n	3401d5e0 <bqueue_init.constprop.0+0x4c>
  bq->buffer_nb = buffer_nb;
3401d5c4:	2302      	movs	r3, #2
3401d5c6:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    assert(buffers[i]);
3401d5ca:	682b      	ldr	r3, [r5, #0]
3401d5cc:	b14b      	cbz	r3, 3401d5e2 <bqueue_init.constprop.0+0x4e>
    bq->buffers[i] = buffers[i];
3401d5ce:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
    assert(buffers[i]);
3401d5d2:	686b      	ldr	r3, [r5, #4]
3401d5d4:	b12b      	cbz	r3, 3401d5e2 <bqueue_init.constprop.0+0x4e>
  bq->free_idx = 0;
3401d5d6:	2000      	movs	r0, #0
  bq->ready_idx = 0;
3401d5d8:	e9c4 002d 	strd	r0, r0, [r4, #180]	@ 0xb4
    bq->buffers[i] = buffers[i];
3401d5dc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
}
3401d5e0:	bd38      	pop	{r3, r4, r5, pc}
    assert(buffers[i]);
3401d5e2:	f240 212a 	movw	r1, #554	@ 0x22a
3401d5e6:	4b02      	ldr	r3, [pc, #8]	@ (3401d5f0 <bqueue_init.constprop.0+0x5c>)
3401d5e8:	4a02      	ldr	r2, [pc, #8]	@ (3401d5f4 <bqueue_init.constprop.0+0x60>)
3401d5ea:	4803      	ldr	r0, [pc, #12]	@ (3401d5f8 <bqueue_init.constprop.0+0x64>)
3401d5ec:	f001 fdea 	bl	3401f1c4 <__assert_func>
3401d5f0:	3402bfa2 	.word	0x3402bfa2
3401d5f4:	3410611b 	.word	0x3410611b
3401d5f8:	3402bf69 	.word	0x3402bf69

3401d5fc <cpuload_update.constprop.0>:
static void cpuload_update(cpuload_info_t *cpu_load)
3401d5fc:	b570      	push	{r4, r5, r6, lr}
  cpu_load->history[1] = cpu_load->history[0];
3401d5fe:	4c15      	ldr	r4, [pc, #84]	@ (3401d654 <cpuload_update.constprop.0+0x58>)
3401d600:	f104 0538 	add.w	r5, r4, #56	@ 0x38
3401d604:	f104 0620 	add.w	r6, r4, #32
3401d608:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
3401d60a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
3401d60c:	e896 0003 	ldmia.w	r6, {r0, r1}
3401d610:	e885 0003 	stmia.w	r5, {r0, r1}
  cpu_load->history[0].total = portGET_RUN_TIME_COUNTER_VALUE();
3401d614:	f001 fac8 	bl	3401eba8 <TIM4_Get_Value>
3401d618:	2300      	movs	r3, #0
3401d61a:	4605      	mov	r5, r0
3401d61c:	6263      	str	r3, [r4, #36]	@ 0x24
3401d61e:	6220      	str	r0, [r4, #32]
  cpu_load->history[0].thread = cpu_load->history[0].total - ulTaskGetIdleRunTimeCounter();
3401d620:	f7ed fff4 	bl	3400b60c <ulTaskGetIdleRunTimeCounter>
3401d624:	1a2d      	subs	r5, r5, r0
3401d626:	eb63 0303 	sbc.w	r3, r3, r3
3401d62a:	e9c4 530a 	strd	r5, r3, [r4, #40]	@ 0x28
  cpu_load->history[0].tick = HAL_GetTick();
3401d62e:	f001 fa67 	bl	3401eb00 <HAL_GetTick>
  if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
3401d632:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3401d634:	6e22      	ldr	r2, [r4, #96]	@ 0x60
  cpu_load->history[0].tick = HAL_GetTick();
3401d636:	6320      	str	r0, [r4, #48]	@ 0x30
  if (cpu_load->history[1].tick - cpu_load->history[2].tick < 1000)
3401d638:	1a9b      	subs	r3, r3, r2
3401d63a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
3401d63e:	d308      	bcc.n	3401d652 <cpuload_update.constprop.0+0x56>
    cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i - 1];
3401d640:	f104 0138 	add.w	r1, r4, #56	@ 0x38
3401d644:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401d648:	2290      	movs	r2, #144	@ 0x90
}
3401d64a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i] = cpu_load->history[CPU_LOAD_HISTORY_DEPTH - 1 - i - 1];
3401d64e:	f002 bde9 	b.w	34020224 <memmove>
}
3401d652:	bd70      	pop	{r4, r5, r6, pc}
3401d654:	341f7cb8 	.word	0x341f7cb8

3401d658 <bqueue_put_ready>:
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401d658:	2300      	movs	r3, #0
{
3401d65a:	b513      	push	{r0, r1, r4, lr}
3401d65c:	4604      	mov	r4, r0
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401d65e:	9301      	str	r3, [sp, #4]
  if (xPortIsInsideInterrupt()) {
3401d660:	f7ee fac0 	bl	3400bbe4 <xPortIsInsideInterrupt>
3401d664:	4603      	mov	r3, r0
3401d666:	b1b0      	cbz	r0, 3401d696 <bqueue_put_ready+0x3e>
    ret = xSemaphoreGiveFromISR(bq->ready, &xHigherPriorityTaskWoken);
3401d668:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401d66a:	a901      	add	r1, sp, #4
3401d66c:	f7ec ff94 	bl	3400a598 <xQueueGiveFromISR>
    assert(ret == pdTRUE);
3401d670:	2801      	cmp	r0, #1
3401d672:	d006      	beq.n	3401d682 <bqueue_put_ready+0x2a>
3401d674:	f44f 7119 	mov.w	r1, #612	@ 0x264
3401d678:	4b0d      	ldr	r3, [pc, #52]	@ (3401d6b0 <bqueue_put_ready+0x58>)
3401d67a:	4a0e      	ldr	r2, [pc, #56]	@ (3401d6b4 <bqueue_put_ready+0x5c>)
    assert(ret == pdTRUE);
3401d67c:	480e      	ldr	r0, [pc, #56]	@ (3401d6b8 <bqueue_put_ready+0x60>)
3401d67e:	f001 fda1 	bl	3401f1c4 <__assert_func>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401d682:	9b01      	ldr	r3, [sp, #4]
3401d684:	b12b      	cbz	r3, 3401d692 <bqueue_put_ready+0x3a>
3401d686:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401d68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401d68e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
}
3401d692:	b002      	add	sp, #8
3401d694:	bd10      	pop	{r4, pc}
    ret = xSemaphoreGive(bq->ready);
3401d696:	4602      	mov	r2, r0
3401d698:	4601      	mov	r1, r0
3401d69a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401d69c:	f7ec fec4 	bl	3400a428 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401d6a0:	2801      	cmp	r0, #1
3401d6a2:	d0f6      	beq.n	3401d692 <bqueue_put_ready+0x3a>
3401d6a4:	f44f 711a 	mov.w	r1, #616	@ 0x268
3401d6a8:	4b01      	ldr	r3, [pc, #4]	@ (3401d6b0 <bqueue_put_ready+0x58>)
3401d6aa:	4a02      	ldr	r2, [pc, #8]	@ (3401d6b4 <bqueue_put_ready+0x5c>)
3401d6ac:	e7e6      	b.n	3401d67c <bqueue_put_ready+0x24>
3401d6ae:	bf00      	nop
3401d6b0:	340263dc 	.word	0x340263dc
3401d6b4:	34106134 	.word	0x34106134
3401d6b8:	3402bf69 	.word	0x3402bf69

3401d6bc <bqueue_put_free.isra.0>:
static void bqueue_put_free(bqueue_t *bq)
3401d6bc:	b508      	push	{r3, lr}
  ret = xSemaphoreGive(bq->free);
3401d6be:	2300      	movs	r3, #0
3401d6c0:	461a      	mov	r2, r3
3401d6c2:	4619      	mov	r1, r3
3401d6c4:	f7ec feb0 	bl	3400a428 <xQueueGenericSend>
  assert(ret == pdTRUE);
3401d6c8:	2801      	cmp	r0, #1
3401d6ca:	d006      	beq.n	3401d6da <bqueue_put_free.isra.0+0x1e>
3401d6cc:	f44f 7113 	mov.w	r1, #588	@ 0x24c
3401d6d0:	4b02      	ldr	r3, [pc, #8]	@ (3401d6dc <bqueue_put_free.isra.0+0x20>)
3401d6d2:	4a03      	ldr	r2, [pc, #12]	@ (3401d6e0 <bqueue_put_free.isra.0+0x24>)
3401d6d4:	4803      	ldr	r0, [pc, #12]	@ (3401d6e4 <bqueue_put_free.isra.0+0x28>)
3401d6d6:	f001 fd75 	bl	3401f1c4 <__assert_func>
}
3401d6da:	bd08      	pop	{r3, pc}
3401d6dc:	340263dc 	.word	0x340263dc
3401d6e0:	341061ad 	.word	0x341061ad
3401d6e4:	3402bf69 	.word	0x3402bf69

3401d6e8 <pp_thread_fct>:
{
3401d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401d6ec:	b09b      	sub	sp, #108	@ 0x6c
  app_postprocess_init(&pp_params);
3401d6ee:	a80a      	add	r0, sp, #40	@ 0x28
3401d6f0:	f7ee fb90 	bl	3400be14 <app_postprocess_init>
    output_buffer = bqueue_get_ready(&nn_output_queue);
3401d6f4:	f8df 923c 	ldr.w	r9, [pc, #572]	@ 3401d934 <pp_thread_fct+0x24c>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401d6f8:	4c80      	ldr	r4, [pc, #512]	@ (3401d8fc <pp_thread_fct+0x214>)
    output_buffer = bqueue_get_ready(&nn_output_queue);
3401d6fa:	4648      	mov	r0, r9
3401d6fc:	f7ff ff24 	bl	3401d548 <bqueue_get_ready>
    assert(output_buffer);
3401d700:	b930      	cbnz	r0, 3401d710 <pp_thread_fct+0x28>
3401d702:	f240 6181 	movw	r1, #1665	@ 0x681
3401d706:	4b7e      	ldr	r3, [pc, #504]	@ (3401d900 <pp_thread_fct+0x218>)
3401d708:	4a7e      	ldr	r2, [pc, #504]	@ (3401d904 <pp_thread_fct+0x21c>)
    assert(ret == 0);
3401d70a:	487f      	ldr	r0, [pc, #508]	@ (3401d908 <pp_thread_fct+0x220>)
3401d70c:	f001 fd5a 	bl	3401f1c4 <__assert_func>
      pp_input[i] = pp_input[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401d710:	f500 537d 	add.w	r3, r0, #16192	@ 0x3f40
3401d714:	3320      	adds	r3, #32
3401d716:	9308      	str	r3, [sp, #32]
    pp_output.pOutBuff = NULL;
3401d718:	2300      	movs	r3, #0
    pp_input[0] = output_buffer;
3401d71a:	9007      	str	r0, [sp, #28]
      pp_input[i] = pp_input[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401d71c:	f500 2086 	add.w	r0, r0, #274432	@ 0x43000
3401d720:	f500 7078 	add.w	r0, r0, #992	@ 0x3e0
    pp_output.pOutBuff = NULL;
3401d724:	9305      	str	r3, [sp, #20]
      pp_input[i] = pp_input[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401d726:	9009      	str	r0, [sp, #36]	@ 0x24
    nn_pp[0] = HAL_GetTick();
3401d728:	f001 f9ea 	bl	3401eb00 <HAL_GetTick>
    ret = app_postprocess_run((void **)pp_input, NN_OUT_NB, &pp_output, &pp_params);
3401d72c:	2103      	movs	r1, #3
    nn_pp[0] = HAL_GetTick();
3401d72e:	9001      	str	r0, [sp, #4]
    ret = app_postprocess_run((void **)pp_input, NN_OUT_NB, &pp_output, &pp_params);
3401d730:	ab0a      	add	r3, sp, #40	@ 0x28
3401d732:	aa05      	add	r2, sp, #20
3401d734:	a807      	add	r0, sp, #28
3401d736:	f7ee fb91 	bl	3400be5c <app_postprocess_run>
    assert(ret == 0);
3401d73a:	4607      	mov	r7, r0
3401d73c:	b120      	cbz	r0, 3401d748 <pp_thread_fct+0x60>
3401d73e:	f240 6189 	movw	r1, #1673	@ 0x689
3401d742:	4b72      	ldr	r3, [pc, #456]	@ (3401d90c <pp_thread_fct+0x224>)
3401d744:	4a6f      	ldr	r2, [pc, #444]	@ (3401d904 <pp_thread_fct+0x21c>)
3401d746:	e7e0      	b.n	3401d70a <pp_thread_fct+0x22>
  cur_button_state = BSP_PB_GetState(BUTTON_TOGGLE_TRACKING);
3401d748:	f7f1 fd06 	bl	3400f158 <BSP_PB_GetState>
  if (cur_button_state == GPIO_PIN_SET && prev_button_state == GPIO_PIN_RESET) {
3401d74c:	2801      	cmp	r0, #1
  cur_button_state = BSP_PB_GetState(BUTTON_TOGGLE_TRACKING);
3401d74e:	4605      	mov	r5, r0
  if (cur_button_state == GPIO_PIN_SET && prev_button_state == GPIO_PIN_RESET) {
3401d750:	4e6f      	ldr	r6, [pc, #444]	@ (3401d910 <pp_thread_fct+0x228>)
3401d752:	f8df 81e4 	ldr.w	r8, [pc, #484]	@ 3401d938 <pp_thread_fct+0x250>
3401d756:	d117      	bne.n	3401d788 <pp_thread_fct+0xa0>
3401d758:	f8d8 2000 	ldr.w	r2, [r8]
    tracking_enabled = !tracking_enabled;
3401d75c:	6833      	ldr	r3, [r6, #0]
  if (cur_button_state == GPIO_PIN_SET && prev_button_state == GPIO_PIN_RESET) {
3401d75e:	b99a      	cbnz	r2, 3401d788 <pp_thread_fct+0xa0>
    tracking_enabled = !tracking_enabled;
3401d760:	2b00      	cmp	r3, #0
3401d762:	bf0c      	ite	eq
3401d764:	2301      	moveq	r3, #1
3401d766:	2300      	movne	r3, #0
3401d768:	6033      	str	r3, [r6, #0]
    if (tracking_enabled) {
3401d76a:	d10a      	bne.n	3401d782 <pp_thread_fct+0x9a>
      printf("Enable tracking\n");
3401d76c:	4869      	ldr	r0, [pc, #420]	@ (3401d914 <pp_thread_fct+0x22c>)
3401d76e:	f002 fc3d 	bl	3401ffec <puts>
      ret = TRK_Init();
3401d772:	f7ff fecf 	bl	3401d514 <TRK_Init>
      assert(ret == 0);
3401d776:	b138      	cbz	r0, 3401d788 <pp_thread_fct+0xa0>
3401d778:	f240 6132 	movw	r1, #1586	@ 0x632
3401d77c:	4b63      	ldr	r3, [pc, #396]	@ (3401d90c <pp_thread_fct+0x224>)
3401d77e:	4a66      	ldr	r2, [pc, #408]	@ (3401d918 <pp_thread_fct+0x230>)
3401d780:	e7c3      	b.n	3401d70a <pp_thread_fct+0x22>
      printf("Disable tracking\n");
3401d782:	4866      	ldr	r0, [pc, #408]	@ (3401d91c <pp_thread_fct+0x234>)
3401d784:	f002 fc32 	bl	3401ffec <puts>
  prev_button_state = cur_button_state;
3401d788:	f8c8 5000 	str.w	r5, [r8]
  return tracking_enabled;
3401d78c:	f8d6 8000 	ldr.w	r8, [r6]
  if (!tracking_enabled)
3401d790:	f1b8 0f00 	cmp.w	r8, #0
3401d794:	d038      	beq.n	3401d808 <pp_thread_fct+0x120>
3401d796:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
3401d79a:	2900      	cmp	r1, #0
3401d79c:	f101 0001 	add.w	r0, r1, #1
3401d7a0:	bfb8      	it	lt
3401d7a2:	2001      	movlt	r0, #1
3401d7a4:	4b5e      	ldr	r3, [pc, #376]	@ (3401d920 <pp_thread_fct+0x238>)
  for (i = 0; i < pp->nb_detect; i++)
3401d7a6:	3801      	subs	r0, #1
3401d7a8:	f102 0218 	add.w	r2, r2, #24
3401d7ac:	f103 0338 	add.w	r3, r3, #56	@ 0x38
3401d7b0:	d109      	bne.n	3401d7c6 <pp_thread_fct+0xde>
  ret = trk_update(&trk_ctx, pp->nb_detect, dboxes);
3401d7b2:	4a5b      	ldr	r2, [pc, #364]	@ (3401d920 <pp_thread_fct+0x238>)
3401d7b4:	485b      	ldr	r0, [pc, #364]	@ (3401d924 <pp_thread_fct+0x23c>)
3401d7b6:	f7f0 f9a9 	bl	3400db0c <trk_update>
  assert(ret == 0);
3401d7ba:	b318      	cbz	r0, 3401d804 <pp_thread_fct+0x11c>
3401d7bc:	f240 6151 	movw	r1, #1617	@ 0x651
3401d7c0:	4b52      	ldr	r3, [pc, #328]	@ (3401d90c <pp_thread_fct+0x224>)
3401d7c2:	4a59      	ldr	r2, [pc, #356]	@ (3401d928 <pp_thread_fct+0x240>)
3401d7c4:	e7a1      	b.n	3401d70a <pp_thread_fct+0x22>
  dbox->conf = roi->conf;
3401d7c6:	ed12 7a02 	vldr	s14, [r2, #-8]
3401d7ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d7ce:	ed03 7b06 	vstr	d7, [r3, #-24]	@ 0xffffffe8
  dbox->cx = roi->x_center;
3401d7d2:	ed12 7a06 	vldr	s14, [r2, #-24]	@ 0xffffffe8
3401d7d6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d7da:	ed03 7b0e 	vstr	d7, [r3, #-56]	@ 0xffffffc8
  dbox->cy = roi->y_center;
3401d7de:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
3401d7e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d7e6:	ed03 7b0c 	vstr	d7, [r3, #-48]	@ 0xffffffd0
  dbox->w = roi->width;
3401d7ea:	ed12 7a04 	vldr	s14, [r2, #-16]
3401d7ee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d7f2:	ed03 7b0a 	vstr	d7, [r3, #-40]	@ 0xffffffd8
  dbox->h = roi->height;
3401d7f6:	ed12 7a03 	vldr	s14, [r2, #-12]
3401d7fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401d7fe:	ed03 7b08 	vstr	d7, [r3, #-32]	@ 0xffffffe0
  for (i = 0; i < pp->nb_detect; i++)
3401d802:	e7d0      	b.n	3401d7a6 <pp_thread_fct+0xbe>
  return 1;
3401d804:	f04f 0801 	mov.w	r8, #1
    nn_pp[1] = HAL_GetTick();
3401d808:	f001 f97a 	bl	3401eb00 <HAL_GetTick>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401d80c:	f04f 31ff 	mov.w	r1, #4294967295
    nn_pp[1] = HAL_GetTick();
3401d810:	9002      	str	r0, [sp, #8]
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401d812:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401d814:	f7ec ffac 	bl	3400a770 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401d818:	2801      	cmp	r0, #1
3401d81a:	d004      	beq.n	3401d826 <pp_thread_fct+0x13e>
3401d81c:	f44f 61d2 	mov.w	r1, #1680	@ 0x690
3401d820:	4b42      	ldr	r3, [pc, #264]	@ (3401d92c <pp_thread_fct+0x244>)
3401d822:	4a38      	ldr	r2, [pc, #224]	@ (3401d904 <pp_thread_fct+0x21c>)
3401d824:	e771      	b.n	3401d70a <pp_thread_fct+0x22>
    for (i = 0; i < pp_output.nb_detect; i++)
3401d826:	f04f 0a00 	mov.w	sl, #0
    disp.info.nb_detect = pp_output.nb_detect;
3401d82a:	9b06      	ldr	r3, [sp, #24]
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401d82c:	f04f 0b18 	mov.w	fp, #24
3401d830:	4553      	cmp	r3, sl
3401d832:	f103 0c01 	add.w	ip, r3, #1
3401d836:	bfb8      	it	lt
3401d838:	4684      	movlt	ip, r0
3401d83a:	9a05      	ldr	r2, [sp, #20]
3401d83c:	f8df e0bc 	ldr.w	lr, [pc, #188]	@ 3401d8fc <pp_thread_fct+0x214>
    disp.info.nb_detect = pp_output.nb_detect;
3401d840:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401d844:	9203      	str	r2, [sp, #12]
    for (i = 0; i < pp_output.nb_detect; i++)
3401d846:	f1bc 0c01 	subs.w	ip, ip, #1
3401d84a:	f10e 0e18 	add.w	lr, lr, #24
3401d84e:	d13b      	bne.n	3401d8c8 <pp_thread_fct+0x1e0>
    disp.info.tboxes_valid_nb = 0;
3401d850:	2200      	movs	r2, #0
  tinfo->cx = tbox->cx;
3401d852:	2628      	movs	r6, #40	@ 0x28
      disp.info.tboxes_valid_nb++;
3401d854:	2514      	movs	r5, #20
3401d856:	4936      	ldr	r1, [pc, #216]	@ (3401d930 <pp_thread_fct+0x248>)
    disp.info.tracking_enabled = tracking_enabled;
3401d858:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
    disp.info.tboxes_valid_nb = 0;
3401d85c:	f8c4 21a0 	str.w	r2, [r4, #416]	@ 0x1a0
      if (!tboxes[i].is_tracking || tboxes[i].tlost_cnt)
3401d860:	680b      	ldr	r3, [r1, #0]
3401d862:	b1c3      	cbz	r3, 3401d896 <pp_thread_fct+0x1ae>
3401d864:	688b      	ldr	r3, [r1, #8]
3401d866:	b9b3      	cbnz	r3, 3401d896 <pp_thread_fct+0x1ae>
  tinfo->cx = tbox->cx;
3401d868:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
3401d86c:	fb06 4007 	mla	r0, r6, r7, r4
3401d870:	e9c0 236a 	strd	r2, r3, [r0, #424]	@ 0x1a8
  tinfo->cy = tbox->cy;
3401d874:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
3401d878:	e9c0 236c 	strd	r2, r3, [r0, #432]	@ 0x1b0
  tinfo->w = tbox->w;
3401d87c:	e9d1 2308 	ldrd	r2, r3, [r1, #32]
3401d880:	e9c0 236e 	strd	r2, r3, [r0, #440]	@ 0x1b8
  tinfo->h = tbox->h;
3401d884:	e9d1 230a 	ldrd	r2, r3, [r1, #40]	@ 0x28
3401d888:	e9c0 2370 	strd	r2, r3, [r0, #448]	@ 0x1c0
      disp.info.tboxes_valid_nb++;
3401d88c:	2201      	movs	r2, #1
  tinfo->id = tbox->id;
3401d88e:	684b      	ldr	r3, [r1, #4]
      disp.info.tboxes_valid_nb++;
3401d890:	3701      	adds	r7, #1
  tinfo->id = tbox->id;
3401d892:	f8c0 31c8 	str.w	r3, [r0, #456]	@ 0x1c8
    for (i = 0; i < ARRAY_NB(tboxes); i++) {
3401d896:	3d01      	subs	r5, #1
3401d898:	f501 7120 	add.w	r1, r1, #640	@ 0x280
3401d89c:	d1e0      	bne.n	3401d860 <pp_thread_fct+0x178>
3401d89e:	b10a      	cbz	r2, 3401d8a4 <pp_thread_fct+0x1bc>
3401d8a0:	f8c4 71a0 	str.w	r7, [r4, #416]	@ 0x1a0
    disp.info.pp_ms = nn_pp[1] - nn_pp[0];
3401d8a4:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
3401d8a8:	1a9b      	subs	r3, r3, r2
3401d8aa:	f8c4 3348 	str.w	r3, [r4, #840]	@ 0x348
    ret = xSemaphoreGive(disp.lock);
3401d8ae:	2300      	movs	r3, #0
3401d8b0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401d8b2:	461a      	mov	r2, r3
3401d8b4:	4619      	mov	r1, r3
3401d8b6:	f7ec fdb7 	bl	3400a428 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401d8ba:	2801      	cmp	r0, #1
3401d8bc:	d012      	beq.n	3401d8e4 <pp_thread_fct+0x1fc>
3401d8be:	f44f 61d4 	mov.w	r1, #1696	@ 0x6a0
3401d8c2:	4b1a      	ldr	r3, [pc, #104]	@ (3401d92c <pp_thread_fct+0x244>)
3401d8c4:	4a0f      	ldr	r2, [pc, #60]	@ (3401d904 <pp_thread_fct+0x21c>)
3401d8c6:	e720      	b.n	3401d70a <pp_thread_fct+0x22>
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401d8c8:	9b03      	ldr	r3, [sp, #12]
3401d8ca:	f10e 0594 	add.w	r5, lr, #148	@ 0x94
3401d8ce:	fb0b 360a 	mla	r6, fp, sl, r3
3401d8d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
3401d8d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    for (i = 0; i < pp_output.nb_detect; i++)
3401d8d6:	f10a 0a01 	add.w	sl, sl, #1
      disp.info.detects[i] = pp_output.pOutBuff[i];
3401d8da:	e896 0003 	ldmia.w	r6, {r0, r1}
3401d8de:	e885 0003 	stmia.w	r5, {r0, r1}
    for (i = 0; i < pp_output.nb_detect; i++)
3401d8e2:	e7b0      	b.n	3401d846 <pp_thread_fct+0x15e>
    bqueue_put_free(&nn_output_queue);
3401d8e4:	f8d9 0000 	ldr.w	r0, [r9]
3401d8e8:	f7ff fee8 	bl	3401d6bc <bqueue_put_free.isra.0>
    xSemaphoreGive(disp.update);
3401d8ec:	2300      	movs	r3, #0
3401d8ee:	6820      	ldr	r0, [r4, #0]
3401d8f0:	461a      	mov	r2, r3
3401d8f2:	4619      	mov	r1, r3
3401d8f4:	f7ec fd98 	bl	3400a428 <xQueueGenericSend>
  {
3401d8f8:	e6ff      	b.n	3401d6fa <pp_thread_fct+0x12>
3401d8fa:	bf00      	nop
3401d8fc:	341f7d98 	.word	0x341f7d98
3401d900:	3402bfad 	.word	0x3402bfad
3401d904:	341061ff 	.word	0x341061ff
3401d908:	3402bf69 	.word	0x3402bf69
3401d90c:	34027863 	.word	0x34027863
3401d910:	3410cdac 	.word	0x3410cdac
3401d914:	3402bfbb 	.word	0x3402bfbb
3401d918:	341061bd 	.word	0x341061bd
3401d91c:	3402bfcb 	.word	0x3402bfcb
3401d920:	34146308 	.word	0x34146308
3401d924:	341462a8 	.word	0x341462a8
3401d928:	341061e1 	.word	0x341061e1
3401d92c:	340263dc 	.word	0x340263dc
3401d930:	34146538 	.word	0x34146538
3401d934:	3415190c 	.word	0x3415190c
3401d938:	341462a0 	.word	0x341462a0
3401d93c:	00000000 	.word	0x00000000

3401d940 <dp_thread_fct>:
{
3401d940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401d944:	ed2d 8b06 	vpush	{d8-d10}
  uint32_t disp_ms = 0;
3401d948:	2400      	movs	r4, #0
3401d94a:	ed9f 9ba5 	vldr	d9, [pc, #660]	@ 3401dbe0 <dp_thread_fct+0x2a0>
  ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
3401d94e:	4fa6      	ldr	r7, [pc, #664]	@ (3401dbe8 <dp_thread_fct+0x2a8>)
{
3401d950:	f5ad 7d71 	sub.w	sp, sp, #964	@ 0x3c4
    ret = xSemaphoreTake(disp.update, portMAX_DELAY);
3401d954:	4da5      	ldr	r5, [pc, #660]	@ (3401dbec <dp_thread_fct+0x2ac>)
3401d956:	f04f 31ff 	mov.w	r1, #4294967295
3401d95a:	6828      	ldr	r0, [r5, #0]
3401d95c:	f7ec ff08 	bl	3400a770 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401d960:	2801      	cmp	r0, #1
3401d962:	d006      	beq.n	3401d972 <dp_thread_fct+0x32>
3401d964:	f240 61c7 	movw	r1, #1735	@ 0x6c7
3401d968:	4ba1      	ldr	r3, [pc, #644]	@ (3401dbf0 <dp_thread_fct+0x2b0>)
3401d96a:	4aa2      	ldr	r2, [pc, #648]	@ (3401dbf4 <dp_thread_fct+0x2b4>)
    assert(ret == pdTRUE);
3401d96c:	48a2      	ldr	r0, [pc, #648]	@ (3401dbf8 <dp_thread_fct+0x2b8>)
3401d96e:	f001 fc29 	bl	3401f1c4 <__assert_func>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401d972:	f04f 31ff 	mov.w	r1, #4294967295
3401d976:	6d68      	ldr	r0, [r5, #84]	@ 0x54
3401d978:	f7ec fefa 	bl	3400a770 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401d97c:	2801      	cmp	r0, #1
3401d97e:	d004      	beq.n	3401d98a <dp_thread_fct+0x4a>
3401d980:	f240 61ca 	movw	r1, #1738	@ 0x6ca
3401d984:	4b9a      	ldr	r3, [pc, #616]	@ (3401dbf0 <dp_thread_fct+0x2b0>)
3401d986:	4a9b      	ldr	r2, [pc, #620]	@ (3401dbf4 <dp_thread_fct+0x2b4>)
3401d988:	e7f0      	b.n	3401d96c <dp_thread_fct+0x2c>
    info = disp.info;
3401d98a:	f105 01a8 	add.w	r1, r5, #168	@ 0xa8
3401d98e:	f44f 7264 	mov.w	r2, #912	@ 0x390
3401d992:	a80c      	add	r0, sp, #48	@ 0x30
3401d994:	f002 fee7 	bl	34020766 <memcpy>
    ret = xSemaphoreGive(disp.lock);
3401d998:	2300      	movs	r3, #0
3401d99a:	6d68      	ldr	r0, [r5, #84]	@ 0x54
3401d99c:	461a      	mov	r2, r3
3401d99e:	4619      	mov	r1, r3
3401d9a0:	f7ec fd42 	bl	3400a428 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401d9a4:	2801      	cmp	r0, #1
    ret = xSemaphoreGive(disp.lock);
3401d9a6:	4605      	mov	r5, r0
    assert(ret == pdTRUE);
3401d9a8:	d004      	beq.n	3401d9b4 <dp_thread_fct+0x74>
3401d9aa:	f240 61cd 	movw	r1, #1741	@ 0x6cd
3401d9ae:	4b90      	ldr	r3, [pc, #576]	@ (3401dbf0 <dp_thread_fct+0x2b0>)
3401d9b0:	4a90      	ldr	r2, [pc, #576]	@ (3401dbf4 <dp_thread_fct+0x2b4>)
3401d9b2:	e7db      	b.n	3401d96c <dp_thread_fct+0x2c>
    info.disp_ms = disp_ms;
3401d9b4:	94b5      	str	r4, [sp, #724]	@ 0x2d4
    ts = HAL_GetTick();
3401d9b6:	f001 f8a3 	bl	3401eb00 <HAL_GetTick>
3401d9ba:	9002      	str	r0, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
3401d9bc:	b672      	cpsid	i
  ret = SCRL_SetAddress_NoReload(lcd_fg_buffer[lcd_fg_buffer_rd_idx], SCRL_LAYER_1);
3401d9be:	4e8f      	ldr	r6, [pc, #572]	@ (3401dbfc <dp_thread_fct+0x2bc>)
3401d9c0:	683b      	ldr	r3, [r7, #0]
3401d9c2:	488f      	ldr	r0, [pc, #572]	@ (3401dc00 <dp_thread_fct+0x2c0>)
3401d9c4:	4629      	mov	r1, r5
3401d9c6:	fb00 6003 	mla	r0, r0, r3, r6
3401d9ca:	f7ef fb57 	bl	3400d07c <SCRL_SetAddress_NoReload>
  assert(ret == HAL_OK);
3401d9ce:	4680      	mov	r8, r0
3401d9d0:	b120      	cbz	r0, 3401d9dc <dp_thread_fct+0x9c>
3401d9d2:	f240 61ae 	movw	r1, #1710	@ 0x6ae
3401d9d6:	4b8b      	ldr	r3, [pc, #556]	@ (3401dc04 <dp_thread_fct+0x2c4>)
3401d9d8:	4a8b      	ldr	r2, [pc, #556]	@ (3401dc08 <dp_thread_fct+0x2c8>)
3401d9da:	e7c7      	b.n	3401d96c <dp_thread_fct+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
3401d9dc:	b662      	cpsie	i
  if (info->tracking_enabled)
3401d9de:	9d49      	ldr	r5, [sp, #292]	@ 0x124
3401d9e0:	ed9f aa8a 	vldr	s20, [pc, #552]	@ 3401dc0c <dp_thread_fct+0x2cc>
3401d9e4:	4c8a      	ldr	r4, [pc, #552]	@ (3401dc10 <dp_thread_fct+0x2d0>)
3401d9e6:	2d00      	cmp	r5, #0
3401d9e8:	f000 812a 	beq.w	3401dc40 <dp_thread_fct+0x300>
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401d9ec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
3401d9f0:	f44f 7248 	mov.w	r2, #800	@ 0x320
3401d9f4:	4601      	mov	r1, r0
3401d9f6:	9000      	str	r0, [sp, #0]
3401d9f8:	f7ff fcc0 	bl	3401d37c <UTIL_LCD_FillRect>
  cpuload_update(&cpu_load);
3401d9fc:	f7ff fdfe 	bl	3401d5fc <cpuload_update.constprop.0>
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401da00:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
3401da04:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
3401da08:	1a80      	subs	r0, r0, r2
3401da0a:	eb61 0103 	sbc.w	r1, r1, r3
3401da0e:	f7e4 f817 	bl	34001a40 <__aeabi_ul2d>
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401da12:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401da16:	ec41 0b18 	vmov	d8, r0, r1
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401da1a:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
3401da1e:	1ac0      	subs	r0, r0, r3
3401da20:	eb61 0102 	sbc.w	r1, r1, r2
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401da24:	f7e4 f80c 	bl	34001a40 <__aeabi_ul2d>
3401da28:	ee28 8b09 	vmul.f64	d8, d8, d9
3401da2c:	ec41 0b16 	vmov	d6, r0, r1
3401da30:	ee88 7b06 	vdiv.f64	d7, d8, d6
3401da34:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  nn_fps = 1000.0 / info->nn_period_ms;
3401da38:	eddd 7ab0 	vldr	s15, [sp, #704]	@ 0x2c0
3401da3c:	eeca 8a27 	vdiv.f32	s17, s20, s15
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
3401da40:	f7ff fab4 	bl	3401cfac <UTIL_LCD_GetFont>
3401da44:	2202      	movs	r2, #2
3401da46:	4641      	mov	r1, r8
3401da48:	4b72      	ldr	r3, [pc, #456]	@ (3401dc14 <dp_thread_fct+0x2d4>)
3401da4a:	4640      	mov	r0, r8
3401da4c:	f001 fb8a 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
3401da50:	f7ff faac 	bl	3401cfac <UTIL_LCD_GetFont>
3401da54:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
3401da58:	88c1      	ldrh	r1, [r0, #6]
3401da5a:	2202      	movs	r2, #2
3401da5c:	ed8d 7b00 	vstr	d7, [sp]
3401da60:	4b6d      	ldr	r3, [pc, #436]	@ (3401dc18 <dp_thread_fct+0x2d8>)
3401da62:	4640      	mov	r0, r8
3401da64:	f001 fb7e 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inference");
3401da68:	f7ff faa0 	bl	3401cfac <UTIL_LCD_GetFont>
3401da6c:	88c1      	ldrh	r1, [r0, #6]
3401da6e:	2202      	movs	r2, #2
3401da70:	4b6a      	ldr	r3, [pc, #424]	@ (3401dc1c <dp_thread_fct+0x2dc>)
3401da72:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3401da76:	4640      	mov	r0, r8
3401da78:	f001 fb74 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   %ums", info->inf_ms);
3401da7c:	f7ff fa96 	bl	3401cfac <UTIL_LCD_GetFont>
3401da80:	2202      	movs	r2, #2
3401da82:	88c1      	ldrh	r1, [r0, #6]
3401da84:	9bb1      	ldr	r3, [sp, #708]	@ 0x2c4
3401da86:	4091      	lsls	r1, r2
3401da88:	4640      	mov	r0, r8
3401da8a:	9300      	str	r3, [sp, #0]
3401da8c:	4b64      	ldr	r3, [pc, #400]	@ (3401dc20 <dp_thread_fct+0x2e0>)
3401da8e:	f001 fb69 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   FPS");
3401da92:	f7ff fa8b 	bl	3401cfac <UTIL_LCD_GetFont>
3401da96:	88c1      	ldrh	r1, [r0, #6]
3401da98:	2006      	movs	r0, #6
3401da9a:	2202      	movs	r2, #2
3401da9c:	4341      	muls	r1, r0
3401da9e:	4b61      	ldr	r3, [pc, #388]	@ (3401dc24 <dp_thread_fct+0x2e4>)
3401daa0:	4640      	mov	r0, r8
3401daa2:	f001 fb5f 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.2f", nn_fps);
3401daa6:	f7ff fa81 	bl	3401cfac <UTIL_LCD_GetFont>
3401daaa:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
3401daae:	88c1      	ldrh	r1, [r0, #6]
3401dab0:	2202      	movs	r2, #2
3401dab2:	ed8d 7b00 	vstr	d7, [sp]
3401dab6:	4b5c      	ldr	r3, [pc, #368]	@ (3401dc28 <dp_thread_fct+0x2e8>)
3401dab8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
3401dabc:	4640      	mov	r0, r8
3401dabe:	f001 fb51 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " Objects %u", info->tboxes_valid_nb);
3401dac2:	f7ff fa73 	bl	3401cfac <UTIL_LCD_GetFont>
3401dac6:	f8dd a128 	ldr.w	sl, [sp, #296]	@ 0x128
3401daca:	88c1      	ldrh	r1, [r0, #6]
3401dacc:	2202      	movs	r2, #2
3401dace:	4640      	mov	r0, r8
3401dad0:	4b56      	ldr	r3, [pc, #344]	@ (3401dc2c <dp_thread_fct+0x2ec>)
3401dad2:	f8cd a000 	str.w	sl, [sp]
3401dad6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
3401dada:	f001 fb43 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[tbox->id % NUMBER_COLORS]);
3401dade:	f8df b15c 	ldr.w	fp, [pc, #348]	@ 3401dc3c <dp_thread_fct+0x2fc>
3401dae2:	ac0c      	add	r4, sp, #48	@ 0x30
  for (i = 0; i < info->tboxes_valid_nb; i++)
3401dae4:	45c2      	cmp	sl, r8
3401dae6:	f104 0428 	add.w	r4, r4, #40	@ 0x28
3401daea:	dc1f      	bgt.n	3401db2c <dp_thread_fct+0x1ec>
    SCB_CleanDCache_by_Addr(lcd_fg_buffer[lcd_fg_buffer_rd_idx], LCD_FG_WIDTH * LCD_FG_HEIGHT* 2);
3401daec:	683b      	ldr	r3, [r7, #0]
3401daee:	4a44      	ldr	r2, [pc, #272]	@ (3401dc00 <dp_thread_fct+0x2c0>)
3401daf0:	fb02 6603 	mla	r6, r2, r3, r6
  __ASM volatile ("dsb 0xF":::"memory");
3401daf4:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401daf8:	f645 5ec0 	movw	lr, #24000	@ 0x5dc0
3401dafc:	f04e e001 	dls	lr, lr
3401db00:	4b4b      	ldr	r3, [pc, #300]	@ (3401dc30 <dp_thread_fct+0x2f0>)
3401db02:	f8c3 6268 	str.w	r6, [r3, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401db06:	3620      	adds	r6, #32
      } while ( op_size > 0 );
3401db08:	f00f c805 	le	lr, 3401db02 <dp_thread_fct+0x1c2>
3401db0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401db10:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
3401db14:	b672      	cpsid	i
  ret = SCRL_ReloadLayer(SCRL_LAYER_1);
3401db16:	2001      	movs	r0, #1
3401db18:	f7ef faba 	bl	3400d090 <SCRL_ReloadLayer>
  assert(ret == HAL_OK);
3401db1c:	2800      	cmp	r0, #0
3401db1e:	f000 8160 	beq.w	3401dde2 <dp_thread_fct+0x4a2>
3401db22:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
3401db26:	4b37      	ldr	r3, [pc, #220]	@ (3401dc04 <dp_thread_fct+0x2c4>)
3401db28:	4a42      	ldr	r2, [pc, #264]	@ (3401dc34 <dp_thread_fct+0x2f4>)
3401db2a:	e71f      	b.n	3401d96c <dp_thread_fct+0x2c>
  convert_point(tbox->cx, tbox->cy, &xc, &yc);
3401db2c:	ed94 6b38 	vldr	d6, [r4, #224]	@ 0xe0
3401db30:	ed94 7b36 	vldr	d7, [r4, #216]	@ 0xd8
3401db34:	eef7 0bc6 	vcvt.f32.f64	s1, d6
3401db38:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
3401db3c:	a905      	add	r1, sp, #20
3401db3e:	a804      	add	r0, sp, #16
3401db40:	f7ff fc90 	bl	3401d464 <convert_length>
  convert_length(tbox->w, tbox->h, &w, &h);
3401db44:	ed94 6b3c 	vldr	d6, [r4, #240]	@ 0xf0
3401db48:	ed94 7b3a 	vldr	d7, [r4, #232]	@ 0xe8
3401db4c:	eef7 0bc6 	vcvt.f32.f64	s1, d6
3401db50:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
3401db54:	a90b      	add	r1, sp, #44	@ 0x2c
3401db56:	a80a      	add	r0, sp, #40	@ 0x28
3401db58:	f7ff fc84 	bl	3401d464 <convert_length>
  x0 = xc - (w + 1) / 2;
3401db5c:	6802      	ldr	r2, [r0, #0]
3401db5e:	9804      	ldr	r0, [sp, #16]
3401db60:	3201      	adds	r2, #1
3401db62:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
3401db66:	1052      	asrs	r2, r2, #1
3401db68:	4252      	negs	r2, r2
3401db6a:	1813      	adds	r3, r2, r0
3401db6c:	9306      	str	r3, [sp, #24]
  y0 = yc - (h + 1) / 2;
3401db6e:	680b      	ldr	r3, [r1, #0]
3401db70:	9905      	ldr	r1, [sp, #20]
3401db72:	3301      	adds	r3, #1
3401db74:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
3401db78:	105b      	asrs	r3, r3, #1
3401db7a:	425b      	negs	r3, r3
3401db7c:	185d      	adds	r5, r3, r1
  x1 = xc + (w + 1) / 2;
3401db7e:	1a80      	subs	r0, r0, r2
  y1 = yc + (h + 1) / 2;
3401db80:	1ac9      	subs	r1, r1, r3
  x1 = xc + (w + 1) / 2;
3401db82:	9008      	str	r0, [sp, #32]
  y1 = yc + (h + 1) / 2;
3401db84:	9109      	str	r1, [sp, #36]	@ 0x24
  clamp_point(&x0, &y0);
3401db86:	a806      	add	r0, sp, #24
3401db88:	a907      	add	r1, sp, #28
  y0 = yc - (h + 1) / 2;
3401db8a:	9507      	str	r5, [sp, #28]
  clamp_point(&x0, &y0);
3401db8c:	f7ff fc44 	bl	3401d418 <clamp_point>
  clamp_point(&x1, &y1);
3401db90:	a909      	add	r1, sp, #36	@ 0x24
3401db92:	a808      	add	r0, sp, #32
3401db94:	f7ff fc40 	bl	3401d418 <clamp_point>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[tbox->id % NUMBER_COLORS]);
3401db98:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
3401db9c:	f04f 0c0a 	mov.w	ip, #10
3401dba0:	f8d4 90f8 	ldr.w	r9, [r4, #248]	@ 0xf8
3401dba4:	680b      	ldr	r3, [r1, #0]
3401dba6:	fbb9 f1fc 	udiv	r1, r9, ip
3401dbaa:	fb0c 9111 	mls	r1, ip, r1, r9
3401dbae:	9a08      	ldr	r2, [sp, #32]
3401dbb0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
3401dbb4:	1a12      	subs	r2, r2, r0
3401dbb6:	9100      	str	r1, [sp, #0]
3401dbb8:	1b5b      	subs	r3, r3, r5
3401dbba:	4629      	mov	r1, r5
3401dbbc:	9003      	str	r0, [sp, #12]
3401dbbe:	f7ff fbbb 	bl	3401d338 <UTIL_LCD_DrawRect>
  UTIL_LCDEx_PrintfAt(x0 + 1, y0 + 1, LEFT_MODE, "%3d", tbox->id);
3401dbc2:	9803      	ldr	r0, [sp, #12]
3401dbc4:	2203      	movs	r2, #3
3401dbc6:	4b1c      	ldr	r3, [pc, #112]	@ (3401dc38 <dp_thread_fct+0x2f8>)
3401dbc8:	f8cd 9000 	str.w	r9, [sp]
3401dbcc:	1c69      	adds	r1, r5, #1
3401dbce:	3001      	adds	r0, #1
3401dbd0:	f001 fac8 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  for (i = 0; i < info->tboxes_valid_nb; i++)
3401dbd4:	f108 0801 	add.w	r8, r8, #1
3401dbd8:	e784      	b.n	3401dae4 <dp_thread_fct+0x1a4>
3401dbda:	bf00      	nop
3401dbdc:	f3af 8000 	nop.w
3401dbe0:	00000000 	.word	0x00000000
3401dbe4:	40590000 	.word	0x40590000
3401dbe8:	341f81d0 	.word	0x341f81d0
3401dbec:	341f7d98 	.word	0x341f7d98
3401dbf0:	340263dc 	.word	0x340263dc
3401dbf4:	3410623b 	.word	0x3410623b
3401dbf8:	3402bf69 	.word	0x3402bf69
3401dbfc:	9120d000 	.word	0x9120d000
3401dc00:	000bb800 	.word	0x000bb800
3401dc04:	3402bfdc 	.word	0x3402bfdc
3401dc08:	34106224 	.word	0x34106224
3401dc0c:	447a0000 	.word	0x447a0000
3401dc10:	341f7cb8 	.word	0x341f7cb8
3401dc14:	3402bfea 	.word	0x3402bfea
3401dc18:	3402bff3 	.word	0x3402bff3
3401dc1c:	3402bffd 	.word	0x3402bffd
3401dc20:	3402c007 	.word	0x3402c007
3401dc24:	3402c00f 	.word	0x3402c00f
3401dc28:	3402c016 	.word	0x3402c016
3401dc2c:	3402c01d 	.word	0x3402c01d
3401dc30:	e000ed00 	.word	0xe000ed00
3401dc34:	3410620d 	.word	0x3410620d
3401dc38:	3402c029 	.word	0x3402c029
3401dc3c:	341062c8 	.word	0x341062c8
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401dc40:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
3401dc44:	f44f 7248 	mov.w	r2, #800	@ 0x320
3401dc48:	4629      	mov	r1, r5
3401dc4a:	9500      	str	r5, [sp, #0]
  uint32_t nb_rois = info->nb_detect;
3401dc4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
  UTIL_LCD_FillRect(lcd_fg_area.X0, lcd_fg_area.Y0, lcd_fg_area.XSize, lcd_fg_area.YSize, 0x00000000); /* Clear previous boxes */
3401dc50:	f7ff fb94 	bl	3401d37c <UTIL_LCD_FillRect>
  cpuload_update(&cpu_load);
3401dc54:	f7ff fcd2 	bl	3401d5fc <cpuload_update.constprop.0>
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401dc58:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
3401dc5c:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	@ 0x58
3401dc60:	1a80      	subs	r0, r0, r2
3401dc62:	eb61 0103 	sbc.w	r1, r1, r3
3401dc66:	f7e3 feeb 	bl	34001a40 <__aeabi_ul2d>
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401dc6a:	e9d4 321a 	ldrd	r3, r2, [r4, #104]	@ 0x68
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401dc6e:	ec41 0b18 	vmov	d8, r0, r1
                     (cpu_load->history[2].total - cpu_load->history[3].total);
3401dc72:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	@ 0x50
3401dc76:	1ac0      	subs	r0, r0, r3
3401dc78:	eb61 0102 	sbc.w	r1, r1, r2
    *cpu_load_last_second = 100.0 * (cpu_load->history[2].thread - cpu_load->history[3].thread) /
3401dc7c:	f7e3 fee0 	bl	34001a40 <__aeabi_ul2d>
3401dc80:	ee28 8b09 	vmul.f64	d8, d8, d9
3401dc84:	ec41 0b16 	vmov	d6, r0, r1
3401dc88:	ee88 7b06 	vdiv.f64	d7, d8, d6
3401dc8c:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  nn_fps = 1000.0 / info->nn_period_ms;
3401dc90:	eddd 7ab0 	vldr	s15, [sp, #704]	@ 0x2c0
3401dc94:	eeca 8a27 	vdiv.f32	s17, s20, s15
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "Cpu load");
3401dc98:	f7ff f988 	bl	3401cfac <UTIL_LCD_GetFont>
3401dc9c:	2202      	movs	r2, #2
3401dc9e:	4629      	mov	r1, r5
3401dca0:	4b55      	ldr	r3, [pc, #340]	@ (3401ddf8 <dp_thread_fct+0x4b8>)
3401dca2:	4628      	mov	r0, r5
3401dca4:	f001 fa5e 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb),  RIGHT_MODE, "   %.1f%%", cpu_load_one_second);
3401dca8:	f7ff f980 	bl	3401cfac <UTIL_LCD_GetFont>
3401dcac:	eeb7 7ac8 	vcvt.f64.f32	d7, s16
3401dcb0:	88c1      	ldrh	r1, [r0, #6]
3401dcb2:	2202      	movs	r2, #2
3401dcb4:	ed8d 7b00 	vstr	d7, [sp]
3401dcb8:	4b50      	ldr	r3, [pc, #320]	@ (3401ddfc <dp_thread_fct+0x4bc>)
3401dcba:	4628      	mov	r0, r5
3401dcbc:	f001 fa52 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "Inference");
3401dcc0:	f7ff f974 	bl	3401cfac <UTIL_LCD_GetFont>
3401dcc4:	88c1      	ldrh	r1, [r0, #6]
3401dcc6:	2202      	movs	r2, #2
3401dcc8:	4b4d      	ldr	r3, [pc, #308]	@ (3401de00 <dp_thread_fct+0x4c0>)
3401dcca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
3401dcce:	4628      	mov	r0, r5
3401dcd0:	f001 fa48 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   %ums", info->inf_ms);
3401dcd4:	f7ff f96a 	bl	3401cfac <UTIL_LCD_GetFont>
3401dcd8:	2202      	movs	r2, #2
3401dcda:	88c1      	ldrh	r1, [r0, #6]
3401dcdc:	9bb1      	ldr	r3, [sp, #708]	@ 0x2c4
3401dcde:	4091      	lsls	r1, r2
3401dce0:	4628      	mov	r0, r5
3401dce2:	9300      	str	r3, [sp, #0]
3401dce4:	4b47      	ldr	r3, [pc, #284]	@ (3401de04 <dp_thread_fct+0x4c4>)
3401dce6:	f001 fa3d 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "   FPS");
3401dcea:	f7ff f95f 	bl	3401cfac <UTIL_LCD_GetFont>
3401dcee:	88c1      	ldrh	r1, [r0, #6]
3401dcf0:	2006      	movs	r0, #6
3401dcf2:	2202      	movs	r2, #2
3401dcf4:	4341      	muls	r1, r0
3401dcf6:	4b44      	ldr	r3, [pc, #272]	@ (3401de08 <dp_thread_fct+0x4c8>)
3401dcf8:	4628      	mov	r0, r5
3401dcfa:	f001 fa33 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, "  %.2f", nn_fps);
3401dcfe:	f7ff f955 	bl	3401cfac <UTIL_LCD_GetFont>
3401dd02:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
3401dd06:	88c1      	ldrh	r1, [r0, #6]
3401dd08:	2202      	movs	r2, #2
3401dd0a:	ed8d 7b00 	vstr	d7, [sp]
3401dd0e:	4b3f      	ldr	r3, [pc, #252]	@ (3401de0c <dp_thread_fct+0x4cc>)
3401dd10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
3401dd14:	4628      	mov	r0, r5
3401dd16:	f001 fa25 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCDEx_PrintfAt(0, LINE(line_nb), RIGHT_MODE, " Objects %u", nb_rois);
3401dd1a:	f7ff f947 	bl	3401cfac <UTIL_LCD_GetFont>
3401dd1e:	88c1      	ldrh	r1, [r0, #6]
3401dd20:	2202      	movs	r2, #2
3401dd22:	4628      	mov	r0, r5
3401dd24:	4b3a      	ldr	r3, [pc, #232]	@ (3401de10 <dp_thread_fct+0x4d0>)
3401dd26:	f8cd a000 	str.w	sl, [sp]
3401dd2a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
3401dd2e:	f001 fa19 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[detect->class_index % NUMBER_COLORS]);
3401dd32:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 3401de18 <dp_thread_fct+0x4d8>
3401dd36:	ac0c      	add	r4, sp, #48	@ 0x30
  for (i = 0; i < nb_rois; i++)
3401dd38:	45aa      	cmp	sl, r5
3401dd3a:	f43f aed7 	beq.w	3401daec <dp_thread_fct+0x1ac>
  convert_point(detect->x_center, detect->y_center, &xc, &yc);
3401dd3e:	edd4 0a02 	vldr	s1, [r4, #8]
3401dd42:	ed94 0a01 	vldr	s0, [r4, #4]
3401dd46:	a905      	add	r1, sp, #20
3401dd48:	a804      	add	r0, sp, #16
3401dd4a:	f7ff fb8b 	bl	3401d464 <convert_length>
  convert_length(detect->width, detect->height, &w, &h);
3401dd4e:	edd4 0a04 	vldr	s1, [r4, #16]
3401dd52:	ed94 0a03 	vldr	s0, [r4, #12]
3401dd56:	a90b      	add	r1, sp, #44	@ 0x2c
3401dd58:	a80a      	add	r0, sp, #40	@ 0x28
3401dd5a:	f7ff fb83 	bl	3401d464 <convert_length>
  x0 = xc - (w + 1) / 2;
3401dd5e:	6802      	ldr	r2, [r0, #0]
3401dd60:	9804      	ldr	r0, [sp, #16]
3401dd62:	3201      	adds	r2, #1
3401dd64:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
3401dd68:	1052      	asrs	r2, r2, #1
3401dd6a:	4252      	negs	r2, r2
3401dd6c:	1813      	adds	r3, r2, r0
3401dd6e:	9306      	str	r3, [sp, #24]
  y0 = yc - (h + 1) / 2;
3401dd70:	680b      	ldr	r3, [r1, #0]
3401dd72:	9905      	ldr	r1, [sp, #20]
3401dd74:	3301      	adds	r3, #1
3401dd76:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
3401dd7a:	105b      	asrs	r3, r3, #1
3401dd7c:	425b      	negs	r3, r3
3401dd7e:	eb03 0c01 	add.w	ip, r3, r1
  x1 = xc + (w + 1) / 2;
3401dd82:	1a80      	subs	r0, r0, r2
  y1 = yc + (h + 1) / 2;
3401dd84:	1ac9      	subs	r1, r1, r3
  x1 = xc + (w + 1) / 2;
3401dd86:	9008      	str	r0, [sp, #32]
  y1 = yc + (h + 1) / 2;
3401dd88:	9109      	str	r1, [sp, #36]	@ 0x24
  clamp_point(&x0, &y0);
3401dd8a:	a806      	add	r0, sp, #24
3401dd8c:	a907      	add	r1, sp, #28
  y0 = yc - (h + 1) / 2;
3401dd8e:	f8cd c01c 	str.w	ip, [sp, #28]
  clamp_point(&x0, &y0);
3401dd92:	f7ff fb41 	bl	3401d418 <clamp_point>
  clamp_point(&x1, &y1);
3401dd96:	a909      	add	r1, sp, #36	@ 0x24
3401dd98:	a808      	add	r0, sp, #32
3401dd9a:	f7ff fb3d 	bl	3401d418 <clamp_point>
  UTIL_LCD_DrawRect(x0, y0, x1 - x0, y1 - y0, colors[detect->class_index % NUMBER_COLORS]);
3401dd9e:	e9dd 0806 	ldrd	r0, r8, [sp, #24]
3401dda2:	f04f 0c0a 	mov.w	ip, #10
3401dda6:	f854 9f18 	ldr.w	r9, [r4, #24]!
3401ddaa:	680b      	ldr	r3, [r1, #0]
3401ddac:	fb99 f1fc 	sdiv	r1, r9, ip
3401ddb0:	fb0c 9111 	mls	r1, ip, r1, r9
3401ddb4:	9a08      	ldr	r2, [sp, #32]
3401ddb6:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
3401ddba:	1a12      	subs	r2, r2, r0
3401ddbc:	9100      	str	r1, [sp, #0]
3401ddbe:	eba3 0308 	sub.w	r3, r3, r8
3401ddc2:	4641      	mov	r1, r8
3401ddc4:	9003      	str	r0, [sp, #12]
3401ddc6:	f7ff fab7 	bl	3401d338 <UTIL_LCD_DrawRect>
  UTIL_LCDEx_PrintfAt(x0 + 1, y0 + 1, LEFT_MODE, classes_table[detect->class_index]);
3401ddca:	9803      	ldr	r0, [sp, #12]
3401ddcc:	4b11      	ldr	r3, [pc, #68]	@ (3401de14 <dp_thread_fct+0x4d4>)
3401ddce:	2203      	movs	r2, #3
3401ddd0:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
3401ddd4:	f108 0101 	add.w	r1, r8, #1
3401ddd8:	3001      	adds	r0, #1
3401ddda:	f001 f9c3 	bl	3401f164 <UTIL_LCDEx_PrintfAt>
  for (i = 0; i < nb_rois; i++)
3401ddde:	3501      	adds	r5, #1
3401dde0:	e7aa      	b.n	3401dd38 <dp_thread_fct+0x3f8>
  __ASM volatile ("cpsie i" : : : "memory");
3401dde2:	b662      	cpsie	i
  lcd_fg_buffer_rd_idx = 1 - lcd_fg_buffer_rd_idx;
3401dde4:	683b      	ldr	r3, [r7, #0]
3401dde6:	f1c3 0301 	rsb	r3, r3, #1
3401ddea:	603b      	str	r3, [r7, #0]
    disp_ms = HAL_GetTick() - ts;
3401ddec:	f000 fe88 	bl	3401eb00 <HAL_GetTick>
3401ddf0:	9b02      	ldr	r3, [sp, #8]
3401ddf2:	1ac4      	subs	r4, r0, r3
    ret = xSemaphoreTake(disp.update, portMAX_DELAY);
3401ddf4:	e5ae      	b.n	3401d954 <dp_thread_fct+0x14>
3401ddf6:	bf00      	nop
3401ddf8:	3402bfea 	.word	0x3402bfea
3401ddfc:	3402bff3 	.word	0x3402bff3
3401de00:	3402bffd 	.word	0x3402bffd
3401de04:	3402c007 	.word	0x3402c007
3401de08:	3402c00f 	.word	0x3402c00f
3401de0c:	3402c016 	.word	0x3402c016
3401de10:	3402c01d 	.word	0x3402c01d
3401de14:	3410ce18 	.word	0x3410ce18
3401de18:	341062c8 	.word	0x341062c8
3401de1c:	00000000 	.word	0x00000000

3401de20 <nn_thread_fct>:
{
3401de20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401de24:	ed2d 8b10 	vpush	{d8-d15}
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401de28:	2100      	movs	r1, #0
3401de2a:	2001      	movs	r0, #1
{
3401de2c:	b099      	sub	sp, #100	@ 0x64
  ret = BSP_PB_Init(id, BUTTON_MODE_GPIO);
3401de2e:	f7f1 f935 	bl	3400f09c <BSP_PB_Init>
  assert(ret == BSP_ERROR_NONE);
3401de32:	4605      	mov	r5, r0
3401de34:	b130      	cbz	r0, 3401de44 <nn_thread_fct+0x24>
3401de36:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
3401de3a:	4b8d      	ldr	r3, [pc, #564]	@ (3401e070 <nn_thread_fct+0x250>)
3401de3c:	4a8d      	ldr	r2, [pc, #564]	@ (3401e074 <nn_thread_fct+0x254>)
	assert(NN_OUT_NB == model_get_output_nb(nn_out_info));
3401de3e:	488e      	ldr	r0, [pc, #568]	@ (3401e078 <nn_thread_fct+0x258>)
3401de40:	f001 f9c0 	bl	3401f1c4 <__assert_func>
	const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_Default();
3401de44:	f7f0 fa96 	bl	3400e374 <LL_ATON_Output_Buffers_Info_Default>
3401de48:	4604      	mov	r4, r0
	const LL_Buffer_InfoTypeDef * nn_in_info = LL_ATON_Input_Buffers_Info_Default();
3401de4a:	f7f0 fa8f 	bl	3400e36c <LL_ATON_Input_Buffers_Info_Default>
  while (nn_out_info->name) {
3401de4e:	2238      	movs	r2, #56	@ 0x38
    return LL_Buffer_addr_base(buf) + buf->offset_limit;
  }

  static inline uint32_t LL_Buffer_len(const LL_Buffer_InfoTypeDef *buf)
  {
    return buf->offset_end - buf->offset_start;
3401de50:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
3401de54:	fb02 f305 	mul.w	r3, r2, r5
3401de58:	58e3      	ldr	r3, [r4, r3]
3401de5a:	2b00      	cmp	r3, #0
3401de5c:	d137      	bne.n	3401dece <nn_thread_fct+0xae>
	assert(NN_OUT_NB == model_get_output_nb(nn_out_info));
3401de5e:	2d03      	cmp	r5, #3
3401de60:	d137      	bne.n	3401ded2 <nn_thread_fct+0xb2>
3401de62:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
		assert(LL_Buffer_len(&nn_out_info[i]) == nn_out_len_user[i]);
3401de66:	f5a3 537d 	sub.w	r3, r3, #16192	@ 0x3f40
3401de6a:	3b08      	subs	r3, #8
3401de6c:	4293      	cmp	r3, r2
3401de6e:	d135      	bne.n	3401dedc <nn_thread_fct+0xbc>
3401de70:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
3401de74:	f5a3 337d 	sub.w	r3, r3, #259072	@ 0x3f400
3401de78:	3b80      	subs	r3, #128	@ 0x80
3401de7a:	4293      	cmp	r3, r2
3401de7c:	d12e      	bne.n	3401dedc <nn_thread_fct+0xbc>
3401de7e:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	@ 0x78
3401de82:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
3401de86:	3b20      	subs	r3, #32
3401de88:	4293      	cmp	r3, r2
3401de8a:	d127      	bne.n	3401dedc <nn_thread_fct+0xbc>
  const LL_Buffer_InfoTypeDef *nn_out_info = LL_ATON_Output_Buffers_Info_palm_detector();
3401de8c:	f7f0 fd66 	bl	3400e95c <LL_ATON_Output_Buffers_Info_palm_detector>
3401de90:	4604      	mov	r4, r0
  const LL_Buffer_InfoTypeDef *nn_in_info = LL_ATON_Input_Buffers_Info_palm_detector();
3401de92:	f7f0 fd5f 	bl	3400e954 <LL_ATON_Input_Buffers_Info_palm_detector>
    if (buf->is_user_allocated)
3401de96:	7d02      	ldrb	r2, [r0, #20]
3401de98:	6843      	ldr	r3, [r0, #4]
3401de9a:	b102      	cbz	r2, 3401de9e <nn_thread_fct+0x7e>
      return *tmp;
3401de9c:	681b      	ldr	r3, [r3, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
3401de9e:	6882      	ldr	r2, [r0, #8]
3401dea0:	4413      	add	r3, r2
  info->nn_in = LL_Buffer_addr_start(&nn_in_info[0]);
3401dea2:	9308      	str	r3, [sp, #32]
    return buf->offset_end - buf->offset_start;
3401dea4:	68c3      	ldr	r3, [r0, #12]
3401dea6:	1a9b      	subs	r3, r3, r2
    if (buf->is_user_allocated)
3401dea8:	7d22      	ldrb	r2, [r4, #20]
  info->nn_in_len = LL_Buffer_len(&nn_in_info[0]);
3401deaa:	9309      	str	r3, [sp, #36]	@ 0x24
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
3401deac:	6863      	ldr	r3, [r4, #4]
    if (buf->is_user_allocated)
3401deae:	b102      	cbz	r2, 3401deb2 <nn_thread_fct+0x92>
      return *tmp;
3401deb0:	681b      	ldr	r3, [r3, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
3401deb2:	68a2      	ldr	r2, [r4, #8]
3401deb4:	4413      	add	r3, r2
  info->prob_out = (float *) LL_Buffer_addr_start(&nn_out_info[0]);
3401deb6:	930a      	str	r3, [sp, #40]	@ 0x28
    return buf->offset_end - buf->offset_start;
3401deb8:	68e3      	ldr	r3, [r4, #12]
3401deba:	1a9b      	subs	r3, r3, r2
  assert(info->prob_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float));
3401debc:	f5b3 5ffc 	cmp.w	r3, #8064	@ 0x1f80
  info->prob_out_len = LL_Buffer_len(&nn_out_info[0]);
3401dec0:	930b      	str	r3, [sp, #44]	@ 0x2c
  assert(info->prob_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float));
3401dec2:	d010      	beq.n	3401dee6 <nn_thread_fct+0xc6>
3401dec4:	f240 413d 	movw	r1, #1085	@ 0x43d
3401dec8:	4b6c      	ldr	r3, [pc, #432]	@ (3401e07c <nn_thread_fct+0x25c>)
3401deca:	4a6d      	ldr	r2, [pc, #436]	@ (3401e080 <nn_thread_fct+0x260>)
3401decc:	e7b7      	b.n	3401de3e <nn_thread_fct+0x1e>
    nb++;
3401dece:	3501      	adds	r5, #1
    nn_out_info++;
3401ded0:	e7c0      	b.n	3401de54 <nn_thread_fct+0x34>
	assert(NN_OUT_NB == model_get_output_nb(nn_out_info));
3401ded2:	f240 5191 	movw	r1, #1425	@ 0x591
3401ded6:	4b6b      	ldr	r3, [pc, #428]	@ (3401e084 <nn_thread_fct+0x264>)
3401ded8:	4a6b      	ldr	r2, [pc, #428]	@ (3401e088 <nn_thread_fct+0x268>)
3401deda:	e7b0      	b.n	3401de3e <nn_thread_fct+0x1e>
		assert(LL_Buffer_len(&nn_out_info[i]) == nn_out_len_user[i]);
3401dedc:	f240 5193 	movw	r1, #1427	@ 0x593
3401dee0:	4b6a      	ldr	r3, [pc, #424]	@ (3401e08c <nn_thread_fct+0x26c>)
3401dee2:	4a69      	ldr	r2, [pc, #420]	@ (3401e088 <nn_thread_fct+0x268>)
3401dee4:	e7ab      	b.n	3401de3e <nn_thread_fct+0x1e>
    if (buf->is_user_allocated)
3401dee6:	f894 204c 	ldrb.w	r2, [r4, #76]	@ 0x4c
      unsigned char **tmp = (unsigned char **)buf->addr_base.p;
3401deea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    if (buf->is_user_allocated)
3401deec:	b102      	cbz	r2, 3401def0 <nn_thread_fct+0xd0>
      return *tmp;
3401deee:	681b      	ldr	r3, [r3, #0]
    return LL_Buffer_addr_base(buf) + buf->offset_start;
3401def0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
3401def2:	4413      	add	r3, r2
  info->boxes_out = (float *) LL_Buffer_addr_start(&nn_out_info[1]);
3401def4:	930c      	str	r3, [sp, #48]	@ 0x30
    return buf->offset_end - buf->offset_start;
3401def6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3401def8:	1a9b      	subs	r3, r3, r2
  assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
3401defa:	4a65      	ldr	r2, [pc, #404]	@ (3401e090 <nn_thread_fct+0x270>)
  info->boxes_out_len = LL_Buffer_len(&nn_out_info[1]);
3401defc:	930d      	str	r3, [sp, #52]	@ 0x34
  assert(info->boxes_out_len == AI_PD_MODEL_PP_TOTAL_DETECTIONS * sizeof(float) * 18);
3401defe:	4293      	cmp	r3, r2
3401df00:	d004      	beq.n	3401df0c <nn_thread_fct+0xec>
3401df02:	f44f 6188 	mov.w	r1, #1088	@ 0x440
3401df06:	4b63      	ldr	r3, [pc, #396]	@ (3401e094 <nn_thread_fct+0x274>)
3401df08:	4a5d      	ldr	r2, [pc, #372]	@ (3401e080 <nn_thread_fct+0x260>)
3401df0a:	e798      	b.n	3401de3e <nn_thread_fct+0x1e>
  ret = app_postprocess_init_pd(&info->static_param);
3401df0c:	a80e      	add	r0, sp, #56	@ 0x38
3401df0e:	f7ed ff39 	bl	3400bd84 <app_postprocess_init_pd>
  assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
3401df12:	4604      	mov	r4, r0
3401df14:	b120      	cbz	r0, 3401df20 <nn_thread_fct+0x100>
3401df16:	f240 4144 	movw	r1, #1092	@ 0x444
3401df1a:	4b5f      	ldr	r3, [pc, #380]	@ (3401e098 <nn_thread_fct+0x278>)
3401df1c:	4a58      	ldr	r2, [pc, #352]	@ (3401e080 <nn_thread_fct+0x260>)
3401df1e:	e78e      	b.n	3401de3e <nn_thread_fct+0x1e>
  nn_period[1] = HAL_GetTick();
3401df20:	f000 fdee 	bl	3401eb00 <HAL_GetTick>
  nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
3401df24:	4621      	mov	r1, r4
  nn_period[1] = HAL_GetTick();
3401df26:	4605      	mov	r5, r0
  nn_pipe_dst = bqueue_get_free(&nn_input_queue, 0);
3401df28:	485c      	ldr	r0, [pc, #368]	@ (3401e09c <nn_thread_fct+0x27c>)
3401df2a:	f7ff fab1 	bl	3401d490 <bqueue_get_free>
  assert(nn_pipe_dst);
3401df2e:	b920      	cbnz	r0, 3401df3a <nn_thread_fct+0x11a>
3401df30:	f44f 61bb 	mov.w	r1, #1496	@ 0x5d8
3401df34:	4b5a      	ldr	r3, [pc, #360]	@ (3401e0a0 <nn_thread_fct+0x280>)
3401df36:	4a5b      	ldr	r2, [pc, #364]	@ (3401e0a4 <nn_thread_fct+0x284>)
3401df38:	e781      	b.n	3401de3e <nn_thread_fct+0x1e>
  CAM_NNPipe_Start(nn_pipe_dst, CMW_MODE_CONTINUOUS); //nn_pipe_dst is the camera output buffer.
3401df3a:	4621      	mov	r1, r4
3401df3c:	f000 fd8c 	bl	3401ea58 <CAM_NNPipe_Start>
	IPL_resize_bilinear_iu8ou8_with_strides_RGB(in_data, out_data, stride_in, stride_out,
3401df40:	ed9f 8b49 	vldr	d8, [pc, #292]	@ 3401e068 <nn_thread_fct+0x248>
  box->x_center *= LCD_BG_WIDTH;
3401df44:	ed9f 9a58 	vldr	s18, [pc, #352]	@ 3401e0a8 <nn_thread_fct+0x288>
3401df48:	1bbf      	subs	r7, r7, r6
  int state = BSP_PB_GetState(b->button_id);
3401df4a:	2001      	movs	r0, #1
3401df4c:	f7f1 f904 	bl	3400f158 <BSP_PB_GetState>
  if (state != b->prev_state && state && b->on_click_handler)
3401df50:	42a0      	cmp	r0, r4
  int state = BSP_PB_GetState(b->button_id);
3401df52:	4606      	mov	r6, r0
  if (state != b->prev_state && state && b->on_click_handler)
3401df54:	d003      	beq.n	3401df5e <nn_thread_fct+0x13e>
3401df56:	b110      	cbz	r0, 3401df5e <nn_thread_fct+0x13e>
    b->on_click_handler(b->cb_args);
3401df58:	4854      	ldr	r0, [pc, #336]	@ (3401e0ac <nn_thread_fct+0x28c>)
3401df5a:	f7ff facd 	bl	3401d4f8 <on_pd_toggle_button_click>
    nn_period[1] = HAL_GetTick();
3401df5e:	f000 fdcf 	bl	3401eb00 <HAL_GetTick>
3401df62:	4680      	mov	r8, r0
    nn_period_ms = nn_period[1] - nn_period[0];
3401df64:	1b45      	subs	r5, r0, r5
    capture_buffer = bqueue_get_ready(&nn_input_queue);
3401df66:	484d      	ldr	r0, [pc, #308]	@ (3401e09c <nn_thread_fct+0x27c>)
3401df68:	f7ff faee 	bl	3401d548 <bqueue_get_ready>
    assert(capture_buffer);
3401df6c:	4682      	mov	sl, r0
3401df6e:	b920      	cbnz	r0, 3401df7a <nn_thread_fct+0x15a>
3401df70:	f240 51e9 	movw	r1, #1513	@ 0x5e9
3401df74:	4b4e      	ldr	r3, [pc, #312]	@ (3401e0b0 <nn_thread_fct+0x290>)
3401df76:	4a4b      	ldr	r2, [pc, #300]	@ (3401e0a4 <nn_thread_fct+0x284>)
3401df78:	e761      	b.n	3401de3e <nn_thread_fct+0x1e>
    idx_for_resize = frame_event_nb_for_resize % DISPLAY_BUFFER_NB;
3401df7a:	4b4e      	ldr	r3, [pc, #312]	@ (3401e0b4 <nn_thread_fct+0x294>)
    output_buffer = bqueue_get_free(&nn_output_queue, 1);
3401df7c:	2101      	movs	r1, #1
3401df7e:	484e      	ldr	r0, [pc, #312]	@ (3401e0b8 <nn_thread_fct+0x298>)
    idx_for_resize = frame_event_nb_for_resize % DISPLAY_BUFFER_NB;
3401df80:	f8d3 b000 	ldr.w	fp, [r3]
    output_buffer = bqueue_get_free(&nn_output_queue, 1);
3401df84:	f7ff fa84 	bl	3401d490 <bqueue_get_free>
    assert(output_buffer);
3401df88:	4604      	mov	r4, r0
3401df8a:	b920      	cbnz	r0, 3401df96 <nn_thread_fct+0x176>
3401df8c:	f240 51ee 	movw	r1, #1518	@ 0x5ee
3401df90:	4b4a      	ldr	r3, [pc, #296]	@ (3401e0bc <nn_thread_fct+0x29c>)
3401df92:	4a44      	ldr	r2, [pc, #272]	@ (3401e0a4 <nn_thread_fct+0x284>)
3401df94:	e753      	b.n	3401de3e <nn_thread_fct+0x1e>
      out[i] = out[i - 1] + ALIGN_VALUE(nn_out_len_user[i - 1], 32);
3401df96:	f500 537d 	add.w	r3, r0, #16192	@ 0x3f40
3401df9a:	3320      	adds	r3, #32
3401df9c:	9306      	str	r3, [sp, #24]
3401df9e:	f500 2386 	add.w	r3, r0, #274432	@ 0x43000
3401dfa2:	f503 7378 	add.w	r3, r3, #992	@ 0x3e0
3401dfa6:	9307      	str	r3, [sp, #28]
    out[0] = output_buffer;
3401dfa8:	9005      	str	r0, [sp, #20]
    ts = HAL_GetTick();
3401dfaa:	f000 fda9 	bl	3401eb00 <HAL_GetTick>
    if(turn_people_detection){
3401dfae:	4b44      	ldr	r3, [pc, #272]	@ (3401e0c0 <nn_thread_fct+0x2a0>)
    ts = HAL_GetTick();
3401dfb0:	4681      	mov	r9, r0
    if(turn_people_detection){
3401dfb2:	681b      	ldr	r3, [r3, #0]
3401dfb4:	2b00      	cmp	r3, #0
3401dfb6:	f000 8091 	beq.w	3401e0dc <nn_thread_fct+0x2bc>
   int ret = LL_ATON_Set_User_Input_Buffer_Default(0, buffer_in, info->nn_in_len);
3401dfba:	463a      	mov	r2, r7
3401dfbc:	4651      	mov	r1, sl
3401dfbe:	2000      	movs	r0, #0
3401dfc0:	f7f0 f922 	bl	3400e208 <LL_ATON_Set_User_Input_Buffer_Default>
   assert(ret == LL_ATON_User_IO_NOERROR);
3401dfc4:	b120      	cbz	r0, 3401dfd0 <nn_thread_fct+0x1b0>
3401dfc6:	f240 519a 	movw	r1, #1434	@ 0x59a
3401dfca:	4b3e      	ldr	r3, [pc, #248]	@ (3401e0c4 <nn_thread_fct+0x2a4>)
3401dfcc:	4a3e      	ldr	r2, [pc, #248]	@ (3401e0c8 <nn_thread_fct+0x2a8>)
3401dfce:	e736      	b.n	3401de3e <nn_thread_fct+0x1e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401dfd0:	f004 0e1f 	and.w	lr, r4, #31
3401dfd4:	f50e 2ea6 	add.w	lr, lr, #339968	@ 0x53000
  __ASM volatile ("dsb 0xF":::"memory");
3401dfd8:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401dfdc:	f10e 0eff 	add.w	lr, lr, #255	@ 0xff
3401dfe0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
3401dfe4:	f10e 0e01 	add.w	lr, lr, #1
3401dfe8:	f04e e001 	dls	lr, lr
3401dfec:	4b37      	ldr	r3, [pc, #220]	@ (3401e0cc <nn_thread_fct+0x2ac>)
3401dfee:	f8c3 425c 	str.w	r4, [r3, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401dff2:	3420      	adds	r4, #32
      } while ( op_size > 0 );
3401dff4:	f00f c805 	le	lr, 3401dfee <nn_thread_fct+0x1ce>
3401dff8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401dffc:	f3bf 8f6f 	isb	sy
   for (int i = 0; i < NN_OUT_NB; i++) {
3401e000:	2400      	movs	r4, #0
3401e002:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3401e0d8 <nn_thread_fct+0x2b8>
3401e006:	f10d 0b14 	add.w	fp, sp, #20
     ret = LL_ATON_Set_User_Output_Buffer_Default(i, buffer_out[i], nn_out_len_user[i]);
3401e00a:	4620      	mov	r0, r4
3401e00c:	f85a 2b04 	ldr.w	r2, [sl], #4
3401e010:	f85b 1b04 	ldr.w	r1, [fp], #4
3401e014:	f7f0 f914 	bl	3400e240 <LL_ATON_Set_User_Output_Buffer_Default>
     assert(ret == LL_ATON_User_IO_NOERROR);
3401e018:	b120      	cbz	r0, 3401e024 <nn_thread_fct+0x204>
3401e01a:	f240 519f 	movw	r1, #1439	@ 0x59f
3401e01e:	4b29      	ldr	r3, [pc, #164]	@ (3401e0c4 <nn_thread_fct+0x2a4>)
3401e020:	4a29      	ldr	r2, [pc, #164]	@ (3401e0c8 <nn_thread_fct+0x2a8>)
3401e022:	e70c      	b.n	3401de3e <nn_thread_fct+0x1e>
   for (int i = 0; i < NN_OUT_NB; i++) {
3401e024:	3401      	adds	r4, #1
3401e026:	2c03      	cmp	r4, #3
3401e028:	d1ef      	bne.n	3401e00a <nn_thread_fct+0x1ea>
   LL_ATON_RT_Main(&NN_Instance_Default);
3401e02a:	4829      	ldr	r0, [pc, #164]	@ (3401e0d0 <nn_thread_fct+0x2b0>)
3401e02c:	f7e6 f9bc 	bl	340043a8 <LL_ATON_RT_Main>
    inf_ms = HAL_GetTick() - ts;
3401e030:	f000 fd66 	bl	3401eb00 <HAL_GetTick>
    bqueue_put_free(&nn_input_queue);
3401e034:	4b19      	ldr	r3, [pc, #100]	@ (3401e09c <nn_thread_fct+0x27c>)
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401e036:	4c1d      	ldr	r4, [pc, #116]	@ (3401e0ac <nn_thread_fct+0x28c>)
    inf_ms = HAL_GetTick() - ts;
3401e038:	eba0 0909 	sub.w	r9, r0, r9
    bqueue_put_free(&nn_input_queue);
3401e03c:	6818      	ldr	r0, [r3, #0]
3401e03e:	f7ff fb3d 	bl	3401d6bc <bqueue_put_free.isra.0>
    bqueue_put_ready(&nn_output_queue);
3401e042:	481d      	ldr	r0, [pc, #116]	@ (3401e0b8 <nn_thread_fct+0x298>)
3401e044:	f7ff fb08 	bl	3401d658 <bqueue_put_ready>
    ret = xSemaphoreTake(disp.lock, portMAX_DELAY);
3401e048:	f04f 31ff 	mov.w	r1, #4294967295
3401e04c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
3401e04e:	f7ec fb8f 	bl	3400a770 <xQueueSemaphoreTake>
    assert(ret == pdTRUE);
3401e052:	2801      	cmp	r0, #1
3401e054:	f000 8199 	beq.w	3401e38a <nn_thread_fct+0x56a>
3401e058:	f240 610e 	movw	r1, #1550	@ 0x60e
3401e05c:	4b1d      	ldr	r3, [pc, #116]	@ (3401e0d4 <nn_thread_fct+0x2b4>)
3401e05e:	4a11      	ldr	r2, [pc, #68]	@ (3401e0a4 <nn_thread_fct+0x284>)
3401e060:	e6ed      	b.n	3401de3e <nn_thread_fct+0x1e>
3401e062:	bf00      	nop
3401e064:	f3af 8000 	nop.w
3401e068:	00000000 	.word	0x00000000
3401e06c:	406c0000 	.word	0x406c0000
3401e070:	3402c02d 	.word	0x3402c02d
3401e074:	34106193 	.word	0x34106193
3401e078:	3402bf69 	.word	0x3402bf69
3401e07c:	3402c0a6 	.word	0x3402c0a6
3401e080:	3410616b 	.word	0x3410616b
3401e084:	3402c043 	.word	0x3402c043
3401e088:	3410617e 	.word	0x3410617e
3401e08c:	3402c071 	.word	0x3402c071
3401e090:	00023700 	.word	0x00023700
3401e094:	3402c0ec 	.word	0x3402c0ec
3401e098:	3402c138 	.word	0x3402c138
3401e09c:	341f7be0 	.word	0x341f7be0
3401e0a0:	3402c15a 	.word	0x3402c15a
3401e0a4:	3410619f 	.word	0x3410619f
3401e0a8:	44480000 	.word	0x44480000
3401e0ac:	341f7d98 	.word	0x341f7d98
3401e0b0:	3402c166 	.word	0x3402c166
3401e0b4:	341f7c9c 	.word	0x341f7c9c
3401e0b8:	3415190c 	.word	0x3415190c
3401e0bc:	3402bfad 	.word	0x3402bfad
3401e0c0:	3410cdb0 	.word	0x3410cdb0
3401e0c4:	3402c175 	.word	0x3402c175
3401e0c8:	34106157 	.word	0x34106157
3401e0cc:	e000ed00 	.word	0xe000ed00
3401e0d0:	3410cde4 	.word	0x3410cde4
3401e0d4:	340263dc 	.word	0x340263dc
3401e0d8:	34106260 	.word	0x34106260
  start_ts = HAL_GetTick();
3401e0dc:	f000 fd10 	bl	3401eb00 <HAL_GetTick>
	IPL_resize_bilinear_iu8ou8_with_strides_RGB(in_data, out_data, stride_in, stride_out,
3401e0e0:	f44f 7348 	mov.w	r3, #800	@ 0x320
3401e0e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
3401e0e8:	4cc5      	ldr	r4, [pc, #788]	@ (3401e400 <nn_thread_fct+0x5e0>)
3401e0ea:	48c6      	ldr	r0, [pc, #792]	@ (3401e404 <nn_thread_fct+0x5e4>)
    	palm_detector_run(lcd_bg_buffer[idx_for_resize], &pd_info, &pd_ms);
3401e0ec:	f00b 0b03 	and.w	fp, fp, #3
	IPL_resize_bilinear_iu8ou8_with_strides_RGB(in_data, out_data, stride_in, stride_out,
3401e0f0:	e9cd 3200 	strd	r3, r2, [sp]
3401e0f4:	eeb0 1b48 	vmov.f64	d1, d8
3401e0f8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
3401e0fc:	ed9f 0bb0 	vldr	d0, [pc, #704]	@ 3401e3c0 <nn_thread_fct+0x5a0>
3401e100:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
3401e104:	fb04 000b 	mla	r0, r4, fp, r0
3401e108:	9908      	ldr	r1, [sp, #32]
3401e10a:	f7ed fec5 	bl	3400be98 <IPL_resize_bilinear_iu8ou8_with_strides_RGB>
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(info->nn_in, info->nn_in_len));
3401e10e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    if ( dsize > 0 ) {
3401e110:	2a00      	cmp	r2, #0
3401e112:	dd1c      	ble.n	3401e14e <nn_thread_fct+0x32e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401e114:	9b08      	ldr	r3, [sp, #32]
3401e116:	f003 011f 	and.w	r1, r3, #31
3401e11a:	4411      	add	r1, r2
  __ASM volatile ("dsb 0xF":::"memory");
3401e11c:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401e120:	43da      	mvns	r2, r3
3401e122:	185c      	adds	r4, r3, r1
3401e124:	4422      	add	r2, r4
3401e126:	3920      	subs	r1, #32
3401e128:	0952      	lsrs	r2, r2, #5
3401e12a:	3120      	adds	r1, #32
3401e12c:	f102 0e01 	add.w	lr, r2, #1
3401e130:	bfd8      	it	le
3401e132:	f04f 0e01 	movle.w	lr, #1
3401e136:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e13a:	48b3      	ldr	r0, [pc, #716]	@ (3401e408 <nn_thread_fct+0x5e8>)
3401e13c:	f8c0 3270 	str.w	r3, [r0, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
3401e140:	3320      	adds	r3, #32
      } while ( op_size > 0 );
3401e142:	f00f c805 	le	lr, 3401e13c <nn_thread_fct+0x31c>
3401e146:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e14a:	f3bf 8f6f 	isb	sy
  LL_ATON_RT_Main(&NN_Instance_palm_detector);
3401e14e:	48af      	ldr	r0, [pc, #700]	@ (3401e40c <nn_thread_fct+0x5ec>)
3401e150:	f7e6 f92a 	bl	340043a8 <LL_ATON_RT_Main>
  ret = app_postprocess_run_pd((void * []){info->prob_out, info->boxes_out}, 2, &info->pd_out, &info->static_param);
3401e154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401e156:	2102      	movs	r1, #2
3401e158:	9303      	str	r3, [sp, #12]
3401e15a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3401e15c:	aa16      	add	r2, sp, #88	@ 0x58
3401e15e:	9304      	str	r3, [sp, #16]
3401e160:	a803      	add	r0, sp, #12
3401e162:	ab0e      	add	r3, sp, #56	@ 0x38
3401e164:	f7ed fe36 	bl	3400bdd4 <app_postprocess_run_pd>
  assert(ret == AI_PD_POSTPROCESS_ERROR_NO);
3401e168:	b120      	cbz	r0, 3401e174 <nn_thread_fct+0x354>
3401e16a:	f240 4165 	movw	r1, #1125	@ 0x465
3401e16e:	4ba8      	ldr	r3, [pc, #672]	@ (3401e410 <nn_thread_fct+0x5f0>)
3401e170:	4aa8      	ldr	r2, [pc, #672]	@ (3401e414 <nn_thread_fct+0x5f4>)
3401e172:	e664      	b.n	3401de3e <nn_thread_fct+0x1e>
  for (i = 0; i < hand_nb; i++) {
3401e174:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
3401e176:	2b00      	cmp	r3, #0
3401e178:	f000 80be 	beq.w	3401e2f8 <nn_thread_fct+0x4d8>
    cvt_pd_coord_to_screen_coord(&info->pd_out.pOutData[i]);
3401e17c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  box->x_center *= LCD_BG_WIDTH;
3401e17e:	f04f 0e07 	mov.w	lr, #7
3401e182:	ed93 aa01 	vldr	s20, [r3, #4]
  box->y_center *= LCD_BG_WIDTH;
3401e186:	edd3 9a02 	vldr	s19, [r3, #8]
  box->width *= LCD_BG_WIDTH;
3401e18a:	ed93 ba03 	vldr	s22, [r3, #12]
  box->height *= LCD_BG_WIDTH;
3401e18e:	edd3 7a04 	vldr	s15, [r3, #16]
  box->x_center *= LCD_BG_WIDTH;
3401e192:	ee2a aa09 	vmul.f32	s20, s20, s18
  box->y_center *= LCD_BG_WIDTH;
3401e196:	ee69 9a89 	vmul.f32	s19, s19, s18
  box->width *= LCD_BG_WIDTH;
3401e19a:	ee2b ba09 	vmul.f32	s22, s22, s18
  box->height *= LCD_BG_WIDTH;
3401e19e:	ee67 aa89 	vmul.f32	s21, s15, s18
    box->pKps[i].x *= LCD_BG_WIDTH;
3401e1a2:	695a      	ldr	r2, [r3, #20]
  box->x_center *= LCD_BG_WIDTH;
3401e1a4:	ed83 aa01 	vstr	s20, [r3, #4]
  box->y_center *= LCD_BG_WIDTH;
3401e1a8:	edc3 9a02 	vstr	s19, [r3, #8]
  box->width *= LCD_BG_WIDTH;
3401e1ac:	ed83 ba03 	vstr	s22, [r3, #12]
  box->height *= LCD_BG_WIDTH;
3401e1b0:	edc3 aa04 	vstr	s21, [r3, #16]
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401e1b4:	f04e e001 	dls	lr, lr
3401e1b8:	4613      	mov	r3, r2
    box->pKps[i].x *= LCD_BG_WIDTH;
3401e1ba:	edd3 7a00 	vldr	s15, [r3]
3401e1be:	ee67 7a89 	vmul.f32	s15, s15, s18
3401e1c2:	edc3 7a00 	vstr	s15, [r3]
    box->pKps[i].y *= LCD_BG_WIDTH;
3401e1c6:	edd3 7a01 	vldr	s15, [r3, #4]
3401e1ca:	ee67 7a89 	vmul.f32	s15, s15, s18
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401e1ce:	3308      	adds	r3, #8
    box->pKps[i].y *= LCD_BG_WIDTH;
3401e1d0:	ed43 7a01 	vstr	s15, [r3, #-4]
  for (i = 0; i < AI_PD_MODEL_PP_NB_KEYPOINTS; i++) {
3401e1d4:	f00f c80f 	le	lr, 3401e1ba <nn_thread_fct+0x39a>
  rotation = M_PI * 0.5 - atan2f(-(y1 - y0), x1 - x0);
3401e1d8:	ed92 7a01 	vldr	s14, [r2, #4]
3401e1dc:	ed92 0a05 	vldr	s0, [r2, #20]
3401e1e0:	edd2 7a00 	vldr	s15, [r2]
3401e1e4:	ee30 0a47 	vsub.f32	s0, s0, s14
3401e1e8:	edd2 0a04 	vldr	s1, [r2, #16]
3401e1ec:	eeb1 0a40 	vneg.f32	s0, s0
3401e1f0:	ee70 0ae7 	vsub.f32	s1, s1, s15
3401e1f4:	f004 faa0 	bl	34022738 <atan2f>
3401e1f8:	ed9f 7b73 	vldr	d7, [pc, #460]	@ 3401e3c8 <nn_thread_fct+0x5a8>
3401e1fc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
3401e200:	ee37 7b40 	vsub.f64	d7, d7, d0
3401e204:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  return angle - 2 * M_PI * floorf((angle - (-M_PI)) / (2 * M_PI));
3401e208:	ed9f 4b71 	vldr	d4, [pc, #452]	@ 3401e3d0 <nn_thread_fct+0x5b0>
3401e20c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401e210:	ed9f 5b71 	vldr	d5, [pc, #452]	@ 3401e3d8 <nn_thread_fct+0x5b8>
3401e214:	ee37 4b04 	vadd.f64	d4, d7, d4
3401e218:	ee84 6b05 	vdiv.f64	d6, d4, d5
3401e21c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
3401e220:	febb 6a46 	vrintm.f32	s12, s12
3401e224:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
3401e228:	eea6 7b45 	vfms.f64	d7, d6, d5
3401e22c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  if (angle >= (3 * M_PI) / 4)
3401e230:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 3401e3e0 <nn_thread_fct+0x5c0>
3401e234:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
3401e238:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401e23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e240:	eddf ba75 	vldr	s23, [pc, #468]	@ 3401e418 <nn_thread_fct+0x5f8>
3401e244:	f280 809b 	bge.w	3401e37e <nn_thread_fct+0x55e>
  else if (angle >= (1 * M_PI) / 4)
3401e248:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 3401e3e8 <nn_thread_fct+0x5c8>
3401e24c:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e254:	f280 8096 	bge.w	3401e384 <nn_thread_fct+0x564>
  else if (angle >= -(1 * M_PI) / 4)
3401e258:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 3401e3f0 <nn_thread_fct+0x5d0>
3401e25c:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401e260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    angle = 0;
3401e264:	eeb0 0a6b 	vmov.f32	s0, s23
  else if (angle >= -(1 * M_PI) / 4)
3401e268:	da0b      	bge.n	3401e282 <nn_thread_fct+0x462>
    angle = -M_PI;
3401e26a:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 3401e3f8 <nn_thread_fct+0x5d8>
3401e26e:	eeb4 7bc6 	vcmpe.f64	d7, d6
3401e272:	ed9f 0a6a 	vldr	s0, [pc, #424]	@ 3401e41c <nn_thread_fct+0x5fc>
3401e276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e27a:	eddf 7a69 	vldr	s15, [pc, #420]	@ 3401e420 <nn_thread_fct+0x600>
3401e27e:	fe20 0a27 	vselge.f32	s0, s0, s15
  sx = (roi->w * shift_x * cos(roi->rotation) - roi->h * shift_y * sin(roi->rotation));
3401e282:	eeb7 fac0 	vcvt.f64.f32	d15, s0
3401e286:	eebe ea00 	vmov.f32	s28, #224	@ 0xbf000000 -0.5
3401e28a:	eeb0 0b4f 	vmov.f64	d0, d15
3401e28e:	f004 f9bb 	bl	34022608 <cos>
3401e292:	ee2a ea8e 	vmul.f32	s28, s21, s28
3401e296:	eeb0 cb40 	vmov.f64	d12, d0
3401e29a:	eeb0 0b4f 	vmov.f64	d0, d15
3401e29e:	f004 f9ff 	bl	340226a0 <sin>
3401e2a2:	eeb7 eace 	vcvt.f64.f32	d14, s28
3401e2a6:	ee2b da2b 	vmul.f32	s26, s22, s23
3401e2aa:	ee20 7b4e 	vnmul.f64	d7, d0, d14
3401e2ae:	eeb7 dacd 	vcvt.f64.f32	d13, s26
3401e2b2:	eead 7b0c 	vfma.f64	d7, d13, d12
3401e2b6:	eef7 6bc7 	vcvt.f32.f64	s13, d7
  sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
3401e2ba:	ee2c 7b0e 	vmul.f64	d7, d12, d14
  long_side = MAX(roi->w, roi->h);
3401e2be:	eeb4 ba6a 	vcmp.f32	s22, s21
  sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
3401e2c2:	eead 7b00 	vfma.f64	d7, d13, d0
  long_side = MAX(roi->w, roi->h);
3401e2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  sy = (roi->w * shift_x * sin(roi->rotation) + roi->h * shift_y * cos(roi->rotation));
3401e2ca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  roi->w *= scale_x;
3401e2ce:	eddf 7a55 	vldr	s15, [pc, #340]	@ 3401e424 <nn_thread_fct+0x604>
  long_side = MAX(roi->w, roi->h);
3401e2d2:	fe7b aa2a 	vselgt.f32	s21, s22, s21
  roi->w *= scale_x;
3401e2d6:	ee6a 7aa7 	vmul.f32	s15, s21, s15
  roi->cx += sx;
3401e2da:	ee3a aa26 	vadd.f32	s20, s20, s13
  roi->cy += sy;
3401e2de:	ee37 7a29 	vadd.f32	s14, s14, s19
  roi->cx += sx;
3401e2e2:	4b51      	ldr	r3, [pc, #324]	@ (3401e428 <nn_thread_fct+0x608>)
3401e2e4:	ed83 aa00 	vstr	s20, [r3]
  roi->cy += sy;
3401e2e8:	ed83 7a01 	vstr	s14, [r3, #4]
  roi->w *= scale_x;
3401e2ec:	edc3 7a02 	vstr	s15, [r3, #8]
  roi->h *= scale_y;
3401e2f0:	edc3 7a03 	vstr	s15, [r3, #12]
  roi->rotation = 0;
3401e2f4:	edc3 ba04 	vstr	s23, [r3, #16]
  CACHE_OP(SCB_InvalidateDCache_by_Addr(info->prob_out, info->prob_out_len));
3401e2f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    if ( dsize > 0 ) {
3401e2fa:	2b00      	cmp	r3, #0
3401e2fc:	dd1c      	ble.n	3401e338 <nn_thread_fct+0x518>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401e2fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
3401e300:	f001 021f 	and.w	r2, r1, #31
3401e304:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3401e306:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401e30a:	43cb      	mvns	r3, r1
3401e30c:	188c      	adds	r4, r1, r2
3401e30e:	4423      	add	r3, r4
3401e310:	3a20      	subs	r2, #32
3401e312:	095b      	lsrs	r3, r3, #5
3401e314:	3220      	adds	r2, #32
3401e316:	f103 0e01 	add.w	lr, r3, #1
3401e31a:	bfd8      	it	le
3401e31c:	f04f 0e01 	movle.w	lr, #1
3401e320:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e324:	4838      	ldr	r0, [pc, #224]	@ (3401e408 <nn_thread_fct+0x5e8>)
3401e326:	f8c0 125c 	str.w	r1, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401e32a:	3120      	adds	r1, #32
      } while ( op_size > 0 );
3401e32c:	f00f c805 	le	lr, 3401e326 <nn_thread_fct+0x506>
3401e330:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e334:	f3bf 8f6f 	isb	sy
  CACHE_OP(SCB_InvalidateDCache_by_Addr(info->boxes_out, info->boxes_out_len));
3401e338:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    if ( dsize > 0 ) {
3401e33a:	2b00      	cmp	r3, #0
3401e33c:	dd1c      	ble.n	3401e378 <nn_thread_fct+0x558>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
3401e33e:	990c      	ldr	r1, [sp, #48]	@ 0x30
3401e340:	f001 021f 	and.w	r2, r1, #31
3401e344:	441a      	add	r2, r3
  __ASM volatile ("dsb 0xF":::"memory");
3401e346:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401e34a:	43cb      	mvns	r3, r1
3401e34c:	188c      	adds	r4, r1, r2
3401e34e:	4423      	add	r3, r4
3401e350:	3a20      	subs	r2, #32
3401e352:	095b      	lsrs	r3, r3, #5
3401e354:	3220      	adds	r2, #32
3401e356:	f103 0e01 	add.w	lr, r3, #1
3401e35a:	bfd8      	it	le
3401e35c:	f04f 0e01 	movle.w	lr, #1
3401e360:	f04e e001 	dls	lr, lr
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e364:	4828      	ldr	r0, [pc, #160]	@ (3401e408 <nn_thread_fct+0x5e8>)
3401e366:	f8c0 125c 	str.w	r1, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
3401e36a:	3120      	adds	r1, #32
      } while ( op_size > 0 );
3401e36c:	f00f c805 	le	lr, 3401e366 <nn_thread_fct+0x546>
3401e370:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e374:	f3bf 8f6f 	isb	sy
  *pd_exec_time = HAL_GetTick() - start_ts;
3401e378:	f000 fbc2 	bl	3401eb00 <HAL_GetTick>
  return hand_nb;
3401e37c:	e658      	b.n	3401e030 <nn_thread_fct+0x210>
    angle = M_PI;
3401e37e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 3401e42c <nn_thread_fct+0x60c>
3401e382:	e77e      	b.n	3401e282 <nn_thread_fct+0x462>
    angle = M_PI / 2;
3401e384:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 3401e430 <nn_thread_fct+0x610>
3401e388:	e77b      	b.n	3401e282 <nn_thread_fct+0x462>
    disp.info.nn_period_ms = nn_period_ms;
3401e38a:	ee07 5a90 	vmov	s15, r5
    ret = xSemaphoreGive(disp.lock);
3401e38e:	2300      	movs	r3, #0
    disp.info.nn_period_ms = nn_period_ms;
3401e390:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ret = xSemaphoreGive(disp.lock);
3401e394:	461a      	mov	r2, r3
3401e396:	4619      	mov	r1, r3
3401e398:	6d60      	ldr	r0, [r4, #84]	@ 0x54
    disp.info.nn_period_ms = nn_period_ms;
3401e39a:	edc4 7ace 	vstr	s15, [r4, #824]	@ 0x338
    disp.info.inf_ms = inf_ms;
3401e39e:	f8c4 933c 	str.w	r9, [r4, #828]	@ 0x33c
    ret = xSemaphoreGive(disp.lock);
3401e3a2:	f7ec f841 	bl	3400a428 <xQueueGenericSend>
    assert(ret == pdTRUE);
3401e3a6:	2801      	cmp	r0, #1
3401e3a8:	d004      	beq.n	3401e3b4 <nn_thread_fct+0x594>
3401e3aa:	f240 6112 	movw	r1, #1554	@ 0x612
3401e3ae:	4b21      	ldr	r3, [pc, #132]	@ (3401e434 <nn_thread_fct+0x614>)
3401e3b0:	4a21      	ldr	r2, [pc, #132]	@ (3401e438 <nn_thread_fct+0x618>)
3401e3b2:	e544      	b.n	3401de3e <nn_thread_fct+0x1e>
  b->prev_state = state;
3401e3b4:	4634      	mov	r4, r6
    nn_period[1] = HAL_GetTick();
3401e3b6:	4645      	mov	r5, r8
  {
3401e3b8:	e5c7      	b.n	3401df4a <nn_thread_fct+0x12a>
3401e3ba:	bf00      	nop
3401e3bc:	f3af 8000 	nop.w
3401e3c0:	00000000 	.word	0x00000000
3401e3c4:	406c0000 	.word	0x406c0000
3401e3c8:	54442d18 	.word	0x54442d18
3401e3cc:	3ff921fb 	.word	0x3ff921fb
3401e3d0:	54442d18 	.word	0x54442d18
3401e3d4:	400921fb 	.word	0x400921fb
3401e3d8:	54442d18 	.word	0x54442d18
3401e3dc:	401921fb 	.word	0x401921fb
3401e3e0:	7f3321d2 	.word	0x7f3321d2
3401e3e4:	4002d97c 	.word	0x4002d97c
3401e3e8:	54442d18 	.word	0x54442d18
3401e3ec:	3fe921fb 	.word	0x3fe921fb
3401e3f0:	54442d18 	.word	0x54442d18
3401e3f4:	bfe921fb 	.word	0xbfe921fb
3401e3f8:	7f3321d2 	.word	0x7f3321d2
3401e3fc:	c002d97c 	.word	0xc002d97c
3401e400:	000bb800 	.word	0x000bb800
3401e404:	91384000 	.word	0x91384000
3401e408:	e000ed00 	.word	0xe000ed00
3401e40c:	3410cdb4 	.word	0x3410cdb4
3401e410:	3402c138 	.word	0x3402c138
3401e414:	34106145 	.word	0x34106145
3401e418:	00000000 	.word	0x00000000
3401e41c:	bfc90fdb 	.word	0xbfc90fdb
3401e420:	c0490fdb 	.word	0xc0490fdb
3401e424:	40266666 	.word	0x40266666
3401e428:	341f7ca4 	.word	0x341f7ca4
3401e42c:	40490fdb 	.word	0x40490fdb
3401e430:	3fc90fdb 	.word	0x3fc90fdb
3401e434:	340263dc 	.word	0x340263dc
3401e438:	3410619f 	.word	0x3410619f

3401e43c <app_run>:
  UTIL_LCD_SetFont(&LCD_FONT);
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
}

void app_run()
{
3401e43c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TaskHandle_t hdl;
  int ret;

  printf("Init application\n");
  /* Enable DWT so DWT_CYCCNT works when debugger not attached */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e43e:	4d92      	ldr	r5, [pc, #584]	@ (3401e688 <app_run+0x24c>)
{
3401e440:	b093      	sub	sp, #76	@ 0x4c
  printf("Init application\n");
3401e442:	4892      	ldr	r0, [pc, #584]	@ (3401e68c <app_run+0x250>)
3401e444:	f001 fdd2 	bl	3401ffec <puts>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e448:	f8d5 30fc 	ldr.w	r3, [r5, #252]	@ 0xfc

  /* screen init */
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401e44c:	4c90      	ldr	r4, [pc, #576]	@ (3401e690 <app_run+0x254>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e44e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401e452:	2100      	movs	r1, #0
3401e454:	4620      	mov	r0, r4
3401e456:	4a8f      	ldr	r2, [pc, #572]	@ (3401e694 <app_run+0x258>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
3401e458:	f8c5 30fc 	str.w	r3, [r5, #252]	@ 0xfc
  memset(lcd_bg_buffer, 0, sizeof(lcd_bg_buffer));
3401e45c:	f001 fefc 	bl	34020258 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
3401e460:	f3bf 8f4f 	dsb	sy
      } while ( op_size > 0 );
3401e464:	f8df e2d0 	ldr.w	lr, [pc, #720]	@ 3401e738 <app_run+0x2fc>
}
3401e468:	2300      	movs	r3, #0
3401e46a:	f04e e001 	dls	lr, lr
3401e46e:	18e2      	adds	r2, r4, r3
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e470:	f8c5 2270 	str.w	r2, [r5, #624]	@ 0x270
      } while ( op_size > 0 );
3401e474:	3320      	adds	r3, #32
3401e476:	f00f c007 	le	lr, 3401e46e <app_run+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
3401e47a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e47e:	f3bf 8f6f 	isb	sy
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_bg_buffer, sizeof(lcd_bg_buffer)));
  memset(lcd_fg_buffer, 0, sizeof(lcd_fg_buffer));
3401e482:	4d85      	ldr	r5, [pc, #532]	@ (3401e698 <app_run+0x25c>)
3401e484:	2100      	movs	r1, #0
3401e486:	4628      	mov	r0, r5
3401e488:	4a84      	ldr	r2, [pc, #528]	@ (3401e69c <app_run+0x260>)
3401e48a:	f001 fee5 	bl	34020258 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
3401e48e:	f3bf 8f4f 	dsb	sy
3401e492:	f64b 3e80 	movw	lr, #48000	@ 0xbb80
}
3401e496:	2300      	movs	r3, #0
3401e498:	f04e e001 	dls	lr, lr
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
3401e49c:	4a7a      	ldr	r2, [pc, #488]	@ (3401e688 <app_run+0x24c>)
3401e49e:	18e9      	adds	r1, r5, r3
3401e4a0:	f8c2 1270 	str.w	r1, [r2, #624]	@ 0x270
      } while ( op_size > 0 );
3401e4a4:	3320      	adds	r3, #32
3401e4a6:	f00f c007 	le	lr, 3401e49e <app_run+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
3401e4aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401e4ae:	f3bf 8f6f 	isb	sy
  SCRL_LayerConfig layers_config[2] = {
3401e4b2:	2200      	movs	r2, #0
3401e4b4:	4b7a      	ldr	r3, [pc, #488]	@ (3401e6a0 <app_run+0x264>)
3401e4b6:	2501      	movs	r5, #1
3401e4b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
3401e4bc:	930f      	str	r3, [sp, #60]	@ 0x3c
  SCRL_ScreenConfig screen_config = {
3401e4be:	9306      	str	r3, [sp, #24]
3401e4c0:	2302      	movs	r3, #2
3401e4c2:	f88d 301c 	strb.w	r3, [sp, #28]
3401e4c6:	4b77      	ldr	r3, [pc, #476]	@ (3401e6a4 <app_run+0x268>)
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401e4c8:	4977      	ldr	r1, [pc, #476]	@ (3401e6a8 <app_run+0x26c>)
  SCRL_ScreenConfig screen_config = {
3401e4ca:	9308      	str	r3, [sp, #32]
3401e4cc:	2314      	movs	r3, #20
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401e4ce:	6809      	ldr	r1, [r1, #0]
3401e4d0:	4876      	ldr	r0, [pc, #472]	@ (3401e6ac <app_run+0x270>)
  SCRL_LayerConfig layers_config[2] = {
3401e4d2:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
      .address = lcd_bg_buffer[lcd_bg_buffer_disp_idx],
3401e4d6:	fb00 4401 	mla	r4, r0, r1, r4
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401e4da:	af06      	add	r7, sp, #24
  SCRL_LayerConfig layers_config[2] = {
3401e4dc:	e9cd 420d 	strd	r4, r2, [sp, #52]	@ 0x34
3401e4e0:	4a73      	ldr	r2, [pc, #460]	@ (3401e6b0 <app_run+0x274>)
  SCRL_ScreenConfig screen_config = {
3401e4e2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401e4e6:	4639      	mov	r1, r7
3401e4e8:	ab0e      	add	r3, sp, #56	@ 0x38
3401e4ea:	ac0a      	add	r4, sp, #40	@ 0x28
3401e4ec:	a804      	add	r0, sp, #16
  SCRL_LayerConfig layers_config[2] = {
3401e4ee:	f88d 5040 	strb.w	r5, [sp, #64]	@ 0x40
3401e4f2:	9211      	str	r2, [sp, #68]	@ 0x44
  ret = SCRL_Init((SCRL_LayerConfig *[2]){&layers_config[0], &layers_config[1]}, &screen_config);
3401e4f4:	9404      	str	r4, [sp, #16]
3401e4f6:	9305      	str	r3, [sp, #20]
3401e4f8:	f7ee fd64 	bl	3400cfc4 <SCRL_Init>
  assert(ret == 0);
3401e4fc:	4606      	mov	r6, r0
3401e4fe:	b130      	cbz	r0, 3401e50e <app_run+0xd2>
3401e500:	f240 7101 	movw	r1, #1793	@ 0x701
3401e504:	4b6b      	ldr	r3, [pc, #428]	@ (3401e6b4 <app_run+0x278>)
3401e506:	4a6c      	ldr	r2, [pc, #432]	@ (3401e6b8 <app_run+0x27c>)
  CACHE_OP(SCB_CleanInvalidateDCache_by_Addr(lcd_fg_buffer, sizeof(lcd_fg_buffer)));
  Display_init();

  /* create buffer queues */
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
  assert(ret == 0);
3401e508:	486c      	ldr	r0, [pc, #432]	@ (3401e6bc <app_run+0x280>)
3401e50a:	f000 fe5b 	bl	3401f1c4 <__assert_func>
  UTIL_LCD_SetLayer(SCRL_LAYER_1);
3401e50e:	4628      	mov	r0, r5
3401e510:	f7fe fd16 	bl	3401cf40 <UTIL_LCD_SetLayer>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
3401e514:	4630      	mov	r0, r6
3401e516:	f7fe ff6d 	bl	3401d3f4 <UTIL_LCD_Clear>
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
3401e51a:	4e69      	ldr	r6, [pc, #420]	@ (3401e6c0 <app_run+0x284>)
  UTIL_LCD_SetFont(&LCD_FONT);
3401e51c:	4869      	ldr	r0, [pc, #420]	@ (3401e6c4 <app_run+0x288>)
3401e51e:	f7fe fd3d 	bl	3401cf9c <UTIL_LCD_SetFont>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
3401e522:	f04f 30ff 	mov.w	r0, #4294967295
3401e526:	f7fe fd31 	bl	3401cf8c <UTIL_LCD_SetTextColor>
  ret = bqueue_init(&nn_input_queue, 2, (uint8_t *[2]){nn_input_buffers[0], nn_input_buffers[1]});
3401e52a:	e896 0003 	ldmia.w	r6, {r0, r1}
3401e52e:	e887 0003 	stmia.w	r7, {r0, r1}
3401e532:	4639      	mov	r1, r7
3401e534:	4864      	ldr	r0, [pc, #400]	@ (3401e6c8 <app_run+0x28c>)
3401e536:	f7ff f82d 	bl	3401d594 <bqueue_init.constprop.0>
  assert(ret == 0);
3401e53a:	b120      	cbz	r0, 3401e546 <app_run+0x10a>
3401e53c:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
3401e540:	4b5c      	ldr	r3, [pc, #368]	@ (3401e6b4 <app_run+0x278>)
3401e542:	4a62      	ldr	r2, [pc, #392]	@ (3401e6cc <app_run+0x290>)
3401e544:	e7e0      	b.n	3401e508 <app_run+0xcc>
  ret = bqueue_init(&nn_output_queue, 2, (uint8_t *[2]){nn_output_buffers[0], nn_output_buffers[1]});
3401e546:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
3401e54a:	e884 0003 	stmia.w	r4, {r0, r1}
3401e54e:	4621      	mov	r1, r4
3401e550:	485f      	ldr	r0, [pc, #380]	@ (3401e6d0 <app_run+0x294>)
3401e552:	f7ff f81f 	bl	3401d594 <bqueue_init.constprop.0>
  assert(ret == 0);
3401e556:	b120      	cbz	r0, 3401e562 <app_run+0x126>
3401e558:	f240 7122 	movw	r1, #1826	@ 0x722
3401e55c:	4b55      	ldr	r3, [pc, #340]	@ (3401e6b4 <app_run+0x278>)
3401e55e:	4a5b      	ldr	r2, [pc, #364]	@ (3401e6cc <app_run+0x290>)
3401e560:	e7d2      	b.n	3401e508 <app_run+0xcc>

#ifdef TRACKER_MODULE
  ret = TRK_Init();
3401e562:	f7fe ffd7 	bl	3401d514 <TRK_Init>
3401e566:	4601      	mov	r1, r0
  assert(ret == 0);
3401e568:	b120      	cbz	r0, 3401e574 <app_run+0x138>
3401e56a:	f240 7126 	movw	r1, #1830	@ 0x726
3401e56e:	4b51      	ldr	r3, [pc, #324]	@ (3401e6b4 <app_run+0x278>)
3401e570:	4a56      	ldr	r2, [pc, #344]	@ (3401e6cc <app_run+0x290>)
3401e572:	e7c9      	b.n	3401e508 <app_run+0xcc>
  ret = BSP_PB_Init(BUTTON_TOGGLE_TRACKING, BUTTON_MODE_GPIO);
3401e574:	f7f0 fd92 	bl	3400f09c <BSP_PB_Init>
  assert(ret == BSP_ERROR_NONE);
3401e578:	4604      	mov	r4, r0
3401e57a:	b120      	cbz	r0, 3401e586 <app_run+0x14a>
3401e57c:	f44f 61e5 	mov.w	r1, #1832	@ 0x728
3401e580:	4b54      	ldr	r3, [pc, #336]	@ (3401e6d4 <app_run+0x298>)
3401e582:	4a52      	ldr	r2, [pc, #328]	@ (3401e6cc <app_run+0x290>)
3401e584:	e7c0      	b.n	3401e508 <app_run+0xcc>
  memset(cpu_load, 0, sizeof(cpuload_info_t));
3401e586:	4601      	mov	r1, r0
3401e588:	22e0      	movs	r2, #224	@ 0xe0
3401e58a:	4853      	ldr	r0, [pc, #332]	@ (3401e6d8 <app_run+0x29c>)
3401e58c:	f001 fe64 	bl	34020258 <memset>
#endif

  cpuload_init(&cpu_load);

  /*** Camera Init ************************************************************/  
  CAM_Init();
3401e590:	f000 f9e2 	bl	3401e958 <CAM_Init>

  /* sems + mutex init */
  isp_sem = xSemaphoreCreateCountingStatic(1, 0, &isp_sem_buffer);
3401e594:	4621      	mov	r1, r4
3401e596:	4628      	mov	r0, r5
3401e598:	4a50      	ldr	r2, [pc, #320]	@ (3401e6dc <app_run+0x2a0>)
3401e59a:	f7eb ff25 	bl	3400a3e8 <xQueueCreateCountingSemaphoreStatic>
3401e59e:	4b50      	ldr	r3, [pc, #320]	@ (3401e6e0 <app_run+0x2a4>)
3401e5a0:	6018      	str	r0, [r3, #0]
  assert(isp_sem);
3401e5a2:	b920      	cbnz	r0, 3401e5ae <app_run+0x172>
3401e5a4:	f240 7132 	movw	r1, #1842	@ 0x732
3401e5a8:	4b4e      	ldr	r3, [pc, #312]	@ (3401e6e4 <app_run+0x2a8>)
3401e5aa:	4a48      	ldr	r2, [pc, #288]	@ (3401e6cc <app_run+0x290>)
3401e5ac:	e7ac      	b.n	3401e508 <app_run+0xcc>
  disp.update = xSemaphoreCreateCountingStatic(1, 0, &disp.update_buffer);
3401e5ae:	4e4e      	ldr	r6, [pc, #312]	@ (3401e6e8 <app_run+0x2ac>)
3401e5b0:	4621      	mov	r1, r4
3401e5b2:	4632      	mov	r2, r6
3401e5b4:	4628      	mov	r0, r5
3401e5b6:	f7eb ff17 	bl	3400a3e8 <xQueueCreateCountingSemaphoreStatic>
3401e5ba:	1f37      	subs	r7, r6, #4
3401e5bc:	f846 0c04 	str.w	r0, [r6, #-4]
  assert(disp.update);
3401e5c0:	b920      	cbnz	r0, 3401e5cc <app_run+0x190>
3401e5c2:	f240 7134 	movw	r1, #1844	@ 0x734
3401e5c6:	4b49      	ldr	r3, [pc, #292]	@ (3401e6ec <app_run+0x2b0>)
3401e5c8:	4a40      	ldr	r2, [pc, #256]	@ (3401e6cc <app_run+0x290>)
3401e5ca:	e79d      	b.n	3401e508 <app_run+0xcc>
  disp.lock = xSemaphoreCreateMutexStatic(&disp.lock_buffer);
3401e5cc:	4628      	mov	r0, r5
3401e5ce:	f106 0154 	add.w	r1, r6, #84	@ 0x54
3401e5d2:	f7eb ffcb 	bl	3400a56c <xQueueCreateMutexStatic>
3401e5d6:	6578      	str	r0, [r7, #84]	@ 0x54
  assert(disp.lock);
3401e5d8:	b920      	cbnz	r0, 3401e5e4 <app_run+0x1a8>
3401e5da:	f240 7136 	movw	r1, #1846	@ 0x736
3401e5de:	4b44      	ldr	r3, [pc, #272]	@ (3401e6f0 <app_run+0x2b4>)
3401e5e0:	4a3a      	ldr	r2, [pc, #232]	@ (3401e6cc <app_run+0x290>)
3401e5e2:	e791      	b.n	3401e508 <app_run+0xcc>

  /* Start LCD Display camera pipe stream */
  CAM_DisplayPipe_Start(lcd_bg_buffer[0], CMW_MODE_CONTINUOUS);
3401e5e4:	4621      	mov	r1, r4
3401e5e6:	482a      	ldr	r0, [pc, #168]	@ (3401e690 <app_run+0x254>)
3401e5e8:	f000 fa22 	bl	3401ea30 <CAM_DisplayPipe_Start>

  /* threads init */
  hdl = xTaskCreateStatic(nn_thread_fct, "nn", configMINIMAL_STACK_SIZE * 2, NULL, nn_priority, nn_thread_stack,
3401e5ec:	4b41      	ldr	r3, [pc, #260]	@ (3401e6f4 <app_run+0x2b8>)
3401e5ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e5f2:	9302      	str	r3, [sp, #8]
3401e5f4:	4b40      	ldr	r3, [pc, #256]	@ (3401e6f8 <app_run+0x2bc>)
3401e5f6:	4941      	ldr	r1, [pc, #260]	@ (3401e6fc <app_run+0x2c0>)
3401e5f8:	9301      	str	r3, [sp, #4]
3401e5fa:	231d      	movs	r3, #29
3401e5fc:	4840      	ldr	r0, [pc, #256]	@ (3401e700 <app_run+0x2c4>)
3401e5fe:	9300      	str	r3, [sp, #0]
3401e600:	4623      	mov	r3, r4
3401e602:	f7ec fa6b 	bl	3400aadc <xTaskCreateStatic>
                          &nn_thread);
  assert(hdl != NULL);
3401e606:	b920      	cbnz	r0, 3401e612 <app_run+0x1d6>
3401e608:	f240 713e 	movw	r1, #1854	@ 0x73e
3401e60c:	4b3d      	ldr	r3, [pc, #244]	@ (3401e704 <app_run+0x2c8>)
3401e60e:	4a2f      	ldr	r2, [pc, #188]	@ (3401e6cc <app_run+0x290>)
3401e610:	e77a      	b.n	3401e508 <app_run+0xcc>
  hdl = xTaskCreateStatic(pp_thread_fct, "pp", configMINIMAL_STACK_SIZE * 2, NULL, pp_priority, pp_thread_stack,
3401e612:	241a      	movs	r4, #26
3401e614:	4b3c      	ldr	r3, [pc, #240]	@ (3401e708 <app_run+0x2cc>)
3401e616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e61a:	9302      	str	r3, [sp, #8]
3401e61c:	4b3b      	ldr	r3, [pc, #236]	@ (3401e70c <app_run+0x2d0>)
3401e61e:	493c      	ldr	r1, [pc, #240]	@ (3401e710 <app_run+0x2d4>)
3401e620:	9301      	str	r3, [sp, #4]
3401e622:	483c      	ldr	r0, [pc, #240]	@ (3401e714 <app_run+0x2d8>)
3401e624:	2300      	movs	r3, #0
3401e626:	9400      	str	r4, [sp, #0]
3401e628:	f7ec fa58 	bl	3400aadc <xTaskCreateStatic>
                          &pp_thread);
  assert(hdl != NULL);
3401e62c:	b920      	cbnz	r0, 3401e638 <app_run+0x1fc>
3401e62e:	f240 7141 	movw	r1, #1857	@ 0x741
3401e632:	4b34      	ldr	r3, [pc, #208]	@ (3401e704 <app_run+0x2c8>)
3401e634:	4a25      	ldr	r2, [pc, #148]	@ (3401e6cc <app_run+0x290>)
3401e636:	e767      	b.n	3401e508 <app_run+0xcc>
  hdl = xTaskCreateStatic(dp_thread_fct, "dp", configMINIMAL_STACK_SIZE * 2, NULL, dp_priority, dp_thread_stack,
3401e638:	4b37      	ldr	r3, [pc, #220]	@ (3401e718 <app_run+0x2dc>)
3401e63a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e63e:	9302      	str	r3, [sp, #8]
3401e640:	4b36      	ldr	r3, [pc, #216]	@ (3401e71c <app_run+0x2e0>)
3401e642:	4937      	ldr	r1, [pc, #220]	@ (3401e720 <app_run+0x2e4>)
3401e644:	e9cd 4300 	strd	r4, r3, [sp]
3401e648:	4836      	ldr	r0, [pc, #216]	@ (3401e724 <app_run+0x2e8>)
3401e64a:	2300      	movs	r3, #0
3401e64c:	f7ec fa46 	bl	3400aadc <xTaskCreateStatic>
                          &dp_thread);
  assert(hdl != NULL);
3401e650:	b920      	cbnz	r0, 3401e65c <app_run+0x220>
3401e652:	f240 7144 	movw	r1, #1860	@ 0x744
3401e656:	4b2b      	ldr	r3, [pc, #172]	@ (3401e704 <app_run+0x2c8>)
3401e658:	4a1c      	ldr	r2, [pc, #112]	@ (3401e6cc <app_run+0x290>)
3401e65a:	e755      	b.n	3401e508 <app_run+0xcc>
  hdl = xTaskCreateStatic(isp_thread_fct, "isp", configMINIMAL_STACK_SIZE * 2, NULL, isp_priority, isp_thread_stack,
3401e65c:	4b32      	ldr	r3, [pc, #200]	@ (3401e728 <app_run+0x2ec>)
3401e65e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3401e662:	9302      	str	r3, [sp, #8]
3401e664:	4b31      	ldr	r3, [pc, #196]	@ (3401e72c <app_run+0x2f0>)
3401e666:	4932      	ldr	r1, [pc, #200]	@ (3401e730 <app_run+0x2f4>)
3401e668:	9301      	str	r3, [sp, #4]
3401e66a:	231e      	movs	r3, #30
3401e66c:	4831      	ldr	r0, [pc, #196]	@ (3401e734 <app_run+0x2f8>)
3401e66e:	9300      	str	r3, [sp, #0]
3401e670:	2300      	movs	r3, #0
3401e672:	f7ec fa33 	bl	3400aadc <xTaskCreateStatic>
                          &isp_thread);
  assert(hdl != NULL);
3401e676:	b920      	cbnz	r0, 3401e682 <app_run+0x246>
3401e678:	f240 7147 	movw	r1, #1863	@ 0x747
3401e67c:	4b21      	ldr	r3, [pc, #132]	@ (3401e704 <app_run+0x2c8>)
3401e67e:	4a13      	ldr	r2, [pc, #76]	@ (3401e6cc <app_run+0x290>)
3401e680:	e742      	b.n	3401e508 <app_run+0xcc>
}
3401e682:	b013      	add	sp, #76	@ 0x4c
3401e684:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401e686:	bf00      	nop
3401e688:	e000ed00 	.word	0xe000ed00
3401e68c:	3402c194 	.word	0x3402c194
3401e690:	91384000 	.word	0x91384000
3401e694:	002ee000 	.word	0x002ee000
3401e698:	9120d000 	.word	0x9120d000
3401e69c:	00177000 	.word	0x00177000
3401e6a0:	01e00320 	.word	0x01e00320
3401e6a4:	91151800 	.word	0x91151800
3401e6a8:	3410ce14 	.word	0x3410ce14
3401e6ac:	000bb800 	.word	0x000bb800
3401e6b0:	912c8800 	.word	0x912c8800
3401e6b4:	34027863 	.word	0x34027863
3401e6b8:	34106127 	.word	0x34106127
3401e6bc:	3402bf69 	.word	0x3402bf69
3401e6c0:	34026380 	.word	0x34026380
3401e6c4:	3410cda4 	.word	0x3410cda4
3401e6c8:	341f7be0 	.word	0x341f7be0
3401e6cc:	34106258 	.word	0x34106258
3401e6d0:	3415190c 	.word	0x3415190c
3401e6d4:	3402c02d 	.word	0x3402c02d
3401e6d8:	341f7cb8 	.word	0x341f7cb8
3401e6dc:	34149738 	.word	0x34149738
3401e6e0:	34149788 	.word	0x34149788
3401e6e4:	3402c1a5 	.word	0x3402c1a5
3401e6e8:	341f7d9c 	.word	0x341f7d9c
3401e6ec:	3402c1ad 	.word	0x3402c1ad
3401e6f0:	3402c1b9 	.word	0x3402c1b9
3401e6f4:	341518ac 	.word	0x341518ac
3401e6f8:	3414f8ac 	.word	0x3414f8ac
3401e6fc:	3402c1c3 	.word	0x3402c1c3
3401e700:	3401de21 	.word	0x3401de21
3401e704:	3402c1c6 	.word	0x3402c1c6
3401e708:	3414f84c 	.word	0x3414f84c
3401e70c:	3414d84c 	.word	0x3414d84c
3401e710:	3402c274 	.word	0x3402c274
3401e714:	3401d6e9 	.word	0x3401d6e9
3401e718:	3414d7ec 	.word	0x3414d7ec
3401e71c:	3414b7ec 	.word	0x3414b7ec
3401e720:	3402c1d2 	.word	0x3402c1d2
3401e724:	3401d941 	.word	0x3401d941
3401e728:	3414b78c 	.word	0x3414b78c
3401e72c:	3414978c 	.word	0x3414978c
3401e730:	3402c1d5 	.word	0x3402c1d5
3401e734:	3401d4c1 	.word	0x3401d4c1
3401e738:	00017700 	.word	0x00017700

3401e73c <CMW_CAMERA_PIPE_FrameEventCallback>:

int CMW_CAMERA_PIPE_FrameEventCallback(uint32_t pipe)
{
  if (pipe == DCMIPP_PIPE1)
3401e73c:	2801      	cmp	r0, #1
{
3401e73e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401e742:	4606      	mov	r6, r0
  if (pipe == DCMIPP_PIPE1)
3401e744:	d14f      	bne.n	3401e7e6 <CMW_CAMERA_PIPE_FrameEventCallback+0xaa>
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e746:	4f37      	ldr	r7, [pc, #220]	@ (3401e824 <CMW_CAMERA_PIPE_FrameEventCallback+0xe8>)
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e748:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 3401e84c <CMW_CAMERA_PIPE_FrameEventCallback+0x110>
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e74c:	683d      	ldr	r5, [r7, #0]
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e74e:	f8d8 4000 	ldr.w	r4, [r8]
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e752:	3501      	adds	r5, #1
3401e754:	426b      	negs	r3, r5
3401e756:	f003 0303 	and.w	r3, r3, #3
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e75a:	f104 0401 	add.w	r4, r4, #1
  int next_disp_idx = (lcd_bg_buffer_disp_idx + 1) % DISPLAY_BUFFER_NB;
3401e75e:	f005 0503 	and.w	r5, r5, #3
3401e762:	ea55 b543 			@ <UNDEFINED> instruction: 0xea55b543
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e766:	4263      	negs	r3, r4
3401e768:	f003 0303 	and.w	r3, r3, #3
                                         DCMIPP_MEMORY_ADDRESS_0, (uint32_t) lcd_bg_buffer[next_capt_idx]);
3401e76c:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 3401e850 <CMW_CAMERA_PIPE_FrameEventCallback+0x114>
3401e770:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 3401e854 <CMW_CAMERA_PIPE_FrameEventCallback+0x118>
  int next_capt_idx = (lcd_bg_buffer_capt_idx + 1) % DISPLAY_BUFFER_NB;
3401e774:	f004 0403 	and.w	r4, r4, #3
3401e778:	ea54 b443 			@ <UNDEFINED> instruction: 0xea54b443
  ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE1,
3401e77c:	f7e8 fc60 	bl	34007040 <CMW_CAMERA_GetDCMIPPHandle>
3401e780:	4631      	mov	r1, r6
3401e782:	2200      	movs	r2, #0
3401e784:	fb0a 9304 	mla	r3, sl, r4, r9
3401e788:	f7f4 fc0e 	bl	34012fa8 <HAL_DCMIPP_PIPE_SetMemoryAddress>
  assert(ret == HAL_OK);
3401e78c:	4601      	mov	r1, r0
3401e78e:	b130      	cbz	r0, 3401e79e <CMW_CAMERA_PIPE_FrameEventCallback+0x62>
3401e790:	f240 2181 	movw	r1, #641	@ 0x281
3401e794:	4b24      	ldr	r3, [pc, #144]	@ (3401e828 <CMW_CAMERA_PIPE_FrameEventCallback+0xec>)
3401e796:	4a25      	ldr	r2, [pc, #148]	@ (3401e82c <CMW_CAMERA_PIPE_FrameEventCallback+0xf0>)
  assert(ret == 0);
3401e798:	4825      	ldr	r0, [pc, #148]	@ (3401e830 <CMW_CAMERA_PIPE_FrameEventCallback+0xf4>)
3401e79a:	f000 fd13 	bl	3401f1c4 <__assert_func>
  ret = SCRL_SetAddress_NoReload(lcd_bg_buffer[next_disp_idx], SCRL_LAYER_0);
3401e79e:	fb0a 9005 	mla	r0, sl, r5, r9
3401e7a2:	f7ee fc6b 	bl	3400d07c <SCRL_SetAddress_NoReload>
  assert(ret == 0);
3401e7a6:	b120      	cbz	r0, 3401e7b2 <CMW_CAMERA_PIPE_FrameEventCallback+0x76>
3401e7a8:	f240 2171 	movw	r1, #625	@ 0x271
3401e7ac:	4b21      	ldr	r3, [pc, #132]	@ (3401e834 <CMW_CAMERA_PIPE_FrameEventCallback+0xf8>)
3401e7ae:	4a22      	ldr	r2, [pc, #136]	@ (3401e838 <CMW_CAMERA_PIPE_FrameEventCallback+0xfc>)
3401e7b0:	e7f2      	b.n	3401e798 <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
  ret = SCRL_ReloadLayer(SCRL_LAYER_0);
3401e7b2:	f7ee fc6d 	bl	3400d090 <SCRL_ReloadLayer>
  assert(ret == 0);
3401e7b6:	b120      	cbz	r0, 3401e7c2 <CMW_CAMERA_PIPE_FrameEventCallback+0x86>
3401e7b8:	f240 2173 	movw	r1, #627	@ 0x273
3401e7bc:	4b1d      	ldr	r3, [pc, #116]	@ (3401e834 <CMW_CAMERA_PIPE_FrameEventCallback+0xf8>)
3401e7be:	4a1e      	ldr	r2, [pc, #120]	@ (3401e838 <CMW_CAMERA_PIPE_FrameEventCallback+0xfc>)
3401e7c0:	e7ea      	b.n	3401e798 <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
  ret = SRCL_Update();
3401e7c2:	f7ee fc6f 	bl	3400d0a4 <SRCL_Update>
  assert(ret == 0);
3401e7c6:	b120      	cbz	r0, 3401e7d2 <CMW_CAMERA_PIPE_FrameEventCallback+0x96>
3401e7c8:	f240 2176 	movw	r1, #630	@ 0x276
3401e7cc:	4b19      	ldr	r3, [pc, #100]	@ (3401e834 <CMW_CAMERA_PIPE_FrameEventCallback+0xf8>)
3401e7ce:	4a1a      	ldr	r2, [pc, #104]	@ (3401e838 <CMW_CAMERA_PIPE_FrameEventCallback+0xfc>)
3401e7d0:	e7e2      	b.n	3401e798 <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
  frame_event_nb++;
3401e7d2:	4a1a      	ldr	r2, [pc, #104]	@ (3401e83c <CMW_CAMERA_PIPE_FrameEventCallback+0x100>)
  lcd_bg_buffer_disp_idx = next_disp_idx;
3401e7d4:	603d      	str	r5, [r7, #0]
  frame_event_nb++;
3401e7d6:	6813      	ldr	r3, [r2, #0]
  lcd_bg_buffer_capt_idx = next_capt_idx;
3401e7d8:	f8c8 4000 	str.w	r4, [r8]
  frame_event_nb++;
3401e7dc:	3301      	adds	r3, #1
3401e7de:	6013      	str	r3, [r2, #0]
    app_main_pipe_frame_event();
  else if (pipe == DCMIPP_PIPE2)
    app_ancillary_pipe_frame_event();

  return HAL_OK;
}
3401e7e0:	2000      	movs	r0, #0
3401e7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pipe == DCMIPP_PIPE2)
3401e7e6:	2802      	cmp	r0, #2
3401e7e8:	d1fa      	bne.n	3401e7e0 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
  next_buffer = bqueue_get_free(&nn_input_queue, 0);
3401e7ea:	2100      	movs	r1, #0
3401e7ec:	4814      	ldr	r0, [pc, #80]	@ (3401e840 <CMW_CAMERA_PIPE_FrameEventCallback+0x104>)
3401e7ee:	f7fe fe4f 	bl	3401d490 <bqueue_get_free>
  if (next_buffer) {
3401e7f2:	4604      	mov	r4, r0
3401e7f4:	2800      	cmp	r0, #0
3401e7f6:	d0f3      	beq.n	3401e7e0 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
    ret = HAL_DCMIPP_PIPE_SetMemoryAddress(CMW_CAMERA_GetDCMIPPHandle(), DCMIPP_PIPE2,
3401e7f8:	f7e8 fc22 	bl	34007040 <CMW_CAMERA_GetDCMIPPHandle>
3401e7fc:	4623      	mov	r3, r4
3401e7fe:	2200      	movs	r2, #0
3401e800:	4631      	mov	r1, r6
3401e802:	f7f4 fbd1 	bl	34012fa8 <HAL_DCMIPP_PIPE_SetMemoryAddress>
    assert(ret == HAL_OK);
3401e806:	b120      	cbz	r0, 3401e812 <CMW_CAMERA_PIPE_FrameEventCallback+0xd6>
3401e808:	f240 2193 	movw	r1, #659	@ 0x293
3401e80c:	4b06      	ldr	r3, [pc, #24]	@ (3401e828 <CMW_CAMERA_PIPE_FrameEventCallback+0xec>)
3401e80e:	4a0d      	ldr	r2, [pc, #52]	@ (3401e844 <CMW_CAMERA_PIPE_FrameEventCallback+0x108>)
3401e810:	e7c2      	b.n	3401e798 <CMW_CAMERA_PIPE_FrameEventCallback+0x5c>
    frame_event_nb_for_resize = frame_event_nb - 1;
3401e812:	4b0a      	ldr	r3, [pc, #40]	@ (3401e83c <CMW_CAMERA_PIPE_FrameEventCallback+0x100>)
3401e814:	4a0c      	ldr	r2, [pc, #48]	@ (3401e848 <CMW_CAMERA_PIPE_FrameEventCallback+0x10c>)
3401e816:	681b      	ldr	r3, [r3, #0]
    bqueue_put_ready(&nn_input_queue);
3401e818:	4809      	ldr	r0, [pc, #36]	@ (3401e840 <CMW_CAMERA_PIPE_FrameEventCallback+0x104>)
    frame_event_nb_for_resize = frame_event_nb - 1;
3401e81a:	3b01      	subs	r3, #1
3401e81c:	6013      	str	r3, [r2, #0]
    bqueue_put_ready(&nn_input_queue);
3401e81e:	f7fe ff1b 	bl	3401d658 <bqueue_put_ready>
3401e822:	e7dd      	b.n	3401e7e0 <CMW_CAMERA_PIPE_FrameEventCallback+0xa4>
3401e824:	3410ce14 	.word	0x3410ce14
3401e828:	3402bfdc 	.word	0x3402bfdc
3401e82c:	34106101 	.word	0x34106101
3401e830:	3402bf69 	.word	0x3402bf69
3401e834:	34027863 	.word	0x34027863
3401e838:	341060f1 	.word	0x341060f1
3401e83c:	341f7ca0 	.word	0x341f7ca0
3401e840:	341f7be0 	.word	0x341f7be0
3401e844:	341060d2 	.word	0x341060d2
3401e848:	341f7c9c 	.word	0x341f7c9c
3401e84c:	341f81d4 	.word	0x341f81d4
3401e850:	000bb800 	.word	0x000bb800
3401e854:	91384000 	.word	0x91384000

3401e858 <CMW_CAMERA_PIPE_VsyncEventCallback>:

int CMW_CAMERA_PIPE_VsyncEventCallback(uint32_t pipe)
{
  if (pipe == DCMIPP_PIPE1)
3401e858:	2801      	cmp	r0, #1
{
3401e85a:	b507      	push	{r0, r1, r2, lr}
  if (pipe == DCMIPP_PIPE1)
3401e85c:	d110      	bne.n	3401e880 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
3401e85e:	2300      	movs	r3, #0
3401e860:	9301      	str	r3, [sp, #4]
  ret = xSemaphoreGiveFromISR(isp_sem, &xHigherPriorityTaskWoken);
3401e862:	4b09      	ldr	r3, [pc, #36]	@ (3401e888 <CMW_CAMERA_PIPE_VsyncEventCallback+0x30>)
3401e864:	a901      	add	r1, sp, #4
3401e866:	6818      	ldr	r0, [r3, #0]
3401e868:	f7eb fe96 	bl	3400a598 <xQueueGiveFromISR>
  if (ret == pdTRUE)
3401e86c:	2801      	cmp	r0, #1
3401e86e:	d107      	bne.n	3401e880 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
3401e870:	9b01      	ldr	r3, [sp, #4]
3401e872:	b12b      	cbz	r3, 3401e880 <CMW_CAMERA_PIPE_VsyncEventCallback+0x28>
3401e874:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
3401e878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
3401e87c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
    app_main_pipe_vsync_event();

  return HAL_OK;
}
3401e880:	2000      	movs	r0, #0
3401e882:	b003      	add	sp, #12
3401e884:	f85d fb04 	ldr.w	pc, [sp], #4
3401e888:	34149788 	.word	0x34149788

3401e88c <CAM_InitCropConfig>:
#define DISPLAY_BPP 2

/* Keep display output aspect ratio using crop area */
static void CAM_InitCropConfig(CMW_Manual_roi_area_t *roi, int sensor_width, int sensor_height)
{
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401e88c:	ee07 1a90 	vmov	s15, r1
3401e890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401e894:	ee07 2a90 	vmov	s15, r2
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401e898:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 3401e93c <CAM_InitCropConfig+0xb0>
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401e89c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
3401e8a0:	eddf 5a27 	vldr	s11, [pc, #156]	@ 3401e940 <CAM_InitCropConfig+0xb4>
  const float ratiox = (float)sensor_width / LCD_BG_WIDTH;
3401e8a4:	ee86 5a86 	vdiv.f32	s10, s13, s12
  const float ratioy = (float)sensor_height / LCD_BG_HEIGHT;
3401e8a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
  const float ratio = MIN(ratiox, ratioy);
3401e8ac:	eeb4 5a67 	vcmp.f32	s10, s15
3401e8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e8b4:	bf48      	it	mi
3401e8b6:	eef0 7a45 	vmovmi.f32	s15, s10

  assert(ratio >= 1);
3401e8ba:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
3401e8be:	eef4 7ac5 	vcmpe.f32	s15, s10
3401e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
3401e8c6:	b508      	push	{r3, lr}
  assert(ratio >= 1);
3401e8c8:	da05      	bge.n	3401e8d6 <CAM_InitCropConfig+0x4a>
3401e8ca:	2123      	movs	r1, #35	@ 0x23
3401e8cc:	4b1d      	ldr	r3, [pc, #116]	@ (3401e944 <CAM_InitCropConfig+0xb8>)
3401e8ce:	4a1e      	ldr	r2, [pc, #120]	@ (3401e948 <CAM_InitCropConfig+0xbc>)
  assert(ratio < 64);
3401e8d0:	481e      	ldr	r0, [pc, #120]	@ (3401e94c <CAM_InitCropConfig+0xc0>)
3401e8d2:	f000 fc77 	bl	3401f1c4 <__assert_func>
3401e8d6:	ed9f 5a1e 	vldr	s10, [pc, #120]	@ 3401e950 <CAM_InitCropConfig+0xc4>
3401e8da:	eef4 7ac5 	vcmpe.f32	s15, s10
3401e8de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401e8e2:	d403      	bmi.n	3401e8ec <CAM_InitCropConfig+0x60>
3401e8e4:	2124      	movs	r1, #36	@ 0x24
3401e8e6:	4b1b      	ldr	r3, [pc, #108]	@ (3401e954 <CAM_InitCropConfig+0xc8>)
3401e8e8:	4a17      	ldr	r2, [pc, #92]	@ (3401e948 <CAM_InitCropConfig+0xbc>)
3401e8ea:	e7f1      	b.n	3401e8d0 <CAM_InitCropConfig+0x44>

  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401e8ec:	ee27 6a86 	vmul.f32	s12, s15, s12
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401e8f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401e8f4:	eef4 6ac6 	vcmpe.f32	s13, s12
3401e8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401e8fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401e900:	bfcc      	ite	gt
3401e902:	eefc 6ac6 	vcvtgt.u32.f32	s13, s12
3401e906:	eefc 6ae6 	vcvtle.u32.f32	s13, s13
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401e90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401e90e:	ee16 3a90 	vmov	r3, s13
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401e912:	bfcc      	ite	gt
3401e914:	eebc 7ae7 	vcvtgt.u32.f32	s14, s15
3401e918:	eebc 7ac7 	vcvtle.u32.f32	s14, s14
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401e91c:	3101      	adds	r1, #1
3401e91e:	1ac9      	subs	r1, r1, r3
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401e920:	ee17 3a10 	vmov	r3, s14
3401e924:	3201      	adds	r2, #1
3401e926:	1ad2      	subs	r2, r2, r3
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401e928:	0849      	lsrs	r1, r1, #1
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401e92a:	0852      	lsrs	r2, r2, #1
  roi->width = (uint32_t) MIN(LCD_BG_WIDTH * ratio, sensor_width);
3401e92c:	edc0 6a00 	vstr	s13, [r0]
  roi->height = (uint32_t) MIN(LCD_BG_HEIGHT * ratio, sensor_height);
3401e930:	ed80 7a01 	vstr	s14, [r0, #4]
  roi->offset_x = (sensor_width - roi->width + 1) / 2;
3401e934:	6081      	str	r1, [r0, #8]
  roi->offset_y = (sensor_height - roi->height + 1) / 2;
3401e936:	60c2      	str	r2, [r0, #12]
}
3401e938:	bd08      	pop	{r3, pc}
3401e93a:	bf00      	nop
3401e93c:	44480000 	.word	0x44480000
3401e940:	43f00000 	.word	0x43f00000
3401e944:	340277d1 	.word	0x340277d1
3401e948:	34106337 	.word	0x34106337
3401e94c:	3402c1fa 	.word	0x3402c1fa
3401e950:	42800000 	.word	0x42800000
3401e954:	340277dc 	.word	0x340277dc

3401e958 <CAM_Init>:
  assert(ret == HAL_OK);
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
}

void CAM_Init(void)
{
3401e958:	b5f0      	push	{r4, r5, r6, r7, lr}
  CMW_CameraInit_t cam_conf;
  int ret;

  /* Let sensor driver choose which width/height to use */
  cam_conf.width = 0;
3401e95a:	2300      	movs	r3, #0
  cam_conf.height = 0;
  cam_conf.fps = CAMERA_FPS;
3401e95c:	2214      	movs	r2, #20
  cam_conf.pixel_format = 0; /* Default; Not implemented yet */
  cam_conf.anti_flicker = 0;
  cam_conf.mirror_flip = CAMERA_FLIP;
3401e95e:	2402      	movs	r4, #2
{
3401e960:	b093      	sub	sp, #76	@ 0x4c
  ret = CMW_CAMERA_Init(&cam_conf);
3401e962:	a801      	add	r0, sp, #4
  cam_conf.height = 0;
3401e964:	e9cd 3301 	strd	r3, r3, [sp, #4]
  cam_conf.pixel_format = 0; /* Default; Not implemented yet */
3401e968:	e9cd 2303 	strd	r2, r3, [sp, #12]
  cam_conf.anti_flicker = 0;
3401e96c:	9305      	str	r3, [sp, #20]
  cam_conf.mirror_flip = CAMERA_FLIP;
3401e96e:	9406      	str	r4, [sp, #24]
  ret = CMW_CAMERA_Init(&cam_conf);
3401e970:	f7e8 fcb0 	bl	340072d4 <CMW_CAMERA_Init>
  assert(ret == CMW_ERROR_NONE);
3401e974:	b128      	cbz	r0, 3401e982 <CAM_Init+0x2a>
3401e976:	2161      	movs	r1, #97	@ 0x61
3401e978:	4b26      	ldr	r3, [pc, #152]	@ (3401ea14 <CAM_Init+0xbc>)
3401e97a:	4a27      	ldr	r2, [pc, #156]	@ (3401ea18 <CAM_Init+0xc0>)
  assert(ret == HAL_OK);
3401e97c:	4827      	ldr	r0, [pc, #156]	@ (3401ea1c <CAM_Init+0xc4>)
3401e97e:	f000 fc21 	bl	3401f1c4 <__assert_func>
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401e982:	f44f 7348 	mov.w	r3, #800	@ 0x320
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401e986:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  dcmipp_conf.output_format = DISPLAY_FORMAT;
3401e98a:	2501      	movs	r5, #1
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401e98c:	f44f 77f0 	mov.w	r7, #480	@ 0x1e0
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401e990:	2603      	movs	r6, #3
  dcmipp_conf.enable_gamma_conversion = 0;
3401e992:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401e996:	a80e      	add	r0, sp, #56	@ 0x38
  dcmipp_conf.output_height = LCD_BG_HEIGHT;
3401e998:	e9cd 3707 	strd	r3, r7, [sp, #28]
  dcmipp_conf.output_bpp = DISPLAY_BPP;
3401e99c:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401e9a0:	960d      	str	r6, [sp, #52]	@ 0x34
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401e9a2:	f7ff ff73 	bl	3401e88c <CAM_InitCropConfig>
  ret = CMW_CAMERA_SetPipeConfig(DCMIPP_PIPE1, &dcmipp_conf, &hw_pitch);
3401e9a6:	466a      	mov	r2, sp
3401e9a8:	4628      	mov	r0, r5
3401e9aa:	a907      	add	r1, sp, #28
3401e9ac:	f7e8 fb4c 	bl	34007048 <CMW_CAMERA_SetPipeConfig>
  assert(ret == HAL_OK);
3401e9b0:	b118      	cbz	r0, 3401e9ba <CAM_Init+0x62>
3401e9b2:	213d      	movs	r1, #61	@ 0x3d
3401e9b4:	4b1a      	ldr	r3, [pc, #104]	@ (3401ea20 <CAM_Init+0xc8>)
3401e9b6:	4a1b      	ldr	r2, [pc, #108]	@ (3401ea24 <CAM_Init+0xcc>)
3401e9b8:	e7e0      	b.n	3401e97c <CAM_Init+0x24>
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
3401e9ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401e9bc:	9b07      	ldr	r3, [sp, #28]
3401e9be:	4353      	muls	r3, r2
3401e9c0:	9a00      	ldr	r2, [sp, #0]
3401e9c2:	4293      	cmp	r3, r2
3401e9c4:	d003      	beq.n	3401e9ce <CAM_Init+0x76>
3401e9c6:	213e      	movs	r1, #62	@ 0x3e
3401e9c8:	4b17      	ldr	r3, [pc, #92]	@ (3401ea28 <CAM_Init+0xd0>)
3401e9ca:	4a16      	ldr	r2, [pc, #88]	@ (3401ea24 <CAM_Init+0xcc>)
3401e9cc:	e7d6      	b.n	3401e97c <CAM_Init+0x24>
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401e9ce:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
  dcmipp_conf.output_bpp = NN_BPP;
3401e9d2:	e9cd 0609 	strd	r0, r6, [sp, #36]	@ 0x24
  dcmipp_conf.enable_gamma_conversion = 0;
3401e9d6:	e9cd 500b 	strd	r5, r0, [sp, #44]	@ 0x2c
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401e9da:	a80e      	add	r0, sp, #56	@ 0x38
  dcmipp_conf.output_height = NN_HEIGHT;
3401e9dc:	e9cd 7707 	strd	r7, r7, [sp, #28]
  dcmipp_conf.mode = CMW_Aspect_ratio_manual_roi;
3401e9e0:	960d      	str	r6, [sp, #52]	@ 0x34
  CAM_InitCropConfig(&dcmipp_conf.manual_conf, sensor_width, sensor_height);
3401e9e2:	f7ff ff53 	bl	3401e88c <CAM_InitCropConfig>
  ret = CMW_CAMERA_SetPipeConfig(DCMIPP_PIPE2, &dcmipp_conf, &hw_pitch);
3401e9e6:	466a      	mov	r2, sp
3401e9e8:	4620      	mov	r0, r4
3401e9ea:	a907      	add	r1, sp, #28
3401e9ec:	f7e8 fb2c 	bl	34007048 <CMW_CAMERA_SetPipeConfig>
  assert(ret == HAL_OK);
3401e9f0:	b118      	cbz	r0, 3401e9fa <CAM_Init+0xa2>
3401e9f2:	2150      	movs	r1, #80	@ 0x50
3401e9f4:	4b0a      	ldr	r3, [pc, #40]	@ (3401ea20 <CAM_Init+0xc8>)
3401e9f6:	4a0d      	ldr	r2, [pc, #52]	@ (3401ea2c <CAM_Init+0xd4>)
3401e9f8:	e7c0      	b.n	3401e97c <CAM_Init+0x24>
  assert(hw_pitch == dcmipp_conf.output_width * dcmipp_conf.output_bpp);
3401e9fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401e9fc:	9b07      	ldr	r3, [sp, #28]
3401e9fe:	4353      	muls	r3, r2
3401ea00:	9a00      	ldr	r2, [sp, #0]
3401ea02:	4293      	cmp	r3, r2
3401ea04:	d003      	beq.n	3401ea0e <CAM_Init+0xb6>
3401ea06:	2151      	movs	r1, #81	@ 0x51
3401ea08:	4b07      	ldr	r3, [pc, #28]	@ (3401ea28 <CAM_Init+0xd0>)
3401ea0a:	4a08      	ldr	r2, [pc, #32]	@ (3401ea2c <CAM_Init+0xd4>)
3401ea0c:	e7b6      	b.n	3401e97c <CAM_Init+0x24>

  /* cam_conf.width / cam_conf.height now contains choose resolution */
  DCMIPP_PipeInitDisplay(cam_conf.width, cam_conf.height);
  DCMIPP_PipeInitNn(cam_conf.width, cam_conf.height);
}
3401ea0e:	b013      	add	sp, #76	@ 0x4c
3401ea10:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401ea12:	bf00      	nop
3401ea14:	3402c223 	.word	0x3402c223
3401ea18:	34106361 	.word	0x34106361
3401ea1c:	3402c1fa 	.word	0x3402c1fa
3401ea20:	3402bfdc 	.word	0x3402bfdc
3401ea24:	3410634a 	.word	0x3410634a
3401ea28:	3402c239 	.word	0x3402c239
3401ea2c:	34106325 	.word	0x34106325

3401ea30 <CAM_DisplayPipe_Start>:

void CAM_DisplayPipe_Start(uint8_t *display_pipe_dst, uint32_t cam_mode)
{
3401ea30:	460a      	mov	r2, r1
3401ea32:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Start(DCMIPP_PIPE1, display_pipe_dst, cam_mode);
3401ea34:	4601      	mov	r1, r0
3401ea36:	2001      	movs	r0, #1
3401ea38:	f7e8 fbc8 	bl	340071cc <CMW_CAMERA_Start>
  assert(ret == CMW_ERROR_NONE);
3401ea3c:	b128      	cbz	r0, 3401ea4a <CAM_DisplayPipe_Start+0x1a>
3401ea3e:	216d      	movs	r1, #109	@ 0x6d
3401ea40:	4b02      	ldr	r3, [pc, #8]	@ (3401ea4c <CAM_DisplayPipe_Start+0x1c>)
3401ea42:	4a03      	ldr	r2, [pc, #12]	@ (3401ea50 <CAM_DisplayPipe_Start+0x20>)
3401ea44:	4803      	ldr	r0, [pc, #12]	@ (3401ea54 <CAM_DisplayPipe_Start+0x24>)
3401ea46:	f000 fbbd 	bl	3401f1c4 <__assert_func>
}
3401ea4a:	bd08      	pop	{r3, pc}
3401ea4c:	3402c223 	.word	0x3402c223
3401ea50:	3410630f 	.word	0x3410630f
3401ea54:	3402c1fa 	.word	0x3402c1fa

3401ea58 <CAM_NNPipe_Start>:

void CAM_NNPipe_Start(uint8_t *nn_pipe_dst, uint32_t cam_mode)
{
3401ea58:	460a      	mov	r2, r1
3401ea5a:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Start(DCMIPP_PIPE2, nn_pipe_dst, cam_mode);
3401ea5c:	4601      	mov	r1, r0
3401ea5e:	2002      	movs	r0, #2
3401ea60:	f7e8 fbb4 	bl	340071cc <CMW_CAMERA_Start>
  assert(ret == CMW_ERROR_NONE);
3401ea64:	b128      	cbz	r0, 3401ea72 <CAM_NNPipe_Start+0x1a>
3401ea66:	2175      	movs	r1, #117	@ 0x75
3401ea68:	4b02      	ldr	r3, [pc, #8]	@ (3401ea74 <CAM_NNPipe_Start+0x1c>)
3401ea6a:	4a03      	ldr	r2, [pc, #12]	@ (3401ea78 <CAM_NNPipe_Start+0x20>)
3401ea6c:	4803      	ldr	r0, [pc, #12]	@ (3401ea7c <CAM_NNPipe_Start+0x24>)
3401ea6e:	f000 fba9 	bl	3401f1c4 <__assert_func>
}
3401ea72:	bd08      	pop	{r3, pc}
3401ea74:	3402c223 	.word	0x3402c223
3401ea78:	341062fe 	.word	0x341062fe
3401ea7c:	3402c1fa 	.word	0x3402c1fa

3401ea80 <CAM_IspUpdate>:

void CAM_IspUpdate(void)
{
3401ea80:	b508      	push	{r3, lr}
  int ret;

  ret = CMW_CAMERA_Run();
3401ea82:	f7e8 fc7d 	bl	34007380 <CMW_CAMERA_Run>
  assert(ret == CMW_ERROR_NONE);
3401ea86:	b128      	cbz	r0, 3401ea94 <CAM_IspUpdate+0x14>
3401ea88:	217d      	movs	r1, #125	@ 0x7d
3401ea8a:	4b03      	ldr	r3, [pc, #12]	@ (3401ea98 <CAM_IspUpdate+0x18>)
3401ea8c:	4a03      	ldr	r2, [pc, #12]	@ (3401ea9c <CAM_IspUpdate+0x1c>)
3401ea8e:	4804      	ldr	r0, [pc, #16]	@ (3401eaa0 <CAM_IspUpdate+0x20>)
3401ea90:	f000 fb98 	bl	3401f1c4 <__assert_func>
}
3401ea94:	bd08      	pop	{r3, pc}
3401ea96:	bf00      	nop
3401ea98:	3402c223 	.word	0x3402c223
3401ea9c:	341062f0 	.word	0x341062f0
3401eaa0:	3402c1fa 	.word	0x3402c1fa

3401eaa4 <Fuse_Programming>:
/**
  * @brief  Check specific fuse configuration and update it if needed.
  * @retval None
  */
void Fuse_Programming(void)
{
3401eaa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t fuse_id, bit_mask, data;

  BSEC_HandleTypeDef sBsecHandler;

  sBsecHandler.Instance = BSEC;
3401eaa6:	4b15      	ldr	r3, [pc, #84]	@ (3401eafc <Fuse_Programming+0x58>)

  /* Read current value of fuse */
  fuse_id = BSEC_FUSE_ADDRESS;
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401eaa8:	217c      	movs	r1, #124	@ 0x7c
3401eaaa:	aa01      	add	r2, sp, #4
3401eaac:	a802      	add	r0, sp, #8
  sBsecHandler.Instance = BSEC;
3401eaae:	9302      	str	r3, [sp, #8]
  if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401eab0:	f7f1 fef8 	bl	340108a4 <HAL_BSEC_OTP_Read>
3401eab4:	4603      	mov	r3, r0
3401eab6:	b9e0      	cbnz	r0, 3401eaf2 <Fuse_Programming+0x4e>
  {
    /* Check if bit has already been set */
    bit_mask = BSEC_FUSE_MASK;
    if ((data & bit_mask) != bit_mask)
3401eab8:	9a01      	ldr	r2, [sp, #4]
3401eaba:	f402 31c0 	and.w	r1, r2, #98304	@ 0x18000
3401eabe:	f5b1 3fc0 	cmp.w	r1, #98304	@ 0x18000
3401eac2:	d017      	beq.n	3401eaf4 <Fuse_Programming+0x50>
    {
      data |= bit_mask;
3401eac4:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
      /* Bitwise programming of lower bits */
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
3401eac8:	217c      	movs	r1, #124	@ 0x7c
3401eaca:	a802      	add	r0, sp, #8
      data |= bit_mask;
3401eacc:	9201      	str	r2, [sp, #4]
      if (HAL_BSEC_OTP_Program(&sBsecHandler, fuse_id, data, HAL_BSEC_NORMAL_PROG) == HAL_OK)
3401eace:	f7f1 ff05 	bl	340108dc <HAL_BSEC_OTP_Program>
3401ead2:	b968      	cbnz	r0, 3401eaf0 <Fuse_Programming+0x4c>
      {
        /* Read lower bits to verify the correct programming */
        if (HAL_BSEC_OTP_Read(&sBsecHandler, fuse_id, &data) == HAL_OK)
3401ead4:	217c      	movs	r1, #124	@ 0x7c
3401ead6:	aa01      	add	r2, sp, #4
3401ead8:	a802      	add	r0, sp, #8
3401eada:	f7f1 fee3 	bl	340108a4 <HAL_BSEC_OTP_Read>
3401eade:	b930      	cbnz	r0, 3401eaee <Fuse_Programming+0x4a>
        {
          if ((data & bit_mask) != bit_mask)
3401eae0:	9b01      	ldr	r3, [sp, #4]
3401eae2:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
3401eae6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
3401eaea:	d003      	beq.n	3401eaf4 <Fuse_Programming+0x50>
3401eaec:	e7fe      	b.n	3401eaec <Fuse_Programming+0x48>
3401eaee:	e7fe      	b.n	3401eaee <Fuse_Programming+0x4a>
3401eaf0:	e7fe      	b.n	3401eaf0 <Fuse_Programming+0x4c>
3401eaf2:	e7fe      	b.n	3401eaf2 <Fuse_Programming+0x4e>
  else
  {
    /* Error  : Fuse read unsuccessful */
    ErrorHandler();
  }
}
3401eaf4:	b005      	add	sp, #20
3401eaf6:	f85d fb04 	ldr.w	pc, [sp], #4
3401eafa:	bf00      	nop
3401eafc:	56009000 	.word	0x56009000

3401eb00 <HAL_GetTick>:

static TIM_HandleTypeDef tim4;

uint32_t HAL_GetTick()
{
  return xTaskGetTickCount() * portTICK_PERIOD_MS;
3401eb00:	f7ec b98e 	b.w	3400ae20 <xTaskGetTickCount>

3401eb04 <HAL_Delay>:
}

void HAL_Delay(uint32_t Delay)
{
3401eb04:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
3401eb06:	f3ef 8305 	mrs	r3, IPSR
  if (IS_IRQ_MODE())
3401eb0a:	b12b      	cbz	r3, 3401eb18 <HAL_Delay+0x14>
    assert(0);
3401eb0c:	2127      	movs	r1, #39	@ 0x27
3401eb0e:	4b04      	ldr	r3, [pc, #16]	@ (3401eb20 <HAL_Delay+0x1c>)
3401eb10:	4a04      	ldr	r2, [pc, #16]	@ (3401eb24 <HAL_Delay+0x20>)
3401eb12:	4805      	ldr	r0, [pc, #20]	@ (3401eb28 <HAL_Delay+0x24>)
3401eb14:	f000 fb56 	bl	3401f1c4 <__assert_func>

  vTaskDelay(Delay / portTICK_PERIOD_MS);
}
3401eb18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  vTaskDelay(Delay / portTICK_PERIOD_MS);
3401eb1c:	f7ec bae2 	b.w	3400b0e4 <vTaskDelay>
3401eb20:	34026d17 	.word	0x34026d17
3401eb24:	34106376 	.word	0x34106376
3401eb28:	3402c277 	.word	0x3402c277

3401eb2c <HAL_InitTick>:

HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  return HAL_OK;
}
3401eb2c:	2000      	movs	r0, #0
3401eb2e:	4770      	bx	lr

3401eb30 <TIM4_Config>:
  WRITE_REG(RCC->APB1ENSR1, Periphs);
3401eb30:	2204      	movs	r2, #4

void TIM4_Config()
{
3401eb32:	b513      	push	{r0, r1, r4, lr}
3401eb34:	4b15      	ldr	r3, [pc, #84]	@ (3401eb8c <TIM4_Config+0x5c>)
  const uint32_t tmr_clk_freq = 100000;
  int ret;

  __HAL_RCC_TIM4_CLK_ENABLE();

  tim4.Instance = TIM4;
3401eb36:	4c16      	ldr	r4, [pc, #88]	@ (3401eb90 <TIM4_Config+0x60>)
3401eb38:	f8c3 2a64 	str.w	r2, [r3, #2660]	@ 0xa64
  tmpreg = READ_REG(RCC->APB1ENR1);
3401eb3c:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
3401eb40:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401eb42:	9b01      	ldr	r3, [sp, #4]
3401eb44:	4b13      	ldr	r3, [pc, #76]	@ (3401eb94 <TIM4_Config+0x64>)
3401eb46:	6023      	str	r3, [r4, #0]
  tim4.Init.Period = ~0;
3401eb48:	f04f 33ff 	mov.w	r3, #4294967295
3401eb4c:	60e3      	str	r3, [r4, #12]
  tim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / tmr_clk_freq) - 1;
3401eb4e:	f7f7 fcfd 	bl	3401654c <HAL_RCC_GetPCLK1Freq>
3401eb52:	4b11      	ldr	r3, [pc, #68]	@ (3401eb98 <TIM4_Config+0x68>)
3401eb54:	fbb0 f0f3 	udiv	r0, r0, r3
  tim4.Init.ClockDivision = 0;
3401eb58:	2300      	movs	r3, #0
  tim4.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / tmr_clk_freq) - 1;
3401eb5a:	3801      	subs	r0, #1
3401eb5c:	6060      	str	r0, [r4, #4]
  tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  ret = HAL_TIM_Base_Init(&tim4);
3401eb5e:	4620      	mov	r0, r4
  tim4.Init.ClockDivision = 0;
3401eb60:	6123      	str	r3, [r4, #16]
  tim4.Init.CounterMode = TIM_COUNTERMODE_UP;
3401eb62:	60a3      	str	r3, [r4, #8]
  ret = HAL_TIM_Base_Init(&tim4);
3401eb64:	f7fc fec2 	bl	3401b8ec <HAL_TIM_Base_Init>
  assert(ret == HAL_OK);
3401eb68:	b128      	cbz	r0, 3401eb76 <TIM4_Config+0x46>
3401eb6a:	213e      	movs	r1, #62	@ 0x3e
3401eb6c:	4b0b      	ldr	r3, [pc, #44]	@ (3401eb9c <TIM4_Config+0x6c>)
3401eb6e:	4a0c      	ldr	r2, [pc, #48]	@ (3401eba0 <TIM4_Config+0x70>)

  ret = HAL_TIM_Base_Start(&tim4);
  assert(ret == HAL_OK);
3401eb70:	480c      	ldr	r0, [pc, #48]	@ (3401eba4 <TIM4_Config+0x74>)
3401eb72:	f000 fb27 	bl	3401f1c4 <__assert_func>
  ret = HAL_TIM_Base_Start(&tim4);
3401eb76:	4620      	mov	r0, r4
3401eb78:	f7fc fd1e 	bl	3401b5b8 <HAL_TIM_Base_Start>
  assert(ret == HAL_OK);
3401eb7c:	b118      	cbz	r0, 3401eb86 <TIM4_Config+0x56>
3401eb7e:	2141      	movs	r1, #65	@ 0x41
3401eb80:	4b06      	ldr	r3, [pc, #24]	@ (3401eb9c <TIM4_Config+0x6c>)
3401eb82:	4a07      	ldr	r2, [pc, #28]	@ (3401eba0 <TIM4_Config+0x70>)
3401eb84:	e7f4      	b.n	3401eb70 <TIM4_Config+0x40>
}
3401eb86:	b002      	add	sp, #8
3401eb88:	bd10      	pop	{r4, pc}
3401eb8a:	bf00      	nop
3401eb8c:	56028000 	.word	0x56028000
3401eb90:	341f9498 	.word	0x341f9498
3401eb94:	50000800 	.word	0x50000800
3401eb98:	000186a0 	.word	0x000186a0
3401eb9c:	3402bfdc 	.word	0x3402bfdc
3401eba0:	3410636a 	.word	0x3410636a
3401eba4:	3402c277 	.word	0x3402c277

3401eba8 <TIM4_Get_Value>:

uint32_t TIM4_Get_Value()
{
  return __HAL_TIM_GET_COUNTER(&tim4);
3401eba8:	4b01      	ldr	r3, [pc, #4]	@ (3401ebb0 <TIM4_Get_Value+0x8>)
3401ebaa:	681b      	ldr	r3, [r3, #0]
3401ebac:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
3401ebae:	4770      	bx	lr
3401ebb0:	341f9498 	.word	0x341f9498

3401ebb4 <vApplicationGetIdleTaskMemory>:
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
3401ebb4:	4b03      	ldr	r3, [pc, #12]	@ (3401ebc4 <vApplicationGetIdleTaskMemory+0x10>)
3401ebb6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
3401ebb8:	4b03      	ldr	r3, [pc, #12]	@ (3401ebc8 <vApplicationGetIdleTaskMemory+0x14>)
3401ebba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
3401ebbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401ebc0:	6013      	str	r3, [r2, #0]
}
3401ebc2:	4770      	bx	lr
3401ebc4:	341f9438 	.word	0x341f9438
3401ebc8:	341f8438 	.word	0x341f8438

3401ebcc <vApplicationGetTimerTaskMemory>:
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
3401ebcc:	4b03      	ldr	r3, [pc, #12]	@ (3401ebdc <vApplicationGetTimerTaskMemory+0x10>)
3401ebce:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
3401ebd0:	4b03      	ldr	r3, [pc, #12]	@ (3401ebe0 <vApplicationGetTimerTaskMemory+0x14>)
3401ebd2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
3401ebd4:	2380      	movs	r3, #128	@ 0x80
3401ebd6:	6013      	str	r3, [r2, #0]
}
3401ebd8:	4770      	bx	lr
3401ebda:	bf00      	nop
3401ebdc:	341f83d8 	.word	0x341f83d8
3401ebe0:	341f81d8 	.word	0x341f81d8

3401ebe4 <LL_MEM_EnableClock>:
  WRITE_REG(RCC->MEMENSR, Memories);
3401ebe4:	4b04      	ldr	r3, [pc, #16]	@ (3401ebf8 <LL_MEM_EnableClock+0x14>)
{
3401ebe6:	b082      	sub	sp, #8
  WRITE_REG(RCC->MEMENSR, Memories);
3401ebe8:	f8c3 0a4c 	str.w	r0, [r3, #2636]	@ 0xa4c
  tmpreg = READ_REG(RCC->MEMENR);
3401ebec:	f8d3 324c 	ldr.w	r3, [r3, #588]	@ 0x24c
3401ebf0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
3401ebf2:	9b01      	ldr	r3, [sp, #4]
}
3401ebf4:	b002      	add	sp, #8
3401ebf6:	4770      	bx	lr
3401ebf8:	56028000 	.word	0x56028000

3401ebfc <SystemClock_Config>:
  {
  }
}

static void SystemClock_Config(void)
{
3401ebfc:	b530      	push	{r4, r5, lr}
3401ebfe:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
3401ec02:	2240      	movs	r2, #64	@ 0x40
3401ec04:	2100      	movs	r1, #0
3401ec06:	4668      	mov	r0, sp
3401ec08:	f001 fb26 	bl	34020258 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
3401ec0c:	2298      	movs	r2, #152	@ 0x98
3401ec0e:	2100      	movs	r1, #0
3401ec10:	a810      	add	r0, sp, #64	@ 0x40
3401ec12:	f001 fb21 	bl	34020258 <memset>
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3401ec16:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3401ec1a:	2100      	movs	r1, #0
3401ec1c:	a836      	add	r0, sp, #216	@ 0xd8
3401ec1e:	f001 fb1b 	bl	34020258 <memset>

  BSP_SMPS_Init(SMPS_VOLTAGE_OVERDRIVE);
3401ec22:	2001      	movs	r0, #1
3401ec24:	f7f0 fa1c 	bl	3400f060 <BSP_SMPS_Init>
  HAL_Delay(1); /* Assuming Voltage Ramp Speed of 1mV/us --> 100mV increase takes 100us */
3401ec28:	2001      	movs	r0, #1
3401ec2a:	f7ff ff6b 	bl	3401eb04 <HAL_Delay>
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL1.PLLM = 2;
  RCC_OscInitStruct.PLL1.PLLN = 25;
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
3401ec2e:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3401ec30:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL1.PLLN = 25;
3401ec32:	2219      	movs	r2, #25
  /* PLL2 = 64 x 125 / 8 = 1000MHz */
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL2.PLLM = 8;
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
  RCC_OscInitStruct.PLL2.PLLN = 125;
3401ec34:	217d      	movs	r1, #125	@ 0x7d
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
3401ec36:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
3401ec38:	e9cd 321d 	strd	r3, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLP1 = 1;
3401ec3c:	e9cd 1425 	strd	r1, r4, [sp, #148]	@ 0x94
  RCC_OscInitStruct.PLL2.PLLM = 8;
3401ec40:	2208      	movs	r2, #8

  /* PLL3 = (64 x 225 / 8) / (1 * 2) = 900MHz */
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL3.PLLM = 8;
  RCC_OscInitStruct.PLL3.PLLN = 225;
3401ec42:	21e1      	movs	r1, #225	@ 0xe1
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
3401ec44:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
3401ec48:	e9cd 5321 	strd	r5, r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
3401ec4c:	e9cd 2323 	strd	r2, r3, [sp, #140]	@ 0x8c
  RCC_OscInitStruct.PLL3.PLLM = 8;
3401ec50:	e9cd 3229 	strd	r3, r2, [sp, #164]	@ 0xa4
  RCC_OscInitStruct.PLL3.PLLFractional = 0;
3401ec54:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
  RCC_OscInitStruct.PLL3.PLLP1 = 1;
  RCC_OscInitStruct.PLL3.PLLP2 = 2;

  /* PLL4 = (64 x 225 / 8) / (6 * 6) = 50 MHz */
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL4.PLLSource = RCC_PLLSOURCE_HSI;
3401ec58:	e9cd 532f 	strd	r5, r3, [sp, #188]	@ 0xbc
  RCC_OscInitStruct.PLL4.PLLM = 8;
  RCC_OscInitStruct.PLL4.PLLFractional = 0;
3401ec5c:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
3401ec60:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL4.PLLN = 225;
  RCC_OscInitStruct.PLL4.PLLP1 = 6;
3401ec62:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL4.PLLP2 = 6;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3401ec64:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
3401ec66:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
3401ec6a:	e9cd 4527 	strd	r4, r5, [sp, #156]	@ 0x9c
  RCC_OscInitStruct.PLL3.PLLP2 = 2;
3401ec6e:	e9cd 452d 	strd	r4, r5, [sp, #180]	@ 0xb4
  RCC_OscInitStruct.PLL4.PLLP2 = 6;
3401ec72:	e9cd 3334 	strd	r3, r3, [sp, #208]	@ 0xd0
  RCC_OscInitStruct.PLL1.PLLM = 2;
3401ec76:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL4.PLLN = 225;
3401ec78:	9133      	str	r1, [sp, #204]	@ 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
3401ec7a:	f7f6 fde1 	bl	34015840 <HAL_RCC_OscConfig>
3401ec7e:	b100      	cbz	r0, 3401ec82 <SystemClock_Config+0x86>
  {
    while(1);
3401ec80:	e7fe      	b.n	3401ec80 <SystemClock_Config+0x84>
                                 RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK4 |
                                 RCC_CLOCKTYPE_PCLK5);

  /* CPU CLock (sysa_ck) = ic1_ck = PLL1 output/ic1_divider = 800 MHz */
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
3401ec82:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
3401ec86:	227f      	movs	r2, #127	@ 0x7f
3401ec88:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_IC2_IC6_IC11;
3401ec8c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3401ec90:	9302      	str	r3, [sp, #8]
  /* AXI Clock (sysb_ck) = ic2_ck = PLL1 output/ic2_divider = 400 MHz */
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;

  /* NPU Clock (sysc_ck) = ic6_ck = PLL2 output/ic6_divider = 1000 MHz */
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL2;
3401ec92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  RCC_ClkInitStruct.IC6Selection.ClockDivider = 1;
3401ec96:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30

  /* AXISRAM3/4/5/6 Clock (sysd_ck) = ic11_ck = PLL3 output/ic11_divider = 900 MHz */
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL3;
3401ec9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 1;
3401ec9e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38

  /* HCLK = sysb_ck / HCLK divider = 200 MHz */
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
3401eca2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 1;
3401eca6:	e9cd 0408 	strd	r0, r4, [sp, #32]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 2;
3401ecaa:	e9cd 050a 	strd	r0, r5, [sp, #40]	@ 0x28

  /* PCLKx = HCLK / PCLKx divider = 200 MHz */
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
3401ecae:	e9cd 3003 	strd	r3, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
3401ecb2:	e9cd 0005 	strd	r0, r0, [sp, #20]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
3401ecb6:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
3401ecb8:	4668      	mov	r0, sp
3401ecba:	f7f7 f9bd 	bl	34016038 <HAL_RCC_ClockConfig>
3401ecbe:	b100      	cbz	r0, 3401ecc2 <SystemClock_Config+0xc6>
  {
    while(1);
3401ecc0:	e7fe      	b.n	3401ecc0 <SystemClock_Config+0xc4>

  RCC_PeriphCLKInitStruct.PeriphClockSelection = 0;

  /* XSPI1 kernel clock (ck_ker_xspi1) = HCLK = 200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI1;
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3401ecc2:	4b08      	ldr	r3, [pc, #32]	@ (3401ece4 <SystemClock_Config+0xe8>)

  /* XSPI2 kernel clock (ck_ker_xspi1) = HCLK =  200MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3401ecc4:	2200      	movs	r2, #0
  RCC_PeriphCLKInitStruct.Xspi1ClockSelection = RCC_XSPI1CLKSOURCE_HCLK;
3401ecc6:	9361      	str	r3, [sp, #388]	@ 0x184
  RCC_PeriphCLKInitStruct.PeriphClockSelection |= RCC_PERIPHCLK_XSPI2;
3401ecc8:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
3401eccc:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3401ecd0:	4b05      	ldr	r3, [pc, #20]	@ (3401ece8 <SystemClock_Config+0xec>)

  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3401ecd2:	a836      	add	r0, sp, #216	@ 0xd8
  RCC_PeriphCLKInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_HCLK;
3401ecd4:	9362      	str	r3, [sp, #392]	@ 0x188
  if (HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
3401ecd6:	f7f7 fd65 	bl	340167a4 <HAL_RCCEx_PeriphCLKConfig>
3401ecda:	b100      	cbz	r0, 3401ecde <SystemClock_Config+0xe2>
  {
    while (1);
3401ecdc:	e7fe      	b.n	3401ecdc <SystemClock_Config+0xe0>
  }
}
3401ecde:	f50d 7d1b 	add.w	sp, sp, #620	@ 0x26c
3401ece2:	bd30      	pop	{r4, r5, pc}
3401ece4:	03000014 	.word	0x03000014
3401ece8:	03000414 	.word	0x03000414

3401ecec <main_thread_fct>:

  return -1;
}

static void main_thread_fct(void *arg)
{
3401ecec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3401ecf0:	b09c      	sub	sp, #112	@ 0x70
  IRQn_Type i;

  /* Copy SysTick_IRQn priority set by RTOS and use it as default priorities for IRQs. We are now sure that all irqs
   * have default priority below or equal to configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY.
   */
  HAL_NVIC_GetPriority(SysTick_IRQn, HAL_NVIC_GetPriorityGrouping(), &preemptPriority, &subPriority);
3401ecf2:	f7f1 ffad 	bl	34010c50 <HAL_NVIC_GetPriorityGrouping>
3401ecf6:	ab03      	add	r3, sp, #12
3401ecf8:	4601      	mov	r1, r0
3401ecfa:	aa02      	add	r2, sp, #8
3401ecfc:	f04f 30ff 	mov.w	r0, #4294967295
3401ed00:	f7f1 ffae 	bl	34010c60 <HAL_NVIC_GetPriority>
3401ed04:	2400      	movs	r4, #0
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
    HAL_NVIC_SetPriority(i, preemptPriority, subPriority);
3401ed06:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
3401ed0a:	b220      	sxth	r0, r4
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
3401ed0c:	3401      	adds	r4, #1
    HAL_NVIC_SetPriority(i, preemptPriority, subPriority);
3401ed0e:	f7f1 ff2d 	bl	34010b6c <HAL_NVIC_SetPriority>
  for (i = PVD_PVM_IRQn; i <= LTDC_UP_ERR_IRQn; i++)
3401ed12:	2cc3      	cmp	r4, #195	@ 0xc3
3401ed14:	d1f7      	bne.n	3401ed06 <main_thread_fct+0x1a>

  /* Call SystemClock_Config() after vTaskStartScheduler() since it call HAL_Delay() which call vTaskDelay(). Drawback
   * is that we must call vPortSetupTimerInterrupt() since SystemCoreClock value has been modified by SystemClock_Config()
   */
  SystemClock_Config();
3401ed16:	f7ff ff71 	bl	3401ebfc <SystemClock_Config>
  vPortSetupTimerInterrupt();
3401ed1a:	f7ec fe31 	bl	3400b980 <vPortSetupTimerInterrupt>
  WRITE_REG(RCC->APB2ENSR, Periphs);
3401ed1e:	2310      	movs	r3, #16
3401ed20:	4c97      	ldr	r4, [pc, #604]	@ (3401ef80 <main_thread_fct+0x294>)
  gpio_init.Pull      = GPIO_PULLUP;
3401ed22:	2602      	movs	r6, #2
3401ed24:	f8c4 3a6c 	str.w	r3, [r4, #2668]	@ 0xa6c
  tmpreg = READ_REG(RCC->APB2ENR);
3401ed28:	f8d4 226c 	ldr.w	r2, [r4, #620]	@ 0x26c
3401ed2c:	2701      	movs	r7, #1
3401ed2e:	9213      	str	r2, [sp, #76]	@ 0x4c
  (void)tmpreg;
3401ed30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
  WRITE_REG(RCC->AHB4ENSR, Periphs);
3401ed32:	f8c4 3a5c 	str.w	r3, [r4, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3401ed36:	f8d4 325c 	ldr.w	r3, [r4, #604]	@ 0x25c
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401ed3a:	4892      	ldr	r0, [pc, #584]	@ (3401ef84 <main_thread_fct+0x298>)
3401ed3c:	9312      	str	r3, [sp, #72]	@ 0x48
  (void)tmpreg;
3401ed3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  gpio_init.Pin       = GPIO_PIN_5 | GPIO_PIN_6;
3401ed40:	2360      	movs	r3, #96	@ 0x60
3401ed42:	9317      	str	r3, [sp, #92]	@ 0x5c
  gpio_init.Alternate = GPIO_AF7_USART1;
3401ed44:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401ed46:	a917      	add	r1, sp, #92	@ 0x5c
  gpio_init.Alternate = GPIO_AF7_USART1;
3401ed48:	931b      	str	r3, [sp, #108]	@ 0x6c
  gpio_init.Pull      = GPIO_PULLUP;
3401ed4a:	e9cd 6718 	strd	r6, r7, [sp, #96]	@ 0x60
  gpio_init.Speed     = GPIO_SPEED_FREQ_HIGH;
3401ed4e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(GPIOE, &gpio_init);
3401ed50:	f7f4 fd84 	bl	3401385c <HAL_GPIO_Init>
  huart1.Init.BaudRate     = 115200;
3401ed54:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance          = USART1;
3401ed58:	488b      	ldr	r0, [pc, #556]	@ (3401ef88 <main_thread_fct+0x29c>)
  huart1.Init.BaudRate     = 115200;
3401ed5a:	498c      	ldr	r1, [pc, #560]	@ (3401ef8c <main_thread_fct+0x2a0>)
  huart1.Init.Parity       = UART_PARITY_NONE;
3401ed5c:	250c      	movs	r5, #12
  huart1.Init.BaudRate     = 115200;
3401ed5e:	e9c0 1300 	strd	r1, r3, [r0]
  huart1.Init.Parity       = UART_PARITY_NONE;
3401ed62:	2300      	movs	r3, #0
3401ed64:	e9c0 3504 	strd	r3, r5, [r0, #16]
  huart1.Init.StopBits     = UART_STOPBITS_1;
3401ed68:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
3401ed6c:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
3401ed6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3401ed72:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
3401ed74:	f7fd faa0 	bl	3401c2b8 <HAL_UART_Init>
3401ed78:	4605      	mov	r5, r0
3401ed7a:	b100      	cbz	r0, 3401ed7e <main_thread_fct+0x92>
    while (1);
3401ed7c:	e7fe      	b.n	3401ed7c <main_thread_fct+0x90>
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401ed7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
3401ed82:	f8c4 3a60 	str.w	r3, [r4, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3401ed86:	f8d4 2260 	ldr.w	r2, [r4, #608]	@ 0x260
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401ed8a:	f8df 8234 	ldr.w	r8, [pc, #564]	@ 3401efc0 <main_thread_fct+0x2d4>
  tmpreg = READ_REG(RCC->AHB5ENR);
3401ed8e:	9215      	str	r2, [sp, #84]	@ 0x54
  (void)tmpreg;
3401ed90:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  __HAL_RCC_AXISRAM3_MEM_CLK_ENABLE();
3401ed92:	4638      	mov	r0, r7
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401ed94:	f8c4 3a20 	str.w	r3, [r4, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401ed98:	f8c8 3220 	str.w	r3, [r8, #544]	@ 0x220
3401ed9c:	f7ff ff22 	bl	3401ebe4 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM4_MEM_CLK_ENABLE();
3401eda0:	4630      	mov	r0, r6
3401eda2:	f7ff ff1f 	bl	3401ebe4 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM5_MEM_CLK_ENABLE();
3401eda6:	2004      	movs	r0, #4
3401eda8:	f7ff ff1c 	bl	3401ebe4 <LL_MEM_EnableClock>
  __HAL_RCC_AXISRAM6_MEM_CLK_ENABLE();
3401edac:	2008      	movs	r0, #8
3401edae:	f7ff ff19 	bl	3401ebe4 <LL_MEM_EnableClock>
  WRITE_REG(RCC->AHB2ENSR, Periphs);
3401edb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3401edb6:	f8c4 3a54 	str.w	r3, [r4, #2644]	@ 0xa54
  tmpreg = READ_REG(RCC->AHB2ENR);
3401edba:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401edbe:	a817      	add	r0, sp, #92	@ 0x5c
3401edc0:	9314      	str	r3, [sp, #80]	@ 0x50
  (void)tmpreg;
3401edc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3401edc4:	4b72      	ldr	r3, [pc, #456]	@ (3401ef90 <main_thread_fct+0x2a4>)
  RAMCFG_HandleTypeDef hramcfg = {0};
3401edc6:	e9cd 5518 	strd	r5, r5, [sp, #96]	@ 0x60
  hramcfg.Instance =  RAMCFG_SRAM3_AXI;
3401edca:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401edcc:	f7f6 fb14 	bl	340153f8 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3401edd0:	4b70      	ldr	r3, [pc, #448]	@ (3401ef94 <main_thread_fct+0x2a8>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401edd2:	a817      	add	r0, sp, #92	@ 0x5c
  hramcfg.Instance =  RAMCFG_SRAM4_AXI;
3401edd4:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401edd6:	f7f6 fb0f 	bl	340153f8 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3401edda:	4b6f      	ldr	r3, [pc, #444]	@ (3401ef98 <main_thread_fct+0x2ac>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401eddc:	a817      	add	r0, sp, #92	@ 0x5c
  hramcfg.Instance =  RAMCFG_SRAM5_AXI;
3401edde:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401ede0:	f7f6 fb0a 	bl	340153f8 <HAL_RAMCFG_EnableAXISRAM>
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3401ede4:	4b6d      	ldr	r3, [pc, #436]	@ (3401ef9c <main_thread_fct+0x2b0>)
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401ede6:	a817      	add	r0, sp, #92	@ 0x5c
  hramcfg.Instance =  RAMCFG_SRAM6_AXI;
3401ede8:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_RAMCFG_EnableAXISRAM(&hramcfg);
3401edea:	f7f6 fb05 	bl	340153f8 <HAL_RAMCFG_EnableAXISRAM>

  CONSOLE_Config();

  NPURam_enable();
  Fuse_Programming();
3401edee:	f7ff fe59 	bl	3401eaa4 <Fuse_Programming>
  npu_cache_init();
3401edf2:	f7e3 f995 	bl	34002120 <npu_cache_init>
  npu_cache_enable();
3401edf6:	f7e3 f99d 	bl	34002134 <npu_cache_enable>

  NPUCache_config();

#ifdef STM32N6570_DK_REV
  /*** External RAM and NOR Flash *********************************************/
  BSP_XSPI_RAM_Init(0);
3401edfa:	4628      	mov	r0, r5
3401edfc:	f7f1 f9fe 	bl	340101fc <BSP_XSPI_RAM_Init>
  BSP_XSPI_RAM_EnableMemoryMappedMode(0);
3401ee00:	4628      	mov	r0, r5
3401ee02:	f7f1 fb1f 	bl	34010444 <BSP_XSPI_RAM_EnableMemoryMappedMode>
#endif

  BSP_XSPI_NOR_Init_t NOR_Init;
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3401ee06:	f240 1301 	movw	r3, #257	@ 0x101
  NOR_Init.TransferRate = BSP_XSPI_NOR_DTR_TRANSFER;
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3401ee0a:	a901      	add	r1, sp, #4
3401ee0c:	4628      	mov	r0, r5
  NOR_Init.InterfaceMode = BSP_XSPI_NOR_OPI_MODE;
3401ee0e:	f8ad 3004 	strh.w	r3, [sp, #4]
  BSP_XSPI_NOR_Init(0, &NOR_Init);
3401ee12:	f7f1 f8ad 	bl	3400ff70 <BSP_XSPI_NOR_Init>
  BSP_XSPI_NOR_EnableMemoryMappedMode(0);
3401ee16:	4628      	mov	r0, r5
3401ee18:	f7f1 f818 	bl	3400fe4c <BSP_XSPI_NOR_EnableMemoryMappedMode>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3401ee1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
3401ee20:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3401ee24:	f8d4 3258 	ldr.w	r3, [r4, #600]	@ 0x258
  RIMC_master.MasterCID = RIF_CID_1;
3401ee28:	9617      	str	r6, [sp, #92]	@ 0x5c
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3401ee2a:	2603      	movs	r6, #3
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3401ee2c:	4638      	mov	r0, r7
3401ee2e:	9316      	str	r3, [sp, #88]	@ 0x58
3401ee30:	a917      	add	r1, sp, #92	@ 0x5c
  (void)tmpreg;
3401ee32:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  RIMC_master.SecPriv = RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV;
3401ee34:	9618      	str	r6, [sp, #96]	@ 0x60
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_NPU, &RIMC_master);
3401ee36:	f7fc fae3 	bl	3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DMA2D, &RIMC_master);
3401ee3a:	a917      	add	r1, sp, #92	@ 0x5c
3401ee3c:	2008      	movs	r0, #8
3401ee3e:	f7fc fadf 	bl	3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_DCMIPP, &RIMC_master);
3401ee42:	a917      	add	r1, sp, #92	@ 0x5c
3401ee44:	2009      	movs	r0, #9
3401ee46:	f7fc fadb 	bl	3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC1 , &RIMC_master);
3401ee4a:	a917      	add	r1, sp, #92	@ 0x5c
3401ee4c:	200a      	movs	r0, #10
3401ee4e:	f7fc fad7 	bl	3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_LTDC2 , &RIMC_master);
3401ee52:	a917      	add	r1, sp, #92	@ 0x5c
3401ee54:	200b      	movs	r0, #11
3401ee56:	f7fc fad3 	bl	3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RIMC_ConfigMasterAttributes(RIF_MASTER_INDEX_OTG1 , &RIMC_master);
3401ee5a:	a917      	add	r1, sp, #92	@ 0x5c
3401ee5c:	2004      	movs	r0, #4
3401ee5e:	f7fc facf 	bl	3401b400 <HAL_RIF_RIMC_ConfigMasterAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_NPU , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee62:	4631      	mov	r1, r6
3401ee64:	484e      	ldr	r0, [pc, #312]	@ (3401efa0 <main_thread_fct+0x2b4>)
3401ee66:	f7fc fb21 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DMA2D , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee6a:	4631      	mov	r1, r6
3401ee6c:	484d      	ldr	r0, [pc, #308]	@ (3401efa4 <main_thread_fct+0x2b8>)
3401ee6e:	f7fc fb1d 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_CSI    , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee72:	4631      	mov	r1, r6
3401ee74:	484c      	ldr	r0, [pc, #304]	@ (3401efa8 <main_thread_fct+0x2bc>)
3401ee76:	f7fc fb19 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_DCMIPP , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee7a:	4631      	mov	r1, r6
3401ee7c:	484b      	ldr	r0, [pc, #300]	@ (3401efac <main_thread_fct+0x2c0>)
3401ee7e:	f7fc fb15 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDC   , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee82:	4631      	mov	r1, r6
3401ee84:	484a      	ldr	r0, [pc, #296]	@ (3401efb0 <main_thread_fct+0x2c4>)
3401ee86:	f7fc fb11 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL1 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee8a:	4631      	mov	r1, r6
3401ee8c:	4849      	ldr	r0, [pc, #292]	@ (3401efb4 <main_thread_fct+0x2c8>)
3401ee8e:	f7fc fb0d 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_LTDCL2 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee92:	4631      	mov	r1, r6
3401ee94:	4848      	ldr	r0, [pc, #288]	@ (3401efb8 <main_thread_fct+0x2cc>)
3401ee96:	f7fc fb09 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_OTG1HS , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401ee9a:	4631      	mov	r1, r6
3401ee9c:	4847      	ldr	r0, [pc, #284]	@ (3401efbc <main_thread_fct+0x2d0>)
3401ee9e:	f7fc fb05 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  HAL_RIF_RISC_SetSlaveSecureAttributes(RIF_RISC_PERIPH_INDEX_SPI5 , RIF_ATTRIBUTE_SEC | RIF_ATTRIBUTE_PRIV);
3401eea2:	4631      	mov	r1, r6
3401eea4:	2004      	movs	r0, #4
3401eea6:	f7fc fb01 	bl	3401b4ac <HAL_RIF_RISC_SetSlaveSecureAttributes>
  WRITE_REG(RCC->AHB3ENSR, Periphs);
3401eeaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3401eeae:	f8c4 3a58 	str.w	r3, [r4, #2648]	@ 0xa58
  tmpreg = READ_REG(RCC->AHB3ENR);
3401eeb2:	f8d4 2258 	ldr.w	r2, [r4, #600]	@ 0x258
3401eeb6:	9217      	str	r2, [sp, #92]	@ 0x5c
  (void)tmpreg;
3401eeb8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  WRITE_REG(RCC->AHB3RSTSR, Periphs);
3401eeba:	f8c4 3a18 	str.w	r3, [r4, #2584]	@ 0xa18
  WRITE_REG(RCC->AHB3RSTCR, Periphs);
3401eebe:	f8c8 3218 	str.w	r3, [r8, #536]	@ 0x218
  WRITE_REG(RCC->BUSLPENSR, Bus);
3401eec2:	f04f 33ff 	mov.w	r3, #4294967295
3401eec6:	f8c4 3a84 	str.w	r3, [r4, #2692]	@ 0xa84
  tmpreg = READ_REG(RCC->BUSLPENR);
3401eeca:	f8d4 2284 	ldr.w	r2, [r4, #644]	@ 0x284
3401eece:	9211      	str	r2, [sp, #68]	@ 0x44
  (void)tmpreg;
3401eed0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  WRITE_REG(RCC->MEMLPENSR, Memories);
3401eed2:	f8c4 3a8c 	str.w	r3, [r4, #2700]	@ 0xa8c
  tmpreg = READ_REG(RCC->MEMLPENR);
3401eed6:	f8d4 228c 	ldr.w	r2, [r4, #652]	@ 0x28c
3401eeda:	9210      	str	r2, [sp, #64]	@ 0x40
  (void)tmpreg;
3401eedc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  WRITE_REG(RCC->AHB1LPENSR, Periphs);
3401eede:	f8c4 3a90 	str.w	r3, [r4, #2704]	@ 0xa90
  tmpreg = READ_REG(RCC->AHB1LPENR);
3401eee2:	f8d4 2290 	ldr.w	r2, [r4, #656]	@ 0x290
3401eee6:	920f      	str	r2, [sp, #60]	@ 0x3c
  (void)tmpreg;
3401eee8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  WRITE_REG(RCC->AHB2LPENSR, Periphs);
3401eeea:	f8c4 3a94 	str.w	r3, [r4, #2708]	@ 0xa94
  tmpreg = READ_REG(RCC->AHB2LPENR);
3401eeee:	f8d4 2294 	ldr.w	r2, [r4, #660]	@ 0x294
3401eef2:	920e      	str	r2, [sp, #56]	@ 0x38
  (void)tmpreg;
3401eef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  WRITE_REG(RCC->AHB3LPENSR, Periphs);
3401eef6:	f8c4 3a98 	str.w	r3, [r4, #2712]	@ 0xa98
  tmpreg = READ_REG(RCC->AHB3LPENR);
3401eefa:	f8d4 2298 	ldr.w	r2, [r4, #664]	@ 0x298
3401eefe:	920d      	str	r2, [sp, #52]	@ 0x34
  (void)tmpreg;
3401ef00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  WRITE_REG(RCC->AHB4LPENSR, Periphs);
3401ef02:	f8c4 3a9c 	str.w	r3, [r4, #2716]	@ 0xa9c
  tmpreg = READ_REG(RCC->AHB4LPENR);
3401ef06:	f8d4 229c 	ldr.w	r2, [r4, #668]	@ 0x29c
3401ef0a:	920c      	str	r2, [sp, #48]	@ 0x30
  (void)tmpreg;
3401ef0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  WRITE_REG(RCC->AHB5LPENSR, Periphs);
3401ef0e:	f8c4 3aa0 	str.w	r3, [r4, #2720]	@ 0xaa0
  tmpreg = READ_REG(RCC->AHB5LPENR);
3401ef12:	f8d4 22a0 	ldr.w	r2, [r4, #672]	@ 0x2a0
3401ef16:	920b      	str	r2, [sp, #44]	@ 0x2c
  (void)tmpreg;
3401ef18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  WRITE_REG(RCC->APB1LPENSR1, Periphs);
3401ef1a:	f8c4 3aa4 	str.w	r3, [r4, #2724]	@ 0xaa4
  tmpreg = READ_REG(RCC->APB1LPENR1);
3401ef1e:	f8d4 22a4 	ldr.w	r2, [r4, #676]	@ 0x2a4
3401ef22:	920a      	str	r2, [sp, #40]	@ 0x28
  (void)tmpreg;
3401ef24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  WRITE_REG(RCC->APB1LPENSR2, Periphs);
3401ef26:	f8c4 3aa8 	str.w	r3, [r4, #2728]	@ 0xaa8
  tmpreg = READ_REG(RCC->APB1LPENR2);
3401ef2a:	f8d4 22a8 	ldr.w	r2, [r4, #680]	@ 0x2a8
3401ef2e:	9209      	str	r2, [sp, #36]	@ 0x24
  (void)tmpreg;
3401ef30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  WRITE_REG(RCC->APB2LPENSR, Periphs);
3401ef32:	f8c4 3aac 	str.w	r3, [r4, #2732]	@ 0xaac
  tmpreg = READ_REG(RCC->APB2LPENR);
3401ef36:	f8d4 22ac 	ldr.w	r2, [r4, #684]	@ 0x2ac
3401ef3a:	9208      	str	r2, [sp, #32]
  (void)tmpreg;
3401ef3c:	9a08      	ldr	r2, [sp, #32]
  WRITE_REG(RCC->APB4LPENSR1, Periphs);
3401ef3e:	f8c4 3ab4 	str.w	r3, [r4, #2740]	@ 0xab4
  tmpreg = READ_REG(RCC->APB4LPENR1);
3401ef42:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
3401ef46:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
3401ef48:	9a07      	ldr	r2, [sp, #28]
  WRITE_REG(RCC->APB4LPENSR2, Periphs);
3401ef4a:	f8c4 3ab8 	str.w	r3, [r4, #2744]	@ 0xab8
  tmpreg = READ_REG(RCC->APB4LPENR2);
3401ef4e:	f8d4 22b8 	ldr.w	r2, [r4, #696]	@ 0x2b8
3401ef52:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
3401ef54:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(RCC->APB5LPENSR, Periphs);
3401ef56:	f8c4 3abc 	str.w	r3, [r4, #2748]	@ 0xabc
  tmpreg = READ_REG(RCC->APB5LPENR);
3401ef5a:	f8d4 22bc 	ldr.w	r2, [r4, #700]	@ 0x2bc
3401ef5e:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
3401ef60:	9a05      	ldr	r2, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_MISC_EnableClockLowPower(uint32_t Misc)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->MISCLPENSR, Misc);
3401ef62:	f8c4 3a88 	str.w	r3, [r4, #2696]	@ 0xa88
  /* Delay after an RCC miscellaneous clock enabling */
  tmpreg = READ_REG(RCC->MISCLPENR);
3401ef66:	f8d4 3288 	ldr.w	r3, [r4, #648]	@ 0x288
3401ef6a:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
3401ef6c:	9b04      	ldr	r3, [sp, #16]
  LL_APB4_GRP1_EnableClockLowPower(~0);
  LL_APB4_GRP2_EnableClockLowPower(~0);
  LL_APB5_GRP1_EnableClockLowPower(~0);
  LL_MISC_EnableClockLowPower(~0);

  app_run();
3401ef6e:	f7ff fa65 	bl	3401e43c <app_run>

  vTaskDelete(NULL);
3401ef72:	4628      	mov	r0, r5
3401ef74:	f7eb fea6 	bl	3400acc4 <vTaskDelete>
}
3401ef78:	b01c      	add	sp, #112	@ 0x70
3401ef7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3401ef7e:	bf00      	nop
3401ef80:	56028000 	.word	0x56028000
3401ef84:	56021000 	.word	0x56021000
3401ef88:	341fa544 	.word	0x341fa544
3401ef8c:	52001000 	.word	0x52001000
3401ef90:	52023100 	.word	0x52023100
3401ef94:	52023180 	.word	0x52023180
3401ef98:	52023200 	.word	0x52023200
3401ef9c:	52023280 	.word	0x52023280
3401efa0:	3000000a 	.word	0x3000000a
3401efa4:	30000005 	.word	0x30000005
3401efa8:	2000001c 	.word	0x2000001c
3401efac:	2000001d 	.word	0x2000001d
3401efb0:	30000006 	.word	0x30000006
3401efb4:	30000007 	.word	0x30000007
3401efb8:	30000008 	.word	0x30000008
3401efbc:	10000018 	.word	0x10000018
3401efc0:	56029000 	.word	0x56029000

3401efc4 <main>:
{
3401efc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_ICACTIVE_Msk;
3401efc6:	4a3b      	ldr	r2, [pc, #236]	@ (3401f0b4 <main+0xf0>)
3401efc8:	6813      	ldr	r3, [r2, #0]
3401efca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
3401efce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, Source);
3401efd0:	4b39      	ldr	r3, [pc, #228]	@ (3401f0b8 <main+0xf4>)
3401efd2:	6a1a      	ldr	r2, [r3, #32]
3401efd4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
3401efd8:	621a      	str	r2, [r3, #32]
  MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, Source);
3401efda:	6a1a      	ldr	r2, [r3, #32]
3401efdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
3401efe0:	621a      	str	r2, [r3, #32]
  HAL_Init();
3401efe2:	f7f1 fc0c 	bl	340107fe <HAL_Init>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
3401efe6:	4b35      	ldr	r3, [pc, #212]	@ (3401f0bc <main+0xf8>)
3401efe8:	695a      	ldr	r2, [r3, #20]
3401efea:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
3401efee:	d111      	bne.n	3401f014 <main+0x50>
  __ASM volatile ("dsb 0xF":::"memory");
3401eff0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401eff4:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3401eff8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3401effc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f000:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
3401f004:	695a      	ldr	r2, [r3, #20]
3401f006:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
3401f00a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3401f00c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f010:	f3bf 8f6f 	isb	sy
  MEMSYSCTL->MSCR |= MEMSYSCTL_MSCR_DCACTIVE_Msk;
3401f014:	4a27      	ldr	r2, [pc, #156]	@ (3401f0b4 <main+0xf0>)
3401f016:	6813      	ldr	r3, [r2, #0]
3401f018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3401f01c:	6013      	str	r3, [r2, #0]
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
3401f01e:	f5a2 4273 	sub.w	r2, r2, #62208	@ 0xf300
3401f022:	6953      	ldr	r3, [r2, #20]
3401f024:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
3401f028:	d128      	bne.n	3401f07c <main+0xb8>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3401f02a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3401f02e:	f3bf 8f4f 	dsb	sy
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3401f032:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
3401f036:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3401f03a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3401f03e:	f3c3 334e 	ubfx	r3, r3, #13, #15
3401f042:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3401f044:	f100 0e01 	add.w	lr, r0, #1
3401f048:	4601      	mov	r1, r0
3401f04a:	f04e e001 	dls	lr, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
3401f04e:	ea03 0604 	and.w	r6, r3, r4
3401f052:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
3401f056:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
3401f05a:	3901      	subs	r1, #1
3401f05c:	f00f c807 	le	lr, 3401f052 <main+0x8e>
    } while(sets-- != 0U);
3401f060:	3b20      	subs	r3, #32
3401f062:	f113 0f20 	cmn.w	r3, #32
3401f066:	d1ed      	bne.n	3401f044 <main+0x80>
3401f068:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
3401f06c:	6953      	ldr	r3, [r2, #20]
3401f06e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3401f072:	6153      	str	r3, [r2, #20]
3401f074:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3401f078:	f3bf 8f6f 	isb	sy
  hdl = xTaskCreateStatic(main_thread_fct, "main", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1,
3401f07c:	4b10      	ldr	r3, [pc, #64]	@ (3401f0c0 <main+0xfc>)
3401f07e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3401f082:	9302      	str	r3, [sp, #8]
3401f084:	4b0f      	ldr	r3, [pc, #60]	@ (3401f0c4 <main+0x100>)
3401f086:	4910      	ldr	r1, [pc, #64]	@ (3401f0c8 <main+0x104>)
3401f088:	9301      	str	r3, [sp, #4]
3401f08a:	2301      	movs	r3, #1
3401f08c:	480f      	ldr	r0, [pc, #60]	@ (3401f0cc <main+0x108>)
3401f08e:	9300      	str	r3, [sp, #0]
3401f090:	2300      	movs	r3, #0
3401f092:	f7eb fd23 	bl	3400aadc <xTaskCreateStatic>
  assert(hdl != NULL);
3401f096:	b930      	cbnz	r0, 3401f0a6 <main+0xe2>
3401f098:	f44f 7193 	mov.w	r1, #294	@ 0x126
3401f09c:	4b0c      	ldr	r3, [pc, #48]	@ (3401f0d0 <main+0x10c>)
3401f09e:	4a0d      	ldr	r2, [pc, #52]	@ (3401f0d4 <main+0x110>)
  assert(0);
3401f0a0:	480d      	ldr	r0, [pc, #52]	@ (3401f0d8 <main+0x114>)
3401f0a2:	f000 f88f 	bl	3401f1c4 <__assert_func>
  vTaskStartScheduler();
3401f0a6:	f7eb fe63 	bl	3400ad70 <vTaskStartScheduler>
  assert(0);
3401f0aa:	f240 1129 	movw	r1, #297	@ 0x129
3401f0ae:	4b0b      	ldr	r3, [pc, #44]	@ (3401f0dc <main+0x118>)
3401f0b0:	4a08      	ldr	r2, [pc, #32]	@ (3401f0d4 <main+0x110>)
3401f0b2:	e7f5      	b.n	3401f0a0 <main+0xdc>
3401f0b4:	e001e000 	.word	0xe001e000
3401f0b8:	56028000 	.word	0x56028000
3401f0bc:	e000ed00 	.word	0xe000ed00
3401f0c0:	341fa4e4 	.word	0x341fa4e4
3401f0c4:	341f94e4 	.word	0x341f94e4
3401f0c8:	3402c2a5 	.word	0x3402c2a5
3401f0cc:	3401eced 	.word	0x3401eced
3401f0d0:	3402c1c6 	.word	0x3402c1c6
3401f0d4:	34106380 	.word	0x34106380
3401f0d8:	3402c2aa 	.word	0x3402c2aa
3401f0dc:	34026d17 	.word	0x34026d17

3401f0e0 <IAC_IRQHandler>:
  while (1)
3401f0e0:	e7fe      	b.n	3401f0e0 <IAC_IRQHandler>

3401f0e2 <MX_DCMIPP_ClockConfig>:

HAL_StatusTypeDef MX_DCMIPP_ClockConfig(DCMIPP_HandleTypeDef *hdcmipp)
{
3401f0e2:	b500      	push	{lr}
3401f0e4:	b0e5      	sub	sp, #404	@ 0x194
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct = {0};
3401f0e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
3401f0ea:	2100      	movs	r1, #0
3401f0ec:	4668      	mov	r0, sp
3401f0ee:	f001 f8b3 	bl	34020258 <memset>
  HAL_StatusTypeDef ret;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP;
3401f0f2:	2300      	movs	r3, #0
3401f0f4:	2210      	movs	r2, #16
3401f0f6:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
3401f0fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockSelection = RCC_ICCLKSOURCE_PLL2;
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401f0fe:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
  RCC_PeriphCLKInitStruct.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_IC17;
3401f102:	9332      	str	r3, [sp, #200]	@ 0xc8
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401f104:	2303      	movs	r3, #3
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f106:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC17].ClockDivider = 3;
3401f108:	e9cd 1322 	strd	r1, r3, [sp, #136]	@ 0x88
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f10c:	f7f7 fb4a 	bl	340167a4 <HAL_RCCEx_PeriphCLKConfig>
  if (ret)
3401f110:	b948      	cbnz	r0, 3401f126 <MX_DCMIPP_ClockConfig+0x44>
    return ret;

  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CSI;
3401f112:	2300      	movs	r3, #0
3401f114:	2208      	movs	r2, #8
3401f116:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockDivider = 40;
3401f11a:	2328      	movs	r3, #40	@ 0x28
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockSelection = RCC_ICCLKSOURCE_PLL1;
3401f11c:	9024      	str	r0, [sp, #144]	@ 0x90
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f11e:	4668      	mov	r0, sp
  RCC_PeriphCLKInitStruct.ICSelection[RCC_IC18].ClockDivider = 40;
3401f120:	9325      	str	r3, [sp, #148]	@ 0x94
  ret = HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
3401f122:	f7f7 fb3f 	bl	340167a4 <HAL_RCCEx_PeriphCLKConfig>
  if (ret)
    return ret;

  return HAL_OK;
}
3401f126:	b065      	add	sp, #404	@ 0x194
3401f128:	f85d fb04 	ldr.w	pc, [sp], #4

3401f12c <HAL_CACHEAXI_MspInit>:

void HAL_CACHEAXI_MspInit(CACHEAXI_HandleTypeDef *hcacheaxi)
{
3401f12c:	b507      	push	{r0, r1, r2, lr}
  WRITE_REG(RCC->AHB5ENSR, Periphs);
3401f12e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  __HAL_RCC_CACHEAXIRAM_MEM_CLK_ENABLE();
3401f132:	f44f 6080 	mov.w	r0, #1024	@ 0x400
3401f136:	f7ff fd55 	bl	3401ebe4 <LL_MEM_EnableClock>
3401f13a:	4b08      	ldr	r3, [pc, #32]	@ (3401f15c <HAL_CACHEAXI_MspInit+0x30>)
3401f13c:	f8c3 2a60 	str.w	r2, [r3, #2656]	@ 0xa60
  tmpreg = READ_REG(RCC->AHB5ENR);
3401f140:	f8d3 1260 	ldr.w	r1, [r3, #608]	@ 0x260
3401f144:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
3401f146:	9901      	ldr	r1, [sp, #4]
  WRITE_REG(RCC->AHB5RSTSR, Periphs);
3401f148:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  WRITE_REG(RCC->AHB5RSTCR, Periphs);
3401f14c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3401f150:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
  __HAL_RCC_CACHEAXI_CLK_ENABLE();
  __HAL_RCC_CACHEAXI_FORCE_RESET();
  __HAL_RCC_CACHEAXI_RELEASE_RESET();
}
3401f154:	b003      	add	sp, #12
3401f156:	f85d fb04 	ldr.w	pc, [sp], #4
3401f15a:	bf00      	nop
3401f15c:	56028000 	.word	0x56028000

3401f160 <assert_failed>:
  */
void assert_failed(uint8_t* file, uint32_t line)
{
  UNUSED(file);
  UNUSED(line);
  __BKPT(0);
3401f160:	be00      	bkpt	0x0000
  while (1)
3401f162:	e7fe      	b.n	3401f162 <assert_failed+0x2>

3401f164 <UTIL_LCDEx_PrintfAt>:
  UTIL_LCD_DisplayStringAtLine(line, (uint8_t *) buffer);
  va_end(args);
}

void UTIL_LCDEx_PrintfAt(uint32_t x_pos, uint32_t y_pos, Text_AlignModeTypdef mode, const char * format, ...)
{
3401f164:	b408      	push	{r3}
3401f166:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
3401f168:	4604      	mov	r4, r0
3401f16a:	460d      	mov	r5, r1
3401f16c:	4616      	mov	r6, r2
3401f16e:	ab07      	add	r3, sp, #28
  static char buffer[N_PRINTABLE_CHARS + 1];
  va_list args;
  va_start(args, format);
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401f170:	4f09      	ldr	r7, [pc, #36]	@ (3401f198 <UTIL_LCDEx_PrintfAt+0x34>)
{
3401f172:	f853 2b04 	ldr.w	r2, [r3], #4
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401f176:	2130      	movs	r1, #48	@ 0x30
3401f178:	4638      	mov	r0, r7
  va_start(args, format);
3401f17a:	9301      	str	r3, [sp, #4]
  vsnprintf(buffer, N_PRINTABLE_CHARS + 1, format, args);
3401f17c:	f000 ffb0 	bl	340200e0 <vsniprintf>
  UTIL_LCD_DisplayStringAt(x_pos, y_pos, (uint8_t *) buffer, mode);
3401f180:	4633      	mov	r3, r6
3401f182:	463a      	mov	r2, r7
3401f184:	4629      	mov	r1, r5
3401f186:	4620      	mov	r0, r4
3401f188:	f7fe f88c 	bl	3401d2a4 <UTIL_LCD_DisplayStringAt>
  va_end(args);
}
3401f18c:	b002      	add	sp, #8
3401f18e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3401f192:	b001      	add	sp, #4
3401f194:	4770      	bx	lr
3401f196:	bf00      	nop
3401f198:	341fa5d8 	.word	0x341fa5d8

3401f19c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
3401f19c:	4770      	bx	lr

3401f19e <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
3401f19e:	e7fe      	b.n	3401f19e <MemManage_Handler>

3401f1a0 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
3401f1a0:	e7fe      	b.n	3401f1a0 <BusFault_Handler>

3401f1a2 <SecureFault_Handler>:
  * @retval None
  */
void SecureFault_Handler(void)
{
  /* Go to infinite loop when Secure Fault exception occurs */
  while (1)
3401f1a2:	e7fe      	b.n	3401f1a2 <SecureFault_Handler>

3401f1a4 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
3401f1a4:	e7fe      	b.n	3401f1a4 <DebugMon_Handler>

3401f1a6 <CSI_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32n6xx.s).                                               */
/******************************************************************************/

void CSI_IRQHandler(void)
{
3401f1a6:	b508      	push	{r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f1a8:	f7e7 ff4a 	bl	34007040 <CMW_CAMERA_GetDCMIPPHandle>
}
3401f1ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_CSI_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f1b0:	f7f2 ba80 	b.w	340116b4 <HAL_DCMIPP_CSI_IRQHandler>

3401f1b4 <DCMIPP_IRQHandler>:

void DCMIPP_IRQHandler(void)
{
3401f1b4:	b508      	push	{r3, lr}
  HAL_DCMIPP_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f1b6:	f7e7 ff43 	bl	34007040 <CMW_CAMERA_GetDCMIPPHandle>
}
3401f1ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DCMIPP_IRQHandler(CMW_CAMERA_GetDCMIPPHandle());
3401f1be:	f7f2 b943 	b.w	34011448 <HAL_DCMIPP_IRQHandler>
	...

3401f1c4 <__assert_func>:
3401f1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3401f1c6:	4614      	mov	r4, r2
3401f1c8:	461a      	mov	r2, r3
3401f1ca:	4b09      	ldr	r3, [pc, #36]	@ (3401f1f0 <__assert_func+0x2c>)
3401f1cc:	4605      	mov	r5, r0
3401f1ce:	681b      	ldr	r3, [r3, #0]
3401f1d0:	68d8      	ldr	r0, [r3, #12]
3401f1d2:	b14c      	cbz	r4, 3401f1e8 <__assert_func+0x24>
3401f1d4:	4b07      	ldr	r3, [pc, #28]	@ (3401f1f4 <__assert_func+0x30>)
3401f1d6:	9100      	str	r1, [sp, #0]
3401f1d8:	4907      	ldr	r1, [pc, #28]	@ (3401f1f8 <__assert_func+0x34>)
3401f1da:	e9cd 3401 	strd	r3, r4, [sp, #4]
3401f1de:	462b      	mov	r3, r5
3401f1e0:	f000 fe6c 	bl	3401febc <fiprintf>
3401f1e4:	f001 facc 	bl	34020780 <abort>
3401f1e8:	4b04      	ldr	r3, [pc, #16]	@ (3401f1fc <__assert_func+0x38>)
3401f1ea:	461c      	mov	r4, r3
3401f1ec:	e7f3      	b.n	3401f1d6 <__assert_func+0x12>
3401f1ee:	bf00      	nop
3401f1f0:	3410ce2c 	.word	0x3410ce2c
3401f1f4:	3402c2d0 	.word	0x3402c2d0
3401f1f8:	3402c2dd 	.word	0x3402c2dd
3401f1fc:	340266f0 	.word	0x340266f0

3401f200 <swapfunc>:
3401f200:	2b02      	cmp	r3, #2
3401f202:	b510      	push	{r4, lr}
3401f204:	d00a      	beq.n	3401f21c <swapfunc+0x1c>
3401f206:	0892      	lsrs	r2, r2, #2
3401f208:	3a01      	subs	r2, #1
3401f20a:	6803      	ldr	r3, [r0, #0]
3401f20c:	680c      	ldr	r4, [r1, #0]
3401f20e:	2a00      	cmp	r2, #0
3401f210:	f840 4b04 	str.w	r4, [r0], #4
3401f214:	f841 3b04 	str.w	r3, [r1], #4
3401f218:	dcf6      	bgt.n	3401f208 <swapfunc+0x8>
3401f21a:	bd10      	pop	{r4, pc}
3401f21c:	4402      	add	r2, r0
3401f21e:	7803      	ldrb	r3, [r0, #0]
3401f220:	780c      	ldrb	r4, [r1, #0]
3401f222:	f800 4b01 	strb.w	r4, [r0], #1
3401f226:	f801 3b01 	strb.w	r3, [r1], #1
3401f22a:	1a13      	subs	r3, r2, r0
3401f22c:	2b00      	cmp	r3, #0
3401f22e:	dcf6      	bgt.n	3401f21e <swapfunc+0x1e>
3401f230:	e7f3      	b.n	3401f21a <swapfunc+0x1a>

3401f232 <med3.constprop.0>:
3401f232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3401f234:	460f      	mov	r7, r1
3401f236:	4616      	mov	r6, r2
3401f238:	4604      	mov	r4, r0
3401f23a:	461d      	mov	r5, r3
3401f23c:	4798      	blx	r3
3401f23e:	2800      	cmp	r0, #0
3401f240:	4631      	mov	r1, r6
3401f242:	4638      	mov	r0, r7
3401f244:	da0c      	bge.n	3401f260 <med3.constprop.0+0x2e>
3401f246:	47a8      	blx	r5
3401f248:	2800      	cmp	r0, #0
3401f24a:	da02      	bge.n	3401f252 <med3.constprop.0+0x20>
3401f24c:	463c      	mov	r4, r7
3401f24e:	4620      	mov	r0, r4
3401f250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3401f252:	4631      	mov	r1, r6
3401f254:	4620      	mov	r0, r4
3401f256:	47a8      	blx	r5
3401f258:	2800      	cmp	r0, #0
3401f25a:	daf8      	bge.n	3401f24e <med3.constprop.0+0x1c>
3401f25c:	4634      	mov	r4, r6
3401f25e:	e7f6      	b.n	3401f24e <med3.constprop.0+0x1c>
3401f260:	47a8      	blx	r5
3401f262:	2800      	cmp	r0, #0
3401f264:	dcf2      	bgt.n	3401f24c <med3.constprop.0+0x1a>
3401f266:	4631      	mov	r1, r6
3401f268:	4620      	mov	r0, r4
3401f26a:	47a8      	blx	r5
3401f26c:	2800      	cmp	r0, #0
3401f26e:	daf5      	bge.n	3401f25c <med3.constprop.0+0x2a>
3401f270:	e7ed      	b.n	3401f24e <med3.constprop.0+0x1c>

3401f272 <qsort>:
3401f272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401f276:	b095      	sub	sp, #84	@ 0x54
3401f278:	4607      	mov	r7, r0
3401f27a:	4615      	mov	r5, r2
3401f27c:	9300      	str	r3, [sp, #0]
3401f27e:	ea40 0302 	orr.w	r3, r0, r2
3401f282:	079b      	lsls	r3, r3, #30
3401f284:	d119      	bne.n	3401f2ba <qsort+0x48>
3401f286:	f1b2 0804 	subs.w	r8, r2, #4
3401f28a:	bf18      	it	ne
3401f28c:	f04f 0801 	movne.w	r8, #1
3401f290:	2300      	movs	r3, #0
3401f292:	9301      	str	r3, [sp, #4]
3401f294:	fb05 f401 	mul.w	r4, r5, r1
3401f298:	2906      	cmp	r1, #6
3401f29a:	eb07 0b05 	add.w	fp, r7, r5
3401f29e:	eb07 0304 	add.w	r3, r7, r4
3401f2a2:	9302      	str	r3, [sp, #8]
3401f2a4:	d828      	bhi.n	3401f2f8 <qsort+0x86>
3401f2a6:	9b02      	ldr	r3, [sp, #8]
3401f2a8:	459b      	cmp	fp, r3
3401f2aa:	d310      	bcc.n	3401f2ce <qsort+0x5c>
3401f2ac:	9b01      	ldr	r3, [sp, #4]
3401f2ae:	2b00      	cmp	r3, #0
3401f2b0:	f040 8117 	bne.w	3401f4e2 <qsort+0x270>
3401f2b4:	b015      	add	sp, #84	@ 0x54
3401f2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401f2ba:	f04f 0802 	mov.w	r8, #2
3401f2be:	e7e7      	b.n	3401f290 <qsort+0x1e>
3401f2c0:	4643      	mov	r3, r8
3401f2c2:	462a      	mov	r2, r5
3401f2c4:	4631      	mov	r1, r6
3401f2c6:	4620      	mov	r0, r4
3401f2c8:	f7ff ff9a 	bl	3401f200 <swapfunc>
3401f2cc:	e00f      	b.n	3401f2ee <qsort+0x7c>
3401f2ce:	465c      	mov	r4, fp
3401f2d0:	e00e      	b.n	3401f2f0 <qsort+0x7e>
3401f2d2:	1b66      	subs	r6, r4, r5
3401f2d4:	4621      	mov	r1, r4
3401f2d6:	9b00      	ldr	r3, [sp, #0]
3401f2d8:	4630      	mov	r0, r6
3401f2da:	4798      	blx	r3
3401f2dc:	2800      	cmp	r0, #0
3401f2de:	dd09      	ble.n	3401f2f4 <qsort+0x82>
3401f2e0:	f1b8 0f00 	cmp.w	r8, #0
3401f2e4:	d1ec      	bne.n	3401f2c0 <qsort+0x4e>
3401f2e6:	6823      	ldr	r3, [r4, #0]
3401f2e8:	6832      	ldr	r2, [r6, #0]
3401f2ea:	6022      	str	r2, [r4, #0]
3401f2ec:	6033      	str	r3, [r6, #0]
3401f2ee:	4634      	mov	r4, r6
3401f2f0:	42a7      	cmp	r7, r4
3401f2f2:	d3ee      	bcc.n	3401f2d2 <qsort+0x60>
3401f2f4:	44ab      	add	fp, r5
3401f2f6:	e7d6      	b.n	3401f2a6 <qsort+0x34>
3401f2f8:	ea4f 0951 	mov.w	r9, r1, lsr #1
3401f2fc:	1b64      	subs	r4, r4, r5
3401f2fe:	2907      	cmp	r1, #7
3401f300:	fb05 7909 	mla	r9, r5, r9, r7
3401f304:	443c      	add	r4, r7
3401f306:	d021      	beq.n	3401f34c <qsort+0xda>
3401f308:	2928      	cmp	r1, #40	@ 0x28
3401f30a:	d944      	bls.n	3401f396 <qsort+0x124>
3401f30c:	08ce      	lsrs	r6, r1, #3
3401f30e:	9b00      	ldr	r3, [sp, #0]
3401f310:	4638      	mov	r0, r7
3401f312:	436e      	muls	r6, r5
3401f314:	eb07 0246 	add.w	r2, r7, r6, lsl #1
3401f318:	19b9      	adds	r1, r7, r6
3401f31a:	f7ff ff8a 	bl	3401f232 <med3.constprop.0>
3401f31e:	4649      	mov	r1, r9
3401f320:	eb09 0206 	add.w	r2, r9, r6
3401f324:	9b00      	ldr	r3, [sp, #0]
3401f326:	4682      	mov	sl, r0
3401f328:	1b88      	subs	r0, r1, r6
3401f32a:	f7ff ff82 	bl	3401f232 <med3.constprop.0>
3401f32e:	4622      	mov	r2, r4
3401f330:	4681      	mov	r9, r0
3401f332:	9b00      	ldr	r3, [sp, #0]
3401f334:	1ba1      	subs	r1, r4, r6
3401f336:	eba4 0046 	sub.w	r0, r4, r6, lsl #1
3401f33a:	f7ff ff7a 	bl	3401f232 <med3.constprop.0>
3401f33e:	4602      	mov	r2, r0
3401f340:	4649      	mov	r1, r9
3401f342:	9b00      	ldr	r3, [sp, #0]
3401f344:	4650      	mov	r0, sl
3401f346:	f7ff ff74 	bl	3401f232 <med3.constprop.0>
3401f34a:	4681      	mov	r9, r0
3401f34c:	f1b8 0f00 	cmp.w	r8, #0
3401f350:	d124      	bne.n	3401f39c <qsort+0x12a>
3401f352:	683b      	ldr	r3, [r7, #0]
3401f354:	f8d9 2000 	ldr.w	r2, [r9]
3401f358:	603a      	str	r2, [r7, #0]
3401f35a:	f8c9 3000 	str.w	r3, [r9]
3401f35e:	46d9      	mov	r9, fp
3401f360:	46a2      	mov	sl, r4
3401f362:	465e      	mov	r6, fp
3401f364:	2300      	movs	r3, #0
3401f366:	45a1      	cmp	r9, r4
3401f368:	d836      	bhi.n	3401f3d8 <qsort+0x166>
3401f36a:	9303      	str	r3, [sp, #12]
3401f36c:	4639      	mov	r1, r7
3401f36e:	9b00      	ldr	r3, [sp, #0]
3401f370:	4648      	mov	r0, r9
3401f372:	4798      	blx	r3
3401f374:	2800      	cmp	r0, #0
3401f376:	9b03      	ldr	r3, [sp, #12]
3401f378:	dc2c      	bgt.n	3401f3d4 <qsort+0x162>
3401f37a:	d10a      	bne.n	3401f392 <qsort+0x120>
3401f37c:	f1b8 0f00 	cmp.w	r8, #0
3401f380:	d113      	bne.n	3401f3aa <qsort+0x138>
3401f382:	6833      	ldr	r3, [r6, #0]
3401f384:	f8d9 2000 	ldr.w	r2, [r9]
3401f388:	6032      	str	r2, [r6, #0]
3401f38a:	f8c9 3000 	str.w	r3, [r9]
3401f38e:	442e      	add	r6, r5
3401f390:	2301      	movs	r3, #1
3401f392:	44a9      	add	r9, r5
3401f394:	e7e7      	b.n	3401f366 <qsort+0xf4>
3401f396:	4622      	mov	r2, r4
3401f398:	46ba      	mov	sl, r7
3401f39a:	e7d1      	b.n	3401f340 <qsort+0xce>
3401f39c:	4643      	mov	r3, r8
3401f39e:	462a      	mov	r2, r5
3401f3a0:	4649      	mov	r1, r9
3401f3a2:	4638      	mov	r0, r7
3401f3a4:	f7ff ff2c 	bl	3401f200 <swapfunc>
3401f3a8:	e7d9      	b.n	3401f35e <qsort+0xec>
3401f3aa:	4643      	mov	r3, r8
3401f3ac:	462a      	mov	r2, r5
3401f3ae:	4649      	mov	r1, r9
3401f3b0:	4630      	mov	r0, r6
3401f3b2:	f7ff ff25 	bl	3401f200 <swapfunc>
3401f3b6:	e7ea      	b.n	3401f38e <qsort+0x11c>
3401f3b8:	d10b      	bne.n	3401f3d2 <qsort+0x160>
3401f3ba:	f1b8 0f00 	cmp.w	r8, #0
3401f3be:	d113      	bne.n	3401f3e8 <qsort+0x176>
3401f3c0:	6823      	ldr	r3, [r4, #0]
3401f3c2:	f8da 2000 	ldr.w	r2, [sl]
3401f3c6:	6022      	str	r2, [r4, #0]
3401f3c8:	f8ca 3000 	str.w	r3, [sl]
3401f3cc:	ebaa 0a05 	sub.w	sl, sl, r5
3401f3d0:	2301      	movs	r3, #1
3401f3d2:	1b64      	subs	r4, r4, r5
3401f3d4:	45a1      	cmp	r9, r4
3401f3d6:	d90e      	bls.n	3401f3f6 <qsort+0x184>
3401f3d8:	2b00      	cmp	r3, #0
3401f3da:	d140      	bne.n	3401f45e <qsort+0x1ec>
3401f3dc:	9b02      	ldr	r3, [sp, #8]
3401f3de:	459b      	cmp	fp, r3
3401f3e0:	f4bf af64 	bcs.w	3401f2ac <qsort+0x3a>
3401f3e4:	465c      	mov	r4, fp
3401f3e6:	e036      	b.n	3401f456 <qsort+0x1e4>
3401f3e8:	4643      	mov	r3, r8
3401f3ea:	462a      	mov	r2, r5
3401f3ec:	4651      	mov	r1, sl
3401f3ee:	4620      	mov	r0, r4
3401f3f0:	f7ff ff06 	bl	3401f200 <swapfunc>
3401f3f4:	e7ea      	b.n	3401f3cc <qsort+0x15a>
3401f3f6:	9303      	str	r3, [sp, #12]
3401f3f8:	4639      	mov	r1, r7
3401f3fa:	9b00      	ldr	r3, [sp, #0]
3401f3fc:	4620      	mov	r0, r4
3401f3fe:	4798      	blx	r3
3401f400:	2800      	cmp	r0, #0
3401f402:	9b03      	ldr	r3, [sp, #12]
3401f404:	dad8      	bge.n	3401f3b8 <qsort+0x146>
3401f406:	f1b8 0f00 	cmp.w	r8, #0
3401f40a:	d107      	bne.n	3401f41c <qsort+0x1aa>
3401f40c:	f8d9 3000 	ldr.w	r3, [r9]
3401f410:	6822      	ldr	r2, [r4, #0]
3401f412:	f8c9 2000 	str.w	r2, [r9]
3401f416:	6023      	str	r3, [r4, #0]
3401f418:	1b64      	subs	r4, r4, r5
3401f41a:	e7b9      	b.n	3401f390 <qsort+0x11e>
3401f41c:	4643      	mov	r3, r8
3401f41e:	462a      	mov	r2, r5
3401f420:	4621      	mov	r1, r4
3401f422:	4648      	mov	r0, r9
3401f424:	f7ff feec 	bl	3401f200 <swapfunc>
3401f428:	e7f6      	b.n	3401f418 <qsort+0x1a6>
3401f42a:	4643      	mov	r3, r8
3401f42c:	462a      	mov	r2, r5
3401f42e:	4631      	mov	r1, r6
3401f430:	4620      	mov	r0, r4
3401f432:	f7ff fee5 	bl	3401f200 <swapfunc>
3401f436:	e00d      	b.n	3401f454 <qsort+0x1e2>
3401f438:	1b66      	subs	r6, r4, r5
3401f43a:	4621      	mov	r1, r4
3401f43c:	9b00      	ldr	r3, [sp, #0]
3401f43e:	4630      	mov	r0, r6
3401f440:	4798      	blx	r3
3401f442:	2800      	cmp	r0, #0
3401f444:	dd09      	ble.n	3401f45a <qsort+0x1e8>
3401f446:	f1b8 0f00 	cmp.w	r8, #0
3401f44a:	d1ee      	bne.n	3401f42a <qsort+0x1b8>
3401f44c:	6823      	ldr	r3, [r4, #0]
3401f44e:	6832      	ldr	r2, [r6, #0]
3401f450:	6022      	str	r2, [r4, #0]
3401f452:	6033      	str	r3, [r6, #0]
3401f454:	4634      	mov	r4, r6
3401f456:	42a7      	cmp	r7, r4
3401f458:	d3ee      	bcc.n	3401f438 <qsort+0x1c6>
3401f45a:	44ab      	add	fp, r5
3401f45c:	e7be      	b.n	3401f3dc <qsort+0x16a>
3401f45e:	eba9 0b06 	sub.w	fp, r9, r6
3401f462:	1bf2      	subs	r2, r6, r7
3401f464:	455a      	cmp	r2, fp
3401f466:	bfa8      	it	ge
3401f468:	465a      	movge	r2, fp
3401f46a:	b12a      	cbz	r2, 3401f478 <qsort+0x206>
3401f46c:	4643      	mov	r3, r8
3401f46e:	eba9 0102 	sub.w	r1, r9, r2
3401f472:	4638      	mov	r0, r7
3401f474:	f7ff fec4 	bl	3401f200 <swapfunc>
3401f478:	9b02      	ldr	r3, [sp, #8]
3401f47a:	ebaa 0404 	sub.w	r4, sl, r4
3401f47e:	eba3 020a 	sub.w	r2, r3, sl
3401f482:	1b52      	subs	r2, r2, r5
3401f484:	42a2      	cmp	r2, r4
3401f486:	bf28      	it	cs
3401f488:	4622      	movcs	r2, r4
3401f48a:	b12a      	cbz	r2, 3401f498 <qsort+0x226>
3401f48c:	9902      	ldr	r1, [sp, #8]
3401f48e:	4643      	mov	r3, r8
3401f490:	4648      	mov	r0, r9
3401f492:	1a89      	subs	r1, r1, r2
3401f494:	f7ff feb4 	bl	3401f200 <swapfunc>
3401f498:	9b02      	ldr	r3, [sp, #8]
3401f49a:	455c      	cmp	r4, fp
3401f49c:	eba3 0604 	sub.w	r6, r3, r4
3401f4a0:	d805      	bhi.n	3401f4ae <qsort+0x23c>
3401f4a2:	4623      	mov	r3, r4
3401f4a4:	465c      	mov	r4, fp
3401f4a6:	469b      	mov	fp, r3
3401f4a8:	4633      	mov	r3, r6
3401f4aa:	463e      	mov	r6, r7
3401f4ac:	461f      	mov	r7, r3
3401f4ae:	45ab      	cmp	fp, r5
3401f4b0:	d920      	bls.n	3401f4f4 <qsort+0x282>
3401f4b2:	9b01      	ldr	r3, [sp, #4]
3401f4b4:	2b07      	cmp	r3, #7
3401f4b6:	fbbb f1f5 	udiv	r1, fp, r5
3401f4ba:	d80b      	bhi.n	3401f4d4 <qsort+0x262>
3401f4bc:	aa14      	add	r2, sp, #80	@ 0x50
3401f4be:	fbb4 f4f5 	udiv	r4, r4, r5
3401f4c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
3401f4c6:	f843 6c40 	str.w	r6, [r3, #-64]
3401f4ca:	f843 4c3c 	str.w	r4, [r3, #-60]
3401f4ce:	9b01      	ldr	r3, [sp, #4]
3401f4d0:	3301      	adds	r3, #1
3401f4d2:	e6de      	b.n	3401f292 <qsort+0x20>
3401f4d4:	9b00      	ldr	r3, [sp, #0]
3401f4d6:	462a      	mov	r2, r5
3401f4d8:	4638      	mov	r0, r7
3401f4da:	f7ff feca 	bl	3401f272 <qsort>
3401f4de:	42ac      	cmp	r4, r5
3401f4e0:	d80b      	bhi.n	3401f4fa <qsort+0x288>
3401f4e2:	9b01      	ldr	r3, [sp, #4]
3401f4e4:	aa14      	add	r2, sp, #80	@ 0x50
3401f4e6:	3b01      	subs	r3, #1
3401f4e8:	9301      	str	r3, [sp, #4]
3401f4ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
3401f4ee:	e953 7110 	ldrd	r7, r1, [r3, #-64]	@ 0x40
3401f4f2:	e6cf      	b.n	3401f294 <qsort+0x22>
3401f4f4:	42ac      	cmp	r4, r5
3401f4f6:	f67f aed9 	bls.w	3401f2ac <qsort+0x3a>
3401f4fa:	4637      	mov	r7, r6
3401f4fc:	fbb4 f1f5 	udiv	r1, r4, r5
3401f500:	e6c8      	b.n	3401f294 <qsort+0x22>

3401f502 <__cvt>:
3401f502:	b5f0      	push	{r4, r5, r6, r7, lr}
3401f504:	ed2d 8b02 	vpush	{d8}
3401f508:	eeb0 8b40 	vmov.f64	d8, d0
3401f50c:	b085      	sub	sp, #20
3401f50e:	4617      	mov	r7, r2
3401f510:	460c      	mov	r4, r1
3401f512:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
3401f514:	ee18 2a90 	vmov	r2, s17
3401f518:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401f51a:	f025 0520 	bic.w	r5, r5, #32
3401f51e:	2a00      	cmp	r2, #0
3401f520:	bfb6      	itet	lt
3401f522:	222d      	movlt	r2, #45	@ 0x2d
3401f524:	2200      	movge	r2, #0
3401f526:	eeb1 8b40 	vneglt.f64	d8, d0
3401f52a:	2d46      	cmp	r5, #70	@ 0x46
3401f52c:	701a      	strb	r2, [r3, #0]
3401f52e:	d004      	beq.n	3401f53a <__cvt+0x38>
3401f530:	2d45      	cmp	r5, #69	@ 0x45
3401f532:	d100      	bne.n	3401f536 <__cvt+0x34>
3401f534:	3401      	adds	r4, #1
3401f536:	2102      	movs	r1, #2
3401f538:	e000      	b.n	3401f53c <__cvt+0x3a>
3401f53a:	2103      	movs	r1, #3
3401f53c:	ab03      	add	r3, sp, #12
3401f53e:	eeb0 0b48 	vmov.f64	d0, d8
3401f542:	4622      	mov	r2, r4
3401f544:	9301      	str	r3, [sp, #4]
3401f546:	ab02      	add	r3, sp, #8
3401f548:	9300      	str	r3, [sp, #0]
3401f54a:	4633      	mov	r3, r6
3401f54c:	f001 f9ac 	bl	340208a8 <_dtoa_r>
3401f550:	2d47      	cmp	r5, #71	@ 0x47
3401f552:	d114      	bne.n	3401f57e <__cvt+0x7c>
3401f554:	07fb      	lsls	r3, r7, #31
3401f556:	d50a      	bpl.n	3401f56e <__cvt+0x6c>
3401f558:	1902      	adds	r2, r0, r4
3401f55a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401f55e:	2130      	movs	r1, #48	@ 0x30
3401f560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f564:	bf08      	it	eq
3401f566:	9203      	streq	r2, [sp, #12]
3401f568:	9b03      	ldr	r3, [sp, #12]
3401f56a:	4293      	cmp	r3, r2
3401f56c:	d319      	bcc.n	3401f5a2 <__cvt+0xa0>
3401f56e:	9b03      	ldr	r3, [sp, #12]
3401f570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3401f572:	1a1b      	subs	r3, r3, r0
3401f574:	6013      	str	r3, [r2, #0]
3401f576:	b005      	add	sp, #20
3401f578:	ecbd 8b02 	vpop	{d8}
3401f57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401f57e:	2d46      	cmp	r5, #70	@ 0x46
3401f580:	eb00 0204 	add.w	r2, r0, r4
3401f584:	d1e9      	bne.n	3401f55a <__cvt+0x58>
3401f586:	7803      	ldrb	r3, [r0, #0]
3401f588:	2b30      	cmp	r3, #48	@ 0x30
3401f58a:	d107      	bne.n	3401f59c <__cvt+0x9a>
3401f58c:	eeb5 8b40 	vcmp.f64	d8, #0.0
3401f590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f594:	bf1c      	itt	ne
3401f596:	f1c4 0401 	rsbne	r4, r4, #1
3401f59a:	6034      	strne	r4, [r6, #0]
3401f59c:	6833      	ldr	r3, [r6, #0]
3401f59e:	441a      	add	r2, r3
3401f5a0:	e7db      	b.n	3401f55a <__cvt+0x58>
3401f5a2:	1c5c      	adds	r4, r3, #1
3401f5a4:	9403      	str	r4, [sp, #12]
3401f5a6:	7019      	strb	r1, [r3, #0]
3401f5a8:	e7de      	b.n	3401f568 <__cvt+0x66>

3401f5aa <__exponent>:
3401f5aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3401f5ac:	2900      	cmp	r1, #0
3401f5ae:	7002      	strb	r2, [r0, #0]
3401f5b0:	bfba      	itte	lt
3401f5b2:	4249      	neglt	r1, r1
3401f5b4:	232d      	movlt	r3, #45	@ 0x2d
3401f5b6:	232b      	movge	r3, #43	@ 0x2b
3401f5b8:	2909      	cmp	r1, #9
3401f5ba:	7043      	strb	r3, [r0, #1]
3401f5bc:	dd28      	ble.n	3401f610 <__exponent+0x66>
3401f5be:	f10d 0307 	add.w	r3, sp, #7
3401f5c2:	270a      	movs	r7, #10
3401f5c4:	461d      	mov	r5, r3
3401f5c6:	461a      	mov	r2, r3
3401f5c8:	3b01      	subs	r3, #1
3401f5ca:	fbb1 f6f7 	udiv	r6, r1, r7
3401f5ce:	fb07 1416 	mls	r4, r7, r6, r1
3401f5d2:	3430      	adds	r4, #48	@ 0x30
3401f5d4:	f802 4c01 	strb.w	r4, [r2, #-1]
3401f5d8:	460c      	mov	r4, r1
3401f5da:	4631      	mov	r1, r6
3401f5dc:	2c63      	cmp	r4, #99	@ 0x63
3401f5de:	dcf2      	bgt.n	3401f5c6 <__exponent+0x1c>
3401f5e0:	3130      	adds	r1, #48	@ 0x30
3401f5e2:	1e94      	subs	r4, r2, #2
3401f5e4:	f803 1c01 	strb.w	r1, [r3, #-1]
3401f5e8:	1c41      	adds	r1, r0, #1
3401f5ea:	4623      	mov	r3, r4
3401f5ec:	42ab      	cmp	r3, r5
3401f5ee:	d30a      	bcc.n	3401f606 <__exponent+0x5c>
3401f5f0:	f10d 0309 	add.w	r3, sp, #9
3401f5f4:	1a9b      	subs	r3, r3, r2
3401f5f6:	42ac      	cmp	r4, r5
3401f5f8:	bf88      	it	hi
3401f5fa:	2300      	movhi	r3, #0
3401f5fc:	3302      	adds	r3, #2
3401f5fe:	4403      	add	r3, r0
3401f600:	1a18      	subs	r0, r3, r0
3401f602:	b003      	add	sp, #12
3401f604:	bdf0      	pop	{r4, r5, r6, r7, pc}
3401f606:	f813 6b01 	ldrb.w	r6, [r3], #1
3401f60a:	f801 6f01 	strb.w	r6, [r1, #1]!
3401f60e:	e7ed      	b.n	3401f5ec <__exponent+0x42>
3401f610:	2330      	movs	r3, #48	@ 0x30
3401f612:	3130      	adds	r1, #48	@ 0x30
3401f614:	7083      	strb	r3, [r0, #2]
3401f616:	1d03      	adds	r3, r0, #4
3401f618:	70c1      	strb	r1, [r0, #3]
3401f61a:	e7f1      	b.n	3401f600 <__exponent+0x56>
3401f61c:	0000      	movs	r0, r0
	...

3401f620 <_printf_float>:
3401f620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3401f624:	b08d      	sub	sp, #52	@ 0x34
3401f626:	460c      	mov	r4, r1
3401f628:	4616      	mov	r6, r2
3401f62a:	461f      	mov	r7, r3
3401f62c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
3401f630:	4605      	mov	r5, r0
3401f632:	f001 f80b 	bl	3402064c <_localeconv_r>
3401f636:	f8d0 b000 	ldr.w	fp, [r0]
3401f63a:	4658      	mov	r0, fp
3401f63c:	f7e1 f8a8 	bl	34000790 <strlen>
3401f640:	2300      	movs	r3, #0
3401f642:	f894 9018 	ldrb.w	r9, [r4, #24]
3401f646:	930a      	str	r3, [sp, #40]	@ 0x28
3401f648:	f8d8 3000 	ldr.w	r3, [r8]
3401f64c:	6822      	ldr	r2, [r4, #0]
3401f64e:	3307      	adds	r3, #7
3401f650:	9005      	str	r0, [sp, #20]
3401f652:	f023 0307 	bic.w	r3, r3, #7
3401f656:	f103 0108 	add.w	r1, r3, #8
3401f65a:	f8c8 1000 	str.w	r1, [r8]
3401f65e:	ed93 0b00 	vldr	d0, [r3]
3401f662:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 3401f8c0 <_printf_float+0x2a0>
3401f666:	eeb0 7bc0 	vabs.f64	d7, d0
3401f66a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
3401f66e:	eeb4 7b46 	vcmp.f64	d7, d6
3401f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f676:	dd24      	ble.n	3401f6c2 <_printf_float+0xa2>
3401f678:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
3401f67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f680:	d502      	bpl.n	3401f688 <_printf_float+0x68>
3401f682:	232d      	movs	r3, #45	@ 0x2d
3401f684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401f688:	498f      	ldr	r1, [pc, #572]	@ (3401f8c8 <_printf_float+0x2a8>)
3401f68a:	4b90      	ldr	r3, [pc, #576]	@ (3401f8cc <_printf_float+0x2ac>)
3401f68c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
3401f690:	bf8c      	ite	hi
3401f692:	4688      	movhi	r8, r1
3401f694:	4698      	movls	r8, r3
3401f696:	f022 0204 	bic.w	r2, r2, #4
3401f69a:	2303      	movs	r3, #3
3401f69c:	f04f 0a00 	mov.w	sl, #0
3401f6a0:	6022      	str	r2, [r4, #0]
3401f6a2:	6123      	str	r3, [r4, #16]
3401f6a4:	4633      	mov	r3, r6
3401f6a6:	aa0b      	add	r2, sp, #44	@ 0x2c
3401f6a8:	4621      	mov	r1, r4
3401f6aa:	4628      	mov	r0, r5
3401f6ac:	9700      	str	r7, [sp, #0]
3401f6ae:	f000 f9d1 	bl	3401fa54 <_printf_common>
3401f6b2:	3001      	adds	r0, #1
3401f6b4:	f040 8089 	bne.w	3401f7ca <_printf_float+0x1aa>
3401f6b8:	f04f 30ff 	mov.w	r0, #4294967295
3401f6bc:	b00d      	add	sp, #52	@ 0x34
3401f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3401f6c2:	eeb4 0b40 	vcmp.f64	d0, d0
3401f6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f6ca:	d709      	bvc.n	3401f6e0 <_printf_float+0xc0>
3401f6cc:	ee10 3a90 	vmov	r3, s1
3401f6d0:	497f      	ldr	r1, [pc, #508]	@ (3401f8d0 <_printf_float+0x2b0>)
3401f6d2:	2b00      	cmp	r3, #0
3401f6d4:	bfbc      	itt	lt
3401f6d6:	232d      	movlt	r3, #45	@ 0x2d
3401f6d8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
3401f6dc:	4b7d      	ldr	r3, [pc, #500]	@ (3401f8d4 <_printf_float+0x2b4>)
3401f6de:	e7d5      	b.n	3401f68c <_printf_float+0x6c>
3401f6e0:	6863      	ldr	r3, [r4, #4]
3401f6e2:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
3401f6e6:	1c59      	adds	r1, r3, #1
3401f6e8:	d139      	bne.n	3401f75e <_printf_float+0x13e>
3401f6ea:	2306      	movs	r3, #6
3401f6ec:	6063      	str	r3, [r4, #4]
3401f6ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
3401f6f2:	2300      	movs	r3, #0
3401f6f4:	4628      	mov	r0, r5
3401f6f6:	6022      	str	r2, [r4, #0]
3401f6f8:	9303      	str	r3, [sp, #12]
3401f6fa:	ab0a      	add	r3, sp, #40	@ 0x28
3401f6fc:	e9cd 9301 	strd	r9, r3, [sp, #4]
3401f700:	ab09      	add	r3, sp, #36	@ 0x24
3401f702:	9300      	str	r3, [sp, #0]
3401f704:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
3401f708:	6861      	ldr	r1, [r4, #4]
3401f70a:	f7ff fefa 	bl	3401f502 <__cvt>
3401f70e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401f712:	4680      	mov	r8, r0
3401f714:	9909      	ldr	r1, [sp, #36]	@ 0x24
3401f716:	d129      	bne.n	3401f76c <_printf_float+0x14c>
3401f718:	1cc8      	adds	r0, r1, #3
3401f71a:	db02      	blt.n	3401f722 <_printf_float+0x102>
3401f71c:	6863      	ldr	r3, [r4, #4]
3401f71e:	4299      	cmp	r1, r3
3401f720:	dd41      	ble.n	3401f7a6 <_printf_float+0x186>
3401f722:	f1a9 0902 	sub.w	r9, r9, #2
3401f726:	fa5f f989 	uxtb.w	r9, r9
3401f72a:	3901      	subs	r1, #1
3401f72c:	464a      	mov	r2, r9
3401f72e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
3401f732:	9109      	str	r1, [sp, #36]	@ 0x24
3401f734:	f7ff ff39 	bl	3401f5aa <__exponent>
3401f738:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3401f73a:	4682      	mov	sl, r0
3401f73c:	1813      	adds	r3, r2, r0
3401f73e:	2a01      	cmp	r2, #1
3401f740:	6123      	str	r3, [r4, #16]
3401f742:	dc02      	bgt.n	3401f74a <_printf_float+0x12a>
3401f744:	6822      	ldr	r2, [r4, #0]
3401f746:	07d2      	lsls	r2, r2, #31
3401f748:	d501      	bpl.n	3401f74e <_printf_float+0x12e>
3401f74a:	3301      	adds	r3, #1
3401f74c:	6123      	str	r3, [r4, #16]
3401f74e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
3401f752:	2b00      	cmp	r3, #0
3401f754:	d0a6      	beq.n	3401f6a4 <_printf_float+0x84>
3401f756:	232d      	movs	r3, #45	@ 0x2d
3401f758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401f75c:	e7a2      	b.n	3401f6a4 <_printf_float+0x84>
3401f75e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
3401f762:	d1c4      	bne.n	3401f6ee <_printf_float+0xce>
3401f764:	2b00      	cmp	r3, #0
3401f766:	d1c2      	bne.n	3401f6ee <_printf_float+0xce>
3401f768:	2301      	movs	r3, #1
3401f76a:	e7bf      	b.n	3401f6ec <_printf_float+0xcc>
3401f76c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401f770:	d9db      	bls.n	3401f72a <_printf_float+0x10a>
3401f772:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
3401f776:	d118      	bne.n	3401f7aa <_printf_float+0x18a>
3401f778:	2900      	cmp	r1, #0
3401f77a:	6863      	ldr	r3, [r4, #4]
3401f77c:	dd0b      	ble.n	3401f796 <_printf_float+0x176>
3401f77e:	6121      	str	r1, [r4, #16]
3401f780:	b913      	cbnz	r3, 3401f788 <_printf_float+0x168>
3401f782:	6822      	ldr	r2, [r4, #0]
3401f784:	07d0      	lsls	r0, r2, #31
3401f786:	d502      	bpl.n	3401f78e <_printf_float+0x16e>
3401f788:	3301      	adds	r3, #1
3401f78a:	440b      	add	r3, r1
3401f78c:	6123      	str	r3, [r4, #16]
3401f78e:	f04f 0a00 	mov.w	sl, #0
3401f792:	65a1      	str	r1, [r4, #88]	@ 0x58
3401f794:	e7db      	b.n	3401f74e <_printf_float+0x12e>
3401f796:	b913      	cbnz	r3, 3401f79e <_printf_float+0x17e>
3401f798:	6822      	ldr	r2, [r4, #0]
3401f79a:	07d2      	lsls	r2, r2, #31
3401f79c:	d501      	bpl.n	3401f7a2 <_printf_float+0x182>
3401f79e:	3302      	adds	r3, #2
3401f7a0:	e7f4      	b.n	3401f78c <_printf_float+0x16c>
3401f7a2:	2301      	movs	r3, #1
3401f7a4:	e7f2      	b.n	3401f78c <_printf_float+0x16c>
3401f7a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
3401f7aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3401f7ac:	4299      	cmp	r1, r3
3401f7ae:	db05      	blt.n	3401f7bc <_printf_float+0x19c>
3401f7b0:	6823      	ldr	r3, [r4, #0]
3401f7b2:	6121      	str	r1, [r4, #16]
3401f7b4:	07d8      	lsls	r0, r3, #31
3401f7b6:	d5ea      	bpl.n	3401f78e <_printf_float+0x16e>
3401f7b8:	1c4b      	adds	r3, r1, #1
3401f7ba:	e7e7      	b.n	3401f78c <_printf_float+0x16c>
3401f7bc:	2900      	cmp	r1, #0
3401f7be:	bfd4      	ite	le
3401f7c0:	f1c1 0202 	rsble	r2, r1, #2
3401f7c4:	2201      	movgt	r2, #1
3401f7c6:	4413      	add	r3, r2
3401f7c8:	e7e0      	b.n	3401f78c <_printf_float+0x16c>
3401f7ca:	6823      	ldr	r3, [r4, #0]
3401f7cc:	055a      	lsls	r2, r3, #21
3401f7ce:	d407      	bmi.n	3401f7e0 <_printf_float+0x1c0>
3401f7d0:	6923      	ldr	r3, [r4, #16]
3401f7d2:	4642      	mov	r2, r8
3401f7d4:	4631      	mov	r1, r6
3401f7d6:	4628      	mov	r0, r5
3401f7d8:	47b8      	blx	r7
3401f7da:	3001      	adds	r0, #1
3401f7dc:	d12a      	bne.n	3401f834 <_printf_float+0x214>
3401f7de:	e76b      	b.n	3401f6b8 <_printf_float+0x98>
3401f7e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
3401f7e4:	f240 80e0 	bls.w	3401f9a8 <_printf_float+0x388>
3401f7e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401f7ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f7f4:	d133      	bne.n	3401f85e <_printf_float+0x23e>
3401f7f6:	2301      	movs	r3, #1
3401f7f8:	4a37      	ldr	r2, [pc, #220]	@ (3401f8d8 <_printf_float+0x2b8>)
3401f7fa:	4631      	mov	r1, r6
3401f7fc:	4628      	mov	r0, r5
3401f7fe:	47b8      	blx	r7
3401f800:	3001      	adds	r0, #1
3401f802:	f43f af59 	beq.w	3401f6b8 <_printf_float+0x98>
3401f806:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
3401f80a:	4543      	cmp	r3, r8
3401f80c:	db02      	blt.n	3401f814 <_printf_float+0x1f4>
3401f80e:	6823      	ldr	r3, [r4, #0]
3401f810:	07d8      	lsls	r0, r3, #31
3401f812:	d50f      	bpl.n	3401f834 <_printf_float+0x214>
3401f814:	9b05      	ldr	r3, [sp, #20]
3401f816:	465a      	mov	r2, fp
3401f818:	4631      	mov	r1, r6
3401f81a:	4628      	mov	r0, r5
3401f81c:	47b8      	blx	r7
3401f81e:	3001      	adds	r0, #1
3401f820:	f43f af4a 	beq.w	3401f6b8 <_printf_float+0x98>
3401f824:	f04f 0900 	mov.w	r9, #0
3401f828:	f108 38ff 	add.w	r8, r8, #4294967295
3401f82c:	f104 0a1a 	add.w	sl, r4, #26
3401f830:	45c8      	cmp	r8, r9
3401f832:	dc09      	bgt.n	3401f848 <_printf_float+0x228>
3401f834:	6823      	ldr	r3, [r4, #0]
3401f836:	079b      	lsls	r3, r3, #30
3401f838:	f100 8107 	bmi.w	3401fa4a <_printf_float+0x42a>
3401f83c:	68e0      	ldr	r0, [r4, #12]
3401f83e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3401f840:	4298      	cmp	r0, r3
3401f842:	bfb8      	it	lt
3401f844:	4618      	movlt	r0, r3
3401f846:	e739      	b.n	3401f6bc <_printf_float+0x9c>
3401f848:	2301      	movs	r3, #1
3401f84a:	4652      	mov	r2, sl
3401f84c:	4631      	mov	r1, r6
3401f84e:	4628      	mov	r0, r5
3401f850:	47b8      	blx	r7
3401f852:	3001      	adds	r0, #1
3401f854:	f43f af30 	beq.w	3401f6b8 <_printf_float+0x98>
3401f858:	f109 0901 	add.w	r9, r9, #1
3401f85c:	e7e8      	b.n	3401f830 <_printf_float+0x210>
3401f85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f860:	2b00      	cmp	r3, #0
3401f862:	dc3b      	bgt.n	3401f8dc <_printf_float+0x2bc>
3401f864:	2301      	movs	r3, #1
3401f866:	4a1c      	ldr	r2, [pc, #112]	@ (3401f8d8 <_printf_float+0x2b8>)
3401f868:	4631      	mov	r1, r6
3401f86a:	4628      	mov	r0, r5
3401f86c:	47b8      	blx	r7
3401f86e:	3001      	adds	r0, #1
3401f870:	f43f af22 	beq.w	3401f6b8 <_printf_float+0x98>
3401f874:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
3401f878:	ea59 0303 	orrs.w	r3, r9, r3
3401f87c:	d102      	bne.n	3401f884 <_printf_float+0x264>
3401f87e:	6823      	ldr	r3, [r4, #0]
3401f880:	07d9      	lsls	r1, r3, #31
3401f882:	d5d7      	bpl.n	3401f834 <_printf_float+0x214>
3401f884:	9b05      	ldr	r3, [sp, #20]
3401f886:	465a      	mov	r2, fp
3401f888:	4631      	mov	r1, r6
3401f88a:	4628      	mov	r0, r5
3401f88c:	47b8      	blx	r7
3401f88e:	3001      	adds	r0, #1
3401f890:	f43f af12 	beq.w	3401f6b8 <_printf_float+0x98>
3401f894:	f04f 0a00 	mov.w	sl, #0
3401f898:	f104 0b1a 	add.w	fp, r4, #26
3401f89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f89e:	425b      	negs	r3, r3
3401f8a0:	4553      	cmp	r3, sl
3401f8a2:	dc01      	bgt.n	3401f8a8 <_printf_float+0x288>
3401f8a4:	464b      	mov	r3, r9
3401f8a6:	e794      	b.n	3401f7d2 <_printf_float+0x1b2>
3401f8a8:	2301      	movs	r3, #1
3401f8aa:	465a      	mov	r2, fp
3401f8ac:	4631      	mov	r1, r6
3401f8ae:	4628      	mov	r0, r5
3401f8b0:	47b8      	blx	r7
3401f8b2:	3001      	adds	r0, #1
3401f8b4:	f43f af00 	beq.w	3401f6b8 <_printf_float+0x98>
3401f8b8:	f10a 0a01 	add.w	sl, sl, #1
3401f8bc:	e7ee      	b.n	3401f89c <_printf_float+0x27c>
3401f8be:	bf00      	nop
3401f8c0:	ffffffff 	.word	0xffffffff
3401f8c4:	7fefffff 	.word	0x7fefffff
3401f8c8:	3402c310 	.word	0x3402c310
3401f8cc:	3402c30c 	.word	0x3402c30c
3401f8d0:	3402c318 	.word	0x3402c318
3401f8d4:	3402c314 	.word	0x3402c314
3401f8d8:	34026d17 	.word	0x34026d17
3401f8dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401f8de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
3401f8e2:	4553      	cmp	r3, sl
3401f8e4:	bfa8      	it	ge
3401f8e6:	4653      	movge	r3, sl
3401f8e8:	2b00      	cmp	r3, #0
3401f8ea:	4699      	mov	r9, r3
3401f8ec:	dc37      	bgt.n	3401f95e <_printf_float+0x33e>
3401f8ee:	2300      	movs	r3, #0
3401f8f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401f8f4:	f104 021a 	add.w	r2, r4, #26
3401f8f8:	9307      	str	r3, [sp, #28]
3401f8fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
3401f8fc:	9907      	ldr	r1, [sp, #28]
3401f8fe:	9306      	str	r3, [sp, #24]
3401f900:	eba3 0309 	sub.w	r3, r3, r9
3401f904:	428b      	cmp	r3, r1
3401f906:	dc31      	bgt.n	3401f96c <_printf_float+0x34c>
3401f908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f90a:	459a      	cmp	sl, r3
3401f90c:	dc3b      	bgt.n	3401f986 <_printf_float+0x366>
3401f90e:	6823      	ldr	r3, [r4, #0]
3401f910:	07da      	lsls	r2, r3, #31
3401f912:	d438      	bmi.n	3401f986 <_printf_float+0x366>
3401f914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f916:	ebaa 0903 	sub.w	r9, sl, r3
3401f91a:	9b06      	ldr	r3, [sp, #24]
3401f91c:	ebaa 0303 	sub.w	r3, sl, r3
3401f920:	4599      	cmp	r9, r3
3401f922:	bfa8      	it	ge
3401f924:	4699      	movge	r9, r3
3401f926:	f1b9 0f00 	cmp.w	r9, #0
3401f92a:	dc34      	bgt.n	3401f996 <_printf_float+0x376>
3401f92c:	f04f 0800 	mov.w	r8, #0
3401f930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
3401f934:	f104 0b1a 	add.w	fp, r4, #26
3401f938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3401f93a:	ebaa 0303 	sub.w	r3, sl, r3
3401f93e:	eba3 0309 	sub.w	r3, r3, r9
3401f942:	4543      	cmp	r3, r8
3401f944:	f77f af76 	ble.w	3401f834 <_printf_float+0x214>
3401f948:	2301      	movs	r3, #1
3401f94a:	465a      	mov	r2, fp
3401f94c:	4631      	mov	r1, r6
3401f94e:	4628      	mov	r0, r5
3401f950:	47b8      	blx	r7
3401f952:	3001      	adds	r0, #1
3401f954:	f43f aeb0 	beq.w	3401f6b8 <_printf_float+0x98>
3401f958:	f108 0801 	add.w	r8, r8, #1
3401f95c:	e7ec      	b.n	3401f938 <_printf_float+0x318>
3401f95e:	4642      	mov	r2, r8
3401f960:	4631      	mov	r1, r6
3401f962:	4628      	mov	r0, r5
3401f964:	47b8      	blx	r7
3401f966:	3001      	adds	r0, #1
3401f968:	d1c1      	bne.n	3401f8ee <_printf_float+0x2ce>
3401f96a:	e6a5      	b.n	3401f6b8 <_printf_float+0x98>
3401f96c:	2301      	movs	r3, #1
3401f96e:	4631      	mov	r1, r6
3401f970:	4628      	mov	r0, r5
3401f972:	9206      	str	r2, [sp, #24]
3401f974:	47b8      	blx	r7
3401f976:	3001      	adds	r0, #1
3401f978:	f43f ae9e 	beq.w	3401f6b8 <_printf_float+0x98>
3401f97c:	9b07      	ldr	r3, [sp, #28]
3401f97e:	9a06      	ldr	r2, [sp, #24]
3401f980:	3301      	adds	r3, #1
3401f982:	9307      	str	r3, [sp, #28]
3401f984:	e7b9      	b.n	3401f8fa <_printf_float+0x2da>
3401f986:	9b05      	ldr	r3, [sp, #20]
3401f988:	465a      	mov	r2, fp
3401f98a:	4631      	mov	r1, r6
3401f98c:	4628      	mov	r0, r5
3401f98e:	47b8      	blx	r7
3401f990:	3001      	adds	r0, #1
3401f992:	d1bf      	bne.n	3401f914 <_printf_float+0x2f4>
3401f994:	e690      	b.n	3401f6b8 <_printf_float+0x98>
3401f996:	9a06      	ldr	r2, [sp, #24]
3401f998:	464b      	mov	r3, r9
3401f99a:	4631      	mov	r1, r6
3401f99c:	4628      	mov	r0, r5
3401f99e:	4442      	add	r2, r8
3401f9a0:	47b8      	blx	r7
3401f9a2:	3001      	adds	r0, #1
3401f9a4:	d1c2      	bne.n	3401f92c <_printf_float+0x30c>
3401f9a6:	e687      	b.n	3401f6b8 <_printf_float+0x98>
3401f9a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
3401f9ac:	f1b9 0f01 	cmp.w	r9, #1
3401f9b0:	dc01      	bgt.n	3401f9b6 <_printf_float+0x396>
3401f9b2:	07db      	lsls	r3, r3, #31
3401f9b4:	d536      	bpl.n	3401fa24 <_printf_float+0x404>
3401f9b6:	2301      	movs	r3, #1
3401f9b8:	4642      	mov	r2, r8
3401f9ba:	4631      	mov	r1, r6
3401f9bc:	4628      	mov	r0, r5
3401f9be:	47b8      	blx	r7
3401f9c0:	3001      	adds	r0, #1
3401f9c2:	f43f ae79 	beq.w	3401f6b8 <_printf_float+0x98>
3401f9c6:	9b05      	ldr	r3, [sp, #20]
3401f9c8:	465a      	mov	r2, fp
3401f9ca:	4631      	mov	r1, r6
3401f9cc:	4628      	mov	r0, r5
3401f9ce:	47b8      	blx	r7
3401f9d0:	3001      	adds	r0, #1
3401f9d2:	f43f ae71 	beq.w	3401f6b8 <_printf_float+0x98>
3401f9d6:	f109 39ff 	add.w	r9, r9, #4294967295
3401f9da:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
3401f9de:	eeb5 7b40 	vcmp.f64	d7, #0.0
3401f9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3401f9e6:	d018      	beq.n	3401fa1a <_printf_float+0x3fa>
3401f9e8:	464b      	mov	r3, r9
3401f9ea:	f108 0201 	add.w	r2, r8, #1
3401f9ee:	4631      	mov	r1, r6
3401f9f0:	4628      	mov	r0, r5
3401f9f2:	47b8      	blx	r7
3401f9f4:	3001      	adds	r0, #1
3401f9f6:	d10c      	bne.n	3401fa12 <_printf_float+0x3f2>
3401f9f8:	e65e      	b.n	3401f6b8 <_printf_float+0x98>
3401f9fa:	2301      	movs	r3, #1
3401f9fc:	465a      	mov	r2, fp
3401f9fe:	4631      	mov	r1, r6
3401fa00:	4628      	mov	r0, r5
3401fa02:	47b8      	blx	r7
3401fa04:	3001      	adds	r0, #1
3401fa06:	f43f ae57 	beq.w	3401f6b8 <_printf_float+0x98>
3401fa0a:	f108 0801 	add.w	r8, r8, #1
3401fa0e:	45c8      	cmp	r8, r9
3401fa10:	dbf3      	blt.n	3401f9fa <_printf_float+0x3da>
3401fa12:	4653      	mov	r3, sl
3401fa14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
3401fa18:	e6dc      	b.n	3401f7d4 <_printf_float+0x1b4>
3401fa1a:	f04f 0800 	mov.w	r8, #0
3401fa1e:	f104 0b1a 	add.w	fp, r4, #26
3401fa22:	e7f4      	b.n	3401fa0e <_printf_float+0x3ee>
3401fa24:	2301      	movs	r3, #1
3401fa26:	4642      	mov	r2, r8
3401fa28:	e7e1      	b.n	3401f9ee <_printf_float+0x3ce>
3401fa2a:	2301      	movs	r3, #1
3401fa2c:	464a      	mov	r2, r9
3401fa2e:	4631      	mov	r1, r6
3401fa30:	4628      	mov	r0, r5
3401fa32:	47b8      	blx	r7
3401fa34:	3001      	adds	r0, #1
3401fa36:	f43f ae3f 	beq.w	3401f6b8 <_printf_float+0x98>
3401fa3a:	f108 0801 	add.w	r8, r8, #1
3401fa3e:	68e3      	ldr	r3, [r4, #12]
3401fa40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
3401fa42:	1a5b      	subs	r3, r3, r1
3401fa44:	4543      	cmp	r3, r8
3401fa46:	dcf0      	bgt.n	3401fa2a <_printf_float+0x40a>
3401fa48:	e6f8      	b.n	3401f83c <_printf_float+0x21c>
3401fa4a:	f04f 0800 	mov.w	r8, #0
3401fa4e:	f104 0919 	add.w	r9, r4, #25
3401fa52:	e7f4      	b.n	3401fa3e <_printf_float+0x41e>

3401fa54 <_printf_common>:
3401fa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3401fa58:	4616      	mov	r6, r2
3401fa5a:	4698      	mov	r8, r3
3401fa5c:	688a      	ldr	r2, [r1, #8]
3401fa5e:	4607      	mov	r7, r0
3401fa60:	690b      	ldr	r3, [r1, #16]
3401fa62:	460c      	mov	r4, r1
3401fa64:	f8dd 9020 	ldr.w	r9, [sp, #32]
3401fa68:	4293      	cmp	r3, r2
3401fa6a:	bfb8      	it	lt
3401fa6c:	4613      	movlt	r3, r2
3401fa6e:	6033      	str	r3, [r6, #0]
3401fa70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3401fa74:	b10a      	cbz	r2, 3401fa7a <_printf_common+0x26>
3401fa76:	3301      	adds	r3, #1
3401fa78:	6033      	str	r3, [r6, #0]
3401fa7a:	6823      	ldr	r3, [r4, #0]
3401fa7c:	0699      	lsls	r1, r3, #26
3401fa7e:	bf42      	ittt	mi
3401fa80:	6833      	ldrmi	r3, [r6, #0]
3401fa82:	3302      	addmi	r3, #2
3401fa84:	6033      	strmi	r3, [r6, #0]
3401fa86:	6825      	ldr	r5, [r4, #0]
3401fa88:	f015 0506 	ands.w	r5, r5, #6
3401fa8c:	d106      	bne.n	3401fa9c <_printf_common+0x48>
3401fa8e:	f104 0a19 	add.w	sl, r4, #25
3401fa92:	68e3      	ldr	r3, [r4, #12]
3401fa94:	6832      	ldr	r2, [r6, #0]
3401fa96:	1a9b      	subs	r3, r3, r2
3401fa98:	42ab      	cmp	r3, r5
3401fa9a:	dc2b      	bgt.n	3401faf4 <_printf_common+0xa0>
3401fa9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3401faa0:	6822      	ldr	r2, [r4, #0]
3401faa2:	3b00      	subs	r3, #0
3401faa4:	bf18      	it	ne
3401faa6:	2301      	movne	r3, #1
3401faa8:	0692      	lsls	r2, r2, #26
3401faaa:	d430      	bmi.n	3401fb0e <_printf_common+0xba>
3401faac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3401fab0:	4641      	mov	r1, r8
3401fab2:	4638      	mov	r0, r7
3401fab4:	47c8      	blx	r9
3401fab6:	3001      	adds	r0, #1
3401fab8:	d023      	beq.n	3401fb02 <_printf_common+0xae>
3401faba:	6823      	ldr	r3, [r4, #0]
3401fabc:	341a      	adds	r4, #26
3401fabe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3401fac2:	f003 0306 	and.w	r3, r3, #6
3401fac6:	2b04      	cmp	r3, #4
3401fac8:	bf0a      	itet	eq
3401faca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3401face:	2500      	movne	r5, #0
3401fad0:	6833      	ldreq	r3, [r6, #0]
3401fad2:	f04f 0600 	mov.w	r6, #0
3401fad6:	bf08      	it	eq
3401fad8:	1aed      	subeq	r5, r5, r3
3401fada:	f854 3c12 	ldr.w	r3, [r4, #-18]
3401fade:	bf08      	it	eq
3401fae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3401fae4:	4293      	cmp	r3, r2
3401fae6:	bfc4      	itt	gt
3401fae8:	1a9b      	subgt	r3, r3, r2
3401faea:	18ed      	addgt	r5, r5, r3
3401faec:	42b5      	cmp	r5, r6
3401faee:	d11a      	bne.n	3401fb26 <_printf_common+0xd2>
3401faf0:	2000      	movs	r0, #0
3401faf2:	e008      	b.n	3401fb06 <_printf_common+0xb2>
3401faf4:	2301      	movs	r3, #1
3401faf6:	4652      	mov	r2, sl
3401faf8:	4641      	mov	r1, r8
3401fafa:	4638      	mov	r0, r7
3401fafc:	47c8      	blx	r9
3401fafe:	3001      	adds	r0, #1
3401fb00:	d103      	bne.n	3401fb0a <_printf_common+0xb6>
3401fb02:	f04f 30ff 	mov.w	r0, #4294967295
3401fb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401fb0a:	3501      	adds	r5, #1
3401fb0c:	e7c1      	b.n	3401fa92 <_printf_common+0x3e>
3401fb0e:	18e1      	adds	r1, r4, r3
3401fb10:	1c5a      	adds	r2, r3, #1
3401fb12:	2030      	movs	r0, #48	@ 0x30
3401fb14:	3302      	adds	r3, #2
3401fb16:	4422      	add	r2, r4
3401fb18:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3401fb1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3401fb20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3401fb24:	e7c2      	b.n	3401faac <_printf_common+0x58>
3401fb26:	2301      	movs	r3, #1
3401fb28:	4622      	mov	r2, r4
3401fb2a:	4641      	mov	r1, r8
3401fb2c:	4638      	mov	r0, r7
3401fb2e:	47c8      	blx	r9
3401fb30:	3001      	adds	r0, #1
3401fb32:	d0e6      	beq.n	3401fb02 <_printf_common+0xae>
3401fb34:	3601      	adds	r6, #1
3401fb36:	e7d9      	b.n	3401faec <_printf_common+0x98>

3401fb38 <_printf_i>:
3401fb38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3401fb3c:	7e0f      	ldrb	r7, [r1, #24]
3401fb3e:	4691      	mov	r9, r2
3401fb40:	4680      	mov	r8, r0
3401fb42:	460c      	mov	r4, r1
3401fb44:	2f78      	cmp	r7, #120	@ 0x78
3401fb46:	469a      	mov	sl, r3
3401fb48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3401fb4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3401fb4e:	d807      	bhi.n	3401fb60 <_printf_i+0x28>
3401fb50:	2f62      	cmp	r7, #98	@ 0x62
3401fb52:	d80a      	bhi.n	3401fb6a <_printf_i+0x32>
3401fb54:	2f00      	cmp	r7, #0
3401fb56:	f000 80d1 	beq.w	3401fcfc <_printf_i+0x1c4>
3401fb5a:	2f58      	cmp	r7, #88	@ 0x58
3401fb5c:	f000 80b8 	beq.w	3401fcd0 <_printf_i+0x198>
3401fb60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401fb64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3401fb68:	e03a      	b.n	3401fbe0 <_printf_i+0xa8>
3401fb6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3401fb6e:	2b15      	cmp	r3, #21
3401fb70:	d8f6      	bhi.n	3401fb60 <_printf_i+0x28>
3401fb72:	a101      	add	r1, pc, #4	@ (adr r1, 3401fb78 <_printf_i+0x40>)
3401fb74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3401fb78:	3401fbd1 	.word	0x3401fbd1
3401fb7c:	3401fbe5 	.word	0x3401fbe5
3401fb80:	3401fb61 	.word	0x3401fb61
3401fb84:	3401fb61 	.word	0x3401fb61
3401fb88:	3401fb61 	.word	0x3401fb61
3401fb8c:	3401fb61 	.word	0x3401fb61
3401fb90:	3401fbe5 	.word	0x3401fbe5
3401fb94:	3401fb61 	.word	0x3401fb61
3401fb98:	3401fb61 	.word	0x3401fb61
3401fb9c:	3401fb61 	.word	0x3401fb61
3401fba0:	3401fb61 	.word	0x3401fb61
3401fba4:	3401fce3 	.word	0x3401fce3
3401fba8:	3401fc0f 	.word	0x3401fc0f
3401fbac:	3401fc9d 	.word	0x3401fc9d
3401fbb0:	3401fb61 	.word	0x3401fb61
3401fbb4:	3401fb61 	.word	0x3401fb61
3401fbb8:	3401fd05 	.word	0x3401fd05
3401fbbc:	3401fb61 	.word	0x3401fb61
3401fbc0:	3401fc0f 	.word	0x3401fc0f
3401fbc4:	3401fb61 	.word	0x3401fb61
3401fbc8:	3401fb61 	.word	0x3401fb61
3401fbcc:	3401fca5 	.word	0x3401fca5
3401fbd0:	6833      	ldr	r3, [r6, #0]
3401fbd2:	1d1a      	adds	r2, r3, #4
3401fbd4:	681b      	ldr	r3, [r3, #0]
3401fbd6:	6032      	str	r2, [r6, #0]
3401fbd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3401fbdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3401fbe0:	2301      	movs	r3, #1
3401fbe2:	e09c      	b.n	3401fd1e <_printf_i+0x1e6>
3401fbe4:	6833      	ldr	r3, [r6, #0]
3401fbe6:	6820      	ldr	r0, [r4, #0]
3401fbe8:	1d19      	adds	r1, r3, #4
3401fbea:	6031      	str	r1, [r6, #0]
3401fbec:	0606      	lsls	r6, r0, #24
3401fbee:	d501      	bpl.n	3401fbf4 <_printf_i+0xbc>
3401fbf0:	681d      	ldr	r5, [r3, #0]
3401fbf2:	e003      	b.n	3401fbfc <_printf_i+0xc4>
3401fbf4:	0645      	lsls	r5, r0, #25
3401fbf6:	d5fb      	bpl.n	3401fbf0 <_printf_i+0xb8>
3401fbf8:	f9b3 5000 	ldrsh.w	r5, [r3]
3401fbfc:	2d00      	cmp	r5, #0
3401fbfe:	da03      	bge.n	3401fc08 <_printf_i+0xd0>
3401fc00:	232d      	movs	r3, #45	@ 0x2d
3401fc02:	426d      	negs	r5, r5
3401fc04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401fc08:	4858      	ldr	r0, [pc, #352]	@ (3401fd6c <_printf_i+0x234>)
3401fc0a:	230a      	movs	r3, #10
3401fc0c:	e011      	b.n	3401fc32 <_printf_i+0xfa>
3401fc0e:	6821      	ldr	r1, [r4, #0]
3401fc10:	6833      	ldr	r3, [r6, #0]
3401fc12:	0608      	lsls	r0, r1, #24
3401fc14:	f853 5b04 	ldr.w	r5, [r3], #4
3401fc18:	d402      	bmi.n	3401fc20 <_printf_i+0xe8>
3401fc1a:	0649      	lsls	r1, r1, #25
3401fc1c:	bf48      	it	mi
3401fc1e:	b2ad      	uxthmi	r5, r5
3401fc20:	2f6f      	cmp	r7, #111	@ 0x6f
3401fc22:	6033      	str	r3, [r6, #0]
3401fc24:	4851      	ldr	r0, [pc, #324]	@ (3401fd6c <_printf_i+0x234>)
3401fc26:	bf14      	ite	ne
3401fc28:	230a      	movne	r3, #10
3401fc2a:	2308      	moveq	r3, #8
3401fc2c:	2100      	movs	r1, #0
3401fc2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3401fc32:	6866      	ldr	r6, [r4, #4]
3401fc34:	2e00      	cmp	r6, #0
3401fc36:	60a6      	str	r6, [r4, #8]
3401fc38:	db05      	blt.n	3401fc46 <_printf_i+0x10e>
3401fc3a:	6821      	ldr	r1, [r4, #0]
3401fc3c:	432e      	orrs	r6, r5
3401fc3e:	f021 0104 	bic.w	r1, r1, #4
3401fc42:	6021      	str	r1, [r4, #0]
3401fc44:	d04b      	beq.n	3401fcde <_printf_i+0x1a6>
3401fc46:	4616      	mov	r6, r2
3401fc48:	fbb5 f1f3 	udiv	r1, r5, r3
3401fc4c:	fb03 5711 	mls	r7, r3, r1, r5
3401fc50:	5dc7      	ldrb	r7, [r0, r7]
3401fc52:	f806 7d01 	strb.w	r7, [r6, #-1]!
3401fc56:	462f      	mov	r7, r5
3401fc58:	460d      	mov	r5, r1
3401fc5a:	42bb      	cmp	r3, r7
3401fc5c:	d9f4      	bls.n	3401fc48 <_printf_i+0x110>
3401fc5e:	2b08      	cmp	r3, #8
3401fc60:	d10b      	bne.n	3401fc7a <_printf_i+0x142>
3401fc62:	6823      	ldr	r3, [r4, #0]
3401fc64:	07df      	lsls	r7, r3, #31
3401fc66:	d508      	bpl.n	3401fc7a <_printf_i+0x142>
3401fc68:	6923      	ldr	r3, [r4, #16]
3401fc6a:	6861      	ldr	r1, [r4, #4]
3401fc6c:	4299      	cmp	r1, r3
3401fc6e:	bfde      	ittt	le
3401fc70:	2330      	movle	r3, #48	@ 0x30
3401fc72:	f806 3c01 	strble.w	r3, [r6, #-1]
3401fc76:	f106 36ff 	addle.w	r6, r6, #4294967295
3401fc7a:	1b92      	subs	r2, r2, r6
3401fc7c:	6122      	str	r2, [r4, #16]
3401fc7e:	464b      	mov	r3, r9
3401fc80:	aa03      	add	r2, sp, #12
3401fc82:	4621      	mov	r1, r4
3401fc84:	4640      	mov	r0, r8
3401fc86:	f8cd a000 	str.w	sl, [sp]
3401fc8a:	f7ff fee3 	bl	3401fa54 <_printf_common>
3401fc8e:	3001      	adds	r0, #1
3401fc90:	d14a      	bne.n	3401fd28 <_printf_i+0x1f0>
3401fc92:	f04f 30ff 	mov.w	r0, #4294967295
3401fc96:	b004      	add	sp, #16
3401fc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3401fc9c:	6823      	ldr	r3, [r4, #0]
3401fc9e:	f043 0320 	orr.w	r3, r3, #32
3401fca2:	6023      	str	r3, [r4, #0]
3401fca4:	2778      	movs	r7, #120	@ 0x78
3401fca6:	4832      	ldr	r0, [pc, #200]	@ (3401fd70 <_printf_i+0x238>)
3401fca8:	6823      	ldr	r3, [r4, #0]
3401fcaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3401fcae:	061f      	lsls	r7, r3, #24
3401fcb0:	6831      	ldr	r1, [r6, #0]
3401fcb2:	f851 5b04 	ldr.w	r5, [r1], #4
3401fcb6:	d402      	bmi.n	3401fcbe <_printf_i+0x186>
3401fcb8:	065f      	lsls	r7, r3, #25
3401fcba:	bf48      	it	mi
3401fcbc:	b2ad      	uxthmi	r5, r5
3401fcbe:	6031      	str	r1, [r6, #0]
3401fcc0:	07d9      	lsls	r1, r3, #31
3401fcc2:	bf44      	itt	mi
3401fcc4:	f043 0320 	orrmi.w	r3, r3, #32
3401fcc8:	6023      	strmi	r3, [r4, #0]
3401fcca:	b11d      	cbz	r5, 3401fcd4 <_printf_i+0x19c>
3401fccc:	2310      	movs	r3, #16
3401fcce:	e7ad      	b.n	3401fc2c <_printf_i+0xf4>
3401fcd0:	4826      	ldr	r0, [pc, #152]	@ (3401fd6c <_printf_i+0x234>)
3401fcd2:	e7e9      	b.n	3401fca8 <_printf_i+0x170>
3401fcd4:	6823      	ldr	r3, [r4, #0]
3401fcd6:	f023 0320 	bic.w	r3, r3, #32
3401fcda:	6023      	str	r3, [r4, #0]
3401fcdc:	e7f6      	b.n	3401fccc <_printf_i+0x194>
3401fcde:	4616      	mov	r6, r2
3401fce0:	e7bd      	b.n	3401fc5e <_printf_i+0x126>
3401fce2:	6833      	ldr	r3, [r6, #0]
3401fce4:	6825      	ldr	r5, [r4, #0]
3401fce6:	1d18      	adds	r0, r3, #4
3401fce8:	6961      	ldr	r1, [r4, #20]
3401fcea:	6030      	str	r0, [r6, #0]
3401fcec:	062e      	lsls	r6, r5, #24
3401fcee:	681b      	ldr	r3, [r3, #0]
3401fcf0:	d501      	bpl.n	3401fcf6 <_printf_i+0x1be>
3401fcf2:	6019      	str	r1, [r3, #0]
3401fcf4:	e002      	b.n	3401fcfc <_printf_i+0x1c4>
3401fcf6:	0668      	lsls	r0, r5, #25
3401fcf8:	d5fb      	bpl.n	3401fcf2 <_printf_i+0x1ba>
3401fcfa:	8019      	strh	r1, [r3, #0]
3401fcfc:	2300      	movs	r3, #0
3401fcfe:	4616      	mov	r6, r2
3401fd00:	6123      	str	r3, [r4, #16]
3401fd02:	e7bc      	b.n	3401fc7e <_printf_i+0x146>
3401fd04:	6833      	ldr	r3, [r6, #0]
3401fd06:	2100      	movs	r1, #0
3401fd08:	1d1a      	adds	r2, r3, #4
3401fd0a:	6032      	str	r2, [r6, #0]
3401fd0c:	681e      	ldr	r6, [r3, #0]
3401fd0e:	6862      	ldr	r2, [r4, #4]
3401fd10:	4630      	mov	r0, r6
3401fd12:	f000 fd1a 	bl	3402074a <memchr>
3401fd16:	b108      	cbz	r0, 3401fd1c <_printf_i+0x1e4>
3401fd18:	1b80      	subs	r0, r0, r6
3401fd1a:	6060      	str	r0, [r4, #4]
3401fd1c:	6863      	ldr	r3, [r4, #4]
3401fd1e:	6123      	str	r3, [r4, #16]
3401fd20:	2300      	movs	r3, #0
3401fd22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3401fd26:	e7aa      	b.n	3401fc7e <_printf_i+0x146>
3401fd28:	6923      	ldr	r3, [r4, #16]
3401fd2a:	4632      	mov	r2, r6
3401fd2c:	4649      	mov	r1, r9
3401fd2e:	4640      	mov	r0, r8
3401fd30:	47d0      	blx	sl
3401fd32:	3001      	adds	r0, #1
3401fd34:	d0ad      	beq.n	3401fc92 <_printf_i+0x15a>
3401fd36:	6823      	ldr	r3, [r4, #0]
3401fd38:	079b      	lsls	r3, r3, #30
3401fd3a:	d413      	bmi.n	3401fd64 <_printf_i+0x22c>
3401fd3c:	68e0      	ldr	r0, [r4, #12]
3401fd3e:	9b03      	ldr	r3, [sp, #12]
3401fd40:	4298      	cmp	r0, r3
3401fd42:	bfb8      	it	lt
3401fd44:	4618      	movlt	r0, r3
3401fd46:	e7a6      	b.n	3401fc96 <_printf_i+0x15e>
3401fd48:	2301      	movs	r3, #1
3401fd4a:	4632      	mov	r2, r6
3401fd4c:	4649      	mov	r1, r9
3401fd4e:	4640      	mov	r0, r8
3401fd50:	47d0      	blx	sl
3401fd52:	3001      	adds	r0, #1
3401fd54:	d09d      	beq.n	3401fc92 <_printf_i+0x15a>
3401fd56:	3501      	adds	r5, #1
3401fd58:	68e3      	ldr	r3, [r4, #12]
3401fd5a:	9903      	ldr	r1, [sp, #12]
3401fd5c:	1a5b      	subs	r3, r3, r1
3401fd5e:	42ab      	cmp	r3, r5
3401fd60:	dcf2      	bgt.n	3401fd48 <_printf_i+0x210>
3401fd62:	e7eb      	b.n	3401fd3c <_printf_i+0x204>
3401fd64:	2500      	movs	r5, #0
3401fd66:	f104 0619 	add.w	r6, r4, #25
3401fd6a:	e7f5      	b.n	3401fd58 <_printf_i+0x220>
3401fd6c:	3402c31c 	.word	0x3402c31c
3401fd70:	3402c32d 	.word	0x3402c32d

3401fd74 <std>:
3401fd74:	2300      	movs	r3, #0
3401fd76:	b510      	push	{r4, lr}
3401fd78:	4604      	mov	r4, r0
3401fd7a:	6083      	str	r3, [r0, #8]
3401fd7c:	8181      	strh	r1, [r0, #12]
3401fd7e:	4619      	mov	r1, r3
3401fd80:	6643      	str	r3, [r0, #100]	@ 0x64
3401fd82:	81c2      	strh	r2, [r0, #14]
3401fd84:	2208      	movs	r2, #8
3401fd86:	6183      	str	r3, [r0, #24]
3401fd88:	e9c0 3300 	strd	r3, r3, [r0]
3401fd8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
3401fd90:	305c      	adds	r0, #92	@ 0x5c
3401fd92:	f000 fa61 	bl	34020258 <memset>
3401fd96:	4b0d      	ldr	r3, [pc, #52]	@ (3401fdcc <std+0x58>)
3401fd98:	6224      	str	r4, [r4, #32]
3401fd9a:	6263      	str	r3, [r4, #36]	@ 0x24
3401fd9c:	4b0c      	ldr	r3, [pc, #48]	@ (3401fdd0 <std+0x5c>)
3401fd9e:	62a3      	str	r3, [r4, #40]	@ 0x28
3401fda0:	4b0c      	ldr	r3, [pc, #48]	@ (3401fdd4 <std+0x60>)
3401fda2:	62e3      	str	r3, [r4, #44]	@ 0x2c
3401fda4:	4b0c      	ldr	r3, [pc, #48]	@ (3401fdd8 <std+0x64>)
3401fda6:	6323      	str	r3, [r4, #48]	@ 0x30
3401fda8:	4b0c      	ldr	r3, [pc, #48]	@ (3401fddc <std+0x68>)
3401fdaa:	429c      	cmp	r4, r3
3401fdac:	d006      	beq.n	3401fdbc <std+0x48>
3401fdae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3401fdb2:	4294      	cmp	r4, r2
3401fdb4:	d002      	beq.n	3401fdbc <std+0x48>
3401fdb6:	33d0      	adds	r3, #208	@ 0xd0
3401fdb8:	429c      	cmp	r4, r3
3401fdba:	d105      	bne.n	3401fdc8 <std+0x54>
3401fdbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3401fdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401fdc4:	f000 bcb6 	b.w	34020734 <__retarget_lock_init_recursive>
3401fdc8:	bd10      	pop	{r4, pc}
3401fdca:	bf00      	nop
3401fdcc:	3401fffd 	.word	0x3401fffd
3401fdd0:	3402001f 	.word	0x3402001f
3401fdd4:	34020057 	.word	0x34020057
3401fdd8:	3402007b 	.word	0x3402007b
3401fddc:	341fa608 	.word	0x341fa608

3401fde0 <stdio_exit_handler>:
3401fde0:	4a02      	ldr	r2, [pc, #8]	@ (3401fdec <stdio_exit_handler+0xc>)
3401fde2:	4903      	ldr	r1, [pc, #12]	@ (3401fdf0 <stdio_exit_handler+0x10>)
3401fde4:	4803      	ldr	r0, [pc, #12]	@ (3401fdf4 <stdio_exit_handler+0x14>)
3401fde6:	f000 b87b 	b.w	3401fee0 <_fwalk_sglue>
3401fdea:	bf00      	nop
3401fdec:	3410ce20 	.word	0x3410ce20
3401fdf0:	3402228d 	.word	0x3402228d
3401fdf4:	3410ce30 	.word	0x3410ce30

3401fdf8 <cleanup_stdio>:
3401fdf8:	6841      	ldr	r1, [r0, #4]
3401fdfa:	4b0c      	ldr	r3, [pc, #48]	@ (3401fe2c <cleanup_stdio+0x34>)
3401fdfc:	4299      	cmp	r1, r3
3401fdfe:	b510      	push	{r4, lr}
3401fe00:	4604      	mov	r4, r0
3401fe02:	d001      	beq.n	3401fe08 <cleanup_stdio+0x10>
3401fe04:	f002 fa42 	bl	3402228c <_fflush_r>
3401fe08:	68a1      	ldr	r1, [r4, #8]
3401fe0a:	4b09      	ldr	r3, [pc, #36]	@ (3401fe30 <cleanup_stdio+0x38>)
3401fe0c:	4299      	cmp	r1, r3
3401fe0e:	d002      	beq.n	3401fe16 <cleanup_stdio+0x1e>
3401fe10:	4620      	mov	r0, r4
3401fe12:	f002 fa3b 	bl	3402228c <_fflush_r>
3401fe16:	68e1      	ldr	r1, [r4, #12]
3401fe18:	4b06      	ldr	r3, [pc, #24]	@ (3401fe34 <cleanup_stdio+0x3c>)
3401fe1a:	4299      	cmp	r1, r3
3401fe1c:	d004      	beq.n	3401fe28 <cleanup_stdio+0x30>
3401fe1e:	4620      	mov	r0, r4
3401fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401fe24:	f002 ba32 	b.w	3402228c <_fflush_r>
3401fe28:	bd10      	pop	{r4, pc}
3401fe2a:	bf00      	nop
3401fe2c:	341fa608 	.word	0x341fa608
3401fe30:	341fa670 	.word	0x341fa670
3401fe34:	341fa6d8 	.word	0x341fa6d8

3401fe38 <global_stdio_init.part.0>:
3401fe38:	b510      	push	{r4, lr}
3401fe3a:	4b0b      	ldr	r3, [pc, #44]	@ (3401fe68 <global_stdio_init.part.0+0x30>)
3401fe3c:	2104      	movs	r1, #4
3401fe3e:	4c0b      	ldr	r4, [pc, #44]	@ (3401fe6c <global_stdio_init.part.0+0x34>)
3401fe40:	4a0b      	ldr	r2, [pc, #44]	@ (3401fe70 <global_stdio_init.part.0+0x38>)
3401fe42:	4620      	mov	r0, r4
3401fe44:	601a      	str	r2, [r3, #0]
3401fe46:	2200      	movs	r2, #0
3401fe48:	f7ff ff94 	bl	3401fd74 <std>
3401fe4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3401fe50:	2201      	movs	r2, #1
3401fe52:	2109      	movs	r1, #9
3401fe54:	f7ff ff8e 	bl	3401fd74 <std>
3401fe58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3401fe5c:	2202      	movs	r2, #2
3401fe5e:	2112      	movs	r1, #18
3401fe60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401fe64:	f7ff bf86 	b.w	3401fd74 <std>
3401fe68:	341fa740 	.word	0x341fa740
3401fe6c:	341fa608 	.word	0x341fa608
3401fe70:	3401fde1 	.word	0x3401fde1

3401fe74 <__sfp_lock_acquire>:
3401fe74:	4801      	ldr	r0, [pc, #4]	@ (3401fe7c <__sfp_lock_acquire+0x8>)
3401fe76:	f000 bc5e 	b.w	34020736 <__retarget_lock_acquire_recursive>
3401fe7a:	bf00      	nop
3401fe7c:	341fa748 	.word	0x341fa748

3401fe80 <__sfp_lock_release>:
3401fe80:	4801      	ldr	r0, [pc, #4]	@ (3401fe88 <__sfp_lock_release+0x8>)
3401fe82:	f000 bc59 	b.w	34020738 <__retarget_lock_release_recursive>
3401fe86:	bf00      	nop
3401fe88:	341fa748 	.word	0x341fa748

3401fe8c <__sinit>:
3401fe8c:	b510      	push	{r4, lr}
3401fe8e:	4604      	mov	r4, r0
3401fe90:	f7ff fff0 	bl	3401fe74 <__sfp_lock_acquire>
3401fe94:	6a23      	ldr	r3, [r4, #32]
3401fe96:	b11b      	cbz	r3, 3401fea0 <__sinit+0x14>
3401fe98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3401fe9c:	f7ff bff0 	b.w	3401fe80 <__sfp_lock_release>
3401fea0:	4b04      	ldr	r3, [pc, #16]	@ (3401feb4 <__sinit+0x28>)
3401fea2:	6223      	str	r3, [r4, #32]
3401fea4:	4b04      	ldr	r3, [pc, #16]	@ (3401feb8 <__sinit+0x2c>)
3401fea6:	681b      	ldr	r3, [r3, #0]
3401fea8:	2b00      	cmp	r3, #0
3401feaa:	d1f5      	bne.n	3401fe98 <__sinit+0xc>
3401feac:	f7ff ffc4 	bl	3401fe38 <global_stdio_init.part.0>
3401feb0:	e7f2      	b.n	3401fe98 <__sinit+0xc>
3401feb2:	bf00      	nop
3401feb4:	3401fdf9 	.word	0x3401fdf9
3401feb8:	341fa740 	.word	0x341fa740

3401febc <fiprintf>:
3401febc:	b40e      	push	{r1, r2, r3}
3401febe:	b503      	push	{r0, r1, lr}
3401fec0:	ab03      	add	r3, sp, #12
3401fec2:	4601      	mov	r1, r0
3401fec4:	4805      	ldr	r0, [pc, #20]	@ (3401fedc <fiprintf+0x20>)
3401fec6:	f853 2b04 	ldr.w	r2, [r3], #4
3401feca:	6800      	ldr	r0, [r0, #0]
3401fecc:	9301      	str	r3, [sp, #4]
3401fece:	f002 f841 	bl	34021f54 <_vfiprintf_r>
3401fed2:	b002      	add	sp, #8
3401fed4:	f85d eb04 	ldr.w	lr, [sp], #4
3401fed8:	b003      	add	sp, #12
3401feda:	4770      	bx	lr
3401fedc:	3410ce2c 	.word	0x3410ce2c

3401fee0 <_fwalk_sglue>:
3401fee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3401fee4:	4607      	mov	r7, r0
3401fee6:	4688      	mov	r8, r1
3401fee8:	4614      	mov	r4, r2
3401feea:	2600      	movs	r6, #0
3401feec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3401fef0:	f1b9 0901 	subs.w	r9, r9, #1
3401fef4:	d505      	bpl.n	3401ff02 <_fwalk_sglue+0x22>
3401fef6:	6824      	ldr	r4, [r4, #0]
3401fef8:	2c00      	cmp	r4, #0
3401fefa:	d1f7      	bne.n	3401feec <_fwalk_sglue+0xc>
3401fefc:	4630      	mov	r0, r6
3401fefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3401ff02:	89ab      	ldrh	r3, [r5, #12]
3401ff04:	2b01      	cmp	r3, #1
3401ff06:	d907      	bls.n	3401ff18 <_fwalk_sglue+0x38>
3401ff08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3401ff0c:	3301      	adds	r3, #1
3401ff0e:	d003      	beq.n	3401ff18 <_fwalk_sglue+0x38>
3401ff10:	4629      	mov	r1, r5
3401ff12:	4638      	mov	r0, r7
3401ff14:	47c0      	blx	r8
3401ff16:	4306      	orrs	r6, r0
3401ff18:	3568      	adds	r5, #104	@ 0x68
3401ff1a:	e7e9      	b.n	3401fef0 <_fwalk_sglue+0x10>

3401ff1c <iprintf>:
3401ff1c:	b40f      	push	{r0, r1, r2, r3}
3401ff1e:	b507      	push	{r0, r1, r2, lr}
3401ff20:	4906      	ldr	r1, [pc, #24]	@ (3401ff3c <iprintf+0x20>)
3401ff22:	ab04      	add	r3, sp, #16
3401ff24:	6808      	ldr	r0, [r1, #0]
3401ff26:	f853 2b04 	ldr.w	r2, [r3], #4
3401ff2a:	6881      	ldr	r1, [r0, #8]
3401ff2c:	9301      	str	r3, [sp, #4]
3401ff2e:	f002 f811 	bl	34021f54 <_vfiprintf_r>
3401ff32:	b003      	add	sp, #12
3401ff34:	f85d eb04 	ldr.w	lr, [sp], #4
3401ff38:	b004      	add	sp, #16
3401ff3a:	4770      	bx	lr
3401ff3c:	3410ce2c 	.word	0x3410ce2c

3401ff40 <_puts_r>:
3401ff40:	6a03      	ldr	r3, [r0, #32]
3401ff42:	b570      	push	{r4, r5, r6, lr}
3401ff44:	4605      	mov	r5, r0
3401ff46:	460e      	mov	r6, r1
3401ff48:	6884      	ldr	r4, [r0, #8]
3401ff4a:	b90b      	cbnz	r3, 3401ff50 <_puts_r+0x10>
3401ff4c:	f7ff ff9e 	bl	3401fe8c <__sinit>
3401ff50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401ff52:	07db      	lsls	r3, r3, #31
3401ff54:	d405      	bmi.n	3401ff62 <_puts_r+0x22>
3401ff56:	89a3      	ldrh	r3, [r4, #12]
3401ff58:	0598      	lsls	r0, r3, #22
3401ff5a:	d402      	bmi.n	3401ff62 <_puts_r+0x22>
3401ff5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401ff5e:	f000 fbea 	bl	34020736 <__retarget_lock_acquire_recursive>
3401ff62:	89a3      	ldrh	r3, [r4, #12]
3401ff64:	0719      	lsls	r1, r3, #28
3401ff66:	d502      	bpl.n	3401ff6e <_puts_r+0x2e>
3401ff68:	6923      	ldr	r3, [r4, #16]
3401ff6a:	2b00      	cmp	r3, #0
3401ff6c:	d135      	bne.n	3401ffda <_puts_r+0x9a>
3401ff6e:	4621      	mov	r1, r4
3401ff70:	4628      	mov	r0, r5
3401ff72:	f000 f901 	bl	34020178 <__swsetup_r>
3401ff76:	b380      	cbz	r0, 3401ffda <_puts_r+0x9a>
3401ff78:	f04f 35ff 	mov.w	r5, #4294967295
3401ff7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3401ff7e:	07da      	lsls	r2, r3, #31
3401ff80:	d405      	bmi.n	3401ff8e <_puts_r+0x4e>
3401ff82:	89a3      	ldrh	r3, [r4, #12]
3401ff84:	059b      	lsls	r3, r3, #22
3401ff86:	d402      	bmi.n	3401ff8e <_puts_r+0x4e>
3401ff88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3401ff8a:	f000 fbd5 	bl	34020738 <__retarget_lock_release_recursive>
3401ff8e:	4628      	mov	r0, r5
3401ff90:	bd70      	pop	{r4, r5, r6, pc}
3401ff92:	2b00      	cmp	r3, #0
3401ff94:	da04      	bge.n	3401ffa0 <_puts_r+0x60>
3401ff96:	69a2      	ldr	r2, [r4, #24]
3401ff98:	429a      	cmp	r2, r3
3401ff9a:	dc17      	bgt.n	3401ffcc <_puts_r+0x8c>
3401ff9c:	290a      	cmp	r1, #10
3401ff9e:	d015      	beq.n	3401ffcc <_puts_r+0x8c>
3401ffa0:	6823      	ldr	r3, [r4, #0]
3401ffa2:	1c5a      	adds	r2, r3, #1
3401ffa4:	6022      	str	r2, [r4, #0]
3401ffa6:	7019      	strb	r1, [r3, #0]
3401ffa8:	68a3      	ldr	r3, [r4, #8]
3401ffaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3401ffae:	3b01      	subs	r3, #1
3401ffb0:	60a3      	str	r3, [r4, #8]
3401ffb2:	2900      	cmp	r1, #0
3401ffb4:	d1ed      	bne.n	3401ff92 <_puts_r+0x52>
3401ffb6:	2b00      	cmp	r3, #0
3401ffb8:	da11      	bge.n	3401ffde <_puts_r+0x9e>
3401ffba:	4622      	mov	r2, r4
3401ffbc:	210a      	movs	r1, #10
3401ffbe:	4628      	mov	r0, r5
3401ffc0:	f000 f89c 	bl	340200fc <__swbuf_r>
3401ffc4:	3001      	adds	r0, #1
3401ffc6:	d0d7      	beq.n	3401ff78 <_puts_r+0x38>
3401ffc8:	250a      	movs	r5, #10
3401ffca:	e7d7      	b.n	3401ff7c <_puts_r+0x3c>
3401ffcc:	4622      	mov	r2, r4
3401ffce:	4628      	mov	r0, r5
3401ffd0:	f000 f894 	bl	340200fc <__swbuf_r>
3401ffd4:	3001      	adds	r0, #1
3401ffd6:	d1e7      	bne.n	3401ffa8 <_puts_r+0x68>
3401ffd8:	e7ce      	b.n	3401ff78 <_puts_r+0x38>
3401ffda:	3e01      	subs	r6, #1
3401ffdc:	e7e4      	b.n	3401ffa8 <_puts_r+0x68>
3401ffde:	6823      	ldr	r3, [r4, #0]
3401ffe0:	1c5a      	adds	r2, r3, #1
3401ffe2:	6022      	str	r2, [r4, #0]
3401ffe4:	220a      	movs	r2, #10
3401ffe6:	701a      	strb	r2, [r3, #0]
3401ffe8:	e7ee      	b.n	3401ffc8 <_puts_r+0x88>
	...

3401ffec <puts>:
3401ffec:	4b02      	ldr	r3, [pc, #8]	@ (3401fff8 <puts+0xc>)
3401ffee:	4601      	mov	r1, r0
3401fff0:	6818      	ldr	r0, [r3, #0]
3401fff2:	f7ff bfa5 	b.w	3401ff40 <_puts_r>
3401fff6:	bf00      	nop
3401fff8:	3410ce2c 	.word	0x3410ce2c

3401fffc <__sread>:
3401fffc:	b510      	push	{r4, lr}
3401fffe:	460c      	mov	r4, r1
34020000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34020004:	f000 fb48 	bl	34020698 <_read_r>
34020008:	2800      	cmp	r0, #0
3402000a:	bfab      	itete	ge
3402000c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3402000e:	89a3      	ldrhlt	r3, [r4, #12]
34020010:	181b      	addge	r3, r3, r0
34020012:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34020016:	bfac      	ite	ge
34020018:	6563      	strge	r3, [r4, #84]	@ 0x54
3402001a:	81a3      	strhlt	r3, [r4, #12]
3402001c:	bd10      	pop	{r4, pc}

3402001e <__swrite>:
3402001e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34020022:	461f      	mov	r7, r3
34020024:	898b      	ldrh	r3, [r1, #12]
34020026:	4605      	mov	r5, r0
34020028:	460c      	mov	r4, r1
3402002a:	05db      	lsls	r3, r3, #23
3402002c:	4616      	mov	r6, r2
3402002e:	d505      	bpl.n	3402003c <__swrite+0x1e>
34020030:	2302      	movs	r3, #2
34020032:	2200      	movs	r2, #0
34020034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34020038:	f000 fb1c 	bl	34020674 <_lseek_r>
3402003c:	89a3      	ldrh	r3, [r4, #12]
3402003e:	4632      	mov	r2, r6
34020040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34020044:	4628      	mov	r0, r5
34020046:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3402004a:	81a3      	strh	r3, [r4, #12]
3402004c:	463b      	mov	r3, r7
3402004e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
34020052:	f000 bb33 	b.w	340206bc <_write_r>

34020056 <__sseek>:
34020056:	b510      	push	{r4, lr}
34020058:	460c      	mov	r4, r1
3402005a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3402005e:	f000 fb09 	bl	34020674 <_lseek_r>
34020062:	1c43      	adds	r3, r0, #1
34020064:	89a3      	ldrh	r3, [r4, #12]
34020066:	bf15      	itete	ne
34020068:	6560      	strne	r0, [r4, #84]	@ 0x54
3402006a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3402006e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
34020072:	81a3      	strheq	r3, [r4, #12]
34020074:	bf18      	it	ne
34020076:	81a3      	strhne	r3, [r4, #12]
34020078:	bd10      	pop	{r4, pc}

3402007a <__sclose>:
3402007a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3402007e:	f000 bae9 	b.w	34020654 <_close_r>

34020082 <_vsniprintf_r>:
34020082:	b530      	push	{r4, r5, lr}
34020084:	4614      	mov	r4, r2
34020086:	b09b      	sub	sp, #108	@ 0x6c
34020088:	4605      	mov	r5, r0
3402008a:	461a      	mov	r2, r3
3402008c:	2c00      	cmp	r4, #0
3402008e:	da05      	bge.n	3402009c <_vsniprintf_r+0x1a>
34020090:	238b      	movs	r3, #139	@ 0x8b
34020092:	6003      	str	r3, [r0, #0]
34020094:	f04f 30ff 	mov.w	r0, #4294967295
34020098:	b01b      	add	sp, #108	@ 0x6c
3402009a:	bd30      	pop	{r4, r5, pc}
3402009c:	f44f 7302 	mov.w	r3, #520	@ 0x208
340200a0:	9100      	str	r1, [sp, #0]
340200a2:	9104      	str	r1, [sp, #16]
340200a4:	4669      	mov	r1, sp
340200a6:	f8ad 300c 	strh.w	r3, [sp, #12]
340200aa:	f04f 0300 	mov.w	r3, #0
340200ae:	9319      	str	r3, [sp, #100]	@ 0x64
340200b0:	bf14      	ite	ne
340200b2:	f104 33ff 	addne.w	r3, r4, #4294967295
340200b6:	4623      	moveq	r3, r4
340200b8:	9302      	str	r3, [sp, #8]
340200ba:	9305      	str	r3, [sp, #20]
340200bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
340200c0:	f8ad 300e 	strh.w	r3, [sp, #14]
340200c4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
340200c6:	f001 fe1f 	bl	34021d08 <_svfiprintf_r>
340200ca:	1c43      	adds	r3, r0, #1
340200cc:	bfbc      	itt	lt
340200ce:	238b      	movlt	r3, #139	@ 0x8b
340200d0:	602b      	strlt	r3, [r5, #0]
340200d2:	2c00      	cmp	r4, #0
340200d4:	d0e0      	beq.n	34020098 <_vsniprintf_r+0x16>
340200d6:	9b00      	ldr	r3, [sp, #0]
340200d8:	2200      	movs	r2, #0
340200da:	701a      	strb	r2, [r3, #0]
340200dc:	e7dc      	b.n	34020098 <_vsniprintf_r+0x16>
	...

340200e0 <vsniprintf>:
340200e0:	b507      	push	{r0, r1, r2, lr}
340200e2:	9300      	str	r3, [sp, #0]
340200e4:	4613      	mov	r3, r2
340200e6:	460a      	mov	r2, r1
340200e8:	4601      	mov	r1, r0
340200ea:	4803      	ldr	r0, [pc, #12]	@ (340200f8 <vsniprintf+0x18>)
340200ec:	6800      	ldr	r0, [r0, #0]
340200ee:	f7ff ffc8 	bl	34020082 <_vsniprintf_r>
340200f2:	b003      	add	sp, #12
340200f4:	f85d fb04 	ldr.w	pc, [sp], #4
340200f8:	3410ce2c 	.word	0x3410ce2c

340200fc <__swbuf_r>:
340200fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
340200fe:	460e      	mov	r6, r1
34020100:	4614      	mov	r4, r2
34020102:	4605      	mov	r5, r0
34020104:	b118      	cbz	r0, 3402010e <__swbuf_r+0x12>
34020106:	6a03      	ldr	r3, [r0, #32]
34020108:	b90b      	cbnz	r3, 3402010e <__swbuf_r+0x12>
3402010a:	f7ff febf 	bl	3401fe8c <__sinit>
3402010e:	69a3      	ldr	r3, [r4, #24]
34020110:	60a3      	str	r3, [r4, #8]
34020112:	89a3      	ldrh	r3, [r4, #12]
34020114:	071a      	lsls	r2, r3, #28
34020116:	d501      	bpl.n	3402011c <__swbuf_r+0x20>
34020118:	6923      	ldr	r3, [r4, #16]
3402011a:	b943      	cbnz	r3, 3402012e <__swbuf_r+0x32>
3402011c:	4621      	mov	r1, r4
3402011e:	4628      	mov	r0, r5
34020120:	f000 f82a 	bl	34020178 <__swsetup_r>
34020124:	b118      	cbz	r0, 3402012e <__swbuf_r+0x32>
34020126:	f04f 37ff 	mov.w	r7, #4294967295
3402012a:	4638      	mov	r0, r7
3402012c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3402012e:	6823      	ldr	r3, [r4, #0]
34020130:	b2f6      	uxtb	r6, r6
34020132:	6922      	ldr	r2, [r4, #16]
34020134:	4637      	mov	r7, r6
34020136:	1a98      	subs	r0, r3, r2
34020138:	6963      	ldr	r3, [r4, #20]
3402013a:	4283      	cmp	r3, r0
3402013c:	dc05      	bgt.n	3402014a <__swbuf_r+0x4e>
3402013e:	4621      	mov	r1, r4
34020140:	4628      	mov	r0, r5
34020142:	f002 f8a3 	bl	3402228c <_fflush_r>
34020146:	2800      	cmp	r0, #0
34020148:	d1ed      	bne.n	34020126 <__swbuf_r+0x2a>
3402014a:	68a3      	ldr	r3, [r4, #8]
3402014c:	3b01      	subs	r3, #1
3402014e:	60a3      	str	r3, [r4, #8]
34020150:	6823      	ldr	r3, [r4, #0]
34020152:	1c5a      	adds	r2, r3, #1
34020154:	6022      	str	r2, [r4, #0]
34020156:	701e      	strb	r6, [r3, #0]
34020158:	1c43      	adds	r3, r0, #1
3402015a:	6962      	ldr	r2, [r4, #20]
3402015c:	429a      	cmp	r2, r3
3402015e:	d004      	beq.n	3402016a <__swbuf_r+0x6e>
34020160:	89a3      	ldrh	r3, [r4, #12]
34020162:	07db      	lsls	r3, r3, #31
34020164:	d5e1      	bpl.n	3402012a <__swbuf_r+0x2e>
34020166:	2e0a      	cmp	r6, #10
34020168:	d1df      	bne.n	3402012a <__swbuf_r+0x2e>
3402016a:	4621      	mov	r1, r4
3402016c:	4628      	mov	r0, r5
3402016e:	f002 f88d 	bl	3402228c <_fflush_r>
34020172:	2800      	cmp	r0, #0
34020174:	d0d9      	beq.n	3402012a <__swbuf_r+0x2e>
34020176:	e7d6      	b.n	34020126 <__swbuf_r+0x2a>

34020178 <__swsetup_r>:
34020178:	b538      	push	{r3, r4, r5, lr}
3402017a:	4b29      	ldr	r3, [pc, #164]	@ (34020220 <__swsetup_r+0xa8>)
3402017c:	4605      	mov	r5, r0
3402017e:	460c      	mov	r4, r1
34020180:	6818      	ldr	r0, [r3, #0]
34020182:	b118      	cbz	r0, 3402018c <__swsetup_r+0x14>
34020184:	6a03      	ldr	r3, [r0, #32]
34020186:	b90b      	cbnz	r3, 3402018c <__swsetup_r+0x14>
34020188:	f7ff fe80 	bl	3401fe8c <__sinit>
3402018c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34020190:	0719      	lsls	r1, r3, #28
34020192:	d422      	bmi.n	340201da <__swsetup_r+0x62>
34020194:	06da      	lsls	r2, r3, #27
34020196:	d407      	bmi.n	340201a8 <__swsetup_r+0x30>
34020198:	2209      	movs	r2, #9
3402019a:	602a      	str	r2, [r5, #0]
3402019c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
340201a0:	f04f 30ff 	mov.w	r0, #4294967295
340201a4:	81a3      	strh	r3, [r4, #12]
340201a6:	e033      	b.n	34020210 <__swsetup_r+0x98>
340201a8:	0758      	lsls	r0, r3, #29
340201aa:	d512      	bpl.n	340201d2 <__swsetup_r+0x5a>
340201ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
340201ae:	b141      	cbz	r1, 340201c2 <__swsetup_r+0x4a>
340201b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
340201b4:	4299      	cmp	r1, r3
340201b6:	d002      	beq.n	340201be <__swsetup_r+0x46>
340201b8:	4628      	mov	r0, r5
340201ba:	f001 f8d3 	bl	34021364 <_free_r>
340201be:	2300      	movs	r3, #0
340201c0:	6363      	str	r3, [r4, #52]	@ 0x34
340201c2:	89a3      	ldrh	r3, [r4, #12]
340201c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
340201c8:	81a3      	strh	r3, [r4, #12]
340201ca:	2300      	movs	r3, #0
340201cc:	6063      	str	r3, [r4, #4]
340201ce:	6923      	ldr	r3, [r4, #16]
340201d0:	6023      	str	r3, [r4, #0]
340201d2:	89a3      	ldrh	r3, [r4, #12]
340201d4:	f043 0308 	orr.w	r3, r3, #8
340201d8:	81a3      	strh	r3, [r4, #12]
340201da:	6923      	ldr	r3, [r4, #16]
340201dc:	b94b      	cbnz	r3, 340201f2 <__swsetup_r+0x7a>
340201de:	89a3      	ldrh	r3, [r4, #12]
340201e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
340201e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340201e8:	d003      	beq.n	340201f2 <__swsetup_r+0x7a>
340201ea:	4621      	mov	r1, r4
340201ec:	4628      	mov	r0, r5
340201ee:	f002 f89a 	bl	34022326 <__smakebuf_r>
340201f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340201f6:	f013 0201 	ands.w	r2, r3, #1
340201fa:	d00a      	beq.n	34020212 <__swsetup_r+0x9a>
340201fc:	2200      	movs	r2, #0
340201fe:	60a2      	str	r2, [r4, #8]
34020200:	6962      	ldr	r2, [r4, #20]
34020202:	4252      	negs	r2, r2
34020204:	61a2      	str	r2, [r4, #24]
34020206:	6922      	ldr	r2, [r4, #16]
34020208:	b942      	cbnz	r2, 3402021c <__swsetup_r+0xa4>
3402020a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3402020e:	d1c5      	bne.n	3402019c <__swsetup_r+0x24>
34020210:	bd38      	pop	{r3, r4, r5, pc}
34020212:	0799      	lsls	r1, r3, #30
34020214:	bf58      	it	pl
34020216:	6962      	ldrpl	r2, [r4, #20]
34020218:	60a2      	str	r2, [r4, #8]
3402021a:	e7f4      	b.n	34020206 <__swsetup_r+0x8e>
3402021c:	2000      	movs	r0, #0
3402021e:	e7f7      	b.n	34020210 <__swsetup_r+0x98>
34020220:	3410ce2c 	.word	0x3410ce2c

34020224 <memmove>:
34020224:	4288      	cmp	r0, r1
34020226:	b510      	push	{r4, lr}
34020228:	eb01 0402 	add.w	r4, r1, r2
3402022c:	d902      	bls.n	34020234 <memmove+0x10>
3402022e:	4284      	cmp	r4, r0
34020230:	4623      	mov	r3, r4
34020232:	d807      	bhi.n	34020244 <memmove+0x20>
34020234:	1e43      	subs	r3, r0, #1
34020236:	42a1      	cmp	r1, r4
34020238:	d008      	beq.n	3402024c <memmove+0x28>
3402023a:	f811 2b01 	ldrb.w	r2, [r1], #1
3402023e:	f803 2f01 	strb.w	r2, [r3, #1]!
34020242:	e7f8      	b.n	34020236 <memmove+0x12>
34020244:	4402      	add	r2, r0
34020246:	4601      	mov	r1, r0
34020248:	428a      	cmp	r2, r1
3402024a:	d100      	bne.n	3402024e <memmove+0x2a>
3402024c:	bd10      	pop	{r4, pc}
3402024e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
34020252:	f802 4d01 	strb.w	r4, [r2, #-1]!
34020256:	e7f7      	b.n	34020248 <memmove+0x24>

34020258 <memset>:
34020258:	4402      	add	r2, r0
3402025a:	4603      	mov	r3, r0
3402025c:	4293      	cmp	r3, r2
3402025e:	d100      	bne.n	34020262 <memset+0xa>
34020260:	4770      	bx	lr
34020262:	f803 1b01 	strb.w	r1, [r3], #1
34020266:	e7f9      	b.n	3402025c <memset+0x4>

34020268 <_strerror_r>:
34020268:	b510      	push	{r4, lr}
3402026a:	4604      	mov	r4, r0
3402026c:	4608      	mov	r0, r1
3402026e:	4611      	mov	r1, r2
34020270:	461a      	mov	r2, r3
34020272:	288e      	cmp	r0, #142	@ 0x8e
34020274:	f200 8130 	bhi.w	340204d8 <_strerror_r+0x270>
34020278:	e8df f010 	tbh	[pc, r0, lsl #1]
3402027c:	0138008f 	.word	0x0138008f
34020280:	00940092 	.word	0x00940092
34020284:	00980096 	.word	0x00980096
34020288:	009c009a 	.word	0x009c009a
3402028c:	00a2009e 	.word	0x00a2009e
34020290:	00a800a4 	.word	0x00a800a4
34020294:	00ac00aa 	.word	0x00ac00aa
34020298:	012e00ae 	.word	0x012e00ae
3402029c:	00b200b0 	.word	0x00b200b0
340202a0:	00b600b4 	.word	0x00b600b4
340202a4:	00be00b8 	.word	0x00be00b8
340202a8:	00c600c0 	.word	0x00c600c0
340202ac:	00ca00c8 	.word	0x00ca00c8
340202b0:	00ce00cc 	.word	0x00ce00cc
340202b4:	00d600d2 	.word	0x00d600d2
340202b8:	00da00d8 	.word	0x00da00d8
340202bc:	00de00dc 	.word	0x00de00dc
340202c0:	00e200e0 	.word	0x00e200e0
340202c4:	012e00e4 	.word	0x012e00e4
340202c8:	012e012e 	.word	0x012e012e
340202cc:	012e012e 	.word	0x012e012e
340202d0:	012e012e 	.word	0x012e012e
340202d4:	00e8012e 	.word	0x00e8012e
340202d8:	012e00ec 	.word	0x012e00ec
340202dc:	012e012e 	.word	0x012e012e
340202e0:	012e012e 	.word	0x012e012e
340202e4:	012e012e 	.word	0x012e012e
340202e8:	012e012e 	.word	0x012e012e
340202ec:	012e012e 	.word	0x012e012e
340202f0:	012e012e 	.word	0x012e012e
340202f4:	010800ee 	.word	0x010800ee
340202f8:	00f200f0 	.word	0x00f200f0
340202fc:	012e012e 	.word	0x012e012e
34020300:	00f4012e 	.word	0x00f4012e
34020304:	012e012e 	.word	0x012e012e
34020308:	00f6012e 	.word	0x00f6012e
3402030c:	012e012e 	.word	0x012e012e
34020310:	012e00fa 	.word	0x012e00fa
34020314:	00fc012e 	.word	0x00fc012e
34020318:	012e012e 	.word	0x012e012e
3402031c:	012e012e 	.word	0x012e012e
34020320:	012e012e 	.word	0x012e012e
34020324:	012e012e 	.word	0x012e012e
34020328:	012e012e 	.word	0x012e012e
3402032c:	012e00fe 	.word	0x012e00fe
34020330:	01020100 	.word	0x01020100
34020334:	012e0104 	.word	0x012e0104
34020338:	0126012e 	.word	0x0126012e
3402033c:	012e012e 	.word	0x012e012e
34020340:	012e012e 	.word	0x012e012e
34020344:	012e012e 	.word	0x012e012e
34020348:	012e012e 	.word	0x012e012e
3402034c:	01060114 	.word	0x01060114
34020350:	010c010a 	.word	0x010c010a
34020354:	0110010e 	.word	0x0110010e
34020358:	0112012e 	.word	0x0112012e
3402035c:	011a0116 	.word	0x011a0116
34020360:	00c200ea 	.word	0x00c200ea
34020364:	00ba012c 	.word	0x00ba012c
34020368:	00bc00d0 	.word	0x00bc00d0
3402036c:	00a600a0 	.word	0x00a600a0
34020370:	00f8012a 	.word	0x00f8012a
34020374:	0118012e 	.word	0x0118012e
34020378:	011e00c4 	.word	0x011e00c4
3402037c:	012e011c 	.word	0x012e011c
34020380:	012e012e 	.word	0x012e012e
34020384:	012e012e 	.word	0x012e012e
34020388:	012e00d4 	.word	0x012e00d4
3402038c:	012e012e 	.word	0x012e012e
34020390:	012800e6 	.word	0x012800e6
34020394:	01220120 	.word	0x01220120
34020398:	0124      	.short	0x0124
3402039a:	4b55      	ldr	r3, [pc, #340]	@ (340204f0 <_strerror_r+0x288>)
3402039c:	4618      	mov	r0, r3
3402039e:	bd10      	pop	{r4, pc}
340203a0:	4b54      	ldr	r3, [pc, #336]	@ (340204f4 <_strerror_r+0x28c>)
340203a2:	e7fb      	b.n	3402039c <_strerror_r+0x134>
340203a4:	4b54      	ldr	r3, [pc, #336]	@ (340204f8 <_strerror_r+0x290>)
340203a6:	e7f9      	b.n	3402039c <_strerror_r+0x134>
340203a8:	4b54      	ldr	r3, [pc, #336]	@ (340204fc <_strerror_r+0x294>)
340203aa:	e7f7      	b.n	3402039c <_strerror_r+0x134>
340203ac:	4b54      	ldr	r3, [pc, #336]	@ (34020500 <_strerror_r+0x298>)
340203ae:	e7f5      	b.n	3402039c <_strerror_r+0x134>
340203b0:	4b54      	ldr	r3, [pc, #336]	@ (34020504 <_strerror_r+0x29c>)
340203b2:	e7f3      	b.n	3402039c <_strerror_r+0x134>
340203b4:	4b54      	ldr	r3, [pc, #336]	@ (34020508 <_strerror_r+0x2a0>)
340203b6:	e7f1      	b.n	3402039c <_strerror_r+0x134>
340203b8:	4b54      	ldr	r3, [pc, #336]	@ (3402050c <_strerror_r+0x2a4>)
340203ba:	e7ef      	b.n	3402039c <_strerror_r+0x134>
340203bc:	4b54      	ldr	r3, [pc, #336]	@ (34020510 <_strerror_r+0x2a8>)
340203be:	e7ed      	b.n	3402039c <_strerror_r+0x134>
340203c0:	4b54      	ldr	r3, [pc, #336]	@ (34020514 <_strerror_r+0x2ac>)
340203c2:	e7eb      	b.n	3402039c <_strerror_r+0x134>
340203c4:	4b54      	ldr	r3, [pc, #336]	@ (34020518 <_strerror_r+0x2b0>)
340203c6:	e7e9      	b.n	3402039c <_strerror_r+0x134>
340203c8:	4b54      	ldr	r3, [pc, #336]	@ (3402051c <_strerror_r+0x2b4>)
340203ca:	e7e7      	b.n	3402039c <_strerror_r+0x134>
340203cc:	4b54      	ldr	r3, [pc, #336]	@ (34020520 <_strerror_r+0x2b8>)
340203ce:	e7e5      	b.n	3402039c <_strerror_r+0x134>
340203d0:	4b54      	ldr	r3, [pc, #336]	@ (34020524 <_strerror_r+0x2bc>)
340203d2:	e7e3      	b.n	3402039c <_strerror_r+0x134>
340203d4:	4b54      	ldr	r3, [pc, #336]	@ (34020528 <_strerror_r+0x2c0>)
340203d6:	e7e1      	b.n	3402039c <_strerror_r+0x134>
340203d8:	4b54      	ldr	r3, [pc, #336]	@ (3402052c <_strerror_r+0x2c4>)
340203da:	e7df      	b.n	3402039c <_strerror_r+0x134>
340203dc:	4b54      	ldr	r3, [pc, #336]	@ (34020530 <_strerror_r+0x2c8>)
340203de:	e7dd      	b.n	3402039c <_strerror_r+0x134>
340203e0:	4b54      	ldr	r3, [pc, #336]	@ (34020534 <_strerror_r+0x2cc>)
340203e2:	e7db      	b.n	3402039c <_strerror_r+0x134>
340203e4:	4b54      	ldr	r3, [pc, #336]	@ (34020538 <_strerror_r+0x2d0>)
340203e6:	e7d9      	b.n	3402039c <_strerror_r+0x134>
340203e8:	4b54      	ldr	r3, [pc, #336]	@ (3402053c <_strerror_r+0x2d4>)
340203ea:	e7d7      	b.n	3402039c <_strerror_r+0x134>
340203ec:	4b54      	ldr	r3, [pc, #336]	@ (34020540 <_strerror_r+0x2d8>)
340203ee:	e7d5      	b.n	3402039c <_strerror_r+0x134>
340203f0:	4b54      	ldr	r3, [pc, #336]	@ (34020544 <_strerror_r+0x2dc>)
340203f2:	e7d3      	b.n	3402039c <_strerror_r+0x134>
340203f4:	4b54      	ldr	r3, [pc, #336]	@ (34020548 <_strerror_r+0x2e0>)
340203f6:	e7d1      	b.n	3402039c <_strerror_r+0x134>
340203f8:	4b54      	ldr	r3, [pc, #336]	@ (3402054c <_strerror_r+0x2e4>)
340203fa:	e7cf      	b.n	3402039c <_strerror_r+0x134>
340203fc:	4b54      	ldr	r3, [pc, #336]	@ (34020550 <_strerror_r+0x2e8>)
340203fe:	e7cd      	b.n	3402039c <_strerror_r+0x134>
34020400:	4b54      	ldr	r3, [pc, #336]	@ (34020554 <_strerror_r+0x2ec>)
34020402:	e7cb      	b.n	3402039c <_strerror_r+0x134>
34020404:	4b54      	ldr	r3, [pc, #336]	@ (34020558 <_strerror_r+0x2f0>)
34020406:	e7c9      	b.n	3402039c <_strerror_r+0x134>
34020408:	4b54      	ldr	r3, [pc, #336]	@ (3402055c <_strerror_r+0x2f4>)
3402040a:	e7c7      	b.n	3402039c <_strerror_r+0x134>
3402040c:	4b54      	ldr	r3, [pc, #336]	@ (34020560 <_strerror_r+0x2f8>)
3402040e:	e7c5      	b.n	3402039c <_strerror_r+0x134>
34020410:	4b54      	ldr	r3, [pc, #336]	@ (34020564 <_strerror_r+0x2fc>)
34020412:	e7c3      	b.n	3402039c <_strerror_r+0x134>
34020414:	4b54      	ldr	r3, [pc, #336]	@ (34020568 <_strerror_r+0x300>)
34020416:	e7c1      	b.n	3402039c <_strerror_r+0x134>
34020418:	4b54      	ldr	r3, [pc, #336]	@ (3402056c <_strerror_r+0x304>)
3402041a:	e7bf      	b.n	3402039c <_strerror_r+0x134>
3402041c:	4b54      	ldr	r3, [pc, #336]	@ (34020570 <_strerror_r+0x308>)
3402041e:	e7bd      	b.n	3402039c <_strerror_r+0x134>
34020420:	4b54      	ldr	r3, [pc, #336]	@ (34020574 <_strerror_r+0x30c>)
34020422:	e7bb      	b.n	3402039c <_strerror_r+0x134>
34020424:	4b54      	ldr	r3, [pc, #336]	@ (34020578 <_strerror_r+0x310>)
34020426:	e7b9      	b.n	3402039c <_strerror_r+0x134>
34020428:	4b54      	ldr	r3, [pc, #336]	@ (3402057c <_strerror_r+0x314>)
3402042a:	e7b7      	b.n	3402039c <_strerror_r+0x134>
3402042c:	4b54      	ldr	r3, [pc, #336]	@ (34020580 <_strerror_r+0x318>)
3402042e:	e7b5      	b.n	3402039c <_strerror_r+0x134>
34020430:	4b54      	ldr	r3, [pc, #336]	@ (34020584 <_strerror_r+0x31c>)
34020432:	e7b3      	b.n	3402039c <_strerror_r+0x134>
34020434:	4b54      	ldr	r3, [pc, #336]	@ (34020588 <_strerror_r+0x320>)
34020436:	e7b1      	b.n	3402039c <_strerror_r+0x134>
34020438:	4b54      	ldr	r3, [pc, #336]	@ (3402058c <_strerror_r+0x324>)
3402043a:	e7af      	b.n	3402039c <_strerror_r+0x134>
3402043c:	4b54      	ldr	r3, [pc, #336]	@ (34020590 <_strerror_r+0x328>)
3402043e:	e7ad      	b.n	3402039c <_strerror_r+0x134>
34020440:	4b54      	ldr	r3, [pc, #336]	@ (34020594 <_strerror_r+0x32c>)
34020442:	e7ab      	b.n	3402039c <_strerror_r+0x134>
34020444:	4b54      	ldr	r3, [pc, #336]	@ (34020598 <_strerror_r+0x330>)
34020446:	e7a9      	b.n	3402039c <_strerror_r+0x134>
34020448:	4b54      	ldr	r3, [pc, #336]	@ (3402059c <_strerror_r+0x334>)
3402044a:	e7a7      	b.n	3402039c <_strerror_r+0x134>
3402044c:	4b54      	ldr	r3, [pc, #336]	@ (340205a0 <_strerror_r+0x338>)
3402044e:	e7a5      	b.n	3402039c <_strerror_r+0x134>
34020450:	4b54      	ldr	r3, [pc, #336]	@ (340205a4 <_strerror_r+0x33c>)
34020452:	e7a3      	b.n	3402039c <_strerror_r+0x134>
34020454:	4b54      	ldr	r3, [pc, #336]	@ (340205a8 <_strerror_r+0x340>)
34020456:	e7a1      	b.n	3402039c <_strerror_r+0x134>
34020458:	4b54      	ldr	r3, [pc, #336]	@ (340205ac <_strerror_r+0x344>)
3402045a:	e79f      	b.n	3402039c <_strerror_r+0x134>
3402045c:	4b54      	ldr	r3, [pc, #336]	@ (340205b0 <_strerror_r+0x348>)
3402045e:	e79d      	b.n	3402039c <_strerror_r+0x134>
34020460:	4b54      	ldr	r3, [pc, #336]	@ (340205b4 <_strerror_r+0x34c>)
34020462:	e79b      	b.n	3402039c <_strerror_r+0x134>
34020464:	4b54      	ldr	r3, [pc, #336]	@ (340205b8 <_strerror_r+0x350>)
34020466:	e799      	b.n	3402039c <_strerror_r+0x134>
34020468:	4b54      	ldr	r3, [pc, #336]	@ (340205bc <_strerror_r+0x354>)
3402046a:	e797      	b.n	3402039c <_strerror_r+0x134>
3402046c:	4b54      	ldr	r3, [pc, #336]	@ (340205c0 <_strerror_r+0x358>)
3402046e:	e795      	b.n	3402039c <_strerror_r+0x134>
34020470:	4b54      	ldr	r3, [pc, #336]	@ (340205c4 <_strerror_r+0x35c>)
34020472:	e793      	b.n	3402039c <_strerror_r+0x134>
34020474:	4b54      	ldr	r3, [pc, #336]	@ (340205c8 <_strerror_r+0x360>)
34020476:	e791      	b.n	3402039c <_strerror_r+0x134>
34020478:	4b54      	ldr	r3, [pc, #336]	@ (340205cc <_strerror_r+0x364>)
3402047a:	e78f      	b.n	3402039c <_strerror_r+0x134>
3402047c:	4b54      	ldr	r3, [pc, #336]	@ (340205d0 <_strerror_r+0x368>)
3402047e:	e78d      	b.n	3402039c <_strerror_r+0x134>
34020480:	4b54      	ldr	r3, [pc, #336]	@ (340205d4 <_strerror_r+0x36c>)
34020482:	e78b      	b.n	3402039c <_strerror_r+0x134>
34020484:	4b54      	ldr	r3, [pc, #336]	@ (340205d8 <_strerror_r+0x370>)
34020486:	e789      	b.n	3402039c <_strerror_r+0x134>
34020488:	4b54      	ldr	r3, [pc, #336]	@ (340205dc <_strerror_r+0x374>)
3402048a:	e787      	b.n	3402039c <_strerror_r+0x134>
3402048c:	4b54      	ldr	r3, [pc, #336]	@ (340205e0 <_strerror_r+0x378>)
3402048e:	e785      	b.n	3402039c <_strerror_r+0x134>
34020490:	4b54      	ldr	r3, [pc, #336]	@ (340205e4 <_strerror_r+0x37c>)
34020492:	e783      	b.n	3402039c <_strerror_r+0x134>
34020494:	4b54      	ldr	r3, [pc, #336]	@ (340205e8 <_strerror_r+0x380>)
34020496:	e781      	b.n	3402039c <_strerror_r+0x134>
34020498:	4b54      	ldr	r3, [pc, #336]	@ (340205ec <_strerror_r+0x384>)
3402049a:	e77f      	b.n	3402039c <_strerror_r+0x134>
3402049c:	4b54      	ldr	r3, [pc, #336]	@ (340205f0 <_strerror_r+0x388>)
3402049e:	e77d      	b.n	3402039c <_strerror_r+0x134>
340204a0:	4b54      	ldr	r3, [pc, #336]	@ (340205f4 <_strerror_r+0x38c>)
340204a2:	e77b      	b.n	3402039c <_strerror_r+0x134>
340204a4:	4b54      	ldr	r3, [pc, #336]	@ (340205f8 <_strerror_r+0x390>)
340204a6:	e779      	b.n	3402039c <_strerror_r+0x134>
340204a8:	4b54      	ldr	r3, [pc, #336]	@ (340205fc <_strerror_r+0x394>)
340204aa:	e777      	b.n	3402039c <_strerror_r+0x134>
340204ac:	4b54      	ldr	r3, [pc, #336]	@ (34020600 <_strerror_r+0x398>)
340204ae:	e775      	b.n	3402039c <_strerror_r+0x134>
340204b0:	4b54      	ldr	r3, [pc, #336]	@ (34020604 <_strerror_r+0x39c>)
340204b2:	e773      	b.n	3402039c <_strerror_r+0x134>
340204b4:	4b54      	ldr	r3, [pc, #336]	@ (34020608 <_strerror_r+0x3a0>)
340204b6:	e771      	b.n	3402039c <_strerror_r+0x134>
340204b8:	4b54      	ldr	r3, [pc, #336]	@ (3402060c <_strerror_r+0x3a4>)
340204ba:	e76f      	b.n	3402039c <_strerror_r+0x134>
340204bc:	4b54      	ldr	r3, [pc, #336]	@ (34020610 <_strerror_r+0x3a8>)
340204be:	e76d      	b.n	3402039c <_strerror_r+0x134>
340204c0:	4b54      	ldr	r3, [pc, #336]	@ (34020614 <_strerror_r+0x3ac>)
340204c2:	e76b      	b.n	3402039c <_strerror_r+0x134>
340204c4:	4b54      	ldr	r3, [pc, #336]	@ (34020618 <_strerror_r+0x3b0>)
340204c6:	e769      	b.n	3402039c <_strerror_r+0x134>
340204c8:	4b54      	ldr	r3, [pc, #336]	@ (3402061c <_strerror_r+0x3b4>)
340204ca:	e767      	b.n	3402039c <_strerror_r+0x134>
340204cc:	4b54      	ldr	r3, [pc, #336]	@ (34020620 <_strerror_r+0x3b8>)
340204ce:	e765      	b.n	3402039c <_strerror_r+0x134>
340204d0:	4b54      	ldr	r3, [pc, #336]	@ (34020624 <_strerror_r+0x3bc>)
340204d2:	e763      	b.n	3402039c <_strerror_r+0x134>
340204d4:	4b54      	ldr	r3, [pc, #336]	@ (34020628 <_strerror_r+0x3c0>)
340204d6:	e761      	b.n	3402039c <_strerror_r+0x134>
340204d8:	2a00      	cmp	r2, #0
340204da:	bf08      	it	eq
340204dc:	4622      	moveq	r2, r4
340204de:	f000 f8b3 	bl	34020648 <_user_strerror>
340204e2:	4b52      	ldr	r3, [pc, #328]	@ (3402062c <_strerror_r+0x3c4>)
340204e4:	2800      	cmp	r0, #0
340204e6:	bf18      	it	ne
340204e8:	4603      	movne	r3, r0
340204ea:	e757      	b.n	3402039c <_strerror_r+0x134>
340204ec:	4b50      	ldr	r3, [pc, #320]	@ (34020630 <_strerror_r+0x3c8>)
340204ee:	e755      	b.n	3402039c <_strerror_r+0x134>
340204f0:	3402c33e 	.word	0x3402c33e
340204f4:	3402c350 	.word	0x3402c350
340204f8:	3402c36a 	.word	0x3402c36a
340204fc:	3402c37a 	.word	0x3402c37a
34020500:	3402c392 	.word	0x3402c392
34020504:	3402c39c 	.word	0x3402c39c
34020508:	3402c3b6 	.word	0x3402c3b6
3402050c:	3402c3c8 	.word	0x3402c3c8
34020510:	3402c3da 	.word	0x3402c3da
34020514:	3402c3f3 	.word	0x3402c3f3
34020518:	3402c403 	.word	0x3402c403
3402051c:	3402c40f 	.word	0x3402c40f
34020520:	3402c42c 	.word	0x3402c42c
34020524:	3402c43e 	.word	0x3402c43e
34020528:	3402c44f 	.word	0x3402c44f
3402052c:	3402c461 	.word	0x3402c461
34020530:	3402c46d 	.word	0x3402c46d
34020534:	3402c485 	.word	0x3402c485
34020538:	3402c491 	.word	0x3402c491
3402053c:	3402c4a3 	.word	0x3402c4a3
34020540:	3402c4b2 	.word	0x3402c4b2
34020544:	3402c4c2 	.word	0x3402c4c2
34020548:	3402c4cf 	.word	0x3402c4cf
3402054c:	3402c4ee 	.word	0x3402c4ee
34020550:	3402c4fd 	.word	0x3402c4fd
34020554:	3402c50e 	.word	0x3402c50e
34020558:	3402c532 	.word	0x3402c532
3402055c:	3402c550 	.word	0x3402c550
34020560:	3402c56e 	.word	0x3402c56e
34020564:	3402c58e 	.word	0x3402c58e
34020568:	3402c5a5 	.word	0x3402c5a5
3402056c:	3402c5b4 	.word	0x3402c5b4
34020570:	3402c5c3 	.word	0x3402c5c3
34020574:	3402c5d7 	.word	0x3402c5d7
34020578:	3402c5ef 	.word	0x3402c5ef
3402057c:	3402c5fd 	.word	0x3402c5fd
34020580:	3402c60a 	.word	0x3402c60a
34020584:	3402c620 	.word	0x3402c620
34020588:	3402c62f 	.word	0x3402c62f
3402058c:	3402c63b 	.word	0x3402c63b
34020590:	3402c66a 	.word	0x3402c66a
34020594:	3402c67b 	.word	0x3402c67b
34020598:	3402c696 	.word	0x3402c696
3402059c:	3402c6a9 	.word	0x3402c6a9
340205a0:	3402c6bf 	.word	0x3402c6bf
340205a4:	3402c6c8 	.word	0x3402c6c8
340205a8:	3402c6df 	.word	0x3402c6df
340205ac:	3402c6e7 	.word	0x3402c6e7
340205b0:	3402c6f4 	.word	0x3402c6f4
340205b4:	3402c709 	.word	0x3402c709
340205b8:	3402c71d 	.word	0x3402c71d
340205bc:	3402c735 	.word	0x3402c735
340205c0:	3402c744 	.word	0x3402c744
340205c4:	3402c755 	.word	0x3402c755
340205c8:	3402c768 	.word	0x3402c768
340205cc:	3402c774 	.word	0x3402c774
340205d0:	3402c78d 	.word	0x3402c78d
340205d4:	3402c7a1 	.word	0x3402c7a1
340205d8:	3402c7bc 	.word	0x3402c7bc
340205dc:	3402c7d4 	.word	0x3402c7d4
340205e0:	3402c7ee 	.word	0x3402c7ee
340205e4:	3402c7f6 	.word	0x3402c7f6
340205e8:	3402c826 	.word	0x3402c826
340205ec:	3402c845 	.word	0x3402c845
340205f0:	3402c864 	.word	0x3402c864
340205f4:	3402c87b 	.word	0x3402c87b
340205f8:	3402c88e 	.word	0x3402c88e
340205fc:	3402c8a7 	.word	0x3402c8a7
34020600:	3402c8be 	.word	0x3402c8be
34020604:	3402c8d4 	.word	0x3402c8d4
34020608:	3402c8f5 	.word	0x3402c8f5
3402060c:	3402c90d 	.word	0x3402c90d
34020610:	3402c929 	.word	0x3402c929
34020614:	3402c93c 	.word	0x3402c93c
34020618:	3402c952 	.word	0x3402c952
3402061c:	3402c966 	.word	0x3402c966
34020620:	3402c988 	.word	0x3402c988
34020624:	3402c9ae 	.word	0x3402c9ae
34020628:	3402c9bf 	.word	0x3402c9bf
3402062c:	340266f0 	.word	0x340266f0
34020630:	3402c346 	.word	0x3402c346

34020634 <strerror>:
34020634:	4601      	mov	r1, r0
34020636:	2300      	movs	r3, #0
34020638:	4802      	ldr	r0, [pc, #8]	@ (34020644 <strerror+0x10>)
3402063a:	461a      	mov	r2, r3
3402063c:	6800      	ldr	r0, [r0, #0]
3402063e:	f7ff be13 	b.w	34020268 <_strerror_r>
34020642:	bf00      	nop
34020644:	3410ce2c 	.word	0x3410ce2c

34020648 <_user_strerror>:
34020648:	2000      	movs	r0, #0
3402064a:	4770      	bx	lr

3402064c <_localeconv_r>:
3402064c:	4800      	ldr	r0, [pc, #0]	@ (34020650 <_localeconv_r+0x4>)
3402064e:	4770      	bx	lr
34020650:	3410cf6c 	.word	0x3410cf6c

34020654 <_close_r>:
34020654:	b538      	push	{r3, r4, r5, lr}
34020656:	2300      	movs	r3, #0
34020658:	4d05      	ldr	r5, [pc, #20]	@ (34020670 <_close_r+0x1c>)
3402065a:	4604      	mov	r4, r0
3402065c:	4608      	mov	r0, r1
3402065e:	602b      	str	r3, [r5, #0]
34020660:	f7e1 fcd4 	bl	3400200c <_close>
34020664:	1c43      	adds	r3, r0, #1
34020666:	d102      	bne.n	3402066e <_close_r+0x1a>
34020668:	682b      	ldr	r3, [r5, #0]
3402066a:	b103      	cbz	r3, 3402066e <_close_r+0x1a>
3402066c:	6023      	str	r3, [r4, #0]
3402066e:	bd38      	pop	{r3, r4, r5, pc}
34020670:	341fa744 	.word	0x341fa744

34020674 <_lseek_r>:
34020674:	b538      	push	{r3, r4, r5, lr}
34020676:	4604      	mov	r4, r0
34020678:	4d06      	ldr	r5, [pc, #24]	@ (34020694 <_lseek_r+0x20>)
3402067a:	4608      	mov	r0, r1
3402067c:	4611      	mov	r1, r2
3402067e:	2200      	movs	r2, #0
34020680:	602a      	str	r2, [r5, #0]
34020682:	461a      	mov	r2, r3
34020684:	f7e1 fccc 	bl	34002020 <_lseek>
34020688:	1c43      	adds	r3, r0, #1
3402068a:	d102      	bne.n	34020692 <_lseek_r+0x1e>
3402068c:	682b      	ldr	r3, [r5, #0]
3402068e:	b103      	cbz	r3, 34020692 <_lseek_r+0x1e>
34020690:	6023      	str	r3, [r4, #0]
34020692:	bd38      	pop	{r3, r4, r5, pc}
34020694:	341fa744 	.word	0x341fa744

34020698 <_read_r>:
34020698:	b538      	push	{r3, r4, r5, lr}
3402069a:	4604      	mov	r4, r0
3402069c:	4d06      	ldr	r5, [pc, #24]	@ (340206b8 <_read_r+0x20>)
3402069e:	4608      	mov	r0, r1
340206a0:	4611      	mov	r1, r2
340206a2:	2200      	movs	r2, #0
340206a4:	602a      	str	r2, [r5, #0]
340206a6:	461a      	mov	r2, r3
340206a8:	f7e1 fca2 	bl	34001ff0 <_read>
340206ac:	1c43      	adds	r3, r0, #1
340206ae:	d102      	bne.n	340206b6 <_read_r+0x1e>
340206b0:	682b      	ldr	r3, [r5, #0]
340206b2:	b103      	cbz	r3, 340206b6 <_read_r+0x1e>
340206b4:	6023      	str	r3, [r4, #0]
340206b6:	bd38      	pop	{r3, r4, r5, pc}
340206b8:	341fa744 	.word	0x341fa744

340206bc <_write_r>:
340206bc:	b538      	push	{r3, r4, r5, lr}
340206be:	4604      	mov	r4, r0
340206c0:	4d06      	ldr	r5, [pc, #24]	@ (340206dc <_write_r+0x20>)
340206c2:	4608      	mov	r0, r1
340206c4:	4611      	mov	r1, r2
340206c6:	2200      	movs	r2, #0
340206c8:	602a      	str	r2, [r5, #0]
340206ca:	461a      	mov	r2, r3
340206cc:	f7e1 fbfc 	bl	34001ec8 <_write>
340206d0:	1c43      	adds	r3, r0, #1
340206d2:	d102      	bne.n	340206da <_write_r+0x1e>
340206d4:	682b      	ldr	r3, [r5, #0]
340206d6:	b103      	cbz	r3, 340206da <_write_r+0x1e>
340206d8:	6023      	str	r3, [r4, #0]
340206da:	bd38      	pop	{r3, r4, r5, pc}
340206dc:	341fa744 	.word	0x341fa744

340206e0 <__errno>:
340206e0:	4b01      	ldr	r3, [pc, #4]	@ (340206e8 <__errno+0x8>)
340206e2:	6818      	ldr	r0, [r3, #0]
340206e4:	4770      	bx	lr
340206e6:	bf00      	nop
340206e8:	3410ce2c 	.word	0x3410ce2c

340206ec <__libc_init_array>:
340206ec:	b570      	push	{r4, r5, r6, lr}
340206ee:	4d0d      	ldr	r5, [pc, #52]	@ (34020724 <__libc_init_array+0x38>)
340206f0:	2600      	movs	r6, #0
340206f2:	4c0d      	ldr	r4, [pc, #52]	@ (34020728 <__libc_init_array+0x3c>)
340206f4:	1b64      	subs	r4, r4, r5
340206f6:	10a4      	asrs	r4, r4, #2
340206f8:	42a6      	cmp	r6, r4
340206fa:	d109      	bne.n	34020710 <__libc_init_array+0x24>
340206fc:	4d0b      	ldr	r5, [pc, #44]	@ (3402072c <__libc_init_array+0x40>)
340206fe:	2600      	movs	r6, #0
34020700:	4c0b      	ldr	r4, [pc, #44]	@ (34020730 <__libc_init_array+0x44>)
34020702:	f005 fcb9 	bl	34026078 <_init>
34020706:	1b64      	subs	r4, r4, r5
34020708:	10a4      	asrs	r4, r4, #2
3402070a:	42a6      	cmp	r6, r4
3402070c:	d105      	bne.n	3402071a <__libc_init_array+0x2e>
3402070e:	bd70      	pop	{r4, r5, r6, pc}
34020710:	f855 3b04 	ldr.w	r3, [r5], #4
34020714:	3601      	adds	r6, #1
34020716:	4798      	blx	r3
34020718:	e7ee      	b.n	340206f8 <__libc_init_array+0xc>
3402071a:	f855 3b04 	ldr.w	r3, [r5], #4
3402071e:	3601      	adds	r6, #1
34020720:	4798      	blx	r3
34020722:	e7f2      	b.n	3402070a <__libc_init_array+0x1e>
34020724:	34108ca4 	.word	0x34108ca4
34020728:	34108ca4 	.word	0x34108ca4
3402072c:	34108ca4 	.word	0x34108ca4
34020730:	34108ca8 	.word	0x34108ca8

34020734 <__retarget_lock_init_recursive>:
34020734:	4770      	bx	lr

34020736 <__retarget_lock_acquire_recursive>:
34020736:	4770      	bx	lr

34020738 <__retarget_lock_release_recursive>:
34020738:	4770      	bx	lr

3402073a <strcpy>:
3402073a:	4603      	mov	r3, r0
3402073c:	f811 2b01 	ldrb.w	r2, [r1], #1
34020740:	f803 2b01 	strb.w	r2, [r3], #1
34020744:	2a00      	cmp	r2, #0
34020746:	d1f9      	bne.n	3402073c <strcpy+0x2>
34020748:	4770      	bx	lr

3402074a <memchr>:
3402074a:	b2c9      	uxtb	r1, r1
3402074c:	4603      	mov	r3, r0
3402074e:	4402      	add	r2, r0
34020750:	b510      	push	{r4, lr}
34020752:	4293      	cmp	r3, r2
34020754:	4618      	mov	r0, r3
34020756:	d101      	bne.n	3402075c <memchr+0x12>
34020758:	2000      	movs	r0, #0
3402075a:	e003      	b.n	34020764 <memchr+0x1a>
3402075c:	7804      	ldrb	r4, [r0, #0]
3402075e:	3301      	adds	r3, #1
34020760:	428c      	cmp	r4, r1
34020762:	d1f6      	bne.n	34020752 <memchr+0x8>
34020764:	bd10      	pop	{r4, pc}

34020766 <memcpy>:
34020766:	440a      	add	r2, r1
34020768:	1e43      	subs	r3, r0, #1
3402076a:	4291      	cmp	r1, r2
3402076c:	d100      	bne.n	34020770 <memcpy+0xa>
3402076e:	4770      	bx	lr
34020770:	b510      	push	{r4, lr}
34020772:	f811 4b01 	ldrb.w	r4, [r1], #1
34020776:	4291      	cmp	r1, r2
34020778:	f803 4f01 	strb.w	r4, [r3, #1]!
3402077c:	d1f9      	bne.n	34020772 <memcpy+0xc>
3402077e:	bd10      	pop	{r4, pc}

34020780 <abort>:
34020780:	2006      	movs	r0, #6
34020782:	b508      	push	{r3, lr}
34020784:	f001 fe34 	bl	340223f0 <raise>
34020788:	2001      	movs	r0, #1
3402078a:	f7e1 fc2b 	bl	34001fe4 <_exit>

3402078e <quorem>:
3402078e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34020792:	6903      	ldr	r3, [r0, #16]
34020794:	4607      	mov	r7, r0
34020796:	690c      	ldr	r4, [r1, #16]
34020798:	42a3      	cmp	r3, r4
3402079a:	f2c0 8083 	blt.w	340208a4 <quorem+0x116>
3402079e:	3c01      	subs	r4, #1
340207a0:	f100 0514 	add.w	r5, r0, #20
340207a4:	f101 0814 	add.w	r8, r1, #20
340207a8:	00a3      	lsls	r3, r4, #2
340207aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
340207ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
340207b2:	9300      	str	r3, [sp, #0]
340207b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
340207b8:	9301      	str	r3, [sp, #4]
340207ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
340207be:	3301      	adds	r3, #1
340207c0:	429a      	cmp	r2, r3
340207c2:	fbb2 f6f3 	udiv	r6, r2, r3
340207c6:	d331      	bcc.n	3402082c <quorem+0x9e>
340207c8:	f04f 0a00 	mov.w	sl, #0
340207cc:	46c4      	mov	ip, r8
340207ce:	46ae      	mov	lr, r5
340207d0:	46d3      	mov	fp, sl
340207d2:	f85c 3b04 	ldr.w	r3, [ip], #4
340207d6:	b298      	uxth	r0, r3
340207d8:	45e1      	cmp	r9, ip
340207da:	ea4f 4313 	mov.w	r3, r3, lsr #16
340207de:	fb06 a000 	mla	r0, r6, r0, sl
340207e2:	ea4f 4210 	mov.w	r2, r0, lsr #16
340207e6:	b280      	uxth	r0, r0
340207e8:	fb06 2303 	mla	r3, r6, r3, r2
340207ec:	f8de 2000 	ldr.w	r2, [lr]
340207f0:	b292      	uxth	r2, r2
340207f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
340207f6:	eba2 0200 	sub.w	r2, r2, r0
340207fa:	b29b      	uxth	r3, r3
340207fc:	f8de 0000 	ldr.w	r0, [lr]
34020800:	445a      	add	r2, fp
34020802:	ebc3 4322 	rsb	r3, r3, r2, asr #16
34020806:	b292      	uxth	r2, r2
34020808:	eb03 4310 	add.w	r3, r3, r0, lsr #16
3402080c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34020810:	ea4f 4b23 	mov.w	fp, r3, asr #16
34020814:	f84e 2b04 	str.w	r2, [lr], #4
34020818:	d2db      	bcs.n	340207d2 <quorem+0x44>
3402081a:	9b00      	ldr	r3, [sp, #0]
3402081c:	58eb      	ldr	r3, [r5, r3]
3402081e:	b92b      	cbnz	r3, 3402082c <quorem+0x9e>
34020820:	9b01      	ldr	r3, [sp, #4]
34020822:	3b04      	subs	r3, #4
34020824:	429d      	cmp	r5, r3
34020826:	461a      	mov	r2, r3
34020828:	d330      	bcc.n	3402088c <quorem+0xfe>
3402082a:	613c      	str	r4, [r7, #16]
3402082c:	4638      	mov	r0, r7
3402082e:	f001 f903 	bl	34021a38 <__mcmp>
34020832:	2800      	cmp	r0, #0
34020834:	db26      	blt.n	34020884 <quorem+0xf6>
34020836:	4629      	mov	r1, r5
34020838:	2000      	movs	r0, #0
3402083a:	f858 2b04 	ldr.w	r2, [r8], #4
3402083e:	f8d1 c000 	ldr.w	ip, [r1]
34020842:	fa1f fe82 	uxth.w	lr, r2
34020846:	45c1      	cmp	r9, r8
34020848:	fa1f f38c 	uxth.w	r3, ip
3402084c:	ea4f 4212 	mov.w	r2, r2, lsr #16
34020850:	eba3 030e 	sub.w	r3, r3, lr
34020854:	4403      	add	r3, r0
34020856:	ebc2 4223 	rsb	r2, r2, r3, asr #16
3402085a:	b29b      	uxth	r3, r3
3402085c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
34020860:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34020864:	ea4f 4022 	mov.w	r0, r2, asr #16
34020868:	f841 3b04 	str.w	r3, [r1], #4
3402086c:	d2e5      	bcs.n	3402083a <quorem+0xac>
3402086e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34020872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
34020876:	b922      	cbnz	r2, 34020882 <quorem+0xf4>
34020878:	3b04      	subs	r3, #4
3402087a:	429d      	cmp	r5, r3
3402087c:	461a      	mov	r2, r3
3402087e:	d30b      	bcc.n	34020898 <quorem+0x10a>
34020880:	613c      	str	r4, [r7, #16]
34020882:	3601      	adds	r6, #1
34020884:	4630      	mov	r0, r6
34020886:	b003      	add	sp, #12
34020888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402088c:	6812      	ldr	r2, [r2, #0]
3402088e:	3b04      	subs	r3, #4
34020890:	2a00      	cmp	r2, #0
34020892:	d1ca      	bne.n	3402082a <quorem+0x9c>
34020894:	3c01      	subs	r4, #1
34020896:	e7c5      	b.n	34020824 <quorem+0x96>
34020898:	6812      	ldr	r2, [r2, #0]
3402089a:	3b04      	subs	r3, #4
3402089c:	2a00      	cmp	r2, #0
3402089e:	d1ef      	bne.n	34020880 <quorem+0xf2>
340208a0:	3c01      	subs	r4, #1
340208a2:	e7ea      	b.n	3402087a <quorem+0xec>
340208a4:	2000      	movs	r0, #0
340208a6:	e7ee      	b.n	34020886 <quorem+0xf8>

340208a8 <_dtoa_r>:
340208a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340208ac:	69c7      	ldr	r7, [r0, #28]
340208ae:	4681      	mov	r9, r0
340208b0:	ed2d 8b02 	vpush	{d8}
340208b4:	b091      	sub	sp, #68	@ 0x44
340208b6:	ec55 4b10 	vmov	r4, r5, d0
340208ba:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
340208bc:	9107      	str	r1, [sp, #28]
340208be:	9209      	str	r2, [sp, #36]	@ 0x24
340208c0:	930d      	str	r3, [sp, #52]	@ 0x34
340208c2:	ed8d 0b02 	vstr	d0, [sp, #8]
340208c6:	b97f      	cbnz	r7, 340208e8 <_dtoa_r+0x40>
340208c8:	2010      	movs	r0, #16
340208ca:	f000 fd95 	bl	340213f8 <malloc>
340208ce:	4602      	mov	r2, r0
340208d0:	f8c9 001c 	str.w	r0, [r9, #28]
340208d4:	b920      	cbnz	r0, 340208e0 <_dtoa_r+0x38>
340208d6:	4ba0      	ldr	r3, [pc, #640]	@ (34020b58 <_dtoa_r+0x2b0>)
340208d8:	21ef      	movs	r1, #239	@ 0xef
340208da:	48a0      	ldr	r0, [pc, #640]	@ (34020b5c <_dtoa_r+0x2b4>)
340208dc:	f7fe fc72 	bl	3401f1c4 <__assert_func>
340208e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
340208e4:	6007      	str	r7, [r0, #0]
340208e6:	60c7      	str	r7, [r0, #12]
340208e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
340208ec:	6819      	ldr	r1, [r3, #0]
340208ee:	b159      	cbz	r1, 34020908 <_dtoa_r+0x60>
340208f0:	685a      	ldr	r2, [r3, #4]
340208f2:	2301      	movs	r3, #1
340208f4:	4648      	mov	r0, r9
340208f6:	4093      	lsls	r3, r2
340208f8:	604a      	str	r2, [r1, #4]
340208fa:	608b      	str	r3, [r1, #8]
340208fc:	f000 fe66 	bl	340215cc <_Bfree>
34020900:	f8d9 301c 	ldr.w	r3, [r9, #28]
34020904:	2200      	movs	r2, #0
34020906:	601a      	str	r2, [r3, #0]
34020908:	1e2b      	subs	r3, r5, #0
3402090a:	bfb7      	itett	lt
3402090c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
34020910:	2300      	movge	r3, #0
34020912:	2201      	movlt	r2, #1
34020914:	9303      	strlt	r3, [sp, #12]
34020916:	bfac      	ite	ge
34020918:	6033      	strge	r3, [r6, #0]
3402091a:	6032      	strlt	r2, [r6, #0]
3402091c:	4b90      	ldr	r3, [pc, #576]	@ (34020b60 <_dtoa_r+0x2b8>)
3402091e:	9e03      	ldr	r6, [sp, #12]
34020920:	43b3      	bics	r3, r6
34020922:	d110      	bne.n	34020946 <_dtoa_r+0x9e>
34020924:	f242 730f 	movw	r3, #9999	@ 0x270f
34020928:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3402092a:	6013      	str	r3, [r2, #0]
3402092c:	f3c6 0313 	ubfx	r3, r6, #0, #20
34020930:	4323      	orrs	r3, r4
34020932:	f000 84e6 	beq.w	34021302 <_dtoa_r+0xa5a>
34020936:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34020938:	4f8a      	ldr	r7, [pc, #552]	@ (34020b64 <_dtoa_r+0x2bc>)
3402093a:	2b00      	cmp	r3, #0
3402093c:	f000 84e8 	beq.w	34021310 <_dtoa_r+0xa68>
34020940:	1cfb      	adds	r3, r7, #3
34020942:	f000 bce3 	b.w	3402130c <_dtoa_r+0xa64>
34020946:	ed9d 8b02 	vldr	d8, [sp, #8]
3402094a:	eeb5 8b40 	vcmp.f64	d8, #0.0
3402094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020952:	d10a      	bne.n	3402096a <_dtoa_r+0xc2>
34020954:	2301      	movs	r3, #1
34020956:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34020958:	6013      	str	r3, [r2, #0]
3402095a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3402095c:	b113      	cbz	r3, 34020964 <_dtoa_r+0xbc>
3402095e:	4b82      	ldr	r3, [pc, #520]	@ (34020b68 <_dtoa_r+0x2c0>)
34020960:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
34020962:	6013      	str	r3, [r2, #0]
34020964:	4f81      	ldr	r7, [pc, #516]	@ (34020b6c <_dtoa_r+0x2c4>)
34020966:	f000 bcd3 	b.w	34021310 <_dtoa_r+0xa68>
3402096a:	aa0e      	add	r2, sp, #56	@ 0x38
3402096c:	eeb0 0b48 	vmov.f64	d0, d8
34020970:	a90f      	add	r1, sp, #60	@ 0x3c
34020972:	4648      	mov	r0, r9
34020974:	f001 f914 	bl	34021ba0 <__d2b>
34020978:	f3c6 530a 	ubfx	r3, r6, #20, #11
3402097c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3402097e:	9001      	str	r0, [sp, #4]
34020980:	2b00      	cmp	r3, #0
34020982:	d045      	beq.n	34020a10 <_dtoa_r+0x168>
34020984:	ee18 1a90 	vmov	r1, s17
34020988:	eeb0 7b48 	vmov.f64	d7, d8
3402098c:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
34020990:	2500      	movs	r5, #0
34020992:	f3c1 0113 	ubfx	r1, r1, #0, #20
34020996:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
3402099a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
3402099e:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
340209a2:	ee07 1a90 	vmov	s15, r1
340209a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 34020b40 <_dtoa_r+0x298>
340209aa:	ee37 7b46 	vsub.f64	d7, d7, d6
340209ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 34020b48 <_dtoa_r+0x2a0>
340209b2:	eea7 6b05 	vfma.f64	d6, d7, d5
340209b6:	ee07 3a90 	vmov	s15, r3
340209ba:	eeb8 4be7 	vcvt.f64.s32	d4, s15
340209be:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 34020b50 <_dtoa_r+0x2a8>
340209c2:	eeb0 7b46 	vmov.f64	d7, d6
340209c6:	eea4 7b05 	vfma.f64	d7, d4, d5
340209ca:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
340209ce:	eefd 6bc7 	vcvt.s32.f64	s13, d7
340209d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340209d6:	ee16 8a90 	vmov	r8, s13
340209da:	d508      	bpl.n	340209ee <_dtoa_r+0x146>
340209dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
340209e0:	eeb4 6b47 	vcmp.f64	d6, d7
340209e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340209e8:	bf18      	it	ne
340209ea:	f108 38ff 	addne.w	r8, r8, #4294967295
340209ee:	f1b8 0f16 	cmp.w	r8, #22
340209f2:	d82d      	bhi.n	34020a50 <_dtoa_r+0x1a8>
340209f4:	495e      	ldr	r1, [pc, #376]	@ (34020b70 <_dtoa_r+0x2c8>)
340209f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
340209fa:	ed91 7b00 	vldr	d7, [r1]
340209fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
34020a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020a06:	d501      	bpl.n	34020a0c <_dtoa_r+0x164>
34020a08:	f108 38ff 	add.w	r8, r8, #4294967295
34020a0c:	2100      	movs	r1, #0
34020a0e:	e020      	b.n	34020a52 <_dtoa_r+0x1aa>
34020a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34020a12:	2501      	movs	r5, #1
34020a14:	4413      	add	r3, r2
34020a16:	f203 4132 	addw	r1, r3, #1074	@ 0x432
34020a1a:	2920      	cmp	r1, #32
34020a1c:	bfc9      	itett	gt
34020a1e:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
34020a22:	f1c1 0120 	rsble	r1, r1, #32
34020a26:	408e      	lslgt	r6, r1
34020a28:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
34020a2c:	bfd8      	it	le
34020a2e:	fa04 f101 	lslle.w	r1, r4, r1
34020a32:	f103 33ff 	add.w	r3, r3, #4294967295
34020a36:	bfc4      	itt	gt
34020a38:	fa24 f101 	lsrgt.w	r1, r4, r1
34020a3c:	4331      	orrgt	r1, r6
34020a3e:	ee07 1a90 	vmov	s15, r1
34020a42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34020a46:	ee17 1a90 	vmov	r1, s15
34020a4a:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
34020a4e:	e7a6      	b.n	3402099e <_dtoa_r+0xf6>
34020a50:	2101      	movs	r1, #1
34020a52:	1ad2      	subs	r2, r2, r3
34020a54:	910c      	str	r1, [sp, #48]	@ 0x30
34020a56:	1e53      	subs	r3, r2, #1
34020a58:	9306      	str	r3, [sp, #24]
34020a5a:	bf49      	itett	mi
34020a5c:	f1c2 0301 	rsbmi	r3, r2, #1
34020a60:	2300      	movpl	r3, #0
34020a62:	9304      	strmi	r3, [sp, #16]
34020a64:	2300      	movmi	r3, #0
34020a66:	bf54      	ite	pl
34020a68:	9304      	strpl	r3, [sp, #16]
34020a6a:	9306      	strmi	r3, [sp, #24]
34020a6c:	f1b8 0f00 	cmp.w	r8, #0
34020a70:	db16      	blt.n	34020aa0 <_dtoa_r+0x1f8>
34020a72:	9b06      	ldr	r3, [sp, #24]
34020a74:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
34020a78:	4443      	add	r3, r8
34020a7a:	9306      	str	r3, [sp, #24]
34020a7c:	2300      	movs	r3, #0
34020a7e:	9a07      	ldr	r2, [sp, #28]
34020a80:	2a09      	cmp	r2, #9
34020a82:	d843      	bhi.n	34020b0c <_dtoa_r+0x264>
34020a84:	2a05      	cmp	r2, #5
34020a86:	bfc5      	ittet	gt
34020a88:	3a04      	subgt	r2, #4
34020a8a:	2400      	movgt	r4, #0
34020a8c:	2401      	movle	r4, #1
34020a8e:	9207      	strgt	r2, [sp, #28]
34020a90:	9a07      	ldr	r2, [sp, #28]
34020a92:	3a02      	subs	r2, #2
34020a94:	2a03      	cmp	r2, #3
34020a96:	d844      	bhi.n	34020b22 <_dtoa_r+0x27a>
34020a98:	e8df f002 	tbb	[pc, r2]
34020a9c:	0b173634 	.word	0x0b173634
34020aa0:	9b04      	ldr	r3, [sp, #16]
34020aa2:	2200      	movs	r2, #0
34020aa4:	eba3 0308 	sub.w	r3, r3, r8
34020aa8:	920a      	str	r2, [sp, #40]	@ 0x28
34020aaa:	9304      	str	r3, [sp, #16]
34020aac:	f1c8 0300 	rsb	r3, r8, #0
34020ab0:	e7e5      	b.n	34020a7e <_dtoa_r+0x1d6>
34020ab2:	2201      	movs	r2, #1
34020ab4:	9208      	str	r2, [sp, #32]
34020ab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34020ab8:	eb08 0b02 	add.w	fp, r8, r2
34020abc:	f10b 0a01 	add.w	sl, fp, #1
34020ac0:	4652      	mov	r2, sl
34020ac2:	2a01      	cmp	r2, #1
34020ac4:	bfb8      	it	lt
34020ac6:	2201      	movlt	r2, #1
34020ac8:	e006      	b.n	34020ad8 <_dtoa_r+0x230>
34020aca:	2201      	movs	r2, #1
34020acc:	9208      	str	r2, [sp, #32]
34020ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34020ad0:	2a00      	cmp	r2, #0
34020ad2:	dd29      	ble.n	34020b28 <_dtoa_r+0x280>
34020ad4:	4693      	mov	fp, r2
34020ad6:	4692      	mov	sl, r2
34020ad8:	f8d9 701c 	ldr.w	r7, [r9, #28]
34020adc:	2100      	movs	r1, #0
34020ade:	2004      	movs	r0, #4
34020ae0:	f100 0614 	add.w	r6, r0, #20
34020ae4:	4296      	cmp	r6, r2
34020ae6:	d926      	bls.n	34020b36 <_dtoa_r+0x28e>
34020ae8:	6079      	str	r1, [r7, #4]
34020aea:	4648      	mov	r0, r9
34020aec:	9305      	str	r3, [sp, #20]
34020aee:	f000 fd2d 	bl	3402154c <_Balloc>
34020af2:	9b05      	ldr	r3, [sp, #20]
34020af4:	4607      	mov	r7, r0
34020af6:	2800      	cmp	r0, #0
34020af8:	d13e      	bne.n	34020b78 <_dtoa_r+0x2d0>
34020afa:	4b1e      	ldr	r3, [pc, #120]	@ (34020b74 <_dtoa_r+0x2cc>)
34020afc:	4602      	mov	r2, r0
34020afe:	f240 11af 	movw	r1, #431	@ 0x1af
34020b02:	e6ea      	b.n	340208da <_dtoa_r+0x32>
34020b04:	2200      	movs	r2, #0
34020b06:	e7e1      	b.n	34020acc <_dtoa_r+0x224>
34020b08:	2200      	movs	r2, #0
34020b0a:	e7d3      	b.n	34020ab4 <_dtoa_r+0x20c>
34020b0c:	2401      	movs	r4, #1
34020b0e:	2200      	movs	r2, #0
34020b10:	e9cd 2407 	strd	r2, r4, [sp, #28]
34020b14:	f04f 3bff 	mov.w	fp, #4294967295
34020b18:	2100      	movs	r1, #0
34020b1a:	2212      	movs	r2, #18
34020b1c:	46da      	mov	sl, fp
34020b1e:	9109      	str	r1, [sp, #36]	@ 0x24
34020b20:	e7da      	b.n	34020ad8 <_dtoa_r+0x230>
34020b22:	2201      	movs	r2, #1
34020b24:	9208      	str	r2, [sp, #32]
34020b26:	e7f5      	b.n	34020b14 <_dtoa_r+0x26c>
34020b28:	f04f 0b01 	mov.w	fp, #1
34020b2c:	46da      	mov	sl, fp
34020b2e:	465a      	mov	r2, fp
34020b30:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
34020b34:	e7d0      	b.n	34020ad8 <_dtoa_r+0x230>
34020b36:	3101      	adds	r1, #1
34020b38:	0040      	lsls	r0, r0, #1
34020b3a:	e7d1      	b.n	34020ae0 <_dtoa_r+0x238>
34020b3c:	f3af 8000 	nop.w
34020b40:	636f4361 	.word	0x636f4361
34020b44:	3fd287a7 	.word	0x3fd287a7
34020b48:	8b60c8b3 	.word	0x8b60c8b3
34020b4c:	3fc68a28 	.word	0x3fc68a28
34020b50:	509f79fb 	.word	0x509f79fb
34020b54:	3fd34413 	.word	0x3fd34413
34020b58:	3402c9e1 	.word	0x3402c9e1
34020b5c:	3402c9f8 	.word	0x3402c9f8
34020b60:	7ff00000 	.word	0x7ff00000
34020b64:	3402c9dd 	.word	0x3402c9dd
34020b68:	34026d18 	.word	0x34026d18
34020b6c:	34026d17 	.word	0x34026d17
34020b70:	341063c8 	.word	0x341063c8
34020b74:	3402ca50 	.word	0x3402ca50
34020b78:	f8d9 201c 	ldr.w	r2, [r9, #28]
34020b7c:	f1ba 0f0e 	cmp.w	sl, #14
34020b80:	6010      	str	r0, [r2, #0]
34020b82:	d86e      	bhi.n	34020c62 <_dtoa_r+0x3ba>
34020b84:	2c00      	cmp	r4, #0
34020b86:	d06c      	beq.n	34020c62 <_dtoa_r+0x3ba>
34020b88:	f1b8 0f00 	cmp.w	r8, #0
34020b8c:	f340 80b4 	ble.w	34020cf8 <_dtoa_r+0x450>
34020b90:	f008 010f 	and.w	r1, r8, #15
34020b94:	4ac7      	ldr	r2, [pc, #796]	@ (34020eb4 <_dtoa_r+0x60c>)
34020b96:	f418 7f80 	tst.w	r8, #256	@ 0x100
34020b9a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
34020b9e:	ea4f 1128 	mov.w	r1, r8, asr #4
34020ba2:	ed92 7b00 	vldr	d7, [r2]
34020ba6:	f000 809b 	beq.w	34020ce0 <_dtoa_r+0x438>
34020baa:	4ac3      	ldr	r2, [pc, #780]	@ (34020eb8 <_dtoa_r+0x610>)
34020bac:	f001 010f 	and.w	r1, r1, #15
34020bb0:	ed92 6b08 	vldr	d6, [r2, #32]
34020bb4:	2203      	movs	r2, #3
34020bb6:	ee88 6b06 	vdiv.f64	d6, d8, d6
34020bba:	ed8d 6b02 	vstr	d6, [sp, #8]
34020bbe:	48be      	ldr	r0, [pc, #760]	@ (34020eb8 <_dtoa_r+0x610>)
34020bc0:	2900      	cmp	r1, #0
34020bc2:	f040 808f 	bne.w	34020ce4 <_dtoa_r+0x43c>
34020bc6:	ed9d 6b02 	vldr	d6, [sp, #8]
34020bca:	ee86 7b07 	vdiv.f64	d7, d6, d7
34020bce:	ed8d 7b02 	vstr	d7, [sp, #8]
34020bd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
34020bd4:	ed9d 7b02 	vldr	d7, [sp, #8]
34020bd8:	2900      	cmp	r1, #0
34020bda:	f000 80b3 	beq.w	34020d44 <_dtoa_r+0x49c>
34020bde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
34020be2:	eeb4 7bc6 	vcmpe.f64	d7, d6
34020be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020bea:	f140 80ab 	bpl.w	34020d44 <_dtoa_r+0x49c>
34020bee:	f1ba 0f00 	cmp.w	sl, #0
34020bf2:	f000 80a7 	beq.w	34020d44 <_dtoa_r+0x49c>
34020bf6:	f1bb 0f00 	cmp.w	fp, #0
34020bfa:	dd30      	ble.n	34020c5e <_dtoa_r+0x3b6>
34020bfc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
34020c00:	f108 31ff 	add.w	r1, r8, #4294967295
34020c04:	3201      	adds	r2, #1
34020c06:	465c      	mov	r4, fp
34020c08:	9105      	str	r1, [sp, #20]
34020c0a:	ee27 7b06 	vmul.f64	d7, d7, d6
34020c0e:	ed8d 7b02 	vstr	d7, [sp, #8]
34020c12:	ee07 2a90 	vmov	s15, r2
34020c16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
34020c1a:	ed9d 6b02 	vldr	d6, [sp, #8]
34020c1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34020c22:	eea7 5b06 	vfma.f64	d5, d7, d6
34020c26:	ee15 2a90 	vmov	r2, s11
34020c2a:	ec51 0b15 	vmov	r0, r1, d5
34020c2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
34020c32:	2c00      	cmp	r4, #0
34020c34:	f040 808a 	bne.w	34020d4c <_dtoa_r+0x4a4>
34020c38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
34020c3c:	ee36 6b47 	vsub.f64	d6, d6, d7
34020c40:	ec41 0b17 	vmov	d7, r0, r1
34020c44:	eeb4 6bc7 	vcmpe.f64	d6, d7
34020c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020c4c:	f300 826a 	bgt.w	34021124 <_dtoa_r+0x87c>
34020c50:	eeb1 7b47 	vneg.f64	d7, d7
34020c54:	eeb4 6bc7 	vcmpe.f64	d6, d7
34020c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020c5c:	d423      	bmi.n	34020ca6 <_dtoa_r+0x3fe>
34020c5e:	ed8d 8b02 	vstr	d8, [sp, #8]
34020c62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
34020c64:	2a00      	cmp	r2, #0
34020c66:	f2c0 8129 	blt.w	34020ebc <_dtoa_r+0x614>
34020c6a:	f1b8 0f0e 	cmp.w	r8, #14
34020c6e:	f300 8125 	bgt.w	34020ebc <_dtoa_r+0x614>
34020c72:	4b90      	ldr	r3, [pc, #576]	@ (34020eb4 <_dtoa_r+0x60c>)
34020c74:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
34020c78:	ed93 6b00 	vldr	d6, [r3]
34020c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020c7e:	2b00      	cmp	r3, #0
34020c80:	f280 80c8 	bge.w	34020e14 <_dtoa_r+0x56c>
34020c84:	f1ba 0f00 	cmp.w	sl, #0
34020c88:	f300 80c4 	bgt.w	34020e14 <_dtoa_r+0x56c>
34020c8c:	d10b      	bne.n	34020ca6 <_dtoa_r+0x3fe>
34020c8e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
34020c92:	ee26 6b07 	vmul.f64	d6, d6, d7
34020c96:	ed9d 7b02 	vldr	d7, [sp, #8]
34020c9a:	eeb4 6bc7 	vcmpe.f64	d6, d7
34020c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020ca2:	f2c0 823c 	blt.w	3402111e <_dtoa_r+0x876>
34020ca6:	2400      	movs	r4, #0
34020ca8:	4625      	mov	r5, r4
34020caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34020cac:	463e      	mov	r6, r7
34020cae:	43db      	mvns	r3, r3
34020cb0:	9305      	str	r3, [sp, #20]
34020cb2:	f04f 0800 	mov.w	r8, #0
34020cb6:	4621      	mov	r1, r4
34020cb8:	4648      	mov	r0, r9
34020cba:	f000 fc87 	bl	340215cc <_Bfree>
34020cbe:	2d00      	cmp	r5, #0
34020cc0:	f000 80a2 	beq.w	34020e08 <_dtoa_r+0x560>
34020cc4:	f1b8 0f00 	cmp.w	r8, #0
34020cc8:	d005      	beq.n	34020cd6 <_dtoa_r+0x42e>
34020cca:	45a8      	cmp	r8, r5
34020ccc:	d003      	beq.n	34020cd6 <_dtoa_r+0x42e>
34020cce:	4641      	mov	r1, r8
34020cd0:	4648      	mov	r0, r9
34020cd2:	f000 fc7b 	bl	340215cc <_Bfree>
34020cd6:	4629      	mov	r1, r5
34020cd8:	4648      	mov	r0, r9
34020cda:	f000 fc77 	bl	340215cc <_Bfree>
34020cde:	e093      	b.n	34020e08 <_dtoa_r+0x560>
34020ce0:	2202      	movs	r2, #2
34020ce2:	e76c      	b.n	34020bbe <_dtoa_r+0x316>
34020ce4:	07cc      	lsls	r4, r1, #31
34020ce6:	d504      	bpl.n	34020cf2 <_dtoa_r+0x44a>
34020ce8:	3201      	adds	r2, #1
34020cea:	ed90 6b00 	vldr	d6, [r0]
34020cee:	ee27 7b06 	vmul.f64	d7, d7, d6
34020cf2:	1049      	asrs	r1, r1, #1
34020cf4:	3008      	adds	r0, #8
34020cf6:	e763      	b.n	34020bc0 <_dtoa_r+0x318>
34020cf8:	d022      	beq.n	34020d40 <_dtoa_r+0x498>
34020cfa:	f1c8 0100 	rsb	r1, r8, #0
34020cfe:	4a6d      	ldr	r2, [pc, #436]	@ (34020eb4 <_dtoa_r+0x60c>)
34020d00:	2400      	movs	r4, #0
34020d02:	f001 000f 	and.w	r0, r1, #15
34020d06:	1109      	asrs	r1, r1, #4
34020d08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
34020d0c:	486a      	ldr	r0, [pc, #424]	@ (34020eb8 <_dtoa_r+0x610>)
34020d0e:	ed92 7b00 	vldr	d7, [r2]
34020d12:	2202      	movs	r2, #2
34020d14:	ee28 7b07 	vmul.f64	d7, d8, d7
34020d18:	ed8d 7b02 	vstr	d7, [sp, #8]
34020d1c:	b929      	cbnz	r1, 34020d2a <_dtoa_r+0x482>
34020d1e:	2c00      	cmp	r4, #0
34020d20:	f43f af57 	beq.w	34020bd2 <_dtoa_r+0x32a>
34020d24:	ed8d 7b02 	vstr	d7, [sp, #8]
34020d28:	e753      	b.n	34020bd2 <_dtoa_r+0x32a>
34020d2a:	07ce      	lsls	r6, r1, #31
34020d2c:	d505      	bpl.n	34020d3a <_dtoa_r+0x492>
34020d2e:	3201      	adds	r2, #1
34020d30:	2401      	movs	r4, #1
34020d32:	ed90 6b00 	vldr	d6, [r0]
34020d36:	ee27 7b06 	vmul.f64	d7, d7, d6
34020d3a:	1049      	asrs	r1, r1, #1
34020d3c:	3008      	adds	r0, #8
34020d3e:	e7ed      	b.n	34020d1c <_dtoa_r+0x474>
34020d40:	2202      	movs	r2, #2
34020d42:	e746      	b.n	34020bd2 <_dtoa_r+0x32a>
34020d44:	4654      	mov	r4, sl
34020d46:	f8cd 8014 	str.w	r8, [sp, #20]
34020d4a:	e762      	b.n	34020c12 <_dtoa_r+0x36a>
34020d4c:	4a59      	ldr	r2, [pc, #356]	@ (34020eb4 <_dtoa_r+0x60c>)
34020d4e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
34020d52:	443c      	add	r4, r7
34020d54:	ed12 4b02 	vldr	d4, [r2, #-8]
34020d58:	9a08      	ldr	r2, [sp, #32]
34020d5a:	ec41 0b17 	vmov	d7, r0, r1
34020d5e:	b34a      	cbz	r2, 34020db4 <_dtoa_r+0x50c>
34020d60:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
34020d64:	463e      	mov	r6, r7
34020d66:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
34020d6a:	ee83 5b04 	vdiv.f64	d5, d3, d4
34020d6e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
34020d72:	ee35 7b47 	vsub.f64	d7, d5, d7
34020d76:	eefd 4bc6 	vcvt.s32.f64	s9, d6
34020d7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
34020d7e:	ee14 2a90 	vmov	r2, s9
34020d82:	3230      	adds	r2, #48	@ 0x30
34020d84:	ee36 6b45 	vsub.f64	d6, d6, d5
34020d88:	f806 2b01 	strb.w	r2, [r6], #1
34020d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
34020d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020d94:	d438      	bmi.n	34020e08 <_dtoa_r+0x560>
34020d96:	ee32 5b46 	vsub.f64	d5, d2, d6
34020d9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
34020d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020da2:	d46e      	bmi.n	34020e82 <_dtoa_r+0x5da>
34020da4:	42a6      	cmp	r6, r4
34020da6:	f43f af5a 	beq.w	34020c5e <_dtoa_r+0x3b6>
34020daa:	ee27 7b03 	vmul.f64	d7, d7, d3
34020dae:	ee26 6b03 	vmul.f64	d6, d6, d3
34020db2:	e7e0      	b.n	34020d76 <_dtoa_r+0x4ce>
34020db4:	ee27 7b04 	vmul.f64	d7, d7, d4
34020db8:	4621      	mov	r1, r4
34020dba:	463e      	mov	r6, r7
34020dbc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
34020dc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
34020dc4:	ee14 2a90 	vmov	r2, s9
34020dc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
34020dcc:	3230      	adds	r2, #48	@ 0x30
34020dce:	ee36 6b45 	vsub.f64	d6, d6, d5
34020dd2:	f806 2b01 	strb.w	r2, [r6], #1
34020dd6:	42a6      	cmp	r6, r4
34020dd8:	d119      	bne.n	34020e0e <_dtoa_r+0x566>
34020dda:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
34020dde:	ee37 4b05 	vadd.f64	d4, d7, d5
34020de2:	eeb4 6bc4 	vcmpe.f64	d6, d4
34020de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020dea:	dc4a      	bgt.n	34020e82 <_dtoa_r+0x5da>
34020dec:	ee35 5b47 	vsub.f64	d5, d5, d7
34020df0:	eeb4 6bc5 	vcmpe.f64	d6, d5
34020df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020df8:	f57f af31 	bpl.w	34020c5e <_dtoa_r+0x3b6>
34020dfc:	460e      	mov	r6, r1
34020dfe:	3901      	subs	r1, #1
34020e00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
34020e04:	2b30      	cmp	r3, #48	@ 0x30
34020e06:	d0f9      	beq.n	34020dfc <_dtoa_r+0x554>
34020e08:	f8dd 8014 	ldr.w	r8, [sp, #20]
34020e0c:	e027      	b.n	34020e5e <_dtoa_r+0x5b6>
34020e0e:	ee26 6b03 	vmul.f64	d6, d6, d3
34020e12:	e7d5      	b.n	34020dc0 <_dtoa_r+0x518>
34020e14:	ed9d 7b02 	vldr	d7, [sp, #8]
34020e18:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
34020e1c:	463e      	mov	r6, r7
34020e1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
34020e22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
34020e26:	ee15 3a10 	vmov	r3, s10
34020e2a:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
34020e2e:	3330      	adds	r3, #48	@ 0x30
34020e30:	eea3 7b46 	vfms.f64	d7, d3, d6
34020e34:	f806 3b01 	strb.w	r3, [r6], #1
34020e38:	1bf3      	subs	r3, r6, r7
34020e3a:	459a      	cmp	sl, r3
34020e3c:	d132      	bne.n	34020ea4 <_dtoa_r+0x5fc>
34020e3e:	ee37 7b07 	vadd.f64	d7, d7, d7
34020e42:	eeb4 7bc6 	vcmpe.f64	d7, d6
34020e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020e4a:	dc18      	bgt.n	34020e7e <_dtoa_r+0x5d6>
34020e4c:	eeb4 7b46 	vcmp.f64	d7, d6
34020e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020e54:	d103      	bne.n	34020e5e <_dtoa_r+0x5b6>
34020e56:	ee15 3a10 	vmov	r3, s10
34020e5a:	07db      	lsls	r3, r3, #31
34020e5c:	d40f      	bmi.n	34020e7e <_dtoa_r+0x5d6>
34020e5e:	9901      	ldr	r1, [sp, #4]
34020e60:	4648      	mov	r0, r9
34020e62:	f000 fbb3 	bl	340215cc <_Bfree>
34020e66:	2300      	movs	r3, #0
34020e68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34020e6a:	7033      	strb	r3, [r6, #0]
34020e6c:	f108 0301 	add.w	r3, r8, #1
34020e70:	6013      	str	r3, [r2, #0]
34020e72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34020e74:	2b00      	cmp	r3, #0
34020e76:	f000 824b 	beq.w	34021310 <_dtoa_r+0xa68>
34020e7a:	601e      	str	r6, [r3, #0]
34020e7c:	e248      	b.n	34021310 <_dtoa_r+0xa68>
34020e7e:	f8cd 8014 	str.w	r8, [sp, #20]
34020e82:	4633      	mov	r3, r6
34020e84:	461e      	mov	r6, r3
34020e86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
34020e8a:	2a39      	cmp	r2, #57	@ 0x39
34020e8c:	d106      	bne.n	34020e9c <_dtoa_r+0x5f4>
34020e8e:	429f      	cmp	r7, r3
34020e90:	d1f8      	bne.n	34020e84 <_dtoa_r+0x5dc>
34020e92:	9a05      	ldr	r2, [sp, #20]
34020e94:	3201      	adds	r2, #1
34020e96:	9205      	str	r2, [sp, #20]
34020e98:	2230      	movs	r2, #48	@ 0x30
34020e9a:	703a      	strb	r2, [r7, #0]
34020e9c:	781a      	ldrb	r2, [r3, #0]
34020e9e:	3201      	adds	r2, #1
34020ea0:	701a      	strb	r2, [r3, #0]
34020ea2:	e7b1      	b.n	34020e08 <_dtoa_r+0x560>
34020ea4:	ee27 7b04 	vmul.f64	d7, d7, d4
34020ea8:	eeb5 7b40 	vcmp.f64	d7, #0.0
34020eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34020eb0:	d1b5      	bne.n	34020e1e <_dtoa_r+0x576>
34020eb2:	e7d4      	b.n	34020e5e <_dtoa_r+0x5b6>
34020eb4:	341063c8 	.word	0x341063c8
34020eb8:	341063a0 	.word	0x341063a0
34020ebc:	9908      	ldr	r1, [sp, #32]
34020ebe:	2900      	cmp	r1, #0
34020ec0:	f000 80e9 	beq.w	34021096 <_dtoa_r+0x7ee>
34020ec4:	9907      	ldr	r1, [sp, #28]
34020ec6:	2901      	cmp	r1, #1
34020ec8:	f300 80cb 	bgt.w	34021062 <_dtoa_r+0x7ba>
34020ecc:	2d00      	cmp	r5, #0
34020ece:	f000 80c4 	beq.w	3402105a <_dtoa_r+0x7b2>
34020ed2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
34020ed6:	461c      	mov	r4, r3
34020ed8:	9e04      	ldr	r6, [sp, #16]
34020eda:	9305      	str	r3, [sp, #20]
34020edc:	2101      	movs	r1, #1
34020ede:	9b04      	ldr	r3, [sp, #16]
34020ee0:	4648      	mov	r0, r9
34020ee2:	4413      	add	r3, r2
34020ee4:	9304      	str	r3, [sp, #16]
34020ee6:	9b06      	ldr	r3, [sp, #24]
34020ee8:	4413      	add	r3, r2
34020eea:	9306      	str	r3, [sp, #24]
34020eec:	f000 fc24 	bl	34021738 <__i2b>
34020ef0:	9b05      	ldr	r3, [sp, #20]
34020ef2:	4605      	mov	r5, r0
34020ef4:	b166      	cbz	r6, 34020f10 <_dtoa_r+0x668>
34020ef6:	9a06      	ldr	r2, [sp, #24]
34020ef8:	2a00      	cmp	r2, #0
34020efa:	dd09      	ble.n	34020f10 <_dtoa_r+0x668>
34020efc:	42b2      	cmp	r2, r6
34020efe:	9904      	ldr	r1, [sp, #16]
34020f00:	bfa8      	it	ge
34020f02:	4632      	movge	r2, r6
34020f04:	1a89      	subs	r1, r1, r2
34020f06:	1ab6      	subs	r6, r6, r2
34020f08:	9104      	str	r1, [sp, #16]
34020f0a:	9906      	ldr	r1, [sp, #24]
34020f0c:	1a8a      	subs	r2, r1, r2
34020f0e:	9206      	str	r2, [sp, #24]
34020f10:	b30b      	cbz	r3, 34020f56 <_dtoa_r+0x6ae>
34020f12:	9a08      	ldr	r2, [sp, #32]
34020f14:	2a00      	cmp	r2, #0
34020f16:	f000 80c5 	beq.w	340210a4 <_dtoa_r+0x7fc>
34020f1a:	2c00      	cmp	r4, #0
34020f1c:	f000 80bf 	beq.w	3402109e <_dtoa_r+0x7f6>
34020f20:	4629      	mov	r1, r5
34020f22:	4622      	mov	r2, r4
34020f24:	4648      	mov	r0, r9
34020f26:	930b      	str	r3, [sp, #44]	@ 0x2c
34020f28:	f000 fcc0 	bl	340218ac <__pow5mult>
34020f2c:	9a01      	ldr	r2, [sp, #4]
34020f2e:	4601      	mov	r1, r0
34020f30:	4605      	mov	r5, r0
34020f32:	4648      	mov	r0, r9
34020f34:	f000 fc16 	bl	34021764 <__multiply>
34020f38:	9901      	ldr	r1, [sp, #4]
34020f3a:	9005      	str	r0, [sp, #20]
34020f3c:	4648      	mov	r0, r9
34020f3e:	f000 fb45 	bl	340215cc <_Bfree>
34020f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34020f44:	1b1b      	subs	r3, r3, r4
34020f46:	f000 80b0 	beq.w	340210aa <_dtoa_r+0x802>
34020f4a:	461a      	mov	r2, r3
34020f4c:	9905      	ldr	r1, [sp, #20]
34020f4e:	4648      	mov	r0, r9
34020f50:	f000 fcac 	bl	340218ac <__pow5mult>
34020f54:	9001      	str	r0, [sp, #4]
34020f56:	2101      	movs	r1, #1
34020f58:	4648      	mov	r0, r9
34020f5a:	f000 fbed 	bl	34021738 <__i2b>
34020f5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34020f60:	4604      	mov	r4, r0
34020f62:	2b00      	cmp	r3, #0
34020f64:	f000 81da 	beq.w	3402131c <_dtoa_r+0xa74>
34020f68:	461a      	mov	r2, r3
34020f6a:	4601      	mov	r1, r0
34020f6c:	4648      	mov	r0, r9
34020f6e:	f000 fc9d 	bl	340218ac <__pow5mult>
34020f72:	9b07      	ldr	r3, [sp, #28]
34020f74:	4604      	mov	r4, r0
34020f76:	2b01      	cmp	r3, #1
34020f78:	f300 80a0 	bgt.w	340210bc <_dtoa_r+0x814>
34020f7c:	9b02      	ldr	r3, [sp, #8]
34020f7e:	2b00      	cmp	r3, #0
34020f80:	f040 8096 	bne.w	340210b0 <_dtoa_r+0x808>
34020f84:	9b03      	ldr	r3, [sp, #12]
34020f86:	f3c3 0213 	ubfx	r2, r3, #0, #20
34020f8a:	2a00      	cmp	r2, #0
34020f8c:	f040 8092 	bne.w	340210b4 <_dtoa_r+0x80c>
34020f90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34020f94:	0d12      	lsrs	r2, r2, #20
34020f96:	0512      	lsls	r2, r2, #20
34020f98:	2a00      	cmp	r2, #0
34020f9a:	f000 808d 	beq.w	340210b8 <_dtoa_r+0x810>
34020f9e:	9b04      	ldr	r3, [sp, #16]
34020fa0:	3301      	adds	r3, #1
34020fa2:	9304      	str	r3, [sp, #16]
34020fa4:	9b06      	ldr	r3, [sp, #24]
34020fa6:	3301      	adds	r3, #1
34020fa8:	9306      	str	r3, [sp, #24]
34020faa:	2301      	movs	r3, #1
34020fac:	930b      	str	r3, [sp, #44]	@ 0x2c
34020fae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34020fb0:	2b00      	cmp	r3, #0
34020fb2:	f000 81b9 	beq.w	34021328 <_dtoa_r+0xa80>
34020fb6:	6922      	ldr	r2, [r4, #16]
34020fb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
34020fbc:	6910      	ldr	r0, [r2, #16]
34020fbe:	f000 fb6f 	bl	340216a0 <__hi0bits>
34020fc2:	f1c0 0020 	rsb	r0, r0, #32
34020fc6:	9b06      	ldr	r3, [sp, #24]
34020fc8:	4418      	add	r0, r3
34020fca:	f010 001f 	ands.w	r0, r0, #31
34020fce:	f000 8081 	beq.w	340210d4 <_dtoa_r+0x82c>
34020fd2:	f1c0 0220 	rsb	r2, r0, #32
34020fd6:	2a04      	cmp	r2, #4
34020fd8:	dd73      	ble.n	340210c2 <_dtoa_r+0x81a>
34020fda:	f1c0 001c 	rsb	r0, r0, #28
34020fde:	9b04      	ldr	r3, [sp, #16]
34020fe0:	4403      	add	r3, r0
34020fe2:	4406      	add	r6, r0
34020fe4:	9304      	str	r3, [sp, #16]
34020fe6:	9b06      	ldr	r3, [sp, #24]
34020fe8:	4403      	add	r3, r0
34020fea:	9306      	str	r3, [sp, #24]
34020fec:	9b04      	ldr	r3, [sp, #16]
34020fee:	2b00      	cmp	r3, #0
34020ff0:	dd05      	ble.n	34020ffe <_dtoa_r+0x756>
34020ff2:	461a      	mov	r2, r3
34020ff4:	9901      	ldr	r1, [sp, #4]
34020ff6:	4648      	mov	r0, r9
34020ff8:	f000 fcb2 	bl	34021960 <__lshift>
34020ffc:	9001      	str	r0, [sp, #4]
34020ffe:	9b06      	ldr	r3, [sp, #24]
34021000:	2b00      	cmp	r3, #0
34021002:	dd05      	ble.n	34021010 <_dtoa_r+0x768>
34021004:	4621      	mov	r1, r4
34021006:	461a      	mov	r2, r3
34021008:	4648      	mov	r0, r9
3402100a:	f000 fca9 	bl	34021960 <__lshift>
3402100e:	4604      	mov	r4, r0
34021010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34021012:	2b00      	cmp	r3, #0
34021014:	d060      	beq.n	340210d8 <_dtoa_r+0x830>
34021016:	4621      	mov	r1, r4
34021018:	9801      	ldr	r0, [sp, #4]
3402101a:	f000 fd0d 	bl	34021a38 <__mcmp>
3402101e:	2800      	cmp	r0, #0
34021020:	da5a      	bge.n	340210d8 <_dtoa_r+0x830>
34021022:	f108 33ff 	add.w	r3, r8, #4294967295
34021026:	220a      	movs	r2, #10
34021028:	9901      	ldr	r1, [sp, #4]
3402102a:	4648      	mov	r0, r9
3402102c:	9305      	str	r3, [sp, #20]
3402102e:	2300      	movs	r3, #0
34021030:	f000 faee 	bl	34021610 <__multadd>
34021034:	9b08      	ldr	r3, [sp, #32]
34021036:	9001      	str	r0, [sp, #4]
34021038:	2b00      	cmp	r3, #0
3402103a:	f000 8177 	beq.w	3402132c <_dtoa_r+0xa84>
3402103e:	4629      	mov	r1, r5
34021040:	2300      	movs	r3, #0
34021042:	220a      	movs	r2, #10
34021044:	4648      	mov	r0, r9
34021046:	f000 fae3 	bl	34021610 <__multadd>
3402104a:	f1bb 0f00 	cmp.w	fp, #0
3402104e:	4605      	mov	r5, r0
34021050:	dc6e      	bgt.n	34021130 <_dtoa_r+0x888>
34021052:	9b07      	ldr	r3, [sp, #28]
34021054:	2b02      	cmp	r3, #2
34021056:	dc48      	bgt.n	340210ea <_dtoa_r+0x842>
34021058:	e06a      	b.n	34021130 <_dtoa_r+0x888>
3402105a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3402105c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
34021060:	e739      	b.n	34020ed6 <_dtoa_r+0x62e>
34021062:	f10a 34ff 	add.w	r4, sl, #4294967295
34021066:	42a3      	cmp	r3, r4
34021068:	db07      	blt.n	3402107a <_dtoa_r+0x7d2>
3402106a:	f1ba 0f00 	cmp.w	sl, #0
3402106e:	eba3 0404 	sub.w	r4, r3, r4
34021072:	db0b      	blt.n	3402108c <_dtoa_r+0x7e4>
34021074:	9e04      	ldr	r6, [sp, #16]
34021076:	4652      	mov	r2, sl
34021078:	e72f      	b.n	34020eda <_dtoa_r+0x632>
3402107a:	1ae2      	subs	r2, r4, r3
3402107c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3402107e:	9e04      	ldr	r6, [sp, #16]
34021080:	4413      	add	r3, r2
34021082:	4652      	mov	r2, sl
34021084:	930a      	str	r3, [sp, #40]	@ 0x28
34021086:	4623      	mov	r3, r4
34021088:	2400      	movs	r4, #0
3402108a:	e726      	b.n	34020eda <_dtoa_r+0x632>
3402108c:	9a04      	ldr	r2, [sp, #16]
3402108e:	eba2 060a 	sub.w	r6, r2, sl
34021092:	2200      	movs	r2, #0
34021094:	e721      	b.n	34020eda <_dtoa_r+0x632>
34021096:	461c      	mov	r4, r3
34021098:	9e04      	ldr	r6, [sp, #16]
3402109a:	9d08      	ldr	r5, [sp, #32]
3402109c:	e72a      	b.n	34020ef4 <_dtoa_r+0x64c>
3402109e:	9a01      	ldr	r2, [sp, #4]
340210a0:	9205      	str	r2, [sp, #20]
340210a2:	e752      	b.n	34020f4a <_dtoa_r+0x6a2>
340210a4:	461a      	mov	r2, r3
340210a6:	9901      	ldr	r1, [sp, #4]
340210a8:	e751      	b.n	34020f4e <_dtoa_r+0x6a6>
340210aa:	9b05      	ldr	r3, [sp, #20]
340210ac:	9301      	str	r3, [sp, #4]
340210ae:	e752      	b.n	34020f56 <_dtoa_r+0x6ae>
340210b0:	2300      	movs	r3, #0
340210b2:	e77b      	b.n	34020fac <_dtoa_r+0x704>
340210b4:	9b02      	ldr	r3, [sp, #8]
340210b6:	e779      	b.n	34020fac <_dtoa_r+0x704>
340210b8:	920b      	str	r2, [sp, #44]	@ 0x2c
340210ba:	e778      	b.n	34020fae <_dtoa_r+0x706>
340210bc:	2300      	movs	r3, #0
340210be:	930b      	str	r3, [sp, #44]	@ 0x2c
340210c0:	e779      	b.n	34020fb6 <_dtoa_r+0x70e>
340210c2:	d093      	beq.n	34020fec <_dtoa_r+0x744>
340210c4:	321c      	adds	r2, #28
340210c6:	9b04      	ldr	r3, [sp, #16]
340210c8:	4413      	add	r3, r2
340210ca:	4416      	add	r6, r2
340210cc:	9304      	str	r3, [sp, #16]
340210ce:	9b06      	ldr	r3, [sp, #24]
340210d0:	4413      	add	r3, r2
340210d2:	e78a      	b.n	34020fea <_dtoa_r+0x742>
340210d4:	4602      	mov	r2, r0
340210d6:	e7f5      	b.n	340210c4 <_dtoa_r+0x81c>
340210d8:	f1ba 0f00 	cmp.w	sl, #0
340210dc:	46d3      	mov	fp, sl
340210de:	f8cd 8014 	str.w	r8, [sp, #20]
340210e2:	dc21      	bgt.n	34021128 <_dtoa_r+0x880>
340210e4:	9b07      	ldr	r3, [sp, #28]
340210e6:	2b02      	cmp	r3, #2
340210e8:	dd1e      	ble.n	34021128 <_dtoa_r+0x880>
340210ea:	f1bb 0f00 	cmp.w	fp, #0
340210ee:	f47f addc 	bne.w	34020caa <_dtoa_r+0x402>
340210f2:	4621      	mov	r1, r4
340210f4:	465b      	mov	r3, fp
340210f6:	2205      	movs	r2, #5
340210f8:	4648      	mov	r0, r9
340210fa:	f000 fa89 	bl	34021610 <__multadd>
340210fe:	4601      	mov	r1, r0
34021100:	4604      	mov	r4, r0
34021102:	9801      	ldr	r0, [sp, #4]
34021104:	f000 fc98 	bl	34021a38 <__mcmp>
34021108:	2800      	cmp	r0, #0
3402110a:	f77f adce 	ble.w	34020caa <_dtoa_r+0x402>
3402110e:	2331      	movs	r3, #49	@ 0x31
34021110:	463e      	mov	r6, r7
34021112:	f806 3b01 	strb.w	r3, [r6], #1
34021116:	9b05      	ldr	r3, [sp, #20]
34021118:	3301      	adds	r3, #1
3402111a:	9305      	str	r3, [sp, #20]
3402111c:	e5c9      	b.n	34020cb2 <_dtoa_r+0x40a>
3402111e:	4654      	mov	r4, sl
34021120:	f8cd 8014 	str.w	r8, [sp, #20]
34021124:	4625      	mov	r5, r4
34021126:	e7f2      	b.n	3402110e <_dtoa_r+0x866>
34021128:	9b08      	ldr	r3, [sp, #32]
3402112a:	2b00      	cmp	r3, #0
3402112c:	f000 8102 	beq.w	34021334 <_dtoa_r+0xa8c>
34021130:	2e00      	cmp	r6, #0
34021132:	dd05      	ble.n	34021140 <_dtoa_r+0x898>
34021134:	4629      	mov	r1, r5
34021136:	4632      	mov	r2, r6
34021138:	4648      	mov	r0, r9
3402113a:	f000 fc11 	bl	34021960 <__lshift>
3402113e:	4605      	mov	r5, r0
34021140:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34021142:	2b00      	cmp	r3, #0
34021144:	d058      	beq.n	340211f8 <_dtoa_r+0x950>
34021146:	6869      	ldr	r1, [r5, #4]
34021148:	4648      	mov	r0, r9
3402114a:	f000 f9ff 	bl	3402154c <_Balloc>
3402114e:	4606      	mov	r6, r0
34021150:	b928      	cbnz	r0, 3402115e <_dtoa_r+0x8b6>
34021152:	4b82      	ldr	r3, [pc, #520]	@ (3402135c <_dtoa_r+0xab4>)
34021154:	4602      	mov	r2, r0
34021156:	f240 21ef 	movw	r1, #751	@ 0x2ef
3402115a:	f7ff bbbe 	b.w	340208da <_dtoa_r+0x32>
3402115e:	692a      	ldr	r2, [r5, #16]
34021160:	f105 010c 	add.w	r1, r5, #12
34021164:	300c      	adds	r0, #12
34021166:	3202      	adds	r2, #2
34021168:	0092      	lsls	r2, r2, #2
3402116a:	f7ff fafc 	bl	34020766 <memcpy>
3402116e:	2201      	movs	r2, #1
34021170:	4631      	mov	r1, r6
34021172:	4648      	mov	r0, r9
34021174:	f000 fbf4 	bl	34021960 <__lshift>
34021178:	1c7b      	adds	r3, r7, #1
3402117a:	46a8      	mov	r8, r5
3402117c:	4605      	mov	r5, r0
3402117e:	9304      	str	r3, [sp, #16]
34021180:	eb07 030b 	add.w	r3, r7, fp
34021184:	9309      	str	r3, [sp, #36]	@ 0x24
34021186:	9b02      	ldr	r3, [sp, #8]
34021188:	f003 0301 	and.w	r3, r3, #1
3402118c:	9308      	str	r3, [sp, #32]
3402118e:	9b04      	ldr	r3, [sp, #16]
34021190:	4621      	mov	r1, r4
34021192:	9801      	ldr	r0, [sp, #4]
34021194:	f103 3bff 	add.w	fp, r3, #4294967295
34021198:	f7ff faf9 	bl	3402078e <quorem>
3402119c:	4641      	mov	r1, r8
3402119e:	9002      	str	r0, [sp, #8]
340211a0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
340211a4:	9801      	ldr	r0, [sp, #4]
340211a6:	f000 fc47 	bl	34021a38 <__mcmp>
340211aa:	462a      	mov	r2, r5
340211ac:	9006      	str	r0, [sp, #24]
340211ae:	4621      	mov	r1, r4
340211b0:	4648      	mov	r0, r9
340211b2:	f000 fc5d 	bl	34021a70 <__mdiff>
340211b6:	68c2      	ldr	r2, [r0, #12]
340211b8:	4606      	mov	r6, r0
340211ba:	b9fa      	cbnz	r2, 340211fc <_dtoa_r+0x954>
340211bc:	4601      	mov	r1, r0
340211be:	9801      	ldr	r0, [sp, #4]
340211c0:	f000 fc3a 	bl	34021a38 <__mcmp>
340211c4:	4602      	mov	r2, r0
340211c6:	4631      	mov	r1, r6
340211c8:	4648      	mov	r0, r9
340211ca:	920a      	str	r2, [sp, #40]	@ 0x28
340211cc:	f000 f9fe 	bl	340215cc <_Bfree>
340211d0:	9b07      	ldr	r3, [sp, #28]
340211d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
340211d4:	9e04      	ldr	r6, [sp, #16]
340211d6:	ea42 0103 	orr.w	r1, r2, r3
340211da:	9b08      	ldr	r3, [sp, #32]
340211dc:	4319      	orrs	r1, r3
340211de:	d10f      	bne.n	34021200 <_dtoa_r+0x958>
340211e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
340211e4:	d028      	beq.n	34021238 <_dtoa_r+0x990>
340211e6:	9b06      	ldr	r3, [sp, #24]
340211e8:	2b00      	cmp	r3, #0
340211ea:	dd02      	ble.n	340211f2 <_dtoa_r+0x94a>
340211ec:	9b02      	ldr	r3, [sp, #8]
340211ee:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
340211f2:	f88b a000 	strb.w	sl, [fp]
340211f6:	e55e      	b.n	34020cb6 <_dtoa_r+0x40e>
340211f8:	4628      	mov	r0, r5
340211fa:	e7bd      	b.n	34021178 <_dtoa_r+0x8d0>
340211fc:	2201      	movs	r2, #1
340211fe:	e7e2      	b.n	340211c6 <_dtoa_r+0x91e>
34021200:	9b06      	ldr	r3, [sp, #24]
34021202:	2b00      	cmp	r3, #0
34021204:	db04      	blt.n	34021210 <_dtoa_r+0x968>
34021206:	9907      	ldr	r1, [sp, #28]
34021208:	430b      	orrs	r3, r1
3402120a:	9908      	ldr	r1, [sp, #32]
3402120c:	430b      	orrs	r3, r1
3402120e:	d120      	bne.n	34021252 <_dtoa_r+0x9aa>
34021210:	2a00      	cmp	r2, #0
34021212:	ddee      	ble.n	340211f2 <_dtoa_r+0x94a>
34021214:	2201      	movs	r2, #1
34021216:	9901      	ldr	r1, [sp, #4]
34021218:	4648      	mov	r0, r9
3402121a:	f000 fba1 	bl	34021960 <__lshift>
3402121e:	4621      	mov	r1, r4
34021220:	9001      	str	r0, [sp, #4]
34021222:	f000 fc09 	bl	34021a38 <__mcmp>
34021226:	2800      	cmp	r0, #0
34021228:	dc03      	bgt.n	34021232 <_dtoa_r+0x98a>
3402122a:	d1e2      	bne.n	340211f2 <_dtoa_r+0x94a>
3402122c:	f01a 0f01 	tst.w	sl, #1
34021230:	d0df      	beq.n	340211f2 <_dtoa_r+0x94a>
34021232:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
34021236:	d1d9      	bne.n	340211ec <_dtoa_r+0x944>
34021238:	2339      	movs	r3, #57	@ 0x39
3402123a:	f88b 3000 	strb.w	r3, [fp]
3402123e:	4633      	mov	r3, r6
34021240:	461e      	mov	r6, r3
34021242:	3b01      	subs	r3, #1
34021244:	f816 2c01 	ldrb.w	r2, [r6, #-1]
34021248:	2a39      	cmp	r2, #57	@ 0x39
3402124a:	d052      	beq.n	340212f2 <_dtoa_r+0xa4a>
3402124c:	3201      	adds	r2, #1
3402124e:	701a      	strb	r2, [r3, #0]
34021250:	e531      	b.n	34020cb6 <_dtoa_r+0x40e>
34021252:	2a00      	cmp	r2, #0
34021254:	dd07      	ble.n	34021266 <_dtoa_r+0x9be>
34021256:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3402125a:	d0ed      	beq.n	34021238 <_dtoa_r+0x990>
3402125c:	f10a 0301 	add.w	r3, sl, #1
34021260:	f88b 3000 	strb.w	r3, [fp]
34021264:	e527      	b.n	34020cb6 <_dtoa_r+0x40e>
34021266:	9b04      	ldr	r3, [sp, #16]
34021268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3402126a:	f803 ac01 	strb.w	sl, [r3, #-1]
3402126e:	4293      	cmp	r3, r2
34021270:	d029      	beq.n	340212c6 <_dtoa_r+0xa1e>
34021272:	2300      	movs	r3, #0
34021274:	220a      	movs	r2, #10
34021276:	9901      	ldr	r1, [sp, #4]
34021278:	4648      	mov	r0, r9
3402127a:	f000 f9c9 	bl	34021610 <__multadd>
3402127e:	45a8      	cmp	r8, r5
34021280:	9001      	str	r0, [sp, #4]
34021282:	f04f 0300 	mov.w	r3, #0
34021286:	f04f 020a 	mov.w	r2, #10
3402128a:	4641      	mov	r1, r8
3402128c:	4648      	mov	r0, r9
3402128e:	d107      	bne.n	340212a0 <_dtoa_r+0x9f8>
34021290:	f000 f9be 	bl	34021610 <__multadd>
34021294:	4680      	mov	r8, r0
34021296:	4605      	mov	r5, r0
34021298:	9b04      	ldr	r3, [sp, #16]
3402129a:	3301      	adds	r3, #1
3402129c:	9304      	str	r3, [sp, #16]
3402129e:	e776      	b.n	3402118e <_dtoa_r+0x8e6>
340212a0:	f000 f9b6 	bl	34021610 <__multadd>
340212a4:	4629      	mov	r1, r5
340212a6:	4680      	mov	r8, r0
340212a8:	2300      	movs	r3, #0
340212aa:	220a      	movs	r2, #10
340212ac:	4648      	mov	r0, r9
340212ae:	f000 f9af 	bl	34021610 <__multadd>
340212b2:	4605      	mov	r5, r0
340212b4:	e7f0      	b.n	34021298 <_dtoa_r+0x9f0>
340212b6:	f1bb 0f00 	cmp.w	fp, #0
340212ba:	f04f 0800 	mov.w	r8, #0
340212be:	bfcc      	ite	gt
340212c0:	465e      	movgt	r6, fp
340212c2:	2601      	movle	r6, #1
340212c4:	443e      	add	r6, r7
340212c6:	2201      	movs	r2, #1
340212c8:	9901      	ldr	r1, [sp, #4]
340212ca:	4648      	mov	r0, r9
340212cc:	f000 fb48 	bl	34021960 <__lshift>
340212d0:	4621      	mov	r1, r4
340212d2:	9001      	str	r0, [sp, #4]
340212d4:	f000 fbb0 	bl	34021a38 <__mcmp>
340212d8:	2800      	cmp	r0, #0
340212da:	dcb0      	bgt.n	3402123e <_dtoa_r+0x996>
340212dc:	d102      	bne.n	340212e4 <_dtoa_r+0xa3c>
340212de:	f01a 0f01 	tst.w	sl, #1
340212e2:	d1ac      	bne.n	3402123e <_dtoa_r+0x996>
340212e4:	4633      	mov	r3, r6
340212e6:	461e      	mov	r6, r3
340212e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
340212ec:	2a30      	cmp	r2, #48	@ 0x30
340212ee:	d0fa      	beq.n	340212e6 <_dtoa_r+0xa3e>
340212f0:	e4e1      	b.n	34020cb6 <_dtoa_r+0x40e>
340212f2:	429f      	cmp	r7, r3
340212f4:	d1a4      	bne.n	34021240 <_dtoa_r+0x998>
340212f6:	9b05      	ldr	r3, [sp, #20]
340212f8:	3301      	adds	r3, #1
340212fa:	9305      	str	r3, [sp, #20]
340212fc:	2331      	movs	r3, #49	@ 0x31
340212fe:	703b      	strb	r3, [r7, #0]
34021300:	e4d9      	b.n	34020cb6 <_dtoa_r+0x40e>
34021302:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34021304:	4f16      	ldr	r7, [pc, #88]	@ (34021360 <_dtoa_r+0xab8>)
34021306:	b11b      	cbz	r3, 34021310 <_dtoa_r+0xa68>
34021308:	f107 0308 	add.w	r3, r7, #8
3402130c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3402130e:	6013      	str	r3, [r2, #0]
34021310:	4638      	mov	r0, r7
34021312:	b011      	add	sp, #68	@ 0x44
34021314:	ecbd 8b02 	vpop	{d8}
34021318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402131c:	9b07      	ldr	r3, [sp, #28]
3402131e:	2b01      	cmp	r3, #1
34021320:	f77f ae2c 	ble.w	34020f7c <_dtoa_r+0x6d4>
34021324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34021326:	930b      	str	r3, [sp, #44]	@ 0x2c
34021328:	2001      	movs	r0, #1
3402132a:	e64c      	b.n	34020fc6 <_dtoa_r+0x71e>
3402132c:	f1bb 0f00 	cmp.w	fp, #0
34021330:	f77f aed8 	ble.w	340210e4 <_dtoa_r+0x83c>
34021334:	463e      	mov	r6, r7
34021336:	4621      	mov	r1, r4
34021338:	9801      	ldr	r0, [sp, #4]
3402133a:	f7ff fa28 	bl	3402078e <quorem>
3402133e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
34021342:	f806 ab01 	strb.w	sl, [r6], #1
34021346:	1bf2      	subs	r2, r6, r7
34021348:	4593      	cmp	fp, r2
3402134a:	ddb4      	ble.n	340212b6 <_dtoa_r+0xa0e>
3402134c:	2300      	movs	r3, #0
3402134e:	220a      	movs	r2, #10
34021350:	9901      	ldr	r1, [sp, #4]
34021352:	4648      	mov	r0, r9
34021354:	f000 f95c 	bl	34021610 <__multadd>
34021358:	9001      	str	r0, [sp, #4]
3402135a:	e7ec      	b.n	34021336 <_dtoa_r+0xa8e>
3402135c:	3402ca50 	.word	0x3402ca50
34021360:	3402c9d4 	.word	0x3402c9d4

34021364 <_free_r>:
34021364:	b538      	push	{r3, r4, r5, lr}
34021366:	4605      	mov	r5, r0
34021368:	2900      	cmp	r1, #0
3402136a:	d041      	beq.n	340213f0 <_free_r+0x8c>
3402136c:	f851 3c04 	ldr.w	r3, [r1, #-4]
34021370:	1f0c      	subs	r4, r1, #4
34021372:	2b00      	cmp	r3, #0
34021374:	bfb8      	it	lt
34021376:	18e4      	addlt	r4, r4, r3
34021378:	f7e0 fdde 	bl	34001f38 <__malloc_lock>
3402137c:	4a1d      	ldr	r2, [pc, #116]	@ (340213f4 <_free_r+0x90>)
3402137e:	6813      	ldr	r3, [r2, #0]
34021380:	b933      	cbnz	r3, 34021390 <_free_r+0x2c>
34021382:	6063      	str	r3, [r4, #4]
34021384:	6014      	str	r4, [r2, #0]
34021386:	4628      	mov	r0, r5
34021388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3402138c:	f7e0 bdfa 	b.w	34001f84 <__malloc_unlock>
34021390:	42a3      	cmp	r3, r4
34021392:	d908      	bls.n	340213a6 <_free_r+0x42>
34021394:	6820      	ldr	r0, [r4, #0]
34021396:	1821      	adds	r1, r4, r0
34021398:	428b      	cmp	r3, r1
3402139a:	bf01      	itttt	eq
3402139c:	6819      	ldreq	r1, [r3, #0]
3402139e:	685b      	ldreq	r3, [r3, #4]
340213a0:	1809      	addeq	r1, r1, r0
340213a2:	6021      	streq	r1, [r4, #0]
340213a4:	e7ed      	b.n	34021382 <_free_r+0x1e>
340213a6:	461a      	mov	r2, r3
340213a8:	685b      	ldr	r3, [r3, #4]
340213aa:	b10b      	cbz	r3, 340213b0 <_free_r+0x4c>
340213ac:	42a3      	cmp	r3, r4
340213ae:	d9fa      	bls.n	340213a6 <_free_r+0x42>
340213b0:	6811      	ldr	r1, [r2, #0]
340213b2:	1850      	adds	r0, r2, r1
340213b4:	42a0      	cmp	r0, r4
340213b6:	d10b      	bne.n	340213d0 <_free_r+0x6c>
340213b8:	6820      	ldr	r0, [r4, #0]
340213ba:	4401      	add	r1, r0
340213bc:	1850      	adds	r0, r2, r1
340213be:	6011      	str	r1, [r2, #0]
340213c0:	4283      	cmp	r3, r0
340213c2:	d1e0      	bne.n	34021386 <_free_r+0x22>
340213c4:	6818      	ldr	r0, [r3, #0]
340213c6:	685b      	ldr	r3, [r3, #4]
340213c8:	4408      	add	r0, r1
340213ca:	6053      	str	r3, [r2, #4]
340213cc:	6010      	str	r0, [r2, #0]
340213ce:	e7da      	b.n	34021386 <_free_r+0x22>
340213d0:	d902      	bls.n	340213d8 <_free_r+0x74>
340213d2:	230c      	movs	r3, #12
340213d4:	602b      	str	r3, [r5, #0]
340213d6:	e7d6      	b.n	34021386 <_free_r+0x22>
340213d8:	6820      	ldr	r0, [r4, #0]
340213da:	1821      	adds	r1, r4, r0
340213dc:	428b      	cmp	r3, r1
340213de:	bf02      	ittt	eq
340213e0:	6819      	ldreq	r1, [r3, #0]
340213e2:	685b      	ldreq	r3, [r3, #4]
340213e4:	1809      	addeq	r1, r1, r0
340213e6:	6063      	str	r3, [r4, #4]
340213e8:	bf08      	it	eq
340213ea:	6021      	streq	r1, [r4, #0]
340213ec:	6054      	str	r4, [r2, #4]
340213ee:	e7ca      	b.n	34021386 <_free_r+0x22>
340213f0:	bd38      	pop	{r3, r4, r5, pc}
340213f2:	bf00      	nop
340213f4:	341fa750 	.word	0x341fa750

340213f8 <malloc>:
340213f8:	4b02      	ldr	r3, [pc, #8]	@ (34021404 <malloc+0xc>)
340213fa:	4601      	mov	r1, r0
340213fc:	6818      	ldr	r0, [r3, #0]
340213fe:	f000 b825 	b.w	3402144c <_malloc_r>
34021402:	bf00      	nop
34021404:	3410ce2c 	.word	0x3410ce2c

34021408 <sbrk_aligned>:
34021408:	b570      	push	{r4, r5, r6, lr}
3402140a:	4e0f      	ldr	r6, [pc, #60]	@ (34021448 <sbrk_aligned+0x40>)
3402140c:	460c      	mov	r4, r1
3402140e:	4605      	mov	r5, r0
34021410:	6831      	ldr	r1, [r6, #0]
34021412:	b911      	cbnz	r1, 3402141a <sbrk_aligned+0x12>
34021414:	f001 f82a 	bl	3402246c <_sbrk_r>
34021418:	6030      	str	r0, [r6, #0]
3402141a:	4621      	mov	r1, r4
3402141c:	4628      	mov	r0, r5
3402141e:	f001 f825 	bl	3402246c <_sbrk_r>
34021422:	1c43      	adds	r3, r0, #1
34021424:	d103      	bne.n	3402142e <sbrk_aligned+0x26>
34021426:	f04f 34ff 	mov.w	r4, #4294967295
3402142a:	4620      	mov	r0, r4
3402142c:	bd70      	pop	{r4, r5, r6, pc}
3402142e:	1cc4      	adds	r4, r0, #3
34021430:	f024 0403 	bic.w	r4, r4, #3
34021434:	42a0      	cmp	r0, r4
34021436:	d0f8      	beq.n	3402142a <sbrk_aligned+0x22>
34021438:	1a21      	subs	r1, r4, r0
3402143a:	4628      	mov	r0, r5
3402143c:	f001 f816 	bl	3402246c <_sbrk_r>
34021440:	3001      	adds	r0, #1
34021442:	d1f2      	bne.n	3402142a <sbrk_aligned+0x22>
34021444:	e7ef      	b.n	34021426 <sbrk_aligned+0x1e>
34021446:	bf00      	nop
34021448:	341fa74c 	.word	0x341fa74c

3402144c <_malloc_r>:
3402144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34021450:	1ccd      	adds	r5, r1, #3
34021452:	4606      	mov	r6, r0
34021454:	f025 0503 	bic.w	r5, r5, #3
34021458:	3508      	adds	r5, #8
3402145a:	2d0c      	cmp	r5, #12
3402145c:	bf38      	it	cc
3402145e:	250c      	movcc	r5, #12
34021460:	2d00      	cmp	r5, #0
34021462:	db01      	blt.n	34021468 <_malloc_r+0x1c>
34021464:	42a9      	cmp	r1, r5
34021466:	d904      	bls.n	34021472 <_malloc_r+0x26>
34021468:	230c      	movs	r3, #12
3402146a:	6033      	str	r3, [r6, #0]
3402146c:	2000      	movs	r0, #0
3402146e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34021472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 34021548 <_malloc_r+0xfc>
34021476:	f7e0 fd5f 	bl	34001f38 <__malloc_lock>
3402147a:	f8d8 3000 	ldr.w	r3, [r8]
3402147e:	461c      	mov	r4, r3
34021480:	bb44      	cbnz	r4, 340214d4 <_malloc_r+0x88>
34021482:	4629      	mov	r1, r5
34021484:	4630      	mov	r0, r6
34021486:	f7ff ffbf 	bl	34021408 <sbrk_aligned>
3402148a:	1c43      	adds	r3, r0, #1
3402148c:	4604      	mov	r4, r0
3402148e:	d158      	bne.n	34021542 <_malloc_r+0xf6>
34021490:	f8d8 4000 	ldr.w	r4, [r8]
34021494:	4627      	mov	r7, r4
34021496:	2f00      	cmp	r7, #0
34021498:	d143      	bne.n	34021522 <_malloc_r+0xd6>
3402149a:	2c00      	cmp	r4, #0
3402149c:	d04b      	beq.n	34021536 <_malloc_r+0xea>
3402149e:	6823      	ldr	r3, [r4, #0]
340214a0:	4639      	mov	r1, r7
340214a2:	4630      	mov	r0, r6
340214a4:	eb04 0903 	add.w	r9, r4, r3
340214a8:	f000 ffe0 	bl	3402246c <_sbrk_r>
340214ac:	4581      	cmp	r9, r0
340214ae:	d142      	bne.n	34021536 <_malloc_r+0xea>
340214b0:	6821      	ldr	r1, [r4, #0]
340214b2:	4630      	mov	r0, r6
340214b4:	1a6d      	subs	r5, r5, r1
340214b6:	4629      	mov	r1, r5
340214b8:	f7ff ffa6 	bl	34021408 <sbrk_aligned>
340214bc:	3001      	adds	r0, #1
340214be:	d03a      	beq.n	34021536 <_malloc_r+0xea>
340214c0:	6823      	ldr	r3, [r4, #0]
340214c2:	442b      	add	r3, r5
340214c4:	6023      	str	r3, [r4, #0]
340214c6:	f8d8 3000 	ldr.w	r3, [r8]
340214ca:	685a      	ldr	r2, [r3, #4]
340214cc:	bb62      	cbnz	r2, 34021528 <_malloc_r+0xdc>
340214ce:	f8c8 7000 	str.w	r7, [r8]
340214d2:	e00f      	b.n	340214f4 <_malloc_r+0xa8>
340214d4:	6822      	ldr	r2, [r4, #0]
340214d6:	1b52      	subs	r2, r2, r5
340214d8:	d420      	bmi.n	3402151c <_malloc_r+0xd0>
340214da:	2a0b      	cmp	r2, #11
340214dc:	d917      	bls.n	3402150e <_malloc_r+0xc2>
340214de:	1961      	adds	r1, r4, r5
340214e0:	42a3      	cmp	r3, r4
340214e2:	6025      	str	r5, [r4, #0]
340214e4:	bf18      	it	ne
340214e6:	6059      	strne	r1, [r3, #4]
340214e8:	6863      	ldr	r3, [r4, #4]
340214ea:	bf08      	it	eq
340214ec:	f8c8 1000 	streq.w	r1, [r8]
340214f0:	5162      	str	r2, [r4, r5]
340214f2:	604b      	str	r3, [r1, #4]
340214f4:	4630      	mov	r0, r6
340214f6:	f7e0 fd45 	bl	34001f84 <__malloc_unlock>
340214fa:	f104 000b 	add.w	r0, r4, #11
340214fe:	1d23      	adds	r3, r4, #4
34021500:	f020 0007 	bic.w	r0, r0, #7
34021504:	1ac2      	subs	r2, r0, r3
34021506:	bf1c      	itt	ne
34021508:	1a1b      	subne	r3, r3, r0
3402150a:	50a3      	strne	r3, [r4, r2]
3402150c:	e7af      	b.n	3402146e <_malloc_r+0x22>
3402150e:	6862      	ldr	r2, [r4, #4]
34021510:	42a3      	cmp	r3, r4
34021512:	bf0c      	ite	eq
34021514:	f8c8 2000 	streq.w	r2, [r8]
34021518:	605a      	strne	r2, [r3, #4]
3402151a:	e7eb      	b.n	340214f4 <_malloc_r+0xa8>
3402151c:	4623      	mov	r3, r4
3402151e:	6864      	ldr	r4, [r4, #4]
34021520:	e7ae      	b.n	34021480 <_malloc_r+0x34>
34021522:	463c      	mov	r4, r7
34021524:	687f      	ldr	r7, [r7, #4]
34021526:	e7b6      	b.n	34021496 <_malloc_r+0x4a>
34021528:	461a      	mov	r2, r3
3402152a:	685b      	ldr	r3, [r3, #4]
3402152c:	42a3      	cmp	r3, r4
3402152e:	d1fb      	bne.n	34021528 <_malloc_r+0xdc>
34021530:	2300      	movs	r3, #0
34021532:	6053      	str	r3, [r2, #4]
34021534:	e7de      	b.n	340214f4 <_malloc_r+0xa8>
34021536:	230c      	movs	r3, #12
34021538:	4630      	mov	r0, r6
3402153a:	6033      	str	r3, [r6, #0]
3402153c:	f7e0 fd22 	bl	34001f84 <__malloc_unlock>
34021540:	e794      	b.n	3402146c <_malloc_r+0x20>
34021542:	6005      	str	r5, [r0, #0]
34021544:	e7d6      	b.n	340214f4 <_malloc_r+0xa8>
34021546:	bf00      	nop
34021548:	341fa750 	.word	0x341fa750

3402154c <_Balloc>:
3402154c:	b570      	push	{r4, r5, r6, lr}
3402154e:	69c6      	ldr	r6, [r0, #28]
34021550:	4604      	mov	r4, r0
34021552:	460d      	mov	r5, r1
34021554:	b976      	cbnz	r6, 34021574 <_Balloc+0x28>
34021556:	2010      	movs	r0, #16
34021558:	f7ff ff4e 	bl	340213f8 <malloc>
3402155c:	4602      	mov	r2, r0
3402155e:	61e0      	str	r0, [r4, #28]
34021560:	b920      	cbnz	r0, 3402156c <_Balloc+0x20>
34021562:	4b18      	ldr	r3, [pc, #96]	@ (340215c4 <_Balloc+0x78>)
34021564:	216b      	movs	r1, #107	@ 0x6b
34021566:	4818      	ldr	r0, [pc, #96]	@ (340215c8 <_Balloc+0x7c>)
34021568:	f7fd fe2c 	bl	3401f1c4 <__assert_func>
3402156c:	e9c0 6601 	strd	r6, r6, [r0, #4]
34021570:	6006      	str	r6, [r0, #0]
34021572:	60c6      	str	r6, [r0, #12]
34021574:	69e6      	ldr	r6, [r4, #28]
34021576:	68f3      	ldr	r3, [r6, #12]
34021578:	b183      	cbz	r3, 3402159c <_Balloc+0x50>
3402157a:	69e3      	ldr	r3, [r4, #28]
3402157c:	68db      	ldr	r3, [r3, #12]
3402157e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
34021582:	b9b8      	cbnz	r0, 340215b4 <_Balloc+0x68>
34021584:	2101      	movs	r1, #1
34021586:	4620      	mov	r0, r4
34021588:	fa01 f605 	lsl.w	r6, r1, r5
3402158c:	1d72      	adds	r2, r6, #5
3402158e:	0092      	lsls	r2, r2, #2
34021590:	f000 ff7c 	bl	3402248c <_calloc_r>
34021594:	b160      	cbz	r0, 340215b0 <_Balloc+0x64>
34021596:	e9c0 5601 	strd	r5, r6, [r0, #4]
3402159a:	e00e      	b.n	340215ba <_Balloc+0x6e>
3402159c:	2221      	movs	r2, #33	@ 0x21
3402159e:	2104      	movs	r1, #4
340215a0:	4620      	mov	r0, r4
340215a2:	f000 ff73 	bl	3402248c <_calloc_r>
340215a6:	69e3      	ldr	r3, [r4, #28]
340215a8:	60f0      	str	r0, [r6, #12]
340215aa:	68db      	ldr	r3, [r3, #12]
340215ac:	2b00      	cmp	r3, #0
340215ae:	d1e4      	bne.n	3402157a <_Balloc+0x2e>
340215b0:	2000      	movs	r0, #0
340215b2:	bd70      	pop	{r4, r5, r6, pc}
340215b4:	6802      	ldr	r2, [r0, #0]
340215b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
340215ba:	2300      	movs	r3, #0
340215bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
340215c0:	e7f7      	b.n	340215b2 <_Balloc+0x66>
340215c2:	bf00      	nop
340215c4:	3402c9e1 	.word	0x3402c9e1
340215c8:	3402ca61 	.word	0x3402ca61

340215cc <_Bfree>:
340215cc:	b570      	push	{r4, r5, r6, lr}
340215ce:	69c6      	ldr	r6, [r0, #28]
340215d0:	4605      	mov	r5, r0
340215d2:	460c      	mov	r4, r1
340215d4:	b976      	cbnz	r6, 340215f4 <_Bfree+0x28>
340215d6:	2010      	movs	r0, #16
340215d8:	f7ff ff0e 	bl	340213f8 <malloc>
340215dc:	4602      	mov	r2, r0
340215de:	61e8      	str	r0, [r5, #28]
340215e0:	b920      	cbnz	r0, 340215ec <_Bfree+0x20>
340215e2:	4b09      	ldr	r3, [pc, #36]	@ (34021608 <_Bfree+0x3c>)
340215e4:	218f      	movs	r1, #143	@ 0x8f
340215e6:	4809      	ldr	r0, [pc, #36]	@ (3402160c <_Bfree+0x40>)
340215e8:	f7fd fdec 	bl	3401f1c4 <__assert_func>
340215ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
340215f0:	6006      	str	r6, [r0, #0]
340215f2:	60c6      	str	r6, [r0, #12]
340215f4:	b13c      	cbz	r4, 34021606 <_Bfree+0x3a>
340215f6:	69eb      	ldr	r3, [r5, #28]
340215f8:	6862      	ldr	r2, [r4, #4]
340215fa:	68db      	ldr	r3, [r3, #12]
340215fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
34021600:	6021      	str	r1, [r4, #0]
34021602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
34021606:	bd70      	pop	{r4, r5, r6, pc}
34021608:	3402c9e1 	.word	0x3402c9e1
3402160c:	3402ca61 	.word	0x3402ca61

34021610 <__multadd>:
34021610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
34021614:	f101 0c14 	add.w	ip, r1, #20
34021618:	4607      	mov	r7, r0
3402161a:	460c      	mov	r4, r1
3402161c:	461e      	mov	r6, r3
3402161e:	690d      	ldr	r5, [r1, #16]
34021620:	2000      	movs	r0, #0
34021622:	f8dc 3000 	ldr.w	r3, [ip]
34021626:	3001      	adds	r0, #1
34021628:	b299      	uxth	r1, r3
3402162a:	4285      	cmp	r5, r0
3402162c:	fb02 6101 	mla	r1, r2, r1, r6
34021630:	ea4f 4613 	mov.w	r6, r3, lsr #16
34021634:	ea4f 4311 	mov.w	r3, r1, lsr #16
34021638:	b289      	uxth	r1, r1
3402163a:	fb02 3306 	mla	r3, r2, r6, r3
3402163e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
34021642:	ea4f 4613 	mov.w	r6, r3, lsr #16
34021646:	f84c 1b04 	str.w	r1, [ip], #4
3402164a:	dcea      	bgt.n	34021622 <__multadd+0x12>
3402164c:	b30e      	cbz	r6, 34021692 <__multadd+0x82>
3402164e:	68a3      	ldr	r3, [r4, #8]
34021650:	42ab      	cmp	r3, r5
34021652:	dc19      	bgt.n	34021688 <__multadd+0x78>
34021654:	6861      	ldr	r1, [r4, #4]
34021656:	4638      	mov	r0, r7
34021658:	3101      	adds	r1, #1
3402165a:	f7ff ff77 	bl	3402154c <_Balloc>
3402165e:	4680      	mov	r8, r0
34021660:	b928      	cbnz	r0, 3402166e <__multadd+0x5e>
34021662:	4602      	mov	r2, r0
34021664:	4b0c      	ldr	r3, [pc, #48]	@ (34021698 <__multadd+0x88>)
34021666:	21ba      	movs	r1, #186	@ 0xba
34021668:	480c      	ldr	r0, [pc, #48]	@ (3402169c <__multadd+0x8c>)
3402166a:	f7fd fdab 	bl	3401f1c4 <__assert_func>
3402166e:	6922      	ldr	r2, [r4, #16]
34021670:	f104 010c 	add.w	r1, r4, #12
34021674:	300c      	adds	r0, #12
34021676:	3202      	adds	r2, #2
34021678:	0092      	lsls	r2, r2, #2
3402167a:	f7ff f874 	bl	34020766 <memcpy>
3402167e:	4621      	mov	r1, r4
34021680:	4644      	mov	r4, r8
34021682:	4638      	mov	r0, r7
34021684:	f7ff ffa2 	bl	340215cc <_Bfree>
34021688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3402168c:	3501      	adds	r5, #1
3402168e:	615e      	str	r6, [r3, #20]
34021690:	6125      	str	r5, [r4, #16]
34021692:	4620      	mov	r0, r4
34021694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
34021698:	3402ca50 	.word	0x3402ca50
3402169c:	3402ca61 	.word	0x3402ca61

340216a0 <__hi0bits>:
340216a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
340216a4:	4603      	mov	r3, r0
340216a6:	bf36      	itet	cc
340216a8:	0403      	lslcc	r3, r0, #16
340216aa:	2000      	movcs	r0, #0
340216ac:	2010      	movcc	r0, #16
340216ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
340216b2:	bf3c      	itt	cc
340216b4:	021b      	lslcc	r3, r3, #8
340216b6:	3008      	addcc	r0, #8
340216b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340216bc:	bf3c      	itt	cc
340216be:	011b      	lslcc	r3, r3, #4
340216c0:	3004      	addcc	r0, #4
340216c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340216c6:	bf3c      	itt	cc
340216c8:	009b      	lslcc	r3, r3, #2
340216ca:	3002      	addcc	r0, #2
340216cc:	2b00      	cmp	r3, #0
340216ce:	db05      	blt.n	340216dc <__hi0bits+0x3c>
340216d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
340216d4:	f100 0001 	add.w	r0, r0, #1
340216d8:	bf08      	it	eq
340216da:	2020      	moveq	r0, #32
340216dc:	4770      	bx	lr

340216de <__lo0bits>:
340216de:	6803      	ldr	r3, [r0, #0]
340216e0:	4602      	mov	r2, r0
340216e2:	f013 0007 	ands.w	r0, r3, #7
340216e6:	d00b      	beq.n	34021700 <__lo0bits+0x22>
340216e8:	07d9      	lsls	r1, r3, #31
340216ea:	d421      	bmi.n	34021730 <__lo0bits+0x52>
340216ec:	0798      	lsls	r0, r3, #30
340216ee:	bf47      	ittee	mi
340216f0:	085b      	lsrmi	r3, r3, #1
340216f2:	2001      	movmi	r0, #1
340216f4:	089b      	lsrpl	r3, r3, #2
340216f6:	2002      	movpl	r0, #2
340216f8:	bf4c      	ite	mi
340216fa:	6013      	strmi	r3, [r2, #0]
340216fc:	6013      	strpl	r3, [r2, #0]
340216fe:	4770      	bx	lr
34021700:	b299      	uxth	r1, r3
34021702:	b909      	cbnz	r1, 34021708 <__lo0bits+0x2a>
34021704:	0c1b      	lsrs	r3, r3, #16
34021706:	2010      	movs	r0, #16
34021708:	b2d9      	uxtb	r1, r3
3402170a:	b909      	cbnz	r1, 34021710 <__lo0bits+0x32>
3402170c:	3008      	adds	r0, #8
3402170e:	0a1b      	lsrs	r3, r3, #8
34021710:	0719      	lsls	r1, r3, #28
34021712:	bf04      	itt	eq
34021714:	091b      	lsreq	r3, r3, #4
34021716:	3004      	addeq	r0, #4
34021718:	0799      	lsls	r1, r3, #30
3402171a:	bf04      	itt	eq
3402171c:	089b      	lsreq	r3, r3, #2
3402171e:	3002      	addeq	r0, #2
34021720:	07d9      	lsls	r1, r3, #31
34021722:	d403      	bmi.n	3402172c <__lo0bits+0x4e>
34021724:	085b      	lsrs	r3, r3, #1
34021726:	f100 0001 	add.w	r0, r0, #1
3402172a:	d003      	beq.n	34021734 <__lo0bits+0x56>
3402172c:	6013      	str	r3, [r2, #0]
3402172e:	4770      	bx	lr
34021730:	2000      	movs	r0, #0
34021732:	4770      	bx	lr
34021734:	2020      	movs	r0, #32
34021736:	4770      	bx	lr

34021738 <__i2b>:
34021738:	b510      	push	{r4, lr}
3402173a:	460c      	mov	r4, r1
3402173c:	2101      	movs	r1, #1
3402173e:	f7ff ff05 	bl	3402154c <_Balloc>
34021742:	4602      	mov	r2, r0
34021744:	b928      	cbnz	r0, 34021752 <__i2b+0x1a>
34021746:	4b05      	ldr	r3, [pc, #20]	@ (3402175c <__i2b+0x24>)
34021748:	f240 1145 	movw	r1, #325	@ 0x145
3402174c:	4804      	ldr	r0, [pc, #16]	@ (34021760 <__i2b+0x28>)
3402174e:	f7fd fd39 	bl	3401f1c4 <__assert_func>
34021752:	2301      	movs	r3, #1
34021754:	6144      	str	r4, [r0, #20]
34021756:	6103      	str	r3, [r0, #16]
34021758:	bd10      	pop	{r4, pc}
3402175a:	bf00      	nop
3402175c:	3402ca50 	.word	0x3402ca50
34021760:	3402ca61 	.word	0x3402ca61

34021764 <__multiply>:
34021764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021768:	4617      	mov	r7, r2
3402176a:	690a      	ldr	r2, [r1, #16]
3402176c:	4689      	mov	r9, r1
3402176e:	b085      	sub	sp, #20
34021770:	693b      	ldr	r3, [r7, #16]
34021772:	429a      	cmp	r2, r3
34021774:	bfa2      	ittt	ge
34021776:	463b      	movge	r3, r7
34021778:	460f      	movge	r7, r1
3402177a:	4699      	movge	r9, r3
3402177c:	693d      	ldr	r5, [r7, #16]
3402177e:	68bb      	ldr	r3, [r7, #8]
34021780:	f8d9 a010 	ldr.w	sl, [r9, #16]
34021784:	6879      	ldr	r1, [r7, #4]
34021786:	eb05 060a 	add.w	r6, r5, sl
3402178a:	42b3      	cmp	r3, r6
3402178c:	bfb8      	it	lt
3402178e:	3101      	addlt	r1, #1
34021790:	f7ff fedc 	bl	3402154c <_Balloc>
34021794:	b930      	cbnz	r0, 340217a4 <__multiply+0x40>
34021796:	4602      	mov	r2, r0
34021798:	4b42      	ldr	r3, [pc, #264]	@ (340218a4 <__multiply+0x140>)
3402179a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3402179e:	4842      	ldr	r0, [pc, #264]	@ (340218a8 <__multiply+0x144>)
340217a0:	f7fd fd10 	bl	3401f1c4 <__assert_func>
340217a4:	f100 0414 	add.w	r4, r0, #20
340217a8:	2200      	movs	r2, #0
340217aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
340217ae:	4623      	mov	r3, r4
340217b0:	4573      	cmp	r3, lr
340217b2:	d320      	bcc.n	340217f6 <__multiply+0x92>
340217b4:	f107 0814 	add.w	r8, r7, #20
340217b8:	f109 0114 	add.w	r1, r9, #20
340217bc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
340217c0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
340217c4:	9302      	str	r3, [sp, #8]
340217c6:	1beb      	subs	r3, r5, r7
340217c8:	3715      	adds	r7, #21
340217ca:	3b15      	subs	r3, #21
340217cc:	f023 0303 	bic.w	r3, r3, #3
340217d0:	3304      	adds	r3, #4
340217d2:	42bd      	cmp	r5, r7
340217d4:	bf38      	it	cc
340217d6:	2304      	movcc	r3, #4
340217d8:	9301      	str	r3, [sp, #4]
340217da:	9b02      	ldr	r3, [sp, #8]
340217dc:	9103      	str	r1, [sp, #12]
340217de:	428b      	cmp	r3, r1
340217e0:	d80c      	bhi.n	340217fc <__multiply+0x98>
340217e2:	2e00      	cmp	r6, #0
340217e4:	dd03      	ble.n	340217ee <__multiply+0x8a>
340217e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
340217ea:	2b00      	cmp	r3, #0
340217ec:	d057      	beq.n	3402189e <__multiply+0x13a>
340217ee:	6106      	str	r6, [r0, #16]
340217f0:	b005      	add	sp, #20
340217f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340217f6:	f843 2b04 	str.w	r2, [r3], #4
340217fa:	e7d9      	b.n	340217b0 <__multiply+0x4c>
340217fc:	f8b1 a000 	ldrh.w	sl, [r1]
34021800:	f1ba 0f00 	cmp.w	sl, #0
34021804:	d021      	beq.n	3402184a <__multiply+0xe6>
34021806:	46c4      	mov	ip, r8
34021808:	46a1      	mov	r9, r4
3402180a:	2700      	movs	r7, #0
3402180c:	f85c 2b04 	ldr.w	r2, [ip], #4
34021810:	f8d9 3000 	ldr.w	r3, [r9]
34021814:	fa1f fb82 	uxth.w	fp, r2
34021818:	4565      	cmp	r5, ip
3402181a:	b29b      	uxth	r3, r3
3402181c:	ea4f 4212 	mov.w	r2, r2, lsr #16
34021820:	fb0a 330b 	mla	r3, sl, fp, r3
34021824:	443b      	add	r3, r7
34021826:	f8d9 7000 	ldr.w	r7, [r9]
3402182a:	ea4f 4717 	mov.w	r7, r7, lsr #16
3402182e:	fb0a 7202 	mla	r2, sl, r2, r7
34021832:	eb02 4213 	add.w	r2, r2, r3, lsr #16
34021836:	b29b      	uxth	r3, r3
34021838:	ea4f 4712 	mov.w	r7, r2, lsr #16
3402183c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34021840:	f849 3b04 	str.w	r3, [r9], #4
34021844:	d8e2      	bhi.n	3402180c <__multiply+0xa8>
34021846:	9b01      	ldr	r3, [sp, #4]
34021848:	50e7      	str	r7, [r4, r3]
3402184a:	9b03      	ldr	r3, [sp, #12]
3402184c:	3104      	adds	r1, #4
3402184e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
34021852:	f1b9 0f00 	cmp.w	r9, #0
34021856:	d020      	beq.n	3402189a <__multiply+0x136>
34021858:	6823      	ldr	r3, [r4, #0]
3402185a:	4647      	mov	r7, r8
3402185c:	46a4      	mov	ip, r4
3402185e:	f04f 0a00 	mov.w	sl, #0
34021862:	f8b7 b000 	ldrh.w	fp, [r7]
34021866:	b29b      	uxth	r3, r3
34021868:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3402186c:	fb09 220b 	mla	r2, r9, fp, r2
34021870:	4452      	add	r2, sl
34021872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34021876:	f84c 3b04 	str.w	r3, [ip], #4
3402187a:	f857 3b04 	ldr.w	r3, [r7], #4
3402187e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34021882:	f8bc 3000 	ldrh.w	r3, [ip]
34021886:	42bd      	cmp	r5, r7
34021888:	fb09 330a 	mla	r3, r9, sl, r3
3402188c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
34021890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34021894:	d8e5      	bhi.n	34021862 <__multiply+0xfe>
34021896:	9a01      	ldr	r2, [sp, #4]
34021898:	50a3      	str	r3, [r4, r2]
3402189a:	3404      	adds	r4, #4
3402189c:	e79d      	b.n	340217da <__multiply+0x76>
3402189e:	3e01      	subs	r6, #1
340218a0:	e79f      	b.n	340217e2 <__multiply+0x7e>
340218a2:	bf00      	nop
340218a4:	3402ca50 	.word	0x3402ca50
340218a8:	3402ca61 	.word	0x3402ca61

340218ac <__pow5mult>:
340218ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
340218b0:	4615      	mov	r5, r2
340218b2:	f012 0203 	ands.w	r2, r2, #3
340218b6:	4607      	mov	r7, r0
340218b8:	460e      	mov	r6, r1
340218ba:	d007      	beq.n	340218cc <__pow5mult+0x20>
340218bc:	3a01      	subs	r2, #1
340218be:	4c25      	ldr	r4, [pc, #148]	@ (34021954 <__pow5mult+0xa8>)
340218c0:	2300      	movs	r3, #0
340218c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
340218c6:	f7ff fea3 	bl	34021610 <__multadd>
340218ca:	4606      	mov	r6, r0
340218cc:	10ad      	asrs	r5, r5, #2
340218ce:	d03d      	beq.n	3402194c <__pow5mult+0xa0>
340218d0:	69fc      	ldr	r4, [r7, #28]
340218d2:	b97c      	cbnz	r4, 340218f4 <__pow5mult+0x48>
340218d4:	2010      	movs	r0, #16
340218d6:	f7ff fd8f 	bl	340213f8 <malloc>
340218da:	4602      	mov	r2, r0
340218dc:	61f8      	str	r0, [r7, #28]
340218de:	b928      	cbnz	r0, 340218ec <__pow5mult+0x40>
340218e0:	4b1d      	ldr	r3, [pc, #116]	@ (34021958 <__pow5mult+0xac>)
340218e2:	f240 11b3 	movw	r1, #435	@ 0x1b3
340218e6:	481d      	ldr	r0, [pc, #116]	@ (3402195c <__pow5mult+0xb0>)
340218e8:	f7fd fc6c 	bl	3401f1c4 <__assert_func>
340218ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
340218f0:	6004      	str	r4, [r0, #0]
340218f2:	60c4      	str	r4, [r0, #12]
340218f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
340218f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
340218fc:	b94c      	cbnz	r4, 34021912 <__pow5mult+0x66>
340218fe:	f240 2171 	movw	r1, #625	@ 0x271
34021902:	4638      	mov	r0, r7
34021904:	f7ff ff18 	bl	34021738 <__i2b>
34021908:	2300      	movs	r3, #0
3402190a:	4604      	mov	r4, r0
3402190c:	f8c8 0008 	str.w	r0, [r8, #8]
34021910:	6003      	str	r3, [r0, #0]
34021912:	f04f 0900 	mov.w	r9, #0
34021916:	07eb      	lsls	r3, r5, #31
34021918:	d50a      	bpl.n	34021930 <__pow5mult+0x84>
3402191a:	4631      	mov	r1, r6
3402191c:	4622      	mov	r2, r4
3402191e:	4638      	mov	r0, r7
34021920:	f7ff ff20 	bl	34021764 <__multiply>
34021924:	4680      	mov	r8, r0
34021926:	4631      	mov	r1, r6
34021928:	4638      	mov	r0, r7
3402192a:	4646      	mov	r6, r8
3402192c:	f7ff fe4e 	bl	340215cc <_Bfree>
34021930:	106d      	asrs	r5, r5, #1
34021932:	d00b      	beq.n	3402194c <__pow5mult+0xa0>
34021934:	6820      	ldr	r0, [r4, #0]
34021936:	b938      	cbnz	r0, 34021948 <__pow5mult+0x9c>
34021938:	4622      	mov	r2, r4
3402193a:	4621      	mov	r1, r4
3402193c:	4638      	mov	r0, r7
3402193e:	f7ff ff11 	bl	34021764 <__multiply>
34021942:	6020      	str	r0, [r4, #0]
34021944:	f8c0 9000 	str.w	r9, [r0]
34021948:	4604      	mov	r4, r0
3402194a:	e7e4      	b.n	34021916 <__pow5mult+0x6a>
3402194c:	4630      	mov	r0, r6
3402194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34021952:	bf00      	nop
34021954:	34106390 	.word	0x34106390
34021958:	3402c9e1 	.word	0x3402c9e1
3402195c:	3402ca61 	.word	0x3402ca61

34021960 <__lshift>:
34021960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34021964:	460c      	mov	r4, r1
34021966:	4607      	mov	r7, r0
34021968:	4691      	mov	r9, r2
3402196a:	ea4f 1a62 	mov.w	sl, r2, asr #5
3402196e:	6923      	ldr	r3, [r4, #16]
34021970:	6849      	ldr	r1, [r1, #4]
34021972:	eb03 1862 	add.w	r8, r3, r2, asr #5
34021976:	68a3      	ldr	r3, [r4, #8]
34021978:	f108 0601 	add.w	r6, r8, #1
3402197c:	42b3      	cmp	r3, r6
3402197e:	db0b      	blt.n	34021998 <__lshift+0x38>
34021980:	4638      	mov	r0, r7
34021982:	f7ff fde3 	bl	3402154c <_Balloc>
34021986:	4605      	mov	r5, r0
34021988:	b948      	cbnz	r0, 3402199e <__lshift+0x3e>
3402198a:	4602      	mov	r2, r0
3402198c:	4b28      	ldr	r3, [pc, #160]	@ (34021a30 <__lshift+0xd0>)
3402198e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
34021992:	4828      	ldr	r0, [pc, #160]	@ (34021a34 <__lshift+0xd4>)
34021994:	f7fd fc16 	bl	3401f1c4 <__assert_func>
34021998:	3101      	adds	r1, #1
3402199a:	005b      	lsls	r3, r3, #1
3402199c:	e7ee      	b.n	3402197c <__lshift+0x1c>
3402199e:	2300      	movs	r3, #0
340219a0:	f100 0114 	add.w	r1, r0, #20
340219a4:	f100 0210 	add.w	r2, r0, #16
340219a8:	4618      	mov	r0, r3
340219aa:	4553      	cmp	r3, sl
340219ac:	db33      	blt.n	34021a16 <__lshift+0xb6>
340219ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
340219b2:	f104 0314 	add.w	r3, r4, #20
340219b6:	6920      	ldr	r0, [r4, #16]
340219b8:	f019 091f 	ands.w	r9, r9, #31
340219bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
340219c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
340219c4:	d02b      	beq.n	34021a1e <__lshift+0xbe>
340219c6:	f1c9 0e20 	rsb	lr, r9, #32
340219ca:	468a      	mov	sl, r1
340219cc:	2200      	movs	r2, #0
340219ce:	6818      	ldr	r0, [r3, #0]
340219d0:	fa00 f009 	lsl.w	r0, r0, r9
340219d4:	4310      	orrs	r0, r2
340219d6:	f84a 0b04 	str.w	r0, [sl], #4
340219da:	f853 2b04 	ldr.w	r2, [r3], #4
340219de:	459c      	cmp	ip, r3
340219e0:	fa22 f20e 	lsr.w	r2, r2, lr
340219e4:	d8f3      	bhi.n	340219ce <__lshift+0x6e>
340219e6:	ebac 0304 	sub.w	r3, ip, r4
340219ea:	f104 0015 	add.w	r0, r4, #21
340219ee:	3b15      	subs	r3, #21
340219f0:	f023 0303 	bic.w	r3, r3, #3
340219f4:	3304      	adds	r3, #4
340219f6:	4560      	cmp	r0, ip
340219f8:	bf88      	it	hi
340219fa:	2304      	movhi	r3, #4
340219fc:	50ca      	str	r2, [r1, r3]
340219fe:	b10a      	cbz	r2, 34021a04 <__lshift+0xa4>
34021a00:	f108 0602 	add.w	r6, r8, #2
34021a04:	3e01      	subs	r6, #1
34021a06:	4638      	mov	r0, r7
34021a08:	4621      	mov	r1, r4
34021a0a:	612e      	str	r6, [r5, #16]
34021a0c:	f7ff fdde 	bl	340215cc <_Bfree>
34021a10:	4628      	mov	r0, r5
34021a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34021a16:	3301      	adds	r3, #1
34021a18:	f842 0f04 	str.w	r0, [r2, #4]!
34021a1c:	e7c5      	b.n	340219aa <__lshift+0x4a>
34021a1e:	3904      	subs	r1, #4
34021a20:	f853 2b04 	ldr.w	r2, [r3], #4
34021a24:	459c      	cmp	ip, r3
34021a26:	f841 2f04 	str.w	r2, [r1, #4]!
34021a2a:	d8f9      	bhi.n	34021a20 <__lshift+0xc0>
34021a2c:	e7ea      	b.n	34021a04 <__lshift+0xa4>
34021a2e:	bf00      	nop
34021a30:	3402ca50 	.word	0x3402ca50
34021a34:	3402ca61 	.word	0x3402ca61

34021a38 <__mcmp>:
34021a38:	4603      	mov	r3, r0
34021a3a:	690a      	ldr	r2, [r1, #16]
34021a3c:	6900      	ldr	r0, [r0, #16]
34021a3e:	1a80      	subs	r0, r0, r2
34021a40:	b530      	push	{r4, r5, lr}
34021a42:	d10e      	bne.n	34021a62 <__mcmp+0x2a>
34021a44:	3314      	adds	r3, #20
34021a46:	3114      	adds	r1, #20
34021a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
34021a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
34021a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
34021a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
34021a58:	4295      	cmp	r5, r2
34021a5a:	d003      	beq.n	34021a64 <__mcmp+0x2c>
34021a5c:	d205      	bcs.n	34021a6a <__mcmp+0x32>
34021a5e:	f04f 30ff 	mov.w	r0, #4294967295
34021a62:	bd30      	pop	{r4, r5, pc}
34021a64:	42a3      	cmp	r3, r4
34021a66:	d3f3      	bcc.n	34021a50 <__mcmp+0x18>
34021a68:	e7fb      	b.n	34021a62 <__mcmp+0x2a>
34021a6a:	2001      	movs	r0, #1
34021a6c:	e7f9      	b.n	34021a62 <__mcmp+0x2a>
	...

34021a70 <__mdiff>:
34021a70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021a74:	4689      	mov	r9, r1
34021a76:	4606      	mov	r6, r0
34021a78:	4611      	mov	r1, r2
34021a7a:	4614      	mov	r4, r2
34021a7c:	4648      	mov	r0, r9
34021a7e:	f7ff ffdb 	bl	34021a38 <__mcmp>
34021a82:	1e05      	subs	r5, r0, #0
34021a84:	d112      	bne.n	34021aac <__mdiff+0x3c>
34021a86:	4629      	mov	r1, r5
34021a88:	4630      	mov	r0, r6
34021a8a:	f7ff fd5f 	bl	3402154c <_Balloc>
34021a8e:	4602      	mov	r2, r0
34021a90:	b928      	cbnz	r0, 34021a9e <__mdiff+0x2e>
34021a92:	4b41      	ldr	r3, [pc, #260]	@ (34021b98 <__mdiff+0x128>)
34021a94:	f240 2137 	movw	r1, #567	@ 0x237
34021a98:	4840      	ldr	r0, [pc, #256]	@ (34021b9c <__mdiff+0x12c>)
34021a9a:	f7fd fb93 	bl	3401f1c4 <__assert_func>
34021a9e:	2301      	movs	r3, #1
34021aa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
34021aa4:	4610      	mov	r0, r2
34021aa6:	b003      	add	sp, #12
34021aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34021aac:	bfbc      	itt	lt
34021aae:	464b      	movlt	r3, r9
34021ab0:	46a1      	movlt	r9, r4
34021ab2:	4630      	mov	r0, r6
34021ab4:	bfb8      	it	lt
34021ab6:	2501      	movlt	r5, #1
34021ab8:	f8d9 1004 	ldr.w	r1, [r9, #4]
34021abc:	bfb4      	ite	lt
34021abe:	461c      	movlt	r4, r3
34021ac0:	2500      	movge	r5, #0
34021ac2:	f7ff fd43 	bl	3402154c <_Balloc>
34021ac6:	4602      	mov	r2, r0
34021ac8:	b918      	cbnz	r0, 34021ad2 <__mdiff+0x62>
34021aca:	4b33      	ldr	r3, [pc, #204]	@ (34021b98 <__mdiff+0x128>)
34021acc:	f240 2145 	movw	r1, #581	@ 0x245
34021ad0:	e7e2      	b.n	34021a98 <__mdiff+0x28>
34021ad2:	f8d9 7010 	ldr.w	r7, [r9, #16]
34021ad6:	f104 0e14 	add.w	lr, r4, #20
34021ada:	6926      	ldr	r6, [r4, #16]
34021adc:	f100 0b14 	add.w	fp, r0, #20
34021ae0:	60c5      	str	r5, [r0, #12]
34021ae2:	f109 0514 	add.w	r5, r9, #20
34021ae6:	f109 0310 	add.w	r3, r9, #16
34021aea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
34021aee:	eb05 0887 	add.w	r8, r5, r7, lsl #2
34021af2:	46d9      	mov	r9, fp
34021af4:	f04f 0c00 	mov.w	ip, #0
34021af8:	9301      	str	r3, [sp, #4]
34021afa:	9b01      	ldr	r3, [sp, #4]
34021afc:	f85e 0b04 	ldr.w	r0, [lr], #4
34021b00:	f853 af04 	ldr.w	sl, [r3, #4]!
34021b04:	4576      	cmp	r6, lr
34021b06:	9301      	str	r3, [sp, #4]
34021b08:	fa1f f38a 	uxth.w	r3, sl
34021b0c:	4619      	mov	r1, r3
34021b0e:	b283      	uxth	r3, r0
34021b10:	ea4f 4010 	mov.w	r0, r0, lsr #16
34021b14:	eba1 0303 	sub.w	r3, r1, r3
34021b18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
34021b1c:	4463      	add	r3, ip
34021b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
34021b22:	b29b      	uxth	r3, r3
34021b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
34021b28:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
34021b2c:	f849 3b04 	str.w	r3, [r9], #4
34021b30:	d8e3      	bhi.n	34021afa <__mdiff+0x8a>
34021b32:	1b33      	subs	r3, r6, r4
34021b34:	3415      	adds	r4, #21
34021b36:	3b15      	subs	r3, #21
34021b38:	f023 0303 	bic.w	r3, r3, #3
34021b3c:	3304      	adds	r3, #4
34021b3e:	42a6      	cmp	r6, r4
34021b40:	bf38      	it	cc
34021b42:	2304      	movcc	r3, #4
34021b44:	441d      	add	r5, r3
34021b46:	445b      	add	r3, fp
34021b48:	462c      	mov	r4, r5
34021b4a:	461e      	mov	r6, r3
34021b4c:	4544      	cmp	r4, r8
34021b4e:	d30e      	bcc.n	34021b6e <__mdiff+0xfe>
34021b50:	f108 0103 	add.w	r1, r8, #3
34021b54:	1b49      	subs	r1, r1, r5
34021b56:	3d03      	subs	r5, #3
34021b58:	f021 0103 	bic.w	r1, r1, #3
34021b5c:	45a8      	cmp	r8, r5
34021b5e:	bf38      	it	cc
34021b60:	2100      	movcc	r1, #0
34021b62:	440b      	add	r3, r1
34021b64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
34021b68:	b199      	cbz	r1, 34021b92 <__mdiff+0x122>
34021b6a:	6117      	str	r7, [r2, #16]
34021b6c:	e79a      	b.n	34021aa4 <__mdiff+0x34>
34021b6e:	f854 1b04 	ldr.w	r1, [r4], #4
34021b72:	46e6      	mov	lr, ip
34021b74:	fa1f fc81 	uxth.w	ip, r1
34021b78:	0c08      	lsrs	r0, r1, #16
34021b7a:	4471      	add	r1, lr
34021b7c:	44f4      	add	ip, lr
34021b7e:	b289      	uxth	r1, r1
34021b80:	eb00 402c 	add.w	r0, r0, ip, asr #16
34021b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
34021b88:	ea4f 4c20 	mov.w	ip, r0, asr #16
34021b8c:	f846 1b04 	str.w	r1, [r6], #4
34021b90:	e7dc      	b.n	34021b4c <__mdiff+0xdc>
34021b92:	3f01      	subs	r7, #1
34021b94:	e7e6      	b.n	34021b64 <__mdiff+0xf4>
34021b96:	bf00      	nop
34021b98:	3402ca50 	.word	0x3402ca50
34021b9c:	3402ca61 	.word	0x3402ca61

34021ba0 <__d2b>:
34021ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
34021ba4:	460f      	mov	r7, r1
34021ba6:	2101      	movs	r1, #1
34021ba8:	4616      	mov	r6, r2
34021baa:	ec59 8b10 	vmov	r8, r9, d0
34021bae:	f7ff fccd 	bl	3402154c <_Balloc>
34021bb2:	4604      	mov	r4, r0
34021bb4:	b930      	cbnz	r0, 34021bc4 <__d2b+0x24>
34021bb6:	4602      	mov	r2, r0
34021bb8:	4b23      	ldr	r3, [pc, #140]	@ (34021c48 <__d2b+0xa8>)
34021bba:	f240 310f 	movw	r1, #783	@ 0x30f
34021bbe:	4823      	ldr	r0, [pc, #140]	@ (34021c4c <__d2b+0xac>)
34021bc0:	f7fd fb00 	bl	3401f1c4 <__assert_func>
34021bc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
34021bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
34021bcc:	b10d      	cbz	r5, 34021bd2 <__d2b+0x32>
34021bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
34021bd2:	9301      	str	r3, [sp, #4]
34021bd4:	f1b8 0300 	subs.w	r3, r8, #0
34021bd8:	d023      	beq.n	34021c22 <__d2b+0x82>
34021bda:	4668      	mov	r0, sp
34021bdc:	9300      	str	r3, [sp, #0]
34021bde:	f7ff fd7e 	bl	340216de <__lo0bits>
34021be2:	e9dd 1200 	ldrd	r1, r2, [sp]
34021be6:	b1d0      	cbz	r0, 34021c1e <__d2b+0x7e>
34021be8:	f1c0 0320 	rsb	r3, r0, #32
34021bec:	fa02 f303 	lsl.w	r3, r2, r3
34021bf0:	40c2      	lsrs	r2, r0
34021bf2:	430b      	orrs	r3, r1
34021bf4:	9201      	str	r2, [sp, #4]
34021bf6:	6163      	str	r3, [r4, #20]
34021bf8:	9b01      	ldr	r3, [sp, #4]
34021bfa:	2b00      	cmp	r3, #0
34021bfc:	61a3      	str	r3, [r4, #24]
34021bfe:	bf0c      	ite	eq
34021c00:	2201      	moveq	r2, #1
34021c02:	2202      	movne	r2, #2
34021c04:	6122      	str	r2, [r4, #16]
34021c06:	b1a5      	cbz	r5, 34021c32 <__d2b+0x92>
34021c08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
34021c0c:	4405      	add	r5, r0
34021c0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
34021c12:	603d      	str	r5, [r7, #0]
34021c14:	6030      	str	r0, [r6, #0]
34021c16:	4620      	mov	r0, r4
34021c18:	b003      	add	sp, #12
34021c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
34021c1e:	6161      	str	r1, [r4, #20]
34021c20:	e7ea      	b.n	34021bf8 <__d2b+0x58>
34021c22:	a801      	add	r0, sp, #4
34021c24:	f7ff fd5b 	bl	340216de <__lo0bits>
34021c28:	9b01      	ldr	r3, [sp, #4]
34021c2a:	3020      	adds	r0, #32
34021c2c:	2201      	movs	r2, #1
34021c2e:	6163      	str	r3, [r4, #20]
34021c30:	e7e8      	b.n	34021c04 <__d2b+0x64>
34021c32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
34021c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
34021c3a:	6038      	str	r0, [r7, #0]
34021c3c:	6918      	ldr	r0, [r3, #16]
34021c3e:	f7ff fd2f 	bl	340216a0 <__hi0bits>
34021c42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
34021c46:	e7e5      	b.n	34021c14 <__d2b+0x74>
34021c48:	3402ca50 	.word	0x3402ca50
34021c4c:	3402ca61 	.word	0x3402ca61

34021c50 <__ssputs_r>:
34021c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34021c54:	461f      	mov	r7, r3
34021c56:	688e      	ldr	r6, [r1, #8]
34021c58:	4682      	mov	sl, r0
34021c5a:	460c      	mov	r4, r1
34021c5c:	42be      	cmp	r6, r7
34021c5e:	4690      	mov	r8, r2
34021c60:	680b      	ldr	r3, [r1, #0]
34021c62:	d82d      	bhi.n	34021cc0 <__ssputs_r+0x70>
34021c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34021c68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
34021c6c:	d026      	beq.n	34021cbc <__ssputs_r+0x6c>
34021c6e:	6965      	ldr	r5, [r4, #20]
34021c70:	6909      	ldr	r1, [r1, #16]
34021c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
34021c76:	eba3 0901 	sub.w	r9, r3, r1
34021c7a:	1c7b      	adds	r3, r7, #1
34021c7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
34021c80:	444b      	add	r3, r9
34021c82:	106d      	asrs	r5, r5, #1
34021c84:	429d      	cmp	r5, r3
34021c86:	bf38      	it	cc
34021c88:	461d      	movcc	r5, r3
34021c8a:	0553      	lsls	r3, r2, #21
34021c8c:	d527      	bpl.n	34021cde <__ssputs_r+0x8e>
34021c8e:	4629      	mov	r1, r5
34021c90:	f7ff fbdc 	bl	3402144c <_malloc_r>
34021c94:	4606      	mov	r6, r0
34021c96:	b360      	cbz	r0, 34021cf2 <__ssputs_r+0xa2>
34021c98:	464a      	mov	r2, r9
34021c9a:	6921      	ldr	r1, [r4, #16]
34021c9c:	f7fe fd63 	bl	34020766 <memcpy>
34021ca0:	89a3      	ldrh	r3, [r4, #12]
34021ca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
34021ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34021caa:	81a3      	strh	r3, [r4, #12]
34021cac:	6126      	str	r6, [r4, #16]
34021cae:	444e      	add	r6, r9
34021cb0:	6165      	str	r5, [r4, #20]
34021cb2:	eba5 0509 	sub.w	r5, r5, r9
34021cb6:	6026      	str	r6, [r4, #0]
34021cb8:	463e      	mov	r6, r7
34021cba:	60a5      	str	r5, [r4, #8]
34021cbc:	42be      	cmp	r6, r7
34021cbe:	d900      	bls.n	34021cc2 <__ssputs_r+0x72>
34021cc0:	463e      	mov	r6, r7
34021cc2:	4632      	mov	r2, r6
34021cc4:	4641      	mov	r1, r8
34021cc6:	6820      	ldr	r0, [r4, #0]
34021cc8:	f7fe faac 	bl	34020224 <memmove>
34021ccc:	68a3      	ldr	r3, [r4, #8]
34021cce:	2000      	movs	r0, #0
34021cd0:	1b9b      	subs	r3, r3, r6
34021cd2:	60a3      	str	r3, [r4, #8]
34021cd4:	6823      	ldr	r3, [r4, #0]
34021cd6:	4433      	add	r3, r6
34021cd8:	6023      	str	r3, [r4, #0]
34021cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34021cde:	462a      	mov	r2, r5
34021ce0:	f000 fbfa 	bl	340224d8 <_realloc_r>
34021ce4:	4606      	mov	r6, r0
34021ce6:	2800      	cmp	r0, #0
34021ce8:	d1e0      	bne.n	34021cac <__ssputs_r+0x5c>
34021cea:	6921      	ldr	r1, [r4, #16]
34021cec:	4650      	mov	r0, sl
34021cee:	f7ff fb39 	bl	34021364 <_free_r>
34021cf2:	230c      	movs	r3, #12
34021cf4:	f04f 30ff 	mov.w	r0, #4294967295
34021cf8:	f8ca 3000 	str.w	r3, [sl]
34021cfc:	89a3      	ldrh	r3, [r4, #12]
34021cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34021d02:	81a3      	strh	r3, [r4, #12]
34021d04:	e7e9      	b.n	34021cda <__ssputs_r+0x8a>
	...

34021d08 <_svfiprintf_r>:
34021d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021d0c:	4698      	mov	r8, r3
34021d0e:	898b      	ldrh	r3, [r1, #12]
34021d10:	b09d      	sub	sp, #116	@ 0x74
34021d12:	4607      	mov	r7, r0
34021d14:	061b      	lsls	r3, r3, #24
34021d16:	460d      	mov	r5, r1
34021d18:	4614      	mov	r4, r2
34021d1a:	d510      	bpl.n	34021d3e <_svfiprintf_r+0x36>
34021d1c:	690b      	ldr	r3, [r1, #16]
34021d1e:	b973      	cbnz	r3, 34021d3e <_svfiprintf_r+0x36>
34021d20:	2140      	movs	r1, #64	@ 0x40
34021d22:	f7ff fb93 	bl	3402144c <_malloc_r>
34021d26:	6028      	str	r0, [r5, #0]
34021d28:	6128      	str	r0, [r5, #16]
34021d2a:	b930      	cbnz	r0, 34021d3a <_svfiprintf_r+0x32>
34021d2c:	230c      	movs	r3, #12
34021d2e:	603b      	str	r3, [r7, #0]
34021d30:	f04f 30ff 	mov.w	r0, #4294967295
34021d34:	b01d      	add	sp, #116	@ 0x74
34021d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34021d3a:	2340      	movs	r3, #64	@ 0x40
34021d3c:	616b      	str	r3, [r5, #20]
34021d3e:	2300      	movs	r3, #0
34021d40:	f8cd 800c 	str.w	r8, [sp, #12]
34021d44:	f04f 0901 	mov.w	r9, #1
34021d48:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 34021eec <_svfiprintf_r+0x1e4>
34021d4c:	9309      	str	r3, [sp, #36]	@ 0x24
34021d4e:	2320      	movs	r3, #32
34021d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34021d54:	2330      	movs	r3, #48	@ 0x30
34021d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34021d5a:	4623      	mov	r3, r4
34021d5c:	469a      	mov	sl, r3
34021d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
34021d62:	b10a      	cbz	r2, 34021d68 <_svfiprintf_r+0x60>
34021d64:	2a25      	cmp	r2, #37	@ 0x25
34021d66:	d1f9      	bne.n	34021d5c <_svfiprintf_r+0x54>
34021d68:	ebba 0b04 	subs.w	fp, sl, r4
34021d6c:	d00b      	beq.n	34021d86 <_svfiprintf_r+0x7e>
34021d6e:	465b      	mov	r3, fp
34021d70:	4622      	mov	r2, r4
34021d72:	4629      	mov	r1, r5
34021d74:	4638      	mov	r0, r7
34021d76:	f7ff ff6b 	bl	34021c50 <__ssputs_r>
34021d7a:	3001      	adds	r0, #1
34021d7c:	f000 80a7 	beq.w	34021ece <_svfiprintf_r+0x1c6>
34021d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34021d82:	445a      	add	r2, fp
34021d84:	9209      	str	r2, [sp, #36]	@ 0x24
34021d86:	f89a 3000 	ldrb.w	r3, [sl]
34021d8a:	2b00      	cmp	r3, #0
34021d8c:	f000 809f 	beq.w	34021ece <_svfiprintf_r+0x1c6>
34021d90:	2300      	movs	r3, #0
34021d92:	f04f 32ff 	mov.w	r2, #4294967295
34021d96:	f10a 0a01 	add.w	sl, sl, #1
34021d9a:	9304      	str	r3, [sp, #16]
34021d9c:	9307      	str	r3, [sp, #28]
34021d9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34021da2:	931a      	str	r3, [sp, #104]	@ 0x68
34021da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
34021da8:	4654      	mov	r4, sl
34021daa:	2205      	movs	r2, #5
34021dac:	484f      	ldr	r0, [pc, #316]	@ (34021eec <_svfiprintf_r+0x1e4>)
34021dae:	f814 1b01 	ldrb.w	r1, [r4], #1
34021db2:	f7fe fcca 	bl	3402074a <memchr>
34021db6:	9a04      	ldr	r2, [sp, #16]
34021db8:	b9d8      	cbnz	r0, 34021df2 <_svfiprintf_r+0xea>
34021dba:	06d0      	lsls	r0, r2, #27
34021dbc:	bf44      	itt	mi
34021dbe:	2320      	movmi	r3, #32
34021dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34021dc4:	0711      	lsls	r1, r2, #28
34021dc6:	bf44      	itt	mi
34021dc8:	232b      	movmi	r3, #43	@ 0x2b
34021dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34021dce:	f89a 3000 	ldrb.w	r3, [sl]
34021dd2:	2b2a      	cmp	r3, #42	@ 0x2a
34021dd4:	d015      	beq.n	34021e02 <_svfiprintf_r+0xfa>
34021dd6:	9a07      	ldr	r2, [sp, #28]
34021dd8:	4654      	mov	r4, sl
34021dda:	2000      	movs	r0, #0
34021ddc:	f04f 0c0a 	mov.w	ip, #10
34021de0:	4621      	mov	r1, r4
34021de2:	f811 3b01 	ldrb.w	r3, [r1], #1
34021de6:	3b30      	subs	r3, #48	@ 0x30
34021de8:	2b09      	cmp	r3, #9
34021dea:	d94b      	bls.n	34021e84 <_svfiprintf_r+0x17c>
34021dec:	b1b0      	cbz	r0, 34021e1c <_svfiprintf_r+0x114>
34021dee:	9207      	str	r2, [sp, #28]
34021df0:	e014      	b.n	34021e1c <_svfiprintf_r+0x114>
34021df2:	eba0 0308 	sub.w	r3, r0, r8
34021df6:	46a2      	mov	sl, r4
34021df8:	fa09 f303 	lsl.w	r3, r9, r3
34021dfc:	4313      	orrs	r3, r2
34021dfe:	9304      	str	r3, [sp, #16]
34021e00:	e7d2      	b.n	34021da8 <_svfiprintf_r+0xa0>
34021e02:	9b03      	ldr	r3, [sp, #12]
34021e04:	1d19      	adds	r1, r3, #4
34021e06:	681b      	ldr	r3, [r3, #0]
34021e08:	2b00      	cmp	r3, #0
34021e0a:	9103      	str	r1, [sp, #12]
34021e0c:	bfbb      	ittet	lt
34021e0e:	425b      	neglt	r3, r3
34021e10:	f042 0202 	orrlt.w	r2, r2, #2
34021e14:	9307      	strge	r3, [sp, #28]
34021e16:	9307      	strlt	r3, [sp, #28]
34021e18:	bfb8      	it	lt
34021e1a:	9204      	strlt	r2, [sp, #16]
34021e1c:	7823      	ldrb	r3, [r4, #0]
34021e1e:	2b2e      	cmp	r3, #46	@ 0x2e
34021e20:	d10a      	bne.n	34021e38 <_svfiprintf_r+0x130>
34021e22:	7863      	ldrb	r3, [r4, #1]
34021e24:	2b2a      	cmp	r3, #42	@ 0x2a
34021e26:	d132      	bne.n	34021e8e <_svfiprintf_r+0x186>
34021e28:	9b03      	ldr	r3, [sp, #12]
34021e2a:	3402      	adds	r4, #2
34021e2c:	1d1a      	adds	r2, r3, #4
34021e2e:	681b      	ldr	r3, [r3, #0]
34021e30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
34021e34:	9203      	str	r2, [sp, #12]
34021e36:	9305      	str	r3, [sp, #20]
34021e38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 34021efc <_svfiprintf_r+0x1f4>
34021e3c:	2203      	movs	r2, #3
34021e3e:	7821      	ldrb	r1, [r4, #0]
34021e40:	4650      	mov	r0, sl
34021e42:	f7fe fc82 	bl	3402074a <memchr>
34021e46:	b138      	cbz	r0, 34021e58 <_svfiprintf_r+0x150>
34021e48:	eba0 000a 	sub.w	r0, r0, sl
34021e4c:	2240      	movs	r2, #64	@ 0x40
34021e4e:	9b04      	ldr	r3, [sp, #16]
34021e50:	3401      	adds	r4, #1
34021e52:	4082      	lsls	r2, r0
34021e54:	4313      	orrs	r3, r2
34021e56:	9304      	str	r3, [sp, #16]
34021e58:	f814 1b01 	ldrb.w	r1, [r4], #1
34021e5c:	2206      	movs	r2, #6
34021e5e:	4824      	ldr	r0, [pc, #144]	@ (34021ef0 <_svfiprintf_r+0x1e8>)
34021e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
34021e64:	f7fe fc71 	bl	3402074a <memchr>
34021e68:	2800      	cmp	r0, #0
34021e6a:	d036      	beq.n	34021eda <_svfiprintf_r+0x1d2>
34021e6c:	4b21      	ldr	r3, [pc, #132]	@ (34021ef4 <_svfiprintf_r+0x1ec>)
34021e6e:	bb1b      	cbnz	r3, 34021eb8 <_svfiprintf_r+0x1b0>
34021e70:	9b03      	ldr	r3, [sp, #12]
34021e72:	3307      	adds	r3, #7
34021e74:	f023 0307 	bic.w	r3, r3, #7
34021e78:	3308      	adds	r3, #8
34021e7a:	9303      	str	r3, [sp, #12]
34021e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34021e7e:	4433      	add	r3, r6
34021e80:	9309      	str	r3, [sp, #36]	@ 0x24
34021e82:	e76a      	b.n	34021d5a <_svfiprintf_r+0x52>
34021e84:	fb0c 3202 	mla	r2, ip, r2, r3
34021e88:	460c      	mov	r4, r1
34021e8a:	2001      	movs	r0, #1
34021e8c:	e7a8      	b.n	34021de0 <_svfiprintf_r+0xd8>
34021e8e:	2300      	movs	r3, #0
34021e90:	3401      	adds	r4, #1
34021e92:	f04f 0c0a 	mov.w	ip, #10
34021e96:	4619      	mov	r1, r3
34021e98:	9305      	str	r3, [sp, #20]
34021e9a:	4620      	mov	r0, r4
34021e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
34021ea0:	3a30      	subs	r2, #48	@ 0x30
34021ea2:	2a09      	cmp	r2, #9
34021ea4:	d903      	bls.n	34021eae <_svfiprintf_r+0x1a6>
34021ea6:	2b00      	cmp	r3, #0
34021ea8:	d0c6      	beq.n	34021e38 <_svfiprintf_r+0x130>
34021eaa:	9105      	str	r1, [sp, #20]
34021eac:	e7c4      	b.n	34021e38 <_svfiprintf_r+0x130>
34021eae:	fb0c 2101 	mla	r1, ip, r1, r2
34021eb2:	4604      	mov	r4, r0
34021eb4:	2301      	movs	r3, #1
34021eb6:	e7f0      	b.n	34021e9a <_svfiprintf_r+0x192>
34021eb8:	ab03      	add	r3, sp, #12
34021eba:	462a      	mov	r2, r5
34021ebc:	a904      	add	r1, sp, #16
34021ebe:	4638      	mov	r0, r7
34021ec0:	9300      	str	r3, [sp, #0]
34021ec2:	4b0d      	ldr	r3, [pc, #52]	@ (34021ef8 <_svfiprintf_r+0x1f0>)
34021ec4:	f7fd fbac 	bl	3401f620 <_printf_float>
34021ec8:	1c42      	adds	r2, r0, #1
34021eca:	4606      	mov	r6, r0
34021ecc:	d1d6      	bne.n	34021e7c <_svfiprintf_r+0x174>
34021ece:	89ab      	ldrh	r3, [r5, #12]
34021ed0:	065b      	lsls	r3, r3, #25
34021ed2:	f53f af2d 	bmi.w	34021d30 <_svfiprintf_r+0x28>
34021ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
34021ed8:	e72c      	b.n	34021d34 <_svfiprintf_r+0x2c>
34021eda:	ab03      	add	r3, sp, #12
34021edc:	462a      	mov	r2, r5
34021ede:	a904      	add	r1, sp, #16
34021ee0:	4638      	mov	r0, r7
34021ee2:	9300      	str	r3, [sp, #0]
34021ee4:	4b04      	ldr	r3, [pc, #16]	@ (34021ef8 <_svfiprintf_r+0x1f0>)
34021ee6:	f7fd fe27 	bl	3401fb38 <_printf_i>
34021eea:	e7ed      	b.n	34021ec8 <_svfiprintf_r+0x1c0>
34021eec:	3402caba 	.word	0x3402caba
34021ef0:	3402cac4 	.word	0x3402cac4
34021ef4:	3401f621 	.word	0x3401f621
34021ef8:	34021c51 	.word	0x34021c51
34021efc:	3402cac0 	.word	0x3402cac0

34021f00 <__sfputc_r>:
34021f00:	6893      	ldr	r3, [r2, #8]
34021f02:	3b01      	subs	r3, #1
34021f04:	2b00      	cmp	r3, #0
34021f06:	b410      	push	{r4}
34021f08:	6093      	str	r3, [r2, #8]
34021f0a:	da08      	bge.n	34021f1e <__sfputc_r+0x1e>
34021f0c:	6994      	ldr	r4, [r2, #24]
34021f0e:	42a3      	cmp	r3, r4
34021f10:	db01      	blt.n	34021f16 <__sfputc_r+0x16>
34021f12:	290a      	cmp	r1, #10
34021f14:	d103      	bne.n	34021f1e <__sfputc_r+0x1e>
34021f16:	f85d 4b04 	ldr.w	r4, [sp], #4
34021f1a:	f7fe b8ef 	b.w	340200fc <__swbuf_r>
34021f1e:	6813      	ldr	r3, [r2, #0]
34021f20:	1c58      	adds	r0, r3, #1
34021f22:	6010      	str	r0, [r2, #0]
34021f24:	4608      	mov	r0, r1
34021f26:	7019      	strb	r1, [r3, #0]
34021f28:	f85d 4b04 	ldr.w	r4, [sp], #4
34021f2c:	4770      	bx	lr

34021f2e <__sfputs_r>:
34021f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34021f30:	4606      	mov	r6, r0
34021f32:	460f      	mov	r7, r1
34021f34:	4614      	mov	r4, r2
34021f36:	18d5      	adds	r5, r2, r3
34021f38:	42ac      	cmp	r4, r5
34021f3a:	d101      	bne.n	34021f40 <__sfputs_r+0x12>
34021f3c:	2000      	movs	r0, #0
34021f3e:	e007      	b.n	34021f50 <__sfputs_r+0x22>
34021f40:	463a      	mov	r2, r7
34021f42:	f814 1b01 	ldrb.w	r1, [r4], #1
34021f46:	4630      	mov	r0, r6
34021f48:	f7ff ffda 	bl	34021f00 <__sfputc_r>
34021f4c:	1c43      	adds	r3, r0, #1
34021f4e:	d1f3      	bne.n	34021f38 <__sfputs_r+0xa>
34021f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

34021f54 <_vfiprintf_r>:
34021f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34021f58:	460d      	mov	r5, r1
34021f5a:	b09d      	sub	sp, #116	@ 0x74
34021f5c:	4614      	mov	r4, r2
34021f5e:	4698      	mov	r8, r3
34021f60:	4606      	mov	r6, r0
34021f62:	b118      	cbz	r0, 34021f6c <_vfiprintf_r+0x18>
34021f64:	6a03      	ldr	r3, [r0, #32]
34021f66:	b90b      	cbnz	r3, 34021f6c <_vfiprintf_r+0x18>
34021f68:	f7fd ff90 	bl	3401fe8c <__sinit>
34021f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34021f6e:	07d9      	lsls	r1, r3, #31
34021f70:	d405      	bmi.n	34021f7e <_vfiprintf_r+0x2a>
34021f72:	89ab      	ldrh	r3, [r5, #12]
34021f74:	059a      	lsls	r2, r3, #22
34021f76:	d402      	bmi.n	34021f7e <_vfiprintf_r+0x2a>
34021f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34021f7a:	f7fe fbdc 	bl	34020736 <__retarget_lock_acquire_recursive>
34021f7e:	89ab      	ldrh	r3, [r5, #12]
34021f80:	071b      	lsls	r3, r3, #28
34021f82:	d501      	bpl.n	34021f88 <_vfiprintf_r+0x34>
34021f84:	692b      	ldr	r3, [r5, #16]
34021f86:	b99b      	cbnz	r3, 34021fb0 <_vfiprintf_r+0x5c>
34021f88:	4629      	mov	r1, r5
34021f8a:	4630      	mov	r0, r6
34021f8c:	f7fe f8f4 	bl	34020178 <__swsetup_r>
34021f90:	b170      	cbz	r0, 34021fb0 <_vfiprintf_r+0x5c>
34021f92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34021f94:	07dc      	lsls	r4, r3, #31
34021f96:	d504      	bpl.n	34021fa2 <_vfiprintf_r+0x4e>
34021f98:	f04f 30ff 	mov.w	r0, #4294967295
34021f9c:	b01d      	add	sp, #116	@ 0x74
34021f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34021fa2:	89ab      	ldrh	r3, [r5, #12]
34021fa4:	0598      	lsls	r0, r3, #22
34021fa6:	d4f7      	bmi.n	34021f98 <_vfiprintf_r+0x44>
34021fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
34021faa:	f7fe fbc5 	bl	34020738 <__retarget_lock_release_recursive>
34021fae:	e7f3      	b.n	34021f98 <_vfiprintf_r+0x44>
34021fb0:	2300      	movs	r3, #0
34021fb2:	f8cd 800c 	str.w	r8, [sp, #12]
34021fb6:	f04f 0901 	mov.w	r9, #1
34021fba:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 34022170 <_vfiprintf_r+0x21c>
34021fbe:	9309      	str	r3, [sp, #36]	@ 0x24
34021fc0:	2320      	movs	r3, #32
34021fc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
34021fc6:	2330      	movs	r3, #48	@ 0x30
34021fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
34021fcc:	4623      	mov	r3, r4
34021fce:	469a      	mov	sl, r3
34021fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
34021fd4:	b10a      	cbz	r2, 34021fda <_vfiprintf_r+0x86>
34021fd6:	2a25      	cmp	r2, #37	@ 0x25
34021fd8:	d1f9      	bne.n	34021fce <_vfiprintf_r+0x7a>
34021fda:	ebba 0b04 	subs.w	fp, sl, r4
34021fde:	d00b      	beq.n	34021ff8 <_vfiprintf_r+0xa4>
34021fe0:	465b      	mov	r3, fp
34021fe2:	4622      	mov	r2, r4
34021fe4:	4629      	mov	r1, r5
34021fe6:	4630      	mov	r0, r6
34021fe8:	f7ff ffa1 	bl	34021f2e <__sfputs_r>
34021fec:	3001      	adds	r0, #1
34021fee:	f000 80a7 	beq.w	34022140 <_vfiprintf_r+0x1ec>
34021ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34021ff4:	445a      	add	r2, fp
34021ff6:	9209      	str	r2, [sp, #36]	@ 0x24
34021ff8:	f89a 3000 	ldrb.w	r3, [sl]
34021ffc:	2b00      	cmp	r3, #0
34021ffe:	f000 809f 	beq.w	34022140 <_vfiprintf_r+0x1ec>
34022002:	2300      	movs	r3, #0
34022004:	f04f 32ff 	mov.w	r2, #4294967295
34022008:	f10a 0a01 	add.w	sl, sl, #1
3402200c:	9304      	str	r3, [sp, #16]
3402200e:	9307      	str	r3, [sp, #28]
34022010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
34022014:	931a      	str	r3, [sp, #104]	@ 0x68
34022016:	e9cd 2305 	strd	r2, r3, [sp, #20]
3402201a:	4654      	mov	r4, sl
3402201c:	2205      	movs	r2, #5
3402201e:	4854      	ldr	r0, [pc, #336]	@ (34022170 <_vfiprintf_r+0x21c>)
34022020:	f814 1b01 	ldrb.w	r1, [r4], #1
34022024:	f7fe fb91 	bl	3402074a <memchr>
34022028:	9a04      	ldr	r2, [sp, #16]
3402202a:	b9d8      	cbnz	r0, 34022064 <_vfiprintf_r+0x110>
3402202c:	06d1      	lsls	r1, r2, #27
3402202e:	bf44      	itt	mi
34022030:	2320      	movmi	r3, #32
34022032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34022036:	0713      	lsls	r3, r2, #28
34022038:	bf44      	itt	mi
3402203a:	232b      	movmi	r3, #43	@ 0x2b
3402203c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
34022040:	f89a 3000 	ldrb.w	r3, [sl]
34022044:	2b2a      	cmp	r3, #42	@ 0x2a
34022046:	d015      	beq.n	34022074 <_vfiprintf_r+0x120>
34022048:	9a07      	ldr	r2, [sp, #28]
3402204a:	4654      	mov	r4, sl
3402204c:	2000      	movs	r0, #0
3402204e:	f04f 0c0a 	mov.w	ip, #10
34022052:	4621      	mov	r1, r4
34022054:	f811 3b01 	ldrb.w	r3, [r1], #1
34022058:	3b30      	subs	r3, #48	@ 0x30
3402205a:	2b09      	cmp	r3, #9
3402205c:	d94b      	bls.n	340220f6 <_vfiprintf_r+0x1a2>
3402205e:	b1b0      	cbz	r0, 3402208e <_vfiprintf_r+0x13a>
34022060:	9207      	str	r2, [sp, #28]
34022062:	e014      	b.n	3402208e <_vfiprintf_r+0x13a>
34022064:	eba0 0308 	sub.w	r3, r0, r8
34022068:	46a2      	mov	sl, r4
3402206a:	fa09 f303 	lsl.w	r3, r9, r3
3402206e:	4313      	orrs	r3, r2
34022070:	9304      	str	r3, [sp, #16]
34022072:	e7d2      	b.n	3402201a <_vfiprintf_r+0xc6>
34022074:	9b03      	ldr	r3, [sp, #12]
34022076:	1d19      	adds	r1, r3, #4
34022078:	681b      	ldr	r3, [r3, #0]
3402207a:	2b00      	cmp	r3, #0
3402207c:	9103      	str	r1, [sp, #12]
3402207e:	bfbb      	ittet	lt
34022080:	425b      	neglt	r3, r3
34022082:	f042 0202 	orrlt.w	r2, r2, #2
34022086:	9307      	strge	r3, [sp, #28]
34022088:	9307      	strlt	r3, [sp, #28]
3402208a:	bfb8      	it	lt
3402208c:	9204      	strlt	r2, [sp, #16]
3402208e:	7823      	ldrb	r3, [r4, #0]
34022090:	2b2e      	cmp	r3, #46	@ 0x2e
34022092:	d10a      	bne.n	340220aa <_vfiprintf_r+0x156>
34022094:	7863      	ldrb	r3, [r4, #1]
34022096:	2b2a      	cmp	r3, #42	@ 0x2a
34022098:	d132      	bne.n	34022100 <_vfiprintf_r+0x1ac>
3402209a:	9b03      	ldr	r3, [sp, #12]
3402209c:	3402      	adds	r4, #2
3402209e:	1d1a      	adds	r2, r3, #4
340220a0:	681b      	ldr	r3, [r3, #0]
340220a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
340220a6:	9203      	str	r2, [sp, #12]
340220a8:	9305      	str	r3, [sp, #20]
340220aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 34022180 <_vfiprintf_r+0x22c>
340220ae:	2203      	movs	r2, #3
340220b0:	7821      	ldrb	r1, [r4, #0]
340220b2:	4650      	mov	r0, sl
340220b4:	f7fe fb49 	bl	3402074a <memchr>
340220b8:	b138      	cbz	r0, 340220ca <_vfiprintf_r+0x176>
340220ba:	eba0 000a 	sub.w	r0, r0, sl
340220be:	2240      	movs	r2, #64	@ 0x40
340220c0:	9b04      	ldr	r3, [sp, #16]
340220c2:	3401      	adds	r4, #1
340220c4:	4082      	lsls	r2, r0
340220c6:	4313      	orrs	r3, r2
340220c8:	9304      	str	r3, [sp, #16]
340220ca:	f814 1b01 	ldrb.w	r1, [r4], #1
340220ce:	2206      	movs	r2, #6
340220d0:	4828      	ldr	r0, [pc, #160]	@ (34022174 <_vfiprintf_r+0x220>)
340220d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
340220d6:	f7fe fb38 	bl	3402074a <memchr>
340220da:	2800      	cmp	r0, #0
340220dc:	d03f      	beq.n	3402215e <_vfiprintf_r+0x20a>
340220de:	4b26      	ldr	r3, [pc, #152]	@ (34022178 <_vfiprintf_r+0x224>)
340220e0:	bb1b      	cbnz	r3, 3402212a <_vfiprintf_r+0x1d6>
340220e2:	9b03      	ldr	r3, [sp, #12]
340220e4:	3307      	adds	r3, #7
340220e6:	f023 0307 	bic.w	r3, r3, #7
340220ea:	3308      	adds	r3, #8
340220ec:	9303      	str	r3, [sp, #12]
340220ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
340220f0:	443b      	add	r3, r7
340220f2:	9309      	str	r3, [sp, #36]	@ 0x24
340220f4:	e76a      	b.n	34021fcc <_vfiprintf_r+0x78>
340220f6:	fb0c 3202 	mla	r2, ip, r2, r3
340220fa:	460c      	mov	r4, r1
340220fc:	2001      	movs	r0, #1
340220fe:	e7a8      	b.n	34022052 <_vfiprintf_r+0xfe>
34022100:	2300      	movs	r3, #0
34022102:	3401      	adds	r4, #1
34022104:	f04f 0c0a 	mov.w	ip, #10
34022108:	4619      	mov	r1, r3
3402210a:	9305      	str	r3, [sp, #20]
3402210c:	4620      	mov	r0, r4
3402210e:	f810 2b01 	ldrb.w	r2, [r0], #1
34022112:	3a30      	subs	r2, #48	@ 0x30
34022114:	2a09      	cmp	r2, #9
34022116:	d903      	bls.n	34022120 <_vfiprintf_r+0x1cc>
34022118:	2b00      	cmp	r3, #0
3402211a:	d0c6      	beq.n	340220aa <_vfiprintf_r+0x156>
3402211c:	9105      	str	r1, [sp, #20]
3402211e:	e7c4      	b.n	340220aa <_vfiprintf_r+0x156>
34022120:	fb0c 2101 	mla	r1, ip, r1, r2
34022124:	4604      	mov	r4, r0
34022126:	2301      	movs	r3, #1
34022128:	e7f0      	b.n	3402210c <_vfiprintf_r+0x1b8>
3402212a:	ab03      	add	r3, sp, #12
3402212c:	462a      	mov	r2, r5
3402212e:	a904      	add	r1, sp, #16
34022130:	4630      	mov	r0, r6
34022132:	9300      	str	r3, [sp, #0]
34022134:	4b11      	ldr	r3, [pc, #68]	@ (3402217c <_vfiprintf_r+0x228>)
34022136:	f7fd fa73 	bl	3401f620 <_printf_float>
3402213a:	4607      	mov	r7, r0
3402213c:	1c78      	adds	r0, r7, #1
3402213e:	d1d6      	bne.n	340220ee <_vfiprintf_r+0x19a>
34022140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
34022142:	07d9      	lsls	r1, r3, #31
34022144:	d405      	bmi.n	34022152 <_vfiprintf_r+0x1fe>
34022146:	89ab      	ldrh	r3, [r5, #12]
34022148:	059a      	lsls	r2, r3, #22
3402214a:	d402      	bmi.n	34022152 <_vfiprintf_r+0x1fe>
3402214c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3402214e:	f7fe faf3 	bl	34020738 <__retarget_lock_release_recursive>
34022152:	89ab      	ldrh	r3, [r5, #12]
34022154:	065b      	lsls	r3, r3, #25
34022156:	f53f af1f 	bmi.w	34021f98 <_vfiprintf_r+0x44>
3402215a:	9809      	ldr	r0, [sp, #36]	@ 0x24
3402215c:	e71e      	b.n	34021f9c <_vfiprintf_r+0x48>
3402215e:	ab03      	add	r3, sp, #12
34022160:	462a      	mov	r2, r5
34022162:	a904      	add	r1, sp, #16
34022164:	4630      	mov	r0, r6
34022166:	9300      	str	r3, [sp, #0]
34022168:	4b04      	ldr	r3, [pc, #16]	@ (3402217c <_vfiprintf_r+0x228>)
3402216a:	f7fd fce5 	bl	3401fb38 <_printf_i>
3402216e:	e7e4      	b.n	3402213a <_vfiprintf_r+0x1e6>
34022170:	3402caba 	.word	0x3402caba
34022174:	3402cac4 	.word	0x3402cac4
34022178:	3401f621 	.word	0x3401f621
3402217c:	34021f2f 	.word	0x34021f2f
34022180:	3402cac0 	.word	0x3402cac0

34022184 <__sflush_r>:
34022184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
34022188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3402218c:	0716      	lsls	r6, r2, #28
3402218e:	4605      	mov	r5, r0
34022190:	460c      	mov	r4, r1
34022192:	d454      	bmi.n	3402223e <__sflush_r+0xba>
34022194:	684b      	ldr	r3, [r1, #4]
34022196:	2b00      	cmp	r3, #0
34022198:	dc02      	bgt.n	340221a0 <__sflush_r+0x1c>
3402219a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3402219c:	2b00      	cmp	r3, #0
3402219e:	dd48      	ble.n	34022232 <__sflush_r+0xae>
340221a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
340221a2:	2e00      	cmp	r6, #0
340221a4:	d045      	beq.n	34022232 <__sflush_r+0xae>
340221a6:	2300      	movs	r3, #0
340221a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
340221ac:	682f      	ldr	r7, [r5, #0]
340221ae:	6a21      	ldr	r1, [r4, #32]
340221b0:	602b      	str	r3, [r5, #0]
340221b2:	d030      	beq.n	34022216 <__sflush_r+0x92>
340221b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
340221b6:	89a3      	ldrh	r3, [r4, #12]
340221b8:	0759      	lsls	r1, r3, #29
340221ba:	d505      	bpl.n	340221c8 <__sflush_r+0x44>
340221bc:	6863      	ldr	r3, [r4, #4]
340221be:	1ad2      	subs	r2, r2, r3
340221c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
340221c2:	b10b      	cbz	r3, 340221c8 <__sflush_r+0x44>
340221c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
340221c6:	1ad2      	subs	r2, r2, r3
340221c8:	2300      	movs	r3, #0
340221ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
340221cc:	6a21      	ldr	r1, [r4, #32]
340221ce:	4628      	mov	r0, r5
340221d0:	47b0      	blx	r6
340221d2:	1c43      	adds	r3, r0, #1
340221d4:	89a3      	ldrh	r3, [r4, #12]
340221d6:	d106      	bne.n	340221e6 <__sflush_r+0x62>
340221d8:	6829      	ldr	r1, [r5, #0]
340221da:	291d      	cmp	r1, #29
340221dc:	d82b      	bhi.n	34022236 <__sflush_r+0xb2>
340221de:	4a2a      	ldr	r2, [pc, #168]	@ (34022288 <__sflush_r+0x104>)
340221e0:	40ca      	lsrs	r2, r1
340221e2:	07d6      	lsls	r6, r2, #31
340221e4:	d527      	bpl.n	34022236 <__sflush_r+0xb2>
340221e6:	2200      	movs	r2, #0
340221e8:	04d9      	lsls	r1, r3, #19
340221ea:	6062      	str	r2, [r4, #4]
340221ec:	6922      	ldr	r2, [r4, #16]
340221ee:	6022      	str	r2, [r4, #0]
340221f0:	d504      	bpl.n	340221fc <__sflush_r+0x78>
340221f2:	1c42      	adds	r2, r0, #1
340221f4:	d101      	bne.n	340221fa <__sflush_r+0x76>
340221f6:	682b      	ldr	r3, [r5, #0]
340221f8:	b903      	cbnz	r3, 340221fc <__sflush_r+0x78>
340221fa:	6560      	str	r0, [r4, #84]	@ 0x54
340221fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
340221fe:	602f      	str	r7, [r5, #0]
34022200:	b1b9      	cbz	r1, 34022232 <__sflush_r+0xae>
34022202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34022206:	4299      	cmp	r1, r3
34022208:	d002      	beq.n	34022210 <__sflush_r+0x8c>
3402220a:	4628      	mov	r0, r5
3402220c:	f7ff f8aa 	bl	34021364 <_free_r>
34022210:	2300      	movs	r3, #0
34022212:	6363      	str	r3, [r4, #52]	@ 0x34
34022214:	e00d      	b.n	34022232 <__sflush_r+0xae>
34022216:	2301      	movs	r3, #1
34022218:	4628      	mov	r0, r5
3402221a:	47b0      	blx	r6
3402221c:	4602      	mov	r2, r0
3402221e:	1c50      	adds	r0, r2, #1
34022220:	d1c9      	bne.n	340221b6 <__sflush_r+0x32>
34022222:	682b      	ldr	r3, [r5, #0]
34022224:	2b00      	cmp	r3, #0
34022226:	d0c6      	beq.n	340221b6 <__sflush_r+0x32>
34022228:	2b1d      	cmp	r3, #29
3402222a:	d001      	beq.n	34022230 <__sflush_r+0xac>
3402222c:	2b16      	cmp	r3, #22
3402222e:	d11d      	bne.n	3402226c <__sflush_r+0xe8>
34022230:	602f      	str	r7, [r5, #0]
34022232:	2000      	movs	r0, #0
34022234:	e021      	b.n	3402227a <__sflush_r+0xf6>
34022236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3402223a:	b21b      	sxth	r3, r3
3402223c:	e01a      	b.n	34022274 <__sflush_r+0xf0>
3402223e:	690f      	ldr	r7, [r1, #16]
34022240:	2f00      	cmp	r7, #0
34022242:	d0f6      	beq.n	34022232 <__sflush_r+0xae>
34022244:	0793      	lsls	r3, r2, #30
34022246:	680e      	ldr	r6, [r1, #0]
34022248:	600f      	str	r7, [r1, #0]
3402224a:	bf0c      	ite	eq
3402224c:	694b      	ldreq	r3, [r1, #20]
3402224e:	2300      	movne	r3, #0
34022250:	eba6 0807 	sub.w	r8, r6, r7
34022254:	608b      	str	r3, [r1, #8]
34022256:	f1b8 0f00 	cmp.w	r8, #0
3402225a:	ddea      	ble.n	34022232 <__sflush_r+0xae>
3402225c:	4643      	mov	r3, r8
3402225e:	463a      	mov	r2, r7
34022260:	6a21      	ldr	r1, [r4, #32]
34022262:	4628      	mov	r0, r5
34022264:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
34022266:	47b0      	blx	r6
34022268:	2800      	cmp	r0, #0
3402226a:	dc08      	bgt.n	3402227e <__sflush_r+0xfa>
3402226c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34022270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34022274:	f04f 30ff 	mov.w	r0, #4294967295
34022278:	81a3      	strh	r3, [r4, #12]
3402227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3402227e:	4407      	add	r7, r0
34022280:	eba8 0800 	sub.w	r8, r8, r0
34022284:	e7e7      	b.n	34022256 <__sflush_r+0xd2>
34022286:	bf00      	nop
34022288:	20400001 	.word	0x20400001

3402228c <_fflush_r>:
3402228c:	b538      	push	{r3, r4, r5, lr}
3402228e:	690b      	ldr	r3, [r1, #16]
34022290:	4605      	mov	r5, r0
34022292:	460c      	mov	r4, r1
34022294:	b913      	cbnz	r3, 3402229c <_fflush_r+0x10>
34022296:	2500      	movs	r5, #0
34022298:	4628      	mov	r0, r5
3402229a:	bd38      	pop	{r3, r4, r5, pc}
3402229c:	b118      	cbz	r0, 340222a6 <_fflush_r+0x1a>
3402229e:	6a03      	ldr	r3, [r0, #32]
340222a0:	b90b      	cbnz	r3, 340222a6 <_fflush_r+0x1a>
340222a2:	f7fd fdf3 	bl	3401fe8c <__sinit>
340222a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
340222aa:	2b00      	cmp	r3, #0
340222ac:	d0f3      	beq.n	34022296 <_fflush_r+0xa>
340222ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
340222b0:	07d0      	lsls	r0, r2, #31
340222b2:	d404      	bmi.n	340222be <_fflush_r+0x32>
340222b4:	0599      	lsls	r1, r3, #22
340222b6:	d402      	bmi.n	340222be <_fflush_r+0x32>
340222b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340222ba:	f7fe fa3c 	bl	34020736 <__retarget_lock_acquire_recursive>
340222be:	4628      	mov	r0, r5
340222c0:	4621      	mov	r1, r4
340222c2:	f7ff ff5f 	bl	34022184 <__sflush_r>
340222c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
340222c8:	4605      	mov	r5, r0
340222ca:	07da      	lsls	r2, r3, #31
340222cc:	d4e4      	bmi.n	34022298 <_fflush_r+0xc>
340222ce:	89a3      	ldrh	r3, [r4, #12]
340222d0:	059b      	lsls	r3, r3, #22
340222d2:	d4e1      	bmi.n	34022298 <_fflush_r+0xc>
340222d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
340222d6:	f7fe fa2f 	bl	34020738 <__retarget_lock_release_recursive>
340222da:	e7dd      	b.n	34022298 <_fflush_r+0xc>

340222dc <__swhatbuf_r>:
340222dc:	b570      	push	{r4, r5, r6, lr}
340222de:	460c      	mov	r4, r1
340222e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
340222e4:	b096      	sub	sp, #88	@ 0x58
340222e6:	4615      	mov	r5, r2
340222e8:	2900      	cmp	r1, #0
340222ea:	461e      	mov	r6, r3
340222ec:	da0c      	bge.n	34022308 <__swhatbuf_r+0x2c>
340222ee:	89a3      	ldrh	r3, [r4, #12]
340222f0:	2100      	movs	r1, #0
340222f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
340222f6:	bf14      	ite	ne
340222f8:	2340      	movne	r3, #64	@ 0x40
340222fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
340222fe:	2000      	movs	r0, #0
34022300:	6031      	str	r1, [r6, #0]
34022302:	602b      	str	r3, [r5, #0]
34022304:	b016      	add	sp, #88	@ 0x58
34022306:	bd70      	pop	{r4, r5, r6, pc}
34022308:	466a      	mov	r2, sp
3402230a:	f000 f879 	bl	34022400 <_fstat_r>
3402230e:	2800      	cmp	r0, #0
34022310:	dbed      	blt.n	340222ee <__swhatbuf_r+0x12>
34022312:	9901      	ldr	r1, [sp, #4]
34022314:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
34022318:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3402231c:	4259      	negs	r1, r3
3402231e:	4159      	adcs	r1, r3
34022320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34022324:	e7eb      	b.n	340222fe <__swhatbuf_r+0x22>

34022326 <__smakebuf_r>:
34022326:	898b      	ldrh	r3, [r1, #12]
34022328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3402232a:	079d      	lsls	r5, r3, #30
3402232c:	4606      	mov	r6, r0
3402232e:	460c      	mov	r4, r1
34022330:	d507      	bpl.n	34022342 <__smakebuf_r+0x1c>
34022332:	f104 0347 	add.w	r3, r4, #71	@ 0x47
34022336:	6023      	str	r3, [r4, #0]
34022338:	6123      	str	r3, [r4, #16]
3402233a:	2301      	movs	r3, #1
3402233c:	6163      	str	r3, [r4, #20]
3402233e:	b003      	add	sp, #12
34022340:	bdf0      	pop	{r4, r5, r6, r7, pc}
34022342:	ab01      	add	r3, sp, #4
34022344:	466a      	mov	r2, sp
34022346:	f7ff ffc9 	bl	340222dc <__swhatbuf_r>
3402234a:	9f00      	ldr	r7, [sp, #0]
3402234c:	4605      	mov	r5, r0
3402234e:	4630      	mov	r0, r6
34022350:	4639      	mov	r1, r7
34022352:	f7ff f87b 	bl	3402144c <_malloc_r>
34022356:	b948      	cbnz	r0, 3402236c <__smakebuf_r+0x46>
34022358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3402235c:	059a      	lsls	r2, r3, #22
3402235e:	d4ee      	bmi.n	3402233e <__smakebuf_r+0x18>
34022360:	f023 0303 	bic.w	r3, r3, #3
34022364:	f043 0302 	orr.w	r3, r3, #2
34022368:	81a3      	strh	r3, [r4, #12]
3402236a:	e7e2      	b.n	34022332 <__smakebuf_r+0xc>
3402236c:	89a3      	ldrh	r3, [r4, #12]
3402236e:	6020      	str	r0, [r4, #0]
34022370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
34022374:	81a3      	strh	r3, [r4, #12]
34022376:	9b01      	ldr	r3, [sp, #4]
34022378:	e9c4 0704 	strd	r0, r7, [r4, #16]
3402237c:	b15b      	cbz	r3, 34022396 <__smakebuf_r+0x70>
3402237e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34022382:	4630      	mov	r0, r6
34022384:	f000 f84e 	bl	34022424 <_isatty_r>
34022388:	b128      	cbz	r0, 34022396 <__smakebuf_r+0x70>
3402238a:	89a3      	ldrh	r3, [r4, #12]
3402238c:	f023 0303 	bic.w	r3, r3, #3
34022390:	f043 0301 	orr.w	r3, r3, #1
34022394:	81a3      	strh	r3, [r4, #12]
34022396:	89a3      	ldrh	r3, [r4, #12]
34022398:	431d      	orrs	r5, r3
3402239a:	81a5      	strh	r5, [r4, #12]
3402239c:	e7cf      	b.n	3402233e <__smakebuf_r+0x18>

3402239e <_raise_r>:
3402239e:	291f      	cmp	r1, #31
340223a0:	b538      	push	{r3, r4, r5, lr}
340223a2:	4605      	mov	r5, r0
340223a4:	460c      	mov	r4, r1
340223a6:	d904      	bls.n	340223b2 <_raise_r+0x14>
340223a8:	2316      	movs	r3, #22
340223aa:	6003      	str	r3, [r0, #0]
340223ac:	f04f 30ff 	mov.w	r0, #4294967295
340223b0:	bd38      	pop	{r3, r4, r5, pc}
340223b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
340223b4:	b112      	cbz	r2, 340223bc <_raise_r+0x1e>
340223b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
340223ba:	b94b      	cbnz	r3, 340223d0 <_raise_r+0x32>
340223bc:	4628      	mov	r0, r5
340223be:	f000 f853 	bl	34022468 <_getpid_r>
340223c2:	4622      	mov	r2, r4
340223c4:	4601      	mov	r1, r0
340223c6:	4628      	mov	r0, r5
340223c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
340223cc:	f000 b83a 	b.w	34022444 <_kill_r>
340223d0:	2b01      	cmp	r3, #1
340223d2:	d00a      	beq.n	340223ea <_raise_r+0x4c>
340223d4:	1c59      	adds	r1, r3, #1
340223d6:	d103      	bne.n	340223e0 <_raise_r+0x42>
340223d8:	2316      	movs	r3, #22
340223da:	6003      	str	r3, [r0, #0]
340223dc:	2001      	movs	r0, #1
340223de:	e7e7      	b.n	340223b0 <_raise_r+0x12>
340223e0:	2100      	movs	r1, #0
340223e2:	4620      	mov	r0, r4
340223e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
340223e8:	4798      	blx	r3
340223ea:	2000      	movs	r0, #0
340223ec:	e7e0      	b.n	340223b0 <_raise_r+0x12>
	...

340223f0 <raise>:
340223f0:	4b02      	ldr	r3, [pc, #8]	@ (340223fc <raise+0xc>)
340223f2:	4601      	mov	r1, r0
340223f4:	6818      	ldr	r0, [r3, #0]
340223f6:	f7ff bfd2 	b.w	3402239e <_raise_r>
340223fa:	bf00      	nop
340223fc:	3410ce2c 	.word	0x3410ce2c

34022400 <_fstat_r>:
34022400:	b538      	push	{r3, r4, r5, lr}
34022402:	2300      	movs	r3, #0
34022404:	4d06      	ldr	r5, [pc, #24]	@ (34022420 <_fstat_r+0x20>)
34022406:	4604      	mov	r4, r0
34022408:	4608      	mov	r0, r1
3402240a:	4611      	mov	r1, r2
3402240c:	602b      	str	r3, [r5, #0]
3402240e:	f7df fe00 	bl	34002012 <_fstat>
34022412:	1c43      	adds	r3, r0, #1
34022414:	d102      	bne.n	3402241c <_fstat_r+0x1c>
34022416:	682b      	ldr	r3, [r5, #0]
34022418:	b103      	cbz	r3, 3402241c <_fstat_r+0x1c>
3402241a:	6023      	str	r3, [r4, #0]
3402241c:	bd38      	pop	{r3, r4, r5, pc}
3402241e:	bf00      	nop
34022420:	341fa744 	.word	0x341fa744

34022424 <_isatty_r>:
34022424:	b538      	push	{r3, r4, r5, lr}
34022426:	2300      	movs	r3, #0
34022428:	4d05      	ldr	r5, [pc, #20]	@ (34022440 <_isatty_r+0x1c>)
3402242a:	4604      	mov	r4, r0
3402242c:	4608      	mov	r0, r1
3402242e:	602b      	str	r3, [r5, #0]
34022430:	f7df fdf4 	bl	3400201c <_isatty>
34022434:	1c43      	adds	r3, r0, #1
34022436:	d102      	bne.n	3402243e <_isatty_r+0x1a>
34022438:	682b      	ldr	r3, [r5, #0]
3402243a:	b103      	cbz	r3, 3402243e <_isatty_r+0x1a>
3402243c:	6023      	str	r3, [r4, #0]
3402243e:	bd38      	pop	{r3, r4, r5, pc}
34022440:	341fa744 	.word	0x341fa744

34022444 <_kill_r>:
34022444:	b538      	push	{r3, r4, r5, lr}
34022446:	2300      	movs	r3, #0
34022448:	4d06      	ldr	r5, [pc, #24]	@ (34022464 <_kill_r+0x20>)
3402244a:	4604      	mov	r4, r0
3402244c:	4608      	mov	r0, r1
3402244e:	4611      	mov	r1, r2
34022450:	602b      	str	r3, [r5, #0]
34022452:	f7df fdbf 	bl	34001fd4 <_kill>
34022456:	1c43      	adds	r3, r0, #1
34022458:	d102      	bne.n	34022460 <_kill_r+0x1c>
3402245a:	682b      	ldr	r3, [r5, #0]
3402245c:	b103      	cbz	r3, 34022460 <_kill_r+0x1c>
3402245e:	6023      	str	r3, [r4, #0]
34022460:	bd38      	pop	{r3, r4, r5, pc}
34022462:	bf00      	nop
34022464:	341fa744 	.word	0x341fa744

34022468 <_getpid_r>:
34022468:	f7df bdb2 	b.w	34001fd0 <_getpid>

3402246c <_sbrk_r>:
3402246c:	b538      	push	{r3, r4, r5, lr}
3402246e:	2300      	movs	r3, #0
34022470:	4d05      	ldr	r5, [pc, #20]	@ (34022488 <_sbrk_r+0x1c>)
34022472:	4604      	mov	r4, r0
34022474:	4608      	mov	r0, r1
34022476:	602b      	str	r3, [r5, #0]
34022478:	f001 fd74 	bl	34023f64 <_sbrk>
3402247c:	1c43      	adds	r3, r0, #1
3402247e:	d102      	bne.n	34022486 <_sbrk_r+0x1a>
34022480:	682b      	ldr	r3, [r5, #0]
34022482:	b103      	cbz	r3, 34022486 <_sbrk_r+0x1a>
34022484:	6023      	str	r3, [r4, #0]
34022486:	bd38      	pop	{r3, r4, r5, pc}
34022488:	341fa744 	.word	0x341fa744

3402248c <_calloc_r>:
3402248c:	b570      	push	{r4, r5, r6, lr}
3402248e:	fba1 5402 	umull	r5, r4, r1, r2
34022492:	b934      	cbnz	r4, 340224a2 <_calloc_r+0x16>
34022494:	4629      	mov	r1, r5
34022496:	f7fe ffd9 	bl	3402144c <_malloc_r>
3402249a:	4606      	mov	r6, r0
3402249c:	b928      	cbnz	r0, 340224aa <_calloc_r+0x1e>
3402249e:	4630      	mov	r0, r6
340224a0:	bd70      	pop	{r4, r5, r6, pc}
340224a2:	220c      	movs	r2, #12
340224a4:	2600      	movs	r6, #0
340224a6:	6002      	str	r2, [r0, #0]
340224a8:	e7f9      	b.n	3402249e <_calloc_r+0x12>
340224aa:	462a      	mov	r2, r5
340224ac:	4621      	mov	r1, r4
340224ae:	f7fd fed3 	bl	34020258 <memset>
340224b2:	e7f4      	b.n	3402249e <_calloc_r+0x12>

340224b4 <__ascii_mbtowc>:
340224b4:	b082      	sub	sp, #8
340224b6:	b901      	cbnz	r1, 340224ba <__ascii_mbtowc+0x6>
340224b8:	a901      	add	r1, sp, #4
340224ba:	b142      	cbz	r2, 340224ce <__ascii_mbtowc+0x1a>
340224bc:	b14b      	cbz	r3, 340224d2 <__ascii_mbtowc+0x1e>
340224be:	7813      	ldrb	r3, [r2, #0]
340224c0:	600b      	str	r3, [r1, #0]
340224c2:	7812      	ldrb	r2, [r2, #0]
340224c4:	1e10      	subs	r0, r2, #0
340224c6:	bf18      	it	ne
340224c8:	2001      	movne	r0, #1
340224ca:	b002      	add	sp, #8
340224cc:	4770      	bx	lr
340224ce:	4610      	mov	r0, r2
340224d0:	e7fb      	b.n	340224ca <__ascii_mbtowc+0x16>
340224d2:	f06f 0001 	mvn.w	r0, #1
340224d6:	e7f8      	b.n	340224ca <__ascii_mbtowc+0x16>

340224d8 <_realloc_r>:
340224d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
340224dc:	4607      	mov	r7, r0
340224de:	4614      	mov	r4, r2
340224e0:	460d      	mov	r5, r1
340224e2:	b921      	cbnz	r1, 340224ee <_realloc_r+0x16>
340224e4:	4611      	mov	r1, r2
340224e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
340224ea:	f7fe bfaf 	b.w	3402144c <_malloc_r>
340224ee:	b92a      	cbnz	r2, 340224fc <_realloc_r+0x24>
340224f0:	4625      	mov	r5, r4
340224f2:	f7fe ff37 	bl	34021364 <_free_r>
340224f6:	4628      	mov	r0, r5
340224f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
340224fc:	f000 f827 	bl	3402254e <_malloc_usable_size_r>
34022500:	4284      	cmp	r4, r0
34022502:	4606      	mov	r6, r0
34022504:	d802      	bhi.n	3402250c <_realloc_r+0x34>
34022506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
3402250a:	d8f4      	bhi.n	340224f6 <_realloc_r+0x1e>
3402250c:	4621      	mov	r1, r4
3402250e:	4638      	mov	r0, r7
34022510:	f7fe ff9c 	bl	3402144c <_malloc_r>
34022514:	4680      	mov	r8, r0
34022516:	b908      	cbnz	r0, 3402251c <_realloc_r+0x44>
34022518:	4645      	mov	r5, r8
3402251a:	e7ec      	b.n	340224f6 <_realloc_r+0x1e>
3402251c:	42b4      	cmp	r4, r6
3402251e:	4622      	mov	r2, r4
34022520:	4629      	mov	r1, r5
34022522:	bf28      	it	cs
34022524:	4632      	movcs	r2, r6
34022526:	f7fe f91e 	bl	34020766 <memcpy>
3402252a:	4629      	mov	r1, r5
3402252c:	4638      	mov	r0, r7
3402252e:	f7fe ff19 	bl	34021364 <_free_r>
34022532:	e7f1      	b.n	34022518 <_realloc_r+0x40>

34022534 <__ascii_wctomb>:
34022534:	4603      	mov	r3, r0
34022536:	4608      	mov	r0, r1
34022538:	b141      	cbz	r1, 3402254c <__ascii_wctomb+0x18>
3402253a:	2aff      	cmp	r2, #255	@ 0xff
3402253c:	d904      	bls.n	34022548 <__ascii_wctomb+0x14>
3402253e:	228a      	movs	r2, #138	@ 0x8a
34022540:	f04f 30ff 	mov.w	r0, #4294967295
34022544:	601a      	str	r2, [r3, #0]
34022546:	4770      	bx	lr
34022548:	2001      	movs	r0, #1
3402254a:	700a      	strb	r2, [r1, #0]
3402254c:	4770      	bx	lr

3402254e <_malloc_usable_size_r>:
3402254e:	f851 3c04 	ldr.w	r3, [r1, #-4]
34022552:	1f18      	subs	r0, r3, #4
34022554:	2b00      	cmp	r3, #0
34022556:	bfbc      	itt	lt
34022558:	580b      	ldrlt	r3, [r1, r0]
3402255a:	18c0      	addlt	r0, r0, r3
3402255c:	4770      	bx	lr
	...

34022560 <log10>:
34022560:	b508      	push	{r3, lr}
34022562:	ed2d 8b02 	vpush	{d8}
34022566:	eeb0 8b40 	vmov.f64	d8, d0
3402256a:	f000 fdd9 	bl	34023120 <__ieee754_log10>
3402256e:	eeb4 8b48 	vcmp.f64	d8, d8
34022572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022576:	d60f      	bvs.n	34022598 <log10+0x38>
34022578:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
3402257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022580:	d80a      	bhi.n	34022598 <log10+0x38>
34022582:	eeb5 8b40 	vcmp.f64	d8, #0.0
34022586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402258a:	d108      	bne.n	3402259e <log10+0x3e>
3402258c:	f7fe f8a8 	bl	340206e0 <__errno>
34022590:	2322      	movs	r3, #34	@ 0x22
34022592:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 340225b8 <log10+0x58>
34022596:	6003      	str	r3, [r0, #0]
34022598:	ecbd 8b02 	vpop	{d8}
3402259c:	bd08      	pop	{r3, pc}
3402259e:	f7fe f89f 	bl	340206e0 <__errno>
340225a2:	2321      	movs	r3, #33	@ 0x21
340225a4:	ecbd 8b02 	vpop	{d8}
340225a8:	6003      	str	r3, [r0, #0]
340225aa:	4805      	ldr	r0, [pc, #20]	@ (340225c0 <log10+0x60>)
340225ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
340225b0:	f000 b8c6 	b.w	34022740 <nan>
340225b4:	f3af 8000 	nop.w
340225b8:	00000000 	.word	0x00000000
340225bc:	fff00000 	.word	0xfff00000
340225c0:	340266f0 	.word	0x340266f0
340225c4:	00000000 	.word	0x00000000

340225c8 <sqrt>:
340225c8:	b508      	push	{r3, lr}
340225ca:	ed2d 8b04 	vpush	{d8-d9}
340225ce:	eeb0 8b40 	vmov.f64	d8, d0
340225d2:	f000 fce0 	bl	34022f96 <__ieee754_sqrt>
340225d6:	eeb4 8b48 	vcmp.f64	d8, d8
340225da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340225de:	d60c      	bvs.n	340225fa <sqrt+0x32>
340225e0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 34022600 <sqrt+0x38>
340225e4:	eeb4 8bc9 	vcmpe.f64	d8, d9
340225e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340225ec:	d505      	bpl.n	340225fa <sqrt+0x32>
340225ee:	f7fe f877 	bl	340206e0 <__errno>
340225f2:	ee89 0b09 	vdiv.f64	d0, d9, d9
340225f6:	2321      	movs	r3, #33	@ 0x21
340225f8:	6003      	str	r3, [r0, #0]
340225fa:	ecbd 8b04 	vpop	{d8-d9}
340225fe:	bd08      	pop	{r3, pc}
	...

34022608 <cos>:
34022608:	eeb0 7b40 	vmov.f64	d7, d0
3402260c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3402260e:	ee17 3a90 	vmov	r3, s15
34022612:	4a21      	ldr	r2, [pc, #132]	@ (34022698 <cos+0x90>)
34022614:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34022618:	4293      	cmp	r3, r2
3402261a:	d806      	bhi.n	3402262a <cos+0x22>
3402261c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 34022690 <cos+0x88>
34022620:	b005      	add	sp, #20
34022622:	f85d eb04 	ldr.w	lr, [sp], #4
34022626:	f000 bcbb 	b.w	34022fa0 <__kernel_cos>
3402262a:	4a1c      	ldr	r2, [pc, #112]	@ (3402269c <cos+0x94>)
3402262c:	4293      	cmp	r3, r2
3402262e:	d904      	bls.n	3402263a <cos+0x32>
34022630:	ee30 0b40 	vsub.f64	d0, d0, d0
34022634:	b005      	add	sp, #20
34022636:	f85d fb04 	ldr.w	pc, [sp], #4
3402263a:	4668      	mov	r0, sp
3402263c:	f000 fde0 	bl	34023200 <__ieee754_rem_pio2>
34022640:	f000 0003 	and.w	r0, r0, #3
34022644:	2801      	cmp	r0, #1
34022646:	d009      	beq.n	3402265c <cos+0x54>
34022648:	2802      	cmp	r0, #2
3402264a:	d010      	beq.n	3402266e <cos+0x66>
3402264c:	b9b0      	cbnz	r0, 3402267c <cos+0x74>
3402264e:	ed9d 1b02 	vldr	d1, [sp, #8]
34022652:	ed9d 0b00 	vldr	d0, [sp]
34022656:	f000 fca3 	bl	34022fa0 <__kernel_cos>
3402265a:	e7eb      	b.n	34022634 <cos+0x2c>
3402265c:	ed9d 1b02 	vldr	d1, [sp, #8]
34022660:	ed9d 0b00 	vldr	d0, [sp]
34022664:	f000 fd04 	bl	34023070 <__kernel_sin>
34022668:	eeb1 0b40 	vneg.f64	d0, d0
3402266c:	e7e2      	b.n	34022634 <cos+0x2c>
3402266e:	ed9d 1b02 	vldr	d1, [sp, #8]
34022672:	ed9d 0b00 	vldr	d0, [sp]
34022676:	f000 fc93 	bl	34022fa0 <__kernel_cos>
3402267a:	e7f5      	b.n	34022668 <cos+0x60>
3402267c:	ed9d 1b02 	vldr	d1, [sp, #8]
34022680:	ed9d 0b00 	vldr	d0, [sp]
34022684:	2001      	movs	r0, #1
34022686:	f000 fcf3 	bl	34023070 <__kernel_sin>
3402268a:	e7d3      	b.n	34022634 <cos+0x2c>
3402268c:	f3af 8000 	nop.w
	...
34022698:	3fe921fb 	.word	0x3fe921fb
3402269c:	7fefffff 	.word	0x7fefffff

340226a0 <sin>:
340226a0:	eeb0 7b40 	vmov.f64	d7, d0
340226a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
340226a6:	ee17 3a90 	vmov	r3, s15
340226aa:	4a21      	ldr	r2, [pc, #132]	@ (34022730 <sin+0x90>)
340226ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340226b0:	4293      	cmp	r3, r2
340226b2:	d807      	bhi.n	340226c4 <sin+0x24>
340226b4:	2000      	movs	r0, #0
340226b6:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 34022728 <sin+0x88>
340226ba:	b005      	add	sp, #20
340226bc:	f85d eb04 	ldr.w	lr, [sp], #4
340226c0:	f000 bcd6 	b.w	34023070 <__kernel_sin>
340226c4:	4a1b      	ldr	r2, [pc, #108]	@ (34022734 <sin+0x94>)
340226c6:	4293      	cmp	r3, r2
340226c8:	d904      	bls.n	340226d4 <sin+0x34>
340226ca:	ee30 0b40 	vsub.f64	d0, d0, d0
340226ce:	b005      	add	sp, #20
340226d0:	f85d fb04 	ldr.w	pc, [sp], #4
340226d4:	4668      	mov	r0, sp
340226d6:	f000 fd93 	bl	34023200 <__ieee754_rem_pio2>
340226da:	f000 0003 	and.w	r0, r0, #3
340226de:	2801      	cmp	r0, #1
340226e0:	d00a      	beq.n	340226f8 <sin+0x58>
340226e2:	2802      	cmp	r0, #2
340226e4:	d00f      	beq.n	34022706 <sin+0x66>
340226e6:	b9c0      	cbnz	r0, 3402271a <sin+0x7a>
340226e8:	2001      	movs	r0, #1
340226ea:	ed9d 1b02 	vldr	d1, [sp, #8]
340226ee:	ed9d 0b00 	vldr	d0, [sp]
340226f2:	f000 fcbd 	bl	34023070 <__kernel_sin>
340226f6:	e7ea      	b.n	340226ce <sin+0x2e>
340226f8:	ed9d 1b02 	vldr	d1, [sp, #8]
340226fc:	ed9d 0b00 	vldr	d0, [sp]
34022700:	f000 fc4e 	bl	34022fa0 <__kernel_cos>
34022704:	e7e3      	b.n	340226ce <sin+0x2e>
34022706:	ed9d 1b02 	vldr	d1, [sp, #8]
3402270a:	ed9d 0b00 	vldr	d0, [sp]
3402270e:	2001      	movs	r0, #1
34022710:	f000 fcae 	bl	34023070 <__kernel_sin>
34022714:	eeb1 0b40 	vneg.f64	d0, d0
34022718:	e7d9      	b.n	340226ce <sin+0x2e>
3402271a:	ed9d 1b02 	vldr	d1, [sp, #8]
3402271e:	ed9d 0b00 	vldr	d0, [sp]
34022722:	f000 fc3d 	bl	34022fa0 <__kernel_cos>
34022726:	e7f5      	b.n	34022714 <sin+0x74>
	...
34022730:	3fe921fb 	.word	0x3fe921fb
34022734:	7fefffff 	.word	0x7fefffff

34022738 <atan2f>:
34022738:	f000 beae 	b.w	34023498 <__ieee754_atan2f>
3402273c:	0000      	movs	r0, r0
	...

34022740 <nan>:
34022740:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34022748 <nan+0x8>
34022744:	4770      	bx	lr
34022746:	bf00      	nop
34022748:	00000000 	.word	0x00000000
3402274c:	7ff80000 	.word	0x7ff80000

34022750 <with_errno>:
34022750:	b510      	push	{r4, lr}
34022752:	ed2d 8b02 	vpush	{d8}
34022756:	eeb0 8b40 	vmov.f64	d8, d0
3402275a:	4604      	mov	r4, r0
3402275c:	f7fd ffc0 	bl	340206e0 <__errno>
34022760:	6004      	str	r4, [r0, #0]
34022762:	eeb0 0b48 	vmov.f64	d0, d8
34022766:	ecbd 8b02 	vpop	{d8}
3402276a:	bd10      	pop	{r4, pc}

3402276c <xflow>:
3402276c:	b082      	sub	sp, #8
3402276e:	b158      	cbz	r0, 34022788 <xflow+0x1c>
34022770:	eeb1 7b40 	vneg.f64	d7, d0
34022774:	2022      	movs	r0, #34	@ 0x22
34022776:	ed8d 7b00 	vstr	d7, [sp]
3402277a:	ed9d 7b00 	vldr	d7, [sp]
3402277e:	ee20 0b07 	vmul.f64	d0, d0, d7
34022782:	b002      	add	sp, #8
34022784:	f7ff bfe4 	b.w	34022750 <with_errno>
34022788:	eeb0 7b40 	vmov.f64	d7, d0
3402278c:	e7f2      	b.n	34022774 <xflow+0x8>
	...

34022790 <__math_uflow>:
34022790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 34022798 <__math_uflow+0x8>
34022794:	f7ff bfea 	b.w	3402276c <xflow>
34022798:	00000000 	.word	0x00000000
3402279c:	10000000 	.word	0x10000000

340227a0 <__math_oflow>:
340227a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 340227a8 <__math_oflow+0x8>
340227a4:	f7ff bfe2 	b.w	3402276c <xflow>
340227a8:	00000000 	.word	0x00000000
340227ac:	70000000 	.word	0x70000000

340227b0 <__math_divzero>:
340227b0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
340227b4:	b082      	sub	sp, #8
340227b6:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
340227ba:	2800      	cmp	r0, #0
340227bc:	f04f 0022 	mov.w	r0, #34	@ 0x22
340227c0:	fe07 7b06 	vseleq.f64	d7, d7, d6
340227c4:	ed8d 7b00 	vstr	d7, [sp]
340227c8:	ed9d 0b00 	vldr	d0, [sp]
340227cc:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 340227e0 <__math_divzero+0x30>
340227d0:	ee80 0b07 	vdiv.f64	d0, d0, d7
340227d4:	b002      	add	sp, #8
340227d6:	f7ff bfbb 	b.w	34022750 <with_errno>
340227da:	bf00      	nop
340227dc:	f3af 8000 	nop.w
	...

340227e8 <__math_invalid>:
340227e8:	eeb0 7b40 	vmov.f64	d7, d0
340227ec:	ee30 6b40 	vsub.f64	d6, d0, d0
340227f0:	eeb4 7b47 	vcmp.f64	d7, d7
340227f4:	ee86 0b06 	vdiv.f64	d0, d6, d6
340227f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340227fc:	d602      	bvs.n	34022804 <__math_invalid+0x1c>
340227fe:	2021      	movs	r0, #33	@ 0x21
34022800:	f7ff bfa6 	b.w	34022750 <with_errno>
34022804:	4770      	bx	lr

34022806 <__math_check_uflow>:
34022806:	eeb5 0b40 	vcmp.f64	d0, #0.0
3402280a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402280e:	d102      	bne.n	34022816 <__math_check_uflow+0x10>
34022810:	2022      	movs	r0, #34	@ 0x22
34022812:	f7ff bf9d 	b.w	34022750 <with_errno>
34022816:	4770      	bx	lr

34022818 <__math_check_oflow>:
34022818:	eeb0 7bc0 	vabs.f64	d7, d0
3402281c:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 34022838 <__math_check_oflow+0x20>
34022820:	eeb4 7b46 	vcmp.f64	d7, d6
34022824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022828:	dd02      	ble.n	34022830 <__math_check_oflow+0x18>
3402282a:	2022      	movs	r0, #34	@ 0x22
3402282c:	f7ff bf90 	b.w	34022750 <with_errno>
34022830:	4770      	bx	lr
34022832:	bf00      	nop
34022834:	f3af 8000 	nop.w
34022838:	ffffffff 	.word	0xffffffff
3402283c:	7fefffff 	.word	0x7fefffff

34022840 <checkint>:
34022840:	f3c1 520a 	ubfx	r2, r1, #20, #11
34022844:	f240 33fe 	movw	r3, #1022	@ 0x3fe
34022848:	429a      	cmp	r2, r3
3402284a:	b570      	push	{r4, r5, r6, lr}
3402284c:	dd2a      	ble.n	340228a4 <checkint+0x64>
3402284e:	f240 4333 	movw	r3, #1075	@ 0x433
34022852:	429a      	cmp	r2, r3
34022854:	dc24      	bgt.n	340228a0 <checkint+0x60>
34022856:	1a9b      	subs	r3, r3, r2
34022858:	f04f 32ff 	mov.w	r2, #4294967295
3402285c:	f1a3 0620 	sub.w	r6, r3, #32
34022860:	fa02 f403 	lsl.w	r4, r2, r3
34022864:	f1c3 0520 	rsb	r5, r3, #32
34022868:	fa02 f606 	lsl.w	r6, r2, r6
3402286c:	fa22 f505 	lsr.w	r5, r2, r5
34022870:	409a      	lsls	r2, r3
34022872:	4334      	orrs	r4, r6
34022874:	ea20 0202 	bic.w	r2, r0, r2
34022878:	432c      	orrs	r4, r5
3402287a:	ea21 0404 	bic.w	r4, r1, r4
3402287e:	4322      	orrs	r2, r4
34022880:	f1a3 0420 	sub.w	r4, r3, #32
34022884:	f1c3 0220 	rsb	r2, r3, #32
34022888:	d10c      	bne.n	340228a4 <checkint+0x64>
3402288a:	40d8      	lsrs	r0, r3
3402288c:	fa01 f302 	lsl.w	r3, r1, r2
34022890:	40e1      	lsrs	r1, r4
34022892:	4318      	orrs	r0, r3
34022894:	4308      	orrs	r0, r1
34022896:	f000 0001 	and.w	r0, r0, #1
3402289a:	f1d0 0002 	rsbs	r0, r0, #2
3402289e:	bd70      	pop	{r4, r5, r6, pc}
340228a0:	2002      	movs	r0, #2
340228a2:	e7fc      	b.n	3402289e <checkint+0x5e>
340228a4:	2000      	movs	r0, #0
340228a6:	e7fa      	b.n	3402289e <checkint+0x5e>

340228a8 <pow>:
340228a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340228ac:	ee10 4a90 	vmov	r4, s1
340228b0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
340228b4:	ee11 aa90 	vmov	sl, s3
340228b8:	ee10 5a10 	vmov	r5, s0
340228bc:	ea4f 5814 	mov.w	r8, r4, lsr #20
340228c0:	ee11 0a10 	vmov	r0, s2
340228c4:	ea4f 561a 	mov.w	r6, sl, lsr #20
340228c8:	f108 32ff 	add.w	r2, r8, #4294967295
340228cc:	46c4      	mov	ip, r8
340228ce:	429a      	cmp	r2, r3
340228d0:	ed2d 8b0a 	vpush	{d8-d12}
340228d4:	b087      	sub	sp, #28
340228d6:	d806      	bhi.n	340228e6 <pow+0x3e>
340228d8:	f3c6 030a 	ubfx	r3, r6, #0, #11
340228dc:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
340228e0:	2b7f      	cmp	r3, #127	@ 0x7f
340228e2:	f240 8157 	bls.w	34022b94 <pow+0x2ec>
340228e6:	1802      	adds	r2, r0, r0
340228e8:	f06f 0b01 	mvn.w	fp, #1
340228ec:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
340228f0:	eb4a 010a 	adc.w	r1, sl, sl
340228f4:	1e57      	subs	r7, r2, #1
340228f6:	f141 33ff 	adc.w	r3, r1, #4294967295
340228fa:	45bb      	cmp	fp, r7
340228fc:	eb7e 0303 	sbcs.w	r3, lr, r3
34022900:	d242      	bcs.n	34022988 <pow+0xe0>
34022902:	ea52 0301 	orrs.w	r3, r2, r1
34022906:	f04f 0300 	mov.w	r3, #0
3402290a:	d10c      	bne.n	34022926 <pow+0x7e>
3402290c:	196d      	adds	r5, r5, r5
3402290e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
34022912:	4164      	adcs	r4, r4
34022914:	42ab      	cmp	r3, r5
34022916:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
3402291a:	41a3      	sbcs	r3, r4
3402291c:	f0c0 808f 	bcc.w	34022a3e <pow+0x196>
34022920:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34022924:	e02b      	b.n	3402297e <pow+0xd6>
34022926:	4ed4      	ldr	r6, [pc, #848]	@ (34022c78 <pow+0x3d0>)
34022928:	42b4      	cmp	r4, r6
3402292a:	bf08      	it	eq
3402292c:	429d      	cmpeq	r5, r3
3402292e:	d109      	bne.n	34022944 <pow+0x9c>
34022930:	1800      	adds	r0, r0, r0
34022932:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
34022936:	eb4a 0a0a 	adc.w	sl, sl, sl
3402293a:	4283      	cmp	r3, r0
3402293c:	4bcf      	ldr	r3, [pc, #828]	@ (34022c7c <pow+0x3d4>)
3402293e:	eb73 030a 	sbcs.w	r3, r3, sl
34022942:	e7eb      	b.n	3402291c <pow+0x74>
34022944:	196d      	adds	r5, r5, r5
34022946:	48ce      	ldr	r0, [pc, #824]	@ (34022c80 <pow+0x3d8>)
34022948:	4164      	adcs	r4, r4
3402294a:	42ab      	cmp	r3, r5
3402294c:	eb70 0604 	sbcs.w	r6, r0, r4
34022950:	d375      	bcc.n	34022a3e <pow+0x196>
34022952:	4281      	cmp	r1, r0
34022954:	bf08      	it	eq
34022956:	429a      	cmpeq	r2, r3
34022958:	d171      	bne.n	34022a3e <pow+0x196>
3402295a:	4aca      	ldr	r2, [pc, #808]	@ (34022c84 <pow+0x3dc>)
3402295c:	4294      	cmp	r4, r2
3402295e:	bf08      	it	eq
34022960:	429d      	cmpeq	r5, r3
34022962:	d0dd      	beq.n	34022920 <pow+0x78>
34022964:	4294      	cmp	r4, r2
34022966:	ea6f 0a0a 	mvn.w	sl, sl
3402296a:	bf34      	ite	cc
3402296c:	2400      	movcc	r4, #0
3402296e:	2401      	movcs	r4, #1
34022970:	ea4f 7ada 	mov.w	sl, sl, lsr #31
34022974:	4554      	cmp	r4, sl
34022976:	f040 81dc 	bne.w	34022d32 <pow+0x48a>
3402297a:	ee21 0b01 	vmul.f64	d0, d1, d1
3402297e:	b007      	add	sp, #28
34022980:	ecbd 8b0a 	vpop	{d8-d12}
34022984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34022988:	196f      	adds	r7, r5, r5
3402298a:	eb44 0904 	adc.w	r9, r4, r4
3402298e:	1e7a      	subs	r2, r7, #1
34022990:	f169 0300 	sbc.w	r3, r9, #0
34022994:	4593      	cmp	fp, r2
34022996:	eb7e 0303 	sbcs.w	r3, lr, r3
3402299a:	d225      	bcs.n	340229e8 <pow+0x140>
3402299c:	2c00      	cmp	r4, #0
3402299e:	ee20 0b00 	vmul.f64	d0, d0, d0
340229a2:	da13      	bge.n	340229cc <pow+0x124>
340229a4:	4651      	mov	r1, sl
340229a6:	f7ff ff4b 	bl	34022840 <checkint>
340229aa:	2801      	cmp	r0, #1
340229ac:	d10e      	bne.n	340229cc <pow+0x124>
340229ae:	eeb1 0b40 	vneg.f64	d0, d0
340229b2:	ea57 0909 	orrs.w	r9, r7, r9
340229b6:	d10b      	bne.n	340229d0 <pow+0x128>
340229b8:	f1ba 0f00 	cmp.w	sl, #0
340229bc:	dadf      	bge.n	3402297e <pow+0xd6>
340229be:	b007      	add	sp, #28
340229c0:	ecbd 8b0a 	vpop	{d8-d12}
340229c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340229c8:	f7ff bef2 	b.w	340227b0 <__math_divzero>
340229cc:	2000      	movs	r0, #0
340229ce:	e7f0      	b.n	340229b2 <pow+0x10a>
340229d0:	f1ba 0f00 	cmp.w	sl, #0
340229d4:	dad3      	bge.n	3402297e <pow+0xd6>
340229d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
340229da:	ee86 7b00 	vdiv.f64	d7, d6, d0
340229de:	ed8d 7b00 	vstr	d7, [sp]
340229e2:	ed9d 0b00 	vldr	d0, [sp]
340229e6:	e7ca      	b.n	3402297e <pow+0xd6>
340229e8:	2c00      	cmp	r4, #0
340229ea:	da2b      	bge.n	34022a44 <pow+0x19c>
340229ec:	4651      	mov	r1, sl
340229ee:	f7ff ff27 	bl	34022840 <checkint>
340229f2:	b930      	cbnz	r0, 34022a02 <pow+0x15a>
340229f4:	b007      	add	sp, #28
340229f6:	ecbd 8b0a 	vpop	{d8-d12}
340229fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340229fe:	f7ff bef3 	b.w	340227e8 <__math_invalid>
34022a02:	1e41      	subs	r1, r0, #1
34022a04:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
34022a08:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
34022a0c:	4248      	negs	r0, r1
34022a0e:	4148      	adcs	r0, r1
34022a10:	0480      	lsls	r0, r0, #18
34022a12:	f3c6 020a 	ubfx	r2, r6, #0, #11
34022a16:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
34022a1a:	2b7f      	cmp	r3, #127	@ 0x7f
34022a1c:	d92d      	bls.n	34022a7a <pow+0x1d2>
34022a1e:	2000      	movs	r0, #0
34022a20:	4b95      	ldr	r3, [pc, #596]	@ (34022c78 <pow+0x3d0>)
34022a22:	429c      	cmp	r4, r3
34022a24:	bf08      	it	eq
34022a26:	4285      	cmpeq	r5, r0
34022a28:	f43f af7a 	beq.w	34022920 <pow+0x78>
34022a2c:	f240 31bd 	movw	r1, #957	@ 0x3bd
34022a30:	428a      	cmp	r2, r1
34022a32:	d80c      	bhi.n	34022a4e <pow+0x1a6>
34022a34:	42a8      	cmp	r0, r5
34022a36:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34022a3a:	41a3      	sbcs	r3, r4
34022a3c:	d204      	bcs.n	34022a48 <pow+0x1a0>
34022a3e:	ee31 0b00 	vadd.f64	d0, d1, d0
34022a42:	e79c      	b.n	3402297e <pow+0xd6>
34022a44:	2000      	movs	r0, #0
34022a46:	e7e4      	b.n	34022a12 <pow+0x16a>
34022a48:	ee30 0b41 	vsub.f64	d0, d0, d1
34022a4c:	e797      	b.n	3402297e <pow+0xd6>
34022a4e:	2d01      	cmp	r5, #1
34022a50:	f240 72ff 	movw	r2, #2047	@ 0x7ff
34022a54:	eb74 0303 	sbcs.w	r3, r4, r3
34022a58:	bf34      	ite	cc
34022a5a:	2301      	movcc	r3, #1
34022a5c:	2300      	movcs	r3, #0
34022a5e:	4296      	cmp	r6, r2
34022a60:	bf8c      	ite	hi
34022a62:	2600      	movhi	r6, #0
34022a64:	2601      	movls	r6, #1
34022a66:	42b3      	cmp	r3, r6
34022a68:	f000 809c 	beq.w	34022ba4 <pow+0x2fc>
34022a6c:	b007      	add	sp, #28
34022a6e:	ecbd 8b0a 	vpop	{d8-d12}
34022a72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34022a76:	f7ff be93 	b.w	340227a0 <__math_oflow>
34022a7a:	f1bc 0f00 	cmp.w	ip, #0
34022a7e:	d10a      	bne.n	34022a96 <pow+0x1ee>
34022a80:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 34022c68 <pow+0x3c0>
34022a84:	ee20 7b07 	vmul.f64	d7, d0, d7
34022a88:	ec53 2b17 	vmov	r2, r3, d7
34022a8c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
34022a90:	4615      	mov	r5, r2
34022a92:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
34022a96:	4a7c      	ldr	r2, [pc, #496]	@ (34022c88 <pow+0x3e0>)
34022a98:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
34022a9c:	4422      	add	r2, r4
34022a9e:	1513      	asrs	r3, r2, #20
34022aa0:	f3c2 3146 	ubfx	r1, r2, #13, #7
34022aa4:	f36f 0213 	bfc	r2, #0, #20
34022aa8:	ee03 3a10 	vmov	s6, r3
34022aac:	4b77      	ldr	r3, [pc, #476]	@ (34022c8c <pow+0x3e4>)
34022aae:	1aa7      	subs	r7, r4, r2
34022ab0:	eb03 1641 	add.w	r6, r3, r1, lsl #5
34022ab4:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
34022ab8:	eb03 1241 	add.w	r2, r3, r1, lsl #5
34022abc:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
34022ac0:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
34022ac4:	1e2e      	subs	r6, r5, #0
34022ac6:	ec47 6b14 	vmov	d4, r6, r7
34022aca:	eea4 6b05 	vfma.f64	d6, d4, d5
34022ace:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
34022ad2:	ed93 5b00 	vldr	d5, [r3]
34022ad6:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
34022ada:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
34022ade:	eea3 2b05 	vfma.f64	d2, d3, d5
34022ae2:	ed93 5b02 	vldr	d5, [r3, #8]
34022ae6:	eea3 7b05 	vfma.f64	d7, d3, d5
34022aea:	ee36 4b02 	vadd.f64	d4, d6, d2
34022aee:	ed93 5b04 	vldr	d5, [r3, #16]
34022af2:	ee32 2b44 	vsub.f64	d2, d2, d4
34022af6:	ee26 5b05 	vmul.f64	d5, d6, d5
34022afa:	ee32 2b06 	vadd.f64	d2, d2, d6
34022afe:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
34022b02:	ee26 0b05 	vmul.f64	d0, d6, d5
34022b06:	ee37 7b02 	vadd.f64	d7, d7, d2
34022b0a:	ee34 8b00 	vadd.f64	d8, d4, d0
34022b0e:	eeb0 9b40 	vmov.f64	d9, d0
34022b12:	ee26 bb00 	vmul.f64	d11, d6, d0
34022b16:	ee34 4b48 	vsub.f64	d4, d4, d8
34022b1a:	ee96 9b05 	vfnms.f64	d9, d6, d5
34022b1e:	ee34 ab00 	vadd.f64	d10, d4, d0
34022b22:	ed93 5b06 	vldr	d5, [r3, #24]
34022b26:	ed93 4b08 	vldr	d4, [r3, #32]
34022b2a:	eea6 5b04 	vfma.f64	d5, d6, d4
34022b2e:	ee37 7b09 	vadd.f64	d7, d7, d9
34022b32:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
34022b36:	ee37 7b0a 	vadd.f64	d7, d7, d10
34022b3a:	eea6 4b03 	vfma.f64	d4, d6, d3
34022b3e:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
34022b42:	eea6 3b0c 	vfma.f64	d3, d6, d12
34022b46:	eea0 4b03 	vfma.f64	d4, d0, d3
34022b4a:	eea0 5b04 	vfma.f64	d5, d0, d4
34022b4e:	eeab 7b05 	vfma.f64	d7, d11, d5
34022b52:	ee38 4b07 	vadd.f64	d4, d8, d7
34022b56:	ee21 6b04 	vmul.f64	d6, d1, d4
34022b5a:	ee38 8b44 	vsub.f64	d8, d8, d4
34022b5e:	eeb0 5b46 	vmov.f64	d5, d6
34022b62:	ee16 3a90 	vmov	r3, s13
34022b66:	ee38 8b07 	vadd.f64	d8, d8, d7
34022b6a:	f3c3 560a 	ubfx	r6, r3, #20, #11
34022b6e:	ee91 5b04 	vfnms.f64	d5, d1, d4
34022b72:	18b2      	adds	r2, r6, r2
34022b74:	2a3e      	cmp	r2, #62	@ 0x3e
34022b76:	eea1 5b08 	vfma.f64	d5, d1, d8
34022b7a:	d91b      	bls.n	34022bb4 <pow+0x30c>
34022b7c:	2a00      	cmp	r2, #0
34022b7e:	da0b      	bge.n	34022b98 <pow+0x2f0>
34022b80:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34022b84:	ee36 0b00 	vadd.f64	d0, d6, d0
34022b88:	2800      	cmp	r0, #0
34022b8a:	f43f aef8 	beq.w	3402297e <pow+0xd6>
34022b8e:	eeb1 0b40 	vneg.f64	d0, d0
34022b92:	e6f4      	b.n	3402297e <pow+0xd6>
34022b94:	2000      	movs	r0, #0
34022b96:	e77e      	b.n	34022a96 <pow+0x1ee>
34022b98:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
34022b9c:	d909      	bls.n	34022bb2 <pow+0x30a>
34022b9e:	2b00      	cmp	r3, #0
34022ba0:	f6bf af64 	bge.w	34022a6c <pow+0x1c4>
34022ba4:	b007      	add	sp, #28
34022ba6:	ecbd 8b0a 	vpop	{d8-d12}
34022baa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34022bae:	f7ff bdef 	b.w	34022790 <__math_uflow>
34022bb2:	2600      	movs	r6, #0
34022bb4:	4936      	ldr	r1, [pc, #216]	@ (34022c90 <pow+0x3e8>)
34022bb6:	2700      	movs	r7, #0
34022bb8:	ed91 4b02 	vldr	d4, [r1, #8]
34022bbc:	ed91 3b00 	vldr	d3, [r1]
34022bc0:	eeb0 7b44 	vmov.f64	d7, d4
34022bc4:	eea6 7b03 	vfma.f64	d7, d6, d3
34022bc8:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
34022bcc:	ee17 5a10 	vmov	r5, s14
34022bd0:	ee37 7b44 	vsub.f64	d7, d7, d4
34022bd4:	ed91 4b04 	vldr	d4, [r1, #16]
34022bd8:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
34022bdc:	eea7 6b04 	vfma.f64	d6, d7, d4
34022be0:	18dc      	adds	r4, r3, r3
34022be2:	1940      	adds	r0, r0, r5
34022be4:	f104 030f 	add.w	r3, r4, #15
34022be8:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
34022bec:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
34022bf0:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
34022bf4:	ed91 4b06 	vldr	d4, [r1, #24]
34022bf8:	f8d2 e004 	ldr.w	lr, [r2, #4]
34022bfc:	eb17 020c 	adds.w	r2, r7, ip
34022c00:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
34022c04:	eea7 6b04 	vfma.f64	d6, d7, d4
34022c08:	ed91 4b08 	vldr	d4, [r1, #32]
34022c0c:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
34022c10:	ee35 5b06 	vadd.f64	d5, d5, d6
34022c14:	eea5 4b03 	vfma.f64	d4, d5, d3
34022c18:	ee25 6b05 	vmul.f64	d6, d5, d5
34022c1c:	ee35 7b07 	vadd.f64	d7, d5, d7
34022c20:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
34022c24:	eea6 7b04 	vfma.f64	d7, d6, d4
34022c28:	ee26 6b06 	vmul.f64	d6, d6, d6
34022c2c:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
34022c30:	eea5 4b03 	vfma.f64	d4, d5, d3
34022c34:	eea6 7b04 	vfma.f64	d7, d6, d4
34022c38:	2e00      	cmp	r6, #0
34022c3a:	d175      	bne.n	34022d28 <pow+0x480>
34022c3c:	42bd      	cmp	r5, r7
34022c3e:	db29      	blt.n	34022c94 <pow+0x3ec>
34022c40:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
34022c44:	4610      	mov	r0, r2
34022c46:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
34022c4a:	ec41 0b10 	vmov	d0, r0, r1
34022c4e:	eea7 0b00 	vfma.f64	d0, d7, d0
34022c52:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 34022c70 <pow+0x3c8>
34022c56:	ee20 0b07 	vmul.f64	d0, d0, d7
34022c5a:	b007      	add	sp, #28
34022c5c:	ecbd 8b0a 	vpop	{d8-d12}
34022c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34022c64:	f7ff bdd8 	b.w	34022818 <__math_check_oflow>
34022c68:	00000000 	.word	0x00000000
34022c6c:	43300000 	.word	0x43300000
34022c70:	00000000 	.word	0x00000000
34022c74:	7f000000 	.word	0x7f000000
34022c78:	3ff00000 	.word	0x3ff00000
34022c7c:	fff00000 	.word	0xfff00000
34022c80:	ffe00000 	.word	0xffe00000
34022c84:	7fe00000 	.word	0x7fe00000
34022c88:	c0196aab 	.word	0xc0196aab
34022c8c:	34106e08 	.word	0x34106e08
34022c90:	34106598 	.word	0x34106598
34022c94:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
34022c98:	4610      	mov	r0, r2
34022c9a:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
34022c9e:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
34022ca2:	ec41 0b15 	vmov	d5, r0, r1
34022ca6:	ee27 6b05 	vmul.f64	d6, d7, d5
34022caa:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 34022d38 <pow+0x490>
34022cae:	ee35 7b06 	vadd.f64	d7, d5, d6
34022cb2:	eeb0 4bc7 	vabs.f64	d4, d7
34022cb6:	eeb4 4bc3 	vcmpe.f64	d4, d3
34022cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022cbe:	d52a      	bpl.n	34022d16 <pow+0x46e>
34022cc0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34022cc4:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
34022cc8:	ee35 5b47 	vsub.f64	d5, d5, d7
34022ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022cd0:	ee35 5b06 	vadd.f64	d5, d5, d6
34022cd4:	bf58      	it	pl
34022cd6:	eeb0 4b43 	vmovpl.f64	d4, d3
34022cda:	ee37 3b04 	vadd.f64	d3, d7, d4
34022cde:	ee34 6b43 	vsub.f64	d6, d4, d3
34022ce2:	ee36 6b07 	vadd.f64	d6, d6, d7
34022ce6:	ee36 6b05 	vadd.f64	d6, d6, d5
34022cea:	ee36 6b03 	vadd.f64	d6, d6, d3
34022cee:	ee36 7b44 	vsub.f64	d7, d6, d4
34022cf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
34022cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022cfa:	d104      	bne.n	34022d06 <pow+0x45e>
34022cfc:	4632      	mov	r2, r6
34022cfe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
34022d02:	ec43 2b17 	vmov	d7, r2, r3
34022d06:	ed8d 0b02 	vstr	d0, [sp, #8]
34022d0a:	ed9d 6b02 	vldr	d6, [sp, #8]
34022d0e:	ee26 6b00 	vmul.f64	d6, d6, d0
34022d12:	ed8d 6b04 	vstr	d6, [sp, #16]
34022d16:	ee27 0b00 	vmul.f64	d0, d7, d0
34022d1a:	b007      	add	sp, #28
34022d1c:	ecbd 8b0a 	vpop	{d8-d12}
34022d20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34022d24:	f7ff bd6f 	b.w	34022806 <__math_check_uflow>
34022d28:	ec43 2b10 	vmov	d0, r2, r3
34022d2c:	eea7 0b00 	vfma.f64	d0, d7, d0
34022d30:	e625      	b.n	3402297e <pow+0xd6>
34022d32:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 34022d40 <pow+0x498>
34022d36:	e622      	b.n	3402297e <pow+0xd6>
34022d38:	00000000 	.word	0x00000000
34022d3c:	00100000 	.word	0x00100000
	...

34022d48 <expf>:
34022d48:	ee10 2a10 	vmov	r2, s0
34022d4c:	f240 412a 	movw	r1, #1066	@ 0x42a
34022d50:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
34022d54:	f3c2 530a 	ubfx	r3, r2, #20, #11
34022d58:	428b      	cmp	r3, r1
34022d5a:	b430      	push	{r4, r5}
34022d5c:	d92a      	bls.n	34022db4 <expf+0x6c>
34022d5e:	f512 0f00 	cmn.w	r2, #8388608	@ 0x800000
34022d62:	d058      	beq.n	34022e16 <expf+0xce>
34022d64:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
34022d68:	d303      	bcc.n	34022d72 <expf+0x2a>
34022d6a:	ee30 0a00 	vadd.f32	s0, s0, s0
34022d6e:	bc30      	pop	{r4, r5}
34022d70:	4770      	bx	lr
34022d72:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 34022e1c <expf+0xd4>
34022d76:	eeb4 0ae7 	vcmpe.f32	s0, s15
34022d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022d7e:	dd03      	ble.n	34022d88 <expf+0x40>
34022d80:	2000      	movs	r0, #0
34022d82:	bc30      	pop	{r4, r5}
34022d84:	f000 b8e0 	b.w	34022f48 <__math_oflowf>
34022d88:	eddf 7a25 	vldr	s15, [pc, #148]	@ 34022e20 <expf+0xd8>
34022d8c:	eeb4 0ae7 	vcmpe.f32	s0, s15
34022d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022d94:	d503      	bpl.n	34022d9e <expf+0x56>
34022d96:	2000      	movs	r0, #0
34022d98:	bc30      	pop	{r4, r5}
34022d9a:	f000 b8c9 	b.w	34022f30 <__math_uflowf>
34022d9e:	eddf 7a21 	vldr	s15, [pc, #132]	@ 34022e24 <expf+0xdc>
34022da2:	eeb4 0ae7 	vcmpe.f32	s0, s15
34022da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022daa:	d503      	bpl.n	34022db4 <expf+0x6c>
34022dac:	2000      	movs	r0, #0
34022dae:	bc30      	pop	{r4, r5}
34022db0:	f000 b8c4 	b.w	34022f3c <__math_may_uflowf>
34022db4:	4b1c      	ldr	r3, [pc, #112]	@ (34022e28 <expf+0xe0>)
34022db6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34022dba:	ed93 4b48 	vldr	d4, [r3, #288]	@ 0x120
34022dbe:	ed93 5b4a 	vldr	d5, [r3, #296]	@ 0x128
34022dc2:	eeb0 7b44 	vmov.f64	d7, d4
34022dc6:	eea5 7b06 	vfma.f64	d7, d5, d6
34022dca:	ee17 0a10 	vmov	r0, s14
34022dce:	ee37 7b44 	vsub.f64	d7, d7, d4
34022dd2:	f000 021f 	and.w	r2, r0, #31
34022dd6:	ee95 7b06 	vfnms.f64	d7, d5, d6
34022dda:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
34022dde:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
34022de2:	684d      	ldr	r5, [r1, #4]
34022de4:	2100      	movs	r1, #0
34022de6:	ed93 5b4c 	vldr	d5, [r3, #304]	@ 0x130
34022dea:	ed93 6b4e 	vldr	d6, [r3, #312]	@ 0x138
34022dee:	190a      	adds	r2, r1, r4
34022df0:	eea5 6b07 	vfma.f64	d6, d5, d7
34022df4:	ee27 4b07 	vmul.f64	d4, d7, d7
34022df8:	ed93 5b50 	vldr	d5, [r3, #320]	@ 0x140
34022dfc:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
34022e00:	eea5 0b07 	vfma.f64	d0, d5, d7
34022e04:	ec43 2b17 	vmov	d7, r2, r3
34022e08:	eea6 0b04 	vfma.f64	d0, d6, d4
34022e0c:	ee20 0b07 	vmul.f64	d0, d0, d7
34022e10:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34022e14:	e7ab      	b.n	34022d6e <expf+0x26>
34022e16:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34022e2c <expf+0xe4>
34022e1a:	e7a8      	b.n	34022d6e <expf+0x26>
34022e1c:	42b17217 	.word	0x42b17217
34022e20:	c2cff1b4 	.word	0xc2cff1b4
34022e24:	c2ce8ecf 	.word	0xc2ce8ecf
34022e28:	34107e50 	.word	0x34107e50
34022e2c:	00000000 	.word	0x00000000

34022e30 <logf>:
34022e30:	ee10 3a10 	vmov	r3, s0
34022e34:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
34022e38:	b410      	push	{r4}
34022e3a:	d055      	beq.n	34022ee8 <logf+0xb8>
34022e3c:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
34022e40:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34022e44:	d31a      	bcc.n	34022e7c <logf+0x4c>
34022e46:	005a      	lsls	r2, r3, #1
34022e48:	d104      	bne.n	34022e54 <logf+0x24>
34022e4a:	2001      	movs	r0, #1
34022e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
34022e50:	f000 b880 	b.w	34022f54 <__math_divzerof>
34022e54:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
34022e58:	d043      	beq.n	34022ee2 <logf+0xb2>
34022e5a:	2b00      	cmp	r3, #0
34022e5c:	db02      	blt.n	34022e64 <logf+0x34>
34022e5e:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
34022e62:	d303      	bcc.n	34022e6c <logf+0x3c>
34022e64:	f85d 4b04 	ldr.w	r4, [sp], #4
34022e68:	f000 b886 	b.w	34022f78 <__math_invalidf>
34022e6c:	eddf 7a20 	vldr	s15, [pc, #128]	@ 34022ef0 <logf+0xc0>
34022e70:	ee20 0a27 	vmul.f32	s0, s0, s15
34022e74:	ee10 3a10 	vmov	r3, s0
34022e78:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
34022e7c:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
34022e80:	491c      	ldr	r1, [pc, #112]	@ (34022ef4 <logf+0xc4>)
34022e82:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
34022e86:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
34022e8a:	0dd4      	lsrs	r4, r2, #23
34022e8c:	f3c2 40c3 	ubfx	r0, r2, #19, #4
34022e90:	15d2      	asrs	r2, r2, #23
34022e92:	05e4      	lsls	r4, r4, #23
34022e94:	eb01 1000 	add.w	r0, r1, r0, lsl #4
34022e98:	1b1b      	subs	r3, r3, r4
34022e9a:	ee07 3a90 	vmov	s15, r3
34022e9e:	ed90 5b00 	vldr	d5, [r0]
34022ea2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
34022ea6:	ed90 6b02 	vldr	d6, [r0, #8]
34022eaa:	eea5 0b07 	vfma.f64	d0, d5, d7
34022eae:	ee07 2a90 	vmov	s15, r2
34022eb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34022eb6:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
34022eba:	eea7 6b05 	vfma.f64	d6, d7, d5
34022ebe:	ee20 4b00 	vmul.f64	d4, d0, d0
34022ec2:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
34022ec6:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
34022eca:	eea5 7b00 	vfma.f64	d7, d5, d0
34022ece:	ee30 0b06 	vadd.f64	d0, d0, d6
34022ed2:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
34022ed6:	eea5 7b04 	vfma.f64	d7, d5, d4
34022eda:	eea4 0b07 	vfma.f64	d0, d4, d7
34022ede:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34022ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
34022ee6:	4770      	bx	lr
34022ee8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 34022ef8 <logf+0xc8>
34022eec:	e7f9      	b.n	34022ee2 <logf+0xb2>
34022eee:	bf00      	nop
34022ef0:	4b000000 	.word	0x4b000000
34022ef4:	34107f98 	.word	0x34107f98
34022ef8:	00000000 	.word	0x00000000

34022efc <with_errnof>:
34022efc:	b510      	push	{r4, lr}
34022efe:	ed2d 8b02 	vpush	{d8}
34022f02:	eeb0 8a40 	vmov.f32	s16, s0
34022f06:	4604      	mov	r4, r0
34022f08:	f7fd fbea 	bl	340206e0 <__errno>
34022f0c:	6004      	str	r4, [r0, #0]
34022f0e:	eeb0 0a48 	vmov.f32	s0, s16
34022f12:	ecbd 8b02 	vpop	{d8}
34022f16:	bd10      	pop	{r4, pc}

34022f18 <xflowf>:
34022f18:	b130      	cbz	r0, 34022f28 <xflowf+0x10>
34022f1a:	eef1 7a40 	vneg.f32	s15, s0
34022f1e:	ee27 0a80 	vmul.f32	s0, s15, s0
34022f22:	2022      	movs	r0, #34	@ 0x22
34022f24:	f7ff bfea 	b.w	34022efc <with_errnof>
34022f28:	eef0 7a40 	vmov.f32	s15, s0
34022f2c:	e7f7      	b.n	34022f1e <xflowf+0x6>
	...

34022f30 <__math_uflowf>:
34022f30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34022f38 <__math_uflowf+0x8>
34022f34:	f7ff bff0 	b.w	34022f18 <xflowf>
34022f38:	10000000 	.word	0x10000000

34022f3c <__math_may_uflowf>:
34022f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34022f44 <__math_may_uflowf+0x8>
34022f40:	f7ff bfea 	b.w	34022f18 <xflowf>
34022f44:	1a200000 	.word	0x1a200000

34022f48 <__math_oflowf>:
34022f48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 34022f50 <__math_oflowf+0x8>
34022f4c:	f7ff bfe4 	b.w	34022f18 <xflowf>
34022f50:	70000000 	.word	0x70000000

34022f54 <__math_divzerof>:
34022f54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34022f58:	2800      	cmp	r0, #0
34022f5a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34022f5e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 34022f74 <__math_divzerof+0x20>
34022f62:	f04f 0022 	mov.w	r0, #34	@ 0x22
34022f66:	fe47 7a87 	vseleq.f32	s15, s15, s14
34022f6a:	ee87 0a80 	vdiv.f32	s0, s15, s0
34022f6e:	f7ff bfc5 	b.w	34022efc <with_errnof>
34022f72:	bf00      	nop
34022f74:	00000000 	.word	0x00000000

34022f78 <__math_invalidf>:
34022f78:	eef0 7a40 	vmov.f32	s15, s0
34022f7c:	ee30 7a40 	vsub.f32	s14, s0, s0
34022f80:	eef4 7a67 	vcmp.f32	s15, s15
34022f84:	ee87 0a07 	vdiv.f32	s0, s14, s14
34022f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34022f8c:	d602      	bvs.n	34022f94 <__math_invalidf+0x1c>
34022f8e:	2021      	movs	r0, #33	@ 0x21
34022f90:	f7ff bfb4 	b.w	34022efc <with_errnof>
34022f94:	4770      	bx	lr

34022f96 <__ieee754_sqrt>:
34022f96:	eeb1 0bc0 	vsqrt.f64	d0, d0
34022f9a:	4770      	bx	lr
34022f9c:	0000      	movs	r0, r0
	...

34022fa0 <__kernel_cos>:
34022fa0:	eeb0 5b40 	vmov.f64	d5, d0
34022fa4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34022fa8:	ee15 1a90 	vmov	r1, s11
34022fac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34022fb0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
34022fb4:	d204      	bcs.n	34022fc0 <__kernel_cos+0x20>
34022fb6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
34022fba:	ee17 3a90 	vmov	r3, s15
34022fbe:	b343      	cbz	r3, 34023012 <__kernel_cos+0x72>
34022fc0:	ee25 6b05 	vmul.f64	d6, d5, d5
34022fc4:	4b28      	ldr	r3, [pc, #160]	@ (34023068 <__kernel_cos+0xc8>)
34022fc6:	4299      	cmp	r1, r3
34022fc8:	ee21 1b45 	vnmul.f64	d1, d1, d5
34022fcc:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 34023038 <__kernel_cos+0x98>
34022fd0:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 34023040 <__kernel_cos+0xa0>
34022fd4:	eea6 4b07 	vfma.f64	d4, d6, d7
34022fd8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 34023048 <__kernel_cos+0xa8>
34022fdc:	eea4 7b06 	vfma.f64	d7, d4, d6
34022fe0:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 34023050 <__kernel_cos+0xb0>
34022fe4:	eea7 4b06 	vfma.f64	d4, d7, d6
34022fe8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 34023058 <__kernel_cos+0xb8>
34022fec:	eea4 7b06 	vfma.f64	d7, d4, d6
34022ff0:	ed9f 4b1b 	vldr	d4, [pc, #108]	@ 34023060 <__kernel_cos+0xc0>
34022ff4:	eea7 4b06 	vfma.f64	d4, d7, d6
34022ff8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
34022ffc:	ee26 7b07 	vmul.f64	d7, d6, d7
34023000:	ee24 4b06 	vmul.f64	d4, d4, d6
34023004:	eea6 1b04 	vfma.f64	d1, d6, d4
34023008:	d804      	bhi.n	34023014 <__kernel_cos+0x74>
3402300a:	ee37 7b41 	vsub.f64	d7, d7, d1
3402300e:	ee30 0b47 	vsub.f64	d0, d0, d7
34023012:	4770      	bx	lr
34023014:	4b15      	ldr	r3, [pc, #84]	@ (3402306c <__kernel_cos+0xcc>)
34023016:	4299      	cmp	r1, r3
34023018:	d809      	bhi.n	3402302e <__kernel_cos+0x8e>
3402301a:	2200      	movs	r2, #0
3402301c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
34023020:	ec43 2b16 	vmov	d6, r2, r3
34023024:	ee30 0b46 	vsub.f64	d0, d0, d6
34023028:	ee37 7b46 	vsub.f64	d7, d7, d6
3402302c:	e7ed      	b.n	3402300a <__kernel_cos+0x6a>
3402302e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
34023032:	e7f7      	b.n	34023024 <__kernel_cos+0x84>
34023034:	f3af 8000 	nop.w
34023038:	be8838d4 	.word	0xbe8838d4
3402303c:	bda8fae9 	.word	0xbda8fae9
34023040:	bdb4b1c4 	.word	0xbdb4b1c4
34023044:	3e21ee9e 	.word	0x3e21ee9e
34023048:	809c52ad 	.word	0x809c52ad
3402304c:	be927e4f 	.word	0xbe927e4f
34023050:	19cb1590 	.word	0x19cb1590
34023054:	3efa01a0 	.word	0x3efa01a0
34023058:	16c15177 	.word	0x16c15177
3402305c:	bf56c16c 	.word	0xbf56c16c
34023060:	5555554c 	.word	0x5555554c
34023064:	3fa55555 	.word	0x3fa55555
34023068:	3fd33332 	.word	0x3fd33332
3402306c:	3fe90000 	.word	0x3fe90000

34023070 <__kernel_sin>:
34023070:	ee10 3a90 	vmov	r3, s1
34023074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34023078:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
3402307c:	d204      	bcs.n	34023088 <__kernel_sin+0x18>
3402307e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
34023082:	ee17 3a90 	vmov	r3, s15
34023086:	b35b      	cbz	r3, 340230e0 <__kernel_sin+0x70>
34023088:	ee20 6b00 	vmul.f64	d6, d0, d0
3402308c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 340230e8 <__kernel_sin+0x78>
34023090:	ed9f 4b17 	vldr	d4, [pc, #92]	@ 340230f0 <__kernel_sin+0x80>
34023094:	ee20 5b06 	vmul.f64	d5, d0, d6
34023098:	eea6 4b07 	vfma.f64	d4, d6, d7
3402309c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 340230f8 <__kernel_sin+0x88>
340230a0:	eea4 7b06 	vfma.f64	d7, d4, d6
340230a4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 34023100 <__kernel_sin+0x90>
340230a8:	eea7 4b06 	vfma.f64	d4, d7, d6
340230ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 34023108 <__kernel_sin+0x98>
340230b0:	eea4 7b06 	vfma.f64	d7, d4, d6
340230b4:	b930      	cbnz	r0, 340230c4 <__kernel_sin+0x54>
340230b6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 34023110 <__kernel_sin+0xa0>
340230ba:	eea6 4b07 	vfma.f64	d4, d6, d7
340230be:	eea4 0b05 	vfma.f64	d0, d4, d5
340230c2:	4770      	bx	lr
340230c4:	ee27 7b45 	vnmul.f64	d7, d7, d5
340230c8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
340230cc:	eea1 7b04 	vfma.f64	d7, d1, d4
340230d0:	ee97 1b06 	vfnms.f64	d1, d7, d6
340230d4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 34023118 <__kernel_sin+0xa8>
340230d8:	eea5 1b07 	vfma.f64	d1, d5, d7
340230dc:	ee30 0b41 	vsub.f64	d0, d0, d1
340230e0:	4770      	bx	lr
340230e2:	bf00      	nop
340230e4:	f3af 8000 	nop.w
340230e8:	5acfd57c 	.word	0x5acfd57c
340230ec:	3de5d93a 	.word	0x3de5d93a
340230f0:	8a2b9ceb 	.word	0x8a2b9ceb
340230f4:	be5ae5e6 	.word	0xbe5ae5e6
340230f8:	57b1fe7d 	.word	0x57b1fe7d
340230fc:	3ec71de3 	.word	0x3ec71de3
34023100:	19c161d5 	.word	0x19c161d5
34023104:	bf2a01a0 	.word	0xbf2a01a0
34023108:	1110f8a6 	.word	0x1110f8a6
3402310c:	3f811111 	.word	0x3f811111
34023110:	55555549 	.word	0x55555549
34023114:	bfc55555 	.word	0xbfc55555
34023118:	55555549 	.word	0x55555549
3402311c:	3fc55555 	.word	0x3fc55555

34023120 <__ieee754_log10>:
34023120:	ee10 3a90 	vmov	r3, s1
34023124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34023128:	b510      	push	{r4, lr}
3402312a:	ed2d 8b02 	vpush	{d8}
3402312e:	da21      	bge.n	34023174 <__ieee754_log10+0x54>
34023130:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
34023134:	ee10 1a10 	vmov	r1, s0
34023138:	430a      	orrs	r2, r1
3402313a:	d108      	bne.n	3402314e <__ieee754_log10+0x2e>
3402313c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 340231c8 <__ieee754_log10+0xa8>
34023140:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 340231d0 <__ieee754_log10+0xb0>
34023144:	ee86 0b07 	vdiv.f64	d0, d6, d7
34023148:	ecbd 8b02 	vpop	{d8}
3402314c:	bd10      	pop	{r4, pc}
3402314e:	2b00      	cmp	r3, #0
34023150:	da02      	bge.n	34023158 <__ieee754_log10+0x38>
34023152:	ee30 6b40 	vsub.f64	d6, d0, d0
34023156:	e7f3      	b.n	34023140 <__ieee754_log10+0x20>
34023158:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 340231d8 <__ieee754_log10+0xb8>
3402315c:	f06f 0235 	mvn.w	r2, #53	@ 0x35
34023160:	ee20 0b07 	vmul.f64	d0, d0, d7
34023164:	ee10 3a90 	vmov	r3, s1
34023168:	4923      	ldr	r1, [pc, #140]	@ (340231f8 <__ieee754_log10+0xd8>)
3402316a:	428b      	cmp	r3, r1
3402316c:	dd04      	ble.n	34023178 <__ieee754_log10+0x58>
3402316e:	ee30 0b00 	vadd.f64	d0, d0, d0
34023172:	e7e9      	b.n	34023148 <__ieee754_log10+0x28>
34023174:	2200      	movs	r2, #0
34023176:	e7f7      	b.n	34023168 <__ieee754_log10+0x48>
34023178:	1518      	asrs	r0, r3, #20
3402317a:	f240 34ff 	movw	r4, #1023	@ 0x3ff
3402317e:	f3c3 0113 	ubfx	r1, r3, #0, #20
34023182:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
34023186:	4410      	add	r0, r2
34023188:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
3402318c:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
34023190:	ee08 3a10 	vmov	s16, r3
34023194:	ec53 2b10 	vmov	r2, r3, d0
34023198:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
3402319c:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
340231a0:	ec43 2b10 	vmov	d0, r2, r3
340231a4:	f000 faf4 	bl	34023790 <log>
340231a8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 340231e0 <__ieee754_log10+0xc0>
340231ac:	ee20 0b07 	vmul.f64	d0, d0, d7
340231b0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 340231e8 <__ieee754_log10+0xc8>
340231b4:	eea8 0b07 	vfma.f64	d0, d8, d7
340231b8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 340231f0 <__ieee754_log10+0xd0>
340231bc:	eea8 0b07 	vfma.f64	d0, d8, d7
340231c0:	e7c2      	b.n	34023148 <__ieee754_log10+0x28>
340231c2:	bf00      	nop
340231c4:	f3af 8000 	nop.w
340231c8:	00000000 	.word	0x00000000
340231cc:	c3500000 	.word	0xc3500000
	...
340231dc:	43500000 	.word	0x43500000
340231e0:	1526e50e 	.word	0x1526e50e
340231e4:	3fdbcb7b 	.word	0x3fdbcb7b
340231e8:	11f12b36 	.word	0x11f12b36
340231ec:	3d59fef3 	.word	0x3d59fef3
340231f0:	509f6000 	.word	0x509f6000
340231f4:	3fd34413 	.word	0x3fd34413
340231f8:	7fefffff 	.word	0x7fefffff
340231fc:	00000000 	.word	0x00000000

34023200 <__ieee754_rem_pio2>:
34023200:	eeb0 7b40 	vmov.f64	d7, d0
34023204:	4b9a      	ldr	r3, [pc, #616]	@ (34023470 <__ieee754_rem_pio2+0x270>)
34023206:	b570      	push	{r4, r5, r6, lr}
34023208:	ee17 5a90 	vmov	r5, s15
3402320c:	b088      	sub	sp, #32
3402320e:	4604      	mov	r4, r0
34023210:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
34023214:	429e      	cmp	r6, r3
34023216:	d807      	bhi.n	34023228 <__ieee754_rem_pio2+0x28>
34023218:	2200      	movs	r2, #0
3402321a:	2300      	movs	r3, #0
3402321c:	ed84 0b00 	vstr	d0, [r4]
34023220:	e9c0 2302 	strd	r2, r3, [r0, #8]
34023224:	2000      	movs	r0, #0
34023226:	e01b      	b.n	34023260 <__ieee754_rem_pio2+0x60>
34023228:	4b92      	ldr	r3, [pc, #584]	@ (34023474 <__ieee754_rem_pio2+0x274>)
3402322a:	429e      	cmp	r6, r3
3402322c:	d83b      	bhi.n	340232a6 <__ieee754_rem_pio2+0xa6>
3402322e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
34023232:	2d00      	cmp	r5, #0
34023234:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 34023430 <__ieee754_rem_pio2+0x230>
34023238:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
3402323c:	dd19      	ble.n	34023272 <__ieee754_rem_pio2+0x72>
3402323e:	429e      	cmp	r6, r3
34023240:	ee30 7b46 	vsub.f64	d7, d0, d6
34023244:	d00e      	beq.n	34023264 <__ieee754_rem_pio2+0x64>
34023246:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 34023438 <__ieee754_rem_pio2+0x238>
3402324a:	ee37 6b45 	vsub.f64	d6, d7, d5
3402324e:	2001      	movs	r0, #1
34023250:	ee37 7b46 	vsub.f64	d7, d7, d6
34023254:	ed84 6b00 	vstr	d6, [r4]
34023258:	ee37 7b45 	vsub.f64	d7, d7, d5
3402325c:	ed84 7b02 	vstr	d7, [r4, #8]
34023260:	b008      	add	sp, #32
34023262:	bd70      	pop	{r4, r5, r6, pc}
34023264:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 34023440 <__ieee754_rem_pio2+0x240>
34023268:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 34023448 <__ieee754_rem_pio2+0x248>
3402326c:	ee37 7b46 	vsub.f64	d7, d7, d6
34023270:	e7eb      	b.n	3402324a <__ieee754_rem_pio2+0x4a>
34023272:	429e      	cmp	r6, r3
34023274:	ee30 7b06 	vadd.f64	d7, d0, d6
34023278:	d00e      	beq.n	34023298 <__ieee754_rem_pio2+0x98>
3402327a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 34023438 <__ieee754_rem_pio2+0x238>
3402327e:	ee37 6b05 	vadd.f64	d6, d7, d5
34023282:	f04f 30ff 	mov.w	r0, #4294967295
34023286:	ee37 7b46 	vsub.f64	d7, d7, d6
3402328a:	ed84 6b00 	vstr	d6, [r4]
3402328e:	ee37 7b05 	vadd.f64	d7, d7, d5
34023292:	ed84 7b02 	vstr	d7, [r4, #8]
34023296:	e7e3      	b.n	34023260 <__ieee754_rem_pio2+0x60>
34023298:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 34023440 <__ieee754_rem_pio2+0x240>
3402329c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 34023448 <__ieee754_rem_pio2+0x248>
340232a0:	ee37 7b06 	vadd.f64	d7, d7, d6
340232a4:	e7eb      	b.n	3402327e <__ieee754_rem_pio2+0x7e>
340232a6:	4b74      	ldr	r3, [pc, #464]	@ (34023478 <__ieee754_rem_pio2+0x278>)
340232a8:	429e      	cmp	r6, r3
340232aa:	d86f      	bhi.n	3402338c <__ieee754_rem_pio2+0x18c>
340232ac:	f000 f8ec 	bl	34023488 <fabs>
340232b0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
340232b4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 34023450 <__ieee754_rem_pio2+0x250>
340232b8:	eea0 7b06 	vfma.f64	d7, d0, d6
340232bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
340232c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
340232c4:	ee17 0a90 	vmov	r0, s15
340232c8:	ed9f 7b59 	vldr	d7, [pc, #356]	@ 34023430 <__ieee754_rem_pio2+0x230>
340232cc:	281f      	cmp	r0, #31
340232ce:	eeb1 4b45 	vneg.f64	d4, d5
340232d2:	eea5 0b47 	vfms.f64	d0, d5, d7
340232d6:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 34023438 <__ieee754_rem_pio2+0x238>
340232da:	ee25 7b07 	vmul.f64	d7, d5, d7
340232de:	ee30 6b47 	vsub.f64	d6, d0, d7
340232e2:	dc05      	bgt.n	340232f0 <__ieee754_rem_pio2+0xf0>
340232e4:	1e42      	subs	r2, r0, #1
340232e6:	4b65      	ldr	r3, [pc, #404]	@ (3402347c <__ieee754_rem_pio2+0x27c>)
340232e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
340232ec:	42b3      	cmp	r3, r6
340232ee:	d108      	bne.n	34023302 <__ieee754_rem_pio2+0x102>
340232f0:	ee16 3a90 	vmov	r3, s13
340232f4:	1532      	asrs	r2, r6, #20
340232f6:	f3c3 530a 	ubfx	r3, r3, #20, #11
340232fa:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
340232fe:	2b10      	cmp	r3, #16
34023300:	dc02      	bgt.n	34023308 <__ieee754_rem_pio2+0x108>
34023302:	ed84 6b00 	vstr	d6, [r4]
34023306:	e01a      	b.n	3402333e <__ieee754_rem_pio2+0x13e>
34023308:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 34023440 <__ieee754_rem_pio2+0x240>
3402330c:	eeb0 6b40 	vmov.f64	d6, d0
34023310:	eea4 6b03 	vfma.f64	d6, d4, d3
34023314:	ee30 7b46 	vsub.f64	d7, d0, d6
34023318:	eea4 7b03 	vfma.f64	d7, d4, d3
3402331c:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 34023448 <__ieee754_rem_pio2+0x248>
34023320:	ee95 7b03 	vfnms.f64	d7, d5, d3
34023324:	ee36 3b47 	vsub.f64	d3, d6, d7
34023328:	ee13 3a90 	vmov	r3, s7
3402332c:	f3c3 530a 	ubfx	r3, r3, #20, #11
34023330:	1ad3      	subs	r3, r2, r3
34023332:	2b31      	cmp	r3, #49	@ 0x31
34023334:	dc17      	bgt.n	34023366 <__ieee754_rem_pio2+0x166>
34023336:	eeb0 0b46 	vmov.f64	d0, d6
3402333a:	ed84 3b00 	vstr	d3, [r4]
3402333e:	ed94 6b00 	vldr	d6, [r4]
34023342:	2d00      	cmp	r5, #0
34023344:	ee30 0b46 	vsub.f64	d0, d0, d6
34023348:	ee30 0b47 	vsub.f64	d0, d0, d7
3402334c:	ed84 0b02 	vstr	d0, [r4, #8]
34023350:	da86      	bge.n	34023260 <__ieee754_rem_pio2+0x60>
34023352:	eeb1 6b46 	vneg.f64	d6, d6
34023356:	eeb1 0b40 	vneg.f64	d0, d0
3402335a:	ed84 6b00 	vstr	d6, [r4]
3402335e:	ed84 0b02 	vstr	d0, [r4, #8]
34023362:	4240      	negs	r0, r0
34023364:	e77c      	b.n	34023260 <__ieee754_rem_pio2+0x60>
34023366:	ed9f 7b3c 	vldr	d7, [pc, #240]	@ 34023458 <__ieee754_rem_pio2+0x258>
3402336a:	eeb0 0b46 	vmov.f64	d0, d6
3402336e:	eea4 0b07 	vfma.f64	d0, d4, d7
34023372:	ee36 6b40 	vsub.f64	d6, d6, d0
34023376:	eea4 6b07 	vfma.f64	d6, d4, d7
3402337a:	ed9f 4b39 	vldr	d4, [pc, #228]	@ 34023460 <__ieee754_rem_pio2+0x260>
3402337e:	eeb0 7b46 	vmov.f64	d7, d6
34023382:	ee95 7b04 	vfnms.f64	d7, d5, d4
34023386:	ee30 6b47 	vsub.f64	d6, d0, d7
3402338a:	e7ba      	b.n	34023302 <__ieee754_rem_pio2+0x102>
3402338c:	4b3c      	ldr	r3, [pc, #240]	@ (34023480 <__ieee754_rem_pio2+0x280>)
3402338e:	429e      	cmp	r6, r3
34023390:	d906      	bls.n	340233a0 <__ieee754_rem_pio2+0x1a0>
34023392:	ee30 7b40 	vsub.f64	d7, d0, d0
34023396:	ed80 7b02 	vstr	d7, [r0, #8]
3402339a:	ed80 7b00 	vstr	d7, [r0]
3402339e:	e741      	b.n	34023224 <__ieee754_rem_pio2+0x24>
340233a0:	1532      	asrs	r2, r6, #20
340233a2:	ee10 3a10 	vmov	r3, s0
340233a6:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
340233aa:	4618      	mov	r0, r3
340233ac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
340233b0:	ec41 0b17 	vmov	d7, r0, r1
340233b4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
340233b8:	a808      	add	r0, sp, #32
340233ba:	2103      	movs	r1, #3
340233bc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
340233c0:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 34023468 <__ieee754_rem_pio2+0x268>
340233c4:	ee37 7b46 	vsub.f64	d7, d7, d6
340233c8:	ed8d 6b02 	vstr	d6, [sp, #8]
340233cc:	ee27 7b05 	vmul.f64	d7, d7, d5
340233d0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
340233d4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
340233d8:	ee37 7b46 	vsub.f64	d7, d7, d6
340233dc:	ed8d 6b04 	vstr	d6, [sp, #16]
340233e0:	ee27 7b05 	vmul.f64	d7, d7, d5
340233e4:	ed8d 7b06 	vstr	d7, [sp, #24]
340233e8:	ed30 7b02 	vldmdb	r0!, {d7}
340233ec:	460b      	mov	r3, r1
340233ee:	3901      	subs	r1, #1
340233f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
340233f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340233f8:	d0f6      	beq.n	340233e8 <__ieee754_rem_pio2+0x1e8>
340233fa:	4922      	ldr	r1, [pc, #136]	@ (34023484 <__ieee754_rem_pio2+0x284>)
340233fc:	a802      	add	r0, sp, #8
340233fe:	9101      	str	r1, [sp, #4]
34023400:	2102      	movs	r1, #2
34023402:	9100      	str	r1, [sp, #0]
34023404:	4621      	mov	r1, r4
34023406:	f000 fabb 	bl	34023980 <__kernel_rem_pio2>
3402340a:	2d00      	cmp	r5, #0
3402340c:	f6bf af28 	bge.w	34023260 <__ieee754_rem_pio2+0x60>
34023410:	ed94 7b00 	vldr	d7, [r4]
34023414:	eeb1 7b47 	vneg.f64	d7, d7
34023418:	ed84 7b00 	vstr	d7, [r4]
3402341c:	ed94 7b02 	vldr	d7, [r4, #8]
34023420:	eeb1 7b47 	vneg.f64	d7, d7
34023424:	ed84 7b02 	vstr	d7, [r4, #8]
34023428:	e79b      	b.n	34023362 <__ieee754_rem_pio2+0x162>
3402342a:	bf00      	nop
3402342c:	f3af 8000 	nop.w
34023430:	54400000 	.word	0x54400000
34023434:	3ff921fb 	.word	0x3ff921fb
34023438:	1a626331 	.word	0x1a626331
3402343c:	3dd0b461 	.word	0x3dd0b461
34023440:	1a600000 	.word	0x1a600000
34023444:	3dd0b461 	.word	0x3dd0b461
34023448:	2e037073 	.word	0x2e037073
3402344c:	3ba3198a 	.word	0x3ba3198a
34023450:	6dc9c883 	.word	0x6dc9c883
34023454:	3fe45f30 	.word	0x3fe45f30
34023458:	2e000000 	.word	0x2e000000
3402345c:	3ba3198a 	.word	0x3ba3198a
34023460:	252049c1 	.word	0x252049c1
34023464:	397b839a 	.word	0x397b839a
34023468:	00000000 	.word	0x00000000
3402346c:	41700000 	.word	0x41700000
34023470:	3fe921fb 	.word	0x3fe921fb
34023474:	4002d97b 	.word	0x4002d97b
34023478:	413921fb 	.word	0x413921fb
3402347c:	341080b8 	.word	0x341080b8
34023480:	7fefffff 	.word	0x7fefffff
34023484:	34108138 	.word	0x34108138

34023488 <fabs>:
34023488:	ec51 0b10 	vmov	r0, r1, d0
3402348c:	4602      	mov	r2, r0
3402348e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
34023492:	ec43 2b10 	vmov	d0, r2, r3
34023496:	4770      	bx	lr

34023498 <__ieee754_atan2f>:
34023498:	ee10 2a90 	vmov	r2, s1
3402349c:	eef0 7a40 	vmov.f32	s15, s0
340234a0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
340234a4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
340234a8:	b510      	push	{r4, lr}
340234aa:	d806      	bhi.n	340234ba <__ieee754_atan2f+0x22>
340234ac:	ee10 0a10 	vmov	r0, s0
340234b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
340234b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
340234b8:	d904      	bls.n	340234c4 <__ieee754_atan2f+0x2c>
340234ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
340234be:	eeb0 0a67 	vmov.f32	s0, s15
340234c2:	bd10      	pop	{r4, pc}
340234c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
340234c8:	d103      	bne.n	340234d2 <__ieee754_atan2f+0x3a>
340234ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
340234ce:	f000 b881 	b.w	340235d4 <atanf>
340234d2:	1794      	asrs	r4, r2, #30
340234d4:	f004 0402 	and.w	r4, r4, #2
340234d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
340234dc:	b93b      	cbnz	r3, 340234ee <__ieee754_atan2f+0x56>
340234de:	2c02      	cmp	r4, #2
340234e0:	d05c      	beq.n	3402359c <__ieee754_atan2f+0x104>
340234e2:	2c03      	cmp	r4, #3
340234e4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 340235b0 <__ieee754_atan2f+0x118>
340234e8:	fe47 7a00 	vseleq.f32	s15, s14, s0
340234ec:	e7e7      	b.n	340234be <__ieee754_atan2f+0x26>
340234ee:	b939      	cbnz	r1, 34023500 <__ieee754_atan2f+0x68>
340234f0:	2800      	cmp	r0, #0
340234f2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 340235b4 <__ieee754_atan2f+0x11c>
340234f6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 340235b8 <__ieee754_atan2f+0x120>
340234fa:	fe67 7a27 	vselge.f32	s15, s14, s15
340234fe:	e7de      	b.n	340234be <__ieee754_atan2f+0x26>
34023500:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
34023504:	d110      	bne.n	34023528 <__ieee754_atan2f+0x90>
34023506:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
3402350a:	f104 34ff 	add.w	r4, r4, #4294967295
3402350e:	d107      	bne.n	34023520 <__ieee754_atan2f+0x88>
34023510:	2c02      	cmp	r4, #2
34023512:	d846      	bhi.n	340235a2 <__ieee754_atan2f+0x10a>
34023514:	4b29      	ldr	r3, [pc, #164]	@ (340235bc <__ieee754_atan2f+0x124>)
34023516:	eb03 0384 	add.w	r3, r3, r4, lsl #2
3402351a:	edd3 7a00 	vldr	s15, [r3]
3402351e:	e7ce      	b.n	340234be <__ieee754_atan2f+0x26>
34023520:	2c02      	cmp	r4, #2
34023522:	d841      	bhi.n	340235a8 <__ieee754_atan2f+0x110>
34023524:	4b26      	ldr	r3, [pc, #152]	@ (340235c0 <__ieee754_atan2f+0x128>)
34023526:	e7f6      	b.n	34023516 <__ieee754_atan2f+0x7e>
34023528:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
3402352c:	d0e0      	beq.n	340234f0 <__ieee754_atan2f+0x58>
3402352e:	1a5b      	subs	r3, r3, r1
34023530:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
34023534:	ea4f 51e3 	mov.w	r1, r3, asr #23
34023538:	da1a      	bge.n	34023570 <__ieee754_atan2f+0xd8>
3402353a:	2a00      	cmp	r2, #0
3402353c:	da01      	bge.n	34023542 <__ieee754_atan2f+0xaa>
3402353e:	313c      	adds	r1, #60	@ 0x3c
34023540:	db19      	blt.n	34023576 <__ieee754_atan2f+0xde>
34023542:	ee87 0aa0 	vdiv.f32	s0, s15, s1
34023546:	f000 f919 	bl	3402377c <fabsf>
3402354a:	f000 f843 	bl	340235d4 <atanf>
3402354e:	eef0 7a40 	vmov.f32	s15, s0
34023552:	2c01      	cmp	r4, #1
34023554:	d012      	beq.n	3402357c <__ieee754_atan2f+0xe4>
34023556:	2c02      	cmp	r4, #2
34023558:	d017      	beq.n	3402358a <__ieee754_atan2f+0xf2>
3402355a:	2c00      	cmp	r4, #0
3402355c:	d0af      	beq.n	340234be <__ieee754_atan2f+0x26>
3402355e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 340235c4 <__ieee754_atan2f+0x12c>
34023562:	ee77 7a87 	vadd.f32	s15, s15, s14
34023566:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 340235c8 <__ieee754_atan2f+0x130>
3402356a:	ee77 7ac7 	vsub.f32	s15, s15, s14
3402356e:	e7a6      	b.n	340234be <__ieee754_atan2f+0x26>
34023570:	eddf 7a11 	vldr	s15, [pc, #68]	@ 340235b8 <__ieee754_atan2f+0x120>
34023574:	e7ed      	b.n	34023552 <__ieee754_atan2f+0xba>
34023576:	eddf 7a15 	vldr	s15, [pc, #84]	@ 340235cc <__ieee754_atan2f+0x134>
3402357a:	e7ea      	b.n	34023552 <__ieee754_atan2f+0xba>
3402357c:	ee17 3a90 	vmov	r3, s15
34023580:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
34023584:	ee07 3a90 	vmov	s15, r3
34023588:	e799      	b.n	340234be <__ieee754_atan2f+0x26>
3402358a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 340235c4 <__ieee754_atan2f+0x12c>
3402358e:	ee77 7a87 	vadd.f32	s15, s15, s14
34023592:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 340235c8 <__ieee754_atan2f+0x130>
34023596:	ee77 7a67 	vsub.f32	s15, s14, s15
3402359a:	e790      	b.n	340234be <__ieee754_atan2f+0x26>
3402359c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 340235c8 <__ieee754_atan2f+0x130>
340235a0:	e78d      	b.n	340234be <__ieee754_atan2f+0x26>
340235a2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 340235d0 <__ieee754_atan2f+0x138>
340235a6:	e78a      	b.n	340234be <__ieee754_atan2f+0x26>
340235a8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 340235cc <__ieee754_atan2f+0x134>
340235ac:	e787      	b.n	340234be <__ieee754_atan2f+0x26>
340235ae:	bf00      	nop
340235b0:	c0490fdb 	.word	0xc0490fdb
340235b4:	bfc90fdb 	.word	0xbfc90fdb
340235b8:	3fc90fdb 	.word	0x3fc90fdb
340235bc:	3410824c 	.word	0x3410824c
340235c0:	34108240 	.word	0x34108240
340235c4:	33bbbd2e 	.word	0x33bbbd2e
340235c8:	40490fdb 	.word	0x40490fdb
340235cc:	00000000 	.word	0x00000000
340235d0:	3f490fdb 	.word	0x3f490fdb

340235d4 <atanf>:
340235d4:	b538      	push	{r3, r4, r5, lr}
340235d6:	ee10 5a10 	vmov	r5, s0
340235da:	eef0 7a40 	vmov.f32	s15, s0
340235de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
340235e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
340235e6:	d30f      	bcc.n	34023608 <atanf+0x34>
340235e8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
340235ec:	d904      	bls.n	340235f8 <atanf+0x24>
340235ee:	ee70 7a00 	vadd.f32	s15, s0, s0
340235f2:	eeb0 0a67 	vmov.f32	s0, s15
340235f6:	bd38      	pop	{r3, r4, r5, pc}
340235f8:	2d00      	cmp	r5, #0
340235fa:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 34023730 <atanf+0x15c>
340235fe:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 34023734 <atanf+0x160>
34023602:	fe77 7a27 	vselgt.f32	s15, s14, s15
34023606:	e7f4      	b.n	340235f2 <atanf+0x1e>
34023608:	4b4b      	ldr	r3, [pc, #300]	@ (34023738 <atanf+0x164>)
3402360a:	429c      	cmp	r4, r3
3402360c:	d810      	bhi.n	34023630 <atanf+0x5c>
3402360e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
34023612:	d20a      	bcs.n	3402362a <atanf+0x56>
34023614:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 3402373c <atanf+0x168>
34023618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
3402361c:	ee30 7a07 	vadd.f32	s14, s0, s14
34023620:	eeb4 7ae6 	vcmpe.f32	s14, s13
34023624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34023628:	dce3      	bgt.n	340235f2 <atanf+0x1e>
3402362a:	f04f 33ff 	mov.w	r3, #4294967295
3402362e:	e013      	b.n	34023658 <atanf+0x84>
34023630:	f000 f8a4 	bl	3402377c <fabsf>
34023634:	4b42      	ldr	r3, [pc, #264]	@ (34023740 <atanf+0x16c>)
34023636:	429c      	cmp	r4, r3
34023638:	d84f      	bhi.n	340236da <atanf+0x106>
3402363a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
3402363e:	429c      	cmp	r4, r3
34023640:	d841      	bhi.n	340236c6 <atanf+0xf2>
34023642:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
34023646:	2300      	movs	r3, #0
34023648:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
3402364c:	eea0 7a27 	vfma.f32	s14, s0, s15
34023650:	ee30 0a27 	vadd.f32	s0, s0, s15
34023654:	eec7 7a00 	vdiv.f32	s15, s14, s0
34023658:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 34023744 <atanf+0x170>
3402365c:	1c5a      	adds	r2, r3, #1
3402365e:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 34023748 <atanf+0x174>
34023662:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 3402374c <atanf+0x178>
34023666:	ee27 6aa7 	vmul.f32	s12, s15, s15
3402366a:	ee66 6a06 	vmul.f32	s13, s12, s12
3402366e:	eee6 5a87 	vfma.f32	s11, s13, s14
34023672:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 34023750 <atanf+0x17c>
34023676:	eea5 7aa6 	vfma.f32	s14, s11, s13
3402367a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 34023754 <atanf+0x180>
3402367e:	eee7 5a26 	vfma.f32	s11, s14, s13
34023682:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 34023758 <atanf+0x184>
34023686:	eea5 7aa6 	vfma.f32	s14, s11, s13
3402368a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 3402375c <atanf+0x188>
3402368e:	eee7 5a26 	vfma.f32	s11, s14, s13
34023692:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 34023760 <atanf+0x18c>
34023696:	eea6 5a87 	vfma.f32	s10, s13, s14
3402369a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 34023764 <atanf+0x190>
3402369e:	eea5 7a26 	vfma.f32	s14, s10, s13
340236a2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 34023768 <atanf+0x194>
340236a6:	eea7 5a26 	vfma.f32	s10, s14, s13
340236aa:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 3402376c <atanf+0x198>
340236ae:	eea5 7a26 	vfma.f32	s14, s10, s13
340236b2:	ee27 7a26 	vmul.f32	s14, s14, s13
340236b6:	eea5 7a86 	vfma.f32	s14, s11, s12
340236ba:	ee27 7a87 	vmul.f32	s14, s15, s14
340236be:	d121      	bne.n	34023704 <atanf+0x130>
340236c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
340236c4:	e795      	b.n	340235f2 <atanf+0x1e>
340236c6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340236ca:	2301      	movs	r3, #1
340236cc:	ee30 7a67 	vsub.f32	s14, s0, s15
340236d0:	ee30 0a27 	vadd.f32	s0, s0, s15
340236d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
340236d8:	e7be      	b.n	34023658 <atanf+0x84>
340236da:	4b25      	ldr	r3, [pc, #148]	@ (34023770 <atanf+0x19c>)
340236dc:	429c      	cmp	r4, r3
340236de:	d80b      	bhi.n	340236f8 <atanf+0x124>
340236e0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
340236e4:	2302      	movs	r3, #2
340236e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
340236ea:	ee70 6a67 	vsub.f32	s13, s0, s15
340236ee:	eea0 7a27 	vfma.f32	s14, s0, s15
340236f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
340236f6:	e7af      	b.n	34023658 <atanf+0x84>
340236f8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
340236fc:	2303      	movs	r3, #3
340236fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
34023702:	e7a9      	b.n	34023658 <atanf+0x84>
34023704:	4a1b      	ldr	r2, [pc, #108]	@ (34023774 <atanf+0x1a0>)
34023706:	2d00      	cmp	r5, #0
34023708:	491b      	ldr	r1, [pc, #108]	@ (34023778 <atanf+0x1a4>)
3402370a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
3402370e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
34023712:	edd3 6a00 	vldr	s13, [r3]
34023716:	ee37 7a66 	vsub.f32	s14, s14, s13
3402371a:	ee37 7a67 	vsub.f32	s14, s14, s15
3402371e:	edd2 7a00 	vldr	s15, [r2]
34023722:	ee77 7ac7 	vsub.f32	s15, s15, s14
34023726:	bfb8      	it	lt
34023728:	eef1 7a67 	vneglt.f32	s15, s15
3402372c:	e761      	b.n	340235f2 <atanf+0x1e>
3402372e:	bf00      	nop
34023730:	bfc90fdb 	.word	0xbfc90fdb
34023734:	3fc90fdb 	.word	0x3fc90fdb
34023738:	3edfffff 	.word	0x3edfffff
3402373c:	7149f2ca 	.word	0x7149f2ca
34023740:	3f97ffff 	.word	0x3f97ffff
34023744:	3c8569d7 	.word	0x3c8569d7
34023748:	3d4bda59 	.word	0x3d4bda59
3402374c:	bd6ef16b 	.word	0xbd6ef16b
34023750:	3d886b35 	.word	0x3d886b35
34023754:	3dba2e6e 	.word	0x3dba2e6e
34023758:	3e124925 	.word	0x3e124925
3402375c:	3eaaaaab 	.word	0x3eaaaaab
34023760:	bd15a221 	.word	0xbd15a221
34023764:	bd9d8795 	.word	0xbd9d8795
34023768:	bde38e38 	.word	0xbde38e38
3402376c:	be4ccccd 	.word	0xbe4ccccd
34023770:	401bffff 	.word	0x401bffff
34023774:	34108268 	.word	0x34108268
34023778:	34108258 	.word	0x34108258

3402377c <fabsf>:
3402377c:	ee10 3a10 	vmov	r3, s0
34023780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34023784:	ee00 3a10 	vmov	s0, r3
34023788:	4770      	bx	lr
3402378a:	0000      	movs	r0, r0
3402378c:	0000      	movs	r0, r0
	...

34023790 <log>:
34023790:	ee10 0a90 	vmov	r0, s1
34023794:	ee10 3a10 	vmov	r3, s0
34023798:	b4f0      	push	{r4, r5, r6, r7}
3402379a:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
3402379e:	f04f 34ff 	mov.w	r4, #4294967295
340237a2:	0c02      	lsrs	r2, r0, #16
340237a4:	429c      	cmp	r4, r3
340237a6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
340237aa:	4c71      	ldr	r4, [pc, #452]	@ (34023970 <log+0x1e0>)
340237ac:	418c      	sbcs	r4, r1
340237ae:	ed2d 8b02 	vpush	{d8}
340237b2:	d35a      	bcc.n	3402386a <log+0xda>
340237b4:	4a6f      	ldr	r2, [pc, #444]	@ (34023974 <log+0x1e4>)
340237b6:	4290      	cmp	r0, r2
340237b8:	bf08      	it	eq
340237ba:	2b00      	cmpeq	r3, #0
340237bc:	f000 80c7 	beq.w	3402394e <log+0x1be>
340237c0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
340237c4:	4b6c      	ldr	r3, [pc, #432]	@ (34023978 <log+0x1e8>)
340237c6:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
340237ca:	ee30 0b47 	vsub.f64	d0, d0, d7
340237ce:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
340237d2:	ee20 2b00 	vmul.f64	d2, d0, d0
340237d6:	eea6 7b00 	vfma.f64	d7, d6, d0
340237da:	ee20 4b02 	vmul.f64	d4, d0, d2
340237de:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
340237e2:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
340237e6:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
340237ea:	eea6 7b02 	vfma.f64	d7, d6, d2
340237ee:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
340237f2:	eea5 6b00 	vfma.f64	d6, d5, d0
340237f6:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
340237fa:	eea5 6b02 	vfma.f64	d6, d5, d2
340237fe:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
34023802:	eea3 5b00 	vfma.f64	d5, d3, d0
34023806:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
3402380a:	eea3 5b02 	vfma.f64	d5, d3, d2
3402380e:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
34023812:	eea3 5b04 	vfma.f64	d5, d3, d4
34023816:	eeb0 3b40 	vmov.f64	d3, d0
3402381a:	eea5 6b04 	vfma.f64	d6, d5, d4
3402381e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
34023822:	eea6 7b04 	vfma.f64	d7, d6, d4
34023826:	eeb0 6b40 	vmov.f64	d6, d0
3402382a:	eeb0 2b47 	vmov.f64	d2, d7
3402382e:	ed9f 7b4a 	vldr	d7, [pc, #296]	@ 34023958 <log+0x1c8>
34023832:	eea0 6b07 	vfma.f64	d6, d0, d7
34023836:	eea0 6b47 	vfms.f64	d6, d0, d7
3402383a:	ee26 1b06 	vmul.f64	d1, d6, d6
3402383e:	ee30 8b46 	vsub.f64	d8, d0, d6
34023842:	eea1 3b05 	vfma.f64	d3, d1, d5
34023846:	ee30 7b43 	vsub.f64	d7, d0, d3
3402384a:	ee30 0b06 	vadd.f64	d0, d0, d6
3402384e:	eea1 7b05 	vfma.f64	d7, d1, d5
34023852:	ee25 5b08 	vmul.f64	d5, d5, d8
34023856:	eea5 7b00 	vfma.f64	d7, d5, d0
3402385a:	eea2 7b04 	vfma.f64	d7, d2, d4
3402385e:	ee33 0b07 	vadd.f64	d0, d3, d7
34023862:	ecbd 8b02 	vpop	{d8}
34023866:	bcf0      	pop	{r4, r5, r6, r7}
34023868:	4770      	bx	lr
3402386a:	f1a2 0410 	sub.w	r4, r2, #16
3402386e:	f647 71df 	movw	r1, #32735	@ 0x7fdf
34023872:	428c      	cmp	r4, r1
34023874:	d923      	bls.n	340238be <log+0x12e>
34023876:	18d9      	adds	r1, r3, r3
34023878:	eb40 0400 	adc.w	r4, r0, r0
3402387c:	4321      	orrs	r1, r4
3402387e:	d105      	bne.n	3402388c <log+0xfc>
34023880:	2001      	movs	r0, #1
34023882:	ecbd 8b02 	vpop	{d8}
34023886:	bcf0      	pop	{r4, r5, r6, r7}
34023888:	f7fe bf92 	b.w	340227b0 <__math_divzero>
3402388c:	493b      	ldr	r1, [pc, #236]	@ (3402397c <log+0x1ec>)
3402388e:	4288      	cmp	r0, r1
34023890:	bf08      	it	eq
34023892:	2b00      	cmpeq	r3, #0
34023894:	d0e5      	beq.n	34023862 <log+0xd2>
34023896:	0413      	lsls	r3, r2, #16
34023898:	d403      	bmi.n	340238a2 <log+0x112>
3402389a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
3402389e:	4393      	bics	r3, r2
340238a0:	d104      	bne.n	340238ac <log+0x11c>
340238a2:	ecbd 8b02 	vpop	{d8}
340238a6:	bcf0      	pop	{r4, r5, r6, r7}
340238a8:	f7fe bf9e 	b.w	340227e8 <__math_invalid>
340238ac:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 34023960 <log+0x1d0>
340238b0:	ee20 7b07 	vmul.f64	d7, d0, d7
340238b4:	ec53 2b17 	vmov	r2, r3, d7
340238b8:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
340238bc:	4613      	mov	r3, r2
340238be:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
340238c2:	492d      	ldr	r1, [pc, #180]	@ (34023978 <log+0x1e8>)
340238c4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
340238c8:	1e1e      	subs	r6, r3, #0
340238ca:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
340238ce:	f3c2 3446 	ubfx	r4, r2, #13, #7
340238d2:	ea4f 5c12 	mov.w	ip, r2, lsr #20
340238d6:	1512      	asrs	r2, r2, #20
340238d8:	eb01 1504 	add.w	r5, r1, r4, lsl #4
340238dc:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
340238e0:	ed95 7b24 	vldr	d7, [r5, #144]	@ 0x90
340238e4:	eba0 070c 	sub.w	r7, r0, ip
340238e8:	ec47 6b16 	vmov	d6, r6, r7
340238ec:	eea7 5b06 	vfma.f64	d5, d7, d6
340238f0:	ee07 2a90 	vmov	s15, r2
340238f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
340238f8:	ed91 4b00 	vldr	d4, [r1]
340238fc:	ed95 7b26 	vldr	d7, [r5, #152]	@ 0x98
34023900:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
34023904:	eea4 7b06 	vfma.f64	d7, d4, d6
34023908:	ee25 2b05 	vmul.f64	d2, d5, d5
3402390c:	ee35 4b07 	vadd.f64	d4, d5, d7
34023910:	ee25 1b02 	vmul.f64	d1, d5, d2
34023914:	ee37 0b44 	vsub.f64	d0, d7, d4
34023918:	ed91 7b02 	vldr	d7, [r1, #8]
3402391c:	ee30 0b05 	vadd.f64	d0, d0, d5
34023920:	eea7 0b06 	vfma.f64	d0, d7, d6
34023924:	ed91 7b04 	vldr	d7, [r1, #16]
34023928:	ed91 6b08 	vldr	d6, [r1, #32]
3402392c:	eea7 0b02 	vfma.f64	d0, d7, d2
34023930:	ed91 7b06 	vldr	d7, [r1, #24]
34023934:	eea6 7b05 	vfma.f64	d7, d6, d5
34023938:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
3402393c:	eea3 6b05 	vfma.f64	d6, d3, d5
34023940:	eea6 7b02 	vfma.f64	d7, d6, d2
34023944:	eea1 0b07 	vfma.f64	d0, d1, d7
34023948:	ee30 0b04 	vadd.f64	d0, d0, d4
3402394c:	e789      	b.n	34023862 <log+0xd2>
3402394e:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 34023968 <log+0x1d8>
34023952:	e786      	b.n	34023862 <log+0xd2>
34023954:	f3af 8000 	nop.w
34023958:	00000000 	.word	0x00000000
3402395c:	41a00000 	.word	0x41a00000
34023960:	00000000 	.word	0x00000000
34023964:	43300000 	.word	0x43300000
	...
34023970:	000308ff 	.word	0x000308ff
34023974:	3ff00000 	.word	0x3ff00000
34023978:	34108278 	.word	0x34108278
3402397c:	7ff00000 	.word	0x7ff00000

34023980 <__kernel_rem_pio2>:
34023980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34023984:	ed2d 8b06 	vpush	{d8-d10}
34023988:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
3402398c:	f112 0f14 	cmn.w	r2, #20
34023990:	469b      	mov	fp, r3
34023992:	460f      	mov	r7, r1
34023994:	4bb8      	ldr	r3, [pc, #736]	@ (34023c78 <__kernel_rem_pio2+0x2f8>)
34023996:	f06f 0517 	mvn.w	r5, #23
3402399a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
3402399c:	f10b 3aff 	add.w	sl, fp, #4294967295
340239a0:	9001      	str	r0, [sp, #4]
340239a2:	bfa8      	it	ge
340239a4:	2018      	movge	r0, #24
340239a6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
340239aa:	bfac      	ite	ge
340239ac:	1ed3      	subge	r3, r2, #3
340239ae:	2300      	movlt	r3, #0
340239b0:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
340239b2:	eb09 0c0a 	add.w	ip, r9, sl
340239b6:	bfa8      	it	ge
340239b8:	fb93 f3f0 	sdivge	r3, r3, r0
340239bc:	fb03 5505 	mla	r5, r3, r5, r5
340239c0:	eba3 040a 	sub.w	r4, r3, sl
340239c4:	a81a      	add	r0, sp, #104	@ 0x68
340239c6:	4415      	add	r5, r2
340239c8:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
340239cc:	2200      	movs	r2, #0
340239ce:	ed9f 6ba4 	vldr	d6, [pc, #656]	@ 34023c60 <__kernel_rem_pio2+0x2e0>
340239d2:	4562      	cmp	r2, ip
340239d4:	dd0e      	ble.n	340239f4 <__kernel_rem_pio2+0x74>
340239d6:	aa1a      	add	r2, sp, #104	@ 0x68
340239d8:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
340239dc:	2400      	movs	r4, #0
340239de:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
340239e2:	454c      	cmp	r4, r9
340239e4:	dc23      	bgt.n	34023a2e <__kernel_rem_pio2+0xae>
340239e6:	f8dd e004 	ldr.w	lr, [sp, #4]
340239ea:	4694      	mov	ip, r2
340239ec:	2000      	movs	r0, #0
340239ee:	ed9f 7b9c 	vldr	d7, [pc, #624]	@ 34023c60 <__kernel_rem_pio2+0x2e0>
340239f2:	e015      	b.n	34023a20 <__kernel_rem_pio2+0xa0>
340239f4:	42d4      	cmn	r4, r2
340239f6:	d409      	bmi.n	34023a0c <__kernel_rem_pio2+0x8c>
340239f8:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
340239fc:	ee07 1a90 	vmov	s15, r1
34023a00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34023a04:	3201      	adds	r2, #1
34023a06:	eca0 7b02 	vstmia	r0!, {d7}
34023a0a:	e7e2      	b.n	340239d2 <__kernel_rem_pio2+0x52>
34023a0c:	eeb0 7b46 	vmov.f64	d7, d6
34023a10:	e7f8      	b.n	34023a04 <__kernel_rem_pio2+0x84>
34023a12:	ecbe 5b02 	vldmia	lr!, {d5}
34023a16:	ed3c 6b02 	vldmdb	ip!, {d6}
34023a1a:	3001      	adds	r0, #1
34023a1c:	eea5 7b06 	vfma.f64	d7, d5, d6
34023a20:	4550      	cmp	r0, sl
34023a22:	ddf6      	ble.n	34023a12 <__kernel_rem_pio2+0x92>
34023a24:	3401      	adds	r4, #1
34023a26:	3208      	adds	r2, #8
34023a28:	eca8 7b02 	vstmia	r8!, {d7}
34023a2c:	e7d9      	b.n	340239e2 <__kernel_rem_pio2+0x62>
34023a2e:	aa06      	add	r2, sp, #24
34023a30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
34023a34:	464c      	mov	r4, r9
34023a36:	eb02 0289 	add.w	r2, r2, r9, lsl #2
34023a3a:	9302      	str	r3, [sp, #8]
34023a3c:	ed9f 9b8a 	vldr	d9, [pc, #552]	@ 34023c68 <__kernel_rem_pio2+0x2e8>
34023a40:	ed9f ab8b 	vldr	d10, [pc, #556]	@ 34023c70 <__kernel_rem_pio2+0x2f0>
34023a44:	9203      	str	r2, [sp, #12]
34023a46:	00e3      	lsls	r3, r4, #3
34023a48:	aa6a      	add	r2, sp, #424	@ 0x1a8
34023a4a:	4620      	mov	r0, r4
34023a4c:	9304      	str	r3, [sp, #16]
34023a4e:	ab92      	add	r3, sp, #584	@ 0x248
34023a50:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
34023a54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
34023a58:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
34023a5c:	ab06      	add	r3, sp, #24
34023a5e:	461e      	mov	r6, r3
34023a60:	2800      	cmp	r0, #0
34023a62:	dc4a      	bgt.n	34023afa <__kernel_rem_pio2+0x17a>
34023a64:	4628      	mov	r0, r5
34023a66:	9305      	str	r3, [sp, #20]
34023a68:	f000 f9fe 	bl	34023e68 <scalbn>
34023a6c:	eeb0 8b40 	vmov.f64	d8, d0
34023a70:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
34023a74:	ee28 0b00 	vmul.f64	d0, d8, d0
34023a78:	f000 fa70 	bl	34023f5c <floor>
34023a7c:	2d00      	cmp	r5, #0
34023a7e:	9b05      	ldr	r3, [sp, #20]
34023a80:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
34023a84:	eea0 8b47 	vfms.f64	d8, d0, d7
34023a88:	eefd 7bc8 	vcvt.s32.f64	s15, d8
34023a8c:	ee17 8a90 	vmov	r8, s15
34023a90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34023a94:	ee38 8b47 	vsub.f64	d8, d8, d7
34023a98:	dd41      	ble.n	34023b1e <__kernel_rem_pio2+0x19e>
34023a9a:	1e60      	subs	r0, r4, #1
34023a9c:	aa06      	add	r2, sp, #24
34023a9e:	f1c5 0c18 	rsb	ip, r5, #24
34023aa2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
34023aa6:	fa46 f20c 	asr.w	r2, r6, ip
34023aaa:	4490      	add	r8, r2
34023aac:	fa02 f20c 	lsl.w	r2, r2, ip
34023ab0:	1ab6      	subs	r6, r6, r2
34023ab2:	aa06      	add	r2, sp, #24
34023ab4:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
34023ab8:	f1c5 0217 	rsb	r2, r5, #23
34023abc:	4116      	asrs	r6, r2
34023abe:	2e00      	cmp	r6, #0
34023ac0:	dd3c      	ble.n	34023b3c <__kernel_rem_pio2+0x1bc>
34023ac2:	f04f 0c00 	mov.w	ip, #0
34023ac6:	f108 0801 	add.w	r8, r8, #1
34023aca:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
34023ace:	4660      	mov	r0, ip
34023ad0:	4564      	cmp	r4, ip
34023ad2:	dc66      	bgt.n	34023ba2 <__kernel_rem_pio2+0x222>
34023ad4:	2d00      	cmp	r5, #0
34023ad6:	dd03      	ble.n	34023ae0 <__kernel_rem_pio2+0x160>
34023ad8:	2d01      	cmp	r5, #1
34023ada:	d072      	beq.n	34023bc2 <__kernel_rem_pio2+0x242>
34023adc:	2d02      	cmp	r5, #2
34023ade:	d07a      	beq.n	34023bd6 <__kernel_rem_pio2+0x256>
34023ae0:	2e02      	cmp	r6, #2
34023ae2:	d12b      	bne.n	34023b3c <__kernel_rem_pio2+0x1bc>
34023ae4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34023ae8:	ee30 8b48 	vsub.f64	d8, d0, d8
34023aec:	b330      	cbz	r0, 34023b3c <__kernel_rem_pio2+0x1bc>
34023aee:	4628      	mov	r0, r5
34023af0:	f000 f9ba 	bl	34023e68 <scalbn>
34023af4:	ee38 8b40 	vsub.f64	d8, d8, d0
34023af8:	e020      	b.n	34023b3c <__kernel_rem_pio2+0x1bc>
34023afa:	ee20 7b09 	vmul.f64	d7, d0, d9
34023afe:	3801      	subs	r0, #1
34023b00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
34023b04:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
34023b08:	eea7 0b4a 	vfms.f64	d0, d7, d10
34023b0c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34023b10:	eca6 0a01 	vstmia	r6!, {s0}
34023b14:	ed32 0b02 	vldmdb	r2!, {d0}
34023b18:	ee37 0b00 	vadd.f64	d0, d7, d0
34023b1c:	e7a0      	b.n	34023a60 <__kernel_rem_pio2+0xe0>
34023b1e:	d105      	bne.n	34023b2c <__kernel_rem_pio2+0x1ac>
34023b20:	1e62      	subs	r2, r4, #1
34023b22:	a906      	add	r1, sp, #24
34023b24:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
34023b28:	15f6      	asrs	r6, r6, #23
34023b2a:	e7c8      	b.n	34023abe <__kernel_rem_pio2+0x13e>
34023b2c:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
34023b30:	eeb4 8bc7 	vcmpe.f64	d8, d7
34023b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34023b38:	da31      	bge.n	34023b9e <__kernel_rem_pio2+0x21e>
34023b3a:	2600      	movs	r6, #0
34023b3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
34023b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34023b44:	f040 809c 	bne.w	34023c80 <__kernel_rem_pio2+0x300>
34023b48:	1e62      	subs	r2, r4, #1
34023b4a:	2000      	movs	r0, #0
34023b4c:	454a      	cmp	r2, r9
34023b4e:	da49      	bge.n	34023be4 <__kernel_rem_pio2+0x264>
34023b50:	2800      	cmp	r0, #0
34023b52:	d062      	beq.n	34023c1a <__kernel_rem_pio2+0x29a>
34023b54:	3c01      	subs	r4, #1
34023b56:	ab06      	add	r3, sp, #24
34023b58:	3d18      	subs	r5, #24
34023b5a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
34023b5e:	2b00      	cmp	r3, #0
34023b60:	d0f8      	beq.n	34023b54 <__kernel_rem_pio2+0x1d4>
34023b62:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34023b66:	4628      	mov	r0, r5
34023b68:	f000 f97e 	bl	34023e68 <scalbn>
34023b6c:	1c62      	adds	r2, r4, #1
34023b6e:	a96a      	add	r1, sp, #424	@ 0x1a8
34023b70:	00d3      	lsls	r3, r2, #3
34023b72:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
34023b76:	4622      	mov	r2, r4
34023b78:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 34023c68 <__kernel_rem_pio2+0x2e8>
34023b7c:	2a00      	cmp	r2, #0
34023b7e:	f280 80a9 	bge.w	34023cd4 <__kernel_rem_pio2+0x354>
34023b82:	4622      	mov	r2, r4
34023b84:	2a00      	cmp	r2, #0
34023b86:	f2c0 80c7 	blt.w	34023d18 <__kernel_rem_pio2+0x398>
34023b8a:	a96a      	add	r1, sp, #424	@ 0x1a8
34023b8c:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 34023c7c <__kernel_rem_pio2+0x2fc>
34023b90:	2000      	movs	r0, #0
34023b92:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
34023b96:	1aa1      	subs	r1, r4, r2
34023b98:	ed9f 7b31 	vldr	d7, [pc, #196]	@ 34023c60 <__kernel_rem_pio2+0x2e0>
34023b9c:	e0b1      	b.n	34023d02 <__kernel_rem_pio2+0x382>
34023b9e:	2602      	movs	r6, #2
34023ba0:	e78f      	b.n	34023ac2 <__kernel_rem_pio2+0x142>
34023ba2:	f853 2b04 	ldr.w	r2, [r3], #4
34023ba6:	b948      	cbnz	r0, 34023bbc <__kernel_rem_pio2+0x23c>
34023ba8:	b122      	cbz	r2, 34023bb4 <__kernel_rem_pio2+0x234>
34023baa:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
34023bae:	f843 2c04 	str.w	r2, [r3, #-4]
34023bb2:	2201      	movs	r2, #1
34023bb4:	f10c 0c01 	add.w	ip, ip, #1
34023bb8:	4610      	mov	r0, r2
34023bba:	e789      	b.n	34023ad0 <__kernel_rem_pio2+0x150>
34023bbc:	ebae 0202 	sub.w	r2, lr, r2
34023bc0:	e7f5      	b.n	34023bae <__kernel_rem_pio2+0x22e>
34023bc2:	1e62      	subs	r2, r4, #1
34023bc4:	ab06      	add	r3, sp, #24
34023bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34023bca:	f3c3 0316 	ubfx	r3, r3, #0, #23
34023bce:	a906      	add	r1, sp, #24
34023bd0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
34023bd4:	e784      	b.n	34023ae0 <__kernel_rem_pio2+0x160>
34023bd6:	1e62      	subs	r2, r4, #1
34023bd8:	ab06      	add	r3, sp, #24
34023bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34023bde:	f3c3 0315 	ubfx	r3, r3, #0, #22
34023be2:	e7f4      	b.n	34023bce <__kernel_rem_pio2+0x24e>
34023be4:	ab06      	add	r3, sp, #24
34023be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34023bea:	3a01      	subs	r2, #1
34023bec:	4318      	orrs	r0, r3
34023bee:	e7ad      	b.n	34023b4c <__kernel_rem_pio2+0x1cc>
34023bf0:	3301      	adds	r3, #1
34023bf2:	f852 0d04 	ldr.w	r0, [r2, #-4]!
34023bf6:	2800      	cmp	r0, #0
34023bf8:	d0fa      	beq.n	34023bf0 <__kernel_rem_pio2+0x270>
34023bfa:	9a04      	ldr	r2, [sp, #16]
34023bfc:	eb04 000b 	add.w	r0, r4, fp
34023c00:	a91a      	add	r1, sp, #104	@ 0x68
34023c02:	1c66      	adds	r6, r4, #1
34023c04:	f502 7212 	add.w	r2, r2, #584	@ 0x248
34023c08:	4423      	add	r3, r4
34023c0a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
34023c0e:	446a      	add	r2, sp
34023c10:	3a98      	subs	r2, #152	@ 0x98
34023c12:	42b3      	cmp	r3, r6
34023c14:	da04      	bge.n	34023c20 <__kernel_rem_pio2+0x2a0>
34023c16:	461c      	mov	r4, r3
34023c18:	e715      	b.n	34023a46 <__kernel_rem_pio2+0xc6>
34023c1a:	9a03      	ldr	r2, [sp, #12]
34023c1c:	2301      	movs	r3, #1
34023c1e:	e7e8      	b.n	34023bf2 <__kernel_rem_pio2+0x272>
34023c20:	9902      	ldr	r1, [sp, #8]
34023c22:	2400      	movs	r4, #0
34023c24:	f8dd c004 	ldr.w	ip, [sp, #4]
34023c28:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
34023c2c:	ee07 1a90 	vmov	s15, r1
34023c30:	9104      	str	r1, [sp, #16]
34023c32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34023c36:	eca0 7b02 	vstmia	r0!, {d7}
34023c3a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 34023c60 <__kernel_rem_pio2+0x2e0>
34023c3e:	4686      	mov	lr, r0
34023c40:	4554      	cmp	r4, sl
34023c42:	dd03      	ble.n	34023c4c <__kernel_rem_pio2+0x2cc>
34023c44:	3601      	adds	r6, #1
34023c46:	eca2 7b02 	vstmia	r2!, {d7}
34023c4a:	e7e2      	b.n	34023c12 <__kernel_rem_pio2+0x292>
34023c4c:	ecbc 5b02 	vldmia	ip!, {d5}
34023c50:	ed3e 6b02 	vldmdb	lr!, {d6}
34023c54:	3401      	adds	r4, #1
34023c56:	eea5 7b06 	vfma.f64	d7, d5, d6
34023c5a:	e7f1      	b.n	34023c40 <__kernel_rem_pio2+0x2c0>
34023c5c:	f3af 8000 	nop.w
	...
34023c6c:	3e700000 	.word	0x3e700000
34023c70:	00000000 	.word	0x00000000
34023c74:	41700000 	.word	0x41700000
34023c78:	34108b48 	.word	0x34108b48
34023c7c:	34108b08 	.word	0x34108b08
34023c80:	eeb0 0b48 	vmov.f64	d0, d8
34023c84:	4268      	negs	r0, r5
34023c86:	f000 f8ef 	bl	34023e68 <scalbn>
34023c8a:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 34023e50 <__kernel_rem_pio2+0x4d0>
34023c8e:	eeb4 0bc6 	vcmpe.f64	d0, d6
34023c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34023c96:	db17      	blt.n	34023cc8 <__kernel_rem_pio2+0x348>
34023c98:	aa06      	add	r2, sp, #24
34023c9a:	3518      	adds	r5, #24
34023c9c:	ed9f 7b6e 	vldr	d7, [pc, #440]	@ 34023e58 <__kernel_rem_pio2+0x4d8>
34023ca0:	ee20 7b07 	vmul.f64	d7, d0, d7
34023ca4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
34023ca8:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
34023cac:	eea5 0b46 	vfms.f64	d0, d5, d6
34023cb0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34023cb4:	ee10 3a10 	vmov	r3, s0
34023cb8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
34023cbc:	3401      	adds	r4, #1
34023cbe:	ee17 3a10 	vmov	r3, s14
34023cc2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
34023cc6:	e74c      	b.n	34023b62 <__kernel_rem_pio2+0x1e2>
34023cc8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
34023ccc:	aa06      	add	r2, sp, #24
34023cce:	ee10 3a10 	vmov	r3, s0
34023cd2:	e7f6      	b.n	34023cc2 <__kernel_rem_pio2+0x342>
34023cd4:	a806      	add	r0, sp, #24
34023cd6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
34023cda:	3a01      	subs	r2, #1
34023cdc:	ee07 0a90 	vmov	s15, r0
34023ce0:	9001      	str	r0, [sp, #4]
34023ce2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34023ce6:	ee27 7b00 	vmul.f64	d7, d7, d0
34023cea:	ee20 0b06 	vmul.f64	d0, d0, d6
34023cee:	ed21 7b02 	vstmdb	r1!, {d7}
34023cf2:	e743      	b.n	34023b7c <__kernel_rem_pio2+0x1fc>
34023cf4:	ecbc 5b02 	vldmia	ip!, {d5}
34023cf8:	ecb5 6b02 	vldmia	r5!, {d6}
34023cfc:	3001      	adds	r0, #1
34023cfe:	eea5 7b06 	vfma.f64	d7, d5, d6
34023d02:	4548      	cmp	r0, r9
34023d04:	dc01      	bgt.n	34023d0a <__kernel_rem_pio2+0x38a>
34023d06:	4288      	cmp	r0, r1
34023d08:	ddf4      	ble.n	34023cf4 <__kernel_rem_pio2+0x374>
34023d0a:	a842      	add	r0, sp, #264	@ 0x108
34023d0c:	3a01      	subs	r2, #1
34023d0e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
34023d12:	ed81 7b00 	vstr	d7, [r1]
34023d16:	e735      	b.n	34023b84 <__kernel_rem_pio2+0x204>
34023d18:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
34023d1a:	2a02      	cmp	r2, #2
34023d1c:	dc0a      	bgt.n	34023d34 <__kernel_rem_pio2+0x3b4>
34023d1e:	2a00      	cmp	r2, #0
34023d20:	dc29      	bgt.n	34023d76 <__kernel_rem_pio2+0x3f6>
34023d22:	d042      	beq.n	34023daa <__kernel_rem_pio2+0x42a>
34023d24:	f008 0007 	and.w	r0, r8, #7
34023d28:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
34023d2c:	ecbd 8b06 	vpop	{d8-d10}
34023d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34023d34:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
34023d36:	2a03      	cmp	r2, #3
34023d38:	d1f4      	bne.n	34023d24 <__kernel_rem_pio2+0x3a4>
34023d3a:	a942      	add	r1, sp, #264	@ 0x108
34023d3c:	f1a3 0208 	sub.w	r2, r3, #8
34023d40:	4620      	mov	r0, r4
34023d42:	440a      	add	r2, r1
34023d44:	4611      	mov	r1, r2
34023d46:	2800      	cmp	r0, #0
34023d48:	dc50      	bgt.n	34023dec <__kernel_rem_pio2+0x46c>
34023d4a:	4621      	mov	r1, r4
34023d4c:	2901      	cmp	r1, #1
34023d4e:	dc5d      	bgt.n	34023e0c <__kernel_rem_pio2+0x48c>
34023d50:	aa42      	add	r2, sp, #264	@ 0x108
34023d52:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 34023e60 <__kernel_rem_pio2+0x4e0>
34023d56:	4413      	add	r3, r2
34023d58:	2c01      	cmp	r4, #1
34023d5a:	dc67      	bgt.n	34023e2c <__kernel_rem_pio2+0x4ac>
34023d5c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
34023d60:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
34023d64:	2e00      	cmp	r6, #0
34023d66:	d167      	bne.n	34023e38 <__kernel_rem_pio2+0x4b8>
34023d68:	ed87 5b00 	vstr	d5, [r7]
34023d6c:	ed87 6b02 	vstr	d6, [r7, #8]
34023d70:	ed87 7b04 	vstr	d7, [r7, #16]
34023d74:	e7d6      	b.n	34023d24 <__kernel_rem_pio2+0x3a4>
34023d76:	aa42      	add	r2, sp, #264	@ 0x108
34023d78:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 34023e60 <__kernel_rem_pio2+0x4e0>
34023d7c:	4413      	add	r3, r2
34023d7e:	4622      	mov	r2, r4
34023d80:	2a00      	cmp	r2, #0
34023d82:	da24      	bge.n	34023dce <__kernel_rem_pio2+0x44e>
34023d84:	b34e      	cbz	r6, 34023dda <__kernel_rem_pio2+0x45a>
34023d86:	eeb1 7b46 	vneg.f64	d7, d6
34023d8a:	aa44      	add	r2, sp, #272	@ 0x110
34023d8c:	2301      	movs	r3, #1
34023d8e:	ed87 7b00 	vstr	d7, [r7]
34023d92:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
34023d96:	ee37 7b46 	vsub.f64	d7, d7, d6
34023d9a:	429c      	cmp	r4, r3
34023d9c:	da20      	bge.n	34023de0 <__kernel_rem_pio2+0x460>
34023d9e:	b10e      	cbz	r6, 34023da4 <__kernel_rem_pio2+0x424>
34023da0:	eeb1 7b47 	vneg.f64	d7, d7
34023da4:	ed87 7b02 	vstr	d7, [r7, #8]
34023da8:	e7bc      	b.n	34023d24 <__kernel_rem_pio2+0x3a4>
34023daa:	aa42      	add	r2, sp, #264	@ 0x108
34023dac:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 34023e60 <__kernel_rem_pio2+0x4e0>
34023db0:	4413      	add	r3, r2
34023db2:	2c00      	cmp	r4, #0
34023db4:	da05      	bge.n	34023dc2 <__kernel_rem_pio2+0x442>
34023db6:	b10e      	cbz	r6, 34023dbc <__kernel_rem_pio2+0x43c>
34023db8:	eeb1 7b47 	vneg.f64	d7, d7
34023dbc:	ed87 7b00 	vstr	d7, [r7]
34023dc0:	e7b0      	b.n	34023d24 <__kernel_rem_pio2+0x3a4>
34023dc2:	ed33 6b02 	vldmdb	r3!, {d6}
34023dc6:	3c01      	subs	r4, #1
34023dc8:	ee37 7b06 	vadd.f64	d7, d7, d6
34023dcc:	e7f1      	b.n	34023db2 <__kernel_rem_pio2+0x432>
34023dce:	ed33 7b02 	vldmdb	r3!, {d7}
34023dd2:	3a01      	subs	r2, #1
34023dd4:	ee36 6b07 	vadd.f64	d6, d6, d7
34023dd8:	e7d2      	b.n	34023d80 <__kernel_rem_pio2+0x400>
34023dda:	eeb0 7b46 	vmov.f64	d7, d6
34023dde:	e7d4      	b.n	34023d8a <__kernel_rem_pio2+0x40a>
34023de0:	ecb2 6b02 	vldmia	r2!, {d6}
34023de4:	3301      	adds	r3, #1
34023de6:	ee37 7b06 	vadd.f64	d7, d7, d6
34023dea:	e7d6      	b.n	34023d9a <__kernel_rem_pio2+0x41a>
34023dec:	ed31 7b02 	vldmdb	r1!, {d7}
34023df0:	3801      	subs	r0, #1
34023df2:	ed91 5b02 	vldr	d5, [r1, #8]
34023df6:	ee37 6b05 	vadd.f64	d6, d7, d5
34023dfa:	ee37 7b46 	vsub.f64	d7, d7, d6
34023dfe:	ed81 6b00 	vstr	d6, [r1]
34023e02:	ee37 7b05 	vadd.f64	d7, d7, d5
34023e06:	ed81 7b02 	vstr	d7, [r1, #8]
34023e0a:	e79c      	b.n	34023d46 <__kernel_rem_pio2+0x3c6>
34023e0c:	ed32 7b02 	vldmdb	r2!, {d7}
34023e10:	3901      	subs	r1, #1
34023e12:	ed92 5b02 	vldr	d5, [r2, #8]
34023e16:	ee37 6b05 	vadd.f64	d6, d7, d5
34023e1a:	ee37 7b46 	vsub.f64	d7, d7, d6
34023e1e:	ed82 6b00 	vstr	d6, [r2]
34023e22:	ee37 7b05 	vadd.f64	d7, d7, d5
34023e26:	ed82 7b02 	vstr	d7, [r2, #8]
34023e2a:	e78f      	b.n	34023d4c <__kernel_rem_pio2+0x3cc>
34023e2c:	ed33 6b02 	vldmdb	r3!, {d6}
34023e30:	3c01      	subs	r4, #1
34023e32:	ee37 7b06 	vadd.f64	d7, d7, d6
34023e36:	e78f      	b.n	34023d58 <__kernel_rem_pio2+0x3d8>
34023e38:	eeb1 5b45 	vneg.f64	d5, d5
34023e3c:	eeb1 6b46 	vneg.f64	d6, d6
34023e40:	eeb1 7b47 	vneg.f64	d7, d7
34023e44:	ed87 5b00 	vstr	d5, [r7]
34023e48:	ed87 6b02 	vstr	d6, [r7, #8]
34023e4c:	e790      	b.n	34023d70 <__kernel_rem_pio2+0x3f0>
34023e4e:	bf00      	nop
34023e50:	00000000 	.word	0x00000000
34023e54:	41700000 	.word	0x41700000
34023e58:	00000000 	.word	0x00000000
34023e5c:	3e700000 	.word	0x3e700000
	...

34023e68 <scalbn>:
34023e68:	ee10 1a90 	vmov	r1, s1
34023e6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
34023e70:	b98b      	cbnz	r3, 34023e96 <scalbn+0x2e>
34023e72:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34023e76:	ee10 3a10 	vmov	r3, s0
34023e7a:	4319      	orrs	r1, r3
34023e7c:	d00a      	beq.n	34023e94 <scalbn+0x2c>
34023e7e:	4b36      	ldr	r3, [pc, #216]	@ (34023f58 <scalbn+0xf0>)
34023e80:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 34023f28 <scalbn+0xc0>
34023e84:	4298      	cmp	r0, r3
34023e86:	ee20 0b07 	vmul.f64	d0, d0, d7
34023e8a:	da0b      	bge.n	34023ea4 <scalbn+0x3c>
34023e8c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 34023f30 <scalbn+0xc8>
34023e90:	ee20 0b07 	vmul.f64	d0, d0, d7
34023e94:	4770      	bx	lr
34023e96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
34023e9a:	4293      	cmp	r3, r2
34023e9c:	d107      	bne.n	34023eae <scalbn+0x46>
34023e9e:	ee30 0b00 	vadd.f64	d0, d0, d0
34023ea2:	4770      	bx	lr
34023ea4:	ee10 1a90 	vmov	r1, s1
34023ea8:	f3c1 530a 	ubfx	r3, r1, #20, #11
34023eac:	3b36      	subs	r3, #54	@ 0x36
34023eae:	f24c 3250 	movw	r2, #50000	@ 0xc350
34023eb2:	4290      	cmp	r0, r2
34023eb4:	dd0d      	ble.n	34023ed2 <scalbn+0x6a>
34023eb6:	ee10 3a90 	vmov	r3, s1
34023eba:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 34023f38 <scalbn+0xd0>
34023ebe:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 34023f40 <scalbn+0xd8>
34023ec2:	2b00      	cmp	r3, #0
34023ec4:	eeb0 6b47 	vmov.f64	d6, d7
34023ec8:	fe27 7b05 	vselge.f64	d7, d7, d5
34023ecc:	ee27 0b06 	vmul.f64	d0, d7, d6
34023ed0:	4770      	bx	lr
34023ed2:	4418      	add	r0, r3
34023ed4:	f240 73fe 	movw	r3, #2046	@ 0x7fe
34023ed8:	4298      	cmp	r0, r3
34023eda:	dcec      	bgt.n	34023eb6 <scalbn+0x4e>
34023edc:	2800      	cmp	r0, #0
34023ede:	dd08      	ble.n	34023ef2 <scalbn+0x8a>
34023ee0:	f36f 511e 	bfc	r1, #20, #11
34023ee4:	ec53 2b10 	vmov	r2, r3, d0
34023ee8:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
34023eec:	ec43 2b10 	vmov	d0, r2, r3
34023ef0:	4770      	bx	lr
34023ef2:	f110 0f35 	cmn.w	r0, #53	@ 0x35
34023ef6:	da09      	bge.n	34023f0c <scalbn+0xa4>
34023ef8:	ee10 3a90 	vmov	r3, s1
34023efc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 34023f30 <scalbn+0xc8>
34023f00:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 34023f48 <scalbn+0xe0>
34023f04:	2b00      	cmp	r3, #0
34023f06:	eeb0 6b47 	vmov.f64	d6, d7
34023f0a:	e7dd      	b.n	34023ec8 <scalbn+0x60>
34023f0c:	3036      	adds	r0, #54	@ 0x36
34023f0e:	f36f 511e 	bfc	r1, #20, #11
34023f12:	ec53 2b10 	vmov	r2, r3, d0
34023f16:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
34023f1a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 34023f50 <scalbn+0xe8>
34023f1e:	ec43 2b10 	vmov	d0, r2, r3
34023f22:	e7b5      	b.n	34023e90 <scalbn+0x28>
34023f24:	f3af 8000 	nop.w
34023f28:	00000000 	.word	0x00000000
34023f2c:	43500000 	.word	0x43500000
34023f30:	c2f8f359 	.word	0xc2f8f359
34023f34:	01a56e1f 	.word	0x01a56e1f
34023f38:	8800759c 	.word	0x8800759c
34023f3c:	7e37e43c 	.word	0x7e37e43c
34023f40:	8800759c 	.word	0x8800759c
34023f44:	fe37e43c 	.word	0xfe37e43c
34023f48:	c2f8f359 	.word	0xc2f8f359
34023f4c:	81a56e1f 	.word	0x81a56e1f
34023f50:	00000000 	.word	0x00000000
34023f54:	3c900000 	.word	0x3c900000
34023f58:	ffff3cb0 	.word	0xffff3cb0

34023f5c <floor>:
34023f5c:	febb 0b40 	vrintm.f64	d0, d0
34023f60:	4770      	bx	lr
	...

34023f64 <_sbrk>:
34023f64:	4a04      	ldr	r2, [pc, #16]	@ (34023f78 <_sbrk+0x14>)
34023f66:	4603      	mov	r3, r0
34023f68:	6811      	ldr	r1, [r2, #0]
34023f6a:	b909      	cbnz	r1, 34023f70 <_sbrk+0xc>
34023f6c:	4903      	ldr	r1, [pc, #12]	@ (34023f7c <_sbrk+0x18>)
34023f6e:	6011      	str	r1, [r2, #0]
34023f70:	6810      	ldr	r0, [r2, #0]
34023f72:	4403      	add	r3, r0
34023f74:	6013      	str	r3, [r2, #0]
34023f76:	4770      	bx	lr
34023f78:	341fa754 	.word	0x341fa754
34023f7c:	341fa758 	.word	0x341fa758

34023f80 <node_convert>:
34023f80:	6982      	ldr	r2, [r0, #24]
34023f82:	8813      	ldrh	r3, [r2, #0]
34023f84:	b90b      	cbnz	r3, 34023f8a <node_convert+0xa>
34023f86:	685b      	ldr	r3, [r3, #4]
34023f88:	deff      	udf	#255	@ 0xff
34023f8a:	6852      	ldr	r2, [r2, #4]
34023f8c:	6851      	ldr	r1, [r2, #4]
34023f8e:	b101      	cbz	r1, 34023f92 <node_convert+0x12>
34023f90:	6809      	ldr	r1, [r1, #0]
34023f92:	2b01      	cmp	r3, #1
34023f94:	f000 813b 	beq.w	3402420e <node_convert+0x28e>
34023f98:	b5f0      	push	{r4, r5, r6, r7, lr}
34023f9a:	6915      	ldr	r5, [r2, #16]
34023f9c:	b083      	sub	sp, #12
34023f9e:	b105      	cbz	r5, 34023fa2 <node_convert+0x22>
34023fa0:	682d      	ldr	r5, [r5, #0]
34023fa2:	688b      	ldr	r3, [r1, #8]
34023fa4:	0a1a      	lsrs	r2, r3, #8
34023fa6:	f000 8117 	beq.w	340241d8 <node_convert+0x258>
34023faa:	ea4f 0e82 	mov.w	lr, r2, lsl #2
34023fae:	f1ae 0e04 	sub.w	lr, lr, #4
34023fb2:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
34023fb6:	f10e 0e01 	add.w	lr, lr, #1
34023fba:	2401      	movs	r4, #1
34023fbc:	f04e e001 	dls	lr, lr
34023fc0:	68cb      	ldr	r3, [r1, #12]
34023fc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
34023fc6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
34023fca:	fb02 f404 	mul.w	r4, r2, r4
34023fce:	f00f c007 	le	lr, 34023fc6 <node_convert+0x46>
34023fd2:	698a      	ldr	r2, [r1, #24]
34023fd4:	69ae      	ldr	r6, [r5, #24]
34023fd6:	6813      	ldr	r3, [r2, #0]
34023fd8:	6890      	ldr	r0, [r2, #8]
34023fda:	f3c3 4243 	ubfx	r2, r3, #17, #4
34023fde:	2a01      	cmp	r2, #1
34023fe0:	d019      	beq.n	34024016 <node_convert+0x96>
34023fe2:	6809      	ldr	r1, [r1, #0]
34023fe4:	68b6      	ldr	r6, [r6, #8]
34023fe6:	15da      	asrs	r2, r3, #23
34023fe8:	2900      	cmp	r1, #0
34023fea:	d02d      	beq.n	34024048 <node_convert+0xc8>
34023fec:	684d      	ldr	r5, [r1, #4]
34023fee:	f002 0201 	and.w	r2, r2, #1
34023ff2:	2d00      	cmp	r5, #0
34023ff4:	f000 8094 	beq.w	34024120 <node_convert+0x1a0>
34023ff8:	884b      	ldrh	r3, [r1, #2]
34023ffa:	2b00      	cmp	r3, #0
34023ffc:	d173      	bne.n	340240e6 <node_convert+0x166>
34023ffe:	2a00      	cmp	r2, #0
34024000:	f000 8090 	beq.w	34024124 <node_convert+0x1a4>
34024004:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34024008:	4622      	mov	r2, r4
3402400a:	4631      	mov	r1, r6
3402400c:	b003      	add	sp, #12
3402400e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34024012:	f000 ba0b 	b.w	3402442c <forward_lite_node_convert_integer_is8of32>
34024016:	6833      	ldr	r3, [r6, #0]
34024018:	682d      	ldr	r5, [r5, #0]
3402401a:	15da      	asrs	r2, r3, #23
3402401c:	2d00      	cmp	r5, #0
3402401e:	f000 808b 	beq.w	34024138 <node_convert+0x1b8>
34024022:	686b      	ldr	r3, [r5, #4]
34024024:	68b1      	ldr	r1, [r6, #8]
34024026:	f002 0201 	and.w	r2, r2, #1
3402402a:	2b00      	cmp	r3, #0
3402402c:	d064      	beq.n	340240f8 <node_convert+0x178>
3402402e:	886d      	ldrh	r5, [r5, #2]
34024030:	2d00      	cmp	r5, #0
34024032:	d06a      	beq.n	3402410a <node_convert+0x18a>
34024034:	681d      	ldr	r5, [r3, #0]
34024036:	685b      	ldr	r3, [r3, #4]
34024038:	ed95 0a00 	vldr	s0, [r5]
3402403c:	2a00      	cmp	r2, #0
3402403e:	f000 80d6 	beq.w	340241ee <node_convert+0x26e>
34024042:	f993 3000 	ldrsb.w	r3, [r3]
34024046:	e05a      	b.n	340240fe <node_convert+0x17e>
34024048:	f3c3 11c6 	ubfx	r1, r3, #7, #7
3402404c:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
34024050:	1b4d      	subs	r5, r1, r5
34024052:	f002 0201 	and.w	r2, r2, #1
34024056:	3540      	adds	r5, #64	@ 0x40
34024058:	2908      	cmp	r1, #8
3402405a:	eba5 0502 	sub.w	r5, r5, r2
3402405e:	4631      	mov	r1, r6
34024060:	4622      	mov	r2, r4
34024062:	f000 80bb 	beq.w	340241dc <node_convert+0x25c>
34024066:	f001 fa89 	bl	3402557c <st_int16_to_f32>
3402406a:	b3d5      	cbz	r5, 340240e2 <node_convert+0x162>
3402406c:	ee07 5a90 	vmov	s15, r5
34024070:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
34024074:	eef8 0ae7 	vcvt.f32.s32	s1, s15
34024078:	f001 fe9e 	bl	34025db8 <powf>
3402407c:	b38c      	cbz	r4, 340240e2 <node_convert+0x162>
3402407e:	1e63      	subs	r3, r4, #1
34024080:	2b02      	cmp	r3, #2
34024082:	f240 80c0 	bls.w	34024206 <node_convert+0x286>
34024086:	ee10 3a10 	vmov	r3, s0
3402408a:	08a2      	lsrs	r2, r4, #2
3402408c:	eea4 3b10 	vdup.32	q2, r3
34024090:	f042 e001 	dls	lr, r2
34024094:	4633      	mov	r3, r6
34024096:	ed93 7f00 	ldc	15, cr7, [r3]
3402409a:	ff06 6d54 	vmul.f32	q3, q3, q2
3402409e:	eca3 7f04 	stc	15, cr7, [r3], #16
340240a2:	f00f c009 	le	lr, 34024096 <node_convert+0x116>
340240a6:	f024 0303 	bic.w	r3, r4, #3
340240aa:	07a2      	lsls	r2, r4, #30
340240ac:	eb06 0683 	add.w	r6, r6, r3, lsl #2
340240b0:	d017      	beq.n	340240e2 <node_convert+0x162>
340240b2:	edd6 7a00 	vldr	s15, [r6]
340240b6:	ee67 7a80 	vmul.f32	s15, s15, s0
340240ba:	1c5a      	adds	r2, r3, #1
340240bc:	4294      	cmp	r4, r2
340240be:	edc6 7a00 	vstr	s15, [r6]
340240c2:	d90e      	bls.n	340240e2 <node_convert+0x162>
340240c4:	edd6 7a01 	vldr	s15, [r6, #4]
340240c8:	ee67 7a80 	vmul.f32	s15, s15, s0
340240cc:	3302      	adds	r3, #2
340240ce:	429c      	cmp	r4, r3
340240d0:	edc6 7a01 	vstr	s15, [r6, #4]
340240d4:	d905      	bls.n	340240e2 <node_convert+0x162>
340240d6:	edd6 7a02 	vldr	s15, [r6, #8]
340240da:	ee67 7a80 	vmul.f32	s15, s15, s0
340240de:	edc6 7a02 	vstr	s15, [r6, #8]
340240e2:	b003      	add	sp, #12
340240e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
340240e6:	682b      	ldr	r3, [r5, #0]
340240e8:	ed93 0a00 	vldr	s0, [r3]
340240ec:	686b      	ldr	r3, [r5, #4]
340240ee:	2a00      	cmp	r2, #0
340240f0:	d077      	beq.n	340241e2 <node_convert+0x262>
340240f2:	f993 3000 	ldrsb.w	r3, [r3]
340240f6:	e787      	b.n	34024008 <node_convert+0x88>
340240f8:	b14a      	cbz	r2, 3402410e <node_convert+0x18e>
340240fa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
340240fe:	4622      	mov	r2, r4
34024100:	b003      	add	sp, #12
34024102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34024106:	f000 b995 	b.w	34024434 <forward_lite_node_convert_integer_if32os8>
3402410a:	2a00      	cmp	r2, #0
3402410c:	d171      	bne.n	340241f2 <node_convert+0x272>
3402410e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34024112:	4613      	mov	r3, r2
34024114:	4622      	mov	r2, r4
34024116:	b003      	add	sp, #12
34024118:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
3402411c:	f000 b98c 	b.w	34024438 <forward_lite_node_convert_integer_if32ou8>
34024120:	2a00      	cmp	r2, #0
34024122:	d160      	bne.n	340241e6 <node_convert+0x266>
34024124:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
34024128:	4613      	mov	r3, r2
3402412a:	4622      	mov	r2, r4
3402412c:	4631      	mov	r1, r6
3402412e:	b003      	add	sp, #12
34024130:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34024134:	f000 b97c 	b.w	34024430 <forward_lite_node_convert_integer_iu8of32>
34024138:	f3c3 17c6 	ubfx	r7, r3, #7, #7
3402413c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
34024140:	1afb      	subs	r3, r7, r3
34024142:	f002 0201 	and.w	r2, r2, #1
34024146:	3340      	adds	r3, #64	@ 0x40
34024148:	1a9b      	subs	r3, r3, r2
3402414a:	d03c      	beq.n	340241c6 <node_convert+0x246>
3402414c:	425b      	negs	r3, r3
3402414e:	ee00 3a90 	vmov	s1, r3
34024152:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
34024156:	eef8 0ae0 	vcvt.f32.s32	s1, s1
3402415a:	9001      	str	r0, [sp, #4]
3402415c:	f001 fe2c 	bl	34025db8 <powf>
34024160:	9801      	ldr	r0, [sp, #4]
34024162:	b384      	cbz	r4, 340241c6 <node_convert+0x246>
34024164:	1e63      	subs	r3, r4, #1
34024166:	2b02      	cmp	r3, #2
34024168:	d94f      	bls.n	3402420a <node_convert+0x28a>
3402416a:	ee10 3a10 	vmov	r3, s0
3402416e:	08a2      	lsrs	r2, r4, #2
34024170:	eea4 3b10 	vdup.32	q2, r3
34024174:	f042 e001 	dls	lr, r2
34024178:	4603      	mov	r3, r0
3402417a:	ed93 7f00 	ldc	15, cr7, [r3]
3402417e:	ff06 6d54 	vmul.f32	q3, q3, q2
34024182:	eca3 7f04 	stc	15, cr7, [r3], #16
34024186:	f00f c009 	le	lr, 3402417a <node_convert+0x1fa>
3402418a:	f024 0503 	bic.w	r5, r4, #3
3402418e:	07a1      	lsls	r1, r4, #30
34024190:	eb00 0385 	add.w	r3, r0, r5, lsl #2
34024194:	d017      	beq.n	340241c6 <node_convert+0x246>
34024196:	edd3 7a00 	vldr	s15, [r3]
3402419a:	ee67 7a80 	vmul.f32	s15, s15, s0
3402419e:	1c6a      	adds	r2, r5, #1
340241a0:	42a2      	cmp	r2, r4
340241a2:	edc3 7a00 	vstr	s15, [r3]
340241a6:	d20e      	bcs.n	340241c6 <node_convert+0x246>
340241a8:	edd3 7a01 	vldr	s15, [r3, #4]
340241ac:	ee67 7a80 	vmul.f32	s15, s15, s0
340241b0:	3502      	adds	r5, #2
340241b2:	42a5      	cmp	r5, r4
340241b4:	edc3 7a01 	vstr	s15, [r3, #4]
340241b8:	d205      	bcs.n	340241c6 <node_convert+0x246>
340241ba:	edd3 7a02 	vldr	s15, [r3, #8]
340241be:	ee67 7a80 	vmul.f32	s15, s15, s0
340241c2:	edc3 7a02 	vstr	s15, [r3, #8]
340241c6:	2f08      	cmp	r7, #8
340241c8:	68b1      	ldr	r1, [r6, #8]
340241ca:	d016      	beq.n	340241fa <node_convert+0x27a>
340241cc:	4622      	mov	r2, r4
340241ce:	b003      	add	sp, #12
340241d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
340241d4:	f000 bf44 	b.w	34025060 <st_f32_to_int16>
340241d8:	2401      	movs	r4, #1
340241da:	e6fa      	b.n	34023fd2 <node_convert+0x52>
340241dc:	f001 fa0c 	bl	340255f8 <st_int8_to_f32>
340241e0:	e743      	b.n	3402406a <node_convert+0xea>
340241e2:	781b      	ldrb	r3, [r3, #0]
340241e4:	e7a1      	b.n	3402412a <node_convert+0x1aa>
340241e6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
340241ea:	462b      	mov	r3, r5
340241ec:	e70c      	b.n	34024008 <node_convert+0x88>
340241ee:	781b      	ldrb	r3, [r3, #0]
340241f0:	e790      	b.n	34024114 <node_convert+0x194>
340241f2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
340241f6:	462b      	mov	r3, r5
340241f8:	e781      	b.n	340240fe <node_convert+0x17e>
340241fa:	4622      	mov	r2, r4
340241fc:	b003      	add	sp, #12
340241fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
34024202:	f000 bffd 	b.w	34025200 <st_f32_to_int8>
34024206:	2300      	movs	r3, #0
34024208:	e753      	b.n	340240b2 <node_convert+0x132>
3402420a:	4603      	mov	r3, r0
3402420c:	e7c3      	b.n	34024196 <node_convert+0x216>
3402420e:	2300      	movs	r3, #0
34024210:	685b      	ldr	r3, [r3, #4]
34024212:	deff      	udf	#255	@ 0xff

34024214 <forward_resize_nearest_is8os8>:
34024214:	6982      	ldr	r2, [r0, #24]
34024216:	8813      	ldrh	r3, [r2, #0]
34024218:	b90b      	cbnz	r3, 3402421e <forward_resize_nearest_is8os8+0xa>
3402421a:	685b      	ldr	r3, [r3, #4]
3402421c:	deff      	udf	#255	@ 0xff
3402421e:	6852      	ldr	r2, [r2, #4]
34024220:	4684      	mov	ip, r0
34024222:	6851      	ldr	r1, [r2, #4]
34024224:	b101      	cbz	r1, 34024228 <forward_resize_nearest_is8os8+0x14>
34024226:	6809      	ldr	r1, [r1, #0]
34024228:	2b01      	cmp	r3, #1
3402422a:	d039      	beq.n	340242a0 <forward_resize_nearest_is8os8+0x8c>
3402422c:	6913      	ldr	r3, [r2, #16]
3402422e:	2b00      	cmp	r3, #0
34024230:	d034      	beq.n	3402429c <forward_resize_nearest_is8os8+0x88>
34024232:	b5f0      	push	{r4, r5, r6, r7, lr}
34024234:	eddc 7a0a 	vldr	s15, [ip, #40]	@ 0x28
34024238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402423c:	68c8      	ldr	r0, [r1, #12]
3402423e:	681d      	ldr	r5, [r3, #0]
34024240:	6846      	ldr	r6, [r0, #4]
34024242:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
34024246:	f8dc 0030 	ldr.w	r0, [ip, #48]	@ 0x30
3402424a:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
3402424e:	6880      	ldr	r0, [r0, #8]
34024250:	b08b      	sub	sp, #44	@ 0x2c
34024252:	edd0 0a00 	vldr	s1, [r0]
34024256:	ed90 0a01 	vldr	s0, [r0, #4]
3402425a:	68e8      	ldr	r0, [r5, #12]
3402425c:	e9d0 7e02 	ldrd	r7, lr, [r0, #8]
34024260:	ee17 0a90 	vmov	r0, s15
34024264:	f88d 0027 	strb.w	r0, [sp, #39]	@ 0x27
34024268:	b104      	cbz	r4, 3402426c <forward_resize_nearest_is8os8+0x58>
3402426a:	68a4      	ldr	r4, [r4, #8]
3402426c:	6988      	ldr	r0, [r1, #24]
3402426e:	69a9      	ldr	r1, [r5, #24]
34024270:	6880      	ldr	r0, [r0, #8]
34024272:	b101      	cbz	r1, 34024276 <forward_resize_nearest_is8os8+0x62>
34024274:	6889      	ldr	r1, [r1, #8]
34024276:	9407      	str	r4, [sp, #28]
34024278:	2401      	movs	r4, #1
3402427a:	e9cd 7e02 	strd	r7, lr, [sp, #8]
3402427e:	9600      	str	r6, [sp, #0]
34024280:	f89c 501c 	ldrb.w	r5, [ip, #28]
34024284:	9505      	str	r5, [sp, #20]
34024286:	f89c 502d 	ldrb.w	r5, [ip, #45]	@ 0x2d
3402428a:	9401      	str	r4, [sp, #4]
3402428c:	9504      	str	r5, [sp, #16]
3402428e:	f10d 0527 	add.w	r5, sp, #39	@ 0x27
34024292:	9506      	str	r5, [sp, #24]
34024294:	f000 fe24 	bl	34024ee0 <forward_lite_resize_nearest>
34024298:	b00b      	add	sp, #44	@ 0x2c
3402429a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3402429c:	68db      	ldr	r3, [r3, #12]
3402429e:	deff      	udf	#255	@ 0xff
340242a0:	2300      	movs	r3, #0
340242a2:	685b      	ldr	r3, [r3, #4]
340242a4:	deff      	udf	#255	@ 0xff
340242a6:	bf00      	nop

340242a8 <forward_resize_bilinear_is8os8>:
340242a8:	6983      	ldr	r3, [r0, #24]
340242aa:	881a      	ldrh	r2, [r3, #0]
340242ac:	b90a      	cbnz	r2, 340242b2 <forward_resize_bilinear_is8os8+0xa>
340242ae:	6853      	ldr	r3, [r2, #4]
340242b0:	deff      	udf	#255	@ 0xff
340242b2:	6859      	ldr	r1, [r3, #4]
340242b4:	4684      	mov	ip, r0
340242b6:	684b      	ldr	r3, [r1, #4]
340242b8:	b103      	cbz	r3, 340242bc <forward_resize_bilinear_is8os8+0x14>
340242ba:	681b      	ldr	r3, [r3, #0]
340242bc:	2a01      	cmp	r2, #1
340242be:	d029      	beq.n	34024314 <forward_resize_bilinear_is8os8+0x6c>
340242c0:	690a      	ldr	r2, [r1, #16]
340242c2:	b32a      	cbz	r2, 34024310 <forward_resize_bilinear_is8os8+0x68>
340242c4:	b5f0      	push	{r4, r5, r6, r7, lr}
340242c6:	6811      	ldr	r1, [r2, #0]
340242c8:	f8dc 0030 	ldr.w	r0, [ip, #48]	@ 0x30
340242cc:	f8dc 4034 	ldr.w	r4, [ip, #52]	@ 0x34
340242d0:	6882      	ldr	r2, [r0, #8]
340242d2:	68dd      	ldr	r5, [r3, #12]
340242d4:	698f      	ldr	r7, [r1, #24]
340242d6:	699b      	ldr	r3, [r3, #24]
340242d8:	68a4      	ldr	r4, [r4, #8]
340242da:	b087      	sub	sp, #28
340242dc:	68ce      	ldr	r6, [r1, #12]
340242de:	edd2 0a00 	vldr	s1, [r2]
340242e2:	ed92 0a01 	vldr	s0, [r2, #4]
340242e6:	6898      	ldr	r0, [r3, #8]
340242e8:	68b9      	ldr	r1, [r7, #8]
340242ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
340242ee:	9405      	str	r4, [sp, #20]
340242f0:	f89c 401c 	ldrb.w	r4, [ip, #28]
340242f4:	9403      	str	r4, [sp, #12]
340242f6:	f10c 0428 	add.w	r4, ip, #40	@ 0x28
340242fa:	9404      	str	r4, [sp, #16]
340242fc:	68f4      	ldr	r4, [r6, #12]
340242fe:	9402      	str	r4, [sp, #8]
34024300:	68b4      	ldr	r4, [r6, #8]
34024302:	9401      	str	r4, [sp, #4]
34024304:	686c      	ldr	r4, [r5, #4]
34024306:	9400      	str	r4, [sp, #0]
34024308:	f000 fbbe 	bl	34024a88 <forward_lite_resize_bilinear_is8os8>
3402430c:	b007      	add	sp, #28
3402430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34024310:	68d3      	ldr	r3, [r2, #12]
34024312:	deff      	udf	#255	@ 0xff
34024314:	2300      	movs	r3, #0
34024316:	685b      	ldr	r3, [r3, #4]
34024318:	deff      	udf	#255	@ 0xff
3402431a:	bf00      	nop

3402431c <forward_upsample_zeros>:
3402431c:	6982      	ldr	r2, [r0, #24]
3402431e:	8813      	ldrh	r3, [r2, #0]
34024320:	b90b      	cbnz	r3, 34024326 <forward_upsample_zeros+0xa>
34024322:	685b      	ldr	r3, [r3, #4]
34024324:	deff      	udf	#255	@ 0xff
34024326:	b5f0      	push	{r4, r5, r6, r7, lr}
34024328:	6852      	ldr	r2, [r2, #4]
3402432a:	b085      	sub	sp, #20
3402432c:	6854      	ldr	r4, [r2, #4]
3402432e:	b104      	cbz	r4, 34024332 <forward_upsample_zeros+0x16>
34024330:	6824      	ldr	r4, [r4, #0]
34024332:	2b01      	cmp	r3, #1
34024334:	d070      	beq.n	34024418 <forward_upsample_zeros+0xfc>
34024336:	6913      	ldr	r3, [r2, #16]
34024338:	2b00      	cmp	r3, #0
3402433a:	d06b      	beq.n	34024414 <forward_upsample_zeros+0xf8>
3402433c:	6a02      	ldr	r2, [r0, #32]
3402433e:	681b      	ldr	r3, [r3, #0]
34024340:	6890      	ldr	r0, [r2, #8]
34024342:	68e1      	ldr	r1, [r4, #12]
34024344:	edd0 0a00 	vldr	s1, [r0]
34024348:	ed90 0a01 	vldr	s0, [r0, #4]
3402434c:	6998      	ldr	r0, [r3, #24]
3402434e:	68dd      	ldr	r5, [r3, #12]
34024350:	688a      	ldr	r2, [r1, #8]
34024352:	68cb      	ldr	r3, [r1, #12]
34024354:	684f      	ldr	r7, [r1, #4]
34024356:	6881      	ldr	r1, [r0, #8]
34024358:	69a0      	ldr	r0, [r4, #24]
3402435a:	f8df e0c4 	ldr.w	lr, [pc, #196]	@ 34024420 <forward_upsample_zeros+0x104>
3402435e:	6806      	ldr	r6, [r0, #0]
34024360:	6824      	ldr	r4, [r4, #0]
34024362:	f026 4c7e 	bic.w	ip, r6, #4261412864	@ 0xfe000000
34024366:	45f4      	cmp	ip, lr
34024368:	6880      	ldr	r0, [r0, #8]
3402436a:	e9d5 5602 	ldrd	r5, r6, [r5, #8]
3402436e:	d048      	beq.n	34024402 <forward_upsample_zeros+0xe6>
34024370:	dd1b      	ble.n	340243aa <forward_upsample_zeros+0x8e>
34024372:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 34024424 <forward_upsample_zeros+0x108>
34024376:	45f4      	cmp	ip, lr
34024378:	d02d      	beq.n	340243d6 <forward_upsample_zeros+0xba>
3402437a:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
3402437e:	45f4      	cmp	ip, lr
34024380:	d111      	bne.n	340243a6 <forward_upsample_zeros+0x8a>
34024382:	b154      	cbz	r4, 3402439a <forward_upsample_zeros+0x7e>
34024384:	f8d4 c004 	ldr.w	ip, [r4, #4]
34024388:	f1bc 0f00 	cmp.w	ip, #0
3402438c:	d040      	beq.n	34024410 <forward_upsample_zeros+0xf4>
3402438e:	8864      	ldrh	r4, [r4, #2]
34024390:	b11c      	cbz	r4, 3402439a <forward_upsample_zeros+0x7e>
34024392:	f8dc 4004 	ldr.w	r4, [ip, #4]
34024396:	f994 4000 	ldrsb.w	r4, [r4]
3402439a:	e9cd 7402 	strd	r7, r4, [sp, #8]
3402439e:	e9cd 5600 	strd	r5, r6, [sp]
340243a2:	f000 fe51 	bl	34025048 <forward_lite_upsample_zeros_is16os16>
340243a6:	b005      	add	sp, #20
340243a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
340243aa:	f8df e07c 	ldr.w	lr, [pc, #124]	@ 34024428 <forward_upsample_zeros+0x10c>
340243ae:	45f4      	cmp	ip, lr
340243b0:	d011      	beq.n	340243d6 <forward_upsample_zeros+0xba>
340243b2:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
340243b6:	45f4      	cmp	ip, lr
340243b8:	d1f5      	bne.n	340243a6 <forward_upsample_zeros+0x8a>
340243ba:	2c00      	cmp	r4, #0
340243bc:	d0ed      	beq.n	3402439a <forward_upsample_zeros+0x7e>
340243be:	f8d4 c004 	ldr.w	ip, [r4, #4]
340243c2:	f1bc 0f00 	cmp.w	ip, #0
340243c6:	d023      	beq.n	34024410 <forward_upsample_zeros+0xf4>
340243c8:	8864      	ldrh	r4, [r4, #2]
340243ca:	2c00      	cmp	r4, #0
340243cc:	d0e5      	beq.n	3402439a <forward_upsample_zeros+0x7e>
340243ce:	f8dc 4004 	ldr.w	r4, [ip, #4]
340243d2:	7824      	ldrb	r4, [r4, #0]
340243d4:	e7e1      	b.n	3402439a <forward_upsample_zeros+0x7e>
340243d6:	b154      	cbz	r4, 340243ee <forward_upsample_zeros+0xd2>
340243d8:	f8d4 c004 	ldr.w	ip, [r4, #4]
340243dc:	f1bc 0f00 	cmp.w	ip, #0
340243e0:	d00d      	beq.n	340243fe <forward_upsample_zeros+0xe2>
340243e2:	8864      	ldrh	r4, [r4, #2]
340243e4:	b11c      	cbz	r4, 340243ee <forward_upsample_zeros+0xd2>
340243e6:	f8dc 4004 	ldr.w	r4, [ip, #4]
340243ea:	f994 4000 	ldrsb.w	r4, [r4]
340243ee:	e9cd 7402 	strd	r7, r4, [sp, #8]
340243f2:	e9cd 5600 	strd	r5, r6, [sp]
340243f6:	f000 fe1f 	bl	34025038 <forward_lite_upsample_zeros_is8os8>
340243fa:	b005      	add	sp, #20
340243fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
340243fe:	4664      	mov	r4, ip
34024400:	e7f5      	b.n	340243ee <forward_upsample_zeros+0xd2>
34024402:	e9cd 6701 	strd	r6, r7, [sp, #4]
34024406:	9500      	str	r5, [sp, #0]
34024408:	f000 fe26 	bl	34025058 <forward_lite_upsample_zeros_if32of32>
3402440c:	b005      	add	sp, #20
3402440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
34024410:	4664      	mov	r4, ip
34024412:	e7c2      	b.n	3402439a <forward_upsample_zeros+0x7e>
34024414:	68db      	ldr	r3, [r3, #12]
34024416:	deff      	udf	#255	@ 0xff
34024418:	2300      	movs	r3, #0
3402441a:	685b      	ldr	r3, [r3, #4]
3402441c:	deff      	udf	#255	@ 0xff
3402441e:	bf00      	nop
34024420:	00821040 	.word	0x00821040
34024424:	00840440 	.word	0x00840440
34024428:	00040440 	.word	0x00040440

3402442c <forward_lite_node_convert_integer_is8of32>:
3402442c:	f000 b806 	b.w	3402443c <lite_convert_is8of32>

34024430 <forward_lite_node_convert_integer_iu8of32>:
34024430:	f000 b840 	b.w	340244b4 <lite_convert_iu8of32>

34024434 <forward_lite_node_convert_integer_if32os8>:
34024434:	f000 b86c 	b.w	34024510 <lite_convert_if32os8>

34024438 <forward_lite_node_convert_integer_if32ou8>:
34024438:	f000 b90a 	b.w	34024650 <lite_convert_if32ou8>

3402443c <lite_convert_is8of32>:
3402443c:	2a00      	cmp	r2, #0
3402443e:	dd37      	ble.n	340244b0 <lite_convert_is8of32+0x74>
34024440:	b570      	push	{r4, r5, r6, lr}
34024442:	1885      	adds	r5, r0, r2
34024444:	1e50      	subs	r0, r2, #1
34024446:	1f16      	subs	r6, r2, #4
34024448:	f020 0003 	bic.w	r0, r0, #3
3402444c:	ea4f 0c92 	mov.w	ip, r2, lsr #2
34024450:	ee10 ea10 	vmov	lr, s0
34024454:	1a36      	subs	r6, r6, r0
34024456:	f10c 0c01 	add.w	ip, ip, #1
3402445a:	e00d      	b.n	34024478 <lite_convert_is8of32+0x3c>
3402445c:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
34024460:	ffbb 6646 	vcvt.f32.s32	q3, q3
34024464:	ee37 6e6e 	cdp	14, 3, cr6, cr7, cr14, {3}
34024468:	4296      	cmp	r6, r2
3402446a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3402446e:	ed81 7f00 	stc	15, cr7, [r1]
34024472:	f101 0110 	add.w	r1, r1, #16
34024476:	d01a      	beq.n	340244ae <lite_convert_is8of32+0x72>
34024478:	f022 e801 	bfcsel	0, 3402447e <lite_convert_is8of32+0x42>, 4, hi
3402447c:	eefd 0a10 	vmrs	r0, <impl def 0xd>
34024480:	b200      	sxth	r0, r0
34024482:	eeed 0a10 	vmsr	<impl def 0xd>, r0
34024486:	1aac      	subs	r4, r5, r2
34024488:	f1bc 0c01 	subs.w	ip, ip, #1
3402448c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34024490:	ed94 6f00 	ldc	15, cr6, [r4]
34024494:	f1a2 0204 	sub.w	r2, r2, #4
34024498:	d1e0      	bne.n	3402445c <lite_convert_is8of32+0x20>
3402449a:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
3402449e:	ffbb 6646 	vcvt.f32.s32	q3, q3
340244a2:	ee37 6e6e 	cdp	14, 3, cr6, cr7, cr14, {3}
340244a6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340244aa:	ed81 7f00 	stc	15, cr7, [r1]
340244ae:	bd70      	pop	{r4, r5, r6, pc}
340244b0:	4770      	bx	lr
340244b2:	bf00      	nop

340244b4 <lite_convert_iu8of32>:
340244b4:	2a00      	cmp	r2, #0
340244b6:	dd27      	ble.n	34024508 <lite_convert_iu8of32+0x54>
340244b8:	b530      	push	{r4, r5, lr}
340244ba:	f102 3eff 	add.w	lr, r2, #4294967295
340244be:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
340244c2:	f10e 0e01 	add.w	lr, lr, #1
340244c6:	ee10 5a10 	vmov	r5, s0
340244ca:	f04e e001 	dls	lr, lr
340244ce:	1884      	adds	r4, r0, r2
340244d0:	f022 e801 	bfcsel	0, 340244d6 <lite_convert_iu8of32+0x22>, 4, hi
340244d4:	eefd ca10 	vmrs	ip, <impl def 0xd>
340244d8:	fa0f fc8c 	sxth.w	ip, ip
340244dc:	eeed ca10 	vmsr	<impl def 0xd>, ip
340244e0:	1aa0      	subs	r0, r4, r2
340244e2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340244e6:	fd90 6f00 	ldc2	15, cr6, [r0]
340244ea:	ee26 7f63 	cdp	15, 2, cr7, cr6, cr3, {3}
340244ee:	ffbb 6646 	vcvt.f32.s32	q3, q3
340244f2:	ee37 6e65 	cdp	14, 3, cr6, cr7, cr5, {3}
340244f6:	3a04      	subs	r2, #4
340244f8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340244fc:	ed81 7f00 	stc	15, cr7, [r1]
34024500:	3110      	adds	r1, #16
34024502:	f00f c81b 	le	lr, 340244d0 <lite_convert_iu8of32+0x1c>
34024506:	bd30      	pop	{r4, r5, pc}
34024508:	4770      	bx	lr
3402450a:	bf00      	nop
3402450c:	0000      	movs	r0, r0
	...

34024510 <lite_convert_if32os8>:
34024510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34024514:	2a00      	cmp	r2, #0
34024516:	ee87 7a00 	vdiv.f32	s14, s14, s0
3402451a:	f340 8087 	ble.w	3402462c <lite_convert_if32os8+0x11c>
3402451e:	ee07 3a90 	vmov	s15, r3
34024522:	ee17 3a10 	vmov	r3, s14
34024526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3402452a:	b570      	push	{r4, r5, r6, lr}
3402452c:	ed2d 8b10 	vpush	{d8-d15}
34024530:	2640      	movs	r6, #64	@ 0x40
34024532:	460c      	mov	r4, r1
34024534:	eea8 3b10 	vdup.32	q4, r3
34024538:	ee17 1a90 	vmov	r1, s15
3402453c:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 34024630 <lite_convert_if32os8+0x120>
34024540:	ed9f 7b3d 	vldr	d7, [pc, #244]	@ 34024638 <lite_convert_if32os8+0x128>
34024544:	1e53      	subs	r3, r2, #1
34024546:	f023 030f 	bic.w	r3, r3, #15
3402454a:	b094      	sub	sp, #80	@ 0x50
3402454c:	f1a2 0510 	sub.w	r5, r2, #16
34024550:	1aed      	subs	r5, r5, r3
34024552:	eb0d 0306 	add.w	r3, sp, r6
34024556:	ed9f 2b3a 	vldr	d2, [pc, #232]	@ 34024640 <lite_convert_if32os8+0x130>
3402455a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 34024648 <lite_convert_if32os8+0x138>
3402455e:	ef26 4156 	vorr	q2, q3, q3
34024562:	ed83 9f00 	stc	15, cr9, [r3]
34024566:	eea0 1b10 	vdup.32	q0, r1
3402456a:	0911      	lsrs	r1, r2, #4
3402456c:	4414      	add	r4, r2
3402456e:	3101      	adds	r1, #1
34024570:	2a10      	cmp	r2, #16
34024572:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
34024576:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
3402457a:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
3402457e:	fc90 9f61 	ldc2	15, cr9, [r0], {97}	@ 0x61
34024582:	ea4f 0e82 	mov.w	lr, r2, lsl #2
34024586:	bfa8      	it	ge
34024588:	46b6      	movge	lr, r6
3402458a:	ec8d 8b10 	vstmia	sp, {d8-d15}
3402458e:	4470      	add	r0, lr
34024590:	46ee      	mov	lr, sp
34024592:	ed9e df00 	ldc	15, cr13, [lr]
34024596:	f10d 0e40 	add.w	lr, sp, #64	@ 0x40
3402459a:	ed9e ff00 	ldc	15, cr15, [lr]
3402459e:	ef20 a150 	vorr	q5, q0, q0
340245a2:	ef0c ac5e 	vfma.f32	q5, q6, q7
340245a6:	ffbb a04a 	vcvta.s32.f32	q5, q5
340245aa:	f10d 0e10 	add.w	lr, sp, #16
340245ae:	ed9e df00 	ldc	15, cr13, [lr]
340245b2:	ee37 4e0b 	cdp	14, 3, cr4, cr7, cr11, {0}
340245b6:	ef20 a150 	vorr	q5, q0, q0
340245ba:	ef0c ac5e 	vfma.f32	q5, q6, q7
340245be:	ffbb a04a 	vcvta.s32.f32	q5, q5
340245c2:	f10d 0e20 	add.w	lr, sp, #32
340245c6:	ee37 6e0b 	cdp	14, 3, cr6, cr7, cr11, {0}
340245ca:	ef20 c150 	vorr	q6, q0, q0
340245ce:	ed9e bf00 	ldc	15, cr11, [lr]
340245d2:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
340245d6:	ef0a cc5e 	vfma.f32	q6, q5, q7
340245da:	ed9e 9f00 	ldc	15, cr9, [lr]
340245de:	ef20 a150 	vorr	q5, q0, q0
340245e2:	ffbb c04c 	vcvta.s32.f32	q6, q6
340245e6:	ef08 ac5e 	vfma.f32	q5, q4, q7
340245ea:	f002 e801 	bfcsel	0, 340245f0 <lite_convert_if32os8+0xe0>, 4, eq
340245ee:	ffbb a04a 	vcvta.s32.f32	q5, q5
340245f2:	ee37 5e0d 	cdp	14, 3, cr5, cr7, cr13, {0}
340245f6:	eefd ca10 	vmrs	ip, <impl def 0xd>
340245fa:	ee37 7e0b 	cdp	14, 3, cr7, cr7, cr11, {0}
340245fe:	ee33 2e05 	cdp	14, 3, cr2, cr3, cr5, {0}
34024602:	fa1f fc8c 	uxth.w	ip, ip
34024606:	ee33 3e07 	cdp	14, 3, cr3, cr3, cr7, {0}
3402460a:	eeed ca10 	vmsr	<impl def 0xd>, ip
3402460e:	1aa3      	subs	r3, r4, r2
34024610:	3901      	subs	r1, #1
34024612:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34024616:	ed83 3e00 	stc	14, cr3, [r3]
3402461a:	f1a2 0210 	sub.w	r2, r2, #16
3402461e:	d001      	beq.n	34024624 <lite_convert_if32os8+0x114>
34024620:	4295      	cmp	r5, r2
34024622:	d1a5      	bne.n	34024570 <lite_convert_if32os8+0x60>
34024624:	b014      	add	sp, #80	@ 0x50
34024626:	ecbd 8b10 	vpop	{d8-d15}
3402462a:	bd70      	pop	{r4, r5, r6, pc}
3402462c:	4770      	bx	lr
3402462e:	bf00      	nop
	...

34024650 <lite_convert_if32ou8>:
34024650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
34024654:	2a00      	cmp	r2, #0
34024656:	ee87 7a00 	vdiv.f32	s14, s14, s0
3402465a:	dd76      	ble.n	3402474a <lite_convert_if32ou8+0xfa>
3402465c:	ee07 3a90 	vmov	s15, r3
34024660:	ee17 3a10 	vmov	r3, s14
34024664:	eef8 7a67 	vcvt.f32.u32	s15, s15
34024668:	b510      	push	{r4, lr}
3402466a:	ed2d 8b10 	vpush	{d8-d15}
3402466e:	ee17 ca90 	vmov	ip, s15
34024672:	eea8 3b10 	vdup.32	q4, r3
34024676:	ed9f 6b36 	vldr	d6, [pc, #216]	@ 34024750 <lite_convert_if32ou8+0x100>
3402467a:	ed9f 7b37 	vldr	d7, [pc, #220]	@ 34024758 <lite_convert_if32ou8+0x108>
3402467e:	f102 3eff 	add.w	lr, r2, #4294967295
34024682:	b094      	sub	sp, #80	@ 0x50
34024684:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34024688:	f10e 0e01 	add.w	lr, lr, #1
3402468c:	ab10      	add	r3, sp, #64	@ 0x40
3402468e:	eea0 cb10 	vdup.32	q0, ip
34024692:	ed9f 2b33 	vldr	d2, [pc, #204]	@ 34024760 <lite_convert_if32ou8+0x110>
34024696:	ed9f 3b34 	vldr	d3, [pc, #208]	@ 34024768 <lite_convert_if32ou8+0x118>
3402469a:	f04e e001 	dls	lr, lr
3402469e:	ef26 4156 	vorr	q2, q3, q3
340246a2:	ed83 9f00 	stc	15, cr9, [r3]
340246a6:	4411      	add	r1, r2
340246a8:	fc90 9f01 	ldc2	15, cr9, [r0], {1}
340246ac:	fc90 9f21 	ldc2	15, cr9, [r0], {33}	@ 0x21
340246b0:	fc90 9f41 	ldc2	15, cr9, [r0], {65}	@ 0x41
340246b4:	fcb0 9f61 	ldc2	15, cr9, [r0], #388	@ 0x184
340246b8:	466c      	mov	r4, sp
340246ba:	ec8d 8b10 	vstmia	sp, {d8-d15}
340246be:	ed94 df00 	ldc	15, cr13, [r4]
340246c2:	ac10      	add	r4, sp, #64	@ 0x40
340246c4:	ed94 ff00 	ldc	15, cr15, [r4]
340246c8:	ef20 a150 	vorr	q5, q0, q0
340246cc:	ef0c ac5e 	vfma.f32	q5, q6, q7
340246d0:	ffbb a0ca 	vcvta.u32.f32	q5, q5
340246d4:	ac04      	add	r4, sp, #16
340246d6:	ed94 df00 	ldc	15, cr13, [r4]
340246da:	fe37 4e0b 	cdp2	14, 3, cr4, cr7, cr11, {0}
340246de:	ef20 a150 	vorr	q5, q0, q0
340246e2:	ef0c ac5e 	vfma.f32	q5, q6, q7
340246e6:	ffbb a0ca 	vcvta.u32.f32	q5, q5
340246ea:	ac08      	add	r4, sp, #32
340246ec:	fe37 6e0b 	cdp2	14, 3, cr6, cr7, cr11, {0}
340246f0:	ef20 c150 	vorr	q6, q0, q0
340246f4:	ed94 bf00 	ldc	15, cr11, [r4]
340246f8:	ac0c      	add	r4, sp, #48	@ 0x30
340246fa:	ef0a cc5e 	vfma.f32	q6, q5, q7
340246fe:	ed94 9f00 	ldc	15, cr9, [r4]
34024702:	ef20 a150 	vorr	q5, q0, q0
34024706:	ffbb c0cc 	vcvta.u32.f32	q6, q6
3402470a:	ef08 ac5e 	vfma.f32	q5, q4, q7
3402470e:	f022 e801 	bfcsel	0, 34024714 <lite_convert_if32ou8+0xc4>, 4, hi
34024712:	ffbb a0ca 	vcvta.u32.f32	q5, q5
34024716:	fe37 5e0d 	cdp2	14, 3, cr5, cr7, cr13, {0}
3402471a:	eefd ca10 	vmrs	ip, <impl def 0xd>
3402471e:	fe37 7e0b 	cdp2	14, 3, cr7, cr7, cr11, {0}
34024722:	fe33 2e05 	cdp2	14, 3, cr2, cr3, cr5, {0}
34024726:	fa1f fc8c 	uxth.w	ip, ip
3402472a:	fe33 3e07 	cdp2	14, 3, cr3, cr3, cr7, {0}
3402472e:	eeed ca10 	vmsr	<impl def 0xd>, ip
34024732:	1a8b      	subs	r3, r1, r2
34024734:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34024738:	ed83 3e00 	stc	14, cr3, [r3]
3402473c:	3a10      	subs	r2, #16
3402473e:	f00f c84d 	le	lr, 340246a8 <lite_convert_if32ou8+0x58>
34024742:	b014      	add	sp, #80	@ 0x50
34024744:	ecbd 8b10 	vpop	{d8-d15}
34024748:	bd10      	pop	{r4, pc}
3402474a:	4770      	bx	lr
3402474c:	f3af 8000 	nop.w
	...

34024770 <_lite_resize_init>:
34024770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34024774:	ed2d 8b06 	vpush	{d8-d10}
34024778:	b087      	sub	sp, #28
3402477a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
3402477c:	461f      	mov	r7, r3
3402477e:	e9dd 9a17 	ldrd	r9, sl, [sp, #92]	@ 0x5c
34024782:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34024784:	f8c4 9000 	str.w	r9, [r4]
34024788:	9e16      	ldr	r6, [sp, #88]	@ 0x58
3402478a:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
3402478e:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
34024790:	f8c3 a000 	str.w	sl, [r3]
34024794:	2805      	cmp	r0, #5
34024796:	f200 8168 	bhi.w	34024a6a <_lite_resize_init+0x2fa>
3402479a:	e8df f010 	tbh	[pc, r0, lsl #1]
3402479e:	00af      	.short	0x00af
340247a0:	00e700d0 	.word	0x00e700d0
340247a4:	011f0112 	.word	0x011f0112
340247a8:	0006      	.short	0x0006
340247aa:	1e4b      	subs	r3, r1, #1
340247ac:	ee07 3a90 	vmov	s15, r3
340247b0:	981a      	ldr	r0, [sp, #104]	@ 0x68
340247b2:	f1b9 0f01 	cmp.w	r9, #1
340247b6:	ed90 8a00 	vldr	s16, [r0]
340247ba:	edd0 9a01 	vldr	s19, [r0, #4]
340247be:	ed90 7a04 	vldr	s14, [r0, #16]
340247c2:	edd0 6a05 	vldr	s13, [r0, #20]
340247c6:	eef8 aa67 	vcvt.f32.u32	s21, s15
340247ca:	f240 812a 	bls.w	34024a22 <_lite_resize_init+0x2b2>
340247ce:	ee07 1a90 	vmov	s15, r1
340247d2:	ee76 6ae9 	vsub.f32	s13, s13, s19
340247d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
340247da:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
340247de:	ee66 6aaa 	vmul.f32	s13, s13, s21
340247e2:	eea7 6a80 	vfma.f32	s12, s15, s0
340247e6:	ee6a 9aa9 	vmul.f32	s19, s21, s19
340247ea:	ee86 aa86 	vdiv.f32	s20, s13, s12
340247ee:	1e53      	subs	r3, r2, #1
340247f0:	ee09 3a10 	vmov	s18, r3
340247f4:	f1ba 0f01 	cmp.w	sl, #1
340247f8:	eeb8 9a49 	vcvt.f32.u32	s18, s18
340247fc:	f240 8102 	bls.w	34024a04 <_lite_resize_init+0x294>
34024800:	ee07 2a90 	vmov	s15, r2
34024804:	ee37 7a48 	vsub.f32	s14, s14, s16
34024808:	eef8 7a67 	vcvt.f32.u32	s15, s15
3402480c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
34024810:	ee27 7a09 	vmul.f32	s14, s14, s18
34024814:	eee7 6aa0 	vfma.f32	s13, s15, s1
34024818:	ee28 8a09 	vmul.f32	s16, s16, s18
3402481c:	eec7 8a26 	vdiv.f32	s17, s14, s13
34024820:	f1b9 0f00 	cmp.w	r9, #0
34024824:	d02f      	beq.n	34024886 <_lite_resize_init+0x116>
34024826:	2200      	movs	r2, #0
34024828:	fb06 f307 	mul.w	r3, r6, r7
3402482c:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
34024830:	9300      	str	r3, [sp, #0]
34024832:	46b2      	mov	sl, r6
34024834:	4613      	mov	r3, r2
34024836:	4616      	mov	r6, r2
34024838:	941e      	str	r4, [sp, #120]	@ 0x78
3402483a:	2400      	movs	r4, #0
3402483c:	4648      	mov	r0, r9
3402483e:	2f00      	cmp	r7, #0
34024840:	f000 80da 	beq.w	340249f8 <_lite_resize_init+0x288>
34024844:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
34024848:	46a2      	mov	sl, r4
3402484a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
3402484c:	9301      	str	r3, [sp, #4]
3402484e:	f04f 0b00 	mov.w	fp, #0
34024852:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
34024854:	199d      	adds	r5, r3, r6
34024856:	4629      	mov	r1, r5
34024858:	4622      	mov	r2, r4
3402485a:	4640      	mov	r0, r8
3402485c:	f10b 0b01 	add.w	fp, fp, #1
34024860:	f000 ff12 	bl	34025688 <st_int8_copy>
34024864:	455f      	cmp	r7, fp
34024866:	4425      	add	r5, r4
34024868:	d1f5      	bne.n	34024856 <_lite_resize_init+0xe6>
3402486a:	9b00      	ldr	r3, [sp, #0]
3402486c:	f10a 0a01 	add.w	sl, sl, #1
34024870:	45d1      	cmp	r9, sl
34024872:	441e      	add	r6, r3
34024874:	d1eb      	bne.n	3402484e <_lite_resize_init+0xde>
34024876:	46a2      	mov	sl, r4
34024878:	9b01      	ldr	r3, [sp, #4]
3402487a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
3402487c:	3301      	adds	r3, #1
3402487e:	429a      	cmp	r2, r3
34024880:	d8db      	bhi.n	3402483a <_lite_resize_init+0xca>
34024882:	4692      	mov	sl, r2
34024884:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
34024886:	eef5 8a40 	vcmp.f32	s17, #0.0
3402488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402488e:	d013      	beq.n	340248b8 <_lite_resize_init+0x148>
34024890:	eddf 7a7b 	vldr	s15, [pc, #492]	@ 34024a80 <_lite_resize_init+0x310>
34024894:	ee79 7a27 	vadd.f32	s15, s18, s15
34024898:	ee07 aa10 	vmov	s14, sl
3402489c:	ee77 7ac8 	vsub.f32	s15, s15, s16
340248a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
340248a4:	ee87 7aa8 	vdiv.f32	s14, s15, s17
340248a8:	fe87 7a66 	vminnm.f32	s14, s14, s13
340248ac:	feb8 7a47 	vrinta.f32	s14, s14
340248b0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
340248b4:	ee17 aa90 	vmov	sl, s15
340248b8:	eeb5 aa40 	vcmp.f32	s20, #0.0
340248bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340248c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
340248c2:	f8c3 a000 	str.w	sl, [r3]
340248c6:	d013      	beq.n	340248f0 <_lite_resize_init+0x180>
340248c8:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 34024a80 <_lite_resize_init+0x310>
340248cc:	ee7a 7aa7 	vadd.f32	s15, s21, s15
340248d0:	ee07 9a10 	vmov	s14, r9
340248d4:	ee77 7ae9 	vsub.f32	s15, s15, s19
340248d8:	eef8 6a47 	vcvt.f32.u32	s13, s14
340248dc:	ee87 7a8a 	vdiv.f32	s14, s15, s20
340248e0:	fec7 7a66 	vminnm.f32	s15, s14, s13
340248e4:	fef8 7a67 	vrinta.f32	s15, s15
340248e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340248ec:	ee17 9a90 	vmov	r9, s15
340248f0:	2300      	movs	r3, #0
340248f2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
340248f4:	f8c2 9000 	str.w	r9, [r2]
340248f8:	461a      	mov	r2, r3
340248fa:	e00c      	b.n	34024916 <_lite_resize_init+0x1a6>
340248fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024900:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
34024904:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
34024908:	ee87 aa80 	vdiv.f32	s20, s15, s0
3402490c:	eec7 8aa0 	vdiv.f32	s17, s15, s1
34024910:	461a      	mov	r2, r3
34024912:	eef0 9a48 	vmov.f32	s19, s16
34024916:	edcd 9a02 	vstr	s19, [sp, #8]
3402491a:	ed8d aa03 	vstr	s20, [sp, #12]
3402491e:	ed8d 8a05 	vstr	s16, [sp, #20]
34024922:	9204      	str	r2, [sp, #16]
34024924:	aa02      	add	r2, sp, #8
34024926:	ed92 7f00 	ldc	15, cr7, [r2]
3402492a:	edc4 8a04 	vstr	s17, [r4, #16]
3402492e:	ed84 7f00 	stc	15, cr7, [r4]
34024932:	6163      	str	r3, [r4, #20]
34024934:	b007      	add	sp, #28
34024936:	ecbd 8b06 	vpop	{d8-d10}
3402493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402493e:	f1b9 0f01 	cmp.w	r9, #1
34024942:	d97f      	bls.n	34024a44 <_lite_resize_init+0x2d4>
34024944:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024948:	eefe 9a00 	vmov.f32	s19, #224	@ 0xbf000000 -0.5
3402494c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
34024950:	ee87 aa80 	vdiv.f32	s20, s15, s0
34024954:	f1ba 0f01 	cmp.w	sl, #1
34024958:	d96e      	bls.n	34024a38 <_lite_resize_init+0x2c8>
3402495a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3402495e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
34024962:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
34024966:	eec7 8aa0 	vdiv.f32	s17, s15, s1
3402496a:	e7d4      	b.n	34024916 <_lite_resize_init+0x1a6>
3402496c:	f1b9 0f01 	cmp.w	r9, #1
34024970:	d978      	bls.n	34024a64 <_lite_resize_init+0x2f4>
34024972:	ee07 1a90 	vmov	s15, r1
34024976:	3901      	subs	r1, #1
34024978:	eef8 6a67 	vcvt.f32.u32	s13, s15
3402497c:	ee07 1a10 	vmov	s14, r1
34024980:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
34024984:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34024988:	eee6 7a80 	vfma.f32	s15, s13, s0
3402498c:	ee87 aa27 	vdiv.f32	s20, s14, s15
34024990:	f1ba 0f01 	cmp.w	sl, #1
34024994:	d95d      	bls.n	34024a52 <_lite_resize_init+0x2e2>
34024996:	ee07 2a90 	vmov	s15, r2
3402499a:	3a01      	subs	r2, #1
3402499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
340249a0:	ee07 2a10 	vmov	s14, r2
340249a4:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
340249a8:	2300      	movs	r3, #0
340249aa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
340249ae:	eee6 7aa0 	vfma.f32	s15, s13, s1
340249b2:	ee08 3a10 	vmov	s16, r3
340249b6:	461a      	mov	r2, r3
340249b8:	ee09 3a90 	vmov	s19, r3
340249bc:	eec7 8a27 	vdiv.f32	s17, s14, s15
340249c0:	e7a9      	b.n	34024916 <_lite_resize_init+0x1a6>
340249c2:	2300      	movs	r3, #0
340249c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340249c8:	ee08 3a10 	vmov	s16, r3
340249cc:	ee87 aa80 	vdiv.f32	s20, s15, s0
340249d0:	eec7 8aa0 	vdiv.f32	s17, s15, s1
340249d4:	461a      	mov	r2, r3
340249d6:	ee09 3a90 	vmov	s19, r3
340249da:	e79c      	b.n	34024916 <_lite_resize_init+0x1a6>
340249dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340249e0:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
340249e4:	ed9f 8a27 	vldr	s16, [pc, #156]	@ 34024a84 <_lite_resize_init+0x314>
340249e8:	ee87 aa80 	vdiv.f32	s20, s15, s0
340249ec:	eec7 8aa0 	vdiv.f32	s17, s15, s1
340249f0:	461a      	mov	r2, r3
340249f2:	eef0 9a48 	vmov.f32	s19, s16
340249f6:	e78e      	b.n	34024916 <_lite_resize_init+0x1a6>
340249f8:	3801      	subs	r0, #1
340249fa:	f43f af3e 	beq.w	3402487a <_lite_resize_init+0x10a>
340249fe:	3801      	subs	r0, #1
34024a00:	d1fa      	bne.n	340249f8 <_lite_resize_init+0x288>
34024a02:	e73a      	b.n	3402487a <_lite_resize_init+0x10a>
34024a04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
34024a08:	ee38 8a07 	vadd.f32	s16, s16, s14
34024a0c:	ee69 7a27 	vmul.f32	s15, s18, s15
34024a10:	eddf 8a1c 	vldr	s17, [pc, #112]	@ 34024a84 <_lite_resize_init+0x314>
34024a14:	ee28 8a27 	vmul.f32	s16, s16, s15
34024a18:	f1ba 0f00 	cmp.w	sl, #0
34024a1c:	f47f af00 	bne.w	34024820 <_lite_resize_init+0xb0>
34024a20:	e74a      	b.n	340248b8 <_lite_resize_init+0x148>
34024a22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
34024a26:	ee79 9aa6 	vadd.f32	s19, s19, s13
34024a2a:	ee6a 7aa7 	vmul.f32	s15, s21, s15
34024a2e:	ed9f aa15 	vldr	s20, [pc, #84]	@ 34024a84 <_lite_resize_init+0x314>
34024a32:	ee69 9aa7 	vmul.f32	s19, s19, s15
34024a36:	e6da      	b.n	340247ee <_lite_resize_init+0x7e>
34024a38:	2300      	movs	r3, #0
34024a3a:	ee08 3a90 	vmov	s17, r3
34024a3e:	ee08 3a10 	vmov	s16, r3
34024a42:	e768      	b.n	34024916 <_lite_resize_init+0x1a6>
34024a44:	ed9f aa0f 	vldr	s20, [pc, #60]	@ 34024a84 <_lite_resize_init+0x314>
34024a48:	eef0 9a4a 	vmov.f32	s19, s20
34024a4c:	ee1a 2a10 	vmov	r2, s20
34024a50:	e780      	b.n	34024954 <_lite_resize_init+0x1e4>
34024a52:	2300      	movs	r3, #0
34024a54:	ee08 3a90 	vmov	s17, r3
34024a58:	ee08 3a10 	vmov	s16, r3
34024a5c:	461a      	mov	r2, r3
34024a5e:	ee09 3a90 	vmov	s19, r3
34024a62:	e758      	b.n	34024916 <_lite_resize_init+0x1a6>
34024a64:	ed9f aa07 	vldr	s20, [pc, #28]	@ 34024a84 <_lite_resize_init+0x314>
34024a68:	e792      	b.n	34024990 <_lite_resize_init+0x220>
34024a6a:	2300      	movs	r3, #0
34024a6c:	ee08 3a90 	vmov	s17, r3
34024a70:	ee08 3a10 	vmov	s16, r3
34024a74:	461a      	mov	r2, r3
34024a76:	ee0a 3a10 	vmov	s20, r3
34024a7a:	ee09 3a90 	vmov	s19, r3
34024a7e:	e74a      	b.n	34024916 <_lite_resize_init+0x1a6>
34024a80:	38d1b717 	.word	0x38d1b717
34024a84:	00000000 	.word	0x00000000

34024a88 <forward_lite_resize_bilinear_is8os8>:
34024a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34024a8c:	ed2d 8b0c 	vpush	{d8-d13}
34024a90:	b099      	sub	sp, #100	@ 0x64
34024a92:	f89d 50c4 	ldrb.w	r5, [sp, #196]	@ 0xc4
34024a96:	9004      	str	r0, [sp, #16]
34024a98:	461c      	mov	r4, r3
34024a9a:	e9dd ba2e 	ldrd	fp, sl, [sp, #184]	@ 0xb8
34024a9e:	4610      	mov	r0, r2
34024aa0:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
34024aa2:	2d05      	cmp	r5, #5
34024aa4:	f200 820a 	bhi.w	34024ebc <forward_lite_resize_bilinear_is8os8+0x434>
34024aa8:	e8df f015 	tbh	[pc, r5, lsl #1]
34024aac:	016300ab 	.word	0x016300ab
34024ab0:	01ae017f 	.word	0x01ae017f
34024ab4:	000601be 	.word	0x000601be
34024ab8:	1e53      	subs	r3, r2, #1
34024aba:	ee06 3a90 	vmov	s13, r3
34024abe:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
34024ac0:	f1ba 0f01 	cmp.w	sl, #1
34024ac4:	ed92 da00 	vldr	s26, [r2]
34024ac8:	ed92 9a01 	vldr	s18, [r2, #4]
34024acc:	edd2 7a04 	vldr	s15, [r2, #16]
34024ad0:	ed92 7a05 	vldr	s14, [r2, #20]
34024ad4:	eeb8 8a66 	vcvt.f32.u32	s16, s13
34024ad8:	f240 81c7 	bls.w	34024e6a <forward_lite_resize_bilinear_is8os8+0x3e2>
34024adc:	ee06 0a90 	vmov	s13, r0
34024ae0:	ee37 7a49 	vsub.f32	s14, s14, s18
34024ae4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
34024ae8:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
34024aec:	ee27 7a08 	vmul.f32	s14, s14, s16
34024af0:	eee0 6a06 	vfma.f32	s13, s0, s12
34024af4:	ee29 9a08 	vmul.f32	s18, s18, s16
34024af8:	eec7 ba26 	vdiv.f32	s23, s14, s13
34024afc:	1e63      	subs	r3, r4, #1
34024afe:	ee0c 3a10 	vmov	s24, r3
34024b02:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34024b04:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
34024b08:	2b01      	cmp	r3, #1
34024b0a:	f240 81a0 	bls.w	34024e4e <forward_lite_resize_bilinear_is8os8+0x3c6>
34024b0e:	ee07 4a10 	vmov	s14, r4
34024b12:	ee77 7acd 	vsub.f32	s15, s15, s26
34024b16:	eef8 6a47 	vcvt.f32.u32	s13, s14
34024b1a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
34024b1e:	ee67 7a8c 	vmul.f32	s15, s15, s24
34024b22:	eea0 7aa6 	vfma.f32	s14, s1, s13
34024b26:	ee2d da0c 	vmul.f32	s26, s26, s24
34024b2a:	eec7 da87 	vdiv.f32	s27, s15, s14
34024b2e:	f1ba 0f00 	cmp.w	sl, #0
34024b32:	d02e      	beq.n	34024b92 <forward_lite_resize_bilinear_is8os8+0x10a>
34024b34:	f04f 0800 	mov.w	r8, #0
34024b38:	e9cd 0405 	strd	r0, r4, [sp, #20]
34024b3c:	4643      	mov	r3, r8
34024b3e:	4689      	mov	r9, r1
34024b40:	465c      	mov	r4, fp
34024b42:	eb01 070b 	add.w	r7, r1, fp
34024b46:	9702      	str	r7, [sp, #8]
34024b48:	f04f 0b00 	mov.w	fp, #0
34024b4c:	4650      	mov	r0, sl
34024b4e:	2c00      	cmp	r4, #0
34024b50:	f000 8171 	beq.w	34024e36 <forward_lite_resize_bilinear_is8os8+0x3ae>
34024b54:	4647      	mov	r7, r8
34024b56:	46d8      	mov	r8, fp
34024b58:	9303      	str	r3, [sp, #12]
34024b5a:	9b02      	ldr	r3, [sp, #8]
34024b5c:	eb09 0b07 	add.w	fp, r9, r7
34024b60:	19dd      	adds	r5, r3, r7
34024b62:	4659      	mov	r1, fp
34024b64:	2201      	movs	r2, #1
34024b66:	4630      	mov	r0, r6
34024b68:	f10b 0b01 	add.w	fp, fp, #1
34024b6c:	f000 fd8c 	bl	34025688 <st_int8_copy>
34024b70:	455d      	cmp	r5, fp
34024b72:	d1f6      	bne.n	34024b62 <forward_lite_resize_bilinear_is8os8+0xda>
34024b74:	f108 0801 	add.w	r8, r8, #1
34024b78:	45c2      	cmp	sl, r8
34024b7a:	4427      	add	r7, r4
34024b7c:	d1ed      	bne.n	34024b5a <forward_lite_resize_bilinear_is8os8+0xd2>
34024b7e:	46b8      	mov	r8, r7
34024b80:	9b03      	ldr	r3, [sp, #12]
34024b82:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
34024b84:	3301      	adds	r3, #1
34024b86:	429a      	cmp	r2, r3
34024b88:	d8de      	bhi.n	34024b48 <forward_lite_resize_bilinear_is8os8+0xc0>
34024b8a:	4649      	mov	r1, r9
34024b8c:	46a3      	mov	fp, r4
34024b8e:	9805      	ldr	r0, [sp, #20]
34024b90:	9c06      	ldr	r4, [sp, #24]
34024b92:	eef5 da40 	vcmp.f32	s27, #0.0
34024b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024b9a:	d013      	beq.n	34024bc4 <forward_lite_resize_bilinear_is8os8+0x13c>
34024b9c:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
34024ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
34024ba4:	eddf 7acc 	vldr	s15, [pc, #816]	@ 34024ed8 <forward_lite_resize_bilinear_is8os8+0x450>
34024ba8:	ee3c ca27 	vadd.f32	s24, s24, s15
34024bac:	ee7c 7a4d 	vsub.f32	s15, s24, s26
34024bb0:	ee87 7aad 	vdiv.f32	s14, s15, s27
34024bb4:	fec7 7a66 	vminnm.f32	s15, s14, s13
34024bb8:	fef8 7a67 	vrinta.f32	s15, s15
34024bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34024bc0:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
34024bc4:	eef5 ba40 	vcmp.f32	s23, #0.0
34024bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024bcc:	f000 8139 	beq.w	34024e42 <forward_lite_resize_bilinear_is8os8+0x3ba>
34024bd0:	eddf 7ac1 	vldr	s15, [pc, #772]	@ 34024ed8 <forward_lite_resize_bilinear_is8os8+0x450>
34024bd4:	ee78 7a27 	vadd.f32	s15, s16, s15
34024bd8:	ee07 aa10 	vmov	s14, sl
34024bdc:	ee77 7ac9 	vsub.f32	s15, s15, s18
34024be0:	eef8 6a47 	vcvt.f32.u32	s13, s14
34024be4:	ee87 7aab 	vdiv.f32	s14, s15, s23
34024be8:	fec7 7a66 	vminnm.f32	s15, s14, s13
34024bec:	fef8 7a67 	vrinta.f32	s15, s15
34024bf0:	eddf caba 	vldr	s25, [pc, #744]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34024bf8:	eef0 9a6c 	vmov.f32	s19, s25
34024bfc:	ee17 8a90 	vmov	r8, s15
34024c00:	e00e      	b.n	34024c20 <forward_lite_resize_bilinear_is8os8+0x198>
34024c02:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024c06:	eef6 ca00 	vmov.f32	s25, #96	@ 0x3f000000  0.5
34024c0a:	eebe da00 	vmov.f32	s26, #224	@ 0xbf000000 -0.5
34024c0e:	46d0      	mov	r8, sl
34024c10:	eec7 ba80 	vdiv.f32	s23, s15, s0
34024c14:	eec7 daa0 	vdiv.f32	s27, s15, s1
34024c18:	eef0 9a6c 	vmov.f32	s19, s25
34024c1c:	eeb0 9a4d 	vmov.f32	s18, s26
34024c20:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34024c22:	2b00      	cmp	r3, #0
34024c24:	f000 80a0 	beq.w	34024d68 <forward_lite_resize_bilinear_is8os8+0x2e0>
34024c28:	1e63      	subs	r3, r4, #1
34024c2a:	ee0c 3a10 	vmov	s24, r3
34024c2e:	1e43      	subs	r3, r0, #1
34024c30:	ee07 3a90 	vmov	s15, r3
34024c34:	eeb8 ca4c 	vcvt.f32.u32	s24, s24
34024c38:	eddf 8aa8 	vldr	s17, [pc, #672]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024c3c:	eeb8 ba67 	vcvt.f32.u32	s22, s15
34024c40:	f04f 0e00 	mov.w	lr, #0
34024c44:	fb0b f30a 	mul.w	r3, fp, sl
34024c48:	9308      	str	r3, [sp, #32]
34024c4a:	fb0b f300 	mul.w	r3, fp, r0
34024c4e:	9009      	str	r0, [sp, #36]	@ 0x24
34024c50:	9307      	str	r3, [sp, #28]
34024c52:	ee07 ea90 	vmov	s15, lr
34024c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
34024c5a:	eeb0 aa4d 	vmov.f32	s20, s26
34024c5e:	ee77 7aac 	vadd.f32	s15, s15, s25
34024c62:	eea7 aaad 	vfma.f32	s20, s15, s27
34024c66:	fe8a aa28 	vmaxnm.f32	s20, s20, s17
34024c6a:	fe8a aa4c 	vminnm.f32	s20, s20, s24
34024c6e:	eeb4 aa4c 	vcmp.f32	s20, s24
34024c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024c76:	9b07      	ldr	r3, [sp, #28]
34024c78:	bf08      	it	eq
34024c7a:	2300      	moveq	r3, #0
34024c7c:	f1b8 0f00 	cmp.w	r8, #0
34024c80:	d06a      	beq.n	34024d58 <forward_lite_resize_bilinear_is8os8+0x2d0>
34024c82:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
34024c86:	eebc 7aca 	vcvt.u32.f32	s14, s20
34024c8a:	eef6 7aca 	vrintz.f32	s15, s20
34024c8e:	ee78 aa4a 	vsub.f32	s21, s16, s20
34024c92:	ee17 7a10 	vmov	r7, s14
34024c96:	460d      	mov	r5, r1
34024c98:	2400      	movs	r4, #0
34024c9a:	ee3a aa67 	vsub.f32	s20, s20, s15
34024c9e:	ee7a aaa7 	vadd.f32	s21, s21, s15
34024ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34024ca4:	e9cd e105 	strd	lr, r1, [sp, #20]
34024ca8:	fb02 f707 	mul.w	r7, r2, r7
34024cac:	ae14      	add	r6, sp, #80	@ 0x50
34024cae:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
34024cb2:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
34024cb6:	9702      	str	r7, [sp, #8]
34024cb8:	9303      	str	r3, [sp, #12]
34024cba:	ee07 4a90 	vmov	s15, r4
34024cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34024cc2:	eef0 7a49 	vmov.f32	s15, s18
34024cc6:	ee37 7a29 	vadd.f32	s14, s14, s19
34024cca:	eee7 7a2b 	vfma.f32	s15, s14, s23
34024cce:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
34024cd2:	fec7 7acb 	vminnm.f32	s15, s15, s22
34024cd6:	eef6 6ae7 	vrintz.f32	s13, s15
34024cda:	ee38 7a67 	vsub.f32	s14, s16, s15
34024cde:	eef4 7a4b 	vcmp.f32	s15, s22
34024ce2:	eebc 6ae7 	vcvt.u32.f32	s12, s15
34024ce6:	ee37 7a26 	vadd.f32	s14, s14, s13
34024cea:	ee77 7ae6 	vsub.f32	s15, s15, s13
34024cee:	edcd aa0f 	vstr	s21, [sp, #60]	@ 0x3c
34024cf2:	edcd aa0a 	vstr	s21, [sp, #40]	@ 0x28
34024cf6:	ed8d aa0c 	vstr	s20, [sp, #48]	@ 0x30
34024cfa:	ed8d aa0d 	vstr	s20, [sp, #52]	@ 0x34
34024cfe:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
34024d02:	ed8d 7a0e 	vstr	s14, [sp, #56]	@ 0x38
34024d06:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
34024d0a:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
34024d0e:	9b03      	ldr	r3, [sp, #12]
34024d10:	9600      	str	r6, [sp, #0]
34024d12:	9313      	str	r3, [sp, #76]	@ 0x4c
34024d14:	ee16 ca10 	vmov	ip, s12
34024d18:	ed99 5f00 	ldc	15, cr5, [r9]
34024d1c:	ed9a 7f00 	ldc	15, cr7, [sl]
34024d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34024d24:	9802      	ldr	r0, [sp, #8]
34024d26:	ff06 6d54 	vmul.f32	q3, q3, q2
34024d2a:	4460      	add	r0, ip
34024d2c:	bf14      	ite	ne
34024d2e:	46dc      	movne	ip, fp
34024d30:	f04f 0c00 	moveq.w	ip, #0
34024d34:	9f04      	ldr	r7, [sp, #16]
34024d36:	4629      	mov	r1, r5
34024d38:	465a      	mov	r2, fp
34024d3a:	ed86 7f00 	stc	15, cr7, [r6]
34024d3e:	fb0b 7000 	mla	r0, fp, r0, r7
34024d42:	3401      	adds	r4, #1
34024d44:	ab12      	add	r3, sp, #72	@ 0x48
34024d46:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
34024d4a:	f000 ff55 	bl	34025bf8 <lite_bilinear_is8os8_kernel>
34024d4e:	4544      	cmp	r4, r8
34024d50:	445d      	add	r5, fp
34024d52:	d1b2      	bne.n	34024cba <forward_lite_resize_bilinear_is8os8+0x232>
34024d54:	e9dd e105 	ldrd	lr, r1, [sp, #20]
34024d58:	9b08      	ldr	r3, [sp, #32]
34024d5a:	f10e 0e01 	add.w	lr, lr, #1
34024d5e:	4419      	add	r1, r3
34024d60:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34024d62:	459e      	cmp	lr, r3
34024d64:	f47f af75 	bne.w	34024c52 <forward_lite_resize_bilinear_is8os8+0x1ca>
34024d68:	b019      	add	sp, #100	@ 0x64
34024d6a:	ecbd 8b0c 	vpop	{d8-d13}
34024d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34024d72:	f1ba 0f01 	cmp.w	sl, #1
34024d76:	f240 808b 	bls.w	34024e90 <forward_lite_resize_bilinear_is8os8+0x408>
34024d7a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024d7e:	eebe 9a00 	vmov.f32	s18, #224	@ 0xbf000000 -0.5
34024d82:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
34024d86:	eec7 ba80 	vdiv.f32	s23, s15, s0
34024d8a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34024d8c:	2b01      	cmp	r3, #1
34024d8e:	d977      	bls.n	34024e80 <forward_lite_resize_bilinear_is8os8+0x3f8>
34024d90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024d94:	1e63      	subs	r3, r4, #1
34024d96:	ee0c 3a10 	vmov	s24, r3
34024d9a:	eef6 ca00 	vmov.f32	s25, #96	@ 0x3f000000  0.5
34024d9e:	eebe da00 	vmov.f32	s26, #224	@ 0xbf000000 -0.5
34024da2:	eec7 daa0 	vdiv.f32	s27, s15, s1
34024da6:	46d0      	mov	r8, sl
34024da8:	e741      	b.n	34024c2e <forward_lite_resize_bilinear_is8os8+0x1a6>
34024daa:	f1ba 0f01 	cmp.w	sl, #1
34024dae:	f240 8082 	bls.w	34024eb6 <forward_lite_resize_bilinear_is8os8+0x42e>
34024db2:	ee07 2a90 	vmov	s15, r2
34024db6:	1e53      	subs	r3, r2, #1
34024db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
34024dbc:	ee07 3a10 	vmov	s14, r3
34024dc0:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
34024dc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
34024dc8:	eee0 7a26 	vfma.f32	s15, s0, s13
34024dcc:	eec7 ba27 	vdiv.f32	s23, s14, s15
34024dd0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34024dd2:	2b01      	cmp	r3, #1
34024dd4:	d963      	bls.n	34024e9e <forward_lite_resize_bilinear_is8os8+0x416>
34024dd6:	ee07 4a90 	vmov	s15, r4
34024dda:	1e63      	subs	r3, r4, #1
34024ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
34024de0:	ee0c 3a10 	vmov	s24, r3
34024de4:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
34024de8:	eddf ca3c 	vldr	s25, [pc, #240]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024dec:	eeb8 7a4c 	vcvt.f32.u32	s14, s24
34024df0:	eee0 7aa6 	vfma.f32	s15, s1, s13
34024df4:	eeb0 da6c 	vmov.f32	s26, s25
34024df8:	eef0 9a6c 	vmov.f32	s19, s25
34024dfc:	eeb0 9a6c 	vmov.f32	s18, s25
34024e00:	eec7 da27 	vdiv.f32	s27, s14, s15
34024e04:	46d0      	mov	r8, sl
34024e06:	e712      	b.n	34024c2e <forward_lite_resize_bilinear_is8os8+0x1a6>
34024e08:	eddf ca34 	vldr	s25, [pc, #208]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024e0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024e10:	46d0      	mov	r8, sl
34024e12:	eeb0 da6c 	vmov.f32	s26, s25
34024e16:	eec7 ba80 	vdiv.f32	s23, s15, s0
34024e1a:	eec7 daa0 	vdiv.f32	s27, s15, s1
34024e1e:	eef0 9a6c 	vmov.f32	s19, s25
34024e22:	eeb0 9a6c 	vmov.f32	s18, s25
34024e26:	e6fb      	b.n	34024c20 <forward_lite_resize_bilinear_is8os8+0x198>
34024e28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34024e2c:	eef6 ca00 	vmov.f32	s25, #96	@ 0x3f000000  0.5
34024e30:	ed9f da2a 	vldr	s26, [pc, #168]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024e34:	e6eb      	b.n	34024c0e <forward_lite_resize_bilinear_is8os8+0x186>
34024e36:	3801      	subs	r0, #1
34024e38:	f43f aea3 	beq.w	34024b82 <forward_lite_resize_bilinear_is8os8+0xfa>
34024e3c:	3801      	subs	r0, #1
34024e3e:	d1fa      	bne.n	34024e36 <forward_lite_resize_bilinear_is8os8+0x3ae>
34024e40:	e69f      	b.n	34024b82 <forward_lite_resize_bilinear_is8os8+0xfa>
34024e42:	eef0 ca6b 	vmov.f32	s25, s23
34024e46:	eef0 9a6b 	vmov.f32	s19, s23
34024e4a:	46d0      	mov	r8, sl
34024e4c:	e6e8      	b.n	34024c20 <forward_lite_resize_bilinear_is8os8+0x198>
34024e4e:	ee3d da27 	vadd.f32	s26, s26, s15
34024e52:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
34024e56:	ee2d da27 	vmul.f32	s26, s26, s15
34024e5a:	eddf da20 	vldr	s27, [pc, #128]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024e5e:	ee2d da0c 	vmul.f32	s26, s26, s24
34024e62:	2b00      	cmp	r3, #0
34024e64:	f47f ae63 	bne.w	34024b2e <forward_lite_resize_bilinear_is8os8+0xa6>
34024e68:	e6ac      	b.n	34024bc4 <forward_lite_resize_bilinear_is8os8+0x13c>
34024e6a:	ee39 9a07 	vadd.f32	s18, s18, s14
34024e6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34024e72:	ee29 9a07 	vmul.f32	s18, s18, s14
34024e76:	eddf ba19 	vldr	s23, [pc, #100]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024e7a:	ee29 9a08 	vmul.f32	s18, s18, s16
34024e7e:	e63d      	b.n	34024afc <forward_lite_resize_bilinear_is8os8+0x74>
34024e80:	eddf ca16 	vldr	s25, [pc, #88]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024e84:	46d0      	mov	r8, sl
34024e86:	eef0 da6c 	vmov.f32	s27, s25
34024e8a:	eeb0 da6c 	vmov.f32	s26, s25
34024e8e:	e6c7      	b.n	34024c20 <forward_lite_resize_bilinear_is8os8+0x198>
34024e90:	eddf ba12 	vldr	s23, [pc, #72]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024e94:	eeb0 9a6b 	vmov.f32	s18, s23
34024e98:	eef0 9a6b 	vmov.f32	s19, s23
34024e9c:	e775      	b.n	34024d8a <forward_lite_resize_bilinear_is8os8+0x302>
34024e9e:	eddf ca0f 	vldr	s25, [pc, #60]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024ea2:	46d0      	mov	r8, sl
34024ea4:	eef0 da6c 	vmov.f32	s27, s25
34024ea8:	eeb0 da6c 	vmov.f32	s26, s25
34024eac:	eef0 9a6c 	vmov.f32	s19, s25
34024eb0:	eeb0 9a6c 	vmov.f32	s18, s25
34024eb4:	e6b4      	b.n	34024c20 <forward_lite_resize_bilinear_is8os8+0x198>
34024eb6:	eddf ba09 	vldr	s23, [pc, #36]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024eba:	e789      	b.n	34024dd0 <forward_lite_resize_bilinear_is8os8+0x348>
34024ebc:	eddf ca07 	vldr	s25, [pc, #28]	@ 34024edc <forward_lite_resize_bilinear_is8os8+0x454>
34024ec0:	46d0      	mov	r8, sl
34024ec2:	eef0 da6c 	vmov.f32	s27, s25
34024ec6:	eeb0 da6c 	vmov.f32	s26, s25
34024eca:	eef0 9a6c 	vmov.f32	s19, s25
34024ece:	eef0 ba6c 	vmov.f32	s23, s25
34024ed2:	eeb0 9a6c 	vmov.f32	s18, s25
34024ed6:	e6a3      	b.n	34024c20 <forward_lite_resize_bilinear_is8os8+0x198>
34024ed8:	38d1b717 	.word	0x38d1b717
34024edc:	00000000 	.word	0x00000000

34024ee0 <forward_lite_resize_nearest>:
34024ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34024ee4:	ed2d 8b0a 	vpush	{d8-d12}
34024ee8:	b097      	sub	sp, #92	@ 0x5c
34024eea:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
34024eec:	460e      	mov	r6, r1
34024eee:	e9dd 9a2a 	ldrd	r9, sl, [sp, #168]	@ 0xa8
34024ef2:	9402      	str	r4, [sp, #8]
34024ef4:	461c      	mov	r4, r3
34024ef6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
34024ef8:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
34024efa:	9303      	str	r3, [sp, #12]
34024efc:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
34024efe:	4611      	mov	r1, r2
34024f00:	9304      	str	r3, [sp, #16]
34024f02:	ab10      	add	r3, sp, #64	@ 0x40
34024f04:	9308      	str	r3, [sp, #32]
34024f06:	ab0f      	add	r3, sp, #60	@ 0x3c
34024f08:	9307      	str	r3, [sp, #28]
34024f0a:	ab0e      	add	r3, sp, #56	@ 0x38
34024f0c:	920b      	str	r2, [sp, #44]	@ 0x2c
34024f0e:	9306      	str	r3, [sp, #24]
34024f10:	4622      	mov	r2, r4
34024f12:	464b      	mov	r3, r9
34024f14:	4607      	mov	r7, r0
34024f16:	f8cd a000 	str.w	sl, [sp]
34024f1a:	f89d 00bc 	ldrb.w	r0, [sp, #188]	@ 0xbc
34024f1e:	9501      	str	r5, [sp, #4]
34024f20:	9605      	str	r6, [sp, #20]
34024f22:	f89d b0b8 	ldrb.w	fp, [sp, #184]	@ 0xb8
34024f26:	f7ff fc23 	bl	34024770 <_lite_resize_init>
34024f2a:	f1bb 0f03 	cmp.w	fp, #3
34024f2e:	bf98      	it	ls
34024f30:	4b3e      	ldrls	r3, [pc, #248]	@ (3402502c <forward_lite_resize_nearest+0x14c>)
34024f32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
34024f34:	bf9a      	itte	ls
34024f36:	eb03 038b 	addls.w	r3, r3, fp, lsl #2
34024f3a:	edd3 aa00 	vldrls	s21, [r3]
34024f3e:	eddf aa3c 	vldrhi	s21, [pc, #240]	@ 34025030 <forward_lite_resize_nearest+0x150>
34024f42:	2a00      	cmp	r2, #0
34024f44:	d06c      	beq.n	34025020 <forward_lite_resize_nearest+0x140>
34024f46:	3c01      	subs	r4, #1
34024f48:	ee07 4a90 	vmov	s15, r4
34024f4c:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
34024f50:	eeb8 ba67 	vcvt.f32.u32	s22, s15
34024f54:	eddd ba13 	vldr	s23, [sp, #76]	@ 0x4c
34024f58:	ed9d ca14 	vldr	s24, [sp, #80]	@ 0x50
34024f5c:	eddd ca15 	vldr	s25, [sp, #84]	@ 0x54
34024f60:	fb09 fa0a 	mul.w	sl, r9, sl
34024f64:	f1bb 0f00 	cmp.w	fp, #0
34024f68:	d05a      	beq.n	34025020 <forward_lite_resize_nearest+0x140>
34024f6a:	f04f 0900 	mov.w	r9, #0
34024f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34024f70:	46b0      	mov	r8, r6
34024f72:	3b01      	subs	r3, #1
34024f74:	ee07 3a90 	vmov	s15, r3
34024f78:	fb05 f30a 	mul.w	r3, r5, sl
34024f7c:	930c      	str	r3, [sp, #48]	@ 0x30
34024f7e:	464b      	mov	r3, r9
34024f80:	ed9f 8a2c 	vldr	s16, [pc, #176]	@ 34025034 <forward_lite_resize_nearest+0x154>
34024f84:	46d1      	mov	r9, sl
34024f86:	eeb8 aa67 	vcvt.f32.u32	s20, s15
34024f8a:	469a      	mov	sl, r3
34024f8c:	920d      	str	r2, [sp, #52]	@ 0x34
34024f8e:	ee07 aa90 	vmov	s15, sl
34024f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34024f96:	eef0 7a6b 	vmov.f32	s15, s23
34024f9a:	ee37 7a2c 	vadd.f32	s14, s14, s25
34024f9e:	eee7 7a0c 	vfma.f32	s15, s14, s24
34024fa2:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
34024fa6:	fec7 7acb 	vminnm.f32	s15, s15, s22
34024faa:	ee77 7aaa 	vadd.f32	s15, s15, s21
34024fae:	fef8 7a67 	vrinta.f32	s15, s15
34024fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34024fb6:	ee17 6a90 	vmov	r6, s15
34024fba:	4645      	mov	r5, r8
34024fbc:	2400      	movs	r4, #0
34024fbe:	eddd 9a10 	vldr	s19, [sp, #64]	@ 0x40
34024fc2:	ed9d 9a11 	vldr	s18, [sp, #68]	@ 0x44
34024fc6:	eddd 8a12 	vldr	s17, [sp, #72]	@ 0x48
34024fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34024fcc:	fb03 f606 	mul.w	r6, r3, r6
34024fd0:	ee07 4a90 	vmov	s15, r4
34024fd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34024fd8:	eef0 7a69 	vmov.f32	s15, s19
34024fdc:	ee37 7a28 	vadd.f32	s14, s14, s17
34024fe0:	eee7 7a09 	vfma.f32	s15, s14, s18
34024fe4:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
34024fe8:	fec7 7aca 	vminnm.f32	s15, s15, s20
34024fec:	ee77 7aaa 	vadd.f32	s15, s15, s21
34024ff0:	fef8 7a67 	vrinta.f32	s15, s15
34024ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34024ff8:	ee17 0a90 	vmov	r0, s15
34024ffc:	4430      	add	r0, r6
34024ffe:	4629      	mov	r1, r5
34025000:	464a      	mov	r2, r9
34025002:	fb09 7000 	mla	r0, r9, r0, r7
34025006:	3401      	adds	r4, #1
34025008:	f000 fb3e 	bl	34025688 <st_int8_copy>
3402500c:	455c      	cmp	r4, fp
3402500e:	444d      	add	r5, r9
34025010:	d1de      	bne.n	34024fd0 <forward_lite_resize_nearest+0xf0>
34025012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
34025014:	f10a 0a01 	add.w	sl, sl, #1
34025018:	4498      	add	r8, r3
3402501a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
3402501c:	459a      	cmp	sl, r3
3402501e:	d1b6      	bne.n	34024f8e <forward_lite_resize_nearest+0xae>
34025020:	b017      	add	sp, #92	@ 0x5c
34025022:	ecbd 8b0a 	vpop	{d8-d12}
34025026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3402502a:	bf00      	nop
3402502c:	34108b58 	.word	0x34108b58
34025030:	38d1b717 	.word	0x38d1b717
34025034:	00000000 	.word	0x00000000

34025038 <forward_lite_upsample_zeros_is8os8>:
34025038:	b410      	push	{r4}
3402503a:	f99d 4010 	ldrsb.w	r4, [sp, #16]
3402503e:	9404      	str	r4, [sp, #16]
34025040:	f85d 4b04 	ldr.w	r4, [sp], #4
34025044:	f000 bb80 	b.w	34025748 <lite_upsample_zeros_ix8ox8_kernel>

34025048 <forward_lite_upsample_zeros_is16os16>:
34025048:	b410      	push	{r4}
3402504a:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
3402504e:	9404      	str	r4, [sp, #16]
34025050:	f85d 4b04 	ldr.w	r4, [sp], #4
34025054:	f000 bc3e 	b.w	340258d4 <lite_upsample_zeros_ix16ox16_kernel>

34025058 <forward_lite_upsample_zeros_if32of32>:
34025058:	f000 bd06 	b.w	34025a68 <lite_upsample_zeros_if32of32_kernel>
3402505c:	0000      	movs	r0, r0
	...

34025060 <st_f32_to_int16>:
34025060:	b530      	push	{r4, r5, lr}
34025062:	08d5      	lsrs	r5, r2, #3
34025064:	ed2d 8b08 	vpush	{d8-d11}
34025068:	d020      	beq.n	340250ac <st_f32_to_int16+0x4c>
3402506a:	460c      	mov	r4, r1
3402506c:	4684      	mov	ip, r0
3402506e:	ed9f 6b5e 	vldr	d6, [pc, #376]	@ 340251e8 <st_f32_to_int16+0x188>
34025072:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 340251f0 <st_f32_to_int16+0x190>
34025076:	f045 e001 	dls	lr, r5
3402507a:	4b5f      	ldr	r3, [pc, #380]	@ (340251f8 <st_f32_to_int16+0x198>)
3402507c:	fc9c 9f00 	ldc2	15, cr9, [ip], {0}
34025080:	fcbc 9f20 	ldc2	15, cr9, [ip], #128	@ 0x80
34025084:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
34025088:	ee3b 4e63 	cdp	14, 3, cr4, cr11, cr3, {3}
3402508c:	ffbb 2042 	vcvta.s32.f32	q1, q1
34025090:	ffbb 4044 	vcvta.s32.f32	q2, q2
34025094:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
34025098:	ee37 7e05 	cdp	14, 3, cr7, cr7, cr5, {0}
3402509c:	eca4 7e88 	stc	14, cr7, [r4], #544	@ 0x220
340250a0:	f00f c015 	le	lr, 3402507c <st_f32_to_int16+0x1c>
340250a4:	eb00 1045 	add.w	r0, r0, r5, lsl #5
340250a8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
340250ac:	f012 0207 	ands.w	r2, r2, #7
340250b0:	f000 8097 	beq.w	340251e2 <st_f32_to_int16+0x182>
340250b4:	edd0 5a00 	vldr	s11, [r0]
340250b8:	ed9f 6a50 	vldr	s12, [pc, #320]	@ 340251fc <st_f32_to_int16+0x19c>
340250bc:	ee65 5a86 	vmul.f32	s11, s11, s12
340250c0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
340250c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
340250c8:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
340250cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340250d0:	fe77 7a26 	vselgt.f32	s15, s14, s13
340250d4:	ee77 7aa5 	vadd.f32	s15, s15, s11
340250d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340250dc:	ee17 3a90 	vmov	r3, s15
340250e0:	f303 030f 	ssat	r3, #16, r3
340250e4:	2a01      	cmp	r2, #1
340250e6:	800b      	strh	r3, [r1, #0]
340250e8:	d07b      	beq.n	340251e2 <st_f32_to_int16+0x182>
340250ea:	edd0 7a01 	vldr	s15, [r0, #4]
340250ee:	ee67 7a86 	vmul.f32	s15, s15, s12
340250f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340250f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340250fa:	fe77 5a26 	vselgt.f32	s11, s14, s13
340250fe:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025106:	ee17 3a90 	vmov	r3, s15
3402510a:	f303 030f 	ssat	r3, #16, r3
3402510e:	2a02      	cmp	r2, #2
34025110:	804b      	strh	r3, [r1, #2]
34025112:	d066      	beq.n	340251e2 <st_f32_to_int16+0x182>
34025114:	edd0 7a02 	vldr	s15, [r0, #8]
34025118:	ee67 7a86 	vmul.f32	s15, s15, s12
3402511c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025124:	fe77 5a26 	vselgt.f32	s11, s14, s13
34025128:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402512c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025130:	ee17 3a90 	vmov	r3, s15
34025134:	f303 030f 	ssat	r3, #16, r3
34025138:	2a03      	cmp	r2, #3
3402513a:	808b      	strh	r3, [r1, #4]
3402513c:	d051      	beq.n	340251e2 <st_f32_to_int16+0x182>
3402513e:	edd0 7a03 	vldr	s15, [r0, #12]
34025142:	ee67 7a86 	vmul.f32	s15, s15, s12
34025146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402514a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402514e:	fe77 5a26 	vselgt.f32	s11, s14, s13
34025152:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402515a:	ee17 3a90 	vmov	r3, s15
3402515e:	f303 030f 	ssat	r3, #16, r3
34025162:	2a04      	cmp	r2, #4
34025164:	80cb      	strh	r3, [r1, #6]
34025166:	d03c      	beq.n	340251e2 <st_f32_to_int16+0x182>
34025168:	edd0 7a04 	vldr	s15, [r0, #16]
3402516c:	ee67 7a86 	vmul.f32	s15, s15, s12
34025170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025178:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402517c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025184:	ee17 3a90 	vmov	r3, s15
34025188:	f303 030f 	ssat	r3, #16, r3
3402518c:	2a05      	cmp	r2, #5
3402518e:	810b      	strh	r3, [r1, #8]
34025190:	d027      	beq.n	340251e2 <st_f32_to_int16+0x182>
34025192:	edd0 7a05 	vldr	s15, [r0, #20]
34025196:	ee67 7a86 	vmul.f32	s15, s15, s12
3402519a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340251a2:	fe77 5a26 	vselgt.f32	s11, s14, s13
340251a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
340251aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340251ae:	ee17 3a90 	vmov	r3, s15
340251b2:	f303 030f 	ssat	r3, #16, r3
340251b6:	2a06      	cmp	r2, #6
340251b8:	814b      	strh	r3, [r1, #10]
340251ba:	d012      	beq.n	340251e2 <st_f32_to_int16+0x182>
340251bc:	edd0 7a06 	vldr	s15, [r0, #24]
340251c0:	ee67 7a86 	vmul.f32	s15, s15, s12
340251c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340251c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340251cc:	fe37 7a26 	vselgt.f32	s14, s14, s13
340251d0:	ee37 7a27 	vadd.f32	s14, s14, s15
340251d4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
340251d8:	ee17 3a10 	vmov	r3, s14
340251dc:	f303 030f 	ssat	r3, #16, r3
340251e0:	818b      	strh	r3, [r1, #12]
340251e2:	ecbd 8b08 	vpop	{d8-d11}
340251e6:	bd30      	pop	{r4, r5, pc}
	...
340251f8:	46fffe00 	.word	0x46fffe00
340251fc:	47000000 	.word	0x47000000

34025200 <st_f32_to_int8>:
34025200:	b530      	push	{r4, r5, lr}
34025202:	0915      	lsrs	r5, r2, #4
34025204:	ed2d 8b10 	vpush	{d8-d15}
34025208:	f000 81a3 	beq.w	34025552 <st_f32_to_int8+0x352>
3402520c:	ed9f 0bd2 	vldr	d0, [pc, #840]	@ 34025558 <st_f32_to_int8+0x358>
34025210:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 34025560 <st_f32_to_int8+0x360>
34025214:	ea4f 1e05 	mov.w	lr, r5, lsl #4
34025218:	f1ae 0e10 	sub.w	lr, lr, #16
3402521c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
34025220:	f10e 0e01 	add.w	lr, lr, #1
34025224:	4684      	mov	ip, r0
34025226:	ed9f 4bd0 	vldr	d4, [pc, #832]	@ 34025568 <st_f32_to_int8+0x368>
3402522a:	ed9f 5bd1 	vldr	d5, [pc, #836]	@ 34025570 <st_f32_to_int8+0x370>
3402522e:	f04e e001 	dls	lr, lr
34025232:	f04f 4386 	mov.w	r3, #1124073472	@ 0x43000000
34025236:	ef20 6150 	vorr	q3, q0, q0
3402523a:	eb01 1405 	add.w	r4, r1, r5, lsl #4
3402523e:	fc9c 9f01 	ldc2	15, cr9, [ip], {1}
34025242:	fc9c 9f21 	ldc2	15, cr9, [ip], {33}	@ 0x21
34025246:	fc9c 9f41 	ldc2	15, cr9, [ip], {65}	@ 0x41
3402524a:	fcbc 9f61 	ldc2	15, cr9, [ip], #388	@ 0x184
3402524e:	ee39 2e63 	cdp	14, 3, cr2, cr9, cr3, {3}
34025252:	ffbb 2042 	vcvta.s32.f32	q1, q1
34025256:	ee37 6e03 	cdp	14, 3, cr6, cr7, cr3, {0}
3402525a:	ee3b 2e63 	cdp	14, 3, cr2, cr11, cr3, {3}
3402525e:	ffbb 2042 	vcvta.s32.f32	q1, q1
34025262:	ee37 0e03 	cdp	14, 3, cr0, cr7, cr3, {0}
34025266:	ee3d 2e63 	cdp	14, 3, cr2, cr13, cr3, {3}
3402526a:	ee3f 8e63 	cdp	14, 3, cr8, cr15, cr3, {3}
3402526e:	ffbb 2042 	vcvta.s32.f32	q1, q1
34025272:	ffbb 8048 	vcvta.s32.f32	q4, q4
34025276:	ee37 7e03 	cdp	14, 3, cr7, cr7, cr3, {0}
3402527a:	ee37 1e09 	cdp	14, 3, cr1, cr7, cr9, {0}
3402527e:	ee33 4e07 	cdp	14, 3, cr4, cr3, cr7, {0}
34025282:	ee33 5e01 	cdp	14, 3, cr5, cr3, cr1, {0}
34025286:	eca1 5e10 	stc	14, cr5, [r1], #64	@ 0x40
3402528a:	f00f c029 	le	lr, 3402523e <st_f32_to_int8+0x3e>
3402528e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
34025292:	f012 030f 	ands.w	r3, r2, #15
34025296:	f000 8159 	beq.w	3402554c <st_f32_to_int8+0x34c>
3402529a:	edd0 5a00 	vldr	s11, [r0]
3402529e:	ed9f 6ab6 	vldr	s12, [pc, #728]	@ 34025578 <st_f32_to_int8+0x378>
340252a2:	ee65 5a86 	vmul.f32	s11, s11, s12
340252a6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
340252aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
340252ae:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
340252b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340252b6:	fe77 7a26 	vselgt.f32	s15, s14, s13
340252ba:	ee77 7aa5 	vadd.f32	s15, s15, s11
340252be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340252c2:	ee17 2a90 	vmov	r2, s15
340252c6:	b212      	sxth	r2, r2
340252c8:	f302 0207 	ssat	r2, #8, r2
340252cc:	2b01      	cmp	r3, #1
340252ce:	7022      	strb	r2, [r4, #0]
340252d0:	f000 813c 	beq.w	3402554c <st_f32_to_int8+0x34c>
340252d4:	edd0 7a01 	vldr	s15, [r0, #4]
340252d8:	ee67 7a86 	vmul.f32	s15, s15, s12
340252dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340252e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340252e4:	fe77 5a26 	vselgt.f32	s11, s14, s13
340252e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
340252ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340252f0:	ee17 2a90 	vmov	r2, s15
340252f4:	b212      	sxth	r2, r2
340252f6:	f302 0207 	ssat	r2, #8, r2
340252fa:	2b02      	cmp	r3, #2
340252fc:	7062      	strb	r2, [r4, #1]
340252fe:	f000 8125 	beq.w	3402554c <st_f32_to_int8+0x34c>
34025302:	edd0 7a02 	vldr	s15, [r0, #8]
34025306:	ee67 7a86 	vmul.f32	s15, s15, s12
3402530a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402530e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025312:	fe77 5a26 	vselgt.f32	s11, s14, s13
34025316:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402531a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402531e:	ee17 2a90 	vmov	r2, s15
34025322:	b212      	sxth	r2, r2
34025324:	f302 0207 	ssat	r2, #8, r2
34025328:	2b03      	cmp	r3, #3
3402532a:	70a2      	strb	r2, [r4, #2]
3402532c:	f000 810e 	beq.w	3402554c <st_f32_to_int8+0x34c>
34025330:	edd0 7a03 	vldr	s15, [r0, #12]
34025334:	ee67 7a86 	vmul.f32	s15, s15, s12
34025338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402533c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025340:	fe77 5a26 	vselgt.f32	s11, s14, s13
34025344:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402534c:	ee17 2a90 	vmov	r2, s15
34025350:	b212      	sxth	r2, r2
34025352:	f302 0207 	ssat	r2, #8, r2
34025356:	2b04      	cmp	r3, #4
34025358:	70e2      	strb	r2, [r4, #3]
3402535a:	f000 80f7 	beq.w	3402554c <st_f32_to_int8+0x34c>
3402535e:	edd0 7a04 	vldr	s15, [r0, #16]
34025362:	ee67 7a86 	vmul.f32	s15, s15, s12
34025366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
3402536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402536e:	fe77 5a26 	vselgt.f32	s11, s14, s13
34025372:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
3402537a:	ee17 2a90 	vmov	r2, s15
3402537e:	b212      	sxth	r2, r2
34025380:	f302 0207 	ssat	r2, #8, r2
34025384:	2b05      	cmp	r3, #5
34025386:	7122      	strb	r2, [r4, #4]
34025388:	f000 80e0 	beq.w	3402554c <st_f32_to_int8+0x34c>
3402538c:	edd0 7a05 	vldr	s15, [r0, #20]
34025390:	ee67 7a86 	vmul.f32	s15, s15, s12
34025394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402539c:	fe77 5a26 	vselgt.f32	s11, s14, s13
340253a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
340253a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340253a8:	ee17 2a90 	vmov	r2, s15
340253ac:	b212      	sxth	r2, r2
340253ae:	f302 0207 	ssat	r2, #8, r2
340253b2:	2b06      	cmp	r3, #6
340253b4:	7162      	strb	r2, [r4, #5]
340253b6:	f000 80c9 	beq.w	3402554c <st_f32_to_int8+0x34c>
340253ba:	edd0 7a06 	vldr	s15, [r0, #24]
340253be:	ee67 7a86 	vmul.f32	s15, s15, s12
340253c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340253c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340253ca:	fe77 5a26 	vselgt.f32	s11, s14, s13
340253ce:	ee77 7aa5 	vadd.f32	s15, s15, s11
340253d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340253d6:	ee17 2a90 	vmov	r2, s15
340253da:	b212      	sxth	r2, r2
340253dc:	f302 0207 	ssat	r2, #8, r2
340253e0:	2b07      	cmp	r3, #7
340253e2:	71a2      	strb	r2, [r4, #6]
340253e4:	f000 80b2 	beq.w	3402554c <st_f32_to_int8+0x34c>
340253e8:	edd0 7a07 	vldr	s15, [r0, #28]
340253ec:	ee67 7a86 	vmul.f32	s15, s15, s12
340253f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340253f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340253f8:	fe77 5a26 	vselgt.f32	s11, s14, s13
340253fc:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025400:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025404:	ee17 2a90 	vmov	r2, s15
34025408:	b212      	sxth	r2, r2
3402540a:	f302 0207 	ssat	r2, #8, r2
3402540e:	2b08      	cmp	r3, #8
34025410:	71e2      	strb	r2, [r4, #7]
34025412:	f000 809b 	beq.w	3402554c <st_f32_to_int8+0x34c>
34025416:	edd0 7a08 	vldr	s15, [r0, #32]
3402541a:	ee67 7a86 	vmul.f32	s15, s15, s12
3402541e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025426:	fe37 7a26 	vselgt.f32	s14, s14, s13
3402542a:	ee77 7a87 	vadd.f32	s15, s15, s14
3402542e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025432:	ee17 2a90 	vmov	r2, s15
34025436:	b212      	sxth	r2, r2
34025438:	f302 0207 	ssat	r2, #8, r2
3402543c:	2b09      	cmp	r3, #9
3402543e:	7222      	strb	r2, [r4, #8]
34025440:	f000 8084 	beq.w	3402554c <st_f32_to_int8+0x34c>
34025444:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
34025448:	ee67 7a86 	vmul.f32	s15, s15, s12
3402544c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025450:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
34025454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025458:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402545c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025464:	ee17 2a90 	vmov	r2, s15
34025468:	b212      	sxth	r2, r2
3402546a:	f302 0207 	ssat	r2, #8, r2
3402546e:	2b0a      	cmp	r3, #10
34025470:	7262      	strb	r2, [r4, #9]
34025472:	d06b      	beq.n	3402554c <st_f32_to_int8+0x34c>
34025474:	edd0 7a0a 	vldr	s15, [r0, #40]	@ 0x28
34025478:	ee67 7a86 	vmul.f32	s15, s15, s12
3402547c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025484:	fe77 5a26 	vselgt.f32	s11, s14, s13
34025488:	ee77 7aa5 	vadd.f32	s15, s15, s11
3402548c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025490:	ee17 2a90 	vmov	r2, s15
34025494:	b212      	sxth	r2, r2
34025496:	f302 0207 	ssat	r2, #8, r2
3402549a:	2b0b      	cmp	r3, #11
3402549c:	72a2      	strb	r2, [r4, #10]
3402549e:	d055      	beq.n	3402554c <st_f32_to_int8+0x34c>
340254a0:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
340254a4:	ee67 7a86 	vmul.f32	s15, s15, s12
340254a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340254ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340254b0:	fe77 5a26 	vselgt.f32	s11, s14, s13
340254b4:	ee77 7aa5 	vadd.f32	s15, s15, s11
340254b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340254bc:	ee17 2a90 	vmov	r2, s15
340254c0:	b212      	sxth	r2, r2
340254c2:	f302 0207 	ssat	r2, #8, r2
340254c6:	2b0c      	cmp	r3, #12
340254c8:	72e2      	strb	r2, [r4, #11]
340254ca:	d03f      	beq.n	3402554c <st_f32_to_int8+0x34c>
340254cc:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
340254d0:	ee67 7a86 	vmul.f32	s15, s15, s12
340254d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
340254d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
340254dc:	fe77 5a26 	vselgt.f32	s11, s14, s13
340254e0:	ee77 7aa5 	vadd.f32	s15, s15, s11
340254e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
340254e8:	ee17 2a90 	vmov	r2, s15
340254ec:	b212      	sxth	r2, r2
340254ee:	f302 0207 	ssat	r2, #8, r2
340254f2:	2b0d      	cmp	r3, #13
340254f4:	7322      	strb	r2, [r4, #12]
340254f6:	d029      	beq.n	3402554c <st_f32_to_int8+0x34c>
340254f8:	edd0 7a0d 	vldr	s15, [r0, #52]	@ 0x34
340254fc:	ee67 7a86 	vmul.f32	s15, s15, s12
34025500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
34025504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025508:	fe77 5a26 	vselgt.f32	s11, s14, s13
3402550c:	ee77 7aa5 	vadd.f32	s15, s15, s11
34025510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025514:	ee17 2a90 	vmov	r2, s15
34025518:	b212      	sxth	r2, r2
3402551a:	f302 0207 	ssat	r2, #8, r2
3402551e:	2b0e      	cmp	r3, #14
34025520:	7362      	strb	r2, [r4, #13]
34025522:	d013      	beq.n	3402554c <st_f32_to_int8+0x34c>
34025524:	edd0 7a0e 	vldr	s15, [r0, #56]	@ 0x38
34025528:	ee27 6a86 	vmul.f32	s12, s15, s12
3402552c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
34025530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025534:	fe77 7a26 	vselgt.f32	s15, s14, s13
34025538:	ee77 7a86 	vadd.f32	s15, s15, s12
3402553c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
34025540:	ee17 3a90 	vmov	r3, s15
34025544:	b21b      	sxth	r3, r3
34025546:	f303 0307 	ssat	r3, #8, r3
3402554a:	73a3      	strb	r3, [r4, #14]
3402554c:	ecbd 8b10 	vpop	{d8-d15}
34025550:	bd30      	pop	{r4, r5, pc}
34025552:	460c      	mov	r4, r1
34025554:	e69d      	b.n	34025292 <st_f32_to_int8+0x92>
34025556:	bf00      	nop
	...
34025578:	43000000 	.word	0x43000000

3402557c <st_int16_to_f32>:
3402557c:	ea5f 0c92 	movs.w	ip, r2, lsr #2
34025580:	b510      	push	{r4, lr}
34025582:	d00f      	beq.n	340255a4 <st_int16_to_f32+0x28>
34025584:	4604      	mov	r4, r0
34025586:	460b      	mov	r3, r1
34025588:	f04c e001 	dls	lr, ip
3402558c:	ecbc 6f04 	ldc	15, cr6, [ip], #16
34025590:	efb1 6e56 	vcvt.f32.s32	q3, q3, #15
34025594:	eca3 7f04 	stc	15, cr7, [r3], #16
34025598:	f00f c009 	le	lr, 3402558c <st_int16_to_f32+0x10>
3402559c:	eb01 110c 	add.w	r1, r1, ip, lsl #4
340255a0:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
340255a4:	f012 0203 	ands.w	r2, r2, #3
340255a8:	d023      	beq.n	340255f2 <st_int16_to_f32+0x76>
340255aa:	f9b0 3000 	ldrsh.w	r3, [r0]
340255ae:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 340255f4 <st_int16_to_f32+0x78>
340255b2:	ee07 3a90 	vmov	s15, r3
340255b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340255ba:	ee67 7a87 	vmul.f32	s15, s15, s14
340255be:	2a01      	cmp	r2, #1
340255c0:	edc1 7a00 	vstr	s15, [r1]
340255c4:	d015      	beq.n	340255f2 <st_int16_to_f32+0x76>
340255c6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
340255ca:	2a02      	cmp	r2, #2
340255cc:	ee07 3a90 	vmov	s15, r3
340255d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340255d4:	ee67 7a87 	vmul.f32	s15, s15, s14
340255d8:	edc1 7a01 	vstr	s15, [r1, #4]
340255dc:	d009      	beq.n	340255f2 <st_int16_to_f32+0x76>
340255de:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
340255e2:	ee07 3a90 	vmov	s15, r3
340255e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
340255ea:	ee67 7a87 	vmul.f32	s15, s15, s14
340255ee:	edc1 7a02 	vstr	s15, [r1, #8]
340255f2:	bd10      	pop	{r4, pc}
340255f4:	38000000 	.word	0x38000000

340255f8 <st_int8_to_f32>:
340255f8:	ea5f 0c92 	movs.w	ip, r2, lsr #2
340255fc:	b510      	push	{r4, lr}
340255fe:	d03e      	beq.n	3402567e <st_int8_to_f32+0x86>
34025600:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
34025604:	f1ae 0e04 	sub.w	lr, lr, #4
34025608:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
3402560c:	f10e 0e01 	add.w	lr, lr, #1
34025610:	460b      	mov	r3, r1
34025612:	f04e e001 	dls	lr, lr
34025616:	eb00 048c 	add.w	r4, r0, ip, lsl #2
3402561a:	ecb0 6f04 	ldc	15, cr6, [r0], #16
3402561e:	efb9 6e56 	vcvt.f32.s32	q3, q3, #7
34025622:	eca3 7f04 	stc	15, cr7, [r3], #16
34025626:	f00f c009 	le	lr, 3402561a <st_int8_to_f32+0x22>
3402562a:	eb01 110c 	add.w	r1, r1, ip, lsl #4
3402562e:	f012 0203 	ands.w	r2, r2, #3
34025632:	d023      	beq.n	3402567c <st_int8_to_f32+0x84>
34025634:	f994 3000 	ldrsb.w	r3, [r4]
34025638:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 34025684 <st_int8_to_f32+0x8c>
3402563c:	ee07 3a90 	vmov	s15, r3
34025640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34025644:	ee67 7a87 	vmul.f32	s15, s15, s14
34025648:	2a01      	cmp	r2, #1
3402564a:	edc1 7a00 	vstr	s15, [r1]
3402564e:	d015      	beq.n	3402567c <st_int8_to_f32+0x84>
34025650:	f994 3001 	ldrsb.w	r3, [r4, #1]
34025654:	2a02      	cmp	r2, #2
34025656:	ee07 3a90 	vmov	s15, r3
3402565a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3402565e:	ee67 7a87 	vmul.f32	s15, s15, s14
34025662:	edc1 7a01 	vstr	s15, [r1, #4]
34025666:	d009      	beq.n	3402567c <st_int8_to_f32+0x84>
34025668:	f994 3002 	ldrsb.w	r3, [r4, #2]
3402566c:	ee07 3a90 	vmov	s15, r3
34025670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
34025674:	ee67 7a87 	vmul.f32	s15, s15, s14
34025678:	edc1 7a02 	vstr	s15, [r1, #8]
3402567c:	bd10      	pop	{r4, pc}
3402567e:	4604      	mov	r4, r0
34025680:	e7d5      	b.n	3402562e <st_int8_to_f32+0x36>
34025682:	bf00      	nop
34025684:	3c000000 	.word	0x3c000000

34025688 <st_int8_copy>:
34025688:	4288      	cmp	r0, r1
3402568a:	d05b      	beq.n	34025744 <st_int8_copy+0xbc>
3402568c:	2a00      	cmp	r2, #0
3402568e:	d059      	beq.n	34025744 <st_int8_copy+0xbc>
34025690:	4288      	cmp	r0, r1
34025692:	b530      	push	{r4, r5, lr}
34025694:	d347      	bcc.n	34025726 <st_int8_copy+0x9e>
34025696:	078d      	lsls	r5, r1, #30
34025698:	4613      	mov	r3, r2
3402569a:	d102      	bne.n	340256a2 <st_int8_copy+0x1a>
3402569c:	e008      	b.n	340256b0 <st_int8_copy+0x28>
3402569e:	3b01      	subs	r3, #1
340256a0:	d040      	beq.n	34025724 <st_int8_copy+0x9c>
340256a2:	f910 cb01 	ldrsb.w	ip, [r0], #1
340256a6:	3a01      	subs	r2, #1
340256a8:	f801 cb01 	strb.w	ip, [r1], #1
340256ac:	078c      	lsls	r4, r1, #30
340256ae:	d1f6      	bne.n	3402569e <st_int8_copy+0x16>
340256b0:	0914      	lsrs	r4, r2, #4
340256b2:	f3c2 0581 	ubfx	r5, r2, #2, #2
340256b6:	f002 0203 	and.w	r2, r2, #3
340256ba:	b1b4      	cbz	r4, 340256ea <st_int8_copy+0x62>
340256bc:	ea4f 1e04 	mov.w	lr, r4, lsl #4
340256c0:	f1ae 0e10 	sub.w	lr, lr, #16
340256c4:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
340256c8:	f10e 0e01 	add.w	lr, lr, #1
340256cc:	4603      	mov	r3, r0
340256ce:	f04e e001 	dls	lr, lr
340256d2:	ea4f 1c04 	mov.w	ip, r4, lsl #4
340256d6:	eb01 1404 	add.w	r4, r1, r4, lsl #4
340256da:	ecb3 7e10 	ldc	14, cr7, [r3], #64	@ 0x40
340256de:	eca1 7e10 	stc	14, cr7, [r1], #64	@ 0x40
340256e2:	f00f c007 	le	lr, 340256da <st_int8_copy+0x52>
340256e6:	4621      	mov	r1, r4
340256e8:	4460      	add	r0, ip
340256ea:	b16d      	cbz	r5, 34025708 <st_int8_copy+0x80>
340256ec:	6803      	ldr	r3, [r0, #0]
340256ee:	2d01      	cmp	r5, #1
340256f0:	600b      	str	r3, [r1, #0]
340256f2:	d005      	beq.n	34025700 <st_int8_copy+0x78>
340256f4:	6843      	ldr	r3, [r0, #4]
340256f6:	2d02      	cmp	r5, #2
340256f8:	604b      	str	r3, [r1, #4]
340256fa:	bf1c      	itt	ne
340256fc:	6883      	ldrne	r3, [r0, #8]
340256fe:	608b      	strne	r3, [r1, #8]
34025700:	eb01 0185 	add.w	r1, r1, r5, lsl #2
34025704:	eb00 0085 	add.w	r0, r0, r5, lsl #2
34025708:	b162      	cbz	r2, 34025724 <st_int8_copy+0x9c>
3402570a:	f990 3000 	ldrsb.w	r3, [r0]
3402570e:	2a01      	cmp	r2, #1
34025710:	700b      	strb	r3, [r1, #0]
34025712:	d007      	beq.n	34025724 <st_int8_copy+0x9c>
34025714:	f990 3001 	ldrsb.w	r3, [r0, #1]
34025718:	2a02      	cmp	r2, #2
3402571a:	704b      	strb	r3, [r1, #1]
3402571c:	bf1c      	itt	ne
3402571e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
34025722:	708b      	strbne	r3, [r1, #2]
34025724:	bd30      	pop	{r4, r5, pc}
34025726:	1883      	adds	r3, r0, r2
34025728:	428b      	cmp	r3, r1
3402572a:	d9b4      	bls.n	34025696 <st_int8_copy+0xe>
3402572c:	eba3 0e00 	sub.w	lr, r3, r0
34025730:	f04e e001 	dls	lr, lr
34025734:	4411      	add	r1, r2
34025736:	f913 2d01 	ldrsb.w	r2, [r3, #-1]!
3402573a:	f801 2d01 	strb.w	r2, [r1, #-1]!
3402573e:	f00f c007 	le	lr, 34025736 <st_int8_copy+0xae>
34025742:	bd30      	pop	{r4, r5, pc}
34025744:	4770      	bx	lr
34025746:	bf00      	nop

34025748 <lite_upsample_zeros_ix8ox8_kernel>:
34025748:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
3402574c:	ee30 0a67 	vsub.f32	s0, s0, s15
34025750:	ee70 0ae7 	vsub.f32	s1, s1, s15
34025754:	eefc 7ac0 	vcvt.u32.f32	s15, s0
34025758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3402575c:	ee17 7a90 	vmov	r7, s15
34025760:	eefc 7ae0 	vcvt.u32.f32	s15, s1
34025764:	4692      	mov	sl, r2
34025766:	461d      	mov	r5, r3
34025768:	ee17 2a90 	vmov	r2, s15
3402576c:	b087      	sub	sp, #28
3402576e:	9303      	str	r3, [sp, #12]
34025770:	460b      	mov	r3, r1
34025772:	fb07 a10a 	mla	r1, r7, sl, sl
34025776:	9100      	str	r1, [sp, #0]
34025778:	fb02 5105 	mla	r1, r2, r5, r5
3402577c:	f99d 404c 	ldrsb.w	r4, [sp, #76]	@ 0x4c
34025780:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
34025784:	9104      	str	r1, [sp, #16]
34025786:	2d00      	cmp	r5, #0
34025788:	d05a      	beq.n	34025840 <lite_upsample_zeros_ix8ox8_kernel+0xf8>
3402578a:	f04f 0800 	mov.w	r8, #0
3402578e:	9910      	ldr	r1, [sp, #64]	@ 0x40
34025790:	fb09 f707 	mul.w	r7, r9, r7
34025794:	fb09 f101 	mul.w	r1, r9, r1
34025798:	fb02 f201 	mul.w	r2, r2, r1
3402579c:	9205      	str	r2, [sp, #20]
3402579e:	1e7a      	subs	r2, r7, #1
340257a0:	f022 020f 	bic.w	r2, r2, #15
340257a4:	f109 31ff 	add.w	r1, r9, #4294967295
340257a8:	f1a7 0610 	sub.w	r6, r7, #16
340257ac:	eee4 4b10 	vdup.8	q2, r4
340257b0:	f021 010f 	bic.w	r1, r1, #15
340257b4:	f1a9 0410 	sub.w	r4, r9, #16
340257b8:	1ab6      	subs	r6, r6, r2
340257ba:	1e6a      	subs	r2, r5, #1
340257bc:	1a64      	subs	r4, r4, r1
340257be:	9202      	str	r2, [sp, #8]
340257c0:	f1ba 0f00 	cmp.w	sl, #0
340257c4:	d030      	beq.n	34025828 <lite_upsample_zeros_ix8ox8_kernel+0xe0>
340257c6:	f04f 0e00 	mov.w	lr, #0
340257ca:	f10a 3bff 	add.w	fp, sl, #4294967295
340257ce:	f009 0c0f 	and.w	ip, r9, #15
340257d2:	f8cd 8004 	str.w	r8, [sp, #4]
340257d6:	f1b9 0f00 	cmp.w	r9, #0
340257da:	dd19      	ble.n	34025810 <lite_upsample_zeros_ix8ox8_kernel+0xc8>
340257dc:	4649      	mov	r1, r9
340257de:	f001 e801 	bfcsel	0, 340247e4 <_lite_resize_init+0x74>, 2, eq
340257e2:	eefd 2a10 	vmrs	r2, <impl def 0xd>
340257e6:	b212      	sxth	r2, r2
340257e8:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340257ec:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340257f0:	ed90 7e00 	ldc	14, cr7, [r0]
340257f4:	458c      	cmp	ip, r1
340257f6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340257fa:	ed83 7e00 	stc	14, cr7, [r3]
340257fe:	f1a1 0110 	sub.w	r1, r1, #16
34025802:	d020      	beq.n	34025846 <lite_upsample_zeros_ix8ox8_kernel+0xfe>
34025804:	42a1      	cmp	r1, r4
34025806:	f103 0310 	add.w	r3, r3, #16
3402580a:	f100 0010 	add.w	r0, r0, #16
3402580e:	d1e6      	bne.n	340257de <lite_upsample_zeros_ix8ox8_kernel+0x96>
34025810:	45f3      	cmp	fp, lr
34025812:	d11c      	bne.n	3402584e <lite_upsample_zeros_ix8ox8_kernel+0x106>
34025814:	9a00      	ldr	r2, [sp, #0]
34025816:	9910      	ldr	r1, [sp, #64]	@ 0x40
34025818:	428a      	cmp	r2, r1
3402581a:	d918      	bls.n	3402584e <lite_upsample_zeros_ix8ox8_kernel+0x106>
3402581c:	f10e 0e01 	add.w	lr, lr, #1
34025820:	45f2      	cmp	sl, lr
34025822:	d1d8      	bne.n	340257d6 <lite_upsample_zeros_ix8ox8_kernel+0x8e>
34025824:	f8dd 8004 	ldr.w	r8, [sp, #4]
34025828:	9a02      	ldr	r2, [sp, #8]
3402582a:	4542      	cmp	r2, r8
3402582c:	d12c      	bne.n	34025888 <lite_upsample_zeros_ix8ox8_kernel+0x140>
3402582e:	9a04      	ldr	r2, [sp, #16]
34025830:	9911      	ldr	r1, [sp, #68]	@ 0x44
34025832:	428a      	cmp	r2, r1
34025834:	d928      	bls.n	34025888 <lite_upsample_zeros_ix8ox8_kernel+0x140>
34025836:	9a03      	ldr	r2, [sp, #12]
34025838:	f108 0801 	add.w	r8, r8, #1
3402583c:	4542      	cmp	r2, r8
3402583e:	d1bf      	bne.n	340257c0 <lite_upsample_zeros_ix8ox8_kernel+0x78>
34025840:	b007      	add	sp, #28
34025842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34025846:	45f3      	cmp	fp, lr
34025848:	4463      	add	r3, ip
3402584a:	4460      	add	r0, ip
3402584c:	d0e2      	beq.n	34025814 <lite_upsample_zeros_ix8ox8_kernel+0xcc>
3402584e:	2f00      	cmp	r7, #0
34025850:	dde4      	ble.n	3402581c <lite_upsample_zeros_ix8ox8_kernel+0xd4>
34025852:	4639      	mov	r1, r7
34025854:	093d      	lsrs	r5, r7, #4
34025856:	3501      	adds	r5, #1
34025858:	f007 080f 	and.w	r8, r7, #15
3402585c:	f001 e801 	bfcsel	0, 34024862 <_lite_resize_init+0xf2>, 2, eq
34025860:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34025864:	b292      	uxth	r2, r2
34025866:	eeed 2a10 	vmsr	<impl def 0xd>, r2
3402586a:	3d01      	subs	r5, #1
3402586c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025870:	ed83 5e00 	stc	14, cr5, [r3]
34025874:	f1a1 0110 	sub.w	r1, r1, #16
34025878:	d004      	beq.n	34025884 <lite_upsample_zeros_ix8ox8_kernel+0x13c>
3402587a:	42b1      	cmp	r1, r6
3402587c:	f103 0310 	add.w	r3, r3, #16
34025880:	d1ec      	bne.n	3402585c <lite_upsample_zeros_ix8ox8_kernel+0x114>
34025882:	e7cb      	b.n	3402581c <lite_upsample_zeros_ix8ox8_kernel+0xd4>
34025884:	4443      	add	r3, r8
34025886:	e7c9      	b.n	3402581c <lite_upsample_zeros_ix8ox8_kernel+0xd4>
34025888:	9d05      	ldr	r5, [sp, #20]
3402588a:	2d00      	cmp	r5, #0
3402588c:	ddd3      	ble.n	34025836 <lite_upsample_zeros_ix8ox8_kernel+0xee>
3402588e:	4629      	mov	r1, r5
34025890:	1e6a      	subs	r2, r5, #1
34025892:	f1a5 0c10 	sub.w	ip, r5, #16
34025896:	f022 020f 	bic.w	r2, r2, #15
3402589a:	092d      	lsrs	r5, r5, #4
3402589c:	ebac 0c02 	sub.w	ip, ip, r2
340258a0:	3501      	adds	r5, #1
340258a2:	f001 0e0f 	and.w	lr, r1, #15
340258a6:	f001 e801 	bfcsel	0, 340248ac <_lite_resize_init+0x13c>, 2, eq
340258aa:	eefd 2a10 	vmrs	r2, <impl def 0xd>
340258ae:	b292      	uxth	r2, r2
340258b0:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340258b4:	3d01      	subs	r5, #1
340258b6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
340258ba:	ed83 5e00 	stc	14, cr5, [r3]
340258be:	f1a1 0110 	sub.w	r1, r1, #16
340258c2:	d004      	beq.n	340258ce <lite_upsample_zeros_ix8ox8_kernel+0x186>
340258c4:	4561      	cmp	r1, ip
340258c6:	f103 0310 	add.w	r3, r3, #16
340258ca:	d1ec      	bne.n	340258a6 <lite_upsample_zeros_ix8ox8_kernel+0x15e>
340258cc:	e7b3      	b.n	34025836 <lite_upsample_zeros_ix8ox8_kernel+0xee>
340258ce:	4473      	add	r3, lr
340258d0:	e7b1      	b.n	34025836 <lite_upsample_zeros_ix8ox8_kernel+0xee>
340258d2:	bf00      	nop

340258d4 <lite_upsample_zeros_ix16ox16_kernel>:
340258d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
340258d8:	ee30 0a67 	vsub.f32	s0, s0, s15
340258dc:	ee70 0ae7 	vsub.f32	s1, s1, s15
340258e0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
340258e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340258e8:	ee17 7a90 	vmov	r7, s15
340258ec:	eefc 7ae0 	vcvt.u32.f32	s15, s1
340258f0:	4692      	mov	sl, r2
340258f2:	461d      	mov	r5, r3
340258f4:	ee17 2a90 	vmov	r2, s15
340258f8:	b087      	sub	sp, #28
340258fa:	9303      	str	r3, [sp, #12]
340258fc:	460b      	mov	r3, r1
340258fe:	fb07 a10a 	mla	r1, r7, sl, sl
34025902:	9100      	str	r1, [sp, #0]
34025904:	fb02 5105 	mla	r1, r2, r5, r5
34025908:	f9bd 404c 	ldrsh.w	r4, [sp, #76]	@ 0x4c
3402590c:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
34025910:	9104      	str	r1, [sp, #16]
34025912:	2d00      	cmp	r5, #0
34025914:	d05a      	beq.n	340259cc <lite_upsample_zeros_ix16ox16_kernel+0xf8>
34025916:	f04f 0800 	mov.w	r8, #0
3402591a:	9910      	ldr	r1, [sp, #64]	@ 0x40
3402591c:	fb09 f707 	mul.w	r7, r9, r7
34025920:	fb09 f101 	mul.w	r1, r9, r1
34025924:	fb02 f201 	mul.w	r2, r2, r1
34025928:	9205      	str	r2, [sp, #20]
3402592a:	1e7a      	subs	r2, r7, #1
3402592c:	f022 0207 	bic.w	r2, r2, #7
34025930:	f109 31ff 	add.w	r1, r9, #4294967295
34025934:	f1a7 0608 	sub.w	r6, r7, #8
34025938:	eea4 4b30 	vdup.16	q2, r4
3402593c:	f021 0107 	bic.w	r1, r1, #7
34025940:	f1a9 0408 	sub.w	r4, r9, #8
34025944:	1ab6      	subs	r6, r6, r2
34025946:	1e6a      	subs	r2, r5, #1
34025948:	1a64      	subs	r4, r4, r1
3402594a:	9202      	str	r2, [sp, #8]
3402594c:	f1ba 0f00 	cmp.w	sl, #0
34025950:	d030      	beq.n	340259b4 <lite_upsample_zeros_ix16ox16_kernel+0xe0>
34025952:	f04f 0e00 	mov.w	lr, #0
34025956:	f10a 3bff 	add.w	fp, sl, #4294967295
3402595a:	f009 0c07 	and.w	ip, r9, #7
3402595e:	f8cd 8004 	str.w	r8, [sp, #4]
34025962:	f1b9 0f00 	cmp.w	r9, #0
34025966:	dd19      	ble.n	3402599c <lite_upsample_zeros_ix16ox16_kernel+0xc8>
34025968:	4649      	mov	r1, r9
3402596a:	f011 e801 	bfcsel	0, 34024970 <_lite_resize_init+0x200>, 2, mi
3402596e:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34025972:	b212      	sxth	r2, r2
34025974:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34025978:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
3402597c:	ed90 7e80 	ldc	14, cr7, [r0, #512]	@ 0x200
34025980:	458c      	cmp	ip, r1
34025982:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025986:	ed83 7e80 	stc	14, cr7, [r3, #512]	@ 0x200
3402598a:	f1a1 0108 	sub.w	r1, r1, #8
3402598e:	d020      	beq.n	340259d2 <lite_upsample_zeros_ix16ox16_kernel+0xfe>
34025990:	42a1      	cmp	r1, r4
34025992:	f103 0310 	add.w	r3, r3, #16
34025996:	f100 0010 	add.w	r0, r0, #16
3402599a:	d1e6      	bne.n	3402596a <lite_upsample_zeros_ix16ox16_kernel+0x96>
3402599c:	45f3      	cmp	fp, lr
3402599e:	d11e      	bne.n	340259de <lite_upsample_zeros_ix16ox16_kernel+0x10a>
340259a0:	9a00      	ldr	r2, [sp, #0]
340259a2:	9910      	ldr	r1, [sp, #64]	@ 0x40
340259a4:	428a      	cmp	r2, r1
340259a6:	d91a      	bls.n	340259de <lite_upsample_zeros_ix16ox16_kernel+0x10a>
340259a8:	f10e 0e01 	add.w	lr, lr, #1
340259ac:	45f2      	cmp	sl, lr
340259ae:	d1d8      	bne.n	34025962 <lite_upsample_zeros_ix16ox16_kernel+0x8e>
340259b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
340259b4:	9a02      	ldr	r2, [sp, #8]
340259b6:	4542      	cmp	r2, r8
340259b8:	d12f      	bne.n	34025a1a <lite_upsample_zeros_ix16ox16_kernel+0x146>
340259ba:	9a04      	ldr	r2, [sp, #16]
340259bc:	9911      	ldr	r1, [sp, #68]	@ 0x44
340259be:	428a      	cmp	r2, r1
340259c0:	d92b      	bls.n	34025a1a <lite_upsample_zeros_ix16ox16_kernel+0x146>
340259c2:	9a03      	ldr	r2, [sp, #12]
340259c4:	f108 0801 	add.w	r8, r8, #1
340259c8:	4542      	cmp	r2, r8
340259ca:	d1bf      	bne.n	3402594c <lite_upsample_zeros_ix16ox16_kernel+0x78>
340259cc:	b007      	add	sp, #28
340259ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
340259d2:	45f3      	cmp	fp, lr
340259d4:	eb03 034c 	add.w	r3, r3, ip, lsl #1
340259d8:	eb00 004c 	add.w	r0, r0, ip, lsl #1
340259dc:	d0e0      	beq.n	340259a0 <lite_upsample_zeros_ix16ox16_kernel+0xcc>
340259de:	2f00      	cmp	r7, #0
340259e0:	dde2      	ble.n	340259a8 <lite_upsample_zeros_ix16ox16_kernel+0xd4>
340259e2:	4639      	mov	r1, r7
340259e4:	08fd      	lsrs	r5, r7, #3
340259e6:	3501      	adds	r5, #1
340259e8:	f007 0807 	and.w	r8, r7, #7
340259ec:	f011 e801 	bfcsel	0, 340249f2 <_lite_resize_init+0x282>, 2, mi
340259f0:	eefd 2a10 	vmrs	r2, <impl def 0xd>
340259f4:	b292      	uxth	r2, r2
340259f6:	eeed 2a10 	vmsr	<impl def 0xd>, r2
340259fa:	3d01      	subs	r5, #1
340259fc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025a00:	ed83 5e80 	stc	14, cr5, [r3, #512]	@ 0x200
34025a04:	f1a1 0108 	sub.w	r1, r1, #8
34025a08:	d004      	beq.n	34025a14 <lite_upsample_zeros_ix16ox16_kernel+0x140>
34025a0a:	42b1      	cmp	r1, r6
34025a0c:	f103 0310 	add.w	r3, r3, #16
34025a10:	d1ec      	bne.n	340259ec <lite_upsample_zeros_ix16ox16_kernel+0x118>
34025a12:	e7c9      	b.n	340259a8 <lite_upsample_zeros_ix16ox16_kernel+0xd4>
34025a14:	eb03 0348 	add.w	r3, r3, r8, lsl #1
34025a18:	e7c6      	b.n	340259a8 <lite_upsample_zeros_ix16ox16_kernel+0xd4>
34025a1a:	9d05      	ldr	r5, [sp, #20]
34025a1c:	2d00      	cmp	r5, #0
34025a1e:	ddd0      	ble.n	340259c2 <lite_upsample_zeros_ix16ox16_kernel+0xee>
34025a20:	4629      	mov	r1, r5
34025a22:	1e6a      	subs	r2, r5, #1
34025a24:	f1a5 0c08 	sub.w	ip, r5, #8
34025a28:	f022 0207 	bic.w	r2, r2, #7
34025a2c:	08ed      	lsrs	r5, r5, #3
34025a2e:	ebac 0c02 	sub.w	ip, ip, r2
34025a32:	3501      	adds	r5, #1
34025a34:	f001 0e07 	and.w	lr, r1, #7
34025a38:	f011 e801 	bfcsel	0, 34024a3e <_lite_resize_init+0x2ce>, 2, mi
34025a3c:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34025a40:	b292      	uxth	r2, r2
34025a42:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34025a46:	3d01      	subs	r5, #1
34025a48:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025a4c:	ed83 5e80 	stc	14, cr5, [r3, #512]	@ 0x200
34025a50:	f1a1 0108 	sub.w	r1, r1, #8
34025a54:	d004      	beq.n	34025a60 <lite_upsample_zeros_ix16ox16_kernel+0x18c>
34025a56:	4561      	cmp	r1, ip
34025a58:	f103 0310 	add.w	r3, r3, #16
34025a5c:	d1ec      	bne.n	34025a38 <lite_upsample_zeros_ix16ox16_kernel+0x164>
34025a5e:	e7b0      	b.n	340259c2 <lite_upsample_zeros_ix16ox16_kernel+0xee>
34025a60:	eb03 034e 	add.w	r3, r3, lr, lsl #1
34025a64:	e7ad      	b.n	340259c2 <lite_upsample_zeros_ix16ox16_kernel+0xee>
34025a66:	bf00      	nop

34025a68 <lite_upsample_zeros_if32of32_kernel>:
34025a68:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34025a6c:	ee30 0a67 	vsub.f32	s0, s0, s15
34025a70:	ee70 0ae7 	vsub.f32	s1, s1, s15
34025a74:	eefc 7ac0 	vcvt.u32.f32	s15, s0
34025a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34025a7c:	ee17 7a90 	vmov	r7, s15
34025a80:	eefc 7ae0 	vcvt.u32.f32	s15, s1
34025a84:	4692      	mov	sl, r2
34025a86:	461d      	mov	r5, r3
34025a88:	ee17 2a90 	vmov	r2, s15
34025a8c:	b087      	sub	sp, #28
34025a8e:	9303      	str	r3, [sp, #12]
34025a90:	460b      	mov	r3, r1
34025a92:	fb07 a10a 	mla	r1, r7, sl, sl
34025a96:	9100      	str	r1, [sp, #0]
34025a98:	fb02 5105 	mla	r1, r2, r5, r5
34025a9c:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
34025aa0:	9104      	str	r1, [sp, #16]
34025aa2:	2d00      	cmp	r5, #0
34025aa4:	d05a      	beq.n	34025b5c <lite_upsample_zeros_if32of32_kernel+0xf4>
34025aa6:	2400      	movs	r4, #0
34025aa8:	f04f 0800 	mov.w	r8, #0
34025aac:	9910      	ldr	r1, [sp, #64]	@ 0x40
34025aae:	fb09 f707 	mul.w	r7, r9, r7
34025ab2:	fb09 f101 	mul.w	r1, r9, r1
34025ab6:	fb02 f201 	mul.w	r2, r2, r1
34025aba:	9205      	str	r2, [sp, #20]
34025abc:	1e7a      	subs	r2, r7, #1
34025abe:	f022 0203 	bic.w	r2, r2, #3
34025ac2:	f109 31ff 	add.w	r1, r9, #4294967295
34025ac6:	1f3e      	subs	r6, r7, #4
34025ac8:	eea4 4b10 	vdup.32	q2, r4
34025acc:	f021 0103 	bic.w	r1, r1, #3
34025ad0:	f1a9 0404 	sub.w	r4, r9, #4
34025ad4:	1ab6      	subs	r6, r6, r2
34025ad6:	1e6a      	subs	r2, r5, #1
34025ad8:	1a64      	subs	r4, r4, r1
34025ada:	9202      	str	r2, [sp, #8]
34025adc:	f1ba 0f00 	cmp.w	sl, #0
34025ae0:	d030      	beq.n	34025b44 <lite_upsample_zeros_if32of32_kernel+0xdc>
34025ae2:	f04f 0e00 	mov.w	lr, #0
34025ae6:	f10a 3bff 	add.w	fp, sl, #4294967295
34025aea:	f009 0c03 	and.w	ip, r9, #3
34025aee:	f8cd 8004 	str.w	r8, [sp, #4]
34025af2:	f1b9 0f00 	cmp.w	r9, #0
34025af6:	dd19      	ble.n	34025b2c <lite_upsample_zeros_if32of32_kernel+0xc4>
34025af8:	4649      	mov	r1, r9
34025afa:	f021 e801 	bfcsel	0, 34024b00 <forward_lite_resize_bilinear_is8os8+0x78>, 2, hi
34025afe:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34025b02:	b212      	sxth	r2, r2
34025b04:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34025b08:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025b0c:	ed90 7f00 	ldc	15, cr7, [r0]
34025b10:	458c      	cmp	ip, r1
34025b12:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025b16:	ed83 7f00 	stc	15, cr7, [r3]
34025b1a:	f1a1 0104 	sub.w	r1, r1, #4
34025b1e:	d020      	beq.n	34025b62 <lite_upsample_zeros_if32of32_kernel+0xfa>
34025b20:	42a1      	cmp	r1, r4
34025b22:	f103 0310 	add.w	r3, r3, #16
34025b26:	f100 0010 	add.w	r0, r0, #16
34025b2a:	d1e6      	bne.n	34025afa <lite_upsample_zeros_if32of32_kernel+0x92>
34025b2c:	45f3      	cmp	fp, lr
34025b2e:	d11e      	bne.n	34025b6e <lite_upsample_zeros_if32of32_kernel+0x106>
34025b30:	9a00      	ldr	r2, [sp, #0]
34025b32:	9910      	ldr	r1, [sp, #64]	@ 0x40
34025b34:	428a      	cmp	r2, r1
34025b36:	d91a      	bls.n	34025b6e <lite_upsample_zeros_if32of32_kernel+0x106>
34025b38:	f10e 0e01 	add.w	lr, lr, #1
34025b3c:	45f2      	cmp	sl, lr
34025b3e:	d1d8      	bne.n	34025af2 <lite_upsample_zeros_if32of32_kernel+0x8a>
34025b40:	f8dd 8004 	ldr.w	r8, [sp, #4]
34025b44:	9a02      	ldr	r2, [sp, #8]
34025b46:	4542      	cmp	r2, r8
34025b48:	d12f      	bne.n	34025baa <lite_upsample_zeros_if32of32_kernel+0x142>
34025b4a:	9a04      	ldr	r2, [sp, #16]
34025b4c:	9911      	ldr	r1, [sp, #68]	@ 0x44
34025b4e:	428a      	cmp	r2, r1
34025b50:	d92b      	bls.n	34025baa <lite_upsample_zeros_if32of32_kernel+0x142>
34025b52:	9a03      	ldr	r2, [sp, #12]
34025b54:	f108 0801 	add.w	r8, r8, #1
34025b58:	4542      	cmp	r2, r8
34025b5a:	d1bf      	bne.n	34025adc <lite_upsample_zeros_if32of32_kernel+0x74>
34025b5c:	b007      	add	sp, #28
34025b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34025b62:	45f3      	cmp	fp, lr
34025b64:	eb03 038c 	add.w	r3, r3, ip, lsl #2
34025b68:	eb00 008c 	add.w	r0, r0, ip, lsl #2
34025b6c:	d0e0      	beq.n	34025b30 <lite_upsample_zeros_if32of32_kernel+0xc8>
34025b6e:	2f00      	cmp	r7, #0
34025b70:	dde2      	ble.n	34025b38 <lite_upsample_zeros_if32of32_kernel+0xd0>
34025b72:	4639      	mov	r1, r7
34025b74:	08bd      	lsrs	r5, r7, #2
34025b76:	3501      	adds	r5, #1
34025b78:	f007 0803 	and.w	r8, r7, #3
34025b7c:	f021 e801 	bfcsel	0, 34024b82 <forward_lite_resize_bilinear_is8os8+0xfa>, 2, hi
34025b80:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34025b84:	b292      	uxth	r2, r2
34025b86:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34025b8a:	3d01      	subs	r5, #1
34025b8c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025b90:	ed83 5f00 	stc	15, cr5, [r3]
34025b94:	f1a1 0104 	sub.w	r1, r1, #4
34025b98:	d004      	beq.n	34025ba4 <lite_upsample_zeros_if32of32_kernel+0x13c>
34025b9a:	42b1      	cmp	r1, r6
34025b9c:	f103 0310 	add.w	r3, r3, #16
34025ba0:	d1ec      	bne.n	34025b7c <lite_upsample_zeros_if32of32_kernel+0x114>
34025ba2:	e7c9      	b.n	34025b38 <lite_upsample_zeros_if32of32_kernel+0xd0>
34025ba4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
34025ba8:	e7c6      	b.n	34025b38 <lite_upsample_zeros_if32of32_kernel+0xd0>
34025baa:	9d05      	ldr	r5, [sp, #20]
34025bac:	2d00      	cmp	r5, #0
34025bae:	ddd0      	ble.n	34025b52 <lite_upsample_zeros_if32of32_kernel+0xea>
34025bb0:	4629      	mov	r1, r5
34025bb2:	1e6a      	subs	r2, r5, #1
34025bb4:	f1a5 0c04 	sub.w	ip, r5, #4
34025bb8:	f022 0203 	bic.w	r2, r2, #3
34025bbc:	08ad      	lsrs	r5, r5, #2
34025bbe:	ebac 0c02 	sub.w	ip, ip, r2
34025bc2:	3501      	adds	r5, #1
34025bc4:	f001 0e03 	and.w	lr, r1, #3
34025bc8:	f021 e801 	bfcsel	0, 34024bce <forward_lite_resize_bilinear_is8os8+0x146>, 2, hi
34025bcc:	eefd 2a10 	vmrs	r2, <impl def 0xd>
34025bd0:	b292      	uxth	r2, r2
34025bd2:	eeed 2a10 	vmsr	<impl def 0xd>, r2
34025bd6:	3d01      	subs	r5, #1
34025bd8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025bdc:	ed83 5f00 	stc	15, cr5, [r3]
34025be0:	f1a1 0104 	sub.w	r1, r1, #4
34025be4:	d004      	beq.n	34025bf0 <lite_upsample_zeros_if32of32_kernel+0x188>
34025be6:	4561      	cmp	r1, ip
34025be8:	f103 0310 	add.w	r3, r3, #16
34025bec:	d1ec      	bne.n	34025bc8 <lite_upsample_zeros_if32of32_kernel+0x160>
34025bee:	e7b0      	b.n	34025b52 <lite_upsample_zeros_if32of32_kernel+0xea>
34025bf0:	eb03 038e 	add.w	r3, r3, lr, lsl #2
34025bf4:	e7ad      	b.n	34025b52 <lite_upsample_zeros_if32of32_kernel+0xea>
34025bf6:	bf00      	nop

34025bf8 <lite_bilinear_is8os8_kernel>:
34025bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34025bfc:	ed2d 8b10 	vpush	{d8-d15}
34025c00:	2a00      	cmp	r2, #0
34025c02:	b085      	sub	sp, #20
34025c04:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
34025c06:	f340 8084 	ble.w	34025d12 <lite_bilinear_is8os8_kernel+0x11a>
34025c0a:	eb01 0902 	add.w	r9, r1, r2
34025c0e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
34025c12:	eeae 1b10 	vdup.32	q7, r1
34025c16:	217f      	movs	r1, #127	@ 0x7f
34025c18:	eea6 1b10 	vdup.32	q3, r1
34025c1c:	4669      	mov	r1, sp
34025c1e:	f102 3eff 	add.w	lr, r2, #4294967295
34025c22:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
34025c26:	f10e 0e01 	add.w	lr, lr, #1
34025c2a:	f04e e001 	dls	lr, lr
34025c2e:	ed81 7f00 	stc	15, cr7, [r1]
34025c32:	eb00 0802 	add.w	r8, r0, r2
34025c36:	f022 e801 	bfcsel	0, 34025c3c <lite_bilinear_is8os8_kernel+0x44>, 4, hi
34025c3a:	eefd 1a10 	vmrs	r1, <impl def 0xd>
34025c3e:	b209      	sxth	r1, r1
34025c40:	eeed 1a10 	vmsr	<impl def 0xd>, r1
34025c44:	681c      	ldr	r4, [r3, #0]
34025c46:	eba8 0602 	sub.w	r6, r8, r2
34025c4a:	6858      	ldr	r0, [r3, #4]
34025c4c:	eb06 0a04 	add.w	sl, r6, r4
34025c50:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c54:	ed96 af00 	ldc	15, cr10, [r6]
34025c58:	1837      	adds	r7, r6, r0
34025c5a:	ef24 c154 	vorr	q6, q2, q2
34025c5e:	4656      	mov	r6, sl
34025c60:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c64:	ffbb c64a 	vcvt.f32.s32	q6, q5
34025c68:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c6c:	ed96 8f00 	ldc	15, cr8, [r6]
34025c70:	ef24 a154 	vorr	q5, q2, q2
34025c74:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c78:	ed97 0f00 	ldc	15, cr0, [r7]
34025c7c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c80:	ffbb a648 	vcvt.f32.s32	q5, q4
34025c84:	ef24 8154 	vorr	q4, q2, q2
34025c88:	443c      	add	r4, r7
34025c8a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c8e:	ed94 6f00 	ldc	15, cr6, [r4]
34025c92:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025c96:	ffbb 8640 	vcvt.f32.s32	q4, q0
34025c9a:	ef24 0154 	vorr	q0, q2, q2
34025c9e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025ca2:	ffbb 0646 	vcvt.f32.s32	q0, q3
34025ca6:	ef24 6154 	vorr	q3, q2, q2
34025caa:	f8d5 c000 	ldr.w	ip, [r5]
34025cae:	f8d5 b004 	ldr.w	fp, [r5, #4]
34025cb2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025cb6:	ee3d 6e6c 	cdp	14, 3, cr6, cr13, cr12, {3}
34025cba:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025cbe:	ee3b 6e4b 	cdp	14, 3, cr6, cr11, cr11, {2}
34025cc2:	68ac      	ldr	r4, [r5, #8]
34025cc4:	eba9 0002 	sub.w	r0, r9, r2
34025cc8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025ccc:	ee39 6e44 	cdp	14, 3, cr6, cr9, cr4, {2}
34025cd0:	68ec      	ldr	r4, [r5, #12]
34025cd2:	ef22 8152 	vorr	q4, q1, q1
34025cd6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025cda:	ee31 6e44 	cdp	14, 3, cr6, cr1, cr4, {2}
34025cde:	ef22 0152 	vorr	q0, q1, q1
34025ce2:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025ce6:	ffbb 8046 	vcvta.s32.f32	q4, q3
34025cea:	466c      	mov	r4, sp
34025cec:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025cf0:	ef28 064e 	vmax.s32	q0, q4, q7
34025cf4:	ef22 6152 	vorr	q3, q1, q1
34025cf8:	ed94 9f00 	ldc	15, cr9, [r4]
34025cfc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025d00:	ef20 6658 	vmin.s32	q3, q0, q4
34025d04:	3a04      	subs	r2, #4
34025d06:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
34025d0a:	ed80 6f00 	stc	15, cr6, [r0]
34025d0e:	f00f c06f 	le	lr, 34025c36 <lite_bilinear_is8os8_kernel+0x3e>
34025d12:	b005      	add	sp, #20
34025d14:	ecbd 8b10 	vpop	{d8-d15}
34025d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

34025d1c <sniprintf>:
34025d1c:	b40c      	push	{r2, r3}
34025d1e:	4b19      	ldr	r3, [pc, #100]	@ (34025d84 <sniprintf+0x68>)
34025d20:	b530      	push	{r4, r5, lr}
34025d22:	1e0c      	subs	r4, r1, #0
34025d24:	b09d      	sub	sp, #116	@ 0x74
34025d26:	681d      	ldr	r5, [r3, #0]
34025d28:	da08      	bge.n	34025d3c <sniprintf+0x20>
34025d2a:	238b      	movs	r3, #139	@ 0x8b
34025d2c:	f04f 30ff 	mov.w	r0, #4294967295
34025d30:	602b      	str	r3, [r5, #0]
34025d32:	b01d      	add	sp, #116	@ 0x74
34025d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34025d38:	b002      	add	sp, #8
34025d3a:	4770      	bx	lr
34025d3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
34025d40:	9002      	str	r0, [sp, #8]
34025d42:	9006      	str	r0, [sp, #24]
34025d44:	a902      	add	r1, sp, #8
34025d46:	f8ad 3014 	strh.w	r3, [sp, #20]
34025d4a:	f04f 0300 	mov.w	r3, #0
34025d4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
34025d50:	4628      	mov	r0, r5
34025d52:	931b      	str	r3, [sp, #108]	@ 0x6c
34025d54:	bf14      	ite	ne
34025d56:	f104 33ff 	addne.w	r3, r4, #4294967295
34025d5a:	4623      	moveq	r3, r4
34025d5c:	9304      	str	r3, [sp, #16]
34025d5e:	9307      	str	r3, [sp, #28]
34025d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
34025d64:	f8ad 3016 	strh.w	r3, [sp, #22]
34025d68:	ab21      	add	r3, sp, #132	@ 0x84
34025d6a:	9301      	str	r3, [sp, #4]
34025d6c:	f7fb ffcc 	bl	34021d08 <_svfiprintf_r>
34025d70:	1c43      	adds	r3, r0, #1
34025d72:	bfbc      	itt	lt
34025d74:	238b      	movlt	r3, #139	@ 0x8b
34025d76:	602b      	strlt	r3, [r5, #0]
34025d78:	2c00      	cmp	r4, #0
34025d7a:	d0da      	beq.n	34025d32 <sniprintf+0x16>
34025d7c:	9b02      	ldr	r3, [sp, #8]
34025d7e:	2200      	movs	r2, #0
34025d80:	701a      	strb	r2, [r3, #0]
34025d82:	e7d6      	b.n	34025d32 <sniprintf+0x16>
34025d84:	3410ce2c 	.word	0x3410ce2c

34025d88 <checkint>:
34025d88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
34025d8c:	2b7e      	cmp	r3, #126	@ 0x7e
34025d8e:	d910      	bls.n	34025db2 <checkint+0x2a>
34025d90:	2b96      	cmp	r3, #150	@ 0x96
34025d92:	d80c      	bhi.n	34025dae <checkint+0x26>
34025d94:	2201      	movs	r2, #1
34025d96:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
34025d9a:	fa02 f303 	lsl.w	r3, r2, r3
34025d9e:	1e5a      	subs	r2, r3, #1
34025da0:	4202      	tst	r2, r0
34025da2:	d106      	bne.n	34025db2 <checkint+0x2a>
34025da4:	4203      	tst	r3, r0
34025da6:	bf14      	ite	ne
34025da8:	2001      	movne	r0, #1
34025daa:	2002      	moveq	r0, #2
34025dac:	4770      	bx	lr
34025dae:	2002      	movs	r0, #2
34025db0:	4770      	bx	lr
34025db2:	2000      	movs	r0, #0
34025db4:	4770      	bx	lr
	...

34025db8 <powf>:
34025db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
34025dba:	ee10 1a10 	vmov	r1, s0
34025dbe:	ee10 4a90 	vmov	r4, s1
34025dc2:	eef0 7a40 	vmov.f32	s15, s0
34025dc6:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
34025dca:	0063      	lsls	r3, r4, #1
34025dcc:	eeb0 7a60 	vmov.f32	s14, s1
34025dd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
34025dd4:	f103 30ff 	add.w	r0, r3, #4294967295
34025dd8:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
34025ddc:	d252      	bcs.n	34025e84 <powf+0xcc>
34025dde:	4290      	cmp	r0, r2
34025de0:	d258      	bcs.n	34025e94 <powf+0xdc>
34025de2:	2000      	movs	r0, #0
34025de4:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
34025de8:	4a9f      	ldr	r2, [pc, #636]	@ (34026068 <powf+0x2b0>)
34025dea:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
34025dee:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
34025df2:	f3c3 44c3 	ubfx	r4, r3, #19, #4
34025df6:	f36f 0316 	bfc	r3, #0, #23
34025dfa:	1ac9      	subs	r1, r1, r3
34025dfc:	eb02 1404 	add.w	r4, r2, r4, lsl #4
34025e00:	15db      	asrs	r3, r3, #23
34025e02:	ee07 1a90 	vmov	s15, r1
34025e06:	ed94 4b00 	vldr	d4, [r4]
34025e0a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
34025e0e:	ee07 3a90 	vmov	s15, r3
34025e12:	ed94 5b02 	vldr	d5, [r4, #8]
34025e16:	eea4 2b06 	vfma.f64	d2, d4, d6
34025e1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
34025e1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
34025e22:	ee36 6b05 	vadd.f64	d6, d6, d5
34025e26:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
34025e2a:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
34025e2e:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
34025e32:	ee22 4b02 	vmul.f64	d4, d2, d2
34025e36:	eea2 1b05 	vfma.f64	d1, d2, d5
34025e3a:	ee24 0b04 	vmul.f64	d0, d4, d4
34025e3e:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
34025e42:	eea2 5b03 	vfma.f64	d5, d2, d3
34025e46:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
34025e4a:	eea2 6b03 	vfma.f64	d6, d2, d3
34025e4e:	eea4 6b05 	vfma.f64	d6, d4, d5
34025e52:	eea1 6b00 	vfma.f64	d6, d1, d0
34025e56:	ee27 7b06 	vmul.f64	d7, d7, d6
34025e5a:	ee17 3a90 	vmov	r3, s15
34025e5e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
34025e62:	f248 03bf 	movw	r3, #32959	@ 0x80bf
34025e66:	429a      	cmp	r2, r3
34025e68:	f0c0 8098 	bcc.w	34025f9c <powf+0x1e4>
34025e6c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 34026048 <powf+0x290>
34025e70:	eeb4 7bc6 	vcmpe.f64	d7, d6
34025e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025e78:	dd79      	ble.n	34025f6e <powf+0x1b6>
34025e7a:	b003      	add	sp, #12
34025e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34025e80:	f7fd b862 	b.w	34022f48 <__math_oflowf>
34025e84:	4290      	cmp	r0, r2
34025e86:	d330      	bcc.n	34025eea <powf+0x132>
34025e88:	b12b      	cbz	r3, 34025e96 <powf+0xde>
34025e8a:	0049      	lsls	r1, r1, #1
34025e8c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
34025e90:	d808      	bhi.n	34025ea4 <powf+0xec>
34025e92:	e015      	b.n	34025ec0 <powf+0x108>
34025e94:	b953      	cbnz	r3, 34025eac <powf+0xf4>
34025e96:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
34025e9a:	0049      	lsls	r1, r1, #1
34025e9c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
34025ea0:	f240 80ca 	bls.w	34026038 <powf+0x280>
34025ea4:	ee37 0a87 	vadd.f32	s0, s15, s14
34025ea8:	b003      	add	sp, #12
34025eaa:	bd30      	pop	{r4, r5, pc}
34025eac:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
34025eb0:	d105      	bne.n	34025ebe <powf+0x106>
34025eb2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
34025eb6:	0064      	lsls	r4, r4, #1
34025eb8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
34025ebc:	e7f0      	b.n	34025ea0 <powf+0xe8>
34025ebe:	0049      	lsls	r1, r1, #1
34025ec0:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
34025ec4:	d1ee      	bne.n	34025ea4 <powf+0xec>
34025ec6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34025eca:	f000 80b5 	beq.w	34026038 <powf+0x280>
34025ece:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
34025ed2:	ea6f 0404 	mvn.w	r4, r4
34025ed6:	bf34      	ite	cc
34025ed8:	2100      	movcc	r1, #0
34025eda:	2101      	movcs	r1, #1
34025edc:	0fe4      	lsrs	r4, r4, #31
34025ede:	42a1      	cmp	r1, r4
34025ee0:	f040 80ad 	bne.w	3402603e <powf+0x286>
34025ee4:	ee27 0a07 	vmul.f32	s0, s14, s14
34025ee8:	e7de      	b.n	34025ea8 <powf+0xf0>
34025eea:	004d      	lsls	r5, r1, #1
34025eec:	1e6b      	subs	r3, r5, #1
34025eee:	4293      	cmp	r3, r2
34025ef0:	d31b      	bcc.n	34025f2a <powf+0x172>
34025ef2:	2900      	cmp	r1, #0
34025ef4:	ee20 0a00 	vmul.f32	s0, s0, s0
34025ef8:	da0e      	bge.n	34025f18 <powf+0x160>
34025efa:	4620      	mov	r0, r4
34025efc:	f7ff ff44 	bl	34025d88 <checkint>
34025f00:	2801      	cmp	r0, #1
34025f02:	d109      	bne.n	34025f18 <powf+0x160>
34025f04:	eeb1 0a40 	vneg.f32	s0, s0
34025f08:	b945      	cbnz	r5, 34025f1c <powf+0x164>
34025f0a:	2c00      	cmp	r4, #0
34025f0c:	dacc      	bge.n	34025ea8 <powf+0xf0>
34025f0e:	b003      	add	sp, #12
34025f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34025f14:	f7fd b81e 	b.w	34022f54 <__math_divzerof>
34025f18:	2000      	movs	r0, #0
34025f1a:	e7f5      	b.n	34025f08 <powf+0x150>
34025f1c:	2c00      	cmp	r4, #0
34025f1e:	dac3      	bge.n	34025ea8 <powf+0xf0>
34025f20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
34025f24:	ee87 0a80 	vdiv.f32	s0, s15, s0
34025f28:	e7be      	b.n	34025ea8 <powf+0xf0>
34025f2a:	2900      	cmp	r1, #0
34025f2c:	da1d      	bge.n	34025f6a <powf+0x1b2>
34025f2e:	4620      	mov	r0, r4
34025f30:	f7ff ff2a 	bl	34025d88 <checkint>
34025f34:	b920      	cbnz	r0, 34025f40 <powf+0x188>
34025f36:	b003      	add	sp, #12
34025f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34025f3c:	f7fd b81c 	b.w	34022f78 <__math_invalidf>
34025f40:	1e43      	subs	r3, r0, #1
34025f42:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34025f46:	4258      	negs	r0, r3
34025f48:	4158      	adcs	r0, r3
34025f4a:	0400      	lsls	r0, r0, #16
34025f4c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
34025f50:	f4bf af48 	bcs.w	34025de4 <powf+0x2c>
34025f54:	eddf 6a45 	vldr	s13, [pc, #276]	@ 3402606c <powf+0x2b4>
34025f58:	ee27 0aa6 	vmul.f32	s0, s15, s13
34025f5c:	ee10 3a10 	vmov	r3, s0
34025f60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34025f64:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
34025f68:	e73c      	b.n	34025de4 <powf+0x2c>
34025f6a:	2000      	movs	r0, #0
34025f6c:	e7ee      	b.n	34025f4c <powf+0x194>
34025f6e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 34026050 <powf+0x298>
34025f72:	eeb4 7bc6 	vcmpe.f64	d7, d6
34025f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025f7a:	dd45      	ble.n	34026008 <powf+0x250>
34025f7c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
34025f80:	b3d0      	cbz	r0, 34025ff8 <powf+0x240>
34025f82:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
34025f86:	9301      	str	r3, [sp, #4]
34025f88:	eddd 6a01 	vldr	s13, [sp, #4]
34025f8c:	ee76 6a66 	vsub.f32	s13, s12, s13
34025f90:	eef4 6a46 	vcmp.f32	s13, s12
34025f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34025f98:	f47f af6f 	bne.w	34025e7a <powf+0xc2>
34025f9c:	4b34      	ldr	r3, [pc, #208]	@ (34026070 <powf+0x2b8>)
34025f9e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
34025fa2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
34025fa6:	ee37 6b05 	vadd.f64	d6, d7, d5
34025faa:	ee16 2a10 	vmov	r2, s12
34025fae:	ee36 6b45 	vsub.f64	d6, d6, d5
34025fb2:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
34025fb6:	ee37 7b46 	vsub.f64	d7, d7, d6
34025fba:	f002 011f 	and.w	r1, r2, #31
34025fbe:	1880      	adds	r0, r0, r2
34025fc0:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
34025fc4:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
34025fc8:	ee27 4b07 	vmul.f64	d4, d7, d7
34025fcc:	2100      	movs	r1, #0
34025fce:	686d      	ldr	r5, [r5, #4]
34025fd0:	190a      	adds	r2, r1, r4
34025fd2:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
34025fd6:	eea7 6b05 	vfma.f64	d6, d7, d5
34025fda:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
34025fde:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
34025fe2:	eea7 0b05 	vfma.f64	d0, d7, d5
34025fe6:	ec43 2b17 	vmov	d7, r2, r3
34025fea:	eea6 0b04 	vfma.f64	d0, d6, d4
34025fee:	ee20 0b07 	vmul.f64	d0, d0, d7
34025ff2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34025ff6:	e757      	b.n	34025ea8 <powf+0xf0>
34025ff8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
34025ffc:	9300      	str	r3, [sp, #0]
34025ffe:	eddd 6a00 	vldr	s13, [sp]
34026002:	ee76 6a86 	vadd.f32	s13, s13, s12
34026006:	e7c3      	b.n	34025f90 <powf+0x1d8>
34026008:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 34026058 <powf+0x2a0>
3402600c:	eeb4 7bc6 	vcmpe.f64	d7, d6
34026010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34026014:	d804      	bhi.n	34026020 <powf+0x268>
34026016:	b003      	add	sp, #12
34026018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3402601c:	f7fc bf88 	b.w	34022f30 <__math_uflowf>
34026020:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 34026060 <powf+0x2a8>
34026024:	eeb4 7bc6 	vcmpe.f64	d7, d6
34026028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3402602c:	d5b6      	bpl.n	34025f9c <powf+0x1e4>
3402602e:	b003      	add	sp, #12
34026030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
34026034:	f7fc bf82 	b.w	34022f3c <__math_may_uflowf>
34026038:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
3402603c:	e734      	b.n	34025ea8 <powf+0xf0>
3402603e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 34026074 <powf+0x2bc>
34026042:	e731      	b.n	34025ea8 <powf+0xf0>
34026044:	f3af 8000 	nop.w
34026048:	ffd1d571 	.word	0xffd1d571
3402604c:	405fffff 	.word	0x405fffff
34026050:	ffa3aae2 	.word	0xffa3aae2
34026054:	405fffff 	.word	0x405fffff
34026058:	00000000 	.word	0x00000000
3402605c:	c062c000 	.word	0xc062c000
34026060:	00000000 	.word	0x00000000
34026064:	c062a000 	.word	0xc062a000
34026068:	34108b68 	.word	0x34108b68
3402606c:	4b000000 	.word	0x4b000000
34026070:	34107e50 	.word	0x34107e50
34026074:	00000000 	.word	0x00000000

34026078 <_init>:
34026078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3402607a:	bf00      	nop
3402607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3402607e:	bc08      	pop	{r3}
34026080:	469e      	mov	lr, r3
34026082:	4770      	bx	lr

34026084 <_fini>:
34026084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34026086:	bf00      	nop
34026088:	bcf8      	pop	{r3, r4, r5, r6, r7}
3402608a:	bc08      	pop	{r3}
3402608c:	469e      	mov	lr, r3
3402608e:	4770      	bx	lr

34026090 <app_clean_invalidate_dbg>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
34026090:	2300      	movs	r3, #0
34026092:	4a13      	ldr	r2, [pc, #76]	@ (340260e0 <app_clean_invalidate_dbg+0x50>)
}
#endif

/* Allow to debug with cache enable */
__attribute__ ((section (".keep_me"))) void app_clean_invalidate_dbg()
{
34026094:	b570      	push	{r4, r5, r6, lr}
34026096:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3402609a:	f3bf 8f4f 	dsb	sy
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3402609e:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
    ccsidr = SCB->CCSIDR;
340260a2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
340260a6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
340260aa:	f3c3 334e 	ubfx	r3, r3, #13, #15
340260ae:	015b      	lsls	r3, r3, #5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
340260b0:	f100 0e01 	add.w	lr, r0, #1
340260b4:	4601      	mov	r1, r0
340260b6:	f04e e001 	dls	lr, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
340260ba:	ea03 0604 	and.w	r6, r3, r4
340260be:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
340260c2:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
340260c6:	3901      	subs	r1, #1
340260c8:	f00f c807 	le	lr, 340260be <app_clean_invalidate_dbg+0x2e>
    } while(sets-- != 0U);
340260cc:	3b20      	subs	r3, #32
340260ce:	f113 0f20 	cmn.w	r3, #32
340260d2:	d1ed      	bne.n	340260b0 <app_clean_invalidate_dbg+0x20>
340260d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
340260d8:	f3bf 8f6f 	isb	sy
  SCB_CleanInvalidateDCache();
}
340260dc:	bd70      	pop	{r4, r5, r6, pc}
340260de:	bf00      	nop
340260e0:	e000ed00 	.word	0xe000ed00

Disassembly of section .gnu.sgstubs:

34026100 <SECURE_SystemCoreClockUpdate>:
34026100:	e97f e97f 	sg
34026104:	f7ea bb68 	b.w	340107d8 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
